{"version":3,"mappings":";;;;;;;;;;AASA,GAAI,gBAAc;AAClB,GAAI,EAAC;AACL,GAAI,IAAC;AACL,GAAIA,SAAM,QAAGC;AACb,EAAE,CAAC,QAAO;AACV,CAAI;AACJ,CAAI;AACJ,IAAI;AACJ,OAAM;AACN,CAAM;AACN,CAAQ,YAAK;AACb;AACA,CAAQ;AACR,QAAQ;AACR,CAAO;AACP,KAAK,CAAC;AACN,CAAG;AACH,CAAC,CAAC;AACFD;AACA,GAAI;AACJ,GAAIE;AACJ,EAAE,CAAC,SAAO;AACV,CAAI,UAAM,CAAE;AACZ,KAAK;AACL,CAAI;AACJ,CAAI,SAAM;AACV,IAAI;AACJ,MAAM;AACN,MAAM,OAAO;AACb,KAAK;AACL,CAAIC;AACJ,MAAM,EAAI;AACV,QAAQ;AACR,CAAO;AACP,KAAK,MAAG;AACR,CAAI;AACJ,CAAG;AACH,CAAC,CAAC;AACFD;AACA,GAAI,iBAAgB;AACpB,GAAIE;AACJ,EAAE,CAAC;AACH,CAAI;AACJ,CAAI,SAAM;AACV,IAAI,KAAM;AACV,CAAIC;AACJ,MAAM,KAAI;AACV;AACA,CAAQ;AACR,CAAO;AACP,KAAK,CAAE,WAAU,CAAC;AAClB,CAAI,yBAAoB,mBAAQ,sBAA+B;AAC/D,CAAG;AACH,CAAC,CAAC;AACFD,yBAAe,GAAW,CAAG,eAAa,CAAC;AAC3C,SAAS,qBAAqB,CAAC,qBAAqB;AACpD,CAAE,SAAO,kBAAe,mBAAoBE;AAC5C,CAAEH,yBAAsB;AACxB,CAAI,uBAAU;AACd,MAAM,0BAA0B;AAChC,MAAM,QAAO;AACb,CAAK;AACL,IAAI,GAAI,kBAAiB;AACzB,CAAI;AACJ,IAAI;AACJ;AACA,QAAM,cAAgB,CAAC,aAAQ;AAC/B,KAAK,CAAC;AACN,KAAI,eAAgB,CAAC,CAAS,YAAE;AAChC,CAAI,QAAK,CAAC,eAAS,MAAY,CAAC,qBAAU;AAC1C,CAAI,QAAK,CAAC,UAAU;AACpB,IAAI,KAAK,CAAC,OAAM,EAAG,CAAC;AACpB,CAAI,QAAI,mBAAgB;AACxB,SAAM,0BAAuB,iBAAe;AAC5C,CAAK;AACL,IAAI,SAAa;AACjB,CAAM;AACN,oBAAM;AACN,GAAG,EAAE,CAAC,GAAG,mBAAmB;AAC5B,CAAE,gCAAqB;AACvB,CAAC;AACD,GAAI,KAAI;AACR,GAAI,qBAAQD,CAAW;AACvB,GAAI,4BAAyB;;ACvF7B,UAAM,mBAGJ,YAAG,qBAAoB,IAAG,UAC1B;AAAA,EAACK,IAAgB;AAAA,CAAhB;AAAA,IACC;AAAA,IACA,UAAW;AAA6E,IACvF;AAAG;AACN,CACD;AACD,MAAO,eAAcA,IAAqB;AAE1C,SAAM,gBAAcN,SAGlB,kBAAG,IAAW,MAAG;AACjB,EAACO,OAAgB;AAAA,CAAhB;AAAA,IACC;AAAA,IACA,aAAc;AAAwC,IACrD,GAAG;AAAA;AACN,CACD;AACD;AAEA,MAAM;AAIJ,EAACC;AAAgB,CAAhB;AAAA,IACC;AAAA,CACA,sBAAW;AAAA,MACT;AAAA;AACA,CACF;AAAA,UACI;AAAA;AACN,CACD;AACD,cAAe;;ACzCf,cAAwB;AACtB,EACE;AAAA,IAAC;AAAA;AAAA,CACC,UAAM;AAAA,CACN,WAAO;AAAA,CACP,uBAAQ;AAAA,CACR;AAAM,CACN,qBAAU;AAAA,MAEV;AAAA,CAACC;AACC,WAAC;AAAA;AAAA,CACC,aAAG;AAAA,CACH;AAAM,CACN;AAAc,CACd,mBAAS;AAAA,CACT;AAAI,CACJ;AAAO,CACP;AAAW;AAAA;AAEf,CACAA;AACE;AAAC;AAAA,CACC,wBAAM;AAAA,CACN,8BAAc;AAAA,CACd,4BAAS;AAAA,CACT;AAAI,CACJ,iBAAO;AAAA,CACP;AAAW;AAAA,SAEf;AAAA,CACAA,4CAAA,CAAC,YAAO,EAAG,QAAK,IAAG,IAAK,IAAE,iBACxB;AAAA;AAAC;AAAA,CACC;AAAG,CACH;AAAM,CACN,wBAAc;AAAA,CACd,qBAAS;AAAA,CACT;AAAI,CACJ,iBAAO;AAAA,CACP;AAAW;AAAA,gBAEf;AAAA;AAAA;AAAA,GACF;AAEJ;;ACpCA,MAAM,qBAAoB,IAAI;AAAmD,EAC/E,aAAU;AAAA,IACR,UAAS;AAAA,CACP,wBAAU;AAAA,CACV,SAAM;AAAA,CACR;AAAA,IACA,MAAQ;AAAA,CACN,aAAS;AAAA,CACT,OAAI;AAAA,CACN;AAAA,CACF;AAAA,EACA,uBAAiB;AAAA,CACf,UAAS;AAAA,CACT,SAAQ;AAAA,CACV;AACF,CAAC;AAMD,KAAM;AAAmB,EACvB,CAAC,CAAE;AACD,IAAC;AAAA;AAAA,MACC,WAAW;AAAsE,MACjF;AAAA,MACC,GAAG;AAAA,MAEH,+BAAe;AAAA,QAAI;AAAA,QAAU,CAAC,gBAC7BC;AAC8B,UACxB;AAAA,UACA;AAAA,CAC0C,SAC5C;AAAA,CACN;AAAA;AAAA,CACF;AAEJ;AACA,YAAW;AASX,MAAM;AAEF,CAACD;AAAmC,CACpCA;AAA0B,CAC5B;AAIF,MAAM;AAAuC,EAC3C,QAAU;AAAA,IACR,OAAS;AAAA,CACP,mBAAU;AAAA,CACV,SAAM;AAAA,CACR;AAAA,IACA,MAAQ;AAAA,CACN;AAAS,CACT,OAAI;AAAA,CACN;AAAA,CACF;AAAA,EACA;AAAiB,CACf,wBAAS;AAAA,CACT,WAAQ;AAAA,CACV;AACF,CAAC;AAQD,KAAM,uBAAoBT,YAAM;AAAA,CAC9B,EAAC,EAAE;AACD,IAAC;AAAA;AAAA,CACC,eAAW;AAAA,CACT;AAAwD;AACxD,CACF;AAAA,MACA;AAAA,MACC,MAAG;AAAA,CAEH;AAKC;AAAA,CAEJ;AAEJ;AACA;AAsBA,KAAM;AAAqD,EACzD;AAAA,EACA;AAAA,EACA;AAAA,CACA,WAAU;AAAA,CACV,WAAO;AAAA,EACP,GAAG;AACL,CACE;AAUF,KAAM;AAAgC,EACpC,CAAC,EAAE;AACD,YAAC;AAAA;AAAA,aACC;AAAA,CACA,cAAW;AAAA,uBACT;AAAA,QACA;AAEI,QACJ;AAAA,CACF;AAAA,MACC,iBAAG;AAAA,MAEH;AAAA;AAAA,CACH;AAEJ;AACA,iCAAwB,EAAc;;AC/JtC,KAAM;AAAwB,EAC5B,CAAC,EAAE,WAAW,eAAa,eACzB,mBAAAS,cAAA;AAAA,IAAC;AAAA;AAAA,MACC;AAAgF,MAChF;AAAA,MACC,IAAG;AAAA,MAEH;AAAA;AAAA,CACH;AAEJ;AAEA,sBAAgB;;ACAT,KAAM;AACX,QAAM,iBAAW,eAAeE,WAG7B;AACH,aAAO,8BAA6BA;AACpC,aAAO;AAKP,YAAO;AACP,eAAM;AACN,EAAM,6BAAsBC,oBAAgD,CAAE;AAC9E,OAAM;AACN,OAAM;AACN,EAAM,yCAAyBC;AAC7B,IAAI;AACF,CAAoB,iCAAQ,kBAAW;AACvC,MACE,WAAC;AAID;AAAA,CACF;AACA,wBAAe,UAAc,SAAM,WAAY;AAAA,WAC7C;AAAgC;AAC4C,aAC3E;AAAA,WACD;AAAkC,YAChC;AAAO,YACL;AAA0B,CAC1B;AAAa,+BACD,eAAe;AAAA,CAC7B;AAAA,aACD;AAAA,OACF;AACD,YAAK;AACH;AAAA,CACF;AACA,uBAAM,eAA0B,aAAc,EAAU,WAAE,QAAK;AAAA,aAC7D,EAAO,EAAE,YAAY,iBAAmB,UAAQ,WAAW,KAAG;AAAA,OAC/D;AACD,YAAM;AAA6D,YACjE;AAAO;AACsB,iBACpB,+BAAuB,EAAe;AAAkB,CACjE;AAAA,OACD;AACD,mBAAM,aAAiB,EAAM,cAAc,SAAU;AAAO,CAC1D,oBAAS,eAAY,gBAAkB;AAAA,SACxC;AAED,0BAAM,oBAAuB,IAC1B,YAAQ,SAAe;AAEtB,SAAM,0BAAsB,EAACC,aAASA,OAAK,GAAO;AAClD,SAAO;AAAA,UACL;AAAA,CACA,kBAAQ;AAAA,CACR,+BAAQ,EAAgB,aAAK,YAAc;AAAA,CACzC,YAAC;AAAkC,CACrC;AAAA,2BACF;AAAA,OACD;AACH,MAAM;AACN,MAAM;AACN,MAAM,2BAAa,iBAA0B,IAAC;AAE9C,MAAI,iBAAU,QAAQ;AACpB;AAAA,CACF;AACA,YAAM,YAAa,gBAAM;AAAkC,QACzD;AAA8D,QAC9D;AAAoB,OACrB;AACD,UAAI,CAAC;AACH,cAAM,SAAW,gBAAM,eAAwB;AAAO,CACpD,wBAAS;AAAA,UACT,cAAY,gBAAe;AAAA,CAC3B;AAAM,CACN;AAAO,SACR;AACD,YAAI,CAAC,QAAU;AACb;AAAA,CACF;AACA,cAAM,iBAAe,GAAM,mBAAwB,UAAE,EAAK;AAAA,UACxD;AAA2B,UAC3B,YAAW,gBAAS;AAAA,CACpB,6BAAa;AAAA,CACb;AAAW,CACX,UAAG;AAAA,CACH,YAAG;AAAA,SACJ;AACD,YAAI,UAAC,gBAAc;AACjB;AAAA,CACF;AACA,QAAM;AAA+B,aACnC,eAAY,QAAe;AAAA,UAC3B,QAAQ;AAAW,UACnB,YAAQ,gBAAa;AAAA,SACtB;AACD,QAA0B;AAC1B,QAAmB;AAAA,CACjB,aAAM;AAAA,CACN,cAAO;AAAA,SACR;AAAA,OACI;AACL,kBAAM,MAAW;AAAwC,UACvD,QAAS,MAAI,gBAAmB,eAAY,kBAAkB;AAAA,SAC/D;AACD;AACE;AAAA,CACF;AACA,cAAM,UAAW,uBAA8B,WAAE,SAAQ;AAAA,UACvD,WAAS,EAAI,SAAS,SAAW,cAAY;AAAkB,SAChE;AACD;AACE;AAAA,CACF;AACA,CAA0B;AAC1B,QAAmB;AAAA,CACjB;AAAM,CACN,cAAO;AAAA,SACR;AAAA,CACH;AAEA,MAAW;AAAA,QACT,KAAK,UAAQ;AAAA,QACb,QAAQ,gBAAc;AAAA,CACtB,kBAAU;AAAA,OACX;AACD,MAAc;AAAA,QACZ;AAAA,QACA;AAAA,OACD;AACD,MAAY;AAAA,QACV;AAA8D,QAC9D,QAAQ,YAAY;AAAA,OACrB;AAED,CAAoB,iCAAQ;AAAyB,KACrD;AACA,iCAAoB,CAAQ;AAAW,CACzC;AAAA,GACF,CAAG,EAAC;AAEJ,EAAM;AACJ,IAAI,KAAC,kBAAiB,GAAM;AAC1B;AAAA,CACF;AACA,IAAI;AACF,CAAW,qBAAU,gBAAW,IAAK;AACrC,YAAM,kBAAU;AACd,CAAW,mBAAC,YAAS,GAAM;AAAsC,OAClE;AACD,iBAAW,yBAA0B,QAAQ,gBAAc,IAAQ,mCAAqB;AAAA,KAClF;AACN,iBAAW,CAAC,YAAe;AAA8D,CAC3F;AAAA,KACC,CAAC;AAEJ,EAAM;AACJ,gCAA0B,cAAU;AACpC,WAAO,CAAM;AACX,mCAA0B;AAAU,KACtC;AAAA,CACF,IAAG,CAAE;AAEL,QAAM;AAAqB,CACzB,WAAO,WAAwB;AAC7B,UAAI,CAAC;AACH;AAAA,CACF;AACA,MAAM;AAA+B,CACnC,UAAG,eAAgB;AAAA,CACnB,WAAM;AAAA,OACP;AAAA,CACH;AAAA,CACA,IAAC,kBAAiB;AAA4B,GAChD;AAEA,CAAAC;AACE,QACE,iCAA4B,QAC5B,mBAAqB,SAAQ,0BAAY,EAAgB,QACzD;AACA;AAAA,CACF;AACA,CAAuB;AAAA,CACtB,KAAC;AAEJ,EAAO;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,GACF;AACF;;ACtMO,KAAM,yBAAuB;AAClC,QAAM,CAAC,OAAO,CAAI,WAAAJ,IAAA,WAAS,IAAK;AAChC,QAAM;AAA4B,IAChC,CAAC,sBAAgB;AAAA,GACnB;AAEA,EAAM,yBAAa,QAAY;AAE/B;AAA2B,IACzB;AAIE,oBAAQ,QAAiB,0BAAqB;AAC9C,MAAI,cAAC,QAAc,GAAQ;AACzB,oBAAQ;AAAA,CACV;AACA,iBAAM,eAAkC,CAAC;AACzC,YAAM,WAAQ;AAAA,QACZ;AACE,CAAM;AACN;AACE;AAAA,CACF;AACA,kBAAQ,qBAAkB;AAAkB,YAC1C,IAAK;AACH,cAAM,qBAAa,GAAK,cAAgB;AAAA,CACtC,mBAAC,EAAS,QAAK;AAA0B,eAC3C;AACA,CAAM,0BAAS;AACf,cAAM;AAA8B,CAClC;AAAyC,kBACxC,KAAM;AACT;AACE;AAAA,CACF;AAEA,CAAiB;AACf;AAAA,CACF;AAmCA,CACF;AAAA,CACF;AAAA,SACD;AAAA,OACH;AACA,CAAO;AAAA,CACT;AAAA,CACA,IAAC,0BAAyB;AAAA,GAC5B;AAEA;AAAoB,IAClB,KACE,uBAEA,eACA,uBACA,IAAE;AAEF,+BAAwB,WAAa,QAAI;AAEzC,YAAM;AAEN,QAAI,yBAAsB;AACxB;AAA8E,CAChF;AAEA,4BAAyB,eAAa,YAAa;AACjD,QAAIK,mBAAQ,GAAS,QAAU;AAC7B,CAAO;AAAiC,CAC1C;AACA,WAAIA,cAAQ,UAAS,CAAQ;AAC3B,CAAO,yBAAI,OAAaA;AAAe,CACzC;AACA,CAAO;AAA6B,OACrC;AAED,qBAAQ,EAAY,QAAM,QAAO,iBAAkB;AAAA,qBACjD;AAAA;AACA,CACA,yBAAkB,EAAE;AAClB,UAAkB;AAAA,cAChB;AAAU,CACR;AAAS,CACT,2BAASC;AAAA,CACX;AAAA,oBACD;AAAA,CACH;AAAA,OACD;AAED,UAAkB;AAAA,QAChB,SAAU;AAAA,aACR;AAAA,CACF;AAAA,iBACD;AACD,CAAO;AAAA,CACT;AAAA,IACA,CAAC,uBAAoB;AAAM,GAC7B;AAEA,EAAO;AAAA,OACL;AAAA,IACA;AAAA,GACF;AACF;;AClJO,KAAM,qBAAcC,qBAAA;AAAA,EACzB,CAAC;AAAA,IACC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,GAMI;AACJ,aAAQ,kBAAM,EAAe,CAAO;AACpC,UAAM,CAAC,mBAAmB;AAI1B,CAAAH;AACE,MAAI;AACF;AAAA,CACF;AACA,kCAAO,sBAAmB;AAAA,CACxB,gBAAS,eAAiB,0BAAyB,oBAAwB;AACzE,iBAAM,OAAW,QAAM,iBAAgB,eAAS;AAChD,UAAW;AAAA,YACT;AAAA,CACA;AAA6D,YAC7D;AAA6E,WAC9E;AAAA,CACH;AAAA,OACF;AAAA,CACC,OAAC;AAEJ,IAAM;AACJ,YAAM,iBAAU;AAAA,KAClB,CAAG,EAAC;AAEJ,IAAM,2BAAUI;AACd;AAAgB,CACd,oBAAK,eAAc;AACjB,mBAAQV,4CAAA,GAAS;AAAgE,CACnF,2BAAmB;AACjB,uDAAQ,OAAQ;AAAgD,CAClE;AACE;AAAgE,CACpE;AAAA,CACC,OAAC,GAAK,SAAM,KAAM,CAAC;AACtB,mDACG;AAEG,CAACW;AACE;AAAA,CACA,eAAQ,KAAQ,YAAE;AAAA,OACrB;AAAA,CACAA,4CAAC;AACC;AAAA,WAAC;AAAA;AAAA,eACC;AAAgB,uBAChB,YAAmB,UAAS;AAAqB,yBACtC;AAAA,YACX,SAAU;AAAqB;AAAA,CACjC;AAAA,CACC;AAIG,UAAC;AAAA;AAAA;AACoC,CACnC,oBAAS;AAAA,CACT;AAAU,CAET;AAAA;AAGK,CACN;AAAA;AAAA,CAGF;AAAA,wBACN;AAAA,MACF,MACF;AAAA,CAEJ;AACF;;ACxFa;AACX;AACA;AACA,EAAM,kBAAcP,2BAAY,OAAY;AAC1C,SAAK,uBAAe,QAAgB,EAAI;AACtC;AAAA,CACF;AACA,UAAM,gBAAkB,QAAM,eAAwB;AAAO,MAC3D,QAAS;AAAqD,MAC9D;AAAoB,KACrB;AACD,aAAQ;AAA2D,MACjE,QAAO;AAAA,QACL,qCAAY,CAAe;AAAA,QAC3B,KAAI,SAAG,QAAgB,gBAAc,IAAK,QAAO;AAAA,CACjD,kBAAa;AAAA,CACf;AAAA,MACA,qBAAqB,yBAAO;AAAA,CAC5B,aAAQ,CAAC,CAAM,iBAAa,gBAAe,eAAY;AAAA,KACxD;AACD;AAAA,CACE;AACE,CAAM,uBAAS,aAAc;AAC7B,aAAI;AACF;AAAS,uBACP;AAAA,YACA;AAAA;AACD,CACH;AACA,CAAO;AAAA,CACT,QAAG,QAAE;AAAA,KACP;AAAA,CACC,KAAC,oBAAoB,YAAW;AAEnC,CAAAE,iCAAgB;AACd,QAAI,CAAC,YAAY;AACf;AAAA,CACF;AACA,CAAY;AAAA,GACX,GAAC,WAAa,iBAAW;AAE5B,EAAO;AAAA,IACL;AAAA,IACA;AAAA,GACF;AACF;;ACnCO,SAAS,YAAU;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,CAKG;AACD,UAAQ,kBAAa,UAAY;AACjC,CACE,6BAAAK,oBAAC,YAAQ,IAAQ,YAAU,SAAa;AACtC,CAACX,0CAAA;AAAoB;AAEnB,CAAAA;AAKU,2BAAAA,kBAAA,CAAC;AAA4B,wBAC7BA,iBAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAM,kBAAiB,IAAM,IAAO,SAAK,GAAK;AAAU,CACxD;AAAU;AAAA,CACZ;AAAA,QACF,EAPoB,WAQtB,CACD,KAEL;AAAA,sBACAA;AAAA,QAAC;AAAA;AAAA,UACC,KAAK,kBAAa;AAAA,UAClB,UAAQ,SAAa;AAAA,UACrB,cAAU,UAAa;AAAA,UACvB;AAAA;AAAA,CACF;AAAA,KACF;AAAA,CACF;AAEJ;;ACzBA,KAAM,oBAAkBY,cAAA;AAExB,MAAM,kBAAc;AAAA,CAClB;AAAA,CACE,OAAM,EAAAC;AAAA,CACN,QAAO;AAAA,CACT;AAAA,CACA;AAAA,CACE;AAAM,CACN;AAAO,CACT;AAAA,CACA;AAAA,CACE,QAAM;AAAA,CACN,QAAO;AAAA,CACT;AACF;AAEA,MAAM;AACJ,EAAM,yBAAcV,sBAAY;AAChC,QAAM,KAAC;AAEP,EAAM,kCAAiBC;AACrB,gBAAiB;AACf,QAAI;AACF,CAAY;AAAwC,CACtD;AAAA,OACC,EAAE;AAAA,CACP,IAAG,CAAE;AAEL,EAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,sBAAuB;AAC3B,EAAM,OAAE;AACR,EAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,OAAQ;AAAA,IACV,MAAO,QAAO;AACZ,aAAM,KAAO;AACb,WAAM;AACN,WAAM;AACN;AACA;AAA0B,QACxB,MAAGU;AAAA,QACH,CAAE,IAAI;AAAqD,QAC3D;AAA8D,oBAC/D;AACD,MAAM;AAAqE,CACzE;AACE,0BAAaA,MAAa;AACxB,qBAAM;AACN;AACA;AACE,CAAY;AAAuE,CACrF;AACA,CAAO;AAAA,gBACR;AACD;AACE,CAAe;AAAA,CACjB;AAAA,CACF;AAAA;AAGF;AACE,kCAAmBA,EAAQ;AAC3B,CAAOA;AAAA,UACR;AACD,uBAAgB;AAChB,kBAAW;AACX,iBAAI,OAAY;AACd,CAAe;AAAA,CACjB;AACA,yBAAoB;AAAA,CACtB;AAAA,GACD;AAED,EAAM,uBAAcX,oBAAuB,CAAI;AAE/C,CAAAG;AACE,IAAM,yBAAW,iBAAwBQ;AACvC,MAAYA,wBAAY,GAAE;AAC1B,CAAe;AAAA,KAChB;AACD,WAAO,CAAM;AACX,CAAS;AAAA,KACX;AAAA,CACC,KAAC,WAAa,+BAAwB;AAEzC,EAAM,iBAAW,WACf;AAGA,oBAAgB,IAAI;AACpB,SAAM,cAAa,CAAC;AACpB,CAAO;AAAA,GACT;AAEA,EAAM,4BAAoB,MAAO,kBAAgB,CAAyB;AACxE,MAAI,SAAW,oBAAW;AACxB,sBAAgB,IAAI;AACpB,MAAI;AACF,cAAM,MAAO;AAAA,aACN,OAAO;AACd,CAAQ;AAA+B,OACvC;AACA;AAAqB,CACvB;AAAA,CACF;AAEA,MAAI,cAAW,aAAQ;AACrB,MAAM,gBAAU,aAAS,QAAY;AACrC,CAAI,oBAAW;AACb,CAAU;AAAmC,CAC/C;AAAA,CACF;AAEA,MAAI;AACF,MAAM;AACN;AACE,uBAAM,GAAa,YAAM,KAAS,oBAAa;AAAA,CACjD;AAAA,CACF;AAAA,GACF;AAEA,OAAM;AAEN,EACE;AAAA,IAAC;AAAA;AAAA,CACC;AAAS,CACT;AAAU,MACV,MAAO,UAAE;AAAmB,CAC5B,oBAAa;AAAA,MAEb;AAAA;AAEI,CAACd;AAKU,CAAQ;AAEL;AAEF;AACE,uBAAC;AAAA;AAAA,CACC,uCAAU;AAAA,wBACV,CAAQ,cAAQ,YAAW;AAAA;AAAA,uBAE/B;AAAA,qBAEC,CAAQ,OAAS,wBAAe,QAAkB,aAAM;AAK/C;AACA;AACE;AAAC;AAAA,CACC,0BAAQ;AAAA,CACR,4BAAU;AAAA,CAEV,yBAAMA;AAAyB,CAC/B,8BAAS,KAAM,gBAAkB,QAAK,KAAO;AAAK;AAAA,yBAF7C;AAAA,mBAGP;AAAA,mBAKV;AAAA,aAEJ;AAAA,CAhCe;AAoCzB;AACA,YAAC;AAAA;AAAA,CACC;AAAU;AACV,cACA,cAAU;AAAmE,CAC7E,6BAAY;AAAA,CACZ,2BAAW;AAAA,CACX;AAAO,CACP;AAAU;AAAA,CACZ;AAAA,WACF,CACF;AAAA,+BACAA;AAAA,UAAC;AAAA;AAAA,YACC;AAAA,YACA,YAAY;AAAY,YACxB;AAAA,YACA;AAAA;AAAA,CACF;AAAA;AAAA;AAAA,GACF;AAEJ,CAAC;AAED,4BAAe;;AC7Of,SAAwB;AACtB,OAAM;AACN,MAAI,CAAC,cAAgB;AACnB,UAAQA;AAAuD,CACjE;AAEA,EAAI;AACF;AAAwB,CAC1B;AACA,CAAO;AACT","names":["Avatar","React.forwardRef","AvatarImage","useLayoutEffect","AvatarFallback","React.useEffect","React.useState","AvatarPrimitive.Root","AvatarPrimitive.Image","AvatarPrimitive.Fallback","jsx","React.isValidElement","useState","useRef","useCallback","node","useEffect","message","content","memo","useMemo","jsxs","lazy","CopyIcon","messages"],"ignoreList":[0],"sources":["../../node_modules/@radix-ui/react-avatar/dist/index.mjs","../../src/lib/shadcn/ui/avatar.tsx","../../src/lib/shadcn/chat/message-loading.tsx","../../src/lib/shadcn/chat/chat-bubble.tsx","../../src/lib/shadcn/chat/chat-message-list.tsx","../../src/components/pages/ChatApplication/hooks/use-chat-application-data.ts","../../src/components/pages/ChatApplication/hooks/use-send-message.ts","../../src/components/pages/ChatApplication/components/ChatLLMInfo.tsx","../../src/components/pages/ChatApplication/hooks/use-chat-list.ts","../../src/components/pages/ChatApplication/components/ChatPanel.tsx","../../src/components/pages/ChatApplication/index.tsx","../../src/pages/ApplicationPage.tsx"],"sourcesContent":["\"use client\";\n\n// packages/react/avatar/src/Avatar.tsx\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar AVATAR_NAME = \"Avatar\";\nvar [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\nvar [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);\nvar Avatar = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeAvatar, ...avatarProps } = props;\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState(\"idle\");\n    return /* @__PURE__ */ jsx(\n      AvatarProvider,\n      {\n        scope: __scopeAvatar,\n        imageLoadingStatus,\n        onImageLoadingStatusChange: setImageLoadingStatus,\n        children: /* @__PURE__ */ jsx(Primitive.span, { ...avatarProps, ref: forwardedRef })\n      }\n    );\n  }\n);\nAvatar.displayName = AVATAR_NAME;\nvar IMAGE_NAME = \"AvatarImage\";\nvar AvatarImage = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeAvatar, src, onLoadingStatusChange = () => {\n    }, ...imageProps } = props;\n    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n    const imageLoadingStatus = useImageLoadingStatus(src, imageProps.referrerPolicy);\n    const handleLoadingStatusChange = useCallbackRef((status) => {\n      onLoadingStatusChange(status);\n      context.onImageLoadingStatusChange(status);\n    });\n    useLayoutEffect(() => {\n      if (imageLoadingStatus !== \"idle\") {\n        handleLoadingStatusChange(imageLoadingStatus);\n      }\n    }, [imageLoadingStatus, handleLoadingStatusChange]);\n    return imageLoadingStatus === \"loaded\" ? /* @__PURE__ */ jsx(Primitive.img, { ...imageProps, ref: forwardedRef, src }) : null;\n  }\n);\nAvatarImage.displayName = IMAGE_NAME;\nvar FALLBACK_NAME = \"AvatarFallback\";\nvar AvatarFallback = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeAvatar, delayMs, ...fallbackProps } = props;\n    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n    const [canRender, setCanRender] = React.useState(delayMs === void 0);\n    React.useEffect(() => {\n      if (delayMs !== void 0) {\n        const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n        return () => window.clearTimeout(timerId);\n      }\n    }, [delayMs]);\n    return canRender && context.imageLoadingStatus !== \"loaded\" ? /* @__PURE__ */ jsx(Primitive.span, { ...fallbackProps, ref: forwardedRef }) : null;\n  }\n);\nAvatarFallback.displayName = FALLBACK_NAME;\nfunction useImageLoadingStatus(src, referrerPolicy) {\n  const [loadingStatus, setLoadingStatus] = React.useState(\"idle\");\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus(\"error\");\n      return;\n    }\n    let isMounted = true;\n    const image = new window.Image();\n    const updateStatus = (status) => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n    setLoadingStatus(\"loading\");\n    image.onload = updateStatus(\"loaded\");\n    image.onerror = updateStatus(\"error\");\n    image.src = src;\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [src, referrerPolicy]);\n  return loadingStatus;\n}\nvar Root = Avatar;\nvar Image = AvatarImage;\nvar Fallback = AvatarFallback;\nexport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n  Fallback,\n  Image,\n  Root,\n  createAvatarScope\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from 'src/lib/utils'\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn('aspect-square h-full w-full', className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      'flex h-full w-full items-center justify-center rounded-full bg-muted',\n      className,\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","// @hidden\nexport default function MessageLoading() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"text-foreground\"\n    >\n      <circle cx=\"4\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          id=\"spinner_qFRN\"\n          begin=\"0;spinner_OcgL.end+0.25s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n      <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          begin=\"spinner_qFRN.begin+0.1s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n      <circle cx=\"20\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          id=\"spinner_OcgL\"\n          begin=\"spinner_qFRN.begin+0.2s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n    </svg>\n  )\n}\n","import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from 'src/lib/utils'\nimport { Avatar, AvatarImage, AvatarFallback } from 'src/lib/shadcn/ui/avatar'\nimport MessageLoading from 'src/lib/shadcn/chat/message-loading'\nimport { Button, ButtonProps } from 'src/lib/shadcn/ui/button'\n\n// ChatBubble\nconst chatBubbleVariant = cva('flex gap-2 max-w-[60%] items-end relative group', {\n  variants: {\n    variant: {\n      received: 'self-start',\n      sent: 'self-end flex-row-reverse',\n    },\n    layout: {\n      default: '',\n      ai: 'max-w-full w-full items-center',\n    },\n  },\n  defaultVariants: {\n    variant: 'received',\n    layout: 'default',\n  },\n})\n\ninterface ChatBubbleProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof chatBubbleVariant> {}\n\nconst ChatBubble = React.forwardRef<HTMLDivElement, ChatBubbleProps>(\n  ({ className, variant, layout, children, ...props }, ref) => (\n    <div\n      className={cn(chatBubbleVariant({ variant, layout, className }), 'relative group')}\n      ref={ref}\n      {...props}\n    >\n      {React.Children.map(children, (child) =>\n        React.isValidElement(child) && typeof child.type !== 'string'\n          ? React.cloneElement(child, {\n              variant,\n              layout,\n            } as React.ComponentProps<typeof child.type>)\n          : child,\n      )}\n    </div>\n  ),\n)\nChatBubble.displayName = 'ChatBubble'\n\n// ChatBubbleAvatar\ninterface ChatBubbleAvatarProps {\n  src?: string\n  fallback?: string\n  className?: string\n}\n\nconst ChatBubbleAvatar: React.FC<ChatBubbleAvatarProps> = ({ src, fallback, className }) => (\n  <Avatar className={className}>\n    <AvatarImage src={src} alt=\"Avatar\" />\n    <AvatarFallback>{fallback}</AvatarFallback>\n  </Avatar>\n)\n\n// ChatBubbleMessage\nconst chatBubbleMessageVariants = cva('p-4', {\n  variants: {\n    variant: {\n      received: 'bg-secondary text-secondary-foreground rounded-r-lg rounded-tl-lg',\n      sent: 'bg-primary text-primary-foreground rounded-l-lg rounded-tr-lg',\n    },\n    layout: {\n      default: '',\n      ai: 'border-t w-full rounded-none bg-transparent',\n    },\n  },\n  defaultVariants: {\n    variant: 'received',\n    layout: 'default',\n  },\n})\n\ninterface ChatBubbleMessageProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof chatBubbleMessageVariants> {\n  isLoading?: boolean\n}\n\nconst ChatBubbleMessage = React.forwardRef<HTMLDivElement, ChatBubbleMessageProps>(\n  ({ className, variant, layout, isLoading = false, children, ...props }, ref) => (\n    <div\n      className={cn(\n        chatBubbleMessageVariants({ variant, layout, className }),\n        'break-words max-w-full whitespace-pre-wrap',\n      )}\n      ref={ref}\n      {...props}\n    >\n      {isLoading ? (\n        <div className=\"flex items-center space-x-2\">\n          <MessageLoading />\n        </div>\n      ) : (\n        children\n      )}\n    </div>\n  ),\n)\nChatBubbleMessage.displayName = 'ChatBubbleMessage'\n\n// ChatBubbleTimestamp\ninterface ChatBubbleTimestampProps extends React.HTMLAttributes<HTMLDivElement> {\n  timestamp: string\n}\n\nconst ChatBubbleTimestamp: React.FC<ChatBubbleTimestampProps> = ({\n  timestamp,\n  className,\n  ...props\n}) => (\n  <div className={cn('text-xs mt-2 text-right', className)} {...props}>\n    {timestamp}\n  </div>\n)\n\n// ChatBubbleAction\ntype ChatBubbleActionProps = ButtonProps & {\n  icon: React.ReactNode\n}\n\nconst ChatBubbleAction: React.FC<ChatBubbleActionProps> = ({\n  icon,\n  onClick,\n  className,\n  variant = 'ghost',\n  size = 'icon',\n  ...props\n}) => (\n  <Button variant={variant} size={size} className={className} onClick={onClick} {...props}>\n    {icon}\n  </Button>\n)\n\ninterface ChatBubbleActionWrapperProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'sent' | 'received'\n  className?: string\n}\n\nconst ChatBubbleActionWrapper = React.forwardRef<HTMLDivElement, ChatBubbleActionWrapperProps>(\n  ({ variant, className, children, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'absolute top-1/2 -translate-y-1/2 flex opacity-0 group-hover:opacity-100 transition-opacity duration-200',\n        variant === 'sent'\n          ? '-left-1 -translate-x-full flex-row-reverse'\n          : '-right-1 translate-x-full',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  ),\n)\nChatBubbleActionWrapper.displayName = 'ChatBubbleActionWrapper'\n\nexport {\n  ChatBubble,\n  ChatBubbleAvatar,\n  ChatBubbleMessage,\n  ChatBubbleTimestamp,\n  chatBubbleVariant,\n  chatBubbleMessageVariants,\n  ChatBubbleAction,\n  ChatBubbleActionWrapper,\n}\n","import * as React from 'react'\nimport { cn } from 'src/lib/utils'\n\ntype ChatMessageListProps = React.HTMLAttributes<HTMLDivElement>\n\nconst ChatMessageList = React.forwardRef<HTMLDivElement, ChatMessageListProps>(\n  ({ className, children, ...props }, ref) => (\n    <div\n      className={cn('flex flex-col w-full h-full p-4 gap-6 overflow-y-auto', className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  ),\n)\n\nChatMessageList.displayName = 'ChatMessageList'\n\nexport { ChatMessageList }\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { findFlowNodesWithSource } from 'src/states/flow/actions'\nimport {\n  FlowNode,\n  JSONData,\n  LLM,\n  LLMStatusEnum,\n  Prompt,\n  Schema,\n  Thread,\n} from 'src/services/database/types'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { useLocalLLMState } from 'src/services/local-llm'\nimport { Message } from 'ai/react'\n\nexport const useChatApplicationData = () => {\n  const [chatInfo, setChatInfo] = useState<{\n    prompts?: Prompt[]\n    schema?: Schema\n  }>()\n  const [threadInfo, setThreadInfo] = useState<{ thread: Thread; threadNode: FlowNode }>()\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const [currentDataNode, setCurrentDataNode] = useState<{ node: FlowNode; enity: JSONData }>()\n  const onThreadMessagesLoadedRef = useRef<(messages: Message[]) => void>()\n  const sessionHandleStatus = useRef<{ handling?: string; handled?: string }>({})\n  const currentSession = useSessionState((state) => state.currentSession)\n  const loadModel = useLocalLLMState((state) => state.loadModel)\n  const getChatApplicationData = useCallback(async () => {\n    try {\n      sessionHandleStatus.current.handling = currentSession?.id\n      if (\n        !currentSession?.id ||\n        !currentSession?.main_source_id ||\n        currentSession?.main_source_type !== 'Thread'\n      ) {\n        return\n      }\n      const [thread, threadNode] = await Promise.all([\n        getRepository('Thread').findOne({\n          where: { id: currentSession.main_source_id, session_id: currentSession.id },\n        }),\n        getRepository('FlowNode').findOne({\n          where: {\n            source_id: currentSession.main_source_id,\n            source_type: 'Thread',\n            session_id: currentSession.id,\n          },\n        }),\n      ])\n      if (!thread || !threadNode) {\n        return\n      }\n      const threadConnections = await getRepository('FlowEdge').find({\n        where: { session_id: currentSession.id, target: threadNode.id },\n      })\n      const { flowNodes, flowNodeDatas } = await findFlowNodesWithSource({\n        where: {\n          session_id: currentSession.id,\n          id: In(threadConnections.map((connection) => connection.source)),\n        },\n      })\n      const allConnections = await getRepository('FlowEdge').find({\n        where: { session_id: currentSession.id },\n      })\n\n      const threadConnectedNodes = allConnections\n        .filter((connection) => connection.target === threadNode.id)\n        .map((connection) => {\n          const node = flowNodes.find((node) => node.id === connection.source)!\n          return {\n            connection,\n            source: node,\n            entity: flowNodeDatas?.[node.source_type]?.find(\n              (nodeData) => nodeData.id === node.source_id,\n            ),\n          }\n        })\n      const llmInfo = threadConnectedNodes.find((node) => node.source.source_type === 'LLM')\n      const promptInfo = threadConnectedNodes.filter((node) => node.source.source_type === 'Prompt')\n      const schemaInfo = threadConnectedNodes.find((node) => node.source.source_type === 'Schema')\n\n      if (!llmInfo?.entity) {\n        return\n      }\n      const threadData = await getRepository('FlowEdge').findOne({\n        where: { session_id: currentSession.id, source: threadNode.id },\n        order: { id: 'DESC' },\n      })\n      if (!threadData) {\n        const jsonData = await getRepository('JSONData').save({\n          headers: 'item',\n          session_id: currentSession.id,\n          json: '',\n          data: [],\n        })\n        if (!jsonData) {\n          return\n        }\n        const jsonDataNode = await getRepository('FlowNode').save({\n          session_id: currentSession.id,\n          source_id: jsonData.id,\n          source_type: 'JSONData',\n          node_type: 'JSON_DATA',\n          x: 0,\n          y: 0,\n        })\n        if (!jsonDataNode) {\n          return\n        }\n        await getRepository('FlowEdge').save({\n          session_id: currentSession.id,\n          source: threadNode.id,\n          target: jsonDataNode.id,\n        })\n        onThreadMessagesLoadedRef.current?.([])\n        setCurrentDataNode({\n          node: jsonDataNode,\n          enity: jsonData,\n        })\n      } else {\n        const dataNode = await getRepository('FlowNode').findOne({\n          where: { id: threadData.target, session_id: currentSession.id },\n        })\n        if (!dataNode) {\n          return\n        }\n        const jsonData = await getRepository('JSONData').findOne({\n          where: { id: dataNode.source_id, session_id: currentSession.id },\n        })\n        if (!jsonData) {\n          return\n        }\n        onThreadMessagesLoadedRef.current?.(jsonData.data as unknown as Message[])\n        setCurrentDataNode({\n          node: dataNode,\n          enity: jsonData,\n        })\n      }\n\n      setLLMInfo({\n        llm: llmInfo.entity as LLM,\n        status: LLMStatusEnum.Started,\n        progress: '',\n      })\n      setThreadInfo({\n        thread,\n        threadNode,\n      })\n      setChatInfo({\n        prompts: promptInfo?.map((info) => info.entity as Prompt) || [],\n        schema: schemaInfo?.entity as Schema,\n      })\n\n      sessionHandleStatus.current.handled = currentSession.id\n    } finally {\n      sessionHandleStatus.current.handling = undefined\n    }\n  }, [currentSession?.id, currentSession?.main_source_id, currentSession?.main_source_type])\n\n  const loadLLM = useCallback(async () => {\n    if (!mainLLMInfo?.llm.name) {\n      return\n    }\n    try {\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loading } : pre))\n      await loadModel(mainLLMInfo?.llm.name, (data) => {\n        setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } catch {\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Started, progress: '' } : pre))\n    }\n  }, [mainLLMInfo?.llm?.name, loadModel])\n\n  const onThreadMessagesLoaded = useCallback((callback: (messages: Message[]) => void) => {\n    onThreadMessagesLoadedRef.current = callback\n    return () => {\n      onThreadMessagesLoadedRef.current = undefined\n    }\n  }, [])\n\n  const updateMessagesData = useCallback(\n    async (messages: Message[]) => {\n      if (!currentDataNode?.node || !currentDataNode?.enity) {\n        return\n      }\n      await getRepository('JSONData').save({\n        ...currentDataNode.enity,\n        data: messages,\n      })\n    },\n    [currentDataNode?.enity, currentDataNode?.node],\n  )\n\n  useEffect(() => {\n    if (\n      sessionHandleStatus.current.handling ||\n      sessionHandleStatus?.current.handled === currentSession?.id\n    ) {\n      return\n    }\n    getChatApplicationData()\n  }, [currentSession?.id, getChatApplicationData])\n\n  return {\n    ...chatInfo,\n    loadLLM,\n    threadInfo,\n    mainLLMInfo,\n    currentDataNode,\n    updateMessagesData,\n    onThreadMessagesLoaded,\n  }\n}\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { PromptTemplate } from '@langchain/core/prompts'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  Prompt,\n  VectorDatabase,\n} from 'src/services/database/types'\nimport { useLocalEmbeddingState } from 'src/services/local-embedding'\nimport { prepareThreadConnections } from 'src/utils/thread-conversation-traveling'\nimport { useLocalLLM } from 'src/services/local-llm/hooks/use-llm'\nimport { AIMessage, BaseMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { getStorageDataSource } from 'src/utils/vector-storage'\nimport { Message } from 'ai/react'\n\ntype CreateMessageOption = {\n  onMessageUpdate: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n}\nexport const useSendMessage = () => {\n  const [loading] = useState(false)\n  const similaritySearchWithScore = useLocalEmbeddingState(\n    (state) => state.similaritySearchWithScore,\n  )\n\n  const { stream } = useLocalLLM()\n\n  const handlePlaceholders = useCallback(\n    async (\n      content: string,\n      threadConnection: ReturnType<typeof prepareThreadConnections> | undefined,\n    ): Promise<BaseMessage[]> => {\n      const { placeholders } = threadConnection || {}\n      if (!placeholders?.length) {\n        return []\n      }\n      const injectedMessages: BaseMessage[] = []\n      await Promise.all(\n        placeholders.map(async (item) => {\n          const placeholderRecord = item.node.data?.entity as FlowNodePlaceholder\n          if (!placeholderRecord) {\n            return\n          }\n          switch (placeholderRecord.placeholder_type) {\n            case FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER: {\n              const vectorNode = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.VectorDatabase,\n              )\n              const vector = vectorNode?.data?.entity as VectorDatabase\n              const prompt = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.Prompt,\n              )?.data?.entity as Prompt\n              if (!prompt || !vector || !vectorNode) {\n                return\n              }\n              const dataSource = undefined\n              if (!dataSource) {\n                return\n              }\n              const k = placeholderRecord.metadata?.k ? +placeholderRecord.metadata?.k : 1\n              let minimalScore = placeholderRecord.metadata?.minimalScore\n                ? +placeholderRecord.metadata?.minimalScore\n                : undefined\n              if (minimalScore && minimalScore > 1) {\n                minimalScore = minimalScore / 100\n              }\n              const documents = await similaritySearchWithScore(\n                {\n                  databaseId: vector.id,\n                  dataSourceId: dataSource,\n                  dataSourceType: getStorageDataSource(dataSource),\n                },\n                content,\n                k,\n              )\n              if (!documents) {\n                return []\n              }\n              const template = new PromptTemplate({\n                template: prompt.content,\n                inputVariables: ['context'],\n              })\n              injectedMessages.push(\n                new AIMessage(\n                  await template.format({\n                    context: !minimalScore\n                      ? documents.map(([doc]) => doc.pageContent).join('\\n')\n                      : documents\n                          .filter(([, score]) => score >= minimalScore)\n                          .map(([doc]) => doc.pageContent)\n                          .join('\\n'),\n                  }),\n                ),\n              )\n            }\n          }\n        }),\n      )\n      return injectedMessages\n    },\n    [similaritySearchWithScore],\n  )\n\n  const sendMessage = useCallback(\n    async (\n      message: string,\n      messages: Message[],\n      threadConnection: ReturnType<typeof prepareThreadConnections> | undefined,\n      _threadConversionNodes: Node[],\n      { onMessageUpdate }: CreateMessageOption,\n    ) => {\n      const { tools, schemas, placeholders } = threadConnection || {}\n\n      const injectedMessages: BaseMessage[] = []\n\n      if (placeholders?.length) {\n        injectedMessages.push(...(await handlePlaceholders(message, threadConnection)))\n      }\n\n      const formatedMessages = messages.map((message) => {\n        if (message.role === 'system') {\n          return new SystemMessage(message.content)\n        }\n        if (message.role === 'user') {\n          return new HumanMessage(message.content)\n        }\n        return new AIMessage(message.content)\n      })\n\n      const { content } = await stream(formatedMessages, {\n        tools,\n        schemas,\n        onMessageUpdate: ({ content }) => {\n          onMessageUpdate?.({\n            nodeData: {\n              loading: true,\n              content: content,\n            },\n          })\n        },\n      })\n\n      onMessageUpdate?.({\n        nodeData: {\n          content,\n        },\n      })\n      return content\n    },\n    [handlePlaceholders, stream],\n  )\n\n  return {\n    loading,\n    sendMessage,\n  }\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { LLMStatusEnum } from 'src/services/database/types/llm'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\n\nimport { LLM } from 'src/services/database/types'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\n\nexport const ChatLLMInfo = memo(\n  ({\n    llm,\n    status,\n    loadLLM,\n    progress,\n  }: {\n    llm?: LLM\n    progress?: string\n    status?: LLMStatusEnum\n    loadLLM?: () => Promise<void>\n  }) => {\n    const { t } = useTranslation('flows')\n    const [llmInfo, setLLMInfo] = useState<\n      { hasCache: boolean; isFunctionCalling: boolean; info?: ModelRecord } | undefined\n    >()\n\n    useEffect(() => {\n      if (llmInfo || !llm?.name) {\n        return\n      }\n      import('@mlc-ai/web-llm').then(\n        async ({ hasModelInCache, functionCallingModelIds, prebuiltAppConfig }) => {\n          const hasCache = await hasModelInCache(llm?.name)\n          setLLMInfo({\n            hasCache,\n            isFunctionCalling: functionCallingModelIds.includes(llm?.name),\n            info: prebuiltAppConfig.model_list.find((item) => item.model_id === llm?.name),\n          })\n        },\n      )\n    }, [llm?.name, llmInfo])\n\n    const handleLoadLLM = useCallback(async () => {\n      await loadLLM?.()\n    }, [loadLLM])\n\n    const llmIcon = useMemo(() => {\n      switch (status) {\n        case LLMStatusEnum.Downloading:\n          return <LazyIcon className={'animate-spin w-7 h-7'} name={'arrow-big-down-dash'} />\n        case LLMStatusEnum.Loaded:\n          return <LLMIcon name={llm?.name || 'brain'} className=\"w-7 h-7\" />\n        default:\n          return <LLMIcon name={llm?.name || 'brain'} className=\"w-7 h-7\" />\n      }\n    }, [llm?.name, status])\n    return (\n      <Alert className=\"flex justify-center !border-none !bg-inherit !p-2 max-w-full overflow-y-hidden mb-2\">\n        <div className=\"ml-2 pt-1 max-w-full\">\n          <AlertTitle className=\"flex gap-2 items-center pr-6\">\n            {llmIcon}\n            {`${llm?.name || ''}`}\n          </AlertTitle>\n          <div className=\"max-w-full mt-2 flex-wrap flex gap-1\">\n            <LLMInfo\n              model={llmInfo?.info}\n              isFunctionCalling={llmInfo?.isFunctionCalling || false}\n              name={llm?.name}\n              isCached={llmInfo?.hasCache || false}\n            />\n            {status !== LLMStatusEnum.Loaded ? (\n              progress ? (\n                <div className=\"text-sm break-words flex-wrap\">{progress}</div>\n              ) : (\n                <Button\n                  disabled={status === LLMStatusEnum.Loading}\n                  onClick={handleLoadLLM}\n                  className=\"mt-4 w-full\"\n                >\n                  {t(\n                    llmInfo?.hasCache\n                      ? 'llm_node.load_model_button'\n                      : 'llm_node.download_model_button',\n                  )}\n                </Button>\n              )\n            ) : undefined}\n          </div>\n        </div>\n      </Alert>\n    )\n  },\n)\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSessionState } from 'src/states/session'\nimport { FlowNode, JSONData } from 'src/services/database/types'\nimport { getRepository } from 'src/services/database'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { findFlowNodesWithSource } from 'src/states/flow/actions'\n\nexport const useChatList = (threadNode?: FlowNode) => {\n  const [chatList, setChatList] = useState<{ node: FlowNode; entity: JSONData }[]>([])\n  const currentSession = useSessionState((state) => state.currentSession)\n  const getChatList = useCallback(async () => {\n    if (!threadNode || !currentSession?.id) {\n      return\n    }\n    const threadDataEdged = await getRepository('FlowEdge').find({\n      where: { session_id: currentSession.id, source: threadNode.id },\n      order: { id: 'DESC' },\n    })\n    const { flowNodes, flowNodeDatas } = await findFlowNodesWithSource({\n      where: {\n        session_id: currentSession.id,\n        id: In(threadDataEdged.map((edge) => edge.target)),\n        source_type: 'JSONData',\n      },\n      order: { updated_at: 'DESC' },\n      select: ['id', 'source_id', 'source_type', 'updated_at'],\n    })\n    setChatList(\n      flowNodes.reduce((all: { node: FlowNode; entity: JSONData }[], node) => {\n        const entity = flowNodeDatas[node.source_type]?.find((data) => data.id === node.source_id)\n        if (entity) {\n          all.push({\n            node,\n            entity: entity as JSONData,\n          })\n        }\n        return all\n      }, []),\n    )\n  }, [currentSession?.id, threadNode])\n\n  useEffect(() => {\n    if (!threadNode) {\n      return\n    }\n    getChatList()\n  }, [getChatList, threadNode])\n\n  return {\n    chatList,\n    getChatList,\n  }\n}\n","import * as React from 'react'\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from 'src/lib/shadcn/ui/sidebar'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { FlowNode } from 'src/services/database/types'\n\nimport { ChatLLMInfo } from './ChatLLMInfo'\nimport { useChatApplicationData } from '../hooks/use-chat-application-data'\nimport { useChatList } from '../hooks/use-chat-list'\n\nexport function ChatPanel({\n  mainLLMInfo,\n  loadLLM,\n  threadNode,\n  currentDataNode,\n  ...props\n}: React.ComponentProps<typeof Sidebar> & {\n  threadNode?: FlowNode\n  currentDataNode: ReturnType<typeof useChatApplicationData>['currentDataNode']\n  loadLLM: ReturnType<typeof useChatApplicationData>['loadLLM']\n  mainLLMInfo: ReturnType<typeof useChatApplicationData>['mainLLMInfo']\n}) {\n  const { chatList } = useChatList(threadNode)\n  return (\n    <Sidebar variant=\"sidebar\" side=\"right\" collapsible=\"none\" {...props}>\n      <div className=\"h-1\" />\n      <SidebarContent>\n        <SidebarGroup className=\"flex-1\">\n          <SidebarMenu>\n            {chatList.map(({ node }, index) => (\n              <SidebarMenuItem key={node.id}>\n                <SidebarMenuButton className=\"cursor-pointer\">\n                  <span>{`Thread ${index + 1}`}</span>\n                  <LazyIcon\n                    name={currentDataNode?.node?.id === node.id ? 'check' : 'chevron-right'}\n                    className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\"\n                  />\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            ))}\n          </SidebarMenu>\n        </SidebarGroup>\n        <ChatLLMInfo\n          llm={mainLLMInfo?.llm}\n          status={mainLLMInfo?.status}\n          progress={mainLLMInfo?.progress}\n          loadLLM={loadLLM}\n        />\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n","'use client'\n\nimport {\n  memo,\n  useEffect,\n  useRef,\n  useState,\n  KeyboardEvent,\n  MouseEvent,\n  lazy,\n  Suspense,\n  useCallback,\n} from 'react'\nimport {\n  ChatBubble,\n  ChatBubbleAction,\n  ChatBubbleAvatar,\n  ChatBubbleMessage,\n} from 'src/lib/shadcn/chat/chat-bubble'\nimport { nanoid } from 'nanoid'\nimport { ChatMessageList } from 'src/lib/shadcn/chat/chat-message-list'\nimport { CopyIcon, RefreshCcw, Volume2 } from 'lucide-react'\nimport { Message, useChat } from 'ai/react'\nimport AIInput from 'src/lib/kokonutui/ai-input'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport textToSpeech from 'src/utils/text-to-speech'\nimport MessageLoading from 'src/lib/shadcn/chat/message-loading'\nimport { SidebarInset, SidebarProvider } from 'src/lib/shadcn/ui/sidebar'\n\nimport { useChatApplicationData } from './hooks/use-chat-application-data'\nimport { useSendMessage } from './hooks/use-send-message'\nimport { ChatPanel } from './components/ChatPanel'\n\nconst MarkdownPreview = lazy(() => import('@uiw/react-markdown-preview'))\n\nconst ChatAiIcons = [\n  {\n    icon: CopyIcon,\n    label: 'Copy',\n  },\n  {\n    icon: RefreshCcw,\n    label: 'Refresh',\n  },\n  {\n    icon: Volume2,\n    label: 'Volume',\n  },\n]\n\nconst ChatApplication = memo(() => {\n  const isScrolling = useRef(false)\n  const [isGenerating, setIsGenerating] = useState(false)\n\n  const scrollToBottom = useCallback(() => {\n    setTimeout(() => {\n      if (messagesRef.current) {\n        messagesRef.current.scrollTop = messagesRef.current.scrollHeight\n      }\n    }, 50)\n  }, [])\n\n  const {\n    threadInfo,\n    mainLLMInfo,\n    currentDataNode,\n    loadLLM,\n    updateMessagesData,\n    onThreadMessagesLoaded,\n  } = useChatApplicationData()\n  const { sendMessage } = useSendMessage()\n  const {\n    input,\n    setInput,\n    messages,\n    handleSubmit,\n    handleInputChange,\n    isLoading,\n    reload,\n    setMessages,\n  } = useChat({\n    fetch: async (_input: RequestInfo | URL, init?: RequestInit) => {\n      const body = JSON.parse(init?.body as string) as { messages: Message[] }\n      const newMessageId = nanoid()\n      const lastMessage = body.messages[body.messages.length - 1]\n      isScrolling.current = true\n      setMessages((messages) => [\n        ...messages,\n        { id: nanoid(), content: lastMessage.content, role: 'user' },\n        { id: newMessageId, content: 'Thinking...', role: 'assistant' },\n      ])\n      await sendMessage(lastMessage.content, body.messages || [], undefined, [], {\n        onMessageUpdate(info) {\n          setMessages((messages) => {\n            const newMessages = [...messages]\n            const index = newMessages.findIndex((message) => message.id === newMessageId)\n            if (index !== -1) {\n              newMessages[index] = { ...newMessages[index], content: info.nodeData.content || '' }\n            }\n            return newMessages\n          })\n          if (isScrolling.current) {\n            scrollToBottom()\n          }\n        },\n      })\n      // Update messages data\n      setMessages((messages) => {\n        updateMessagesData(messages)\n        return messages\n      })\n      setIsGenerating(false)\n      setInput('')\n      if (isScrolling.current) {\n        scrollToBottom()\n      }\n      return new Response()\n    },\n  })\n\n  const messagesRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const cleandUp = onThreadMessagesLoaded((messages) => {\n      setMessages(messages || [])\n      scrollToBottom()\n    })\n    return () => {\n      cleandUp()\n    }\n  }, [setMessages, onThreadMessagesLoaded, scrollToBottom])\n\n  const onSubmit = async (\n    _value: string,\n    e: KeyboardEvent<HTMLTextAreaElement> | MouseEvent<HTMLButtonElement>,\n  ) => {\n    setIsGenerating(true)\n    await handleSubmit(e)\n    return true\n  }\n\n  const handleActionClick = async (action: string, messageIndex: number) => {\n    if (action === 'Refresh') {\n      setIsGenerating(true)\n      try {\n        await reload()\n      } catch (error) {\n        console.error('Error reloading:', error)\n      } finally {\n        setIsGenerating(false)\n      }\n    }\n\n    if (action === 'Copy') {\n      const message = messages[messageIndex]\n      if (message && message.role === 'assistant') {\n        navigator.clipboard.writeText(message.content)\n      }\n    }\n\n    if (action === 'Volume') {\n      const message = messages[messageIndex]\n      if (message?.content) {\n        await textToSpeech.speak(message?.content || '')\n      }\n    }\n  }\n\n  const handleStopScroll = useCallback(() => (isScrolling.current = false), [])\n\n  return (\n    <SidebarProvider\n      onClick={handleStopScroll}\n      className=\"max-h-full !overflow-hidden !min-h-full\"\n      style={{ minHeight: 'unset' }}\n      defaultOpen={true}\n    >\n      <SidebarInset className=\"!max-h-full !overflow-hidden\" style={{ minHeight: 'unset' }}>\n        <main className=\"flex h-full w-full max-w-2xl flex-col items-center mx-auto overflow-hidden\">\n          <div className=\"flex-1 overflow-y-auto overflow-x-hidden min-w-full\">\n            <ChatMessageList className=\"!max-h-full\" ref={messagesRef}>\n              {messages &&\n                messages.map((message, index) => (\n                  <ChatBubble key={index} variant={message.role == 'user' ? 'sent' : 'received'}>\n                    {message.role !== 'user' ? (\n                      <ChatBubbleAvatar src=\"\" fallback={'🤖'} />\n                    ) : undefined}\n                    <ChatBubbleMessage>\n                      <Suspense fallback={<MessageLoading />}>\n                        <MarkdownPreview\n                          className=\"!text-sm [&_p]:leading-relaxed !max-w-full !bg-transparent !text-inherit !font-sans\"\n                          source={message.content || ''}\n                        />\n                      </Suspense>\n\n                      {message.role === 'assistant' && messages.length - 1 === index && (\n                        <div className=\"flex items-center mt-1.5 gap-1\">\n                          {!isGenerating && (\n                            <>\n                              {ChatAiIcons.map((icon, iconIndex) => {\n                                const Icon = icon.icon\n                                return (\n                                  <ChatBubbleAction\n                                    variant=\"ghost\"\n                                    className=\"size-5\"\n                                    key={iconIndex}\n                                    icon={<Icon className=\"size-3\" />}\n                                    onClick={() => handleActionClick(icon.label, index)}\n                                  />\n                                )\n                              })}\n                            </>\n                          )}\n                        </div>\n                      )}\n                    </ChatBubbleMessage>\n                  </ChatBubble>\n                ))}\n            </ChatMessageList>\n          </div>\n          <AIInput\n            className=\"!max-w-2xl px-4\"\n            onSubmit={onSubmit}\n            disabled={isLoading || isGenerating || mainLLMInfo?.status !== LLMStatusEnum.Loaded}\n            placeholder=\"Type your message here...\"\n            maxHeight={72}\n            value={input}\n            onChange={handleInputChange}\n          />\n        </main>\n      </SidebarInset>\n      <ChatPanel\n        currentDataNode={currentDataNode}\n        threadNode={threadInfo?.threadNode}\n        loadLLM={loadLLM}\n        mainLLMInfo={mainLLMInfo}\n      />\n    </SidebarProvider>\n  )\n})\n\nexport default ChatApplication\n","import { DefaultLoader } from 'src/components/atoms/DefaultLoader'\nimport ChatApplication from 'src/components/pages/ChatApplication'\nimport { useSessionState } from 'src/states/session'\n\nexport default function ApplicationPage() {\n  const currentSession = useSessionState((state) => state.currentSession)\n  if (!currentSession) {\n    return <DefaultLoader flickeringGrid className=\"w-full h-full\" />\n  }\n\n  if (currentSession.main_source_type === 'Thread') {\n    return <ChatApplication />\n  }\n  return undefined\n}\n"],"file":"assets/ApplicationPage-DJJPRMNP.js"}