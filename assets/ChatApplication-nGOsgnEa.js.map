{"version":3,"mappings":"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","names":["ChatMessageList","className","children","props","jsx","ref","useChatApplicationData","chatInfo","useState","mainEmbeddingInfo","setMainEmbeddingInfo","threadInfo","mainLLMInfo","setLLMInfo","onThreadMessagesLoadedRef","useRef","currentSession","useSessionState","loadModel","useLoadModel","sessionPassphraseDialogRef","useModalRef","SessionPassphraseDialog","dataNode","jsonData","setCurrentDataNode","addNewDataNode","sessionId","input","threadNode","prompt","getRepository","initialMessages","jsonDataNode","handleThreadData","useCallback","prompts","threadData","getRetrieveVectorDatabase","placeholderInfo","retriverInfo","info","connections","connection","result","item","promptNode","node","vectorDatabaseNode","nodeData","vectorDatabaseEntity","setRetriverInfo","thread","flowNodeDatas","findFlowNodesWithSource","In","threadConnections","threadConnectedNodes","schemaInfo","llm","llmInfo","FlowNodeTypeEnum","embeddingNode","embeddingEntity","schemaEntity","schemaItems","setChatInfo","promptInfo","sessionHandleStatus","pre","LLMStatusEnum","callback","updateMessagesData","messages","currentDataNode","useEffect","getChatApplicationData","selectDataNode","onThreadMessagesLoaded","useSendMessage","chatApplicationData","handlePlaceholders","placeholderRecord","FlowNodePlaceholderTypeEnum","k","minimalScore","similaritySearchWithScore","documents","template","PromptTemplate","injectedMessages","AIMessage","score","doc","message","onInjectedMessages","formatedMessages","SystemMessage","HumanMessage","onResponseMessageCreate","stream","schema","content","onMessageUpdate","response","DeleteChatDataNodeDialog","create","onDelete","t","useModal","useToast","handleSubmit","setLoading","currentModal","toast","AlertDialog","AlertDialogFooter","AlertDialogCancel","AlertDialogAction","loadLLM","progress","useTranslation","__vitePreload","functionCallingModelIds","prebuiltAppConfig","hasCache","LazyIcon","LLMIcon","Card","jsxs","llmIcon","LLMInfo","status","Button","handleLoadLLM","useVectorDatabaseActions","loading","similaritySearchWithScoreFunction","useEmbedding","options","VectorDatabaseStorageEnum","indexData","Document","data","handledCount","partDocuments","chunkedDocuments","indexFunction","setProgress","vectorDatabaseData","useMemo","headers","decodeLine","row","args","file","reader","e","blob","pdfjs","handleCreateData","renderContent","mode","TabsContent","VectorSearch","IndexNewText","IndexNewFile","handleIndexPDF","DataViewer","Dialog","DialogContent","DialogHeader","Tabs","setMode","cn","TabsList","TabsTrigger","chatList","setChatList","state","threadDataEdged","edge","flowNodes","all","entity","allEdges","getChatList","deleteChat","ChatPanel","onSelectThread","onAddNewThread","changeLLMOptions","React.useState","vectorDatabaseDialog","React.useCallback","handleDeleteDataNode","deleteChatDataNodeDialog","handleChangeOptions","React.useMemo","convertToZodSchemaString","Sidebar","SidebarGroupLabel","SidebarContent","SidebarMenu","index","SidebarMenuItem","key","React.Suspense","MessageLoading","ChatLLMInfo","AVATAR_NAME","createAvatarContext","createAvatarScope","createContextScope","AvatarProvider","React.forwardRef","forwardedRef","avatarProps","imageLoadingStatus","setImageLoadingStatus","Avatar","AvatarImage","__scopeAvatar","src","onLoadingStatusChange","useAvatarContext","IMAGE_NAME","context","useLayoutEffect","handleLoadingStatusChange","Primitive","FALLBACK_NAME","AvatarFallback","canRender","setCanRender","delayMs","React.useEffect","timerId","fallbackProps","useImageLoadingStatus","loadingStatus","setLoadingStatus","updateStatus","image","referrerPolicy","Root","Image","Fallback","AvatarPrimitive.Root","AvatarPrimitive.Image","AvatarPrimitive.Fallback","chatBubbleVariant","ChatBubble","layout","variant","React.isValidElement","React.cloneElement","fallback","chatBubbleMessageVariants","isLoading","ChatBubbleMessage","size","onClick","ChatItem","isSchema","onActionClick","MarkdownViewer","ChatBubbleAvatar","isGenerating","isLastMessage","Suspense","Fragment","ChatAiIcons","iconIndex","ChatBubbleAction","icon","useUpdateLLMOptions","ChatApplication","memo","messagesRef","sendMessage","setInput","setMessages","_input","init","setIsGenerating","body","nanoid","lastMessage","isScrolling","newMessages","newMessageId","scrollToBottom","cleandUp","onSubmit","_value","handleActionClick","action","reload","handleStopScroll","SidebarInset","AIInput"],"ignoreList":[10],"sources":["../../src/lib/shadcn/chat/chat-message-list.tsx","../../src/components/pages/ChatApplication/hooks/use-chat-application-data.ts","../../src/components/pages/ChatApplication/hooks/use-send-message.ts","../../src/components/dialogs/DeleteChatDataNodeDialog/index.tsx","../../src/lib/shadcn/chat/message-loading.tsx","../../src/components/pages/ChatApplication/components/ChatLLMInfo.tsx","../../src/components/pages/ChatApplication/hooks/use-vector-database-actions.ts","../../src/components/pages/ChatApplication/components/VectorDatabaseDialog/index.tsx","../../src/components/pages/ChatApplication/hooks/use-chat-list.ts","../../src/components/pages/ChatApplication/components/ChatPanel.tsx","../../node_modules/@radix-ui/react-avatar/dist/index.mjs","../../src/lib/shadcn/ui/avatar.tsx","../../src/lib/shadcn/chat/chat-bubble.tsx","../../src/components/pages/ChatApplication/components/ChatItem.tsx","../../src/components/pages/ChatApplication/hooks/use-update-llm-options.ts","../../src/components/pages/ChatApplication/ChatApplication.tsx"],"sourcesContent":["import * as React from 'react'\nimport { cn } from 'src/lib/utils'\n\ntype ChatMessageListProps = React.HTMLAttributes<HTMLDivElement>\n\nconst ChatMessageList = React.forwardRef<HTMLDivElement, ChatMessageListProps>(\n  ({ className, children, ...props }, ref) => (\n    <div\n      className={cn('flex flex-col w-full h-full p-4 gap-6 overflow-y-auto', className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  ),\n)\n\nChatMessageList.displayName = 'ChatMessageList'\n\nexport { ChatMessageList }\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { findFlowNodesWithSource } from 'src/states/flow/actions'\nimport {\n  EntityTypes,\n  FlowEdge,\n  FlowNode,\n  FlowNodePlaceholder,\n  FlowNodeTypeEnum,\n  JSONData,\n  LLM,\n  LLMStatusEnum,\n  Prompt,\n  Schema,\n  Thread,\n  VectorDatabase,\n} from 'src/services/database/types'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { Message } from 'ai/react'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useChatApplicationData = () => {\n  const [chatInfo, setChatInfo] = useState<{\n    prompts?: Prompt[]\n    schema?: Schema\n  }>()\n  const [mainEmbeddingInfo, setMainEmbeddingInfo] = useState<{\n    embedding?: FlowNodePlaceholder\n  }>()\n  const [threadInfo, setThreadInfo] = useState<{ thread: Thread; threadNode: FlowNode }>()\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: `${LLMStatusEnum}`\n    progress?: string\n  }>()\n  const [retriverInfo, setRetriverInfo] = useState<\n    {\n      promptNode: FlowNode\n      vectorDatabaseNode: FlowNode\n      placeholderNode: FlowNode\n      placeholderEntity: FlowNodePlaceholder\n      promptEntity: Prompt\n      vectorDatabaseEntity: VectorDatabase\n    }[]\n  >([])\n  const [currentDataNode, setCurrentDataNode] = useState<{ node: FlowNode; enity: JSONData }>()\n  const onThreadMessagesLoadedRef = useRef<(messages: Message[]) => void>()\n  const sessionHandleStatus = useRef<{ handling?: string; handled?: string }>({})\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { loadModel } = useLoadModel()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const selectDataNode = useCallback(\n    async (dataNode: FlowNode) => {\n      if (!currentSession) {\n        return\n      }\n      const jsonData = await getRepository('JSONData').findOne({\n        where: { id: dataNode.source_id, session_id: currentSession?.id },\n      })\n      if (!jsonData) {\n        return\n      }\n      onThreadMessagesLoadedRef.current?.(\n        jsonData.data ? (jsonData.data as unknown as Message[]) : [],\n      )\n      setCurrentDataNode({\n        node: dataNode,\n        enity: jsonData,\n      })\n    },\n    [currentSession],\n  )\n\n  const addNewDataNode = useCallback(\n    async (input?: { sessionId?: string; threadNode?: FlowNode; prompts?: Prompt[] }) => {\n      const sessionId = input?.sessionId || currentSession?.id\n      const threadNode = input?.threadNode || threadInfo?.threadNode\n      const systemPrompt = input?.prompts || chatInfo?.prompts\n\n      if (!sessionId || !threadNode?.id) {\n        return\n      }\n      const initialMessages = systemPrompt\n        ?.map((prompt) => {\n          if (prompt.type === 'few_shot_example') {\n            return undefined\n          }\n          switch (prompt.role) {\n            case 'ai':\n            case 'assistant':\n            case 'tool':\n              return {\n                id: prompt.id,\n                content: prompt.content,\n                role: 'assistant',\n              }\n            case 'system':\n              return {\n                id: prompt.id,\n                content: prompt.content,\n                role: 'system',\n              }\n            default:\n              return {\n                id: prompt.id,\n                content: prompt.content,\n                role: 'user',\n              }\n          }\n        })\n        .filter(Boolean) as Message[]\n      const jsonData = await getRepository('JSONData').save({\n        headers: 'item',\n        session_id: sessionId,\n        json: '',\n        data: initialMessages,\n      })\n      if (!jsonData) {\n        return\n      }\n      const jsonDataNode = await getRepository('FlowNode').save({\n        session_id: sessionId,\n        source_id: jsonData.id,\n        source_type: 'JSONData',\n        node_type: 'JSON_DATA',\n        x: 0,\n        y: 0,\n      })\n      if (!jsonDataNode) {\n        return\n      }\n      await getRepository('FlowEdge').save({\n        session_id: sessionId,\n        source: threadNode.id,\n        target: jsonDataNode.id,\n      })\n      onThreadMessagesLoadedRef.current?.(initialMessages)\n      setCurrentDataNode({\n        node: jsonDataNode,\n        enity: jsonData,\n      })\n      return {\n        jsonData,\n        jsonDataNode,\n      }\n    },\n    [chatInfo?.prompts, currentSession?.id, threadInfo?.threadNode],\n  )\n\n  const handleThreadData = useCallback(\n    async (threadNode: FlowNode, prompts: Prompt[]) => {\n      if (!currentSession) {\n        return\n      }\n      const threadData = await getRepository('FlowEdge').findOne({\n        where: { session_id: currentSession.id, source: threadNode.id },\n        order: { id: 'DESC' },\n      })\n      if (!threadData) {\n        const result = await addNewDataNode({\n          sessionId: currentSession.id,\n          threadNode,\n          prompts: prompts || [],\n        })\n        if (!result) {\n          return\n        }\n      } else {\n        const dataNode = await getRepository('FlowNode').findOne({\n          where: { id: threadData.target, session_id: currentSession.id },\n        })\n        if (!dataNode) {\n          return\n        }\n        await selectDataNode(dataNode)\n      }\n    },\n    [addNewDataNode, currentSession, selectDataNode],\n  )\n\n  const getRetrieveVectorDatabase = useCallback(\n    async (\n      placeholderInfo: {\n        connection: FlowEdge\n        source: FlowNode\n        entity?: EntityTypes\n      }[],\n    ) => {\n      if (placeholderInfo?.length && currentSession?.id) {\n        const data = await Promise.all(\n          placeholderInfo.map(async (info) => {\n            return getRepository('FlowEdge')\n              .find({\n                where: {\n                  target: info.source.id,\n                },\n              })\n              .then((connections) => {\n                return findFlowNodesWithSource({\n                  where: {\n                    session_id: currentSession.id,\n                    id: In(connections.map((connection) => connection.source)),\n                  },\n                }).then((result) => ({\n                  ...result,\n                  ...info,\n                }))\n              })\n          }),\n        )\n        const retriverInfo = data\n          .map((item) => {\n            const promptNode = item.flowNodes.find((node) => node.source_type === 'Prompt')\n            const vectorDatabaseNode = item.flowNodes.find(\n              (node) => node.source_type === 'VectorDatabase',\n            )\n            if (!vectorDatabaseNode || !promptNode) {\n              return\n            }\n            const promptEntity = item.flowNodeDatas?.Prompt?.find(\n              (nodeData) => nodeData.id === promptNode.source_id,\n            )\n            const vectorDatabaseEntity = item.flowNodeDatas?.VectorDatabase?.find(\n              (nodeData) => nodeData.id === vectorDatabaseNode.source_id,\n            )\n            return {\n              promptNode,\n              vectorDatabaseNode,\n              placeholderNode: item.source,\n              placeholderEntity: item.entity,\n              promptEntity: promptEntity as Prompt,\n              vectorDatabaseEntity: vectorDatabaseEntity as VectorDatabase,\n            }\n          })\n          .filter(Boolean) as {\n          promptNode: FlowNode\n          vectorDatabaseNode: FlowNode\n          placeholderNode: FlowNode\n          placeholderEntity: FlowNodePlaceholder\n          promptEntity: Prompt\n          vectorDatabaseEntity: VectorDatabase\n        }[]\n        setRetriverInfo(retriverInfo)\n      }\n    },\n    [currentSession?.id],\n  )\n\n  const getChatApplicationData = useCallback(async () => {\n    try {\n      sessionHandleStatus.current.handling = currentSession?.id\n      if (\n        !currentSession?.id ||\n        !currentSession?.main_source_id ||\n        currentSession?.main_source_type !== 'Thread'\n      ) {\n        return\n      }\n      const [thread, threadNode] = await Promise.all([\n        getRepository('Thread').findOne({\n          where: { id: currentSession.main_source_id, session_id: currentSession.id },\n        }),\n        getRepository('FlowNode').findOne({\n          where: {\n            id: currentSession.main_node_id,\n          },\n        }),\n      ])\n      if (!thread || !threadNode) {\n        return\n      }\n      const threadConnections = await getRepository('FlowEdge').find({\n        where: { session_id: currentSession.id, target: threadNode.id },\n      })\n      const { flowNodes, flowNodeDatas } = await findFlowNodesWithSource({\n        where: {\n          session_id: currentSession.id,\n          id: In(threadConnections.map((connection) => connection.source)),\n        },\n      })\n      const allConnections = await getRepository('FlowEdge').find({\n        where: { session_id: currentSession.id },\n      })\n\n      const threadConnectedNodes = allConnections\n        .filter((connection) => connection.target === threadNode.id)\n        .map((connection) => {\n          const node = flowNodes.find((node) => node.id === connection.source)!\n          return {\n            connection,\n            source: node,\n            entity: flowNodeDatas?.[node.source_type]?.find(\n              (nodeData) => nodeData.id === node.source_id,\n            ),\n          }\n        })\n\n      const llmInfo = threadConnectedNodes.find((node) => node.source.source_type === 'LLM')\n      const promptInfo = threadConnectedNodes.filter((node) => node.source.source_type === 'Prompt')\n      const schemaInfo = threadConnectedNodes.find((node) => node.source.source_type === 'Schema')\n\n      const llm = llmInfo?.entity as LLM\n\n      if (!llm) {\n        return\n      }\n\n      if (currentSession.passphrase) {\n        await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n      }\n\n      const placeholderInfo = threadConnectedNodes.filter(\n        (node) => node.source.source_type === 'FlowNodePlaceholder',\n      )\n\n      await getRetrieveVectorDatabase(placeholderInfo)\n      await handleThreadData(threadNode, promptInfo?.map((info) => info.entity as Prompt) || [])\n\n      // Handle Embedding Node\n      const embeddingNode = await getRepository('FlowNode').findOne({\n        where: {\n          node_type: FlowNodeTypeEnum.DefaultEmbeddingModel,\n          source_type: 'FlowNodePlaceholder',\n        },\n      })\n\n      if (embeddingNode) {\n        const embeddingEntity = await getRepository('FlowNodePlaceholder').findOne({\n          where: { id: embeddingNode.source_id },\n        })\n        setMainEmbeddingInfo({\n          embedding: embeddingEntity,\n        })\n      }\n\n      setLLMInfo({\n        llm,\n        status: llm.status || LLMStatusEnum.Started,\n        progress: '',\n      })\n      setThreadInfo({\n        thread,\n        threadNode,\n      })\n      const schemaEntity = schemaInfo?.entity as Schema\n      if (schemaEntity) {\n        const schemaItems = await getRepository('SchemaItem').find({\n          where: { schema_id: schemaEntity.id },\n        })\n        schemaEntity.schema_items = schemaItems || []\n      }\n\n      setChatInfo({\n        prompts: promptInfo?.map((info) => info.entity as Prompt) || [],\n        schema: schemaEntity,\n      })\n\n      sessionHandleStatus.current.handled = currentSession.id\n    } finally {\n      sessionHandleStatus.current.handling = undefined\n    }\n  }, [\n    currentSession?.id,\n    currentSession?.main_node_id,\n    currentSession?.main_source_id,\n    currentSession?.main_source_type,\n    currentSession?.passphrase,\n    getRetrieveVectorDatabase,\n    handleThreadData,\n    sessionPassphraseDialogRef,\n  ])\n\n  const loadLLM = useCallback(async () => {\n    if (!mainLLMInfo?.llm?.name) {\n      return\n    }\n    try {\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loading } : pre))\n      await loadModel(mainLLMInfo.llm.provider, mainLLMInfo?.llm.name, {\n        provider: mainLLMInfo.llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } catch {\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Started, progress: '' } : pre))\n    }\n  }, [mainLLMInfo?.llm?.name, mainLLMInfo?.llm?.provider, loadModel])\n\n  const onThreadMessagesLoaded = useCallback((callback: (messages: Message[]) => void) => {\n    onThreadMessagesLoadedRef.current = callback\n    return () => {\n      onThreadMessagesLoadedRef.current = undefined\n    }\n  }, [])\n\n  const updateMessagesData = useCallback(\n    async (messages: Message[]) => {\n      if (!currentDataNode?.node || !currentDataNode?.enity) {\n        return\n      }\n      await getRepository('JSONData').save({\n        ...currentDataNode.enity,\n        data: messages,\n      })\n    },\n    [currentDataNode?.enity, currentDataNode?.node],\n  )\n\n  useEffect(() => {\n    if (\n      sessionHandleStatus.current.handling ||\n      sessionHandleStatus?.current.handled === currentSession?.id\n    ) {\n      return\n    }\n    getChatApplicationData()\n  }, [currentSession?.id, getChatApplicationData])\n\n  return {\n    ...chatInfo,\n    loadLLM,\n    threadInfo,\n    mainLLMInfo,\n    mainEmbeddingInfo,\n    retriverInfo,\n    currentDataNode,\n    updateMessagesData,\n    addNewDataNode,\n    selectDataNode,\n    setLLMInfo,\n    onThreadMessagesLoaded,\n  }\n}\n","import { useCallback, useState } from 'react'\nimport { PromptTemplate } from '@langchain/core/prompts'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { FlowNodePlaceholderTypeEnum, LLMStatusEnum, Schema } from 'src/services/database/types'\nimport { AIMessage, BaseMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { Message } from 'ai/react'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useChatApplicationData } from './use-chat-application-data'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\n\ntype CreateMessageOption = {\n  schema?: Schema\n  onMessageUpdate: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n  onResponseMessageCreate: (message?: string) => void\n  onInjectedMessages: (messages: BaseMessage[]) => void\n}\nexport const useSendMessage = (chatApplicationData: ReturnType<typeof useChatApplicationData>) => {\n  const [loading] = useState(false)\n  const { similaritySearchWithScore } = useEmbedding()\n  const { stream } = useLLM()\n\n  const handlePlaceholders = useCallback(\n    async (\n      content: string,\n      retriverInfo: ReturnType<typeof useChatApplicationData>['retriverInfo'],\n    ): Promise<BaseMessage[]> => {\n      if (!retriverInfo?.length) {\n        return []\n      }\n      const injectedMessages: BaseMessage[] = []\n      await Promise.all(\n        retriverInfo.map(async (item) => {\n          const placeholderRecord = item.placeholderEntity\n          if (!placeholderRecord) {\n            return\n          }\n          switch (placeholderRecord.placeholder_type) {\n            case FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER: {\n              if (\n                !item.promptNode ||\n                !item.promptEntity ||\n                !item.vectorDatabaseNode ||\n                !item.vectorDatabaseEntity\n              ) {\n                return\n              }\n              const k = placeholderRecord.metadata?.k ? +placeholderRecord.metadata?.k : 1\n              let minimalScore = placeholderRecord.metadata?.minimalScore\n                ? +placeholderRecord.metadata?.minimalScore\n                : undefined\n              if (minimalScore && minimalScore > 1) {\n                minimalScore = minimalScore / 100\n              }\n              const documents = await similaritySearchWithScore(\n                chatApplicationData?.mainEmbeddingInfo?.embedding,\n                {\n                  database: {\n                    databaseId: item.vectorDatabaseEntity.id,\n                  },\n                },\n                content,\n                k,\n              )\n              if (!documents) {\n                return []\n              }\n              const template = new PromptTemplate({\n                template: item.promptEntity.content,\n                inputVariables: ['context'],\n              })\n              injectedMessages.push(\n                new AIMessage(\n                  await template.format({\n                    context: !minimalScore\n                      ? documents.map(([doc]) => doc.pageContent).join('\\n')\n                      : documents\n                          .filter(([, score]) => score >= minimalScore)\n                          .map(([doc]) => doc.pageContent)\n                          .join('\\n'),\n                  }),\n                ),\n              )\n            }\n          }\n        }),\n      )\n      return injectedMessages\n    },\n    [similaritySearchWithScore, chatApplicationData?.mainEmbeddingInfo?.embedding],\n  )\n\n  const sendMessage = useCallback(\n    async (\n      message: string,\n      messages: Message[],\n      {\n        retriverInfo,\n      }: {\n        retriverInfo?: ReturnType<typeof useChatApplicationData>['retriverInfo']\n      },\n      { schema, onMessageUpdate, onResponseMessageCreate, onInjectedMessages }: CreateMessageOption,\n    ) => {\n      if (\n        !chatApplicationData.mainLLMInfo?.llm ||\n        chatApplicationData.mainLLMInfo?.status !== LLMStatusEnum.Loaded\n      ) {\n        throw new Error('LLM not found')\n      }\n\n      const injectedMessages: BaseMessage[] = []\n\n      if (retriverInfo?.length) {\n        injectedMessages.push(...(await handlePlaceholders(message, retriverInfo)))\n        onInjectedMessages?.(injectedMessages)\n      }\n\n      const formatedMessages = messages.map((message) => {\n        if (message.role === 'system') {\n          return new SystemMessage(message.content)\n        }\n        if (message.role === 'user') {\n          return new HumanMessage(message.content)\n        }\n        return new AIMessage(message.content)\n      })\n\n      onResponseMessageCreate?.()\n\n      const response = await stream(\n        chatApplicationData.mainLLMInfo.llm.provider,\n        [...injectedMessages, ...formatedMessages],\n        {\n          schemas: schema ? [schema] : undefined,\n          onMessageUpdate: ({ content }) => {\n            onMessageUpdate?.({\n              nodeData: {\n                loading: true,\n                content: content,\n              },\n            })\n          },\n          llm: chatApplicationData.mainLLMInfo.llm,\n        },\n      )\n\n      onMessageUpdate?.({\n        nodeData: {\n          content: response?.content,\n        },\n      })\n      return response?.content\n    },\n    [handlePlaceholders, stream, chatApplicationData.mainLLMInfo],\n  )\n\n  return {\n    loading,\n    sendMessage,\n  }\n}\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from 'src/lib/shadcn/ui/alert-dialog'\n\ntype DeleteSessionDialogProps = {\n  onDelete: () => Promise<void>\n}\nconst DeleteChatDataNodeDialog = create<DeleteSessionDialogProps>(({ onDelete }) => {\n  const { t } = useTranslation('dialogs')\n  const [loading, setLoading] = useState(false)\n  const currentModal = useModal()\n  const { toast } = useToast()\n\n  const handleSubmit = async () => {\n    try {\n      setLoading(true)\n      await onDelete()\n      currentModal.hide()\n    } catch {\n      toast({\n        variant: 'destructive',\n        description: t('delete_chat_data_node.errors.delete_failed'),\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AlertDialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{t('delete_chat_data_node.title')}</AlertDialogTitle>\n          <AlertDialogDescription>{t('delete_chat_data_node.description')}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={currentModal.hide}>\n            {t('delete_chat_data_node.cancel')}\n          </AlertDialogCancel>\n          <AlertDialogAction disabled={loading} onClick={handleSubmit}>\n            {t('delete_chat_data_node.delete')}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n})\n\nexport default DeleteChatDataNodeDialog\n","// @hidden\nexport default function MessageLoading() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"text-foreground\"\n    >\n      <circle cx=\"4\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          id=\"spinner_qFRN\"\n          begin=\"0;spinner_OcgL.end+0.25s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n      <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          begin=\"spinner_qFRN.begin+0.1s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n      <circle cx=\"20\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          id=\"spinner_OcgL\"\n          begin=\"spinner_qFRN.begin+0.2s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n    </svg>\n  )\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { LLMStatusEnum } from 'src/services/database/types/llm'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\n\nimport { LLM } from 'src/services/database/types'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { Card } from 'src/lib/shadcn/ui/card'\n\nexport const ChatLLMInfo = memo(\n  ({\n    llm,\n    status,\n    loadLLM,\n    progress,\n  }: {\n    llm?: LLM\n    progress?: string\n    status?: `${LLMStatusEnum}`\n    loadLLM?: () => Promise<void>\n  }) => {\n    const { t } = useTranslation('flows')\n    const [llmInfo, setLLMInfo] = useState<\n      | { hasCache: boolean; isFunctionCalling: boolean; info?: ModelRecord; cloud?: boolean }\n      | undefined\n    >()\n\n    useEffect(() => {\n      if (llmInfo || !llm?.name) {\n        return\n      }\n      if (llm?.provider !== 'WebLLM') {\n        setLLMInfo({\n          hasCache: false,\n          cloud: true,\n          isFunctionCalling: true,\n          info: {\n            model_id: llm?.name,\n            model: llm?.name,\n            model_lib: llm?.provider,\n            model_type: 2,\n          },\n        })\n        return\n      }\n      import('@mlc-ai/web-llm').then(\n        async ({ hasModelInCache, functionCallingModelIds, prebuiltAppConfig }) => {\n          const hasCache = await hasModelInCache(llm?.name)\n          setLLMInfo({\n            hasCache,\n            isFunctionCalling: functionCallingModelIds.includes(llm?.name),\n            info: prebuiltAppConfig.model_list.find((item) => item.model_id === llm?.name),\n          })\n        },\n      )\n    }, [llm?.name, llmInfo])\n\n    const handleLoadLLM = useCallback(async () => {\n      await loadLLM?.()\n    }, [loadLLM])\n\n    const llmIcon = useMemo(() => {\n      switch (status) {\n        case LLMStatusEnum.Downloading:\n          return <LazyIcon className={'animate-spin w-7 h-7'} name={'arrow-big-down-dash'} />\n        case LLMStatusEnum.Loaded:\n          return <LLMIcon name={llm?.name || 'brain'} className=\"w-7 h-7\" />\n        default:\n          return <LLMIcon name={llm?.name || 'brain'} className=\"w-7 h-7\" />\n      }\n    }, [llm?.name, status])\n    return (\n      <Card className=\"flex justify-center !bg-inherit !p-2 max-w-full overflow-y-hidden !mb-2 m-2 !mt-0\">\n        <div className=\"ml-2 pt-1 max-w-full\">\n          <p className=\"flex gap-2 items-center pr-6 !text-sm font-semibold\">\n            {llmIcon}\n            {`${llm?.name || ''}`}\n          </p>\n          <div className=\"max-w-full mt-2 flex-wrap flex gap-1\">\n            <LLMInfo\n              model={llmInfo?.info}\n              isFunctionCalling={llmInfo?.isFunctionCalling || false}\n              name={llm?.name}\n              isCached={llmInfo?.hasCache || false}\n              cloud={llmInfo?.cloud || false}\n            />\n            {status !== LLMStatusEnum.Loaded ? (\n              progress ? (\n                <div className=\"text-sm break-words flex-wrap\">{progress}</div>\n              ) : (\n                <Button\n                  disabled={status === LLMStatusEnum.Loading}\n                  onClick={handleLoadLLM}\n                  className=\"mt-4 w-full\"\n                >\n                  {t(\n                    llmInfo?.hasCache\n                      ? 'llm_node.load_model_button'\n                      : 'llm_node.download_model_button',\n                  )}\n                </Button>\n              )\n            ) : undefined}\n          </div>\n        </div>\n      </Card>\n    )\n  },\n)\n","import { Document } from '@langchain/core/documents'\nimport chunk from 'lodash/chunk'\nimport { useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport type { VectorDatabase } from 'src/services/database/types'\nimport { VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { useChatApplicationData } from './use-chat-application-data'\n\nexport const useVectorDatabaseActions = (\n  mainEmbeddingInfo?: ReturnType<typeof useChatApplicationData>['mainEmbeddingInfo'],\n) => {\n  const [loading, setLoading] = useState(false)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n\n  const { index: indexFunction, similaritySearchWithScore: similaritySearchWithScoreFunction } =\n    useEmbedding()\n  const similaritySearchWithScore = useCallback(\n    async (input: string, options?: { k?: number; vectorDatabase: VectorDatabase }) => {\n      try {\n        if (!options?.vectorDatabase) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n        if (options?.vectorDatabase.storage === VectorDatabaseStorageEnum.DataNode) {\n          throw new Error('DataNode storage is not supported for similarity search')\n        } else {\n          setLoading(true)\n          const result = await similaritySearchWithScoreFunction(\n            mainEmbeddingInfo?.embedding,\n            {\n              database: {\n                databaseId: options.vectorDatabase.id,\n              },\n            },\n            input,\n            options?.k,\n          )\n          return result\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [toast, t, similaritySearchWithScoreFunction, mainEmbeddingInfo?.embedding],\n  )\n\n  const indexData = useCallback(\n    async (\n      data: { id?: string; content?: string; documents?: Document[] },\n      options?: {\n        vectorDatabase: VectorDatabase\n        onProgressReport?: (info: { total: number; handled: number; handling: number }) => void\n      },\n    ) => {\n      try {\n        setLoading(true)\n        const documents = data.content\n          ? [\n              new Document({\n                pageContent: data.content,\n                id: data.id,\n                metadata: {\n                  id: data.id,\n                },\n              }),\n            ]\n          : data.documents\n\n        if (!documents?.length) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.content_not_found'),\n          })\n          return\n        }\n\n        if (!options?.vectorDatabase) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n\n        if (options?.vectorDatabase.storage === VectorDatabaseStorageEnum.DataNode) {\n          throw new Error('DataNode storage is not supported for indexing')\n        } else {\n          // DEFAULT OPTION IS INDEXING AND STORED DIRECTLY TO VECTOR DATABASE ENTITY\n          const chunkedDocuments = chunk(documents, 10)\n          let handledCount = 0\n\n          for (const partDocuments of chunkedDocuments) {\n            options?.onProgressReport?.({\n              handling: partDocuments.length,\n              handled: handledCount,\n              total: documents.length,\n            })\n            await indexFunction(\n              mainEmbeddingInfo?.embedding,\n              {\n                database: {\n                  databaseId: options.vectorDatabase.id,\n                },\n              },\n              partDocuments,\n            )\n            handledCount += partDocuments.length\n          }\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [toast, t, indexFunction, mainEmbeddingInfo?.embedding],\n  )\n\n  return {\n    loading,\n    indexData,\n    similaritySearchWithScore,\n  }\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { create, useModal } from '@ebay/nice-modal-react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { WebPDFLoader } from '@langchain/community/document_loaders/web/pdf'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from 'src/lib/shadcn/ui/tabs'\nimport { VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { cn } from 'src/lib/utils'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from 'src/lib/shadcn/ui/dialog'\nimport { VectorSearch } from 'src/components/flows/Nodes/VectorDatabaseNode/components/VectorSearch'\nimport IndexNewText from 'src/components/flows/Nodes/VectorDatabaseNode/components/IndexNewText'\nimport IndexNewFile from 'src/components/flows/Nodes/VectorDatabaseNode/components/IndexNewFile'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { decodeLine } from 'src/utils/string-data'\nimport { useVectorDatabaseActions } from 'src/components/pages/ChatApplication/hooks/use-vector-database-actions'\nimport { useChatApplicationData } from 'src/components/pages/ChatApplication/hooks/use-chat-application-data'\n\ntype VectorDatabaseDialogProps = {\n  retriverInfo: ReturnType<typeof useChatApplicationData>['retriverInfo'][number]\n  mainEmbeddingInfo?: ReturnType<typeof useChatApplicationData>['mainEmbeddingInfo']\n}\n\nconst VectorDatabaseDialog = create<VectorDatabaseDialogProps>(\n  ({ retriverInfo, mainEmbeddingInfo }) => {\n    const { t } = useTranslation('applications')\n    const { loading, similaritySearchWithScore, indexData } =\n      useVectorDatabaseActions(mainEmbeddingInfo)\n\n    const [mode, setMode] = useState('search')\n    const [progress, setProgress] = useState(0)\n    const currentModal = useModal()\n\n    const vectorDatabaseData = useMemo(() => {\n      if (!retriverInfo?.vectorDatabaseEntity?.raw) {\n        return {\n          headers: [],\n          rows: [],\n        }\n      }\n\n      const headers = ['content', 'embedding', 'metadata']\n      const lines = decodeLine(retriverInfo?.vectorDatabaseEntity?.raw)\n      return {\n        headers,\n        rows: lines.map((row) => {\n          try {\n            const data = JSON.parse(row)\n            return data\n          } catch {\n            return []\n          }\n        }),\n      }\n    }, [retriverInfo?.vectorDatabaseEntity?.raw])\n\n    const handleCreateData = useCallback(\n      async (...args: Parameters<typeof indexData>) => {\n        const [data, options] = args\n        await indexData(data, {\n          ...options,\n          vectorDatabase: retriverInfo.vectorDatabaseEntity,\n        })\n      },\n      [indexData, retriverInfo.vectorDatabaseEntity],\n    )\n\n    const handleSimilaritySearch = useCallback(\n      async (value: string, k?: number) => {\n        const input = value.trim()\n        const documents = await similaritySearchWithScore(input, {\n          k,\n          vectorDatabase: retriverInfo.vectorDatabaseEntity,\n        })\n        if (!documents?.length) {\n          return\n        }\n        return documents\n      },\n      [retriverInfo.vectorDatabaseEntity, similaritySearchWithScore],\n    )\n\n    const handleIndexPDF = useCallback(\n      async (file: File) => {\n        if (file.type.includes('text') || file.type.includes('txt')) {\n          const reader = new FileReader()\n          reader.onload = async (e) => {\n            const content = e.target?.result as string\n            await handleCreateData(\n              { content },\n              {\n                vectorDatabase: retriverInfo.vectorDatabaseEntity,\n              },\n            )\n          }\n          reader.readAsText(file)\n        } else if (file.type.endsWith('pdf')) {\n          // File to blob\n          const blob = new Blob([file], { type: 'application/pdf' })\n          const customBuildLoader = new WebPDFLoader(blob, {\n            // you may need to add `.then(m => m.default)` to the end of the import\n            pdfjs: async () => {\n              const pdfjs = await import('pdfjs-dist/legacy/build/pdf.min.mjs')\n              await import('pdfjs-dist/legacy/build/pdf.worker.min.mjs')\n              pdfjs.GlobalWorkerOptions.workerSrc = new URL(\n                'pdfjs-dist/build/pdf.worker.min.js',\n                import.meta.url,\n              ).toString()\n              return pdfjs\n            },\n            parsedItemSeparator: ' ',\n          })\n          const documents = await customBuildLoader.load()\n          await handleCreateData(\n            { documents },\n            {\n              vectorDatabase: retriverInfo.vectorDatabaseEntity,\n              onProgressReport: (info) => {\n                setProgress((info.handled + info.handling) / info.total)\n              },\n            },\n          )\n        }\n      },\n      [handleCreateData, retriverInfo.vectorDatabaseEntity],\n    )\n\n    const renderContent = useMemo(() => {\n      switch (mode) {\n        case 'search':\n          return (\n            <TabsContent value=\"search\">\n              <VectorSearch loading={loading} onSimilaritySearch={handleSimilaritySearch} />\n            </TabsContent>\n          )\n        case 'new':\n          return (\n            <TabsContent className=\"min-w-80\" value=\"new\">\n              <IndexNewText loading={loading} onCreateData={handleCreateData} />\n            </TabsContent>\n          )\n        case 'file':\n          return (\n            <TabsContent value=\"file\">\n              <IndexNewFile\n                loading={loading}\n                progress={progress}\n                onFileSubmit={handleIndexPDF}\n                fileOptions={{ accept: '.pdf,.txt,.text', maxSize: 1 }}\n              />\n            </TabsContent>\n          )\n        case 'view': {\n          return (\n            <TabsContent value=\"view\" className=\"max-h-full overflow-auto\">\n              <DataViewer\n                data={vectorDatabaseData.rows}\n                headers={vectorDatabaseData.headers}\n                limitLengthByColumns={{\n                  embedding: 32,\n                }}\n              />\n            </TabsContent>\n          )\n        }\n      }\n    }, [\n      handleCreateData,\n      handleIndexPDF,\n      handleSimilaritySearch,\n      loading,\n      mode,\n      progress,\n      vectorDatabaseData,\n    ])\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n        <DialogContent className=\"max-w-3xl\">\n          <DialogHeader>\n            <div className=\"flex\">\n              <LazyIcon name=\"file\" className=\"mr-2 h-4 w-4\" />\n              <DialogTitle>{t('chat.vector_database')}</DialogTitle>\n            </div>\n          </DialogHeader>\n          <div className=\"mx-auto w-full min-h-96 max-h-full overflow-hidden\">\n            <div className=\"w-full h-full\">\n              <Tabs\n                value={mode}\n                onValueChange={setMode}\n                defaultValue=\"search\"\n                className={cn('w-full h-full mt-4')}\n              >\n                <TabsList\n                  className={cn(\n                    'grid w-full grid-cols-3',\n                    retriverInfo?.vectorDatabaseEntity?.storage ===\n                      VectorDatabaseStorageEnum.DatabaseNode\n                      ? 'grid-cols-4'\n                      : 'grid-cols-3',\n                  )}\n                >\n                  <TabsTrigger value=\"search\">{t('chat.search')}</TabsTrigger>\n                  <TabsTrigger value=\"new\">{t('chat.text')}</TabsTrigger>\n                  <TabsTrigger value=\"file\">{t('chat.file')}</TabsTrigger>\n                  {retriverInfo?.vectorDatabaseEntity?.storage ===\n                  VectorDatabaseStorageEnum.DatabaseNode ? (\n                    <TabsTrigger value=\"view\">{t('chat.view')}</TabsTrigger>\n                  ) : undefined}\n                </TabsList>\n                {renderContent}\n              </Tabs>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default VectorDatabaseDialog\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSessionState } from 'src/states/session'\nimport { FlowNode, JSONData } from 'src/services/database/types'\nimport { getRepository } from 'src/services/database'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { findFlowNodesWithSource } from 'src/states/flow/actions'\n\nexport const useChatList = (threadNode?: FlowNode) => {\n  const [chatList, setChatList] = useState<{ node: FlowNode; entity: JSONData }[]>([])\n  const currentSession = useSessionState((state) => state.currentSession)\n\n  const getChatList = useCallback(async () => {\n    if (!threadNode || !currentSession?.id) {\n      return\n    }\n    const threadDataEdged = await getRepository('FlowEdge').find({\n      where: { session_id: currentSession.id, source: threadNode.id },\n      order: { id: 'DESC' },\n    })\n    const { flowNodes, flowNodeDatas } = await findFlowNodesWithSource({\n      where: {\n        session_id: currentSession.id,\n        id: In(threadDataEdged.map((edge) => edge.target)),\n        source_type: 'JSONData',\n      },\n      order: { updated_at: 'DESC' },\n      select: ['id', 'source_id', 'source_type', 'updated_at'],\n    })\n    setChatList(\n      flowNodes.reduce((all: { node: FlowNode; entity: JSONData }[], node) => {\n        const entity = flowNodeDatas[node.source_type]?.find((data) => data.id === node.source_id)\n        if (entity) {\n          all.push({\n            node,\n            entity: entity as JSONData,\n          })\n        }\n        return all\n      }, []),\n    )\n  }, [currentSession?.id, threadNode])\n  const deleteChat = useCallback(\n    async (node: FlowNode) => {\n      await getRepository('FlowNode').delete(node.id)\n      await getRepository('JSONData').delete(node.source_id)\n      const allEdges = await getRepository('FlowEdge').find({\n        where: [{ source: node.id }, { target: node.id }],\n      })\n      await Promise.all(\n        allEdges.map((edge) => {\n          return getRepository('FlowEdge').delete(edge.id)\n        }),\n      )\n\n      getChatList()\n    },\n    [getChatList],\n  )\n\n  useEffect(() => {\n    if (!threadNode) {\n      return\n    }\n    getChatList()\n  }, [getChatList, threadNode])\n\n  return {\n    chatList,\n    deleteChat,\n    getChatList,\n  }\n}\n","import * as React from 'react'\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from 'src/lib/shadcn/ui/sidebar'\nimport { useModal } from '@ebay/nice-modal-react'\nimport DeleteChatDataNodeDialog from 'src/components/dialogs/DeleteChatDataNodeDialog'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { FlowNode, Schema } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { convertToZodSchemaString } from 'src/utils/schema-format'\nimport MessageLoading from 'src/lib/shadcn/chat/message-loading'\nimport { cn } from 'src/lib/utils'\nimport { MarkdownViewer } from 'src/components/molecules/MarkdownViewer'\nimport { Card } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { LLMSetting } from 'src/components/atoms/LLMSetting'\n\nimport { ChatLLMInfo } from './ChatLLMInfo'\nimport VectorDatabaseDialog from './VectorDatabaseDialog'\nimport { useChatApplicationData } from '../hooks/use-chat-application-data'\nimport { useChatList } from '../hooks/use-chat-list'\nimport { useUpdateLLMOptions } from '../hooks/use-update-llm-options'\n\nexport function ChatPanel({\n  schema,\n  mainLLMInfo,\n  mainEmbeddingInfo,\n  loadLLM,\n  retriverInfo,\n  threadNode,\n  onSelectThread,\n  onAddNewThread,\n  currentDataNode,\n  setLLMInfo,\n  changeLLMOptions,\n  ...props\n}: React.ComponentProps<typeof Sidebar> & {\n  schema?: Schema\n  threadNode?: FlowNode\n  onAddNewThread?: () => void\n  onSelectThread: (node: FlowNode) => void\n  retriverInfo: ReturnType<typeof useChatApplicationData>['retriverInfo']\n  currentDataNode: ReturnType<typeof useChatApplicationData>['currentDataNode']\n  loadLLM: ReturnType<typeof useChatApplicationData>['loadLLM']\n  mainLLMInfo: ReturnType<typeof useChatApplicationData>['mainLLMInfo']\n  mainEmbeddingInfo?: ReturnType<typeof useChatApplicationData>['mainEmbeddingInfo']\n  setLLMInfo: ReturnType<typeof useChatApplicationData>['setLLMInfo']\n  changeLLMOptions: ReturnType<typeof useUpdateLLMOptions>['changeLLMOptions']\n}) {\n  const { t } = useTranslation('applications')\n  const [loading, setLoading] = React.useState(false)\n  const deleteChatDataNodeDialog = useModal(DeleteChatDataNodeDialog)\n  const vectorDatabaseDialog = useModal(VectorDatabaseDialog)\n  const { chatList, getChatList, deleteChat } = useChatList(threadNode)\n\n  const handleAddNewThread = React.useCallback(async () => {\n    try {\n      setLoading(true)\n      await onAddNewThread?.()\n      getChatList()\n    } finally {\n      setLoading(false)\n    }\n  }, [getChatList, onAddNewThread])\n\n  const handleShowVectorDatabase = React.useCallback(() => {\n    vectorDatabaseDialog.show({\n      retriverInfo: retriverInfo[0],\n      mainEmbeddingInfo: mainEmbeddingInfo,\n    })\n  }, [mainEmbeddingInfo, retriverInfo, vectorDatabaseDialog])\n\n  const handleDeleteDataNode = React.useCallback(\n    async (e: React.MouseEvent, node: FlowNode) => {\n      e.stopPropagation()\n      deleteChatDataNodeDialog.show({ onDelete: () => deleteChat(node) })\n    },\n    [deleteChat, deleteChatDataNodeDialog],\n  )\n\n  const handleChangeOptions = React.useCallback(\n    async (options: Record<string, unknown>) => {\n      if (!mainLLMInfo?.llm) {\n        return\n      }\n      await changeLLMOptions(mainLLMInfo?.llm, options)\n      setLLMInfo((pre) =>\n        pre\n          ? {\n              ...pre,\n              llm: {\n                ...pre.llm,\n                options,\n              },\n            }\n          : undefined,\n      )\n    },\n    [changeLLMOptions, mainLLMInfo?.llm, setLLMInfo],\n  )\n\n  const content = React.useMemo(() => {\n    return (\n      <MarkdownViewer\n        className={cn('overflow-hidden break-words whitespace-pre-wrap w-full rounded-lg')}\n        source={\n          schema?.schema_items?.length\n            ? `\\`\\`\\`javascript\\n${convertToZodSchemaString(schema?.schema_items || [])}\\n\\`\\`\\``\n            : ''\n        }\n      />\n    )\n  }, [schema?.schema_items])\n\n  return (\n    <Sidebar variant=\"sidebar\" side=\"right\" collapsible=\"none\" {...props}>\n      <div className=\"h-1\" />\n      <SidebarGroupLabel className=\"justify-between\">\n        <div className=\"text-sm pl-2\">{t('chat.history')}</div>\n        <LoadingButton\n          loading={loading}\n          onClick={handleAddNewThread}\n          variant=\"link\"\n          className=\"mr-[-6px]\"\n        >\n          <LazyIcon name=\"circle-plus\" />\n        </LoadingButton>\n      </SidebarGroupLabel>\n      <SidebarContent>\n        <SidebarGroup className=\"flex-1\">\n          <SidebarMenu>\n            {chatList.map(({ node }, index) => (\n              <SidebarMenuItem key={node.id} onClick={() => onSelectThread(node)}>\n                <SidebarMenuButton className=\"cursor-pointer\">\n                  <div className=\"flex flex-row justify-between items-center w-full\">\n                    <div className=\"flex gap-2\">\n                      <LazyIcon\n                        size={16}\n                        name={currentDataNode?.node?.id === node.id ? 'check' : 'chevron-right'}\n                        className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\"\n                      />\n                      <span>{`Thread ${index + 1}`}</span>\n                    </div>\n                    <LazyIcon\n                      onClick={(e) => handleDeleteDataNode(e, node)}\n                      size={16}\n                      name=\"trash-2\"\n                    />\n                  </div>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            ))}\n          </SidebarMenu>\n        </SidebarGroup>\n        {retriverInfo?.length ? (\n          <Card className=\"m-2 p-2 max-w-full\">\n            <pre className=\"overflow-auto\">\n              {retriverInfo.map((info, key) => (\n                <span key={`${key}`}>{info.promptEntity?.content || ''}</span>\n              ))}\n            </pre>\n            <Button onClick={handleShowVectorDatabase} className=\"w-full mt-4\">\n              {t('chat.vector_database')}\n            </Button>\n          </Card>\n        ) : undefined}\n        {schema?.schema_items?.length ? (\n          <div className=\"m-2 !mb-0\">\n            <React.Suspense fallback={<MessageLoading />}>{content}</React.Suspense>\n          </div>\n        ) : undefined}\n        <LLMSetting\n          options={mainLLMInfo?.llm?.options}\n          onChangeOptions={handleChangeOptions}\n          className=\"p-2\"\n        />\n        <ChatLLMInfo\n          llm={mainLLMInfo?.llm}\n          status={mainLLMInfo?.status}\n          progress={mainLLMInfo?.progress}\n          loadLLM={loadLLM}\n        />\n      </SidebarContent>\n    </Sidebar>\n  )\n}\n","\"use client\";\n\n// packages/react/avatar/src/Avatar.tsx\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar AVATAR_NAME = \"Avatar\";\nvar [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\nvar [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);\nvar Avatar = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeAvatar, ...avatarProps } = props;\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState(\"idle\");\n    return /* @__PURE__ */ jsx(\n      AvatarProvider,\n      {\n        scope: __scopeAvatar,\n        imageLoadingStatus,\n        onImageLoadingStatusChange: setImageLoadingStatus,\n        children: /* @__PURE__ */ jsx(Primitive.span, { ...avatarProps, ref: forwardedRef })\n      }\n    );\n  }\n);\nAvatar.displayName = AVATAR_NAME;\nvar IMAGE_NAME = \"AvatarImage\";\nvar AvatarImage = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeAvatar, src, onLoadingStatusChange = () => {\n    }, ...imageProps } = props;\n    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n    const imageLoadingStatus = useImageLoadingStatus(src, imageProps.referrerPolicy);\n    const handleLoadingStatusChange = useCallbackRef((status) => {\n      onLoadingStatusChange(status);\n      context.onImageLoadingStatusChange(status);\n    });\n    useLayoutEffect(() => {\n      if (imageLoadingStatus !== \"idle\") {\n        handleLoadingStatusChange(imageLoadingStatus);\n      }\n    }, [imageLoadingStatus, handleLoadingStatusChange]);\n    return imageLoadingStatus === \"loaded\" ? /* @__PURE__ */ jsx(Primitive.img, { ...imageProps, ref: forwardedRef, src }) : null;\n  }\n);\nAvatarImage.displayName = IMAGE_NAME;\nvar FALLBACK_NAME = \"AvatarFallback\";\nvar AvatarFallback = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeAvatar, delayMs, ...fallbackProps } = props;\n    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n    const [canRender, setCanRender] = React.useState(delayMs === void 0);\n    React.useEffect(() => {\n      if (delayMs !== void 0) {\n        const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n        return () => window.clearTimeout(timerId);\n      }\n    }, [delayMs]);\n    return canRender && context.imageLoadingStatus !== \"loaded\" ? /* @__PURE__ */ jsx(Primitive.span, { ...fallbackProps, ref: forwardedRef }) : null;\n  }\n);\nAvatarFallback.displayName = FALLBACK_NAME;\nfunction useImageLoadingStatus(src, referrerPolicy) {\n  const [loadingStatus, setLoadingStatus] = React.useState(\"idle\");\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus(\"error\");\n      return;\n    }\n    let isMounted = true;\n    const image = new window.Image();\n    const updateStatus = (status) => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n    setLoadingStatus(\"loading\");\n    image.onload = updateStatus(\"loaded\");\n    image.onerror = updateStatus(\"error\");\n    image.src = src;\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [src, referrerPolicy]);\n  return loadingStatus;\n}\nvar Root = Avatar;\nvar Image = AvatarImage;\nvar Fallback = AvatarFallback;\nexport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n  Fallback,\n  Image,\n  Root,\n  createAvatarScope\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from 'src/lib/utils'\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn('aspect-square h-full w-full', className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      'flex h-full w-full items-center justify-center rounded-full bg-muted',\n      className,\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from 'src/lib/utils'\nimport { Avatar, AvatarImage, AvatarFallback } from 'src/lib/shadcn/ui/avatar'\nimport MessageLoading from 'src/lib/shadcn/chat/message-loading'\nimport { Button, ButtonProps } from 'src/lib/shadcn/ui/button'\n\n// ChatBubble\nconst chatBubbleVariant = cva('flex gap-2 max-w-[60%] items-end relative group', {\n  variants: {\n    variant: {\n      received: 'self-start',\n      sent: 'self-end flex-row-reverse',\n    },\n    layout: {\n      default: '',\n      ai: 'max-w-full w-full items-center',\n    },\n  },\n  defaultVariants: {\n    variant: 'received',\n    layout: 'default',\n  },\n})\n\ninterface ChatBubbleProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof chatBubbleVariant> {\n  innerclassname?: string\n}\n\nconst ChatBubble = React.forwardRef<HTMLDivElement, ChatBubbleProps>(\n  ({ className, variant, layout, children, ...props }, ref) => (\n    <div\n      className={cn(chatBubbleVariant({ variant, layout, className }), 'relative group')}\n      ref={ref}\n      {...props}\n    >\n      {React.Children.map(children, (child) =>\n        React.isValidElement(child) && typeof child.type !== 'string'\n          ? React.cloneElement(child, {\n              variant,\n              layout,\n              className: props?.innerclassname,\n            } as React.ComponentProps<typeof child.type>)\n          : child,\n      )}\n    </div>\n  ),\n)\nChatBubble.displayName = 'ChatBubble'\n\n// ChatBubbleAvatar\ninterface ChatBubbleAvatarProps {\n  src?: string\n  fallback?: string\n  className?: string\n}\n\nconst ChatBubbleAvatar: React.FC<ChatBubbleAvatarProps> = ({ src, fallback, className }) => (\n  <Avatar className={className}>\n    <AvatarImage src={src} alt=\"Avatar\" />\n    <AvatarFallback>{fallback}</AvatarFallback>\n  </Avatar>\n)\n\n// ChatBubbleMessage\nconst chatBubbleMessageVariants = cva('p-4', {\n  variants: {\n    variant: {\n      received: 'bg-secondary text-secondary-foreground rounded-r-lg rounded-tl-lg',\n      sent: 'border border-border rounded-l-lg rounded-tr-lg',\n    },\n    layout: {\n      default: '',\n      ai: 'border-t w-full rounded-none bg-transparent',\n    },\n  },\n  defaultVariants: {\n    variant: 'received',\n    layout: 'default',\n  },\n})\n\ninterface ChatBubbleMessageProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof chatBubbleMessageVariants> {\n  isLoading?: boolean\n}\n\nconst ChatBubbleMessage = React.forwardRef<HTMLDivElement, ChatBubbleMessageProps>(\n  ({ className, variant, layout, isLoading = false, children, ...props }, ref) => (\n    <div\n      className={cn(\n        chatBubbleMessageVariants({ variant, layout, className }),\n        'break-words max-w-full whitespace-pre-wrap',\n      )}\n      ref={ref}\n      {...props}\n    >\n      {isLoading ? (\n        <div className=\"flex items-center space-x-2\">\n          <MessageLoading />\n        </div>\n      ) : (\n        children\n      )}\n    </div>\n  ),\n)\nChatBubbleMessage.displayName = 'ChatBubbleMessage'\n\n// ChatBubbleTimestamp\ninterface ChatBubbleTimestampProps extends React.HTMLAttributes<HTMLDivElement> {\n  timestamp: string\n}\n\nconst ChatBubbleTimestamp: React.FC<ChatBubbleTimestampProps> = ({\n  timestamp,\n  className,\n  ...props\n}) => (\n  <div className={cn('text-xs mt-2 text-right', className)} {...props}>\n    {timestamp}\n  </div>\n)\n\n// ChatBubbleAction\ntype ChatBubbleActionProps = ButtonProps & {\n  icon: React.ReactNode\n}\n\nconst ChatBubbleAction: React.FC<ChatBubbleActionProps> = ({\n  icon,\n  onClick,\n  className,\n  variant = 'ghost',\n  size = 'icon',\n  ...props\n}) => (\n  <Button variant={variant} size={size} className={className} onClick={onClick} {...props}>\n    {icon}\n  </Button>\n)\n\ninterface ChatBubbleActionWrapperProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'sent' | 'received'\n  className?: string\n}\n\nconst ChatBubbleActionWrapper = React.forwardRef<HTMLDivElement, ChatBubbleActionWrapperProps>(\n  ({ variant, className, children, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'absolute top-1/2 -translate-y-1/2 flex opacity-0 group-hover:opacity-100 transition-opacity duration-200',\n        variant === 'sent'\n          ? '-left-1 -translate-x-full flex-row-reverse'\n          : '-right-1 translate-x-full',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  ),\n)\nChatBubbleActionWrapper.displayName = 'ChatBubbleActionWrapper'\n\nexport {\n  ChatBubble,\n  ChatBubbleAvatar,\n  ChatBubbleMessage,\n  ChatBubbleTimestamp,\n  chatBubbleVariant,\n  chatBubbleMessageVariants,\n  ChatBubbleAction,\n  ChatBubbleActionWrapper,\n}\n","import { memo, Suspense, useMemo } from 'react'\nimport { Message } from 'ai/react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport {\n  ChatBubble,\n  ChatBubbleAction,\n  ChatBubbleAvatar,\n  ChatBubbleMessage,\n} from 'src/lib/shadcn/chat/chat-bubble'\nimport MessageLoading from 'src/lib/shadcn/chat/message-loading'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { MarkdownViewer } from 'src/components/molecules/MarkdownViewer'\n\nconst ChatAiIcons = [\n  {\n    icon: 'copy' as const,\n    label: 'Copy',\n  },\n  {\n    icon: 'refresh-ccw' as const,\n    label: 'Refresh',\n  },\n  {\n    icon: 'volume-2' as const,\n    label: 'Volume',\n  },\n]\n\nexport const ChatItem = memo(\n  ({\n    message,\n    index,\n    isLastMessage,\n    isGenerating,\n    isSchema,\n    onActionClick,\n  }: {\n    message: Message\n    index: number\n    isLastMessage: boolean\n    isGenerating?: boolean\n    isSchema?: boolean\n    onActionClick: (action: string, message: Message) => Promise<void>\n  }) => {\n    const content = useMemo(() => {\n      return (\n        <MarkdownViewer\n          style={{\n            color: 'unset !important',\n          }}\n          source={\n            message.content\n              ? isSchema\n                ? `\\`\\`\\`json\\n${message.content}\\n\\`\\`\\``\n                : message.content\n              : ''\n          }\n        />\n      )\n    }, [isSchema, message.content])\n    return (\n      <ChatBubble\n        innerclassname={message.role == 'system' ? '!bg-transparent font-semibold' : undefined}\n        key={index}\n        variant={message.role == 'user' ? 'sent' : 'received'}\n      >\n        {message.role === 'system' ? (\n          <div className=\"w-10 h-10\" />\n        ) : message.role === 'assistant' ? (\n          <ChatBubbleAvatar\n            src=\"\"\n            fallback={\n              message.data && typeof message.data === 'object' && 'injectedMessage' in message.data\n                ? '📂'\n                : '🤖'\n            }\n          />\n        ) : undefined}\n        <ChatBubbleMessage>\n          {isGenerating && isLastMessage && (!message.content || isSchema) ? (\n            <MessageLoading />\n          ) : (\n            <Suspense fallback={<MessageLoading />}>\n              {message.role === 'system' ? (\n                <Badge className=\"!text-sm mb-1\">System</Badge>\n              ) : undefined}\n              {content}\n            </Suspense>\n          )}\n          {message.role === 'assistant' && isLastMessage && (\n            <div className=\"flex items-center mt-1.5 gap-1\">\n              {!isGenerating && (\n                <>\n                  {ChatAiIcons.map((icon, iconIndex) => {\n                    return (\n                      <ChatBubbleAction\n                        variant=\"ghost\"\n                        className=\"size-5\"\n                        key={iconIndex}\n                        icon={<LazyIcon name={icon.icon} className=\"size-3\" />}\n                        onClick={() => onActionClick(icon.label, message)}\n                      />\n                    )\n                  })}\n                </>\n              )}\n            </div>\n          )}\n        </ChatBubbleMessage>\n      </ChatBubble>\n    )\n  },\n  () => false,\n)\n","import { useCallback } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { LLM } from 'src/services/database/types'\n\nexport const useUpdateLLMOptions = () => {\n  const changeLLMOptions = useCallback(async (llm: LLM, options: Record<string, unknown>) => {\n    if (llm) {\n      await getRepository('LLM').update(llm.id, { options })\n    }\n  }, [])\n\n  return {\n    changeLLMOptions,\n  }\n}\n","'use client'\n\nimport {\n  memo,\n  useEffect,\n  useRef,\n  useState,\n  KeyboardEvent,\n  MouseEvent,\n  useCallback,\n  useMemo,\n} from 'react'\nimport { nanoid } from 'nanoid'\nimport { useTranslation } from 'react-i18next'\nimport { ChatMessageList } from 'src/lib/shadcn/chat/chat-message-list'\nimport { Message, useChat } from 'ai/react'\nimport AIInput from 'src/lib/kokonutui/ai-input'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport textToSpeech from 'src/utils/text-to-speech'\nimport { SidebarInset, SidebarProvider } from 'src/lib/shadcn/ui/sidebar'\n\nimport { useChatApplicationData } from './hooks/use-chat-application-data'\nimport { useSendMessage } from './hooks/use-send-message'\nimport { ChatPanel } from './components/ChatPanel'\nimport { ChatItem } from './components/ChatItem'\nimport { useUpdateLLMOptions } from './hooks/use-update-llm-options'\n\nconst ChatApplication = memo(() => {\n  const { t } = useTranslation('applications')\n  const isScrolling = useRef(false)\n  const [isGenerating, setIsGenerating] = useState(false)\n\n  const scrollToBottom = useCallback(() => {\n    setTimeout(() => {\n      if (messagesRef.current) {\n        messagesRef.current.scrollTop = messagesRef.current.scrollHeight\n      }\n    }, 50)\n  }, [])\n\n  const chatApplicationData = useChatApplicationData()\n  const {\n    schema,\n    threadInfo,\n    mainLLMInfo,\n    retriverInfo,\n    currentDataNode,\n    loadLLM,\n    setLLMInfo,\n    addNewDataNode,\n    selectDataNode,\n    updateMessagesData,\n    onThreadMessagesLoaded,\n  } = chatApplicationData\n  const { changeLLMOptions } = useUpdateLLMOptions()\n  const { sendMessage } = useSendMessage(chatApplicationData)\n  const {\n    input,\n    messages,\n    isLoading,\n    reload,\n    setInput,\n    handleSubmit,\n    handleInputChange,\n    setMessages,\n  } = useChat({\n    fetch: async (_input: RequestInfo | URL, init?: RequestInit) => {\n      try {\n        setIsGenerating(true)\n        const body = JSON.parse(init?.body as string) as { messages: Message[] }\n        const newMessageId = nanoid()\n        const lastMessage = body.messages[body.messages.length - 1]\n        isScrolling.current = true\n        setMessages((messages) => [\n          ...messages,\n          { id: nanoid(), content: lastMessage.content, role: 'user' },\n        ])\n        await sendMessage(\n          lastMessage.content,\n          body.messages || [],\n          { retriverInfo },\n          {\n            schema,\n            onInjectedMessages: (injectedMessages) => {\n              if (injectedMessages.length) {\n                setMessages((messages) => [\n                  ...messages,\n                  ...injectedMessages.map((message) => {\n                    if (message._getType() === 'system') {\n                      return {\n                        id: nanoid(),\n                        content: `${message.content}`,\n                        role: 'system' as const,\n                        data: { injectedMessage: true },\n                      }\n                    } else if (message._getType() === 'human') {\n                      return {\n                        id: nanoid(),\n                        content: `${message.content}`,\n                        role: 'user' as const,\n                        data: { injectedMessage: true },\n                      }\n                    }\n                    return {\n                      id: nanoid(),\n                      content: `${message.content}`,\n                      role: 'assistant' as const,\n                      data: { injectedMessage: true },\n                    }\n                  }),\n                ])\n              }\n            },\n            onResponseMessageCreate: (content) => {\n              setMessages((messages) => [\n                ...messages,\n                { id: newMessageId, content: content || '', role: 'assistant' },\n              ])\n            },\n            onMessageUpdate: (info) => {\n              setMessages((messages) => {\n                const newMessages = [...messages]\n                const index = newMessages.findIndex((message) => message.id === newMessageId)\n                if (index !== -1) {\n                  newMessages[index] = {\n                    ...newMessages[index],\n                    content: info.nodeData.content || '',\n                  }\n                }\n                return newMessages\n              })\n              if (isScrolling.current) {\n                scrollToBottom()\n              }\n            },\n          },\n        )\n        setMessages((messages) => {\n          updateMessagesData(messages)\n          return messages\n        })\n        setIsGenerating(false)\n        setInput('')\n        if (isScrolling.current) {\n          scrollToBottom()\n        }\n        return new Response()\n      } finally {\n        setIsGenerating(false)\n      }\n    },\n  })\n\n  const messagesRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const cleandUp = onThreadMessagesLoaded((messages) => {\n      setMessages(messages || [])\n      scrollToBottom()\n    })\n    return () => {\n      cleandUp()\n    }\n  }, [setMessages, onThreadMessagesLoaded, scrollToBottom])\n\n  const onSubmit = async (\n    _value: string,\n    e: KeyboardEvent<HTMLTextAreaElement> | MouseEvent<HTMLButtonElement>,\n  ) => {\n    setIsGenerating(true)\n    await handleSubmit(e)\n    return true\n  }\n\n  const handleActionClick = useCallback(\n    async (action: string, message: Message) => {\n      if (action === 'Refresh') {\n        setIsGenerating(true)\n        try {\n          await reload()\n        } finally {\n          setIsGenerating(false)\n        }\n      }\n\n      if (action === 'Copy') {\n        if (message && message.role === 'assistant') {\n          navigator.clipboard.writeText(message.content)\n        }\n      }\n\n      if (action === 'Volume') {\n        if (message?.content) {\n          await textToSpeech.speak(message?.content || '')\n        }\n      }\n    },\n    [reload],\n  )\n\n  const handleStopScroll = useCallback(() => (isScrolling.current = false), [])\n\n  const messageList = useMemo(() => {\n    return (\n      messages &&\n      messages.map((message, index) => (\n        <ChatItem\n          key={message.id || `${index}`}\n          message={message}\n          index={index}\n          isLastMessage={index === messages.length - 1}\n          isGenerating={isGenerating}\n          isSchema={schema ? true : false}\n          onActionClick={handleActionClick}\n        />\n      ))\n    )\n  }, [messages, isGenerating, schema, handleActionClick])\n\n  return (\n    <SidebarProvider\n      onClick={handleStopScroll}\n      className=\"max-h-full !overflow-hidden !min-h-full\"\n      style={{ minHeight: 'unset' }}\n      defaultOpen={true}\n    >\n      <SidebarInset className=\"!max-h-full !overflow-hidden\" style={{ minHeight: 'unset' }}>\n        <main className=\"flex h-full w-full max-w-2xl flex-col items-center mx-auto overflow-hidden\">\n          <div className=\"flex-1 overflow-y-auto overflow-x-hidden min-w-full max-w-full\">\n            <ChatMessageList className=\"!max-h-full\" ref={messagesRef}>\n              {messageList}\n            </ChatMessageList>\n          </div>\n          <AIInput\n            className=\"!max-w-2xl px-4\"\n            onSubmit={onSubmit}\n            disabled={isLoading || isGenerating || mainLLMInfo?.status !== LLMStatusEnum.Loaded}\n            placeholder={t('chat.input_message_placeholder')}\n            value={input}\n            onChange={handleInputChange}\n          />\n        </main>\n      </SidebarInset>\n      <ChatPanel\n        schema={schema}\n        currentDataNode={currentDataNode}\n        threadNode={threadInfo?.threadNode}\n        loadLLM={loadLLM}\n        mainLLMInfo={mainLLMInfo}\n        mainEmbeddingInfo={chatApplicationData.mainEmbeddingInfo}\n        retriverInfo={retriverInfo}\n        onAddNewThread={addNewDataNode}\n        onSelectThread={selectDataNode}\n        changeLLMOptions={changeLLMOptions}\n        setLLMInfo={setLLMInfo}\n      />\n    </SidebarProvider>\n  )\n})\n\nexport default ChatApplication\n"],"file":"assets/ChatApplication-nGOsgnEa.js"}