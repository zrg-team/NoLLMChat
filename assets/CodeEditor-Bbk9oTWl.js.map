{"version":3,"file":"CodeEditor-Bbk9oTWl.js","sources":["../../src/components/atoms/CodeEditor.tsx"],"sourcesContent":["import { memo, useCallback, useMemo, useRef } from 'react'\nimport Monaco from '@monaco-editor/react'\nimport type * as monaco from 'monaco-editor'\n\nimport { useAppState } from 'src/states/app'\nimport { cn } from 'src/lib/utils'\n\ninterface EditorProps {\n  content: string\n  className?: string\n  language?: string\n  setContent: (content: string) => void\n  options?: monaco.editor.IStandaloneEditorConstructionOptions\n}\n\nexport type Editor = monaco.editor.IStandaloneCodeEditor\nexport type Monaco = typeof monaco\n\nconst CodeEditor = memo(\n  ({ content, language, setContent, className, options: inputOptions }: EditorProps) => {\n    const fileChangeDebounceRef = useRef<number>()\n    const currentContentRef = useRef<string>('')\n    const isDarkTheme = useAppState((state) => state.theme === 'dark')\n    const handleOnChange = useCallback(\n      (value?: string) => {\n        if (fileChangeDebounceRef.current) {\n          clearTimeout(fileChangeDebounceRef.current)\n        }\n        if (currentContentRef.current === value) {\n          return\n        }\n        fileChangeDebounceRef.current = setTimeout(() => {\n          if (currentContentRef.current === value) {\n            return\n          }\n          fileChangeDebounceRef.current = undefined\n          currentContentRef.current = value || ''\n          setContent(value || '')\n        }, 500) as unknown as number\n      },\n      [setContent],\n    )\n    const handleMount = useCallback(\n      (editor: Editor) => {\n        editor.setValue(content)\n        return content\n      },\n      [content],\n    )\n    const options = useMemo<monaco.editor.IStandaloneEditorConstructionOptions>(\n      () => ({\n        readOnly: false,\n        padding: { top: 10 },\n        tabSize: 2,\n        ...inputOptions,\n      }),\n      [inputOptions],\n    )\n    return (\n      <Monaco\n        className={cn('nodrag nowheel', className)}\n        theme={isDarkTheme ? 'vs-dark' : 'vs-light'}\n        options={options}\n        onMount={handleMount}\n        onChange={handleOnChange}\n        language={language}\n      />\n    )\n  },\n)\n\nexport default CodeEditor\n"],"names":["CodeEditor","memo","content","language","setContent","className","inputOptions","fileChangeDebounceRef","useRef","currentContentRef","isDarkTheme","useAppState","state","handleOnChange","useCallback","value","handleMount","editor","options","useMemo","jsx","Monaco","cn"],"mappings":"gGAkBA,MAAMA,EAAaC,EAAA,KACjB,CAAC,CAAE,QAAAC,EAAS,SAAAC,EAAU,WAAAC,EAAY,UAAAC,EAAW,QAASC,KAAgC,CACpF,MAAMC,EAAwBC,EAAAA,OAAe,EACvCC,EAAoBD,SAAe,EAAE,EACrCE,EAAcC,EAAaC,GAAUA,EAAM,QAAU,MAAM,EAC3DC,EAAiBC,EAAA,YACpBC,GAAmB,CACdR,EAAsB,SACxB,aAAaA,EAAsB,OAAO,EAExCE,EAAkB,UAAYM,IAGZR,EAAA,QAAU,WAAW,IAAM,CAC3CE,EAAkB,UAAYM,IAGlCR,EAAsB,QAAU,OAChCE,EAAkB,QAAUM,GAAS,GACrCX,EAAWW,GAAS,EAAE,IACrB,GAAG,EACR,EACA,CAACX,CAAU,CACb,EACMY,EAAcF,EAAA,YACjBG,IACCA,EAAO,SAASf,CAAO,EAChBA,GAET,CAACA,CAAO,CACV,EACMgB,EAAUC,EAAA,QACd,KAAO,CACL,SAAU,GACV,QAAS,CAAE,IAAK,EAAG,EACnB,QAAS,EACT,GAAGb,CAAA,GAEL,CAACA,CAAY,CACf,EAEE,OAAAc,EAAA,IAACC,EAAA,CACC,UAAWC,EAAG,iBAAkBjB,CAAS,EACzC,MAAOK,EAAc,UAAY,WACjC,QAAAQ,EACA,QAASF,EACT,SAAUH,EACV,SAAAV,CAAA,CACF,CAAA,CAGN"}