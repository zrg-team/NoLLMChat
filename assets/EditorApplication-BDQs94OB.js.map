{"version":3,"mappings":"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","names":["mainLLMInfo","setLLMInfo","useState","state","t","useTranslation","toast","useToast","useLLM","sessionPassphraseDialogRef","useModalRef","SessionPassphraseDialog","createMessage","input","onMessageUpdate","currentSession","LLMStatusEnum","data","pre","HumanMessage","error","stream","useCallback","connections","getRepository","In","node","llmNode","llm","loadModel","useEffect","init","useUpdateEditorContent","useSessionState","refDebounce","useRef","flowNode","setFlowNode","updateEditorContent","value","PlateAppEditor","lazy","EditorApplication","memo","handleChangeContent","jsxs","jsx","Tooltip","LLMIcon","TooltipTrigger","TooltipContent","DefaultLoader"],"ignoreList":[],"sources":["../../src/components/pages/EditorApplication/hooks/use-create-message.ts","../../src/components/pages/EditorApplication/hooks/use-update-editor-content.ts","../../src/components/pages/EditorApplication/EditorApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { HumanMessage, type BaseMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { stream } = useLLM()\n  const { loadModel } = useLoadModel()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string | BaseMessage[], onMessageUpdate: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, (data) => {\n            setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const streamResponse = await stream(\n            mainLLMInfo?.llm.provider,\n            typeof input === 'string' ? [new HumanMessage(input)] : input,\n            {\n              onMessageUpdate: (data) => {\n                onMessageUpdate?.(data.content)\n              },\n              llm: mainLLMInfo?.llm,\n            },\n          )\n          return streamResponse.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [\n      currentSession?.main_node_id,\n      mainLLMInfo?.llm,\n      mainLLMInfo?.status,\n      toast,\n      t,\n      loadModel,\n      stream,\n    ],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const connections = await getRepository('FlowEdge').find({\n      where: {\n        target: currentSession.main_node_id,\n      },\n    })\n    const connectedNodes = await getRepository('FlowNode').find({\n      where: {\n        id: In(connections.map((connection) => connection.source)),\n      },\n    })\n    const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n    if (!llmNode) {\n      return\n    }\n    const llm = await getRepository('LLM').findOne({\n      where: {\n        id: llmNode.source_id,\n      },\n    })\n    if (!llm) {\n      return\n    }\n\n    if (currentSession.passphrase) {\n      await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n    }\n\n    await loadModel(llm.provider, llm.name, (data) => {\n      setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n    })\n    setLLMInfo({\n      llm,\n      status: LLMStatusEnum.Loaded,\n    })\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    mainLLMInfo,\n    createMessage,\n  }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNode } from 'src/services/database/types'\nimport { useSessionState } from 'src/states/session'\n\nexport const useUpdateEditorContent = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const refDebounce = useRef<number | null>(null)\n  const [flowNode, setFlowNode] = useState<FlowNode>()\n\n  const updateEditorContent = useCallback(\n    async (value: unknown[]) => {\n      if (!currentSession?.main_node_id) return\n\n      clearTimeout(refDebounce.current!)\n      refDebounce.current = setTimeout(async () => {\n        if (!currentSession?.main_node_id) return\n\n        await getRepository('FlowNode').update(currentSession.main_node_id, {\n          data: value,\n        })\n      }, 150) as unknown as number\n    },\n    [currentSession],\n  )\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) return\n\n    getRepository('FlowNode')\n      .findOne({\n        where: { id: currentSession.main_node_id },\n      })\n      .then((node) => {\n        setFlowNode(node)\n      })\n  }, [currentSession])\n\n  return {\n    flowNode,\n    updateEditorContent,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useUpdateEditorContent } from './hooks/use-update-editor-content'\n\nconst PlateAppEditor = lazy(() => import('src/components/organisms/PlateEditor'))\n\nconst EditorApplication = memo(() => {\n  const { flowNode, updateEditorContent } = useUpdateEditorContent()\n  const { mainLLMInfo, createMessage } = useCreateMessage()\n\n  const handleChangeContent = useCallback(\n    (value: unknown[]) => {\n      updateEditorContent(value)\n    },\n    [updateEditorContent],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo?.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name\n              ) : (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              )}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {!flowNode ? (\n          <DefaultLoader simple />\n        ) : (\n          <PlateAppEditor\n            defaultValue={flowNode?.data}\n            onValueChange={handleChangeContent}\n            copilotStream={createMessage}\n            key={mainLLMInfo?.llm?.name || 'default'}\n            hideDragIcon\n            enableHistoryControl\n          />\n        )}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default EditorApplication\n"],"file":"assets/EditorApplication-BDQs94OB.js"}