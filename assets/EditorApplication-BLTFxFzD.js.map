{"version":3,"mappings":"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","names":["mainLLMInfo","setLLMInfo","useState","currentSession","useSessionState","state","useTranslation","stream","useLLM","useLoadModel","sessionPassphraseDialogRef","useModalRef","createMessage","input","onMessageUpdate","t","LLMStatusEnum","loadModel","data","pre","HumanMessage","error","toast","init","useCallback","connections","node","llm","getRepository","llmNode","passphraseConfirm","useEffect","useRef","updateEditorContent","refDebounce","value","PlateAppEditor","lazy","memo","useCreateMessage","jsxs","Tooltip","jsx","LazyIcon","TooltipContent","Suspense","DefaultLoader","flowNode","handleChangeContent"],"ignoreList":[],"sources":["../../src/components/pages/EditorApplication/hooks/use-create-message.ts","../../src/components/pages/EditorApplication/hooks/use-update-editor-content.ts","../../src/components/pages/EditorApplication/EditorApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { HumanMessage, type BaseMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { stream } = useLLM()\n  const { loadModel } = useLoadModel()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string | BaseMessage[], onMessageUpdate: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, (data) => {\n            setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const streamResponse = await stream(\n            mainLLMInfo?.llm.provider,\n            typeof input === 'string' ? [new HumanMessage(input)] : input,\n            {\n              onMessageUpdate: (data) => {\n                onMessageUpdate?.(data.content)\n              },\n              llm: mainLLMInfo?.llm,\n            },\n          )\n          return streamResponse.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [\n      currentSession?.main_node_id,\n      mainLLMInfo?.llm,\n      mainLLMInfo?.status,\n      toast,\n      t,\n      loadModel,\n      stream,\n    ],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const connections = await getRepository('FlowEdge').find({\n      where: {\n        target: currentSession.main_node_id,\n      },\n    })\n    const connectedNodes = await getRepository('FlowNode').find({\n      where: {\n        id: In(connections.map((connection) => connection.source)),\n      },\n    })\n    const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n    if (!llmNode) {\n      return\n    }\n    const llm = await getRepository('LLM').findOne({\n      where: {\n        id: llmNode.source_id,\n      },\n    })\n    if (!llm) {\n      return\n    }\n\n    if (currentSession.passphrase) {\n      await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n    }\n\n    await loadModel(llm.provider, llm.name, (data) => {\n      setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n    })\n    setLLMInfo({\n      llm,\n      status: LLMStatusEnum.Loaded,\n    })\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    mainLLMInfo,\n    createMessage,\n  }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNode } from 'src/services/database/types'\nimport { useSessionState } from 'src/states/session'\n\nexport const useUpdateEditorContent = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const refDebounce = useRef<number | null>(null)\n  const [flowNode, setFlowNode] = useState<FlowNode>()\n\n  const updateEditorContent = useCallback(\n    async (value: unknown[]) => {\n      if (!currentSession?.main_node_id) return\n\n      clearTimeout(refDebounce.current!)\n      refDebounce.current = setTimeout(async () => {\n        if (!currentSession?.main_node_id) return\n\n        await getRepository('FlowNode').update(currentSession.main_node_id, {\n          data: value,\n        })\n      }, 150) as unknown as number\n    },\n    [currentSession],\n  )\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) return\n\n    getRepository('FlowNode')\n      .findOne({\n        where: { id: currentSession.main_node_id },\n      })\n      .then((node) => {\n        setFlowNode(node)\n      })\n  }, [currentSession])\n\n  return {\n    flowNode,\n    updateEditorContent,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useUpdateEditorContent } from './hooks/use-update-editor-content'\n\nconst PlateAppEditor = lazy(() => import('src/components/organisms/PlateEditor'))\n\nconst EditorApplication = memo(() => {\n  const { flowNode, updateEditorContent } = useUpdateEditorContent()\n  const { mainLLMInfo, createMessage } = useCreateMessage()\n\n  const handleChangeContent = useCallback(\n    (value: unknown[]) => {\n      updateEditorContent(value)\n    },\n    [updateEditorContent],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo?.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name\n              ) : (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              )}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {!flowNode ? (\n          <DefaultLoader simple />\n        ) : (\n          <PlateAppEditor\n            defaultValue={flowNode?.data}\n            onValueChange={handleChangeContent}\n            copilotStream={createMessage}\n            key={mainLLMInfo?.llm?.name || 'default'}\n            hideDragIcon\n            enableHistoryControl\n          />\n        )}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default EditorApplication\n"],"file":"assets/EditorApplication-BLTFxFzD.js"}