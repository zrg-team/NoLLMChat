{"version":3,"mappings":"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","names":["useState","useSessionState","state","t","useTranslation","useToast","confirmPassphrase","useConfirmPassphrase","loadModel","useLoadModel","useModalRef","SessionPassphraseDialog","createMessage","useCallback","input","onMessageUpdate","currentSession","mainLLMInfo","toast","data","setLLMInfo","pre","HumanMessage","error","getRepository","node","FlowNodeTypeEnum","passphraseConfirm","sessionPassphraseDialogRef","llm","LLMStatusEnum","useEffect","init","useUpdateEditorContent","refDebounce","useRef","updateEditorContent","value","PlateAppEditor","lazy","EditorApplication","memo","flowNode","useCreateMessage","jsxs","TooltipProvider","jsx","LLMIcon","TooltipTrigger","LazyIcon","TooltipContent","handleChangeContent"],"ignoreList":[],"sources":["../../src/components/pages/EditorApplication/hooks/use-create-message.ts","../../src/components/pages/EditorApplication/hooks/use-update-editor-content.ts","../../src/components/pages/EditorApplication/EditorApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { HumanMessage, type BaseMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { llmHandler } from 'src/handlers'\nimport { useConfirmPassphrase } from 'src/hooks/mutations/use-confirm-passphrase'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { confirmPassphrase } = useConfirmPassphrase()\n  const { loadModel } = useLoadModel()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string | BaseMessage[], onMessageUpdate: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n            provider: mainLLMInfo.llm.provider,\n            callback: (data) => {\n              setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n            },\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          await confirmPassphrase()\n          const streamResponse = await llmHandler.stream(\n            mainLLMInfo?.llm.provider,\n            typeof input === 'string' ? [new HumanMessage(input)] : input,\n            {\n              onMessageUpdate: (data) => {\n                onMessageUpdate?.(data.content)\n              },\n              llm: mainLLMInfo?.llm,\n            },\n          )\n          return streamResponse?.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [currentSession?.main_node_id, mainLLMInfo?.llm, mainLLMInfo?.status, toast, t, loadModel],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const connections = await getRepository('FlowEdge').find({\n      where: {\n        target: currentSession.main_node_id,\n      },\n    })\n    const connectedNodes = await getRepository('FlowNode').find({\n      where: {\n        id: In(connections.map((connection) => connection.source)),\n      },\n    })\n    const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n    if (!llmNode) {\n      return\n    }\n    const llm = await getRepository('LLM').findOne({\n      where: {\n        id: llmNode.source_id,\n      },\n    })\n    if (!llm) {\n      return\n    }\n\n    if (currentSession.passphrase) {\n      await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n    }\n\n    await loadModel(llm.provider, llm.name, {\n      provider: llm.provider,\n      callback: (data) => {\n        setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n      },\n    })\n    setLLMInfo({\n      llm,\n      status: LLMStatusEnum.Loaded,\n    })\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    mainLLMInfo,\n    createMessage,\n  }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { getRepository } from 'src/services/database/database'\nimport { FlowNode } from 'src/services/database/types'\nimport { useSessionState } from 'src/states/session'\n\nexport const useUpdateEditorContent = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const refDebounce = useRef<number | null>(null)\n  const [flowNode, setFlowNode] = useState<FlowNode>()\n\n  const updateEditorContent = useCallback(\n    async (value: unknown[]) => {\n      if (!currentSession?.main_node_id) return\n\n      clearTimeout(refDebounce.current!)\n      refDebounce.current = setTimeout(async () => {\n        if (!currentSession?.main_node_id) return\n\n        await getRepository('FlowNode').update(currentSession.main_node_id, {\n          data: value,\n        })\n      }, 150) as unknown as number\n    },\n    [currentSession],\n  )\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) return\n\n    getRepository('FlowNode')\n      .findOne({\n        where: { id: currentSession.main_node_id },\n      })\n      .then((node) => {\n        setFlowNode(node)\n      })\n  }, [currentSession])\n\n  return {\n    flowNode,\n    updateEditorContent,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useUpdateEditorContent } from './hooks/use-update-editor-content'\n\nconst PlateAppEditor = lazy(() => import('src/components/organisms/PlateEditor'))\n\nconst EditorApplication = memo(() => {\n  const { flowNode, updateEditorContent } = useUpdateEditorContent()\n  const { mainLLMInfo, createMessage } = useCreateMessage()\n\n  const handleChangeContent = useCallback(\n    (value: unknown[]) => {\n      updateEditorContent(value)\n    },\n    [updateEditorContent],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo?.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name\n              ) : (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              )}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {!flowNode ? (\n          <DefaultLoader simple />\n        ) : (\n          <PlateAppEditor\n            defaultValue={flowNode?.data}\n            onValueChange={handleChangeContent}\n            copilotStream={createMessage}\n            key={mainLLMInfo?.llm?.name || 'default'}\n            hideDragIcon\n            enableHistoryControl\n          />\n        )}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default EditorApplication\n"],"file":"assets/EditorApplication-DzhPd2Jq.js"}