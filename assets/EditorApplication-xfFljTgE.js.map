{"version":3,"mappings":"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","names":["useCreateMessage","useState","currentSession","state","t","useTranslation","toast","useToast","loadModel","useLoadModel","sessionPassphraseDialogRef","useModalRef","createMessage","useCallback","input","onMessageUpdate","mainLLMInfo","LLMStatusEnum","data","setLLMInfo","pre","stream","HumanMessage","error","connections","connection","node","llmNode","llm","passphraseConfirm","useEffect","init","useUpdateEditorContent","useSessionState","refDebounce","useRef","flowNode","setFlowNode","updateEditorContent","value","getRepository","PlateAppEditor","lazy","EditorApplication","memo","jsx","cn","LazyIcon","Suspense","DefaultLoader","handleChangeContent"],"ignoreList":[],"sources":["../../src/components/pages/EditorApplication/hooks/use-create-message.ts","../../src/components/pages/EditorApplication/hooks/use-update-editor-content.ts","../../src/components/pages/EditorApplication/EditorApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { HumanMessage, type BaseMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { stream } = useLLM()\n  const { loadModel } = useLoadModel()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string | BaseMessage[], onMessageUpdate: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n            provider: mainLLMInfo.llm.provider,\n            callback: (data) => {\n              setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n            },\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const streamResponse = await stream(\n            mainLLMInfo?.llm.provider,\n            typeof input === 'string' ? [new HumanMessage(input)] : input,\n            {\n              onMessageUpdate: (data) => {\n                onMessageUpdate?.(data.content)\n              },\n              llm: mainLLMInfo?.llm,\n            },\n          )\n          return streamResponse?.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [\n      currentSession?.main_node_id,\n      mainLLMInfo?.llm,\n      mainLLMInfo?.status,\n      toast,\n      t,\n      loadModel,\n      stream,\n    ],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const connections = await getRepository('FlowEdge').find({\n      where: {\n        target: currentSession.main_node_id,\n      },\n    })\n    const connectedNodes = await getRepository('FlowNode').find({\n      where: {\n        id: In(connections.map((connection) => connection.source)),\n      },\n    })\n    const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n    if (!llmNode) {\n      return\n    }\n    const llm = await getRepository('LLM').findOne({\n      where: {\n        id: llmNode.source_id,\n      },\n    })\n    if (!llm) {\n      return\n    }\n\n    if (currentSession.passphrase) {\n      await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n    }\n\n    await loadModel(llm.provider, llm.name, {\n      provider: llm.provider,\n      callback: (data) => {\n        setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n      },\n    })\n    setLLMInfo({\n      llm,\n      status: LLMStatusEnum.Loaded,\n    })\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    mainLLMInfo,\n    createMessage,\n  }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNode } from 'src/services/database/types'\nimport { useSessionState } from 'src/states/session'\n\nexport const useUpdateEditorContent = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const refDebounce = useRef<number | null>(null)\n  const [flowNode, setFlowNode] = useState<FlowNode>()\n\n  const updateEditorContent = useCallback(\n    async (value: unknown[]) => {\n      if (!currentSession?.main_node_id) return\n\n      clearTimeout(refDebounce.current!)\n      refDebounce.current = setTimeout(async () => {\n        if (!currentSession?.main_node_id) return\n\n        await getRepository('FlowNode').update(currentSession.main_node_id, {\n          data: value,\n        })\n      }, 150) as unknown as number\n    },\n    [currentSession],\n  )\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) return\n\n    getRepository('FlowNode')\n      .findOne({\n        where: { id: currentSession.main_node_id },\n      })\n      .then((node) => {\n        setFlowNode(node)\n      })\n  }, [currentSession])\n\n  return {\n    flowNode,\n    updateEditorContent,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useUpdateEditorContent } from './hooks/use-update-editor-content'\n\nconst PlateAppEditor = lazy(() => import('src/components/organisms/PlateEditor'))\n\nconst EditorApplication = memo(() => {\n  const { flowNode, updateEditorContent } = useUpdateEditorContent()\n  const { mainLLMInfo, createMessage } = useCreateMessage()\n\n  const handleChangeContent = useCallback(\n    (value: unknown[]) => {\n      updateEditorContent(value)\n    },\n    [updateEditorContent],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo?.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name\n              ) : (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              )}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {!flowNode ? (\n          <DefaultLoader simple />\n        ) : (\n          <PlateAppEditor\n            defaultValue={flowNode?.data}\n            onValueChange={handleChangeContent}\n            copilotStream={createMessage}\n            key={mainLLMInfo?.llm?.name || 'default'}\n            hideDragIcon\n            enableHistoryControl\n          />\n        )}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default EditorApplication\n"],"file":"assets/EditorApplication-xfFljTgE.js"}