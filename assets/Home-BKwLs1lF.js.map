{"version":3,"mappings":"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","names":["useMotionValue","initial","value","useConstant","motionValue","isStatic","useContext","MotionConfigContext","setLatest","useState","useEffect","useCombineMotionValues","values","combineValues","updateValue","scheduleUpdate","frame","v","subscriptions","unsubscribe","cancelFrame","isCustomValueType","getMixer","transform","args","argOffset","useImmediate","inputValue","options","interpolator","interpolate","outputRange","useComputed","compute","collectMotionValues","input","inputRangeOrTransformer","transformer","useListTransform","latest","numValues","i","toNumber","useSpring","useRef","isMotionValue","source","latestValue","latestSetter","startAnimation","animation","activeSpringAnimation","frameData","stopAnimation","animateValue","config","useInsertionEffect","set","useIsomorphicLayoutEffect","MessageStatusEnum","MessageRoleEnum","ThreadStatusEnum","PromptTypeEnum","MENUBAR_NAME","Collection","createCollection","createMenubarScope","createCollectionScope","createRovingFocusGroupScope","createMenuScope","MenubarContextProvider","createMenubarContext","Menubar","React.forwardRef","props","forwardedRef","__scopeMenubar","valueProp","loop","menubarProps","direction","useDirection","rovingFocusGroupScope","useRovingFocusGroupScope","useControllableState","onValueChange","defaultValue","currentTabStopId","setCurrentTabStopId","React.useState","React.useCallback","value2","setValue","prevValue","jsx","MENU_NAME","MenubarMenuProvider","useMenubarMenuContext","MenubarMenu","autoValue","context","useMenubarContext","menuScope","useMenuScope","React.useRef","React.useEffect","open","useId","wasKeyboardTriggerOpenRef","MenuPrimitive.Root","open2","menuProps","MenubarTrigger","disabled","triggerProps","TRIGGER_NAME","ref","composedRefs","useComposedRefs","isFocused","menuContext","RovingFocusGroup.Item","MenuPrimitive.Anchor","Primitive","composeEventHandlers","event","MenubarPortal","portalProps","PORTAL_NAME","CONTENT_NAME","useCollection","contentProps","align","hasInteractedOutsideRef","target","item","targetIsSubTrigger","isKeyDownInsideSubMenu","isPrevKey","candidateValues","getItems","wrapArray","nextValue","MenubarContent","MenuPrimitive.Group","GROUP_NAME","LABEL_NAME","MenubarLabel","labelProps","MenuPrimitive.Item","MenubarItem","ITEM_NAME","MenubarCheckboxItem","checkboxItemProps","CHECKBOX_ITEM_NAME","RADIO_GROUP_NAME","MenubarRadioGroup","radioGroupProps","RADIO_ITEM_NAME","radioItemProps","MenuPrimitive.RadioItem","MenubarRadioItem","INDICATOR_NAME","MenubarItemIndicator","itemIndicatorProps","MenuPrimitive.ItemIndicator","SEPARATOR_NAME","MenubarSeparator","separatorProps","MenuPrimitive.Separator","ARROW_NAME","arrowProps","SUB_TRIGGER_NAME","subTriggerProps","MenubarSubTrigger","SUB_CONTENT_NAME","MenubarSubContent","subContentProps","MenuPrimitive.SubContent","startIndex","array","_","index","Menu","Trigger","Label2","RadioItem2","ItemIndicator2","Separator2","SubTrigger2","MenubarPrimitive.Menu","MenubarPrimitive.Root","className","MenubarPrimitive.Trigger","children","jsxs","cn","inset","MenubarPrimitive.SubTrigger","MenubarPrimitive.SubContent","alignOffset","MenubarPrimitive.Portal","sideOffset","MenubarPrimitive.Item","checked","MenubarPrimitive.CheckboxItem","MenubarPrimitive.ItemIndicator","MenubarPrimitive.RadioItem","LazyIcon","MenubarPrimitive.Label","MenubarPrimitive.Separator","useFlowState","create","subscribeWithSelector","get","defaultFlowState","getFlowStateActions","useCreateLLM","sessionId","useSessionState","state","loading","setLoading","pushSyncNodeQueue","createOrUpdateFlowNode","useCallback","record","existed","LLMProviderEnum","LLMStatusEnum","LLMModelTypeEnum","llm","FlowNodeTypeEnum","createLLM","U","Y","p","$","k","m","B","C","f","O","T","c","L","E","N","M","G","S","A","H","R","u","K","J","h","P","D","X","Q","be","Z","le","I","he","r","o","t","ce","ue","n.createContext","n.useContext","de","ee","e","s","pe","b","l","ge","te","x","n.useRef","Te","n.useMemo","a","g","z","re","q","ne","W","F","V","Me","ie","ae","oe","se","n.createElement","j","ye","n.forwardRef","d","n.useEffect","ve","fe","Ce","y","xe","Pe","w.Root","w.Portal","w.Overlay","w.Content","Ve","me","Se","De","Ie","n.useLayoutEffect","Re","n.useState","CommandPrimitive","Command","CommandInput","CommandList","CommandEmpty","CommandGroup","CommandSeparator","CommandItem","Checkbox","CheckboxPrimitive.Root","CheckboxPrimitive.Indicator","OPEN_AI_MODELS","GROQ_MODELS","GOOGLE_GENERATIVE_AI_MODELS","GOOGLE_GENERATIVE_AI_API_KEY_LINK","OPEN_AI_API_KEY_LINK","GROQ_API_KEY_LINK","onConfirm","onCancel","currentModal","handleChangeOTP","newValue","setName","handleSubmit","name","handleHide","DialogDescription","InputOTP","InputOTPGroup","InputOTPSlot","InputOTPSeparator","DialogFooter","Button","useUpdateSessionPassphrase","currentSession","updateSessionPassphrase","passkey","passphrase","generatePassphrase","encryptSymmetric","session","encrypted","setCurrentSession","useConfirmOrCreatePassphrase","createSessionPassphraseDialogRef","useModalRef","confirmPassphrase","useConfirmPassphrase","secureSession","keyInfo","CreateLLMCard","id","setDialog","useTranslation","useToast","setOpen","search","setSearch","encryptedInfo","provider","setProvider","cachedLLMURLs","useLocalLLMState","creatingLLM","__vitePreload","prebuiltAppConfig","modelList","functionCallingModelIds","syncCachedLLMURLs","useMemo","llmsInfo","pre","next","preInCache","nextInCache","preInRecommended","RECOMMENDATION_LOCAL_LLMS","nextInRecommended","preInFunctionCalling","nextInFunctionCalling","selectedModel","model","setEncryptedInfo","setHasCache","setInput","handleOnchange","handleSearchChange","node","modelTypeToLLMType","logError","error","toast","modelType","LLMIcon","LLMInfo","encryptedFields","Alert","Label","Input","Fragment","isRequiredSessionPasskey","CardContent","handleOnSelectProvider","SelectTrigger","SelectValue","SelectContent","PopoverTrigger","PopoverContent","CardFooter","LoadingButton","hanldeSubmit","hasCache","useCreatePrompt","createPrompt","prompt","PROMPT_ROLES","PromptForm","defaultPromptContent","defaultPromptRole","defaultPromptType","onSubmit","promptPrefix","setPromptPrefix","handleOnchangePrefix","setPromptType","handleOnSelectRole","setPromptRole","promptRole","promptType","hidePromptType","Select","handleOnSelectType","PROMPT_TYPES","SelectItem","hidePromptRole","Textarea","CreatePromptCard","memo","thread","useInternalNode","data","Card","CardHeader","CardTitle","toSchemaItem","parent","result","generateUUID","initialX","initialY","schema","schemaItems","getRepository","createSchema","NewOrUpdateField","setData","currentRow","empty","handleChangeName","previous","setEmpty","handleChangeDescription","handleChangeType","handleChangeRequired","handleChangeEnum","items","previousData","func","shouldShowChildData","FieldList","handleAddNew","Accordion","row","AccordionItem","AccordionTrigger","AccordionContent","useCreateSchema","createCSVData","encodedData","encodeCSVData","headers","csvData","ExampleTable","Table","TableRow","TableHead","TableBody","TableCell","prevData","output","handleCreateCSVData","setOutput","useCreateTool","createOrUpdateFlowEdge","tool","toolNode","CreateToolCard","description","setDescription","createTool","useCreateVectorDatabase","textSplitter","VectorDatabaseTypeEnum","VectorDatabaseProviderEnum","vectorDatabase","vectorDatabaseNode","VectorDatabaseStorageEnum","databaseSource","encodeSplitter","databaseSourceNode","SUPPORTED_VECTOR_DATABASE_PROVIDERS","SUPPORTED_TEXT_SPLITTERS","SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE","handleOnSelectStorageType","setStorageType","handleOnSelectTextSplitter","prev","handleOnChangeName","handleOnChangeChunkOverlap","createVectorDatabase","setTextSplitter","storageType","DataTable","setText","text","SupportedAddNodeEnum","SUPPORTED_MODES","getContainer","existingContainer","container","instanceCounter","autoAddParticle","size","sizes","spinVal","spinSpeed","left","mouseX","circle","svgNS","circleSVG","particle","particleType","particles","speedHorz","speedUp","top","refreshParticles","animationFrame","lastParticleTimestamp","particleGenerationDelay","limit","currentTime","generateParticle","isTouchInteraction","tap","move","updateMousePosition","mouseY","disableAutoAddParticle","element","tapEnd","interval","CoolMode","applyParticleEffect","React","theme","useAppState","Logo","mode","child","setMode","CreateFewShotExampleCard","menu","useCreateStandaloneSession","navigate","useNavigate","getLatestApplications","cloneNode","newSession","entity","entityName","flowNodeTypeToEntity","newFlowNodeIDMap","cloneEntity","newEntityIDMap","currentFlowNode","cloneFlowNode","createStandaloneSession","SessionTypeEnum","SessionStatusEnum","standaloneSession","mainNodeInfo","connectedNodes","connectedNode","connections","connection","targetId","sourceId","getRouteURL","updateNode","updateEdges","deleteNodeFlow","edges","edge","CreateStandaloneApplicationDialog","cloneStandaloneSession","useModal","DialogContent","DialogHeader","DialogTitle","NodeHeader","enableToStandalone","getNode","useDeleteNodeFlow","createStandaloneApplicationDialog","handleDelete","currentNode","getLinkedConnections","handleCreateStandaloneApplication","DefaultHandle","flowNode","flowEdge","createThread","useActions","loadingModel","queringThreads","setQueringThreads","loadModel","useLoadModel","useCreateThread","getNodes","useReactFlow","threads","In","handleLoadModel","setLoadingModel","initProgress","llmNodeChanges","queryThreadsFromModel","updateNodes","handleCreateThread","changeLLMOptions","creatingThread","useBaseConnectionToHandler","handlerFunction","useHandleConnections","newConnections","setNewTargetConnection","filterUserConnections","connectionHandler","edgeId","newTargetConnection","handling","setHandling","handlingConnections","response","removeEdgeIds","deleteElements","useConnectionToHandler","handleConnectionTo","LLMNode","isConnectable","llmInfo","setLLMInfo","queryThreads","hasModelInCache","onChangeOptions","isLoading","AlertTitle","AlertDescription","actions","BorderBeam","Position","NewMessageCard","tags","AIInput","threadConversationTraveling","functions","runningNodes","list","nodeConnections","handledIds","nodes","prepareThreadConnections","threadNode","threadConnections","threadConnectionInfos","threadPromptNodeResult","threadPromptNodes","promptConnectedNodes","threadToolNodeResult","threadToolsNodes","toolConnectedNodes","placeholderConnectedNodes","threadPlaceholderNodeResult","schemaNode","histories","message","content","n","decodeCSVData","rows","key","HumanMessage","SystemMessage","AIMessage","prepareThreadHistory","messageNodes","systems","threadPromptNode","buildHistories","toLocalLLMToolCallingInput","tools","all","toolEntity","toolSchemaEnity","useFlowEmbeddingNode","getFlowEmbeddingNode","getFlowEmbeddingEntity","useCreateMessage","insertMessages","initialLLMId","humanMessage","currenSession","humanMessageNode","aiMessage","aiMessageNode","handlePlaceholders","messagesInfo","threadConnection","placeholders","placeholderRecord","FlowNodePlaceholderTypeEnum","vectorNode","vector","minimalScore","documents","getHandleConnections","dataSource","getStorageDataSource","template","PromptTemplate","injectedMessages","score","doc","similaritySearchWithScoreFunction","invokeMessage","threadConversionNodes","onMessageUpdate","llmEntity","MessageHistory","prompts","schemaEntities","schemas","stream","messages","createMessage","info","omitBy","createMessageFunction","linkedConnections","ThreadNode","targetConnections","Badge","containMessage","handleCreateMessage","showThread","inner","HumanMessageComponent","onNewThread","messageMetadata","MarkdownViewer","isError","useCreateIdieMessage","newMessageNode","newMessage","edgeToPrompt","edgeToNewMessage","createIdieMessage","MessageNode","setShowThread","isEnd","handleCopy","handleSpeech","speaking","textToSpeech","setSpeaking","newMessageCard","handleNewThread","AIMessageComponent","sourceEntity","targetEntity","viewDetailDialog","ViewDataDetailDialog","regex","match","isOverLimit","handleOpenDetail","promptArguments","argument","bytes","cachedModdels","latestUpdate","setLatestUpdate","usedBytes","setCountInfo","setCachedModels","url","fetchSessionInfo","estimate","setUsedBytes","acc","maxUpdatedAt","llms","jsonlDatas","csvDatas","handleReload","dayjs","SchemaNode","loadingRef","Tabs","TabsTrigger","TabsContent","convertToZodSchemaString","CSVDataNode","csv","decodeLine","DataViewer","EmbeddingSetting","show","setShow","setOptions","setEncrypted","decrypted","hanleSubmit","Popover","SYSTEM_NODE_IDS","inputEncrypted","confirmOrCreatePassphrase","changes","flowNodePlaceholder","currentSessionId","modelName","DEFAULT_PROMPT","CreateVectorDatabasePromptDialog","Dialog","useCreateVectorDatabaseRetriever","createVectorDatabaseRetriever","systempPrompt","systemPromptNode","metadata","retriever","retrieverNode","CreateVectorDatabaseRetrieverDialog","setK","setMinimalScore","handleOnChangeK","handleOnChangeMinimalScore","indexFunction","useEmbedding","Document","similaritySearchWithScore","embbedingEntity","indexData","dataSourceNode","dataSourceType","chunk","partDocuments","updatedDataNode","handledCount","chunkedDocuments","VectorDatabaseNode","createPromptDialog","CreatePromptDialog","createRetrieverDialog","CreateRetrieverDialog","handleSimilaritySearch","handleCreatePrompt","handleIndexPDF","file","reader","handleCreateData","blob","pdfjs","setProgress","vectorDatabaseData","lines","renderContent","VectorSearch","handleCreateRetriever","IndexNewText","IndexNewFile","progress","LIMIT_LENGTH_BY_COLUMNS","JSONLDataNode","jsonl","DEFAULT_MAGNIFICATION","DEFAULT_DISTANCE","dockVariants","cva","magnification","distance","renderChildren","DockIcon","motion","Dock","distanceCalc","useTransform","bounds","width","widthSync","React.createElement","createNode","nodeType","nodeData","DEFAULT_NODE_SIZE","DATA","plateEditorIcon","VisualStudioCodeSvg","handleAddNode","TooltipProvider","Tooltip","TooltipTrigger","Icon","TooltipContent","Separator","DefaultNodeResizer","rest","lineClassName","ShapeNode","selected","CircleNode","TriangleNode","height","refDebounce","updateEditorContent","llmNode","llmConnection","handleChangeContent","PlateAppEditor","PlaceholderNode","placeholder","lazy","CodeContainerAppNode","SOURCE_BASES","sourceBase","module","setSourcebase","sourcebase","onUpdateSourceBase","getSourceBase","updateCodeContainerData","parseFileSystemTreeToJSONL","formatedMessages","VSLiteAppNode","parseJSONLToFileSystemTree","sendMessage","handleUpdateCodeContainerData","tree","setFileSystemTree","handleSendMessage","updateFileSystemTree","fileSystemTree","Suspense","VSLiteApp","handleUpdateCodeContainerFile","nodeTypes","ToolbarNode","SessionInfoNode","EmbeddingNode","ApplicationBarNode","EditorAppNode","Toggle","variant","TogglePrimitive.Root","React.createContext","ToggleGroupPrimitive.Root","ToggleGroupItem","React.useContext","ToggleGroupContext","ToggleGroupPrimitive.Item","toggleVariants","ViewportLogger","useStore","viewport","ChangeInfo","change","type","ChangeLogger","store","handleNodeChanges","newChanges","prevChanges","NoChanges","NodeInspector","useNodes","ViewportPortal","internalNode","absPosition","absoluteTransform","formattedPosition","position","selectionStatus","formattedDimensions","ToggleGroup","setActive","label","active","nodeInspectorActive","setNodeInspectorActive","changeLoggerActive","setChangeLoggerActive","DevToolsToggle","Panel","viewportLoggerActive","DevTools","useFlowManager","updateDimensionsRef","onNodesChangesRef","addConnectionToEdges","resetFlows","findFlowEdges","deleteFlowNode","deleteFlowEdge","updateFlowNode","findFlowNodesWithSource","flowEdges","currentSessionIdRef","loadingState","setLoadingState","flowEdgesRef","initFlow","prepareFlowInfo","query","flowNodes","handler","updatePositionRef","DISABLED_DELETE_NODE_TYPES","updateEdgeChanges","updateOrCreateNode","setNodes","updatingNode","deepmerge","applyNodeChanges","updateEdgeConnection","addOnNodeChangeHandler","useAutomaticallyRenderFlows","flowManager","flowStateReady","flowNodesRef","removeSyncNodeQueue","removeSyncEdgeQueue","syncNodeQueue","previousSyncNodeQueue","handlingQueueItems","unsubEdgeHandler","syncEdgeQueue","previousSyncEdgeQueue","lastTimestamps","useHomePage","initializing","setInitializing","setInitProgressCallback","updateNodeChanges","callbackRemoval","nodeRefs","HomeInner","onNodesChange","onEdgesChange","ReactFlow","PanOnScrollMode","Background","Controls","MiniMap","isDev"],"ignoreList":[0,1,2,3,4,5,9,13,14],"sources":["../../node_modules/framer-motion/dist/es/value/use-motion-value.mjs","../../node_modules/framer-motion/dist/es/value/use-combine-values.mjs","../../node_modules/framer-motion/dist/es/utils/transform.mjs","../../node_modules/framer-motion/dist/es/value/use-computed.mjs","../../node_modules/framer-motion/dist/es/value/use-transform.mjs","../../node_modules/framer-motion/dist/es/value/use-spring.mjs","../../src/services/database/types/message.ts","../../src/services/database/types/thread.ts","../../src/services/database/types/prompt.ts","../../node_modules/@radix-ui/react-menubar/dist/index.mjs","../../src/lib/shadcn/ui/menubar.tsx","../../src/states/flow/index.ts","../../src/hooks/flows/mutations/use-create-llm.ts","../../node_modules/cmdk/dist/chunk-NZJY6EH4.mjs","../../node_modules/cmdk/dist/index.mjs","../../src/lib/shadcn/ui/command.tsx","../../src/lib/shadcn/ui/checkbox.tsx","../../src/constants/llm.ts","../../src/components/molecules/CreateLLMCard/constants.ts","../../src/components/dialogs/CreateSessionPassphraseDialog/index.tsx","../../src/hooks/mutations/use-update-session-passphrase.ts","../../src/hooks/mutations/use-confirm-or-create-passphrase.ts","../../src/components/molecules/CreateLLMCard/index.tsx","../../src/hooks/flows/mutations/use-create-prompt.ts","../../src/components/molecules/CreatePromptCard/constants.ts","../../src/components/molecules/CreatePromptCard/PromptForm.tsx","../../src/components/molecules/CreatePromptCard/index.tsx","../../src/hooks/flows/mutations/use-create-schema.ts","../../src/components/molecules/CreateSchemaCard/Field/NewOrUpdateField.tsx","../../src/components/molecules/CreateSchemaCard/Field/FieldList.tsx","../../src/components/molecules/CreateSchemaCard/index.tsx","../../src/hooks/flows/mutations/use-create-csv-data.ts","../../src/components/molecules/CreateFewShotExampleCard/ExampleTable/index.tsx","../../src/components/molecules/CreateFewShotExampleCard/index.tsx","../../src/hooks/flows/mutations/use-create-tool.ts","../../src/components/molecules/CreateToolCard/index.tsx","../../src/hooks/flows/mutations/use-create-vector-database.ts","../../src/components/molecules/CreateVectorDatabaseCard/constants.ts","../../src/components/molecules/CreateVectorDatabaseCard/index.tsx","../../src/components/molecules/CreateTextDataCard/DataTable/index.tsx","../../src/components/molecules/CreateTextDataCard/index.tsx","../../src/components/flows/Nodes/ToolboxNode/constants.ts","../../src/lib/shadcn/ui/cool-mode.tsx","../../src/components/flows/Nodes/ToolboxNode/ToolBarNode.tsx","../../src/hooks/mutations/use-create-standalone-session.ts","../../src/hooks/flows/mutations/use-delete-node-flow.ts","../../src/components/dialogs/CreateStandaloneApplicationDialog/index.tsx","../../src/components/flows/NodeHeader/NodeHeader.tsx","../../src/components/flows/DefaultHandle/DefaultHandle.tsx","../../src/hooks/flows/mutations/use-create-thread.ts","../../src/components/flows/Nodes/LLMNode/hooks/use-actions.ts","../../src/hooks/flows/handlers/use-base-connection-to-handler.ts","../../src/components/flows/Nodes/LLMNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/LLMNode/LLMNode.tsx","../../src/components/molecules/NewMessageCard/index.tsx","../../src/utils/thread-conversation-traveling.ts","../../src/utils/build-message-history.ts","../../src/utils/flow-to-local-llm.ts","../../src/hooks/flows/use-flow-embedding-node.ts","../../src/hooks/flows/mutations/use-create-message.ts","../../src/components/flows/Nodes/ThreadNode/hooks/use-actions.ts","../../src/components/flows/Nodes/ThreadNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ThreadNode/ThreadNode.tsx","../../src/components/flows/Nodes/MessageNode/components/HumanMessage.tsx","../../src/components/flows/Nodes/MessageNode/components/AIMessage.tsx","../../src/components/flows/Nodes/MessageNode/hooks/use-actions.ts","../../src/hooks/flows/mutations/use-create-idie-message.ts","../../src/components/flows/Nodes/MessageNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/MessageNode/MessageNode.tsx","../../src/components/flows/Nodes/PromptNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/PromptNode/PromptNode.tsx","../../src/utils/bytes-format.ts","../../src/components/flows/Nodes/SessionInfoNode/SessionInfoNode.tsx","../../src/components/flows/Nodes/SchemaNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/SchemaNode/SchemaNode.tsx","../../src/components/flows/Nodes/CSVDataNode/CSVDataNode.tsx","../../src/components/flows/Nodes/ToolNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ToolNode/ToolNode.tsx","../../src/components/atoms/EmbeddingSetting.tsx","../../src/components/flows/Nodes/EmbeddingNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/EmbeddingNode/hooks/use-actions.ts","../../src/components/flows/Nodes/EmbeddingNode/EmbeddingNode.tsx","../../src/components/dialogs/CreateVectorDatabasePromptDialog/index.tsx","../../src/hooks/flows/mutations/use-create-vector-database-retriever.ts","../../src/components/dialogs/CreateVectorDatabaseRetrieverDialog/index.tsx","../../src/components/flows/Nodes/VectorDatabaseNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/VectorDatabaseNode/hooks/use-actions.ts","../../src/components/flows/Nodes/VectorDatabaseNode/VectorDatabaseNode.tsx","../../src/components/flows/Nodes/JSONLDataNode/JSONLDataNode.tsx","../../src/lib/shadcn/ui/dock.tsx","../../src/assets/svgs/visual-studio-code.svg?react","../../src/assets/images/plate-editor.png","../../src/components/flows/Nodes/ApplicationBarNode/constants.ts","../../src/components/flows/Nodes/ApplicationBarNode/hooks/use-actions.ts","../../src/components/flows/Nodes/ApplicationBarNode/ApplicationBarNode.tsx","../../src/components/flows/DefaultNodeResizer/DefaultNodeResizer.tsx","../../src/components/flows/Nodes/ShapeNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ShapeNode/ShapeNode.tsx","../../src/components/flows/Nodes/CircleNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/CircleNode/CircleNode.tsx","../../src/components/flows/Nodes/TriangleNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/TriangleNode/TriangleNode.tsx","../../src/components/flows/Nodes/EditorAppNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/EditorAppNode/hooks/use-actions.ts","../../src/components/flows/Nodes/EditorAppNode/EditorAppNode.tsx","../../src/components/flows/Nodes/PlaceholderNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/PlaceholderNode/PlaceholderNode.tsx","../../src/components/flows/Nodes/CodeContainerAppNode/CodeContainerAppNode.tsx","../../src/services/web-container/source-bases/index.ts","../../src/components/molecules/CreateSourcebaseCard/index.tsx","../../src/components/flows/Nodes/VSLiteAppNode/hooks/use-actions.ts","../../src/components/flows/Nodes/VSLiteAppNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/VSLiteAppNode/VSLiteAppNode.tsx","../../src/components/flows/Nodes/index.tsx","../../src/lib/shadcn/ui/toggle.tsx","../../src/lib/shadcn/ui/toggle-group.tsx","../../src/lib/shadcn/devtools.tsx","../../src/hooks/flows/handlers/use-flow-manager.ts","../../src/hooks/flows/handlers/use-automatically-render-flow.ts","../../src/components/pages/Home/hooks/use-home-page.ts","../../src/components/pages/Home/Home.tsx"],"sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { useMotionValue } from './use-motion-value.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { cancelFrame, frame } from '../frameloop/frame.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { interpolate } from './interpolate.mjs';\n\nconst isCustomValueType = (v) => {\n    return v && typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { collectMotionValues } from './index.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","import { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import { useContext, useRef, useInsertionEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { frame, frameData } from '../frameloop/frame.mjs';\n\nfunction toNumber(v) {\n    if (typeof v === \"number\")\n        return v;\n    return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n    const latestValue = useRef(value.get());\n    const latestSetter = useRef(() => { });\n    const startAnimation = () => {\n        /**\n         * If the previous animation hasn't had the chance to even render a frame, render it now.\n         */\n        const animation = activeSpringAnimation.current;\n        if (animation && animation.time === 0) {\n            animation.sample(frameData.delta);\n        }\n        stopAnimation();\n        activeSpringAnimation.current = animateValue({\n            keyframes: [value.get(), latestValue.current],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current,\n        });\n    };\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            latestValue.current = v;\n            latestSetter.current = set;\n            frame.update(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(toNumber(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n","export enum MessageStatusEnum {\n  Started = 'started',\n  Inprogress = 'inprogress',\n  Success = 'success',\n  Failed = 'failed',\n}\n\nexport enum MessageRoleEnum {\n  Human = 'human',\n  User = 'user',\n  AI = 'ai',\n  System = 'system',\n  Assistant = 'assistant',\n  Tool = 'tool',\n  FewShotExample = 'few_shot_example',\n}\n","export enum ThreadStatusEnum {\n  Started = 'started',\n  Inprogress = 'inprogress',\n  Done = 'done',\n}\n","export enum PromptStatusEnum {\n  Started = 'started',\n  Fromated = 'fromated',\n}\n\nexport enum PromptTypeEnum {\n  Chat = 'chat',\n  FewShotExample = 'few_shot_example',\n}\n","\"use client\";\n\n// packages/react/menubar/src/Menubar.tsx\nimport * as React from \"react\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as MenuPrimitive from \"@radix-ui/react-menu\";\nimport { createMenuScope } from \"@radix-ui/react-menu\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MENUBAR_NAME = \"Menubar\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(MENUBAR_NAME);\nvar [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope\n]);\nvar useMenuScope = createMenuScope();\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [MenubarContextProvider, useMenubarContext] = createMenubarContext(MENUBAR_NAME);\nvar Menubar = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeMenubar,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      loop = true,\n      dir,\n      ...menubarProps\n    } = props;\n    const direction = useDirection(dir);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const [value = \"\", setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue\n    });\n    const [currentTabStopId, setCurrentTabStopId] = React.useState(null);\n    return /* @__PURE__ */ jsx(\n      MenubarContextProvider,\n      {\n        scope: __scopeMenubar,\n        value,\n        onMenuOpen: React.useCallback(\n          (value2) => {\n            setValue(value2);\n            setCurrentTabStopId(value2);\n          },\n          [setValue]\n        ),\n        onMenuClose: React.useCallback(() => setValue(\"\"), [setValue]),\n        onMenuToggle: React.useCallback(\n          (value2) => {\n            setValue((prevValue) => Boolean(prevValue) ? \"\" : value2);\n            setCurrentTabStopId(value2);\n          },\n          [setValue]\n        ),\n        dir: direction,\n        loop,\n        children: /* @__PURE__ */ jsx(Collection.Provider, { scope: __scopeMenubar, children: /* @__PURE__ */ jsx(Collection.Slot, { scope: __scopeMenubar, children: /* @__PURE__ */ jsx(\n          RovingFocusGroup.Root,\n          {\n            asChild: true,\n            ...rovingFocusGroupScope,\n            orientation: \"horizontal\",\n            loop,\n            dir: direction,\n            currentTabStopId,\n            onCurrentTabStopIdChange: setCurrentTabStopId,\n            children: /* @__PURE__ */ jsx(Primitive.div, { role: \"menubar\", ...menubarProps, ref: forwardedRef })\n          }\n        ) }) })\n      }\n    );\n  }\n);\nMenubar.displayName = MENUBAR_NAME;\nvar MENU_NAME = \"MenubarMenu\";\nvar [MenubarMenuProvider, useMenubarMenuContext] = createMenubarContext(MENU_NAME);\nvar MenubarMenu = (props) => {\n  const { __scopeMenubar, value: valueProp, ...menuProps } = props;\n  const autoValue = useId();\n  const value = valueProp || autoValue || \"LEGACY_REACT_AUTO_VALUE\";\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n  return /* @__PURE__ */ jsx(\n    MenubarMenuProvider,\n    {\n      scope: __scopeMenubar,\n      value,\n      triggerId: useId(),\n      triggerRef,\n      contentId: useId(),\n      wasKeyboardTriggerOpenRef,\n      children: /* @__PURE__ */ jsx(\n        MenuPrimitive.Root,\n        {\n          ...menuScope,\n          open,\n          onOpenChange: (open2) => {\n            if (!open2) context.onMenuClose();\n          },\n          modal: false,\n          dir: context.dir,\n          ...menuProps\n        }\n      )\n    }\n  );\n};\nMenubarMenu.displayName = MENU_NAME;\nvar TRIGGER_NAME = \"MenubarTrigger\";\nvar MenubarTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, disabled = false, ...triggerProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n    const ref = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const open = context.value === menuContext.value;\n    return /* @__PURE__ */ jsx(Collection.ItemSlot, { scope: __scopeMenubar, value: menuContext.value, disabled, children: /* @__PURE__ */ jsx(\n      RovingFocusGroup.Item,\n      {\n        asChild: true,\n        ...rovingFocusGroupScope,\n        focusable: !disabled,\n        tabStopId: menuContext.value,\n        children: /* @__PURE__ */ jsx(MenuPrimitive.Anchor, { asChild: true, ...menuScope, children: /* @__PURE__ */ jsx(\n          Primitive.button,\n          {\n            type: \"button\",\n            role: \"menuitem\",\n            id: menuContext.triggerId,\n            \"aria-haspopup\": \"menu\",\n            \"aria-expanded\": open,\n            \"aria-controls\": open ? menuContext.contentId : void 0,\n            \"data-highlighted\": isFocused ? \"\" : void 0,\n            \"data-state\": open ? \"open\" : \"closed\",\n            \"data-disabled\": disabled ? \"\" : void 0,\n            disabled,\n            ...triggerProps,\n            ref: composedRefs,\n            onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {\n              if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                context.onMenuOpen(menuContext.value);\n                if (!open) event.preventDefault();\n              }\n            }),\n            onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {\n              const menubarOpen = Boolean(context.value);\n              if (menubarOpen && !open) {\n                context.onMenuOpen(menuContext.value);\n                ref.current?.focus();\n              }\n            }),\n            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {\n              if (disabled) return;\n              if ([\"Enter\", \" \"].includes(event.key)) context.onMenuToggle(menuContext.value);\n              if (event.key === \"ArrowDown\") context.onMenuOpen(menuContext.value);\n              if ([\"Enter\", \" \", \"ArrowDown\"].includes(event.key)) {\n                menuContext.wasKeyboardTriggerOpenRef.current = true;\n                event.preventDefault();\n              }\n            }),\n            onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),\n            onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))\n          }\n        ) })\n      }\n    ) });\n  }\n);\nMenubarTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"MenubarPortal\";\nvar MenubarPortal = (props) => {\n  const { __scopeMenubar, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */ jsx(MenuPrimitive.Portal, { ...menuScope, ...portalProps });\n};\nMenubarPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"MenubarContent\";\nvar MenubarContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, align = \"start\", ...contentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n    const getItems = useCollection(__scopeMenubar);\n    const hasInteractedOutsideRef = React.useRef(false);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.Content,\n      {\n        id: menuContext.contentId,\n        \"aria-labelledby\": menuContext.triggerId,\n        \"data-radix-menubar-content\": \"\",\n        ...menuScope,\n        ...contentProps,\n        ref: forwardedRef,\n        align,\n        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          const menubarOpen = Boolean(context.value);\n          if (!menubarOpen && !hasInteractedOutsideRef.current) {\n            menuContext.triggerRef.current?.focus();\n          }\n          hasInteractedOutsideRef.current = false;\n          event.preventDefault();\n        }),\n        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {\n          const target = event.target;\n          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          if (isMenubarTrigger) event.preventDefault();\n        }),\n        onInteractOutside: composeEventHandlers(props.onInteractOutside, () => {\n          hasInteractedOutsideRef.current = true;\n        }),\n        onEntryFocus: (event) => {\n          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n        },\n        onKeyDown: composeEventHandlers(\n          props.onKeyDown,\n          (event) => {\n            if ([\"ArrowRight\", \"ArrowLeft\"].includes(event.key)) {\n              const target = event.target;\n              const targetIsSubTrigger = target.hasAttribute(\"data-radix-menubar-subtrigger\");\n              const isKeyDownInsideSubMenu = target.closest(\"[data-radix-menubar-content]\") !== event.currentTarget;\n              const prevMenuKey = context.dir === \"rtl\" ? \"ArrowRight\" : \"ArrowLeft\";\n              const isPrevKey = prevMenuKey === event.key;\n              const isNextKey = !isPrevKey;\n              if (isNextKey && targetIsSubTrigger) return;\n              if (isKeyDownInsideSubMenu && isPrevKey) return;\n              const items = getItems().filter((item) => !item.disabled);\n              let candidateValues = items.map((item) => item.value);\n              if (isPrevKey) candidateValues.reverse();\n              const currentIndex = candidateValues.indexOf(menuContext.value);\n              candidateValues = context.loop ? wrapArray(candidateValues, currentIndex + 1) : candidateValues.slice(currentIndex + 1);\n              const [nextValue] = candidateValues;\n              if (nextValue) context.onMenuOpen(nextValue);\n            }\n          },\n          { checkForDefaultPrevented: false }\n        ),\n        style: {\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      }\n    );\n  }\n);\nMenubarContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"MenubarGroup\";\nvar MenubarGroup = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Group, { ...menuScope, ...groupProps, ref: forwardedRef });\n  }\n);\nMenubarGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"MenubarLabel\";\nvar MenubarLabel = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Label, { ...menuScope, ...labelProps, ref: forwardedRef });\n  }\n);\nMenubarLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"MenubarItem\";\nvar MenubarItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Item, { ...menuScope, ...itemProps, ref: forwardedRef });\n  }\n);\nMenubarItem.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"MenubarCheckboxItem\";\nvar MenubarCheckboxItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });\n  }\n);\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"MenubarRadioGroup\";\nvar MenubarRadioGroup = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });\n  }\n);\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"MenubarRadioItem\";\nvar MenubarRadioItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });\n  }\n);\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"MenubarItemIndicator\";\nvar MenubarItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const { __scopeMenubar, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */ jsx(MenuPrimitive.ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });\n});\nMenubarItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"MenubarSeparator\";\nvar MenubarSeparator = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });\n  }\n);\nMenubarSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"MenubarArrow\";\nvar MenubarArrow = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Arrow, { ...menuScope, ...arrowProps, ref: forwardedRef });\n  }\n);\nMenubarArrow.displayName = ARROW_NAME;\nvar SUB_NAME = \"MenubarSub\";\nvar MenubarSub = (props) => {\n  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */ jsx(MenuPrimitive.Sub, { ...menuScope, open, onOpenChange: setOpen, children });\n};\nMenubarSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME = \"MenubarSubTrigger\";\nvar MenubarSubTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.SubTrigger,\n      {\n        \"data-radix-menubar-subtrigger\": \"\",\n        ...menuScope,\n        ...subTriggerProps,\n        ref: forwardedRef\n      }\n    );\n  }\n);\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"MenubarSubContent\";\nvar MenubarSubContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.SubContent,\n      {\n        ...menuScope,\n        \"data-radix-menubar-content\": \"\",\n        ...subContentProps,\n        ref: forwardedRef,\n        style: {\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      }\n    );\n  }\n);\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root3 = Menubar;\nvar Menu = MenubarMenu;\nvar Trigger = MenubarTrigger;\nvar Portal2 = MenubarPortal;\nvar Content2 = MenubarContent;\nvar Group2 = MenubarGroup;\nvar Label2 = MenubarLabel;\nvar Item3 = MenubarItem;\nvar CheckboxItem2 = MenubarCheckboxItem;\nvar RadioGroup2 = MenubarRadioGroup;\nvar RadioItem2 = MenubarRadioItem;\nvar ItemIndicator2 = MenubarItemIndicator;\nvar Separator2 = MenubarSeparator;\nvar Arrow2 = MenubarArrow;\nvar Sub2 = MenubarSub;\nvar SubTrigger2 = MenubarSubTrigger;\nvar SubContent2 = MenubarSubContent;\nexport {\n  Arrow2 as Arrow,\n  CheckboxItem2 as CheckboxItem,\n  Content2 as Content,\n  Group2 as Group,\n  Item3 as Item,\n  ItemIndicator2 as ItemIndicator,\n  Label2 as Label,\n  Menu,\n  Menubar,\n  MenubarArrow,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarGroup,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n  Portal2 as Portal,\n  RadioGroup2 as RadioGroup,\n  RadioItem2 as RadioItem,\n  Root3 as Root,\n  Separator2 as Separator,\n  Sub2 as Sub,\n  SubContent2 as SubContent,\n  SubTrigger2 as SubTrigger,\n  Trigger,\n  createMenubarScope\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      'flex h-10 items-center space-x-1 rounded-md border bg-background p-1',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <LazyIcon name=\"chevron-right\" className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(({ className, align = 'start', alignOffset = -4, sideOffset = 8, ...props }, ref) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  </MenubarPrimitive.Portal>\n))\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <LazyIcon name=\"check\" className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <LazyIcon name=\"circle\" className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = 'MenubarShortcut'\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","import { create } from 'zustand'\nimport { devtools, subscribeWithSelector } from 'zustand/middleware'\nimport { FlowStateActions, getFlowStateActions } from './actions'\nimport { FlowState, defaultFlowState } from './state'\n\nexport const useFlowState = create<FlowState & FlowStateActions>()(\n  subscribeWithSelector(\n    devtools((set, get) => ({\n      ...defaultFlowState,\n      ...getFlowStateActions(set, get),\n    })),\n  ),\n)\n","import { useCallback, useState } from 'react'\nimport { Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  LLM,\n  LLMModelTypeEnum,\n  LLMProviderEnum,\n  LLMStatusEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateLLM = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n\n  const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createLLM = useCallback(\n    async (source: Node, record: Partial<LLM>) => {\n      try {\n        if (!sessionId) {\n          throw new Error('Session not found')\n        }\n        if (!record.provider || !record.name) {\n          throw new Error('Provider and name are required')\n        }\n        setLoading(true)\n        const existed = await getRepository('LLM').findOne({\n          where: {\n            name: record.name,\n            session_id: sessionId,\n          },\n        })\n        if (existed) {\n          pushSyncNodeQueue('LLM', {\n            where: {\n              source_type: 'LLM',\n              source_id: existed.id,\n            },\n          })\n          return existed\n        }\n        return getRepository('LLM')\n          .save({\n            name: `${record.name}`,\n            // NOTE: No need to load cloud LLM\n            status:\n              record.provider === LLMProviderEnum.WebLLM\n                ? LLMStatusEnum.Started\n                : LLMStatusEnum.Loaded,\n            session_id: sessionId,\n            provider: record.provider,\n            metadata: JSON.stringify(record.metadata || {}),\n            model_type: record.model_type || LLMModelTypeEnum.LLM,\n            parameters: record.parameters || undefined,\n            encrypted: record.encrypted || undefined,\n            ...record,\n          })\n          .then(async (llm) => {\n            await createOrUpdateFlowNode({\n              source_id: llm.id,\n              source_type: 'LLM',\n              node_type: FlowNodeTypeEnum.LLM,\n              x: source.position?.x,\n              y: source.position?.y + (source.measured?.height || 0) + 30,\n            })\n            return llm\n          })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowNode, pushSyncNodeQueue, sessionId],\n  )\n\n  return {\n    loading,\n    createLLM,\n  }\n}\n","var U=1,Y=.9,H=.8,J=.17,p=.1,u=.999,$=.9999;var k=.99,m=/[\\\\\\/_+.#\"@\\[\\(\\{&]/,B=/[\\\\\\/_+.#\"@\\[\\(\\{&]/g,K=/[\\s-]/,X=/[\\s-]/g;function G(_,C,h,P,A,f,O){if(f===C.length)return A===_.length?U:k;var T=`${A},${f}`;if(O[T]!==void 0)return O[T];for(var L=P.charAt(f),c=h.indexOf(L,A),S=0,E,N,R,M;c>=0;)E=G(_,C,h,P,c+1,f+1,O),E>S&&(c===A?E*=U:m.test(_.charAt(c-1))?(E*=H,R=_.slice(A,c-1).match(B),R&&A>0&&(E*=Math.pow(u,R.length))):K.test(_.charAt(c-1))?(E*=Y,M=_.slice(A,c-1).match(X),M&&A>0&&(E*=Math.pow(u,M.length))):(E*=J,A>0&&(E*=Math.pow(u,c-A))),_.charAt(c)!==C.charAt(f)&&(E*=$)),(E<p&&h.charAt(c-1)===P.charAt(f+1)||P.charAt(f+1)===P.charAt(f)&&h.charAt(c-1)!==P.charAt(f))&&(N=G(_,C,h,P,c+1,f+2,O),N*p>E&&(E=N*p)),E>S&&(S=E),c=h.indexOf(L,c+1);return O[T]=S,S}function D(_){return _.toLowerCase().replace(X,\" \")}function W(_,C,h){return _=h&&h.length>0?`${_+\" \"+h.join(\" \")}`:_,G(_,C,D(_),D(C),0,0,{})}export{W as a};\n","\"use client\";import{a as ce}from\"./chunk-NZJY6EH4.mjs\";import*as w from\"@radix-ui/react-dialog\";import*as n from\"react\";import{Primitive as D}from\"@radix-ui/react-primitive\";import{useId as L}from\"@radix-ui/react-id\";import{useSyncExternalStore as Re}from\"use-sync-external-store/shim/index.js\";var N='[cmdk-group=\"\"]',Q='[cmdk-group-items=\"\"]',be='[cmdk-group-heading=\"\"]',Z='[cmdk-item=\"\"]',le=`${Z}:not([aria-disabled=\"true\"])`,Y=\"cmdk-item-select\",I=\"data-value\",he=(r,o,t)=>ce(r,o,t),ue=n.createContext(void 0),K=()=>n.useContext(ue),de=n.createContext(void 0),ee=()=>n.useContext(de),fe=n.createContext(void 0);var me=n.forwardRef((r,o)=>{let t=k(()=>{var e,s;return{search:\"\",value:(s=(e=r.value)!=null?e:r.defaultValue)!=null?s:\"\",filtered:{count:0,items:new Map,groups:new Set}}}),u=k(()=>new Set),c=k(()=>new Map),d=k(()=>new Map),f=k(()=>new Set),p=pe(r),{label:v,children:b,value:l,onValueChange:y,filter:E,shouldFilter:C,loop:H,disablePointerSelection:ge=!1,vimBindings:$=!0,...O}=r,te=L(),B=L(),F=L(),x=n.useRef(null),R=Te();M(()=>{if(l!==void 0){let e=l.trim();t.current.value=e,h.emit()}},[l]),M(()=>{R(6,re)},[]);let h=n.useMemo(()=>({subscribe:e=>(f.current.add(e),()=>f.current.delete(e)),snapshot:()=>t.current,setState:(e,s,i)=>{var a,m,g;if(!Object.is(t.current[e],s)){if(t.current[e]=s,e===\"search\")W(),U(),R(1,z);else if(e===\"value\"&&(i||R(5,re),((a=p.current)==null?void 0:a.value)!==void 0)){let S=s!=null?s:\"\";(g=(m=p.current).onValueChange)==null||g.call(m,S);return}h.emit()}},emit:()=>{f.current.forEach(e=>e())}}),[]),q=n.useMemo(()=>({value:(e,s,i)=>{var a;s!==((a=d.current.get(e))==null?void 0:a.value)&&(d.current.set(e,{value:s,keywords:i}),t.current.filtered.items.set(e,ne(s,i)),R(2,()=>{U(),h.emit()}))},item:(e,s)=>(u.current.add(e),s&&(c.current.has(s)?c.current.get(s).add(e):c.current.set(s,new Set([e]))),R(3,()=>{W(),U(),t.current.value||z(),h.emit()}),()=>{d.current.delete(e),u.current.delete(e),t.current.filtered.items.delete(e);let i=A();R(4,()=>{W(),(i==null?void 0:i.getAttribute(\"id\"))===e&&z(),h.emit()})}),group:e=>(c.current.has(e)||c.current.set(e,new Set),()=>{d.current.delete(e),c.current.delete(e)}),filter:()=>p.current.shouldFilter,label:v||r[\"aria-label\"],getDisablePointerSelection:()=>p.current.disablePointerSelection,listId:te,inputId:F,labelId:B,listInnerRef:x}),[]);function ne(e,s){var a,m;let i=(m=(a=p.current)==null?void 0:a.filter)!=null?m:he;return e?i(e,t.current.search,s):0}function U(){if(!t.current.search||p.current.shouldFilter===!1)return;let e=t.current.filtered.items,s=[];t.current.filtered.groups.forEach(a=>{let m=c.current.get(a),g=0;m.forEach(S=>{let P=e.get(S);g=Math.max(P,g)}),s.push([a,g])});let i=x.current;_().sort((a,m)=>{var P,V;let g=a.getAttribute(\"id\"),S=m.getAttribute(\"id\");return((P=e.get(S))!=null?P:0)-((V=e.get(g))!=null?V:0)}).forEach(a=>{let m=a.closest(Q);m?m.appendChild(a.parentElement===m?a:a.closest(`${Q} > *`)):i.appendChild(a.parentElement===i?a:a.closest(`${Q} > *`))}),s.sort((a,m)=>m[1]-a[1]).forEach(a=>{var g;let m=(g=x.current)==null?void 0:g.querySelector(`${N}[${I}=\"${encodeURIComponent(a[0])}\"]`);m==null||m.parentElement.appendChild(m)})}function z(){let e=_().find(i=>i.getAttribute(\"aria-disabled\")!==\"true\"),s=e==null?void 0:e.getAttribute(I);h.setState(\"value\",s||void 0)}function W(){var s,i,a,m;if(!t.current.search||p.current.shouldFilter===!1){t.current.filtered.count=u.current.size;return}t.current.filtered.groups=new Set;let e=0;for(let g of u.current){let S=(i=(s=d.current.get(g))==null?void 0:s.value)!=null?i:\"\",P=(m=(a=d.current.get(g))==null?void 0:a.keywords)!=null?m:[],V=ne(S,P);t.current.filtered.items.set(g,V),V>0&&e++}for(let[g,S]of c.current)for(let P of S)if(t.current.filtered.items.get(P)>0){t.current.filtered.groups.add(g);break}t.current.filtered.count=e}function re(){var s,i,a;let e=A();e&&(((s=e.parentElement)==null?void 0:s.firstChild)===e&&((a=(i=e.closest(N))==null?void 0:i.querySelector(be))==null||a.scrollIntoView({block:\"nearest\"})),e.scrollIntoView({block:\"nearest\"}))}function A(){var e;return(e=x.current)==null?void 0:e.querySelector(`${Z}[aria-selected=\"true\"]`)}function _(){var e;return Array.from(((e=x.current)==null?void 0:e.querySelectorAll(le))||[])}function J(e){let i=_()[e];i&&h.setState(\"value\",i.getAttribute(I))}function X(e){var g;let s=A(),i=_(),a=i.findIndex(S=>S===s),m=i[a+e];(g=p.current)!=null&&g.loop&&(m=a+e<0?i[i.length-1]:a+e===i.length?i[0]:i[a+e]),m&&h.setState(\"value\",m.getAttribute(I))}function oe(e){let s=A(),i=s==null?void 0:s.closest(N),a;for(;i&&!a;)i=e>0?Ie(i,N):Me(i,N),a=i==null?void 0:i.querySelector(le);a?h.setState(\"value\",a.getAttribute(I)):X(e)}let ie=()=>J(_().length-1),ae=e=>{e.preventDefault(),e.metaKey?ie():e.altKey?oe(1):X(1)},se=e=>{e.preventDefault(),e.metaKey?J(0):e.altKey?oe(-1):X(-1)};return n.createElement(D.div,{ref:o,tabIndex:-1,...O,\"cmdk-root\":\"\",onKeyDown:e=>{var s;if((s=O.onKeyDown)==null||s.call(O,e),!e.defaultPrevented)switch(e.key){case\"n\":case\"j\":{$&&e.ctrlKey&&ae(e);break}case\"ArrowDown\":{ae(e);break}case\"p\":case\"k\":{$&&e.ctrlKey&&se(e);break}case\"ArrowUp\":{se(e);break}case\"Home\":{e.preventDefault(),J(0);break}case\"End\":{e.preventDefault(),ie();break}case\"Enter\":if(!e.nativeEvent.isComposing&&e.keyCode!==229){e.preventDefault();let i=A();if(i){let a=new Event(Y);i.dispatchEvent(a)}}}}},n.createElement(\"label\",{\"cmdk-label\":\"\",htmlFor:q.inputId,id:q.labelId,style:Le},v),j(r,e=>n.createElement(de.Provider,{value:h},n.createElement(ue.Provider,{value:q},e))))}),ye=n.forwardRef((r,o)=>{var F,x;let t=L(),u=n.useRef(null),c=n.useContext(fe),d=K(),f=pe(r),p=(x=(F=f.current)==null?void 0:F.forceMount)!=null?x:c==null?void 0:c.forceMount;M(()=>{if(!p)return d.item(t,c==null?void 0:c.id)},[p]);let v=ve(t,u,[r.value,r.children,u],r.keywords),b=ee(),l=T(R=>R.value&&R.value===v.current),y=T(R=>p||d.filter()===!1?!0:R.search?R.filtered.items.get(t)>0:!0);n.useEffect(()=>{let R=u.current;if(!(!R||r.disabled))return R.addEventListener(Y,E),()=>R.removeEventListener(Y,E)},[y,r.onSelect,r.disabled]);function E(){var R,h;C(),(h=(R=f.current).onSelect)==null||h.call(R,v.current)}function C(){b.setState(\"value\",v.current,!0)}if(!y)return null;let{disabled:H,value:ge,onSelect:$,forceMount:O,keywords:te,...B}=r;return n.createElement(D.div,{ref:G([u,o]),...B,id:t,\"cmdk-item\":\"\",role:\"option\",\"aria-disabled\":!!H,\"aria-selected\":!!l,\"data-disabled\":!!H,\"data-selected\":!!l,onPointerMove:H||d.getDisablePointerSelection()?void 0:C,onClick:H?void 0:E},r.children)}),Se=n.forwardRef((r,o)=>{let{heading:t,children:u,forceMount:c,...d}=r,f=L(),p=n.useRef(null),v=n.useRef(null),b=L(),l=K(),y=T(C=>c||l.filter()===!1?!0:C.search?C.filtered.groups.has(f):!0);M(()=>l.group(f),[]),ve(f,p,[r.value,r.heading,v]);let E=n.useMemo(()=>({id:f,forceMount:c}),[c]);return n.createElement(D.div,{ref:G([p,o]),...d,\"cmdk-group\":\"\",role:\"presentation\",hidden:y?void 0:!0},t&&n.createElement(\"div\",{ref:v,\"cmdk-group-heading\":\"\",\"aria-hidden\":!0,id:b},t),j(r,C=>n.createElement(\"div\",{\"cmdk-group-items\":\"\",role:\"group\",\"aria-labelledby\":t?b:void 0},n.createElement(fe.Provider,{value:E},C))))}),Ee=n.forwardRef((r,o)=>{let{alwaysRender:t,...u}=r,c=n.useRef(null),d=T(f=>!f.search);return!t&&!d?null:n.createElement(D.div,{ref:G([c,o]),...u,\"cmdk-separator\":\"\",role:\"separator\"})}),Ce=n.forwardRef((r,o)=>{let{onValueChange:t,...u}=r,c=r.value!=null,d=ee(),f=T(l=>l.search),p=T(l=>l.value),v=K(),b=n.useMemo(()=>{var y;let l=(y=v.listInnerRef.current)==null?void 0:y.querySelector(`${Z}[${I}=\"${encodeURIComponent(p)}\"]`);return l==null?void 0:l.getAttribute(\"id\")},[]);return n.useEffect(()=>{r.value!=null&&d.setState(\"search\",r.value)},[r.value]),n.createElement(D.input,{ref:o,...u,\"cmdk-input\":\"\",autoComplete:\"off\",autoCorrect:\"off\",spellCheck:!1,\"aria-autocomplete\":\"list\",role:\"combobox\",\"aria-expanded\":!0,\"aria-controls\":v.listId,\"aria-labelledby\":v.labelId,\"aria-activedescendant\":b,id:v.inputId,type:\"text\",value:c?r.value:f,onChange:l=>{c||d.setState(\"search\",l.target.value),t==null||t(l.target.value)}})}),xe=n.forwardRef((r,o)=>{let{children:t,label:u=\"Suggestions\",...c}=r,d=n.useRef(null),f=n.useRef(null),p=K();return n.useEffect(()=>{if(f.current&&d.current){let v=f.current,b=d.current,l,y=new ResizeObserver(()=>{l=requestAnimationFrame(()=>{let E=v.offsetHeight;b.style.setProperty(\"--cmdk-list-height\",E.toFixed(1)+\"px\")})});return y.observe(v),()=>{cancelAnimationFrame(l),y.unobserve(v)}}},[]),n.createElement(D.div,{ref:G([d,o]),...c,\"cmdk-list\":\"\",role:\"listbox\",\"aria-label\":u,id:p.listId},j(r,v=>n.createElement(\"div\",{ref:G([f,p.listInnerRef]),\"cmdk-list-sizer\":\"\"},v)))}),Pe=n.forwardRef((r,o)=>{let{open:t,onOpenChange:u,overlayClassName:c,contentClassName:d,container:f,...p}=r;return n.createElement(w.Root,{open:t,onOpenChange:u},n.createElement(w.Portal,{container:f},n.createElement(w.Overlay,{\"cmdk-overlay\":\"\",className:c}),n.createElement(w.Content,{\"aria-label\":r.label,\"cmdk-dialog\":\"\",className:d},n.createElement(me,{ref:o,...p}))))}),we=n.forwardRef((r,o)=>T(u=>u.filtered.count===0)?n.createElement(D.div,{ref:o,...r,\"cmdk-empty\":\"\",role:\"presentation\"}):null),De=n.forwardRef((r,o)=>{let{progress:t,children:u,label:c=\"Loading...\",...d}=r;return n.createElement(D.div,{ref:o,...d,\"cmdk-loading\":\"\",role:\"progressbar\",\"aria-valuenow\":t,\"aria-valuemin\":0,\"aria-valuemax\":100,\"aria-label\":c},j(r,f=>n.createElement(\"div\",{\"aria-hidden\":!0},f)))}),Ve=Object.assign(me,{List:xe,Item:ye,Input:Ce,Group:Se,Separator:Ee,Dialog:Pe,Empty:we,Loading:De});function Ie(r,o){let t=r.nextElementSibling;for(;t;){if(t.matches(o))return t;t=t.nextElementSibling}}function Me(r,o){let t=r.previousElementSibling;for(;t;){if(t.matches(o))return t;t=t.previousElementSibling}}function pe(r){let o=n.useRef(r);return M(()=>{o.current=r}),o}var M=typeof window==\"undefined\"?n.useEffect:n.useLayoutEffect;function k(r){let o=n.useRef();return o.current===void 0&&(o.current=r()),o}function G(r){return o=>{r.forEach(t=>{typeof t==\"function\"?t(o):t!=null&&(t.current=o)})}}function T(r){let o=ee(),t=()=>r(o.snapshot());return Re(o.subscribe,t,t)}function ve(r,o,t,u=[]){let c=n.useRef(),d=K();return M(()=>{var v;let f=(()=>{var b;for(let l of t){if(typeof l==\"string\")return l.trim();if(typeof l==\"object\"&&\"current\"in l)return l.current?(b=l.current.textContent)==null?void 0:b.trim():c.current}})(),p=u.map(b=>b.trim());d.value(r,f,p),(v=o.current)==null||v.setAttribute(I,f),c.current=f}),c}var Te=()=>{let[r,o]=n.useState(),t=k(()=>new Map);return M(()=>{t.current.forEach(u=>u()),t.current=new Map},[r]),(u,c)=>{t.current.set(u,c),o({})}};function ke(r){let o=r.type;return typeof o==\"function\"?o(r.props):\"render\"in o?o.render(r.props):r}function j({asChild:r,children:o},t){return r&&n.isValidElement(o)?n.cloneElement(ke(o),{ref:o.ref},t(o.props.children)):t(o)}var Le={position:\"absolute\",width:\"1px\",height:\"1px\",padding:\"0\",margin:\"-1px\",overflow:\"hidden\",clip:\"rect(0, 0, 0, 0)\",whiteSpace:\"nowrap\",borderWidth:\"0\"};export{Ve as Command,Pe as CommandDialog,we as CommandEmpty,Se as CommandGroup,Ce as CommandInput,ye as CommandItem,xe as CommandList,De as CommandLoading,me as CommandRoot,Ee as CommandSeparator,he as defaultFilter,T as useCommandState};\n","import * as React from 'react'\nimport { type DialogProps } from '@radix-ui/react-dialog'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\nimport { Dialog, DialogContent } from 'src/lib/shadcn/ui/dialog'\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ntype CommandDialogProps = DialogProps\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <LazyIcon name=\"search\" className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 h-px bg-border', className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = 'CommandShortcut'\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","import * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>\n      <LazyIcon name=\"check\" className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","export const OPEN_AI_MODELS = ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo']\nexport const GROQ_MODELS = [\n  'deepseek-r1-distill-llama-70b',\n  'llama-3.2-90b-vision-preview',\n  'llama-3.3-70b-versatile',\n  'llama-3.3-70b-specdec',\n  'llama3-70b-8192',\n  'gemma2-9b-it',\n  'llama3-8b-8192',\n  'mixtral-8x7b-32768',\n]\nexport const GROQ_VISION_MODELS = ['llama-3.2-90b-vision-preview']\nexport const GOOGLE_GENERATIVE_AI_MODELS = [\n  'gemini-2.0-flash-exp',\n  'gemini-1.5-flash',\n  'gemini-1.5-pro',\n  'gemini-1.5-flash-8b',\n]\nexport const GOOGLE_GENERATIVE_AI_API_KEY_LINK = 'https://aistudio.google.com/app/apikey'\nexport const OPEN_AI_API_KEY_LINK = 'https://platform.openai.com/api-keys'\nexport const GROQ_API_KEY_LINK = 'https://console.groq.com/keys'\n","import { LLMProviderEnum } from 'src/services/database/types'\n\nexport const SUPPORTED_PROVIDERS = [\n  LLMProviderEnum.WebLLM,\n  LLMProviderEnum.OpenAI,\n  LLMProviderEnum.GoogleGenerativeAI,\n  LLMProviderEnum.Groq,\n]\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from 'src/lib/shadcn/ui/dialog'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from 'src/lib/shadcn/ui/input-otp'\n\ntype CreateSessionPassphraseDialogProps = {\n  className: string\n  onConfirm: (newValue: string) => Promise<unknown>\n  onCancel: () => void\n}\n\nconst CreateSessionPassphraseDialog = create<CreateSessionPassphraseDialogProps>(\n  ({ onConfirm, onCancel }) => {\n    const currentModal = useModal()\n    const { t } = useTranslation('dialogs')\n    const [name, setName] = useState('')\n\n    const handleChangeOTP = (newValue: string) => {\n      setName(newValue)\n    }\n\n    const handleSubmit = async () => {\n      try {\n        if (name?.length !== 6) {\n          return\n        }\n        await onConfirm?.(name)\n        setName('')\n        currentModal.resolve(true)\n        currentModal.hide()\n      } catch (e) {\n        currentModal.reject(e)\n      }\n    }\n\n    const handleHide = () => {\n      onCancel?.()\n      setName('')\n      currentModal.resolve(false)\n      currentModal.hide()\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={handleHide}>\n        <DialogContent className=\"w-[330px]\">\n          <DialogHeader>\n            <DialogTitle>{t('create_session_passkey.title')}</DialogTitle>\n            <DialogDescription>{t('create_session_passkey.description')}</DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <InputOTP onChange={handleChangeOTP} maxLength={6}>\n              <InputOTPGroup>\n                <InputOTPSlot index={0} hidden />\n                <InputOTPSlot index={1} hidden />\n                <InputOTPSlot index={2} hidden />\n              </InputOTPGroup>\n              <InputOTPSeparator />\n              <InputOTPGroup>\n                <InputOTPSlot index={3} hidden />\n                <InputOTPSlot index={4} hidden />\n                <InputOTPSlot index={5} hidden />\n              </InputOTPGroup>\n            </InputOTP>\n          </div>\n          <DialogFooter>\n            <Button disabled={name?.length !== 6} onClick={handleSubmit} type=\"submit\">\n              {t('create_session_passkey.confirm')}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateSessionPassphraseDialog\n","import { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { encryptSymmetric, generatePassphrase } from 'src/utils/aes'\n\nexport const useUpdateSessionPassphrase = () => {\n  const [loading, setLoading] = useState(false)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const setCurrentSession = useSessionState((state) => state.setCurrentSession)\n\n  const updateSessionPassphrase = useCallback(\n    async (passkey: string) => {\n      if (!currentSession || !passkey) {\n        return\n      }\n      try {\n        setLoading(true)\n\n        const passphrase = await generatePassphrase()\n        const encrypted = await encryptSymmetric(passphrase, passkey)\n        await getRepository('Session').update(currentSession.id, {\n          passphrase: encrypted,\n        })\n        const session = await getRepository('Session').findOne({ where: { id: currentSession.id } })\n        if (session) {\n          setCurrentSession(session)\n        }\n        return {\n          passphrase,\n          encrypted,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [currentSession, setCurrentSession],\n  )\n\n  return {\n    loading,\n    updateSessionPassphrase,\n  }\n}\n","import { useCallback } from 'react'\nimport { useSessionState } from 'src/states/session'\nimport secureSession from 'src/utils/secure-session'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\nimport CreateSessionPassphraseDialog from 'src/components/dialogs/CreateSessionPassphraseDialog'\nimport { useUpdateSessionPassphrase } from 'src/hooks/mutations/use-update-session-passphrase'\nimport { useConfirmPassphrase } from './use-confirm-passphrase'\n\nexport const useConfirmOrCreatePassphrase = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { modalRef: createSessionPassphraseDialogRef } = useModalRef(CreateSessionPassphraseDialog)\n  const { updateSessionPassphrase } = useUpdateSessionPassphrase()\n  const { confirmPassphrase } = useConfirmPassphrase()\n\n  const confirmOrCreatePassphrase = useCallback(async () => {\n    if (!currentSession?.passphrase) {\n      let passkey = ''\n      await createSessionPassphraseDialogRef.current.show({\n        onConfirm: async (input: string) => {\n          passkey = input\n        },\n      })\n      if (!passkey) {\n        throw new Error('Passphrase is required')\n      }\n      const keyInfo = await updateSessionPassphrase(passkey)\n      if (!keyInfo) {\n        throw new Error('Failed to update session passphrase')\n      }\n      await secureSession.set('passphrase', keyInfo.passphrase)\n    } else {\n      await confirmPassphrase()\n    }\n    return secureSession.get('passphrase')\n  }, [\n    confirmPassphrase,\n    createSessionPassphraseDialogRef,\n    currentSession?.passphrase,\n    updateSessionPassphrase,\n  ])\n\n  return {\n    confirmOrCreatePassphrase,\n  }\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useCreateLLM } from 'src/hooks/flows/mutations/use-create-llm'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { Popover, PopoverContent } from 'src/lib/shadcn/ui/popover'\nimport { PopoverTrigger } from '@radix-ui/react-popover'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from 'src/lib/shadcn/ui/command'\nimport { LLMModelTypeEnum, LLMProviderEnum } from 'src/services/database/types'\nimport { useLocalLLMState } from 'src/services/local-llm'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { RECOMMENDATION_LOCAL_LLMS } from 'src/constants/local-llm'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { Alert } from 'src/lib/shadcn/ui/alert'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { logError } from 'src/utils/logger'\nimport { useSessionState } from 'src/states/session'\nimport { encryptData } from 'src/utils/passphrase'\nimport { Checkbox } from 'src/lib/shadcn/ui/checkbox'\nimport {\n  GROQ_API_KEY_LINK,\n  GROQ_MODELS,\n  GROQ_VISION_MODELS,\n  OPEN_AI_API_KEY_LINK,\n  OPEN_AI_MODELS,\n  GOOGLE_GENERATIVE_AI_API_KEY_LINK,\n  GOOGLE_GENERATIVE_AI_MODELS,\n} from 'src/constants/llm'\n\nimport { SUPPORTED_PROVIDERS } from './constants'\nimport { useConfirmOrCreatePassphrase } from 'src/hooks/mutations/use-confirm-or-create-passphrase'\n\nfunction CreateLLMCard(props: NodeProps & { setDialog?: (value: boolean) => void }) {\n  const { id, setDialog } = props\n  const { t } = useTranslation('components')\n  const { toast } = useToast()\n  const node = useInternalNode(id)\n  const [loading, setLoading] = useState(false)\n  const [input, setInput] = useState('')\n  const [open, setOpen] = useState(false)\n  const [search, setSearch] = useState('')\n  const [encryptedInfo, setEncryptedInfo] = useState<Record<string, string>>()\n  const [provider, setProvider] = useState<`${LLMProviderEnum}`>(LLMProviderEnum.WebLLM)\n  const [hasCache, setHasCache] = useState(false)\n  const [llmsInfo, setLLMsInfo] = useState<{\n    modelList: ModelRecord[]\n    functionCallingModelIds: string[]\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const syncCachedLLMURLs = useLocalLLMState((state) => state.syncCachedLLMURLs)\n  const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs)\n  const { loading: creatingLLM, createLLM } = useCreateLLM()\n\n  const { confirmOrCreatePassphrase } = useConfirmOrCreatePassphrase()\n\n  useEffect(() => {\n    import('@mlc-ai/web-llm').then(async ({ functionCallingModelIds, prebuiltAppConfig }) => {\n      const modelList = prebuiltAppConfig.model_list\n      setLLMsInfo({ modelList, functionCallingModelIds })\n    })\n  }, [])\n\n  useEffect(() => {\n    syncCachedLLMURLs()\n  }, [syncCachedLLMURLs])\n\n  const isRequiredSessionPasskey = useMemo(() => {\n    if (!input) return false\n    return provider !== LLMProviderEnum.WebLLM\n  }, [input, provider])\n\n  const modelList = useMemo(() => {\n    if (!llmsInfo?.functionCallingModelIds || !llmsInfo?.modelList) return []\n\n    const data = !search\n      ? llmsInfo?.modelList\n      : llmsInfo?.modelList.filter((model) =>\n          model.model_id.toLowerCase().includes(search.toLowerCase()),\n        )\n\n    return (data || []).sort((pre, next) => {\n      // Check if models are in cachedLLMURLs\n      const preInCache = cachedLLMURLs.some((item) => item.includes(pre.model_id))\n      const nextInCache = cachedLLMURLs.some((item) => item.includes(next.model_id))\n\n      // Prioritize models in cachedLLMURLs\n      if (preInCache && !nextInCache) {\n        return -1\n      }\n      if (!preInCache && nextInCache) {\n        return 1\n      }\n\n      const preInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(pre.model_id)\n      const nextInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(next.model_id)\n\n      // Prioritize models in RECOMMENDATION_LOCAL_LLMS\n      if (preInRecommended && !nextInRecommended) {\n        return -1\n      }\n      if (!preInRecommended && nextInRecommended) {\n        return 1\n      }\n\n      // Check if models are in functionCallingModelIds\n      const preInFunctionCalling = llmsInfo?.functionCallingModelIds.includes(pre.model_id)\n      const nextInFunctionCalling = llmsInfo?.functionCallingModelIds.includes(next.model_id)\n\n      // Prioritize models in functionCallingModelIds\n      if (preInFunctionCalling && !nextInFunctionCalling) {\n        return -1\n      }\n      if (!preInFunctionCalling && nextInFunctionCalling) {\n        return 1\n      }\n\n      // Compare buffer_size_required_bytes\n      if (\n        pre.vram_required_MB &&\n        next.vram_required_MB &&\n        pre.vram_required_MB !== next.vram_required_MB\n      ) {\n        return pre.vram_required_MB - next.vram_required_MB\n      }\n\n      return pre.model_id.localeCompare(next.model_id)\n    })\n  }, [llmsInfo?.modelList, llmsInfo?.functionCallingModelIds, search, cachedLLMURLs])\n\n  const selectedModel = useMemo<ModelRecord | undefined>(() => {\n    if (!input) return\n\n    switch (provider) {\n      case LLMProviderEnum.WebLLM:\n        return llmsInfo?.modelList && modelList.find((model) => model.model_id === input)\n      case LLMProviderEnum.Groq:\n        setEncryptedInfo({})\n        return {\n          model: input,\n          model_id: input,\n          model_type: GROQ_VISION_MODELS.includes(input) ? 2 : 0,\n          overrides: {},\n        } as ModelRecord\n      case LLMProviderEnum.OpenAI:\n        setEncryptedInfo({})\n        return {\n          model: input,\n          model_id: input,\n          model_type: 2,\n          overrides: {},\n        } as ModelRecord\n      case LLMProviderEnum.GoogleGenerativeAI:\n        setEncryptedInfo({})\n        return {\n          model: input,\n          model_id: input,\n          model_type: 2,\n          overrides: {},\n        } as ModelRecord\n    }\n  }, [input, llmsInfo?.modelList, modelList, provider])\n\n  useEffect(() => {\n    if (!selectedModel?.model_id || !cachedLLMURLs) return\n\n    setHasCache(cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)))\n  }, [cachedLLMURLs, selectedModel?.model_id])\n  useEffect(() => {\n    if (!currentSession?.id) return\n\n    setProvider(LLMProviderEnum.WebLLM)\n    setInput('')\n    setSearch('')\n    setEncryptedInfo({})\n  }, [currentSession?.id])\n\n  const handleOnchange = useCallback((currentValue: string) => {\n    setInput(currentValue)\n    setOpen(false)\n  }, [])\n  const handleSearchChange = useCallback((value: string) => {\n    setSearch(value)\n  }, [])\n  const handleOnSelectProvider = useCallback((value: `${LLMProviderEnum}`) => {\n    setProvider(value)\n    setInput('')\n    setSearch('')\n    setEncryptedInfo({})\n  }, [])\n  const hanldeSubmit = async () => {\n    if (!node || !currentSession) return\n    try {\n      setLoading(true)\n      let encrypted: Record<string, unknown> | undefined\n\n      if (isRequiredSessionPasskey) {\n        const passphrase = await confirmOrCreatePassphrase()\n        if (!passphrase) {\n          throw new Error('Passphrase is not found')\n        }\n        encrypted = await encryptData(encryptedInfo || {}, passphrase)\n      }\n      await createLLM(node, {\n        name: input,\n        model_type: modelTypeToLLMType(selectedModel?.model_type),\n        function_calling: selectedModel?.model_id\n          ? llmsInfo?.functionCallingModelIds?.includes(selectedModel?.model_id)\n          : false,\n        encrypted,\n        provider,\n      })\n      setDialog?.(false)\n    } catch (error) {\n      logError('Create LLM', error)\n      toast({\n        variant: 'destructive',\n        description: t('add_llm_card.errors.failed_to_create'),\n      })\n    } finally {\n      setLoading(false)\n      setProvider(LLMProviderEnum.WebLLM)\n      setEncryptedInfo({})\n      setInput('')\n      setSearch('')\n    }\n  }\n\n  const modelTypeToLLMType = useCallback((modelType?: unknown) => {\n    if (modelType === 1) {\n      return LLMModelTypeEnum.embedding\n    }\n    if (modelType === 2) {\n      return LLMModelTypeEnum.VLM\n    }\n    return LLMModelTypeEnum.LLM\n  }, [])\n\n  const modelItems = useMemo(() => {\n    switch (provider) {\n      case LLMProviderEnum.WebLLM:\n        return modelList.map((model) => (\n          <CommandItem key={model.model_id} value={model.model_id} onSelect={handleOnchange}>\n            {input === model.model_id ? (\n              <LazyIcon name=\"check\" className={'mr-2 h-4 w-4'} />\n            ) : (\n              <div className=\"mr-2 h-4 w-4\" />\n            )}\n            <span className=\"max-w-md\">\n              <div className=\"flex gap-2 mb-2\">\n                <LLMIcon name={model.model_id} />\n                {model.model_id}\n              </div>\n              <div className=\"flex max-w-full flex-wrap gap-1\">\n                <LLMInfo\n                  model={model}\n                  isFunctionCalling={\n                    llmsInfo?.functionCallingModelIds?.includes(model.model_id) || false\n                  }\n                  name={model.model_id}\n                  isCached={cachedLLMURLs.some((item) => item.includes(model.model_id)) || false}\n                  cloud={provider !== LLMProviderEnum.WebLLM}\n                />\n              </div>\n            </span>\n          </CommandItem>\n        ))\n      case LLMProviderEnum.OpenAI:\n        return OPEN_AI_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {input === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n      case LLMProviderEnum.GoogleGenerativeAI:\n        return GOOGLE_GENERATIVE_AI_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {input === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n      case LLMProviderEnum.Groq:\n        return GROQ_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {input === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n    }\n    return\n  }, [cachedLLMURLs, handleOnchange, input, llmsInfo?.functionCallingModelIds, modelList, provider])\n\n  const encryptedFields = useMemo(() => {\n    if (!isRequiredSessionPasskey) return undefined\n\n    switch (provider) {\n      case LLMProviderEnum.Groq:\n      case LLMProviderEnum.OpenAI:\n        return (\n          <>\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              {t('add_llm_card.alert.session_passkey')}\n            </Alert>\n            <div className=\"mt-4\">\n              <Label>{t('add_llm_card.encrypted_fields.api_key')}</Label>\n              <Button variant=\"link\" className=\"px-1\">\n                <a\n                  href={\n                    provider === LLMProviderEnum.OpenAI ? OPEN_AI_API_KEY_LINK : GROQ_API_KEY_LINK\n                  }\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ({provider === LLMProviderEnum.OpenAI ? OPEN_AI_API_KEY_LINK : GROQ_API_KEY_LINK})\n                </a>\n              </Button>\n              <Input\n                type=\"password\"\n                value={encryptedInfo?.key || ''}\n                onChange={(e) =>\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    key: e.target.value,\n                  }))\n                }\n              />\n            </div>\n          </>\n        )\n      case LLMProviderEnum.GoogleGenerativeAI:\n        return (\n          <>\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              {t('add_llm_card.alert.session_passkey')}\n            </Alert>\n            <div className=\"mt-4\">\n              <Label>{t('add_llm_card.encrypted_fields.api_key')}</Label>\n              <Button variant=\"link\" className=\"px-1\">\n                <a href={GOOGLE_GENERATIVE_AI_API_KEY_LINK} target=\"_blank\" rel=\"noreferrer\">\n                  ({GOOGLE_GENERATIVE_AI_API_KEY_LINK})\n                </a>\n              </Button>\n              <Input\n                type=\"password\"\n                value={encryptedInfo?.key || ''}\n                onChange={(e) =>\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    key: e.target.value,\n                  }))\n                }\n              />\n            </div>\n            <div className=\"mt-4 flex items-center\">\n              <Label>{t('add_llm_card.encrypted_fields.enabled_google_search_retreival')}</Label>\n              <Checkbox\n                checked={!!encryptedInfo?.enabled_google_search_retreival}\n                className=\"ml-2\"\n                onCheckedChange={(e) => {\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    enabled_google_search_retreival: !e ? '' : `true`,\n                  }))\n                }}\n              />\n            </div>\n          </>\n        )\n    }\n  }, [isRequiredSessionPasskey, provider, t, encryptedInfo])\n\n  return (\n    <Card className=\"max-w-lg\">\n      <CardHeader>\n        <CardTitle>{t('add_llm_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid w-full gap-1.5\">\n          <Label>{t('add_llm_card.provider')}</Label>\n          <Select value={provider} onValueChange={handleOnSelectProvider}>\n            <SelectTrigger className=\"w-full mb-4\">\n              <SelectValue placeholder={t('add_llm_card.provider_select_placeholder')} />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.values(SUPPORTED_PROVIDERS).map((item) => {\n                return (\n                  <SelectItem key={item} value={item}>\n                    {t(`add_llm_card.providers.${item.toLowerCase()}`)}\n                  </SelectItem>\n                )\n              })}\n            </SelectContent>\n          </Select>\n          <Label>{t('add_llm_card.model_name')}</Label>\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={open}\n                className=\"w-full justify-between\"\n              >\n                {input ? selectedModel?.model_id : t('add_llm_card.select_model_placeholder')}\n                <LazyIcon name=\"chevrons-up-down\" className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-full p-0\">\n              <Command>\n                <CommandInput\n                  onValueChange={handleSearchChange}\n                  placeholder={t('add_llm_card.search_placeholder')}\n                />\n                <CommandList>\n                  <CommandEmpty>{t('add_llm_card.no_model')}</CommandEmpty>\n                  <CommandGroup>{modelItems}</CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n        {selectedModel ? (\n          <div className=\"mt-4\">\n            <div className=\"mt-4 text-sm text-muted-foreground center flex max-w-full flex-wrap gap-1\">\n              <LLMIcon name={selectedModel.model_id} className=\"mr-2\" />\n              <LLMInfo\n                model={selectedModel}\n                isFunctionCalling={\n                  llmsInfo?.functionCallingModelIds?.includes(selectedModel.model_id) || false\n                }\n                name={selectedModel.model_id}\n                isCached={\n                  cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)) || false\n                }\n                cloud={provider !== LLMProviderEnum.WebLLM}\n              />\n            </div>\n            <div className=\"mt-2 text-sm text-muted-foreground\">\n              <span className=\"font-bold mr-2\">{t('add_llm_card.model_url')}</span>\n              {selectedModel.model}\n            </div>\n            {selectedModel.model_lib ? (\n              <div className=\"mt-2 text-sm text-muted-foreground center flex\">\n                <span className=\"font-bold mr-2\">{t('add_llm_card.model_lib_url')}</span>\n                {selectedModel.model_lib}\n              </div>\n            ) : undefined}\n            {selectedModel.overrides && Object.keys(selectedModel.overrides)?.length ? (\n              <div className=\"mt-2 text-sm text-muted-foreground center flex\">\n                <span className=\"font-bold mr-2\">{t('add_llm_card.metadata')}</span>\n                {JSON.stringify(selectedModel.overrides)}\n              </div>\n            ) : undefined}\n          </div>\n        ) : null}\n        {encryptedFields}\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={creatingLLM || loading}\n          disabled={!input?.length}\n          onClick={hanldeSubmit}\n          className=\"w-full\"\n        >\n          {hasCache ? t('add_llm_card.button_add') : t('add_llm_card.button_download_and_add')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default CreateLLMCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  PromptTypeEnum,\n  Thread,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreatePrompt = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createPrompt = useCallback(\n    async (\n      source: Node,\n      options: {\n        content: string\n        prefix?: string\n        type?: `${PromptTypeEnum}`\n        role?: `${MessageRoleEnum}`\n        thread?: Thread\n      },\n    ) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const prompt = await getRepository('Prompt').save({\n          content: options.content,\n          prefix: options.prefix,\n          role: options.role || MessageRoleEnum.System,\n          status: MessageStatusEnum.Started,\n          session_id: sessionId,\n          type: options.type || PromptTypeEnum.Chat,\n        })\n        if (!prompt) {\n          throw new Error('Failed to save prompt')\n        }\n        const promptNode = await createOrUpdateFlowNode({\n          source_id: prompt.id,\n          source_type: 'Prompt',\n          node_type: FlowNodeTypeEnum.Prompt,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!promptNode) {\n          throw new Error('Failed to save prompt node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createPrompt,\n  }\n}\n","import { MessageRoleEnum, PromptTypeEnum } from 'src/services/database/types'\n\nexport const PROMPT_TYPES = {\n  [PromptTypeEnum.Chat]: {\n    label: 'add_prompt_card.prompt_types.chat',\n    value: PromptTypeEnum.Chat,\n  },\n  [PromptTypeEnum.FewShotExample]: {\n    label: 'add_prompt_card.prompt_types.few_shot_example',\n    value: PromptTypeEnum.FewShotExample,\n  },\n}\nexport const PROMPT_ROLES = {\n  [MessageRoleEnum.System]: {\n    label: 'add_prompt_card.prompt_roles.system',\n    value: MessageRoleEnum.System,\n  },\n  [MessageRoleEnum.Human]: {\n    label: 'add_prompt_card.prompt_roles.human',\n    value: MessageRoleEnum.Human,\n  },\n  [MessageRoleEnum.AI]: { label: 'add_prompt_card.prompt_roles.ai', value: MessageRoleEnum.AI },\n}\n","import { memo, useCallback, useState } from 'react'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { MessageRoleEnum, Prompt, PromptTypeEnum } from 'src/services/database/types'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { PROMPT_ROLES, PROMPT_TYPES } from './constants'\n\nconst PromptForm = memo(\n  ({\n    defaultPromptContent,\n    defaultPromptRole,\n    defaultPromptType,\n    hidePromptRole,\n    hidePromptType,\n    loading,\n    onSubmit,\n  }: {\n    onSubmit: (prompt: Partial<Prompt>) => Promise<unknown>\n    loading?: boolean\n    defaultPromptType?: `${PromptTypeEnum}`\n    defaultPromptRole?: `${MessageRoleEnum}`\n    defaultPromptContent?: string\n    hidePromptType?: boolean\n    hidePromptRole?: boolean\n  }) => {\n    const [input, setInput] = useState(defaultPromptContent || '')\n    const [promptType, setPromptType] = useState<`${PromptTypeEnum}`>(\n      defaultPromptType || PromptTypeEnum.Chat,\n    )\n    const [promptRole, setPromptRole] = useState<`${MessageRoleEnum}` | undefined>(\n      defaultPromptRole,\n    )\n    const [promptPrefix, setPromptPrefix] = useState('')\n\n    const { t } = useTranslation('components')\n\n    const handleOnchange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setInput(e.target.value)\n    }, [])\n\n    const handleOnchangePrefix = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setPromptPrefix(e.target.value)\n    }, [])\n\n    const handleOnSelectType = useCallback((value: `${PromptTypeEnum}`) => {\n      if (value === PromptTypeEnum.FewShotExample) {\n        setInput('Question: {input}\\nAnswer: {output}')\n      }\n      setPromptType(value)\n    }, [])\n\n    const handleOnSelectRole = useCallback((value: `${MessageRoleEnum}`) => {\n      setPromptRole(value)\n    }, [])\n\n    const handleSubmit = async () => {\n      const result = await onSubmit({\n        content: input,\n        role: promptRole,\n        prefix: promptPrefix,\n        type: promptType,\n      })\n      if (!result) {\n        return\n      }\n      setInput('')\n      setPromptRole(undefined)\n      setPromptType('chat')\n      setPromptPrefix('')\n    }\n\n    return (\n      <div>\n        <div className=\"grid w-full gap-1.5\">\n          {!hidePromptType ? (\n            <>\n              <Label>{t('add_prompt_card.prompt_type')}</Label>\n              <Select value={promptType} onValueChange={handleOnSelectType}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue placeholder={t('add_prompt_card.type_select_placeholder')} />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(PROMPT_TYPES).map((item) => {\n                    return (\n                      <SelectItem key={item.value} value={item.value}>\n                        {t(item.label)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {!hidePromptRole ? (\n            <>\n              <Label>{t('add_prompt_card.prompt_role')}</Label>\n              <Select value={promptRole} onValueChange={handleOnSelectRole}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue placeholder={t('add_prompt_card.role_select_placeholder')} />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(PROMPT_ROLES).map((item) => {\n                    return (\n                      <SelectItem key={item.value} value={item.value}>\n                        {t(item.label)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {promptType === PromptTypeEnum.FewShotExample && (\n            <>\n              <Label>{t('add_prompt_card.prompt_prefix')}</Label>\n              <Textarea\n                value={promptPrefix}\n                onChange={handleOnchangePrefix}\n                disabled={false}\n                className=\"h-20\"\n                placeholder={t('add_prompt_card.placeholder')}\n                id=\"message\"\n              />\n              <Label>{t('add_prompt_card.prompt_content')}</Label>\n              <div className=\"w-full border-0 text-gray-700 flex text-sm justify-end items-center\">\n                <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n                {t('add_prompt_card.few_shot_example_note')}\n              </div>\n            </>\n          )}\n          <Textarea\n            value={input}\n            onChange={handleOnchange}\n            disabled={false}\n            placeholder={t('add_prompt_card.placeholder')}\n            id=\"message\"\n          />\n        </div>\n        <div>\n          <LoadingButton\n            loading={loading}\n            disabled={!input?.length}\n            onClick={handleSubmit}\n            className=\"w-full mt-4\"\n          >\n            {t('add_prompt_card.button')}\n          </LoadingButton>\n        </div>\n      </div>\n    )\n  },\n)\n\nexport default PromptForm\n","import { memo } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Prompt, Thread } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { useCreatePrompt } from 'src/hooks/flows/mutations/use-create-prompt'\n\nimport PromptForm from './PromptForm'\n\nconst CreatePromptCard = memo(\n  (\n    props: Omit<NodeProps, 'data'> & {\n      data?: { ready?: boolean }\n      thread?: Thread\n      setDialog?: (value: boolean) => void\n    },\n  ) => {\n    const { id, thread, setDialog } = props\n\n    const { t } = useTranslation('components')\n    const { toast } = useToast()\n    const node = useInternalNode(id)\n    const { createPrompt, loading } = useCreatePrompt()\n\n    const handleSubmit = async (data: Partial<Prompt>) => {\n      if (node) {\n        try {\n          if (!data?.content) {\n            throw new Error('Prompt data is missing')\n          }\n          await createPrompt(node, {\n            ...data,\n            content: data.content,\n            thread,\n          })\n          setDialog?.(false)\n        } catch (error) {\n          toast({\n            variant: 'destructive',\n            title: `${error}`,\n          })\n        }\n      }\n    }\n\n    return (\n      <Card className=\"mw-full\">\n        <CardHeader>\n          <CardTitle>{t('add_prompt_card.title')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <PromptForm\n            onSubmit={handleSubmit}\n            loading={loading}\n            defaultPromptRole=\"system\"\n            defaultPromptType=\"chat\"\n          />\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default CreatePromptCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { SchemaItemType } from 'src/components/molecules/CreateSchemaCard/Field/type'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, SchemaItem } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { EntityType } from 'src/utils/orm-type'\nimport { generateUUID } from 'src/utils/uuid'\n\nexport const useCreateSchema = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const toSchemaItem = useCallback(\n    (\n      schemaId: string,\n      input: SchemaItemType[],\n      result: EntityType<SchemaItem>[],\n      parent?: string,\n    ) => {\n      if (!sessionId) {\n        return\n      }\n      for (const item of input) {\n        if (item.data?.length) {\n          toSchemaItem(schemaId, item.data, result, item.id)\n        } else {\n          result.push({\n            name: item.name,\n            type: item.type,\n            enum: item.enum ? JSON.stringify(item.enum) : '',\n            required: item.required,\n            description: item.description,\n            id: item.id || generateUUID(),\n            parent_id: parent,\n            schema_id: schemaId,\n            session_id: sessionId,\n          })\n        }\n      }\n      return result\n    },\n    [sessionId],\n  )\n\n  const createSchema = useCallback(\n    async (source: Node, input: SchemaItemType[]) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const schema = await getRepository('Schema').save({\n          name: 'Untitled Schema',\n          session_id: sessionId,\n        })\n        if (!schema) {\n          throw new Error('Failed to save schema')\n        }\n\n        const schemaItems = toSchemaItem(schema.id, input, [], undefined)\n        if (!schemaItems?.length) {\n          throw new Error('Failed to convert schema items')\n        }\n        await getRepository('SchemaItem').save(schemaItems)\n        const promptNode = await createOrUpdateFlowNode({\n          source_id: schema.id,\n          source_type: 'Schema',\n          node_type: FlowNodeTypeEnum.Schema,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!promptNode) {\n          throw new Error('Failed to save schema node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, toSchemaItem, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createSchema,\n  }\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Checkbox } from 'src/lib/shadcn/ui/checkbox'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport FieldList from './FieldList'\nimport { SchemaItemType } from './type'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { generateUUID } from 'src/utils/uuid'\n\nconst NewOrUpdateField = memo(\n  ({\n    setData,\n    data,\n    id,\n  }: {\n    id?: string\n    setData: (func: (data: SchemaItemType[]) => SchemaItemType[]) => void\n    data: SchemaItemType[]\n  }) => {\n    const { t } = useTranslation('components')\n    const [empty, setEmpty] = useState<SchemaItemType>({\n      name: '',\n      description: '',\n      type: 'string',\n      required: false,\n      data: [],\n    })\n\n    const currentRow = useMemo(() => {\n      return id ? data.find((item) => item.id === id) || empty : empty\n    }, [data, empty, id])\n\n    const handleChangeName = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value && !/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(e.target.value)) {\n          return\n        }\n        if (!id) {\n          setEmpty((item) => ({ ...item, name: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      name: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeDescription = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, description: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      description: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeType = useCallback(\n      (e: string) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, type: (e || 'string') as SchemaItemType['type'] }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      type: (e || '') as SchemaItemType['type'],\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeRequired = useCallback(\n      (e: string | boolean) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, required: !!e || false }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      required: !!e || false,\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeEnum = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, enum: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      enum: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleAddNew = useCallback(() => {\n      if (data.find((item) => item.name === empty.name)) {\n        return toast({\n          variant: 'destructive',\n          content: 'Name already exists',\n        })\n      }\n      empty.id = generateUUID()\n      setData((items) => {\n        return [...items, { ...empty }]\n      })\n      setEmpty({\n        name: '',\n        description: '',\n        type: 'string',\n        required: false,\n        id: generateUUID(),\n        parent: id || undefined,\n        data: [],\n      })\n    }, [data, empty, setData, id])\n\n    const handleSetChildData = useCallback(\n      (func: (previous: SchemaItemType[]) => SchemaItemType[]) => {\n        setData((previousData) => {\n          return [\n            ...previousData.map((item) =>\n              item.id === id\n                ? {\n                    ...item,\n                    data: func(item.data || []),\n                  }\n                : item,\n            ),\n          ]\n        })\n      },\n      [id, setData],\n    )\n\n    const shouldShowChildData = ['object', 'array'].includes(currentRow.type)\n\n    return (\n      <div className=\"w-full p-1\">\n        <div>\n          <Label>{t('add_schema_card.field.name')}</Label>\n          <Input\n            id=\"name\"\n            onChange={handleChangeName}\n            placeholder={t('add_schema_card.field.name_placeholder')}\n            value={currentRow?.name || ''}\n          />\n        </div>\n        <div>\n          <Label>{t('add_schema_card.field.description')}</Label>\n          <Input\n            id=\"description\"\n            placeholder={t('add_schema_card.field.description_placeholder')}\n            onChange={handleChangeDescription}\n            value={currentRow?.description || ''}\n          />\n        </div>\n        <div>\n          <Label>{t('add_schema_card.field.type')}</Label>\n          <Select onValueChange={handleChangeType} value={currentRow?.type || ''}>\n            <SelectTrigger>\n              <SelectValue placeholder={t('add_schema_card.field.type_placeholder')} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"string\">{t('add_schema_card.types.string')}</SelectItem>\n              <SelectItem value=\"boolean\">{t('add_schema_card.types.boolean')}</SelectItem>\n              <SelectItem value=\"number\">{t('add_schema_card.types.number')}</SelectItem>\n              <SelectItem value=\"object\">{t('add_schema_card.types.object')}</SelectItem>\n              <SelectItem value=\"array\">{t('add_schema_card.types.array')}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex items-center h-10\">\n          <Label>{t('add_schema_card.field.required')}</Label>\n          <Checkbox\n            className=\"ml-2\"\n            aria-label=\"Select row\"\n            onCheckedChange={handleChangeRequired}\n            checked={currentRow?.required}\n          />\n        </div>\n        {shouldShowChildData ? (\n          <div className=\"mt-2 flex flex-col gap-2\">\n            <Label>{t('add_schema_card.children')}</Label>\n            <FieldList data={currentRow?.data || []} setData={handleSetChildData} />\n          </div>\n        ) : null}\n        {currentRow?.type === 'enum' ? (\n          <div className=\"mt-2 flex flex-col gap-2\">\n            <Label>{t('add_schema_card.field.enum')}</Label>\n            <Input id=\"enum\" onChange={handleChangeEnum} placeholder=\"Enum\" />\n          </div>\n        ) : null}\n        {!id ? (\n          <div className=\"w-full flex justify-end mt-2\">\n            <Button\n              variant=\"secondary\"\n              disabled={!currentRow.name || !currentRow.description || !currentRow.type}\n              onClick={handleAddNew}\n              className=\"w-full\"\n            >\n              {t('add_schema_card.field.add_field')}\n            </Button>\n          </div>\n        ) : null}\n      </div>\n    )\n  },\n)\n\nexport default NewOrUpdateField\n","// import { z } from 'zod'\nimport { memo } from 'react'\nimport { SchemaItemType } from './type'\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from 'src/lib/shadcn/ui/accordion'\nimport { Card } from 'src/lib/shadcn/ui/card'\nimport NewOrUpdateField from './NewOrUpdateField'\n\nconst FieldList = memo(\n  ({\n    data,\n    setData,\n  }: {\n    data: SchemaItemType[]\n    setData: (func: (data: SchemaItemType[]) => SchemaItemType[]) => void\n  }) => {\n    return (\n      <Accordion type=\"single\" collapsible>\n        {data.map((row) => {\n          return (\n            <AccordionItem key={row.id || 'new'} value={`${row.id}`}>\n              <AccordionTrigger>{row.name}</AccordionTrigger>\n              <AccordionContent>\n                <NewOrUpdateField setData={setData} data={data} id={row.id} />\n              </AccordionContent>\n            </AccordionItem>\n          )\n        })}\n        <Card className=\"p-2 mt-4\">\n          <NewOrUpdateField setData={setData} data={data} />\n        </Card>\n      </Accordion>\n    )\n  },\n)\n\nexport default FieldList\n","import { memo, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport { useCreateSchema } from 'src/hooks/flows/mutations/use-create-schema'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { SchemaItemType } from './Field/type'\nimport FieldList from './Field/FieldList'\n\nconst CreateSchemaCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { id } = props\n  const node = useInternalNode(id)\n\n  const [data, setData] = useState<SchemaItemType[]>([])\n\n  const { createSchema, loading } = useCreateSchema()\n\n  const handleSubmit = async () => {\n    if (node && data?.length) {\n      try {\n        await createSchema(node, data)\n        setData([])\n      } catch (error) {\n        toast({\n          variant: 'destructive',\n          title: `${error}`,\n        })\n      }\n    }\n  }\n  return (\n    <Card className=\"max-w-lg\">\n      <CardHeader>\n        <CardTitle>{t('add_schema_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"min-w-96\">\n        <FieldList setData={setData} data={data} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleSubmit}\n          className=\"w-full\"\n        >\n          {t('add_schema_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateSchemaCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { encodeCSVData } from 'src/utils/string-data'\n\nexport const useCreateCSVData = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createCSVData = useCallback(\n    async (source: Node, headers: string[], data: string[][]) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const encodedData = encodeCSVData(headers, data)\n        const csvData = await getRepository('CSVData').save({\n          headers: encodedData.headers,\n          csv: encodedData.data,\n          session_id: sessionId,\n        })\n        if (!csvData) {\n          throw new Error('Failed to save')\n        }\n        const dataNode = await createOrUpdateFlowNode({\n          source_id: csvData.id,\n          source_type: 'CSVData',\n          node_type: FlowNodeTypeEnum.CSVData,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!dataNode) {\n          throw new Error('Failed to save node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createCSVData,\n  }\n}\n","import { useTranslation } from 'react-i18next'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'src/lib/shadcn/ui/table'\n\nexport function ExampleTable({ data }: { data: { input: string; output: string }[] }) {\n  const { t } = useTranslation('components')\n  return (\n    <Table className=\"w-full\">\n      <TableHeader>\n        <TableRow>\n          <TableHead>{t('add_few_shot_example_card.input')}</TableHead>\n          <TableHead>{t('add_few_shot_example_card.output')}</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {data?.map((item, index) => (\n          <TableRow key={`${item.input}_${item.output}_${index}`}>\n            <TableCell className=\"p-4\">{item.input}</TableCell>\n            <TableCell className=\"p-4\">{item.output}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useCreateCSVData } from 'src/hooks/flows/mutations/use-create-csv-data'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { ExampleTable } from './ExampleTable'\n\nconst CreateFewShotExampleCard = memo((props: NodeProps) => {\n  const { id } = props\n  const { t } = useTranslation('components')\n  const [data, setData] = useState<{ input: string; output: string }[]>([])\n  const [input, setInput] = useState('')\n  const [output, setOutput] = useState('')\n  const node = useInternalNode(id)\n  const { createCSVData, loading } = useCreateCSVData()\n\n  const handleAdd = () => {\n    setData((prevData) => [...prevData, { input, output }])\n    setInput('')\n    setOutput('')\n  }\n  const handleCreateCSVData = async () => {\n    if (node) {\n      await createCSVData(\n        node,\n        ['input', 'output'],\n        data.map((item) => [item.input, item.output]),\n      )\n    }\n  }\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_few_shot_example_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5\">\n          <Label htmlFor=\"name\">{t('add_few_shot_example_card.input')}</Label>\n          <Input\n            value={input}\n            onChange={(e) => setInput(e.target.value || '')}\n            id=\"name\"\n            placeholder={t('add_few_shot_example_card.input_placeholder')}\n          />\n        </div>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_few_shot_example_card.output')}</Label>\n          <Textarea\n            value={output}\n            onChange={(e) => setOutput(e.target.value || '')}\n            placeholder={t('add_few_shot_example_card.output_placeholder')}\n          />\n        </div>\n        <div className=\"w-full flex mt-4 justify-end\">\n          <Button disabled={!input || !output} onClick={handleAdd} className=\"w-40\">\n            {t('add_few_shot_example_card.add')}\n          </Button>\n        </div>\n        <ExampleTable data={data || []} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleCreateCSVData}\n          className=\"w-full\"\n        >\n          {t('add_few_shot_example_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateFewShotExampleCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, ToolDefinition } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateTool = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createTool = useCallback(\n    async (\n      source: Node,\n      data: Partial<ToolDefinition>,\n      options?: {\n        schemaNode?: Node\n      },\n    ) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        if (!data.name || !data.description) {\n          throw new Error('Name is required')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const tool = await getRepository('ToolDefinition').save({\n          ...data,\n          name: `${data.name}`,\n          description: `${data.description}`,\n          session_id: sessionId,\n        })\n        if (!tool) {\n          throw new Error('Failed create tool.')\n        }\n        const toolNode = await createOrUpdateFlowNode({\n          source_id: tool.id,\n          source_type: 'ToolDefinition',\n          node_type: FlowNodeTypeEnum.ToolDefinition,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!toolNode) {\n          throw new Error('Failed to save node')\n        }\n        if (options?.schemaNode) {\n          await createOrUpdateFlowEdge({\n            source: options.schemaNode.id,\n            target: toolNode.id,\n          })\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createTool,\n  }\n}\n","import { memo, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { useCreateTool } from 'src/hooks/flows/mutations/use-create-tool'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { logWarn } from 'src/utils/logger'\n\nconst CreateToolCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { toast } = useToast()\n  const { id } = props\n  const node = useInternalNode(id)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  const { createTool, loading } = useCreateTool()\n\n  const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n\n  const handleChangeDescription = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setDescription(e.target.value)\n  }\n\n  const handleSubmit = async () => {\n    if (node && name && description) {\n      try {\n        await createTool(node, { name, description })\n        setName('')\n        setDescription('')\n      } catch (error) {\n        logWarn('Create Tool', error)\n        toast({\n          variant: 'destructive',\n          title: t('add_tool_card.errors.create_tool_failed'),\n        })\n      }\n    }\n  }\n\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_tool_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5\">\n          <Label htmlFor=\"name\">{t('add_tool_card.tool_name')}</Label>\n          <Input\n            onChange={handleChangeName}\n            id=\"name\"\n            placeholder={t('add_tool_card.name_placeholder')}\n          />\n        </div>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_tool_card.tool_description')}</Label>\n          <Textarea\n            onChange={handleChangeDescription}\n            placeholder={t('add_tool_card.description_placeholder')}\n          />\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton loading={loading} onClick={handleSubmit} className=\"w-full\">\n          {t('add_tool_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateToolCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  VectorDatabase,\n  VectorDatabaseProviderEnum,\n  VectorDatabaseStorageEnum,\n  VectorDatabaseTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { encodeSplitter } from 'src/utils/string-data'\n\nexport const useCreateVectorDatabase = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createVectorDatabase = useCallback(\n    async (\n      source: Node,\n      data: Partial<VectorDatabase>,\n      textSplitter?: {\n        type: string\n        chunkSize: number\n        chunkOverlap: number\n      },\n    ) => {\n      try {\n        if (!data?.name || !source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const vectorDatabase = await getRepository('VectorDatabase').save({\n          ...data,\n          name: `${data.name}`,\n          type: data.type || VectorDatabaseTypeEnum.Local,\n          storage: data.storage || VectorDatabaseStorageEnum.DatabaseNode,\n          raw: '',\n          provider: data.provider || VectorDatabaseProviderEnum.Memory,\n          session_id: sessionId,\n          metadata: textSplitter ? JSON.stringify({ textSplitter }) : undefined,\n        })\n\n        if (!vectorDatabase) {\n          throw new Error('Failed to save vectorDatabase')\n        }\n\n        const vectorDatabaseNode = await createOrUpdateFlowNode({\n          source_id: vectorDatabase.id,\n          source_type: 'VectorDatabase',\n          node_type: FlowNodeTypeEnum.VectorDatabase,\n          x: initialX,\n          y: initialY + 30,\n        })\n        if (!vectorDatabaseNode) {\n          throw new Error('Failed to save vectorDatabase node')\n        }\n\n        if (data.storage === VectorDatabaseStorageEnum.DataNode) {\n          // Default JSONLData source\n          const databaseSource = await getRepository('JSONLData').save({\n            headers: encodeSplitter(['content', 'embedding', 'metadata']),\n            jsonl: '',\n            session_id: sessionId,\n          })\n          if (!databaseSource) {\n            throw new Error('Failed to save databaseSource')\n          }\n          const databaseSourceNode = await createOrUpdateFlowNode({\n            source_id: databaseSource.id,\n            source_type: 'JSONLData',\n            node_type: FlowNodeTypeEnum.JSONLData,\n            x: initialX + 80,\n            y: initialY + 30,\n          })\n          if (!databaseSourceNode) {\n            throw new Error('Failed to save databaseSource node')\n          }\n\n          await createOrUpdateFlowEdge({\n            source: databaseSourceNode.id,\n            target: vectorDatabaseNode.id,\n          })\n        }\n\n        return {\n          vectorDatabase,\n          vectorDatabaseNode,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createVectorDatabase,\n  }\n}\n","import { VectorDatabaseProviderEnum, VectorDatabaseStorageEnum } from 'src/services/database/types'\n\nexport const SUPPORTED_VECTOR_DATABASE_PROVIDERS = [VectorDatabaseProviderEnum.Memory]\n\nexport const SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE = [VectorDatabaseStorageEnum.DatabaseNode]\n\nexport const SUPPORTED_TEXT_SPLITTERS = [\n  'TokenTextSplitter',\n  'CharacterTextSplitter',\n  'RecursiveCharacterTextSplitter',\n]\n","import { memo, useCallback, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { VectorDatabaseProviderEnum, VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useCreateVectorDatabase } from 'src/hooks/flows/mutations/use-create-vector-database'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport {\n  SUPPORTED_TEXT_SPLITTERS,\n  SUPPORTED_VECTOR_DATABASE_PROVIDERS,\n  SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE,\n} from './constants'\n\nconst CreateVectorDatabaseCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { id } = props\n  const node = useInternalNode(id)\n  const { toast } = useToast()\n  const [name, setName] = useState('')\n  const [provider, setProvider] = useState<`${VectorDatabaseProviderEnum}`>(\n    SUPPORTED_VECTOR_DATABASE_PROVIDERS[0],\n  )\n  const [storageType, setStorageType] = useState<`${VectorDatabaseStorageEnum}`>(\n    SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE[0],\n  )\n  const [textSplitter, setTextSplitter] = useState<{\n    type?: string\n    chunkSize?: number\n    chunkOverlap?: number\n  }>({})\n  const { loading, createVectorDatabase } = useCreateVectorDatabase()\n\n  const handleOnSelectProvider = useCallback((value: `${VectorDatabaseProviderEnum}`) => {\n    setProvider(value)\n  }, [])\n\n  const handleOnSelectStorageType = useCallback((value: `${VectorDatabaseStorageEnum}`) => {\n    setStorageType(value)\n  }, [])\n\n  const handleOnSelectTextSplitter = useCallback((value: string) => {\n    setTextSplitter((prev) => ({ ...prev, type: value, chunkSize: 500, chunkOverlap: 40 }))\n  }, [])\n\n  const handleOnChangeName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value || '')\n  }, [])\n\n  const handleOnChangeChunkSize = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextSplitter((prev) => ({ ...prev, chunkSize: Number(e.target.value) }))\n  }, [])\n\n  const handleOnChangeChunkOverlap = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextSplitter((prev) => ({ ...prev, chunkOverlap: Number(e.target.value) }))\n  }, [])\n\n  const handleSubmit = async () => {\n    try {\n      if (!node) {\n        return\n      }\n      await createVectorDatabase(\n        node,\n        {\n          name,\n          provider,\n          storage: storageType,\n        },\n        textSplitter?.type\n          ? {\n              type: textSplitter.type,\n              chunkSize: textSplitter.chunkSize || 500,\n              chunkOverlap: textSplitter.chunkOverlap || 0,\n            }\n          : undefined,\n      )\n      setName('')\n      setTextSplitter({})\n    } catch {\n      toast({\n        variant: 'destructive',\n        description: t('create_vector_database_card.errors.create_failed'),\n      })\n    }\n  }\n\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('create_vector_database_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid w-full gap-1.5\">\n          <Label>{t('create_vector_database_card.name')}</Label>\n          <Input className=\"mb-4\" value={name} onChange={handleOnChangeName} />\n          {SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE?.length > 1 ? (\n            <>\n              <Label>{t('create_vector_database_card.storage_type')}</Label>\n              <Select value={storageType} onValueChange={handleOnSelectStorageType}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue\n                    placeholder={t('create_vector_database_card.provider_select_placeholder')}\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE).map((item) => {\n                    return (\n                      <SelectItem key={item} value={item}>\n                        {t(`create_vector_database_card.storage_types.${item.toLowerCase()}`)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {SUPPORTED_VECTOR_DATABASE_PROVIDERS?.length > 1 ? (\n            <>\n              <Label>{t('create_vector_database_card.provider')}</Label>\n              <Select value={provider} onValueChange={handleOnSelectProvider}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue\n                    placeholder={t('create_vector_database_card.provider_select_placeholder')}\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(SUPPORTED_VECTOR_DATABASE_PROVIDERS).map((item) => {\n                    return (\n                      <SelectItem key={item} value={item}>\n                        {t(`create_vector_database_card.providers.${item.toLowerCase()}`)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          <Label>{t('create_vector_database_card.text_splitter')}</Label>\n          <Select value={textSplitter.type} onValueChange={handleOnSelectTextSplitter}>\n            <SelectTrigger className=\"w-full mb-4\">\n              <SelectValue\n                placeholder={t('create_vector_database_card.text_splitter_select_placeholder')}\n              />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.values(SUPPORTED_TEXT_SPLITTERS).map((item) => {\n                return (\n                  <SelectItem key={item} value={item}>\n                    {t(`create_vector_database_card.text_splitters.${item.toLowerCase()}`)}\n                  </SelectItem>\n                )\n              })}\n            </SelectContent>\n          </Select>\n          {textSplitter.type ? (\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {t('create_vector_database_card.text_splitter_configuration')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Label>{t('create_vector_database_card.text_splitter_chunksize')}</Label>\n                <Input\n                  value={textSplitter.chunkSize}\n                  onChange={handleOnChangeChunkSize}\n                  placeholder={t('create_vector_database_card.text_splitter_chunksize_placeholder')}\n                />\n                <Label>{t('create_vector_database_card.text_splitter_chunkoverlap')}</Label>\n                <Input\n                  value={textSplitter.chunkOverlap}\n                  onChange={handleOnChangeChunkOverlap}\n                  placeholder={t(\n                    'create_vector_database_card.text_splitter_chunkoverlap_placeholder',\n                  )}\n                />\n              </CardContent>\n            </Card>\n          ) : undefined}\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          disabled={!textSplitter.type || !name}\n          loading={loading}\n          onClick={handleSubmit}\n          className=\"w-full\"\n        >\n          {t('create_vector_database_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateVectorDatabaseCard\n","import { useTranslation } from 'react-i18next'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'src/lib/shadcn/ui/table'\n\nexport function DataTable({ data }: { data: { text: string }[] }) {\n  const { t } = useTranslation('components')\n  return (\n    <Table className=\"w-full\">\n      <TableHeader>\n        <TableRow>\n          <TableHead>{t('add_text_data.text')}</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {data?.map((item, index) => (\n          <TableRow key={`${item.text}_${index}`}>\n            <TableCell className=\"p-4\">{item.text}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useCreateCSVData } from 'src/hooks/flows/mutations/use-create-csv-data'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { DataTable } from './DataTable'\n\nconst CreateTextDataCard = memo((props: NodeProps) => {\n  const { id } = props\n  const { t } = useTranslation('components')\n  const [data, setData] = useState<{ text: string }[]>([])\n  const [text, setText] = useState('')\n  const node = useInternalNode(id)\n  const { createCSVData, loading } = useCreateCSVData()\n\n  const handleAdd = () => {\n    setData((prevData) => [...prevData, { text }])\n    setText('')\n  }\n  const handleCreateCSVData = async () => {\n    if (node) {\n      await createCSVData(\n        node,\n        ['text'],\n        data.map((item) => [item.text]),\n      )\n    }\n  }\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_text_data.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_text_data.text')}</Label>\n          <Textarea\n            value={text}\n            onChange={(e) => setText(e.target.value || '')}\n            placeholder={t('add_text_data.text_placeholder')}\n          />\n        </div>\n        <div className=\"w-full flex mt-4 justify-end\">\n          <Button disabled={!text} onClick={handleAdd} className=\"w-40\">\n            {t('add_text_data.add')}\n          </Button>\n        </div>\n        <DataTable data={data || []} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleCreateCSVData}\n          className=\"w-full\"\n        >\n          {t('add_text_data.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateTextDataCard\n","export enum SupportedAddNodeEnum {\n  ADD_LLM = 'ADD_LLM',\n  ADD_PROMPT = 'ADD_PROMPT',\n  ADD_TOOL_DEFINITION = 'ADD_TOOL_DEFINITION',\n  ADD_SCHEMA = 'ADD_SCHEMA',\n  ADD_FEW_SHOT_EXAMPLE = 'ADD_FEW_SHOT_EXAMPLE',\n  ADD_VECTOR_DATABASE = 'ADD_VECTOR_DATABASE',\n  ADD_TEXT_DATA = 'ADD_TEXT_DATA',\n}\nexport const SUPPORTED_MODES = [\n  SupportedAddNodeEnum.ADD_LLM,\n  SupportedAddNodeEnum.ADD_PROMPT,\n  SupportedAddNodeEnum.ADD_SCHEMA,\n  SupportedAddNodeEnum.ADD_VECTOR_DATABASE,\n  {\n    key: 'more',\n    label: 'more',\n    icon: 'ellipsis' as const,\n    children: [SupportedAddNodeEnum.ADD_TOOL_DEFINITION, SupportedAddNodeEnum.ADD_FEW_SHOT_EXAMPLE],\n  },\n]\n","import React, { ReactNode, useEffect, useRef } from 'react'\n\nexport interface BaseParticle {\n  element: HTMLElement | SVGSVGElement\n  left: number\n  size: number\n  top: number\n}\n\nexport interface BaseParticleOptions {\n  particle?: string\n  size?: number\n}\n\nexport interface CoolParticle extends BaseParticle {\n  direction: number\n  speedHorz: number\n  speedUp: number\n  spinSpeed: number\n  spinVal: number\n}\n\nexport interface CoolParticleOptions extends BaseParticleOptions {\n  particleCount?: number\n  speedHorz?: number\n  speedUp?: number\n}\n\nconst getContainer = () => {\n  const id = '_coolMode_effect'\n  const existingContainer = document.getElementById(id)\n\n  if (existingContainer) {\n    return existingContainer\n  }\n\n  const container = document.createElement('div')\n  container.setAttribute('id', id)\n  container.setAttribute(\n    'style',\n    'overflow:hidden; position:fixed; height:100%; top:0; left:0; right:0; bottom:0; pointer-events:none; z-index:2147483647',\n  )\n\n  document.body.appendChild(container)\n\n  return container\n}\n\nlet instanceCounter = 0\n\nconst applyParticleEffect = (element: HTMLElement, options?: CoolParticleOptions): (() => void) => {\n  instanceCounter++\n\n  const defaultParticle = 'circle'\n  const particleType = options?.particle || defaultParticle\n  const sizes = [15, 20, 25, 35, 45]\n  const limit = 45\n\n  let particles: CoolParticle[] = []\n  let autoAddParticle = false\n  let mouseX = 0\n  let mouseY = 0\n\n  const container = getContainer()\n\n  function generateParticle() {\n    const size = options?.size || sizes[Math.floor(Math.random() * sizes.length)]\n    const speedHorz = options?.speedHorz || Math.random() * 10\n    const speedUp = options?.speedUp || Math.random() * 25\n    const spinVal = Math.random() * 360\n    const spinSpeed = Math.random() * 35 * (Math.random() <= 0.5 ? -1 : 1)\n    const top = mouseY - size / 2\n    const left = mouseX - size / 2\n    const direction = Math.random() <= 0.5 ? -1 : 1\n\n    const particle = document.createElement('div')\n\n    if (particleType === 'circle') {\n      const svgNS = 'http://www.w3.org/2000/svg'\n      const circleSVG = document.createElementNS(svgNS, 'svg')\n      const circle = document.createElementNS(svgNS, 'circle')\n      circle.setAttributeNS(null, 'cx', (size / 2).toString())\n      circle.setAttributeNS(null, 'cy', (size / 2).toString())\n      circle.setAttributeNS(null, 'r', (size / 2).toString())\n      circle.setAttributeNS(null, 'fill', `hsl(${Math.random() * 360}, 70%, 50%)`)\n\n      circleSVG.appendChild(circle)\n      circleSVG.setAttribute('width', size.toString())\n      circleSVG.setAttribute('height', size.toString())\n\n      particle.appendChild(circleSVG)\n    } else {\n      particle.innerHTML = `<img src=\"${particleType}\" width=\"${size}\" height=\"${size}\" style=\"border-radius: 50%\">`\n    }\n\n    particle.style.position = 'absolute'\n    particle.style.transform = `translate3d(${left}px, ${top}px, 0px) rotate(${spinVal}deg)`\n\n    container.appendChild(particle)\n\n    particles.push({\n      direction,\n      element: particle,\n      left,\n      size,\n      speedHorz,\n      speedUp,\n      spinSpeed,\n      spinVal,\n      top,\n    })\n  }\n\n  function refreshParticles() {\n    particles.forEach((p) => {\n      p.left = p.left - p.speedHorz * p.direction\n      p.top = p.top - p.speedUp\n      p.speedUp = Math.min(p.size, p.speedUp - 1)\n      p.spinVal = p.spinVal + p.spinSpeed\n\n      if (p.top >= Math.max(window.innerHeight, document.body.clientHeight) + p.size) {\n        particles = particles.filter((o) => o !== p)\n        p.element.remove()\n      }\n\n      p.element.setAttribute(\n        'style',\n        [\n          'position:absolute',\n          'will-change:transform',\n          `top:${p.top}px`,\n          `left:${p.left}px`,\n          `transform:rotate(${p.spinVal}deg)`,\n        ].join(';'),\n      )\n    })\n  }\n\n  let animationFrame: number | undefined\n\n  let lastParticleTimestamp = 0\n  const particleGenerationDelay = 30\n\n  function loop() {\n    const currentTime = performance.now()\n    if (\n      autoAddParticle &&\n      particles.length < limit &&\n      currentTime - lastParticleTimestamp > particleGenerationDelay\n    ) {\n      generateParticle()\n      lastParticleTimestamp = currentTime\n    }\n\n    refreshParticles()\n    animationFrame = requestAnimationFrame(loop)\n  }\n\n  loop()\n\n  const isTouchInteraction = 'ontouchstart' in window\n\n  const tap = isTouchInteraction ? 'touchstart' : 'mousedown'\n  const tapEnd = isTouchInteraction ? 'touchend' : 'mouseup'\n  const move = isTouchInteraction ? 'touchmove' : 'mousemove'\n\n  const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n    if ('touches' in e) {\n      mouseX = e.touches?.[0].clientX\n      mouseY = e.touches?.[0].clientY\n    } else {\n      mouseX = e.clientX\n      mouseY = e.clientY\n    }\n  }\n\n  const tapHandler = (e: MouseEvent | TouchEvent) => {\n    updateMousePosition(e)\n    autoAddParticle = true\n  }\n\n  const disableAutoAddParticle = () => {\n    autoAddParticle = false\n  }\n\n  element.addEventListener(move, updateMousePosition, { passive: true })\n  element.addEventListener(tap, tapHandler, { passive: true })\n  element.addEventListener(tapEnd, disableAutoAddParticle, { passive: true })\n  element.addEventListener('mouseleave', disableAutoAddParticle, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener(move, updateMousePosition)\n    element.removeEventListener(tap, tapHandler)\n    element.removeEventListener(tapEnd, disableAutoAddParticle)\n    element.removeEventListener('mouseleave', disableAutoAddParticle)\n\n    const interval = setInterval(() => {\n      if (animationFrame && particles.length === 0) {\n        cancelAnimationFrame(animationFrame)\n        clearInterval(interval)\n\n        if (--instanceCounter === 0) {\n          container.remove()\n        }\n      }\n    }, 500)\n  }\n}\n\ninterface CoolModeProps {\n  children: ReactNode\n  options?: CoolParticleOptions\n}\n\nexport const CoolMode: React.FC<CoolModeProps> = ({ children, options }) => {\n  const ref = useRef<HTMLElement>(null)\n\n  useEffect(() => {\n    if (ref.current) {\n      return applyParticleEffect(ref.current, options)\n    }\n  }, [options])\n\n  return React.cloneElement(children as React.ReactElement, { ref })\n}\n","import { NodeProps } from '@xyflow/react'\nimport { memo, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarTrigger,\n} from 'src/lib/shadcn/ui/menubar'\nimport CreateLLMCard from 'src/components/molecules/CreateLLMCard'\nimport CreatePromptCard from 'src/components/molecules/CreatePromptCard'\nimport CreateSchemaCard from 'src/components/molecules/CreateSchemaCard'\nimport CreateFewShotExampleCard from 'src/components/molecules/CreateFewShotExampleCard'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport CreateToolCard from 'src/components/molecules/CreateToolCard'\nimport CreateVectorDatabaseCard from 'src/components/molecules/CreateVectorDatabaseCard'\nimport Logo from 'src/assets/svgs/logo.svg?react'\nimport CreateTextDataCard from 'src/components/molecules/CreateTextDataCard'\nimport { useAppState } from 'src/states/app'\nimport { cn } from 'src/lib/utils'\n\nimport { SUPPORTED_MODES, SupportedAddNodeEnum } from './constants'\nimport { CoolMode } from 'src/lib/shadcn/ui/cool-mode'\nimport { Button } from 'src/lib/shadcn/ui/button'\n\nexport const ToolbarNode = memo((props: NodeProps) => {\n  const { t } = useTranslation('flows')\n  const theme = useAppState((state) => state.theme)\n  const [mode, setMode] = useState(`${SupportedAddNodeEnum.ADD_LLM}`)\n\n  const menu = useMemo(() => {\n    return (\n      <Menubar>\n        <MenubarMenu>\n          <CoolMode>\n            <Button variant=\"link\" className=\"!p-0 !pl-3\">\n              <Logo\n                width={32}\n                height={32}\n                className={cn(theme === 'dark' ? 'fill-white' : 'fill-black')}\n              />\n            </Button>\n          </CoolMode>\n        </MenubarMenu>\n        {SUPPORTED_MODES.map((mode) => {\n          if (typeof mode === 'object') {\n            return (\n              <MenubarMenu key={mode.key}>\n                <MenubarTrigger>\n                  {mode.icon ? <LazyIcon name={mode.icon} /> : t(`supported_nodes.${mode.label}`)}\n                </MenubarTrigger>\n                <MenubarContent>\n                  {mode.children.map((child) => {\n                    return (\n                      <MenubarItem key={child} onClick={() => setMode(child)}>\n                        {t(`supported_nodes.${child.toLowerCase()}`)}\n                      </MenubarItem>\n                    )\n                  })}\n                </MenubarContent>\n              </MenubarMenu>\n            )\n          }\n          return (\n            <MenubarMenu key={mode}>\n              <MenubarTrigger value={mode} onClick={() => setMode(mode)}>\n                {t(`supported_nodes.${mode.toLowerCase()}`)}\n              </MenubarTrigger>\n            </MenubarMenu>\n          )\n        })}\n      </Menubar>\n    )\n  }, [t, theme])\n\n  const modeToComponent = useMemo(() => {\n    switch (mode) {\n      case SupportedAddNodeEnum.ADD_LLM:\n        return <CreateLLMCard {...props} />\n      case SupportedAddNodeEnum.ADD_PROMPT:\n        return <CreatePromptCard {...props} />\n      case SupportedAddNodeEnum.ADD_SCHEMA:\n        return <CreateSchemaCard {...props} />\n      case SupportedAddNodeEnum.ADD_FEW_SHOT_EXAMPLE:\n        return <CreateFewShotExampleCard {...props} />\n      case SupportedAddNodeEnum.ADD_TOOL_DEFINITION:\n        return <CreateToolCard {...props} />\n      case SupportedAddNodeEnum.ADD_VECTOR_DATABASE:\n        return <CreateVectorDatabaseCard {...props} />\n      case SupportedAddNodeEnum.ADD_TEXT_DATA:\n        return <CreateTextDataCard {...props} />\n    }\n  }, [props, mode])\n  return (\n    <>\n      {menu}\n      <div className=\"mt-4\">{modeToComponent}</div>\n    </>\n  )\n})\n","import { useCallback, useState } from 'react'\nimport { Connection, Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport {\n  AppEntityNames,\n  FlowNodeTypeEnum,\n  flowNodeTypeToEntity,\n  Session,\n  SessionStatusEnum,\n  SessionTypeEnum,\n} from 'src/services/database/types'\nimport { EntityType } from 'src/utils/orm-type'\nimport { DefaultNodeData } from 'src/utils/flow-node'\nimport { useNavigate } from 'react-router-dom'\nimport { getRouteURL } from 'src/utils/routes'\n\nexport const useCreateStandaloneSession = () => {\n  const [loading, setLoading] = useState(false)\n  const navigate = useNavigate()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const getLatestApplications = useSessionState((state) => state.getLatestApplications)\n\n  const cloneNode = useCallback(\n    async (\n      newSession: Session,\n      node: Node<DefaultNodeData>,\n      newEntityIDMap: Map<string, string>,\n      newFlowNodeIDMap: Map<string, string>,\n    ) => {\n      const entity = node.data?.entity\n      let entityName = node.type ? flowNodeTypeToEntity[node.type as FlowNodeTypeEnum] : undefined\n      if (\n        entityName &&\n        entity &&\n        node &&\n        typeof entity === 'object' &&\n        'id' in entity &&\n        !newEntityIDMap.has(`${entity.id}`) &&\n        !newFlowNodeIDMap.has(`${node.id}`)\n      ) {\n        entityName = entityName as AppEntityNames\n        const cloneEntity = await getRepository(entityName).save({\n          ...entity,\n          ...(entity && typeof entity === 'object' && 'session_id' in entity\n            ? { session_id: newSession.id }\n            : {}),\n        } as EntityType<unknown>)\n        newEntityIDMap.set(`${entity.id}`, cloneEntity.id)\n        const currentFlowNode = await getRepository('FlowNode').findOne({\n          where: {\n            id: node.data.flowNode.id,\n          },\n        })\n        const cloneFlowNode = await getRepository('FlowNode').save({\n          ...(currentFlowNode || node.data.flowNode),\n          session_id: newSession.id,\n          id: undefined,\n          source_type: entityName,\n          source_id: cloneEntity.id,\n        })\n        newFlowNodeIDMap.set(`${node.id}`, cloneFlowNode.id)\n        return {\n          entityName,\n          entity: cloneEntity,\n          node: cloneFlowNode,\n        }\n      } else if (!newFlowNodeIDMap.has(`${node.id}`)) {\n        const currentFlowNode = await getRepository('FlowNode').findOne({\n          where: {\n            id: node.data.flowNode.id,\n          },\n        })\n        const cloneFlowNode = await getRepository('FlowNode').save({\n          ...(currentFlowNode || node.data.flowNode),\n          node_type: node.type as FlowNodeTypeEnum,\n          session_id: newSession.id,\n          id: undefined,\n        })\n        newFlowNodeIDMap.set(`${node.id}`, cloneFlowNode.id)\n        return {\n          node: cloneFlowNode,\n        }\n      }\n    },\n    [],\n  )\n\n  const createStandaloneSession = useCallback(\n    async (\n      node: Node<DefaultNodeData>,\n      options: {\n        name?: string\n        connections: {\n          node: Node<DefaultNodeData>\n          connections: Connection[]\n          connectedNodes?: Node<DefaultNodeData>[]\n        }[]\n      },\n    ) => {\n      try {\n        if (!currentSession) {\n          throw new Error('No current session')\n        }\n        setLoading(true)\n        const standaloneSession = await getRepository('Session').save({\n          type: SessionTypeEnum.StandaloneApp,\n          name: options.name || (currentSession?.name ? `${currentSession.name}` : 'Standalone'),\n          status: SessionStatusEnum.Started,\n          passphrase: currentSession.passphrase,\n        })\n        if (!standaloneSession) {\n          throw new Error('Failed create standalone session')\n        }\n        const newEntityIDMap = new Map<string, string>()\n        const newFlowNodeIDMap = new Map<string, string>()\n        // Clone node\n        const mainNodeInfo = await cloneNode(\n          standaloneSession,\n          node,\n          newEntityIDMap,\n          newFlowNodeIDMap,\n        )\n        if (!mainNodeInfo) {\n          throw new Error('Failed to clone main node')\n        }\n        await getRepository('Session').update(standaloneSession.id, {\n          main_node_id: mainNodeInfo.node.id,\n          main_source_id: mainNodeInfo?.entity ? mainNodeInfo.entity.id : undefined,\n          main_source_type: mainNodeInfo.entityName ? mainNodeInfo.entityName : undefined,\n        })\n        // Clone connected nodes\n        for (const { node, connectedNodes } of options.connections) {\n          await cloneNode(standaloneSession, node, newEntityIDMap, newFlowNodeIDMap)\n          // Clone Connected Nodes\n          if (connectedNodes) {\n            for (const connectedNode of connectedNodes) {\n              await cloneNode(standaloneSession, connectedNode, newEntityIDMap, newFlowNodeIDMap)\n            }\n          }\n        }\n        // Clone connections\n        for (const { connections } of options.connections) {\n          for (const connection of connections) {\n            const sourceId = newFlowNodeIDMap.get(`${connection.source}`)\n            const targetId = newFlowNodeIDMap.get(`${connection.target}`)\n            if (!sourceId || !targetId) {\n              throw new Error('Failed to get connected flow node id')\n            }\n            await getRepository('FlowEdge').save({\n              source: sourceId,\n              target: targetId,\n              sourceHandle: connection.sourceHandle,\n              targetHandle: connection.targetHandle,\n              session_id: standaloneSession.id,\n            })\n          }\n        }\n        getLatestApplications()\n\n        navigate(getRouteURL('application', { applicationId: standaloneSession.id }))\n        return true\n      } finally {\n        setLoading(false)\n      }\n    },\n    [cloneNode, currentSession, getLatestApplications, navigate],\n  )\n\n  return {\n    loading,\n    createStandaloneSession,\n  }\n}\n","import { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useFlowState } from 'src/states/flow'\n\nexport const useDeleteNodeFlow = () => {\n  const [loading, setLoading] = useState(false)\n  const updateNode = useFlowState((state) => state.updateNodes)\n  const updateEdges = useFlowState((state) => state.updateEdges)\n\n  const deleteNodeFlow = useCallback(\n    async (id: string) => {\n      try {\n        setLoading(true)\n        await getRepository('FlowNode').delete(id)\n        const edges = await getRepository('FlowEdge').find({\n          where: [{ source: id }, { target: id }],\n        })\n        await Promise.all(edges.map((edge) => getRepository('FlowEdge').delete(edge.id)))\n        await updateNode([{ id, type: 'remove' as const }])\n        await updateEdges(edges.map((edge) => ({ id: edge.id, type: 'remove' as const })))\n        return true\n      } catch {\n        return false\n      } finally {\n        setLoading(false)\n      }\n    },\n    [updateEdges, updateNode],\n  )\n\n  return {\n    loading,\n    deleteNodeFlow,\n  }\n}\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from 'src/lib/shadcn/ui/dialog'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Label } from 'src/lib/shadcn/ui/label'\n\ntype CreateSessionProps = {\n  className: string\n  cloneStandaloneSession: (name?: string) => Promise<void>\n}\n\nconst CreateStandaloneApplicationDialog = create<CreateSessionProps>(\n  ({ cloneStandaloneSession }) => {\n    const currentModal = useModal()\n    const { t } = useTranslation('dialogs')\n    const [name, setName] = useState('')\n\n    const { toast } = useToast()\n\n    const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setName(e.target.value)\n    }\n\n    const handleSubmit = async () => {\n      try {\n        currentModal.hide()\n        await cloneStandaloneSession(name)\n        setName('')\n      } catch {\n        toast({\n          variant: 'destructive',\n          description: t('create_standalone_application.errors.create_failed'),\n        })\n      }\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>{t('create_session.title')}</DialogTitle>\n            <DialogDescription>{t('create_standalone_application.description')}</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"flex flex-col space-y-1.5\">\n              <Label className=\"mb-2\" htmlFor=\"name\">\n                {t('create_standalone_application.name')}\n              </Label>\n              <Input\n                onChange={handleChangeName}\n                id=\"name\"\n                value={name}\n                placeholder={t('create_standalone_application.name_placeholder')}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button onClick={handleSubmit} disabled={!name} type=\"submit\">\n              {t('create_standalone_application.create')}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateStandaloneApplicationDialog\n","import { memo, useCallback } from 'react'\nimport { Node, Connection, useReactFlow } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { useCreateStandaloneSession } from 'src/hooks/mutations/use-create-standalone-session'\nimport { useDeleteNodeFlow } from 'src/hooks/flows/mutations/use-delete-node-flow'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { cn } from 'src/lib/utils'\nimport { DefaultNodeData, DefaultNodeProps } from 'src/utils/flow-node'\nimport { EntityType } from 'src/utils/orm-type'\nimport { logError } from 'src/utils/logger'\nimport { useModal } from '@ebay/nice-modal-react'\nimport CreateStandaloneApplicationDialog from 'src/components/dialogs/CreateStandaloneApplicationDialog'\n\nexport const NodeHeader = memo(\n  ({\n    id,\n    className,\n    enableToStandalone,\n    getLinkedConnections,\n  }: {\n    id: string\n    className?: string\n    enableToStandalone?: boolean\n    getLinkedConnections?: (id: string) => {\n      node: Node<DefaultNodeProps<{ entity: EntityType<unknown> }>['data']>\n      connections: Connection[]\n      connectedNodes?: Node<DefaultNodeProps<{ entity: EntityType<unknown> }>['data']>[]\n    }[]\n  }) => {\n    const { t } = useTranslation('common')\n    const { getNode } = useReactFlow<Node<DefaultNodeData>>()\n    const { loading: deleting, deleteNodeFlow } = useDeleteNodeFlow()\n    const { createStandaloneSession } = useCreateStandaloneSession()\n    const { toast } = useToast()\n    const createStandaloneApplicationDialog = useModal(CreateStandaloneApplicationDialog)\n\n    const handleDelete = useCallback(async () => {\n      try {\n        await deleteNodeFlow(id)\n        toast({\n          description: t('deleted'),\n        })\n      } catch {\n        toast({\n          description: t('errors.delete_failed'),\n          variant: 'destructive',\n        })\n      }\n    }, [deleteNodeFlow, id, toast, t])\n\n    const cloneStandaloneSession = useCallback(\n      async (name?: string) => {\n        try {\n          const currentNode = getNode(id)\n          if (!currentNode) {\n            throw new Error('No current node')\n          }\n          const connections = getLinkedConnections?.(id) || []\n          await createStandaloneSession(currentNode, { name, connections })\n          toast({\n            description: t('standalone_session_created'),\n          })\n        } catch (error) {\n          logError('Clone Standalone Session', error)\n          toast({\n            description: t('errors.create_standalone_session_failed'),\n            variant: 'destructive',\n          })\n        }\n      },\n      [getNode, id, getLinkedConnections, createStandaloneSession, toast, t],\n    )\n\n    const handleCreateStandaloneApplication = useCallback(() => {\n      createStandaloneApplicationDialog.show({\n        cloneStandaloneSession,\n      })\n    }, [cloneStandaloneSession, createStandaloneApplicationDialog])\n\n    return (\n      <div className={cn('flex absolute z-[51] right-0 top-0 h-10', className)}>\n        {enableToStandalone ? (\n          <Button\n            className=\"!rounded-none !px-2\"\n            onClick={handleCreateStandaloneApplication}\n            variant=\"ghost\"\n          >\n            <LazyIcon name=\"package-plus\" size={16} />\n          </Button>\n        ) : undefined}\n        <LoadingButton\n          loading={deleting}\n          className=\"!rounded-none !px-2\"\n          onClick={handleDelete}\n          variant=\"ghost\"\n        >\n          <LazyIcon name=\"trash-2\" size={16} />\n        </LoadingButton>\n      </div>\n    )\n  },\n)\n","import { memo } from 'react'\nimport { Handle, HandleProps, Position } from '@xyflow/react'\nimport { cn } from 'src/lib/utils'\n\nexport const DefaultHandle = memo((props: HandleProps) => {\n  const { className, ...rest } = props\n  return (\n    <Handle\n      className={cn(\n        '!w-2 !h-2 !border-none !rounded-full !bg-slate-700',\n        props.position === Position.Top ? '!top-[-2px]' : '',\n        className,\n      )}\n      {...rest}\n    />\n  )\n})\n","import { useState, useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, LLM } from 'src/services/database/types'\nimport { ThreadStatusEnum } from 'src/services/database/types/thread'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateThread = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const createThread = useCallback(\n    async (source: Node) => {\n      setLoading(true)\n      try {\n        const llm = source.data?.entity as LLM\n        if (!llm || !sessionId) {\n          throw new Error('LLM or Session not found')\n        }\n\n        const initialX = source.position.x\n        const initialY = source.position.y + (source.measured?.height || 0)\n        const thread = await getRepository('Thread').save({\n          initial_llm_id: llm.id,\n          title: `New thread with ${llm.name}`,\n          status: ThreadStatusEnum.Started,\n          messages: [],\n          session_id: sessionId,\n        })\n        const flowNode = await createOrUpdateFlowNode({\n          source_id: thread.id,\n          source_type: 'Thread',\n          node_type: FlowNodeTypeEnum.Thread,\n          x: initialX,\n          y: initialY + 60,\n        })\n        if (!flowNode) {\n          throw new Error('Failed to create thread node')\n        }\n        // Create connection from source to threadNode\n        const flowEdge = await createOrUpdateFlowEdge({\n          source: source.id,\n          target: flowNode.id,\n        })\n\n        return {\n          thread,\n          flowNode,\n          flowEdge,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowEdge, createOrUpdateFlowNode, sessionId],\n  )\n\n  return {\n    loading,\n    createThread,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Node, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { FlowNodeTypeEnum, LLM, LLMProviderEnum, LLMStatusEnum } from 'src/services/database/types'\nimport { useCreateThread } from 'src/hooks/flows/mutations/use-create-thread'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { logError } from 'src/utils/logger'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\n\nimport { LLMNodeProps } from '../type'\n\nexport const useActions = (id: string, data: LLMNodeProps['data']) => {\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const [loadingModel, setLoadingModel] = useState(false)\n  const [queringThreads, setQueringThreads] = useState(false)\n  const node = useInternalNode(id) as Node<LLMNodeProps['data']>\n  const { loadModel } = useLoadModel()\n  const { createThread, loading: creatingThread } = useCreateThread()\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue)\n\n  const { getNodes } = useReactFlow()\n\n  const queryThreadsFromModel = useCallback(async () => {\n    try {\n      setQueringThreads(true)\n      if (data.entity.id) {\n        const threads = await getRepository('Thread').find({\n          where: {\n            initial_llm_id: data.entity.id,\n          },\n        })\n        pushSyncNodeQueue('Thread', {\n          where: {\n            source_type: 'Thread',\n            source_id: In(threads.map((thread) => thread.id)),\n          },\n        })\n      }\n    } finally {\n      setQueringThreads(false)\n    }\n  }, [data?.entity?.id, pushSyncNodeQueue])\n\n  const handleLoadModel = useCallback(async () => {\n    try {\n      setLoadingModel(true)\n      if (data.entity && node) {\n        await loadModel?.(data.entity.provider, `${data.entity.name}`, (initProgress) => {\n          node.data.status =\n            initProgress.progress === 100 ? LLMStatusEnum.Loaded : LLMStatusEnum.Loading\n\n          node.data.label = initProgress.text\n          updateNodes([{ id, type: 'replace' as const, item: node }])\n        })\n        const llmNodeChanges = getNodes()\n          .filter((node) => {\n            const isLLMNode = node.type === FlowNodeTypeEnum.LLM\n            if (isLLMNode) {\n              const entity = node.data.entity as LLM\n              return entity.provider === LLMProviderEnum.WebLLM\n            }\n            return false\n          })\n          .map((node) => {\n            node.data.status = LLMStatusEnum.Started\n            return { id: node.id, type: 'replace' as const, item: node }\n          })\n        node.data.label = ''\n        node.data.status = LLMStatusEnum.Loaded\n        llmNodeChanges.push({\n          id,\n          type: 'replace' as const,\n          item: node,\n        })\n        updateNodes(llmNodeChanges)\n        await queryThreadsFromModel()\n      }\n    } catch (error) {\n      logError('Load Model', error)\n      toast({\n        variant: 'destructive',\n        description: t('llm_node.errors.loading_model'),\n      })\n    } finally {\n      setLoadingModel(false)\n    }\n  }, [data.entity, getNodes, id, loadModel, node, queryThreadsFromModel, t, toast, updateNodes])\n\n  const handleCreateThread = useCallback(async () => {\n    if (data.entity && node) {\n      await createThread?.(node)\n    }\n  }, [data.entity, node, createThread])\n\n  const changeLLMOptions = useCallback(\n    async (options: Record<string, unknown>) => {\n      if (data.entity && node) {\n        node.data.entity.options = options\n        await getRepository('LLM').update(data.entity.id, { options })\n        updateNodes([{ id, type: 'replace' as const, item: node }])\n      }\n    },\n    [data.entity, id, node, updateNodes],\n  )\n\n  useEffect(() => {\n    if (data.entity && node && data.entity.status !== data.status) {\n      node.data.status = data.entity.status as LLMStatusEnum\n      updateNodes([{ id, type: 'replace' as const, item: node }])\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return {\n    loadingModel,\n    creatingThread,\n    queringThreads,\n    changeLLMOptions,\n    loadModel: handleLoadModel,\n    createThread: handleCreateThread,\n    queryThreads: queryThreadsFromModel,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Node, Connection, useHandleConnections, useReactFlow } from '@xyflow/react'\n\nimport { filterUserConnections } from 'src/utils/flow'\n\nexport const useBaseConnectionToHandler = (\n  id: string,\n  handlerFunction: (input: {\n    id: string\n    edgeId: string\n    source: Node\n    target: Node\n    connection: Connection\n  }) => Promise<{ deleteEdgeId: string | string[] } | undefined>,\n) => {\n  const [handling, setHandling] = useState(false)\n  const [newTargetConnection, setNewTargetConnection] = useState<Connection[]>([])\n  const { deleteElements, getNode } = useReactFlow()\n\n  useHandleConnections({\n    type: 'target',\n    nodeId: id,\n    onConnect: (newConnections) => {\n      if (newConnections?.length) {\n        setNewTargetConnection((pre) => [...pre, ...filterUserConnections(newConnections)])\n      }\n    },\n  })\n\n  const connectionHandler = useCallback(\n    async (edgeId: string, source: Node, target: Node, connection: Connection) => {\n      try {\n        const result = await handlerFunction({\n          id,\n          edgeId,\n          source,\n          target,\n          connection,\n        })\n\n        return result\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [handlerFunction, id],\n  )\n\n  useEffect(() => {\n    if (!newTargetConnection?.length || handling) {\n      return\n    }\n    const handle = async () => {\n      try {\n        setHandling(true)\n        const handlingConnections = [...newTargetConnection]\n        setNewTargetConnection([])\n        const removeEdgeIds: string[] = []\n        const target = getNode(id)\n        await Promise.all(\n          handlingConnections.map(async (connection) => {\n            const edgeId = 'edgeId' in connection ? connection.edgeId : undefined\n            const source = getNode(connection.source)\n            if (!source || !target) {\n              return\n            }\n\n            const response = await connectionHandler(`${edgeId}`, source, target, connection)\n\n            if (response?.deleteEdgeId) {\n              removeEdgeIds.push(\n                ...(Array.isArray(response.deleteEdgeId)\n                  ? response.deleteEdgeId\n                  : [response.deleteEdgeId]),\n              )\n            }\n          }),\n        )\n        if (removeEdgeIds?.length) {\n          await deleteElements({\n            edges: removeEdgeIds.map((id) => ({ id })),\n          })\n        }\n      } finally {\n        setHandling(false)\n      }\n    }\n    handle()\n  }, [deleteElements, getNode, id, handling, connectionHandler, newTargetConnection])\n}\n","import { useCallback } from 'react'\n\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const handleConnectionTo = useCallback(async () => {\n    return undefined\n  }, [])\n  useBaseConnectionToHandler(id, handleConnectionTo)\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Position } from '@xyflow/react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { LLMProviderEnum, LLMStatusEnum } from 'src/services/database/types/llm'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { BorderBeam } from 'src/lib/shadcn/ui/border-beam'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { LLMNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { LLMSetting } from 'src/components/atoms/LLMSetting'\n\nexport const LLMNode = memo((props: LLMNodeProps) => {\n  const { id, data, isConnectable } = props\n  const [llmInfo, setLLMInfo] = useState<\n    | { hasCache: boolean; isFunctionCalling: boolean; info?: ModelRecord; cloud?: boolean }\n    | undefined\n  >()\n  const { t } = useTranslation('flows')\n\n  const { createThread, loadModel, queringThreads, queryThreads, loadingModel, changeLLMOptions } =\n    useActions(id, data)\n  useConnectionToHandler(id)\n\n  const isLoading = [LLMStatusEnum.Loading, LLMStatusEnum.Downloading].includes(data.status)\n\n  useEffect(() => {\n    if (llmInfo || !data?.entity?.name) {\n      return\n    }\n    if (data?.entity?.provider !== LLMProviderEnum.WebLLM) {\n      setLLMInfo({\n        hasCache: false,\n        cloud: true,\n        isFunctionCalling: true,\n        info: {\n          model_id: data?.entity?.name,\n          model: data?.entity?.name,\n          model_lib: data?.entity?.provider,\n          model_type: 2,\n        },\n      })\n      return\n    }\n    import('@mlc-ai/web-llm').then(\n      async ({ hasModelInCache, functionCallingModelIds, prebuiltAppConfig }) => {\n        const hasCache = await hasModelInCache(data?.entity?.name)\n        setLLMInfo({\n          hasCache,\n          isFunctionCalling: functionCallingModelIds.includes(data?.entity?.name),\n          info: prebuiltAppConfig.model_list.find((item) => item.model_id === data?.entity?.name),\n        })\n      },\n    )\n  }, [data?.entity?.name, data?.entity?.provider, llmInfo])\n\n  const onChangeOptions = useCallback(\n    async (options: Record<string, unknown>) => {\n      await changeLLMOptions(options)\n    },\n    [changeLLMOptions],\n  )\n\n  const llmIcon = useMemo(() => {\n    switch (data.status) {\n      case LLMStatusEnum.Downloading:\n        return <LazyIcon className={'animate-spin w-7 h-7'} name={'arrow-big-down-dash'} />\n      case LLMStatusEnum.Loaded:\n        return <LLMIcon name={data.entity?.name || 'brain'} className=\"w-7 h-7\" />\n      case LLMStatusEnum.Loading:\n        return <LazyIcon className={'animate-spin w-7 h-7'} name={'loader-circle'} />\n      default:\n        return <LLMIcon name={data.entity?.name || 'brain'} className=\"w-7 h-7\" />\n    }\n  }, [data.entity?.name, data.status])\n\n  const actions = useMemo(() => {\n    if (isLoading) {\n      return null\n    }\n    if (loadingModel) {\n      return (\n        <Button disabled={true} className=\"w-full mt-4\">\n          <LazyIcon className={'animate-spin'} size={24} name={'loader-circle'} />\n        </Button>\n      )\n    }\n    if (data.status === LLMStatusEnum.Loaded) {\n      return (\n        <Button onClick={createThread} className=\"mt-4 w-full\">\n          {t('llm_node.create_thread_button')}\n        </Button>\n      )\n    }\n    return (\n      <div className=\"flex gap-2 mt-4\">\n        {llmInfo?.hasCache ? (\n          <LoadingButton loading={queringThreads} onClick={queryThreads}>\n            <LazyIcon size={24} name={'message-square-more'} />\n          </LoadingButton>\n        ) : null}\n        <Button disabled={loadingModel} onClick={loadModel} className=\"w-full\">\n          {t(llmInfo?.hasCache ? 'llm_node.load_model_button' : 'llm_node.download_model_button')}\n        </Button>\n      </div>\n    )\n  }, [\n    isLoading,\n    loadingModel,\n    data.status,\n    llmInfo?.hasCache,\n    queringThreads,\n    queryThreads,\n    loadModel,\n    t,\n    createThread,\n  ])\n  return (\n    <div>\n      <div>\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center\">\n          {llmIcon}\n          <div className=\"ml-2 pt-1 max-w-lg\">\n            <AlertTitle className=\"flex gap-2 items-center pr-6\">\n              {`${data?.entity?.name || ''}`}\n            </AlertTitle>\n            <AlertDescription className=\"max-w-full\">{`${data.label || ''}`}</AlertDescription>\n            <div className=\"max-w-full mt-2 flex-wrap flex gap-1\">\n              <LLMInfo\n                model={llmInfo?.info}\n                isFunctionCalling={llmInfo?.isFunctionCalling || false}\n                name={data?.entity?.name}\n                isCached={llmInfo?.hasCache || false}\n                cloud={llmInfo?.cloud || false}\n              />\n            </div>\n            <LLMSetting\n              options={data?.entity?.options}\n              onChangeOptions={onChangeOptions}\n              className=\"mt-2\"\n            />\n            {actions}\n          </div>\n        </Alert>\n        {isLoading ? <BorderBeam className=\"rounded-lg\" /> : undefined}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport AIInput from 'src/lib/kokonutui/ai-input'\n\nconst NewMessageCard = memo(\n  ({\n    tags,\n    disabled,\n    loading,\n    onSubmit,\n  }: {\n    tags?: React.ReactNode\n    disabled?: boolean\n    loading?: boolean\n    onSubmit: (input: string) => void\n  }) => {\n    const { t } = useTranslation('components')\n\n    const hanldeSubmit = async (input: string) => {\n      try {\n        await onSubmit(input)\n        return true\n      } catch {\n        return false\n      }\n    }\n\n    return (\n      <Card className=\"min-w-80\">\n        <CardHeader>\n          <CardTitle>{t('add_message_card.title')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid w-full gap-1.5\">\n            <AIInput\n              onSubmit={hanldeSubmit}\n              disabled={disabled || loading}\n              placeholder={t('add_message_card.placeholder')}\n            />\n          </div>\n          {tags ? <div className=\"mt-2 gap-1 flex flex-wrap\">{tags}</div> : null}\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default NewMessageCard\n","import type { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types/flow-node'\n\nimport type { DefaultNodeData } from './flow-node'\n\nexport const threadConversationTraveling = (\n  list: string[],\n  nodes: Node<DefaultNodeData>[],\n  connections: Connection[],\n  handledIds: string[] = [],\n  functions: {\n    getNode: (id: string) => Node<DefaultNodeData> | undefined\n    getHandleConnections: (props: { type: 'source' | 'target'; nodeId: string }) => Connection[]\n  },\n) => {\n  const runningNodes = list.map((id) => functions.getNode(id))\n  for (const node of runningNodes) {\n    if (!node) {\n      continue\n    }\n\n    const nodeConnections = functions.getHandleConnections({\n      type: 'target',\n      nodeId: node.id,\n    })\n    connections.push(...nodeConnections)\n\n    if (node.type === FlowNodeTypeEnum.Thread) {\n      handledIds.push(node.id)\n      nodes.push(node)\n      continue\n    } else if (node.type !== FlowNodeTypeEnum.Message) {\n      handledIds.push(node.id)\n      continue\n    } else if (handledIds.includes(node.id)) {\n      continue\n    }\n\n    handledIds.push(node.id)\n    nodes.push(node)\n    if (nodeConnections.length) {\n      threadConversationTraveling(\n        nodeConnections.map((c) => c.source),\n        nodes,\n        connections,\n        handledIds,\n        functions,\n      )\n    }\n  }\n\n  return {\n    nodes,\n    connections,\n  }\n}\n\nexport const prepareThreadConnections = (\n  threadNode: Node<DefaultNodeData>,\n  functions: {\n    getNode: (id: string) => Node<DefaultNodeData> | undefined\n    getHandleConnections: (props: { type: 'source' | 'target'; nodeId: string }) => Connection[]\n  },\n) => {\n  const threadConnections = functions.getHandleConnections({\n    nodeId: threadNode.id,\n    type: 'target',\n  })\n  const threadConnectionInfos = threadConnections.map((connection) => {\n    const node = functions.getNode(connection.source)\n    if (!node) {\n      return\n    }\n    const connections = functions.getHandleConnections({\n      nodeId: node.id,\n      type: 'target',\n    })\n    return {\n      connections,\n      node,\n    }\n  }) as { connections: Connection[]; node: Node<DefaultNodeData> }[]\n  // Prompt connection\n  const threadPromptNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.Prompt\n  })\n  const threadPromptNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadPromptNodes?.length) {\n    threadPromptNodes.forEach((item) => {\n      const promptConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      threadPromptNodeResult.push({\n        node: item.node,\n        connections: item.connections,\n        connectedNodes: promptConnectedNodes,\n      })\n    })\n  }\n  // Tool connection\n  const threadToolsNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.ToolDefinition\n  })\n  const threadToolNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadToolsNodes?.length) {\n    threadToolsNodes.forEach((item) => {\n      const toolConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      if (toolConnectedNodes?.find((node) => node.type === FlowNodeTypeEnum.Schema)) {\n        threadToolNodeResult.push({\n          node: item.node,\n          connections: item.connections,\n          connectedNodes: toolConnectedNodes,\n        })\n      }\n    })\n  }\n  // placeholder node connection\n  const threadPlaceholderNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.PlaceHolder\n  })\n  const threadPlaceholderNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadPlaceholderNodes?.length) {\n    threadPlaceholderNodes.forEach((item) => {\n      const placeholderConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      if (placeholderConnectedNodes) {\n        threadPlaceholderNodeResult.push({\n          node: item.node,\n          connections: item.connections,\n          connectedNodes: placeholderConnectedNodes,\n        })\n      }\n    })\n  }\n  // Schema connection\n  const schemaNode = threadConnectionInfos.find((item) => {\n    return item.node?.type === FlowNodeTypeEnum.Schema\n  })\n\n  return {\n    thread: {\n      node: threadNode,\n      connections: threadConnections,\n    },\n    llm: threadConnectionInfos.find((item) => {\n      return item.node?.type === FlowNodeTypeEnum.LLM\n    }),\n    schemas: schemaNode ? [schemaNode] : [],\n    prompts: threadPromptNodeResult,\n    tools: threadToolNodeResult,\n    placeholders: threadPlaceholderNodeResult,\n  }\n}\n","import { Node } from '@xyflow/react'\nimport { AIMessage, BaseMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport {\n  CSVData,\n  FlowNodeTypeEnum,\n  Message,\n  Prompt,\n  PromptTypeEnum,\n} from 'src/services/database/types'\nimport { decodeCSVData } from './string-data'\n\nexport const buildHistories = (nodes: { node: Node; connectedNodes: Node[] }[]) => {\n  const histories: BaseMessage[] = []\n  nodes.forEach((item) => {\n    const { node, connectedNodes } = item\n    if (!node.data?.entity) {\n      return\n    }\n    if (node.type === FlowNodeTypeEnum.Message) {\n      const message = node.data.entity as Message\n      switch (message.role) {\n        case 'human':\n          histories.push(new HumanMessage(message.content))\n          break\n        case 'ai':\n          histories.push(new AIMessage(message.content))\n          break\n      }\n    } else if (node.type === FlowNodeTypeEnum.Prompt) {\n      // Prompt\n      const prompt = node.data.entity as Prompt\n\n      let content = `${prompt.prefix ? `${prompt.prefix}\\n` : ''}`\n      if (prompt.type === PromptTypeEnum.FewShotExample) {\n        const connectedDataNode = connectedNodes.find((n) => n.type === FlowNodeTypeEnum.CSVData)\n        const csvData = connectedDataNode?.data?.entity as CSVData\n        if (csvData) {\n          const { rows } = decodeCSVData(csvData.headers, csvData.csv)\n          rows.forEach((row: Record<string, unknown>) => {\n            content += `${prompt.content.replace(/{([^{}]*)}/g, (_, key) => `${row[key as keyof typeof row]}`)}\\n`\n          })\n        }\n      } else {\n        content += prompt.content\n      }\n      if (prompt.suffix) {\n        content += `\\n${prompt.suffix}`\n      }\n\n      switch (prompt.role) {\n        case 'human':\n          histories.push(new HumanMessage(content))\n          break\n        case 'system':\n          histories.push(new SystemMessage(content))\n          break\n        default:\n          histories.push(new AIMessage(content))\n          break\n      }\n    }\n  })\n  return histories\n}\n\nexport const prepareThreadHistory = (\n  connectedNodes: Node[],\n  threadPromptNodes: { node: Node; connectedNodes?: Node[] }[],\n) => {\n  const messageNodes =\n    connectedNodes\n      ?.filter((node) => node.type === FlowNodeTypeEnum.Message)\n      .map((node) => ({ node: node, connectedNodes: [] as Node[] }))\n      .reverse() || []\n\n  const systems: { node: Node; connectedNodes: Node[] }[] = []\n  threadPromptNodes.forEach(async (threadPromptNode) => {\n    systems.unshift({\n      node: threadPromptNode.node,\n      connectedNodes: threadPromptNode.connectedNodes || [],\n    })\n  })\n  return {\n    history: buildHistories(messageNodes),\n    systems: buildHistories(systems),\n  }\n}\n","import { Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum, Schema, SchemaItem, ToolDefinition } from 'src/services/database/types'\nimport { DefaultNode } from './flow-node'\n\nexport const toLocalLLMToolCallingInput = (\n  tools?: {\n    node: DefaultNode\n    connectedNodes?: DefaultNode[]\n    connections: Connection[]\n  }[],\n): {\n  name: string\n  description: string\n  schemaItems: SchemaItem[]\n}[] => {\n  if (!tools) {\n    return []\n  }\n  return tools.reduce(\n    (all: { name: string; description: string; schemaItems: SchemaItem[] }[], item) => {\n      const toolEntity = item.node.data?.entity as ToolDefinition\n      const toolSchemaEnity = item?.connectedNodes?.find(\n        (node) => node.type === FlowNodeTypeEnum.Schema,\n      )?.data?.entity as Schema\n      if (toolEntity && toolSchemaEnity?.schema_items?.length) {\n        all.push({\n          name: toolEntity.name,\n          description: toolEntity.description,\n          schemaItems: toolSchemaEnity.schema_items,\n        })\n      }\n      return all\n    },\n    [],\n  )\n}\n","import { useReactFlow } from '@xyflow/react'\nimport { useCallback } from 'react'\nimport { FlowNodePlaceholder, FlowNodeTypeEnum } from 'src/services/database/types'\n\nexport const useFlowEmbeddingNode = () => {\n  const { getNodes } = useReactFlow()\n\n  const getFlowEmbeddingNode = useCallback(() => {\n    const embeddingNode = getNodes().find(\n      (node) => node.type === FlowNodeTypeEnum.DefaultEmbeddingModel,\n    )\n    return embeddingNode\n  }, [getNodes])\n\n  const getFlowEmbeddingEntity = useCallback(() => {\n    const embeddingNode = getFlowEmbeddingNode()\n    const embbedingEntity = embeddingNode?.data?.entity as FlowNodePlaceholder\n\n    return embbedingEntity\n  }, [getFlowEmbeddingNode])\n\n  return {\n    getFlowEmbeddingNode,\n    getFlowEmbeddingEntity,\n  }\n}\n","import { Node, useReactFlow } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PromptTemplate } from '@langchain/core/prompts'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { getRepository } from 'src/services/database'\nimport {\n  CSVData,\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  JSONData,\n  JSONLData,\n  LLM,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  Schema,\n  Thread,\n  VectorDatabase,\n  VectorDatabaseStorageEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport {\n  prepareThreadConnections,\n  threadConversationTraveling,\n} from 'src/utils/thread-conversation-traveling'\nimport { prepareThreadHistory } from 'src/utils/build-message-history'\nimport { AIMessage, BaseMessage, HumanMessage } from '@langchain/core/messages'\nimport { getStorageDataSource } from 'src/utils/vector-storage'\nimport { DefaultNodeData } from 'src/utils/flow-node'\nimport { toLocalLLMToolCallingInput } from 'src/utils/flow-to-local-llm'\nimport { useSessionState } from 'src/states/session'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { logError } from 'src/utils/logger'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\ntype CreateMessageOption = {\n  onMessageUpdate: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n}\nexport const useCreateMessage = ({\n  getNode,\n  getHandleConnections,\n}: Pick<\n  ReturnType<typeof useReactFlow<Node<DefaultNodeData>>>,\n  'getNode' | 'getHandleConnections'\n>) => {\n  const { t } = useTranslation('create_new_message')\n  const [loading, setLoading] = useState(false)\n\n  const currenSession = useSessionState((state) => state.currentSession)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { similaritySearchWithScore: similaritySearchWithScoreFunction } = useEmbedding()\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n\n  const { stream } = useLLM()\n\n  const insertMessages = useCallback(\n    async ({\n      content,\n      threadId,\n      sourceId,\n      initialX,\n      initialY,\n      initialLLMId,\n    }: {\n      content: string\n      threadId: string\n      sourceId: string\n      initialX: number\n      initialY: number\n      initialLLMId: string\n    }) => {\n      if (!currenSession) {\n        throw new Error('Session is not found')\n      }\n      const humanMessage = await getRepository('Message').save({\n        thread_id: threadId,\n        content,\n        role: MessageRoleEnum.Human,\n        status: MessageStatusEnum.Started,\n        llm_id: initialLLMId,\n        session_id: currenSession.id,\n      })\n      if (!humanMessage) {\n        throw new Error('Failed to save message')\n      }\n\n      const humanMessageNode = await createOrUpdateFlowNode({\n        source_id: humanMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY + 80,\n      })\n      if (!humanMessageNode) {\n        throw new Error('Failed to save human message node')\n      }\n      await createOrUpdateFlowEdge({\n        source: sourceId,\n        target: humanMessageNode.id,\n      })\n      const aiMessage = await getRepository('Message').save({\n        thread_id: threadId,\n        content: t('initial_ai_message'),\n        role: MessageRoleEnum.AI,\n        status: MessageStatusEnum.Inprogress,\n        llm_id: initialLLMId,\n        parent_message_id: humanMessage.id,\n        session_id: currenSession.id,\n      })\n      if (!aiMessage) {\n        throw new Error('Failed to save message')\n      }\n      const aiMessageNode = await createOrUpdateFlowNode({\n        source_id: aiMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY + 250,\n      })\n      if (!aiMessageNode) {\n        throw new Error('Failed to save ai message node')\n      }\n      await createOrUpdateFlowEdge({\n        source: humanMessageNode.id,\n        target: aiMessageNode.id,\n      })\n\n      return {\n        aiMessage,\n        humanMessage,\n        aiMessageNode,\n        humanMessageNode,\n      }\n    },\n    [createOrUpdateFlowEdge, createOrUpdateFlowNode, currenSession, t],\n  )\n\n  const handlePlaceholders = useCallback(\n    async (\n      messagesInfo: Awaited<ReturnType<typeof insertMessages>>,\n      threadConnection: ReturnType<typeof prepareThreadConnections>,\n    ): Promise<BaseMessage[]> => {\n      const { placeholders } = threadConnection\n      if (!placeholders?.length) {\n        return []\n      }\n      const injectedMessages: BaseMessage[] = []\n      await Promise.all(\n        placeholders.map(async (item) => {\n          const placeholderRecord = item.node.data?.entity as FlowNodePlaceholder\n          if (!placeholderRecord) {\n            return\n          }\n          switch (placeholderRecord.placeholder_type) {\n            case FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER: {\n              const vectorNode = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.VectorDatabase,\n              )\n              const vector = vectorNode?.data?.entity as VectorDatabase\n              const prompt = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.Prompt,\n              )?.data?.entity as Prompt\n              if (!prompt || !vector || !vectorNode) {\n                return\n              }\n\n              const k = placeholderRecord.metadata?.k ? +placeholderRecord.metadata?.k : 1\n              let minimalScore = placeholderRecord.metadata?.minimalScore\n                ? +placeholderRecord.metadata?.minimalScore\n                : undefined\n              if (minimalScore && minimalScore > 1) {\n                minimalScore = minimalScore / 100\n              }\n\n              const documents: Awaited<ReturnType<typeof similaritySearchWithScoreFunction>> = []\n\n              if (vector.storage === VectorDatabaseStorageEnum.DataNode) {\n                const connections = getHandleConnections({\n                  nodeId: vectorNode.id,\n                  type: 'target',\n                })\n                const dataSourceNode = connections\n                  .map((connection) => getNode(connection.source))\n                  .find(\n                    (node) =>\n                      node?.type &&\n                      [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                        node?.type as FlowNodeTypeEnum,\n                      ),\n                  )\n                const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n                if (!dataSource) {\n                  return\n                }\n                documents.push(\n                  ...((await similaritySearchWithScoreFunction(\n                    getFlowEmbeddingEntity(),\n                    {\n                      database: {\n                        databaseId: vector.id,\n                        dataSourceId: dataSource.id,\n                        dataSourceType: getStorageDataSource(dataSource),\n                      },\n                    },\n                    messagesInfo.humanMessage.content,\n                    k,\n                  )) || []),\n                )\n              } else {\n                documents.push(\n                  ...((await similaritySearchWithScoreFunction(\n                    getFlowEmbeddingEntity(),\n                    {\n                      database: {\n                        databaseId: vector.id,\n                      },\n                    },\n                    messagesInfo.humanMessage.content,\n                    k,\n                  )) || []),\n                )\n              }\n              if (!documents) {\n                return []\n              }\n              const template = new PromptTemplate({\n                template: prompt.content,\n                inputVariables: ['context'],\n              })\n\n              injectedMessages.push(\n                new AIMessage(\n                  await template.format({\n                    context: !minimalScore\n                      ? documents.map(([doc]) => doc.pageContent).join('\\n')\n                      : documents\n                          .filter(([, score]) => score >= minimalScore)\n                          .map(([doc]) => doc.pageContent)\n                          .join('\\n'),\n                  }),\n                ),\n              )\n            }\n          }\n        }),\n      )\n      return injectedMessages\n    },\n    [getFlowEmbeddingEntity, getHandleConnections, getNode, similaritySearchWithScoreFunction],\n  )\n\n  const invokeMessage = useCallback(\n    async (\n      messagesInfo: Awaited<ReturnType<typeof insertMessages>>,\n      threadConnection: ReturnType<typeof prepareThreadConnections>,\n      threadConversionNodes: Node[],\n      { onMessageUpdate }: CreateMessageOption,\n    ) => {\n      const { prompts, tools, schemas, placeholders, llm } = threadConnection\n\n      const llmEntity = llm?.node.data?.entity as LLM\n\n      if (!llmEntity) {\n        throw new Error('LLM is not found')\n      }\n\n      const injectedMessages: BaseMessage[] = []\n\n      if (placeholders?.length) {\n        injectedMessages.push(...(await handlePlaceholders(messagesInfo, threadConnection)))\n      }\n\n      const { history: MessageHistory, systems } = prepareThreadHistory(\n        threadConversionNodes,\n        prompts,\n      )\n      const messages = [\n        ...systems,\n        ...injectedMessages,\n        ...MessageHistory,\n        new HumanMessage(messagesInfo.humanMessage.content),\n      ]\n\n      const schemaEntities = schemas\n        .map((schemaNode) => schemaNode.node.data?.entity as Schema)\n        .filter(Boolean) as Schema[]\n      const { lastChunk, content } = await stream(llmEntity.provider, messages, {\n        tools: toLocalLLMToolCallingInput(tools),\n        schemas: schemaEntities,\n        llm: llmEntity,\n        onMessageUpdate: ({ content }) => {\n          onMessageUpdate?.({\n            id: messagesInfo.aiMessageNode.id,\n            nodeData: {\n              loading: true,\n              content: content,\n            },\n          })\n        },\n      })\n\n      messagesInfo.aiMessage.content = content\n      messagesInfo.aiMessage.metadata = JSON.stringify({\n        message: lastChunk,\n      })\n      onMessageUpdate?.({\n        id: messagesInfo.aiMessageNode.id,\n        nodeData: {\n          content,\n          loading: false,\n          entity: messagesInfo.aiMessage,\n        },\n      })\n      if (messagesInfo.aiMessage.id) {\n        await getRepository('Message').update(messagesInfo.aiMessage.id, {\n          content: content,\n          metadata: JSON.stringify({\n            message: lastChunk,\n          }),\n        })\n      }\n      return content\n    },\n    [handlePlaceholders, stream],\n  )\n\n  const createMessage = useCallback(\n    async (source: Node, content: string, options: CreateMessageOption) => {\n      const { nodes: threadConversionNodes } = threadConversationTraveling(\n        [source.id],\n        [],\n        [],\n        [],\n        {\n          getNode,\n          getHandleConnections,\n        },\n      )\n\n      const threadNode = threadConversionNodes.find((node) => node.type === FlowNodeTypeEnum.Thread)\n      const thread = threadNode?.data.entity as Thread\n      if (!source || !thread || !threadNode) {\n        throw new Error('Source or thread is not found')\n      }\n      const threadConnections = prepareThreadConnections(threadNode, {\n        getNode,\n        getHandleConnections,\n      })\n      if (!threadConnections?.thread) {\n        throw new Error('Thread node is not found')\n      }\n\n      let messagesInfo: Awaited<ReturnType<typeof insertMessages>> | undefined\n      try {\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        messagesInfo = await insertMessages({\n          content,\n          initialX,\n          initialY,\n          sourceId: source.id,\n          threadId: thread.id,\n          initialLLMId: thread.initial_llm_id,\n        })\n        await invokeMessage(messagesInfo, threadConnections, threadConversionNodes, options)\n        await getRepository('Message').update(`${messagesInfo.aiMessage.id}`, {\n          status: MessageStatusEnum.Success,\n        })\n        messagesInfo.aiMessage.status = MessageStatusEnum.Success\n        options.onMessageUpdate({\n          id: messagesInfo.aiMessageNode.id,\n          nodeData: {\n            entity: messagesInfo.aiMessage,\n            loading: false,\n          },\n        })\n        return true\n      } catch (error) {\n        logError('Create Message', error)\n        if (messagesInfo?.aiMessage) {\n          await getRepository('Message').update(`${messagesInfo.aiMessage.id}`, {\n            status: MessageStatusEnum.Failed,\n            content: t('errors.ai_message_content_failed'),\n          })\n        }\n        if (messagesInfo?.aiMessageNode.id) {\n          options?.onMessageUpdate({\n            id: messagesInfo.aiMessageNode.id,\n            nodeData: {\n              content: t('errors.ai_message_content_failed'),\n              entity: {\n                ...messagesInfo.aiMessage,\n                status: MessageStatusEnum.Failed,\n                content: t('errors.ai_message_content_failed'),\n              },\n              loading: false,\n            },\n          })\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [getHandleConnections, getNode, insertMessages, invokeMessage, t],\n  )\n\n  return {\n    loading,\n    createMessage,\n  }\n}\n","import { useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport omitBy from 'lodash/omitBy'\nimport isUndefined from 'lodash/isUndefined'\nimport { Node, Connection, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { useCreateMessage } from 'src/hooks/flows/mutations/use-create-message'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { useFlowState } from 'src/states/flow'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { prepareThreadConnections } from 'src/utils/thread-conversation-traveling'\nimport { DefaultNodeData } from 'src/utils/flow-node'\n\nimport { ThreadNodeProps } from '../type'\n\nexport const useActions = (id: string, data: ThreadNodeProps['data']) => {\n  const node = useInternalNode(id)\n  const { t } = useTranslation('flows')\n  const { getNode, getHandleConnections } = useReactFlow<Node<DefaultNodeData>>()\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { createMessage: createMessageFunction, loading } = useCreateMessage({\n    getNode,\n    getHandleConnections,\n  })\n\n  const onMessageUpdate = useCallback(\n    (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => {\n      if (!info.id) {\n        return\n      }\n      const item = getNode(info.id)\n      if (!item || !info.nodeData) {\n        return\n      }\n      updateNodes([\n        {\n          id: item.id,\n          type: 'replace',\n          item: {\n            ...item,\n            data: {\n              ...item.data,\n              ...omitBy(info.nodeData, isUndefined),\n            },\n          },\n        },\n      ])\n    },\n    [getNode, updateNodes],\n  )\n  const createMessage = useCallback(\n    async (input: string) => {\n      if (node && data.entity) {\n        try {\n          await createMessageFunction(node, input, {\n            onMessageUpdate,\n          })\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              variant: 'destructive',\n              title: t('thread_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: `${error}`,\n          })\n        }\n      }\n    },\n    [node, data.entity, createMessageFunction, onMessageUpdate, t],\n  )\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: Node<DefaultNodeData>\n        connections: Connection[]\n        connectedNodes?: Node<DefaultNodeData>[]\n      }[] = []\n      const threadConnections = prepareThreadConnections(currentNode as Node<DefaultNodeData>, {\n        getNode,\n        getHandleConnections,\n      })\n      if (threadConnections.thread) {\n        linkedConnections.push({\n          node: threadConnections.thread.node as Node<DefaultNodeData>,\n          connectedNodes: [],\n          connections: threadConnections.thread.connections,\n        })\n      }\n      if (threadConnections.prompts) {\n        linkedConnections.push(\n          ...threadConnections.prompts.map((item) => {\n            return {\n              node: item.node,\n              connectedNodes: item.connectedNodes,\n              connections: item.connections,\n            }\n          }),\n        )\n      }\n      if (threadConnections.schemas) {\n        linkedConnections.push(\n          ...threadConnections.schemas.map((item) => {\n            return {\n              node: item.node,\n              connectedNodes: [],\n              connections: item.connections,\n            }\n          }),\n        )\n      }\n      if (threadConnections.placeholders) {\n        threadConnections.placeholders.forEach((item) => {\n          const connectedNodes = item.connections\n            .map((connection) => {\n              return getNode(connection.source)\n            })\n            .filter(Boolean) as Node<DefaultNodeData>[]\n          linkedConnections.push({\n            node: item.node,\n            connectedNodes: connectedNodes || [],\n            connections: item.connections,\n          })\n        })\n      }\n      if (threadConnections.llm) {\n        linkedConnections.push(threadConnections.llm)\n      }\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  return { loading, createMessage, getLinkedConnections }\n}\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.Prompt && target?.type === FlowNodeTypeEnum.Thread) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.LLM &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.Schema &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.ToolDefinition &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.VectorDatabase &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.PlaceHolder &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          const sourceEntity = source.data.entity as FlowNodePlaceholder\n          if (\n            sourceEntity.placeholder_type === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER\n          ) {\n            await createOrUpdateFlowEdge({\n              source: connection.source,\n              target: connection.target,\n              sourceHandle: connection.sourceHandle,\n              targetHandle: connection.targetHandle,\n            })\n            return\n          }\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Position, useHandleConnections, useReactFlow } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport NewMessageCard from 'src/components/molecules/NewMessageCard'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardTitle } from 'src/lib/shadcn/ui/card'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  Prompt,\n  PromptTypeEnum,\n} from 'src/services/database/types'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { ThreadNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ThreadNode = memo((props: ThreadNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { t } = useTranslation('flows')\n  const [showThread, setShowThread] = useState(false)\n  const connections = useHandleConnections({\n    type: 'source',\n  })\n  const targetConnections = useHandleConnections({\n    type: 'target',\n  })\n  const { getNode } = useReactFlow()\n  const { loading, createMessage, getLinkedConnections } = useActions(id, data)\n\n  useConnectionToHandler(id)\n\n  const handleCreateMessage = useCallback(\n    async (...args: Parameters<typeof createMessage>) => {\n      setShowThread(false)\n      const result = await createMessage(...args)\n      return result\n    },\n    [createMessage],\n  )\n\n  const containMessage = useMemo(() => {\n    return connections.length > 0\n  }, [connections])\n\n  const handleNewThread = useCallback(() => {\n    setShowThread((pre) => !pre)\n  }, [])\n\n  const inner = useMemo(() => {\n    const tags = targetConnections\n      .map((connection, index) => {\n        const source = getNode(connection.source)\n        if (source?.type === FlowNodeTypeEnum.Schema) {\n          return <Badge key={`${index}`}>{t('thread_node.structured_output')}</Badge>\n        } else if (source?.type === FlowNodeTypeEnum.Prompt) {\n          const entity = source.data.entity as Prompt\n          return (\n            <Badge key={`${index}`}>\n              {t(\n                entity.type === PromptTypeEnum.FewShotExample\n                  ? 'thread_node.prompts.few_shot_example'\n                  : `thread_node.prompts.${entity.role.toLowerCase()}`,\n              )}\n            </Badge>\n          )\n        } else if (source?.type === FlowNodeTypeEnum.PlaceHolder) {\n          const entity = source.data.entity as FlowNodePlaceholder\n          if (entity?.placeholder_type === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER) {\n            return <Badge key={`${index}`}>{t('thread_node.vector_database_retriever')}</Badge>\n          }\n        }\n        return undefined\n      })\n      .filter(Boolean)\n\n    if (props.data.entity && !props.data.entity?.messages?.length && !containMessage) {\n      return (\n        <NewMessageCard\n          disabled={loading}\n          loading={loading}\n          onSubmit={handleCreateMessage}\n          tags={tags}\n        />\n      )\n    }\n\n    if (!tags?.length) {\n      return <div className=\"w-12 h-10\" />\n    }\n\n    return (\n      <Card className=\"p-4 pt-2\">\n        <CardTitle className=\"mb-2\">{t('thread_node.title')}</CardTitle>\n        <div className=\"flex gap-1.5\">{tags}</div>\n        <div className=\"mt-4 w-full flex justify-end\">\n          <Button onClick={handleNewThread} variant=\"outline\">\n            <LazyIcon name={showThread ? 'copy-minus' : 'copy-plus'} />\n            {showThread ? t('thread_node.hide') : t('thread_node.clone')}\n          </Button>\n        </div>\n      </Card>\n    )\n  }, [\n    containMessage,\n    getNode,\n    handleCreateMessage,\n    handleNewThread,\n    loading,\n    props.data.entity,\n    showThread,\n    t,\n    targetConnections,\n  ])\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} enableToStandalone getLinkedConnections={getLinkedConnections} />\n        {inner}\n        {showThread ? (\n          <>\n            <div className=\"w-[1px] absolute ml-[50%] h-[30px] bg-gray-500\" />\n            <div className=\"absolute mt-[30px] w-full\">\n              <div className=\"ml-[10%] w-80 animate-in slide-in-from-bottom-5\">\n                <NewMessageCard\n                  disabled={loading}\n                  loading={loading}\n                  onSubmit={handleCreateMessage}\n                />\n              </div>\n            </div>\n          </>\n        ) : undefined}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\n\nimport { MessageNodeProps } from '../type'\n\nexport function HumanMessageComponent({\n  data,\n  onNewThread,\n  loading,\n  showThread,\n}: {\n  data: MessageNodeProps['data']\n  onNewThread?: () => void\n  loading?: boolean\n  showThread: boolean\n}) {\n  const { t } = useTranslation('flows')\n  return (\n    <Alert className=\"flex min-w-52\">\n      <LazyIcon size={24} name=\"user\" />\n      <div className=\"ml-2 max-w-full w-full\">\n        <AlertTitle>{`Human`}</AlertTitle>\n        <AlertDescription>{`${data.content || data.entity?.content || ''}`}</AlertDescription>\n        {onNewThread ? (\n          <div className=\"w-full mt-2 flex items-center justify-end\">\n            <Button onClick={onNewThread} disabled={loading} variant=\"outline\">\n              <LazyIcon name={!showThread ? 'plus' : 'minus'} size={16} />\n              {!showThread ? t(`message_node.new_thread`) : t(`message_node.hide_thread`)}\n            </Button>\n          </div>\n        ) : undefined}\n      </div>\n    </Alert>\n  )\n}\n","import { Suspense, useMemo } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { cn } from 'src/lib/utils'\nimport { useTranslation } from 'react-i18next'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { BorderBeam } from 'src/lib/shadcn/ui/border-beam'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { MessageStatusEnum } from 'src/services/database/types'\nimport { MarkdownViewer } from 'src/components/molecules/MarkdownViewer'\n\nimport { MessageNodeProps } from '../type'\n\nexport function AIMessageComponent({\n  data,\n  onNewThread,\n  loading,\n  showThread,\n}: {\n  data: MessageNodeProps['data']\n  onNewThread?: () => void\n  loading?: boolean\n  showThread: boolean\n}) {\n  const { t } = useTranslation('flows')\n  const messageMetadata = useMemo<{ message: Record<string, unknown> }>(() => {\n    try {\n      return JSON.parse(data?.entity?.metadata || '{}')\n    } catch {\n      return {}\n    }\n  }, [data?.entity?.metadata])\n\n  const isError = data.entity.status === MessageStatusEnum.Failed\n\n  const content = useMemo(() => {\n    return <MarkdownViewer source={`${data.content || data.entity?.content || ''}`} />\n  }, [data.content, data.entity?.content])\n\n  return (\n    <Alert\n      className={cn('flex min-w-52', isError ? 'bg-background' : '')}\n      variant={isError ? 'destructive' : 'default'}\n    >\n      <LazyIcon\n        className={cn(data.loading ? 'animate-spin' : undefined)}\n        size={24}\n        name={data.loading ? 'loader-circle' : 'bot'}\n      />\n      <LazyIcon name={!showThread ? 'plus' : 'minus'} size={24} />\n      <div className=\"ml-2 w-full max-w-full\">\n        <AlertTitle>\n          {t(`message_node.message_roles.${data.entity?.role?.toLowerCase()}`)}\n        </AlertTitle>\n        <Suspense\n          fallback={\n            <div className=\"h-full w-ful rounded-lg flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          {isError ? data.content || data.entity?.content || '' : content}\n        </Suspense>\n        {Array.isArray(messageMetadata?.message?.tool_calls) &&\n        messageMetadata?.message?.tool_calls?.length\n          ? messageMetadata?.message?.tool_calls.map((item, index) => {\n              return (\n                <Badge key={`${item.name}_${index}`}>\n                  {t('message_node.tool_call', {\n                    name: item.name,\n                    args: Object.entries(item.args)\n                      .map(([key, value]) => `\"${key}\": \"${value}\"`)\n                      .join(', '),\n                  })}\n                </Badge>\n              )\n            })\n          : null}\n        {onNewThread ? (\n          <div className=\"w-full mt-2 flex items-center justify-end\">\n            <Button onClick={onNewThread} disabled={loading} variant=\"outline\">\n              <LazyIcon name={!showThread ? 'plus' : 'minus'} size={16} />\n              {!showThread ? t(`message_node.new_thread`) : t(`message_node.hide_thread`)}\n            </Button>\n          </div>\n        ) : undefined}\n      </div>\n      {data.loading ? <BorderBeam size={350} duration={10} /> : undefined}\n    </Alert>\n  )\n}\n","import { useCallback } from 'react'\nimport omitBy from 'lodash/omitBy'\nimport isUndefined from 'lodash/isUndefined'\nimport { useTranslation } from 'react-i18next'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { Node, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { useCreateMessage } from 'src/hooks/flows/mutations/use-create-message'\nimport { useFlowState } from 'src/states/flow'\n\nimport { MessageNodeProps } from '../type'\n\nexport const useActions = (id: string) => {\n  const { t } = useTranslation('flows')\n  const node = useInternalNode(id)\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { getNode, getHandleConnections } = useReactFlow<Node<MessageNodeProps['data']>>()\n  const { createMessage: createMessageFunction, loading } = useCreateMessage({\n    getNode,\n    getHandleConnections,\n  })\n\n  const onMessageUpdate = useCallback(\n    (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => {\n      if (!info.id) {\n        return\n      }\n      const item = getNode(info.id)\n      if (!item || !info.nodeData) {\n        return\n      }\n      updateNodes([\n        {\n          id: item.id,\n          type: 'replace',\n          item: {\n            ...item,\n            data: {\n              ...item.data,\n              ...omitBy(info.nodeData, isUndefined),\n            },\n          },\n        },\n      ])\n    },\n    [getNode, updateNodes],\n  )\n\n  const createMessage = useCallback(\n    async (input: string) => {\n      if (node) {\n        try {\n          await createMessageFunction(node, input, {\n            onMessageUpdate,\n          })\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              variant: 'destructive',\n              title: t('message_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('message_node.errors.create_message'),\n          })\n        }\n      }\n    },\n    [node, t, createMessageFunction, onMessageUpdate],\n  )\n\n  return {\n    loading,\n    createMessage,\n  }\n}\n","import { Node } from '@xyflow/react'\nimport { useCallback } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  Thread,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateIdieMessage = () => {\n  const currenSession = useSessionState((state) => state.currentSession)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createIdieMessage = useCallback(\n    async (\n      source: Node,\n      thread: Thread,\n      input: string,\n      options?: {\n        promptNode?: Node\n      },\n    ) => {\n      if (!source || !thread || !currenSession) {\n        return\n      }\n      const prompt = options?.promptNode?.data?.entity as Prompt\n      // This is node thead replaced with message node\n      const initialX = source.position?.x || 0\n      const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n      const newMessage = await getRepository('Message').save({\n        thread_id: thread.id,\n        content: input,\n        role: prompt?.role || MessageRoleEnum.Human,\n        status: MessageStatusEnum.Started,\n        llm_id: thread.initial_llm_id,\n        session_id: currenSession.id,\n      })\n      if (!newMessage) {\n        throw new Error('Failed to save message')\n      }\n      const newMessageNode = await createOrUpdateFlowNode({\n        source_id: newMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY,\n      })\n      if (!newMessageNode) {\n        throw new Error('Failed to save message node')\n      }\n      const edgeToNewMessage = await createOrUpdateFlowEdge({\n        source: source.id,\n        target: newMessageNode.id,\n      })\n      let edgeToPrompt\n      if (options?.promptNode) {\n        edgeToPrompt = await createOrUpdateFlowEdge({\n          source: options?.promptNode.id,\n          target: newMessageNode.id,\n        })\n      }\n      return {\n        message: newMessage,\n        edgeToPrompt,\n        messageNode: newMessageNode,\n        messageEdge: edgeToNewMessage,\n      }\n    },\n    [createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    createIdieMessage,\n  }\n}\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { FlowNodeTypeEnum, Message, Prompt, ThreadStatusEnum } from 'src/services/database/types'\n\nimport { useCreateIdieMessage } from 'src/hooks/flows/mutations/use-create-idie-message'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const { createIdieMessage } = useCreateIdieMessage()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, source, target }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.Prompt && target?.type === FlowNodeTypeEnum.Message) {\n          const message = target?.data?.entity as Message\n          const prompt = source?.data?.entity as Prompt\n          if (!prompt || !message || !target) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          await createIdieMessage(\n            target,\n            {\n              id: message?.thread_id,\n              title: '',\n              status: ThreadStatusEnum.Started,\n              initial_llm_id: message.llm_id,\n              session_id: prompt.session_id,\n            },\n            prompt.content,\n            {\n              promptNode: source,\n            },\n          )\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createIdieMessage],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Position, useHandleConnections } from '@xyflow/react'\nimport NewMessageCard from 'src/components/molecules/NewMessageCard'\nimport { MessageRoleEnum } from 'src/services/database/types'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport textToSpeech from 'src/utils/text-to-speech'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { HumanMessageComponent } from './components/HumanMessage'\nimport { AIMessageComponent } from './components/AIMessage'\nimport { MessageNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const MessageNode = memo((props: MessageNodeProps) => {\n  const { id, data, isConnectable } = props\n  const [showThread, setShowThread] = useState(false)\n  const [speaking, setSpeaking] = useState(false)\n  const { t } = useTranslation('common')\n  const connections = useHandleConnections({\n    type: 'source',\n  })\n  const { loading, createMessage } = useActions(id)\n  const { toast } = useToast()\n\n  useConnectionToHandler(id)\n\n  const handleCreateMessage = useCallback(\n    async (...args: Parameters<typeof createMessage>) => {\n      const result = await createMessage(...args)\n      setShowThread(false)\n      return result\n    },\n    [createMessage],\n  )\n\n  const isEnd = useMemo(() => {\n    return connections.length === 0\n  }, [connections])\n\n  const handleCopy = useCallback(() => {\n    if (!data.entity?.content) {\n      return\n    }\n    navigator.clipboard.writeText(data.entity.content)\n    toast({\n      description: t('copied'),\n    })\n  }, [toast, data, t])\n\n  const handleSpeech = useCallback(async () => {\n    try {\n      if (speaking) {\n        await textToSpeech.stop()\n        return setSpeaking(false)\n      }\n      setSpeaking(true)\n      await textToSpeech.speak(data.entity?.content || '')\n    } catch {\n      toast({\n        variant: 'destructive',\n        description: t('errors.speech_is_not_supported'),\n      })\n    } finally {\n      setSpeaking(false)\n    }\n  }, [data.entity?.content, speaking, t, toast])\n\n  const handleNewThread = useCallback(() => {\n    setShowThread((pre) => !pre)\n  }, [])\n\n  const newMessageCard = useMemo(() => {\n    if (\n      (!isEnd && !showThread) ||\n      data.loading ||\n      loading ||\n      data?.entity?.status === 'inprogress'\n    ) {\n      return undefined\n    }\n    return (\n      <>\n        <div className=\"w-[1px] absolute ml-[50%] h-[30px] bg-gray-500\" />\n        <div className=\"absolute mt-[30px] w-full\">\n          <div className=\"ml-[10%] w-80 animate-in slide-in-from-bottom-5\">\n            <NewMessageCard disabled={loading} loading={loading} onSubmit={handleCreateMessage} />\n          </div>\n        </div>\n      </>\n    )\n  }, [data?.entity?.status, data.loading, handleCreateMessage, isEnd, loading, showThread])\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"max-w-sm min-w-64\">\n        <div className=\"w-auto\">\n          <NodeHeader id={id} />\n          <div>\n            {data.entity?.role === MessageRoleEnum.Human ? (\n              <HumanMessageComponent\n                data={data}\n                showThread={showThread}\n                onNewThread={!isEnd ? handleNewThread : undefined}\n              />\n            ) : (\n              <AIMessageComponent\n                data={data}\n                showThread={showThread}\n                loading={loading}\n                onNewThread={!isEnd ? handleNewThread : undefined}\n              />\n            )}\n          </div>\n          <Button\n            onClick={handleSpeech}\n            className=\"absolute top-0 right-[68px] !px-2 !rounded-none\"\n            variant=\"ghost\"\n          >\n            <LazyIcon name={speaking ? 'circle-stop' : 'speech'} size={16} />\n          </Button>\n          <Button\n            onClick={handleCopy}\n            className=\"absolute top-0 right-[36px] !px-2 !rounded-none\"\n            variant=\"ghost\"\n          >\n            <LazyIcon name=\"copy\" size={16} />\n          </Button>\n        </div>\n        {newMessageCard}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport {\n  CSVData,\n  FlowNodeTypeEnum,\n  Message,\n  Prompt,\n  PromptTypeEnum,\n  ThreadStatusEnum,\n} from 'src/services/database/types'\nimport { useCreateIdieMessage } from 'src/hooks/flows/mutations/use-create-idie-message'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\nimport { useFlowState } from 'src/states/flow'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { createIdieMessage } = useCreateIdieMessage()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, source, target }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        const targetEntity = target?.data?.entity as Prompt\n        const sourceEntity = source?.data?.entity as CSVData\n        if (source?.type === FlowNodeTypeEnum.Message && target?.type === FlowNodeTypeEnum.Prompt) {\n          const message = source?.data?.entity as Message\n          const prompt = target?.data?.entity as Prompt\n          if (!prompt || !message || !target) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          await createIdieMessage(\n            source,\n            {\n              id: message?.thread_id,\n              title: '',\n              status: ThreadStatusEnum.Started,\n              initial_llm_id: message.llm_id,\n              session_id: prompt.session_id,\n            },\n            prompt.content,\n            {\n              promptNode: target,\n            },\n          )\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.CSVData &&\n          target?.type === FlowNodeTypeEnum.Prompt &&\n          targetEntity?.type === PromptTypeEnum.FewShotExample &&\n          sourceEntity?.headers.includes('input') &&\n          sourceEntity?.headers.includes('output')\n        ) {\n          await createOrUpdateFlowEdge({\n            source: source.id,\n            target: target.id,\n          })\n          return\n        }\n\n        // Need to delete edge\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createIdieMessage, createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useMemo } from 'react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Position } from '@xyflow/react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { useModal } from '@ebay/nice-modal-react'\nimport ViewDataDetailDialog from 'src/components/dialogs/ViewDataDetailDialog'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { PromptNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const PromptNode = memo((props: PromptNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  useConnectionToHandler(id)\n\n  const viewDetailDialog = useModal(ViewDataDetailDialog)\n\n  const content = useMemo(() => {\n    return `${data.entity?.prefix ? `${data.entity?.prefix}\\n` : ''}${data.entity?.content || ''}`\n  }, [data.entity?.prefix, data.entity?.content])\n\n  const promptArguments = useMemo(() => {\n    const regex = /{(.*?)}/g\n    const matches = content.match(regex)\n    return matches?.map((match) => match.replace('{', '').replace('}', '')) || []\n  }, [content])\n\n  const isOverLimit = content.length > 990\n\n  const handleOpenDetail = () => {\n    viewDetailDialog.show({ title: 'Prompt', content })\n  }\n\n  return (\n    <div className=\"min-w-56\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center max-w-72\" variant=\"default\">\n          <LazyIcon size={24} name={'notepad-text'} />\n          <div className=\"ml-2 max-w-full break-words break-all\">\n            <AlertTitle>{`${data.entity?.role || ''}`}</AlertTitle>\n            <AlertDescription onClick={isOverLimit ? handleOpenDetail : undefined}>\n              {isOverLimit ? `${content.slice(0, 990)}...` : content}\n              {isOverLimit ? (\n                <span className=\"float-right\">\n                  <LazyIcon name=\"chevron-right\" />\n                </span>\n              ) : undefined}\n            </AlertDescription>\n            {promptArguments?.length\n              ? promptArguments.map((argument, index) => {\n                  return (\n                    <Badge key={index} className=\"mt-2 mr-1\" variant=\"default\">\n                      {argument}\n                    </Badge>\n                  )\n                })\n              : undefined}\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","export const formatBytes = (bytes?: number) => {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n  if (bytes === undefined) return 'Unknown size'\n  if (bytes === 0) return '0 Byte'\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return `${Math.round(bytes / Math.pow(1024, i))} ${sizes[i]}`\n}\n","import dayjs from 'dayjs'\nimport { memo, useCallback, useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\n// import { Bar, XAxis, CartesianGrid, BarChart } from 'recharts'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from 'src/lib/shadcn/ui/card'\n// import {\n//   ChartConfig,\n//   ChartContainer,\n//   ChartTooltip,\n//   ChartTooltipContent,\n// } from 'src/lib/shadcn/ui/chart'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { formatBytes } from 'src/utils/bytes-format'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useLocalLLMState } from 'src/services/local-llm'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\n\nexport const SessionInfoNode = memo(() => {\n  const { t } = useTranslation('flows')\n  const [cachedModdels, setCachedModels] =\n    useState<{ model_id: string; info: ModelRecord; isFunctionCalling: boolean }[]>()\n  const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [latestUpdate, setLatestUpdate] = useState<Date>()\n  const [usedBytes, setUsedBytes] = useState('')\n  const [, setCountInfo] = useState<\n    [\n      {\n        name: string\n        nodes: number\n        edges: number\n        llms?: number\n        threads?: number\n        prompts?: number\n        schemas?: number\n        tools?: number\n        vectorDatabases?: number\n        jsonlDatas?: number\n        csvDatas?: number\n      },\n    ]\n  >()\n\n  // const chartConfig = useMemo(() => {\n  //   return {\n  //     nodes: {\n  //       label: t('session_info_node.entities.nodes'),\n  //       color: '#2563eb', // Original color\n  //     },\n  //     edges: {\n  //       label: t('session_info_node.entities.edges'),\n  //       color: '#34d399', // New color\n  //     },\n  //     threads: {\n  //       label: t('session_info_node.entities.threads'),\n  //       color: '#fbbf24', // New color\n  //     },\n  //     llms: {\n  //       label: t('session_info_node.entities.llms'),\n  //       color: '#f87171', // New color\n  //     },\n  //     prompts: {\n  //       label: t('session_info_node.entities.prompts'),\n  //       color: '#a78bfa', // New color\n  //     },\n  //     tools: {\n  //       label: t('session_info_node.entities.tools'),\n  //       color: '#ffcccb', // Lighter and more colorful\n  //     },\n  //     schemas: {\n  //       label: t('session_info_node.entities.schemas'),\n  //       color: '#ffb6c1', // Lighter and more colorful\n  //     },\n  //     vectorDatabases: {\n  //       label: t('session_info_node.entities.vector_databases'),\n  //       color: '#ff69b4', // Lighter and more colorful\n  //     },\n  //     jsonlDatas: {\n  //       label: t('session_info_node.entities.jsonl_data'),\n  //       color: '#ff1493', // Lighter and more colorful\n  //     },\n  //     csvDatas: {\n  //       label: t('session_info_node.entities.csv_data'),\n  //       color: '#db7093', // Lighter and more colorful\n  //     },\n  //   } satisfies ChartConfig\n  // }, [t])\n\n  useEffect(() => {\n    import('@mlc-ai/web-llm').then(({ functionCallingModelIds, prebuiltAppConfig }) => {\n      setCachedModels(\n        cachedLLMURLs?.map((url) => {\n          const item = prebuiltAppConfig.model_list.find((model) => url.includes(model.model))\n          if (!item) {\n            return\n          }\n          return {\n            model_id: item?.model_id || '',\n            info: item,\n            isFunctionCalling: functionCallingModelIds.includes(item?.model_id || ''),\n          }\n        }) as { model_id: string; info: ModelRecord; isFunctionCalling: boolean }[],\n      )\n    })\n  }, [cachedLLMURLs, currentSession?.id])\n\n  const fetchSessionInfo = useCallback(async () => {\n    navigator.storage.estimate().then((estimate) => {\n      if (estimate) {\n        setUsedBytes(\n          t('session_info_node.used_bytes', {\n            used: formatBytes(estimate.usage),\n            total: formatBytes(estimate?.quota),\n          }),\n        )\n      }\n    })\n    if (!currentSession?.id) {\n      return\n    }\n\n    Promise.all([\n      getRepository('FlowNode').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('FlowEdge').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Thread').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Prompt').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('LLM').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Schema').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('ToolDefinition').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('VectorDatabase').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('JSONLData').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('CSVData').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n    ]).then((response) => {\n      const maxUpdatedAt = response.reduce(\n        (acc, item) => {\n          if (item?.updated_at && (!acc || new Date(item.updated_at) > acc)) {\n            return new Date(item.updated_at)\n          }\n          return acc\n        },\n        currentSession.updated_at ? new Date(currentSession.updated_at) : undefined,\n      )\n      setLatestUpdate(maxUpdatedAt)\n    })\n\n    Promise.all([\n      getRepository('FlowNode').count({ where: { session_id: currentSession?.id } }),\n      getRepository('FlowEdge').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Thread').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Prompt').count({ where: { session_id: currentSession?.id } }),\n      getRepository('LLM').count({ where: { session_id: currentSession?.id } }),\n      getRepository('ToolDefinition').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Schema').count({ where: { session_id: currentSession?.id } }),\n      getRepository('VectorDatabase').count({ where: { session_id: currentSession?.id } }),\n      getRepository('JSONLData').count({ where: { session_id: currentSession?.id } }),\n      getRepository('CSVData').count({ where: { session_id: currentSession?.id } }),\n    ]).then(\n      ([\n        nodes,\n        edges,\n        threads,\n        prompts,\n        llms,\n        tools,\n        schemas,\n        vectorDatabases,\n        jsonlDatas,\n        csvDatas,\n      ]) => {\n        setCountInfo([\n          {\n            name: t('session_info_node.count_info.title'),\n            nodes: nodes || 0,\n            edges: edges || 0,\n            threads: threads || 0,\n            prompts: prompts || 0,\n            llms: llms || 0,\n            tools: tools || 0,\n            schemas: schemas || 0,\n            vectorDatabases: vectorDatabases || 0,\n            jsonlDatas: jsonlDatas || 0,\n            csvDatas: csvDatas || 0,\n          },\n        ])\n      },\n    )\n  }, [currentSession?.id, currentSession?.updated_at, t])\n\n  const handleReload = useCallback(() => {\n    fetchSessionInfo()\n  }, [fetchSessionInfo])\n\n  useEffect(() => {\n    fetchSessionInfo()\n  }, [fetchSessionInfo])\n  return (\n    <Card className=\"w-96\">\n      <CardHeader>\n        <CardTitle>{t('session_info_node.title')}</CardTitle>\n        <CardDescription>\n          {latestUpdate || currentSession?.updated_at\n            ? dayjs(latestUpdate || currentSession?.updated_at).fromNow()\n            : ''}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-4\">\n        <div className=\"flex items-center space-x-4 rounded-md border p-4\">\n          <div className=\"flex-1 space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">{t('session_info_node.disk_size')}</p>\n            <p className=\"text-sm text-muted-foreground\">{usedBytes}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4 rounded-md border p-4\">\n          <div className=\"flex-1 space-y-1\">\n            <div className=\"text-sm font-medium leading-none\">\n              {t('session_info_node.cached_llms')}\n              <Badge className=\"ml-2\">{cachedModdels?.length || 0}</Badge>\n            </div>\n            {cachedModdels?.map((llm) => (\n              <div key={llm?.model_id} className=\"text-sm text-muted-foreground gap-1\">\n                {llm?.model_id}\n                <div className=\"max-w-full gap-1 flex flex-wrap mt-1\">\n                  <LLMInfo\n                    model={llm?.info}\n                    isFunctionCalling={llm?.isFunctionCalling || false}\n                    isCached={true}\n                    cloud={false}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div>\n          {/* Production build failed */}\n          {/* <ChartContainer config={chartConfig} className=\"min-h-28 w-full\">\n            <BarChart accessibilityLayer data={countInfo}>\n              <CartesianGrid vertical={false} />\n              <XAxis dataKey=\"name\" tickLine={false} tickMargin={10} axisLine={false} />\n              <ChartTooltip content={<ChartTooltipContent />} />\n              {Object.entries(chartConfig).map(([key]) => (\n                <Bar key={key} dataKey={key} fill={'#ffb6c1'} radius={4} />\n              ))}\n            </BarChart>\n          </ChartContainer> */}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\" onClick={handleReload}>\n          <LazyIcon size={24} name={'refresh-ccw'} />\n          {t('session_info_node.reload')}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useEffect, useRef } from 'react'\nimport { Position, useInternalNode } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useFlowState } from 'src/states/flow'\nimport { convertToTypeScriptInterface, convertToZodSchemaString } from 'src/utils/schema-format'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from 'src/lib/shadcn/ui/tabs'\nimport { Card } from 'src/lib/shadcn/ui/card'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { SchemaNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const SchemaNode = memo((props: SchemaNodeProps) => {\n  const { t } = useTranslation('flows')\n  const { id, data, isConnectable } = props\n  const loadingRef = useRef(false)\n  const node = useInternalNode(id)\n  const updateNodes = useFlowState((state) => state.updateNodes)\n\n  useConnectionToHandler(id)\n\n  useEffect(() => {\n    const schema = data?.entity\n    if (!schema || !node || loadingRef.current || schema?.schema_items?.length || data.loaded)\n      return\n\n    loadingRef.current = true\n    getRepository('SchemaItem')\n      .find({\n        where: {\n          schema_id: schema.id,\n        },\n      })\n      .then((schemaItems) => {\n        updateNodes([\n          {\n            id: node.id,\n            type: 'replace',\n            item: {\n              ...node,\n              data: {\n                ...(node?.data || {}),\n                loaded: true,\n                entity: {\n                  ...data.entity,\n                  schema_items: schemaItems,\n                },\n              },\n            },\n          },\n        ])\n      })\n      .finally(() => {\n        loadingRef.current = false\n      })\n  }, [data.entity, data.loaded, node, updateNodes])\n\n  return (\n    <div>\n      <div>\n        <NodeHeader id={id} />\n        <Tabs defaultValue=\"account\" className=\"w-[400px]\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"account\">{t('schema_node.typescript')}</TabsTrigger>\n            <TabsTrigger value=\"password\">{t('schema_node.zod')}</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"account\">\n            <Card className=\"p-4\">\n              <pre className=\"overflow-hidden break-words whitespace-pre-wrap\">\n                {convertToTypeScriptInterface(data?.entity?.schema_items || [])}\n              </pre>\n            </Card>\n          </TabsContent>\n          <TabsContent value=\"password\">\n            <Card className=\"p-4 max-w-full\">\n              <pre className=\"overflow-hidden break-words whitespace-pre-wrap\">\n                {convertToZodSchemaString(data?.entity?.schema_items || [])}\n              </pre>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useMemo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardContent, CardHeader } from 'src/lib/shadcn/ui/card'\nimport { decodeLine, decodeSplitter } from 'src/utils/string-data'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { CSVDataNodeProps } from './type'\n\nexport const CSVDataNode = memo((props: CSVDataNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  const csv = useMemo(() => {\n    if (!data?.entity) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const lines = decodeLine(data.entity.csv)\n\n    return {\n      headers: decodeSplitter(data.entity.headers),\n      rows: lines.map((row) => decodeSplitter(row)),\n    }\n  }, [data?.entity])\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Card className=\"min-w-32 min-h-16 p-4\">\n          <CardHeader className=\"!p-0\">\n            <div className=\"pt-2 flex !flex-row\">\n              <LazyIcon name=\"file-spreadsheet\" className=\"mr-2\" />\n              <Label className=\"!font-medium leading-none tracking-tight pr-8\">\n                {FlowNodeTypeEnum.CSVData} {csv?.rows?.length ? `(${csv?.rows?.length || 0})` : ''}\n              </Label>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pb-0\">\n            <DataViewer data={csv.rows} headers={csv.headers} />\n          </CardContent>\n        </Card>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          source?.type === FlowNodeTypeEnum.Schema &&\n          target?.type === FlowNodeTypeEnum.ToolDefinition\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { ToolNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ToolNode = memo(({ id, data, isConnectable }: ToolNodeProps) => {\n  useConnectionToHandler(id)\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <Alert className=\"flex justify-center\">\n          <LazyIcon size={24} name=\"wrench\" />\n          <div className=\"ml-2\">\n            <AlertTitle>{`${data.entity?.name || ''}`}</AlertTitle>\n            <AlertDescription>{`${data.entity?.description || ''}`}</AlertDescription>\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LazyIcon from './LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Popover, PopoverContent, PopoverTrigger } from 'src/lib/shadcn/ui/popover'\nimport { cn } from 'src/lib/utils'\nimport { Alert } from 'src/lib/shadcn/ui/alert'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { LLMProviderEnum } from 'src/services/database/types'\nimport { GOOGLE_GENERATIVE_AI_API_KEY_LINK, OPEN_AI_API_KEY_LINK } from 'src/constants/llm'\nimport { useConfirmPassphrase } from 'src/hooks/mutations/use-confirm-passphrase'\nimport secureSession from 'src/utils/secure-session'\nimport { decryptSymmetric } from 'src/utils/aes'\n\nexport const EmbeddingSetting = memo(\n  (props: {\n    name?: string\n    className?: string\n    encrypted?: Record<string, unknown>\n    options?: Record<string, unknown>\n    supportedProviders?: string[]\n    onChangeOptions?: (\n      options: Record<string, unknown>,\n      encrypted?: Record<string, unknown>,\n    ) => Promise<void>\n  }) => {\n    const [show, setShow] = useState(false)\n    const [options, setOptions] = useState<Record<string, unknown>>({})\n    const [encrypted, setEncrypted] = useState<Record<string, unknown>>({})\n    const { confirmPassphrase } = useConfirmPassphrase()\n    const { t } = useTranslation('atoms')\n\n    const handleOpenChange = async () => {\n      if (!show) {\n        if (Object.keys(props.encrypted || {})?.length) {\n          await confirmPassphrase()\n          const decrypted: Record<string, unknown> = {}\n          const passphrase = await secureSession.get('passphrase')\n          if (!passphrase) {\n            throw new Error('Passphrase is not found')\n          }\n          await Promise.all(\n            Object.keys(props.encrypted || {}).map(async (key) => {\n              if (props.encrypted?.[key]) {\n                decrypted[key] = await decryptSymmetric(\n                  props.encrypted?.[key] as string,\n                  passphrase!,\n                )\n              }\n            }),\n          )\n          setEncrypted(decrypted || {})\n        }\n        setOptions({ ...props.options })\n      } else {\n        setOptions({})\n        setEncrypted({})\n      }\n      setShow(!show)\n    }\n\n    const hanleSubmit = () => {\n      props.onChangeOptions?.(options || {}, encrypted || {})\n      setShow(false)\n    }\n\n    return (\n      <div className={cn('min-w-20 flex justify-end', props.className)}>\n        <Popover open={show} onOpenChange={setShow}>\n          <PopoverTrigger>\n            <div className=\"flex justify-end gap-2 !cursor-pointer\">\n              <Button\n                onClick={handleOpenChange}\n                variant=\"link\"\n                className=\"flex items-center px-0 !cursor-pointer\"\n              >\n                <LazyIcon name=\"settings\" />\n                <Label>{t('embedding_setting.title')}</Label>\n              </Button>\n            </div>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-full p-0\">\n            {show ? (\n              <Card className=\"!border-none max-w-96 min-w-56\">\n                <CardHeader>\n                  <CardTitle>{t('embedding_setting.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Label>{t('embedding_setting.provider')}:</Label>\n                  <Select\n                    value={options?.provider ? `${options?.provider}` : 'local_transformers'}\n                    onValueChange={(value) => setOptions({ provider: value })}\n                  >\n                    <SelectTrigger className=\"\">\n                      <SelectValue placeholder={t('embedding_setting.provider_placeholder')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem key=\"local_transformers\" value=\"local_transformers\">\n                        {t('embedding_setting.providers.local_transformers')}\n                      </SelectItem>\n                      {props.supportedProviders?.map((provider) => (\n                        <SelectItem key={provider} value={provider}>\n                          {t(`embedding_setting.providers.${provider.toLowerCase()}`)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {!props.supportedProviders?.length ? (\n                    <Label className=\"text-red-500 !pt-2\">\n                      {t('embedding_setting.alerts.no_provider')}\n                    </Label>\n                  ) : undefined}\n                  <>\n                    {options.provider && options.provider !== 'local_transformers' ? (\n                      <>\n                        <Alert variant=\"destructive\" className=\"mt-4\">\n                          {t('embedding_setting.alerts.session_passkey')}\n                        </Alert>\n                        <div className=\"mt-4\">\n                          <Label>{t('embedding_setting.encrypted_fields.api_key')}</Label>\n                          <Button variant=\"link\" className=\"px-1\">\n                            <a\n                              href={\n                                options.provider === LLMProviderEnum.OpenAI\n                                  ? OPEN_AI_API_KEY_LINK\n                                  : GOOGLE_GENERATIVE_AI_API_KEY_LINK\n                              }\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                            >\n                              (\n                              {options.provider === LLMProviderEnum.OpenAI\n                                ? OPEN_AI_API_KEY_LINK\n                                : GOOGLE_GENERATIVE_AI_API_KEY_LINK}\n                              )\n                            </a>\n                          </Button>\n                          <Input\n                            type=\"password\"\n                            value={encrypted?.key ? `${encrypted?.key}` : ''}\n                            onChange={(e) =>\n                              setEncrypted((pre) => ({\n                                ...pre,\n                                key: e.target.value,\n                              }))\n                            }\n                          />\n                        </div>\n                      </>\n                    ) : undefined}\n                  </>\n                </CardContent>\n                <CardFooter className=\"flex justify-end\">\n                  <Button variant=\"secondary\" onClick={hanleSubmit}>\n                    {t('embedding_setting.save')}\n                  </Button>\n                </CardFooter>\n              </Card>\n            ) : undefined}\n          </PopoverContent>\n        </Popover>\n      </div>\n    )\n  },\n)\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node }) => {\n      return {\n        deleteEdgeId: edgeId,\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { useCallback, useEffect } from 'react'\nimport { NodeChange, useInternalNode, useNodes, Node } from '@xyflow/react'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { SYSTEM_NODE_IDS } from 'src/constants/nodes'\nimport secureSession from 'src/utils/secure-session'\nimport { encryptSymmetric } from 'src/utils/aes'\nimport { useConfirmOrCreatePassphrase } from 'src/hooks/mutations/use-confirm-or-create-passphrase'\n\nexport const useActions = (id: string) => {\n  const currentSessionId = useSessionState((state) => state.currentSession?.id)\n  const node = useInternalNode(id)\n  const nodes = useNodes()\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { confirmOrCreatePassphrase } = useConfirmOrCreatePassphrase()\n\n  const changeLLMOptions = useCallback(\n    async (input: Record<string, unknown>, inputEncrypted?: Record<string, unknown>) => {\n      if (node && currentSessionId) {\n        let flowNode =\n          id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL\n            ? await getRepository('FlowNode').findOne({\n                where: { id },\n              })\n            : undefined\n\n        const encrypted: Record<string, unknown> = {}\n        if (Object.keys(inputEncrypted || {})?.length) {\n          await confirmOrCreatePassphrase()\n          const passphrase = await secureSession.get('passphrase')\n          if (!passphrase) {\n            throw new Error('Passphrase is not found')\n          }\n          await Promise.all(\n            Object.keys(inputEncrypted || {}).map(async (key) => {\n              if (inputEncrypted?.[key]) {\n                encrypted[key] = await encryptSymmetric(inputEncrypted[key] as string, passphrase!)\n              }\n            }),\n          )\n        }\n        let flowNodePlaceholder: FlowNodePlaceholder | undefined\n        const changes: NodeChange<Node>[] = []\n        if (!flowNode) {\n          changes.push({ id, type: 'remove' })\n          flowNodePlaceholder = await getRepository('FlowNodePlaceholder').save({\n            placeholder_type: FlowNodePlaceholderTypeEnum.DEFAULT_EMBEDDING_MODEL,\n            encrypted,\n            data: input,\n            session_id: currentSessionId,\n          })\n          flowNode = await getRepository('FlowNode').save({\n            node_type: FlowNodeTypeEnum.DefaultEmbeddingModel,\n            session_id: currentSessionId,\n            source_type: 'FlowNodePlaceholder',\n            source_id: flowNodePlaceholder.id,\n            x: node.position.x,\n            y: node.position.y,\n          })\n          changes.push({ type: 'add', item: node })\n        } else {\n          await getRepository('FlowNodePlaceholder').update(flowNode.source_id, {\n            encrypted,\n            data: input,\n          })\n          flowNodePlaceholder = await getRepository('FlowNodePlaceholder').findOne({\n            where: { id: flowNode.source_id },\n          })\n          changes.push({ id: flowNode.id, type: 'replace', item: node })\n        }\n        node.data.entity = flowNodePlaceholder\n        node.data.flowNode = flowNode\n        updateNodes(changes)\n      }\n    },\n    [confirmOrCreatePassphrase, currentSessionId, id, node, updateNodes],\n  )\n\n  useEffect(() => {\n    if (id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL) return\n\n    const embeddingNode = nodes.find(\n      (n) =>\n        n.type === FlowNodeTypeEnum.DefaultEmbeddingModel &&\n        n.id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL,\n    )\n    if (embeddingNode) {\n      updateNodes([{ id, type: 'remove' as const }])\n    }\n  }, [id, nodes, updateNodes])\n\n  return {\n    changeLLMOptions,\n  }\n}\n","import { memo } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Position } from '@xyflow/react'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { EmbeddingSetting } from 'src/components/atoms/EmbeddingSetting'\nimport { LLMProviderEnum } from 'src/services/database/types'\nimport { DEFAULT_EMBEDDING_MODEL } from 'src/constants/embedding'\n\nimport { EmbeddingNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\n\nexport const EmbeddingNode = memo((props: EmbeddingNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { changeLLMOptions } = useActions(id)\n\n  useConnectionToHandler(id)\n\n  let model = 'brain'\n  let modelName = DEFAULT_EMBEDDING_MODEL\n  switch (`${data?.entity?.data?.provider}`) {\n    case LLMProviderEnum.OpenAI:\n      model = 'gpt'\n      modelName = 'text-embedding-3-small'\n      break\n    case LLMProviderEnum.GoogleGenerativeAI:\n      model = 'gemma'\n      modelName = 'text-embedding-004'\n      break\n  }\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <Alert className=\"flex justify-center max-w-auto\" variant=\"default\">\n          <LLMIcon name={model} className=\"w-7 h-7\" />\n          <div className=\"ml-2 pr-4 flex justify-center gap-1 flex-col\">\n            <div className=\"min-h-8 flex items-center\">\n              <AlertTitle>{`${modelName || ''}`}</AlertTitle>\n            </div>\n            <EmbeddingSetting\n              supportedProviders={[LLMProviderEnum.OpenAI, LLMProviderEnum.GoogleGenerativeAI]}\n              onChangeOptions={changeLLMOptions}\n              encrypted={data.entity?.encrypted}\n              options={data.entity?.data}\n            />\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { Node } from '@xyflow/react'\nimport type { Document } from '@langchain/core/documents'\nimport { useTranslation } from 'react-i18next'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from 'src/lib/shadcn/ui/dialog'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useCreatePrompt } from 'src/hooks/flows/mutations/use-create-prompt'\nimport { Prompt } from 'src/services/database/types'\nimport PromptForm from 'src/components/molecules/CreatePromptCard/PromptForm'\nimport { useToast } from 'src/lib/hooks/use-toast'\n\nconst DEFAULT_PROMPT = `Use the following pieces of context to answer the question at the end.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\nUse three sentences maximum and keep the answer as concise as possible.\n\n{context}\n`\n\ntype CreateVectorDatabasePromptProps = {\n  className: string\n  source: Node\n  documents: Document[]\n}\n\nconst CreateVectorDatabasePromptDialog = create<CreateVectorDatabasePromptProps>((props) => {\n  const { source, documents } = props\n  const currentModal = useModal()\n  const { toast } = useToast()\n  const { t } = useTranslation('dialogs')\n  const { loading, createPrompt } = useCreatePrompt()\n\n  const handleSubmit = async (data: Partial<Prompt>) => {\n    try {\n      if (!data.content || !data.content.includes(`{context}`)) {\n        toast({\n          title: t('create_vector_database_prompt.errors.fill_context'),\n          variant: 'destructive',\n        })\n        return\n      }\n      // NOTE: No need to use Prompt template because it will automatically added role prefix\n      const content = data.content.replace(\n        '{context}',\n        documents.map((doc) => `<document>${doc.pageContent}</document>`).join('\\n'),\n      )\n      await createPrompt(source, {\n        ...data,\n        content,\n      })\n      currentModal.hide()\n      return true\n    } catch {\n      toast({\n        title: t('create_vector_database_prompt.errors.create_failed'),\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <div className=\"flex\">\n            <LazyIcon name=\"file\" className=\"mr-2 h-4 w-4\" />\n            <DialogTitle>{t('create_vector_database_prompt.title')}</DialogTitle>\n          </div>\n        </DialogHeader>\n        <div className=\"flex gap-4 py-4 flex-col\">\n          <PromptForm\n            onSubmit={handleSubmit}\n            loading={loading}\n            hidePromptType\n            defaultPromptRole=\"system\"\n            defaultPromptContent={DEFAULT_PROMPT}\n          />\n          <div className=\"w-full border-0 text-gray-700 flex text-sm items-center\">\n            <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n            {t('create_vector_database_prompt.fill_content_note')}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default CreateVectorDatabasePromptDialog\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  PromptTypeEnum,\n  VectorDatabase,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateVectorDatabaseRetriever = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createVectorDatabaseRetriever = useCallback(\n    async ({\n      prompt,\n      source,\n      metadata,\n    }: {\n      source: Node\n      prompt?: Partial<Prompt>\n      metadata?: Record<string, unknown>\n    }) => {\n      try {\n        const vectorDatabase = source?.data?.entity as VectorDatabase\n        if (!vectorDatabase || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const systempPrompt = await getRepository('Prompt').save({\n          ...prompt,\n          status: prompt?.status || MessageStatusEnum.Started,\n          role: prompt?.role || MessageRoleEnum.System,\n          type: prompt?.type || PromptTypeEnum.Chat,\n          content: prompt?.content || '{context}',\n          session_id: sessionId,\n        })\n        if (!systempPrompt) {\n          throw new Error('Failed to save prompt')\n        }\n        const systemPromptNode = await createOrUpdateFlowNode({\n          source_id: systempPrompt.id,\n          source_type: 'Prompt',\n          node_type: FlowNodeTypeEnum.Prompt,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!systemPromptNode) {\n          throw new Error('Failed to save prompt node')\n        }\n        const retriever = await getRepository('FlowNodePlaceholder').save({\n          placeholder: `Retriever for ${vectorDatabase.name}`,\n          placeholder_type: FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER,\n          session_id: sessionId,\n          metadata,\n        })\n        if (!retriever) {\n          throw new Error('Failed to save node placeholder')\n        }\n        const retrieverNode = await createOrUpdateFlowNode({\n          source_id: retriever.id,\n          source_type: 'FlowNodePlaceholder',\n          node_type: FlowNodeTypeEnum.PlaceHolder,\n          x: initialX,\n          y: initialY + 40,\n        })\n        if (!retrieverNode) {\n          throw new Error('Failed to save node placeholder node')\n        }\n        await createOrUpdateFlowEdge({\n          source: systemPromptNode.id,\n          target: retrieverNode.id,\n        })\n        await createOrUpdateFlowEdge({\n          source: source.id,\n          target: retrieverNode.id,\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createVectorDatabaseRetriever,\n  }\n}\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { Node } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from 'src/lib/shadcn/ui/dialog'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Prompt } from 'src/services/database/types'\nimport PromptForm from 'src/components/molecules/CreatePromptCard/PromptForm'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { useCreateVectorDatabaseRetriever } from 'src/hooks/flows/mutations/use-create-vector-database-retriever'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useState } from 'react'\n\nconst DEFAULT_PROMPT = `Use the following pieces of context to answer the question at the end.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}\n`\n\ntype CreateVectorDatabaseRetrieverDialogProps = {\n  className: string\n  source: Node\n}\n\nconst CreateVectorDatabaseRetrieverDialog = create<CreateVectorDatabaseRetrieverDialogProps>(\n  (props) => {\n    const { source } = props\n    const currentModal = useModal()\n    const { toast } = useToast()\n    const { t } = useTranslation('dialogs')\n    const [k, setK] = useState<number | undefined>(1)\n    const [minimalScore, setMinimalScore] = useState<number | undefined>(undefined)\n    const { loading, createVectorDatabaseRetriever } = useCreateVectorDatabaseRetriever()\n\n    const handleSubmit = async (data: Partial<Prompt>) => {\n      try {\n        const content = data.content\n        if (!content || !content.includes(`{context}`)) {\n          toast({\n            title: t('create_vector_database_retriever.errors.fill_context'),\n            variant: 'destructive',\n          })\n          return\n        }\n        await createVectorDatabaseRetriever({\n          source,\n          prompt: {\n            content: content,\n          },\n          metadata: {\n            k,\n            minimalScore,\n          },\n        })\n        setK(1)\n        setMinimalScore(undefined)\n        currentModal.hide()\n        return true\n      } catch {\n        toast({\n          title: t('create_vector_database_retriever.errors.create_failed'),\n          variant: 'destructive',\n        })\n      }\n    }\n\n    const handleOnChangeK = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setK(e.target.value ? Number(e.target.value) : undefined)\n    }\n\n    const handleOnChangeMinimalScore = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setMinimalScore(e.target.value ? Number(e.target.value) : undefined)\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <div className=\"flex\">\n              <LazyIcon name=\"file\" className=\"mr-2 h-4 w-4\" />\n              <DialogTitle>{t('create_vector_database_retriever.title')}</DialogTitle>\n            </div>\n          </DialogHeader>\n          <div className=\"flex gap-4 py-4 flex-col\">\n            <PromptForm\n              onSubmit={handleSubmit}\n              loading={loading}\n              hidePromptType\n              defaultPromptRole=\"system\"\n              defaultPromptContent={DEFAULT_PROMPT}\n            />\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('create_vector_database_retriever.retriever_settings')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Label>{t('create_vector_database_retriever.retriever_k')}</Label>\n                <Input\n                  value={k || ''}\n                  type=\"number\"\n                  onChange={handleOnChangeK}\n                  placeholder={t('create_vector_database_retriever.retriever_k_placeholder')}\n                />\n                <Label>{t('create_vector_database_retriever.retriever_minimum_score')}</Label>\n                <Input\n                  value={minimalScore || ''}\n                  type=\"number\"\n                  onChange={handleOnChangeMinimalScore}\n                  placeholder={t(\n                    'create_vector_database_retriever.retriever_minimum_score_placeholder',\n                  )}\n                />\n              </CardContent>\n            </Card>\n            <div className=\"w-full border-0 text-gray-700 flex text-sm items-center\">\n              <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n              {t('create_vector_database_retriever.fill_content_note')}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateVectorDatabaseRetrieverDialog\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\nimport { useFlowState } from 'src/states/flow'\nimport { CSVData, FlowNodeTypeEnum, VectorDatabase } from 'src/services/database/types'\nimport { decodeCSVData } from 'src/utils/string-data'\nimport { Document } from '@langchain/core/documents'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n  const { index: indexFunction } = useEmbedding()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, target, source }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        const targetEntity = target?.data?.entity as VectorDatabase\n        if (\n          source?.type === FlowNodeTypeEnum.CSVData &&\n          target?.type === FlowNodeTypeEnum.VectorDatabase\n        ) {\n          const csvData = source?.data?.entity as CSVData\n          if (!csvData || !targetEntity) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          const { rows } = decodeCSVData(csvData.headers, csvData.csv)\n          const documents = rows.map(\n            (row) =>\n              new Document({\n                pageContent: `${row.text}`,\n              }),\n          )\n          await indexFunction(\n            getFlowEmbeddingEntity(),\n            {\n              database: {\n                databaseId: targetEntity.id,\n                dataSourceId: csvData.id,\n                dataSourceType: 'CSVData',\n              },\n            },\n            documents,\n          )\n          await createOrUpdateFlowEdge({\n            source: source.id,\n            target: target.id,\n          })\n          return\n        }\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge, getFlowEmbeddingEntity, indexFunction],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { Document } from '@langchain/core/documents'\nimport chunk from 'lodash/chunk'\nimport { useReactFlow } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { getRepository } from 'src/services/database'\nimport type { VectorDatabase } from 'src/services/database/types'\nimport {\n  FlowNodeTypeEnum,\n  CSVData,\n  JSONData,\n  JSONLData,\n  VectorDatabaseStorageEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getStorageDataSource } from 'src/utils/vector-storage'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\nexport const useActions = (id: string) => {\n  const [loading, setLoading] = useState(false)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n\n  const { getNode, getHandleConnections } = useReactFlow()\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n  const { index: indexFunction, similaritySearchWithScore: similaritySearchWithScoreFunction } =\n    useEmbedding()\n  const similaritySearchWithScore = useCallback(\n    async (input: string, options?: { k?: number }) => {\n      try {\n        const vectorDatabaseNode = getNode(id)\n        if (!vectorDatabaseNode) {\n          return\n        }\n        const entity = vectorDatabaseNode.data?.entity as VectorDatabase\n        if (!entity) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n        const embbedingEntity = getFlowEmbeddingEntity()\n        if (entity.storage === VectorDatabaseStorageEnum.DataNode) {\n          const connections = getHandleConnections({\n            nodeId: id,\n            type: 'target',\n          })\n          const dataSourceNode = connections\n            .map((connection) => getNode(connection.source))\n            .find(\n              (node) =>\n                node?.type &&\n                [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                  node?.type as FlowNodeTypeEnum,\n                ),\n            )\n          const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n          if (!dataSource) {\n            toast({\n              variant: 'destructive',\n              title: t('vector_database_node.errors.data_node_not_found'),\n            })\n            return\n          }\n          setLoading(true)\n          const result = await similaritySearchWithScoreFunction(\n            embbedingEntity,\n            {\n              database: {\n                databaseId: entity.id,\n                dataSourceId: dataSource.id,\n                dataSourceType: getStorageDataSource(dataSource),\n              },\n            },\n            input,\n            options?.k,\n          )\n          return result\n        } else {\n          setLoading(true)\n          const result = await similaritySearchWithScoreFunction(\n            embbedingEntity,\n            {\n              database: {\n                databaseId: entity.id,\n              },\n            },\n            input,\n            options?.k,\n          )\n          return result\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [\n      getNode,\n      id,\n      getFlowEmbeddingEntity,\n      toast,\n      t,\n      getHandleConnections,\n      similaritySearchWithScoreFunction,\n    ],\n  )\n\n  const indexData = useCallback(\n    async (\n      data: { id?: string; content?: string; documents?: Document[] },\n      options?: {\n        onProgressReport?: (info: { total: number; handled: number; handling: number }) => void\n      },\n    ) => {\n      try {\n        const vectorDatabaseNode = getNode(id)\n        if (!vectorDatabaseNode) {\n          return\n        }\n        setLoading(true)\n        const documents = data.content\n          ? [\n              new Document({\n                pageContent: data.content,\n                id: data.id,\n                metadata: {\n                  id: data.id,\n                },\n              }),\n            ]\n          : data.documents\n\n        if (!documents?.length) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.content_not_found'),\n          })\n          return\n        }\n\n        const entity = vectorDatabaseNode.data?.entity as VectorDatabase\n        if (!entity || !vectorDatabaseNode) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n\n        const embbedingEntity = getFlowEmbeddingEntity()\n\n        if (entity.storage === VectorDatabaseStorageEnum.DataNode) {\n          const connections = getHandleConnections({\n            nodeId: id,\n            type: 'target',\n          })\n          const dataSourceNode = connections\n            .map((connection) => getNode(connection.source))\n            .find(\n              (node) =>\n                node?.type &&\n                [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                  node?.type as FlowNodeTypeEnum,\n                ),\n            )\n\n          const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n          if (!dataSource) {\n            toast({\n              variant: 'destructive',\n              title: t('vector_database_node.errors.data_node_not_found'),\n            })\n            return\n          }\n          const dataSourceType = getStorageDataSource(dataSource)\n\n          const chunkedDocuments = chunk(documents, 10)\n          let handledCount = 0\n\n          for (const partDocuments of chunkedDocuments) {\n            options?.onProgressReport?.({\n              handling: partDocuments.length,\n              handled: handledCount,\n              total: documents.length,\n            })\n            await indexFunction(\n              embbedingEntity,\n              {\n                database: {\n                  databaseId: entity.id,\n                  dataSourceId: dataSource.id,\n                  dataSourceType,\n                },\n              },\n              partDocuments,\n            )\n            if (dataSourceType && dataSourceNode) {\n              const updatedDataNode = await getRepository(dataSourceType).findOne({\n                where: { id: dataSource.id },\n              })\n              updateNodes([\n                {\n                  type: 'replace',\n                  id: dataSourceNode.id,\n                  item: {\n                    ...dataSourceNode,\n                    data: {\n                      ...dataSourceNode.data,\n                      entity: updatedDataNode,\n                    },\n                  },\n                },\n              ])\n            }\n            handledCount += partDocuments.length\n          }\n        } else {\n          // DEFAULT OPTION IS INDEXING AND STORED DIRECTLY TO VECTOR DATABASE ENTITY\n          const chunkedDocuments = chunk(documents, 10)\n          let handledCount = 0\n\n          for (const partDocuments of chunkedDocuments) {\n            options?.onProgressReport?.({\n              handling: partDocuments.length,\n              handled: handledCount,\n              total: documents.length,\n            })\n            await indexFunction(\n              embbedingEntity,\n              {\n                database: {\n                  databaseId: entity.id,\n                },\n              },\n              partDocuments,\n            )\n            const updatedDataNode = await getRepository('VectorDatabase').findOne({\n              where: { id: `${entity.id}` },\n            })\n            updateNodes([\n              {\n                type: 'replace',\n                id: vectorDatabaseNode.id,\n                item: {\n                  ...vectorDatabaseNode,\n                  data: {\n                    ...vectorDatabaseNode.data,\n                    entity: updatedDataNode,\n                  },\n                },\n              },\n            ])\n            handledCount += partDocuments.length\n          }\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [\n      getNode,\n      id,\n      getFlowEmbeddingEntity,\n      toast,\n      t,\n      getHandleConnections,\n      indexFunction,\n      updateNodes,\n    ],\n  )\n\n  return {\n    loading,\n    indexData,\n    similaritySearchWithScore,\n  }\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport type { Document } from '@langchain/core/documents'\nimport { Position, useInternalNode } from '@xyflow/react'\nimport { WebPDFLoader } from '@langchain/community/document_loaders/web/pdf'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { useTranslation } from 'react-i18next'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from 'src/lib/shadcn/ui/tabs'\nimport { useModal } from '@ebay/nice-modal-react'\nimport CreatePromptDialog from 'src/components/dialogs/CreateVectorDatabasePromptDialog'\nimport CreateRetrieverDialog from 'src/components/dialogs/CreateVectorDatabaseRetrieverDialog'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { cn } from 'src/lib/utils'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { decodeLine } from 'src/utils/string-data'\n\nimport { VectorDatabaseNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\nimport { VectorSearch } from './components/VectorSearch'\nimport IndexNewText from './components/IndexNewText'\nimport IndexNewFile from './components/IndexNewFile'\n\nexport const VectorDatabaseNode = memo((props: VectorDatabaseNodeProps) => {\n  const { t } = useTranslation('flows')\n  const [progress, setProgress] = useState(0)\n  const [mode, setMode] = useState('search')\n  const node = useInternalNode(props.id)\n  const { id, data, isConnectable } = props\n  const { loading, similaritySearchWithScore, indexData } = useActions(id)\n\n  const createPromptDialog = useModal(CreatePromptDialog)\n  const createRetrieverDialog = useModal(CreateRetrieverDialog)\n\n  useConnectionToHandler(id)\n\n  const handleCreateData = useCallback(\n    async (...args: Parameters<typeof indexData>) => {\n      if (node) {\n        await indexData(...args)\n      }\n    },\n    [indexData, node],\n  )\n\n  const handleSimilaritySearch = useCallback(\n    async (value: string, k?: number) => {\n      const input = value.trim()\n      const documents = await similaritySearchWithScore(input, { k })\n      if (!documents?.length) {\n        return\n      }\n      return documents\n    },\n    [similaritySearchWithScore],\n  )\n\n  const handleCreatePrompt = useCallback(\n    (content: [Document, number][]) => {\n      createPromptDialog.show({\n        source: node,\n        documents: content.map(([doc]) => doc),\n      })\n    },\n    [createPromptDialog, node],\n  )\n\n  const handleCreateRetriever = useCallback(async () => {\n    createRetrieverDialog.show({\n      source: node,\n    })\n  }, [createRetrieverDialog, node])\n\n  const handleIndexPDF = useCallback(\n    async (file: File) => {\n      if (file.type.includes('text') || file.type.includes('txt')) {\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n          const content = e.target?.result as string\n          await handleCreateData({ content })\n        }\n        reader.readAsText(file)\n      } else if (file.type.endsWith('pdf')) {\n        // File to blob\n        const blob = new Blob([file], { type: 'application/pdf' })\n        const customBuildLoader = new WebPDFLoader(blob, {\n          // you may need to add `.then(m => m.default)` to the end of the import\n          pdfjs: async () => {\n            const pdfjs = await import('pdfjs-dist/legacy/build/pdf.min.mjs')\n            await import('pdfjs-dist/legacy/build/pdf.worker.min.mjs')\n            pdfjs.GlobalWorkerOptions.workerSrc = new URL(\n              'pdfjs-dist/build/pdf.worker.min.js',\n              import.meta.url,\n            ).toString()\n            return pdfjs\n          },\n          parsedItemSeparator: ' ',\n        })\n        const documents = await customBuildLoader.load()\n        await handleCreateData(\n          { documents },\n          {\n            onProgressReport: (info) => {\n              setProgress((info.handled + info.handling) / info.total)\n            },\n          },\n        )\n      }\n    },\n    [handleCreateData],\n  )\n\n  const vectorDatabaseData = useMemo(() => {\n    if (!data?.entity?.raw) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const headers = ['content', 'embedding', 'metadata']\n    const lines = decodeLine(data?.entity?.raw)\n    return {\n      headers,\n      rows: lines.map((row) => {\n        try {\n          const data = JSON.parse(row)\n          return data\n        } catch {\n          return []\n        }\n      }),\n    }\n  }, [data?.entity?.raw])\n\n  const renderContent = useMemo(() => {\n    switch (mode) {\n      case 'search':\n        return (\n          <TabsContent value=\"search\">\n            <VectorSearch\n              loading={loading}\n              onSimilaritySearch={handleSimilaritySearch}\n              onCreatePrompt={handleCreatePrompt}\n              onCreateRetriever={handleCreateRetriever}\n            />\n          </TabsContent>\n        )\n      case 'new':\n        return (\n          <TabsContent className=\"min-w-80\" value=\"new\">\n            <IndexNewText loading={loading} onCreateData={handleCreateData} />\n          </TabsContent>\n        )\n      case 'file':\n        return (\n          <TabsContent value=\"file\">\n            <IndexNewFile\n              loading={loading}\n              progress={progress}\n              onFileSubmit={handleIndexPDF}\n              fileOptions={{ accept: '.pdf,.txt,.text', maxSize: 15 }}\n            />\n          </TabsContent>\n        )\n      case 'view': {\n        return (\n          <TabsContent value=\"view\">\n            <DataViewer\n              data={vectorDatabaseData.rows}\n              headers={vectorDatabaseData.headers}\n              limitLengthByColumns={{\n                embedding: 32,\n              }}\n            />\n          </TabsContent>\n        )\n      }\n    }\n  }, [\n    handleCreateData,\n    handleCreatePrompt,\n    handleCreateRetriever,\n    handleIndexPDF,\n    handleSimilaritySearch,\n    loading,\n    mode,\n    progress,\n    vectorDatabaseData,\n  ])\n\n  return (\n    <div className=\"min-w-72\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"max-w-full\">\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center\" variant=\"default\">\n          <LazyIcon size={24} name={'database-zap'} />\n          <div className=\"ml-2 max-w-full\">\n            <AlertTitle>{`${data.entity?.name || ''}`}</AlertTitle>\n            <Tabs\n              value={mode}\n              onValueChange={setMode}\n              defaultValue=\"search\"\n              className={cn('w-full mt-4')}\n            >\n              <TabsList\n                className={cn(\n                  'grid w-full grid-cols-3',\n                  data.entity?.storage === VectorDatabaseStorageEnum.DatabaseNode\n                    ? 'grid-cols-4'\n                    : 'grid-cols-3',\n                )}\n              >\n                <TabsTrigger value=\"search\">{t('vector_database_node.search')}</TabsTrigger>\n                <TabsTrigger value=\"new\">{t('vector_database_node.text')}</TabsTrigger>\n                <TabsTrigger value=\"file\">{t('vector_database_node.file')}</TabsTrigger>\n                {data.entity?.storage === VectorDatabaseStorageEnum.DatabaseNode ? (\n                  <TabsTrigger value=\"view\">{t('vector_database_node.view')}</TabsTrigger>\n                ) : undefined}\n              </TabsList>\n              {renderContent}\n            </Tabs>\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useMemo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardContent, CardHeader } from 'src/lib/shadcn/ui/card'\nimport { decodeLine, decodeSplitter } from 'src/utils/string-data'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { JSONLDataNodeProps } from './type'\n\nconst LIMIT_LENGTH_BY_COLUMNS = {\n  embedding: 32,\n}\nexport const JSONLDataNode = memo((props: JSONLDataNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  const jsonl = useMemo(() => {\n    if (!data?.entity?.jsonl) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const headers = decodeSplitter(data.entity.headers || '')\n    const lines = decodeLine(data.entity.jsonl)\n    return {\n      headers,\n      rows: lines.map((row) => {\n        try {\n          const data = JSON.parse(row)\n          return data\n        } catch {\n          return []\n        }\n      }),\n    }\n  }, [data?.entity?.jsonl, data.entity.headers])\n\n  return (\n    <div className=\"min-w-80\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Card className=\"min-w-32 min-h-16 p-4\">\n          <CardHeader className=\"!p-0\">\n            <div className=\"pt-2 flex !flex-row\">\n              <LazyIcon name=\"file-json\" className=\"mr-2\" />\n              <Label className=\"!font-medium leading-none tracking-tight pr-8\">\n                {FlowNodeTypeEnum.JSONLData}{' '}\n                {jsonl?.rows?.length ? `(${jsonl?.rows?.length || 0})` : ''}\n              </Label>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pb-0\">\n            <DataViewer\n              data={jsonl.rows}\n              headers={jsonl.headers}\n              limitLengthByColumns={LIMIT_LENGTH_BY_COLUMNS}\n            />\n          </CardContent>\n        </Card>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","'use client'\n\nimport React, { PropsWithChildren, useRef } from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { motion, MotionValue, useMotionValue, useSpring, useTransform } from 'framer-motion'\n\nimport { cn } from 'src/lib/utils'\n\nexport interface DockProps extends VariantProps<typeof dockVariants> {\n  className?: string\n  magnification?: number\n  distance?: number\n  direction?: 'top' | 'middle' | 'bottom'\n  children: React.ReactNode\n}\n\nconst DEFAULT_MAGNIFICATION = 60\nconst DEFAULT_DISTANCE = 140\n\nconst dockVariants = cva(\n  'supports-backdrop-blur:bg-white/10 supports-backdrop-blur:dark:bg-black/10 mx-auto flex h-[58px] w-max gap-2 rounded-lg border p-2 backdrop-blur-md',\n)\n\nconst Dock = React.forwardRef<HTMLDivElement, DockProps>(\n  (\n    {\n      className,\n      children,\n      magnification = DEFAULT_MAGNIFICATION,\n      distance = DEFAULT_DISTANCE,\n      direction = 'bottom',\n      ...props\n    },\n    ref,\n  ) => {\n    const mouseX = useMotionValue(Infinity)\n\n    const renderChildren = () => {\n      return React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === DockIcon) {\n          return React.cloneElement(child, {\n            ...child.props,\n            mouseX: mouseX,\n            magnification: magnification,\n            distance: distance,\n          })\n        }\n        return child\n      })\n    }\n\n    return (\n      <motion.div\n        ref={ref}\n        onMouseMove={(e) => mouseX.set(e.pageX)}\n        onMouseLeave={() => mouseX.set(Infinity)}\n        {...props}\n        className={cn(dockVariants({ className }), {\n          'items-start': direction === 'top',\n          'items-center': direction === 'middle',\n          'items-end': direction === 'bottom',\n        })}\n      >\n        {renderChildren()}\n      </motion.div>\n    )\n  },\n)\n\nDock.displayName = 'Dock'\n\nexport interface DockIconProps {\n  size?: number\n  magnification?: number\n  distance?: number\n  mouseX?: MotionValue<number>\n  className?: string\n  children?: React.ReactNode\n  props?: PropsWithChildren\n}\n\nconst DockIcon = ({\n  magnification = DEFAULT_MAGNIFICATION,\n  distance = DEFAULT_DISTANCE,\n  mouseX,\n  className,\n  children,\n  ...props\n}: DockIconProps) => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  const distanceCalc = useTransform(mouseX || new MotionValue(), (val: number) => {\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 }\n\n    return val - bounds.x - bounds.width / 2\n  })\n\n  const widthSync = useTransform(distanceCalc, [-distance, 0, distance], [40, magnification, 40])\n\n  const width = useSpring(widthSync, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  })\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{ width }}\n      className={cn(\n        'flex aspect-square cursor-pointer items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nDockIcon.displayName = 'DockIcon'\n\nexport { Dock, DockIcon, dockVariants }\n","import * as React from \"react\";\nconst SvgVisualStudioCode = (props) => /* @__PURE__ */ React.createElement(\"svg\", { viewBox: \"0 0 256 254\", xmlns: \"http://www.w3.org/2000/svg\", xmlnsXlink: \"http://www.w3.org/1999/xlink\", width: 256, height: 254, preserveAspectRatio: \"xMidYMid\", ...props }, /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"c\", x1: \"50%\", x2: \"50%\", y1: \"0%\", y2: \"100%\" }, /* @__PURE__ */ React.createElement(\"stop\", { offset: \"0%\", stopColor: \"#FFF\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: \"100%\", stopColor: \"#FFF\", stopOpacity: 0 })), /* @__PURE__ */ React.createElement(\"path\", { id: \"a\", d: \"M180.828 252.605a15.872 15.872 0 0 0 12.65-.486l52.501-25.262a15.94 15.94 0 0 0 9.025-14.364V41.197a15.939 15.939 0 0 0-9.025-14.363l-52.5-25.263a15.877 15.877 0 0 0-18.115 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233 100.507 91.695a15.853 15.853 0 0 0 5.464 3.571Zm10.464-183.649-76.262 57.889 76.262 57.888V68.956Z\" })), /* @__PURE__ */ React.createElement(\"mask\", { id: \"b\", fill: \"#fff\" }, /* @__PURE__ */ React.createElement(\"use\", { xlinkHref: \"#a\" })), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#0065A9\", d: \"M246.135 26.873 193.593 1.575a15.885 15.885 0 0 0-18.123 3.08L3.466 161.482c-4.626 4.219-4.62 11.502.012 15.714l14.05 12.772a10.625 10.625 0 0 0 13.569.604L238.229 33.436c6.949-5.271 16.93-.315 16.93 8.407v-.61a15.938 15.938 0 0 0-9.024-14.36Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#007ACC\", d: \"m246.135 226.816-52.542 25.298a15.887 15.887 0 0 1-18.123-3.08L3.466 92.207c-4.626-4.218-4.62-11.502.012-15.713l14.05-12.773a10.625 10.625 0 0 1 13.569-.603l207.132 157.135c6.949 5.271 16.93.315 16.93-8.408v.611a15.939 15.939 0 0 1-9.024 14.36Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#1F9CF0\", d: \"M193.428 252.134a15.892 15.892 0 0 1-18.125-3.083c5.881 5.88 15.938 1.715 15.938-6.603V11.273c0-8.318-10.057-12.483-15.938-6.602a15.892 15.892 0 0 1 18.125-3.084l52.533 25.263a15.937 15.937 0 0 1 9.03 14.363V212.51c0 6.125-3.51 11.709-9.03 14.363l-52.533 25.262Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"url(#c)\", fillOpacity: 0.25, d: \"M180.828 252.605a15.874 15.874 0 0 0 12.65-.486l52.5-25.263a15.938 15.938 0 0 0 9.026-14.363V41.197a15.939 15.939 0 0 0-9.025-14.363L193.477 1.57a15.877 15.877 0 0 0-18.114 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233 100.506 91.695a15.857 15.857 0 0 0 5.465 3.571Zm10.464-183.65-76.262 57.89 76.262 57.888V68.956Z\" }));\nexport default SvgVisualStudioCode;\n","export default \"__VITE_ASSET__CAw3ne4Z__\"","import { FlowNodeTypeEnum } from 'src/services/database/types'\n\nexport const DEFAULT_NODE_SIZE: Partial<{\n  [key in FlowNodeTypeEnum]: { width: number; height: number }\n}> = {\n  [FlowNodeTypeEnum.Shape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.CircleShape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.TriangleShape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.EditorApp]: { width: 1240, height: 400 },\n}\n","import { useCallback, useState } from 'react'\nimport { useInternalNode } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\n\nimport { DEFAULT_NODE_SIZE } from '../constants'\n\nexport const useActions = (id: string) => {\n  const node = useInternalNode(id)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createNode = useCallback(\n    async (nodeType: FlowNodeTypeEnum) => {\n      try {\n        setLoading(true)\n        if (node && currentSession?.id) {\n          const initialX = node.position?.x || 0\n          const initialY = (node.position?.y || 0) + (node.measured?.height || 0)\n\n          const nodeData = await getRepository('FlowNodeData').save({\n            data: {},\n            session_id: currentSession.id,\n          })\n\n          if (!nodeData) {\n            throw new Error('Failed to save node data')\n          }\n\n          const newNode = await createOrUpdateFlowNode({\n            node_type: nodeType,\n            data: {},\n            source_id: nodeData.id,\n            source_type: 'FlowNodeData',\n            x: initialX,\n            y: initialY + 20,\n            ...(DEFAULT_NODE_SIZE[nodeType] || {}),\n          })\n          if (!newNode) {\n            throw new Error('Failed to save node')\n          }\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowNode, currentSession?.id, node],\n  )\n\n  return {\n    loading,\n    createNode,\n  }\n}\n","import { memo } from 'react'\n\nimport { Separator } from 'src/lib/shadcn/ui/separator'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { Dock, DockIcon } from 'src/lib/shadcn/ui/dock'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { NodeProps } from '@xyflow/react'\nimport VisualStudioCodeSvg from 'src/assets/svgs/visual-studio-code.svg?react'\nimport plateEditorIcon from 'src/assets/images/plate-editor.png'\nimport { useToast } from 'src/lib/hooks/use-toast'\n\nimport { useActions } from './hooks/use-actions'\n\nconst DATA = {\n  applications: [\n    {\n      key: FlowNodeTypeEnum.EditorApp,\n      image: plateEditorIcon,\n      label: 'application_bar.editor',\n    },\n    {\n      key: FlowNodeTypeEnum.VSLiteApp,\n      icon: VisualStudioCodeSvg,\n      label: 'application_bar.vslite',\n    },\n  ],\n  shapes: [\n    { key: FlowNodeTypeEnum.Shape, icon: 'square' as const, label: 'application_bar.square' },\n    { key: FlowNodeTypeEnum.CircleShape, icon: 'circle' as const, label: 'application_bar.circle' },\n    {\n      key: FlowNodeTypeEnum.TriangleShape,\n      icon: 'triangle' as const,\n      label: 'application_bar.triangle',\n    },\n  ],\n  old: [\n    {\n      key: FlowNodeTypeEnum.CodeContainerApp,\n      icon: 'file-code-2' as const,\n      label: 'application_bar.code_editor',\n    },\n  ],\n}\n\nexport const ApplicationBarNode = memo((props: NodeProps) => {\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loading, createNode } = useActions(props.id)\n  const handleAddNode = async (nodeType: FlowNodeTypeEnum) => {\n    try {\n      if (loading) {\n        return\n      }\n      await createNode(nodeType)\n    } catch {\n      toast({\n        description: t('application_bar.errors.add_node_failed'),\n        variant: 'destructive',\n      })\n    }\n  }\n  return (\n    <TooltipProvider>\n      <Dock direction=\"middle\">\n        {DATA.applications.map((item) => {\n          const Icon = item.icon\n          return (\n            <DockIcon key={item.label}>\n              <Tooltip>\n                <TooltipTrigger>\n                  {Icon ? (\n                    <Icon width={20} height={20} onClick={() => handleAddNode(item.key)} />\n                  ) : undefined}\n                  {item.image ? (\n                    <img\n                      src={item.image}\n                      alt={t(item.label)}\n                      className=\"w-8 h-8 rounded-md\"\n                      onClick={() => handleAddNode(item.key)}\n                    />\n                  ) : undefined}\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{t(item.label)}</p>\n                </TooltipContent>\n              </Tooltip>\n            </DockIcon>\n          )\n        })}\n        <Separator orientation=\"vertical\" className=\"h-full\" />\n        {DATA.shapes.map((item) => (\n          <DockIcon key={item.label}>\n            <Tooltip>\n              <TooltipTrigger>\n                <LazyIcon onClick={() => handleAddNode(item.key)} name={item.icon} />\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{t(item.label)}</p>\n              </TooltipContent>\n            </Tooltip>\n          </DockIcon>\n        ))}\n        <Separator orientation=\"vertical\" className=\"h-full\" />\n        {DATA.old.map((item) => (\n          <DockIcon key={item.label}>\n            <Tooltip>\n              <TooltipTrigger>\n                <LazyIcon onClick={() => handleAddNode(item.key)} name={item.icon} />\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{t(item.label)}</p>\n              </TooltipContent>\n            </Tooltip>\n          </DockIcon>\n        ))}\n      </Dock>\n    </TooltipProvider>\n  )\n})\n","import { memo } from 'react'\nimport { NodeResizer, NodeResizerProps } from '@xyflow/react'\nimport { cn } from 'src/lib/utils'\n\nexport const DefaultNodeResizer = memo((props: NodeResizerProps) => {\n  const { lineClassName, handleClassName, ...rest } = props\n  return (\n    <NodeResizer\n      lineClassName={cn('!border-1.5', lineClassName)}\n      handleClassName={cn('!w-2 !h-2 !border-2 !rounded-full', handleClassName)}\n      {...rest}\n    />\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.CircleShape, FlowNodeTypeEnum.TriangleShape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.Shape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ShapeNode = memo((props: NodeProps) => {\n  const { id, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full bg-border border\">\n        <NodeHeader id={id} />\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.Shape, FlowNodeTypeEnum.TriangleShape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.CircleShape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const CircleNode = memo((props: NodeProps) => {\n  const { id, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full bg-border rounded-full border\">\n        <NodeHeader id={id} />\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.CircleShape, FlowNodeTypeEnum.Shape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.TriangleShape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const TriangleNode = memo((props: NodeProps) => {\n  const { id, selected, width, height, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div\n        className=\"w-0 h-0 border-l-transparent border-r-transparent border-b-border\"\n        style={{\n          borderLeftWidth: (width || 0) / 2,\n          borderRightWidth: (width || 0) / 2,\n          borderBottomWidth: height || 0,\n        }}\n      />\n      <NodeHeader id={id} className=\"absolute top-0 right-0\" />\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.LLM && target?.type === FlowNodeTypeEnum.EditorApp) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { useCallback, useRef } from 'react'\nimport { HumanMessage, type BaseMessage } from '@langchain/core/messages'\nimport { Connection, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { DefaultNode } from 'src/utils/flow-node'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\n\nexport const useActions = (id: string) => {\n  const node = useInternalNode(id)\n  const { t } = useTranslation('flows')\n  const refDebounce = useRef<number | null>(null)\n  const { toast } = useToast()\n  const { getNode, getHandleConnections } = useReactFlow()\n  const { stream } = useLLM()\n\n  const updateEditorContent = useCallback(\n    async (value: unknown[]) => {\n      if (!node) return\n      clearTimeout(refDebounce.current!)\n      refDebounce.current = setTimeout(async () => {\n        await getRepository('FlowNode').update(node.id, {\n          data: value,\n        })\n      }, 150) as unknown as number\n    },\n    [node],\n  )\n\n  const createMessage = useCallback(\n    async (input: string | BaseMessage[], onMessageUpdate: (chunk: string) => void) => {\n      if (node) {\n        const connections = getHandleConnections({\n          nodeId: id,\n          type: 'target',\n        })\n        const llmConnection = connections.find((connection) => {\n          const currentNode = getNode(connection.source)\n          return currentNode?.type === FlowNodeTypeEnum.LLM\n        })\n        const llmNode = llmConnection ? getNode(llmConnection?.source as string) : undefined\n        const llm = llmNode?.data?.entity as LLM\n        if (!llmNode || !llm) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n        } else if (llmNode.data.status !== LLMStatusEnum.Loaded) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_loaded_yet'),\n          })\n        }\n        try {\n          const streamResponse = await stream(\n            llm.provider,\n            typeof input === 'string' ? [new HumanMessage(input)] : input,\n            {\n              onMessageUpdate: (data) => {\n                onMessageUpdate?.(data.content)\n              },\n              llm,\n            },\n          )\n          return streamResponse.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [node, getHandleConnections, id, getNode, toast, t, stream],\n  )\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: DefaultNode\n        connections: Connection[]\n        connectedNodes?: DefaultNode[]\n      }[] = []\n      const connections = getHandleConnections({\n        nodeId: id,\n        type: 'target',\n      })\n      connections.forEach((connection) => {\n        const node = getNode(connection.source)\n        if (!node || node.type !== FlowNodeTypeEnum.LLM) {\n          return\n        }\n        linkedConnections.push({\n          node: node as DefaultNode,\n          connections: [connection],\n        })\n      })\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  return {\n    createMessage,\n    updateEditorContent,\n    getLinkedConnections,\n  }\n}\n","import { lazy, memo, Suspense, useCallback } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\nimport { EditorAppNodeProps } from './type'\n\nconst PlateAppEditor = lazy(() => import('src/components/organisms/PlateEditor'))\n\nexport const EditorAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, data, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  const { createMessage, updateEditorContent, getLinkedConnections } = useActions(id)\n\n  const handleChangeContent = useCallback(\n    (value: unknown[]) => {\n      updateEditorContent(value)\n    },\n    [updateEditorContent],\n  )\n\n  return (\n    <div className=\"w-full min-w-[1240px] h-full\">\n      <DefaultNodeResizer isVisible={!!selected} minWidth={1240} minHeight={400} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full rounded-lg border bg-background\">\n        <NodeHeader\n          className=\"!z-[100]\"\n          id={id}\n          enableToStandalone\n          getLinkedConnections={getLinkedConnections}\n        />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-ful rounded-lg flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <div className=\"h-full w-ful rounded-lg\" data-registry=\"plate\">\n            <PlateAppEditor\n              defaultValue={data?.flowNode?.data}\n              onValueChange={handleChangeContent}\n              copilotStream={createMessage}\n            />\n          </div>\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node; connection: Connection }) => {\n      try {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { PlaceholderNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useTranslation } from 'react-i18next'\n\nexport const PlaceholderNode = memo((props: PlaceholderNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { t } = useTranslation('flows')\n\n  useConnectionToHandler(id)\n\n  let placeholder = ''\n  switch (data.entity?.placeholder_type) {\n    case 'VECTOR_DATABASE_RETREIVER':\n      placeholder = t('placeholder_node.vector_database_retriever')\n      break\n  }\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <Alert className=\"flex justify-center max-w-80\" variant=\"default\">\n        <NodeHeader id={id} />\n        <LazyIcon name={'land-plot'} className=\"w-7 h-7\" />\n        <div className=\"ml-2 pr-4\">\n          <AlertTitle>{`${data.entity?.placeholder || ''}`}</AlertTitle>\n          <AlertDescription>\n            {placeholder ? <Badge>{placeholder}</Badge> : undefined}\n          </AlertDescription>\n        </div>\n      </Alert>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { lazy, memo, Suspense } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { EditorAppNodeProps } from './type'\n\nconst CodeContainerApp = lazy(() => import('./CodeContainerApp'))\n\nexport const CodeContainerAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, isConnectable } = props\n\n  return (\n    <div className=\"w-[1380px] h-[600px] rounded-lg border overflow-hidden shadow-sm\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"w-full h-full rounded-lg border bg-card overflow-hidden\">\n        <NodeHeader id={id} />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-full flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <CodeContainerApp {...props} />\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import type { FileSystemTree } from '@webcontainer/api'\n\nexport const SOURCE_BASES = [\n  'empty-source',\n  'vite-vue',\n  'shadcn-react-vite',\n  'todo-app-react-vite',\n  'porfolio-nextjs',\n] as const\n\nexport const getSourceBase = async (sourceBase: string): Promise<FileSystemTree> => {\n  switch (sourceBase) {\n    case 'empty-source':\n      return import('./empty-source').then((module) => module.BASE)\n    case 'vite-vue':\n      return import('./vite-vue').then((module) => module.BASE)\n    case 'shadcn-react-vite':\n      return import('./shadcn-react-vite').then((module) => module.BASE)\n    case 'todo-app-react-vite':\n      return import('./todo-app-react-vite').then((module) => module.BASE)\n    case 'porfolio-nextjs':\n      return import('./porfolio-nextjs').then((module) => module.BASE)\n    default:\n      throw new Error(`Unknown source base: ${sourceBase}`)\n  }\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { getSourceBase, SOURCE_BASES } from 'src/services/web-container/source-bases'\nimport { cn } from 'src/lib/utils'\n\nconst CreateSourcebaseCard = memo(\n  ({\n    className,\n    onUpdateSourceBase,\n  }: {\n    className?: string\n    onUpdateSourceBase: (data: Awaited<ReturnType<typeof getSourceBase>>) => void\n  }) => {\n    const { t } = useTranslation('components')\n    const [sourcebase, setSourcebase] = useState<string>()\n    return (\n      <Card className={cn('mw-full', className)}>\n        <CardHeader className=\"p-4\">\n          <CardTitle>{t('add_source_base.title')}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-center w-full h-full flex-col\">\n            <Select onValueChange={(value) => setSourcebase(value)}>\n              <SelectTrigger className=\"w-full mb-4\">\n                <SelectValue placeholder={t('add_source_base.source_base_select_placeholder')} />\n              </SelectTrigger>\n              <SelectContent>\n                {SOURCE_BASES.map((key) => {\n                  return (\n                    <SelectItem key={`${key}`} value={`${key}`}>\n                      {t(`add_source_base.sourcebases.${key.toLowerCase()}`)}\n                    </SelectItem>\n                  )\n                })}\n              </SelectContent>\n            </Select>\n            <Button\n              className=\"w-full\"\n              onClick={async () =>\n                sourcebase && onUpdateSourceBase(await getSourceBase(sourcebase))\n              }\n            >\n              {t('add_source_base.update_source')}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default CreateSourcebaseCard\n","import { useCallback } from 'react'\nimport { Connection, useReactFlow } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport type { FileSystemTree } from '@webcontainer/api'\nimport { parseFileSystemTreeToJSONL } from 'src/services/web-container/utils/file-tree'\nimport { DefaultNode } from 'src/utils/flow-node'\nimport { FlowNodeTypeEnum, LLMProviderEnum } from 'src/services/database/types'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { Message } from 'ai/react'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\n\ntype CreateMessageOption = {\n  onMessageUpdate?: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n  onResponseMessageCreate?: (message?: string) => void\n}\nexport const useActions = () => {\n  const { getNode, getHandleConnections } = useReactFlow()\n  const { stream } = useLLM()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: DefaultNode\n        connections: Connection[]\n        connectedNodes?: DefaultNode[]\n      }[] = []\n      const connections = getHandleConnections({\n        nodeId: id,\n        type: 'target',\n      })\n      connections.forEach((connection) => {\n        const node = getNode(connection.source)\n        if (!node || node.type !== FlowNodeTypeEnum.LLM) {\n          return\n        }\n        linkedConnections.push({\n          node: node as DefaultNode,\n          connections: [connection],\n        })\n      })\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  const sendMessage = useCallback(\n    async (\n      message: string,\n      messages: Message[],\n      { onMessageUpdate, onResponseMessageCreate }: CreateMessageOption = {},\n    ) => {\n      const formatedMessages = messages.map((message) => {\n        if (message.role === 'system') {\n          return new SystemMessage(message.content)\n        }\n        if (message.role === 'user') {\n          return new HumanMessage(message.content)\n        }\n        return new AIMessage(message.content)\n      })\n\n      onResponseMessageCreate?.()\n\n      const { content } = await stream(\n        LLMProviderEnum.WebLLM,\n        [...formatedMessages, new HumanMessage(message)],\n        {\n          onMessageUpdate: ({ content }) => {\n            onMessageUpdate?.({\n              nodeData: {\n                loading: true,\n                content: content,\n              },\n            })\n          },\n          llm: undefined,\n        },\n      )\n\n      onMessageUpdate?.({\n        nodeData: {\n          loading: false,\n          content,\n        },\n      })\n      return content\n    },\n    [stream],\n  )\n\n  return {\n    sendMessage,\n    getLinkedConnections,\n    updateCodeContainerData,\n  }\n}\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.LLM && target?.type === FlowNodeTypeEnum.VSLiteApp) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { lazy, memo, Suspense, useCallback, useState } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport {\n  FileSystemTreeChange,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport CreateSourcebaseCard from 'src/components/molecules/CreateSourcebaseCard'\nimport type { FileSystemTree } from '@webcontainer/api'\n\nimport { EditorAppNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { Message } from 'ai/react'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nexport const VSLiteAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, isConnectable, data } = props\n  const [fileSystemTree, setFileSystemTree] = useState(\n    data?.flowNode?.raw ? parseJSONLToFileSystemTree(data.flowNode.raw) : undefined,\n  )\n  const { updateCodeContainerData, getLinkedConnections, sendMessage } = useActions()\n  useConnectionToHandler(id)\n\n  const handleUpdateCodeContainerData = useCallback(\n    async (tree: FileSystemTree) => {\n      if (!data?.flowNode?.id) return\n\n      await updateCodeContainerData(data?.flowNode?.id, tree)\n      setFileSystemTree(tree)\n    },\n    [data?.flowNode?.id, updateCodeContainerData],\n  )\n\n  const handleSendMessage = useCallback(\n    async (message: string, messages: Message[]) => {\n      if (!data?.flowNode?.id) return\n\n      const result = await sendMessage(message, messages)\n      return result\n    },\n    [data?.flowNode?.id, sendMessage],\n  )\n\n  const handleUpdateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      setFileSystemTree((prev) => {\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(data?.flowNode?.id, result)\n        return result\n      })\n    },\n    [data?.flowNode?.id, updateCodeContainerData],\n  )\n\n  if (!fileSystemTree) {\n    return (\n      <div className=\"h-full flex justify-center items-center\">\n        <CreateSourcebaseCard className=\"w-64\" onUpdateSourceBase={handleUpdateCodeContainerData} />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-[1380px] h-[600px] rounded-lg border overflow-hidden shadow-sm\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"w-full h-full rounded-lg border bg-card overflow-hidden\">\n        <NodeHeader\n          id={id}\n          className=\"z-50\"\n          enableToStandalone\n          getLinkedConnections={getLinkedConnections}\n        />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-full flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <VSLiteApp\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={handleUpdateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import { FlowNodeTypeEnum } from 'src/services/database/types'\n\nimport { ToolbarNode } from './ToolboxNode'\nimport { LLMNode } from './LLMNode/LLMNode'\nimport { ThreadNode } from './ThreadNode'\nimport { MessageNode } from './MessageNode'\nimport { PromptNode } from './PromptNode'\nimport { SessionInfoNode } from './SessionInfoNode'\nimport { SchemaNode } from './SchemaNode'\nimport { CSVDataNode } from './CSVDataNode'\nimport { ToolNode } from './ToolNode'\nimport { EmbeddingNode } from './EmbeddingNode'\nimport { VectorDatabaseNode } from './VectorDatabaseNode'\nimport { JSONLDataNode } from './JSONLDataNode'\nimport { ApplicationBarNode } from './ApplicationBarNode'\nimport { ShapeNode } from './ShapeNode'\nimport { CircleNode } from './CircleNode'\nimport { TriangleNode } from './TriangleNode'\nimport { EditorAppNode } from './EditorAppNode'\nimport { PlaceholderNode } from './PlaceholderNode'\nimport { CodeContainerAppNode } from './CodeContainerAppNode'\nimport { VSLiteAppNode } from './VSLiteAppNode'\n\nexport const nodeTypes = {\n  [FlowNodeTypeEnum.LLM]: LLMNode,\n  [FlowNodeTypeEnum.Toolbox]: ToolbarNode,\n  [FlowNodeTypeEnum.Thread]: ThreadNode,\n  [FlowNodeTypeEnum.Message]: MessageNode,\n  [FlowNodeTypeEnum.Prompt]: PromptNode,\n  [FlowNodeTypeEnum.SessionInfo]: SessionInfoNode,\n  [FlowNodeTypeEnum.Schema]: SchemaNode,\n  [FlowNodeTypeEnum.CSVData]: CSVDataNode,\n  [FlowNodeTypeEnum.ToolDefinition]: ToolNode,\n  [FlowNodeTypeEnum.DefaultEmbeddingModel]: EmbeddingNode,\n  [FlowNodeTypeEnum.VectorDatabase]: VectorDatabaseNode,\n  [FlowNodeTypeEnum.JSONLData]: JSONLDataNode,\n  [FlowNodeTypeEnum.ApplicationBar]: ApplicationBarNode,\n  [FlowNodeTypeEnum.Shape]: ShapeNode,\n  [FlowNodeTypeEnum.CircleShape]: CircleNode,\n  [FlowNodeTypeEnum.TriangleShape]: TriangleNode,\n  [FlowNodeTypeEnum.EditorApp]: EditorAppNode,\n  [FlowNodeTypeEnum.PlaceHolder]: PlaceholderNode,\n  [FlowNodeTypeEnum.CodeContainerApp]: CodeContainerAppNode,\n  [FlowNodeTypeEnum.VSLiteApp]: VSLiteAppNode,\n}\n","'use client'\n\nimport * as React from 'react'\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from 'src/lib/utils'\n\nconst toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline: 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-10 px-3 min-w-10',\n        sm: 'h-9 px-2.5 min-w-9',\n        lg: 'h-11 px-5 min-w-11',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","import * as React from 'react'\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'\nimport { type VariantProps } from 'class-variance-authority'\n\nimport { cn } from 'src/lib/utils'\nimport { toggleVariants } from 'src/lib/shadcn/ui/toggle'\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: 'default',\n  variant: 'default',\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn('flex items-center justify-center gap-1', className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","import { useEffect, useState, type Dispatch, type SetStateAction, useCallback } from 'react'\n\nimport {\n  useNodes,\n  Panel,\n  useStore,\n  useStoreApi,\n  type OnNodesChange,\n  type NodeChange,\n  type XYPosition,\n  ViewportPortal,\n  useReactFlow,\n} from '@xyflow/react'\n\nimport { ToggleGroup, ToggleGroupItem } from 'src/lib/shadcn/ui/toggle-group'\n\nexport function ViewportLogger() {\n  const viewport = useStore(\n    (s) =>\n      `x: ${s.transform[0].toFixed(2)}, y: ${s.transform[1].toFixed(2)}, zoom: ${s.transform[2].toFixed(2)}`,\n  )\n\n  return <div>{viewport}</div>\n}\n\ntype ChangeLoggerProps = {\n  color?: string\n  limit?: number\n}\n\ntype ChangeInfoProps = {\n  change: NodeChange\n}\n\nfunction ChangeInfo({ change }: ChangeInfoProps) {\n  const id = 'id' in change ? change.id : '-'\n  const { type } = change\n\n  return (\n    <div className=\"mb-3\">\n      <div>node id: {id}</div>\n      <div>\n        {type === 'add' ? JSON.stringify(change.item, null, 2) : null}\n        {type === 'dimensions'\n          ? `dimensions: ${change.dimensions?.width} × ${change.dimensions?.height}`\n          : null}\n        {type === 'position'\n          ? `position: ${change.position?.x.toFixed(1)}, ${change.position?.y.toFixed(1)}`\n          : null}\n        {type === 'remove' ? 'remove' : null}\n        {type === 'select' ? (change.selected ? 'select' : 'unselect') : null}\n      </div>\n    </div>\n  )\n}\n\nexport function ChangeLogger({ limit = 20 }: ChangeLoggerProps) {\n  const [changes, setChanges] = useState<NodeChange[]>([])\n  const store = useStoreApi()\n\n  // Memoize the callback for handling node changes\n  const handleNodeChanges: OnNodesChange = useCallback(\n    (newChanges: NodeChange[]) => {\n      setChanges((prevChanges) => [...newChanges, ...prevChanges].slice(0, limit))\n    },\n    [limit],\n  )\n\n  useEffect(() => {\n    store.setState({ onNodesChange: handleNodeChanges })\n\n    return () => store.setState({ onNodesChange: undefined })\n  }, [handleNodeChanges, store])\n\n  const NoChanges = () => <div>No Changes Triggered</div>\n\n  return (\n    <>\n      {changes.length === 0 ? (\n        <NoChanges />\n      ) : (\n        changes.map((change, index) => <ChangeInfo key={index} change={change} />)\n      )}\n    </>\n  )\n}\n\nexport function NodeInspector() {\n  const { getInternalNode } = useReactFlow()\n  const nodes = useNodes()\n\n  return (\n    <ViewportPortal>\n      <div className=\"text-secondary-foreground\">\n        {nodes.map((node) => {\n          const internalNode = getInternalNode(node.id)\n          if (!internalNode) {\n            return null\n          }\n\n          const absPosition = internalNode?.internals.positionAbsolute\n\n          return (\n            <NodeInfo\n              key={node.id}\n              id={node.id}\n              selected={!!node.selected}\n              type={node.type || 'default'}\n              position={node.position}\n              absPosition={absPosition}\n              width={node.measured?.width ?? 0}\n              height={node.measured?.height ?? 0}\n              data={node.data}\n            />\n          )\n        })}\n      </div>\n    </ViewportPortal>\n  )\n}\n\ntype NodeInfoProps = {\n  id: string\n  type: string\n  selected: boolean\n  position: XYPosition\n  absPosition: XYPosition\n  width?: number\n  height?: number\n\n  data: unknown\n}\n\nfunction NodeInfo({\n  id,\n  type,\n  selected,\n  position,\n  absPosition,\n  width,\n  height,\n  data,\n}: NodeInfoProps) {\n  if (!width || !height) return null\n\n  const absoluteTransform = `translate(${absPosition.x}px, ${absPosition.y + height}px)`\n  const formattedPosition = `${position.x.toFixed(1)}, ${position.y.toFixed(1)}`\n  const formattedDimensions = `${width} × ${height}`\n  const selectionStatus = selected ? 'Selected' : 'Not Selected'\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        transform: absoluteTransform,\n        width: width * 2,\n      }}\n      className=\"text-xs\"\n    >\n      <div>id: {id}</div>\n      <div>type: {type}</div>\n      <div>selected: {selectionStatus}</div>\n      <div>position: {formattedPosition}</div>\n      <div>dimensions: {formattedDimensions}</div>\n      <div>data: {JSON.stringify(data, null, 2)}</div>\n    </div>\n  )\n}\n\ntype Tool = {\n  active: boolean\n  setActive: Dispatch<SetStateAction<boolean>>\n  label: string\n  value: string\n}\n\ntype DevToolsToggleProps = {\n  tools: Tool[]\n}\n\nfunction DevToolsToggle({ tools }: DevToolsToggleProps) {\n  return (\n    <Panel position=\"top-left\" className=\"bg-card p-1 border rounded shadow-sm\">\n      <ToggleGroup type=\"multiple\">\n        {tools.map(({ active, setActive, label, value }) => (\n          <ToggleGroupItem\n            key={value}\n            value={value}\n            onClick={() => setActive((prev) => !prev)}\n            aria-pressed={active}\n            className=\"bg-card text-card-foreground transition-colors duration-300 hover:bg-secondary hover:text-secondary-foreground\"\n          >\n            {label}\n          </ToggleGroupItem>\n        ))}\n      </ToggleGroup>\n    </Panel>\n  )\n}\n\nexport function DevTools() {\n  const [nodeInspectorActive, setNodeInspectorActive] = useState(false)\n  const [changeLoggerActive, setChangeLoggerActive] = useState(false)\n  const [viewportLoggerActive, setViewportLoggerActive] = useState(false)\n\n  const tools = [\n    {\n      active: nodeInspectorActive,\n      setActive: setNodeInspectorActive,\n      label: 'Node Inspector',\n      value: 'node-inspector',\n    },\n    {\n      active: changeLoggerActive,\n      setActive: setChangeLoggerActive,\n      label: 'Change Logger',\n      value: 'change-logger',\n    },\n    {\n      active: viewportLoggerActive,\n      setActive: setViewportLoggerActive,\n      label: 'Viewport Logger',\n      value: 'viewport-logger',\n    },\n  ]\n\n  return (\n    <>\n      <DevToolsToggle tools={tools} />\n\n      {changeLoggerActive && (\n        <Panel\n          className=\"text-xs p-5 bg-white rounded shadow-md overflow-y-auto max-h-[50%] mt-20\"\n          position=\"bottom-right\"\n        >\n          <ChangeLogger />\n        </Panel>\n      )}\n\n      {nodeInspectorActive && <NodeInspector />}\n\n      {viewportLoggerActive && (\n        <Panel position=\"bottom-left\" className=\"text-secondary-foreground\">\n          <ViewportLogger />\n        </Panel>\n      )}\n    </>\n  )\n}\n\nDevTools.displayName = 'DevTools'\n","import { useCallback, useRef, useState } from 'react'\nimport deepmerge from 'deepmerge'\nimport { applyNodeChanges, Connection, Edge, EdgeChange, Node, NodeChange } from '@xyflow/react'\nimport { FlowNode, FlowNodeTypeEnum } from 'src/services/database/types'\nimport { In, type FindManyOptions } from 'src/services/database/typeorm-wrapper'\nimport { useFlowState } from 'src/states/flow'\nimport { DISABLED_DELETE_NODE_TYPES, SYSTEM_NODE_IDS } from 'src/constants/nodes'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFlowManager = () => {\n  const updatePositionRef = useRef<Record<string, number | undefined>>({})\n  const updateDimensionsRef = useRef<Record<string, number>>({})\n  const onNodesChangesRef = useRef<\n    ((changes: NodeChange<Node>[]) => Promise<boolean | void | undefined>)[]\n  >([])\n\n  const flowEdges = useFlowState((state) => state.flowEdges)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const setNodes = useFlowState((state) => state.setNodes)\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const updateEdges = useFlowState((state) => state.updateEdges)\n  const addConnectionToEdges = useFlowState((state) => state.addConnectionToEdges)\n\n  const resetFlows = useFlowState((state) => state.reset)\n  const findFlowEdges = useFlowState((state) => state.findFlowEdges)\n  const deleteFlowNode = useFlowState((state) => state.deleteFlowNode)\n  const deleteFlowEdge = useFlowState((state) => state.deleteFlowEdge)\n  const updateFlowNode = useFlowState((state) => state.updateFlowNode)\n  const getNodes = useFlowState((state) => state.getNodes)\n  const findFlowNodesWithSource = useFlowState((state) => state.findFlowNodesWithSource)\n\n  const flowEdgesRef = useRef(flowEdges)\n  const currentSessionIdRef = useRef<string | null>()\n  const [loadingState, setLoadingState] = useState({ loading: false })\n\n  flowEdgesRef.current = flowEdges\n\n  const initFlow = useCallback(\n    async (currentSessionId: string, func?: () => Promise<void>) => {\n      try {\n        currentSessionIdRef.current = currentSessionId\n        resetFlows()\n        await func?.()\n      } catch {\n        currentSessionIdRef.current = undefined\n      }\n    },\n    [resetFlows],\n  )\n\n  const prepareFlowInfo = useCallback(\n    async (query: FindManyOptions<FlowNode>) => {\n      try {\n        if (!currentSession?.id) {\n          return\n        }\n        setLoadingState((loading) => ({ ...loading, loading: true }))\n        const flowNodes = await findFlowNodesWithSource({\n          ...query,\n          where: {\n            ...query.where,\n            session_id: currentSession.id,\n          },\n        })\n        const flowEdges = await findFlowEdges({\n          where: [\n            { source: In(flowNodes.map((node) => node.id)) },\n            { target: In(flowNodes.map((node) => node.id)) },\n          ],\n        })\n        return {\n          flowNodes,\n          flowEdges,\n        }\n      } finally {\n        setLoadingState((loading) => ({ ...loading, loading: false }))\n      }\n    },\n    [findFlowNodesWithSource, findFlowEdges, currentSession?.id],\n  )\n\n  const updateNodeChanges = useCallback(\n    async (changes: NodeChange<Node>[]) => {\n      for (const handler of onNodesChangesRef.current) {\n        const result = await handler(changes)\n        if (typeof result === 'boolean' && !result) {\n          return\n        }\n      }\n      for (const change of changes) {\n        if (\n          'id' in change &&\n          Object.values(SYSTEM_NODE_IDS).includes(change.id) &&\n          change.type !== 'remove'\n        ) {\n          updateNodes([change])\n        } else if (\n          change.type === 'position' &&\n          change.position &&\n          !isNaN(change.position.x) &&\n          !isNaN(change.position.y)\n        ) {\n          updateNodes([change])\n\n          const x = change.position.x\n          const y = change.position.y\n          clearTimeout(updatePositionRef.current[change.id])\n          updatePositionRef.current[change.id] = setTimeout(async () => {\n            updatePositionRef.current[change.id] = undefined\n            await updateFlowNode(\n              {\n                id: change.id,\n                x,\n                y,\n              },\n              { silent: true },\n            )\n          }, 200) as unknown as number\n        } else if (change.type === 'remove') {\n          // DISABLED: delete node\n          const node = getNodes([change.id])?.[0]\n          if (!node?.type || DISABLED_DELETE_NODE_TYPES.includes(node.type as FlowNodeTypeEnum)) {\n            return\n          }\n          await deleteFlowNode({ id: change.id })\n        } else if (\n          change.type === 'dimensions' &&\n          change.dimensions &&\n          !isNaN(change.dimensions.width) &&\n          !isNaN(change.dimensions.height)\n        ) {\n          const node = getNodes([change.id])?.[0]\n          if (!node?.width && !node?.height) {\n            return\n          }\n          updateNodes([change])\n\n          clearTimeout(updateDimensionsRef.current[change.id])\n          const width = change.dimensions.width\n          const height = change.dimensions.height\n          updateDimensionsRef.current[change.id] = setTimeout(async () => {\n            await updateFlowNode(\n              {\n                id: change.id,\n                width,\n                height,\n              },\n              { silent: true },\n            )\n          }, 200) as unknown as number\n        } else if (change.type === 'select') {\n          updateNodes([change])\n        }\n      }\n    },\n    [updateNodes, updateFlowNode, getNodes, deleteFlowNode],\n  )\n\n  const updateEdgeChanges = useCallback(\n    (changes: EdgeChange<Edge>[]) => {\n      Promise.all(\n        changes.map(async (change) => {\n          if (change.type === 'remove') {\n            return deleteFlowEdge({ id: change.id })\n          }\n        }),\n      )\n      updateEdges(changes)\n    },\n    [deleteFlowEdge, updateEdges],\n  )\n\n  const updateEdgeConnection = useCallback(\n    (connection: Connection) => {\n      addConnectionToEdges(connection)\n    },\n    [addConnectionToEdges],\n  )\n\n  const updateOrCreateNode = useCallback(\n    (input: Node | ((node: Node[]) => Node | undefined)) => {\n      setNodes((nodes) => {\n        let updatingNode\n        if (typeof input === 'function') {\n          updatingNode = input(nodes)\n        } else {\n          updatingNode = input\n        }\n        if (!updatingNode) {\n          return nodes\n        }\n        const node = nodes?.find((n) => n.id === updatingNode.id)\n        const change: NodeChange<Node> = {\n          id: updatingNode.id,\n          item: node\n            ? deepmerge(node, updatingNode)\n            : {\n                ...updatingNode,\n                position: {\n                  x: updatingNode.position?.x || 0,\n                  y: updatingNode.position?.y || 0,\n                },\n              },\n          type: node ? 'replace' : 'add',\n        }\n        return applyNodeChanges([change], nodes)\n      })\n    },\n    [setNodes],\n  )\n\n  const addOnNodeChangeHandler = useCallback(\n    (func: (changes: NodeChange<Node>[]) => Promise<boolean | void | undefined>) => {\n      onNodesChangesRef.current.push(func)\n      return () => {\n        onNodesChangesRef.current = onNodesChangesRef.current.filter((handler) => handler !== func)\n      }\n    },\n    [],\n  )\n\n  return {\n    initFlow,\n    loadingState,\n    prepareFlowInfo,\n    updateNodeChanges,\n    updateEdgeChanges,\n    updateOrCreateNode,\n    currentSessionIdRef,\n    updateEdgeConnection,\n    addOnNodeChangeHandler,\n  }\n}\n","import { useEffect, useRef } from 'react'\nimport { useFlowManager } from 'src/hooks/flows/handlers/use-flow-manager'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useAutomaticallyRenderFlows = (flowManager: ReturnType<typeof useFlowManager>) => {\n  const currentSessionId = useSessionState((state) => state.currentSession?.id)\n  const { loadingState, prepareFlowInfo, initFlow, currentSessionIdRef } = flowManager\n\n  const flowStateReady = useFlowState((state) => state.ready)\n  const nodes = useFlowState((state) => state.nodes)\n\n  const flowNodesRef = useRef(nodes)\n  const removeSyncNodeQueue = useFlowState((state) => state.removeSyncNodeQueue)\n  const removeSyncEdgeQueue = useFlowState((state) => state.removeSyncEdgeQueue)\n  flowNodesRef.current = nodes\n\n  useEffect(() => {\n    if (\n      loadingState.loading ||\n      !flowStateReady ||\n      !currentSessionId ||\n      currentSessionIdRef.current === currentSessionId\n    ) {\n      return\n    }\n    initFlow(currentSessionId, async () => {\n      await prepareFlowInfo({\n        where: {\n          session_id: currentSessionId,\n        },\n      })\n    })\n  }, [\n    initFlow,\n    prepareFlowInfo,\n    loadingState.loading,\n    currentSessionIdRef,\n    flowStateReady,\n    currentSessionId,\n  ])\n\n  useEffect(() => {\n    const unsubNodeHandler = useFlowState.subscribe(\n      (state) => state.syncNodeQueue,\n      async (syncNodeQueue, previousSyncNodeQueue) => {\n        const lastTimestamps = previousSyncNodeQueue.map((node) => node.timestamp)\n        const handlingQueueItems = syncNodeQueue.filter(\n          (item) => !lastTimestamps.includes(item.timestamp),\n        )\n        if (handlingQueueItems.length) {\n          removeSyncNodeQueue(handlingQueueItems.map((item) => item.timestamp))\n        }\n      },\n    )\n    const unsubEdgeHandler = useFlowState.subscribe(\n      (state) => state.syncEdgeQueue,\n      async (syncEdgeQueue, previousSyncEdgeQueue) => {\n        const lastTimestamps = previousSyncEdgeQueue.map((node) => node.timestamp)\n        const handlingQueueItems = syncEdgeQueue.filter(\n          (item) => !lastTimestamps.includes(item.timestamp),\n        )\n        if (handlingQueueItems.length) {\n          removeSyncEdgeQueue(handlingQueueItems.map((item) => item.timestamp))\n        }\n      },\n    )\n\n    return () => {\n      unsubNodeHandler()\n      unsubEdgeHandler()\n    }\n  }, [prepareFlowInfo, removeSyncEdgeQueue, removeSyncNodeQueue])\n}\n","import { useEffect, useMemo, useRef, useState } from 'react'\nimport { LLMStatusEnum } from 'src/services/database/types/llm'\nimport { useFlowManager } from 'src/hooks/flows/handlers/use-flow-manager'\n\nimport { useAutomaticallyRenderFlows } from 'src/hooks/flows/handlers/use-automatically-render-flow'\nimport { useLocalLLMState } from 'src/services/local-llm'\n\nexport const useHomePage = () => {\n  const [initializing, setInitializing] = useState(true)\n  const flowManager = useFlowManager()\n  const selectedModel = useLocalLLMState((state) => state.selectedModel)\n  const selectedModelRef = useRef(selectedModel)\n  const setInitProgressCallback = useLocalLLMState((state) => state.setInitProgressCallback)\n  const { updateOrCreateNode, updateNodeChanges, updateEdgeChanges, updateEdgeConnection } =\n    flowManager\n  useAutomaticallyRenderFlows(flowManager)\n\n  selectedModelRef.current = selectedModel\n\n  useEffect(() => {\n    const callbackRemoval = setInitProgressCallback?.((input) => {\n      if (!selectedModelRef.current) {\n        return\n      }\n      const modelName = `${selectedModelRef.current}`\n      updateOrCreateNode((nodeRefs) => {\n        const flowNode = nodeRefs?.find((node) => {\n          if (\n            node.data?.entity &&\n            typeof node.data.entity === 'object' &&\n            'name' in node.data.entity\n          ) {\n            return node.data.entity.name === modelName\n          }\n          return false\n        })\n        if (!flowNode) return\n\n        flowNode.data.label = input.text\n        flowNode.data.status = LLMStatusEnum.Loading\n        if (input.progress === 100) {\n          flowNode.data.label = ``\n          flowNode.data.status = LLMStatusEnum.Loaded\n        }\n\n        return flowNode\n      })\n    })\n\n    return () => {\n      callbackRemoval?.()\n    }\n  }, [setInitProgressCallback, updateOrCreateNode])\n\n  const contextValue = useMemo(\n    () => ({\n      updateNodeChanges,\n      updateEdgeChanges,\n      initializing,\n      setInitializing,\n      updateEdgeConnection,\n    }),\n    [updateNodeChanges, updateEdgeChanges, initializing, setInitializing, updateEdgeConnection],\n  )\n\n  return contextValue\n}\n","import { memo, useCallback } from 'react'\nimport {\n  ReactFlow,\n  MiniMap,\n  Controls,\n  Background,\n  BackgroundVariant,\n  Node,\n  NodeChange,\n  Edge,\n  EdgeChange,\n  Connection,\n  PanOnScrollMode,\n} from '@xyflow/react'\nimport { nodeTypes } from 'src/components/flows/Nodes'\nimport { useFlowState } from 'src/states/flow'\nimport { useAppState } from 'src/states/app'\nimport { DevTools } from 'src/lib/shadcn/devtools'\nimport { isDev } from 'src/constants/dev'\nimport { useHomePage } from './hooks/use-home-page'\n\nconst HomeInner = () => {\n  const theme = useAppState((state) => state.theme)\n  const nodes = useFlowState((state) => state.nodes)\n  const edges = useFlowState((state) => state.edges)\n  const { updateNodeChanges, updateEdgeChanges, updateEdgeConnection } = useHomePage()\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange<Node>[]) => {\n      updateNodeChanges(changes)\n    },\n    [updateNodeChanges],\n  )\n\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange<Edge>[]) => {\n      updateEdgeChanges(changes)\n    },\n    [updateEdgeChanges],\n  )\n\n  const onConnect = useCallback(\n    (connection: Connection) => {\n      updateEdgeConnection(connection)\n    },\n    [updateEdgeConnection],\n  )\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      nodeTypes={nodeTypes}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      panOnScroll\n      panOnScrollMode={PanOnScrollMode.Free}\n      colorMode={theme}\n      fitView\n    >\n      <Background variant={BackgroundVariant.Dots} gap={24} size={1} />\n      <Controls />\n      <MiniMap />\n      {isDev ? <DevTools /> : undefined}\n    </ReactFlow>\n  )\n}\n\nexport default memo(HomeInner)\n"],"file":"assets/Home-BKwLs1lF.js"}