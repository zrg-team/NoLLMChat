{"version":3,"mappings":"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","names":["useMotionValue","initial","value","useConstant","motionValue","isStatic","useContext","MotionConfigContext","useState","useEffect","setLatest","useCombineMotionValues","values","combineValues","updateValue","useIsomorphicLayoutEffect","scheduleUpdate","subscriptions","v","unsubscribe","cancelFrame","getMixer","transform","args","useImmediate","argOffset","inputValue","outputRange","interpolator","interpolate","options","useComputed","compute","collectMotionValues","useTransform","input","inputRangeOrTransformer","transformer","useListTransform","latest","numValues","i","toNumber","useSpring","config","isMotionValue","source","useRef","latestSetter","startAnimation","animation","activeSpringAnimation","frameData","stopAnimation","animateValue","latestValue","useInsertionEffect","set","frame","MessageStatusEnum","MessageRoleEnum","ThreadStatusEnum","PromptTypeEnum","Collection","useCollection","createCollection","MENUBAR_NAME","createMenubarContext","createMenubarScope","createCollectionScope","createRovingFocusGroupScope","useMenuScope","createMenuScope","useRovingFocusGroupScope","MenubarContextProvider","Menubar","React.forwardRef","props","forwardedRef","onValueChange","loop","direction","useDirection","dir","rovingFocusGroupScope","__scopeMenubar","setValue","currentTabStopId","setCurrentTabStopId","React.useState","jsx","React.useCallback","value2","prevValue","RovingFocusGroup.Root","Primitive","menubarProps","MenubarMenuProvider","MenubarMenu","valueProp","menuProps","autoValue","useId","useMenubarContext","MENU_NAME","triggerRef","React.useRef","wasKeyboardTriggerOpenRef","open","context","React.useEffect","menuScope","open2","TRIGGER_NAME","disabled","triggerProps","menuContext","useMenubarMenuContext","composedRefs","useComposedRefs","ref","isFocused","RovingFocusGroup.Item","MenuPrimitive.Anchor","composeEventHandlers","event","setIsFocused","MenubarTrigger","PORTAL_NAME","MenubarPortal","portalProps","MenuPrimitive.Portal","MenubarContent","hasInteractedOutsideRef","MenuPrimitive.Content","align","target","getItems","item","targetIsSubTrigger","isPrevKey","isKeyDownInsideSubMenu","candidateValues","currentIndex","CONTENT_NAME","MenubarGroup","MenuPrimitive.Group","groupProps","GROUP_NAME","LABEL_NAME","MenubarLabel","MenuPrimitive.Label","MenubarItem","MenuPrimitive.Item","CHECKBOX_ITEM_NAME","MenubarCheckboxItem","checkboxItemProps","MenuPrimitive.CheckboxItem","RADIO_GROUP_NAME","radioGroupProps","MenuPrimitive.RadioGroup","radioItemProps","MenuPrimitive.RadioItem","MenubarRadioItem","MenubarItemIndicator","itemIndicatorProps","MenuPrimitive.ItemIndicator","separatorProps","MenuPrimitive.Separator","MenubarSeparator","MenuPrimitive.Arrow","arrowProps","ARROW_NAME","MenubarSubTrigger","subTriggerProps","MenuPrimitive.SubTrigger","SUB_CONTENT_NAME","MenuPrimitive.SubContent","subContentProps","wrapArray","array","startIndex","Root3","Menu","Content2","CheckboxItem2","Separator2","SubTrigger2","MenubarSubContent","MenubarPrimitive.Menu","cn","className","MenubarPrimitive.Root","MenubarPrimitive.Trigger","children","jsxs","inset","MenubarPrimitive.SubTrigger","MenubarPrimitive.SubContent","sideOffset","MenubarPrimitive.Portal","alignOffset","MenubarPrimitive.Content","MenubarPrimitive.Item","checked","LazyIcon","MenubarPrimitive.CheckboxItem","MenubarPrimitive.RadioItem","MenubarPrimitive.Label","MenubarPrimitive.Separator","useFlowState","subscribeWithSelector","devtools","get","getFlowStateActions","useCreateLLM","state","createLLM","useCallback","record","sessionId","setLoading","existed","pushSyncNodeQueue","getRepository","LLMProviderEnum","LLMStatusEnum","llm","FlowNodeTypeEnum","createOrUpdateFlowNode","loading","U","Y","H","J","p","m","B","K","X","C","h","O","f","_","T","L","P","A","S","R","c","E","u","M","$","N","D","W","G","Q","be","Z","le","I","he","o","t","ce","r","ue","n.createContext","n.useContext","de","ee","fe","me","n.forwardRef","k","s","e","pe","te","F","x","n.useRef","l","re","a","z","g","q","n.useMemo","ne","V","oe","Ie","Me","ie","se","ae","n.createElement","d","n.useEffect","y","ge","Se","ve","b","Ee","Ce","w.Root","De","xe","we","n.useLayoutEffect","Re","Te","n.useState","ke","n.isValidElement","n.cloneElement","Le","Command","CommandPrimitive","CommandInput","CommandList","CommandEmpty","CommandSeparator","CommandItem","Checkbox","CheckboxPrimitive.Root","OPEN_AI_MODELS","GROQ_MODELS","GROQ_VISION_MODELS","GOOGLE_GENERATIVE_AI_API_KEY_LINK","GROQ_API_KEY_LINK","SUPPORTED_PROVIDERS","onCancel","currentModal","useModal","useTranslation","setName","newValue","handleSubmit","name","onConfirm","handleHide","Dialog","DialogDescription","InputOTP","InputOTPGroup","InputOTPSlot","InputOTPSeparator","DialogFooter","Button","useUpdateSessionPassphrase","currentSession","useSessionState","setCurrentSession","updateSessionPassphrase","passkey","passphrase","generatePassphrase","encrypted","encryptSymmetric","session","useConfirmOrCreatePassphrase","useModalRef","CreateSessionPassphraseDialog","useConfirmPassphrase","createSessionPassphraseDialogRef","keyInfo","secureSession","confirmPassphrase","id","toast","node","useInternalNode","setInput","search","setSearch","confirmOrCreatePassphrase","__vitePreload","prebuiltAppConfig","modelList","setLLMsInfo","isRequiredSessionPasskey","useMemo","provider","llmsInfo","model","preInCache","cachedLLMURLs","pre","nextInCache","next","nextInRecommended","preInFunctionCalling","nextInFunctionCalling","setEncryptedInfo","selectedModel","setProvider","currentValue","setOpen","handleOnSelectProvider","modelTypeToLLMType","setDialog","error","logError","modelType","LLMModelTypeEnum","LLMIcon","LLMInfo","handleOnchange","GOOGLE_GENERATIVE_AI_MODELS","encryptedFields","Fragment","Alert","Label","OPEN_AI_API_KEY_LINK","Input","encryptedInfo","Card","CardHeader","CardTitle","CardContent","Select","SelectTrigger","SelectValue","SelectItem","Popover","PopoverTrigger","CommandGroup","modelItems","LoadingButton","hanldeSubmit","hasCache","useCreatePrompt","createPrompt","initialY","prompt","initialX","PROMPT_TYPES","PROMPT_ROLES","defaultPromptRole","hidePromptRole","onSubmit","setPromptType","defaultPromptType","setPromptRole","handleOnSelectType","handleOnSelectRole","promptRole","promptPrefix","promptType","setPromptPrefix","hidePromptType","SelectContent","Textarea","handleOnchangePrefix","CreatePromptCard","memo","thread","useToast","data","PromptForm","toSchemaItem","parent","result","generateUUID","schema","schemaItems","createSchema","NewOrUpdateField","setData","currentRow","empty","handleChangeName","previous","setEmpty","handleChangeDescription","handleChangeType","handleChangeRequired","handleChangeEnum","items","previousData","func","shouldShowChildData","FieldList","handleAddNew","Accordion","row","AccordionItem","AccordionTrigger","AccordionContent","useCreateSchema","createCSVData","encodedData","encodeCSVData","headers","csvData","ExampleTable","Table","TableRow","TableHead","TableBody","index","TableCell","prevData","output","handleCreateCSVData","setOutput","useCreateTool","createOrUpdateFlowEdge","tool","toolNode","CreateToolCard","description","setDescription","createTool","useCreateVectorDatabase","textSplitter","VectorDatabaseTypeEnum","VectorDatabaseProviderEnum","vectorDatabase","vectorDatabaseNode","VectorDatabaseStorageEnum","databaseSource","encodeSplitter","databaseSourceNode","SUPPORTED_VECTOR_DATABASE_PROVIDERS","SUPPORTED_TEXT_SPLITTERS","SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE","handleOnSelectStorageType","setStorageType","handleOnSelectTextSplitter","prev","handleOnChangeName","handleOnChangeChunkOverlap","createVectorDatabase","setTextSplitter","storageType","CardFooter","DataTable","setText","text","SupportedAddNodeEnum","SUPPORTED_MODES","getContainer","existingContainer","container","instanceCounter","autoAddParticle","size","sizes","spinVal","spinSpeed","left","mouseX","circle","svgNS","circleSVG","particle","particleType","particles","speedHorz","speedUp","top","refreshParticles","animationFrame","lastParticleTimestamp","particleGenerationDelay","limit","currentTime","generateParticle","isTouchInteraction","tap","move","updateMousePosition","mouseY","disableAutoAddParticle","element","tapEnd","interval","CoolMode","applyParticleEffect","React","theme","useAppState","Logo","mode","child","setMode","CreateLLMCard","CreateFewShotExampleCard","menu","useCreateStandaloneSession","navigate","useNavigate","getLatestApplications","cloneNode","newSession","entity","entityName","flowNodeTypeToEntity","newFlowNodeIDMap","cloneEntity","newEntityIDMap","currentFlowNode","cloneFlowNode","createStandaloneSession","SessionTypeEnum","SessionStatusEnum","standaloneSession","mainNodeInfo","connectedNodes","connectedNode","connections","connection","targetId","sourceId","getRouteURL","updateNode","updateEdges","deleteNodeFlow","edges","edge","CreateStandaloneApplicationDialog","create","cloneStandaloneSession","DialogContent","DialogHeader","DialogTitle","NodeHeader","enableToStandalone","getNode","useDeleteNodeFlow","createStandaloneApplicationDialog","handleDelete","currentNode","getLinkedConnections","handleCreateStandaloneApplication","DefaultHandle","flowNode","flowEdge","createThread","useActions","loadingModel","queringThreads","setQueringThreads","loadModel","useLoadModel","useCreateThread","getNodes","useReactFlow","threads","In","handleLoadModel","setLoadingModel","initProgress","llmNodeChanges","queryThreadsFromModel","updateNodes","handleCreateThread","changeLLMOptions","creatingThread","useBaseConnectionToHandler","handlerFunction","useHandleConnections","newConnections","setNewTargetConnection","filterUserConnections","connectionHandler","edgeId","newTargetConnection","handling","setHandling","handlingConnections","response","removeEdgeIds","deleteElements","useConnectionToHandler","handleConnectionTo","LLMNode","isConnectable","llmInfo","setLLMInfo","queryThreads","hasModelInCache","functionCallingModelIds","onChangeOptions","isLoading","AlertTitle","AlertDescription","actions","BorderBeam","Position","NewMessageCard","tags","AIInput","threadConversationTraveling","functions","runningNodes","list","nodeConnections","handledIds","nodes","prepareThreadConnections","threadNode","threadConnections","threadConnectionInfos","threadPromptNodeResult","threadPromptNodes","promptConnectedNodes","threadToolNodeResult","threadToolsNodes","toolConnectedNodes","placeholderConnectedNodes","threadPlaceholderNodeResult","schemaNode","histories","message","content","n","decodeCSVData","rows","key","HumanMessage","SystemMessage","AIMessage","prepareThreadHistory","messageNodes","systems","threadPromptNode","buildHistories","toLocalLLMToolCallingInput","tools","all","toolEntity","toolSchemaEnity","useFlowEmbeddingNode","getFlowEmbeddingNode","getFlowEmbeddingEntity","useCreateMessage","insertMessages","initialLLMId","humanMessage","currenSession","humanMessageNode","aiMessage","aiMessageNode","handlePlaceholders","messagesInfo","threadConnection","placeholders","placeholderRecord","FlowNodePlaceholderTypeEnum","vectorNode","vector","minimalScore","documents","getHandleConnections","dataSource","getStorageDataSource","template","PromptTemplate","injectedMessages","score","doc","similaritySearchWithScoreFunction","invokeMessage","threadConversionNodes","onMessageUpdate","llmEntity","MessageHistory","prompts","schemaEntities","schemas","stream","messages","createMessage","info","omitBy","createMessageFunction","linkedConnections","ThreadNode","targetConnections","Badge","containMessage","handleCreateMessage","showThread","inner","HumanMessageComponent","onNewThread","messageMetadata","MarkdownViewer","isError","useCreateIdieMessage","newMessageNode","newMessage","edgeToPrompt","edgeToNewMessage","createIdieMessage","MessageNode","setShowThread","isEnd","handleCopy","handleSpeech","speaking","textToSpeech","setSpeaking","newMessageCard","handleNewThread","AIMessageComponent","sourceEntity","targetEntity","viewDetailDialog","ViewDataDetailDialog","regex","match","isOverLimit","handleOpenDetail","promptArguments","argument","bytes","cachedModdels","useLocalLLMState","latestUpdate","setLatestUpdate","usedBytes","setCountInfo","setCachedModels","url","fetchSessionInfo","estimate","setUsedBytes","acc","maxUpdatedAt","llms","jsonlDatas","csvDatas","handleReload","dayjs","SchemaNode","loadingRef","Tabs","TabsTrigger","TabsContent","convertToZodSchemaString","CSVDataNode","csv","decodeLine","DataViewer","EmbeddingSetting","show","setShow","setOptions","setEncrypted","decrypted","hanleSubmit","PopoverContent","SYSTEM_NODE_IDS","inputEncrypted","changes","flowNodePlaceholder","currentSessionId","modelName","DEFAULT_PROMPT","CreateVectorDatabasePromptDialog","useCreateVectorDatabaseRetriever","createVectorDatabaseRetriever","systempPrompt","systemPromptNode","metadata","retriever","retrieverNode","CreateVectorDatabaseRetrieverDialog","setK","setMinimalScore","handleOnChangeK","handleOnChangeMinimalScore","indexFunction","useEmbedding","Document","similaritySearchWithScore","embbedingEntity","indexData","dataSourceNode","dataSourceType","chunk","partDocuments","updatedDataNode","handledCount","chunkedDocuments","VectorDatabaseNode","createPromptDialog","CreatePromptDialog","createRetrieverDialog","CreateRetrieverDialog","handleSimilaritySearch","handleCreatePrompt","handleIndexPDF","file","reader","handleCreateData","blob","pdfjs","setProgress","vectorDatabaseData","lines","renderContent","VectorSearch","handleCreateRetriever","IndexNewText","IndexNewFile","progress","LIMIT_LENGTH_BY_COLUMNS","JSONLDataNode","jsonl","DEFAULT_MAGNIFICATION","DEFAULT_DISTANCE","dockVariants","cva","magnification","distance","renderChildren","DockIcon","motion","Dock","distanceCalc","bounds","width","widthSync","React.createElement","createNode","nodeType","nodeData","DEFAULT_NODE_SIZE","DATA","plateEditorIcon","VisualStudioCodeSvg","handleAddNode","TooltipProvider","Tooltip","TooltipTrigger","Icon","TooltipContent","Separator","DefaultNodeResizer","rest","lineClassName","ShapeNode","selected","CircleNode","TriangleNode","height","refDebounce","updateEditorContent","llmNode","llmConnection","handleChangeContent","PlateAppEditor","PlaceholderNode","placeholder","lazy","CodeContainerAppNode","SOURCE_BASES","sourceBase","module","setSourcebase","sourcebase","onUpdateSourceBase","getSourceBase","updateCodeContainerData","parseFileSystemTreeToJSONL","formatedMessages","VSLiteAppNode","parseJSONLToFileSystemTree","sendMessage","handleUpdateCodeContainerData","tree","setFileSystemTree","handleSendMessage","updateFileSystemTree","fileSystemTree","Suspense","VSLiteApp","handleUpdateCodeContainerFile","nodeTypes","ToolbarNode","SessionInfoNode","EmbeddingNode","ApplicationBarNode","EditorAppNode","Toggle","variant","TogglePrimitive.Root","React.createContext","ToggleGroupPrimitive.Root","ToggleGroupItem","React.useContext","ToggleGroupContext","ToggleGroupPrimitive.Item","toggleVariants","ViewportLogger","useStore","viewport","ChangeInfo","change","type","ChangeLogger","store","handleNodeChanges","newChanges","prevChanges","NoChanges","NodeInspector","useNodes","ViewportPortal","internalNode","absPosition","absoluteTransform","formattedPosition","position","selectionStatus","formattedDimensions","ToggleGroup","setActive","label","active","nodeInspectorActive","setNodeInspectorActive","changeLoggerActive","setChangeLoggerActive","DevToolsToggle","Panel","viewportLoggerActive","DevTools","useFlowManager","updateDimensionsRef","onNodesChangesRef","addConnectionToEdges","resetFlows","findFlowEdges","deleteFlowNode","deleteFlowEdge","updateFlowNode","findFlowNodesWithSource","flowEdges","currentSessionIdRef","loadingState","setLoadingState","flowEdgesRef","initFlow","prepareFlowInfo","query","flowNodes","handler","updatePositionRef","DISABLED_DELETE_NODE_TYPES","updateEdgeChanges","updateOrCreateNode","setNodes","updatingNode","deepmerge","applyNodeChanges","updateEdgeConnection","addOnNodeChangeHandler","useAutomaticallyRenderFlows","flowManager","flowStateReady","flowNodesRef","removeSyncNodeQueue","removeSyncEdgeQueue","syncNodeQueue","previousSyncNodeQueue","handlingQueueItems","unsubEdgeHandler","syncEdgeQueue","previousSyncEdgeQueue","lastTimestamps","useHomePage","initializing","setInitializing","setInitProgressCallback","updateNodeChanges","callbackRemoval","nodeRefs","HomeInner","onNodesChange","onEdgesChange","ReactFlow","PanOnScrollMode","Background","Controls","MiniMap","isDev"],"ignoreList":[0,1,2,3,4,5,9,13,14],"sources":["../../node_modules/framer-motion/dist/es/value/use-motion-value.mjs","../../node_modules/framer-motion/dist/es/value/use-combine-values.mjs","../../node_modules/framer-motion/dist/es/utils/transform.mjs","../../node_modules/framer-motion/dist/es/value/use-computed.mjs","../../node_modules/framer-motion/dist/es/value/use-transform.mjs","../../node_modules/framer-motion/dist/es/value/use-spring.mjs","../../src/services/database/types/message.ts","../../src/services/database/types/thread.ts","../../src/services/database/types/prompt.ts","../../node_modules/@radix-ui/react-menubar/dist/index.mjs","../../src/lib/shadcn/ui/menubar.tsx","../../src/states/flow/index.ts","../../src/hooks/flows/mutations/use-create-llm.ts","../../node_modules/cmdk/dist/chunk-NZJY6EH4.mjs","../../node_modules/cmdk/dist/index.mjs","../../src/lib/shadcn/ui/command.tsx","../../src/lib/shadcn/ui/checkbox.tsx","../../src/constants/llm.ts","../../src/components/molecules/CreateLLMCard/constants.ts","../../src/components/dialogs/CreateSessionPassphraseDialog/index.tsx","../../src/hooks/mutations/use-update-session-passphrase.ts","../../src/hooks/mutations/use-confirm-or-create-passphrase.ts","../../src/components/molecules/CreateLLMCard/index.tsx","../../src/hooks/flows/mutations/use-create-prompt.ts","../../src/components/molecules/CreatePromptCard/constants.ts","../../src/components/molecules/CreatePromptCard/PromptForm.tsx","../../src/components/molecules/CreatePromptCard/index.tsx","../../src/hooks/flows/mutations/use-create-schema.ts","../../src/components/molecules/CreateSchemaCard/Field/NewOrUpdateField.tsx","../../src/components/molecules/CreateSchemaCard/Field/FieldList.tsx","../../src/components/molecules/CreateSchemaCard/index.tsx","../../src/hooks/flows/mutations/use-create-csv-data.ts","../../src/components/molecules/CreateFewShotExampleCard/ExampleTable/index.tsx","../../src/components/molecules/CreateFewShotExampleCard/index.tsx","../../src/hooks/flows/mutations/use-create-tool.ts","../../src/components/molecules/CreateToolCard/index.tsx","../../src/hooks/flows/mutations/use-create-vector-database.ts","../../src/components/molecules/CreateVectorDatabaseCard/constants.ts","../../src/components/molecules/CreateVectorDatabaseCard/index.tsx","../../src/components/molecules/CreateTextDataCard/DataTable/index.tsx","../../src/components/molecules/CreateTextDataCard/index.tsx","../../src/components/flows/Nodes/ToolboxNode/constants.ts","../../src/lib/shadcn/ui/cool-mode.tsx","../../src/components/flows/Nodes/ToolboxNode/ToolBarNode.tsx","../../src/hooks/mutations/use-create-standalone-session.ts","../../src/hooks/flows/mutations/use-delete-node-flow.ts","../../src/components/dialogs/CreateStandaloneApplicationDialog/index.tsx","../../src/components/flows/NodeHeader/NodeHeader.tsx","../../src/components/flows/DefaultHandle/DefaultHandle.tsx","../../src/hooks/flows/mutations/use-create-thread.ts","../../src/components/flows/Nodes/LLMNode/hooks/use-actions.ts","../../src/hooks/flows/handlers/use-base-connection-to-handler.ts","../../src/components/flows/Nodes/LLMNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/LLMNode/LLMNode.tsx","../../src/components/molecules/NewMessageCard/index.tsx","../../src/utils/thread-conversation-traveling.ts","../../src/utils/build-message-history.ts","../../src/utils/flow-to-local-llm.ts","../../src/hooks/flows/use-flow-embedding-node.ts","../../src/hooks/flows/mutations/use-create-message.ts","../../src/components/flows/Nodes/ThreadNode/hooks/use-actions.ts","../../src/components/flows/Nodes/ThreadNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ThreadNode/ThreadNode.tsx","../../src/components/flows/Nodes/MessageNode/components/HumanMessage.tsx","../../src/components/flows/Nodes/MessageNode/components/AIMessage.tsx","../../src/components/flows/Nodes/MessageNode/hooks/use-actions.ts","../../src/hooks/flows/mutations/use-create-idie-message.ts","../../src/components/flows/Nodes/MessageNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/MessageNode/MessageNode.tsx","../../src/components/flows/Nodes/PromptNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/PromptNode/PromptNode.tsx","../../src/utils/bytes-format.ts","../../src/components/flows/Nodes/SessionInfoNode/SessionInfoNode.tsx","../../src/components/flows/Nodes/SchemaNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/SchemaNode/SchemaNode.tsx","../../src/components/flows/Nodes/CSVDataNode/CSVDataNode.tsx","../../src/components/flows/Nodes/ToolNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ToolNode/ToolNode.tsx","../../src/components/atoms/EmbeddingSetting.tsx","../../src/components/flows/Nodes/EmbeddingNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/EmbeddingNode/hooks/use-actions.ts","../../src/components/flows/Nodes/EmbeddingNode/EmbeddingNode.tsx","../../src/components/dialogs/CreateVectorDatabasePromptDialog/index.tsx","../../src/hooks/flows/mutations/use-create-vector-database-retriever.ts","../../src/components/dialogs/CreateVectorDatabaseRetrieverDialog/index.tsx","../../src/components/flows/Nodes/VectorDatabaseNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/VectorDatabaseNode/hooks/use-actions.ts","../../src/components/flows/Nodes/VectorDatabaseNode/VectorDatabaseNode.tsx","../../src/components/flows/Nodes/JSONLDataNode/JSONLDataNode.tsx","../../src/lib/shadcn/ui/dock.tsx","../../src/assets/svgs/visual-studio-code.svg?react","../../src/assets/images/plate-editor.png","../../src/components/flows/Nodes/ApplicationBarNode/constants.ts","../../src/components/flows/Nodes/ApplicationBarNode/hooks/use-actions.ts","../../src/components/flows/Nodes/ApplicationBarNode/ApplicationBarNode.tsx","../../src/components/flows/DefaultNodeResizer/DefaultNodeResizer.tsx","../../src/components/flows/Nodes/ShapeNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ShapeNode/ShapeNode.tsx","../../src/components/flows/Nodes/CircleNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/CircleNode/CircleNode.tsx","../../src/components/flows/Nodes/TriangleNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/TriangleNode/TriangleNode.tsx","../../src/components/flows/Nodes/EditorAppNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/EditorAppNode/hooks/use-actions.ts","../../src/components/flows/Nodes/EditorAppNode/EditorAppNode.tsx","../../src/components/flows/Nodes/PlaceholderNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/PlaceholderNode/PlaceholderNode.tsx","../../src/components/flows/Nodes/CodeContainerAppNode/CodeContainerAppNode.tsx","../../src/services/web-container/source-bases/index.ts","../../src/components/molecules/CreateSourcebaseCard/index.tsx","../../src/components/flows/Nodes/VSLiteAppNode/hooks/use-actions.ts","../../src/components/flows/Nodes/VSLiteAppNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/VSLiteAppNode/VSLiteAppNode.tsx","../../src/components/flows/Nodes/index.tsx","../../src/lib/shadcn/ui/toggle.tsx","../../src/lib/shadcn/ui/toggle-group.tsx","../../src/lib/shadcn/devtools.tsx","../../src/hooks/flows/handlers/use-flow-manager.ts","../../src/hooks/flows/handlers/use-automatically-render-flow.ts","../../src/components/pages/Home/hooks/use-home-page.ts","../../src/components/pages/Home/Home.tsx"],"sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { useMotionValue } from './use-motion-value.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { cancelFrame, frame } from '../frameloop/frame.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { interpolate } from './interpolate.mjs';\n\nconst isCustomValueType = (v) => {\n    return v && typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { collectMotionValues } from './index.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","import { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import { useContext, useRef, useInsertionEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { frame, frameData } from '../frameloop/frame.mjs';\n\nfunction toNumber(v) {\n    if (typeof v === \"number\")\n        return v;\n    return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n    const latestValue = useRef(value.get());\n    const latestSetter = useRef(() => { });\n    const startAnimation = () => {\n        /**\n         * If the previous animation hasn't had the chance to even render a frame, render it now.\n         */\n        const animation = activeSpringAnimation.current;\n        if (animation && animation.time === 0) {\n            animation.sample(frameData.delta);\n        }\n        stopAnimation();\n        activeSpringAnimation.current = animateValue({\n            keyframes: [value.get(), latestValue.current],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current,\n        });\n    };\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            latestValue.current = v;\n            latestSetter.current = set;\n            frame.update(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(toNumber(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n","export enum MessageStatusEnum {\n  Started = 'started',\n  Inprogress = 'inprogress',\n  Success = 'success',\n  Failed = 'failed',\n}\n\nexport enum MessageRoleEnum {\n  Human = 'human',\n  User = 'user',\n  AI = 'ai',\n  System = 'system',\n  Assistant = 'assistant',\n  Tool = 'tool',\n  FewShotExample = 'few_shot_example',\n}\n","export enum ThreadStatusEnum {\n  Started = 'started',\n  Inprogress = 'inprogress',\n  Done = 'done',\n}\n","export enum PromptStatusEnum {\n  Started = 'started',\n  Fromated = 'fromated',\n}\n\nexport enum PromptTypeEnum {\n  Chat = 'chat',\n  FewShotExample = 'few_shot_example',\n}\n","\"use client\";\n\n// packages/react/menubar/src/Menubar.tsx\nimport * as React from \"react\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as MenuPrimitive from \"@radix-ui/react-menu\";\nimport { createMenuScope } from \"@radix-ui/react-menu\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MENUBAR_NAME = \"Menubar\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(MENUBAR_NAME);\nvar [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope\n]);\nvar useMenuScope = createMenuScope();\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [MenubarContextProvider, useMenubarContext] = createMenubarContext(MENUBAR_NAME);\nvar Menubar = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeMenubar,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      loop = true,\n      dir,\n      ...menubarProps\n    } = props;\n    const direction = useDirection(dir);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const [value = \"\", setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue\n    });\n    const [currentTabStopId, setCurrentTabStopId] = React.useState(null);\n    return /* @__PURE__ */ jsx(\n      MenubarContextProvider,\n      {\n        scope: __scopeMenubar,\n        value,\n        onMenuOpen: React.useCallback(\n          (value2) => {\n            setValue(value2);\n            setCurrentTabStopId(value2);\n          },\n          [setValue]\n        ),\n        onMenuClose: React.useCallback(() => setValue(\"\"), [setValue]),\n        onMenuToggle: React.useCallback(\n          (value2) => {\n            setValue((prevValue) => Boolean(prevValue) ? \"\" : value2);\n            setCurrentTabStopId(value2);\n          },\n          [setValue]\n        ),\n        dir: direction,\n        loop,\n        children: /* @__PURE__ */ jsx(Collection.Provider, { scope: __scopeMenubar, children: /* @__PURE__ */ jsx(Collection.Slot, { scope: __scopeMenubar, children: /* @__PURE__ */ jsx(\n          RovingFocusGroup.Root,\n          {\n            asChild: true,\n            ...rovingFocusGroupScope,\n            orientation: \"horizontal\",\n            loop,\n            dir: direction,\n            currentTabStopId,\n            onCurrentTabStopIdChange: setCurrentTabStopId,\n            children: /* @__PURE__ */ jsx(Primitive.div, { role: \"menubar\", ...menubarProps, ref: forwardedRef })\n          }\n        ) }) })\n      }\n    );\n  }\n);\nMenubar.displayName = MENUBAR_NAME;\nvar MENU_NAME = \"MenubarMenu\";\nvar [MenubarMenuProvider, useMenubarMenuContext] = createMenubarContext(MENU_NAME);\nvar MenubarMenu = (props) => {\n  const { __scopeMenubar, value: valueProp, ...menuProps } = props;\n  const autoValue = useId();\n  const value = valueProp || autoValue || \"LEGACY_REACT_AUTO_VALUE\";\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n  return /* @__PURE__ */ jsx(\n    MenubarMenuProvider,\n    {\n      scope: __scopeMenubar,\n      value,\n      triggerId: useId(),\n      triggerRef,\n      contentId: useId(),\n      wasKeyboardTriggerOpenRef,\n      children: /* @__PURE__ */ jsx(\n        MenuPrimitive.Root,\n        {\n          ...menuScope,\n          open,\n          onOpenChange: (open2) => {\n            if (!open2) context.onMenuClose();\n          },\n          modal: false,\n          dir: context.dir,\n          ...menuProps\n        }\n      )\n    }\n  );\n};\nMenubarMenu.displayName = MENU_NAME;\nvar TRIGGER_NAME = \"MenubarTrigger\";\nvar MenubarTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, disabled = false, ...triggerProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n    const ref = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const open = context.value === menuContext.value;\n    return /* @__PURE__ */ jsx(Collection.ItemSlot, { scope: __scopeMenubar, value: menuContext.value, disabled, children: /* @__PURE__ */ jsx(\n      RovingFocusGroup.Item,\n      {\n        asChild: true,\n        ...rovingFocusGroupScope,\n        focusable: !disabled,\n        tabStopId: menuContext.value,\n        children: /* @__PURE__ */ jsx(MenuPrimitive.Anchor, { asChild: true, ...menuScope, children: /* @__PURE__ */ jsx(\n          Primitive.button,\n          {\n            type: \"button\",\n            role: \"menuitem\",\n            id: menuContext.triggerId,\n            \"aria-haspopup\": \"menu\",\n            \"aria-expanded\": open,\n            \"aria-controls\": open ? menuContext.contentId : void 0,\n            \"data-highlighted\": isFocused ? \"\" : void 0,\n            \"data-state\": open ? \"open\" : \"closed\",\n            \"data-disabled\": disabled ? \"\" : void 0,\n            disabled,\n            ...triggerProps,\n            ref: composedRefs,\n            onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {\n              if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                context.onMenuOpen(menuContext.value);\n                if (!open) event.preventDefault();\n              }\n            }),\n            onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {\n              const menubarOpen = Boolean(context.value);\n              if (menubarOpen && !open) {\n                context.onMenuOpen(menuContext.value);\n                ref.current?.focus();\n              }\n            }),\n            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {\n              if (disabled) return;\n              if ([\"Enter\", \" \"].includes(event.key)) context.onMenuToggle(menuContext.value);\n              if (event.key === \"ArrowDown\") context.onMenuOpen(menuContext.value);\n              if ([\"Enter\", \" \", \"ArrowDown\"].includes(event.key)) {\n                menuContext.wasKeyboardTriggerOpenRef.current = true;\n                event.preventDefault();\n              }\n            }),\n            onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),\n            onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))\n          }\n        ) })\n      }\n    ) });\n  }\n);\nMenubarTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"MenubarPortal\";\nvar MenubarPortal = (props) => {\n  const { __scopeMenubar, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */ jsx(MenuPrimitive.Portal, { ...menuScope, ...portalProps });\n};\nMenubarPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"MenubarContent\";\nvar MenubarContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, align = \"start\", ...contentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n    const getItems = useCollection(__scopeMenubar);\n    const hasInteractedOutsideRef = React.useRef(false);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.Content,\n      {\n        id: menuContext.contentId,\n        \"aria-labelledby\": menuContext.triggerId,\n        \"data-radix-menubar-content\": \"\",\n        ...menuScope,\n        ...contentProps,\n        ref: forwardedRef,\n        align,\n        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          const menubarOpen = Boolean(context.value);\n          if (!menubarOpen && !hasInteractedOutsideRef.current) {\n            menuContext.triggerRef.current?.focus();\n          }\n          hasInteractedOutsideRef.current = false;\n          event.preventDefault();\n        }),\n        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {\n          const target = event.target;\n          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          if (isMenubarTrigger) event.preventDefault();\n        }),\n        onInteractOutside: composeEventHandlers(props.onInteractOutside, () => {\n          hasInteractedOutsideRef.current = true;\n        }),\n        onEntryFocus: (event) => {\n          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n        },\n        onKeyDown: composeEventHandlers(\n          props.onKeyDown,\n          (event) => {\n            if ([\"ArrowRight\", \"ArrowLeft\"].includes(event.key)) {\n              const target = event.target;\n              const targetIsSubTrigger = target.hasAttribute(\"data-radix-menubar-subtrigger\");\n              const isKeyDownInsideSubMenu = target.closest(\"[data-radix-menubar-content]\") !== event.currentTarget;\n              const prevMenuKey = context.dir === \"rtl\" ? \"ArrowRight\" : \"ArrowLeft\";\n              const isPrevKey = prevMenuKey === event.key;\n              const isNextKey = !isPrevKey;\n              if (isNextKey && targetIsSubTrigger) return;\n              if (isKeyDownInsideSubMenu && isPrevKey) return;\n              const items = getItems().filter((item) => !item.disabled);\n              let candidateValues = items.map((item) => item.value);\n              if (isPrevKey) candidateValues.reverse();\n              const currentIndex = candidateValues.indexOf(menuContext.value);\n              candidateValues = context.loop ? wrapArray(candidateValues, currentIndex + 1) : candidateValues.slice(currentIndex + 1);\n              const [nextValue] = candidateValues;\n              if (nextValue) context.onMenuOpen(nextValue);\n            }\n          },\n          { checkForDefaultPrevented: false }\n        ),\n        style: {\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      }\n    );\n  }\n);\nMenubarContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"MenubarGroup\";\nvar MenubarGroup = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Group, { ...menuScope, ...groupProps, ref: forwardedRef });\n  }\n);\nMenubarGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"MenubarLabel\";\nvar MenubarLabel = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Label, { ...menuScope, ...labelProps, ref: forwardedRef });\n  }\n);\nMenubarLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"MenubarItem\";\nvar MenubarItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Item, { ...menuScope, ...itemProps, ref: forwardedRef });\n  }\n);\nMenubarItem.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"MenubarCheckboxItem\";\nvar MenubarCheckboxItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });\n  }\n);\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"MenubarRadioGroup\";\nvar MenubarRadioGroup = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });\n  }\n);\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"MenubarRadioItem\";\nvar MenubarRadioItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });\n  }\n);\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"MenubarItemIndicator\";\nvar MenubarItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const { __scopeMenubar, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */ jsx(MenuPrimitive.ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });\n});\nMenubarItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"MenubarSeparator\";\nvar MenubarSeparator = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });\n  }\n);\nMenubarSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"MenubarArrow\";\nvar MenubarArrow = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Arrow, { ...menuScope, ...arrowProps, ref: forwardedRef });\n  }\n);\nMenubarArrow.displayName = ARROW_NAME;\nvar SUB_NAME = \"MenubarSub\";\nvar MenubarSub = (props) => {\n  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */ jsx(MenuPrimitive.Sub, { ...menuScope, open, onOpenChange: setOpen, children });\n};\nMenubarSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME = \"MenubarSubTrigger\";\nvar MenubarSubTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.SubTrigger,\n      {\n        \"data-radix-menubar-subtrigger\": \"\",\n        ...menuScope,\n        ...subTriggerProps,\n        ref: forwardedRef\n      }\n    );\n  }\n);\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"MenubarSubContent\";\nvar MenubarSubContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.SubContent,\n      {\n        ...menuScope,\n        \"data-radix-menubar-content\": \"\",\n        ...subContentProps,\n        ref: forwardedRef,\n        style: {\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      }\n    );\n  }\n);\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root3 = Menubar;\nvar Menu = MenubarMenu;\nvar Trigger = MenubarTrigger;\nvar Portal2 = MenubarPortal;\nvar Content2 = MenubarContent;\nvar Group2 = MenubarGroup;\nvar Label2 = MenubarLabel;\nvar Item3 = MenubarItem;\nvar CheckboxItem2 = MenubarCheckboxItem;\nvar RadioGroup2 = MenubarRadioGroup;\nvar RadioItem2 = MenubarRadioItem;\nvar ItemIndicator2 = MenubarItemIndicator;\nvar Separator2 = MenubarSeparator;\nvar Arrow2 = MenubarArrow;\nvar Sub2 = MenubarSub;\nvar SubTrigger2 = MenubarSubTrigger;\nvar SubContent2 = MenubarSubContent;\nexport {\n  Arrow2 as Arrow,\n  CheckboxItem2 as CheckboxItem,\n  Content2 as Content,\n  Group2 as Group,\n  Item3 as Item,\n  ItemIndicator2 as ItemIndicator,\n  Label2 as Label,\n  Menu,\n  Menubar,\n  MenubarArrow,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarGroup,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n  Portal2 as Portal,\n  RadioGroup2 as RadioGroup,\n  RadioItem2 as RadioItem,\n  Root3 as Root,\n  Separator2 as Separator,\n  Sub2 as Sub,\n  SubContent2 as SubContent,\n  SubTrigger2 as SubTrigger,\n  Trigger,\n  createMenubarScope\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      'flex h-10 items-center space-x-1 rounded-md border bg-background p-1',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <LazyIcon name=\"chevron-right\" className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(({ className, align = 'start', alignOffset = -4, sideOffset = 8, ...props }, ref) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  </MenubarPrimitive.Portal>\n))\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <LazyIcon name=\"check\" className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <LazyIcon name=\"circle\" className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = 'MenubarShortcut'\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","import { create } from 'zustand'\nimport { devtools, subscribeWithSelector } from 'zustand/middleware'\nimport { FlowStateActions, getFlowStateActions } from './actions'\nimport { FlowState, defaultFlowState } from './state'\n\nexport const useFlowState = create<FlowState & FlowStateActions>()(\n  subscribeWithSelector(\n    devtools((set, get) => ({\n      ...defaultFlowState,\n      ...getFlowStateActions(set, get),\n    })),\n  ),\n)\n","import { useCallback, useState } from 'react'\nimport { Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  LLM,\n  LLMModelTypeEnum,\n  LLMProviderEnum,\n  LLMStatusEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateLLM = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n\n  const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createLLM = useCallback(\n    async (source: Node, record: Partial<LLM>) => {\n      try {\n        if (!sessionId) {\n          throw new Error('Session not found')\n        }\n        if (!record.provider || !record.name) {\n          throw new Error('Provider and name are required')\n        }\n        setLoading(true)\n        const existed = await getRepository('LLM').findOne({\n          where: {\n            name: record.name,\n            session_id: sessionId,\n          },\n        })\n        if (existed) {\n          pushSyncNodeQueue('LLM', {\n            where: {\n              source_type: 'LLM',\n              source_id: existed.id,\n            },\n          })\n          return existed\n        }\n        return getRepository('LLM')\n          .save({\n            name: `${record.name}`,\n            // NOTE: No need to load cloud LLM\n            status:\n              record.provider === LLMProviderEnum.WebLLM\n                ? LLMStatusEnum.Started\n                : LLMStatusEnum.Loaded,\n            session_id: sessionId,\n            provider: record.provider,\n            metadata: JSON.stringify(record.metadata || {}),\n            model_type: record.model_type || LLMModelTypeEnum.LLM,\n            parameters: record.parameters || undefined,\n            encrypted: record.encrypted || undefined,\n            ...record,\n          })\n          .then(async (llm) => {\n            await createOrUpdateFlowNode({\n              source_id: llm.id,\n              source_type: 'LLM',\n              node_type: FlowNodeTypeEnum.LLM,\n              x: source.position?.x,\n              y: source.position?.y + (source.measured?.height || 0) + 30,\n            })\n            return llm\n          })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowNode, pushSyncNodeQueue, sessionId],\n  )\n\n  return {\n    loading,\n    createLLM,\n  }\n}\n","var U=1,Y=.9,H=.8,J=.17,p=.1,u=.999,$=.9999;var k=.99,m=/[\\\\\\/_+.#\"@\\[\\(\\{&]/,B=/[\\\\\\/_+.#\"@\\[\\(\\{&]/g,K=/[\\s-]/,X=/[\\s-]/g;function G(_,C,h,P,A,f,O){if(f===C.length)return A===_.length?U:k;var T=`${A},${f}`;if(O[T]!==void 0)return O[T];for(var L=P.charAt(f),c=h.indexOf(L,A),S=0,E,N,R,M;c>=0;)E=G(_,C,h,P,c+1,f+1,O),E>S&&(c===A?E*=U:m.test(_.charAt(c-1))?(E*=H,R=_.slice(A,c-1).match(B),R&&A>0&&(E*=Math.pow(u,R.length))):K.test(_.charAt(c-1))?(E*=Y,M=_.slice(A,c-1).match(X),M&&A>0&&(E*=Math.pow(u,M.length))):(E*=J,A>0&&(E*=Math.pow(u,c-A))),_.charAt(c)!==C.charAt(f)&&(E*=$)),(E<p&&h.charAt(c-1)===P.charAt(f+1)||P.charAt(f+1)===P.charAt(f)&&h.charAt(c-1)!==P.charAt(f))&&(N=G(_,C,h,P,c+1,f+2,O),N*p>E&&(E=N*p)),E>S&&(S=E),c=h.indexOf(L,c+1);return O[T]=S,S}function D(_){return _.toLowerCase().replace(X,\" \")}function W(_,C,h){return _=h&&h.length>0?`${_+\" \"+h.join(\" \")}`:_,G(_,C,D(_),D(C),0,0,{})}export{W as a};\n","\"use client\";import{a as ce}from\"./chunk-NZJY6EH4.mjs\";import*as w from\"@radix-ui/react-dialog\";import*as n from\"react\";import{Primitive as D}from\"@radix-ui/react-primitive\";import{useId as L}from\"@radix-ui/react-id\";import{useSyncExternalStore as Re}from\"use-sync-external-store/shim/index.js\";var N='[cmdk-group=\"\"]',Q='[cmdk-group-items=\"\"]',be='[cmdk-group-heading=\"\"]',Z='[cmdk-item=\"\"]',le=`${Z}:not([aria-disabled=\"true\"])`,Y=\"cmdk-item-select\",I=\"data-value\",he=(r,o,t)=>ce(r,o,t),ue=n.createContext(void 0),K=()=>n.useContext(ue),de=n.createContext(void 0),ee=()=>n.useContext(de),fe=n.createContext(void 0);var me=n.forwardRef((r,o)=>{let t=k(()=>{var e,s;return{search:\"\",value:(s=(e=r.value)!=null?e:r.defaultValue)!=null?s:\"\",filtered:{count:0,items:new Map,groups:new Set}}}),u=k(()=>new Set),c=k(()=>new Map),d=k(()=>new Map),f=k(()=>new Set),p=pe(r),{label:v,children:b,value:l,onValueChange:y,filter:E,shouldFilter:C,loop:H,disablePointerSelection:ge=!1,vimBindings:$=!0,...O}=r,te=L(),B=L(),F=L(),x=n.useRef(null),R=Te();M(()=>{if(l!==void 0){let e=l.trim();t.current.value=e,h.emit()}},[l]),M(()=>{R(6,re)},[]);let h=n.useMemo(()=>({subscribe:e=>(f.current.add(e),()=>f.current.delete(e)),snapshot:()=>t.current,setState:(e,s,i)=>{var a,m,g;if(!Object.is(t.current[e],s)){if(t.current[e]=s,e===\"search\")W(),U(),R(1,z);else if(e===\"value\"&&(i||R(5,re),((a=p.current)==null?void 0:a.value)!==void 0)){let S=s!=null?s:\"\";(g=(m=p.current).onValueChange)==null||g.call(m,S);return}h.emit()}},emit:()=>{f.current.forEach(e=>e())}}),[]),q=n.useMemo(()=>({value:(e,s,i)=>{var a;s!==((a=d.current.get(e))==null?void 0:a.value)&&(d.current.set(e,{value:s,keywords:i}),t.current.filtered.items.set(e,ne(s,i)),R(2,()=>{U(),h.emit()}))},item:(e,s)=>(u.current.add(e),s&&(c.current.has(s)?c.current.get(s).add(e):c.current.set(s,new Set([e]))),R(3,()=>{W(),U(),t.current.value||z(),h.emit()}),()=>{d.current.delete(e),u.current.delete(e),t.current.filtered.items.delete(e);let i=A();R(4,()=>{W(),(i==null?void 0:i.getAttribute(\"id\"))===e&&z(),h.emit()})}),group:e=>(c.current.has(e)||c.current.set(e,new Set),()=>{d.current.delete(e),c.current.delete(e)}),filter:()=>p.current.shouldFilter,label:v||r[\"aria-label\"],getDisablePointerSelection:()=>p.current.disablePointerSelection,listId:te,inputId:F,labelId:B,listInnerRef:x}),[]);function ne(e,s){var a,m;let i=(m=(a=p.current)==null?void 0:a.filter)!=null?m:he;return e?i(e,t.current.search,s):0}function U(){if(!t.current.search||p.current.shouldFilter===!1)return;let e=t.current.filtered.items,s=[];t.current.filtered.groups.forEach(a=>{let m=c.current.get(a),g=0;m.forEach(S=>{let P=e.get(S);g=Math.max(P,g)}),s.push([a,g])});let i=x.current;_().sort((a,m)=>{var P,V;let g=a.getAttribute(\"id\"),S=m.getAttribute(\"id\");return((P=e.get(S))!=null?P:0)-((V=e.get(g))!=null?V:0)}).forEach(a=>{let m=a.closest(Q);m?m.appendChild(a.parentElement===m?a:a.closest(`${Q} > *`)):i.appendChild(a.parentElement===i?a:a.closest(`${Q} > *`))}),s.sort((a,m)=>m[1]-a[1]).forEach(a=>{var g;let m=(g=x.current)==null?void 0:g.querySelector(`${N}[${I}=\"${encodeURIComponent(a[0])}\"]`);m==null||m.parentElement.appendChild(m)})}function z(){let e=_().find(i=>i.getAttribute(\"aria-disabled\")!==\"true\"),s=e==null?void 0:e.getAttribute(I);h.setState(\"value\",s||void 0)}function W(){var s,i,a,m;if(!t.current.search||p.current.shouldFilter===!1){t.current.filtered.count=u.current.size;return}t.current.filtered.groups=new Set;let e=0;for(let g of u.current){let S=(i=(s=d.current.get(g))==null?void 0:s.value)!=null?i:\"\",P=(m=(a=d.current.get(g))==null?void 0:a.keywords)!=null?m:[],V=ne(S,P);t.current.filtered.items.set(g,V),V>0&&e++}for(let[g,S]of c.current)for(let P of S)if(t.current.filtered.items.get(P)>0){t.current.filtered.groups.add(g);break}t.current.filtered.count=e}function re(){var s,i,a;let e=A();e&&(((s=e.parentElement)==null?void 0:s.firstChild)===e&&((a=(i=e.closest(N))==null?void 0:i.querySelector(be))==null||a.scrollIntoView({block:\"nearest\"})),e.scrollIntoView({block:\"nearest\"}))}function A(){var e;return(e=x.current)==null?void 0:e.querySelector(`${Z}[aria-selected=\"true\"]`)}function _(){var e;return Array.from(((e=x.current)==null?void 0:e.querySelectorAll(le))||[])}function J(e){let i=_()[e];i&&h.setState(\"value\",i.getAttribute(I))}function X(e){var g;let s=A(),i=_(),a=i.findIndex(S=>S===s),m=i[a+e];(g=p.current)!=null&&g.loop&&(m=a+e<0?i[i.length-1]:a+e===i.length?i[0]:i[a+e]),m&&h.setState(\"value\",m.getAttribute(I))}function oe(e){let s=A(),i=s==null?void 0:s.closest(N),a;for(;i&&!a;)i=e>0?Ie(i,N):Me(i,N),a=i==null?void 0:i.querySelector(le);a?h.setState(\"value\",a.getAttribute(I)):X(e)}let ie=()=>J(_().length-1),ae=e=>{e.preventDefault(),e.metaKey?ie():e.altKey?oe(1):X(1)},se=e=>{e.preventDefault(),e.metaKey?J(0):e.altKey?oe(-1):X(-1)};return n.createElement(D.div,{ref:o,tabIndex:-1,...O,\"cmdk-root\":\"\",onKeyDown:e=>{var s;if((s=O.onKeyDown)==null||s.call(O,e),!e.defaultPrevented)switch(e.key){case\"n\":case\"j\":{$&&e.ctrlKey&&ae(e);break}case\"ArrowDown\":{ae(e);break}case\"p\":case\"k\":{$&&e.ctrlKey&&se(e);break}case\"ArrowUp\":{se(e);break}case\"Home\":{e.preventDefault(),J(0);break}case\"End\":{e.preventDefault(),ie();break}case\"Enter\":if(!e.nativeEvent.isComposing&&e.keyCode!==229){e.preventDefault();let i=A();if(i){let a=new Event(Y);i.dispatchEvent(a)}}}}},n.createElement(\"label\",{\"cmdk-label\":\"\",htmlFor:q.inputId,id:q.labelId,style:Le},v),j(r,e=>n.createElement(de.Provider,{value:h},n.createElement(ue.Provider,{value:q},e))))}),ye=n.forwardRef((r,o)=>{var F,x;let t=L(),u=n.useRef(null),c=n.useContext(fe),d=K(),f=pe(r),p=(x=(F=f.current)==null?void 0:F.forceMount)!=null?x:c==null?void 0:c.forceMount;M(()=>{if(!p)return d.item(t,c==null?void 0:c.id)},[p]);let v=ve(t,u,[r.value,r.children,u],r.keywords),b=ee(),l=T(R=>R.value&&R.value===v.current),y=T(R=>p||d.filter()===!1?!0:R.search?R.filtered.items.get(t)>0:!0);n.useEffect(()=>{let R=u.current;if(!(!R||r.disabled))return R.addEventListener(Y,E),()=>R.removeEventListener(Y,E)},[y,r.onSelect,r.disabled]);function E(){var R,h;C(),(h=(R=f.current).onSelect)==null||h.call(R,v.current)}function C(){b.setState(\"value\",v.current,!0)}if(!y)return null;let{disabled:H,value:ge,onSelect:$,forceMount:O,keywords:te,...B}=r;return n.createElement(D.div,{ref:G([u,o]),...B,id:t,\"cmdk-item\":\"\",role:\"option\",\"aria-disabled\":!!H,\"aria-selected\":!!l,\"data-disabled\":!!H,\"data-selected\":!!l,onPointerMove:H||d.getDisablePointerSelection()?void 0:C,onClick:H?void 0:E},r.children)}),Se=n.forwardRef((r,o)=>{let{heading:t,children:u,forceMount:c,...d}=r,f=L(),p=n.useRef(null),v=n.useRef(null),b=L(),l=K(),y=T(C=>c||l.filter()===!1?!0:C.search?C.filtered.groups.has(f):!0);M(()=>l.group(f),[]),ve(f,p,[r.value,r.heading,v]);let E=n.useMemo(()=>({id:f,forceMount:c}),[c]);return n.createElement(D.div,{ref:G([p,o]),...d,\"cmdk-group\":\"\",role:\"presentation\",hidden:y?void 0:!0},t&&n.createElement(\"div\",{ref:v,\"cmdk-group-heading\":\"\",\"aria-hidden\":!0,id:b},t),j(r,C=>n.createElement(\"div\",{\"cmdk-group-items\":\"\",role:\"group\",\"aria-labelledby\":t?b:void 0},n.createElement(fe.Provider,{value:E},C))))}),Ee=n.forwardRef((r,o)=>{let{alwaysRender:t,...u}=r,c=n.useRef(null),d=T(f=>!f.search);return!t&&!d?null:n.createElement(D.div,{ref:G([c,o]),...u,\"cmdk-separator\":\"\",role:\"separator\"})}),Ce=n.forwardRef((r,o)=>{let{onValueChange:t,...u}=r,c=r.value!=null,d=ee(),f=T(l=>l.search),p=T(l=>l.value),v=K(),b=n.useMemo(()=>{var y;let l=(y=v.listInnerRef.current)==null?void 0:y.querySelector(`${Z}[${I}=\"${encodeURIComponent(p)}\"]`);return l==null?void 0:l.getAttribute(\"id\")},[]);return n.useEffect(()=>{r.value!=null&&d.setState(\"search\",r.value)},[r.value]),n.createElement(D.input,{ref:o,...u,\"cmdk-input\":\"\",autoComplete:\"off\",autoCorrect:\"off\",spellCheck:!1,\"aria-autocomplete\":\"list\",role:\"combobox\",\"aria-expanded\":!0,\"aria-controls\":v.listId,\"aria-labelledby\":v.labelId,\"aria-activedescendant\":b,id:v.inputId,type:\"text\",value:c?r.value:f,onChange:l=>{c||d.setState(\"search\",l.target.value),t==null||t(l.target.value)}})}),xe=n.forwardRef((r,o)=>{let{children:t,label:u=\"Suggestions\",...c}=r,d=n.useRef(null),f=n.useRef(null),p=K();return n.useEffect(()=>{if(f.current&&d.current){let v=f.current,b=d.current,l,y=new ResizeObserver(()=>{l=requestAnimationFrame(()=>{let E=v.offsetHeight;b.style.setProperty(\"--cmdk-list-height\",E.toFixed(1)+\"px\")})});return y.observe(v),()=>{cancelAnimationFrame(l),y.unobserve(v)}}},[]),n.createElement(D.div,{ref:G([d,o]),...c,\"cmdk-list\":\"\",role:\"listbox\",\"aria-label\":u,id:p.listId},j(r,v=>n.createElement(\"div\",{ref:G([f,p.listInnerRef]),\"cmdk-list-sizer\":\"\"},v)))}),Pe=n.forwardRef((r,o)=>{let{open:t,onOpenChange:u,overlayClassName:c,contentClassName:d,container:f,...p}=r;return n.createElement(w.Root,{open:t,onOpenChange:u},n.createElement(w.Portal,{container:f},n.createElement(w.Overlay,{\"cmdk-overlay\":\"\",className:c}),n.createElement(w.Content,{\"aria-label\":r.label,\"cmdk-dialog\":\"\",className:d},n.createElement(me,{ref:o,...p}))))}),we=n.forwardRef((r,o)=>T(u=>u.filtered.count===0)?n.createElement(D.div,{ref:o,...r,\"cmdk-empty\":\"\",role:\"presentation\"}):null),De=n.forwardRef((r,o)=>{let{progress:t,children:u,label:c=\"Loading...\",...d}=r;return n.createElement(D.div,{ref:o,...d,\"cmdk-loading\":\"\",role:\"progressbar\",\"aria-valuenow\":t,\"aria-valuemin\":0,\"aria-valuemax\":100,\"aria-label\":c},j(r,f=>n.createElement(\"div\",{\"aria-hidden\":!0},f)))}),Ve=Object.assign(me,{List:xe,Item:ye,Input:Ce,Group:Se,Separator:Ee,Dialog:Pe,Empty:we,Loading:De});function Ie(r,o){let t=r.nextElementSibling;for(;t;){if(t.matches(o))return t;t=t.nextElementSibling}}function Me(r,o){let t=r.previousElementSibling;for(;t;){if(t.matches(o))return t;t=t.previousElementSibling}}function pe(r){let o=n.useRef(r);return M(()=>{o.current=r}),o}var M=typeof window==\"undefined\"?n.useEffect:n.useLayoutEffect;function k(r){let o=n.useRef();return o.current===void 0&&(o.current=r()),o}function G(r){return o=>{r.forEach(t=>{typeof t==\"function\"?t(o):t!=null&&(t.current=o)})}}function T(r){let o=ee(),t=()=>r(o.snapshot());return Re(o.subscribe,t,t)}function ve(r,o,t,u=[]){let c=n.useRef(),d=K();return M(()=>{var v;let f=(()=>{var b;for(let l of t){if(typeof l==\"string\")return l.trim();if(typeof l==\"object\"&&\"current\"in l)return l.current?(b=l.current.textContent)==null?void 0:b.trim():c.current}})(),p=u.map(b=>b.trim());d.value(r,f,p),(v=o.current)==null||v.setAttribute(I,f),c.current=f}),c}var Te=()=>{let[r,o]=n.useState(),t=k(()=>new Map);return M(()=>{t.current.forEach(u=>u()),t.current=new Map},[r]),(u,c)=>{t.current.set(u,c),o({})}};function ke(r){let o=r.type;return typeof o==\"function\"?o(r.props):\"render\"in o?o.render(r.props):r}function j({asChild:r,children:o},t){return r&&n.isValidElement(o)?n.cloneElement(ke(o),{ref:o.ref},t(o.props.children)):t(o)}var Le={position:\"absolute\",width:\"1px\",height:\"1px\",padding:\"0\",margin:\"-1px\",overflow:\"hidden\",clip:\"rect(0, 0, 0, 0)\",whiteSpace:\"nowrap\",borderWidth:\"0\"};export{Ve as Command,Pe as CommandDialog,we as CommandEmpty,Se as CommandGroup,Ce as CommandInput,ye as CommandItem,xe as CommandList,De as CommandLoading,me as CommandRoot,Ee as CommandSeparator,he as defaultFilter,T as useCommandState};\n","import * as React from 'react'\nimport { type DialogProps } from '@radix-ui/react-dialog'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\nimport { Dialog, DialogContent } from 'src/lib/shadcn/ui/dialog'\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ntype CommandDialogProps = DialogProps\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <LazyIcon name=\"search\" className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 h-px bg-border', className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = 'CommandShortcut'\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","import * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>\n      <LazyIcon name=\"check\" className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","export const OPEN_AI_MODELS = ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo']\nexport const GROQ_MODELS = [\n  'deepseek-r1-distill-llama-70b',\n  'llama-3.2-90b-vision-preview',\n  'llama-3.3-70b-versatile',\n  'llama-3.3-70b-specdec',\n  'llama3-70b-8192',\n  'gemma2-9b-it',\n  'llama3-8b-8192',\n  'mixtral-8x7b-32768',\n]\nexport const GROQ_VISION_MODELS = ['llama-3.2-90b-vision-preview']\nexport const GOOGLE_GENERATIVE_AI_MODELS = [\n  'gemini-2.0-flash-exp',\n  'gemini-1.5-flash',\n  'gemini-1.5-pro',\n  'gemini-1.5-flash-8b',\n]\nexport const GOOGLE_GENERATIVE_AI_API_KEY_LINK = 'https://aistudio.google.com/app/apikey'\nexport const OPEN_AI_API_KEY_LINK = 'https://platform.openai.com/api-keys'\nexport const GROQ_API_KEY_LINK = 'https://console.groq.com/keys'\n","import { LLMProviderEnum } from 'src/services/database/types'\n\nexport const SUPPORTED_PROVIDERS = [\n  LLMProviderEnum.WebLLM,\n  LLMProviderEnum.OpenAI,\n  LLMProviderEnum.GoogleGenerativeAI,\n  LLMProviderEnum.Groq,\n]\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from 'src/lib/shadcn/ui/dialog'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from 'src/lib/shadcn/ui/input-otp'\n\ntype CreateSessionPassphraseDialogProps = {\n  className: string\n  onConfirm: (newValue: string) => Promise<unknown>\n  onCancel: () => void\n}\n\nconst CreateSessionPassphraseDialog = create<CreateSessionPassphraseDialogProps>(\n  ({ onConfirm, onCancel }) => {\n    const currentModal = useModal()\n    const { t } = useTranslation('dialogs')\n    const [name, setName] = useState('')\n\n    const handleChangeOTP = (newValue: string) => {\n      setName(newValue)\n    }\n\n    const handleSubmit = async () => {\n      try {\n        if (name?.length !== 6) {\n          return\n        }\n        await onConfirm?.(name)\n        setName('')\n        currentModal.resolve(true)\n        currentModal.hide()\n      } catch (e) {\n        currentModal.reject(e)\n      }\n    }\n\n    const handleHide = () => {\n      onCancel?.()\n      setName('')\n      currentModal.resolve(false)\n      currentModal.hide()\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={handleHide}>\n        <DialogContent className=\"w-[330px]\">\n          <DialogHeader>\n            <DialogTitle>{t('create_session_passkey.title')}</DialogTitle>\n            <DialogDescription>{t('create_session_passkey.description')}</DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <InputOTP onChange={handleChangeOTP} maxLength={6}>\n              <InputOTPGroup>\n                <InputOTPSlot index={0} hidden />\n                <InputOTPSlot index={1} hidden />\n                <InputOTPSlot index={2} hidden />\n              </InputOTPGroup>\n              <InputOTPSeparator />\n              <InputOTPGroup>\n                <InputOTPSlot index={3} hidden />\n                <InputOTPSlot index={4} hidden />\n                <InputOTPSlot index={5} hidden />\n              </InputOTPGroup>\n            </InputOTP>\n          </div>\n          <DialogFooter>\n            <Button disabled={name?.length !== 6} onClick={handleSubmit} type=\"submit\">\n              {t('create_session_passkey.confirm')}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateSessionPassphraseDialog\n","import { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { encryptSymmetric, generatePassphrase } from 'src/utils/aes'\n\nexport const useUpdateSessionPassphrase = () => {\n  const [loading, setLoading] = useState(false)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const setCurrentSession = useSessionState((state) => state.setCurrentSession)\n\n  const updateSessionPassphrase = useCallback(\n    async (passkey: string) => {\n      if (!currentSession || !passkey) {\n        return\n      }\n      try {\n        setLoading(true)\n\n        const passphrase = await generatePassphrase()\n        const encrypted = await encryptSymmetric(passphrase, passkey)\n        await getRepository('Session').update(currentSession.id, {\n          passphrase: encrypted,\n        })\n        const session = await getRepository('Session').findOne({ where: { id: currentSession.id } })\n        if (session) {\n          setCurrentSession(session)\n        }\n        return {\n          passphrase,\n          encrypted,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [currentSession, setCurrentSession],\n  )\n\n  return {\n    loading,\n    updateSessionPassphrase,\n  }\n}\n","import { useCallback } from 'react'\nimport { useSessionState } from 'src/states/session'\nimport secureSession from 'src/utils/secure-session'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\nimport CreateSessionPassphraseDialog from 'src/components/dialogs/CreateSessionPassphraseDialog'\nimport { useUpdateSessionPassphrase } from 'src/hooks/mutations/use-update-session-passphrase'\nimport { useConfirmPassphrase } from './use-confirm-passphrase'\n\nexport const useConfirmOrCreatePassphrase = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { modalRef: createSessionPassphraseDialogRef } = useModalRef(CreateSessionPassphraseDialog)\n  const { updateSessionPassphrase } = useUpdateSessionPassphrase()\n  const { confirmPassphrase } = useConfirmPassphrase()\n\n  const confirmOrCreatePassphrase = useCallback(async () => {\n    if (!currentSession?.passphrase) {\n      let passkey = ''\n      await createSessionPassphraseDialogRef.current.show({\n        onConfirm: async (input: string) => {\n          passkey = input\n        },\n      })\n      if (!passkey) {\n        throw new Error('Passphrase is required')\n      }\n      const keyInfo = await updateSessionPassphrase(passkey)\n      if (!keyInfo) {\n        throw new Error('Failed to update session passphrase')\n      }\n      await secureSession.set('passphrase', keyInfo.passphrase)\n    } else {\n      await confirmPassphrase()\n    }\n    return secureSession.get('passphrase')\n  }, [\n    confirmPassphrase,\n    createSessionPassphraseDialogRef,\n    currentSession?.passphrase,\n    updateSessionPassphrase,\n  ])\n\n  return {\n    confirmOrCreatePassphrase,\n  }\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useCreateLLM } from 'src/hooks/flows/mutations/use-create-llm'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { Popover, PopoverContent } from 'src/lib/shadcn/ui/popover'\nimport { PopoverTrigger } from '@radix-ui/react-popover'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from 'src/lib/shadcn/ui/command'\nimport { LLMModelTypeEnum, LLMProviderEnum } from 'src/services/database/types'\nimport { useLocalLLMState } from 'src/services/local-llm'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { RECOMMENDATION_LOCAL_LLMS } from 'src/constants/local-llm'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { Alert } from 'src/lib/shadcn/ui/alert'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { logError } from 'src/utils/logger'\nimport { useSessionState } from 'src/states/session'\nimport { encryptData } from 'src/utils/passphrase'\nimport { Checkbox } from 'src/lib/shadcn/ui/checkbox'\nimport {\n  GROQ_API_KEY_LINK,\n  GROQ_MODELS,\n  GROQ_VISION_MODELS,\n  OPEN_AI_API_KEY_LINK,\n  OPEN_AI_MODELS,\n  GOOGLE_GENERATIVE_AI_API_KEY_LINK,\n  GOOGLE_GENERATIVE_AI_MODELS,\n} from 'src/constants/llm'\n\nimport { SUPPORTED_PROVIDERS } from './constants'\nimport { useConfirmOrCreatePassphrase } from 'src/hooks/mutations/use-confirm-or-create-passphrase'\n\nfunction CreateLLMCard(props: NodeProps & { setDialog?: (value: boolean) => void }) {\n  const { id, setDialog } = props\n  const { t } = useTranslation('components')\n  const { toast } = useToast()\n  const node = useInternalNode(id)\n  const [loading, setLoading] = useState(false)\n  const [input, setInput] = useState('')\n  const [open, setOpen] = useState(false)\n  const [search, setSearch] = useState('')\n  const [encryptedInfo, setEncryptedInfo] = useState<Record<string, string>>()\n  const [provider, setProvider] = useState<`${LLMProviderEnum}`>(LLMProviderEnum.WebLLM)\n  const [hasCache, setHasCache] = useState(false)\n  const [llmsInfo, setLLMsInfo] = useState<{\n    modelList: ModelRecord[]\n    functionCallingModelIds: string[]\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const syncCachedLLMURLs = useLocalLLMState((state) => state.syncCachedLLMURLs)\n  const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs)\n  const { loading: creatingLLM, createLLM } = useCreateLLM()\n\n  const { confirmOrCreatePassphrase } = useConfirmOrCreatePassphrase()\n\n  useEffect(() => {\n    import('@mlc-ai/web-llm').then(async ({ functionCallingModelIds, prebuiltAppConfig }) => {\n      const modelList = prebuiltAppConfig.model_list\n      setLLMsInfo({ modelList, functionCallingModelIds })\n    })\n  }, [])\n\n  useEffect(() => {\n    syncCachedLLMURLs()\n  }, [syncCachedLLMURLs])\n\n  const isRequiredSessionPasskey = useMemo(() => {\n    if (!input) return false\n    return provider !== LLMProviderEnum.WebLLM\n  }, [input, provider])\n\n  const modelList = useMemo(() => {\n    if (!llmsInfo?.functionCallingModelIds || !llmsInfo?.modelList) return []\n\n    const data = !search\n      ? llmsInfo?.modelList\n      : llmsInfo?.modelList.filter((model) =>\n          model.model_id.toLowerCase().includes(search.toLowerCase()),\n        )\n\n    return (data || []).sort((pre, next) => {\n      // Check if models are in cachedLLMURLs\n      const preInCache = cachedLLMURLs.some((item) => item.includes(pre.model_id))\n      const nextInCache = cachedLLMURLs.some((item) => item.includes(next.model_id))\n\n      // Prioritize models in cachedLLMURLs\n      if (preInCache && !nextInCache) {\n        return -1\n      }\n      if (!preInCache && nextInCache) {\n        return 1\n      }\n\n      const preInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(pre.model_id)\n      const nextInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(next.model_id)\n\n      // Prioritize models in RECOMMENDATION_LOCAL_LLMS\n      if (preInRecommended && !nextInRecommended) {\n        return -1\n      }\n      if (!preInRecommended && nextInRecommended) {\n        return 1\n      }\n\n      // Check if models are in functionCallingModelIds\n      const preInFunctionCalling = llmsInfo?.functionCallingModelIds.includes(pre.model_id)\n      const nextInFunctionCalling = llmsInfo?.functionCallingModelIds.includes(next.model_id)\n\n      // Prioritize models in functionCallingModelIds\n      if (preInFunctionCalling && !nextInFunctionCalling) {\n        return -1\n      }\n      if (!preInFunctionCalling && nextInFunctionCalling) {\n        return 1\n      }\n\n      // Compare buffer_size_required_bytes\n      if (\n        pre.vram_required_MB &&\n        next.vram_required_MB &&\n        pre.vram_required_MB !== next.vram_required_MB\n      ) {\n        return pre.vram_required_MB - next.vram_required_MB\n      }\n\n      return pre.model_id.localeCompare(next.model_id)\n    })\n  }, [llmsInfo?.modelList, llmsInfo?.functionCallingModelIds, search, cachedLLMURLs])\n\n  const selectedModel = useMemo<ModelRecord | undefined>(() => {\n    if (!input) return\n\n    switch (provider) {\n      case LLMProviderEnum.WebLLM:\n        return llmsInfo?.modelList && modelList.find((model) => model.model_id === input)\n      case LLMProviderEnum.Groq:\n        setEncryptedInfo({})\n        return {\n          model: input,\n          model_id: input,\n          model_type: GROQ_VISION_MODELS.includes(input) ? 2 : 0,\n          overrides: {},\n        } as ModelRecord\n      case LLMProviderEnum.OpenAI:\n        setEncryptedInfo({})\n        return {\n          model: input,\n          model_id: input,\n          model_type: 2,\n          overrides: {},\n        } as ModelRecord\n      case LLMProviderEnum.GoogleGenerativeAI:\n        setEncryptedInfo({})\n        return {\n          model: input,\n          model_id: input,\n          model_type: 2,\n          overrides: {},\n        } as ModelRecord\n    }\n  }, [input, llmsInfo?.modelList, modelList, provider])\n\n  useEffect(() => {\n    if (!selectedModel?.model_id || !cachedLLMURLs) return\n\n    setHasCache(cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)))\n  }, [cachedLLMURLs, selectedModel?.model_id])\n  useEffect(() => {\n    if (!currentSession?.id) return\n\n    setProvider(LLMProviderEnum.WebLLM)\n    setInput('')\n    setSearch('')\n    setEncryptedInfo({})\n  }, [currentSession?.id])\n\n  const handleOnchange = useCallback((currentValue: string) => {\n    setInput(currentValue)\n    setOpen(false)\n  }, [])\n  const handleSearchChange = useCallback((value: string) => {\n    setSearch(value)\n  }, [])\n  const handleOnSelectProvider = useCallback((value: `${LLMProviderEnum}`) => {\n    setProvider(value)\n    setInput('')\n    setSearch('')\n    setEncryptedInfo({})\n  }, [])\n  const hanldeSubmit = async () => {\n    if (!node || !currentSession) return\n    try {\n      setLoading(true)\n      let encrypted: Record<string, unknown> | undefined\n\n      if (isRequiredSessionPasskey) {\n        const passphrase = await confirmOrCreatePassphrase()\n        if (!passphrase) {\n          throw new Error('Passphrase is not found')\n        }\n        encrypted = await encryptData(encryptedInfo || {}, passphrase)\n      }\n      await createLLM(node, {\n        name: input,\n        model_type: modelTypeToLLMType(selectedModel?.model_type),\n        function_calling: selectedModel?.model_id\n          ? llmsInfo?.functionCallingModelIds?.includes(selectedModel?.model_id)\n          : false,\n        encrypted,\n        provider,\n      })\n      setDialog?.(false)\n    } catch (error) {\n      logError('Create LLM', error)\n      toast({\n        variant: 'destructive',\n        description: t('add_llm_card.errors.failed_to_create'),\n      })\n    } finally {\n      setLoading(false)\n      setProvider(LLMProviderEnum.WebLLM)\n      setEncryptedInfo({})\n      setInput('')\n      setSearch('')\n    }\n  }\n\n  const modelTypeToLLMType = useCallback((modelType?: unknown) => {\n    if (modelType === 1) {\n      return LLMModelTypeEnum.embedding\n    }\n    if (modelType === 2) {\n      return LLMModelTypeEnum.VLM\n    }\n    return LLMModelTypeEnum.LLM\n  }, [])\n\n  const modelItems = useMemo(() => {\n    switch (provider) {\n      case LLMProviderEnum.WebLLM:\n        return modelList.map((model) => (\n          <CommandItem key={model.model_id} value={model.model_id} onSelect={handleOnchange}>\n            {input === model.model_id ? (\n              <LazyIcon name=\"check\" className={'mr-2 h-4 w-4'} />\n            ) : (\n              <div className=\"mr-2 h-4 w-4\" />\n            )}\n            <span className=\"max-w-md\">\n              <div className=\"flex gap-2 mb-2\">\n                <LLMIcon name={model.model_id} />\n                {model.model_id}\n              </div>\n              <div className=\"flex max-w-full flex-wrap gap-1\">\n                <LLMInfo\n                  model={model}\n                  isFunctionCalling={\n                    llmsInfo?.functionCallingModelIds?.includes(model.model_id) || false\n                  }\n                  name={model.model_id}\n                  isCached={cachedLLMURLs.some((item) => item.includes(model.model_id)) || false}\n                  cloud={provider !== LLMProviderEnum.WebLLM}\n                />\n              </div>\n            </span>\n          </CommandItem>\n        ))\n      case LLMProviderEnum.OpenAI:\n        return OPEN_AI_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {input === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n      case LLMProviderEnum.GoogleGenerativeAI:\n        return GOOGLE_GENERATIVE_AI_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {input === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n      case LLMProviderEnum.Groq:\n        return GROQ_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {input === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n    }\n    return\n  }, [cachedLLMURLs, handleOnchange, input, llmsInfo?.functionCallingModelIds, modelList, provider])\n\n  const encryptedFields = useMemo(() => {\n    if (!isRequiredSessionPasskey) return undefined\n\n    switch (provider) {\n      case LLMProviderEnum.Groq:\n      case LLMProviderEnum.OpenAI:\n        return (\n          <>\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              {t('add_llm_card.alert.session_passkey')}\n            </Alert>\n            <div className=\"mt-4\">\n              <Label>{t('add_llm_card.encrypted_fields.api_key')}</Label>\n              <Button variant=\"link\" className=\"px-1\">\n                <a\n                  href={\n                    provider === LLMProviderEnum.OpenAI ? OPEN_AI_API_KEY_LINK : GROQ_API_KEY_LINK\n                  }\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ({provider === LLMProviderEnum.OpenAI ? OPEN_AI_API_KEY_LINK : GROQ_API_KEY_LINK})\n                </a>\n              </Button>\n              <Input\n                type=\"password\"\n                value={encryptedInfo?.key || ''}\n                onChange={(e) =>\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    key: e.target.value,\n                  }))\n                }\n              />\n            </div>\n          </>\n        )\n      case LLMProviderEnum.GoogleGenerativeAI:\n        return (\n          <>\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              {t('add_llm_card.alert.session_passkey')}\n            </Alert>\n            <div className=\"mt-4\">\n              <Label>{t('add_llm_card.encrypted_fields.api_key')}</Label>\n              <Button variant=\"link\" className=\"px-1\">\n                <a href={GOOGLE_GENERATIVE_AI_API_KEY_LINK} target=\"_blank\" rel=\"noreferrer\">\n                  ({GOOGLE_GENERATIVE_AI_API_KEY_LINK})\n                </a>\n              </Button>\n              <Input\n                type=\"password\"\n                value={encryptedInfo?.key || ''}\n                onChange={(e) =>\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    key: e.target.value,\n                  }))\n                }\n              />\n            </div>\n            <div className=\"mt-4 flex items-center\">\n              <Label>{t('add_llm_card.encrypted_fields.enabled_google_search_retreival')}</Label>\n              <Checkbox\n                checked={!!encryptedInfo?.enabled_google_search_retreival}\n                className=\"ml-2\"\n                onCheckedChange={(e) => {\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    enabled_google_search_retreival: !e ? '' : `true`,\n                  }))\n                }}\n              />\n            </div>\n          </>\n        )\n    }\n  }, [isRequiredSessionPasskey, provider, t, encryptedInfo])\n\n  return (\n    <Card className=\"max-w-lg\">\n      <CardHeader>\n        <CardTitle>{t('add_llm_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid w-full gap-1.5\">\n          <Label>{t('add_llm_card.provider')}</Label>\n          <Select value={provider} onValueChange={handleOnSelectProvider}>\n            <SelectTrigger className=\"w-full mb-4\">\n              <SelectValue placeholder={t('add_llm_card.provider_select_placeholder')} />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.values(SUPPORTED_PROVIDERS).map((item) => {\n                return (\n                  <SelectItem key={item} value={item}>\n                    {t(`add_llm_card.providers.${item.toLowerCase()}`)}\n                  </SelectItem>\n                )\n              })}\n            </SelectContent>\n          </Select>\n          <Label>{t('add_llm_card.model_name')}</Label>\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={open}\n                className=\"w-full justify-between\"\n              >\n                {input ? selectedModel?.model_id : t('add_llm_card.select_model_placeholder')}\n                <LazyIcon name=\"chevrons-up-down\" className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-full p-0\">\n              <Command>\n                <CommandInput\n                  onValueChange={handleSearchChange}\n                  placeholder={t('add_llm_card.search_placeholder')}\n                />\n                <CommandList>\n                  <CommandEmpty>{t('add_llm_card.no_model')}</CommandEmpty>\n                  <CommandGroup>{modelItems}</CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n        {selectedModel ? (\n          <div className=\"mt-4\">\n            <div className=\"mt-4 text-sm text-muted-foreground center flex max-w-full flex-wrap gap-1\">\n              <LLMIcon name={selectedModel.model_id} className=\"mr-2\" />\n              <LLMInfo\n                model={selectedModel}\n                isFunctionCalling={\n                  llmsInfo?.functionCallingModelIds?.includes(selectedModel.model_id) || false\n                }\n                name={selectedModel.model_id}\n                isCached={\n                  cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)) || false\n                }\n                cloud={provider !== LLMProviderEnum.WebLLM}\n              />\n            </div>\n            <div className=\"mt-2 text-sm text-muted-foreground\">\n              <span className=\"font-bold mr-2\">{t('add_llm_card.model_url')}</span>\n              {selectedModel.model}\n            </div>\n            {selectedModel.model_lib ? (\n              <div className=\"mt-2 text-sm text-muted-foreground center flex\">\n                <span className=\"font-bold mr-2\">{t('add_llm_card.model_lib_url')}</span>\n                {selectedModel.model_lib}\n              </div>\n            ) : undefined}\n            {selectedModel.overrides && Object.keys(selectedModel.overrides)?.length ? (\n              <div className=\"mt-2 text-sm text-muted-foreground center flex\">\n                <span className=\"font-bold mr-2\">{t('add_llm_card.metadata')}</span>\n                {JSON.stringify(selectedModel.overrides)}\n              </div>\n            ) : undefined}\n          </div>\n        ) : null}\n        {encryptedFields}\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={creatingLLM || loading}\n          disabled={!input?.length}\n          onClick={hanldeSubmit}\n          className=\"w-full\"\n        >\n          {hasCache ? t('add_llm_card.button_add') : t('add_llm_card.button_download_and_add')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default CreateLLMCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  PromptTypeEnum,\n  Thread,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreatePrompt = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createPrompt = useCallback(\n    async (\n      source: Node,\n      options: {\n        content: string\n        prefix?: string\n        type?: `${PromptTypeEnum}`\n        role?: `${MessageRoleEnum}`\n        thread?: Thread\n      },\n    ) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const prompt = await getRepository('Prompt').save({\n          content: options.content,\n          prefix: options.prefix,\n          role: options.role || MessageRoleEnum.System,\n          status: MessageStatusEnum.Started,\n          session_id: sessionId,\n          type: options.type || PromptTypeEnum.Chat,\n        })\n        if (!prompt) {\n          throw new Error('Failed to save prompt')\n        }\n        const promptNode = await createOrUpdateFlowNode({\n          source_id: prompt.id,\n          source_type: 'Prompt',\n          node_type: FlowNodeTypeEnum.Prompt,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!promptNode) {\n          throw new Error('Failed to save prompt node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createPrompt,\n  }\n}\n","import { MessageRoleEnum, PromptTypeEnum } from 'src/services/database/types'\n\nexport const PROMPT_TYPES = {\n  [PromptTypeEnum.Chat]: {\n    label: 'add_prompt_card.prompt_types.chat',\n    value: PromptTypeEnum.Chat,\n  },\n  [PromptTypeEnum.FewShotExample]: {\n    label: 'add_prompt_card.prompt_types.few_shot_example',\n    value: PromptTypeEnum.FewShotExample,\n  },\n}\nexport const PROMPT_ROLES = {\n  [MessageRoleEnum.System]: {\n    label: 'add_prompt_card.prompt_roles.system',\n    value: MessageRoleEnum.System,\n  },\n  [MessageRoleEnum.Human]: {\n    label: 'add_prompt_card.prompt_roles.human',\n    value: MessageRoleEnum.Human,\n  },\n  [MessageRoleEnum.AI]: { label: 'add_prompt_card.prompt_roles.ai', value: MessageRoleEnum.AI },\n}\n","import { memo, useCallback, useState } from 'react'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { MessageRoleEnum, Prompt, PromptTypeEnum } from 'src/services/database/types'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { PROMPT_ROLES, PROMPT_TYPES } from './constants'\n\nconst PromptForm = memo(\n  ({\n    defaultPromptContent,\n    defaultPromptRole,\n    defaultPromptType,\n    hidePromptRole,\n    hidePromptType,\n    loading,\n    onSubmit,\n  }: {\n    onSubmit: (prompt: Partial<Prompt>) => Promise<unknown>\n    loading?: boolean\n    defaultPromptType?: `${PromptTypeEnum}`\n    defaultPromptRole?: `${MessageRoleEnum}`\n    defaultPromptContent?: string\n    hidePromptType?: boolean\n    hidePromptRole?: boolean\n  }) => {\n    const [input, setInput] = useState(defaultPromptContent || '')\n    const [promptType, setPromptType] = useState<`${PromptTypeEnum}`>(\n      defaultPromptType || PromptTypeEnum.Chat,\n    )\n    const [promptRole, setPromptRole] = useState<`${MessageRoleEnum}` | undefined>(\n      defaultPromptRole,\n    )\n    const [promptPrefix, setPromptPrefix] = useState('')\n\n    const { t } = useTranslation('components')\n\n    const handleOnchange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setInput(e.target.value)\n    }, [])\n\n    const handleOnchangePrefix = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setPromptPrefix(e.target.value)\n    }, [])\n\n    const handleOnSelectType = useCallback((value: `${PromptTypeEnum}`) => {\n      if (value === PromptTypeEnum.FewShotExample) {\n        setInput('Question: {input}\\nAnswer: {output}')\n      }\n      setPromptType(value)\n    }, [])\n\n    const handleOnSelectRole = useCallback((value: `${MessageRoleEnum}`) => {\n      setPromptRole(value)\n    }, [])\n\n    const handleSubmit = async () => {\n      const result = await onSubmit({\n        content: input,\n        role: promptRole,\n        prefix: promptPrefix,\n        type: promptType,\n      })\n      if (!result) {\n        return\n      }\n      setInput('')\n      setPromptRole(undefined)\n      setPromptType('chat')\n      setPromptPrefix('')\n    }\n\n    return (\n      <div>\n        <div className=\"grid w-full gap-1.5\">\n          {!hidePromptType ? (\n            <>\n              <Label>{t('add_prompt_card.prompt_type')}</Label>\n              <Select value={promptType} onValueChange={handleOnSelectType}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue placeholder={t('add_prompt_card.type_select_placeholder')} />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(PROMPT_TYPES).map((item) => {\n                    return (\n                      <SelectItem key={item.value} value={item.value}>\n                        {t(item.label)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {!hidePromptRole ? (\n            <>\n              <Label>{t('add_prompt_card.prompt_role')}</Label>\n              <Select value={promptRole} onValueChange={handleOnSelectRole}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue placeholder={t('add_prompt_card.role_select_placeholder')} />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(PROMPT_ROLES).map((item) => {\n                    return (\n                      <SelectItem key={item.value} value={item.value}>\n                        {t(item.label)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {promptType === PromptTypeEnum.FewShotExample && (\n            <>\n              <Label>{t('add_prompt_card.prompt_prefix')}</Label>\n              <Textarea\n                value={promptPrefix}\n                onChange={handleOnchangePrefix}\n                disabled={false}\n                className=\"h-20\"\n                placeholder={t('add_prompt_card.placeholder')}\n                id=\"message\"\n              />\n              <Label>{t('add_prompt_card.prompt_content')}</Label>\n              <div className=\"w-full border-0 text-gray-700 flex text-sm justify-end items-center\">\n                <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n                {t('add_prompt_card.few_shot_example_note')}\n              </div>\n            </>\n          )}\n          <Textarea\n            value={input}\n            onChange={handleOnchange}\n            disabled={false}\n            placeholder={t('add_prompt_card.placeholder')}\n            id=\"message\"\n          />\n        </div>\n        <div>\n          <LoadingButton\n            loading={loading}\n            disabled={!input?.length}\n            onClick={handleSubmit}\n            className=\"w-full mt-4\"\n          >\n            {t('add_prompt_card.button')}\n          </LoadingButton>\n        </div>\n      </div>\n    )\n  },\n)\n\nexport default PromptForm\n","import { memo } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Prompt, Thread } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { useCreatePrompt } from 'src/hooks/flows/mutations/use-create-prompt'\n\nimport PromptForm from './PromptForm'\n\nconst CreatePromptCard = memo(\n  (\n    props: Omit<NodeProps, 'data'> & {\n      data?: { ready?: boolean }\n      thread?: Thread\n      setDialog?: (value: boolean) => void\n    },\n  ) => {\n    const { id, thread, setDialog } = props\n\n    const { t } = useTranslation('components')\n    const { toast } = useToast()\n    const node = useInternalNode(id)\n    const { createPrompt, loading } = useCreatePrompt()\n\n    const handleSubmit = async (data: Partial<Prompt>) => {\n      if (node) {\n        try {\n          if (!data?.content) {\n            throw new Error('Prompt data is missing')\n          }\n          await createPrompt(node, {\n            ...data,\n            content: data.content,\n            thread,\n          })\n          setDialog?.(false)\n        } catch (error) {\n          toast({\n            variant: 'destructive',\n            title: `${error}`,\n          })\n        }\n      }\n    }\n\n    return (\n      <Card className=\"mw-full\">\n        <CardHeader>\n          <CardTitle>{t('add_prompt_card.title')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <PromptForm\n            onSubmit={handleSubmit}\n            loading={loading}\n            defaultPromptRole=\"system\"\n            defaultPromptType=\"chat\"\n          />\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default CreatePromptCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { SchemaItemType } from 'src/components/molecules/CreateSchemaCard/Field/type'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, SchemaItem } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { EntityType } from 'src/utils/orm-type'\nimport { generateUUID } from 'src/utils/uuid'\n\nexport const useCreateSchema = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const toSchemaItem = useCallback(\n    (\n      schemaId: string,\n      input: SchemaItemType[],\n      result: EntityType<SchemaItem>[],\n      parent?: string,\n    ) => {\n      if (!sessionId) {\n        return\n      }\n      for (const item of input) {\n        if (item.data?.length) {\n          toSchemaItem(schemaId, item.data, result, item.id)\n        } else {\n          result.push({\n            name: item.name,\n            type: item.type,\n            enum: item.enum ? JSON.stringify(item.enum) : '',\n            required: item.required,\n            description: item.description,\n            id: item.id || generateUUID(),\n            parent_id: parent,\n            schema_id: schemaId,\n            session_id: sessionId,\n          })\n        }\n      }\n      return result\n    },\n    [sessionId],\n  )\n\n  const createSchema = useCallback(\n    async (source: Node, input: SchemaItemType[]) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const schema = await getRepository('Schema').save({\n          name: 'Untitled Schema',\n          session_id: sessionId,\n        })\n        if (!schema) {\n          throw new Error('Failed to save schema')\n        }\n\n        const schemaItems = toSchemaItem(schema.id, input, [], undefined)\n        if (!schemaItems?.length) {\n          throw new Error('Failed to convert schema items')\n        }\n        await getRepository('SchemaItem').save(schemaItems)\n        const promptNode = await createOrUpdateFlowNode({\n          source_id: schema.id,\n          source_type: 'Schema',\n          node_type: FlowNodeTypeEnum.Schema,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!promptNode) {\n          throw new Error('Failed to save schema node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, toSchemaItem, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createSchema,\n  }\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Checkbox } from 'src/lib/shadcn/ui/checkbox'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport FieldList from './FieldList'\nimport { SchemaItemType } from './type'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { generateUUID } from 'src/utils/uuid'\n\nconst NewOrUpdateField = memo(\n  ({\n    setData,\n    data,\n    id,\n  }: {\n    id?: string\n    setData: (func: (data: SchemaItemType[]) => SchemaItemType[]) => void\n    data: SchemaItemType[]\n  }) => {\n    const { t } = useTranslation('components')\n    const [empty, setEmpty] = useState<SchemaItemType>({\n      name: '',\n      description: '',\n      type: 'string',\n      required: false,\n      data: [],\n    })\n\n    const currentRow = useMemo(() => {\n      return id ? data.find((item) => item.id === id) || empty : empty\n    }, [data, empty, id])\n\n    const handleChangeName = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value && !/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(e.target.value)) {\n          return\n        }\n        if (!id) {\n          setEmpty((item) => ({ ...item, name: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      name: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeDescription = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, description: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      description: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeType = useCallback(\n      (e: string) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, type: (e || 'string') as SchemaItemType['type'] }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      type: (e || '') as SchemaItemType['type'],\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeRequired = useCallback(\n      (e: string | boolean) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, required: !!e || false }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      required: !!e || false,\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeEnum = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, enum: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      enum: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleAddNew = useCallback(() => {\n      if (data.find((item) => item.name === empty.name)) {\n        return toast({\n          variant: 'destructive',\n          content: 'Name already exists',\n        })\n      }\n      empty.id = generateUUID()\n      setData((items) => {\n        return [...items, { ...empty }]\n      })\n      setEmpty({\n        name: '',\n        description: '',\n        type: 'string',\n        required: false,\n        id: generateUUID(),\n        parent: id || undefined,\n        data: [],\n      })\n    }, [data, empty, setData, id])\n\n    const handleSetChildData = useCallback(\n      (func: (previous: SchemaItemType[]) => SchemaItemType[]) => {\n        setData((previousData) => {\n          return [\n            ...previousData.map((item) =>\n              item.id === id\n                ? {\n                    ...item,\n                    data: func(item.data || []),\n                  }\n                : item,\n            ),\n          ]\n        })\n      },\n      [id, setData],\n    )\n\n    const shouldShowChildData = ['object', 'array'].includes(currentRow.type)\n\n    return (\n      <div className=\"w-full p-1\">\n        <div>\n          <Label>{t('add_schema_card.field.name')}</Label>\n          <Input\n            id=\"name\"\n            onChange={handleChangeName}\n            placeholder={t('add_schema_card.field.name_placeholder')}\n            value={currentRow?.name || ''}\n          />\n        </div>\n        <div>\n          <Label>{t('add_schema_card.field.description')}</Label>\n          <Input\n            id=\"description\"\n            placeholder={t('add_schema_card.field.description_placeholder')}\n            onChange={handleChangeDescription}\n            value={currentRow?.description || ''}\n          />\n        </div>\n        <div>\n          <Label>{t('add_schema_card.field.type')}</Label>\n          <Select onValueChange={handleChangeType} value={currentRow?.type || ''}>\n            <SelectTrigger>\n              <SelectValue placeholder={t('add_schema_card.field.type_placeholder')} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"string\">{t('add_schema_card.types.string')}</SelectItem>\n              <SelectItem value=\"boolean\">{t('add_schema_card.types.boolean')}</SelectItem>\n              <SelectItem value=\"number\">{t('add_schema_card.types.number')}</SelectItem>\n              <SelectItem value=\"object\">{t('add_schema_card.types.object')}</SelectItem>\n              <SelectItem value=\"array\">{t('add_schema_card.types.array')}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex items-center h-10\">\n          <Label>{t('add_schema_card.field.required')}</Label>\n          <Checkbox\n            className=\"ml-2\"\n            aria-label=\"Select row\"\n            onCheckedChange={handleChangeRequired}\n            checked={currentRow?.required}\n          />\n        </div>\n        {shouldShowChildData ? (\n          <div className=\"mt-2 flex flex-col gap-2\">\n            <Label>{t('add_schema_card.children')}</Label>\n            <FieldList data={currentRow?.data || []} setData={handleSetChildData} />\n          </div>\n        ) : null}\n        {currentRow?.type === 'enum' ? (\n          <div className=\"mt-2 flex flex-col gap-2\">\n            <Label>{t('add_schema_card.field.enum')}</Label>\n            <Input id=\"enum\" onChange={handleChangeEnum} placeholder=\"Enum\" />\n          </div>\n        ) : null}\n        {!id ? (\n          <div className=\"w-full flex justify-end mt-2\">\n            <Button\n              variant=\"secondary\"\n              disabled={!currentRow.name || !currentRow.description || !currentRow.type}\n              onClick={handleAddNew}\n              className=\"w-full\"\n            >\n              {t('add_schema_card.field.add_field')}\n            </Button>\n          </div>\n        ) : null}\n      </div>\n    )\n  },\n)\n\nexport default NewOrUpdateField\n","// import { z } from 'zod'\nimport { memo } from 'react'\nimport { SchemaItemType } from './type'\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from 'src/lib/shadcn/ui/accordion'\nimport { Card } from 'src/lib/shadcn/ui/card'\nimport NewOrUpdateField from './NewOrUpdateField'\n\nconst FieldList = memo(\n  ({\n    data,\n    setData,\n  }: {\n    data: SchemaItemType[]\n    setData: (func: (data: SchemaItemType[]) => SchemaItemType[]) => void\n  }) => {\n    return (\n      <Accordion type=\"single\" collapsible>\n        {data.map((row) => {\n          return (\n            <AccordionItem key={row.id || 'new'} value={`${row.id}`}>\n              <AccordionTrigger>{row.name}</AccordionTrigger>\n              <AccordionContent>\n                <NewOrUpdateField setData={setData} data={data} id={row.id} />\n              </AccordionContent>\n            </AccordionItem>\n          )\n        })}\n        <Card className=\"p-2 mt-4\">\n          <NewOrUpdateField setData={setData} data={data} />\n        </Card>\n      </Accordion>\n    )\n  },\n)\n\nexport default FieldList\n","import { memo, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport { useCreateSchema } from 'src/hooks/flows/mutations/use-create-schema'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { SchemaItemType } from './Field/type'\nimport FieldList from './Field/FieldList'\n\nconst CreateSchemaCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { id } = props\n  const node = useInternalNode(id)\n\n  const [data, setData] = useState<SchemaItemType[]>([])\n\n  const { createSchema, loading } = useCreateSchema()\n\n  const handleSubmit = async () => {\n    if (node && data?.length) {\n      try {\n        await createSchema(node, data)\n        setData([])\n      } catch (error) {\n        toast({\n          variant: 'destructive',\n          title: `${error}`,\n        })\n      }\n    }\n  }\n  return (\n    <Card className=\"max-w-lg\">\n      <CardHeader>\n        <CardTitle>{t('add_schema_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"min-w-96\">\n        <FieldList setData={setData} data={data} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleSubmit}\n          className=\"w-full\"\n        >\n          {t('add_schema_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateSchemaCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { encodeCSVData } from 'src/utils/string-data'\n\nexport const useCreateCSVData = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createCSVData = useCallback(\n    async (source: Node, headers: string[], data: string[][]) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const encodedData = encodeCSVData(headers, data)\n        const csvData = await getRepository('CSVData').save({\n          headers: encodedData.headers,\n          csv: encodedData.data,\n          session_id: sessionId,\n        })\n        if (!csvData) {\n          throw new Error('Failed to save')\n        }\n        const dataNode = await createOrUpdateFlowNode({\n          source_id: csvData.id,\n          source_type: 'CSVData',\n          node_type: FlowNodeTypeEnum.CSVData,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!dataNode) {\n          throw new Error('Failed to save node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createCSVData,\n  }\n}\n","import { useTranslation } from 'react-i18next'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'src/lib/shadcn/ui/table'\n\nexport function ExampleTable({ data }: { data: { input: string; output: string }[] }) {\n  const { t } = useTranslation('components')\n  return (\n    <Table className=\"w-full\">\n      <TableHeader>\n        <TableRow>\n          <TableHead>{t('add_few_shot_example_card.input')}</TableHead>\n          <TableHead>{t('add_few_shot_example_card.output')}</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {data?.map((item, index) => (\n          <TableRow key={`${item.input}_${item.output}_${index}`}>\n            <TableCell className=\"p-4\">{item.input}</TableCell>\n            <TableCell className=\"p-4\">{item.output}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useCreateCSVData } from 'src/hooks/flows/mutations/use-create-csv-data'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { ExampleTable } from './ExampleTable'\n\nconst CreateFewShotExampleCard = memo((props: NodeProps) => {\n  const { id } = props\n  const { t } = useTranslation('components')\n  const [data, setData] = useState<{ input: string; output: string }[]>([])\n  const [input, setInput] = useState('')\n  const [output, setOutput] = useState('')\n  const node = useInternalNode(id)\n  const { createCSVData, loading } = useCreateCSVData()\n\n  const handleAdd = () => {\n    setData((prevData) => [...prevData, { input, output }])\n    setInput('')\n    setOutput('')\n  }\n  const handleCreateCSVData = async () => {\n    if (node) {\n      await createCSVData(\n        node,\n        ['input', 'output'],\n        data.map((item) => [item.input, item.output]),\n      )\n    }\n  }\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_few_shot_example_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5\">\n          <Label htmlFor=\"name\">{t('add_few_shot_example_card.input')}</Label>\n          <Input\n            value={input}\n            onChange={(e) => setInput(e.target.value || '')}\n            id=\"name\"\n            placeholder={t('add_few_shot_example_card.input_placeholder')}\n          />\n        </div>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_few_shot_example_card.output')}</Label>\n          <Textarea\n            value={output}\n            onChange={(e) => setOutput(e.target.value || '')}\n            placeholder={t('add_few_shot_example_card.output_placeholder')}\n          />\n        </div>\n        <div className=\"w-full flex mt-4 justify-end\">\n          <Button disabled={!input || !output} onClick={handleAdd} className=\"w-40\">\n            {t('add_few_shot_example_card.add')}\n          </Button>\n        </div>\n        <ExampleTable data={data || []} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleCreateCSVData}\n          className=\"w-full\"\n        >\n          {t('add_few_shot_example_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateFewShotExampleCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, ToolDefinition } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateTool = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createTool = useCallback(\n    async (\n      source: Node,\n      data: Partial<ToolDefinition>,\n      options?: {\n        schemaNode?: Node\n      },\n    ) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        if (!data.name || !data.description) {\n          throw new Error('Name is required')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const tool = await getRepository('ToolDefinition').save({\n          ...data,\n          name: `${data.name}`,\n          description: `${data.description}`,\n          session_id: sessionId,\n        })\n        if (!tool) {\n          throw new Error('Failed create tool.')\n        }\n        const toolNode = await createOrUpdateFlowNode({\n          source_id: tool.id,\n          source_type: 'ToolDefinition',\n          node_type: FlowNodeTypeEnum.ToolDefinition,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!toolNode) {\n          throw new Error('Failed to save node')\n        }\n        if (options?.schemaNode) {\n          await createOrUpdateFlowEdge({\n            source: options.schemaNode.id,\n            target: toolNode.id,\n          })\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createTool,\n  }\n}\n","import { memo, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { useCreateTool } from 'src/hooks/flows/mutations/use-create-tool'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { logWarn } from 'src/utils/logger'\n\nconst CreateToolCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { toast } = useToast()\n  const { id } = props\n  const node = useInternalNode(id)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  const { createTool, loading } = useCreateTool()\n\n  const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n\n  const handleChangeDescription = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setDescription(e.target.value)\n  }\n\n  const handleSubmit = async () => {\n    if (node && name && description) {\n      try {\n        await createTool(node, { name, description })\n        setName('')\n        setDescription('')\n      } catch (error) {\n        logWarn('Create Tool', error)\n        toast({\n          variant: 'destructive',\n          title: t('add_tool_card.errors.create_tool_failed'),\n        })\n      }\n    }\n  }\n\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_tool_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5\">\n          <Label htmlFor=\"name\">{t('add_tool_card.tool_name')}</Label>\n          <Input\n            onChange={handleChangeName}\n            id=\"name\"\n            placeholder={t('add_tool_card.name_placeholder')}\n          />\n        </div>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_tool_card.tool_description')}</Label>\n          <Textarea\n            onChange={handleChangeDescription}\n            placeholder={t('add_tool_card.description_placeholder')}\n          />\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton loading={loading} onClick={handleSubmit} className=\"w-full\">\n          {t('add_tool_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateToolCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  VectorDatabase,\n  VectorDatabaseProviderEnum,\n  VectorDatabaseStorageEnum,\n  VectorDatabaseTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { encodeSplitter } from 'src/utils/string-data'\n\nexport const useCreateVectorDatabase = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createVectorDatabase = useCallback(\n    async (\n      source: Node,\n      data: Partial<VectorDatabase>,\n      textSplitter?: {\n        type: string\n        chunkSize: number\n        chunkOverlap: number\n      },\n    ) => {\n      try {\n        if (!data?.name || !source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const vectorDatabase = await getRepository('VectorDatabase').save({\n          ...data,\n          name: `${data.name}`,\n          type: data.type || VectorDatabaseTypeEnum.Local,\n          storage: data.storage || VectorDatabaseStorageEnum.DatabaseNode,\n          raw: '',\n          provider: data.provider || VectorDatabaseProviderEnum.Memory,\n          session_id: sessionId,\n          metadata: textSplitter ? JSON.stringify({ textSplitter }) : undefined,\n        })\n\n        if (!vectorDatabase) {\n          throw new Error('Failed to save vectorDatabase')\n        }\n\n        const vectorDatabaseNode = await createOrUpdateFlowNode({\n          source_id: vectorDatabase.id,\n          source_type: 'VectorDatabase',\n          node_type: FlowNodeTypeEnum.VectorDatabase,\n          x: initialX,\n          y: initialY + 30,\n        })\n        if (!vectorDatabaseNode) {\n          throw new Error('Failed to save vectorDatabase node')\n        }\n\n        if (data.storage === VectorDatabaseStorageEnum.DataNode) {\n          // Default JSONLData source\n          const databaseSource = await getRepository('JSONLData').save({\n            headers: encodeSplitter(['content', 'embedding', 'metadata']),\n            jsonl: '',\n            session_id: sessionId,\n          })\n          if (!databaseSource) {\n            throw new Error('Failed to save databaseSource')\n          }\n          const databaseSourceNode = await createOrUpdateFlowNode({\n            source_id: databaseSource.id,\n            source_type: 'JSONLData',\n            node_type: FlowNodeTypeEnum.JSONLData,\n            x: initialX + 80,\n            y: initialY + 30,\n          })\n          if (!databaseSourceNode) {\n            throw new Error('Failed to save databaseSource node')\n          }\n\n          await createOrUpdateFlowEdge({\n            source: databaseSourceNode.id,\n            target: vectorDatabaseNode.id,\n          })\n        }\n\n        return {\n          vectorDatabase,\n          vectorDatabaseNode,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createVectorDatabase,\n  }\n}\n","import { VectorDatabaseProviderEnum, VectorDatabaseStorageEnum } from 'src/services/database/types'\n\nexport const SUPPORTED_VECTOR_DATABASE_PROVIDERS = [VectorDatabaseProviderEnum.Memory]\n\nexport const SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE = [VectorDatabaseStorageEnum.DatabaseNode]\n\nexport const SUPPORTED_TEXT_SPLITTERS = [\n  'TokenTextSplitter',\n  'CharacterTextSplitter',\n  'RecursiveCharacterTextSplitter',\n]\n","import { memo, useCallback, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { VectorDatabaseProviderEnum, VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useCreateVectorDatabase } from 'src/hooks/flows/mutations/use-create-vector-database'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport {\n  SUPPORTED_TEXT_SPLITTERS,\n  SUPPORTED_VECTOR_DATABASE_PROVIDERS,\n  SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE,\n} from './constants'\n\nconst CreateVectorDatabaseCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { id } = props\n  const node = useInternalNode(id)\n  const { toast } = useToast()\n  const [name, setName] = useState('')\n  const [provider, setProvider] = useState<`${VectorDatabaseProviderEnum}`>(\n    SUPPORTED_VECTOR_DATABASE_PROVIDERS[0],\n  )\n  const [storageType, setStorageType] = useState<`${VectorDatabaseStorageEnum}`>(\n    SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE[0],\n  )\n  const [textSplitter, setTextSplitter] = useState<{\n    type?: string\n    chunkSize?: number\n    chunkOverlap?: number\n  }>({})\n  const { loading, createVectorDatabase } = useCreateVectorDatabase()\n\n  const handleOnSelectProvider = useCallback((value: `${VectorDatabaseProviderEnum}`) => {\n    setProvider(value)\n  }, [])\n\n  const handleOnSelectStorageType = useCallback((value: `${VectorDatabaseStorageEnum}`) => {\n    setStorageType(value)\n  }, [])\n\n  const handleOnSelectTextSplitter = useCallback((value: string) => {\n    setTextSplitter((prev) => ({ ...prev, type: value, chunkSize: 500, chunkOverlap: 40 }))\n  }, [])\n\n  const handleOnChangeName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value || '')\n  }, [])\n\n  const handleOnChangeChunkSize = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextSplitter((prev) => ({ ...prev, chunkSize: Number(e.target.value) }))\n  }, [])\n\n  const handleOnChangeChunkOverlap = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextSplitter((prev) => ({ ...prev, chunkOverlap: Number(e.target.value) }))\n  }, [])\n\n  const handleSubmit = async () => {\n    try {\n      if (!node) {\n        return\n      }\n      await createVectorDatabase(\n        node,\n        {\n          name,\n          provider,\n          storage: storageType,\n        },\n        textSplitter?.type\n          ? {\n              type: textSplitter.type,\n              chunkSize: textSplitter.chunkSize || 500,\n              chunkOverlap: textSplitter.chunkOverlap || 0,\n            }\n          : undefined,\n      )\n      setName('')\n      setTextSplitter({})\n    } catch {\n      toast({\n        variant: 'destructive',\n        description: t('create_vector_database_card.errors.create_failed'),\n      })\n    }\n  }\n\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('create_vector_database_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid w-full gap-1.5\">\n          <Label>{t('create_vector_database_card.name')}</Label>\n          <Input className=\"mb-4\" value={name} onChange={handleOnChangeName} />\n          {SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE?.length > 1 ? (\n            <>\n              <Label>{t('create_vector_database_card.storage_type')}</Label>\n              <Select value={storageType} onValueChange={handleOnSelectStorageType}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue\n                    placeholder={t('create_vector_database_card.provider_select_placeholder')}\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE).map((item) => {\n                    return (\n                      <SelectItem key={item} value={item}>\n                        {t(`create_vector_database_card.storage_types.${item.toLowerCase()}`)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {SUPPORTED_VECTOR_DATABASE_PROVIDERS?.length > 1 ? (\n            <>\n              <Label>{t('create_vector_database_card.provider')}</Label>\n              <Select value={provider} onValueChange={handleOnSelectProvider}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue\n                    placeholder={t('create_vector_database_card.provider_select_placeholder')}\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(SUPPORTED_VECTOR_DATABASE_PROVIDERS).map((item) => {\n                    return (\n                      <SelectItem key={item} value={item}>\n                        {t(`create_vector_database_card.providers.${item.toLowerCase()}`)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          <Label>{t('create_vector_database_card.text_splitter')}</Label>\n          <Select value={textSplitter.type} onValueChange={handleOnSelectTextSplitter}>\n            <SelectTrigger className=\"w-full mb-4\">\n              <SelectValue\n                placeholder={t('create_vector_database_card.text_splitter_select_placeholder')}\n              />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.values(SUPPORTED_TEXT_SPLITTERS).map((item) => {\n                return (\n                  <SelectItem key={item} value={item}>\n                    {t(`create_vector_database_card.text_splitters.${item.toLowerCase()}`)}\n                  </SelectItem>\n                )\n              })}\n            </SelectContent>\n          </Select>\n          {textSplitter.type ? (\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {t('create_vector_database_card.text_splitter_configuration')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Label>{t('create_vector_database_card.text_splitter_chunksize')}</Label>\n                <Input\n                  value={textSplitter.chunkSize}\n                  onChange={handleOnChangeChunkSize}\n                  placeholder={t('create_vector_database_card.text_splitter_chunksize_placeholder')}\n                />\n                <Label>{t('create_vector_database_card.text_splitter_chunkoverlap')}</Label>\n                <Input\n                  value={textSplitter.chunkOverlap}\n                  onChange={handleOnChangeChunkOverlap}\n                  placeholder={t(\n                    'create_vector_database_card.text_splitter_chunkoverlap_placeholder',\n                  )}\n                />\n              </CardContent>\n            </Card>\n          ) : undefined}\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          disabled={!textSplitter.type || !name}\n          loading={loading}\n          onClick={handleSubmit}\n          className=\"w-full\"\n        >\n          {t('create_vector_database_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateVectorDatabaseCard\n","import { useTranslation } from 'react-i18next'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'src/lib/shadcn/ui/table'\n\nexport function DataTable({ data }: { data: { text: string }[] }) {\n  const { t } = useTranslation('components')\n  return (\n    <Table className=\"w-full\">\n      <TableHeader>\n        <TableRow>\n          <TableHead>{t('add_text_data.text')}</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {data?.map((item, index) => (\n          <TableRow key={`${item.text}_${index}`}>\n            <TableCell className=\"p-4\">{item.text}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useCreateCSVData } from 'src/hooks/flows/mutations/use-create-csv-data'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { DataTable } from './DataTable'\n\nconst CreateTextDataCard = memo((props: NodeProps) => {\n  const { id } = props\n  const { t } = useTranslation('components')\n  const [data, setData] = useState<{ text: string }[]>([])\n  const [text, setText] = useState('')\n  const node = useInternalNode(id)\n  const { createCSVData, loading } = useCreateCSVData()\n\n  const handleAdd = () => {\n    setData((prevData) => [...prevData, { text }])\n    setText('')\n  }\n  const handleCreateCSVData = async () => {\n    if (node) {\n      await createCSVData(\n        node,\n        ['text'],\n        data.map((item) => [item.text]),\n      )\n    }\n  }\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_text_data.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_text_data.text')}</Label>\n          <Textarea\n            value={text}\n            onChange={(e) => setText(e.target.value || '')}\n            placeholder={t('add_text_data.text_placeholder')}\n          />\n        </div>\n        <div className=\"w-full flex mt-4 justify-end\">\n          <Button disabled={!text} onClick={handleAdd} className=\"w-40\">\n            {t('add_text_data.add')}\n          </Button>\n        </div>\n        <DataTable data={data || []} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleCreateCSVData}\n          className=\"w-full\"\n        >\n          {t('add_text_data.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateTextDataCard\n","export enum SupportedAddNodeEnum {\n  ADD_LLM = 'ADD_LLM',\n  ADD_PROMPT = 'ADD_PROMPT',\n  ADD_TOOL_DEFINITION = 'ADD_TOOL_DEFINITION',\n  ADD_SCHEMA = 'ADD_SCHEMA',\n  ADD_FEW_SHOT_EXAMPLE = 'ADD_FEW_SHOT_EXAMPLE',\n  ADD_VECTOR_DATABASE = 'ADD_VECTOR_DATABASE',\n  ADD_TEXT_DATA = 'ADD_TEXT_DATA',\n}\nexport const SUPPORTED_MODES = [\n  SupportedAddNodeEnum.ADD_LLM,\n  SupportedAddNodeEnum.ADD_PROMPT,\n  SupportedAddNodeEnum.ADD_SCHEMA,\n  SupportedAddNodeEnum.ADD_VECTOR_DATABASE,\n  {\n    key: 'more',\n    label: 'more',\n    icon: 'ellipsis' as const,\n    children: [SupportedAddNodeEnum.ADD_TOOL_DEFINITION, SupportedAddNodeEnum.ADD_FEW_SHOT_EXAMPLE],\n  },\n]\n","import React, { ReactNode, useEffect, useRef } from 'react'\n\nexport interface BaseParticle {\n  element: HTMLElement | SVGSVGElement\n  left: number\n  size: number\n  top: number\n}\n\nexport interface BaseParticleOptions {\n  particle?: string\n  size?: number\n}\n\nexport interface CoolParticle extends BaseParticle {\n  direction: number\n  speedHorz: number\n  speedUp: number\n  spinSpeed: number\n  spinVal: number\n}\n\nexport interface CoolParticleOptions extends BaseParticleOptions {\n  particleCount?: number\n  speedHorz?: number\n  speedUp?: number\n}\n\nconst getContainer = () => {\n  const id = '_coolMode_effect'\n  const existingContainer = document.getElementById(id)\n\n  if (existingContainer) {\n    return existingContainer\n  }\n\n  const container = document.createElement('div')\n  container.setAttribute('id', id)\n  container.setAttribute(\n    'style',\n    'overflow:hidden; position:fixed; height:100%; top:0; left:0; right:0; bottom:0; pointer-events:none; z-index:2147483647',\n  )\n\n  document.body.appendChild(container)\n\n  return container\n}\n\nlet instanceCounter = 0\n\nconst applyParticleEffect = (element: HTMLElement, options?: CoolParticleOptions): (() => void) => {\n  instanceCounter++\n\n  const defaultParticle = 'circle'\n  const particleType = options?.particle || defaultParticle\n  const sizes = [15, 20, 25, 35, 45]\n  const limit = 45\n\n  let particles: CoolParticle[] = []\n  let autoAddParticle = false\n  let mouseX = 0\n  let mouseY = 0\n\n  const container = getContainer()\n\n  function generateParticle() {\n    const size = options?.size || sizes[Math.floor(Math.random() * sizes.length)]\n    const speedHorz = options?.speedHorz || Math.random() * 10\n    const speedUp = options?.speedUp || Math.random() * 25\n    const spinVal = Math.random() * 360\n    const spinSpeed = Math.random() * 35 * (Math.random() <= 0.5 ? -1 : 1)\n    const top = mouseY - size / 2\n    const left = mouseX - size / 2\n    const direction = Math.random() <= 0.5 ? -1 : 1\n\n    const particle = document.createElement('div')\n\n    if (particleType === 'circle') {\n      const svgNS = 'http://www.w3.org/2000/svg'\n      const circleSVG = document.createElementNS(svgNS, 'svg')\n      const circle = document.createElementNS(svgNS, 'circle')\n      circle.setAttributeNS(null, 'cx', (size / 2).toString())\n      circle.setAttributeNS(null, 'cy', (size / 2).toString())\n      circle.setAttributeNS(null, 'r', (size / 2).toString())\n      circle.setAttributeNS(null, 'fill', `hsl(${Math.random() * 360}, 70%, 50%)`)\n\n      circleSVG.appendChild(circle)\n      circleSVG.setAttribute('width', size.toString())\n      circleSVG.setAttribute('height', size.toString())\n\n      particle.appendChild(circleSVG)\n    } else {\n      particle.innerHTML = `<img src=\"${particleType}\" width=\"${size}\" height=\"${size}\" style=\"border-radius: 50%\">`\n    }\n\n    particle.style.position = 'absolute'\n    particle.style.transform = `translate3d(${left}px, ${top}px, 0px) rotate(${spinVal}deg)`\n\n    container.appendChild(particle)\n\n    particles.push({\n      direction,\n      element: particle,\n      left,\n      size,\n      speedHorz,\n      speedUp,\n      spinSpeed,\n      spinVal,\n      top,\n    })\n  }\n\n  function refreshParticles() {\n    particles.forEach((p) => {\n      p.left = p.left - p.speedHorz * p.direction\n      p.top = p.top - p.speedUp\n      p.speedUp = Math.min(p.size, p.speedUp - 1)\n      p.spinVal = p.spinVal + p.spinSpeed\n\n      if (p.top >= Math.max(window.innerHeight, document.body.clientHeight) + p.size) {\n        particles = particles.filter((o) => o !== p)\n        p.element.remove()\n      }\n\n      p.element.setAttribute(\n        'style',\n        [\n          'position:absolute',\n          'will-change:transform',\n          `top:${p.top}px`,\n          `left:${p.left}px`,\n          `transform:rotate(${p.spinVal}deg)`,\n        ].join(';'),\n      )\n    })\n  }\n\n  let animationFrame: number | undefined\n\n  let lastParticleTimestamp = 0\n  const particleGenerationDelay = 30\n\n  function loop() {\n    const currentTime = performance.now()\n    if (\n      autoAddParticle &&\n      particles.length < limit &&\n      currentTime - lastParticleTimestamp > particleGenerationDelay\n    ) {\n      generateParticle()\n      lastParticleTimestamp = currentTime\n    }\n\n    refreshParticles()\n    animationFrame = requestAnimationFrame(loop)\n  }\n\n  loop()\n\n  const isTouchInteraction = 'ontouchstart' in window\n\n  const tap = isTouchInteraction ? 'touchstart' : 'mousedown'\n  const tapEnd = isTouchInteraction ? 'touchend' : 'mouseup'\n  const move = isTouchInteraction ? 'touchmove' : 'mousemove'\n\n  const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n    if ('touches' in e) {\n      mouseX = e.touches?.[0].clientX\n      mouseY = e.touches?.[0].clientY\n    } else {\n      mouseX = e.clientX\n      mouseY = e.clientY\n    }\n  }\n\n  const tapHandler = (e: MouseEvent | TouchEvent) => {\n    updateMousePosition(e)\n    autoAddParticle = true\n  }\n\n  const disableAutoAddParticle = () => {\n    autoAddParticle = false\n  }\n\n  element.addEventListener(move, updateMousePosition, { passive: true })\n  element.addEventListener(tap, tapHandler, { passive: true })\n  element.addEventListener(tapEnd, disableAutoAddParticle, { passive: true })\n  element.addEventListener('mouseleave', disableAutoAddParticle, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener(move, updateMousePosition)\n    element.removeEventListener(tap, tapHandler)\n    element.removeEventListener(tapEnd, disableAutoAddParticle)\n    element.removeEventListener('mouseleave', disableAutoAddParticle)\n\n    const interval = setInterval(() => {\n      if (animationFrame && particles.length === 0) {\n        cancelAnimationFrame(animationFrame)\n        clearInterval(interval)\n\n        if (--instanceCounter === 0) {\n          container.remove()\n        }\n      }\n    }, 500)\n  }\n}\n\ninterface CoolModeProps {\n  children: ReactNode\n  options?: CoolParticleOptions\n}\n\nexport const CoolMode: React.FC<CoolModeProps> = ({ children, options }) => {\n  const ref = useRef<HTMLElement>(null)\n\n  useEffect(() => {\n    if (ref.current) {\n      return applyParticleEffect(ref.current, options)\n    }\n  }, [options])\n\n  return React.cloneElement(children as React.ReactElement, { ref })\n}\n","import { NodeProps } from '@xyflow/react'\nimport { memo, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarTrigger,\n} from 'src/lib/shadcn/ui/menubar'\nimport CreateLLMCard from 'src/components/molecules/CreateLLMCard'\nimport CreatePromptCard from 'src/components/molecules/CreatePromptCard'\nimport CreateSchemaCard from 'src/components/molecules/CreateSchemaCard'\nimport CreateFewShotExampleCard from 'src/components/molecules/CreateFewShotExampleCard'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport CreateToolCard from 'src/components/molecules/CreateToolCard'\nimport CreateVectorDatabaseCard from 'src/components/molecules/CreateVectorDatabaseCard'\nimport Logo from 'src/assets/svgs/logo.svg?react'\nimport CreateTextDataCard from 'src/components/molecules/CreateTextDataCard'\nimport { useAppState } from 'src/states/app'\nimport { cn } from 'src/lib/utils'\n\nimport { SUPPORTED_MODES, SupportedAddNodeEnum } from './constants'\nimport { CoolMode } from 'src/lib/shadcn/ui/cool-mode'\nimport { Button } from 'src/lib/shadcn/ui/button'\n\nexport const ToolbarNode = memo((props: NodeProps) => {\n  const { t } = useTranslation('flows')\n  const theme = useAppState((state) => state.theme)\n  const [mode, setMode] = useState(`${SupportedAddNodeEnum.ADD_LLM}`)\n\n  const menu = useMemo(() => {\n    return (\n      <Menubar>\n        <MenubarMenu>\n          <CoolMode>\n            <Button variant=\"link\" className=\"!p-0 !pl-3\">\n              <Logo\n                width={32}\n                height={32}\n                className={cn(theme === 'dark' ? 'fill-white' : 'fill-black')}\n              />\n            </Button>\n          </CoolMode>\n        </MenubarMenu>\n        {SUPPORTED_MODES.map((mode) => {\n          if (typeof mode === 'object') {\n            return (\n              <MenubarMenu key={mode.key}>\n                <MenubarTrigger>\n                  {mode.icon ? <LazyIcon name={mode.icon} /> : t(`supported_nodes.${mode.label}`)}\n                </MenubarTrigger>\n                <MenubarContent>\n                  {mode.children.map((child) => {\n                    return (\n                      <MenubarItem key={child} onClick={() => setMode(child)}>\n                        {t(`supported_nodes.${child.toLowerCase()}`)}\n                      </MenubarItem>\n                    )\n                  })}\n                </MenubarContent>\n              </MenubarMenu>\n            )\n          }\n          return (\n            <MenubarMenu key={mode}>\n              <MenubarTrigger value={mode} onClick={() => setMode(mode)}>\n                {t(`supported_nodes.${mode.toLowerCase()}`)}\n              </MenubarTrigger>\n            </MenubarMenu>\n          )\n        })}\n      </Menubar>\n    )\n  }, [t, theme])\n\n  const modeToComponent = useMemo(() => {\n    switch (mode) {\n      case SupportedAddNodeEnum.ADD_LLM:\n        return <CreateLLMCard {...props} />\n      case SupportedAddNodeEnum.ADD_PROMPT:\n        return <CreatePromptCard {...props} />\n      case SupportedAddNodeEnum.ADD_SCHEMA:\n        return <CreateSchemaCard {...props} />\n      case SupportedAddNodeEnum.ADD_FEW_SHOT_EXAMPLE:\n        return <CreateFewShotExampleCard {...props} />\n      case SupportedAddNodeEnum.ADD_TOOL_DEFINITION:\n        return <CreateToolCard {...props} />\n      case SupportedAddNodeEnum.ADD_VECTOR_DATABASE:\n        return <CreateVectorDatabaseCard {...props} />\n      case SupportedAddNodeEnum.ADD_TEXT_DATA:\n        return <CreateTextDataCard {...props} />\n    }\n  }, [props, mode])\n  return (\n    <>\n      {menu}\n      <div className=\"mt-4\">{modeToComponent}</div>\n    </>\n  )\n})\n","import { useCallback, useState } from 'react'\nimport { Connection, Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport {\n  AppEntityNames,\n  FlowNodeTypeEnum,\n  flowNodeTypeToEntity,\n  Session,\n  SessionStatusEnum,\n  SessionTypeEnum,\n} from 'src/services/database/types'\nimport { EntityType } from 'src/utils/orm-type'\nimport { DefaultNodeData } from 'src/utils/flow-node'\nimport { useNavigate } from 'react-router-dom'\nimport { getRouteURL } from 'src/utils/routes'\n\nexport const useCreateStandaloneSession = () => {\n  const [loading, setLoading] = useState(false)\n  const navigate = useNavigate()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const getLatestApplications = useSessionState((state) => state.getLatestApplications)\n\n  const cloneNode = useCallback(\n    async (\n      newSession: Session,\n      node: Node<DefaultNodeData>,\n      newEntityIDMap: Map<string, string>,\n      newFlowNodeIDMap: Map<string, string>,\n    ) => {\n      const entity = node.data?.entity\n      let entityName = node.type ? flowNodeTypeToEntity[node.type as FlowNodeTypeEnum] : undefined\n      if (\n        entityName &&\n        entity &&\n        node &&\n        typeof entity === 'object' &&\n        'id' in entity &&\n        !newEntityIDMap.has(`${entity.id}`) &&\n        !newFlowNodeIDMap.has(`${node.id}`)\n      ) {\n        entityName = entityName as AppEntityNames\n        const cloneEntity = await getRepository(entityName).save({\n          ...entity,\n          ...(entity && typeof entity === 'object' && 'session_id' in entity\n            ? { session_id: newSession.id }\n            : {}),\n        } as EntityType<unknown>)\n        newEntityIDMap.set(`${entity.id}`, cloneEntity.id)\n        const currentFlowNode = await getRepository('FlowNode').findOne({\n          where: {\n            id: node.data.flowNode.id,\n          },\n        })\n        const cloneFlowNode = await getRepository('FlowNode').save({\n          ...(currentFlowNode || node.data.flowNode),\n          session_id: newSession.id,\n          id: undefined,\n          source_type: entityName,\n          source_id: cloneEntity.id,\n        })\n        newFlowNodeIDMap.set(`${node.id}`, cloneFlowNode.id)\n        return {\n          entityName,\n          entity: cloneEntity,\n          node: cloneFlowNode,\n        }\n      } else if (!newFlowNodeIDMap.has(`${node.id}`)) {\n        const currentFlowNode = await getRepository('FlowNode').findOne({\n          where: {\n            id: node.data.flowNode.id,\n          },\n        })\n        const cloneFlowNode = await getRepository('FlowNode').save({\n          ...(currentFlowNode || node.data.flowNode),\n          node_type: node.type as FlowNodeTypeEnum,\n          session_id: newSession.id,\n          id: undefined,\n        })\n        newFlowNodeIDMap.set(`${node.id}`, cloneFlowNode.id)\n        return {\n          node: cloneFlowNode,\n        }\n      }\n    },\n    [],\n  )\n\n  const createStandaloneSession = useCallback(\n    async (\n      node: Node<DefaultNodeData>,\n      options: {\n        name?: string\n        connections: {\n          node: Node<DefaultNodeData>\n          connections: Connection[]\n          connectedNodes?: Node<DefaultNodeData>[]\n        }[]\n      },\n    ) => {\n      try {\n        if (!currentSession) {\n          throw new Error('No current session')\n        }\n        setLoading(true)\n        const standaloneSession = await getRepository('Session').save({\n          type: SessionTypeEnum.StandaloneApp,\n          name: options.name || (currentSession?.name ? `${currentSession.name}` : 'Standalone'),\n          status: SessionStatusEnum.Started,\n          passphrase: currentSession.passphrase,\n        })\n        if (!standaloneSession) {\n          throw new Error('Failed create standalone session')\n        }\n        const newEntityIDMap = new Map<string, string>()\n        const newFlowNodeIDMap = new Map<string, string>()\n        // Clone node\n        const mainNodeInfo = await cloneNode(\n          standaloneSession,\n          node,\n          newEntityIDMap,\n          newFlowNodeIDMap,\n        )\n        if (!mainNodeInfo) {\n          throw new Error('Failed to clone main node')\n        }\n        await getRepository('Session').update(standaloneSession.id, {\n          main_node_id: mainNodeInfo.node.id,\n          main_source_id: mainNodeInfo?.entity ? mainNodeInfo.entity.id : undefined,\n          main_source_type: mainNodeInfo.entityName ? mainNodeInfo.entityName : undefined,\n        })\n        // Clone connected nodes\n        for (const { node, connectedNodes } of options.connections) {\n          await cloneNode(standaloneSession, node, newEntityIDMap, newFlowNodeIDMap)\n          // Clone Connected Nodes\n          if (connectedNodes) {\n            for (const connectedNode of connectedNodes) {\n              await cloneNode(standaloneSession, connectedNode, newEntityIDMap, newFlowNodeIDMap)\n            }\n          }\n        }\n        // Clone connections\n        for (const { connections } of options.connections) {\n          for (const connection of connections) {\n            const sourceId = newFlowNodeIDMap.get(`${connection.source}`)\n            const targetId = newFlowNodeIDMap.get(`${connection.target}`)\n            if (!sourceId || !targetId) {\n              throw new Error('Failed to get connected flow node id')\n            }\n            await getRepository('FlowEdge').save({\n              source: sourceId,\n              target: targetId,\n              sourceHandle: connection.sourceHandle,\n              targetHandle: connection.targetHandle,\n              session_id: standaloneSession.id,\n            })\n          }\n        }\n        getLatestApplications()\n\n        navigate(getRouteURL('application', { applicationId: standaloneSession.id }))\n        return true\n      } finally {\n        setLoading(false)\n      }\n    },\n    [cloneNode, currentSession, getLatestApplications, navigate],\n  )\n\n  return {\n    loading,\n    createStandaloneSession,\n  }\n}\n","import { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useFlowState } from 'src/states/flow'\n\nexport const useDeleteNodeFlow = () => {\n  const [loading, setLoading] = useState(false)\n  const updateNode = useFlowState((state) => state.updateNodes)\n  const updateEdges = useFlowState((state) => state.updateEdges)\n\n  const deleteNodeFlow = useCallback(\n    async (id: string) => {\n      try {\n        setLoading(true)\n        await getRepository('FlowNode').delete(id)\n        const edges = await getRepository('FlowEdge').find({\n          where: [{ source: id }, { target: id }],\n        })\n        await Promise.all(edges.map((edge) => getRepository('FlowEdge').delete(edge.id)))\n        await updateNode([{ id, type: 'remove' as const }])\n        await updateEdges(edges.map((edge) => ({ id: edge.id, type: 'remove' as const })))\n        return true\n      } catch {\n        return false\n      } finally {\n        setLoading(false)\n      }\n    },\n    [updateEdges, updateNode],\n  )\n\n  return {\n    loading,\n    deleteNodeFlow,\n  }\n}\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from 'src/lib/shadcn/ui/dialog'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Label } from 'src/lib/shadcn/ui/label'\n\ntype CreateSessionProps = {\n  className: string\n  cloneStandaloneSession: (name?: string) => Promise<void>\n}\n\nconst CreateStandaloneApplicationDialog = create<CreateSessionProps>(\n  ({ cloneStandaloneSession }) => {\n    const currentModal = useModal()\n    const { t } = useTranslation('dialogs')\n    const [name, setName] = useState('')\n\n    const { toast } = useToast()\n\n    const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setName(e.target.value)\n    }\n\n    const handleSubmit = async () => {\n      try {\n        currentModal.hide()\n        await cloneStandaloneSession(name)\n        setName('')\n      } catch {\n        toast({\n          variant: 'destructive',\n          description: t('create_standalone_application.errors.create_failed'),\n        })\n      }\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>{t('create_session.title')}</DialogTitle>\n            <DialogDescription>{t('create_standalone_application.description')}</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"flex flex-col space-y-1.5\">\n              <Label className=\"mb-2\" htmlFor=\"name\">\n                {t('create_standalone_application.name')}\n              </Label>\n              <Input\n                onChange={handleChangeName}\n                id=\"name\"\n                value={name}\n                placeholder={t('create_standalone_application.name_placeholder')}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button onClick={handleSubmit} disabled={!name} type=\"submit\">\n              {t('create_standalone_application.create')}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateStandaloneApplicationDialog\n","import { memo, useCallback } from 'react'\nimport { Node, Connection, useReactFlow } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { useCreateStandaloneSession } from 'src/hooks/mutations/use-create-standalone-session'\nimport { useDeleteNodeFlow } from 'src/hooks/flows/mutations/use-delete-node-flow'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { cn } from 'src/lib/utils'\nimport { DefaultNodeData, DefaultNodeProps } from 'src/utils/flow-node'\nimport { EntityType } from 'src/utils/orm-type'\nimport { logError } from 'src/utils/logger'\nimport { useModal } from '@ebay/nice-modal-react'\nimport CreateStandaloneApplicationDialog from 'src/components/dialogs/CreateStandaloneApplicationDialog'\n\nexport const NodeHeader = memo(\n  ({\n    id,\n    className,\n    enableToStandalone,\n    getLinkedConnections,\n  }: {\n    id: string\n    className?: string\n    enableToStandalone?: boolean\n    getLinkedConnections?: (id: string) => {\n      node: Node<DefaultNodeProps<{ entity: EntityType<unknown> }>['data']>\n      connections: Connection[]\n      connectedNodes?: Node<DefaultNodeProps<{ entity: EntityType<unknown> }>['data']>[]\n    }[]\n  }) => {\n    const { t } = useTranslation('common')\n    const { getNode } = useReactFlow<Node<DefaultNodeData>>()\n    const { loading: deleting, deleteNodeFlow } = useDeleteNodeFlow()\n    const { createStandaloneSession } = useCreateStandaloneSession()\n    const { toast } = useToast()\n    const createStandaloneApplicationDialog = useModal(CreateStandaloneApplicationDialog)\n\n    const handleDelete = useCallback(async () => {\n      try {\n        await deleteNodeFlow(id)\n        toast({\n          description: t('deleted'),\n        })\n      } catch {\n        toast({\n          description: t('errors.delete_failed'),\n          variant: 'destructive',\n        })\n      }\n    }, [deleteNodeFlow, id, toast, t])\n\n    const cloneStandaloneSession = useCallback(\n      async (name?: string) => {\n        try {\n          const currentNode = getNode(id)\n          if (!currentNode) {\n            throw new Error('No current node')\n          }\n          const connections = getLinkedConnections?.(id) || []\n          await createStandaloneSession(currentNode, { name, connections })\n          toast({\n            description: t('standalone_session_created'),\n          })\n        } catch (error) {\n          logError('Clone Standalone Session', error)\n          toast({\n            description: t('errors.create_standalone_session_failed'),\n            variant: 'destructive',\n          })\n        }\n      },\n      [getNode, id, getLinkedConnections, createStandaloneSession, toast, t],\n    )\n\n    const handleCreateStandaloneApplication = useCallback(() => {\n      createStandaloneApplicationDialog.show({\n        cloneStandaloneSession,\n      })\n    }, [cloneStandaloneSession, createStandaloneApplicationDialog])\n\n    return (\n      <div className={cn('flex absolute z-[51] right-0 top-0 h-10', className)}>\n        {enableToStandalone ? (\n          <Button\n            className=\"!rounded-none !px-2\"\n            onClick={handleCreateStandaloneApplication}\n            variant=\"ghost\"\n          >\n            <LazyIcon name=\"package-plus\" size={16} />\n          </Button>\n        ) : undefined}\n        <LoadingButton\n          loading={deleting}\n          className=\"!rounded-none !px-2\"\n          onClick={handleDelete}\n          variant=\"ghost\"\n        >\n          <LazyIcon name=\"trash-2\" size={16} />\n        </LoadingButton>\n      </div>\n    )\n  },\n)\n","import { memo } from 'react'\nimport { Handle, HandleProps, Position } from '@xyflow/react'\nimport { cn } from 'src/lib/utils'\n\nexport const DefaultHandle = memo((props: HandleProps) => {\n  const { className, ...rest } = props\n  return (\n    <Handle\n      className={cn(\n        '!w-2 !h-2 !border-none !rounded-full !bg-slate-700',\n        props.position === Position.Top ? '!top-[-2px]' : '',\n        className,\n      )}\n      {...rest}\n    />\n  )\n})\n","import { useState, useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, LLM } from 'src/services/database/types'\nimport { ThreadStatusEnum } from 'src/services/database/types/thread'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateThread = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const createThread = useCallback(\n    async (source: Node) => {\n      setLoading(true)\n      try {\n        const llm = source.data?.entity as LLM\n        if (!llm || !sessionId) {\n          throw new Error('LLM or Session not found')\n        }\n\n        const initialX = source.position.x\n        const initialY = source.position.y + (source.measured?.height || 0)\n        const thread = await getRepository('Thread').save({\n          initial_llm_id: llm.id,\n          title: `New thread with ${llm.name}`,\n          status: ThreadStatusEnum.Started,\n          messages: [],\n          session_id: sessionId,\n        })\n        const flowNode = await createOrUpdateFlowNode({\n          source_id: thread.id,\n          source_type: 'Thread',\n          node_type: FlowNodeTypeEnum.Thread,\n          x: initialX,\n          y: initialY + 60,\n        })\n        if (!flowNode) {\n          throw new Error('Failed to create thread node')\n        }\n        // Create connection from source to threadNode\n        const flowEdge = await createOrUpdateFlowEdge({\n          source: source.id,\n          target: flowNode.id,\n        })\n\n        return {\n          thread,\n          flowNode,\n          flowEdge,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowEdge, createOrUpdateFlowNode, sessionId],\n  )\n\n  return {\n    loading,\n    createThread,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Node, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { FlowNodeTypeEnum, LLM, LLMProviderEnum, LLMStatusEnum } from 'src/services/database/types'\nimport { useCreateThread } from 'src/hooks/flows/mutations/use-create-thread'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { logError } from 'src/utils/logger'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\n\nimport { LLMNodeProps } from '../type'\n\nexport const useActions = (id: string, data: LLMNodeProps['data']) => {\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const [loadingModel, setLoadingModel] = useState(false)\n  const [queringThreads, setQueringThreads] = useState(false)\n  const node = useInternalNode(id) as Node<LLMNodeProps['data']>\n  const { loadModel } = useLoadModel()\n  const { createThread, loading: creatingThread } = useCreateThread()\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue)\n\n  const { getNodes } = useReactFlow()\n\n  const queryThreadsFromModel = useCallback(async () => {\n    try {\n      setQueringThreads(true)\n      if (data.entity.id) {\n        const threads = await getRepository('Thread').find({\n          where: {\n            initial_llm_id: data.entity.id,\n          },\n        })\n        pushSyncNodeQueue('Thread', {\n          where: {\n            source_type: 'Thread',\n            source_id: In(threads.map((thread) => thread.id)),\n          },\n        })\n      }\n    } finally {\n      setQueringThreads(false)\n    }\n  }, [data?.entity?.id, pushSyncNodeQueue])\n\n  const handleLoadModel = useCallback(async () => {\n    try {\n      setLoadingModel(true)\n      if (data.entity && node) {\n        await loadModel?.(data.entity.provider, `${data.entity.name}`, (initProgress) => {\n          node.data.status =\n            initProgress.progress === 100 ? LLMStatusEnum.Loaded : LLMStatusEnum.Loading\n\n          node.data.label = initProgress.text\n          updateNodes([{ id, type: 'replace' as const, item: node }])\n        })\n        const llmNodeChanges = getNodes()\n          .filter((node) => {\n            const isLLMNode = node.type === FlowNodeTypeEnum.LLM\n            if (isLLMNode) {\n              const entity = node.data.entity as LLM\n              return entity.provider === LLMProviderEnum.WebLLM\n            }\n            return false\n          })\n          .map((node) => {\n            node.data.status = LLMStatusEnum.Started\n            return { id: node.id, type: 'replace' as const, item: node }\n          })\n        node.data.label = ''\n        node.data.status = LLMStatusEnum.Loaded\n        llmNodeChanges.push({\n          id,\n          type: 'replace' as const,\n          item: node,\n        })\n        updateNodes(llmNodeChanges)\n        await queryThreadsFromModel()\n      }\n    } catch (error) {\n      logError('Load Model', error)\n      toast({\n        variant: 'destructive',\n        description: t('llm_node.errors.loading_model'),\n      })\n    } finally {\n      setLoadingModel(false)\n    }\n  }, [data.entity, getNodes, id, loadModel, node, queryThreadsFromModel, t, toast, updateNodes])\n\n  const handleCreateThread = useCallback(async () => {\n    if (data.entity && node) {\n      await createThread?.(node)\n    }\n  }, [data.entity, node, createThread])\n\n  const changeLLMOptions = useCallback(\n    async (options: Record<string, unknown>) => {\n      if (data.entity && node) {\n        node.data.entity.options = options\n        await getRepository('LLM').update(data.entity.id, { options })\n        updateNodes([{ id, type: 'replace' as const, item: node }])\n      }\n    },\n    [data.entity, id, node, updateNodes],\n  )\n\n  useEffect(() => {\n    if (data.entity && node && data.entity.status !== data.status) {\n      node.data.status = data.entity.status as LLMStatusEnum\n      updateNodes([{ id, type: 'replace' as const, item: node }])\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return {\n    loadingModel,\n    creatingThread,\n    queringThreads,\n    changeLLMOptions,\n    loadModel: handleLoadModel,\n    createThread: handleCreateThread,\n    queryThreads: queryThreadsFromModel,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Node, Connection, useHandleConnections, useReactFlow } from '@xyflow/react'\n\nimport { filterUserConnections } from 'src/utils/flow'\n\nexport const useBaseConnectionToHandler = (\n  id: string,\n  handlerFunction: (input: {\n    id: string\n    edgeId: string\n    source: Node\n    target: Node\n    connection: Connection\n  }) => Promise<{ deleteEdgeId: string | string[] } | undefined>,\n) => {\n  const [handling, setHandling] = useState(false)\n  const [newTargetConnection, setNewTargetConnection] = useState<Connection[]>([])\n  const { deleteElements, getNode } = useReactFlow()\n\n  useHandleConnections({\n    type: 'target',\n    nodeId: id,\n    onConnect: (newConnections) => {\n      if (newConnections?.length) {\n        setNewTargetConnection((pre) => [...pre, ...filterUserConnections(newConnections)])\n      }\n    },\n  })\n\n  const connectionHandler = useCallback(\n    async (edgeId: string, source: Node, target: Node, connection: Connection) => {\n      try {\n        const result = await handlerFunction({\n          id,\n          edgeId,\n          source,\n          target,\n          connection,\n        })\n\n        return result\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [handlerFunction, id],\n  )\n\n  useEffect(() => {\n    if (!newTargetConnection?.length || handling) {\n      return\n    }\n    const handle = async () => {\n      try {\n        setHandling(true)\n        const handlingConnections = [...newTargetConnection]\n        setNewTargetConnection([])\n        const removeEdgeIds: string[] = []\n        const target = getNode(id)\n        await Promise.all(\n          handlingConnections.map(async (connection) => {\n            const edgeId = 'edgeId' in connection ? connection.edgeId : undefined\n            const source = getNode(connection.source)\n            if (!source || !target) {\n              return\n            }\n\n            const response = await connectionHandler(`${edgeId}`, source, target, connection)\n\n            if (response?.deleteEdgeId) {\n              removeEdgeIds.push(\n                ...(Array.isArray(response.deleteEdgeId)\n                  ? response.deleteEdgeId\n                  : [response.deleteEdgeId]),\n              )\n            }\n          }),\n        )\n        if (removeEdgeIds?.length) {\n          await deleteElements({\n            edges: removeEdgeIds.map((id) => ({ id })),\n          })\n        }\n      } finally {\n        setHandling(false)\n      }\n    }\n    handle()\n  }, [deleteElements, getNode, id, handling, connectionHandler, newTargetConnection])\n}\n","import { useCallback } from 'react'\n\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const handleConnectionTo = useCallback(async () => {\n    return undefined\n  }, [])\n  useBaseConnectionToHandler(id, handleConnectionTo)\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Position } from '@xyflow/react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { LLMProviderEnum, LLMStatusEnum } from 'src/services/database/types/llm'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { BorderBeam } from 'src/lib/shadcn/ui/border-beam'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { LLMNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { LLMSetting } from 'src/components/atoms/LLMSetting'\n\nexport const LLMNode = memo((props: LLMNodeProps) => {\n  const { id, data, isConnectable } = props\n  const [llmInfo, setLLMInfo] = useState<\n    | { hasCache: boolean; isFunctionCalling: boolean; info?: ModelRecord; cloud?: boolean }\n    | undefined\n  >()\n  const { t } = useTranslation('flows')\n\n  const { createThread, loadModel, queringThreads, queryThreads, loadingModel, changeLLMOptions } =\n    useActions(id, data)\n  useConnectionToHandler(id)\n\n  const isLoading = [LLMStatusEnum.Loading, LLMStatusEnum.Downloading].includes(data.status)\n\n  useEffect(() => {\n    if (llmInfo || !data?.entity?.name) {\n      return\n    }\n    if (data?.entity?.provider !== LLMProviderEnum.WebLLM) {\n      setLLMInfo({\n        hasCache: false,\n        cloud: true,\n        isFunctionCalling: true,\n        info: {\n          model_id: data?.entity?.name,\n          model: data?.entity?.name,\n          model_lib: data?.entity?.provider,\n          model_type: 2,\n        },\n      })\n      return\n    }\n    import('@mlc-ai/web-llm').then(\n      async ({ hasModelInCache, functionCallingModelIds, prebuiltAppConfig }) => {\n        const hasCache = await hasModelInCache(data?.entity?.name)\n        setLLMInfo({\n          hasCache,\n          isFunctionCalling: functionCallingModelIds.includes(data?.entity?.name),\n          info: prebuiltAppConfig.model_list.find((item) => item.model_id === data?.entity?.name),\n        })\n      },\n    )\n  }, [data?.entity?.name, data?.entity?.provider, llmInfo])\n\n  const onChangeOptions = useCallback(\n    async (options: Record<string, unknown>) => {\n      await changeLLMOptions(options)\n    },\n    [changeLLMOptions],\n  )\n\n  const llmIcon = useMemo(() => {\n    switch (data.status) {\n      case LLMStatusEnum.Downloading:\n        return <LazyIcon className={'animate-spin w-7 h-7'} name={'arrow-big-down-dash'} />\n      case LLMStatusEnum.Loaded:\n        return <LLMIcon name={data.entity?.name || 'brain'} className=\"w-7 h-7\" />\n      case LLMStatusEnum.Loading:\n        return <LazyIcon className={'animate-spin w-7 h-7'} name={'loader-circle'} />\n      default:\n        return <LLMIcon name={data.entity?.name || 'brain'} className=\"w-7 h-7\" />\n    }\n  }, [data.entity?.name, data.status])\n\n  const actions = useMemo(() => {\n    if (isLoading) {\n      return null\n    }\n    if (loadingModel) {\n      return (\n        <Button disabled={true} className=\"w-full mt-4\">\n          <LazyIcon className={'animate-spin'} size={24} name={'loader-circle'} />\n        </Button>\n      )\n    }\n    if (data.status === LLMStatusEnum.Loaded) {\n      return (\n        <Button onClick={createThread} className=\"mt-4 w-full\">\n          {t('llm_node.create_thread_button')}\n        </Button>\n      )\n    }\n    return (\n      <div className=\"flex gap-2 mt-4\">\n        {llmInfo?.hasCache ? (\n          <LoadingButton loading={queringThreads} onClick={queryThreads}>\n            <LazyIcon size={24} name={'message-square-more'} />\n          </LoadingButton>\n        ) : null}\n        <Button disabled={loadingModel} onClick={loadModel} className=\"w-full\">\n          {t(llmInfo?.hasCache ? 'llm_node.load_model_button' : 'llm_node.download_model_button')}\n        </Button>\n      </div>\n    )\n  }, [\n    isLoading,\n    loadingModel,\n    data.status,\n    llmInfo?.hasCache,\n    queringThreads,\n    queryThreads,\n    loadModel,\n    t,\n    createThread,\n  ])\n  return (\n    <div>\n      <div>\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center\">\n          {llmIcon}\n          <div className=\"ml-2 pt-1 max-w-lg\">\n            <AlertTitle className=\"flex gap-2 items-center pr-6\">\n              {`${data?.entity?.name || ''}`}\n            </AlertTitle>\n            <AlertDescription className=\"max-w-full\">{`${data.label || ''}`}</AlertDescription>\n            <div className=\"max-w-full mt-2 flex-wrap flex gap-1\">\n              <LLMInfo\n                model={llmInfo?.info}\n                isFunctionCalling={llmInfo?.isFunctionCalling || false}\n                name={data?.entity?.name}\n                isCached={llmInfo?.hasCache || false}\n                cloud={llmInfo?.cloud || false}\n              />\n            </div>\n            <LLMSetting\n              options={data?.entity?.options}\n              onChangeOptions={onChangeOptions}\n              className=\"mt-2\"\n            />\n            {actions}\n          </div>\n        </Alert>\n        {isLoading ? <BorderBeam className=\"rounded-lg\" /> : undefined}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport AIInput from 'src/lib/kokonutui/ai-input'\n\nconst NewMessageCard = memo(\n  ({\n    tags,\n    disabled,\n    loading,\n    onSubmit,\n  }: {\n    tags?: React.ReactNode\n    disabled?: boolean\n    loading?: boolean\n    onSubmit: (input: string) => void\n  }) => {\n    const { t } = useTranslation('components')\n\n    const hanldeSubmit = async (input: string) => {\n      try {\n        await onSubmit(input)\n        return true\n      } catch {\n        return false\n      }\n    }\n\n    return (\n      <Card className=\"min-w-80\">\n        <CardHeader>\n          <CardTitle>{t('add_message_card.title')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid w-full gap-1.5\">\n            <AIInput\n              onSubmit={hanldeSubmit}\n              disabled={disabled || loading}\n              placeholder={t('add_message_card.placeholder')}\n            />\n          </div>\n          {tags ? <div className=\"mt-2 gap-1 flex flex-wrap\">{tags}</div> : null}\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default NewMessageCard\n","import type { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types/flow-node'\n\nimport type { DefaultNodeData } from './flow-node'\n\nexport const threadConversationTraveling = (\n  list: string[],\n  nodes: Node<DefaultNodeData>[],\n  connections: Connection[],\n  handledIds: string[] = [],\n  functions: {\n    getNode: (id: string) => Node<DefaultNodeData> | undefined\n    getHandleConnections: (props: { type: 'source' | 'target'; nodeId: string }) => Connection[]\n  },\n) => {\n  const runningNodes = list.map((id) => functions.getNode(id))\n  for (const node of runningNodes) {\n    if (!node) {\n      continue\n    }\n\n    const nodeConnections = functions.getHandleConnections({\n      type: 'target',\n      nodeId: node.id,\n    })\n    connections.push(...nodeConnections)\n\n    if (node.type === FlowNodeTypeEnum.Thread) {\n      handledIds.push(node.id)\n      nodes.push(node)\n      continue\n    } else if (node.type !== FlowNodeTypeEnum.Message) {\n      handledIds.push(node.id)\n      continue\n    } else if (handledIds.includes(node.id)) {\n      continue\n    }\n\n    handledIds.push(node.id)\n    nodes.push(node)\n    if (nodeConnections.length) {\n      threadConversationTraveling(\n        nodeConnections.map((c) => c.source),\n        nodes,\n        connections,\n        handledIds,\n        functions,\n      )\n    }\n  }\n\n  return {\n    nodes,\n    connections,\n  }\n}\n\nexport const prepareThreadConnections = (\n  threadNode: Node<DefaultNodeData>,\n  functions: {\n    getNode: (id: string) => Node<DefaultNodeData> | undefined\n    getHandleConnections: (props: { type: 'source' | 'target'; nodeId: string }) => Connection[]\n  },\n) => {\n  const threadConnections = functions.getHandleConnections({\n    nodeId: threadNode.id,\n    type: 'target',\n  })\n  const threadConnectionInfos = threadConnections.map((connection) => {\n    const node = functions.getNode(connection.source)\n    if (!node) {\n      return\n    }\n    const connections = functions.getHandleConnections({\n      nodeId: node.id,\n      type: 'target',\n    })\n    return {\n      connections,\n      node,\n    }\n  }) as { connections: Connection[]; node: Node<DefaultNodeData> }[]\n  // Prompt connection\n  const threadPromptNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.Prompt\n  })\n  const threadPromptNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadPromptNodes?.length) {\n    threadPromptNodes.forEach((item) => {\n      const promptConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      threadPromptNodeResult.push({\n        node: item.node,\n        connections: item.connections,\n        connectedNodes: promptConnectedNodes,\n      })\n    })\n  }\n  // Tool connection\n  const threadToolsNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.ToolDefinition\n  })\n  const threadToolNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadToolsNodes?.length) {\n    threadToolsNodes.forEach((item) => {\n      const toolConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      if (toolConnectedNodes?.find((node) => node.type === FlowNodeTypeEnum.Schema)) {\n        threadToolNodeResult.push({\n          node: item.node,\n          connections: item.connections,\n          connectedNodes: toolConnectedNodes,\n        })\n      }\n    })\n  }\n  // placeholder node connection\n  const threadPlaceholderNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.PlaceHolder\n  })\n  const threadPlaceholderNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadPlaceholderNodes?.length) {\n    threadPlaceholderNodes.forEach((item) => {\n      const placeholderConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      if (placeholderConnectedNodes) {\n        threadPlaceholderNodeResult.push({\n          node: item.node,\n          connections: item.connections,\n          connectedNodes: placeholderConnectedNodes,\n        })\n      }\n    })\n  }\n  // Schema connection\n  const schemaNode = threadConnectionInfos.find((item) => {\n    return item.node?.type === FlowNodeTypeEnum.Schema\n  })\n\n  return {\n    thread: {\n      node: threadNode,\n      connections: threadConnections,\n    },\n    llm: threadConnectionInfos.find((item) => {\n      return item.node?.type === FlowNodeTypeEnum.LLM\n    }),\n    schemas: schemaNode ? [schemaNode] : [],\n    prompts: threadPromptNodeResult,\n    tools: threadToolNodeResult,\n    placeholders: threadPlaceholderNodeResult,\n  }\n}\n","import { Node } from '@xyflow/react'\nimport { AIMessage, BaseMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport {\n  CSVData,\n  FlowNodeTypeEnum,\n  Message,\n  Prompt,\n  PromptTypeEnum,\n} from 'src/services/database/types'\nimport { decodeCSVData } from './string-data'\n\nexport const buildHistories = (nodes: { node: Node; connectedNodes: Node[] }[]) => {\n  const histories: BaseMessage[] = []\n  nodes.forEach((item) => {\n    const { node, connectedNodes } = item\n    if (!node.data?.entity) {\n      return\n    }\n    if (node.type === FlowNodeTypeEnum.Message) {\n      const message = node.data.entity as Message\n      switch (message.role) {\n        case 'human':\n          histories.push(new HumanMessage(message.content))\n          break\n        case 'ai':\n          histories.push(new AIMessage(message.content))\n          break\n      }\n    } else if (node.type === FlowNodeTypeEnum.Prompt) {\n      // Prompt\n      const prompt = node.data.entity as Prompt\n\n      let content = `${prompt.prefix ? `${prompt.prefix}\\n` : ''}`\n      if (prompt.type === PromptTypeEnum.FewShotExample) {\n        const connectedDataNode = connectedNodes.find((n) => n.type === FlowNodeTypeEnum.CSVData)\n        const csvData = connectedDataNode?.data?.entity as CSVData\n        if (csvData) {\n          const { rows } = decodeCSVData(csvData.headers, csvData.csv)\n          rows.forEach((row: Record<string, unknown>) => {\n            content += `${prompt.content.replace(/{([^{}]*)}/g, (_, key) => `${row[key as keyof typeof row]}`)}\\n`\n          })\n        }\n      } else {\n        content += prompt.content\n      }\n      if (prompt.suffix) {\n        content += `\\n${prompt.suffix}`\n      }\n\n      switch (prompt.role) {\n        case 'human':\n          histories.push(new HumanMessage(content))\n          break\n        case 'system':\n          histories.push(new SystemMessage(content))\n          break\n        default:\n          histories.push(new AIMessage(content))\n          break\n      }\n    }\n  })\n  return histories\n}\n\nexport const prepareThreadHistory = (\n  connectedNodes: Node[],\n  threadPromptNodes: { node: Node; connectedNodes?: Node[] }[],\n) => {\n  const messageNodes =\n    connectedNodes\n      ?.filter((node) => node.type === FlowNodeTypeEnum.Message)\n      .map((node) => ({ node: node, connectedNodes: [] as Node[] }))\n      .reverse() || []\n\n  const systems: { node: Node; connectedNodes: Node[] }[] = []\n  threadPromptNodes.forEach(async (threadPromptNode) => {\n    systems.unshift({\n      node: threadPromptNode.node,\n      connectedNodes: threadPromptNode.connectedNodes || [],\n    })\n  })\n  return {\n    history: buildHistories(messageNodes),\n    systems: buildHistories(systems),\n  }\n}\n","import { Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum, Schema, SchemaItem, ToolDefinition } from 'src/services/database/types'\nimport { DefaultNode } from './flow-node'\n\nexport const toLocalLLMToolCallingInput = (\n  tools?: {\n    node: DefaultNode\n    connectedNodes?: DefaultNode[]\n    connections: Connection[]\n  }[],\n): {\n  name: string\n  description: string\n  schemaItems: SchemaItem[]\n}[] => {\n  if (!tools) {\n    return []\n  }\n  return tools.reduce(\n    (all: { name: string; description: string; schemaItems: SchemaItem[] }[], item) => {\n      const toolEntity = item.node.data?.entity as ToolDefinition\n      const toolSchemaEnity = item?.connectedNodes?.find(\n        (node) => node.type === FlowNodeTypeEnum.Schema,\n      )?.data?.entity as Schema\n      if (toolEntity && toolSchemaEnity?.schema_items?.length) {\n        all.push({\n          name: toolEntity.name,\n          description: toolEntity.description,\n          schemaItems: toolSchemaEnity.schema_items,\n        })\n      }\n      return all\n    },\n    [],\n  )\n}\n","import { useReactFlow } from '@xyflow/react'\nimport { useCallback } from 'react'\nimport { FlowNodePlaceholder, FlowNodeTypeEnum } from 'src/services/database/types'\n\nexport const useFlowEmbeddingNode = () => {\n  const { getNodes } = useReactFlow()\n\n  const getFlowEmbeddingNode = useCallback(() => {\n    const embeddingNode = getNodes().find(\n      (node) => node.type === FlowNodeTypeEnum.DefaultEmbeddingModel,\n    )\n    return embeddingNode\n  }, [getNodes])\n\n  const getFlowEmbeddingEntity = useCallback(() => {\n    const embeddingNode = getFlowEmbeddingNode()\n    const embbedingEntity = embeddingNode?.data?.entity as FlowNodePlaceholder\n\n    return embbedingEntity\n  }, [getFlowEmbeddingNode])\n\n  return {\n    getFlowEmbeddingNode,\n    getFlowEmbeddingEntity,\n  }\n}\n","import { Node, useReactFlow } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PromptTemplate } from '@langchain/core/prompts'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { getRepository } from 'src/services/database'\nimport {\n  CSVData,\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  JSONData,\n  JSONLData,\n  LLM,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  Schema,\n  Thread,\n  VectorDatabase,\n  VectorDatabaseStorageEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport {\n  prepareThreadConnections,\n  threadConversationTraveling,\n} from 'src/utils/thread-conversation-traveling'\nimport { prepareThreadHistory } from 'src/utils/build-message-history'\nimport { AIMessage, BaseMessage, HumanMessage } from '@langchain/core/messages'\nimport { getStorageDataSource } from 'src/utils/vector-storage'\nimport { DefaultNodeData } from 'src/utils/flow-node'\nimport { toLocalLLMToolCallingInput } from 'src/utils/flow-to-local-llm'\nimport { useSessionState } from 'src/states/session'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { logError } from 'src/utils/logger'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\ntype CreateMessageOption = {\n  onMessageUpdate: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n}\nexport const useCreateMessage = ({\n  getNode,\n  getHandleConnections,\n}: Pick<\n  ReturnType<typeof useReactFlow<Node<DefaultNodeData>>>,\n  'getNode' | 'getHandleConnections'\n>) => {\n  const { t } = useTranslation('create_new_message')\n  const [loading, setLoading] = useState(false)\n\n  const currenSession = useSessionState((state) => state.currentSession)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { similaritySearchWithScore: similaritySearchWithScoreFunction } = useEmbedding()\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n\n  const { stream } = useLLM()\n\n  const insertMessages = useCallback(\n    async ({\n      content,\n      threadId,\n      sourceId,\n      initialX,\n      initialY,\n      initialLLMId,\n    }: {\n      content: string\n      threadId: string\n      sourceId: string\n      initialX: number\n      initialY: number\n      initialLLMId: string\n    }) => {\n      if (!currenSession) {\n        throw new Error('Session is not found')\n      }\n      const humanMessage = await getRepository('Message').save({\n        thread_id: threadId,\n        content,\n        role: MessageRoleEnum.Human,\n        status: MessageStatusEnum.Started,\n        llm_id: initialLLMId,\n        session_id: currenSession.id,\n      })\n      if (!humanMessage) {\n        throw new Error('Failed to save message')\n      }\n\n      const humanMessageNode = await createOrUpdateFlowNode({\n        source_id: humanMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY + 80,\n      })\n      if (!humanMessageNode) {\n        throw new Error('Failed to save human message node')\n      }\n      await createOrUpdateFlowEdge({\n        source: sourceId,\n        target: humanMessageNode.id,\n      })\n      const aiMessage = await getRepository('Message').save({\n        thread_id: threadId,\n        content: t('initial_ai_message'),\n        role: MessageRoleEnum.AI,\n        status: MessageStatusEnum.Inprogress,\n        llm_id: initialLLMId,\n        parent_message_id: humanMessage.id,\n        session_id: currenSession.id,\n      })\n      if (!aiMessage) {\n        throw new Error('Failed to save message')\n      }\n      const aiMessageNode = await createOrUpdateFlowNode({\n        source_id: aiMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY + 250,\n      })\n      if (!aiMessageNode) {\n        throw new Error('Failed to save ai message node')\n      }\n      await createOrUpdateFlowEdge({\n        source: humanMessageNode.id,\n        target: aiMessageNode.id,\n      })\n\n      return {\n        aiMessage,\n        humanMessage,\n        aiMessageNode,\n        humanMessageNode,\n      }\n    },\n    [createOrUpdateFlowEdge, createOrUpdateFlowNode, currenSession, t],\n  )\n\n  const handlePlaceholders = useCallback(\n    async (\n      messagesInfo: Awaited<ReturnType<typeof insertMessages>>,\n      threadConnection: ReturnType<typeof prepareThreadConnections>,\n    ): Promise<BaseMessage[]> => {\n      const { placeholders } = threadConnection\n      if (!placeholders?.length) {\n        return []\n      }\n      const injectedMessages: BaseMessage[] = []\n      await Promise.all(\n        placeholders.map(async (item) => {\n          const placeholderRecord = item.node.data?.entity as FlowNodePlaceholder\n          if (!placeholderRecord) {\n            return\n          }\n          switch (placeholderRecord.placeholder_type) {\n            case FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER: {\n              const vectorNode = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.VectorDatabase,\n              )\n              const vector = vectorNode?.data?.entity as VectorDatabase\n              const prompt = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.Prompt,\n              )?.data?.entity as Prompt\n              if (!prompt || !vector || !vectorNode) {\n                return\n              }\n\n              const k = placeholderRecord.metadata?.k ? +placeholderRecord.metadata?.k : 1\n              let minimalScore = placeholderRecord.metadata?.minimalScore\n                ? +placeholderRecord.metadata?.minimalScore\n                : undefined\n              if (minimalScore && minimalScore > 1) {\n                minimalScore = minimalScore / 100\n              }\n\n              const documents: Awaited<ReturnType<typeof similaritySearchWithScoreFunction>> = []\n\n              if (vector.storage === VectorDatabaseStorageEnum.DataNode) {\n                const connections = getHandleConnections({\n                  nodeId: vectorNode.id,\n                  type: 'target',\n                })\n                const dataSourceNode = connections\n                  .map((connection) => getNode(connection.source))\n                  .find(\n                    (node) =>\n                      node?.type &&\n                      [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                        node?.type as FlowNodeTypeEnum,\n                      ),\n                  )\n                const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n                if (!dataSource) {\n                  return\n                }\n                documents.push(\n                  ...((await similaritySearchWithScoreFunction(\n                    getFlowEmbeddingEntity(),\n                    {\n                      database: {\n                        databaseId: vector.id,\n                        dataSourceId: dataSource.id,\n                        dataSourceType: getStorageDataSource(dataSource),\n                      },\n                    },\n                    messagesInfo.humanMessage.content,\n                    k,\n                  )) || []),\n                )\n              } else {\n                documents.push(\n                  ...((await similaritySearchWithScoreFunction(\n                    getFlowEmbeddingEntity(),\n                    {\n                      database: {\n                        databaseId: vector.id,\n                      },\n                    },\n                    messagesInfo.humanMessage.content,\n                    k,\n                  )) || []),\n                )\n              }\n              if (!documents) {\n                return []\n              }\n              const template = new PromptTemplate({\n                template: prompt.content,\n                inputVariables: ['context'],\n              })\n\n              injectedMessages.push(\n                new AIMessage(\n                  await template.format({\n                    context: !minimalScore\n                      ? documents.map(([doc]) => doc.pageContent).join('\\n')\n                      : documents\n                          .filter(([, score]) => score >= minimalScore)\n                          .map(([doc]) => doc.pageContent)\n                          .join('\\n'),\n                  }),\n                ),\n              )\n            }\n          }\n        }),\n      )\n      return injectedMessages\n    },\n    [getFlowEmbeddingEntity, getHandleConnections, getNode, similaritySearchWithScoreFunction],\n  )\n\n  const invokeMessage = useCallback(\n    async (\n      messagesInfo: Awaited<ReturnType<typeof insertMessages>>,\n      threadConnection: ReturnType<typeof prepareThreadConnections>,\n      threadConversionNodes: Node[],\n      { onMessageUpdate }: CreateMessageOption,\n    ) => {\n      const { prompts, tools, schemas, placeholders, llm } = threadConnection\n\n      const llmEntity = llm?.node.data?.entity as LLM\n\n      if (!llmEntity) {\n        throw new Error('LLM is not found')\n      }\n\n      const injectedMessages: BaseMessage[] = []\n\n      if (placeholders?.length) {\n        injectedMessages.push(...(await handlePlaceholders(messagesInfo, threadConnection)))\n      }\n\n      const { history: MessageHistory, systems } = prepareThreadHistory(\n        threadConversionNodes,\n        prompts,\n      )\n      const messages = [\n        ...systems,\n        ...injectedMessages,\n        ...MessageHistory,\n        new HumanMessage(messagesInfo.humanMessage.content),\n      ]\n\n      const schemaEntities = schemas\n        .map((schemaNode) => schemaNode.node.data?.entity as Schema)\n        .filter(Boolean) as Schema[]\n      const { lastChunk, content } = await stream(llmEntity.provider, messages, {\n        tools: toLocalLLMToolCallingInput(tools),\n        schemas: schemaEntities,\n        llm: llmEntity,\n        onMessageUpdate: ({ content }) => {\n          onMessageUpdate?.({\n            id: messagesInfo.aiMessageNode.id,\n            nodeData: {\n              loading: true,\n              content: content,\n            },\n          })\n        },\n      })\n\n      messagesInfo.aiMessage.content = content\n      messagesInfo.aiMessage.metadata = JSON.stringify({\n        message: lastChunk,\n      })\n      onMessageUpdate?.({\n        id: messagesInfo.aiMessageNode.id,\n        nodeData: {\n          content,\n          loading: false,\n          entity: messagesInfo.aiMessage,\n        },\n      })\n      if (messagesInfo.aiMessage.id) {\n        await getRepository('Message').update(messagesInfo.aiMessage.id, {\n          content: content,\n          metadata: JSON.stringify({\n            message: lastChunk,\n          }),\n        })\n      }\n      return content\n    },\n    [handlePlaceholders, stream],\n  )\n\n  const createMessage = useCallback(\n    async (source: Node, content: string, options: CreateMessageOption) => {\n      const { nodes: threadConversionNodes } = threadConversationTraveling(\n        [source.id],\n        [],\n        [],\n        [],\n        {\n          getNode,\n          getHandleConnections,\n        },\n      )\n\n      const threadNode = threadConversionNodes.find((node) => node.type === FlowNodeTypeEnum.Thread)\n      const thread = threadNode?.data.entity as Thread\n      if (!source || !thread || !threadNode) {\n        throw new Error('Source or thread is not found')\n      }\n      const threadConnections = prepareThreadConnections(threadNode, {\n        getNode,\n        getHandleConnections,\n      })\n      if (!threadConnections?.thread) {\n        throw new Error('Thread node is not found')\n      }\n\n      let messagesInfo: Awaited<ReturnType<typeof insertMessages>> | undefined\n      try {\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        messagesInfo = await insertMessages({\n          content,\n          initialX,\n          initialY,\n          sourceId: source.id,\n          threadId: thread.id,\n          initialLLMId: thread.initial_llm_id,\n        })\n        await invokeMessage(messagesInfo, threadConnections, threadConversionNodes, options)\n        await getRepository('Message').update(`${messagesInfo.aiMessage.id}`, {\n          status: MessageStatusEnum.Success,\n        })\n        messagesInfo.aiMessage.status = MessageStatusEnum.Success\n        options.onMessageUpdate({\n          id: messagesInfo.aiMessageNode.id,\n          nodeData: {\n            entity: messagesInfo.aiMessage,\n            loading: false,\n          },\n        })\n        return true\n      } catch (error) {\n        logError('Create Message', error)\n        if (messagesInfo?.aiMessage) {\n          await getRepository('Message').update(`${messagesInfo.aiMessage.id}`, {\n            status: MessageStatusEnum.Failed,\n            content: t('errors.ai_message_content_failed'),\n          })\n        }\n        if (messagesInfo?.aiMessageNode.id) {\n          options?.onMessageUpdate({\n            id: messagesInfo.aiMessageNode.id,\n            nodeData: {\n              content: t('errors.ai_message_content_failed'),\n              entity: {\n                ...messagesInfo.aiMessage,\n                status: MessageStatusEnum.Failed,\n                content: t('errors.ai_message_content_failed'),\n              },\n              loading: false,\n            },\n          })\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [getHandleConnections, getNode, insertMessages, invokeMessage, t],\n  )\n\n  return {\n    loading,\n    createMessage,\n  }\n}\n","import { useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport omitBy from 'lodash/omitBy'\nimport isUndefined from 'lodash/isUndefined'\nimport { Node, Connection, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { useCreateMessage } from 'src/hooks/flows/mutations/use-create-message'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { useFlowState } from 'src/states/flow'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { prepareThreadConnections } from 'src/utils/thread-conversation-traveling'\nimport { DefaultNodeData } from 'src/utils/flow-node'\n\nimport { ThreadNodeProps } from '../type'\n\nexport const useActions = (id: string, data: ThreadNodeProps['data']) => {\n  const node = useInternalNode(id)\n  const { t } = useTranslation('flows')\n  const { getNode, getHandleConnections } = useReactFlow<Node<DefaultNodeData>>()\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { createMessage: createMessageFunction, loading } = useCreateMessage({\n    getNode,\n    getHandleConnections,\n  })\n\n  const onMessageUpdate = useCallback(\n    (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => {\n      if (!info.id) {\n        return\n      }\n      const item = getNode(info.id)\n      if (!item || !info.nodeData) {\n        return\n      }\n      updateNodes([\n        {\n          id: item.id,\n          type: 'replace',\n          item: {\n            ...item,\n            data: {\n              ...item.data,\n              ...omitBy(info.nodeData, isUndefined),\n            },\n          },\n        },\n      ])\n    },\n    [getNode, updateNodes],\n  )\n  const createMessage = useCallback(\n    async (input: string) => {\n      if (node && data.entity) {\n        try {\n          await createMessageFunction(node, input, {\n            onMessageUpdate,\n          })\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              variant: 'destructive',\n              title: t('thread_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: `${error}`,\n          })\n        }\n      }\n    },\n    [node, data.entity, createMessageFunction, onMessageUpdate, t],\n  )\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: Node<DefaultNodeData>\n        connections: Connection[]\n        connectedNodes?: Node<DefaultNodeData>[]\n      }[] = []\n      const threadConnections = prepareThreadConnections(currentNode as Node<DefaultNodeData>, {\n        getNode,\n        getHandleConnections,\n      })\n      if (threadConnections.thread) {\n        linkedConnections.push({\n          node: threadConnections.thread.node as Node<DefaultNodeData>,\n          connectedNodes: [],\n          connections: threadConnections.thread.connections,\n        })\n      }\n      if (threadConnections.prompts) {\n        linkedConnections.push(\n          ...threadConnections.prompts.map((item) => {\n            return {\n              node: item.node,\n              connectedNodes: item.connectedNodes,\n              connections: item.connections,\n            }\n          }),\n        )\n      }\n      if (threadConnections.schemas) {\n        linkedConnections.push(\n          ...threadConnections.schemas.map((item) => {\n            return {\n              node: item.node,\n              connectedNodes: [],\n              connections: item.connections,\n            }\n          }),\n        )\n      }\n      if (threadConnections.placeholders) {\n        threadConnections.placeholders.forEach((item) => {\n          const connectedNodes = item.connections\n            .map((connection) => {\n              return getNode(connection.source)\n            })\n            .filter(Boolean) as Node<DefaultNodeData>[]\n          linkedConnections.push({\n            node: item.node,\n            connectedNodes: connectedNodes || [],\n            connections: item.connections,\n          })\n        })\n      }\n      if (threadConnections.llm) {\n        linkedConnections.push(threadConnections.llm)\n      }\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  return { loading, createMessage, getLinkedConnections }\n}\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.Prompt && target?.type === FlowNodeTypeEnum.Thread) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.LLM &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.Schema &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.ToolDefinition &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.VectorDatabase &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.PlaceHolder &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          const sourceEntity = source.data.entity as FlowNodePlaceholder\n          if (\n            sourceEntity.placeholder_type === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER\n          ) {\n            await createOrUpdateFlowEdge({\n              source: connection.source,\n              target: connection.target,\n              sourceHandle: connection.sourceHandle,\n              targetHandle: connection.targetHandle,\n            })\n            return\n          }\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Position, useHandleConnections, useReactFlow } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport NewMessageCard from 'src/components/molecules/NewMessageCard'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardTitle } from 'src/lib/shadcn/ui/card'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  Prompt,\n  PromptTypeEnum,\n} from 'src/services/database/types'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { ThreadNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ThreadNode = memo((props: ThreadNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { t } = useTranslation('flows')\n  const [showThread, setShowThread] = useState(false)\n  const connections = useHandleConnections({\n    type: 'source',\n  })\n  const targetConnections = useHandleConnections({\n    type: 'target',\n  })\n  const { getNode } = useReactFlow()\n  const { loading, createMessage, getLinkedConnections } = useActions(id, data)\n\n  useConnectionToHandler(id)\n\n  const handleCreateMessage = useCallback(\n    async (...args: Parameters<typeof createMessage>) => {\n      setShowThread(false)\n      const result = await createMessage(...args)\n      return result\n    },\n    [createMessage],\n  )\n\n  const containMessage = useMemo(() => {\n    return connections.length > 0\n  }, [connections])\n\n  const handleNewThread = useCallback(() => {\n    setShowThread((pre) => !pre)\n  }, [])\n\n  const inner = useMemo(() => {\n    const tags = targetConnections\n      .map((connection, index) => {\n        const source = getNode(connection.source)\n        if (source?.type === FlowNodeTypeEnum.Schema) {\n          return <Badge key={`${index}`}>{t('thread_node.structured_output')}</Badge>\n        } else if (source?.type === FlowNodeTypeEnum.Prompt) {\n          const entity = source.data.entity as Prompt\n          return (\n            <Badge key={`${index}`}>\n              {t(\n                entity.type === PromptTypeEnum.FewShotExample\n                  ? 'thread_node.prompts.few_shot_example'\n                  : `thread_node.prompts.${entity.role.toLowerCase()}`,\n              )}\n            </Badge>\n          )\n        } else if (source?.type === FlowNodeTypeEnum.PlaceHolder) {\n          const entity = source.data.entity as FlowNodePlaceholder\n          if (entity?.placeholder_type === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER) {\n            return <Badge key={`${index}`}>{t('thread_node.vector_database_retriever')}</Badge>\n          }\n        }\n        return undefined\n      })\n      .filter(Boolean)\n\n    if (props.data.entity && !props.data.entity?.messages?.length && !containMessage) {\n      return (\n        <NewMessageCard\n          disabled={loading}\n          loading={loading}\n          onSubmit={handleCreateMessage}\n          tags={tags}\n        />\n      )\n    }\n\n    if (!tags?.length) {\n      return <div className=\"w-12 h-10\" />\n    }\n\n    return (\n      <Card className=\"p-4 pt-2\">\n        <CardTitle className=\"mb-2\">{t('thread_node.title')}</CardTitle>\n        <div className=\"flex gap-1.5\">{tags}</div>\n        <div className=\"mt-4 w-full flex justify-end\">\n          <Button onClick={handleNewThread} variant=\"outline\">\n            <LazyIcon name={showThread ? 'copy-minus' : 'copy-plus'} />\n            {showThread ? t('thread_node.hide') : t('thread_node.clone')}\n          </Button>\n        </div>\n      </Card>\n    )\n  }, [\n    containMessage,\n    getNode,\n    handleCreateMessage,\n    handleNewThread,\n    loading,\n    props.data.entity,\n    showThread,\n    t,\n    targetConnections,\n  ])\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} enableToStandalone getLinkedConnections={getLinkedConnections} />\n        {inner}\n        {showThread ? (\n          <>\n            <div className=\"w-[1px] absolute ml-[50%] h-[30px] bg-gray-500\" />\n            <div className=\"absolute mt-[30px] w-full\">\n              <div className=\"ml-[10%] w-80 animate-in slide-in-from-bottom-5\">\n                <NewMessageCard\n                  disabled={loading}\n                  loading={loading}\n                  onSubmit={handleCreateMessage}\n                />\n              </div>\n            </div>\n          </>\n        ) : undefined}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\n\nimport { MessageNodeProps } from '../type'\n\nexport function HumanMessageComponent({\n  data,\n  onNewThread,\n  loading,\n  showThread,\n}: {\n  data: MessageNodeProps['data']\n  onNewThread?: () => void\n  loading?: boolean\n  showThread: boolean\n}) {\n  const { t } = useTranslation('flows')\n  return (\n    <Alert className=\"flex min-w-52\">\n      <LazyIcon size={24} name=\"user\" />\n      <div className=\"ml-2 max-w-full w-full\">\n        <AlertTitle>{`Human`}</AlertTitle>\n        <AlertDescription>{`${data.content || data.entity?.content || ''}`}</AlertDescription>\n        {onNewThread ? (\n          <div className=\"w-full mt-2 flex items-center justify-end\">\n            <Button onClick={onNewThread} disabled={loading} variant=\"outline\">\n              <LazyIcon name={!showThread ? 'plus' : 'minus'} size={16} />\n              {!showThread ? t(`message_node.new_thread`) : t(`message_node.hide_thread`)}\n            </Button>\n          </div>\n        ) : undefined}\n      </div>\n    </Alert>\n  )\n}\n","import { Suspense, useMemo } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { cn } from 'src/lib/utils'\nimport { useTranslation } from 'react-i18next'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { BorderBeam } from 'src/lib/shadcn/ui/border-beam'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { MessageStatusEnum } from 'src/services/database/types'\nimport { MarkdownViewer } from 'src/components/molecules/MarkdownViewer'\n\nimport { MessageNodeProps } from '../type'\n\nexport function AIMessageComponent({\n  data,\n  onNewThread,\n  loading,\n  showThread,\n}: {\n  data: MessageNodeProps['data']\n  onNewThread?: () => void\n  loading?: boolean\n  showThread: boolean\n}) {\n  const { t } = useTranslation('flows')\n  const messageMetadata = useMemo<{ message: Record<string, unknown> }>(() => {\n    try {\n      return JSON.parse(data?.entity?.metadata || '{}')\n    } catch {\n      return {}\n    }\n  }, [data?.entity?.metadata])\n\n  const isError = data.entity.status === MessageStatusEnum.Failed\n\n  const content = useMemo(() => {\n    return <MarkdownViewer source={`${data.content || data.entity?.content || ''}`} />\n  }, [data.content, data.entity?.content])\n\n  return (\n    <Alert\n      className={cn('flex min-w-52', isError ? 'bg-background' : '')}\n      variant={isError ? 'destructive' : 'default'}\n    >\n      <LazyIcon\n        className={cn(data.loading ? 'animate-spin' : undefined)}\n        size={24}\n        name={data.loading ? 'loader-circle' : 'bot'}\n      />\n      <LazyIcon name={!showThread ? 'plus' : 'minus'} size={24} />\n      <div className=\"ml-2 w-full max-w-full\">\n        <AlertTitle>\n          {t(`message_node.message_roles.${data.entity?.role?.toLowerCase()}`)}\n        </AlertTitle>\n        <Suspense\n          fallback={\n            <div className=\"h-full w-ful rounded-lg flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          {isError ? data.content || data.entity?.content || '' : content}\n        </Suspense>\n        {Array.isArray(messageMetadata?.message?.tool_calls) &&\n        messageMetadata?.message?.tool_calls?.length\n          ? messageMetadata?.message?.tool_calls.map((item, index) => {\n              return (\n                <Badge key={`${item.name}_${index}`}>\n                  {t('message_node.tool_call', {\n                    name: item.name,\n                    args: Object.entries(item.args)\n                      .map(([key, value]) => `\"${key}\": \"${value}\"`)\n                      .join(', '),\n                  })}\n                </Badge>\n              )\n            })\n          : null}\n        {onNewThread ? (\n          <div className=\"w-full mt-2 flex items-center justify-end\">\n            <Button onClick={onNewThread} disabled={loading} variant=\"outline\">\n              <LazyIcon name={!showThread ? 'plus' : 'minus'} size={16} />\n              {!showThread ? t(`message_node.new_thread`) : t(`message_node.hide_thread`)}\n            </Button>\n          </div>\n        ) : undefined}\n      </div>\n      {data.loading ? <BorderBeam size={350} duration={10} /> : undefined}\n    </Alert>\n  )\n}\n","import { useCallback } from 'react'\nimport omitBy from 'lodash/omitBy'\nimport isUndefined from 'lodash/isUndefined'\nimport { useTranslation } from 'react-i18next'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { Node, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { useCreateMessage } from 'src/hooks/flows/mutations/use-create-message'\nimport { useFlowState } from 'src/states/flow'\n\nimport { MessageNodeProps } from '../type'\n\nexport const useActions = (id: string) => {\n  const { t } = useTranslation('flows')\n  const node = useInternalNode(id)\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { getNode, getHandleConnections } = useReactFlow<Node<MessageNodeProps['data']>>()\n  const { createMessage: createMessageFunction, loading } = useCreateMessage({\n    getNode,\n    getHandleConnections,\n  })\n\n  const onMessageUpdate = useCallback(\n    (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => {\n      if (!info.id) {\n        return\n      }\n      const item = getNode(info.id)\n      if (!item || !info.nodeData) {\n        return\n      }\n      updateNodes([\n        {\n          id: item.id,\n          type: 'replace',\n          item: {\n            ...item,\n            data: {\n              ...item.data,\n              ...omitBy(info.nodeData, isUndefined),\n            },\n          },\n        },\n      ])\n    },\n    [getNode, updateNodes],\n  )\n\n  const createMessage = useCallback(\n    async (input: string) => {\n      if (node) {\n        try {\n          await createMessageFunction(node, input, {\n            onMessageUpdate,\n          })\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              variant: 'destructive',\n              title: t('message_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('message_node.errors.create_message'),\n          })\n        }\n      }\n    },\n    [node, t, createMessageFunction, onMessageUpdate],\n  )\n\n  return {\n    loading,\n    createMessage,\n  }\n}\n","import { Node } from '@xyflow/react'\nimport { useCallback } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  Thread,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateIdieMessage = () => {\n  const currenSession = useSessionState((state) => state.currentSession)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createIdieMessage = useCallback(\n    async (\n      source: Node,\n      thread: Thread,\n      input: string,\n      options?: {\n        promptNode?: Node\n      },\n    ) => {\n      if (!source || !thread || !currenSession) {\n        return\n      }\n      const prompt = options?.promptNode?.data?.entity as Prompt\n      // This is node thead replaced with message node\n      const initialX = source.position?.x || 0\n      const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n      const newMessage = await getRepository('Message').save({\n        thread_id: thread.id,\n        content: input,\n        role: prompt?.role || MessageRoleEnum.Human,\n        status: MessageStatusEnum.Started,\n        llm_id: thread.initial_llm_id,\n        session_id: currenSession.id,\n      })\n      if (!newMessage) {\n        throw new Error('Failed to save message')\n      }\n      const newMessageNode = await createOrUpdateFlowNode({\n        source_id: newMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY,\n      })\n      if (!newMessageNode) {\n        throw new Error('Failed to save message node')\n      }\n      const edgeToNewMessage = await createOrUpdateFlowEdge({\n        source: source.id,\n        target: newMessageNode.id,\n      })\n      let edgeToPrompt\n      if (options?.promptNode) {\n        edgeToPrompt = await createOrUpdateFlowEdge({\n          source: options?.promptNode.id,\n          target: newMessageNode.id,\n        })\n      }\n      return {\n        message: newMessage,\n        edgeToPrompt,\n        messageNode: newMessageNode,\n        messageEdge: edgeToNewMessage,\n      }\n    },\n    [createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    createIdieMessage,\n  }\n}\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { FlowNodeTypeEnum, Message, Prompt, ThreadStatusEnum } from 'src/services/database/types'\n\nimport { useCreateIdieMessage } from 'src/hooks/flows/mutations/use-create-idie-message'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const { createIdieMessage } = useCreateIdieMessage()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, source, target }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.Prompt && target?.type === FlowNodeTypeEnum.Message) {\n          const message = target?.data?.entity as Message\n          const prompt = source?.data?.entity as Prompt\n          if (!prompt || !message || !target) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          await createIdieMessage(\n            target,\n            {\n              id: message?.thread_id,\n              title: '',\n              status: ThreadStatusEnum.Started,\n              initial_llm_id: message.llm_id,\n              session_id: prompt.session_id,\n            },\n            prompt.content,\n            {\n              promptNode: source,\n            },\n          )\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createIdieMessage],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Position, useHandleConnections } from '@xyflow/react'\nimport NewMessageCard from 'src/components/molecules/NewMessageCard'\nimport { MessageRoleEnum } from 'src/services/database/types'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport textToSpeech from 'src/utils/text-to-speech'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { HumanMessageComponent } from './components/HumanMessage'\nimport { AIMessageComponent } from './components/AIMessage'\nimport { MessageNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const MessageNode = memo((props: MessageNodeProps) => {\n  const { id, data, isConnectable } = props\n  const [showThread, setShowThread] = useState(false)\n  const [speaking, setSpeaking] = useState(false)\n  const { t } = useTranslation('common')\n  const connections = useHandleConnections({\n    type: 'source',\n  })\n  const { loading, createMessage } = useActions(id)\n  const { toast } = useToast()\n\n  useConnectionToHandler(id)\n\n  const handleCreateMessage = useCallback(\n    async (...args: Parameters<typeof createMessage>) => {\n      const result = await createMessage(...args)\n      setShowThread(false)\n      return result\n    },\n    [createMessage],\n  )\n\n  const isEnd = useMemo(() => {\n    return connections.length === 0\n  }, [connections])\n\n  const handleCopy = useCallback(() => {\n    if (!data.entity?.content) {\n      return\n    }\n    navigator.clipboard.writeText(data.entity.content)\n    toast({\n      description: t('copied'),\n    })\n  }, [toast, data, t])\n\n  const handleSpeech = useCallback(async () => {\n    try {\n      if (speaking) {\n        await textToSpeech.stop()\n        return setSpeaking(false)\n      }\n      setSpeaking(true)\n      await textToSpeech.speak(data.entity?.content || '')\n    } catch {\n      toast({\n        variant: 'destructive',\n        description: t('errors.speech_is_not_supported'),\n      })\n    } finally {\n      setSpeaking(false)\n    }\n  }, [data.entity?.content, speaking, t, toast])\n\n  const handleNewThread = useCallback(() => {\n    setShowThread((pre) => !pre)\n  }, [])\n\n  const newMessageCard = useMemo(() => {\n    if (\n      (!isEnd && !showThread) ||\n      data.loading ||\n      loading ||\n      data?.entity?.status === 'inprogress'\n    ) {\n      return undefined\n    }\n    return (\n      <>\n        <div className=\"w-[1px] absolute ml-[50%] h-[30px] bg-gray-500\" />\n        <div className=\"absolute mt-[30px] w-full\">\n          <div className=\"ml-[10%] w-80 animate-in slide-in-from-bottom-5\">\n            <NewMessageCard disabled={loading} loading={loading} onSubmit={handleCreateMessage} />\n          </div>\n        </div>\n      </>\n    )\n  }, [data?.entity?.status, data.loading, handleCreateMessage, isEnd, loading, showThread])\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"max-w-sm min-w-64\">\n        <div className=\"w-auto\">\n          <NodeHeader id={id} />\n          <div>\n            {data.entity?.role === MessageRoleEnum.Human ? (\n              <HumanMessageComponent\n                data={data}\n                showThread={showThread}\n                onNewThread={!isEnd ? handleNewThread : undefined}\n              />\n            ) : (\n              <AIMessageComponent\n                data={data}\n                showThread={showThread}\n                loading={loading}\n                onNewThread={!isEnd ? handleNewThread : undefined}\n              />\n            )}\n          </div>\n          <Button\n            onClick={handleSpeech}\n            className=\"absolute top-0 right-[68px] !px-2 !rounded-none\"\n            variant=\"ghost\"\n          >\n            <LazyIcon name={speaking ? 'circle-stop' : 'speech'} size={16} />\n          </Button>\n          <Button\n            onClick={handleCopy}\n            className=\"absolute top-0 right-[36px] !px-2 !rounded-none\"\n            variant=\"ghost\"\n          >\n            <LazyIcon name=\"copy\" size={16} />\n          </Button>\n        </div>\n        {newMessageCard}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport {\n  CSVData,\n  FlowNodeTypeEnum,\n  Message,\n  Prompt,\n  PromptTypeEnum,\n  ThreadStatusEnum,\n} from 'src/services/database/types'\nimport { useCreateIdieMessage } from 'src/hooks/flows/mutations/use-create-idie-message'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\nimport { useFlowState } from 'src/states/flow'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { createIdieMessage } = useCreateIdieMessage()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, source, target }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        const targetEntity = target?.data?.entity as Prompt\n        const sourceEntity = source?.data?.entity as CSVData\n        if (source?.type === FlowNodeTypeEnum.Message && target?.type === FlowNodeTypeEnum.Prompt) {\n          const message = source?.data?.entity as Message\n          const prompt = target?.data?.entity as Prompt\n          if (!prompt || !message || !target) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          await createIdieMessage(\n            source,\n            {\n              id: message?.thread_id,\n              title: '',\n              status: ThreadStatusEnum.Started,\n              initial_llm_id: message.llm_id,\n              session_id: prompt.session_id,\n            },\n            prompt.content,\n            {\n              promptNode: target,\n            },\n          )\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.CSVData &&\n          target?.type === FlowNodeTypeEnum.Prompt &&\n          targetEntity?.type === PromptTypeEnum.FewShotExample &&\n          sourceEntity?.headers.includes('input') &&\n          sourceEntity?.headers.includes('output')\n        ) {\n          await createOrUpdateFlowEdge({\n            source: source.id,\n            target: target.id,\n          })\n          return\n        }\n\n        // Need to delete edge\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createIdieMessage, createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useMemo } from 'react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Position } from '@xyflow/react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { useModal } from '@ebay/nice-modal-react'\nimport ViewDataDetailDialog from 'src/components/dialogs/ViewDataDetailDialog'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { PromptNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const PromptNode = memo((props: PromptNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  useConnectionToHandler(id)\n\n  const viewDetailDialog = useModal(ViewDataDetailDialog)\n\n  const content = useMemo(() => {\n    return `${data.entity?.prefix ? `${data.entity?.prefix}\\n` : ''}${data.entity?.content || ''}`\n  }, [data.entity?.prefix, data.entity?.content])\n\n  const promptArguments = useMemo(() => {\n    const regex = /{(.*?)}/g\n    const matches = content.match(regex)\n    return matches?.map((match) => match.replace('{', '').replace('}', '')) || []\n  }, [content])\n\n  const isOverLimit = content.length > 990\n\n  const handleOpenDetail = () => {\n    viewDetailDialog.show({ title: 'Prompt', content })\n  }\n\n  return (\n    <div className=\"min-w-56\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center max-w-72\" variant=\"default\">\n          <LazyIcon size={24} name={'notepad-text'} />\n          <div className=\"ml-2 max-w-full break-words break-all\">\n            <AlertTitle>{`${data.entity?.role || ''}`}</AlertTitle>\n            <AlertDescription onClick={isOverLimit ? handleOpenDetail : undefined}>\n              {isOverLimit ? `${content.slice(0, 990)}...` : content}\n              {isOverLimit ? (\n                <span className=\"float-right\">\n                  <LazyIcon name=\"chevron-right\" />\n                </span>\n              ) : undefined}\n            </AlertDescription>\n            {promptArguments?.length\n              ? promptArguments.map((argument, index) => {\n                  return (\n                    <Badge key={index} className=\"mt-2 mr-1\" variant=\"default\">\n                      {argument}\n                    </Badge>\n                  )\n                })\n              : undefined}\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","export const formatBytes = (bytes?: number) => {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n  if (bytes === undefined) return 'Unknown size'\n  if (bytes === 0) return '0 Byte'\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return `${Math.round(bytes / Math.pow(1024, i))} ${sizes[i]}`\n}\n","import dayjs from 'dayjs'\nimport { memo, useCallback, useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\n// import { Bar, XAxis, CartesianGrid, BarChart } from 'recharts'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from 'src/lib/shadcn/ui/card'\n// import {\n//   ChartConfig,\n//   ChartContainer,\n//   ChartTooltip,\n//   ChartTooltipContent,\n// } from 'src/lib/shadcn/ui/chart'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { formatBytes } from 'src/utils/bytes-format'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useLocalLLMState } from 'src/services/local-llm'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\n\nexport const SessionInfoNode = memo(() => {\n  const { t } = useTranslation('flows')\n  const [cachedModdels, setCachedModels] =\n    useState<{ model_id: string; info: ModelRecord; isFunctionCalling: boolean }[]>()\n  const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [latestUpdate, setLatestUpdate] = useState<Date>()\n  const [usedBytes, setUsedBytes] = useState('')\n  const [, setCountInfo] = useState<\n    [\n      {\n        name: string\n        nodes: number\n        edges: number\n        llms?: number\n        threads?: number\n        prompts?: number\n        schemas?: number\n        tools?: number\n        vectorDatabases?: number\n        jsonlDatas?: number\n        csvDatas?: number\n      },\n    ]\n  >()\n\n  // const chartConfig = useMemo(() => {\n  //   return {\n  //     nodes: {\n  //       label: t('session_info_node.entities.nodes'),\n  //       color: '#2563eb', // Original color\n  //     },\n  //     edges: {\n  //       label: t('session_info_node.entities.edges'),\n  //       color: '#34d399', // New color\n  //     },\n  //     threads: {\n  //       label: t('session_info_node.entities.threads'),\n  //       color: '#fbbf24', // New color\n  //     },\n  //     llms: {\n  //       label: t('session_info_node.entities.llms'),\n  //       color: '#f87171', // New color\n  //     },\n  //     prompts: {\n  //       label: t('session_info_node.entities.prompts'),\n  //       color: '#a78bfa', // New color\n  //     },\n  //     tools: {\n  //       label: t('session_info_node.entities.tools'),\n  //       color: '#ffcccb', // Lighter and more colorful\n  //     },\n  //     schemas: {\n  //       label: t('session_info_node.entities.schemas'),\n  //       color: '#ffb6c1', // Lighter and more colorful\n  //     },\n  //     vectorDatabases: {\n  //       label: t('session_info_node.entities.vector_databases'),\n  //       color: '#ff69b4', // Lighter and more colorful\n  //     },\n  //     jsonlDatas: {\n  //       label: t('session_info_node.entities.jsonl_data'),\n  //       color: '#ff1493', // Lighter and more colorful\n  //     },\n  //     csvDatas: {\n  //       label: t('session_info_node.entities.csv_data'),\n  //       color: '#db7093', // Lighter and more colorful\n  //     },\n  //   } satisfies ChartConfig\n  // }, [t])\n\n  useEffect(() => {\n    import('@mlc-ai/web-llm').then(({ functionCallingModelIds, prebuiltAppConfig }) => {\n      setCachedModels(\n        cachedLLMURLs?.map((url) => {\n          const item = prebuiltAppConfig.model_list.find((model) => url.includes(model.model))\n          if (!item) {\n            return\n          }\n          return {\n            model_id: item?.model_id || '',\n            info: item,\n            isFunctionCalling: functionCallingModelIds.includes(item?.model_id || ''),\n          }\n        }) as { model_id: string; info: ModelRecord; isFunctionCalling: boolean }[],\n      )\n    })\n  }, [cachedLLMURLs, currentSession?.id])\n\n  const fetchSessionInfo = useCallback(async () => {\n    navigator.storage.estimate().then((estimate) => {\n      if (estimate) {\n        setUsedBytes(\n          t('session_info_node.used_bytes', {\n            used: formatBytes(estimate.usage),\n            total: formatBytes(estimate?.quota),\n          }),\n        )\n      }\n    })\n    if (!currentSession?.id) {\n      return\n    }\n\n    Promise.all([\n      getRepository('FlowNode').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('FlowEdge').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Thread').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Prompt').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('LLM').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Schema').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('ToolDefinition').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('VectorDatabase').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('JSONLData').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('CSVData').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n    ]).then((response) => {\n      const maxUpdatedAt = response.reduce(\n        (acc, item) => {\n          if (item?.updated_at && (!acc || new Date(item.updated_at) > acc)) {\n            return new Date(item.updated_at)\n          }\n          return acc\n        },\n        currentSession.updated_at ? new Date(currentSession.updated_at) : undefined,\n      )\n      setLatestUpdate(maxUpdatedAt)\n    })\n\n    Promise.all([\n      getRepository('FlowNode').count({ where: { session_id: currentSession?.id } }),\n      getRepository('FlowEdge').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Thread').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Prompt').count({ where: { session_id: currentSession?.id } }),\n      getRepository('LLM').count({ where: { session_id: currentSession?.id } }),\n      getRepository('ToolDefinition').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Schema').count({ where: { session_id: currentSession?.id } }),\n      getRepository('VectorDatabase').count({ where: { session_id: currentSession?.id } }),\n      getRepository('JSONLData').count({ where: { session_id: currentSession?.id } }),\n      getRepository('CSVData').count({ where: { session_id: currentSession?.id } }),\n    ]).then(\n      ([\n        nodes,\n        edges,\n        threads,\n        prompts,\n        llms,\n        tools,\n        schemas,\n        vectorDatabases,\n        jsonlDatas,\n        csvDatas,\n      ]) => {\n        setCountInfo([\n          {\n            name: t('session_info_node.count_info.title'),\n            nodes: nodes || 0,\n            edges: edges || 0,\n            threads: threads || 0,\n            prompts: prompts || 0,\n            llms: llms || 0,\n            tools: tools || 0,\n            schemas: schemas || 0,\n            vectorDatabases: vectorDatabases || 0,\n            jsonlDatas: jsonlDatas || 0,\n            csvDatas: csvDatas || 0,\n          },\n        ])\n      },\n    )\n  }, [currentSession?.id, currentSession?.updated_at, t])\n\n  const handleReload = useCallback(() => {\n    fetchSessionInfo()\n  }, [fetchSessionInfo])\n\n  useEffect(() => {\n    fetchSessionInfo()\n  }, [fetchSessionInfo])\n  return (\n    <Card className=\"w-96\">\n      <CardHeader>\n        <CardTitle>{t('session_info_node.title')}</CardTitle>\n        <CardDescription>\n          {latestUpdate || currentSession?.updated_at\n            ? dayjs(latestUpdate || currentSession?.updated_at).fromNow()\n            : ''}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-4\">\n        <div className=\"flex items-center space-x-4 rounded-md border p-4\">\n          <div className=\"flex-1 space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">{t('session_info_node.disk_size')}</p>\n            <p className=\"text-sm text-muted-foreground\">{usedBytes}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4 rounded-md border p-4\">\n          <div className=\"flex-1 space-y-1\">\n            <div className=\"text-sm font-medium leading-none\">\n              {t('session_info_node.cached_llms')}\n              <Badge className=\"ml-2\">{cachedModdels?.length || 0}</Badge>\n            </div>\n            {cachedModdels?.map((llm) => (\n              <div key={llm?.model_id} className=\"text-sm text-muted-foreground gap-1\">\n                {llm?.model_id}\n                <div className=\"max-w-full gap-1 flex flex-wrap mt-1\">\n                  <LLMInfo\n                    model={llm?.info}\n                    isFunctionCalling={llm?.isFunctionCalling || false}\n                    isCached={true}\n                    cloud={false}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div>\n          {/* Production build failed */}\n          {/* <ChartContainer config={chartConfig} className=\"min-h-28 w-full\">\n            <BarChart accessibilityLayer data={countInfo}>\n              <CartesianGrid vertical={false} />\n              <XAxis dataKey=\"name\" tickLine={false} tickMargin={10} axisLine={false} />\n              <ChartTooltip content={<ChartTooltipContent />} />\n              {Object.entries(chartConfig).map(([key]) => (\n                <Bar key={key} dataKey={key} fill={'#ffb6c1'} radius={4} />\n              ))}\n            </BarChart>\n          </ChartContainer> */}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\" onClick={handleReload}>\n          <LazyIcon size={24} name={'refresh-ccw'} />\n          {t('session_info_node.reload')}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useEffect, useRef } from 'react'\nimport { Position, useInternalNode } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useFlowState } from 'src/states/flow'\nimport { convertToTypeScriptInterface, convertToZodSchemaString } from 'src/utils/schema-format'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from 'src/lib/shadcn/ui/tabs'\nimport { Card } from 'src/lib/shadcn/ui/card'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { SchemaNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const SchemaNode = memo((props: SchemaNodeProps) => {\n  const { t } = useTranslation('flows')\n  const { id, data, isConnectable } = props\n  const loadingRef = useRef(false)\n  const node = useInternalNode(id)\n  const updateNodes = useFlowState((state) => state.updateNodes)\n\n  useConnectionToHandler(id)\n\n  useEffect(() => {\n    const schema = data?.entity\n    if (!schema || !node || loadingRef.current || schema?.schema_items?.length || data.loaded)\n      return\n\n    loadingRef.current = true\n    getRepository('SchemaItem')\n      .find({\n        where: {\n          schema_id: schema.id,\n        },\n      })\n      .then((schemaItems) => {\n        updateNodes([\n          {\n            id: node.id,\n            type: 'replace',\n            item: {\n              ...node,\n              data: {\n                ...(node?.data || {}),\n                loaded: true,\n                entity: {\n                  ...data.entity,\n                  schema_items: schemaItems,\n                },\n              },\n            },\n          },\n        ])\n      })\n      .finally(() => {\n        loadingRef.current = false\n      })\n  }, [data.entity, data.loaded, node, updateNodes])\n\n  return (\n    <div>\n      <div>\n        <NodeHeader id={id} />\n        <Tabs defaultValue=\"account\" className=\"w-[400px]\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"account\">{t('schema_node.typescript')}</TabsTrigger>\n            <TabsTrigger value=\"password\">{t('schema_node.zod')}</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"account\">\n            <Card className=\"p-4\">\n              <pre className=\"overflow-hidden break-words whitespace-pre-wrap\">\n                {convertToTypeScriptInterface(data?.entity?.schema_items || [])}\n              </pre>\n            </Card>\n          </TabsContent>\n          <TabsContent value=\"password\">\n            <Card className=\"p-4 max-w-full\">\n              <pre className=\"overflow-hidden break-words whitespace-pre-wrap\">\n                {convertToZodSchemaString(data?.entity?.schema_items || [])}\n              </pre>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useMemo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardContent, CardHeader } from 'src/lib/shadcn/ui/card'\nimport { decodeLine, decodeSplitter } from 'src/utils/string-data'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { CSVDataNodeProps } from './type'\n\nexport const CSVDataNode = memo((props: CSVDataNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  const csv = useMemo(() => {\n    if (!data?.entity) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const lines = decodeLine(data.entity.csv)\n\n    return {\n      headers: decodeSplitter(data.entity.headers),\n      rows: lines.map((row) => decodeSplitter(row)),\n    }\n  }, [data?.entity])\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Card className=\"min-w-32 min-h-16 p-4\">\n          <CardHeader className=\"!p-0\">\n            <div className=\"pt-2 flex !flex-row\">\n              <LazyIcon name=\"file-spreadsheet\" className=\"mr-2\" />\n              <Label className=\"!font-medium leading-none tracking-tight pr-8\">\n                {FlowNodeTypeEnum.CSVData} {csv?.rows?.length ? `(${csv?.rows?.length || 0})` : ''}\n              </Label>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pb-0\">\n            <DataViewer data={csv.rows} headers={csv.headers} />\n          </CardContent>\n        </Card>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          source?.type === FlowNodeTypeEnum.Schema &&\n          target?.type === FlowNodeTypeEnum.ToolDefinition\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { ToolNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ToolNode = memo(({ id, data, isConnectable }: ToolNodeProps) => {\n  useConnectionToHandler(id)\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <Alert className=\"flex justify-center\">\n          <LazyIcon size={24} name=\"wrench\" />\n          <div className=\"ml-2\">\n            <AlertTitle>{`${data.entity?.name || ''}`}</AlertTitle>\n            <AlertDescription>{`${data.entity?.description || ''}`}</AlertDescription>\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LazyIcon from './LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Popover, PopoverContent, PopoverTrigger } from 'src/lib/shadcn/ui/popover'\nimport { cn } from 'src/lib/utils'\nimport { Alert } from 'src/lib/shadcn/ui/alert'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { LLMProviderEnum } from 'src/services/database/types'\nimport { GOOGLE_GENERATIVE_AI_API_KEY_LINK, OPEN_AI_API_KEY_LINK } from 'src/constants/llm'\nimport { useConfirmPassphrase } from 'src/hooks/mutations/use-confirm-passphrase'\nimport secureSession from 'src/utils/secure-session'\nimport { decryptSymmetric } from 'src/utils/aes'\n\nexport const EmbeddingSetting = memo(\n  (props: {\n    name?: string\n    className?: string\n    encrypted?: Record<string, unknown>\n    options?: Record<string, unknown>\n    supportedProviders?: string[]\n    onChangeOptions?: (\n      options: Record<string, unknown>,\n      encrypted?: Record<string, unknown>,\n    ) => Promise<void>\n  }) => {\n    const [show, setShow] = useState(false)\n    const [options, setOptions] = useState<Record<string, unknown>>({})\n    const [encrypted, setEncrypted] = useState<Record<string, unknown>>({})\n    const { confirmPassphrase } = useConfirmPassphrase()\n    const { t } = useTranslation('atoms')\n\n    const handleOpenChange = async () => {\n      if (!show) {\n        if (Object.keys(props.encrypted || {})?.length) {\n          await confirmPassphrase()\n          const decrypted: Record<string, unknown> = {}\n          const passphrase = await secureSession.get('passphrase')\n          if (!passphrase) {\n            throw new Error('Passphrase is not found')\n          }\n          await Promise.all(\n            Object.keys(props.encrypted || {}).map(async (key) => {\n              if (props.encrypted?.[key]) {\n                decrypted[key] = await decryptSymmetric(\n                  props.encrypted?.[key] as string,\n                  passphrase!,\n                )\n              }\n            }),\n          )\n          setEncrypted(decrypted || {})\n        }\n        setOptions({ ...props.options })\n      } else {\n        setOptions({})\n        setEncrypted({})\n      }\n      setShow(!show)\n    }\n\n    const hanleSubmit = () => {\n      props.onChangeOptions?.(options || {}, encrypted || {})\n      setShow(false)\n    }\n\n    return (\n      <div className={cn('min-w-20 flex justify-end', props.className)}>\n        <Popover open={show} onOpenChange={setShow}>\n          <PopoverTrigger>\n            <div className=\"flex justify-end gap-2 !cursor-pointer\">\n              <Button\n                onClick={handleOpenChange}\n                variant=\"link\"\n                className=\"flex items-center px-0 !cursor-pointer\"\n              >\n                <LazyIcon name=\"settings\" />\n                <Label>{t('embedding_setting.title')}</Label>\n              </Button>\n            </div>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-full p-0\">\n            {show ? (\n              <Card className=\"!border-none max-w-96 min-w-56\">\n                <CardHeader>\n                  <CardTitle>{t('embedding_setting.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Label>{t('embedding_setting.provider')}:</Label>\n                  <Select\n                    value={options?.provider ? `${options?.provider}` : 'local_transformers'}\n                    onValueChange={(value) => setOptions({ provider: value })}\n                  >\n                    <SelectTrigger className=\"\">\n                      <SelectValue placeholder={t('embedding_setting.provider_placeholder')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem key=\"local_transformers\" value=\"local_transformers\">\n                        {t('embedding_setting.providers.local_transformers')}\n                      </SelectItem>\n                      {props.supportedProviders?.map((provider) => (\n                        <SelectItem key={provider} value={provider}>\n                          {t(`embedding_setting.providers.${provider.toLowerCase()}`)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {!props.supportedProviders?.length ? (\n                    <Label className=\"text-red-500 !pt-2\">\n                      {t('embedding_setting.alerts.no_provider')}\n                    </Label>\n                  ) : undefined}\n                  <>\n                    {options.provider && options.provider !== 'local_transformers' ? (\n                      <>\n                        <Alert variant=\"destructive\" className=\"mt-4\">\n                          {t('embedding_setting.alerts.session_passkey')}\n                        </Alert>\n                        <div className=\"mt-4\">\n                          <Label>{t('embedding_setting.encrypted_fields.api_key')}</Label>\n                          <Button variant=\"link\" className=\"px-1\">\n                            <a\n                              href={\n                                options.provider === LLMProviderEnum.OpenAI\n                                  ? OPEN_AI_API_KEY_LINK\n                                  : GOOGLE_GENERATIVE_AI_API_KEY_LINK\n                              }\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                            >\n                              (\n                              {options.provider === LLMProviderEnum.OpenAI\n                                ? OPEN_AI_API_KEY_LINK\n                                : GOOGLE_GENERATIVE_AI_API_KEY_LINK}\n                              )\n                            </a>\n                          </Button>\n                          <Input\n                            type=\"password\"\n                            value={encrypted?.key ? `${encrypted?.key}` : ''}\n                            onChange={(e) =>\n                              setEncrypted((pre) => ({\n                                ...pre,\n                                key: e.target.value,\n                              }))\n                            }\n                          />\n                        </div>\n                      </>\n                    ) : undefined}\n                  </>\n                </CardContent>\n                <CardFooter className=\"flex justify-end\">\n                  <Button variant=\"secondary\" onClick={hanleSubmit}>\n                    {t('embedding_setting.save')}\n                  </Button>\n                </CardFooter>\n              </Card>\n            ) : undefined}\n          </PopoverContent>\n        </Popover>\n      </div>\n    )\n  },\n)\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node }) => {\n      return {\n        deleteEdgeId: edgeId,\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { useCallback, useEffect } from 'react'\nimport { NodeChange, useInternalNode, useNodes, Node } from '@xyflow/react'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { SYSTEM_NODE_IDS } from 'src/constants/nodes'\nimport secureSession from 'src/utils/secure-session'\nimport { encryptSymmetric } from 'src/utils/aes'\nimport { useConfirmOrCreatePassphrase } from 'src/hooks/mutations/use-confirm-or-create-passphrase'\n\nexport const useActions = (id: string) => {\n  const currentSessionId = useSessionState((state) => state.currentSession?.id)\n  const node = useInternalNode(id)\n  const nodes = useNodes()\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { confirmOrCreatePassphrase } = useConfirmOrCreatePassphrase()\n\n  const changeLLMOptions = useCallback(\n    async (input: Record<string, unknown>, inputEncrypted?: Record<string, unknown>) => {\n      if (node && currentSessionId) {\n        let flowNode =\n          id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL\n            ? await getRepository('FlowNode').findOne({\n                where: { id },\n              })\n            : undefined\n\n        const encrypted: Record<string, unknown> = {}\n        if (Object.keys(inputEncrypted || {})?.length) {\n          await confirmOrCreatePassphrase()\n          const passphrase = await secureSession.get('passphrase')\n          if (!passphrase) {\n            throw new Error('Passphrase is not found')\n          }\n          await Promise.all(\n            Object.keys(inputEncrypted || {}).map(async (key) => {\n              if (inputEncrypted?.[key]) {\n                encrypted[key] = await encryptSymmetric(inputEncrypted[key] as string, passphrase!)\n              }\n            }),\n          )\n        }\n        let flowNodePlaceholder: FlowNodePlaceholder | undefined\n        const changes: NodeChange<Node>[] = []\n        if (!flowNode) {\n          changes.push({ id, type: 'remove' })\n          flowNodePlaceholder = await getRepository('FlowNodePlaceholder').save({\n            placeholder_type: FlowNodePlaceholderTypeEnum.DEFAULT_EMBEDDING_MODEL,\n            encrypted,\n            data: input,\n            session_id: currentSessionId,\n          })\n          flowNode = await getRepository('FlowNode').save({\n            node_type: FlowNodeTypeEnum.DefaultEmbeddingModel,\n            session_id: currentSessionId,\n            source_type: 'FlowNodePlaceholder',\n            source_id: flowNodePlaceholder.id,\n            x: node.position.x,\n            y: node.position.y,\n          })\n          changes.push({ type: 'add', item: node })\n        } else {\n          await getRepository('FlowNodePlaceholder').update(flowNode.source_id, {\n            encrypted,\n            data: input,\n          })\n          flowNodePlaceholder = await getRepository('FlowNodePlaceholder').findOne({\n            where: { id: flowNode.source_id },\n          })\n          changes.push({ id: flowNode.id, type: 'replace', item: node })\n        }\n        node.data.entity = flowNodePlaceholder\n        node.data.flowNode = flowNode\n        updateNodes(changes)\n      }\n    },\n    [confirmOrCreatePassphrase, currentSessionId, id, node, updateNodes],\n  )\n\n  useEffect(() => {\n    if (id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL) return\n\n    const embeddingNode = nodes.find(\n      (n) =>\n        n.type === FlowNodeTypeEnum.DefaultEmbeddingModel &&\n        n.id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL,\n    )\n    if (embeddingNode) {\n      updateNodes([{ id, type: 'remove' as const }])\n    }\n  }, [id, nodes, updateNodes])\n\n  return {\n    changeLLMOptions,\n  }\n}\n","import { memo } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Position } from '@xyflow/react'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { EmbeddingSetting } from 'src/components/atoms/EmbeddingSetting'\nimport { LLMProviderEnum } from 'src/services/database/types'\nimport { DEFAULT_EMBEDDING_MODEL } from 'src/constants/embedding'\n\nimport { EmbeddingNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\n\nexport const EmbeddingNode = memo((props: EmbeddingNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { changeLLMOptions } = useActions(id)\n\n  useConnectionToHandler(id)\n\n  let model = 'brain'\n  let modelName = DEFAULT_EMBEDDING_MODEL\n  switch (`${data?.entity?.data?.provider}`) {\n    case LLMProviderEnum.OpenAI:\n      model = 'gpt'\n      modelName = 'text-embedding-3-small'\n      break\n    case LLMProviderEnum.GoogleGenerativeAI:\n      model = 'gemma'\n      modelName = 'text-embedding-004'\n      break\n  }\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <Alert className=\"flex justify-center max-w-auto\" variant=\"default\">\n          <LLMIcon name={model} className=\"w-7 h-7\" />\n          <div className=\"ml-2 pr-4 flex justify-center gap-1 flex-col\">\n            <div className=\"min-h-8 flex items-center\">\n              <AlertTitle>{`${modelName || ''}`}</AlertTitle>\n            </div>\n            <EmbeddingSetting\n              supportedProviders={[LLMProviderEnum.OpenAI, LLMProviderEnum.GoogleGenerativeAI]}\n              onChangeOptions={changeLLMOptions}\n              encrypted={data.entity?.encrypted}\n              options={data.entity?.data}\n            />\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { Node } from '@xyflow/react'\nimport type { Document } from '@langchain/core/documents'\nimport { useTranslation } from 'react-i18next'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from 'src/lib/shadcn/ui/dialog'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useCreatePrompt } from 'src/hooks/flows/mutations/use-create-prompt'\nimport { Prompt } from 'src/services/database/types'\nimport PromptForm from 'src/components/molecules/CreatePromptCard/PromptForm'\nimport { useToast } from 'src/lib/hooks/use-toast'\n\nconst DEFAULT_PROMPT = `Use the following pieces of context to answer the question at the end.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\nUse three sentences maximum and keep the answer as concise as possible.\n\n{context}\n`\n\ntype CreateVectorDatabasePromptProps = {\n  className: string\n  source: Node\n  documents: Document[]\n}\n\nconst CreateVectorDatabasePromptDialog = create<CreateVectorDatabasePromptProps>((props) => {\n  const { source, documents } = props\n  const currentModal = useModal()\n  const { toast } = useToast()\n  const { t } = useTranslation('dialogs')\n  const { loading, createPrompt } = useCreatePrompt()\n\n  const handleSubmit = async (data: Partial<Prompt>) => {\n    try {\n      if (!data.content || !data.content.includes(`{context}`)) {\n        toast({\n          title: t('create_vector_database_prompt.errors.fill_context'),\n          variant: 'destructive',\n        })\n        return\n      }\n      // NOTE: No need to use Prompt template because it will automatically added role prefix\n      const content = data.content.replace(\n        '{context}',\n        documents.map((doc) => `<document>${doc.pageContent}</document>`).join('\\n'),\n      )\n      await createPrompt(source, {\n        ...data,\n        content,\n      })\n      currentModal.hide()\n      return true\n    } catch {\n      toast({\n        title: t('create_vector_database_prompt.errors.create_failed'),\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <div className=\"flex\">\n            <LazyIcon name=\"file\" className=\"mr-2 h-4 w-4\" />\n            <DialogTitle>{t('create_vector_database_prompt.title')}</DialogTitle>\n          </div>\n        </DialogHeader>\n        <div className=\"flex gap-4 py-4 flex-col\">\n          <PromptForm\n            onSubmit={handleSubmit}\n            loading={loading}\n            hidePromptType\n            defaultPromptRole=\"system\"\n            defaultPromptContent={DEFAULT_PROMPT}\n          />\n          <div className=\"w-full border-0 text-gray-700 flex text-sm items-center\">\n            <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n            {t('create_vector_database_prompt.fill_content_note')}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default CreateVectorDatabasePromptDialog\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  PromptTypeEnum,\n  VectorDatabase,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateVectorDatabaseRetriever = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createVectorDatabaseRetriever = useCallback(\n    async ({\n      prompt,\n      source,\n      metadata,\n    }: {\n      source: Node\n      prompt?: Partial<Prompt>\n      metadata?: Record<string, unknown>\n    }) => {\n      try {\n        const vectorDatabase = source?.data?.entity as VectorDatabase\n        if (!vectorDatabase || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const systempPrompt = await getRepository('Prompt').save({\n          ...prompt,\n          status: prompt?.status || MessageStatusEnum.Started,\n          role: prompt?.role || MessageRoleEnum.System,\n          type: prompt?.type || PromptTypeEnum.Chat,\n          content: prompt?.content || '{context}',\n          session_id: sessionId,\n        })\n        if (!systempPrompt) {\n          throw new Error('Failed to save prompt')\n        }\n        const systemPromptNode = await createOrUpdateFlowNode({\n          source_id: systempPrompt.id,\n          source_type: 'Prompt',\n          node_type: FlowNodeTypeEnum.Prompt,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!systemPromptNode) {\n          throw new Error('Failed to save prompt node')\n        }\n        const retriever = await getRepository('FlowNodePlaceholder').save({\n          placeholder: `Retriever for ${vectorDatabase.name}`,\n          placeholder_type: FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER,\n          session_id: sessionId,\n          metadata,\n        })\n        if (!retriever) {\n          throw new Error('Failed to save node placeholder')\n        }\n        const retrieverNode = await createOrUpdateFlowNode({\n          source_id: retriever.id,\n          source_type: 'FlowNodePlaceholder',\n          node_type: FlowNodeTypeEnum.PlaceHolder,\n          x: initialX,\n          y: initialY + 40,\n        })\n        if (!retrieverNode) {\n          throw new Error('Failed to save node placeholder node')\n        }\n        await createOrUpdateFlowEdge({\n          source: systemPromptNode.id,\n          target: retrieverNode.id,\n        })\n        await createOrUpdateFlowEdge({\n          source: source.id,\n          target: retrieverNode.id,\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createVectorDatabaseRetriever,\n  }\n}\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { Node } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from 'src/lib/shadcn/ui/dialog'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Prompt } from 'src/services/database/types'\nimport PromptForm from 'src/components/molecules/CreatePromptCard/PromptForm'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { useCreateVectorDatabaseRetriever } from 'src/hooks/flows/mutations/use-create-vector-database-retriever'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useState } from 'react'\n\nconst DEFAULT_PROMPT = `Use the following pieces of context to answer the question at the end.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}\n`\n\ntype CreateVectorDatabaseRetrieverDialogProps = {\n  className: string\n  source: Node\n}\n\nconst CreateVectorDatabaseRetrieverDialog = create<CreateVectorDatabaseRetrieverDialogProps>(\n  (props) => {\n    const { source } = props\n    const currentModal = useModal()\n    const { toast } = useToast()\n    const { t } = useTranslation('dialogs')\n    const [k, setK] = useState<number | undefined>(1)\n    const [minimalScore, setMinimalScore] = useState<number | undefined>(undefined)\n    const { loading, createVectorDatabaseRetriever } = useCreateVectorDatabaseRetriever()\n\n    const handleSubmit = async (data: Partial<Prompt>) => {\n      try {\n        const content = data.content\n        if (!content || !content.includes(`{context}`)) {\n          toast({\n            title: t('create_vector_database_retriever.errors.fill_context'),\n            variant: 'destructive',\n          })\n          return\n        }\n        await createVectorDatabaseRetriever({\n          source,\n          prompt: {\n            content: content,\n          },\n          metadata: {\n            k,\n            minimalScore,\n          },\n        })\n        setK(1)\n        setMinimalScore(undefined)\n        currentModal.hide()\n        return true\n      } catch {\n        toast({\n          title: t('create_vector_database_retriever.errors.create_failed'),\n          variant: 'destructive',\n        })\n      }\n    }\n\n    const handleOnChangeK = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setK(e.target.value ? Number(e.target.value) : undefined)\n    }\n\n    const handleOnChangeMinimalScore = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setMinimalScore(e.target.value ? Number(e.target.value) : undefined)\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <div className=\"flex\">\n              <LazyIcon name=\"file\" className=\"mr-2 h-4 w-4\" />\n              <DialogTitle>{t('create_vector_database_retriever.title')}</DialogTitle>\n            </div>\n          </DialogHeader>\n          <div className=\"flex gap-4 py-4 flex-col\">\n            <PromptForm\n              onSubmit={handleSubmit}\n              loading={loading}\n              hidePromptType\n              defaultPromptRole=\"system\"\n              defaultPromptContent={DEFAULT_PROMPT}\n            />\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('create_vector_database_retriever.retriever_settings')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Label>{t('create_vector_database_retriever.retriever_k')}</Label>\n                <Input\n                  value={k || ''}\n                  type=\"number\"\n                  onChange={handleOnChangeK}\n                  placeholder={t('create_vector_database_retriever.retriever_k_placeholder')}\n                />\n                <Label>{t('create_vector_database_retriever.retriever_minimum_score')}</Label>\n                <Input\n                  value={minimalScore || ''}\n                  type=\"number\"\n                  onChange={handleOnChangeMinimalScore}\n                  placeholder={t(\n                    'create_vector_database_retriever.retriever_minimum_score_placeholder',\n                  )}\n                />\n              </CardContent>\n            </Card>\n            <div className=\"w-full border-0 text-gray-700 flex text-sm items-center\">\n              <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n              {t('create_vector_database_retriever.fill_content_note')}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateVectorDatabaseRetrieverDialog\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\nimport { useFlowState } from 'src/states/flow'\nimport { CSVData, FlowNodeTypeEnum, VectorDatabase } from 'src/services/database/types'\nimport { decodeCSVData } from 'src/utils/string-data'\nimport { Document } from '@langchain/core/documents'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n  const { index: indexFunction } = useEmbedding()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, target, source }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        const targetEntity = target?.data?.entity as VectorDatabase\n        if (\n          source?.type === FlowNodeTypeEnum.CSVData &&\n          target?.type === FlowNodeTypeEnum.VectorDatabase\n        ) {\n          const csvData = source?.data?.entity as CSVData\n          if (!csvData || !targetEntity) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          const { rows } = decodeCSVData(csvData.headers, csvData.csv)\n          const documents = rows.map(\n            (row) =>\n              new Document({\n                pageContent: `${row.text}`,\n              }),\n          )\n          await indexFunction(\n            getFlowEmbeddingEntity(),\n            {\n              database: {\n                databaseId: targetEntity.id,\n                dataSourceId: csvData.id,\n                dataSourceType: 'CSVData',\n              },\n            },\n            documents,\n          )\n          await createOrUpdateFlowEdge({\n            source: source.id,\n            target: target.id,\n          })\n          return\n        }\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge, getFlowEmbeddingEntity, indexFunction],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { Document } from '@langchain/core/documents'\nimport chunk from 'lodash/chunk'\nimport { useReactFlow } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { getRepository } from 'src/services/database'\nimport type { VectorDatabase } from 'src/services/database/types'\nimport {\n  FlowNodeTypeEnum,\n  CSVData,\n  JSONData,\n  JSONLData,\n  VectorDatabaseStorageEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getStorageDataSource } from 'src/utils/vector-storage'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\nexport const useActions = (id: string) => {\n  const [loading, setLoading] = useState(false)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n\n  const { getNode, getHandleConnections } = useReactFlow()\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n  const { index: indexFunction, similaritySearchWithScore: similaritySearchWithScoreFunction } =\n    useEmbedding()\n  const similaritySearchWithScore = useCallback(\n    async (input: string, options?: { k?: number }) => {\n      try {\n        const vectorDatabaseNode = getNode(id)\n        if (!vectorDatabaseNode) {\n          return\n        }\n        const entity = vectorDatabaseNode.data?.entity as VectorDatabase\n        if (!entity) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n        const embbedingEntity = getFlowEmbeddingEntity()\n        if (entity.storage === VectorDatabaseStorageEnum.DataNode) {\n          const connections = getHandleConnections({\n            nodeId: id,\n            type: 'target',\n          })\n          const dataSourceNode = connections\n            .map((connection) => getNode(connection.source))\n            .find(\n              (node) =>\n                node?.type &&\n                [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                  node?.type as FlowNodeTypeEnum,\n                ),\n            )\n          const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n          if (!dataSource) {\n            toast({\n              variant: 'destructive',\n              title: t('vector_database_node.errors.data_node_not_found'),\n            })\n            return\n          }\n          setLoading(true)\n          const result = await similaritySearchWithScoreFunction(\n            embbedingEntity,\n            {\n              database: {\n                databaseId: entity.id,\n                dataSourceId: dataSource.id,\n                dataSourceType: getStorageDataSource(dataSource),\n              },\n            },\n            input,\n            options?.k,\n          )\n          return result\n        } else {\n          setLoading(true)\n          const result = await similaritySearchWithScoreFunction(\n            embbedingEntity,\n            {\n              database: {\n                databaseId: entity.id,\n              },\n            },\n            input,\n            options?.k,\n          )\n          return result\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [\n      getNode,\n      id,\n      getFlowEmbeddingEntity,\n      toast,\n      t,\n      getHandleConnections,\n      similaritySearchWithScoreFunction,\n    ],\n  )\n\n  const indexData = useCallback(\n    async (\n      data: { id?: string; content?: string; documents?: Document[] },\n      options?: {\n        onProgressReport?: (info: { total: number; handled: number; handling: number }) => void\n      },\n    ) => {\n      try {\n        const vectorDatabaseNode = getNode(id)\n        if (!vectorDatabaseNode) {\n          return\n        }\n        setLoading(true)\n        const documents = data.content\n          ? [\n              new Document({\n                pageContent: data.content,\n                id: data.id,\n                metadata: {\n                  id: data.id,\n                },\n              }),\n            ]\n          : data.documents\n\n        if (!documents?.length) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.content_not_found'),\n          })\n          return\n        }\n\n        const entity = vectorDatabaseNode.data?.entity as VectorDatabase\n        if (!entity || !vectorDatabaseNode) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n\n        const embbedingEntity = getFlowEmbeddingEntity()\n\n        if (entity.storage === VectorDatabaseStorageEnum.DataNode) {\n          const connections = getHandleConnections({\n            nodeId: id,\n            type: 'target',\n          })\n          const dataSourceNode = connections\n            .map((connection) => getNode(connection.source))\n            .find(\n              (node) =>\n                node?.type &&\n                [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                  node?.type as FlowNodeTypeEnum,\n                ),\n            )\n\n          const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n          if (!dataSource) {\n            toast({\n              variant: 'destructive',\n              title: t('vector_database_node.errors.data_node_not_found'),\n            })\n            return\n          }\n          const dataSourceType = getStorageDataSource(dataSource)\n\n          const chunkedDocuments = chunk(documents, 10)\n          let handledCount = 0\n\n          for (const partDocuments of chunkedDocuments) {\n            options?.onProgressReport?.({\n              handling: partDocuments.length,\n              handled: handledCount,\n              total: documents.length,\n            })\n            await indexFunction(\n              embbedingEntity,\n              {\n                database: {\n                  databaseId: entity.id,\n                  dataSourceId: dataSource.id,\n                  dataSourceType,\n                },\n              },\n              partDocuments,\n            )\n            if (dataSourceType && dataSourceNode) {\n              const updatedDataNode = await getRepository(dataSourceType).findOne({\n                where: { id: dataSource.id },\n              })\n              updateNodes([\n                {\n                  type: 'replace',\n                  id: dataSourceNode.id,\n                  item: {\n                    ...dataSourceNode,\n                    data: {\n                      ...dataSourceNode.data,\n                      entity: updatedDataNode,\n                    },\n                  },\n                },\n              ])\n            }\n            handledCount += partDocuments.length\n          }\n        } else {\n          // DEFAULT OPTION IS INDEXING AND STORED DIRECTLY TO VECTOR DATABASE ENTITY\n          const chunkedDocuments = chunk(documents, 10)\n          let handledCount = 0\n\n          for (const partDocuments of chunkedDocuments) {\n            options?.onProgressReport?.({\n              handling: partDocuments.length,\n              handled: handledCount,\n              total: documents.length,\n            })\n            await indexFunction(\n              embbedingEntity,\n              {\n                database: {\n                  databaseId: entity.id,\n                },\n              },\n              partDocuments,\n            )\n            const updatedDataNode = await getRepository('VectorDatabase').findOne({\n              where: { id: `${entity.id}` },\n            })\n            updateNodes([\n              {\n                type: 'replace',\n                id: vectorDatabaseNode.id,\n                item: {\n                  ...vectorDatabaseNode,\n                  data: {\n                    ...vectorDatabaseNode.data,\n                    entity: updatedDataNode,\n                  },\n                },\n              },\n            ])\n            handledCount += partDocuments.length\n          }\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [\n      getNode,\n      id,\n      getFlowEmbeddingEntity,\n      toast,\n      t,\n      getHandleConnections,\n      indexFunction,\n      updateNodes,\n    ],\n  )\n\n  return {\n    loading,\n    indexData,\n    similaritySearchWithScore,\n  }\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport type { Document } from '@langchain/core/documents'\nimport { Position, useInternalNode } from '@xyflow/react'\nimport { WebPDFLoader } from '@langchain/community/document_loaders/web/pdf'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { useTranslation } from 'react-i18next'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from 'src/lib/shadcn/ui/tabs'\nimport { useModal } from '@ebay/nice-modal-react'\nimport CreatePromptDialog from 'src/components/dialogs/CreateVectorDatabasePromptDialog'\nimport CreateRetrieverDialog from 'src/components/dialogs/CreateVectorDatabaseRetrieverDialog'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { cn } from 'src/lib/utils'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { decodeLine } from 'src/utils/string-data'\n\nimport { VectorDatabaseNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\nimport { VectorSearch } from './components/VectorSearch'\nimport IndexNewText from './components/IndexNewText'\nimport IndexNewFile from './components/IndexNewFile'\n\nexport const VectorDatabaseNode = memo((props: VectorDatabaseNodeProps) => {\n  const { t } = useTranslation('flows')\n  const [progress, setProgress] = useState(0)\n  const [mode, setMode] = useState('search')\n  const node = useInternalNode(props.id)\n  const { id, data, isConnectable } = props\n  const { loading, similaritySearchWithScore, indexData } = useActions(id)\n\n  const createPromptDialog = useModal(CreatePromptDialog)\n  const createRetrieverDialog = useModal(CreateRetrieverDialog)\n\n  useConnectionToHandler(id)\n\n  const handleCreateData = useCallback(\n    async (...args: Parameters<typeof indexData>) => {\n      if (node) {\n        await indexData(...args)\n      }\n    },\n    [indexData, node],\n  )\n\n  const handleSimilaritySearch = useCallback(\n    async (value: string, k?: number) => {\n      const input = value.trim()\n      const documents = await similaritySearchWithScore(input, { k })\n      if (!documents?.length) {\n        return\n      }\n      return documents\n    },\n    [similaritySearchWithScore],\n  )\n\n  const handleCreatePrompt = useCallback(\n    (content: [Document, number][]) => {\n      createPromptDialog.show({\n        source: node,\n        documents: content.map(([doc]) => doc),\n      })\n    },\n    [createPromptDialog, node],\n  )\n\n  const handleCreateRetriever = useCallback(async () => {\n    createRetrieverDialog.show({\n      source: node,\n    })\n  }, [createRetrieverDialog, node])\n\n  const handleIndexPDF = useCallback(\n    async (file: File) => {\n      if (file.type.includes('text') || file.type.includes('txt')) {\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n          const content = e.target?.result as string\n          await handleCreateData({ content })\n        }\n        reader.readAsText(file)\n      } else if (file.type.endsWith('pdf')) {\n        // File to blob\n        const blob = new Blob([file], { type: 'application/pdf' })\n        const customBuildLoader = new WebPDFLoader(blob, {\n          // you may need to add `.then(m => m.default)` to the end of the import\n          pdfjs: async () => {\n            const pdfjs = await import('pdfjs-dist/legacy/build/pdf.min.mjs')\n            await import('pdfjs-dist/legacy/build/pdf.worker.min.mjs')\n            pdfjs.GlobalWorkerOptions.workerSrc = new URL(\n              'pdfjs-dist/build/pdf.worker.min.js',\n              import.meta.url,\n            ).toString()\n            return pdfjs\n          },\n          parsedItemSeparator: ' ',\n        })\n        const documents = await customBuildLoader.load()\n        await handleCreateData(\n          { documents },\n          {\n            onProgressReport: (info) => {\n              setProgress((info.handled + info.handling) / info.total)\n            },\n          },\n        )\n      }\n    },\n    [handleCreateData],\n  )\n\n  const vectorDatabaseData = useMemo(() => {\n    if (!data?.entity?.raw) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const headers = ['content', 'embedding', 'metadata']\n    const lines = decodeLine(data?.entity?.raw)\n    return {\n      headers,\n      rows: lines.map((row) => {\n        try {\n          const data = JSON.parse(row)\n          return data\n        } catch {\n          return []\n        }\n      }),\n    }\n  }, [data?.entity?.raw])\n\n  const renderContent = useMemo(() => {\n    switch (mode) {\n      case 'search':\n        return (\n          <TabsContent value=\"search\">\n            <VectorSearch\n              loading={loading}\n              onSimilaritySearch={handleSimilaritySearch}\n              onCreatePrompt={handleCreatePrompt}\n              onCreateRetriever={handleCreateRetriever}\n            />\n          </TabsContent>\n        )\n      case 'new':\n        return (\n          <TabsContent className=\"min-w-80\" value=\"new\">\n            <IndexNewText loading={loading} onCreateData={handleCreateData} />\n          </TabsContent>\n        )\n      case 'file':\n        return (\n          <TabsContent value=\"file\">\n            <IndexNewFile\n              loading={loading}\n              progress={progress}\n              onFileSubmit={handleIndexPDF}\n              fileOptions={{ accept: '.pdf,.txt,.text', maxSize: 15 }}\n            />\n          </TabsContent>\n        )\n      case 'view': {\n        return (\n          <TabsContent value=\"view\">\n            <DataViewer\n              data={vectorDatabaseData.rows}\n              headers={vectorDatabaseData.headers}\n              limitLengthByColumns={{\n                embedding: 32,\n              }}\n            />\n          </TabsContent>\n        )\n      }\n    }\n  }, [\n    handleCreateData,\n    handleCreatePrompt,\n    handleCreateRetriever,\n    handleIndexPDF,\n    handleSimilaritySearch,\n    loading,\n    mode,\n    progress,\n    vectorDatabaseData,\n  ])\n\n  return (\n    <div className=\"min-w-72\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"max-w-full\">\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center\" variant=\"default\">\n          <LazyIcon size={24} name={'database-zap'} />\n          <div className=\"ml-2 max-w-full\">\n            <AlertTitle>{`${data.entity?.name || ''}`}</AlertTitle>\n            <Tabs\n              value={mode}\n              onValueChange={setMode}\n              defaultValue=\"search\"\n              className={cn('w-full mt-4')}\n            >\n              <TabsList\n                className={cn(\n                  'grid w-full grid-cols-3',\n                  data.entity?.storage === VectorDatabaseStorageEnum.DatabaseNode\n                    ? 'grid-cols-4'\n                    : 'grid-cols-3',\n                )}\n              >\n                <TabsTrigger value=\"search\">{t('vector_database_node.search')}</TabsTrigger>\n                <TabsTrigger value=\"new\">{t('vector_database_node.text')}</TabsTrigger>\n                <TabsTrigger value=\"file\">{t('vector_database_node.file')}</TabsTrigger>\n                {data.entity?.storage === VectorDatabaseStorageEnum.DatabaseNode ? (\n                  <TabsTrigger value=\"view\">{t('vector_database_node.view')}</TabsTrigger>\n                ) : undefined}\n              </TabsList>\n              {renderContent}\n            </Tabs>\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useMemo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardContent, CardHeader } from 'src/lib/shadcn/ui/card'\nimport { decodeLine, decodeSplitter } from 'src/utils/string-data'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { JSONLDataNodeProps } from './type'\n\nconst LIMIT_LENGTH_BY_COLUMNS = {\n  embedding: 32,\n}\nexport const JSONLDataNode = memo((props: JSONLDataNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  const jsonl = useMemo(() => {\n    if (!data?.entity?.jsonl) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const headers = decodeSplitter(data.entity.headers || '')\n    const lines = decodeLine(data.entity.jsonl)\n    return {\n      headers,\n      rows: lines.map((row) => {\n        try {\n          const data = JSON.parse(row)\n          return data\n        } catch {\n          return []\n        }\n      }),\n    }\n  }, [data?.entity?.jsonl, data.entity.headers])\n\n  return (\n    <div className=\"min-w-80\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Card className=\"min-w-32 min-h-16 p-4\">\n          <CardHeader className=\"!p-0\">\n            <div className=\"pt-2 flex !flex-row\">\n              <LazyIcon name=\"file-json\" className=\"mr-2\" />\n              <Label className=\"!font-medium leading-none tracking-tight pr-8\">\n                {FlowNodeTypeEnum.JSONLData}{' '}\n                {jsonl?.rows?.length ? `(${jsonl?.rows?.length || 0})` : ''}\n              </Label>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pb-0\">\n            <DataViewer\n              data={jsonl.rows}\n              headers={jsonl.headers}\n              limitLengthByColumns={LIMIT_LENGTH_BY_COLUMNS}\n            />\n          </CardContent>\n        </Card>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","'use client'\n\nimport React, { PropsWithChildren, useRef } from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { motion, MotionValue, useMotionValue, useSpring, useTransform } from 'framer-motion'\n\nimport { cn } from 'src/lib/utils'\n\nexport interface DockProps extends VariantProps<typeof dockVariants> {\n  className?: string\n  magnification?: number\n  distance?: number\n  direction?: 'top' | 'middle' | 'bottom'\n  children: React.ReactNode\n}\n\nconst DEFAULT_MAGNIFICATION = 60\nconst DEFAULT_DISTANCE = 140\n\nconst dockVariants = cva(\n  'supports-backdrop-blur:bg-white/10 supports-backdrop-blur:dark:bg-black/10 mx-auto flex h-[58px] w-max gap-2 rounded-lg border p-2 backdrop-blur-md',\n)\n\nconst Dock = React.forwardRef<HTMLDivElement, DockProps>(\n  (\n    {\n      className,\n      children,\n      magnification = DEFAULT_MAGNIFICATION,\n      distance = DEFAULT_DISTANCE,\n      direction = 'bottom',\n      ...props\n    },\n    ref,\n  ) => {\n    const mouseX = useMotionValue(Infinity)\n\n    const renderChildren = () => {\n      return React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === DockIcon) {\n          return React.cloneElement(child, {\n            ...child.props,\n            mouseX: mouseX,\n            magnification: magnification,\n            distance: distance,\n          })\n        }\n        return child\n      })\n    }\n\n    return (\n      <motion.div\n        ref={ref}\n        onMouseMove={(e) => mouseX.set(e.pageX)}\n        onMouseLeave={() => mouseX.set(Infinity)}\n        {...props}\n        className={cn(dockVariants({ className }), {\n          'items-start': direction === 'top',\n          'items-center': direction === 'middle',\n          'items-end': direction === 'bottom',\n        })}\n      >\n        {renderChildren()}\n      </motion.div>\n    )\n  },\n)\n\nDock.displayName = 'Dock'\n\nexport interface DockIconProps {\n  size?: number\n  magnification?: number\n  distance?: number\n  mouseX?: MotionValue<number>\n  className?: string\n  children?: React.ReactNode\n  props?: PropsWithChildren\n}\n\nconst DockIcon = ({\n  magnification = DEFAULT_MAGNIFICATION,\n  distance = DEFAULT_DISTANCE,\n  mouseX,\n  className,\n  children,\n  ...props\n}: DockIconProps) => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  const distanceCalc = useTransform(mouseX || new MotionValue(), (val: number) => {\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 }\n\n    return val - bounds.x - bounds.width / 2\n  })\n\n  const widthSync = useTransform(distanceCalc, [-distance, 0, distance], [40, magnification, 40])\n\n  const width = useSpring(widthSync, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  })\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{ width }}\n      className={cn(\n        'flex aspect-square cursor-pointer items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nDockIcon.displayName = 'DockIcon'\n\nexport { Dock, DockIcon, dockVariants }\n","import * as React from \"react\";\nconst SvgVisualStudioCode = (props) => /* @__PURE__ */ React.createElement(\"svg\", { viewBox: \"0 0 256 254\", xmlns: \"http://www.w3.org/2000/svg\", xmlnsXlink: \"http://www.w3.org/1999/xlink\", width: 256, height: 254, preserveAspectRatio: \"xMidYMid\", ...props }, /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"c\", x1: \"50%\", x2: \"50%\", y1: \"0%\", y2: \"100%\" }, /* @__PURE__ */ React.createElement(\"stop\", { offset: \"0%\", stopColor: \"#FFF\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: \"100%\", stopColor: \"#FFF\", stopOpacity: 0 })), /* @__PURE__ */ React.createElement(\"path\", { id: \"a\", d: \"M180.828 252.605a15.872 15.872 0 0 0 12.65-.486l52.501-25.262a15.94 15.94 0 0 0 9.025-14.364V41.197a15.939 15.939 0 0 0-9.025-14.363l-52.5-25.263a15.877 15.877 0 0 0-18.115 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233 100.507 91.695a15.853 15.853 0 0 0 5.464 3.571Zm10.464-183.649-76.262 57.889 76.262 57.888V68.956Z\" })), /* @__PURE__ */ React.createElement(\"mask\", { id: \"b\", fill: \"#fff\" }, /* @__PURE__ */ React.createElement(\"use\", { xlinkHref: \"#a\" })), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#0065A9\", d: \"M246.135 26.873 193.593 1.575a15.885 15.885 0 0 0-18.123 3.08L3.466 161.482c-4.626 4.219-4.62 11.502.012 15.714l14.05 12.772a10.625 10.625 0 0 0 13.569.604L238.229 33.436c6.949-5.271 16.93-.315 16.93 8.407v-.61a15.938 15.938 0 0 0-9.024-14.36Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#007ACC\", d: \"m246.135 226.816-52.542 25.298a15.887 15.887 0 0 1-18.123-3.08L3.466 92.207c-4.626-4.218-4.62-11.502.012-15.713l14.05-12.773a10.625 10.625 0 0 1 13.569-.603l207.132 157.135c6.949 5.271 16.93.315 16.93-8.408v.611a15.939 15.939 0 0 1-9.024 14.36Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#1F9CF0\", d: \"M193.428 252.134a15.892 15.892 0 0 1-18.125-3.083c5.881 5.88 15.938 1.715 15.938-6.603V11.273c0-8.318-10.057-12.483-15.938-6.602a15.892 15.892 0 0 1 18.125-3.084l52.533 25.263a15.937 15.937 0 0 1 9.03 14.363V212.51c0 6.125-3.51 11.709-9.03 14.363l-52.533 25.262Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"url(#c)\", fillOpacity: 0.25, d: \"M180.828 252.605a15.874 15.874 0 0 0 12.65-.486l52.5-25.263a15.938 15.938 0 0 0 9.026-14.363V41.197a15.939 15.939 0 0 0-9.025-14.363L193.477 1.57a15.877 15.877 0 0 0-18.114 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233 100.506 91.695a15.857 15.857 0 0 0 5.465 3.571Zm10.464-183.65-76.262 57.89 76.262 57.888V68.956Z\" }));\nexport default SvgVisualStudioCode;\n","export default \"__VITE_ASSET__CAw3ne4Z__\"","import { FlowNodeTypeEnum } from 'src/services/database/types'\n\nexport const DEFAULT_NODE_SIZE: Partial<{\n  [key in FlowNodeTypeEnum]: { width: number; height: number }\n}> = {\n  [FlowNodeTypeEnum.Shape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.CircleShape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.TriangleShape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.EditorApp]: { width: 1240, height: 400 },\n}\n","import { useCallback, useState } from 'react'\nimport { useInternalNode } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\n\nimport { DEFAULT_NODE_SIZE } from '../constants'\n\nexport const useActions = (id: string) => {\n  const node = useInternalNode(id)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createNode = useCallback(\n    async (nodeType: FlowNodeTypeEnum) => {\n      try {\n        setLoading(true)\n        if (node && currentSession?.id) {\n          const initialX = node.position?.x || 0\n          const initialY = (node.position?.y || 0) + (node.measured?.height || 0)\n\n          const nodeData = await getRepository('FlowNodeData').save({\n            data: {},\n            session_id: currentSession.id,\n          })\n\n          if (!nodeData) {\n            throw new Error('Failed to save node data')\n          }\n\n          const newNode = await createOrUpdateFlowNode({\n            node_type: nodeType,\n            data: {},\n            source_id: nodeData.id,\n            source_type: 'FlowNodeData',\n            x: initialX,\n            y: initialY + 20,\n            ...(DEFAULT_NODE_SIZE[nodeType] || {}),\n          })\n          if (!newNode) {\n            throw new Error('Failed to save node')\n          }\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowNode, currentSession?.id, node],\n  )\n\n  return {\n    loading,\n    createNode,\n  }\n}\n","import { memo } from 'react'\n\nimport { Separator } from 'src/lib/shadcn/ui/separator'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { Dock, DockIcon } from 'src/lib/shadcn/ui/dock'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { NodeProps } from '@xyflow/react'\nimport VisualStudioCodeSvg from 'src/assets/svgs/visual-studio-code.svg?react'\nimport plateEditorIcon from 'src/assets/images/plate-editor.png'\nimport { useToast } from 'src/lib/hooks/use-toast'\n\nimport { useActions } from './hooks/use-actions'\n\nconst DATA = {\n  applications: [\n    {\n      key: FlowNodeTypeEnum.EditorApp,\n      image: plateEditorIcon,\n      label: 'application_bar.editor',\n    },\n    {\n      key: FlowNodeTypeEnum.VSLiteApp,\n      icon: VisualStudioCodeSvg,\n      label: 'application_bar.vslite',\n    },\n  ],\n  shapes: [\n    { key: FlowNodeTypeEnum.Shape, icon: 'square' as const, label: 'application_bar.square' },\n    { key: FlowNodeTypeEnum.CircleShape, icon: 'circle' as const, label: 'application_bar.circle' },\n    {\n      key: FlowNodeTypeEnum.TriangleShape,\n      icon: 'triangle' as const,\n      label: 'application_bar.triangle',\n    },\n  ],\n  old: [\n    {\n      key: FlowNodeTypeEnum.CodeContainerApp,\n      icon: 'file-code-2' as const,\n      label: 'application_bar.code_editor',\n    },\n  ],\n}\n\nexport const ApplicationBarNode = memo((props: NodeProps) => {\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loading, createNode } = useActions(props.id)\n  const handleAddNode = async (nodeType: FlowNodeTypeEnum) => {\n    try {\n      if (loading) {\n        return\n      }\n      await createNode(nodeType)\n    } catch {\n      toast({\n        description: t('application_bar.errors.add_node_failed'),\n        variant: 'destructive',\n      })\n    }\n  }\n  return (\n    <TooltipProvider>\n      <Dock direction=\"middle\">\n        {DATA.applications.map((item) => {\n          const Icon = item.icon\n          return (\n            <DockIcon key={item.label}>\n              <Tooltip>\n                <TooltipTrigger>\n                  {Icon ? (\n                    <Icon width={20} height={20} onClick={() => handleAddNode(item.key)} />\n                  ) : undefined}\n                  {item.image ? (\n                    <img\n                      src={item.image}\n                      alt={t(item.label)}\n                      className=\"w-8 h-8 rounded-md\"\n                      onClick={() => handleAddNode(item.key)}\n                    />\n                  ) : undefined}\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{t(item.label)}</p>\n                </TooltipContent>\n              </Tooltip>\n            </DockIcon>\n          )\n        })}\n        <Separator orientation=\"vertical\" className=\"h-full\" />\n        {DATA.shapes.map((item) => (\n          <DockIcon key={item.label}>\n            <Tooltip>\n              <TooltipTrigger>\n                <LazyIcon onClick={() => handleAddNode(item.key)} name={item.icon} />\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{t(item.label)}</p>\n              </TooltipContent>\n            </Tooltip>\n          </DockIcon>\n        ))}\n        <Separator orientation=\"vertical\" className=\"h-full\" />\n        {DATA.old.map((item) => (\n          <DockIcon key={item.label}>\n            <Tooltip>\n              <TooltipTrigger>\n                <LazyIcon onClick={() => handleAddNode(item.key)} name={item.icon} />\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{t(item.label)}</p>\n              </TooltipContent>\n            </Tooltip>\n          </DockIcon>\n        ))}\n      </Dock>\n    </TooltipProvider>\n  )\n})\n","import { memo } from 'react'\nimport { NodeResizer, NodeResizerProps } from '@xyflow/react'\nimport { cn } from 'src/lib/utils'\n\nexport const DefaultNodeResizer = memo((props: NodeResizerProps) => {\n  const { lineClassName, handleClassName, ...rest } = props\n  return (\n    <NodeResizer\n      lineClassName={cn('!border-1.5', lineClassName)}\n      handleClassName={cn('!w-2 !h-2 !border-2 !rounded-full', handleClassName)}\n      {...rest}\n    />\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.CircleShape, FlowNodeTypeEnum.TriangleShape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.Shape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ShapeNode = memo((props: NodeProps) => {\n  const { id, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full bg-border border\">\n        <NodeHeader id={id} />\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.Shape, FlowNodeTypeEnum.TriangleShape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.CircleShape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const CircleNode = memo((props: NodeProps) => {\n  const { id, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full bg-border rounded-full border\">\n        <NodeHeader id={id} />\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.CircleShape, FlowNodeTypeEnum.Shape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.TriangleShape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const TriangleNode = memo((props: NodeProps) => {\n  const { id, selected, width, height, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div\n        className=\"w-0 h-0 border-l-transparent border-r-transparent border-b-border\"\n        style={{\n          borderLeftWidth: (width || 0) / 2,\n          borderRightWidth: (width || 0) / 2,\n          borderBottomWidth: height || 0,\n        }}\n      />\n      <NodeHeader id={id} className=\"absolute top-0 right-0\" />\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.LLM && target?.type === FlowNodeTypeEnum.EditorApp) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { useCallback, useRef } from 'react'\nimport { HumanMessage, type BaseMessage } from '@langchain/core/messages'\nimport { Connection, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { DefaultNode } from 'src/utils/flow-node'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\n\nexport const useActions = (id: string) => {\n  const node = useInternalNode(id)\n  const { t } = useTranslation('flows')\n  const refDebounce = useRef<number | null>(null)\n  const { toast } = useToast()\n  const { getNode, getHandleConnections } = useReactFlow()\n  const { stream } = useLLM()\n\n  const updateEditorContent = useCallback(\n    async (value: unknown[]) => {\n      if (!node) return\n      clearTimeout(refDebounce.current!)\n      refDebounce.current = setTimeout(async () => {\n        await getRepository('FlowNode').update(node.id, {\n          data: value,\n        })\n      }, 150) as unknown as number\n    },\n    [node],\n  )\n\n  const createMessage = useCallback(\n    async (input: string | BaseMessage[], onMessageUpdate: (chunk: string) => void) => {\n      if (node) {\n        const connections = getHandleConnections({\n          nodeId: id,\n          type: 'target',\n        })\n        const llmConnection = connections.find((connection) => {\n          const currentNode = getNode(connection.source)\n          return currentNode?.type === FlowNodeTypeEnum.LLM\n        })\n        const llmNode = llmConnection ? getNode(llmConnection?.source as string) : undefined\n        const llm = llmNode?.data?.entity as LLM\n        if (!llmNode || !llm) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n        } else if (llmNode.data.status !== LLMStatusEnum.Loaded) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_loaded_yet'),\n          })\n        }\n        try {\n          const streamResponse = await stream(\n            llm.provider,\n            typeof input === 'string' ? [new HumanMessage(input)] : input,\n            {\n              onMessageUpdate: (data) => {\n                onMessageUpdate?.(data.content)\n              },\n              llm,\n            },\n          )\n          return streamResponse.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [node, getHandleConnections, id, getNode, toast, t, stream],\n  )\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: DefaultNode\n        connections: Connection[]\n        connectedNodes?: DefaultNode[]\n      }[] = []\n      const connections = getHandleConnections({\n        nodeId: id,\n        type: 'target',\n      })\n      connections.forEach((connection) => {\n        const node = getNode(connection.source)\n        if (!node || node.type !== FlowNodeTypeEnum.LLM) {\n          return\n        }\n        linkedConnections.push({\n          node: node as DefaultNode,\n          connections: [connection],\n        })\n      })\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  return {\n    createMessage,\n    updateEditorContent,\n    getLinkedConnections,\n  }\n}\n","import { lazy, memo, Suspense, useCallback } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\nimport { EditorAppNodeProps } from './type'\n\nconst PlateAppEditor = lazy(() => import('src/components/organisms/PlateEditor'))\n\nexport const EditorAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, data, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  const { createMessage, updateEditorContent, getLinkedConnections } = useActions(id)\n\n  const handleChangeContent = useCallback(\n    (value: unknown[]) => {\n      updateEditorContent(value)\n    },\n    [updateEditorContent],\n  )\n\n  return (\n    <div className=\"w-full min-w-[1240px] h-full\">\n      <DefaultNodeResizer isVisible={!!selected} minWidth={1240} minHeight={400} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full rounded-lg border bg-background\">\n        <NodeHeader\n          className=\"!z-[100]\"\n          id={id}\n          enableToStandalone\n          getLinkedConnections={getLinkedConnections}\n        />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-ful rounded-lg flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <div className=\"h-full w-ful rounded-lg\" data-registry=\"plate\">\n            <PlateAppEditor\n              defaultValue={data?.flowNode?.data}\n              onValueChange={handleChangeContent}\n              copilotStream={createMessage}\n            />\n          </div>\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node; connection: Connection }) => {\n      try {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { PlaceholderNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useTranslation } from 'react-i18next'\n\nexport const PlaceholderNode = memo((props: PlaceholderNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { t } = useTranslation('flows')\n\n  useConnectionToHandler(id)\n\n  let placeholder = ''\n  switch (data.entity?.placeholder_type) {\n    case 'VECTOR_DATABASE_RETREIVER':\n      placeholder = t('placeholder_node.vector_database_retriever')\n      break\n  }\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <Alert className=\"flex justify-center max-w-80\" variant=\"default\">\n        <NodeHeader id={id} />\n        <LazyIcon name={'land-plot'} className=\"w-7 h-7\" />\n        <div className=\"ml-2 pr-4\">\n          <AlertTitle>{`${data.entity?.placeholder || ''}`}</AlertTitle>\n          <AlertDescription>\n            {placeholder ? <Badge>{placeholder}</Badge> : undefined}\n          </AlertDescription>\n        </div>\n      </Alert>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { lazy, memo, Suspense } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { EditorAppNodeProps } from './type'\n\nconst CodeContainerApp = lazy(() => import('./CodeContainerApp'))\n\nexport const CodeContainerAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, isConnectable } = props\n\n  return (\n    <div className=\"w-[1380px] h-[600px] rounded-lg border overflow-hidden shadow-sm\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"w-full h-full rounded-lg border bg-card overflow-hidden\">\n        <NodeHeader id={id} />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-full flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <CodeContainerApp {...props} />\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import type { FileSystemTree } from '@webcontainer/api'\n\nexport const SOURCE_BASES = [\n  'empty-source',\n  'vite-vue',\n  'shadcn-react-vite',\n  'todo-app-react-vite',\n  'porfolio-nextjs',\n] as const\n\nexport const getSourceBase = async (sourceBase: string): Promise<FileSystemTree> => {\n  switch (sourceBase) {\n    case 'empty-source':\n      return import('./empty-source').then((module) => module.BASE)\n    case 'vite-vue':\n      return import('./vite-vue').then((module) => module.BASE)\n    case 'shadcn-react-vite':\n      return import('./shadcn-react-vite').then((module) => module.BASE)\n    case 'todo-app-react-vite':\n      return import('./todo-app-react-vite').then((module) => module.BASE)\n    case 'porfolio-nextjs':\n      return import('./porfolio-nextjs').then((module) => module.BASE)\n    default:\n      throw new Error(`Unknown source base: ${sourceBase}`)\n  }\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { getSourceBase, SOURCE_BASES } from 'src/services/web-container/source-bases'\nimport { cn } from 'src/lib/utils'\n\nconst CreateSourcebaseCard = memo(\n  ({\n    className,\n    onUpdateSourceBase,\n  }: {\n    className?: string\n    onUpdateSourceBase: (data: Awaited<ReturnType<typeof getSourceBase>>) => void\n  }) => {\n    const { t } = useTranslation('components')\n    const [sourcebase, setSourcebase] = useState<string>()\n    return (\n      <Card className={cn('mw-full', className)}>\n        <CardHeader className=\"p-4\">\n          <CardTitle>{t('add_source_base.title')}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-center w-full h-full flex-col\">\n            <Select onValueChange={(value) => setSourcebase(value)}>\n              <SelectTrigger className=\"w-full mb-4\">\n                <SelectValue placeholder={t('add_source_base.source_base_select_placeholder')} />\n              </SelectTrigger>\n              <SelectContent>\n                {SOURCE_BASES.map((key) => {\n                  return (\n                    <SelectItem key={`${key}`} value={`${key}`}>\n                      {t(`add_source_base.sourcebases.${key.toLowerCase()}`)}\n                    </SelectItem>\n                  )\n                })}\n              </SelectContent>\n            </Select>\n            <Button\n              className=\"w-full\"\n              onClick={async () =>\n                sourcebase && onUpdateSourceBase(await getSourceBase(sourcebase))\n              }\n            >\n              {t('add_source_base.update_source')}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default CreateSourcebaseCard\n","import { useCallback } from 'react'\nimport { Connection, useReactFlow } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport type { FileSystemTree } from '@webcontainer/api'\nimport { parseFileSystemTreeToJSONL } from 'src/services/web-container/utils/file-tree'\nimport { DefaultNode } from 'src/utils/flow-node'\nimport { FlowNodeTypeEnum, LLMProviderEnum } from 'src/services/database/types'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { Message } from 'ai/react'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\n\ntype CreateMessageOption = {\n  onMessageUpdate?: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n  onResponseMessageCreate?: (message?: string) => void\n}\nexport const useActions = () => {\n  const { getNode, getHandleConnections } = useReactFlow()\n  const { stream } = useLLM()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: DefaultNode\n        connections: Connection[]\n        connectedNodes?: DefaultNode[]\n      }[] = []\n      const connections = getHandleConnections({\n        nodeId: id,\n        type: 'target',\n      })\n      connections.forEach((connection) => {\n        const node = getNode(connection.source)\n        if (!node || node.type !== FlowNodeTypeEnum.LLM) {\n          return\n        }\n        linkedConnections.push({\n          node: node as DefaultNode,\n          connections: [connection],\n        })\n      })\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  const sendMessage = useCallback(\n    async (\n      message: string,\n      messages: Message[],\n      { onMessageUpdate, onResponseMessageCreate }: CreateMessageOption = {},\n    ) => {\n      const formatedMessages = messages.map((message) => {\n        if (message.role === 'system') {\n          return new SystemMessage(message.content)\n        }\n        if (message.role === 'user') {\n          return new HumanMessage(message.content)\n        }\n        return new AIMessage(message.content)\n      })\n\n      onResponseMessageCreate?.()\n\n      const { content } = await stream(\n        LLMProviderEnum.WebLLM,\n        [...formatedMessages, new HumanMessage(message)],\n        {\n          onMessageUpdate: ({ content }) => {\n            onMessageUpdate?.({\n              nodeData: {\n                loading: true,\n                content: content,\n              },\n            })\n          },\n          llm: undefined,\n        },\n      )\n\n      onMessageUpdate?.({\n        nodeData: {\n          loading: false,\n          content,\n        },\n      })\n      return content\n    },\n    [stream],\n  )\n\n  return {\n    sendMessage,\n    getLinkedConnections,\n    updateCodeContainerData,\n  }\n}\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.LLM && target?.type === FlowNodeTypeEnum.VSLiteApp) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { lazy, memo, Suspense, useCallback, useState } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport {\n  FileSystemTreeChange,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport CreateSourcebaseCard from 'src/components/molecules/CreateSourcebaseCard'\nimport type { FileSystemTree } from '@webcontainer/api'\n\nimport { EditorAppNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { Message } from 'ai/react'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nexport const VSLiteAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, isConnectable, data } = props\n  const [fileSystemTree, setFileSystemTree] = useState(\n    data?.flowNode?.raw ? parseJSONLToFileSystemTree(data.flowNode.raw) : undefined,\n  )\n  const { updateCodeContainerData, getLinkedConnections, sendMessage } = useActions()\n  useConnectionToHandler(id)\n\n  const handleUpdateCodeContainerData = useCallback(\n    async (tree: FileSystemTree) => {\n      if (!data?.flowNode?.id) return\n\n      await updateCodeContainerData(data?.flowNode?.id, tree)\n      setFileSystemTree(tree)\n    },\n    [data?.flowNode?.id, updateCodeContainerData],\n  )\n\n  const handleSendMessage = useCallback(\n    async (message: string, messages: Message[]) => {\n      if (!data?.flowNode?.id) return\n\n      const result = await sendMessage(message, messages)\n      return result\n    },\n    [data?.flowNode?.id, sendMessage],\n  )\n\n  const handleUpdateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      setFileSystemTree((prev) => {\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(data?.flowNode?.id, result)\n        return result\n      })\n    },\n    [data?.flowNode?.id, updateCodeContainerData],\n  )\n\n  if (!fileSystemTree) {\n    return (\n      <div className=\"h-full flex justify-center items-center\">\n        <CreateSourcebaseCard className=\"w-64\" onUpdateSourceBase={handleUpdateCodeContainerData} />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-[1380px] h-[600px] rounded-lg border overflow-hidden shadow-sm\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"w-full h-full rounded-lg border bg-card overflow-hidden\">\n        <NodeHeader\n          id={id}\n          className=\"z-50\"\n          enableToStandalone\n          getLinkedConnections={getLinkedConnections}\n        />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-full flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <VSLiteApp\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={handleUpdateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import { FlowNodeTypeEnum } from 'src/services/database/types'\n\nimport { ToolbarNode } from './ToolboxNode'\nimport { LLMNode } from './LLMNode/LLMNode'\nimport { ThreadNode } from './ThreadNode'\nimport { MessageNode } from './MessageNode'\nimport { PromptNode } from './PromptNode'\nimport { SessionInfoNode } from './SessionInfoNode'\nimport { SchemaNode } from './SchemaNode'\nimport { CSVDataNode } from './CSVDataNode'\nimport { ToolNode } from './ToolNode'\nimport { EmbeddingNode } from './EmbeddingNode'\nimport { VectorDatabaseNode } from './VectorDatabaseNode'\nimport { JSONLDataNode } from './JSONLDataNode'\nimport { ApplicationBarNode } from './ApplicationBarNode'\nimport { ShapeNode } from './ShapeNode'\nimport { CircleNode } from './CircleNode'\nimport { TriangleNode } from './TriangleNode'\nimport { EditorAppNode } from './EditorAppNode'\nimport { PlaceholderNode } from './PlaceholderNode'\nimport { CodeContainerAppNode } from './CodeContainerAppNode'\nimport { VSLiteAppNode } from './VSLiteAppNode'\n\nexport const nodeTypes = {\n  [FlowNodeTypeEnum.LLM]: LLMNode,\n  [FlowNodeTypeEnum.Toolbox]: ToolbarNode,\n  [FlowNodeTypeEnum.Thread]: ThreadNode,\n  [FlowNodeTypeEnum.Message]: MessageNode,\n  [FlowNodeTypeEnum.Prompt]: PromptNode,\n  [FlowNodeTypeEnum.SessionInfo]: SessionInfoNode,\n  [FlowNodeTypeEnum.Schema]: SchemaNode,\n  [FlowNodeTypeEnum.CSVData]: CSVDataNode,\n  [FlowNodeTypeEnum.ToolDefinition]: ToolNode,\n  [FlowNodeTypeEnum.DefaultEmbeddingModel]: EmbeddingNode,\n  [FlowNodeTypeEnum.VectorDatabase]: VectorDatabaseNode,\n  [FlowNodeTypeEnum.JSONLData]: JSONLDataNode,\n  [FlowNodeTypeEnum.ApplicationBar]: ApplicationBarNode,\n  [FlowNodeTypeEnum.Shape]: ShapeNode,\n  [FlowNodeTypeEnum.CircleShape]: CircleNode,\n  [FlowNodeTypeEnum.TriangleShape]: TriangleNode,\n  [FlowNodeTypeEnum.EditorApp]: EditorAppNode,\n  [FlowNodeTypeEnum.PlaceHolder]: PlaceholderNode,\n  [FlowNodeTypeEnum.CodeContainerApp]: CodeContainerAppNode,\n  [FlowNodeTypeEnum.VSLiteApp]: VSLiteAppNode,\n}\n","'use client'\n\nimport * as React from 'react'\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from 'src/lib/utils'\n\nconst toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline: 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-10 px-3 min-w-10',\n        sm: 'h-9 px-2.5 min-w-9',\n        lg: 'h-11 px-5 min-w-11',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","import * as React from 'react'\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'\nimport { type VariantProps } from 'class-variance-authority'\n\nimport { cn } from 'src/lib/utils'\nimport { toggleVariants } from 'src/lib/shadcn/ui/toggle'\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: 'default',\n  variant: 'default',\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn('flex items-center justify-center gap-1', className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","import { useEffect, useState, type Dispatch, type SetStateAction, useCallback } from 'react'\n\nimport {\n  useNodes,\n  Panel,\n  useStore,\n  useStoreApi,\n  type OnNodesChange,\n  type NodeChange,\n  type XYPosition,\n  ViewportPortal,\n  useReactFlow,\n} from '@xyflow/react'\n\nimport { ToggleGroup, ToggleGroupItem } from 'src/lib/shadcn/ui/toggle-group'\n\nexport function ViewportLogger() {\n  const viewport = useStore(\n    (s) =>\n      `x: ${s.transform[0].toFixed(2)}, y: ${s.transform[1].toFixed(2)}, zoom: ${s.transform[2].toFixed(2)}`,\n  )\n\n  return <div>{viewport}</div>\n}\n\ntype ChangeLoggerProps = {\n  color?: string\n  limit?: number\n}\n\ntype ChangeInfoProps = {\n  change: NodeChange\n}\n\nfunction ChangeInfo({ change }: ChangeInfoProps) {\n  const id = 'id' in change ? change.id : '-'\n  const { type } = change\n\n  return (\n    <div className=\"mb-3\">\n      <div>node id: {id}</div>\n      <div>\n        {type === 'add' ? JSON.stringify(change.item, null, 2) : null}\n        {type === 'dimensions'\n          ? `dimensions: ${change.dimensions?.width} × ${change.dimensions?.height}`\n          : null}\n        {type === 'position'\n          ? `position: ${change.position?.x.toFixed(1)}, ${change.position?.y.toFixed(1)}`\n          : null}\n        {type === 'remove' ? 'remove' : null}\n        {type === 'select' ? (change.selected ? 'select' : 'unselect') : null}\n      </div>\n    </div>\n  )\n}\n\nexport function ChangeLogger({ limit = 20 }: ChangeLoggerProps) {\n  const [changes, setChanges] = useState<NodeChange[]>([])\n  const store = useStoreApi()\n\n  // Memoize the callback for handling node changes\n  const handleNodeChanges: OnNodesChange = useCallback(\n    (newChanges: NodeChange[]) => {\n      setChanges((prevChanges) => [...newChanges, ...prevChanges].slice(0, limit))\n    },\n    [limit],\n  )\n\n  useEffect(() => {\n    store.setState({ onNodesChange: handleNodeChanges })\n\n    return () => store.setState({ onNodesChange: undefined })\n  }, [handleNodeChanges, store])\n\n  const NoChanges = () => <div>No Changes Triggered</div>\n\n  return (\n    <>\n      {changes.length === 0 ? (\n        <NoChanges />\n      ) : (\n        changes.map((change, index) => <ChangeInfo key={index} change={change} />)\n      )}\n    </>\n  )\n}\n\nexport function NodeInspector() {\n  const { getInternalNode } = useReactFlow()\n  const nodes = useNodes()\n\n  return (\n    <ViewportPortal>\n      <div className=\"text-secondary-foreground\">\n        {nodes.map((node) => {\n          const internalNode = getInternalNode(node.id)\n          if (!internalNode) {\n            return null\n          }\n\n          const absPosition = internalNode?.internals.positionAbsolute\n\n          return (\n            <NodeInfo\n              key={node.id}\n              id={node.id}\n              selected={!!node.selected}\n              type={node.type || 'default'}\n              position={node.position}\n              absPosition={absPosition}\n              width={node.measured?.width ?? 0}\n              height={node.measured?.height ?? 0}\n              data={node.data}\n            />\n          )\n        })}\n      </div>\n    </ViewportPortal>\n  )\n}\n\ntype NodeInfoProps = {\n  id: string\n  type: string\n  selected: boolean\n  position: XYPosition\n  absPosition: XYPosition\n  width?: number\n  height?: number\n\n  data: unknown\n}\n\nfunction NodeInfo({\n  id,\n  type,\n  selected,\n  position,\n  absPosition,\n  width,\n  height,\n  data,\n}: NodeInfoProps) {\n  if (!width || !height) return null\n\n  const absoluteTransform = `translate(${absPosition.x}px, ${absPosition.y + height}px)`\n  const formattedPosition = `${position.x.toFixed(1)}, ${position.y.toFixed(1)}`\n  const formattedDimensions = `${width} × ${height}`\n  const selectionStatus = selected ? 'Selected' : 'Not Selected'\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        transform: absoluteTransform,\n        width: width * 2,\n      }}\n      className=\"text-xs\"\n    >\n      <div>id: {id}</div>\n      <div>type: {type}</div>\n      <div>selected: {selectionStatus}</div>\n      <div>position: {formattedPosition}</div>\n      <div>dimensions: {formattedDimensions}</div>\n      <div>data: {JSON.stringify(data, null, 2)}</div>\n    </div>\n  )\n}\n\ntype Tool = {\n  active: boolean\n  setActive: Dispatch<SetStateAction<boolean>>\n  label: string\n  value: string\n}\n\ntype DevToolsToggleProps = {\n  tools: Tool[]\n}\n\nfunction DevToolsToggle({ tools }: DevToolsToggleProps) {\n  return (\n    <Panel position=\"top-left\" className=\"bg-card p-1 border rounded shadow-sm\">\n      <ToggleGroup type=\"multiple\">\n        {tools.map(({ active, setActive, label, value }) => (\n          <ToggleGroupItem\n            key={value}\n            value={value}\n            onClick={() => setActive((prev) => !prev)}\n            aria-pressed={active}\n            className=\"bg-card text-card-foreground transition-colors duration-300 hover:bg-secondary hover:text-secondary-foreground\"\n          >\n            {label}\n          </ToggleGroupItem>\n        ))}\n      </ToggleGroup>\n    </Panel>\n  )\n}\n\nexport function DevTools() {\n  const [nodeInspectorActive, setNodeInspectorActive] = useState(false)\n  const [changeLoggerActive, setChangeLoggerActive] = useState(false)\n  const [viewportLoggerActive, setViewportLoggerActive] = useState(false)\n\n  const tools = [\n    {\n      active: nodeInspectorActive,\n      setActive: setNodeInspectorActive,\n      label: 'Node Inspector',\n      value: 'node-inspector',\n    },\n    {\n      active: changeLoggerActive,\n      setActive: setChangeLoggerActive,\n      label: 'Change Logger',\n      value: 'change-logger',\n    },\n    {\n      active: viewportLoggerActive,\n      setActive: setViewportLoggerActive,\n      label: 'Viewport Logger',\n      value: 'viewport-logger',\n    },\n  ]\n\n  return (\n    <>\n      <DevToolsToggle tools={tools} />\n\n      {changeLoggerActive && (\n        <Panel\n          className=\"text-xs p-5 bg-white rounded shadow-md overflow-y-auto max-h-[50%] mt-20\"\n          position=\"bottom-right\"\n        >\n          <ChangeLogger />\n        </Panel>\n      )}\n\n      {nodeInspectorActive && <NodeInspector />}\n\n      {viewportLoggerActive && (\n        <Panel position=\"bottom-left\" className=\"text-secondary-foreground\">\n          <ViewportLogger />\n        </Panel>\n      )}\n    </>\n  )\n}\n\nDevTools.displayName = 'DevTools'\n","import { useCallback, useRef, useState } from 'react'\nimport deepmerge from 'deepmerge'\nimport { applyNodeChanges, Connection, Edge, EdgeChange, Node, NodeChange } from '@xyflow/react'\nimport { FlowNode, FlowNodeTypeEnum } from 'src/services/database/types'\nimport { In, type FindManyOptions } from 'src/services/database/typeorm-wrapper'\nimport { useFlowState } from 'src/states/flow'\nimport { DISABLED_DELETE_NODE_TYPES, SYSTEM_NODE_IDS } from 'src/constants/nodes'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFlowManager = () => {\n  const updatePositionRef = useRef<Record<string, number | undefined>>({})\n  const updateDimensionsRef = useRef<Record<string, number>>({})\n  const onNodesChangesRef = useRef<\n    ((changes: NodeChange<Node>[]) => Promise<boolean | void | undefined>)[]\n  >([])\n\n  const flowEdges = useFlowState((state) => state.flowEdges)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const setNodes = useFlowState((state) => state.setNodes)\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const updateEdges = useFlowState((state) => state.updateEdges)\n  const addConnectionToEdges = useFlowState((state) => state.addConnectionToEdges)\n\n  const resetFlows = useFlowState((state) => state.reset)\n  const findFlowEdges = useFlowState((state) => state.findFlowEdges)\n  const deleteFlowNode = useFlowState((state) => state.deleteFlowNode)\n  const deleteFlowEdge = useFlowState((state) => state.deleteFlowEdge)\n  const updateFlowNode = useFlowState((state) => state.updateFlowNode)\n  const getNodes = useFlowState((state) => state.getNodes)\n  const findFlowNodesWithSource = useFlowState((state) => state.findFlowNodesWithSource)\n\n  const flowEdgesRef = useRef(flowEdges)\n  const currentSessionIdRef = useRef<string | null>()\n  const [loadingState, setLoadingState] = useState({ loading: false })\n\n  flowEdgesRef.current = flowEdges\n\n  const initFlow = useCallback(\n    async (currentSessionId: string, func?: () => Promise<void>) => {\n      try {\n        currentSessionIdRef.current = currentSessionId\n        resetFlows()\n        await func?.()\n      } catch {\n        currentSessionIdRef.current = undefined\n      }\n    },\n    [resetFlows],\n  )\n\n  const prepareFlowInfo = useCallback(\n    async (query: FindManyOptions<FlowNode>) => {\n      try {\n        if (!currentSession?.id) {\n          return\n        }\n        setLoadingState((loading) => ({ ...loading, loading: true }))\n        const flowNodes = await findFlowNodesWithSource({\n          ...query,\n          where: {\n            ...query.where,\n            session_id: currentSession.id,\n          },\n        })\n        const flowEdges = await findFlowEdges({\n          where: [\n            { source: In(flowNodes.map((node) => node.id)) },\n            { target: In(flowNodes.map((node) => node.id)) },\n          ],\n        })\n        return {\n          flowNodes,\n          flowEdges,\n        }\n      } finally {\n        setLoadingState((loading) => ({ ...loading, loading: false }))\n      }\n    },\n    [findFlowNodesWithSource, findFlowEdges, currentSession?.id],\n  )\n\n  const updateNodeChanges = useCallback(\n    async (changes: NodeChange<Node>[]) => {\n      for (const handler of onNodesChangesRef.current) {\n        const result = await handler(changes)\n        if (typeof result === 'boolean' && !result) {\n          return\n        }\n      }\n      for (const change of changes) {\n        if (\n          'id' in change &&\n          Object.values(SYSTEM_NODE_IDS).includes(change.id) &&\n          change.type !== 'remove'\n        ) {\n          updateNodes([change])\n        } else if (\n          change.type === 'position' &&\n          change.position &&\n          !isNaN(change.position.x) &&\n          !isNaN(change.position.y)\n        ) {\n          updateNodes([change])\n\n          const x = change.position.x\n          const y = change.position.y\n          clearTimeout(updatePositionRef.current[change.id])\n          updatePositionRef.current[change.id] = setTimeout(async () => {\n            updatePositionRef.current[change.id] = undefined\n            await updateFlowNode(\n              {\n                id: change.id,\n                x,\n                y,\n              },\n              { silent: true },\n            )\n          }, 200) as unknown as number\n        } else if (change.type === 'remove') {\n          // DISABLED: delete node\n          const node = getNodes([change.id])?.[0]\n          if (!node?.type || DISABLED_DELETE_NODE_TYPES.includes(node.type as FlowNodeTypeEnum)) {\n            return\n          }\n          await deleteFlowNode({ id: change.id })\n        } else if (\n          change.type === 'dimensions' &&\n          change.dimensions &&\n          !isNaN(change.dimensions.width) &&\n          !isNaN(change.dimensions.height)\n        ) {\n          const node = getNodes([change.id])?.[0]\n          if (!node?.width && !node?.height) {\n            return\n          }\n          updateNodes([change])\n\n          clearTimeout(updateDimensionsRef.current[change.id])\n          const width = change.dimensions.width\n          const height = change.dimensions.height\n          updateDimensionsRef.current[change.id] = setTimeout(async () => {\n            await updateFlowNode(\n              {\n                id: change.id,\n                width,\n                height,\n              },\n              { silent: true },\n            )\n          }, 200) as unknown as number\n        } else if (change.type === 'select') {\n          updateNodes([change])\n        }\n      }\n    },\n    [updateNodes, updateFlowNode, getNodes, deleteFlowNode],\n  )\n\n  const updateEdgeChanges = useCallback(\n    (changes: EdgeChange<Edge>[]) => {\n      Promise.all(\n        changes.map(async (change) => {\n          if (change.type === 'remove') {\n            return deleteFlowEdge({ id: change.id })\n          }\n        }),\n      )\n      updateEdges(changes)\n    },\n    [deleteFlowEdge, updateEdges],\n  )\n\n  const updateEdgeConnection = useCallback(\n    (connection: Connection) => {\n      addConnectionToEdges(connection)\n    },\n    [addConnectionToEdges],\n  )\n\n  const updateOrCreateNode = useCallback(\n    (input: Node | ((node: Node[]) => Node | undefined)) => {\n      setNodes((nodes) => {\n        let updatingNode\n        if (typeof input === 'function') {\n          updatingNode = input(nodes)\n        } else {\n          updatingNode = input\n        }\n        if (!updatingNode) {\n          return nodes\n        }\n        const node = nodes?.find((n) => n.id === updatingNode.id)\n        const change: NodeChange<Node> = {\n          id: updatingNode.id,\n          item: node\n            ? deepmerge(node, updatingNode)\n            : {\n                ...updatingNode,\n                position: {\n                  x: updatingNode.position?.x || 0,\n                  y: updatingNode.position?.y || 0,\n                },\n              },\n          type: node ? 'replace' : 'add',\n        }\n        return applyNodeChanges([change], nodes)\n      })\n    },\n    [setNodes],\n  )\n\n  const addOnNodeChangeHandler = useCallback(\n    (func: (changes: NodeChange<Node>[]) => Promise<boolean | void | undefined>) => {\n      onNodesChangesRef.current.push(func)\n      return () => {\n        onNodesChangesRef.current = onNodesChangesRef.current.filter((handler) => handler !== func)\n      }\n    },\n    [],\n  )\n\n  return {\n    initFlow,\n    loadingState,\n    prepareFlowInfo,\n    updateNodeChanges,\n    updateEdgeChanges,\n    updateOrCreateNode,\n    currentSessionIdRef,\n    updateEdgeConnection,\n    addOnNodeChangeHandler,\n  }\n}\n","import { useEffect, useRef } from 'react'\nimport { useFlowManager } from 'src/hooks/flows/handlers/use-flow-manager'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useAutomaticallyRenderFlows = (flowManager: ReturnType<typeof useFlowManager>) => {\n  const currentSessionId = useSessionState((state) => state.currentSession?.id)\n  const { loadingState, prepareFlowInfo, initFlow, currentSessionIdRef } = flowManager\n\n  const flowStateReady = useFlowState((state) => state.ready)\n  const nodes = useFlowState((state) => state.nodes)\n\n  const flowNodesRef = useRef(nodes)\n  const removeSyncNodeQueue = useFlowState((state) => state.removeSyncNodeQueue)\n  const removeSyncEdgeQueue = useFlowState((state) => state.removeSyncEdgeQueue)\n  flowNodesRef.current = nodes\n\n  useEffect(() => {\n    if (\n      loadingState.loading ||\n      !flowStateReady ||\n      !currentSessionId ||\n      currentSessionIdRef.current === currentSessionId\n    ) {\n      return\n    }\n    initFlow(currentSessionId, async () => {\n      await prepareFlowInfo({\n        where: {\n          session_id: currentSessionId,\n        },\n      })\n    })\n  }, [\n    initFlow,\n    prepareFlowInfo,\n    loadingState.loading,\n    currentSessionIdRef,\n    flowStateReady,\n    currentSessionId,\n  ])\n\n  useEffect(() => {\n    const unsubNodeHandler = useFlowState.subscribe(\n      (state) => state.syncNodeQueue,\n      async (syncNodeQueue, previousSyncNodeQueue) => {\n        const lastTimestamps = previousSyncNodeQueue.map((node) => node.timestamp)\n        const handlingQueueItems = syncNodeQueue.filter(\n          (item) => !lastTimestamps.includes(item.timestamp),\n        )\n        if (handlingQueueItems.length) {\n          removeSyncNodeQueue(handlingQueueItems.map((item) => item.timestamp))\n        }\n      },\n    )\n    const unsubEdgeHandler = useFlowState.subscribe(\n      (state) => state.syncEdgeQueue,\n      async (syncEdgeQueue, previousSyncEdgeQueue) => {\n        const lastTimestamps = previousSyncEdgeQueue.map((node) => node.timestamp)\n        const handlingQueueItems = syncEdgeQueue.filter(\n          (item) => !lastTimestamps.includes(item.timestamp),\n        )\n        if (handlingQueueItems.length) {\n          removeSyncEdgeQueue(handlingQueueItems.map((item) => item.timestamp))\n        }\n      },\n    )\n\n    return () => {\n      unsubNodeHandler()\n      unsubEdgeHandler()\n    }\n  }, [prepareFlowInfo, removeSyncEdgeQueue, removeSyncNodeQueue])\n}\n","import { useEffect, useMemo, useRef, useState } from 'react'\nimport { LLMStatusEnum } from 'src/services/database/types/llm'\nimport { useFlowManager } from 'src/hooks/flows/handlers/use-flow-manager'\n\nimport { useAutomaticallyRenderFlows } from 'src/hooks/flows/handlers/use-automatically-render-flow'\nimport { useLocalLLMState } from 'src/services/local-llm'\n\nexport const useHomePage = () => {\n  const [initializing, setInitializing] = useState(true)\n  const flowManager = useFlowManager()\n  const selectedModel = useLocalLLMState((state) => state.selectedModel)\n  const selectedModelRef = useRef(selectedModel)\n  const setInitProgressCallback = useLocalLLMState((state) => state.setInitProgressCallback)\n  const { updateOrCreateNode, updateNodeChanges, updateEdgeChanges, updateEdgeConnection } =\n    flowManager\n  useAutomaticallyRenderFlows(flowManager)\n\n  selectedModelRef.current = selectedModel\n\n  useEffect(() => {\n    const callbackRemoval = setInitProgressCallback?.((input) => {\n      if (!selectedModelRef.current) {\n        return\n      }\n      const modelName = `${selectedModelRef.current}`\n      updateOrCreateNode((nodeRefs) => {\n        const flowNode = nodeRefs?.find((node) => {\n          if (\n            node.data?.entity &&\n            typeof node.data.entity === 'object' &&\n            'name' in node.data.entity\n          ) {\n            return node.data.entity.name === modelName\n          }\n          return false\n        })\n        if (!flowNode) return\n\n        flowNode.data.label = input.text\n        flowNode.data.status = LLMStatusEnum.Loading\n        if (input.progress === 100) {\n          flowNode.data.label = ``\n          flowNode.data.status = LLMStatusEnum.Loaded\n        }\n\n        return flowNode\n      })\n    })\n\n    return () => {\n      callbackRemoval?.()\n    }\n  }, [setInitProgressCallback, updateOrCreateNode])\n\n  const contextValue = useMemo(\n    () => ({\n      updateNodeChanges,\n      updateEdgeChanges,\n      initializing,\n      setInitializing,\n      updateEdgeConnection,\n    }),\n    [updateNodeChanges, updateEdgeChanges, initializing, setInitializing, updateEdgeConnection],\n  )\n\n  return contextValue\n}\n","import { memo, useCallback } from 'react'\nimport {\n  ReactFlow,\n  MiniMap,\n  Controls,\n  Background,\n  BackgroundVariant,\n  Node,\n  NodeChange,\n  Edge,\n  EdgeChange,\n  Connection,\n  PanOnScrollMode,\n} from '@xyflow/react'\nimport { nodeTypes } from 'src/components/flows/Nodes'\nimport { useFlowState } from 'src/states/flow'\nimport { useAppState } from 'src/states/app'\nimport { DevTools } from 'src/lib/shadcn/devtools'\nimport { isDev } from 'src/constants/dev'\nimport { useHomePage } from './hooks/use-home-page'\n\nconst HomeInner = () => {\n  const theme = useAppState((state) => state.theme)\n  const nodes = useFlowState((state) => state.nodes)\n  const edges = useFlowState((state) => state.edges)\n  const { updateNodeChanges, updateEdgeChanges, updateEdgeConnection } = useHomePage()\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange<Node>[]) => {\n      updateNodeChanges(changes)\n    },\n    [updateNodeChanges],\n  )\n\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange<Edge>[]) => {\n      updateEdgeChanges(changes)\n    },\n    [updateEdgeChanges],\n  )\n\n  const onConnect = useCallback(\n    (connection: Connection) => {\n      updateEdgeConnection(connection)\n    },\n    [updateEdgeConnection],\n  )\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      nodeTypes={nodeTypes}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      panOnScroll\n      panOnScrollMode={PanOnScrollMode.Free}\n      colorMode={theme}\n      fitView\n    >\n      <Background variant={BackgroundVariant.Dots} gap={24} size={1} />\n      <Controls />\n      <MiniMap />\n      {isDev ? <DevTools /> : undefined}\n    </ReactFlow>\n  )\n}\n\nexport default memo(HomeInner)\n"],"file":"assets/Home-Bwbq7TXb.js"}