{"version":3,"mappings":"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","names":["useMotionValue","initial","value","useConstant","useContext","useEffect","useCombineMotionValues","values","combineValues","updateValue","useIsomorphicLayoutEffect","subscriptions","scheduleUpdate","unsubscribe","cancelFrame","isCustomValueType","v","getMixer","args","inputValue","outputRange","argOffset","interpolator","options","useImmediate","useComputed","collectMotionValues","compute","useTransform","input","transformer","inputRangeOrTransformer","transform","useListTransform","latest","numValues","i","toNumber","useSpring","useRef","isMotionValue","source","startAnimation","animation","frameData","stopAnimation","activeSpringAnimation","animateValue","latestValue","config","latestSetter","useInsertionEffect","set","isStatic","MessageStatusEnum","MessageRoleEnum","ThreadStatusEnum","PromptTypeEnum","MENUBAR_NAME","createCollection","createMenubarContext","createMenubarScope","createCollectionScope","useMenuScope","createMenuScope","useRovingFocusGroupScope","createRovingFocusGroupScope","MenubarContextProvider","useMenubarContext","Menubar","React.forwardRef","props","__scopeMenubar","onValueChange","loop","menubarProps","valueProp","React.useState","React.useCallback","value2","setValue","prevValue","setCurrentTabStopId","direction","jsx","Collection","rovingFocusGroupScope","currentTabStopId","forwardedRef","MENU_NAME","MenubarMenuProvider","useMenubarMenuContext","MenubarMenu","autoValue","useId","open","context","React.useEffect","wasKeyboardTriggerOpenRef","MenuPrimitive.Root","menuScope","menuProps","TRIGGER_NAME","MenubarTrigger","disabled","React.useRef","composedRefs","useComposedRefs","ref","menuContext","isFocused","setIsFocused","RovingFocusGroup.Item","MenuPrimitive.Anchor","Primitive","triggerProps","composeEventHandlers","event","PORTAL_NAME","MenubarPortal","portalProps","CONTENT_NAME","MenubarContent","contentProps","getItems","useCollection","hasInteractedOutsideRef","MenuPrimitive.Content","align","target","targetIsSubTrigger","isKeyDownInsideSubMenu","isPrevKey","candidateValues","item","wrapArray","currentIndex","MenuPrimitive.Group","MenubarGroup","labelProps","MenuPrimitive.Label","MenubarLabel","ITEM_NAME","MenubarItem","MenuPrimitive.Item","MenubarCheckboxItem","checkboxItemProps","MenuPrimitive.CheckboxItem","CHECKBOX_ITEM_NAME","RADIO_GROUP_NAME","MenubarRadioGroup","MenuPrimitive.RadioGroup","RADIO_ITEM_NAME","MenubarRadioItem","MenuPrimitive.RadioItem","radioItemProps","MenuPrimitive.ItemIndicator","itemIndicatorProps","MenubarItemIndicator","INDICATOR_NAME","MenuPrimitive.Separator","separatorProps","MenubarSeparator","SEPARATOR_NAME","MenubarArrow","MenuPrimitive.Arrow","ARROW_NAME","SUB_TRIGGER_NAME","MenubarSubTrigger","MenuPrimitive.SubTrigger","subTriggerProps","subContentProps","MenuPrimitive.SubContent","MenubarSubContent","array","_","index","startIndex","Root3","Menu","Content2","Label2","Item3","ItemIndicator2","SubContent2","MenubarPrimitive.Menu","className","cn","MenubarPrimitive.Trigger","inset","children","jsxs","MenubarPrimitive.SubContent","alignOffset","sideOffset","MenubarPrimitive.Portal","MenubarPrimitive.Content","checked","MenubarPrimitive.CheckboxItem","MenubarPrimitive.ItemIndicator","LazyIcon","MenubarPrimitive.RadioItem","MenubarPrimitive.Separator","create","subscribeWithSelector","devtools","get","defaultFlowState","useCreateLLM","useSessionState","state","useState","pushSyncNodeQueue","useFlowState","createOrUpdateFlowNode","createLLM","useCallback","record","sessionId","getRepository","existed","LLMProviderEnum","LLMStatusEnum","LLMModelTypeEnum","llm","setLoading","U","Y","H","J","$","m","B","K","G","P","A","f","C","T","O","L","S","E","N","M","h","c","R","u","X","p","W","D","Q","be","Z","le","I","he","r","o","t","ce","ue","n.createContext","n.useContext","de","ee","fe","me","n.forwardRef","k","e","s","pe","b","ge","F","n.useRef","Te","l","re","g","z","a","q","n.useMemo","te","x","ne","V","ae","ie","oe","se","n.createElement","Le","j","ye","d","ve","y","n.useEffect","Se","Ee","Ce","xe","Pe","w.Root","w.Portal","w.Overlay","w.Content","Ve","we","Ie","n.useLayoutEffect","Re","n.useState","n.cloneElement","ke","Command","CommandPrimitive","CommandInput","CommandList","CommandEmpty","CommandGroup","CommandSeparator","CommandItem","CheckboxPrimitive.Indicator","Checkbox","CheckboxPrimitive.Root","OPEN_AI_MODELS","GROQ_MODELS","GROQ_VISION_MODELS","GOOGLE_GENERATIVE_AI_MODELS","GOOGLE_GENERATIVE_AI_API_KEY_LINK","OPEN_AI_API_KEY_LINK","GROQ_API_KEY_LINK","SUPPORTED_PROVIDERS","onConfirm","onCancel","useTranslation","name","setName","newValue","handleSubmit","currentModal","handleHide","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","InputOTP","InputOTPGroup","InputOTPSlot","InputOTPSeparator","DialogFooter","Button","loading","setCurrentSession","updateSessionPassphrase","currentSession","passkey","encryptSymmetric","createSessionPassphraseDialogRef","useModalRef","useUpdateSessionPassphrase","confirmPassphrase","useConfirmPassphrase","keyInfo","secureSession","CreateLLMCard","id","toast","node","useInternalNode","modelId","setModelId","setOpen","encryptedInfo","setEncryptedInfo","setLLMsInfo","syncCachedLLMURLs","isRequiredSessionPasskey","useMemo","modelList","llmsInfo","model","preInCache","cachedLLMURLs","next","nextInCache","preInRecommended","RECOMMENDATION_LOCAL_LLMS","pre","nextInRecommended","preInFunctionCalling","nextInFunctionCalling","selectedModel","provider","setHasCache","currentValue","confirmOrCreatePassphrase","passphrase","encrypted","modelTypeToLLMType","setDialog","error","setSearch","useLayoutEffect","repoInfo","repo","data","__vitePreload","prebuiltAppConfig","modelType","modelItems","LLMInfo","handleOnchange","LLMIcon","Fragment","Alert","Label","Input","username","Popover","PopoverTrigger","handleSearchChange","PopoverContent","encryptedFields","Select","handleOnSelectProvider","SelectTrigger","SelectValue","SelectContent","SelectItem","modelSelection","CardFooter","hanldeSubmit","hasCache","useCreatePrompt","createPrompt","initialY","prompt","FlowNodeTypeEnum","initialX","PROMPT_TYPES","PROMPT_ROLES","PromptForm","defaultPromptRole","defaultPromptType","hidePromptRole","hidePromptType","onSubmit","promptRole","setPromptRole","promptPrefix","setPromptPrefix","handleOnchangePrefix","setInput","setPromptType","handleOnSelectRole","promptType","handleOnSelectType","Textarea","LoadingButton","CreatePromptCard","memo","thread","useToast","Card","CardHeader","CardTitle","toSchemaItem","parent","result","generateUUID","schema","schemaItems","createSchema","NewOrUpdateField","setData","currentRow","empty","handleChangeName","previous","setEmpty","handleChangeDescription","handleChangeType","handleChangeRequired","handleChangeEnum","items","previousData","func","shouldShowChildData","FieldList","handleAddNew","Accordion","row","AccordionItem","AccordionTrigger","AccordionContent","useCreateSchema","createCSVData","encodedData","encodeCSVData","headers","csvData","ExampleTable","Table","TableRow","TableHead","TableBody","TableCell","prevData","output","handleCreateCSVData","CardContent","setOutput","useCreateTool","createOrUpdateFlowEdge","tool","toolNode","CreateToolCard","description","setDescription","createTool","useCreateVectorDatabase","textSplitter","VectorDatabaseTypeEnum","VectorDatabaseProviderEnum","vectorDatabase","vectorDatabaseNode","VectorDatabaseStorageEnum","databaseSource","encodeSplitter","databaseSourceNode","SUPPORTED_VECTOR_DATABASE_PROVIDERS","SUPPORTED_TEXT_SPLITTERS","SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE","setProvider","handleOnSelectStorageType","setStorageType","handleOnSelectTextSplitter","prev","handleOnChangeName","handleOnChangeChunkOverlap","createVectorDatabase","setTextSplitter","storageType","DataTable","setText","text","SupportedAddNodeEnum","SUPPORTED_MODES","getContainer","existingContainer","container","instanceCounter","autoAddParticle","size","sizes","spinVal","spinSpeed","left","mouseX","circle","svgNS","circleSVG","particle","particles","speedUp","refreshParticles","animationFrame","particleGenerationDelay","limit","currentTime","lastParticleTimestamp","tapEnd","isTouchInteraction","updateMousePosition","mouseY","move","tap","tapHandler","element","disableAutoAddParticle","interval","CoolMode","applyParticleEffect","theme","menu","Logo","mode","setMode","child","modeToComponent","CreateSchemaCard","CreateFewShotExampleCard","CreateTextDataCard","useCreateStandaloneSession","useNavigate","newEntityIDMap","newFlowNodeIDMap","entity","entityName","flowNodeTypeToEntity","cloneEntity","newSession","currentFlowNode","cloneFlowNode","standaloneSession","SessionTypeEnum","SessionStatusEnum","cloneNode","mainNodeInfo","connectedNodes","connectedNode","connections","connection","sourceId","targetId","getLatestApplications","createStandaloneSession","useDeleteNodeFlow","updateEdges","deleteNodeFlow","edges","edge","cloneStandaloneSession","useModal","NodeHeader","enableToStandalone","deleting","createStandaloneApplicationDialog","handleDelete","currentNode","getNode","getLinkedConnections","logError","useCreateThread","createThread","flowNode","useActions","loadingModel","setLoadingModel","setQueringThreads","useLoadModel","creatingThread","updateNodes","useReactFlow","queryThreadsFromModel","In","threads","loadModel","initProgress","llmNodeChanges","getNodes","handleCreateThread","changeLLMOptions","handleLoadModel","handlerFunction","newTargetConnection","setNewTargetConnection","deleteElements","useHandleConnections","newConnections","filterUserConnections","edgeId","handlingConnections","response","removeEdgeIds","setHandling","connectionHandler","useConnectionToHandler","useBaseConnectionToHandler","handleConnectionTo","llmInfo","setLLMInfo","isLoading","n","models","functionCallingModelIds","hasModelInCache","onChangeOptions","llmIcon","actions","queryThreads","queringThreads","AlertTitle","DefaultHandle","tags","AIInput","threadConversationTraveling","list","nodes","functions","nodeConnections","handledIds","prepareThreadConnections","threadConnections","threadPromptNodes","threadPromptNodeResult","promptConnectedNodes","threadToolsNodes","threadConnectionInfos","threadToolNodeResult","toolConnectedNodes","threadPlaceholderNodes","placeholderConnectedNodes","threadPlaceholderNodeResult","threadNode","schemaNode","buildHistories","message","HumanMessage","histories","AIMessage","content","decodeCSVData","rows","key","SystemMessage","prepareThreadHistory","messageNodes","systems","threadPromptNode","toLocalLLMToolCallingInput","tools","all","toolEntity","toolSchemaEnity","useFlowEmbeddingNode","getFlowEmbeddingNode","getFlowEmbeddingEntity","useCreateMessage","insertMessages","initialLLMId","humanMessage","currenSession","humanMessageNode","aiMessage","aiMessageNode","handlePlaceholders","messagesInfo","threadConnection","placeholders","placeholderRecord","FlowNodePlaceholderTypeEnum","vectorNode","vector","minimalScore","documents","getHandleConnections","similaritySearchWithScoreFunction","dataSource","getStorageDataSource","template","PromptTemplate","score","doc","injectedMessages","invokeMessage","threadConversionNodes","onMessageUpdate","llmEntity","MessageHistory","prompts","schemaEntities","schemas","stream","messages","createMessage","info","omitBy","createMessageFunction","linkedConnections","ThreadNode","showThread","setShowThread","handleCreateMessage","targetConnections","Badge","handleNewThread","inner","NewMessageCard","HumanMessageComponent","onNewThread","AlertDescription","AIMessageComponent","isError","MarkdownViewer","Suspense","messageMetadata","BorderBeam","isUndefined","newMessage","newMessageNode","edgeToNewMessage","edgeToPrompt","useCreateIdieMessage","MessageNode","isConnectable","handleCopy","handleSpeech","textToSpeech","setSpeaking","newMessageCard","isEnd","Position","createIdieMessage","targetEntity","sourceEntity","viewDetailDialog","ViewDataDetailDialog","regex","match","isOverLimit","handleOpenDetail","promptArguments","argument","bytes","cachedModdels","useLocalLLMState","latestUpdate","setLatestUpdate","usedBytes","setCountInfo","setCachedModels","url","fetchSessionInfo","estimate","setUsedBytes","acc","maxUpdatedAt","llms","jsonlDatas","csvDatas","handleReload","dayjs","SchemaNode","loadingRef","Tabs","TabsTrigger","TabsContent","convertToZodSchemaString","CSVDataNode","csv","decodeLine","DataViewer","EmbeddingSetting","show","setShow","setOptions","setEncrypted","decrypted","hanleSubmit","SYSTEM_NODE_IDS","inputEncrypted","changes","flowNodePlaceholder","currentSessionId","modelName","DEFAULT_PROMPT","CreateVectorDatabasePromptDialog","useCreateVectorDatabaseRetriever","createVectorDatabaseRetriever","systempPrompt","systemPromptNode","metadata","retriever","retrieverNode","CreateVectorDatabaseRetrieverDialog","setK","setMinimalScore","handleOnChangeK","handleOnChangeMinimalScore","indexFunction","useEmbedding","Document","similaritySearchWithScore","embbedingEntity","indexData","dataSourceNode","dataSourceType","chunk","partDocuments","updatedDataNode","handledCount","chunkedDocuments","VectorDatabaseNode","createPromptDialog","CreatePromptDialog","createRetrieverDialog","CreateRetrieverDialog","handleSimilaritySearch","handleCreatePrompt","handleIndexPDF","file","reader","handleCreateData","blob","pdfjs","setProgress","vectorDatabaseData","lines","renderContent","VectorSearch","handleCreateRetriever","IndexNewText","IndexNewFile","progress","LIMIT_LENGTH_BY_COLUMNS","JSONLDataNode","jsonl","DEFAULT_MAGNIFICATION","DEFAULT_DISTANCE","dockVariants","cva","React","magnification","distance","renderChildren","DockIcon","motion","Dock","distanceCalc","bounds","width","widthSync","React.createElement","plateEditorIcon","DEFAULT_NODE_SIZE","nodeType","nodeData","DATA","handleAddNode","createNode","Tooltip","TooltipTrigger","Icon","Separator","TooltipContent","DefaultNodeResizer","lineClassName","handleClassName","rest","NodeResizer","ShapeNode","selected","CircleNode","TriangleNode","height","refDebounce","useLLM","updateEditorContent","llmConnection","llmNode","PlateAppEditor","lazy","EditorAppNode","handleChangeContent","placeholder","SOURCE_BASES","getSourceBase","sourceBase","module","CreateSourcebaseCard","sourcebase","setSourcebase","onUpdateSourceBase","updateCodeContainerData","parseFileSystemTreeToJSONL","onResponseMessageCreate","formatedMessages","parseJSONLToFileSystemTree","sendMessage","handleUpdateCodeContainerData","tree","handleSendMessage","handleUpdateCodeContainerFile","setFileSystemTree","nodeTypes","LLMNode","ToolbarNode","ToolNode","EmbeddingNode","ApplicationBarNode","Toggle","variant","TogglePrimitive.Root","toggleVariants","React.createContext","ToggleGroupPrimitive.Root","ToggleGroupContext","ToggleGroup","React.useContext","ToggleGroupPrimitive.Item","ViewportLogger","viewport","useStore","change","type","ChangeLogger","store","useStoreApi","handleNodeChanges","setChanges","prevChanges","newChanges","NoChanges","NodeInspector","getInternalNode","ViewportPortal","internalNode","absPosition","absoluteTransform","formattedPosition","selectionStatus","formattedDimensions","DevToolsToggle","Panel","active","setActive","label","ToggleGroupItem","DevTools","nodeInspectorActive","setNodeInspectorActive","changeLoggerActive","setChangeLoggerActive","viewportLoggerActive","setViewportLoggerActive","updatePositionRef","flowEdges","setNodes","addConnectionToEdges","findFlowEdges","deleteFlowNode","deleteFlowEdge","updateFlowNode","flowEdgesRef","currentSessionIdRef","loadingState","setLoadingState","prepareFlowInfo","query","findFlowNodesWithSource","flowNodes","handler","updateDimensionsRef","updateEdgeConnection","updatingNode","deepmerge","applyNodeChanges","addOnNodeChangeHandler","onNodesChangesRef","updateNodeChanges","updateEdgeChanges","useAutomaticallyRenderFlows","flowManager","flowNodesRef","flowStateReady","initFlow","syncNodeQueue","previousSyncNodeQueue","lastTimestamps","handlingQueueItems","unsubEdgeHandler","syncEdgeQueue","previousSyncEdgeQueue","removeSyncEdgeQueue","unsubNodeHandler","removeSyncNodeQueue","useHomePage","initializing","useFlowManager","selectedModelRef","setInitProgressCallback","updateOrCreateNode","nodeRefs","callbackRemoval","setInitializing","HomeInner","useAppState","onNodesChange","onEdgesChange","onConnect","PanOnScrollMode","Background","Controls"],"ignoreList":[0,1,2,3,4,5,9,13,14],"sources":["../../node_modules/framer-motion/dist/es/value/use-motion-value.mjs","../../node_modules/framer-motion/dist/es/value/use-combine-values.mjs","../../node_modules/framer-motion/dist/es/utils/transform.mjs","../../node_modules/framer-motion/dist/es/value/use-computed.mjs","../../node_modules/framer-motion/dist/es/value/use-transform.mjs","../../node_modules/framer-motion/dist/es/value/use-spring.mjs","../../src/services/database/types/message.ts","../../src/services/database/types/thread.ts","../../src/services/database/types/prompt.ts","../../node_modules/@radix-ui/react-menubar/dist/index.mjs","../../src/lib/shadcn/ui/menubar.tsx","../../src/states/flow/index.ts","../../src/hooks/flows/mutations/use-create-llm.ts","../../node_modules/cmdk/dist/chunk-NZJY6EH4.mjs","../../node_modules/cmdk/dist/index.mjs","../../src/lib/shadcn/ui/command.tsx","../../src/lib/shadcn/ui/checkbox.tsx","../../src/constants/llm.ts","../../src/components/molecules/CreateLLMCard/constants.ts","../../src/components/dialogs/CreateSessionPassphraseDialog/index.tsx","../../src/hooks/mutations/use-update-session-passphrase.ts","../../src/hooks/mutations/use-confirm-or-create-passphrase.ts","../../src/components/molecules/CreateLLMCard/index.tsx","../../src/hooks/flows/mutations/use-create-prompt.ts","../../src/components/molecules/CreatePromptCard/constants.ts","../../src/components/molecules/CreatePromptCard/PromptForm.tsx","../../src/components/molecules/CreatePromptCard/index.tsx","../../src/hooks/flows/mutations/use-create-schema.ts","../../src/components/molecules/CreateSchemaCard/Field/NewOrUpdateField.tsx","../../src/components/molecules/CreateSchemaCard/Field/FieldList.tsx","../../src/components/molecules/CreateSchemaCard/index.tsx","../../src/hooks/flows/mutations/use-create-csv-data.ts","../../src/components/molecules/CreateFewShotExampleCard/ExampleTable/index.tsx","../../src/components/molecules/CreateFewShotExampleCard/index.tsx","../../src/hooks/flows/mutations/use-create-tool.ts","../../src/components/molecules/CreateToolCard/index.tsx","../../src/hooks/flows/mutations/use-create-vector-database.ts","../../src/components/molecules/CreateVectorDatabaseCard/constants.ts","../../src/components/molecules/CreateVectorDatabaseCard/index.tsx","../../src/components/molecules/CreateTextDataCard/DataTable/index.tsx","../../src/components/molecules/CreateTextDataCard/index.tsx","../../src/components/flows/Nodes/ToolboxNode/constants.ts","../../src/lib/shadcn/ui/cool-mode.tsx","../../src/components/flows/Nodes/ToolboxNode/ToolBarNode.tsx","../../src/hooks/mutations/use-create-standalone-session.ts","../../src/hooks/flows/mutations/use-delete-node-flow.ts","../../src/components/dialogs/CreateStandaloneApplicationDialog/index.tsx","../../src/components/flows/NodeHeader/NodeHeader.tsx","../../src/components/flows/DefaultHandle/DefaultHandle.tsx","../../src/hooks/flows/mutations/use-create-thread.ts","../../src/components/flows/Nodes/LLMNode/hooks/use-actions.ts","../../src/hooks/flows/handlers/use-base-connection-to-handler.ts","../../src/components/flows/Nodes/LLMNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/LLMNode/LLMNode.tsx","../../src/components/molecules/NewMessageCard/index.tsx","../../src/utils/thread-conversation-traveling.ts","../../src/utils/build-message-history.ts","../../src/utils/flow-to-local-llm.ts","../../src/hooks/flows/use-flow-embedding-node.ts","../../src/hooks/flows/mutations/use-create-message.ts","../../src/components/flows/Nodes/ThreadNode/hooks/use-actions.ts","../../src/components/flows/Nodes/ThreadNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ThreadNode/ThreadNode.tsx","../../src/components/flows/Nodes/MessageNode/components/HumanMessage.tsx","../../src/components/flows/Nodes/MessageNode/components/AIMessage.tsx","../../src/components/flows/Nodes/MessageNode/hooks/use-actions.ts","../../src/hooks/flows/mutations/use-create-idie-message.ts","../../src/components/flows/Nodes/MessageNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/MessageNode/MessageNode.tsx","../../src/components/flows/Nodes/PromptNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/PromptNode/PromptNode.tsx","../../src/utils/bytes-format.ts","../../src/components/flows/Nodes/SessionInfoNode/SessionInfoNode.tsx","../../src/components/flows/Nodes/SchemaNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/SchemaNode/SchemaNode.tsx","../../src/components/flows/Nodes/CSVDataNode/CSVDataNode.tsx","../../src/components/flows/Nodes/ToolNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ToolNode/ToolNode.tsx","../../src/components/atoms/EmbeddingSetting.tsx","../../src/components/flows/Nodes/EmbeddingNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/EmbeddingNode/hooks/use-actions.ts","../../src/components/flows/Nodes/EmbeddingNode/EmbeddingNode.tsx","../../src/components/dialogs/CreateVectorDatabasePromptDialog/index.tsx","../../src/hooks/flows/mutations/use-create-vector-database-retriever.ts","../../src/components/dialogs/CreateVectorDatabaseRetrieverDialog/index.tsx","../../src/components/flows/Nodes/VectorDatabaseNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/VectorDatabaseNode/hooks/use-actions.ts","../../src/components/flows/Nodes/VectorDatabaseNode/VectorDatabaseNode.tsx","../../src/components/flows/Nodes/JSONLDataNode/JSONLDataNode.tsx","../../src/lib/shadcn/ui/dock.tsx","../../src/assets/svgs/visual-studio-code.svg?react","../../src/assets/images/plate-editor.png","../../src/components/flows/Nodes/ApplicationBarNode/constants.ts","../../src/components/flows/Nodes/ApplicationBarNode/hooks/use-actions.ts","../../src/components/flows/Nodes/ApplicationBarNode/ApplicationBarNode.tsx","../../src/components/flows/DefaultNodeResizer/DefaultNodeResizer.tsx","../../src/components/flows/Nodes/ShapeNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/ShapeNode/ShapeNode.tsx","../../src/components/flows/Nodes/CircleNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/CircleNode/CircleNode.tsx","../../src/components/flows/Nodes/TriangleNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/TriangleNode/TriangleNode.tsx","../../src/components/flows/Nodes/EditorAppNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/EditorAppNode/hooks/use-actions.ts","../../src/components/flows/Nodes/EditorAppNode/EditorAppNode.tsx","../../src/components/flows/Nodes/PlaceholderNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/PlaceholderNode/PlaceholderNode.tsx","../../src/services/web-container/source-bases/index.ts","../../src/components/molecules/CreateSourcebaseCard/index.tsx","../../src/components/flows/Nodes/VSLiteAppNode/hooks/use-actions.ts","../../src/components/flows/Nodes/VSLiteAppNode/hooks/use-connection-to-handler.ts","../../src/components/flows/Nodes/VSLiteAppNode/VSLiteAppNode.tsx","../../src/components/flows/Nodes/index.tsx","../../src/lib/shadcn/ui/toggle.tsx","../../src/lib/shadcn/ui/toggle-group.tsx","../../src/lib/shadcn/devtools.tsx","../../src/hooks/flows/handlers/use-flow-manager.ts","../../src/hooks/flows/handlers/use-automatically-render-flow.ts","../../src/components/pages/Home/hooks/use-home-page.ts","../../src/components/pages/Home/Home.tsx"],"sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { useMotionValue } from './use-motion-value.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { cancelFrame, frame } from '../frameloop/frame.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { interpolate } from './interpolate.mjs';\n\nconst isCustomValueType = (v) => {\n    return v && typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { collectMotionValues } from './index.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","import { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import { useContext, useRef, useInsertionEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { frame, frameData } from '../frameloop/frame.mjs';\n\nfunction toNumber(v) {\n    if (typeof v === \"number\")\n        return v;\n    return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n    const latestValue = useRef(value.get());\n    const latestSetter = useRef(() => { });\n    const startAnimation = () => {\n        /**\n         * If the previous animation hasn't had the chance to even render a frame, render it now.\n         */\n        const animation = activeSpringAnimation.current;\n        if (animation && animation.time === 0) {\n            animation.sample(frameData.delta);\n        }\n        stopAnimation();\n        activeSpringAnimation.current = animateValue({\n            keyframes: [value.get(), latestValue.current],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current,\n        });\n    };\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            latestValue.current = v;\n            latestSetter.current = set;\n            frame.update(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(toNumber(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n","export enum MessageStatusEnum {\n  Started = 'started',\n  Inprogress = 'inprogress',\n  Success = 'success',\n  Failed = 'failed',\n}\n\nexport enum MessageRoleEnum {\n  Human = 'human',\n  User = 'user',\n  AI = 'ai',\n  System = 'system',\n  Assistant = 'assistant',\n  Tool = 'tool',\n  FewShotExample = 'few_shot_example',\n}\n","export enum ThreadStatusEnum {\n  Started = 'started',\n  Inprogress = 'inprogress',\n  Done = 'done',\n}\n","export enum PromptStatusEnum {\n  Started = 'started',\n  Fromated = 'fromated',\n}\n\nexport enum PromptTypeEnum {\n  Chat = 'chat',\n  FewShotExample = 'few_shot_example',\n}\n","\"use client\";\n\n// packages/react/menubar/src/Menubar.tsx\nimport * as React from \"react\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as MenuPrimitive from \"@radix-ui/react-menu\";\nimport { createMenuScope } from \"@radix-ui/react-menu\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MENUBAR_NAME = \"Menubar\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(MENUBAR_NAME);\nvar [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope\n]);\nvar useMenuScope = createMenuScope();\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [MenubarContextProvider, useMenubarContext] = createMenubarContext(MENUBAR_NAME);\nvar Menubar = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeMenubar,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      loop = true,\n      dir,\n      ...menubarProps\n    } = props;\n    const direction = useDirection(dir);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const [value = \"\", setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue\n    });\n    const [currentTabStopId, setCurrentTabStopId] = React.useState(null);\n    return /* @__PURE__ */ jsx(\n      MenubarContextProvider,\n      {\n        scope: __scopeMenubar,\n        value,\n        onMenuOpen: React.useCallback(\n          (value2) => {\n            setValue(value2);\n            setCurrentTabStopId(value2);\n          },\n          [setValue]\n        ),\n        onMenuClose: React.useCallback(() => setValue(\"\"), [setValue]),\n        onMenuToggle: React.useCallback(\n          (value2) => {\n            setValue((prevValue) => Boolean(prevValue) ? \"\" : value2);\n            setCurrentTabStopId(value2);\n          },\n          [setValue]\n        ),\n        dir: direction,\n        loop,\n        children: /* @__PURE__ */ jsx(Collection.Provider, { scope: __scopeMenubar, children: /* @__PURE__ */ jsx(Collection.Slot, { scope: __scopeMenubar, children: /* @__PURE__ */ jsx(\n          RovingFocusGroup.Root,\n          {\n            asChild: true,\n            ...rovingFocusGroupScope,\n            orientation: \"horizontal\",\n            loop,\n            dir: direction,\n            currentTabStopId,\n            onCurrentTabStopIdChange: setCurrentTabStopId,\n            children: /* @__PURE__ */ jsx(Primitive.div, { role: \"menubar\", ...menubarProps, ref: forwardedRef })\n          }\n        ) }) })\n      }\n    );\n  }\n);\nMenubar.displayName = MENUBAR_NAME;\nvar MENU_NAME = \"MenubarMenu\";\nvar [MenubarMenuProvider, useMenubarMenuContext] = createMenubarContext(MENU_NAME);\nvar MenubarMenu = (props) => {\n  const { __scopeMenubar, value: valueProp, ...menuProps } = props;\n  const autoValue = useId();\n  const value = valueProp || autoValue || \"LEGACY_REACT_AUTO_VALUE\";\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n  return /* @__PURE__ */ jsx(\n    MenubarMenuProvider,\n    {\n      scope: __scopeMenubar,\n      value,\n      triggerId: useId(),\n      triggerRef,\n      contentId: useId(),\n      wasKeyboardTriggerOpenRef,\n      children: /* @__PURE__ */ jsx(\n        MenuPrimitive.Root,\n        {\n          ...menuScope,\n          open,\n          onOpenChange: (open2) => {\n            if (!open2) context.onMenuClose();\n          },\n          modal: false,\n          dir: context.dir,\n          ...menuProps\n        }\n      )\n    }\n  );\n};\nMenubarMenu.displayName = MENU_NAME;\nvar TRIGGER_NAME = \"MenubarTrigger\";\nvar MenubarTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, disabled = false, ...triggerProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n    const ref = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const open = context.value === menuContext.value;\n    return /* @__PURE__ */ jsx(Collection.ItemSlot, { scope: __scopeMenubar, value: menuContext.value, disabled, children: /* @__PURE__ */ jsx(\n      RovingFocusGroup.Item,\n      {\n        asChild: true,\n        ...rovingFocusGroupScope,\n        focusable: !disabled,\n        tabStopId: menuContext.value,\n        children: /* @__PURE__ */ jsx(MenuPrimitive.Anchor, { asChild: true, ...menuScope, children: /* @__PURE__ */ jsx(\n          Primitive.button,\n          {\n            type: \"button\",\n            role: \"menuitem\",\n            id: menuContext.triggerId,\n            \"aria-haspopup\": \"menu\",\n            \"aria-expanded\": open,\n            \"aria-controls\": open ? menuContext.contentId : void 0,\n            \"data-highlighted\": isFocused ? \"\" : void 0,\n            \"data-state\": open ? \"open\" : \"closed\",\n            \"data-disabled\": disabled ? \"\" : void 0,\n            disabled,\n            ...triggerProps,\n            ref: composedRefs,\n            onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {\n              if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                context.onMenuOpen(menuContext.value);\n                if (!open) event.preventDefault();\n              }\n            }),\n            onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {\n              const menubarOpen = Boolean(context.value);\n              if (menubarOpen && !open) {\n                context.onMenuOpen(menuContext.value);\n                ref.current?.focus();\n              }\n            }),\n            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {\n              if (disabled) return;\n              if ([\"Enter\", \" \"].includes(event.key)) context.onMenuToggle(menuContext.value);\n              if (event.key === \"ArrowDown\") context.onMenuOpen(menuContext.value);\n              if ([\"Enter\", \" \", \"ArrowDown\"].includes(event.key)) {\n                menuContext.wasKeyboardTriggerOpenRef.current = true;\n                event.preventDefault();\n              }\n            }),\n            onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),\n            onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))\n          }\n        ) })\n      }\n    ) });\n  }\n);\nMenubarTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"MenubarPortal\";\nvar MenubarPortal = (props) => {\n  const { __scopeMenubar, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */ jsx(MenuPrimitive.Portal, { ...menuScope, ...portalProps });\n};\nMenubarPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"MenubarContent\";\nvar MenubarContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, align = \"start\", ...contentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n    const getItems = useCollection(__scopeMenubar);\n    const hasInteractedOutsideRef = React.useRef(false);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.Content,\n      {\n        id: menuContext.contentId,\n        \"aria-labelledby\": menuContext.triggerId,\n        \"data-radix-menubar-content\": \"\",\n        ...menuScope,\n        ...contentProps,\n        ref: forwardedRef,\n        align,\n        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          const menubarOpen = Boolean(context.value);\n          if (!menubarOpen && !hasInteractedOutsideRef.current) {\n            menuContext.triggerRef.current?.focus();\n          }\n          hasInteractedOutsideRef.current = false;\n          event.preventDefault();\n        }),\n        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {\n          const target = event.target;\n          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          if (isMenubarTrigger) event.preventDefault();\n        }),\n        onInteractOutside: composeEventHandlers(props.onInteractOutside, () => {\n          hasInteractedOutsideRef.current = true;\n        }),\n        onEntryFocus: (event) => {\n          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n        },\n        onKeyDown: composeEventHandlers(\n          props.onKeyDown,\n          (event) => {\n            if ([\"ArrowRight\", \"ArrowLeft\"].includes(event.key)) {\n              const target = event.target;\n              const targetIsSubTrigger = target.hasAttribute(\"data-radix-menubar-subtrigger\");\n              const isKeyDownInsideSubMenu = target.closest(\"[data-radix-menubar-content]\") !== event.currentTarget;\n              const prevMenuKey = context.dir === \"rtl\" ? \"ArrowRight\" : \"ArrowLeft\";\n              const isPrevKey = prevMenuKey === event.key;\n              const isNextKey = !isPrevKey;\n              if (isNextKey && targetIsSubTrigger) return;\n              if (isKeyDownInsideSubMenu && isPrevKey) return;\n              const items = getItems().filter((item) => !item.disabled);\n              let candidateValues = items.map((item) => item.value);\n              if (isPrevKey) candidateValues.reverse();\n              const currentIndex = candidateValues.indexOf(menuContext.value);\n              candidateValues = context.loop ? wrapArray(candidateValues, currentIndex + 1) : candidateValues.slice(currentIndex + 1);\n              const [nextValue] = candidateValues;\n              if (nextValue) context.onMenuOpen(nextValue);\n            }\n          },\n          { checkForDefaultPrevented: false }\n        ),\n        style: {\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      }\n    );\n  }\n);\nMenubarContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"MenubarGroup\";\nvar MenubarGroup = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Group, { ...menuScope, ...groupProps, ref: forwardedRef });\n  }\n);\nMenubarGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"MenubarLabel\";\nvar MenubarLabel = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Label, { ...menuScope, ...labelProps, ref: forwardedRef });\n  }\n);\nMenubarLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"MenubarItem\";\nvar MenubarItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Item, { ...menuScope, ...itemProps, ref: forwardedRef });\n  }\n);\nMenubarItem.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"MenubarCheckboxItem\";\nvar MenubarCheckboxItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });\n  }\n);\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"MenubarRadioGroup\";\nvar MenubarRadioGroup = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });\n  }\n);\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"MenubarRadioItem\";\nvar MenubarRadioItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });\n  }\n);\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"MenubarItemIndicator\";\nvar MenubarItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const { __scopeMenubar, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return /* @__PURE__ */ jsx(MenuPrimitive.ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });\n});\nMenubarItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"MenubarSeparator\";\nvar MenubarSeparator = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });\n  }\n);\nMenubarSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"MenubarArrow\";\nvar MenubarArrow = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(MenuPrimitive.Arrow, { ...menuScope, ...arrowProps, ref: forwardedRef });\n  }\n);\nMenubarArrow.displayName = ARROW_NAME;\nvar SUB_NAME = \"MenubarSub\";\nvar MenubarSub = (props) => {\n  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */ jsx(MenuPrimitive.Sub, { ...menuScope, open, onOpenChange: setOpen, children });\n};\nMenubarSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME = \"MenubarSubTrigger\";\nvar MenubarSubTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.SubTrigger,\n      {\n        \"data-radix-menubar-subtrigger\": \"\",\n        ...menuScope,\n        ...subTriggerProps,\n        ref: forwardedRef\n      }\n    );\n  }\n);\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"MenubarSubContent\";\nvar MenubarSubContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeMenubar, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return /* @__PURE__ */ jsx(\n      MenuPrimitive.SubContent,\n      {\n        ...menuScope,\n        \"data-radix-menubar-content\": \"\",\n        ...subContentProps,\n        ref: forwardedRef,\n        style: {\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            \"--radix-menubar-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n            \"--radix-menubar-content-available-width\": \"var(--radix-popper-available-width)\",\n            \"--radix-menubar-content-available-height\": \"var(--radix-popper-available-height)\",\n            \"--radix-menubar-trigger-width\": \"var(--radix-popper-anchor-width)\",\n            \"--radix-menubar-trigger-height\": \"var(--radix-popper-anchor-height)\"\n          }\n        }\n      }\n    );\n  }\n);\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root3 = Menubar;\nvar Menu = MenubarMenu;\nvar Trigger = MenubarTrigger;\nvar Portal2 = MenubarPortal;\nvar Content2 = MenubarContent;\nvar Group2 = MenubarGroup;\nvar Label2 = MenubarLabel;\nvar Item3 = MenubarItem;\nvar CheckboxItem2 = MenubarCheckboxItem;\nvar RadioGroup2 = MenubarRadioGroup;\nvar RadioItem2 = MenubarRadioItem;\nvar ItemIndicator2 = MenubarItemIndicator;\nvar Separator2 = MenubarSeparator;\nvar Arrow2 = MenubarArrow;\nvar Sub2 = MenubarSub;\nvar SubTrigger2 = MenubarSubTrigger;\nvar SubContent2 = MenubarSubContent;\nexport {\n  Arrow2 as Arrow,\n  CheckboxItem2 as CheckboxItem,\n  Content2 as Content,\n  Group2 as Group,\n  Item3 as Item,\n  ItemIndicator2 as ItemIndicator,\n  Label2 as Label,\n  Menu,\n  Menubar,\n  MenubarArrow,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarGroup,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n  Portal2 as Portal,\n  RadioGroup2 as RadioGroup,\n  RadioItem2 as RadioItem,\n  Root3 as Root,\n  Separator2 as Separator,\n  Sub2 as Sub,\n  SubContent2 as SubContent,\n  SubTrigger2 as SubTrigger,\n  Trigger,\n  createMenubarScope\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      'flex h-10 items-center space-x-1 rounded-md border bg-background p-1',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <LazyIcon name=\"chevron-right\" className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(({ className, align = 'start', alignOffset = -4, sideOffset = 8, ...props }, ref) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  </MenubarPrimitive.Portal>\n))\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <LazyIcon name=\"check\" className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <LazyIcon name=\"circle\" className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = 'MenubarShortcut'\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","import { create } from 'zustand'\nimport { devtools, subscribeWithSelector } from 'zustand/middleware'\nimport { FlowStateActions, getFlowStateActions } from './actions'\nimport { FlowState, defaultFlowState } from './state'\n\nexport const useFlowState = create<FlowState & FlowStateActions>()(\n  subscribeWithSelector(\n    devtools((set, get) => ({\n      ...defaultFlowState,\n      ...getFlowStateActions(set, get),\n    })),\n  ),\n)\n","import { useCallback, useState } from 'react'\nimport { Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  LLM,\n  LLMModelTypeEnum,\n  LLMProviderEnum,\n  LLMStatusEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateLLM = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n\n  const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createLLM = useCallback(\n    async (source: Node, record: Partial<LLM>) => {\n      try {\n        if (!sessionId) {\n          throw new Error('Session not found')\n        }\n        if (!record.provider || !record.name) {\n          throw new Error('Provider and name are required')\n        }\n        setLoading(true)\n        const existed = await getRepository('LLM').findOne({\n          where: {\n            name: record.name,\n            session_id: sessionId,\n          },\n        })\n        if (existed) {\n          pushSyncNodeQueue('LLM', {\n            where: {\n              source_type: 'LLM',\n              source_id: existed.id,\n            },\n          })\n          return existed\n        }\n        return getRepository('LLM')\n          .save({\n            name: `${record.name}`,\n            // NOTE: No need to load cloud LLM\n            status: [LLMProviderEnum.WebLLM, LLMProviderEnum.Wllama].includes(\n              record.provider as LLMProviderEnum,\n            )\n              ? LLMStatusEnum.Started\n              : LLMStatusEnum.Loaded,\n            session_id: sessionId,\n            provider: record.provider,\n            metadata: JSON.stringify(record.metadata || {}),\n            model_type: record.model_type || LLMModelTypeEnum.LLM,\n            parameters: record.parameters || undefined,\n            encrypted: record.encrypted || undefined,\n            ...record,\n          })\n          .then(async (llm) => {\n            await createOrUpdateFlowNode({\n              source_id: llm.id,\n              source_type: 'LLM',\n              node_type: FlowNodeTypeEnum.LLM,\n              x: source.position?.x,\n              y: source.position?.y + (source.measured?.height || 0) + 30,\n            })\n            return llm\n          })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowNode, pushSyncNodeQueue, sessionId],\n  )\n\n  return {\n    loading,\n    createLLM,\n  }\n}\n","var U=1,Y=.9,H=.8,J=.17,p=.1,u=.999,$=.9999;var k=.99,m=/[\\\\\\/_+.#\"@\\[\\(\\{&]/,B=/[\\\\\\/_+.#\"@\\[\\(\\{&]/g,K=/[\\s-]/,X=/[\\s-]/g;function G(_,C,h,P,A,f,O){if(f===C.length)return A===_.length?U:k;var T=`${A},${f}`;if(O[T]!==void 0)return O[T];for(var L=P.charAt(f),c=h.indexOf(L,A),S=0,E,N,R,M;c>=0;)E=G(_,C,h,P,c+1,f+1,O),E>S&&(c===A?E*=U:m.test(_.charAt(c-1))?(E*=H,R=_.slice(A,c-1).match(B),R&&A>0&&(E*=Math.pow(u,R.length))):K.test(_.charAt(c-1))?(E*=Y,M=_.slice(A,c-1).match(X),M&&A>0&&(E*=Math.pow(u,M.length))):(E*=J,A>0&&(E*=Math.pow(u,c-A))),_.charAt(c)!==C.charAt(f)&&(E*=$)),(E<p&&h.charAt(c-1)===P.charAt(f+1)||P.charAt(f+1)===P.charAt(f)&&h.charAt(c-1)!==P.charAt(f))&&(N=G(_,C,h,P,c+1,f+2,O),N*p>E&&(E=N*p)),E>S&&(S=E),c=h.indexOf(L,c+1);return O[T]=S,S}function D(_){return _.toLowerCase().replace(X,\" \")}function W(_,C,h){return _=h&&h.length>0?`${_+\" \"+h.join(\" \")}`:_,G(_,C,D(_),D(C),0,0,{})}export{W as a};\n","\"use client\";import{a as ce}from\"./chunk-NZJY6EH4.mjs\";import*as w from\"@radix-ui/react-dialog\";import*as n from\"react\";import{Primitive as D}from\"@radix-ui/react-primitive\";import{useId as L}from\"@radix-ui/react-id\";import{useSyncExternalStore as Re}from\"use-sync-external-store/shim/index.js\";var N='[cmdk-group=\"\"]',Q='[cmdk-group-items=\"\"]',be='[cmdk-group-heading=\"\"]',Z='[cmdk-item=\"\"]',le=`${Z}:not([aria-disabled=\"true\"])`,Y=\"cmdk-item-select\",I=\"data-value\",he=(r,o,t)=>ce(r,o,t),ue=n.createContext(void 0),K=()=>n.useContext(ue),de=n.createContext(void 0),ee=()=>n.useContext(de),fe=n.createContext(void 0);var me=n.forwardRef((r,o)=>{let t=k(()=>{var e,s;return{search:\"\",value:(s=(e=r.value)!=null?e:r.defaultValue)!=null?s:\"\",filtered:{count:0,items:new Map,groups:new Set}}}),u=k(()=>new Set),c=k(()=>new Map),d=k(()=>new Map),f=k(()=>new Set),p=pe(r),{label:v,children:b,value:l,onValueChange:y,filter:E,shouldFilter:C,loop:H,disablePointerSelection:ge=!1,vimBindings:$=!0,...O}=r,te=L(),B=L(),F=L(),x=n.useRef(null),R=Te();M(()=>{if(l!==void 0){let e=l.trim();t.current.value=e,h.emit()}},[l]),M(()=>{R(6,re)},[]);let h=n.useMemo(()=>({subscribe:e=>(f.current.add(e),()=>f.current.delete(e)),snapshot:()=>t.current,setState:(e,s,i)=>{var a,m,g;if(!Object.is(t.current[e],s)){if(t.current[e]=s,e===\"search\")W(),U(),R(1,z);else if(e===\"value\"&&(i||R(5,re),((a=p.current)==null?void 0:a.value)!==void 0)){let S=s!=null?s:\"\";(g=(m=p.current).onValueChange)==null||g.call(m,S);return}h.emit()}},emit:()=>{f.current.forEach(e=>e())}}),[]),q=n.useMemo(()=>({value:(e,s,i)=>{var a;s!==((a=d.current.get(e))==null?void 0:a.value)&&(d.current.set(e,{value:s,keywords:i}),t.current.filtered.items.set(e,ne(s,i)),R(2,()=>{U(),h.emit()}))},item:(e,s)=>(u.current.add(e),s&&(c.current.has(s)?c.current.get(s).add(e):c.current.set(s,new Set([e]))),R(3,()=>{W(),U(),t.current.value||z(),h.emit()}),()=>{d.current.delete(e),u.current.delete(e),t.current.filtered.items.delete(e);let i=A();R(4,()=>{W(),(i==null?void 0:i.getAttribute(\"id\"))===e&&z(),h.emit()})}),group:e=>(c.current.has(e)||c.current.set(e,new Set),()=>{d.current.delete(e),c.current.delete(e)}),filter:()=>p.current.shouldFilter,label:v||r[\"aria-label\"],getDisablePointerSelection:()=>p.current.disablePointerSelection,listId:te,inputId:F,labelId:B,listInnerRef:x}),[]);function ne(e,s){var a,m;let i=(m=(a=p.current)==null?void 0:a.filter)!=null?m:he;return e?i(e,t.current.search,s):0}function U(){if(!t.current.search||p.current.shouldFilter===!1)return;let e=t.current.filtered.items,s=[];t.current.filtered.groups.forEach(a=>{let m=c.current.get(a),g=0;m.forEach(S=>{let P=e.get(S);g=Math.max(P,g)}),s.push([a,g])});let i=x.current;_().sort((a,m)=>{var P,V;let g=a.getAttribute(\"id\"),S=m.getAttribute(\"id\");return((P=e.get(S))!=null?P:0)-((V=e.get(g))!=null?V:0)}).forEach(a=>{let m=a.closest(Q);m?m.appendChild(a.parentElement===m?a:a.closest(`${Q} > *`)):i.appendChild(a.parentElement===i?a:a.closest(`${Q} > *`))}),s.sort((a,m)=>m[1]-a[1]).forEach(a=>{var g;let m=(g=x.current)==null?void 0:g.querySelector(`${N}[${I}=\"${encodeURIComponent(a[0])}\"]`);m==null||m.parentElement.appendChild(m)})}function z(){let e=_().find(i=>i.getAttribute(\"aria-disabled\")!==\"true\"),s=e==null?void 0:e.getAttribute(I);h.setState(\"value\",s||void 0)}function W(){var s,i,a,m;if(!t.current.search||p.current.shouldFilter===!1){t.current.filtered.count=u.current.size;return}t.current.filtered.groups=new Set;let e=0;for(let g of u.current){let S=(i=(s=d.current.get(g))==null?void 0:s.value)!=null?i:\"\",P=(m=(a=d.current.get(g))==null?void 0:a.keywords)!=null?m:[],V=ne(S,P);t.current.filtered.items.set(g,V),V>0&&e++}for(let[g,S]of c.current)for(let P of S)if(t.current.filtered.items.get(P)>0){t.current.filtered.groups.add(g);break}t.current.filtered.count=e}function re(){var s,i,a;let e=A();e&&(((s=e.parentElement)==null?void 0:s.firstChild)===e&&((a=(i=e.closest(N))==null?void 0:i.querySelector(be))==null||a.scrollIntoView({block:\"nearest\"})),e.scrollIntoView({block:\"nearest\"}))}function A(){var e;return(e=x.current)==null?void 0:e.querySelector(`${Z}[aria-selected=\"true\"]`)}function _(){var e;return Array.from(((e=x.current)==null?void 0:e.querySelectorAll(le))||[])}function J(e){let i=_()[e];i&&h.setState(\"value\",i.getAttribute(I))}function X(e){var g;let s=A(),i=_(),a=i.findIndex(S=>S===s),m=i[a+e];(g=p.current)!=null&&g.loop&&(m=a+e<0?i[i.length-1]:a+e===i.length?i[0]:i[a+e]),m&&h.setState(\"value\",m.getAttribute(I))}function oe(e){let s=A(),i=s==null?void 0:s.closest(N),a;for(;i&&!a;)i=e>0?Ie(i,N):Me(i,N),a=i==null?void 0:i.querySelector(le);a?h.setState(\"value\",a.getAttribute(I)):X(e)}let ie=()=>J(_().length-1),ae=e=>{e.preventDefault(),e.metaKey?ie():e.altKey?oe(1):X(1)},se=e=>{e.preventDefault(),e.metaKey?J(0):e.altKey?oe(-1):X(-1)};return n.createElement(D.div,{ref:o,tabIndex:-1,...O,\"cmdk-root\":\"\",onKeyDown:e=>{var s;if((s=O.onKeyDown)==null||s.call(O,e),!e.defaultPrevented)switch(e.key){case\"n\":case\"j\":{$&&e.ctrlKey&&ae(e);break}case\"ArrowDown\":{ae(e);break}case\"p\":case\"k\":{$&&e.ctrlKey&&se(e);break}case\"ArrowUp\":{se(e);break}case\"Home\":{e.preventDefault(),J(0);break}case\"End\":{e.preventDefault(),ie();break}case\"Enter\":if(!e.nativeEvent.isComposing&&e.keyCode!==229){e.preventDefault();let i=A();if(i){let a=new Event(Y);i.dispatchEvent(a)}}}}},n.createElement(\"label\",{\"cmdk-label\":\"\",htmlFor:q.inputId,id:q.labelId,style:Le},v),j(r,e=>n.createElement(de.Provider,{value:h},n.createElement(ue.Provider,{value:q},e))))}),ye=n.forwardRef((r,o)=>{var F,x;let t=L(),u=n.useRef(null),c=n.useContext(fe),d=K(),f=pe(r),p=(x=(F=f.current)==null?void 0:F.forceMount)!=null?x:c==null?void 0:c.forceMount;M(()=>{if(!p)return d.item(t,c==null?void 0:c.id)},[p]);let v=ve(t,u,[r.value,r.children,u],r.keywords),b=ee(),l=T(R=>R.value&&R.value===v.current),y=T(R=>p||d.filter()===!1?!0:R.search?R.filtered.items.get(t)>0:!0);n.useEffect(()=>{let R=u.current;if(!(!R||r.disabled))return R.addEventListener(Y,E),()=>R.removeEventListener(Y,E)},[y,r.onSelect,r.disabled]);function E(){var R,h;C(),(h=(R=f.current).onSelect)==null||h.call(R,v.current)}function C(){b.setState(\"value\",v.current,!0)}if(!y)return null;let{disabled:H,value:ge,onSelect:$,forceMount:O,keywords:te,...B}=r;return n.createElement(D.div,{ref:G([u,o]),...B,id:t,\"cmdk-item\":\"\",role:\"option\",\"aria-disabled\":!!H,\"aria-selected\":!!l,\"data-disabled\":!!H,\"data-selected\":!!l,onPointerMove:H||d.getDisablePointerSelection()?void 0:C,onClick:H?void 0:E},r.children)}),Se=n.forwardRef((r,o)=>{let{heading:t,children:u,forceMount:c,...d}=r,f=L(),p=n.useRef(null),v=n.useRef(null),b=L(),l=K(),y=T(C=>c||l.filter()===!1?!0:C.search?C.filtered.groups.has(f):!0);M(()=>l.group(f),[]),ve(f,p,[r.value,r.heading,v]);let E=n.useMemo(()=>({id:f,forceMount:c}),[c]);return n.createElement(D.div,{ref:G([p,o]),...d,\"cmdk-group\":\"\",role:\"presentation\",hidden:y?void 0:!0},t&&n.createElement(\"div\",{ref:v,\"cmdk-group-heading\":\"\",\"aria-hidden\":!0,id:b},t),j(r,C=>n.createElement(\"div\",{\"cmdk-group-items\":\"\",role:\"group\",\"aria-labelledby\":t?b:void 0},n.createElement(fe.Provider,{value:E},C))))}),Ee=n.forwardRef((r,o)=>{let{alwaysRender:t,...u}=r,c=n.useRef(null),d=T(f=>!f.search);return!t&&!d?null:n.createElement(D.div,{ref:G([c,o]),...u,\"cmdk-separator\":\"\",role:\"separator\"})}),Ce=n.forwardRef((r,o)=>{let{onValueChange:t,...u}=r,c=r.value!=null,d=ee(),f=T(l=>l.search),p=T(l=>l.value),v=K(),b=n.useMemo(()=>{var y;let l=(y=v.listInnerRef.current)==null?void 0:y.querySelector(`${Z}[${I}=\"${encodeURIComponent(p)}\"]`);return l==null?void 0:l.getAttribute(\"id\")},[]);return n.useEffect(()=>{r.value!=null&&d.setState(\"search\",r.value)},[r.value]),n.createElement(D.input,{ref:o,...u,\"cmdk-input\":\"\",autoComplete:\"off\",autoCorrect:\"off\",spellCheck:!1,\"aria-autocomplete\":\"list\",role:\"combobox\",\"aria-expanded\":!0,\"aria-controls\":v.listId,\"aria-labelledby\":v.labelId,\"aria-activedescendant\":b,id:v.inputId,type:\"text\",value:c?r.value:f,onChange:l=>{c||d.setState(\"search\",l.target.value),t==null||t(l.target.value)}})}),xe=n.forwardRef((r,o)=>{let{children:t,label:u=\"Suggestions\",...c}=r,d=n.useRef(null),f=n.useRef(null),p=K();return n.useEffect(()=>{if(f.current&&d.current){let v=f.current,b=d.current,l,y=new ResizeObserver(()=>{l=requestAnimationFrame(()=>{let E=v.offsetHeight;b.style.setProperty(\"--cmdk-list-height\",E.toFixed(1)+\"px\")})});return y.observe(v),()=>{cancelAnimationFrame(l),y.unobserve(v)}}},[]),n.createElement(D.div,{ref:G([d,o]),...c,\"cmdk-list\":\"\",role:\"listbox\",\"aria-label\":u,id:p.listId},j(r,v=>n.createElement(\"div\",{ref:G([f,p.listInnerRef]),\"cmdk-list-sizer\":\"\"},v)))}),Pe=n.forwardRef((r,o)=>{let{open:t,onOpenChange:u,overlayClassName:c,contentClassName:d,container:f,...p}=r;return n.createElement(w.Root,{open:t,onOpenChange:u},n.createElement(w.Portal,{container:f},n.createElement(w.Overlay,{\"cmdk-overlay\":\"\",className:c}),n.createElement(w.Content,{\"aria-label\":r.label,\"cmdk-dialog\":\"\",className:d},n.createElement(me,{ref:o,...p}))))}),we=n.forwardRef((r,o)=>T(u=>u.filtered.count===0)?n.createElement(D.div,{ref:o,...r,\"cmdk-empty\":\"\",role:\"presentation\"}):null),De=n.forwardRef((r,o)=>{let{progress:t,children:u,label:c=\"Loading...\",...d}=r;return n.createElement(D.div,{ref:o,...d,\"cmdk-loading\":\"\",role:\"progressbar\",\"aria-valuenow\":t,\"aria-valuemin\":0,\"aria-valuemax\":100,\"aria-label\":c},j(r,f=>n.createElement(\"div\",{\"aria-hidden\":!0},f)))}),Ve=Object.assign(me,{List:xe,Item:ye,Input:Ce,Group:Se,Separator:Ee,Dialog:Pe,Empty:we,Loading:De});function Ie(r,o){let t=r.nextElementSibling;for(;t;){if(t.matches(o))return t;t=t.nextElementSibling}}function Me(r,o){let t=r.previousElementSibling;for(;t;){if(t.matches(o))return t;t=t.previousElementSibling}}function pe(r){let o=n.useRef(r);return M(()=>{o.current=r}),o}var M=typeof window==\"undefined\"?n.useEffect:n.useLayoutEffect;function k(r){let o=n.useRef();return o.current===void 0&&(o.current=r()),o}function G(r){return o=>{r.forEach(t=>{typeof t==\"function\"?t(o):t!=null&&(t.current=o)})}}function T(r){let o=ee(),t=()=>r(o.snapshot());return Re(o.subscribe,t,t)}function ve(r,o,t,u=[]){let c=n.useRef(),d=K();return M(()=>{var v;let f=(()=>{var b;for(let l of t){if(typeof l==\"string\")return l.trim();if(typeof l==\"object\"&&\"current\"in l)return l.current?(b=l.current.textContent)==null?void 0:b.trim():c.current}})(),p=u.map(b=>b.trim());d.value(r,f,p),(v=o.current)==null||v.setAttribute(I,f),c.current=f}),c}var Te=()=>{let[r,o]=n.useState(),t=k(()=>new Map);return M(()=>{t.current.forEach(u=>u()),t.current=new Map},[r]),(u,c)=>{t.current.set(u,c),o({})}};function ke(r){let o=r.type;return typeof o==\"function\"?o(r.props):\"render\"in o?o.render(r.props):r}function j({asChild:r,children:o},t){return r&&n.isValidElement(o)?n.cloneElement(ke(o),{ref:o.ref},t(o.props.children)):t(o)}var Le={position:\"absolute\",width:\"1px\",height:\"1px\",padding:\"0\",margin:\"-1px\",overflow:\"hidden\",clip:\"rect(0, 0, 0, 0)\",whiteSpace:\"nowrap\",borderWidth:\"0\"};export{Ve as Command,Pe as CommandDialog,we as CommandEmpty,Se as CommandGroup,Ce as CommandInput,ye as CommandItem,xe as CommandList,De as CommandLoading,me as CommandRoot,Ee as CommandSeparator,he as defaultFilter,T as useCommandState};\n","import * as React from 'react'\nimport { type DialogProps } from '@radix-ui/react-dialog'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\nimport { Dialog, DialogContent } from 'src/lib/shadcn/ui/dialog'\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ntype CommandDialogProps = DialogProps\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <LazyIcon name=\"search\" className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 h-px bg-border', className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = 'CommandShortcut'\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","import * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { cn } from 'src/lib/utils'\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>\n      <LazyIcon name=\"check\" className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","export const OPEN_AI_MODELS = ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo']\nexport const GROQ_MODELS = [\n  'deepseek-r1-distill-llama-70b',\n  'llama-3.2-90b-vision-preview',\n  'llama-3.3-70b-versatile',\n  'llama-3.3-70b-specdec',\n  'llama3-70b-8192',\n  'gemma2-9b-it',\n  'llama3-8b-8192',\n  'mixtral-8x7b-32768',\n]\nexport const GROQ_VISION_MODELS = ['llama-3.2-90b-vision-preview']\nexport const GOOGLE_GENERATIVE_AI_MODELS = [\n  'gemini-2.0-flash-exp',\n  'gemini-1.5-flash',\n  'gemini-1.5-pro',\n  'gemini-1.5-flash-8b',\n]\nexport const GOOGLE_GENERATIVE_AI_API_KEY_LINK = 'https://aistudio.google.com/app/apikey'\nexport const OPEN_AI_API_KEY_LINK = 'https://platform.openai.com/api-keys'\nexport const GROQ_API_KEY_LINK = 'https://console.groq.com/keys'\n","import { LLMProviderEnum } from 'src/services/database/types'\n\nexport const SUPPORTED_PROVIDERS = [\n  LLMProviderEnum.WebLLM,\n  LLMProviderEnum.Wllama,\n  LLMProviderEnum.OpenAI,\n  LLMProviderEnum.GoogleGenerativeAI,\n  LLMProviderEnum.Groq,\n]\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from 'src/lib/shadcn/ui/dialog'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from 'src/lib/shadcn/ui/input-otp'\n\ntype CreateSessionPassphraseDialogProps = {\n  className: string\n  onConfirm: (newValue: string) => Promise<unknown>\n  onCancel: () => void\n}\n\nconst CreateSessionPassphraseDialog = create<CreateSessionPassphraseDialogProps>(\n  ({ onConfirm, onCancel }) => {\n    const currentModal = useModal()\n    const { t } = useTranslation('dialogs')\n    const [name, setName] = useState('')\n\n    const handleChangeOTP = (newValue: string) => {\n      setName(newValue)\n    }\n\n    const handleSubmit = async () => {\n      try {\n        if (name?.length !== 6) {\n          return\n        }\n        await onConfirm?.(name)\n        setName('')\n        currentModal.resolve(true)\n        currentModal.hide()\n      } catch (e) {\n        currentModal.reject(e)\n      }\n    }\n\n    const handleHide = () => {\n      onCancel?.()\n      setName('')\n      currentModal.resolve(false)\n      currentModal.hide()\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={handleHide}>\n        <DialogContent className=\"w-[330px]\">\n          <DialogHeader>\n            <DialogTitle>{t('create_session_passkey.title')}</DialogTitle>\n            <DialogDescription>{t('create_session_passkey.description')}</DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <InputOTP onChange={handleChangeOTP} maxLength={6}>\n              <InputOTPGroup>\n                <InputOTPSlot index={0} hidden />\n                <InputOTPSlot index={1} hidden />\n                <InputOTPSlot index={2} hidden />\n              </InputOTPGroup>\n              <InputOTPSeparator />\n              <InputOTPGroup>\n                <InputOTPSlot index={3} hidden />\n                <InputOTPSlot index={4} hidden />\n                <InputOTPSlot index={5} hidden />\n              </InputOTPGroup>\n            </InputOTP>\n          </div>\n          <DialogFooter>\n            <Button disabled={name?.length !== 6} onClick={handleSubmit} type=\"submit\">\n              {t('create_session_passkey.confirm')}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateSessionPassphraseDialog\n","import { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { encryptSymmetric, generatePassphrase } from 'src/utils/aes'\n\nexport const useUpdateSessionPassphrase = () => {\n  const [loading, setLoading] = useState(false)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const setCurrentSession = useSessionState((state) => state.setCurrentSession)\n\n  const updateSessionPassphrase = useCallback(\n    async (passkey: string) => {\n      if (!currentSession || !passkey) {\n        return\n      }\n      try {\n        setLoading(true)\n\n        const passphrase = await generatePassphrase()\n        const encrypted = await encryptSymmetric(passphrase, passkey)\n        await getRepository('Session').update(currentSession.id, {\n          passphrase: encrypted,\n        })\n        const session = await getRepository('Session').findOne({ where: { id: currentSession.id } })\n        if (session) {\n          setCurrentSession(session)\n        }\n        return {\n          passphrase,\n          encrypted,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [currentSession, setCurrentSession],\n  )\n\n  return {\n    loading,\n    updateSessionPassphrase,\n  }\n}\n","import { useCallback } from 'react'\nimport { useSessionState } from 'src/states/session'\nimport secureSession from 'src/utils/secure-session'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\nimport CreateSessionPassphraseDialog from 'src/components/dialogs/CreateSessionPassphraseDialog'\nimport { useUpdateSessionPassphrase } from 'src/hooks/mutations/use-update-session-passphrase'\nimport { useConfirmPassphrase } from './use-confirm-passphrase'\n\nexport const useConfirmOrCreatePassphrase = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { modalRef: createSessionPassphraseDialogRef } = useModalRef(CreateSessionPassphraseDialog)\n  const { updateSessionPassphrase } = useUpdateSessionPassphrase()\n  const { confirmPassphrase } = useConfirmPassphrase()\n\n  const confirmOrCreatePassphrase = useCallback(async () => {\n    if (!currentSession?.passphrase) {\n      let passkey = ''\n      await createSessionPassphraseDialogRef.current.show({\n        onConfirm: async (input: string) => {\n          passkey = input\n        },\n      })\n      if (!passkey) {\n        throw new Error('Passphrase is required')\n      }\n      const keyInfo = await updateSessionPassphrase(passkey)\n      if (!keyInfo) {\n        throw new Error('Failed to update session passphrase')\n      }\n      await secureSession.set('passphrase', keyInfo.passphrase)\n    } else {\n      await confirmPassphrase()\n    }\n    return secureSession.get('passphrase')\n  }, [\n    confirmPassphrase,\n    createSessionPassphraseDialogRef,\n    currentSession?.passphrase,\n    updateSessionPassphrase,\n  ])\n\n  return {\n    confirmOrCreatePassphrase,\n  }\n}\n","import { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useCreateLLM } from 'src/hooks/flows/mutations/use-create-llm'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { Popover, PopoverContent } from 'src/lib/shadcn/ui/popover'\nimport { PopoverTrigger } from '@radix-ui/react-popover'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from 'src/lib/shadcn/ui/command'\nimport { LLMModelTypeEnum, LLMProviderEnum } from 'src/services/database/types'\nimport { useLocalLLMState } from 'src/services/local-llm'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { RECOMMENDATION_LOCAL_LLMS } from 'src/constants/local-llm'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { Alert } from 'src/lib/shadcn/ui/alert'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { logError } from 'src/utils/logger'\nimport { useSessionState } from 'src/states/session'\nimport { encryptData } from 'src/utils/passphrase'\nimport { Checkbox } from 'src/lib/shadcn/ui/checkbox'\nimport {\n  GROQ_API_KEY_LINK,\n  GROQ_MODELS,\n  GROQ_VISION_MODELS,\n  OPEN_AI_API_KEY_LINK,\n  OPEN_AI_MODELS,\n  GOOGLE_GENERATIVE_AI_API_KEY_LINK,\n  GOOGLE_GENERATIVE_AI_MODELS,\n} from 'src/constants/llm'\n\nimport { SUPPORTED_PROVIDERS } from './constants'\nimport { useConfirmOrCreatePassphrase } from 'src/hooks/mutations/use-confirm-or-create-passphrase'\n\nfunction CreateLLMCard(props: NodeProps & { setDialog?: (value: boolean) => void }) {\n  const { id, setDialog } = props\n  const { t } = useTranslation('components')\n  const { toast } = useToast()\n  const node = useInternalNode(id)\n  const [loading, setLoading] = useState(false)\n  const [modelId, setModelId] = useState('')\n  const [open, setOpen] = useState(false)\n  const [search, setSearch] = useState('')\n  const [encryptedInfo, setEncryptedInfo] = useState<Record<string, string>>()\n  const [provider, setProvider] = useState<`${LLMProviderEnum}`>(LLMProviderEnum.WebLLM)\n  const [hasCache, setHasCache] = useState(false)\n  const [llmsInfo, setLLMsInfo] = useState<{\n    input?: string\n    modelList: ModelRecord[]\n    functionCallingModelIds: string[]\n  }>()\n  const llmInfoRef = useRef<{\n    input?: string\n    modelList: ModelRecord[]\n    functionCallingModelIds: string[]\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const syncCachedLLMURLs = useLocalLLMState((state) => state.syncCachedLLMURLs)\n  const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs)\n  const { loading: creatingLLM, createLLM } = useCreateLLM()\n\n  llmInfoRef.current = llmsInfo\n\n  const { confirmOrCreatePassphrase } = useConfirmOrCreatePassphrase()\n\n  useEffect(() => {\n    syncCachedLLMURLs()\n  }, [syncCachedLLMURLs])\n\n  const isRequiredSessionPasskey = useMemo(() => {\n    if (!modelId) return false\n    return ![LLMProviderEnum.WebLLM, LLMProviderEnum.Wllama].includes(provider as LLMProviderEnum)\n  }, [modelId, provider])\n\n  const modelList = useMemo(() => {\n    if (!llmsInfo?.functionCallingModelIds || !llmsInfo?.modelList) return []\n\n    const data = !search\n      ? llmsInfo?.modelList\n      : llmsInfo?.modelList.filter((model) =>\n          model.model_id.toLowerCase().includes(search.toLowerCase()),\n        )\n\n    return (data || []).sort((pre, next) => {\n      // Check if models are in cachedLLMURLs\n      const preInCache = cachedLLMURLs.some((item) => item.includes(pre.model_id))\n      const nextInCache = cachedLLMURLs.some((item) => item.includes(next.model_id))\n\n      // Prioritize models in cachedLLMURLs\n      if (preInCache && !nextInCache) {\n        return -1\n      }\n      if (!preInCache && nextInCache) {\n        return 1\n      }\n\n      const preInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(pre.model_id)\n      const nextInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(next.model_id)\n\n      // Prioritize models in RECOMMENDATION_LOCAL_LLMS\n      if (preInRecommended && !nextInRecommended) {\n        return -1\n      }\n      if (!preInRecommended && nextInRecommended) {\n        return 1\n      }\n\n      // Check if models are in functionCallingModelIds\n      const preInFunctionCalling = llmsInfo?.functionCallingModelIds.includes(pre.model_id)\n      const nextInFunctionCalling = llmsInfo?.functionCallingModelIds.includes(next.model_id)\n\n      // Prioritize models in functionCallingModelIds\n      if (preInFunctionCalling && !nextInFunctionCalling) {\n        return -1\n      }\n      if (!preInFunctionCalling && nextInFunctionCalling) {\n        return 1\n      }\n\n      // Compare buffer_size_required_bytes\n      if (\n        pre.vram_required_MB &&\n        next.vram_required_MB &&\n        pre.vram_required_MB !== next.vram_required_MB\n      ) {\n        return pre.vram_required_MB - next.vram_required_MB\n      }\n\n      return pre.model_id.localeCompare(next.model_id)\n    })\n  }, [llmsInfo?.modelList, llmsInfo?.functionCallingModelIds, search, cachedLLMURLs])\n\n  const selectedModel = useMemo<ModelRecord | undefined>(() => {\n    if (!modelId) return\n\n    switch (provider) {\n      case LLMProviderEnum.Wllama:\n        return llmsInfo?.modelList.find((model) => model.model_id === modelId)\n      case LLMProviderEnum.WebLLM:\n        return llmsInfo?.modelList && modelList.find((model) => model.model_id === modelId)\n      case LLMProviderEnum.Groq:\n        setEncryptedInfo({})\n        return {\n          model: modelId,\n          model_id: modelId,\n          model_type: GROQ_VISION_MODELS.includes(modelId) ? 2 : 0,\n          overrides: {},\n        } as ModelRecord\n      case LLMProviderEnum.OpenAI:\n        setEncryptedInfo({})\n        return {\n          model: modelId,\n          model_id: modelId,\n          model_type: 2,\n          overrides: {},\n        } as ModelRecord\n      case LLMProviderEnum.GoogleGenerativeAI:\n        setEncryptedInfo({})\n        return {\n          model: modelId,\n          model_id: modelId,\n          model_type: 2,\n          overrides: {},\n        } as ModelRecord\n    }\n  }, [modelId, llmsInfo?.modelList, modelList, provider])\n\n  useEffect(() => {\n    if (!selectedModel?.model_id || !cachedLLMURLs) return\n\n    setHasCache(cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)))\n  }, [cachedLLMURLs, selectedModel?.model_id])\n  useEffect(() => {\n    if (!currentSession?.id) return\n\n    setProvider(LLMProviderEnum.WebLLM)\n    setModelId('')\n    setSearch('')\n    setEncryptedInfo({})\n  }, [currentSession?.id])\n\n  const handleOnchange = useCallback((currentValue: string) => {\n    setModelId(currentValue)\n    setOpen(false)\n  }, [])\n  const handleSearchChange = useCallback((value: string) => {\n    setSearch(value)\n  }, [])\n  const handleOnSelectProvider = useCallback((value: `${LLMProviderEnum}`) => {\n    setProvider(value)\n    setModelId('')\n    setSearch('')\n    setEncryptedInfo({})\n  }, [])\n  const hanldeSubmit = async () => {\n    if (!node || !currentSession) return\n    try {\n      setLoading(true)\n      let encrypted: Record<string, unknown> | undefined\n\n      if (isRequiredSessionPasskey) {\n        const passphrase = await confirmOrCreatePassphrase()\n        if (!passphrase) {\n          throw new Error('Passphrase is not found')\n        }\n        encrypted = await encryptData(encryptedInfo || {}, passphrase)\n      }\n      await createLLM(node, {\n        name: modelId,\n        model_type: modelTypeToLLMType(selectedModel?.model_type),\n        function_calling: selectedModel?.model_id\n          ? llmsInfo?.functionCallingModelIds?.includes(selectedModel?.model_id)\n          : false,\n        encrypted,\n        provider,\n      })\n      setDialog?.(false)\n    } catch (error) {\n      logError('Create LLM', error)\n      toast({\n        variant: 'destructive',\n        description: t('add_llm_card.errors.failed_to_create'),\n      })\n    } finally {\n      setLoading(false)\n      setProvider(LLMProviderEnum.WebLLM)\n      setEncryptedInfo({})\n      setModelId('')\n      setSearch('')\n    }\n  }\n\n  useLayoutEffect(() => {\n    const getModelInfo = async () => {\n      try {\n        if (provider === LLMProviderEnum.Wllama) {\n          const [username, repo] = modelId?.split('/') || []\n          const repoInfo = `${username}/${repo}`\n          if (!modelId || !username || !repo) {\n            setLLMsInfo({\n              modelList: [],\n              functionCallingModelIds: [],\n            })\n            return\n          } else if (llmInfoRef.current?.input === repoInfo) {\n            return\n          }\n          const res = await fetch(`https://huggingface.co/api/models/${repoInfo}`)\n          const data: { siblings?: { rfilename: string }[] } = await res.json()\n          if (data.siblings) {\n            setLLMsInfo({\n              input: repoInfo,\n              modelList: data.siblings\n                .map((s) => s.rfilename)\n                .filter((f) => f.endsWith('.gguf'))\n                .map((item) => {\n                  return {\n                    model_id: `${repoInfo}/${item}`,\n                    model: `${repoInfo}/${item}`,\n                    model_lib: `${repoInfo}/${item}`,\n                    model_type: 0,\n                    overrides: {},\n                  }\n                }),\n              functionCallingModelIds: [],\n            })\n          } else {\n            setLLMsInfo({\n              modelList: [],\n              functionCallingModelIds: [],\n            })\n          }\n        } else if (provider === LLMProviderEnum.WebLLM) {\n          import('@mlc-ai/web-llm').then(async ({ functionCallingModelIds, prebuiltAppConfig }) => {\n            const modelList = prebuiltAppConfig.model_list\n            setLLMsInfo({ modelList, functionCallingModelIds })\n          })\n        }\n      } catch {\n        // TODO: handle error\n      }\n    }\n    getModelInfo()\n  }, [provider, modelId])\n\n  const modelTypeToLLMType = useCallback((modelType?: unknown) => {\n    if (modelType === 1) {\n      return LLMModelTypeEnum.embedding\n    }\n    if (modelType === 2) {\n      return LLMModelTypeEnum.VLM\n    }\n    return LLMModelTypeEnum.LLM\n  }, [])\n\n  const modelItems = useMemo(() => {\n    switch (provider) {\n      case LLMProviderEnum.Wllama:\n      case LLMProviderEnum.WebLLM:\n        return modelList.map((model) => (\n          <CommandItem key={model.model_id} value={model.model_id} onSelect={handleOnchange}>\n            {modelId === model.model_id ? (\n              <LazyIcon name=\"check\" className={'mr-2 h-4 w-4'} />\n            ) : (\n              <div className=\"mr-2 h-4 w-4\" />\n            )}\n            <span className=\"max-w-md\">\n              <div className=\"flex gap-2 mb-2\">\n                <LLMIcon name={model.model_id} />\n                {model.model_id}\n              </div>\n              <div className=\"flex max-w-full flex-wrap gap-1\">\n                <LLMInfo\n                  model={model}\n                  isFunctionCalling={\n                    llmsInfo?.functionCallingModelIds?.includes(model.model_id) || false\n                  }\n                  name={model.model_id}\n                  isCached={cachedLLMURLs.some((item) => item.includes(model.model_id)) || false}\n                  cloud={provider !== LLMProviderEnum.WebLLM}\n                />\n              </div>\n            </span>\n          </CommandItem>\n        ))\n      case LLMProviderEnum.OpenAI:\n        return OPEN_AI_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {modelId === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n      case LLMProviderEnum.GoogleGenerativeAI:\n        return GOOGLE_GENERATIVE_AI_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {modelId === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n      case LLMProviderEnum.Groq:\n        return GROQ_MODELS.map((model) => {\n          return (\n            <CommandItem key={model} value={model} onSelect={handleOnchange}>\n              {modelId === model ? (\n                <LazyIcon name=\"check\" className={'h-4 w-4'} />\n              ) : (\n                <div className=\"w-4\" />\n              )}\n              <span className=\"max-w-md\">\n                <div className=\"flex gap-3\">\n                  <LLMIcon name={model} />\n                  {model}\n                </div>\n              </span>\n            </CommandItem>\n          )\n        })\n    }\n    return\n  }, [\n    cachedLLMURLs,\n    handleOnchange,\n    modelId,\n    llmsInfo?.functionCallingModelIds,\n    modelList,\n    provider,\n  ])\n\n  const modelSelection = useMemo(() => {\n    if (provider === LLMProviderEnum.Wllama) {\n      const [username, repo] = modelId?.split('/') || []\n      return (\n        <>\n          <Alert variant=\"default\" className=\"mb-4\">\n            {t('add_llm_card.wllama_description')}\n          </Alert>\n          <Label>{t('add_llm_card.hugging_face_repo')}</Label>\n          {username && repo ? (\n            <div className=\"relative\">\n              <Input\n                value={`${username}/${repo}`}\n                disabled\n                placeholder={t('add_llm_card.hugging_face_repo_placeholder')}\n              />\n              <LazyIcon\n                onClick={() => setModelId('')}\n                name=\"x\"\n                className=\"h-4 w-4 absolute right-3 top-3 cursor-pointer\"\n              />\n            </div>\n          ) : (\n            <Input\n              value={username ? `${username}/${repo}` : ''}\n              onChange={(e) => setModelId(e.target.value)}\n              placeholder={t('add_llm_card.hugging_face_repo_placeholder')}\n            />\n          )}\n          <Label>{t('add_llm_card.model_name')}</Label>\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={open}\n                disabled={!username || !repo}\n                className=\"w-full justify-between max-w-full overflow-hidden\"\n              >\n                {modelId && selectedModel\n                  ? selectedModel?.model_id\n                  : t('add_llm_card.select_model_placeholder')}\n                <LazyIcon name=\"chevrons-up-down\" className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-full p-0\">\n              <Command>\n                <CommandInput\n                  onValueChange={handleSearchChange}\n                  placeholder={t('add_llm_card.search_placeholder')}\n                />\n                <CommandList>\n                  <CommandEmpty>{t('add_llm_card.no_model')}</CommandEmpty>\n                  <CommandGroup>{modelItems}</CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </>\n      )\n    }\n    return (\n      <>\n        <Label>{t('add_llm_card.model_name')}</Label>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={open}\n              className=\"w-full justify-between\"\n            >\n              {modelId ? selectedModel?.model_id : t('add_llm_card.select_model_placeholder')}\n              <LazyIcon name=\"chevrons-up-down\" className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-full p-0\">\n            <Command>\n              <CommandInput\n                onValueChange={handleSearchChange}\n                placeholder={t('add_llm_card.search_placeholder')}\n              />\n              <CommandList>\n                <CommandEmpty>{t('add_llm_card.no_model')}</CommandEmpty>\n                <CommandGroup>{modelItems}</CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n      </>\n    )\n  }, [modelId, provider, modelItems, open, setOpen, handleSearchChange])\n\n  const encryptedFields = useMemo(() => {\n    if (!isRequiredSessionPasskey) return undefined\n\n    switch (provider) {\n      case LLMProviderEnum.Groq:\n      case LLMProviderEnum.OpenAI:\n        return (\n          <>\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              {t('add_llm_card.alert.session_passkey')}\n            </Alert>\n            <div className=\"mt-4\">\n              <Label>{t('add_llm_card.encrypted_fields.api_key')}</Label>\n              <Button variant=\"link\" className=\"px-1\">\n                <a\n                  href={\n                    provider === LLMProviderEnum.OpenAI ? OPEN_AI_API_KEY_LINK : GROQ_API_KEY_LINK\n                  }\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ({provider === LLMProviderEnum.OpenAI ? OPEN_AI_API_KEY_LINK : GROQ_API_KEY_LINK})\n                </a>\n              </Button>\n              <Input\n                type=\"password\"\n                value={encryptedInfo?.key || ''}\n                onChange={(e) =>\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    key: e.target.value,\n                  }))\n                }\n              />\n            </div>\n          </>\n        )\n      case LLMProviderEnum.GoogleGenerativeAI:\n        return (\n          <>\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              {t('add_llm_card.alert.session_passkey')}\n            </Alert>\n            <div className=\"mt-4\">\n              <Label>{t('add_llm_card.encrypted_fields.api_key')}</Label>\n              <Button variant=\"link\" className=\"px-1\">\n                <a href={GOOGLE_GENERATIVE_AI_API_KEY_LINK} target=\"_blank\" rel=\"noreferrer\">\n                  ({GOOGLE_GENERATIVE_AI_API_KEY_LINK})\n                </a>\n              </Button>\n              <Input\n                type=\"password\"\n                value={encryptedInfo?.key || ''}\n                onChange={(e) =>\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    key: e.target.value,\n                  }))\n                }\n              />\n            </div>\n            <div className=\"mt-4 flex items-center\">\n              <Label>{t('add_llm_card.encrypted_fields.enabled_google_search_retreival')}</Label>\n              <Checkbox\n                checked={!!encryptedInfo?.enabled_google_search_retreival}\n                className=\"ml-2\"\n                onCheckedChange={(e) => {\n                  setEncryptedInfo((pre) => ({\n                    ...pre,\n                    enabled_google_search_retreival: !e ? '' : `true`,\n                  }))\n                }}\n              />\n            </div>\n          </>\n        )\n    }\n  }, [isRequiredSessionPasskey, provider, t, encryptedInfo])\n\n  return (\n    <Card className=\"max-w-lg\">\n      <CardHeader>\n        <CardTitle>{t('add_llm_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid w-full gap-1.5\">\n          <Label>{t('add_llm_card.provider')}</Label>\n          <Select value={provider} onValueChange={handleOnSelectProvider}>\n            <SelectTrigger className=\"w-full mb-4\">\n              <SelectValue placeholder={t('add_llm_card.provider_select_placeholder')} />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.values(SUPPORTED_PROVIDERS).map((item) => {\n                return (\n                  <SelectItem key={item} value={item}>\n                    {t(`add_llm_card.providers.${item.toLowerCase()}`)}\n                  </SelectItem>\n                )\n              })}\n            </SelectContent>\n          </Select>\n          {modelSelection}\n        </div>\n        {selectedModel ? (\n          <div className=\"mt-4\">\n            <div className=\"mt-4 text-sm text-muted-foreground center flex max-w-full flex-wrap gap-1\">\n              <LLMIcon name={selectedModel.model_id} className=\"mr-2\" />\n              <LLMInfo\n                model={selectedModel}\n                isFunctionCalling={\n                  llmsInfo?.functionCallingModelIds?.includes(selectedModel.model_id) || false\n                }\n                name={selectedModel.model_id}\n                isCached={\n                  cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)) || false\n                }\n                cloud={\n                  ![LLMProviderEnum.WebLLM, LLMProviderEnum.Wllama].includes(\n                    provider as LLMProviderEnum,\n                  )\n                }\n              />\n            </div>\n            <div className=\"mt-2 text-sm text-muted-foreground\">\n              <span className=\"font-bold mr-2\">{t('add_llm_card.model_url')}</span>\n              {selectedModel.model}\n            </div>\n            {selectedModel.model_lib ? (\n              <div className=\"mt-2 text-sm text-muted-foreground center flex\">\n                <span className=\"font-bold mr-2\">{t('add_llm_card.model_lib_url')}</span>\n                {selectedModel.model_lib}\n              </div>\n            ) : undefined}\n            {selectedModel.overrides && Object.keys(selectedModel.overrides)?.length ? (\n              <div className=\"mt-2 text-sm text-muted-foreground center flex\">\n                <span className=\"font-bold mr-2\">{t('add_llm_card.metadata')}</span>\n                {JSON.stringify(selectedModel.overrides)}\n              </div>\n            ) : undefined}\n          </div>\n        ) : null}\n        {encryptedFields}\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={creatingLLM || loading}\n          disabled={!modelId?.length}\n          onClick={hanldeSubmit}\n          className=\"w-full\"\n        >\n          {hasCache ? t('add_llm_card.button_add') : t('add_llm_card.button_download_and_add')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default CreateLLMCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  PromptTypeEnum,\n  Thread,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreatePrompt = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createPrompt = useCallback(\n    async (\n      source: Node,\n      options: {\n        content: string\n        prefix?: string\n        type?: `${PromptTypeEnum}`\n        role?: `${MessageRoleEnum}`\n        thread?: Thread\n      },\n    ) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const prompt = await getRepository('Prompt').save({\n          content: options.content,\n          prefix: options.prefix,\n          role: options.role || MessageRoleEnum.System,\n          status: MessageStatusEnum.Started,\n          session_id: sessionId,\n          type: options.type || PromptTypeEnum.Chat,\n        })\n        if (!prompt) {\n          throw new Error('Failed to save prompt')\n        }\n        const promptNode = await createOrUpdateFlowNode({\n          source_id: prompt.id,\n          source_type: 'Prompt',\n          node_type: FlowNodeTypeEnum.Prompt,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!promptNode) {\n          throw new Error('Failed to save prompt node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createPrompt,\n  }\n}\n","import { MessageRoleEnum, PromptTypeEnum } from 'src/services/database/types'\n\nexport const PROMPT_TYPES = {\n  [PromptTypeEnum.Chat]: {\n    label: 'add_prompt_card.prompt_types.chat',\n    value: PromptTypeEnum.Chat,\n  },\n  [PromptTypeEnum.FewShotExample]: {\n    label: 'add_prompt_card.prompt_types.few_shot_example',\n    value: PromptTypeEnum.FewShotExample,\n  },\n}\nexport const PROMPT_ROLES = {\n  [MessageRoleEnum.System]: {\n    label: 'add_prompt_card.prompt_roles.system',\n    value: MessageRoleEnum.System,\n  },\n  [MessageRoleEnum.Human]: {\n    label: 'add_prompt_card.prompt_roles.human',\n    value: MessageRoleEnum.Human,\n  },\n  [MessageRoleEnum.AI]: { label: 'add_prompt_card.prompt_roles.ai', value: MessageRoleEnum.AI },\n}\n","import { memo, useCallback, useState } from 'react'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { MessageRoleEnum, Prompt, PromptTypeEnum } from 'src/services/database/types'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { PROMPT_ROLES, PROMPT_TYPES } from './constants'\n\nconst PromptForm = memo(\n  ({\n    defaultPromptContent,\n    defaultPromptRole,\n    defaultPromptType,\n    hidePromptRole,\n    hidePromptType,\n    loading,\n    onSubmit,\n  }: {\n    onSubmit: (prompt: Partial<Prompt>) => Promise<unknown>\n    loading?: boolean\n    defaultPromptType?: `${PromptTypeEnum}`\n    defaultPromptRole?: `${MessageRoleEnum}`\n    defaultPromptContent?: string\n    hidePromptType?: boolean\n    hidePromptRole?: boolean\n  }) => {\n    const [input, setInput] = useState(defaultPromptContent || '')\n    const [promptType, setPromptType] = useState<`${PromptTypeEnum}`>(\n      defaultPromptType || PromptTypeEnum.Chat,\n    )\n    const [promptRole, setPromptRole] = useState<`${MessageRoleEnum}` | undefined>(\n      defaultPromptRole,\n    )\n    const [promptPrefix, setPromptPrefix] = useState('')\n\n    const { t } = useTranslation('components')\n\n    const handleOnchange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setInput(e.target.value)\n    }, [])\n\n    const handleOnchangePrefix = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setPromptPrefix(e.target.value)\n    }, [])\n\n    const handleOnSelectType = useCallback((value: `${PromptTypeEnum}`) => {\n      if (value === PromptTypeEnum.FewShotExample) {\n        setInput('Question: {input}\\nAnswer: {output}')\n      }\n      setPromptType(value)\n    }, [])\n\n    const handleOnSelectRole = useCallback((value: `${MessageRoleEnum}`) => {\n      setPromptRole(value)\n    }, [])\n\n    const handleSubmit = async () => {\n      const result = await onSubmit({\n        content: input,\n        role: promptRole,\n        prefix: promptPrefix,\n        type: promptType,\n      })\n      if (!result) {\n        return\n      }\n      setInput('')\n      setPromptRole(undefined)\n      setPromptType('chat')\n      setPromptPrefix('')\n    }\n\n    return (\n      <div>\n        <div className=\"grid w-full gap-1.5\">\n          {!hidePromptType ? (\n            <>\n              <Label>{t('add_prompt_card.prompt_type')}</Label>\n              <Select value={promptType} onValueChange={handleOnSelectType}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue placeholder={t('add_prompt_card.type_select_placeholder')} />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(PROMPT_TYPES).map((item) => {\n                    return (\n                      <SelectItem key={item.value} value={item.value}>\n                        {t(item.label)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {!hidePromptRole ? (\n            <>\n              <Label>{t('add_prompt_card.prompt_role')}</Label>\n              <Select value={promptRole} onValueChange={handleOnSelectRole}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue placeholder={t('add_prompt_card.role_select_placeholder')} />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(PROMPT_ROLES).map((item) => {\n                    return (\n                      <SelectItem key={item.value} value={item.value}>\n                        {t(item.label)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {promptType === PromptTypeEnum.FewShotExample && (\n            <>\n              <Label>{t('add_prompt_card.prompt_prefix')}</Label>\n              <Textarea\n                value={promptPrefix}\n                onChange={handleOnchangePrefix}\n                disabled={false}\n                className=\"h-20\"\n                placeholder={t('add_prompt_card.placeholder')}\n                id=\"message\"\n              />\n              <Label>{t('add_prompt_card.prompt_content')}</Label>\n              <div className=\"w-full border-0 text-gray-700 flex text-sm justify-end items-center\">\n                <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n                {t('add_prompt_card.few_shot_example_note')}\n              </div>\n            </>\n          )}\n          <Textarea\n            value={input}\n            onChange={handleOnchange}\n            disabled={false}\n            placeholder={t('add_prompt_card.placeholder')}\n            id=\"message\"\n          />\n        </div>\n        <div>\n          <LoadingButton\n            loading={loading}\n            disabled={!input?.length}\n            onClick={handleSubmit}\n            className=\"w-full mt-4\"\n          >\n            {t('add_prompt_card.button')}\n          </LoadingButton>\n        </div>\n      </div>\n    )\n  },\n)\n\nexport default PromptForm\n","import { memo } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Prompt, Thread } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { useCreatePrompt } from 'src/hooks/flows/mutations/use-create-prompt'\n\nimport PromptForm from './PromptForm'\n\nconst CreatePromptCard = memo(\n  (\n    props: Omit<NodeProps, 'data'> & {\n      data?: { ready?: boolean }\n      thread?: Thread\n      setDialog?: (value: boolean) => void\n    },\n  ) => {\n    const { id, thread, setDialog } = props\n\n    const { t } = useTranslation('components')\n    const { toast } = useToast()\n    const node = useInternalNode(id)\n    const { createPrompt, loading } = useCreatePrompt()\n\n    const handleSubmit = async (data: Partial<Prompt>) => {\n      if (node) {\n        try {\n          if (!data?.content) {\n            throw new Error('Prompt data is missing')\n          }\n          await createPrompt(node, {\n            ...data,\n            content: data.content,\n            thread,\n          })\n          setDialog?.(false)\n        } catch (error) {\n          toast({\n            variant: 'destructive',\n            title: `${error}`,\n          })\n        }\n      }\n    }\n\n    return (\n      <Card className=\"mw-full\">\n        <CardHeader>\n          <CardTitle>{t('add_prompt_card.title')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <PromptForm\n            onSubmit={handleSubmit}\n            loading={loading}\n            defaultPromptRole=\"system\"\n            defaultPromptType=\"chat\"\n          />\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default CreatePromptCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { SchemaItemType } from 'src/components/molecules/CreateSchemaCard/Field/type'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, SchemaItem } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { EntityType } from 'src/utils/orm-type'\nimport { generateUUID } from 'src/utils/uuid'\n\nexport const useCreateSchema = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const toSchemaItem = useCallback(\n    (\n      schemaId: string,\n      input: SchemaItemType[],\n      result: EntityType<SchemaItem>[],\n      parent?: string,\n    ) => {\n      if (!sessionId) {\n        return\n      }\n      for (const item of input) {\n        if (item.data?.length) {\n          toSchemaItem(schemaId, item.data, result, item.id)\n        } else {\n          result.push({\n            name: item.name,\n            type: item.type,\n            enum: item.enum ? JSON.stringify(item.enum) : '',\n            required: item.required,\n            description: item.description,\n            id: item.id || generateUUID(),\n            parent_id: parent,\n            schema_id: schemaId,\n            session_id: sessionId,\n          })\n        }\n      }\n      return result\n    },\n    [sessionId],\n  )\n\n  const createSchema = useCallback(\n    async (source: Node, input: SchemaItemType[]) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const schema = await getRepository('Schema').save({\n          name: 'Untitled Schema',\n          session_id: sessionId,\n        })\n        if (!schema) {\n          throw new Error('Failed to save schema')\n        }\n\n        const schemaItems = toSchemaItem(schema.id, input, [], undefined)\n        if (!schemaItems?.length) {\n          throw new Error('Failed to convert schema items')\n        }\n        await getRepository('SchemaItem').save(schemaItems)\n        const promptNode = await createOrUpdateFlowNode({\n          source_id: schema.id,\n          source_type: 'Schema',\n          node_type: FlowNodeTypeEnum.Schema,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!promptNode) {\n          throw new Error('Failed to save schema node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, toSchemaItem, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createSchema,\n  }\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Checkbox } from 'src/lib/shadcn/ui/checkbox'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport FieldList from './FieldList'\nimport { SchemaItemType } from './type'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { generateUUID } from 'src/utils/uuid'\n\nconst NewOrUpdateField = memo(\n  ({\n    setData,\n    data,\n    id,\n  }: {\n    id?: string\n    setData: (func: (data: SchemaItemType[]) => SchemaItemType[]) => void\n    data: SchemaItemType[]\n  }) => {\n    const { t } = useTranslation('components')\n    const [empty, setEmpty] = useState<SchemaItemType>({\n      name: '',\n      description: '',\n      type: 'string',\n      required: false,\n      data: [],\n    })\n\n    const currentRow = useMemo(() => {\n      return id ? data.find((item) => item.id === id) || empty : empty\n    }, [data, empty, id])\n\n    const handleChangeName = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value && !/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(e.target.value)) {\n          return\n        }\n        if (!id) {\n          setEmpty((item) => ({ ...item, name: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      name: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeDescription = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, description: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      description: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeType = useCallback(\n      (e: string) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, type: (e || 'string') as SchemaItemType['type'] }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      type: (e || '') as SchemaItemType['type'],\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeRequired = useCallback(\n      (e: string | boolean) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, required: !!e || false }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      required: !!e || false,\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleChangeEnum = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!id) {\n          setEmpty((item) => ({ ...item, enum: e.target.value || '' }))\n        } else {\n          setData((previous) => {\n            return [\n              ...previous.map((item) =>\n                item.id === id\n                  ? {\n                      ...item,\n                      enum: e.target.value || '',\n                    }\n                  : item,\n              ),\n            ]\n          })\n        }\n      },\n      [id, setData],\n    )\n\n    const handleAddNew = useCallback(() => {\n      if (data.find((item) => item.name === empty.name)) {\n        return toast({\n          variant: 'destructive',\n          content: 'Name already exists',\n        })\n      }\n      empty.id = generateUUID()\n      setData((items) => {\n        return [...items, { ...empty }]\n      })\n      setEmpty({\n        name: '',\n        description: '',\n        type: 'string',\n        required: false,\n        id: generateUUID(),\n        parent: id || undefined,\n        data: [],\n      })\n    }, [data, empty, setData, id])\n\n    const handleSetChildData = useCallback(\n      (func: (previous: SchemaItemType[]) => SchemaItemType[]) => {\n        setData((previousData) => {\n          return [\n            ...previousData.map((item) =>\n              item.id === id\n                ? {\n                    ...item,\n                    data: func(item.data || []),\n                  }\n                : item,\n            ),\n          ]\n        })\n      },\n      [id, setData],\n    )\n\n    const shouldShowChildData = ['object', 'array'].includes(currentRow.type)\n\n    return (\n      <div className=\"w-full p-1\">\n        <div>\n          <Label>{t('add_schema_card.field.name')}</Label>\n          <Input\n            id=\"name\"\n            onChange={handleChangeName}\n            placeholder={t('add_schema_card.field.name_placeholder')}\n            value={currentRow?.name || ''}\n          />\n        </div>\n        <div>\n          <Label>{t('add_schema_card.field.description')}</Label>\n          <Input\n            id=\"description\"\n            placeholder={t('add_schema_card.field.description_placeholder')}\n            onChange={handleChangeDescription}\n            value={currentRow?.description || ''}\n          />\n        </div>\n        <div>\n          <Label>{t('add_schema_card.field.type')}</Label>\n          <Select onValueChange={handleChangeType} value={currentRow?.type || ''}>\n            <SelectTrigger>\n              <SelectValue placeholder={t('add_schema_card.field.type_placeholder')} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"string\">{t('add_schema_card.types.string')}</SelectItem>\n              <SelectItem value=\"boolean\">{t('add_schema_card.types.boolean')}</SelectItem>\n              <SelectItem value=\"number\">{t('add_schema_card.types.number')}</SelectItem>\n              <SelectItem value=\"object\">{t('add_schema_card.types.object')}</SelectItem>\n              <SelectItem value=\"array\">{t('add_schema_card.types.array')}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex items-center h-10\">\n          <Label>{t('add_schema_card.field.required')}</Label>\n          <Checkbox\n            className=\"ml-2\"\n            aria-label=\"Select row\"\n            onCheckedChange={handleChangeRequired}\n            checked={currentRow?.required}\n          />\n        </div>\n        {shouldShowChildData ? (\n          <div className=\"mt-2 flex flex-col gap-2\">\n            <Label>{t('add_schema_card.children')}</Label>\n            <FieldList data={currentRow?.data || []} setData={handleSetChildData} />\n          </div>\n        ) : null}\n        {currentRow?.type === 'enum' ? (\n          <div className=\"mt-2 flex flex-col gap-2\">\n            <Label>{t('add_schema_card.field.enum')}</Label>\n            <Input id=\"enum\" onChange={handleChangeEnum} placeholder=\"Enum\" />\n          </div>\n        ) : null}\n        {!id ? (\n          <div className=\"w-full flex justify-end mt-2\">\n            <Button\n              variant=\"secondary\"\n              disabled={!currentRow.name || !currentRow.description || !currentRow.type}\n              onClick={handleAddNew}\n              className=\"w-full\"\n            >\n              {t('add_schema_card.field.add_field')}\n            </Button>\n          </div>\n        ) : null}\n      </div>\n    )\n  },\n)\n\nexport default NewOrUpdateField\n","// import { z } from 'zod'\nimport { memo } from 'react'\nimport { SchemaItemType } from './type'\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from 'src/lib/shadcn/ui/accordion'\nimport { Card } from 'src/lib/shadcn/ui/card'\nimport NewOrUpdateField from './NewOrUpdateField'\n\nconst FieldList = memo(\n  ({\n    data,\n    setData,\n  }: {\n    data: SchemaItemType[]\n    setData: (func: (data: SchemaItemType[]) => SchemaItemType[]) => void\n  }) => {\n    return (\n      <Accordion type=\"single\" collapsible>\n        {data.map((row) => {\n          return (\n            <AccordionItem key={row.id || 'new'} value={`${row.id}`}>\n              <AccordionTrigger>{row.name}</AccordionTrigger>\n              <AccordionContent>\n                <NewOrUpdateField setData={setData} data={data} id={row.id} />\n              </AccordionContent>\n            </AccordionItem>\n          )\n        })}\n        <Card className=\"p-2 mt-4\">\n          <NewOrUpdateField setData={setData} data={data} />\n        </Card>\n      </Accordion>\n    )\n  },\n)\n\nexport default FieldList\n","import { memo, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport { useCreateSchema } from 'src/hooks/flows/mutations/use-create-schema'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { SchemaItemType } from './Field/type'\nimport FieldList from './Field/FieldList'\n\nconst CreateSchemaCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { id } = props\n  const node = useInternalNode(id)\n\n  const [data, setData] = useState<SchemaItemType[]>([])\n\n  const { createSchema, loading } = useCreateSchema()\n\n  const handleSubmit = async () => {\n    if (node && data?.length) {\n      try {\n        await createSchema(node, data)\n        setData([])\n      } catch (error) {\n        toast({\n          variant: 'destructive',\n          title: `${error}`,\n        })\n      }\n    }\n  }\n  return (\n    <Card className=\"max-w-lg\">\n      <CardHeader>\n        <CardTitle>{t('add_schema_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"min-w-96\">\n        <FieldList setData={setData} data={data} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleSubmit}\n          className=\"w-full\"\n        >\n          {t('add_schema_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateSchemaCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { encodeCSVData } from 'src/utils/string-data'\n\nexport const useCreateCSVData = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createCSVData = useCallback(\n    async (source: Node, headers: string[], data: string[][]) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const encodedData = encodeCSVData(headers, data)\n        const csvData = await getRepository('CSVData').save({\n          headers: encodedData.headers,\n          csv: encodedData.data,\n          session_id: sessionId,\n        })\n        if (!csvData) {\n          throw new Error('Failed to save')\n        }\n        const dataNode = await createOrUpdateFlowNode({\n          source_id: csvData.id,\n          source_type: 'CSVData',\n          node_type: FlowNodeTypeEnum.CSVData,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!dataNode) {\n          throw new Error('Failed to save node')\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode],\n  )\n\n  return {\n    loading,\n    createCSVData,\n  }\n}\n","import { useTranslation } from 'react-i18next'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'src/lib/shadcn/ui/table'\n\nexport function ExampleTable({ data }: { data: { input: string; output: string }[] }) {\n  const { t } = useTranslation('components')\n  return (\n    <Table className=\"w-full\">\n      <TableHeader>\n        <TableRow>\n          <TableHead>{t('add_few_shot_example_card.input')}</TableHead>\n          <TableHead>{t('add_few_shot_example_card.output')}</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {data?.map((item, index) => (\n          <TableRow key={`${item.input}_${item.output}_${index}`}>\n            <TableCell className=\"p-4\">{item.input}</TableCell>\n            <TableCell className=\"p-4\">{item.output}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useCreateCSVData } from 'src/hooks/flows/mutations/use-create-csv-data'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { ExampleTable } from './ExampleTable'\n\nconst CreateFewShotExampleCard = memo((props: NodeProps) => {\n  const { id } = props\n  const { t } = useTranslation('components')\n  const [data, setData] = useState<{ input: string; output: string }[]>([])\n  const [input, setInput] = useState('')\n  const [output, setOutput] = useState('')\n  const node = useInternalNode(id)\n  const { createCSVData, loading } = useCreateCSVData()\n\n  const handleAdd = () => {\n    setData((prevData) => [...prevData, { input, output }])\n    setInput('')\n    setOutput('')\n  }\n  const handleCreateCSVData = async () => {\n    if (node) {\n      await createCSVData(\n        node,\n        ['input', 'output'],\n        data.map((item) => [item.input, item.output]),\n      )\n    }\n  }\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_few_shot_example_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5\">\n          <Label htmlFor=\"name\">{t('add_few_shot_example_card.input')}</Label>\n          <Input\n            value={input}\n            onChange={(e) => setInput(e.target.value || '')}\n            id=\"name\"\n            placeholder={t('add_few_shot_example_card.input_placeholder')}\n          />\n        </div>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_few_shot_example_card.output')}</Label>\n          <Textarea\n            value={output}\n            onChange={(e) => setOutput(e.target.value || '')}\n            placeholder={t('add_few_shot_example_card.output_placeholder')}\n          />\n        </div>\n        <div className=\"w-full flex mt-4 justify-end\">\n          <Button disabled={!input || !output} onClick={handleAdd} className=\"w-40\">\n            {t('add_few_shot_example_card.add')}\n          </Button>\n        </div>\n        <ExampleTable data={data || []} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleCreateCSVData}\n          className=\"w-full\"\n        >\n          {t('add_few_shot_example_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateFewShotExampleCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, ToolDefinition } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateTool = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createTool = useCallback(\n    async (\n      source: Node,\n      data: Partial<ToolDefinition>,\n      options?: {\n        schemaNode?: Node\n      },\n    ) => {\n      try {\n        if (!source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        if (!data.name || !data.description) {\n          throw new Error('Name is required')\n        }\n        setLoading(true)\n        // This is node thead replaced with message node\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const tool = await getRepository('ToolDefinition').save({\n          ...data,\n          name: `${data.name}`,\n          description: `${data.description}`,\n          session_id: sessionId,\n        })\n        if (!tool) {\n          throw new Error('Failed create tool.')\n        }\n        const toolNode = await createOrUpdateFlowNode({\n          source_id: tool.id,\n          source_type: 'ToolDefinition',\n          node_type: FlowNodeTypeEnum.ToolDefinition,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!toolNode) {\n          throw new Error('Failed to save node')\n        }\n        if (options?.schemaNode) {\n          await createOrUpdateFlowEdge({\n            source: options.schemaNode.id,\n            target: toolNode.id,\n          })\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createTool,\n  }\n}\n","import { memo, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { useCreateTool } from 'src/hooks/flows/mutations/use-create-tool'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { logWarn } from 'src/utils/logger'\n\nconst CreateToolCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { toast } = useToast()\n  const { id } = props\n  const node = useInternalNode(id)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n\n  const { createTool, loading } = useCreateTool()\n\n  const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n\n  const handleChangeDescription = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setDescription(e.target.value)\n  }\n\n  const handleSubmit = async () => {\n    if (node && name && description) {\n      try {\n        await createTool(node, { name, description })\n        setName('')\n        setDescription('')\n      } catch (error) {\n        logWarn('Create Tool', error)\n        toast({\n          variant: 'destructive',\n          title: t('add_tool_card.errors.create_tool_failed'),\n        })\n      }\n    }\n  }\n\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_tool_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5\">\n          <Label htmlFor=\"name\">{t('add_tool_card.tool_name')}</Label>\n          <Input\n            onChange={handleChangeName}\n            id=\"name\"\n            placeholder={t('add_tool_card.name_placeholder')}\n          />\n        </div>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_tool_card.tool_description')}</Label>\n          <Textarea\n            onChange={handleChangeDescription}\n            placeholder={t('add_tool_card.description_placeholder')}\n          />\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton loading={loading} onClick={handleSubmit} className=\"w-full\">\n          {t('add_tool_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateToolCard\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  VectorDatabase,\n  VectorDatabaseProviderEnum,\n  VectorDatabaseStorageEnum,\n  VectorDatabaseTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\nimport { encodeSplitter } from 'src/utils/string-data'\n\nexport const useCreateVectorDatabase = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createVectorDatabase = useCallback(\n    async (\n      source: Node,\n      data: Partial<VectorDatabase>,\n      textSplitter?: {\n        type: string\n        chunkSize: number\n        chunkOverlap: number\n      },\n    ) => {\n      try {\n        if (!data?.name || !source || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const vectorDatabase = await getRepository('VectorDatabase').save({\n          ...data,\n          name: `${data.name}`,\n          type: data.type || VectorDatabaseTypeEnum.Local,\n          storage: data.storage || VectorDatabaseStorageEnum.DatabaseNode,\n          raw: '',\n          provider: data.provider || VectorDatabaseProviderEnum.Memory,\n          session_id: sessionId,\n          metadata: textSplitter ? JSON.stringify({ textSplitter }) : undefined,\n        })\n\n        if (!vectorDatabase) {\n          throw new Error('Failed to save vectorDatabase')\n        }\n\n        const vectorDatabaseNode = await createOrUpdateFlowNode({\n          source_id: vectorDatabase.id,\n          source_type: 'VectorDatabase',\n          node_type: FlowNodeTypeEnum.VectorDatabase,\n          x: initialX,\n          y: initialY + 30,\n        })\n        if (!vectorDatabaseNode) {\n          throw new Error('Failed to save vectorDatabase node')\n        }\n\n        if (data.storage === VectorDatabaseStorageEnum.DataNode) {\n          // Default JSONLData source\n          const databaseSource = await getRepository('JSONLData').save({\n            headers: encodeSplitter(['content', 'embedding', 'metadata']),\n            jsonl: '',\n            session_id: sessionId,\n          })\n          if (!databaseSource) {\n            throw new Error('Failed to save databaseSource')\n          }\n          const databaseSourceNode = await createOrUpdateFlowNode({\n            source_id: databaseSource.id,\n            source_type: 'JSONLData',\n            node_type: FlowNodeTypeEnum.JSONLData,\n            x: initialX + 80,\n            y: initialY + 30,\n          })\n          if (!databaseSourceNode) {\n            throw new Error('Failed to save databaseSource node')\n          }\n\n          await createOrUpdateFlowEdge({\n            source: databaseSourceNode.id,\n            target: vectorDatabaseNode.id,\n          })\n        }\n\n        return {\n          vectorDatabase,\n          vectorDatabaseNode,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createVectorDatabase,\n  }\n}\n","import { VectorDatabaseProviderEnum, VectorDatabaseStorageEnum } from 'src/services/database/types'\n\nexport const SUPPORTED_VECTOR_DATABASE_PROVIDERS = [VectorDatabaseProviderEnum.Memory]\n\nexport const SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE = [VectorDatabaseStorageEnum.DatabaseNode]\n\nexport const SUPPORTED_TEXT_SPLITTERS = [\n  'TokenTextSplitter',\n  'CharacterTextSplitter',\n  'RecursiveCharacterTextSplitter',\n]\n","import { memo, useCallback, useState } from 'react'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { VectorDatabaseProviderEnum, VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useCreateVectorDatabase } from 'src/hooks/flows/mutations/use-create-vector-database'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport {\n  SUPPORTED_TEXT_SPLITTERS,\n  SUPPORTED_VECTOR_DATABASE_PROVIDERS,\n  SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE,\n} from './constants'\n\nconst CreateVectorDatabaseCard = memo((props: NodeProps) => {\n  const { t } = useTranslation('components')\n  const { id } = props\n  const node = useInternalNode(id)\n  const { toast } = useToast()\n  const [name, setName] = useState('')\n  const [provider, setProvider] = useState<`${VectorDatabaseProviderEnum}`>(\n    SUPPORTED_VECTOR_DATABASE_PROVIDERS[0],\n  )\n  const [storageType, setStorageType] = useState<`${VectorDatabaseStorageEnum}`>(\n    SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE[0],\n  )\n  const [textSplitter, setTextSplitter] = useState<{\n    type?: string\n    chunkSize?: number\n    chunkOverlap?: number\n  }>({})\n  const { loading, createVectorDatabase } = useCreateVectorDatabase()\n\n  const handleOnSelectProvider = useCallback((value: `${VectorDatabaseProviderEnum}`) => {\n    setProvider(value)\n  }, [])\n\n  const handleOnSelectStorageType = useCallback((value: `${VectorDatabaseStorageEnum}`) => {\n    setStorageType(value)\n  }, [])\n\n  const handleOnSelectTextSplitter = useCallback((value: string) => {\n    setTextSplitter((prev) => ({ ...prev, type: value, chunkSize: 500, chunkOverlap: 40 }))\n  }, [])\n\n  const handleOnChangeName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value || '')\n  }, [])\n\n  const handleOnChangeChunkSize = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextSplitter((prev) => ({ ...prev, chunkSize: Number(e.target.value) }))\n  }, [])\n\n  const handleOnChangeChunkOverlap = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextSplitter((prev) => ({ ...prev, chunkOverlap: Number(e.target.value) }))\n  }, [])\n\n  const handleSubmit = async () => {\n    try {\n      if (!node) {\n        return\n      }\n      await createVectorDatabase(\n        node,\n        {\n          name,\n          provider,\n          storage: storageType,\n        },\n        textSplitter?.type\n          ? {\n              type: textSplitter.type,\n              chunkSize: textSplitter.chunkSize || 500,\n              chunkOverlap: textSplitter.chunkOverlap || 0,\n            }\n          : undefined,\n      )\n      setName('')\n      setTextSplitter({})\n    } catch {\n      toast({\n        variant: 'destructive',\n        description: t('create_vector_database_card.errors.create_failed'),\n      })\n    }\n  }\n\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('create_vector_database_card.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid w-full gap-1.5\">\n          <Label>{t('create_vector_database_card.name')}</Label>\n          <Input className=\"mb-4\" value={name} onChange={handleOnChangeName} />\n          {SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE?.length > 1 ? (\n            <>\n              <Label>{t('create_vector_database_card.storage_type')}</Label>\n              <Select value={storageType} onValueChange={handleOnSelectStorageType}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue\n                    placeholder={t('create_vector_database_card.provider_select_placeholder')}\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE).map((item) => {\n                    return (\n                      <SelectItem key={item} value={item}>\n                        {t(`create_vector_database_card.storage_types.${item.toLowerCase()}`)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          {SUPPORTED_VECTOR_DATABASE_PROVIDERS?.length > 1 ? (\n            <>\n              <Label>{t('create_vector_database_card.provider')}</Label>\n              <Select value={provider} onValueChange={handleOnSelectProvider}>\n                <SelectTrigger className=\"w-full mb-4\">\n                  <SelectValue\n                    placeholder={t('create_vector_database_card.provider_select_placeholder')}\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(SUPPORTED_VECTOR_DATABASE_PROVIDERS).map((item) => {\n                    return (\n                      <SelectItem key={item} value={item}>\n                        {t(`create_vector_database_card.providers.${item.toLowerCase()}`)}\n                      </SelectItem>\n                    )\n                  })}\n                </SelectContent>\n              </Select>\n            </>\n          ) : undefined}\n          <Label>{t('create_vector_database_card.text_splitter')}</Label>\n          <Select value={textSplitter.type} onValueChange={handleOnSelectTextSplitter}>\n            <SelectTrigger className=\"w-full mb-4\">\n              <SelectValue\n                placeholder={t('create_vector_database_card.text_splitter_select_placeholder')}\n              />\n            </SelectTrigger>\n            <SelectContent>\n              {Object.values(SUPPORTED_TEXT_SPLITTERS).map((item) => {\n                return (\n                  <SelectItem key={item} value={item}>\n                    {t(`create_vector_database_card.text_splitters.${item.toLowerCase()}`)}\n                  </SelectItem>\n                )\n              })}\n            </SelectContent>\n          </Select>\n          {textSplitter.type ? (\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {t('create_vector_database_card.text_splitter_configuration')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Label>{t('create_vector_database_card.text_splitter_chunksize')}</Label>\n                <Input\n                  value={textSplitter.chunkSize}\n                  onChange={handleOnChangeChunkSize}\n                  placeholder={t('create_vector_database_card.text_splitter_chunksize_placeholder')}\n                />\n                <Label>{t('create_vector_database_card.text_splitter_chunkoverlap')}</Label>\n                <Input\n                  value={textSplitter.chunkOverlap}\n                  onChange={handleOnChangeChunkOverlap}\n                  placeholder={t(\n                    'create_vector_database_card.text_splitter_chunkoverlap_placeholder',\n                  )}\n                />\n              </CardContent>\n            </Card>\n          ) : undefined}\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          disabled={!textSplitter.type || !name}\n          loading={loading}\n          onClick={handleSubmit}\n          className=\"w-full\"\n        >\n          {t('create_vector_database_card.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateVectorDatabaseCard\n","import { useTranslation } from 'react-i18next'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from 'src/lib/shadcn/ui/table'\n\nexport function DataTable({ data }: { data: { text: string }[] }) {\n  const { t } = useTranslation('components')\n  return (\n    <Table className=\"w-full\">\n      <TableHeader>\n        <TableRow>\n          <TableHead>{t('add_text_data.text')}</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {data?.map((item, index) => (\n          <TableRow key={`${item.text}_${index}`}>\n            <TableCell className=\"p-4\">{item.text}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Textarea } from 'src/lib/shadcn/ui/textarea'\nimport { NodeProps, useInternalNode } from '@xyflow/react'\nimport { useCreateCSVData } from 'src/hooks/flows/mutations/use-create-csv-data'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { DataTable } from './DataTable'\n\nconst CreateTextDataCard = memo((props: NodeProps) => {\n  const { id } = props\n  const { t } = useTranslation('components')\n  const [data, setData] = useState<{ text: string }[]>([])\n  const [text, setText] = useState('')\n  const node = useInternalNode(id)\n  const { createCSVData, loading } = useCreateCSVData()\n\n  const handleAdd = () => {\n    setData((prevData) => [...prevData, { text }])\n    setText('')\n  }\n  const handleCreateCSVData = async () => {\n    if (node) {\n      await createCSVData(\n        node,\n        ['text'],\n        data.map((item) => [item.text]),\n      )\n    }\n  }\n  return (\n    <Card className=\"mw-full\">\n      <CardHeader>\n        <CardTitle>{t('add_text_data.title')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex flex-col space-y-1.5 mt-3\">\n          <Label htmlFor=\"name\">{t('add_text_data.text')}</Label>\n          <Textarea\n            value={text}\n            onChange={(e) => setText(e.target.value || '')}\n            placeholder={t('add_text_data.text_placeholder')}\n          />\n        </div>\n        <div className=\"w-full flex mt-4 justify-end\">\n          <Button disabled={!text} onClick={handleAdd} className=\"w-40\">\n            {t('add_text_data.add')}\n          </Button>\n        </div>\n        <DataTable data={data || []} />\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        <LoadingButton\n          loading={loading}\n          disabled={!data?.length}\n          onClick={handleCreateCSVData}\n          className=\"w-full\"\n        >\n          {t('add_text_data.create')}\n        </LoadingButton>\n      </CardFooter>\n    </Card>\n  )\n})\n\nexport default CreateTextDataCard\n","export enum SupportedAddNodeEnum {\n  ADD_LLM = 'ADD_LLM',\n  ADD_PROMPT = 'ADD_PROMPT',\n  ADD_TOOL_DEFINITION = 'ADD_TOOL_DEFINITION',\n  ADD_SCHEMA = 'ADD_SCHEMA',\n  ADD_FEW_SHOT_EXAMPLE = 'ADD_FEW_SHOT_EXAMPLE',\n  ADD_VECTOR_DATABASE = 'ADD_VECTOR_DATABASE',\n  ADD_TEXT_DATA = 'ADD_TEXT_DATA',\n}\nexport const SUPPORTED_MODES = [\n  SupportedAddNodeEnum.ADD_LLM,\n  SupportedAddNodeEnum.ADD_PROMPT,\n  SupportedAddNodeEnum.ADD_SCHEMA,\n  SupportedAddNodeEnum.ADD_VECTOR_DATABASE,\n  {\n    key: 'more',\n    label: 'more',\n    icon: 'ellipsis' as const,\n    children: [SupportedAddNodeEnum.ADD_TOOL_DEFINITION, SupportedAddNodeEnum.ADD_FEW_SHOT_EXAMPLE],\n  },\n]\n","import React, { ReactNode, useEffect, useRef } from 'react'\n\nexport interface BaseParticle {\n  element: HTMLElement | SVGSVGElement\n  left: number\n  size: number\n  top: number\n}\n\nexport interface BaseParticleOptions {\n  particle?: string\n  size?: number\n}\n\nexport interface CoolParticle extends BaseParticle {\n  direction: number\n  speedHorz: number\n  speedUp: number\n  spinSpeed: number\n  spinVal: number\n}\n\nexport interface CoolParticleOptions extends BaseParticleOptions {\n  particleCount?: number\n  speedHorz?: number\n  speedUp?: number\n}\n\nconst getContainer = () => {\n  const id = '_coolMode_effect'\n  const existingContainer = document.getElementById(id)\n\n  if (existingContainer) {\n    return existingContainer\n  }\n\n  const container = document.createElement('div')\n  container.setAttribute('id', id)\n  container.setAttribute(\n    'style',\n    'overflow:hidden; position:fixed; height:100%; top:0; left:0; right:0; bottom:0; pointer-events:none; z-index:2147483647',\n  )\n\n  document.body.appendChild(container)\n\n  return container\n}\n\nlet instanceCounter = 0\n\nconst applyParticleEffect = (element: HTMLElement, options?: CoolParticleOptions): (() => void) => {\n  instanceCounter++\n\n  const defaultParticle = 'circle'\n  const particleType = options?.particle || defaultParticle\n  const sizes = [15, 20, 25, 35, 45]\n  const limit = 45\n\n  let particles: CoolParticle[] = []\n  let autoAddParticle = false\n  let mouseX = 0\n  let mouseY = 0\n\n  const container = getContainer()\n\n  function generateParticle() {\n    const size = options?.size || sizes[Math.floor(Math.random() * sizes.length)]\n    const speedHorz = options?.speedHorz || Math.random() * 10\n    const speedUp = options?.speedUp || Math.random() * 25\n    const spinVal = Math.random() * 360\n    const spinSpeed = Math.random() * 35 * (Math.random() <= 0.5 ? -1 : 1)\n    const top = mouseY - size / 2\n    const left = mouseX - size / 2\n    const direction = Math.random() <= 0.5 ? -1 : 1\n\n    const particle = document.createElement('div')\n\n    if (particleType === 'circle') {\n      const svgNS = 'http://www.w3.org/2000/svg'\n      const circleSVG = document.createElementNS(svgNS, 'svg')\n      const circle = document.createElementNS(svgNS, 'circle')\n      circle.setAttributeNS(null, 'cx', (size / 2).toString())\n      circle.setAttributeNS(null, 'cy', (size / 2).toString())\n      circle.setAttributeNS(null, 'r', (size / 2).toString())\n      circle.setAttributeNS(null, 'fill', `hsl(${Math.random() * 360}, 70%, 50%)`)\n\n      circleSVG.appendChild(circle)\n      circleSVG.setAttribute('width', size.toString())\n      circleSVG.setAttribute('height', size.toString())\n\n      particle.appendChild(circleSVG)\n    } else {\n      particle.innerHTML = `<img src=\"${particleType}\" width=\"${size}\" height=\"${size}\" style=\"border-radius: 50%\">`\n    }\n\n    particle.style.position = 'absolute'\n    particle.style.transform = `translate3d(${left}px, ${top}px, 0px) rotate(${spinVal}deg)`\n\n    container.appendChild(particle)\n\n    particles.push({\n      direction,\n      element: particle,\n      left,\n      size,\n      speedHorz,\n      speedUp,\n      spinSpeed,\n      spinVal,\n      top,\n    })\n  }\n\n  function refreshParticles() {\n    particles.forEach((p) => {\n      p.left = p.left - p.speedHorz * p.direction\n      p.top = p.top - p.speedUp\n      p.speedUp = Math.min(p.size, p.speedUp - 1)\n      p.spinVal = p.spinVal + p.spinSpeed\n\n      if (p.top >= Math.max(window.innerHeight, document.body.clientHeight) + p.size) {\n        particles = particles.filter((o) => o !== p)\n        p.element.remove()\n      }\n\n      p.element.setAttribute(\n        'style',\n        [\n          'position:absolute',\n          'will-change:transform',\n          `top:${p.top}px`,\n          `left:${p.left}px`,\n          `transform:rotate(${p.spinVal}deg)`,\n        ].join(';'),\n      )\n    })\n  }\n\n  let animationFrame: number | undefined\n\n  let lastParticleTimestamp = 0\n  const particleGenerationDelay = 30\n\n  function loop() {\n    const currentTime = performance.now()\n    if (\n      autoAddParticle &&\n      particles.length < limit &&\n      currentTime - lastParticleTimestamp > particleGenerationDelay\n    ) {\n      generateParticle()\n      lastParticleTimestamp = currentTime\n    }\n\n    refreshParticles()\n    animationFrame = requestAnimationFrame(loop)\n  }\n\n  loop()\n\n  const isTouchInteraction = 'ontouchstart' in window\n\n  const tap = isTouchInteraction ? 'touchstart' : 'mousedown'\n  const tapEnd = isTouchInteraction ? 'touchend' : 'mouseup'\n  const move = isTouchInteraction ? 'touchmove' : 'mousemove'\n\n  const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n    if ('touches' in e) {\n      mouseX = e.touches?.[0].clientX\n      mouseY = e.touches?.[0].clientY\n    } else {\n      mouseX = e.clientX\n      mouseY = e.clientY\n    }\n  }\n\n  const tapHandler = (e: MouseEvent | TouchEvent) => {\n    updateMousePosition(e)\n    autoAddParticle = true\n  }\n\n  const disableAutoAddParticle = () => {\n    autoAddParticle = false\n  }\n\n  element.addEventListener(move, updateMousePosition, { passive: true })\n  element.addEventListener(tap, tapHandler, { passive: true })\n  element.addEventListener(tapEnd, disableAutoAddParticle, { passive: true })\n  element.addEventListener('mouseleave', disableAutoAddParticle, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener(move, updateMousePosition)\n    element.removeEventListener(tap, tapHandler)\n    element.removeEventListener(tapEnd, disableAutoAddParticle)\n    element.removeEventListener('mouseleave', disableAutoAddParticle)\n\n    const interval = setInterval(() => {\n      if (animationFrame && particles.length === 0) {\n        cancelAnimationFrame(animationFrame)\n        clearInterval(interval)\n\n        if (--instanceCounter === 0) {\n          container.remove()\n        }\n      }\n    }, 500)\n  }\n}\n\ninterface CoolModeProps {\n  children: ReactNode\n  options?: CoolParticleOptions\n}\n\nexport const CoolMode: React.FC<CoolModeProps> = ({ children, options }) => {\n  const ref = useRef<HTMLElement>(null)\n\n  useEffect(() => {\n    if (ref.current) {\n      return applyParticleEffect(ref.current, options)\n    }\n  }, [options])\n\n  return React.cloneElement(children as React.ReactElement, { ref })\n}\n","import { NodeProps } from '@xyflow/react'\nimport { memo, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarTrigger,\n} from 'src/lib/shadcn/ui/menubar'\nimport CreateLLMCard from 'src/components/molecules/CreateLLMCard'\nimport CreatePromptCard from 'src/components/molecules/CreatePromptCard'\nimport CreateSchemaCard from 'src/components/molecules/CreateSchemaCard'\nimport CreateFewShotExampleCard from 'src/components/molecules/CreateFewShotExampleCard'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport CreateToolCard from 'src/components/molecules/CreateToolCard'\nimport CreateVectorDatabaseCard from 'src/components/molecules/CreateVectorDatabaseCard'\nimport Logo from 'src/assets/svgs/logo.svg?react'\nimport CreateTextDataCard from 'src/components/molecules/CreateTextDataCard'\nimport { useAppState } from 'src/states/app'\nimport { cn } from 'src/lib/utils'\n\nimport { SUPPORTED_MODES, SupportedAddNodeEnum } from './constants'\nimport { CoolMode } from 'src/lib/shadcn/ui/cool-mode'\nimport { Button } from 'src/lib/shadcn/ui/button'\n\nexport const ToolbarNode = memo((props: NodeProps) => {\n  const { t } = useTranslation('flows')\n  const theme = useAppState((state) => state.theme)\n  const [mode, setMode] = useState(`${SupportedAddNodeEnum.ADD_LLM}`)\n\n  const menu = useMemo(() => {\n    return (\n      <Menubar>\n        <MenubarMenu>\n          <CoolMode>\n            <Button variant=\"link\" className=\"!p-0 !pl-3\">\n              <Logo\n                width={32}\n                height={32}\n                className={cn(theme === 'dark' ? 'fill-white' : 'fill-black')}\n              />\n            </Button>\n          </CoolMode>\n        </MenubarMenu>\n        {SUPPORTED_MODES.map((mode) => {\n          if (typeof mode === 'object') {\n            return (\n              <MenubarMenu key={mode.key}>\n                <MenubarTrigger>\n                  {mode.icon ? <LazyIcon name={mode.icon} /> : t(`supported_nodes.${mode.label}`)}\n                </MenubarTrigger>\n                <MenubarContent>\n                  {mode.children.map((child) => {\n                    return (\n                      <MenubarItem key={child} onClick={() => setMode(child)}>\n                        {t(`supported_nodes.${child.toLowerCase()}`)}\n                      </MenubarItem>\n                    )\n                  })}\n                </MenubarContent>\n              </MenubarMenu>\n            )\n          }\n          return (\n            <MenubarMenu key={mode}>\n              <MenubarTrigger value={mode} onClick={() => setMode(mode)}>\n                {t(`supported_nodes.${mode.toLowerCase()}`)}\n              </MenubarTrigger>\n            </MenubarMenu>\n          )\n        })}\n      </Menubar>\n    )\n  }, [t, theme])\n\n  const modeToComponent = useMemo(() => {\n    switch (mode) {\n      case SupportedAddNodeEnum.ADD_LLM:\n        return <CreateLLMCard {...props} />\n      case SupportedAddNodeEnum.ADD_PROMPT:\n        return <CreatePromptCard {...props} />\n      case SupportedAddNodeEnum.ADD_SCHEMA:\n        return <CreateSchemaCard {...props} />\n      case SupportedAddNodeEnum.ADD_FEW_SHOT_EXAMPLE:\n        return <CreateFewShotExampleCard {...props} />\n      case SupportedAddNodeEnum.ADD_TOOL_DEFINITION:\n        return <CreateToolCard {...props} />\n      case SupportedAddNodeEnum.ADD_VECTOR_DATABASE:\n        return <CreateVectorDatabaseCard {...props} />\n      case SupportedAddNodeEnum.ADD_TEXT_DATA:\n        return <CreateTextDataCard {...props} />\n    }\n  }, [props, mode])\n  return (\n    <>\n      {menu}\n      <div className=\"mt-4\">{modeToComponent}</div>\n    </>\n  )\n})\n","import { useCallback, useState } from 'react'\nimport { Connection, Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport {\n  AppEntityNames,\n  FlowNodeTypeEnum,\n  flowNodeTypeToEntity,\n  Session,\n  SessionStatusEnum,\n  SessionTypeEnum,\n} from 'src/services/database/types'\nimport { EntityType } from 'src/utils/orm-type'\nimport { DefaultNodeData } from 'src/utils/flow-node'\nimport { useNavigate } from 'react-router-dom'\nimport { getRouteURL } from 'src/utils/routes'\n\nexport const useCreateStandaloneSession = () => {\n  const [loading, setLoading] = useState(false)\n  const navigate = useNavigate()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const getLatestApplications = useSessionState((state) => state.getLatestApplications)\n\n  const cloneNode = useCallback(\n    async (\n      newSession: Session,\n      node: Node<DefaultNodeData>,\n      newEntityIDMap: Map<string, string>,\n      newFlowNodeIDMap: Map<string, string>,\n    ) => {\n      const entity = node.data?.entity\n      let entityName = node.type ? flowNodeTypeToEntity[node.type as FlowNodeTypeEnum] : undefined\n      if (\n        entityName &&\n        entity &&\n        node &&\n        typeof entity === 'object' &&\n        'id' in entity &&\n        !newEntityIDMap.has(`${entity.id}`) &&\n        !newFlowNodeIDMap.has(`${node.id}`)\n      ) {\n        entityName = entityName as AppEntityNames\n        const cloneEntity = await getRepository(entityName).save({\n          ...entity,\n          ...(entity && typeof entity === 'object' && 'session_id' in entity\n            ? { session_id: newSession.id }\n            : {}),\n        } as EntityType<unknown>)\n        newEntityIDMap.set(`${entity.id}`, cloneEntity.id)\n        const currentFlowNode = await getRepository('FlowNode').findOne({\n          where: {\n            id: node.data.flowNode.id,\n          },\n        })\n        const cloneFlowNode = await getRepository('FlowNode').save({\n          ...(currentFlowNode || node.data.flowNode),\n          session_id: newSession.id,\n          id: undefined,\n          source_type: entityName,\n          source_id: cloneEntity.id,\n        })\n        newFlowNodeIDMap.set(`${node.id}`, cloneFlowNode.id)\n        return {\n          entityName,\n          entity: cloneEntity,\n          node: cloneFlowNode,\n        }\n      } else if (!newFlowNodeIDMap.has(`${node.id}`)) {\n        const currentFlowNode = await getRepository('FlowNode').findOne({\n          where: {\n            id: node.data.flowNode.id,\n          },\n        })\n        const cloneFlowNode = await getRepository('FlowNode').save({\n          ...(currentFlowNode || node.data.flowNode),\n          node_type: node.type as FlowNodeTypeEnum,\n          session_id: newSession.id,\n          id: undefined,\n        })\n        newFlowNodeIDMap.set(`${node.id}`, cloneFlowNode.id)\n        return {\n          node: cloneFlowNode,\n        }\n      }\n    },\n    [],\n  )\n\n  const createStandaloneSession = useCallback(\n    async (\n      node: Node<DefaultNodeData>,\n      options: {\n        name?: string\n        connections: {\n          node: Node<DefaultNodeData>\n          connections: Connection[]\n          connectedNodes?: Node<DefaultNodeData>[]\n        }[]\n      },\n    ) => {\n      try {\n        if (!currentSession) {\n          throw new Error('No current session')\n        }\n        setLoading(true)\n        const standaloneSession = await getRepository('Session').save({\n          type: SessionTypeEnum.StandaloneApp,\n          name: options.name || (currentSession?.name ? `${currentSession.name}` : 'Standalone'),\n          status: SessionStatusEnum.Started,\n          passphrase: currentSession.passphrase,\n        })\n        if (!standaloneSession) {\n          throw new Error('Failed create standalone session')\n        }\n        const newEntityIDMap = new Map<string, string>()\n        const newFlowNodeIDMap = new Map<string, string>()\n        // Clone node\n        const mainNodeInfo = await cloneNode(\n          standaloneSession,\n          node,\n          newEntityIDMap,\n          newFlowNodeIDMap,\n        )\n        if (!mainNodeInfo) {\n          throw new Error('Failed to clone main node')\n        }\n        await getRepository('Session').update(standaloneSession.id, {\n          main_node_id: mainNodeInfo.node.id,\n          main_source_id: mainNodeInfo?.entity ? mainNodeInfo.entity.id : undefined,\n          main_source_type: mainNodeInfo.entityName ? mainNodeInfo.entityName : undefined,\n        })\n        // Clone connected nodes\n        for (const { node, connectedNodes } of options.connections) {\n          await cloneNode(standaloneSession, node, newEntityIDMap, newFlowNodeIDMap)\n          // Clone Connected Nodes\n          if (connectedNodes) {\n            for (const connectedNode of connectedNodes) {\n              await cloneNode(standaloneSession, connectedNode, newEntityIDMap, newFlowNodeIDMap)\n            }\n          }\n        }\n        // Clone connections\n        for (const { connections } of options.connections) {\n          for (const connection of connections) {\n            const sourceId = newFlowNodeIDMap.get(`${connection.source}`)\n            const targetId = newFlowNodeIDMap.get(`${connection.target}`)\n            if (!sourceId || !targetId) {\n              throw new Error('Failed to get connected flow node id')\n            }\n            await getRepository('FlowEdge').save({\n              source: sourceId,\n              target: targetId,\n              sourceHandle: connection.sourceHandle,\n              targetHandle: connection.targetHandle,\n              session_id: standaloneSession.id,\n            })\n          }\n        }\n        getLatestApplications()\n\n        navigate(getRouteURL('application', { applicationId: standaloneSession.id }))\n        return true\n      } finally {\n        setLoading(false)\n      }\n    },\n    [cloneNode, currentSession, getLatestApplications, navigate],\n  )\n\n  return {\n    loading,\n    createStandaloneSession,\n  }\n}\n","import { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport { useFlowState } from 'src/states/flow'\n\nexport const useDeleteNodeFlow = () => {\n  const [loading, setLoading] = useState(false)\n  const updateNode = useFlowState((state) => state.updateNodes)\n  const updateEdges = useFlowState((state) => state.updateEdges)\n\n  const deleteNodeFlow = useCallback(\n    async (id: string) => {\n      try {\n        setLoading(true)\n        await getRepository('FlowNode').delete(id)\n        const edges = await getRepository('FlowEdge').find({\n          where: [{ source: id }, { target: id }],\n        })\n        await Promise.all(edges.map((edge) => getRepository('FlowEdge').delete(edge.id)))\n        await updateNode([{ id, type: 'remove' as const }])\n        await updateEdges(edges.map((edge) => ({ id: edge.id, type: 'remove' as const })))\n        return true\n      } catch {\n        return false\n      } finally {\n        setLoading(false)\n      }\n    },\n    [updateEdges, updateNode],\n  )\n\n  return {\n    loading,\n    deleteNodeFlow,\n  }\n}\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from 'src/lib/shadcn/ui/dialog'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { Label } from 'src/lib/shadcn/ui/label'\n\ntype CreateSessionProps = {\n  className: string\n  cloneStandaloneSession: (name?: string) => Promise<void>\n}\n\nconst CreateStandaloneApplicationDialog = create<CreateSessionProps>(\n  ({ cloneStandaloneSession }) => {\n    const currentModal = useModal()\n    const { t } = useTranslation('dialogs')\n    const [name, setName] = useState('')\n\n    const { toast } = useToast()\n\n    const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setName(e.target.value)\n    }\n\n    const handleSubmit = async () => {\n      try {\n        currentModal.hide()\n        await cloneStandaloneSession(name)\n        setName('')\n      } catch {\n        toast({\n          variant: 'destructive',\n          description: t('create_standalone_application.errors.create_failed'),\n        })\n      }\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>{t('create_session.title')}</DialogTitle>\n            <DialogDescription>{t('create_standalone_application.description')}</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"flex flex-col space-y-1.5\">\n              <Label className=\"mb-2\" htmlFor=\"name\">\n                {t('create_standalone_application.name')}\n              </Label>\n              <Input\n                onChange={handleChangeName}\n                id=\"name\"\n                value={name}\n                placeholder={t('create_standalone_application.name_placeholder')}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button onClick={handleSubmit} disabled={!name} type=\"submit\">\n              {t('create_standalone_application.create')}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateStandaloneApplicationDialog\n","import { memo, useCallback } from 'react'\nimport { Node, Connection, useReactFlow } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\nimport { useCreateStandaloneSession } from 'src/hooks/mutations/use-create-standalone-session'\nimport { useDeleteNodeFlow } from 'src/hooks/flows/mutations/use-delete-node-flow'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { cn } from 'src/lib/utils'\nimport { DefaultNodeData, DefaultNodeProps } from 'src/utils/flow-node'\nimport { EntityType } from 'src/utils/orm-type'\nimport { logError } from 'src/utils/logger'\nimport { useModal } from '@ebay/nice-modal-react'\nimport CreateStandaloneApplicationDialog from 'src/components/dialogs/CreateStandaloneApplicationDialog'\n\nexport const NodeHeader = memo(\n  ({\n    id,\n    className,\n    enableToStandalone,\n    getLinkedConnections,\n  }: {\n    id: string\n    className?: string\n    enableToStandalone?: boolean\n    getLinkedConnections?: (id: string) => {\n      node: Node<DefaultNodeProps<{ entity: EntityType<unknown> }>['data']>\n      connections: Connection[]\n      connectedNodes?: Node<DefaultNodeProps<{ entity: EntityType<unknown> }>['data']>[]\n    }[]\n  }) => {\n    const { t } = useTranslation('common')\n    const { getNode } = useReactFlow<Node<DefaultNodeData>>()\n    const { loading: deleting, deleteNodeFlow } = useDeleteNodeFlow()\n    const { createStandaloneSession } = useCreateStandaloneSession()\n    const { toast } = useToast()\n    const createStandaloneApplicationDialog = useModal(CreateStandaloneApplicationDialog)\n\n    const handleDelete = useCallback(async () => {\n      try {\n        await deleteNodeFlow(id)\n        toast({\n          description: t('deleted'),\n        })\n      } catch {\n        toast({\n          description: t('errors.delete_failed'),\n          variant: 'destructive',\n        })\n      }\n    }, [deleteNodeFlow, id, toast, t])\n\n    const cloneStandaloneSession = useCallback(\n      async (name?: string) => {\n        try {\n          const currentNode = getNode(id)\n          if (!currentNode) {\n            throw new Error('No current node')\n          }\n          const connections = getLinkedConnections?.(id) || []\n          await createStandaloneSession(currentNode, { name, connections })\n          toast({\n            description: t('standalone_session_created'),\n          })\n        } catch (error) {\n          logError('Clone Standalone Session', error)\n          toast({\n            description: t('errors.create_standalone_session_failed'),\n            variant: 'destructive',\n          })\n        }\n      },\n      [getNode, id, getLinkedConnections, createStandaloneSession, toast, t],\n    )\n\n    const handleCreateStandaloneApplication = useCallback(() => {\n      createStandaloneApplicationDialog.show({\n        cloneStandaloneSession,\n      })\n    }, [cloneStandaloneSession, createStandaloneApplicationDialog])\n\n    return (\n      <div className={cn('flex absolute z-[51] right-0 top-0 h-10', className)}>\n        {enableToStandalone ? (\n          <Button\n            className=\"!rounded-none !px-2\"\n            onClick={handleCreateStandaloneApplication}\n            variant=\"ghost\"\n          >\n            <LazyIcon name=\"package-plus\" size={16} />\n          </Button>\n        ) : undefined}\n        <LoadingButton\n          loading={deleting}\n          className=\"!rounded-none !px-2\"\n          onClick={handleDelete}\n          variant=\"ghost\"\n        >\n          <LazyIcon name=\"trash-2\" size={16} />\n        </LoadingButton>\n      </div>\n    )\n  },\n)\n","import { memo } from 'react'\nimport { Handle, HandleProps, Position } from '@xyflow/react'\nimport { cn } from 'src/lib/utils'\n\nexport const DefaultHandle = memo((props: HandleProps) => {\n  const { className, ...rest } = props\n  return (\n    <Handle\n      className={cn(\n        '!w-2 !h-2 !border-none !rounded-full !bg-slate-700',\n        props.position === Position.Top ? '!top-[-2px]' : '',\n        className,\n      )}\n      {...rest}\n    />\n  )\n})\n","import { useState, useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { FlowNodeTypeEnum, LLM } from 'src/services/database/types'\nimport { ThreadStatusEnum } from 'src/services/database/types/thread'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateThread = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const createThread = useCallback(\n    async (source: Node) => {\n      setLoading(true)\n      try {\n        const llm = source.data?.entity as LLM\n        if (!llm || !sessionId) {\n          throw new Error('LLM or Session not found')\n        }\n\n        const initialX = source.position.x\n        const initialY = source.position.y + (source.measured?.height || 0)\n        const thread = await getRepository('Thread').save({\n          initial_llm_id: llm.id,\n          title: `New thread with ${llm.name}`,\n          status: ThreadStatusEnum.Started,\n          messages: [],\n          session_id: sessionId,\n        })\n        const flowNode = await createOrUpdateFlowNode({\n          source_id: thread.id,\n          source_type: 'Thread',\n          node_type: FlowNodeTypeEnum.Thread,\n          x: initialX,\n          y: initialY + 60,\n        })\n        if (!flowNode) {\n          throw new Error('Failed to create thread node')\n        }\n        // Create connection from source to threadNode\n        const flowEdge = await createOrUpdateFlowEdge({\n          source: source.id,\n          target: flowNode.id,\n        })\n\n        return {\n          thread,\n          flowNode,\n          flowEdge,\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowEdge, createOrUpdateFlowNode, sessionId],\n  )\n\n  return {\n    loading,\n    createThread,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Node, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { FlowNodeTypeEnum, LLM, LLMProviderEnum, LLMStatusEnum } from 'src/services/database/types'\nimport { useCreateThread } from 'src/hooks/flows/mutations/use-create-thread'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { logError } from 'src/utils/logger'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\n\nimport { LLMNodeProps } from '../type'\n\nexport const useActions = (id: string, data: LLMNodeProps['data']) => {\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const [loadingModel, setLoadingModel] = useState(false)\n  const [queringThreads, setQueringThreads] = useState(false)\n  const node = useInternalNode(id) as Node<LLMNodeProps['data']>\n  const { loadModel } = useLoadModel()\n  const { createThread, loading: creatingThread } = useCreateThread()\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue)\n\n  const { getNodes } = useReactFlow()\n\n  const queryThreadsFromModel = useCallback(async () => {\n    try {\n      setQueringThreads(true)\n      if (data.entity.id) {\n        const threads = await getRepository('Thread').find({\n          where: {\n            initial_llm_id: data.entity.id,\n          },\n        })\n        pushSyncNodeQueue('Thread', {\n          where: {\n            source_type: 'Thread',\n            source_id: In(threads.map((thread) => thread.id)),\n          },\n        })\n      }\n    } finally {\n      setQueringThreads(false)\n    }\n  }, [data?.entity?.id, pushSyncNodeQueue])\n\n  const handleLoadModel = useCallback(async () => {\n    try {\n      setLoadingModel(true)\n      if (data.entity && node) {\n        await loadModel?.(data.entity.provider, `${data.entity.name}`, {\n          provider: data.entity.provider,\n          callback: (initProgress) => {\n            node.data.status =\n              initProgress.progress === 100 ? LLMStatusEnum.Loaded : LLMStatusEnum.Loading\n\n            node.data.label = initProgress.text\n            updateNodes([{ id, type: 'replace' as const, item: node }])\n          },\n        })\n        const llmNodeChanges = getNodes()\n          .filter((node) => {\n            const isLLMNode = node.type === FlowNodeTypeEnum.LLM\n            if (isLLMNode) {\n              const entity = node.data.entity as LLM\n              return entity.provider === LLMProviderEnum.WebLLM\n            }\n            return false\n          })\n          .map((node) => {\n            node.data.status = LLMStatusEnum.Started\n            return { id: node.id, type: 'replace' as const, item: node }\n          })\n        node.data.label = ''\n        node.data.status = LLMStatusEnum.Loaded\n        llmNodeChanges.push({\n          id,\n          type: 'replace' as const,\n          item: node,\n        })\n        updateNodes(llmNodeChanges)\n        await queryThreadsFromModel()\n      }\n    } catch (error) {\n      logError('Load Model', error)\n      toast({\n        variant: 'destructive',\n        description: t('llm_node.errors.loading_model'),\n      })\n    } finally {\n      setLoadingModel(false)\n    }\n  }, [data.entity, getNodes, id, loadModel, node, queryThreadsFromModel, t, toast, updateNodes])\n\n  const handleCreateThread = useCallback(async () => {\n    if (data.entity && node) {\n      await createThread?.(node)\n    }\n  }, [data.entity, node, createThread])\n\n  const changeLLMOptions = useCallback(\n    async (options: Record<string, unknown>) => {\n      if (data.entity && node) {\n        node.data.entity.options = options\n        await getRepository('LLM').update(data.entity.id, { options })\n        updateNodes([{ id, type: 'replace' as const, item: node }])\n      }\n    },\n    [data.entity, id, node, updateNodes],\n  )\n\n  useEffect(() => {\n    if (data.entity && node && data.entity.status !== data.status) {\n      node.data.status = data.entity.status as LLMStatusEnum\n      updateNodes([{ id, type: 'replace' as const, item: node }])\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return {\n    loadingModel,\n    creatingThread,\n    queringThreads,\n    changeLLMOptions,\n    loadModel: handleLoadModel,\n    createThread: handleCreateThread,\n    queryThreads: queryThreadsFromModel,\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Node, Connection, useHandleConnections, useReactFlow } from '@xyflow/react'\n\nimport { filterUserConnections } from 'src/utils/flow'\n\nexport const useBaseConnectionToHandler = (\n  id: string,\n  handlerFunction: (input: {\n    id: string\n    edgeId: string\n    source: Node\n    target: Node\n    connection: Connection\n  }) => Promise<{ deleteEdgeId: string | string[] } | undefined>,\n) => {\n  const [handling, setHandling] = useState(false)\n  const [newTargetConnection, setNewTargetConnection] = useState<Connection[]>([])\n  const { deleteElements, getNode } = useReactFlow()\n\n  useHandleConnections({\n    type: 'target',\n    nodeId: id,\n    onConnect: (newConnections) => {\n      if (newConnections?.length) {\n        setNewTargetConnection((pre) => [...pre, ...filterUserConnections(newConnections)])\n      }\n    },\n  })\n\n  const connectionHandler = useCallback(\n    async (edgeId: string, source: Node, target: Node, connection: Connection) => {\n      try {\n        const result = await handlerFunction({\n          id,\n          edgeId,\n          source,\n          target,\n          connection,\n        })\n\n        return result\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [handlerFunction, id],\n  )\n\n  useEffect(() => {\n    if (!newTargetConnection?.length || handling) {\n      return\n    }\n    const handle = async () => {\n      try {\n        setHandling(true)\n        const handlingConnections = [...newTargetConnection]\n        setNewTargetConnection([])\n        const removeEdgeIds: string[] = []\n        const target = getNode(id)\n        await Promise.all(\n          handlingConnections.map(async (connection) => {\n            const edgeId = 'edgeId' in connection ? connection.edgeId : undefined\n            const source = getNode(connection.source)\n            if (!source || !target) {\n              return\n            }\n\n            const response = await connectionHandler(`${edgeId}`, source, target, connection)\n\n            if (response?.deleteEdgeId) {\n              removeEdgeIds.push(\n                ...(Array.isArray(response.deleteEdgeId)\n                  ? response.deleteEdgeId\n                  : [response.deleteEdgeId]),\n              )\n            }\n          }),\n        )\n        if (removeEdgeIds?.length) {\n          await deleteElements({\n            edges: removeEdgeIds.map((id) => ({ id })),\n          })\n        }\n      } finally {\n        setHandling(false)\n      }\n    }\n    handle()\n  }, [deleteElements, getNode, id, handling, connectionHandler, newTargetConnection])\n}\n","import { useCallback } from 'react'\n\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const handleConnectionTo = useCallback(async () => {\n    return undefined\n  }, [])\n  useBaseConnectionToHandler(id, handleConnectionTo)\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Position } from '@xyflow/react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { LLMProviderEnum, LLMStatusEnum } from 'src/services/database/types/llm'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { BorderBeam } from 'src/lib/shadcn/ui/border-beam'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\nimport LoadingButton from 'src/components/atoms/LoadingButton'\n\nimport { LLMNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { LLMSetting } from 'src/components/atoms/LLMSetting'\n\nexport const LLMNode = memo((props: LLMNodeProps) => {\n  const { id, data, isConnectable } = props\n  const [llmInfo, setLLMInfo] = useState<\n    | { hasCache: boolean; isFunctionCalling: boolean; info?: ModelRecord; cloud?: boolean }\n    | undefined\n  >()\n  const { t } = useTranslation('flows')\n\n  const { createThread, loadModel, queringThreads, queryThreads, loadingModel, changeLLMOptions } =\n    useActions(id, data)\n  useConnectionToHandler(id)\n\n  const isLoading = [LLMStatusEnum.Loading, LLMStatusEnum.Downloading].includes(data.status)\n\n  useEffect(() => {\n    if (llmInfo || !data?.entity?.name) {\n      return\n    }\n    if (\n      ![LLMProviderEnum.WebLLM, LLMProviderEnum.Wllama].includes(\n        data?.entity?.provider as LLMProviderEnum,\n      )\n    ) {\n      setLLMInfo({\n        hasCache: false,\n        cloud: true,\n        isFunctionCalling: true,\n        info: {\n          model_id: data?.entity?.name,\n          model: data?.entity?.name,\n          model_lib: data?.entity?.provider,\n          model_type: 2,\n        },\n      })\n      return\n    } else if (LLMProviderEnum.Wllama === data?.entity?.provider) {\n      import('@wllama/wllama').then(async ({ ModelManager }) => {\n        const modelManager = new ModelManager()\n        const models = await modelManager.getModels()\n        setLLMInfo({\n          hasCache: !!models.find((item) => item.url.includes(data?.entity?.name)),\n          cloud: false,\n          isFunctionCalling: false,\n          info: {\n            model_id: data?.entity?.name,\n            model: data?.entity?.name,\n            model_lib: data?.entity?.provider,\n            model_type: 2,\n          },\n        })\n      })\n      setLLMInfo({\n        hasCache: false,\n        cloud: false,\n        isFunctionCalling: true,\n        info: {\n          model_id: data?.entity?.name,\n          model: data?.entity?.name,\n          model_lib: data?.entity?.provider,\n          model_type: 2,\n        },\n      })\n      return\n    }\n\n    import('@mlc-ai/web-llm').then(\n      async ({ hasModelInCache, functionCallingModelIds, prebuiltAppConfig }) => {\n        const hasCache = await hasModelInCache(data?.entity?.name)\n        setLLMInfo({\n          hasCache,\n          isFunctionCalling: functionCallingModelIds.includes(data?.entity?.name),\n          info: prebuiltAppConfig.model_list.find((item) => item.model_id === data?.entity?.name),\n        })\n      },\n    )\n  }, [data?.entity?.name, data?.entity?.provider, llmInfo])\n\n  const onChangeOptions = useCallback(\n    async (options: Record<string, unknown>) => {\n      await changeLLMOptions(options)\n    },\n    [changeLLMOptions],\n  )\n\n  const llmIcon = useMemo(() => {\n    switch (data.status) {\n      case LLMStatusEnum.Downloading:\n        return <LazyIcon className={'animate-spin w-7 h-7'} name={'arrow-big-down-dash'} />\n      case LLMStatusEnum.Loaded:\n        return <LLMIcon name={data.entity?.name || 'brain'} className=\"w-7 h-7\" />\n      case LLMStatusEnum.Loading:\n        return <LazyIcon className={'animate-spin w-7 h-7'} name={'loader-circle'} />\n      default:\n        return <LLMIcon name={data.entity?.name || 'brain'} className=\"w-7 h-7\" />\n    }\n  }, [data.entity?.name, data.status])\n\n  const actions = useMemo(() => {\n    if (isLoading) {\n      return null\n    }\n    if (loadingModel) {\n      return (\n        <Button disabled={true} className=\"w-full mt-4\">\n          <LazyIcon className={'animate-spin'} size={24} name={'loader-circle'} />\n        </Button>\n      )\n    }\n    if (data.status === LLMStatusEnum.Loaded) {\n      return (\n        <Button onClick={createThread} className=\"mt-4 w-full\">\n          {t('llm_node.create_thread_button')}\n        </Button>\n      )\n    }\n    return (\n      <div className=\"flex gap-2 mt-4\">\n        {llmInfo?.hasCache ? (\n          <LoadingButton loading={queringThreads} onClick={queryThreads}>\n            <LazyIcon size={24} name={'message-square-more'} />\n          </LoadingButton>\n        ) : null}\n        <Button disabled={loadingModel} onClick={loadModel} className=\"w-full\">\n          {t(llmInfo?.hasCache ? 'llm_node.load_model_button' : 'llm_node.download_model_button')}\n        </Button>\n      </div>\n    )\n  }, [\n    isLoading,\n    loadingModel,\n    data.status,\n    llmInfo?.hasCache,\n    queringThreads,\n    queryThreads,\n    loadModel,\n    t,\n    createThread,\n  ])\n  return (\n    <div>\n      <div>\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center\">\n          {llmIcon}\n          <div className=\"ml-2 pt-1 max-w-lg\">\n            <AlertTitle className=\"flex gap-2 items-center pr-6\">\n              {`${data?.entity?.name || ''}`}\n            </AlertTitle>\n            <AlertDescription className=\"max-w-full\">{`${data.label || ''}`}</AlertDescription>\n            <div className=\"max-w-full mt-2 flex-wrap flex gap-1\">\n              <LLMInfo\n                model={llmInfo?.info}\n                isFunctionCalling={llmInfo?.isFunctionCalling || false}\n                name={data?.entity?.name}\n                isCached={llmInfo?.hasCache || false}\n                cloud={llmInfo?.cloud || false}\n              />\n            </div>\n            <LLMSetting\n              options={data?.entity?.options}\n              onChangeOptions={onChangeOptions}\n              className=\"mt-2\"\n            />\n            {actions}\n          </div>\n        </Alert>\n        {isLoading ? <BorderBeam className=\"rounded-lg\" /> : undefined}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\nimport AIInput from 'src/lib/kokonutui/ai-input'\n\nconst NewMessageCard = memo(\n  ({\n    tags,\n    disabled,\n    loading,\n    onSubmit,\n  }: {\n    tags?: React.ReactNode\n    disabled?: boolean\n    loading?: boolean\n    onSubmit: (input: string) => void\n  }) => {\n    const { t } = useTranslation('components')\n\n    const hanldeSubmit = async (input: string) => {\n      try {\n        await onSubmit(input)\n        return true\n      } catch {\n        return false\n      }\n    }\n\n    return (\n      <Card className=\"min-w-80\">\n        <CardHeader>\n          <CardTitle>{t('add_message_card.title')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid w-full gap-1.5\">\n            <AIInput\n              onSubmit={hanldeSubmit}\n              disabled={disabled || loading}\n              placeholder={t('add_message_card.placeholder')}\n            />\n          </div>\n          {tags ? <div className=\"mt-2 gap-1 flex flex-wrap\">{tags}</div> : null}\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default NewMessageCard\n","import type { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types/flow-node'\n\nimport type { DefaultNodeData } from './flow-node'\n\nexport const threadConversationTraveling = (\n  list: string[],\n  nodes: Node<DefaultNodeData>[],\n  connections: Connection[],\n  handledIds: string[] = [],\n  functions: {\n    getNode: (id: string) => Node<DefaultNodeData> | undefined\n    getHandleConnections: (props: { type: 'source' | 'target'; nodeId: string }) => Connection[]\n  },\n) => {\n  const runningNodes = list.map((id) => functions.getNode(id))\n  for (const node of runningNodes) {\n    if (!node) {\n      continue\n    }\n\n    const nodeConnections = functions.getHandleConnections({\n      type: 'target',\n      nodeId: node.id,\n    })\n    connections.push(...nodeConnections)\n\n    if (node.type === FlowNodeTypeEnum.Thread) {\n      handledIds.push(node.id)\n      nodes.push(node)\n      continue\n    } else if (node.type !== FlowNodeTypeEnum.Message) {\n      handledIds.push(node.id)\n      continue\n    } else if (handledIds.includes(node.id)) {\n      continue\n    }\n\n    handledIds.push(node.id)\n    nodes.push(node)\n    if (nodeConnections.length) {\n      threadConversationTraveling(\n        nodeConnections.map((c) => c.source),\n        nodes,\n        connections,\n        handledIds,\n        functions,\n      )\n    }\n  }\n\n  return {\n    nodes,\n    connections,\n  }\n}\n\nexport const prepareThreadConnections = (\n  threadNode: Node<DefaultNodeData>,\n  functions: {\n    getNode: (id: string) => Node<DefaultNodeData> | undefined\n    getHandleConnections: (props: { type: 'source' | 'target'; nodeId: string }) => Connection[]\n  },\n) => {\n  const threadConnections = functions.getHandleConnections({\n    nodeId: threadNode.id,\n    type: 'target',\n  })\n  const threadConnectionInfos = threadConnections.map((connection) => {\n    const node = functions.getNode(connection.source)\n    if (!node) {\n      return\n    }\n    const connections = functions.getHandleConnections({\n      nodeId: node.id,\n      type: 'target',\n    })\n    return {\n      connections,\n      node,\n    }\n  }) as { connections: Connection[]; node: Node<DefaultNodeData> }[]\n  // Prompt connection\n  const threadPromptNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.Prompt\n  })\n  const threadPromptNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadPromptNodes?.length) {\n    threadPromptNodes.forEach((item) => {\n      const promptConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      threadPromptNodeResult.push({\n        node: item.node,\n        connections: item.connections,\n        connectedNodes: promptConnectedNodes,\n      })\n    })\n  }\n  // Tool connection\n  const threadToolsNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.ToolDefinition\n  })\n  const threadToolNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadToolsNodes?.length) {\n    threadToolsNodes.forEach((item) => {\n      const toolConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      if (toolConnectedNodes?.find((node) => node.type === FlowNodeTypeEnum.Schema)) {\n        threadToolNodeResult.push({\n          node: item.node,\n          connections: item.connections,\n          connectedNodes: toolConnectedNodes,\n        })\n      }\n    })\n  }\n  // placeholder node connection\n  const threadPlaceholderNodes = threadConnectionInfos.filter((item) => {\n    return item.node?.type === FlowNodeTypeEnum.PlaceHolder\n  })\n  const threadPlaceholderNodeResult: {\n    node: Node<DefaultNodeData>\n    connectedNodes?: Node<DefaultNodeData>[]\n    connections: Connection[]\n  }[] = []\n  if (threadPlaceholderNodes?.length) {\n    threadPlaceholderNodes.forEach((item) => {\n      const placeholderConnectedNodes = item.connections\n        ?.map((connection) => {\n          return functions.getNode(connection.source)\n        })\n        .filter(Boolean) as Node<DefaultNodeData>[]\n      if (placeholderConnectedNodes) {\n        threadPlaceholderNodeResult.push({\n          node: item.node,\n          connections: item.connections,\n          connectedNodes: placeholderConnectedNodes,\n        })\n      }\n    })\n  }\n  // Schema connection\n  const schemaNode = threadConnectionInfos.find((item) => {\n    return item.node?.type === FlowNodeTypeEnum.Schema\n  })\n\n  return {\n    thread: {\n      node: threadNode,\n      connections: threadConnections,\n    },\n    llm: threadConnectionInfos.find((item) => {\n      return item.node?.type === FlowNodeTypeEnum.LLM\n    }),\n    schemas: schemaNode ? [schemaNode] : [],\n    prompts: threadPromptNodeResult,\n    tools: threadToolNodeResult,\n    placeholders: threadPlaceholderNodeResult,\n  }\n}\n","import { Node } from '@xyflow/react'\nimport { AIMessage, BaseMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport {\n  CSVData,\n  FlowNodeTypeEnum,\n  Message,\n  Prompt,\n  PromptTypeEnum,\n} from 'src/services/database/types'\nimport { decodeCSVData } from './string-data'\n\nexport const buildHistories = (nodes: { node: Node; connectedNodes: Node[] }[]) => {\n  const histories: BaseMessage[] = []\n  nodes.forEach((item) => {\n    const { node, connectedNodes } = item\n    if (!node.data?.entity) {\n      return\n    }\n    if (node.type === FlowNodeTypeEnum.Message) {\n      const message = node.data.entity as Message\n      switch (message.role) {\n        case 'human':\n          histories.push(new HumanMessage(message.content))\n          break\n        case 'ai':\n          histories.push(new AIMessage(message.content))\n          break\n      }\n    } else if (node.type === FlowNodeTypeEnum.Prompt) {\n      // Prompt\n      const prompt = node.data.entity as Prompt\n\n      let content = `${prompt.prefix ? `${prompt.prefix}\\n` : ''}`\n      if (prompt.type === PromptTypeEnum.FewShotExample) {\n        const connectedDataNode = connectedNodes.find((n) => n.type === FlowNodeTypeEnum.CSVData)\n        const csvData = connectedDataNode?.data?.entity as CSVData\n        if (csvData) {\n          const { rows } = decodeCSVData(csvData.headers, csvData.csv)\n          rows.forEach((row: Record<string, unknown>) => {\n            content += `${prompt.content.replace(/{([^{}]*)}/g, (_, key) => `${row[key as keyof typeof row]}`)}\\n`\n          })\n        }\n      } else {\n        content += prompt.content\n      }\n      if (prompt.suffix) {\n        content += `\\n${prompt.suffix}`\n      }\n\n      switch (prompt.role) {\n        case 'human':\n          histories.push(new HumanMessage(content))\n          break\n        case 'system':\n          histories.push(new SystemMessage(content))\n          break\n        default:\n          histories.push(new AIMessage(content))\n          break\n      }\n    }\n  })\n  return histories\n}\n\nexport const prepareThreadHistory = (\n  connectedNodes: Node[],\n  threadPromptNodes: { node: Node; connectedNodes?: Node[] }[],\n) => {\n  const messageNodes =\n    connectedNodes\n      ?.filter((node) => node.type === FlowNodeTypeEnum.Message)\n      .map((node) => ({ node: node, connectedNodes: [] as Node[] }))\n      .reverse() || []\n\n  const systems: { node: Node; connectedNodes: Node[] }[] = []\n  threadPromptNodes.forEach(async (threadPromptNode) => {\n    systems.unshift({\n      node: threadPromptNode.node,\n      connectedNodes: threadPromptNode.connectedNodes || [],\n    })\n  })\n  return {\n    history: buildHistories(messageNodes),\n    systems: buildHistories(systems),\n  }\n}\n","import { Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum, Schema, SchemaItem, ToolDefinition } from 'src/services/database/types'\nimport { DefaultNode } from './flow-node'\n\nexport const toLocalLLMToolCallingInput = (\n  tools?: {\n    node: DefaultNode\n    connectedNodes?: DefaultNode[]\n    connections: Connection[]\n  }[],\n): {\n  name: string\n  description: string\n  schemaItems: SchemaItem[]\n}[] => {\n  if (!tools) {\n    return []\n  }\n  return tools.reduce(\n    (all: { name: string; description: string; schemaItems: SchemaItem[] }[], item) => {\n      const toolEntity = item.node.data?.entity as ToolDefinition\n      const toolSchemaEnity = item?.connectedNodes?.find(\n        (node) => node.type === FlowNodeTypeEnum.Schema,\n      )?.data?.entity as Schema\n      if (toolEntity && toolSchemaEnity?.schema_items?.length) {\n        all.push({\n          name: toolEntity.name,\n          description: toolEntity.description,\n          schemaItems: toolSchemaEnity.schema_items,\n        })\n      }\n      return all\n    },\n    [],\n  )\n}\n","import { useReactFlow } from '@xyflow/react'\nimport { useCallback } from 'react'\nimport { FlowNodePlaceholder, FlowNodeTypeEnum } from 'src/services/database/types'\n\nexport const useFlowEmbeddingNode = () => {\n  const { getNodes } = useReactFlow()\n\n  const getFlowEmbeddingNode = useCallback(() => {\n    const embeddingNode = getNodes().find(\n      (node) => node.type === FlowNodeTypeEnum.DefaultEmbeddingModel,\n    )\n    return embeddingNode\n  }, [getNodes])\n\n  const getFlowEmbeddingEntity = useCallback(() => {\n    const embeddingNode = getFlowEmbeddingNode()\n    const embbedingEntity = embeddingNode?.data?.entity as FlowNodePlaceholder\n\n    return embbedingEntity\n  }, [getFlowEmbeddingNode])\n\n  return {\n    getFlowEmbeddingNode,\n    getFlowEmbeddingEntity,\n  }\n}\n","import { Node, useReactFlow } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PromptTemplate } from '@langchain/core/prompts'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { getRepository } from 'src/services/database'\nimport {\n  CSVData,\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  JSONData,\n  JSONLData,\n  LLM,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  Schema,\n  Thread,\n  VectorDatabase,\n  VectorDatabaseStorageEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport {\n  prepareThreadConnections,\n  threadConversationTraveling,\n} from 'src/utils/thread-conversation-traveling'\nimport { prepareThreadHistory } from 'src/utils/build-message-history'\nimport { AIMessage, BaseMessage, HumanMessage } from '@langchain/core/messages'\nimport { getStorageDataSource } from 'src/utils/vector-storage'\nimport { DefaultNodeData } from 'src/utils/flow-node'\nimport { toLocalLLMToolCallingInput } from 'src/utils/flow-to-local-llm'\nimport { useSessionState } from 'src/states/session'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { logError } from 'src/utils/logger'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\ntype CreateMessageOption = {\n  onMessageUpdate: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n}\nexport const useCreateMessage = ({\n  getNode,\n  getHandleConnections,\n}: Pick<\n  ReturnType<typeof useReactFlow<Node<DefaultNodeData>>>,\n  'getNode' | 'getHandleConnections'\n>) => {\n  const { t } = useTranslation('create_new_message')\n  const [loading, setLoading] = useState(false)\n\n  const currenSession = useSessionState((state) => state.currentSession)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { similaritySearchWithScore: similaritySearchWithScoreFunction } = useEmbedding()\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n\n  const { stream } = useLLM()\n\n  const insertMessages = useCallback(\n    async ({\n      content,\n      threadId,\n      sourceId,\n      initialX,\n      initialY,\n      initialLLMId,\n    }: {\n      content: string\n      threadId: string\n      sourceId: string\n      initialX: number\n      initialY: number\n      initialLLMId: string\n    }) => {\n      if (!currenSession) {\n        throw new Error('Session is not found')\n      }\n      const humanMessage = await getRepository('Message').save({\n        thread_id: threadId,\n        content,\n        role: MessageRoleEnum.Human,\n        status: MessageStatusEnum.Started,\n        llm_id: initialLLMId,\n        session_id: currenSession.id,\n      })\n      if (!humanMessage) {\n        throw new Error('Failed to save message')\n      }\n\n      const humanMessageNode = await createOrUpdateFlowNode({\n        source_id: humanMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY + 80,\n      })\n      if (!humanMessageNode) {\n        throw new Error('Failed to save human message node')\n      }\n      await createOrUpdateFlowEdge({\n        source: sourceId,\n        target: humanMessageNode.id,\n      })\n      const aiMessage = await getRepository('Message').save({\n        thread_id: threadId,\n        content: t('initial_ai_message'),\n        role: MessageRoleEnum.AI,\n        status: MessageStatusEnum.Inprogress,\n        llm_id: initialLLMId,\n        parent_message_id: humanMessage.id,\n        session_id: currenSession.id,\n      })\n      if (!aiMessage) {\n        throw new Error('Failed to save message')\n      }\n      const aiMessageNode = await createOrUpdateFlowNode({\n        source_id: aiMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY + 250,\n      })\n      if (!aiMessageNode) {\n        throw new Error('Failed to save ai message node')\n      }\n      await createOrUpdateFlowEdge({\n        source: humanMessageNode.id,\n        target: aiMessageNode.id,\n      })\n\n      return {\n        aiMessage,\n        humanMessage,\n        aiMessageNode,\n        humanMessageNode,\n      }\n    },\n    [createOrUpdateFlowEdge, createOrUpdateFlowNode, currenSession, t],\n  )\n\n  const handlePlaceholders = useCallback(\n    async (\n      messagesInfo: Awaited<ReturnType<typeof insertMessages>>,\n      threadConnection: ReturnType<typeof prepareThreadConnections>,\n    ): Promise<BaseMessage[]> => {\n      const { placeholders } = threadConnection\n      if (!placeholders?.length) {\n        return []\n      }\n      const injectedMessages: BaseMessage[] = []\n      await Promise.all(\n        placeholders.map(async (item) => {\n          const placeholderRecord = item.node.data?.entity as FlowNodePlaceholder\n          if (!placeholderRecord) {\n            return\n          }\n          switch (placeholderRecord.placeholder_type) {\n            case FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER: {\n              const vectorNode = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.VectorDatabase,\n              )\n              const vector = vectorNode?.data?.entity as VectorDatabase\n              const prompt = item.connectedNodes?.find(\n                (node) => node.type === FlowNodeTypeEnum.Prompt,\n              )?.data?.entity as Prompt\n              if (!prompt || !vector || !vectorNode) {\n                return\n              }\n\n              const k = placeholderRecord.metadata?.k ? +placeholderRecord.metadata?.k : 1\n              let minimalScore = placeholderRecord.metadata?.minimalScore\n                ? +placeholderRecord.metadata?.minimalScore\n                : undefined\n              if (minimalScore && minimalScore > 1) {\n                minimalScore = minimalScore / 100\n              }\n\n              const documents: Awaited<ReturnType<typeof similaritySearchWithScoreFunction>> = []\n\n              if (vector.storage === VectorDatabaseStorageEnum.DataNode) {\n                const connections = getHandleConnections({\n                  nodeId: vectorNode.id,\n                  type: 'target',\n                })\n                const dataSourceNode = connections\n                  .map((connection) => getNode(connection.source))\n                  .find(\n                    (node) =>\n                      node?.type &&\n                      [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                        node?.type as FlowNodeTypeEnum,\n                      ),\n                  )\n                const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n                if (!dataSource) {\n                  return\n                }\n                documents.push(\n                  ...((await similaritySearchWithScoreFunction(\n                    getFlowEmbeddingEntity(),\n                    {\n                      database: {\n                        databaseId: vector.id,\n                        dataSourceId: dataSource.id,\n                        dataSourceType: getStorageDataSource(dataSource),\n                      },\n                    },\n                    messagesInfo.humanMessage.content,\n                    k,\n                  )) || []),\n                )\n              } else {\n                documents.push(\n                  ...((await similaritySearchWithScoreFunction(\n                    getFlowEmbeddingEntity(),\n                    {\n                      database: {\n                        databaseId: vector.id,\n                      },\n                    },\n                    messagesInfo.humanMessage.content,\n                    k,\n                  )) || []),\n                )\n              }\n              if (!documents) {\n                return []\n              }\n              const template = new PromptTemplate({\n                template: prompt.content,\n                inputVariables: ['context'],\n              })\n\n              injectedMessages.push(\n                new AIMessage(\n                  await template.format({\n                    context: !minimalScore\n                      ? documents.map(([doc]) => doc.pageContent).join('\\n')\n                      : documents\n                          .filter(([, score]) => score >= minimalScore)\n                          .map(([doc]) => doc.pageContent)\n                          .join('\\n'),\n                  }),\n                ),\n              )\n            }\n          }\n        }),\n      )\n      return injectedMessages\n    },\n    [getFlowEmbeddingEntity, getHandleConnections, getNode, similaritySearchWithScoreFunction],\n  )\n\n  const invokeMessage = useCallback(\n    async (\n      messagesInfo: Awaited<ReturnType<typeof insertMessages>>,\n      threadConnection: ReturnType<typeof prepareThreadConnections>,\n      threadConversionNodes: Node[],\n      { onMessageUpdate }: CreateMessageOption,\n    ) => {\n      const { prompts, tools, schemas, placeholders, llm } = threadConnection\n\n      const llmEntity = llm?.node.data?.entity as LLM\n\n      if (!llmEntity) {\n        throw new Error('LLM is not found')\n      }\n\n      const injectedMessages: BaseMessage[] = []\n\n      if (placeholders?.length) {\n        injectedMessages.push(...(await handlePlaceholders(messagesInfo, threadConnection)))\n      }\n\n      const { history: MessageHistory, systems } = prepareThreadHistory(\n        threadConversionNodes,\n        prompts,\n      )\n      const messages = [\n        ...systems,\n        ...injectedMessages,\n        ...MessageHistory,\n        new HumanMessage(messagesInfo.humanMessage.content),\n      ]\n\n      const schemaEntities = schemas\n        .map((schemaNode) => schemaNode.node.data?.entity as Schema)\n        .filter(Boolean) as Schema[]\n      const response = await stream(llmEntity.provider, messages, {\n        tools: toLocalLLMToolCallingInput(tools),\n        schemas: schemaEntities,\n        llm: llmEntity,\n        onMessageUpdate: ({ content }) => {\n          onMessageUpdate?.({\n            id: messagesInfo.aiMessageNode.id,\n            nodeData: {\n              loading: true,\n              content: content,\n            },\n          })\n        },\n      })\n\n      messagesInfo.aiMessage.content = response?.content || ''\n      messagesInfo.aiMessage.metadata = JSON.stringify({\n        message: response?.lastChunk,\n      })\n      onMessageUpdate?.({\n        id: messagesInfo.aiMessageNode.id,\n        nodeData: {\n          content: response?.content,\n          loading: false,\n          entity: messagesInfo.aiMessage,\n        },\n      })\n      if (messagesInfo.aiMessage.id) {\n        await getRepository('Message').update(messagesInfo.aiMessage.id, {\n          content: response?.content,\n          metadata: JSON.stringify({\n            message: response?.lastChunk,\n          }),\n        })\n      }\n      return response?.content\n    },\n    [handlePlaceholders, stream],\n  )\n\n  const createMessage = useCallback(\n    async (source: Node, content: string, options: CreateMessageOption) => {\n      const { nodes: threadConversionNodes } = threadConversationTraveling(\n        [source.id],\n        [],\n        [],\n        [],\n        {\n          getNode,\n          getHandleConnections,\n        },\n      )\n\n      const threadNode = threadConversionNodes.find((node) => node.type === FlowNodeTypeEnum.Thread)\n      const thread = threadNode?.data.entity as Thread\n      if (!source || !thread || !threadNode) {\n        throw new Error('Source or thread is not found')\n      }\n      const threadConnections = prepareThreadConnections(threadNode, {\n        getNode,\n        getHandleConnections,\n      })\n      if (!threadConnections?.thread) {\n        throw new Error('Thread node is not found')\n      }\n\n      let messagesInfo: Awaited<ReturnType<typeof insertMessages>> | undefined\n      try {\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        messagesInfo = await insertMessages({\n          content,\n          initialX,\n          initialY,\n          sourceId: source.id,\n          threadId: thread.id,\n          initialLLMId: thread.initial_llm_id,\n        })\n        await invokeMessage(messagesInfo, threadConnections, threadConversionNodes, options)\n        await getRepository('Message').update(`${messagesInfo.aiMessage.id}`, {\n          status: MessageStatusEnum.Success,\n        })\n        messagesInfo.aiMessage.status = MessageStatusEnum.Success\n        options.onMessageUpdate({\n          id: messagesInfo.aiMessageNode.id,\n          nodeData: {\n            entity: messagesInfo.aiMessage,\n            loading: false,\n          },\n        })\n        return true\n      } catch (error) {\n        logError('Create Message', error)\n        if (messagesInfo?.aiMessage) {\n          await getRepository('Message').update(`${messagesInfo.aiMessage.id}`, {\n            status: MessageStatusEnum.Failed,\n            content: t('errors.ai_message_content_failed'),\n          })\n        }\n        if (messagesInfo?.aiMessageNode.id) {\n          options?.onMessageUpdate({\n            id: messagesInfo.aiMessageNode.id,\n            nodeData: {\n              content: t('errors.ai_message_content_failed'),\n              entity: {\n                ...messagesInfo.aiMessage,\n                status: MessageStatusEnum.Failed,\n                content: t('errors.ai_message_content_failed'),\n              },\n              loading: false,\n            },\n          })\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [getHandleConnections, getNode, insertMessages, invokeMessage, t],\n  )\n\n  return {\n    loading,\n    createMessage,\n  }\n}\n","import { useCallback } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport omitBy from 'lodash/omitBy'\nimport isUndefined from 'lodash/isUndefined'\nimport { Node, Connection, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { useCreateMessage } from 'src/hooks/flows/mutations/use-create-message'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { useFlowState } from 'src/states/flow'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { prepareThreadConnections } from 'src/utils/thread-conversation-traveling'\nimport { DefaultNodeData } from 'src/utils/flow-node'\n\nimport { ThreadNodeProps } from '../type'\n\nexport const useActions = (id: string, data: ThreadNodeProps['data']) => {\n  const node = useInternalNode(id)\n  const { t } = useTranslation('flows')\n  const { getNode, getHandleConnections } = useReactFlow<Node<DefaultNodeData>>()\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { createMessage: createMessageFunction, loading } = useCreateMessage({\n    getNode,\n    getHandleConnections,\n  })\n\n  const onMessageUpdate = useCallback(\n    (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => {\n      if (!info.id) {\n        return\n      }\n      const item = getNode(info.id)\n      if (!item || !info.nodeData) {\n        return\n      }\n      updateNodes([\n        {\n          id: item.id,\n          type: 'replace',\n          item: {\n            ...item,\n            data: {\n              ...item.data,\n              ...omitBy(info.nodeData, isUndefined),\n            },\n          },\n        },\n      ])\n    },\n    [getNode, updateNodes],\n  )\n  const createMessage = useCallback(\n    async (input: string) => {\n      if (node && data.entity) {\n        try {\n          await createMessageFunction(node, input, {\n            onMessageUpdate,\n          })\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              variant: 'destructive',\n              title: t('thread_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: `${error}`,\n          })\n        }\n      }\n    },\n    [node, data.entity, createMessageFunction, onMessageUpdate, t],\n  )\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: Node<DefaultNodeData>\n        connections: Connection[]\n        connectedNodes?: Node<DefaultNodeData>[]\n      }[] = []\n      const threadConnections = prepareThreadConnections(currentNode as Node<DefaultNodeData>, {\n        getNode,\n        getHandleConnections,\n      })\n      if (threadConnections.thread) {\n        linkedConnections.push({\n          node: threadConnections.thread.node as Node<DefaultNodeData>,\n          connectedNodes: [],\n          connections: threadConnections.thread.connections,\n        })\n      }\n      if (threadConnections.prompts) {\n        linkedConnections.push(\n          ...threadConnections.prompts.map((item) => {\n            return {\n              node: item.node,\n              connectedNodes: item.connectedNodes,\n              connections: item.connections,\n            }\n          }),\n        )\n      }\n      if (threadConnections.schemas) {\n        linkedConnections.push(\n          ...threadConnections.schemas.map((item) => {\n            return {\n              node: item.node,\n              connectedNodes: [],\n              connections: item.connections,\n            }\n          }),\n        )\n      }\n      if (threadConnections.placeholders) {\n        threadConnections.placeholders.forEach((item) => {\n          const connectedNodes = item.connections\n            .map((connection) => {\n              return getNode(connection.source)\n            })\n            .filter(Boolean) as Node<DefaultNodeData>[]\n          linkedConnections.push({\n            node: item.node,\n            connectedNodes: connectedNodes || [],\n            connections: item.connections,\n          })\n        })\n      }\n      if (threadConnections.llm) {\n        linkedConnections.push(threadConnections.llm)\n      }\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  return { loading, createMessage, getLinkedConnections }\n}\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.Prompt && target?.type === FlowNodeTypeEnum.Thread) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.LLM &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.Schema &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.ToolDefinition &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.VectorDatabase &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.PlaceHolder &&\n          target?.type === FlowNodeTypeEnum.Thread\n        ) {\n          const sourceEntity = source.data.entity as FlowNodePlaceholder\n          if (\n            sourceEntity.placeholder_type === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER\n          ) {\n            await createOrUpdateFlowEdge({\n              source: connection.source,\n              target: connection.target,\n              sourceHandle: connection.sourceHandle,\n              targetHandle: connection.targetHandle,\n            })\n            return\n          }\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Position, useHandleConnections, useReactFlow } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport NewMessageCard from 'src/components/molecules/NewMessageCard'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardTitle } from 'src/lib/shadcn/ui/card'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  Prompt,\n  PromptTypeEnum,\n} from 'src/services/database/types'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { ThreadNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ThreadNode = memo((props: ThreadNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { t } = useTranslation('flows')\n  const [showThread, setShowThread] = useState(false)\n  const connections = useHandleConnections({\n    type: 'source',\n  })\n  const targetConnections = useHandleConnections({\n    type: 'target',\n  })\n  const { getNode } = useReactFlow()\n  const { loading, createMessage, getLinkedConnections } = useActions(id, data)\n\n  useConnectionToHandler(id)\n\n  const handleCreateMessage = useCallback(\n    async (...args: Parameters<typeof createMessage>) => {\n      setShowThread(false)\n      const result = await createMessage(...args)\n      return result\n    },\n    [createMessage],\n  )\n\n  const containMessage = useMemo(() => {\n    return connections.length > 0\n  }, [connections])\n\n  const handleNewThread = useCallback(() => {\n    setShowThread((pre) => !pre)\n  }, [])\n\n  const inner = useMemo(() => {\n    const tags = targetConnections\n      .map((connection, index) => {\n        const source = getNode(connection.source)\n        if (source?.type === FlowNodeTypeEnum.Schema) {\n          return <Badge key={`${index}`}>{t('thread_node.structured_output')}</Badge>\n        } else if (source?.type === FlowNodeTypeEnum.Prompt) {\n          const entity = source.data.entity as Prompt\n          return (\n            <Badge key={`${index}`}>\n              {t(\n                entity.type === PromptTypeEnum.FewShotExample\n                  ? 'thread_node.prompts.few_shot_example'\n                  : `thread_node.prompts.${entity.role.toLowerCase()}`,\n              )}\n            </Badge>\n          )\n        } else if (source?.type === FlowNodeTypeEnum.PlaceHolder) {\n          const entity = source.data.entity as FlowNodePlaceholder\n          if (entity?.placeholder_type === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER) {\n            return <Badge key={`${index}`}>{t('thread_node.vector_database_retriever')}</Badge>\n          }\n        }\n        return undefined\n      })\n      .filter(Boolean)\n\n    if (props.data.entity && !props.data.entity?.messages?.length && !containMessage) {\n      return (\n        <NewMessageCard\n          disabled={loading}\n          loading={loading}\n          onSubmit={handleCreateMessage}\n          tags={tags}\n        />\n      )\n    }\n\n    if (!tags?.length) {\n      return <div className=\"w-12 h-10\" />\n    }\n\n    return (\n      <Card className=\"p-4 pt-2\">\n        <CardTitle className=\"mb-2\">{t('thread_node.title')}</CardTitle>\n        <div className=\"flex gap-1.5\">{tags}</div>\n        <div className=\"mt-4 w-full flex justify-end\">\n          <Button onClick={handleNewThread} variant=\"outline\">\n            <LazyIcon name={showThread ? 'copy-minus' : 'copy-plus'} />\n            {showThread ? t('thread_node.hide') : t('thread_node.clone')}\n          </Button>\n        </div>\n      </Card>\n    )\n  }, [\n    containMessage,\n    getNode,\n    handleCreateMessage,\n    handleNewThread,\n    loading,\n    props.data.entity,\n    showThread,\n    t,\n    targetConnections,\n  ])\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} enableToStandalone getLinkedConnections={getLinkedConnections} />\n        {inner}\n        {showThread ? (\n          <>\n            <div className=\"w-[1px] absolute ml-[50%] h-[30px] bg-gray-500\" />\n            <div className=\"absolute mt-[30px] w-full\">\n              <div className=\"ml-[10%] w-80 animate-in slide-in-from-bottom-5\">\n                <NewMessageCard\n                  disabled={loading}\n                  loading={loading}\n                  onSubmit={handleCreateMessage}\n                />\n              </div>\n            </div>\n          </>\n        ) : undefined}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useTranslation } from 'react-i18next'\n\nimport { MessageNodeProps } from '../type'\n\nexport function HumanMessageComponent({\n  data,\n  onNewThread,\n  loading,\n  showThread,\n}: {\n  data: MessageNodeProps['data']\n  onNewThread?: () => void\n  loading?: boolean\n  showThread: boolean\n}) {\n  const { t } = useTranslation('flows')\n  return (\n    <Alert className=\"flex min-w-52\">\n      <LazyIcon size={24} name=\"user\" />\n      <div className=\"ml-2 max-w-full w-full\">\n        <AlertTitle>{`Human`}</AlertTitle>\n        <AlertDescription>{`${data.content || data.entity?.content || ''}`}</AlertDescription>\n        {onNewThread ? (\n          <div className=\"w-full mt-2 flex items-center justify-end\">\n            <Button onClick={onNewThread} disabled={loading} variant=\"outline\">\n              <LazyIcon name={!showThread ? 'plus' : 'minus'} size={16} />\n              {!showThread ? t(`message_node.new_thread`) : t(`message_node.hide_thread`)}\n            </Button>\n          </div>\n        ) : undefined}\n      </div>\n    </Alert>\n  )\n}\n","import { Suspense, useMemo } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { cn } from 'src/lib/utils'\nimport { useTranslation } from 'react-i18next'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { BorderBeam } from 'src/lib/shadcn/ui/border-beam'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { MessageStatusEnum } from 'src/services/database/types'\nimport { MarkdownViewer } from 'src/components/molecules/MarkdownViewer'\n\nimport { MessageNodeProps } from '../type'\n\nexport function AIMessageComponent({\n  data,\n  onNewThread,\n  loading,\n  showThread,\n}: {\n  data: MessageNodeProps['data']\n  onNewThread?: () => void\n  loading?: boolean\n  showThread: boolean\n}) {\n  const { t } = useTranslation('flows')\n  const messageMetadata = useMemo<{ message: Record<string, unknown> }>(() => {\n    try {\n      return JSON.parse(data?.entity?.metadata || '{}')\n    } catch {\n      return {}\n    }\n  }, [data?.entity?.metadata])\n\n  const isError = data.entity.status === MessageStatusEnum.Failed\n\n  const content = useMemo(() => {\n    return <MarkdownViewer source={`${data.content || data.entity?.content || ''}`} />\n  }, [data.content, data.entity?.content])\n\n  return (\n    <Alert\n      className={cn('flex min-w-52', isError ? 'bg-background' : '')}\n      variant={isError ? 'destructive' : 'default'}\n    >\n      <LazyIcon\n        className={cn(data.loading ? 'animate-spin' : undefined)}\n        size={24}\n        name={data.loading ? 'loader-circle' : 'bot'}\n      />\n      <LazyIcon name={!showThread ? 'plus' : 'minus'} size={24} />\n      <div className=\"ml-2 w-full max-w-full\">\n        <AlertTitle>\n          {t(`message_node.message_roles.${data.entity?.role?.toLowerCase()}`)}\n        </AlertTitle>\n        <Suspense\n          fallback={\n            <div className=\"h-full w-ful rounded-lg flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          {isError ? data.content || data.entity?.content || '' : content}\n        </Suspense>\n        {Array.isArray(messageMetadata?.message?.tool_calls) &&\n        messageMetadata?.message?.tool_calls?.length\n          ? messageMetadata?.message?.tool_calls.map((item, index) => {\n              return (\n                <Badge key={`${item.name}_${index}`}>\n                  {t('message_node.tool_call', {\n                    name: item.name,\n                    args: Object.entries(item.args)\n                      .map(([key, value]) => `\"${key}\": \"${value}\"`)\n                      .join(', '),\n                  })}\n                </Badge>\n              )\n            })\n          : null}\n        {onNewThread ? (\n          <div className=\"w-full mt-2 flex items-center justify-end\">\n            <Button onClick={onNewThread} disabled={loading} variant=\"outline\">\n              <LazyIcon name={!showThread ? 'plus' : 'minus'} size={16} />\n              {!showThread ? t(`message_node.new_thread`) : t(`message_node.hide_thread`)}\n            </Button>\n          </div>\n        ) : undefined}\n      </div>\n      {data.loading ? <BorderBeam size={350} duration={10} /> : undefined}\n    </Alert>\n  )\n}\n","import { useCallback } from 'react'\nimport omitBy from 'lodash/omitBy'\nimport isUndefined from 'lodash/isUndefined'\nimport { useTranslation } from 'react-i18next'\nimport { toast } from 'src/lib/hooks/use-toast'\nimport { Node, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { useCreateMessage } from 'src/hooks/flows/mutations/use-create-message'\nimport { useFlowState } from 'src/states/flow'\n\nimport { MessageNodeProps } from '../type'\n\nexport const useActions = (id: string) => {\n  const { t } = useTranslation('flows')\n  const node = useInternalNode(id)\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { getNode, getHandleConnections } = useReactFlow<Node<MessageNodeProps['data']>>()\n  const { createMessage: createMessageFunction, loading } = useCreateMessage({\n    getNode,\n    getHandleConnections,\n  })\n\n  const onMessageUpdate = useCallback(\n    (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => {\n      if (!info.id) {\n        return\n      }\n      const item = getNode(info.id)\n      if (!item || !info.nodeData) {\n        return\n      }\n      updateNodes([\n        {\n          id: item.id,\n          type: 'replace',\n          item: {\n            ...item,\n            data: {\n              ...item.data,\n              ...omitBy(info.nodeData, isUndefined),\n            },\n          },\n        },\n      ])\n    },\n    [getNode, updateNodes],\n  )\n\n  const createMessage = useCallback(\n    async (input: string) => {\n      if (node) {\n        try {\n          await createMessageFunction(node, input, {\n            onMessageUpdate,\n          })\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              variant: 'destructive',\n              title: t('message_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('message_node.errors.create_message'),\n          })\n        }\n      }\n    },\n    [node, t, createMessageFunction, onMessageUpdate],\n  )\n\n  return {\n    loading,\n    createMessage,\n  }\n}\n","import { Node } from '@xyflow/react'\nimport { useCallback } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  Thread,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateIdieMessage = () => {\n  const currenSession = useSessionState((state) => state.currentSession)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createIdieMessage = useCallback(\n    async (\n      source: Node,\n      thread: Thread,\n      input: string,\n      options?: {\n        promptNode?: Node\n      },\n    ) => {\n      if (!source || !thread || !currenSession) {\n        return\n      }\n      const prompt = options?.promptNode?.data?.entity as Prompt\n      // This is node thead replaced with message node\n      const initialX = source.position?.x || 0\n      const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n      const newMessage = await getRepository('Message').save({\n        thread_id: thread.id,\n        content: input,\n        role: prompt?.role || MessageRoleEnum.Human,\n        status: MessageStatusEnum.Started,\n        llm_id: thread.initial_llm_id,\n        session_id: currenSession.id,\n      })\n      if (!newMessage) {\n        throw new Error('Failed to save message')\n      }\n      const newMessageNode = await createOrUpdateFlowNode({\n        source_id: newMessage.id,\n        source_type: 'Message',\n        node_type: FlowNodeTypeEnum.Message,\n        x: initialX,\n        y: initialY,\n      })\n      if (!newMessageNode) {\n        throw new Error('Failed to save message node')\n      }\n      const edgeToNewMessage = await createOrUpdateFlowEdge({\n        source: source.id,\n        target: newMessageNode.id,\n      })\n      let edgeToPrompt\n      if (options?.promptNode) {\n        edgeToPrompt = await createOrUpdateFlowEdge({\n          source: options?.promptNode.id,\n          target: newMessageNode.id,\n        })\n      }\n      return {\n        message: newMessage,\n        edgeToPrompt,\n        messageNode: newMessageNode,\n        messageEdge: edgeToNewMessage,\n      }\n    },\n    [createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    createIdieMessage,\n  }\n}\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { FlowNodeTypeEnum, Message, Prompt, ThreadStatusEnum } from 'src/services/database/types'\n\nimport { useCreateIdieMessage } from 'src/hooks/flows/mutations/use-create-idie-message'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const { createIdieMessage } = useCreateIdieMessage()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, source, target }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.Prompt && target?.type === FlowNodeTypeEnum.Message) {\n          const message = target?.data?.entity as Message\n          const prompt = source?.data?.entity as Prompt\n          if (!prompt || !message || !target) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          await createIdieMessage(\n            target,\n            {\n              id: message?.thread_id,\n              title: '',\n              status: ThreadStatusEnum.Started,\n              initial_llm_id: message.llm_id,\n              session_id: prompt.session_id,\n            },\n            prompt.content,\n            {\n              promptNode: source,\n            },\n          )\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createIdieMessage],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Position, useHandleConnections } from '@xyflow/react'\nimport NewMessageCard from 'src/components/molecules/NewMessageCard'\nimport { MessageRoleEnum } from 'src/services/database/types'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport textToSpeech from 'src/utils/text-to-speech'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { HumanMessageComponent } from './components/HumanMessage'\nimport { AIMessageComponent } from './components/AIMessage'\nimport { MessageNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const MessageNode = memo((props: MessageNodeProps) => {\n  const { id, data, isConnectable } = props\n  const [showThread, setShowThread] = useState(false)\n  const [speaking, setSpeaking] = useState(false)\n  const { t } = useTranslation('common')\n  const connections = useHandleConnections({\n    type: 'source',\n  })\n  const { loading, createMessage } = useActions(id)\n  const { toast } = useToast()\n\n  useConnectionToHandler(id)\n\n  const handleCreateMessage = useCallback(\n    async (...args: Parameters<typeof createMessage>) => {\n      const result = await createMessage(...args)\n      setShowThread(false)\n      return result\n    },\n    [createMessage],\n  )\n\n  const isEnd = useMemo(() => {\n    return connections.length === 0\n  }, [connections])\n\n  const handleCopy = useCallback(() => {\n    if (!data.entity?.content) {\n      return\n    }\n    navigator.clipboard.writeText(data.entity.content)\n    toast({\n      description: t('copied'),\n    })\n  }, [toast, data, t])\n\n  const handleSpeech = useCallback(async () => {\n    try {\n      if (speaking) {\n        await textToSpeech.stop()\n        return setSpeaking(false)\n      }\n      setSpeaking(true)\n      await textToSpeech.speak(data.entity?.content || '')\n    } catch {\n      toast({\n        variant: 'destructive',\n        description: t('errors.speech_is_not_supported'),\n      })\n    } finally {\n      setSpeaking(false)\n    }\n  }, [data.entity?.content, speaking, t, toast])\n\n  const handleNewThread = useCallback(() => {\n    setShowThread((pre) => !pre)\n  }, [])\n\n  const newMessageCard = useMemo(() => {\n    if (\n      (!isEnd && !showThread) ||\n      data.loading ||\n      loading ||\n      data?.entity?.status === 'inprogress'\n    ) {\n      return undefined\n    }\n    return (\n      <>\n        <div className=\"w-[1px] absolute ml-[50%] h-[30px] bg-gray-500\" />\n        <div className=\"absolute mt-[30px] w-full\">\n          <div className=\"ml-[10%] w-80 animate-in slide-in-from-bottom-5\">\n            <NewMessageCard disabled={loading} loading={loading} onSubmit={handleCreateMessage} />\n          </div>\n        </div>\n      </>\n    )\n  }, [data?.entity?.status, data.loading, handleCreateMessage, isEnd, loading, showThread])\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"max-w-sm min-w-64\">\n        <div className=\"w-auto\">\n          <NodeHeader id={id} />\n          <div>\n            {data.entity?.role === MessageRoleEnum.Human ? (\n              <HumanMessageComponent\n                data={data}\n                showThread={showThread}\n                onNewThread={!isEnd ? handleNewThread : undefined}\n              />\n            ) : (\n              <AIMessageComponent\n                data={data}\n                showThread={showThread}\n                loading={loading}\n                onNewThread={!isEnd ? handleNewThread : undefined}\n              />\n            )}\n          </div>\n          <Button\n            onClick={handleSpeech}\n            className=\"absolute top-0 right-[68px] !px-2 !rounded-none\"\n            variant=\"ghost\"\n          >\n            <LazyIcon name={speaking ? 'circle-stop' : 'speech'} size={16} />\n          </Button>\n          <Button\n            onClick={handleCopy}\n            className=\"absolute top-0 right-[36px] !px-2 !rounded-none\"\n            variant=\"ghost\"\n          >\n            <LazyIcon name=\"copy\" size={16} />\n          </Button>\n        </div>\n        {newMessageCard}\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport {\n  CSVData,\n  FlowNodeTypeEnum,\n  Message,\n  Prompt,\n  PromptTypeEnum,\n  ThreadStatusEnum,\n} from 'src/services/database/types'\nimport { useCreateIdieMessage } from 'src/hooks/flows/mutations/use-create-idie-message'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\nimport { useFlowState } from 'src/states/flow'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { createIdieMessage } = useCreateIdieMessage()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, source, target }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        const targetEntity = target?.data?.entity as Prompt\n        const sourceEntity = source?.data?.entity as CSVData\n        if (source?.type === FlowNodeTypeEnum.Message && target?.type === FlowNodeTypeEnum.Prompt) {\n          const message = source?.data?.entity as Message\n          const prompt = target?.data?.entity as Prompt\n          if (!prompt || !message || !target) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          await createIdieMessage(\n            source,\n            {\n              id: message?.thread_id,\n              title: '',\n              status: ThreadStatusEnum.Started,\n              initial_llm_id: message.llm_id,\n              session_id: prompt.session_id,\n            },\n            prompt.content,\n            {\n              promptNode: target,\n            },\n          )\n          return\n        } else if (\n          source?.type === FlowNodeTypeEnum.CSVData &&\n          target?.type === FlowNodeTypeEnum.Prompt &&\n          targetEntity?.type === PromptTypeEnum.FewShotExample &&\n          sourceEntity?.headers.includes('input') &&\n          sourceEntity?.headers.includes('output')\n        ) {\n          await createOrUpdateFlowEdge({\n            source: source.id,\n            target: target.id,\n          })\n          return\n        }\n\n        // Need to delete edge\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createIdieMessage, createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useMemo } from 'react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Position } from '@xyflow/react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport { useModal } from '@ebay/nice-modal-react'\nimport ViewDataDetailDialog from 'src/components/dialogs/ViewDataDetailDialog'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { PromptNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const PromptNode = memo((props: PromptNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  useConnectionToHandler(id)\n\n  const viewDetailDialog = useModal(ViewDataDetailDialog)\n\n  const content = useMemo(() => {\n    return `${data.entity?.prefix ? `${data.entity?.prefix}\\n` : ''}${data.entity?.content || ''}`\n  }, [data.entity?.prefix, data.entity?.content])\n\n  const promptArguments = useMemo(() => {\n    const regex = /{(.*?)}/g\n    const matches = content.match(regex)\n    return matches?.map((match) => match.replace('{', '').replace('}', '')) || []\n  }, [content])\n\n  const isOverLimit = content.length > 990\n\n  const handleOpenDetail = () => {\n    viewDetailDialog.show({ title: 'Prompt', content })\n  }\n\n  return (\n    <div className=\"min-w-56\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center max-w-72\" variant=\"default\">\n          <LazyIcon size={24} name={'notepad-text'} />\n          <div className=\"ml-2 max-w-full break-words break-all\">\n            <AlertTitle>{`${data.entity?.role || ''}`}</AlertTitle>\n            <AlertDescription onClick={isOverLimit ? handleOpenDetail : undefined}>\n              {isOverLimit ? `${content.slice(0, 990)}...` : content}\n              {isOverLimit ? (\n                <span className=\"float-right\">\n                  <LazyIcon name=\"chevron-right\" />\n                </span>\n              ) : undefined}\n            </AlertDescription>\n            {promptArguments?.length\n              ? promptArguments.map((argument, index) => {\n                  return (\n                    <Badge key={index} className=\"mt-2 mr-1\" variant=\"default\">\n                      {argument}\n                    </Badge>\n                  )\n                })\n              : undefined}\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","export const formatBytes = (bytes?: number) => {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n  if (bytes === undefined) return 'Unknown size'\n  if (bytes === 0) return '0 Byte'\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return `${Math.round(bytes / Math.pow(1024, i))} ${sizes[i]}`\n}\n","import dayjs from 'dayjs'\nimport { memo, useCallback, useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\n// import { Bar, XAxis, CartesianGrid, BarChart } from 'recharts'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport type { ModelRecord } from '@mlc-ai/web-llm'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from 'src/lib/shadcn/ui/card'\n// import {\n//   ChartConfig,\n//   ChartContainer,\n//   ChartTooltip,\n//   ChartTooltipContent,\n// } from 'src/lib/shadcn/ui/chart'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { formatBytes } from 'src/utils/bytes-format'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useLocalLLMState } from 'src/services/local-llm'\nimport { LLMInfo } from 'src/components/atoms/LLMInfo'\n\nexport const SessionInfoNode = memo(() => {\n  const { t } = useTranslation('flows')\n  const [cachedModdels, setCachedModels] =\n    useState<{ model_id: string; info: ModelRecord; isFunctionCalling: boolean }[]>()\n  const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [latestUpdate, setLatestUpdate] = useState<Date>()\n  const [usedBytes, setUsedBytes] = useState('')\n  const [, setCountInfo] = useState<\n    [\n      {\n        name: string\n        nodes: number\n        edges: number\n        llms?: number\n        threads?: number\n        prompts?: number\n        schemas?: number\n        tools?: number\n        vectorDatabases?: number\n        jsonlDatas?: number\n        csvDatas?: number\n      },\n    ]\n  >()\n\n  // const chartConfig = useMemo(() => {\n  //   return {\n  //     nodes: {\n  //       label: t('session_info_node.entities.nodes'),\n  //       color: '#2563eb', // Original color\n  //     },\n  //     edges: {\n  //       label: t('session_info_node.entities.edges'),\n  //       color: '#34d399', // New color\n  //     },\n  //     threads: {\n  //       label: t('session_info_node.entities.threads'),\n  //       color: '#fbbf24', // New color\n  //     },\n  //     llms: {\n  //       label: t('session_info_node.entities.llms'),\n  //       color: '#f87171', // New color\n  //     },\n  //     prompts: {\n  //       label: t('session_info_node.entities.prompts'),\n  //       color: '#a78bfa', // New color\n  //     },\n  //     tools: {\n  //       label: t('session_info_node.entities.tools'),\n  //       color: '#ffcccb', // Lighter and more colorful\n  //     },\n  //     schemas: {\n  //       label: t('session_info_node.entities.schemas'),\n  //       color: '#ffb6c1', // Lighter and more colorful\n  //     },\n  //     vectorDatabases: {\n  //       label: t('session_info_node.entities.vector_databases'),\n  //       color: '#ff69b4', // Lighter and more colorful\n  //     },\n  //     jsonlDatas: {\n  //       label: t('session_info_node.entities.jsonl_data'),\n  //       color: '#ff1493', // Lighter and more colorful\n  //     },\n  //     csvDatas: {\n  //       label: t('session_info_node.entities.csv_data'),\n  //       color: '#db7093', // Lighter and more colorful\n  //     },\n  //   } satisfies ChartConfig\n  // }, [t])\n\n  useEffect(() => {\n    import('@mlc-ai/web-llm').then(({ functionCallingModelIds, prebuiltAppConfig }) => {\n      setCachedModels(\n        cachedLLMURLs?.map((url) => {\n          const item = prebuiltAppConfig.model_list.find((model) => url.includes(model.model))\n          if (!item) {\n            return\n          }\n          return {\n            model_id: item?.model_id || '',\n            info: item,\n            isFunctionCalling: functionCallingModelIds.includes(item?.model_id || ''),\n          }\n        }) as { model_id: string; info: ModelRecord; isFunctionCalling: boolean }[],\n      )\n    })\n  }, [cachedLLMURLs, currentSession?.id])\n\n  const fetchSessionInfo = useCallback(async () => {\n    navigator.storage.estimate().then((estimate) => {\n      if (estimate) {\n        setUsedBytes(\n          t('session_info_node.used_bytes', {\n            used: formatBytes(estimate.usage),\n            total: formatBytes(estimate?.quota),\n          }),\n        )\n      }\n    })\n    if (!currentSession?.id) {\n      return\n    }\n\n    Promise.all([\n      getRepository('FlowNode').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('FlowEdge').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Thread').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Prompt').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('LLM').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('Schema').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('ToolDefinition').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('VectorDatabase').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('JSONLData').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n      getRepository('CSVData').findOne({\n        where: { session_id: currentSession?.id },\n        order: { updated_at: 'DESC' },\n      }),\n    ]).then((response) => {\n      const maxUpdatedAt = response.reduce(\n        (acc, item) => {\n          if (item?.updated_at && (!acc || new Date(item.updated_at) > acc)) {\n            return new Date(item.updated_at)\n          }\n          return acc\n        },\n        currentSession.updated_at ? new Date(currentSession.updated_at) : undefined,\n      )\n      setLatestUpdate(maxUpdatedAt)\n    })\n\n    Promise.all([\n      getRepository('FlowNode').count({ where: { session_id: currentSession?.id } }),\n      getRepository('FlowEdge').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Thread').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Prompt').count({ where: { session_id: currentSession?.id } }),\n      getRepository('LLM').count({ where: { session_id: currentSession?.id } }),\n      getRepository('ToolDefinition').count({ where: { session_id: currentSession?.id } }),\n      getRepository('Schema').count({ where: { session_id: currentSession?.id } }),\n      getRepository('VectorDatabase').count({ where: { session_id: currentSession?.id } }),\n      getRepository('JSONLData').count({ where: { session_id: currentSession?.id } }),\n      getRepository('CSVData').count({ where: { session_id: currentSession?.id } }),\n    ]).then(\n      ([\n        nodes,\n        edges,\n        threads,\n        prompts,\n        llms,\n        tools,\n        schemas,\n        vectorDatabases,\n        jsonlDatas,\n        csvDatas,\n      ]) => {\n        setCountInfo([\n          {\n            name: t('session_info_node.count_info.title'),\n            nodes: nodes || 0,\n            edges: edges || 0,\n            threads: threads || 0,\n            prompts: prompts || 0,\n            llms: llms || 0,\n            tools: tools || 0,\n            schemas: schemas || 0,\n            vectorDatabases: vectorDatabases || 0,\n            jsonlDatas: jsonlDatas || 0,\n            csvDatas: csvDatas || 0,\n          },\n        ])\n      },\n    )\n  }, [currentSession?.id, currentSession?.updated_at, t])\n\n  const handleReload = useCallback(() => {\n    fetchSessionInfo()\n  }, [fetchSessionInfo])\n\n  useEffect(() => {\n    fetchSessionInfo()\n  }, [fetchSessionInfo])\n  return (\n    <Card className=\"w-96\">\n      <CardHeader>\n        <CardTitle>{t('session_info_node.title')}</CardTitle>\n        <CardDescription>\n          {latestUpdate || currentSession?.updated_at\n            ? dayjs(latestUpdate || currentSession?.updated_at).fromNow()\n            : ''}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-4\">\n        <div className=\"flex items-center space-x-4 rounded-md border p-4\">\n          <div className=\"flex-1 space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">{t('session_info_node.disk_size')}</p>\n            <p className=\"text-sm text-muted-foreground\">{usedBytes}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4 rounded-md border p-4\">\n          <div className=\"flex-1 space-y-1\">\n            <div className=\"text-sm font-medium leading-none\">\n              {t('session_info_node.cached_llms')}\n              <Badge className=\"ml-2\">{cachedModdels?.length || 0}</Badge>\n            </div>\n            {cachedModdels?.map((llm) => (\n              <div key={llm?.model_id} className=\"text-sm text-muted-foreground gap-1\">\n                {llm?.model_id}\n                <div className=\"max-w-full gap-1 flex flex-wrap mt-1\">\n                  <LLMInfo\n                    model={llm?.info}\n                    isFunctionCalling={llm?.isFunctionCalling || false}\n                    isCached={true}\n                    cloud={false}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div>\n          {/* Production build failed */}\n          {/* <ChartContainer config={chartConfig} className=\"min-h-28 w-full\">\n            <BarChart accessibilityLayer data={countInfo}>\n              <CartesianGrid vertical={false} />\n              <XAxis dataKey=\"name\" tickLine={false} tickMargin={10} axisLine={false} />\n              <ChartTooltip content={<ChartTooltipContent />} />\n              {Object.entries(chartConfig).map(([key]) => (\n                <Bar key={key} dataKey={key} fill={'#ffb6c1'} radius={4} />\n              ))}\n            </BarChart>\n          </ChartContainer> */}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\" onClick={handleReload}>\n          <LazyIcon size={24} name={'refresh-ccw'} />\n          {t('session_info_node.reload')}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo, useEffect, useRef } from 'react'\nimport { Position, useInternalNode } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useFlowState } from 'src/states/flow'\nimport { convertToTypeScriptInterface, convertToZodSchemaString } from 'src/utils/schema-format'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from 'src/lib/shadcn/ui/tabs'\nimport { Card } from 'src/lib/shadcn/ui/card'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { SchemaNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const SchemaNode = memo((props: SchemaNodeProps) => {\n  const { t } = useTranslation('flows')\n  const { id, data, isConnectable } = props\n  const loadingRef = useRef(false)\n  const node = useInternalNode(id)\n  const updateNodes = useFlowState((state) => state.updateNodes)\n\n  useConnectionToHandler(id)\n\n  useEffect(() => {\n    const schema = data?.entity\n    if (!schema || !node || loadingRef.current || schema?.schema_items?.length || data.loaded)\n      return\n\n    loadingRef.current = true\n    getRepository('SchemaItem')\n      .find({\n        where: {\n          schema_id: schema.id,\n        },\n      })\n      .then((schemaItems) => {\n        updateNodes([\n          {\n            id: node.id,\n            type: 'replace',\n            item: {\n              ...node,\n              data: {\n                ...(node?.data || {}),\n                loaded: true,\n                entity: {\n                  ...data.entity,\n                  schema_items: schemaItems,\n                },\n              },\n            },\n          },\n        ])\n      })\n      .finally(() => {\n        loadingRef.current = false\n      })\n  }, [data.entity, data.loaded, node, updateNodes])\n\n  return (\n    <div>\n      <div>\n        <NodeHeader id={id} />\n        <Tabs defaultValue=\"account\" className=\"w-[400px]\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"account\">{t('schema_node.typescript')}</TabsTrigger>\n            <TabsTrigger value=\"password\">{t('schema_node.zod')}</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"account\">\n            <Card className=\"p-4\">\n              <pre className=\"overflow-hidden break-words whitespace-pre-wrap\">\n                {convertToTypeScriptInterface(data?.entity?.schema_items || [])}\n              </pre>\n            </Card>\n          </TabsContent>\n          <TabsContent value=\"password\">\n            <Card className=\"p-4 max-w-full\">\n              <pre className=\"overflow-hidden break-words whitespace-pre-wrap\">\n                {convertToZodSchemaString(data?.entity?.schema_items || [])}\n              </pre>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useMemo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardContent, CardHeader } from 'src/lib/shadcn/ui/card'\nimport { decodeLine, decodeSplitter } from 'src/utils/string-data'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { CSVDataNodeProps } from './type'\n\nexport const CSVDataNode = memo((props: CSVDataNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  const csv = useMemo(() => {\n    if (!data?.entity) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const lines = decodeLine(data.entity.csv)\n\n    return {\n      headers: decodeSplitter(data.entity.headers),\n      rows: lines.map((row) => decodeSplitter(row)),\n    }\n  }, [data?.entity])\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Card className=\"min-w-32 min-h-16 p-4\">\n          <CardHeader className=\"!p-0\">\n            <div className=\"pt-2 flex !flex-row\">\n              <LazyIcon name=\"file-spreadsheet\" className=\"mr-2\" />\n              <Label className=\"!font-medium leading-none tracking-tight pr-8\">\n                {FlowNodeTypeEnum.CSVData} {csv?.rows?.length ? `(${csv?.rows?.length || 0})` : ''}\n              </Label>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pb-0\">\n            <DataViewer data={csv.rows} headers={csv.headers} />\n          </CardContent>\n        </Card>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          source?.type === FlowNodeTypeEnum.Schema &&\n          target?.type === FlowNodeTypeEnum.ToolDefinition\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { ToolNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ToolNode = memo(({ id, data, isConnectable }: ToolNodeProps) => {\n  useConnectionToHandler(id)\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <Alert className=\"flex justify-center\">\n          <LazyIcon size={24} name=\"wrench\" />\n          <div className=\"ml-2\">\n            <AlertTitle>{`${data.entity?.name || ''}`}</AlertTitle>\n            <AlertDescription>{`${data.entity?.description || ''}`}</AlertDescription>\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LazyIcon from './LazyIcon'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Popover, PopoverContent, PopoverTrigger } from 'src/lib/shadcn/ui/popover'\nimport { cn } from 'src/lib/utils'\nimport { Alert } from 'src/lib/shadcn/ui/alert'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { LLMProviderEnum } from 'src/services/database/types'\nimport { GOOGLE_GENERATIVE_AI_API_KEY_LINK, OPEN_AI_API_KEY_LINK } from 'src/constants/llm'\nimport { useConfirmPassphrase } from 'src/hooks/mutations/use-confirm-passphrase'\nimport secureSession from 'src/utils/secure-session'\nimport { decryptSymmetric } from 'src/utils/aes'\n\nexport const EmbeddingSetting = memo(\n  (props: {\n    name?: string\n    className?: string\n    encrypted?: Record<string, unknown>\n    options?: Record<string, unknown>\n    supportedProviders?: string[]\n    onChangeOptions?: (\n      options: Record<string, unknown>,\n      encrypted?: Record<string, unknown>,\n    ) => Promise<void>\n  }) => {\n    const [show, setShow] = useState(false)\n    const [options, setOptions] = useState<Record<string, unknown>>({})\n    const [encrypted, setEncrypted] = useState<Record<string, unknown>>({})\n    const { confirmPassphrase } = useConfirmPassphrase()\n    const { t } = useTranslation('atoms')\n\n    const handleOpenChange = async () => {\n      if (!show) {\n        if (Object.keys(props.encrypted || {})?.length) {\n          await confirmPassphrase()\n          const decrypted: Record<string, unknown> = {}\n          const passphrase = await secureSession.get('passphrase')\n          if (!passphrase) {\n            throw new Error('Passphrase is not found')\n          }\n          await Promise.all(\n            Object.keys(props.encrypted || {}).map(async (key) => {\n              if (props.encrypted?.[key]) {\n                decrypted[key] = await decryptSymmetric(\n                  props.encrypted?.[key] as string,\n                  passphrase!,\n                )\n              }\n            }),\n          )\n          setEncrypted(decrypted || {})\n        }\n        setOptions({ ...props.options })\n      } else {\n        setOptions({})\n        setEncrypted({})\n      }\n      setShow(!show)\n    }\n\n    const hanleSubmit = () => {\n      props.onChangeOptions?.(options || {}, encrypted || {})\n      setShow(false)\n    }\n\n    return (\n      <div className={cn('min-w-20 flex justify-end', props.className)}>\n        <Popover open={show} onOpenChange={setShow}>\n          <PopoverTrigger>\n            <div className=\"flex justify-end gap-2 !cursor-pointer\">\n              <Button\n                onClick={handleOpenChange}\n                variant=\"link\"\n                className=\"flex items-center px-0 !cursor-pointer\"\n              >\n                <LazyIcon name=\"settings\" />\n                <Label>{t('embedding_setting.title')}</Label>\n              </Button>\n            </div>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-full p-0\">\n            {show ? (\n              <Card className=\"!border-none max-w-96 min-w-56\">\n                <CardHeader>\n                  <CardTitle>{t('embedding_setting.title')}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Label>{t('embedding_setting.provider')}:</Label>\n                  <Select\n                    value={options?.provider ? `${options?.provider}` : 'local_transformers'}\n                    onValueChange={(value) => setOptions({ provider: value })}\n                  >\n                    <SelectTrigger className=\"\">\n                      <SelectValue placeholder={t('embedding_setting.provider_placeholder')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem key=\"local_transformers\" value=\"local_transformers\">\n                        {t('embedding_setting.providers.local_transformers')}\n                      </SelectItem>\n                      {props.supportedProviders?.map((provider) => (\n                        <SelectItem key={provider} value={provider}>\n                          {t(`embedding_setting.providers.${provider.toLowerCase()}`)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {!props.supportedProviders?.length ? (\n                    <Label className=\"text-red-500 !pt-2\">\n                      {t('embedding_setting.alerts.no_provider')}\n                    </Label>\n                  ) : undefined}\n                  <>\n                    {options.provider && options.provider !== 'local_transformers' ? (\n                      <>\n                        <Alert variant=\"destructive\" className=\"mt-4\">\n                          {t('embedding_setting.alerts.session_passkey')}\n                        </Alert>\n                        <div className=\"mt-4\">\n                          <Label>{t('embedding_setting.encrypted_fields.api_key')}</Label>\n                          <Button variant=\"link\" className=\"px-1\">\n                            <a\n                              href={\n                                options.provider === LLMProviderEnum.OpenAI\n                                  ? OPEN_AI_API_KEY_LINK\n                                  : GOOGLE_GENERATIVE_AI_API_KEY_LINK\n                              }\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                            >\n                              (\n                              {options.provider === LLMProviderEnum.OpenAI\n                                ? OPEN_AI_API_KEY_LINK\n                                : GOOGLE_GENERATIVE_AI_API_KEY_LINK}\n                              )\n                            </a>\n                          </Button>\n                          <Input\n                            type=\"password\"\n                            value={encrypted?.key ? `${encrypted?.key}` : ''}\n                            onChange={(e) =>\n                              setEncrypted((pre) => ({\n                                ...pre,\n                                key: e.target.value,\n                              }))\n                            }\n                          />\n                        </div>\n                      </>\n                    ) : undefined}\n                  </>\n                </CardContent>\n                <CardFooter className=\"flex justify-end\">\n                  <Button variant=\"secondary\" onClick={hanleSubmit}>\n                    {t('embedding_setting.save')}\n                  </Button>\n                </CardFooter>\n              </Card>\n            ) : undefined}\n          </PopoverContent>\n        </Popover>\n      </div>\n    )\n  },\n)\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node }) => {\n      return {\n        deleteEdgeId: edgeId,\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { useCallback, useEffect } from 'react'\nimport { NodeChange, useInternalNode, useNodes, Node } from '@xyflow/react'\nimport {\n  FlowNodePlaceholder,\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { SYSTEM_NODE_IDS } from 'src/constants/nodes'\nimport secureSession from 'src/utils/secure-session'\nimport { encryptSymmetric } from 'src/utils/aes'\nimport { useConfirmOrCreatePassphrase } from 'src/hooks/mutations/use-confirm-or-create-passphrase'\n\nexport const useActions = (id: string) => {\n  const currentSessionId = useSessionState((state) => state.currentSession?.id)\n  const node = useInternalNode(id)\n  const nodes = useNodes()\n\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { confirmOrCreatePassphrase } = useConfirmOrCreatePassphrase()\n\n  const changeLLMOptions = useCallback(\n    async (input: Record<string, unknown>, inputEncrypted?: Record<string, unknown>) => {\n      if (node && currentSessionId) {\n        let flowNode =\n          id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL\n            ? await getRepository('FlowNode').findOne({\n                where: { id },\n              })\n            : undefined\n\n        const encrypted: Record<string, unknown> = {}\n        if (Object.keys(inputEncrypted || {})?.length) {\n          await confirmOrCreatePassphrase()\n          const passphrase = await secureSession.get('passphrase')\n          if (!passphrase) {\n            throw new Error('Passphrase is not found')\n          }\n          await Promise.all(\n            Object.keys(inputEncrypted || {}).map(async (key) => {\n              if (inputEncrypted?.[key]) {\n                encrypted[key] = await encryptSymmetric(inputEncrypted[key] as string, passphrase!)\n              }\n            }),\n          )\n        }\n        let flowNodePlaceholder: FlowNodePlaceholder | undefined\n        const changes: NodeChange<Node>[] = []\n        if (!flowNode) {\n          changes.push({ id, type: 'remove' })\n          flowNodePlaceholder = await getRepository('FlowNodePlaceholder').save({\n            placeholder_type: FlowNodePlaceholderTypeEnum.DEFAULT_EMBEDDING_MODEL,\n            encrypted,\n            data: input,\n            session_id: currentSessionId,\n          })\n          flowNode = await getRepository('FlowNode').save({\n            node_type: FlowNodeTypeEnum.DefaultEmbeddingModel,\n            session_id: currentSessionId,\n            source_type: 'FlowNodePlaceholder',\n            source_id: flowNodePlaceholder.id,\n            x: node.position.x,\n            y: node.position.y,\n          })\n          changes.push({ type: 'add', item: node })\n        } else {\n          await getRepository('FlowNodePlaceholder').update(flowNode.source_id, {\n            encrypted,\n            data: input,\n          })\n          flowNodePlaceholder = await getRepository('FlowNodePlaceholder').findOne({\n            where: { id: flowNode.source_id },\n          })\n          changes.push({ id: flowNode.id, type: 'replace', item: node })\n        }\n        node.data.entity = flowNodePlaceholder\n        node.data.flowNode = flowNode\n        updateNodes(changes)\n      }\n    },\n    [confirmOrCreatePassphrase, currentSessionId, id, node, updateNodes],\n  )\n\n  useEffect(() => {\n    if (id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL) return\n\n    const embeddingNode = nodes.find(\n      (n) =>\n        n.type === FlowNodeTypeEnum.DefaultEmbeddingModel &&\n        n.id !== SYSTEM_NODE_IDS.DEFAULT_EMBEDDING_MODEL,\n    )\n    if (embeddingNode) {\n      updateNodes([{ id, type: 'remove' as const }])\n    }\n  }, [id, nodes, updateNodes])\n\n  return {\n    changeLLMOptions,\n  }\n}\n","import { memo } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Position } from '@xyflow/react'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { EmbeddingSetting } from 'src/components/atoms/EmbeddingSetting'\nimport { LLMProviderEnum } from 'src/services/database/types'\nimport { DEFAULT_EMBEDDING_MODEL } from 'src/constants/embedding'\n\nimport { EmbeddingNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\n\nexport const EmbeddingNode = memo((props: EmbeddingNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { changeLLMOptions } = useActions(id)\n\n  useConnectionToHandler(id)\n\n  let model = 'brain'\n  let modelName = DEFAULT_EMBEDDING_MODEL\n  switch (`${data?.entity?.data?.provider}`) {\n    case LLMProviderEnum.OpenAI:\n      model = 'gpt'\n      modelName = 'text-embedding-3-small'\n      break\n    case LLMProviderEnum.GoogleGenerativeAI:\n      model = 'gemma'\n      modelName = 'text-embedding-004'\n      break\n  }\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <Alert className=\"flex justify-center max-w-auto\" variant=\"default\">\n          <LLMIcon name={model} className=\"w-7 h-7\" />\n          <div className=\"ml-2 pr-4 flex justify-center gap-1 flex-col\">\n            <div className=\"min-h-8 flex items-center\">\n              <AlertTitle>{`${modelName || ''}`}</AlertTitle>\n            </div>\n            <EmbeddingSetting\n              supportedProviders={[LLMProviderEnum.OpenAI, LLMProviderEnum.GoogleGenerativeAI]}\n              onChangeOptions={changeLLMOptions}\n              encrypted={data.entity?.encrypted}\n              options={data.entity?.data}\n            />\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { Node } from '@xyflow/react'\nimport type { Document } from '@langchain/core/documents'\nimport { useTranslation } from 'react-i18next'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from 'src/lib/shadcn/ui/dialog'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useCreatePrompt } from 'src/hooks/flows/mutations/use-create-prompt'\nimport { Prompt } from 'src/services/database/types'\nimport PromptForm from 'src/components/molecules/CreatePromptCard/PromptForm'\nimport { useToast } from 'src/lib/hooks/use-toast'\n\nconst DEFAULT_PROMPT = `Use the following pieces of context to answer the question at the end.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\nUse three sentences maximum and keep the answer as concise as possible.\n\n{context}\n`\n\ntype CreateVectorDatabasePromptProps = {\n  className: string\n  source: Node\n  documents: Document[]\n}\n\nconst CreateVectorDatabasePromptDialog = create<CreateVectorDatabasePromptProps>((props) => {\n  const { source, documents } = props\n  const currentModal = useModal()\n  const { toast } = useToast()\n  const { t } = useTranslation('dialogs')\n  const { loading, createPrompt } = useCreatePrompt()\n\n  const handleSubmit = async (data: Partial<Prompt>) => {\n    try {\n      if (!data.content || !data.content.includes(`{context}`)) {\n        toast({\n          title: t('create_vector_database_prompt.errors.fill_context'),\n          variant: 'destructive',\n        })\n        return\n      }\n      // NOTE: No need to use Prompt template because it will automatically added role prefix\n      const content = data.content.replace(\n        '{context}',\n        documents.map((doc) => `<document>${doc.pageContent}</document>`).join('\\n'),\n      )\n      await createPrompt(source, {\n        ...data,\n        content,\n      })\n      currentModal.hide()\n      return true\n    } catch {\n      toast({\n        title: t('create_vector_database_prompt.errors.create_failed'),\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <div className=\"flex\">\n            <LazyIcon name=\"file\" className=\"mr-2 h-4 w-4\" />\n            <DialogTitle>{t('create_vector_database_prompt.title')}</DialogTitle>\n          </div>\n        </DialogHeader>\n        <div className=\"flex gap-4 py-4 flex-col\">\n          <PromptForm\n            onSubmit={handleSubmit}\n            loading={loading}\n            hidePromptType\n            defaultPromptRole=\"system\"\n            defaultPromptContent={DEFAULT_PROMPT}\n          />\n          <div className=\"w-full border-0 text-gray-700 flex text-sm items-center\">\n            <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n            {t('create_vector_database_prompt.fill_content_note')}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default CreateVectorDatabasePromptDialog\n","import { Node } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FlowNodePlaceholderTypeEnum,\n  FlowNodeTypeEnum,\n  MessageRoleEnum,\n  MessageStatusEnum,\n  Prompt,\n  PromptTypeEnum,\n  VectorDatabase,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useCreateVectorDatabaseRetriever = () => {\n  const sessionId = useSessionState((state) => state.currentSession?.id)\n\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const createVectorDatabaseRetriever = useCallback(\n    async ({\n      prompt,\n      source,\n      metadata,\n    }: {\n      source: Node\n      prompt?: Partial<Prompt>\n      metadata?: Record<string, unknown>\n    }) => {\n      try {\n        const vectorDatabase = source?.data?.entity as VectorDatabase\n        if (!vectorDatabase || !sessionId) {\n          throw new Error('Source or Session not found')\n        }\n        setLoading(true)\n        const initialX = source.position?.x || 0\n        const initialY = (source.position?.y || 0) + (source.measured?.height || 0)\n\n        const systempPrompt = await getRepository('Prompt').save({\n          ...prompt,\n          status: prompt?.status || MessageStatusEnum.Started,\n          role: prompt?.role || MessageRoleEnum.System,\n          type: prompt?.type || PromptTypeEnum.Chat,\n          content: prompt?.content || '{context}',\n          session_id: sessionId,\n        })\n        if (!systempPrompt) {\n          throw new Error('Failed to save prompt')\n        }\n        const systemPromptNode = await createOrUpdateFlowNode({\n          source_id: systempPrompt.id,\n          source_type: 'Prompt',\n          node_type: FlowNodeTypeEnum.Prompt,\n          x: initialX,\n          y: initialY + 20,\n        })\n        if (!systemPromptNode) {\n          throw new Error('Failed to save prompt node')\n        }\n        const retriever = await getRepository('FlowNodePlaceholder').save({\n          placeholder: `Retriever for ${vectorDatabase.name}`,\n          placeholder_type: FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER,\n          session_id: sessionId,\n          metadata,\n        })\n        if (!retriever) {\n          throw new Error('Failed to save node placeholder')\n        }\n        const retrieverNode = await createOrUpdateFlowNode({\n          source_id: retriever.id,\n          source_type: 'FlowNodePlaceholder',\n          node_type: FlowNodeTypeEnum.PlaceHolder,\n          x: initialX,\n          y: initialY + 40,\n        })\n        if (!retrieverNode) {\n          throw new Error('Failed to save node placeholder node')\n        }\n        await createOrUpdateFlowEdge({\n          source: systemPromptNode.id,\n          target: retrieverNode.id,\n        })\n        await createOrUpdateFlowEdge({\n          source: source.id,\n          target: retrieverNode.id,\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [sessionId, createOrUpdateFlowNode, createOrUpdateFlowEdge],\n  )\n\n  return {\n    loading,\n    createVectorDatabaseRetriever,\n  }\n}\n","import { create, useModal } from '@ebay/nice-modal-react'\nimport { Node } from '@xyflow/react'\nimport { useTranslation } from 'react-i18next'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from 'src/lib/shadcn/ui/dialog'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { Prompt } from 'src/services/database/types'\nimport PromptForm from 'src/components/molecules/CreatePromptCard/PromptForm'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { useCreateVectorDatabaseRetriever } from 'src/hooks/flows/mutations/use-create-vector-database-retriever'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport { Input } from 'src/lib/shadcn/ui/input'\nimport { useState } from 'react'\n\nconst DEFAULT_PROMPT = `Use the following pieces of context to answer the question at the end.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}\n`\n\ntype CreateVectorDatabaseRetrieverDialogProps = {\n  className: string\n  source: Node\n}\n\nconst CreateVectorDatabaseRetrieverDialog = create<CreateVectorDatabaseRetrieverDialogProps>(\n  (props) => {\n    const { source } = props\n    const currentModal = useModal()\n    const { toast } = useToast()\n    const { t } = useTranslation('dialogs')\n    const [k, setK] = useState<number | undefined>(1)\n    const [minimalScore, setMinimalScore] = useState<number | undefined>(undefined)\n    const { loading, createVectorDatabaseRetriever } = useCreateVectorDatabaseRetriever()\n\n    const handleSubmit = async (data: Partial<Prompt>) => {\n      try {\n        const content = data.content\n        if (!content || !content.includes(`{context}`)) {\n          toast({\n            title: t('create_vector_database_retriever.errors.fill_context'),\n            variant: 'destructive',\n          })\n          return\n        }\n        await createVectorDatabaseRetriever({\n          source,\n          prompt: {\n            content: content,\n          },\n          metadata: {\n            k,\n            minimalScore,\n          },\n        })\n        setK(1)\n        setMinimalScore(undefined)\n        currentModal.hide()\n        return true\n      } catch {\n        toast({\n          title: t('create_vector_database_retriever.errors.create_failed'),\n          variant: 'destructive',\n        })\n      }\n    }\n\n    const handleOnChangeK = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setK(e.target.value ? Number(e.target.value) : undefined)\n    }\n\n    const handleOnChangeMinimalScore = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setMinimalScore(e.target.value ? Number(e.target.value) : undefined)\n    }\n\n    return (\n      <Dialog open={currentModal.visible} onOpenChange={currentModal.hide}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <div className=\"flex\">\n              <LazyIcon name=\"file\" className=\"mr-2 h-4 w-4\" />\n              <DialogTitle>{t('create_vector_database_retriever.title')}</DialogTitle>\n            </div>\n          </DialogHeader>\n          <div className=\"flex gap-4 py-4 flex-col\">\n            <PromptForm\n              onSubmit={handleSubmit}\n              loading={loading}\n              hidePromptType\n              defaultPromptRole=\"system\"\n              defaultPromptContent={DEFAULT_PROMPT}\n            />\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('create_vector_database_retriever.retriever_settings')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Label>{t('create_vector_database_retriever.retriever_k')}</Label>\n                <Input\n                  value={k || ''}\n                  type=\"number\"\n                  onChange={handleOnChangeK}\n                  placeholder={t('create_vector_database_retriever.retriever_k_placeholder')}\n                />\n                <Label>{t('create_vector_database_retriever.retriever_minimum_score')}</Label>\n                <Input\n                  value={minimalScore || ''}\n                  type=\"number\"\n                  onChange={handleOnChangeMinimalScore}\n                  placeholder={t(\n                    'create_vector_database_retriever.retriever_minimum_score_placeholder',\n                  )}\n                />\n              </CardContent>\n            </Card>\n            <div className=\"w-full border-0 text-gray-700 flex text-sm items-center\">\n              <LazyIcon name=\"info\" className=\"mr-2\" size={14} />\n              {t('create_vector_database_retriever.fill_content_note')}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    )\n  },\n)\n\nexport default CreateVectorDatabaseRetrieverDialog\n","import { useCallback } from 'react'\nimport { Node } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\nimport { useFlowState } from 'src/states/flow'\nimport { CSVData, FlowNodeTypeEnum, VectorDatabase } from 'src/services/database/types'\nimport { decodeCSVData } from 'src/utils/string-data'\nimport { Document } from '@langchain/core/documents'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n  const { index: indexFunction } = useEmbedding()\n\n  const connectionHandler = useCallback(\n    async ({ edgeId, target, source }: { edgeId: string; source: Node; target: Node }) => {\n      try {\n        const targetEntity = target?.data?.entity as VectorDatabase\n        if (\n          source?.type === FlowNodeTypeEnum.CSVData &&\n          target?.type === FlowNodeTypeEnum.VectorDatabase\n        ) {\n          const csvData = source?.data?.entity as CSVData\n          if (!csvData || !targetEntity) {\n            return {\n              deleteEdgeId: edgeId,\n            }\n          }\n          const { rows } = decodeCSVData(csvData.headers, csvData.csv)\n          const documents = rows.map(\n            (row) =>\n              new Document({\n                pageContent: `${row.text}`,\n              }),\n          )\n          await indexFunction(\n            getFlowEmbeddingEntity(),\n            {\n              database: {\n                databaseId: targetEntity.id,\n                dataSourceId: csvData.id,\n                dataSourceType: 'CSVData',\n              },\n            },\n            documents,\n          )\n          await createOrUpdateFlowEdge({\n            source: source.id,\n            target: target.id,\n          })\n          return\n        }\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge, getFlowEmbeddingEntity, indexFunction],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { Document } from '@langchain/core/documents'\nimport chunk from 'lodash/chunk'\nimport { useReactFlow } from '@xyflow/react'\nimport { useCallback, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { getRepository } from 'src/services/database'\nimport type { VectorDatabase } from 'src/services/database/types'\nimport {\n  FlowNodeTypeEnum,\n  CSVData,\n  JSONData,\n  JSONLData,\n  VectorDatabaseStorageEnum,\n} from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getStorageDataSource } from 'src/utils/vector-storage'\nimport { useEmbedding } from 'src/hooks/mutations/use-embedding'\nimport { useFlowEmbeddingNode } from 'src/hooks/flows/use-flow-embedding-node'\n\nexport const useActions = (id: string) => {\n  const [loading, setLoading] = useState(false)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n\n  const { getNode, getHandleConnections } = useReactFlow()\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const { getFlowEmbeddingEntity } = useFlowEmbeddingNode()\n  const { index: indexFunction, similaritySearchWithScore: similaritySearchWithScoreFunction } =\n    useEmbedding()\n  const similaritySearchWithScore = useCallback(\n    async (input: string, options?: { k?: number }) => {\n      try {\n        const vectorDatabaseNode = getNode(id)\n        if (!vectorDatabaseNode) {\n          return\n        }\n        const entity = vectorDatabaseNode.data?.entity as VectorDatabase\n        if (!entity) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n        const embbedingEntity = getFlowEmbeddingEntity()\n        if (entity.storage === VectorDatabaseStorageEnum.DataNode) {\n          const connections = getHandleConnections({\n            nodeId: id,\n            type: 'target',\n          })\n          const dataSourceNode = connections\n            .map((connection) => getNode(connection.source))\n            .find(\n              (node) =>\n                node?.type &&\n                [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                  node?.type as FlowNodeTypeEnum,\n                ),\n            )\n          const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n          if (!dataSource) {\n            toast({\n              variant: 'destructive',\n              title: t('vector_database_node.errors.data_node_not_found'),\n            })\n            return\n          }\n          setLoading(true)\n          const result = await similaritySearchWithScoreFunction(\n            embbedingEntity,\n            {\n              database: {\n                databaseId: entity.id,\n                dataSourceId: dataSource.id,\n                dataSourceType: getStorageDataSource(dataSource),\n              },\n            },\n            input,\n            options?.k,\n          )\n          return result\n        } else {\n          setLoading(true)\n          const result = await similaritySearchWithScoreFunction(\n            embbedingEntity,\n            {\n              database: {\n                databaseId: entity.id,\n              },\n            },\n            input,\n            options?.k,\n          )\n          return result\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [\n      getNode,\n      id,\n      getFlowEmbeddingEntity,\n      toast,\n      t,\n      getHandleConnections,\n      similaritySearchWithScoreFunction,\n    ],\n  )\n\n  const indexData = useCallback(\n    async (\n      data: { id?: string; content?: string; documents?: Document[] },\n      options?: {\n        onProgressReport?: (info: { total: number; handled: number; handling: number }) => void\n      },\n    ) => {\n      try {\n        const vectorDatabaseNode = getNode(id)\n        if (!vectorDatabaseNode) {\n          return\n        }\n        setLoading(true)\n        const documents = data.content\n          ? [\n              new Document({\n                pageContent: data.content,\n                id: data.id,\n                metadata: {\n                  id: data.id,\n                },\n              }),\n            ]\n          : data.documents\n\n        if (!documents?.length) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.content_not_found'),\n          })\n          return\n        }\n\n        const entity = vectorDatabaseNode.data?.entity as VectorDatabase\n        if (!entity || !vectorDatabaseNode) {\n          toast({\n            variant: 'destructive',\n            title: t('vector_database_node.errors.vector_database_not_found'),\n          })\n          return\n        }\n\n        const embbedingEntity = getFlowEmbeddingEntity()\n\n        if (entity.storage === VectorDatabaseStorageEnum.DataNode) {\n          const connections = getHandleConnections({\n            nodeId: id,\n            type: 'target',\n          })\n          const dataSourceNode = connections\n            .map((connection) => getNode(connection.source))\n            .find(\n              (node) =>\n                node?.type &&\n                [FlowNodeTypeEnum.JSONLData, FlowNodeTypeEnum.CSVData].includes(\n                  node?.type as FlowNodeTypeEnum,\n                ),\n            )\n\n          const dataSource = dataSourceNode?.data?.entity as CSVData | JSONData | JSONLData\n          if (!dataSource) {\n            toast({\n              variant: 'destructive',\n              title: t('vector_database_node.errors.data_node_not_found'),\n            })\n            return\n          }\n          const dataSourceType = getStorageDataSource(dataSource)\n\n          const chunkedDocuments = chunk(documents, 10)\n          let handledCount = 0\n\n          for (const partDocuments of chunkedDocuments) {\n            options?.onProgressReport?.({\n              handling: partDocuments.length,\n              handled: handledCount,\n              total: documents.length,\n            })\n            await indexFunction(\n              embbedingEntity,\n              {\n                database: {\n                  databaseId: entity.id,\n                  dataSourceId: dataSource.id,\n                  dataSourceType,\n                },\n              },\n              partDocuments,\n            )\n            if (dataSourceType && dataSourceNode) {\n              const updatedDataNode = await getRepository(dataSourceType).findOne({\n                where: { id: dataSource.id },\n              })\n              updateNodes([\n                {\n                  type: 'replace',\n                  id: dataSourceNode.id,\n                  item: {\n                    ...dataSourceNode,\n                    data: {\n                      ...dataSourceNode.data,\n                      entity: updatedDataNode,\n                    },\n                  },\n                },\n              ])\n            }\n            handledCount += partDocuments.length\n          }\n        } else {\n          // DEFAULT OPTION IS INDEXING AND STORED DIRECTLY TO VECTOR DATABASE ENTITY\n          const chunkedDocuments = chunk(documents, 10)\n          let handledCount = 0\n\n          for (const partDocuments of chunkedDocuments) {\n            options?.onProgressReport?.({\n              handling: partDocuments.length,\n              handled: handledCount,\n              total: documents.length,\n            })\n            await indexFunction(\n              embbedingEntity,\n              {\n                database: {\n                  databaseId: entity.id,\n                },\n              },\n              partDocuments,\n            )\n            const updatedDataNode = await getRepository('VectorDatabase').findOne({\n              where: { id: `${entity.id}` },\n            })\n            updateNodes([\n              {\n                type: 'replace',\n                id: vectorDatabaseNode.id,\n                item: {\n                  ...vectorDatabaseNode,\n                  data: {\n                    ...vectorDatabaseNode.data,\n                    entity: updatedDataNode,\n                  },\n                },\n              },\n            ])\n            handledCount += partDocuments.length\n          }\n        }\n      } catch {\n        toast({\n          variant: 'destructive',\n          title: t('vector_database_node.errors.similarity_search_failed'),\n        })\n      } finally {\n        setLoading(false)\n      }\n    },\n    [\n      getNode,\n      id,\n      getFlowEmbeddingEntity,\n      toast,\n      t,\n      getHandleConnections,\n      indexFunction,\n      updateNodes,\n    ],\n  )\n\n  return {\n    loading,\n    indexData,\n    similaritySearchWithScore,\n  }\n}\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { Alert, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport type { Document } from '@langchain/core/documents'\nimport { Position, useInternalNode } from '@xyflow/react'\nimport { WebPDFLoader } from '@langchain/community/document_loaders/web/pdf'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { useTranslation } from 'react-i18next'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from 'src/lib/shadcn/ui/tabs'\nimport { useModal } from '@ebay/nice-modal-react'\nimport CreatePromptDialog from 'src/components/dialogs/CreateVectorDatabasePromptDialog'\nimport CreateRetrieverDialog from 'src/components/dialogs/CreateVectorDatabaseRetrieverDialog'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { VectorDatabaseStorageEnum } from 'src/services/database/types'\nimport { cn } from 'src/lib/utils'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { decodeLine } from 'src/utils/string-data'\n\nimport { VectorDatabaseNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\nimport { VectorSearch } from './components/VectorSearch'\nimport IndexNewText from './components/IndexNewText'\nimport IndexNewFile from './components/IndexNewFile'\n\nexport const VectorDatabaseNode = memo((props: VectorDatabaseNodeProps) => {\n  const { t } = useTranslation('flows')\n  const [progress, setProgress] = useState(0)\n  const [mode, setMode] = useState('search')\n  const node = useInternalNode(props.id)\n  const { id, data, isConnectable } = props\n  const { loading, similaritySearchWithScore, indexData } = useActions(id)\n\n  const createPromptDialog = useModal(CreatePromptDialog)\n  const createRetrieverDialog = useModal(CreateRetrieverDialog)\n\n  useConnectionToHandler(id)\n\n  const handleCreateData = useCallback(\n    async (...args: Parameters<typeof indexData>) => {\n      if (node) {\n        await indexData(...args)\n      }\n    },\n    [indexData, node],\n  )\n\n  const handleSimilaritySearch = useCallback(\n    async (value: string, k?: number) => {\n      const input = value.trim()\n      const documents = await similaritySearchWithScore(input, { k })\n      if (!documents?.length) {\n        return\n      }\n      return documents\n    },\n    [similaritySearchWithScore],\n  )\n\n  const handleCreatePrompt = useCallback(\n    (content: [Document, number][]) => {\n      createPromptDialog.show({\n        source: node,\n        documents: content.map(([doc]) => doc),\n      })\n    },\n    [createPromptDialog, node],\n  )\n\n  const handleCreateRetriever = useCallback(async () => {\n    createRetrieverDialog.show({\n      source: node,\n    })\n  }, [createRetrieverDialog, node])\n\n  const handleIndexPDF = useCallback(\n    async (file: File) => {\n      if (file.type.includes('text') || file.type.includes('txt')) {\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n          const content = e.target?.result as string\n          await handleCreateData({ content })\n        }\n        reader.readAsText(file)\n      } else if (file.type.endsWith('pdf')) {\n        // File to blob\n        const blob = new Blob([file], { type: 'application/pdf' })\n        const customBuildLoader = new WebPDFLoader(blob, {\n          // you may need to add `.then(m => m.default)` to the end of the import\n          pdfjs: async () => {\n            const pdfjs = await import('pdfjs-dist/legacy/build/pdf.min.mjs')\n            await import('pdfjs-dist/legacy/build/pdf.worker.min.mjs')\n            pdfjs.GlobalWorkerOptions.workerSrc = new URL(\n              'pdfjs-dist/build/pdf.worker.min.js',\n              import.meta.url,\n            ).toString()\n            return pdfjs\n          },\n          parsedItemSeparator: ' ',\n        })\n        const documents = await customBuildLoader.load()\n        await handleCreateData(\n          { documents },\n          {\n            onProgressReport: (info) => {\n              setProgress((info.handled + info.handling) / info.total)\n            },\n          },\n        )\n      }\n    },\n    [handleCreateData],\n  )\n\n  const vectorDatabaseData = useMemo(() => {\n    if (!data?.entity?.raw) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const headers = ['content', 'embedding', 'metadata']\n    const lines = decodeLine(data?.entity?.raw)\n    return {\n      headers,\n      rows: lines.map((row) => {\n        try {\n          const data = JSON.parse(row)\n          return data\n        } catch {\n          return []\n        }\n      }),\n    }\n  }, [data?.entity?.raw])\n\n  const renderContent = useMemo(() => {\n    switch (mode) {\n      case 'search':\n        return (\n          <TabsContent value=\"search\">\n            <VectorSearch\n              loading={loading}\n              onSimilaritySearch={handleSimilaritySearch}\n              onCreatePrompt={handleCreatePrompt}\n              onCreateRetriever={handleCreateRetriever}\n            />\n          </TabsContent>\n        )\n      case 'new':\n        return (\n          <TabsContent className=\"min-w-80\" value=\"new\">\n            <IndexNewText loading={loading} onCreateData={handleCreateData} />\n          </TabsContent>\n        )\n      case 'file':\n        return (\n          <TabsContent value=\"file\">\n            <IndexNewFile\n              loading={loading}\n              progress={progress}\n              onFileSubmit={handleIndexPDF}\n              fileOptions={{ accept: '.pdf,.txt,.text', maxSize: 15 }}\n            />\n          </TabsContent>\n        )\n      case 'view': {\n        return (\n          <TabsContent value=\"view\">\n            <DataViewer\n              data={vectorDatabaseData.rows}\n              headers={vectorDatabaseData.headers}\n              limitLengthByColumns={{\n                embedding: 32,\n              }}\n            />\n          </TabsContent>\n        )\n      }\n    }\n  }, [\n    handleCreateData,\n    handleCreatePrompt,\n    handleCreateRetriever,\n    handleIndexPDF,\n    handleSimilaritySearch,\n    loading,\n    mode,\n    progress,\n    vectorDatabaseData,\n  ])\n\n  return (\n    <div className=\"min-w-72\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"max-w-full\">\n        <NodeHeader id={id} />\n        <Alert className=\"flex justify-center\" variant=\"default\">\n          <LazyIcon size={24} name={'database-zap'} />\n          <div className=\"ml-2 max-w-full\">\n            <AlertTitle>{`${data.entity?.name || ''}`}</AlertTitle>\n            <Tabs\n              value={mode}\n              onValueChange={setMode}\n              defaultValue=\"search\"\n              className={cn('w-full mt-4')}\n            >\n              <TabsList\n                className={cn(\n                  'grid w-full grid-cols-3',\n                  data.entity?.storage === VectorDatabaseStorageEnum.DatabaseNode\n                    ? 'grid-cols-4'\n                    : 'grid-cols-3',\n                )}\n              >\n                <TabsTrigger value=\"search\">{t('vector_database_node.search')}</TabsTrigger>\n                <TabsTrigger value=\"new\">{t('vector_database_node.text')}</TabsTrigger>\n                <TabsTrigger value=\"file\">{t('vector_database_node.file')}</TabsTrigger>\n                {data.entity?.storage === VectorDatabaseStorageEnum.DatabaseNode ? (\n                  <TabsTrigger value=\"view\">{t('vector_database_node.view')}</TabsTrigger>\n                ) : undefined}\n              </TabsList>\n              {renderContent}\n            </Tabs>\n          </div>\n        </Alert>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import { memo, useMemo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { Card, CardContent, CardHeader } from 'src/lib/shadcn/ui/card'\nimport { decodeLine, decodeSplitter } from 'src/utils/string-data'\nimport { Label } from 'src/lib/shadcn/ui/label'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { DataViewer } from 'src/components/molecules/Nodes/DataViewer'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\n\nimport { JSONLDataNodeProps } from './type'\n\nconst LIMIT_LENGTH_BY_COLUMNS = {\n  embedding: 32,\n}\nexport const JSONLDataNode = memo((props: JSONLDataNodeProps) => {\n  const { id, data, isConnectable } = props\n\n  const jsonl = useMemo(() => {\n    if (!data?.entity?.jsonl) {\n      return {\n        headers: [],\n        rows: [],\n      }\n    }\n\n    const headers = decodeSplitter(data.entity.headers || '')\n    const lines = decodeLine(data.entity.jsonl)\n    return {\n      headers,\n      rows: lines.map((row) => {\n        try {\n          const data = JSON.parse(row)\n          return data\n        } catch {\n          return []\n        }\n      }),\n    }\n  }, [data?.entity?.jsonl, data.entity.headers])\n\n  return (\n    <div className=\"min-w-80\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div>\n        <NodeHeader id={id} />\n        <Card className=\"min-w-32 min-h-16 p-4\">\n          <CardHeader className=\"!p-0\">\n            <div className=\"pt-2 flex !flex-row\">\n              <LazyIcon name=\"file-json\" className=\"mr-2\" />\n              <Label className=\"!font-medium leading-none tracking-tight pr-8\">\n                {FlowNodeTypeEnum.JSONLData}{' '}\n                {jsonl?.rows?.length ? `(${jsonl?.rows?.length || 0})` : ''}\n              </Label>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pb-0\">\n            <DataViewer\n              data={jsonl.rows}\n              headers={jsonl.headers}\n              limitLengthByColumns={LIMIT_LENGTH_BY_COLUMNS}\n            />\n          </CardContent>\n        </Card>\n      </div>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","'use client'\n\nimport React, { PropsWithChildren, useRef } from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { motion, MotionValue, useMotionValue, useSpring, useTransform } from 'framer-motion'\n\nimport { cn } from 'src/lib/utils'\n\nexport interface DockProps extends VariantProps<typeof dockVariants> {\n  className?: string\n  magnification?: number\n  distance?: number\n  direction?: 'top' | 'middle' | 'bottom'\n  children: React.ReactNode\n}\n\nconst DEFAULT_MAGNIFICATION = 60\nconst DEFAULT_DISTANCE = 140\n\nconst dockVariants = cva(\n  'supports-backdrop-blur:bg-white/10 supports-backdrop-blur:dark:bg-black/10 mx-auto flex h-[58px] w-max gap-2 rounded-lg border p-2 backdrop-blur-md',\n)\n\nconst Dock = React.forwardRef<HTMLDivElement, DockProps>(\n  (\n    {\n      className,\n      children,\n      magnification = DEFAULT_MAGNIFICATION,\n      distance = DEFAULT_DISTANCE,\n      direction = 'bottom',\n      ...props\n    },\n    ref,\n  ) => {\n    const mouseX = useMotionValue(Infinity)\n\n    const renderChildren = () => {\n      return React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === DockIcon) {\n          return React.cloneElement(child, {\n            ...child.props,\n            mouseX: mouseX,\n            magnification: magnification,\n            distance: distance,\n          })\n        }\n        return child\n      })\n    }\n\n    return (\n      <motion.div\n        ref={ref}\n        onMouseMove={(e) => mouseX.set(e.pageX)}\n        onMouseLeave={() => mouseX.set(Infinity)}\n        {...props}\n        className={cn(dockVariants({ className }), {\n          'items-start': direction === 'top',\n          'items-center': direction === 'middle',\n          'items-end': direction === 'bottom',\n        })}\n      >\n        {renderChildren()}\n      </motion.div>\n    )\n  },\n)\n\nDock.displayName = 'Dock'\n\nexport interface DockIconProps {\n  size?: number\n  magnification?: number\n  distance?: number\n  mouseX?: MotionValue<number>\n  className?: string\n  children?: React.ReactNode\n  props?: PropsWithChildren\n}\n\nconst DockIcon = ({\n  magnification = DEFAULT_MAGNIFICATION,\n  distance = DEFAULT_DISTANCE,\n  mouseX,\n  className,\n  children,\n  ...props\n}: DockIconProps) => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  const distanceCalc = useTransform(mouseX || new MotionValue(), (val: number) => {\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 }\n\n    return val - bounds.x - bounds.width / 2\n  })\n\n  const widthSync = useTransform(distanceCalc, [-distance, 0, distance], [40, magnification, 40])\n\n  const width = useSpring(widthSync, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  })\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{ width }}\n      className={cn(\n        'flex aspect-square cursor-pointer items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nDockIcon.displayName = 'DockIcon'\n\nexport { Dock, DockIcon, dockVariants }\n","import * as React from \"react\";\nconst SvgVisualStudioCode = (props) => /* @__PURE__ */ React.createElement(\"svg\", { viewBox: \"0 0 256 254\", xmlns: \"http://www.w3.org/2000/svg\", xmlnsXlink: \"http://www.w3.org/1999/xlink\", width: 256, height: 254, preserveAspectRatio: \"xMidYMid\", ...props }, /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"linearGradient\", { id: \"c\", x1: \"50%\", x2: \"50%\", y1: \"0%\", y2: \"100%\" }, /* @__PURE__ */ React.createElement(\"stop\", { offset: \"0%\", stopColor: \"#FFF\" }), /* @__PURE__ */ React.createElement(\"stop\", { offset: \"100%\", stopColor: \"#FFF\", stopOpacity: 0 })), /* @__PURE__ */ React.createElement(\"path\", { id: \"a\", d: \"M180.828 252.605a15.872 15.872 0 0 0 12.65-.486l52.501-25.262a15.94 15.94 0 0 0 9.025-14.364V41.197a15.939 15.939 0 0 0-9.025-14.363l-52.5-25.263a15.877 15.877 0 0 0-18.115 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233 100.507 91.695a15.853 15.853 0 0 0 5.464 3.571Zm10.464-183.649-76.262 57.889 76.262 57.888V68.956Z\" })), /* @__PURE__ */ React.createElement(\"mask\", { id: \"b\", fill: \"#fff\" }, /* @__PURE__ */ React.createElement(\"use\", { xlinkHref: \"#a\" })), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#0065A9\", d: \"M246.135 26.873 193.593 1.575a15.885 15.885 0 0 0-18.123 3.08L3.466 161.482c-4.626 4.219-4.62 11.502.012 15.714l14.05 12.772a10.625 10.625 0 0 0 13.569.604L238.229 33.436c6.949-5.271 16.93-.315 16.93 8.407v-.61a15.938 15.938 0 0 0-9.024-14.36Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#007ACC\", d: \"m246.135 226.816-52.542 25.298a15.887 15.887 0 0 1-18.123-3.08L3.466 92.207c-4.626-4.218-4.62-11.502.012-15.713l14.05-12.773a10.625 10.625 0 0 1 13.569-.603l207.132 157.135c6.949 5.271 16.93.315 16.93-8.408v.611a15.939 15.939 0 0 1-9.024 14.36Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"#1F9CF0\", d: \"M193.428 252.134a15.892 15.892 0 0 1-18.125-3.083c5.881 5.88 15.938 1.715 15.938-6.603V11.273c0-8.318-10.057-12.483-15.938-6.602a15.892 15.892 0 0 1 18.125-3.084l52.533 25.263a15.937 15.937 0 0 1 9.03 14.363V212.51c0 6.125-3.51 11.709-9.03 14.363l-52.533 25.262Z\" }), /* @__PURE__ */ React.createElement(\"path\", { fill: \"url(#c)\", fillOpacity: 0.25, d: \"M180.828 252.605a15.874 15.874 0 0 0 12.65-.486l52.5-25.263a15.938 15.938 0 0 0 9.026-14.363V41.197a15.939 15.939 0 0 0-9.025-14.363L193.477 1.57a15.877 15.877 0 0 0-18.114 3.084L74.857 96.35l-43.78-33.232a10.614 10.614 0 0 0-13.56.603L3.476 76.494c-4.63 4.211-4.635 11.495-.012 15.713l37.967 34.638-37.967 34.637c-4.623 4.219-4.618 11.502.012 15.714l14.041 12.772a10.614 10.614 0 0 0 13.56.604l43.78-33.233 100.506 91.695a15.857 15.857 0 0 0 5.465 3.571Zm10.464-183.65-76.262 57.89 76.262 57.888V68.956Z\" }));\nexport default SvgVisualStudioCode;\n","export default \"__VITE_ASSET__CAw3ne4Z__\"","import { FlowNodeTypeEnum } from 'src/services/database/types'\n\nexport const DEFAULT_NODE_SIZE: Partial<{\n  [key in FlowNodeTypeEnum]: { width: number; height: number }\n}> = {\n  [FlowNodeTypeEnum.Shape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.CircleShape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.TriangleShape]: { width: 100, height: 100 },\n  [FlowNodeTypeEnum.EditorApp]: { width: 1240, height: 400 },\n}\n","import { useCallback, useState } from 'react'\nimport { useInternalNode } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\n\nimport { DEFAULT_NODE_SIZE } from '../constants'\n\nexport const useActions = (id: string) => {\n  const node = useInternalNode(id)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [loading, setLoading] = useState(false)\n  const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode)\n\n  const createNode = useCallback(\n    async (nodeType: FlowNodeTypeEnum) => {\n      try {\n        setLoading(true)\n        if (node && currentSession?.id) {\n          const initialX = node.position?.x || 0\n          const initialY = (node.position?.y || 0) + (node.measured?.height || 0)\n\n          const nodeData = await getRepository('FlowNodeData').save({\n            data: {},\n            session_id: currentSession.id,\n          })\n\n          if (!nodeData) {\n            throw new Error('Failed to save node data')\n          }\n\n          const newNode = await createOrUpdateFlowNode({\n            node_type: nodeType,\n            data: {},\n            source_id: nodeData.id,\n            source_type: 'FlowNodeData',\n            x: initialX,\n            y: initialY + 20,\n            ...(DEFAULT_NODE_SIZE[nodeType] || {}),\n          })\n          if (!newNode) {\n            throw new Error('Failed to save node')\n          }\n        }\n      } finally {\n        setLoading(false)\n      }\n    },\n    [createOrUpdateFlowNode, currentSession?.id, node],\n  )\n\n  return {\n    loading,\n    createNode,\n  }\n}\n","import { memo } from 'react'\n\nimport { Separator } from 'src/lib/shadcn/ui/separator'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { Dock, DockIcon } from 'src/lib/shadcn/ui/dock'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport { useTranslation } from 'react-i18next'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { NodeProps } from '@xyflow/react'\nimport VisualStudioCodeSvg from 'src/assets/svgs/visual-studio-code.svg?react'\nimport plateEditorIcon from 'src/assets/images/plate-editor.png'\nimport { useToast } from 'src/lib/hooks/use-toast'\n\nimport { useActions } from './hooks/use-actions'\n\nconst DATA = {\n  applications: [\n    {\n      key: FlowNodeTypeEnum.EditorApp,\n      image: plateEditorIcon,\n      label: 'application_bar.editor',\n    },\n    {\n      key: FlowNodeTypeEnum.VSLiteApp,\n      icon: VisualStudioCodeSvg,\n      label: 'application_bar.vslite',\n    },\n  ],\n  shapes: [\n    { key: FlowNodeTypeEnum.Shape, icon: 'square' as const, label: 'application_bar.square' },\n    { key: FlowNodeTypeEnum.CircleShape, icon: 'circle' as const, label: 'application_bar.circle' },\n    {\n      key: FlowNodeTypeEnum.TriangleShape,\n      icon: 'triangle' as const,\n      label: 'application_bar.triangle',\n    },\n  ],\n}\n\nexport const ApplicationBarNode = memo((props: NodeProps) => {\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loading, createNode } = useActions(props.id)\n  const handleAddNode = async (nodeType: FlowNodeTypeEnum) => {\n    try {\n      if (loading) {\n        return\n      }\n      await createNode(nodeType)\n    } catch {\n      toast({\n        description: t('application_bar.errors.add_node_failed'),\n        variant: 'destructive',\n      })\n    }\n  }\n  return (\n    <TooltipProvider>\n      <Dock direction=\"middle\">\n        {DATA.applications.map((item) => {\n          const Icon = item.icon\n          return (\n            <DockIcon key={item.label}>\n              <Tooltip>\n                <TooltipTrigger>\n                  {Icon ? (\n                    <Icon width={20} height={20} onClick={() => handleAddNode(item.key)} />\n                  ) : undefined}\n                  {item.image ? (\n                    <img\n                      src={item.image}\n                      alt={t(item.label)}\n                      className=\"w-8 h-8 rounded-md\"\n                      onClick={() => handleAddNode(item.key)}\n                    />\n                  ) : undefined}\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{t(item.label)}</p>\n                </TooltipContent>\n              </Tooltip>\n            </DockIcon>\n          )\n        })}\n        <Separator orientation=\"vertical\" className=\"h-full\" />\n        {DATA.shapes.map((item) => (\n          <DockIcon key={item.label}>\n            <Tooltip>\n              <TooltipTrigger>\n                <LazyIcon onClick={() => handleAddNode(item.key)} name={item.icon} />\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{t(item.label)}</p>\n              </TooltipContent>\n            </Tooltip>\n          </DockIcon>\n        ))}\n      </Dock>\n    </TooltipProvider>\n  )\n})\n","import { memo } from 'react'\nimport { NodeResizer, NodeResizerProps } from '@xyflow/react'\nimport { cn } from 'src/lib/utils'\n\nexport const DefaultNodeResizer = memo((props: NodeResizerProps) => {\n  const { lineClassName, handleClassName, ...rest } = props\n  return (\n    <NodeResizer\n      lineClassName={cn('!border-1.5', lineClassName)}\n      handleClassName={cn('!w-2 !h-2 !border-2 !rounded-full', handleClassName)}\n      {...rest}\n    />\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.CircleShape, FlowNodeTypeEnum.TriangleShape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.Shape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const ShapeNode = memo((props: NodeProps) => {\n  const { id, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full bg-border border\">\n        <NodeHeader id={id} />\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.Shape, FlowNodeTypeEnum.TriangleShape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.CircleShape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const CircleNode = memo((props: NodeProps) => {\n  const { id, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full bg-border rounded-full border\">\n        <NodeHeader id={id} />\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (\n          [FlowNodeTypeEnum.CircleShape, FlowNodeTypeEnum.Shape].includes(\n            source?.type as FlowNodeTypeEnum,\n          ) &&\n          target?.type === FlowNodeTypeEnum.TriangleShape\n        ) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position, NodeProps } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\n\nexport const TriangleNode = memo((props: NodeProps) => {\n  const { id, selected, width, height, isConnectable } = props\n  useConnectionToHandler(id)\n  return (\n    <>\n      <DefaultNodeResizer isVisible={!!selected} minWidth={40} minHeight={40} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div\n        className=\"w-0 h-0 border-l-transparent border-r-transparent border-b-border\"\n        style={{\n          borderLeftWidth: (width || 0) / 2,\n          borderRightWidth: (width || 0) / 2,\n          borderBottomWidth: height || 0,\n        }}\n      />\n      <NodeHeader id={id} className=\"absolute top-0 right-0\" />\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.LLM && target?.type === FlowNodeTypeEnum.EditorApp) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { useCallback, useRef } from 'react'\nimport { HumanMessage, type BaseMessage } from '@langchain/core/messages'\nimport { Connection, useInternalNode, useReactFlow } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { DefaultNode } from 'src/utils/flow-node'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\n\nexport const useActions = (id: string) => {\n  const node = useInternalNode(id)\n  const { t } = useTranslation('flows')\n  const refDebounce = useRef<number | null>(null)\n  const { toast } = useToast()\n  const { getNode, getHandleConnections } = useReactFlow()\n  const { stream } = useLLM()\n\n  const updateEditorContent = useCallback(\n    async (value: unknown[]) => {\n      if (!node) return\n      clearTimeout(refDebounce.current!)\n      refDebounce.current = setTimeout(async () => {\n        await getRepository('FlowNode').update(node.id, {\n          data: value,\n        })\n      }, 150) as unknown as number\n    },\n    [node],\n  )\n\n  const createMessage = useCallback(\n    async (input: string | BaseMessage[], onMessageUpdate: (chunk: string) => void) => {\n      if (node) {\n        const connections = getHandleConnections({\n          nodeId: id,\n          type: 'target',\n        })\n        const llmConnection = connections.find((connection) => {\n          const currentNode = getNode(connection.source)\n          return currentNode?.type === FlowNodeTypeEnum.LLM\n        })\n        const llmNode = llmConnection ? getNode(llmConnection?.source as string) : undefined\n        const llm = llmNode?.data?.entity as LLM\n        if (!llmNode || !llm) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n        } else if (llmNode.data.status !== LLMStatusEnum.Loaded) {\n          return toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_loaded_yet'),\n          })\n        }\n        try {\n          const streamResponse = await stream(\n            llm.provider,\n            typeof input === 'string' ? [new HumanMessage(input)] : input,\n            {\n              onMessageUpdate: (data) => {\n                onMessageUpdate?.(data.content)\n              },\n              llm,\n            },\n          )\n          return streamResponse?.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            return toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [node, getHandleConnections, id, getNode, toast, t, stream],\n  )\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: DefaultNode\n        connections: Connection[]\n        connectedNodes?: DefaultNode[]\n      }[] = []\n      const connections = getHandleConnections({\n        nodeId: id,\n        type: 'target',\n      })\n      connections.forEach((connection) => {\n        const node = getNode(connection.source)\n        if (!node || node.type !== FlowNodeTypeEnum.LLM) {\n          return\n        }\n        linkedConnections.push({\n          node: node as DefaultNode,\n          connections: [connection],\n        })\n      })\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  return {\n    createMessage,\n    updateEditorContent,\n    getLinkedConnections,\n  }\n}\n","import { lazy, memo, Suspense, useCallback } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { DefaultNodeResizer } from 'src/components/flows/DefaultNodeResizer'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useActions } from './hooks/use-actions'\nimport { EditorAppNodeProps } from './type'\n\nconst PlateAppEditor = lazy(() => import('src/components/organisms/PlateEditor'))\n\nexport const EditorAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, data, selected, isConnectable } = props\n  useConnectionToHandler(id)\n  const { createMessage, updateEditorContent, getLinkedConnections } = useActions(id)\n\n  const handleChangeContent = useCallback(\n    (value: unknown[]) => {\n      updateEditorContent(value)\n    },\n    [updateEditorContent],\n  )\n\n  return (\n    <div className=\"w-full min-w-[1240px] h-full\">\n      <DefaultNodeResizer isVisible={!!selected} minWidth={1240} minHeight={400} />\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"min-w-10 min-h-10 w-full h-full rounded-lg border bg-background\">\n        <NodeHeader\n          className=\"!z-[100]\"\n          id={id}\n          enableToStandalone\n          getLinkedConnections={getLinkedConnections}\n        />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-ful rounded-lg flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <div className=\"h-full w-ful rounded-lg\" data-registry=\"plate\">\n            <PlateAppEditor\n              defaultValue={data?.flowNode?.data}\n              onValueChange={handleChangeContent}\n              copilotStream={createMessage}\n            />\n          </div>\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const connectionHandler = useCallback(\n    async ({ edgeId }: { edgeId: string; source: Node; target: Node; connection: Connection }) => {\n      try {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { memo } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport { Alert, AlertDescription, AlertTitle } from 'src/lib/shadcn/ui/alert'\nimport { Badge } from 'src/lib/shadcn/ui/badge'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\n\nimport { PlaceholderNodeProps } from './type'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { useTranslation } from 'react-i18next'\n\nexport const PlaceholderNode = memo((props: PlaceholderNodeProps) => {\n  const { id, data, isConnectable } = props\n  const { t } = useTranslation('flows')\n\n  useConnectionToHandler(id)\n\n  let placeholder = ''\n  switch (data.entity?.placeholder_type) {\n    case 'VECTOR_DATABASE_RETREIVER':\n      placeholder = t('placeholder_node.vector_database_retriever')\n      break\n  }\n\n  return (\n    <div>\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <Alert className=\"flex justify-center max-w-80\" variant=\"default\">\n        <NodeHeader id={id} />\n        <LazyIcon name={'land-plot'} className=\"w-7 h-7\" />\n        <div className=\"ml-2 pr-4\">\n          <AlertTitle>{`${data.entity?.placeholder || ''}`}</AlertTitle>\n          <AlertDescription>\n            {placeholder ? <Badge>{placeholder}</Badge> : undefined}\n          </AlertDescription>\n        </div>\n      </Alert>\n      <DefaultHandle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"a\"\n        isConnectable={isConnectable}\n      />\n    </div>\n  )\n})\n","import type { FileSystemTree } from '@webcontainer/api'\n\nexport const SOURCE_BASES = [\n  'empty-source',\n  'vite-vue',\n  'shadcn-react-vite',\n  'todo-app-react-vite',\n  'porfolio-nextjs',\n] as const\n\nexport const getSourceBase = async (sourceBase: string): Promise<FileSystemTree> => {\n  switch (sourceBase) {\n    case 'empty-source':\n      return import('./empty-source').then((module) => module.BASE)\n    case 'vite-vue':\n      return import('./vite-vue').then((module) => module.BASE)\n    case 'shadcn-react-vite':\n      return import('./shadcn-react-vite').then((module) => module.BASE)\n    case 'todo-app-react-vite':\n      return import('./todo-app-react-vite').then((module) => module.BASE)\n    case 'porfolio-nextjs':\n      return import('./porfolio-nextjs').then((module) => module.BASE)\n    default:\n      throw new Error(`Unknown source base: ${sourceBase}`)\n  }\n}\n","import { memo, useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from 'src/lib/shadcn/ui/card'\nimport { useTranslation } from 'react-i18next'\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from 'src/lib/shadcn/ui/select'\nimport { Button } from 'src/lib/shadcn/ui/button'\nimport { getSourceBase, SOURCE_BASES } from 'src/services/web-container/source-bases'\nimport { cn } from 'src/lib/utils'\n\nconst CreateSourcebaseCard = memo(\n  ({\n    className,\n    onUpdateSourceBase,\n  }: {\n    className?: string\n    onUpdateSourceBase: (data: Awaited<ReturnType<typeof getSourceBase>>) => void\n  }) => {\n    const { t } = useTranslation('components')\n    const [sourcebase, setSourcebase] = useState<string>()\n    return (\n      <Card className={cn('mw-full', className)}>\n        <CardHeader className=\"p-4\">\n          <CardTitle>{t('add_source_base.title')}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-center w-full h-full flex-col\">\n            <Select onValueChange={(value) => setSourcebase(value)}>\n              <SelectTrigger className=\"w-full mb-4\">\n                <SelectValue placeholder={t('add_source_base.source_base_select_placeholder')} />\n              </SelectTrigger>\n              <SelectContent>\n                {SOURCE_BASES.map((key) => {\n                  return (\n                    <SelectItem key={`${key}`} value={`${key}`}>\n                      {t(`add_source_base.sourcebases.${key.toLowerCase()}`)}\n                    </SelectItem>\n                  )\n                })}\n              </SelectContent>\n            </Select>\n            <Button\n              className=\"w-full\"\n              onClick={async () =>\n                sourcebase && onUpdateSourceBase(await getSourceBase(sourcebase))\n              }\n            >\n              {t('add_source_base.update_source')}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  },\n)\n\nexport default CreateSourcebaseCard\n","import { useCallback } from 'react'\nimport { Connection, useReactFlow } from '@xyflow/react'\nimport { getRepository } from 'src/services/database'\nimport type { FileSystemTree } from '@webcontainer/api'\nimport { parseFileSystemTreeToJSONL } from 'src/services/web-container/utils/file-tree'\nimport { DefaultNode } from 'src/utils/flow-node'\nimport { FlowNodeTypeEnum, LLMProviderEnum } from 'src/services/database/types'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { Message } from 'ai/react'\nimport { MessageNodeProps } from 'src/components/flows/Nodes/MessageNode/type'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\n\ntype CreateMessageOption = {\n  onMessageUpdate?: (info: { id?: string; nodeData: Partial<MessageNodeProps['data']> }) => void\n  onResponseMessageCreate?: (message?: string) => void\n}\nexport const useActions = () => {\n  const { getNode, getHandleConnections } = useReactFlow()\n  const { stream } = useLLM()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const getLinkedConnections = useCallback(\n    (id: string) => {\n      const currentNode = getNode(id)\n      if (!currentNode) {\n        return []\n      }\n      const linkedConnections: {\n        node: DefaultNode\n        connections: Connection[]\n        connectedNodes?: DefaultNode[]\n      }[] = []\n      const connections = getHandleConnections({\n        nodeId: id,\n        type: 'target',\n      })\n      connections.forEach((connection) => {\n        const node = getNode(connection.source)\n        if (!node || node.type !== FlowNodeTypeEnum.LLM) {\n          return\n        }\n        linkedConnections.push({\n          node: node as DefaultNode,\n          connections: [connection],\n        })\n      })\n      return linkedConnections\n    },\n    [getHandleConnections, getNode],\n  )\n\n  const sendMessage = useCallback(\n    async (\n      message: string,\n      messages: Message[],\n      { onMessageUpdate, onResponseMessageCreate }: CreateMessageOption = {},\n    ) => {\n      const formatedMessages = messages.map((message) => {\n        if (message.role === 'system') {\n          return new SystemMessage(message.content)\n        }\n        if (message.role === 'user') {\n          return new HumanMessage(message.content)\n        }\n        return new AIMessage(message.content)\n      })\n\n      onResponseMessageCreate?.()\n\n      const response = await stream(\n        LLMProviderEnum.WebLLM,\n        [...formatedMessages, new HumanMessage(message)],\n        {\n          onMessageUpdate: ({ content }) => {\n            onMessageUpdate?.({\n              nodeData: {\n                loading: true,\n                content: content,\n              },\n            })\n          },\n          llm: undefined,\n        },\n      )\n\n      onMessageUpdate?.({\n        nodeData: {\n          loading: false,\n          content: response?.content,\n        },\n      })\n      return response?.content\n    },\n    [stream],\n  )\n\n  return {\n    sendMessage,\n    getLinkedConnections,\n    updateCodeContainerData,\n  }\n}\n","import { useCallback } from 'react'\nimport { Node, Connection } from '@xyflow/react'\nimport { FlowNodeTypeEnum } from 'src/services/database/types'\nimport { useFlowState } from 'src/states/flow'\nimport { useBaseConnectionToHandler } from 'src/hooks/flows/handlers/use-base-connection-to-handler'\n\nexport const useConnectionToHandler = (id: string) => {\n  const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge)\n\n  const connectionHandler = useCallback(\n    async ({\n      edgeId,\n      source,\n      target,\n      connection,\n    }: {\n      edgeId: string\n      source: Node\n      target: Node\n      connection: Connection\n    }) => {\n      try {\n        if (source?.type === FlowNodeTypeEnum.LLM && target?.type === FlowNodeTypeEnum.VSLiteApp) {\n          await createOrUpdateFlowEdge({\n            source: connection.source,\n            target: connection.target,\n            sourceHandle: connection.sourceHandle,\n            targetHandle: connection.targetHandle,\n          })\n          return\n        }\n\n        return {\n          deleteEdgeId: edgeId,\n        }\n      } catch {\n        return {\n          deleteEdgeId: edgeId,\n        }\n      }\n    },\n    [createOrUpdateFlowEdge],\n  )\n\n  useBaseConnectionToHandler(id, connectionHandler)\n}\n","import { lazy, memo, Suspense, useCallback, useState } from 'react'\nimport { Position } from '@xyflow/react'\nimport { NodeHeader } from 'src/components/flows/NodeHeader'\nimport { DefaultHandle } from 'src/components/flows/DefaultHandle'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport {\n  FileSystemTreeChange,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport CreateSourcebaseCard from 'src/components/molecules/CreateSourcebaseCard'\nimport type { FileSystemTree } from '@webcontainer/api'\n\nimport { EditorAppNodeProps } from './type'\nimport { useActions } from './hooks/use-actions'\nimport { useConnectionToHandler } from './hooks/use-connection-to-handler'\nimport { Message } from 'ai/react'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nexport const VSLiteAppNode = memo((props: EditorAppNodeProps) => {\n  const { id, isConnectable, data } = props\n  const [fileSystemTree, setFileSystemTree] = useState(\n    data?.flowNode?.raw ? parseJSONLToFileSystemTree(data.flowNode.raw) : undefined,\n  )\n  const { updateCodeContainerData, getLinkedConnections, sendMessage } = useActions()\n  useConnectionToHandler(id)\n\n  const handleUpdateCodeContainerData = useCallback(\n    async (tree: FileSystemTree) => {\n      if (!data?.flowNode?.id) return\n\n      await updateCodeContainerData(data?.flowNode?.id, tree)\n      setFileSystemTree(tree)\n    },\n    [data?.flowNode?.id, updateCodeContainerData],\n  )\n\n  const handleSendMessage = useCallback(\n    async (message: string, messages: Message[]) => {\n      if (!data?.flowNode?.id) return\n\n      const result = await sendMessage(message, messages)\n      return result\n    },\n    [data?.flowNode?.id, sendMessage],\n  )\n\n  const handleUpdateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      setFileSystemTree((prev) => {\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(data?.flowNode?.id, result)\n        return result\n      })\n    },\n    [data?.flowNode?.id, updateCodeContainerData],\n  )\n\n  if (!fileSystemTree) {\n    return (\n      <div className=\"h-full flex justify-center items-center\">\n        <CreateSourcebaseCard className=\"w-64\" onUpdateSourceBase={handleUpdateCodeContainerData} />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-[1380px] h-[600px] rounded-lg border overflow-hidden shadow-sm\">\n      <DefaultHandle type=\"target\" position={Position.Top} isConnectable={isConnectable} />\n      <div className=\"w-full h-full rounded-lg border bg-card overflow-hidden\">\n        <NodeHeader\n          id={id}\n          className=\"z-50\"\n          enableToStandalone\n          getLinkedConnections={getLinkedConnections}\n        />\n        <Suspense\n          fallback={\n            <div className=\"h-full w-full flex justify-center items-center\">\n              <LazyIcon name=\"loader-circle\" className=\"animate-spin\" />\n            </div>\n          }\n        >\n          <VSLiteApp\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={handleUpdateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        </Suspense>\n      </div>\n      <DefaultHandle type=\"source\" position={Position.Bottom} isConnectable={isConnectable} />\n    </div>\n  )\n})\n","import { FlowNodeTypeEnum } from 'src/services/database/types'\n\nimport { ToolbarNode } from './ToolboxNode'\nimport { LLMNode } from './LLMNode/LLMNode'\nimport { ThreadNode } from './ThreadNode'\nimport { MessageNode } from './MessageNode'\nimport { PromptNode } from './PromptNode'\nimport { SessionInfoNode } from './SessionInfoNode'\nimport { SchemaNode } from './SchemaNode'\nimport { CSVDataNode } from './CSVDataNode'\nimport { ToolNode } from './ToolNode'\nimport { EmbeddingNode } from './EmbeddingNode'\nimport { VectorDatabaseNode } from './VectorDatabaseNode'\nimport { JSONLDataNode } from './JSONLDataNode'\nimport { ApplicationBarNode } from './ApplicationBarNode'\nimport { ShapeNode } from './ShapeNode'\nimport { CircleNode } from './CircleNode'\nimport { TriangleNode } from './TriangleNode'\nimport { EditorAppNode } from './EditorAppNode'\nimport { PlaceholderNode } from './PlaceholderNode'\nimport { VSLiteAppNode } from './VSLiteAppNode'\n\nexport const nodeTypes = {\n  [FlowNodeTypeEnum.LLM]: LLMNode,\n  [FlowNodeTypeEnum.Toolbox]: ToolbarNode,\n  [FlowNodeTypeEnum.Thread]: ThreadNode,\n  [FlowNodeTypeEnum.Message]: MessageNode,\n  [FlowNodeTypeEnum.Prompt]: PromptNode,\n  [FlowNodeTypeEnum.SessionInfo]: SessionInfoNode,\n  [FlowNodeTypeEnum.Schema]: SchemaNode,\n  [FlowNodeTypeEnum.CSVData]: CSVDataNode,\n  [FlowNodeTypeEnum.ToolDefinition]: ToolNode,\n  [FlowNodeTypeEnum.DefaultEmbeddingModel]: EmbeddingNode,\n  [FlowNodeTypeEnum.VectorDatabase]: VectorDatabaseNode,\n  [FlowNodeTypeEnum.JSONLData]: JSONLDataNode,\n  [FlowNodeTypeEnum.ApplicationBar]: ApplicationBarNode,\n  [FlowNodeTypeEnum.Shape]: ShapeNode,\n  [FlowNodeTypeEnum.CircleShape]: CircleNode,\n  [FlowNodeTypeEnum.TriangleShape]: TriangleNode,\n  [FlowNodeTypeEnum.EditorApp]: EditorAppNode,\n  [FlowNodeTypeEnum.PlaceHolder]: PlaceholderNode,\n  [FlowNodeTypeEnum.VSLiteApp]: VSLiteAppNode,\n}\n","'use client'\n\nimport * as React from 'react'\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from 'src/lib/utils'\n\nconst toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline: 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-10 px-3 min-w-10',\n        sm: 'h-9 px-2.5 min-w-9',\n        lg: 'h-11 px-5 min-w-11',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","import * as React from 'react'\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'\nimport { type VariantProps } from 'class-variance-authority'\n\nimport { cn } from 'src/lib/utils'\nimport { toggleVariants } from 'src/lib/shadcn/ui/toggle'\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: 'default',\n  variant: 'default',\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn('flex items-center justify-center gap-1', className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","import { useEffect, useState, type Dispatch, type SetStateAction, useCallback } from 'react'\n\nimport {\n  useNodes,\n  Panel,\n  useStore,\n  useStoreApi,\n  type OnNodesChange,\n  type NodeChange,\n  type XYPosition,\n  ViewportPortal,\n  useReactFlow,\n} from '@xyflow/react'\n\nimport { ToggleGroup, ToggleGroupItem } from 'src/lib/shadcn/ui/toggle-group'\n\nexport function ViewportLogger() {\n  const viewport = useStore(\n    (s) =>\n      `x: ${s.transform[0].toFixed(2)}, y: ${s.transform[1].toFixed(2)}, zoom: ${s.transform[2].toFixed(2)}`,\n  )\n\n  return <div>{viewport}</div>\n}\n\ntype ChangeLoggerProps = {\n  color?: string\n  limit?: number\n}\n\ntype ChangeInfoProps = {\n  change: NodeChange\n}\n\nfunction ChangeInfo({ change }: ChangeInfoProps) {\n  const id = 'id' in change ? change.id : '-'\n  const { type } = change\n\n  return (\n    <div className=\"mb-3\">\n      <div>node id: {id}</div>\n      <div>\n        {type === 'add' ? JSON.stringify(change.item, null, 2) : null}\n        {type === 'dimensions'\n          ? `dimensions: ${change.dimensions?.width} × ${change.dimensions?.height}`\n          : null}\n        {type === 'position'\n          ? `position: ${change.position?.x.toFixed(1)}, ${change.position?.y.toFixed(1)}`\n          : null}\n        {type === 'remove' ? 'remove' : null}\n        {type === 'select' ? (change.selected ? 'select' : 'unselect') : null}\n      </div>\n    </div>\n  )\n}\n\nexport function ChangeLogger({ limit = 20 }: ChangeLoggerProps) {\n  const [changes, setChanges] = useState<NodeChange[]>([])\n  const store = useStoreApi()\n\n  // Memoize the callback for handling node changes\n  const handleNodeChanges: OnNodesChange = useCallback(\n    (newChanges: NodeChange[]) => {\n      setChanges((prevChanges) => [...newChanges, ...prevChanges].slice(0, limit))\n    },\n    [limit],\n  )\n\n  useEffect(() => {\n    store.setState({ onNodesChange: handleNodeChanges })\n\n    return () => store.setState({ onNodesChange: undefined })\n  }, [handleNodeChanges, store])\n\n  const NoChanges = () => <div>No Changes Triggered</div>\n\n  return (\n    <>\n      {changes.length === 0 ? (\n        <NoChanges />\n      ) : (\n        changes.map((change, index) => <ChangeInfo key={index} change={change} />)\n      )}\n    </>\n  )\n}\n\nexport function NodeInspector() {\n  const { getInternalNode } = useReactFlow()\n  const nodes = useNodes()\n\n  return (\n    <ViewportPortal>\n      <div className=\"text-secondary-foreground\">\n        {nodes.map((node) => {\n          const internalNode = getInternalNode(node.id)\n          if (!internalNode) {\n            return null\n          }\n\n          const absPosition = internalNode?.internals.positionAbsolute\n\n          return (\n            <NodeInfo\n              key={node.id}\n              id={node.id}\n              selected={!!node.selected}\n              type={node.type || 'default'}\n              position={node.position}\n              absPosition={absPosition}\n              width={node.measured?.width ?? 0}\n              height={node.measured?.height ?? 0}\n              data={node.data}\n            />\n          )\n        })}\n      </div>\n    </ViewportPortal>\n  )\n}\n\ntype NodeInfoProps = {\n  id: string\n  type: string\n  selected: boolean\n  position: XYPosition\n  absPosition: XYPosition\n  width?: number\n  height?: number\n\n  data: unknown\n}\n\nfunction NodeInfo({\n  id,\n  type,\n  selected,\n  position,\n  absPosition,\n  width,\n  height,\n  data,\n}: NodeInfoProps) {\n  if (!width || !height) return null\n\n  const absoluteTransform = `translate(${absPosition.x}px, ${absPosition.y + height}px)`\n  const formattedPosition = `${position.x.toFixed(1)}, ${position.y.toFixed(1)}`\n  const formattedDimensions = `${width} × ${height}`\n  const selectionStatus = selected ? 'Selected' : 'Not Selected'\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        transform: absoluteTransform,\n        width: width * 2,\n      }}\n      className=\"text-xs\"\n    >\n      <div>id: {id}</div>\n      <div>type: {type}</div>\n      <div>selected: {selectionStatus}</div>\n      <div>position: {formattedPosition}</div>\n      <div>dimensions: {formattedDimensions}</div>\n      <div>data: {JSON.stringify(data, null, 2)}</div>\n    </div>\n  )\n}\n\ntype Tool = {\n  active: boolean\n  setActive: Dispatch<SetStateAction<boolean>>\n  label: string\n  value: string\n}\n\ntype DevToolsToggleProps = {\n  tools: Tool[]\n}\n\nfunction DevToolsToggle({ tools }: DevToolsToggleProps) {\n  return (\n    <Panel position=\"top-left\" className=\"bg-card p-1 border rounded shadow-sm\">\n      <ToggleGroup type=\"multiple\">\n        {tools.map(({ active, setActive, label, value }) => (\n          <ToggleGroupItem\n            key={value}\n            value={value}\n            onClick={() => setActive((prev) => !prev)}\n            aria-pressed={active}\n            className=\"bg-card text-card-foreground transition-colors duration-300 hover:bg-secondary hover:text-secondary-foreground\"\n          >\n            {label}\n          </ToggleGroupItem>\n        ))}\n      </ToggleGroup>\n    </Panel>\n  )\n}\n\nexport function DevTools() {\n  const [nodeInspectorActive, setNodeInspectorActive] = useState(false)\n  const [changeLoggerActive, setChangeLoggerActive] = useState(false)\n  const [viewportLoggerActive, setViewportLoggerActive] = useState(false)\n\n  const tools = [\n    {\n      active: nodeInspectorActive,\n      setActive: setNodeInspectorActive,\n      label: 'Node Inspector',\n      value: 'node-inspector',\n    },\n    {\n      active: changeLoggerActive,\n      setActive: setChangeLoggerActive,\n      label: 'Change Logger',\n      value: 'change-logger',\n    },\n    {\n      active: viewportLoggerActive,\n      setActive: setViewportLoggerActive,\n      label: 'Viewport Logger',\n      value: 'viewport-logger',\n    },\n  ]\n\n  return (\n    <>\n      <DevToolsToggle tools={tools} />\n\n      {changeLoggerActive && (\n        <Panel\n          className=\"text-xs p-5 bg-white rounded shadow-md overflow-y-auto max-h-[50%] mt-20\"\n          position=\"bottom-right\"\n        >\n          <ChangeLogger />\n        </Panel>\n      )}\n\n      {nodeInspectorActive && <NodeInspector />}\n\n      {viewportLoggerActive && (\n        <Panel position=\"bottom-left\" className=\"text-secondary-foreground\">\n          <ViewportLogger />\n        </Panel>\n      )}\n    </>\n  )\n}\n\nDevTools.displayName = 'DevTools'\n","import { useCallback, useRef, useState } from 'react'\nimport deepmerge from 'deepmerge'\nimport { applyNodeChanges, Connection, Edge, EdgeChange, Node, NodeChange } from '@xyflow/react'\nimport { FlowNode, FlowNodeTypeEnum } from 'src/services/database/types'\nimport { In, type FindManyOptions } from 'src/services/database/typeorm-wrapper'\nimport { useFlowState } from 'src/states/flow'\nimport { DISABLED_DELETE_NODE_TYPES, SYSTEM_NODE_IDS } from 'src/constants/nodes'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFlowManager = () => {\n  const updatePositionRef = useRef<Record<string, number | undefined>>({})\n  const updateDimensionsRef = useRef<Record<string, number>>({})\n  const onNodesChangesRef = useRef<\n    ((changes: NodeChange<Node>[]) => Promise<boolean | void | undefined>)[]\n  >([])\n\n  const flowEdges = useFlowState((state) => state.flowEdges)\n  const currentSession = useSessionState((state) => state.currentSession)\n  const setNodes = useFlowState((state) => state.setNodes)\n  const updateNodes = useFlowState((state) => state.updateNodes)\n  const updateEdges = useFlowState((state) => state.updateEdges)\n  const addConnectionToEdges = useFlowState((state) => state.addConnectionToEdges)\n\n  const resetFlows = useFlowState((state) => state.reset)\n  const findFlowEdges = useFlowState((state) => state.findFlowEdges)\n  const deleteFlowNode = useFlowState((state) => state.deleteFlowNode)\n  const deleteFlowEdge = useFlowState((state) => state.deleteFlowEdge)\n  const updateFlowNode = useFlowState((state) => state.updateFlowNode)\n  const getNodes = useFlowState((state) => state.getNodes)\n  const findFlowNodesWithSource = useFlowState((state) => state.findFlowNodesWithSource)\n\n  const flowEdgesRef = useRef(flowEdges)\n  const currentSessionIdRef = useRef<string | null>()\n  const [loadingState, setLoadingState] = useState({ loading: false })\n\n  flowEdgesRef.current = flowEdges\n\n  const initFlow = useCallback(\n    async (currentSessionId: string, func?: () => Promise<void>) => {\n      try {\n        currentSessionIdRef.current = currentSessionId\n        resetFlows()\n        await func?.()\n      } catch {\n        currentSessionIdRef.current = undefined\n      }\n    },\n    [resetFlows],\n  )\n\n  const prepareFlowInfo = useCallback(\n    async (query: FindManyOptions<FlowNode>) => {\n      try {\n        if (!currentSession?.id) {\n          return\n        }\n        setLoadingState((loading) => ({ ...loading, loading: true }))\n        const flowNodes = await findFlowNodesWithSource({\n          ...query,\n          where: {\n            ...query.where,\n            session_id: currentSession.id,\n          },\n        })\n        const flowEdges = await findFlowEdges({\n          where: [\n            { source: In(flowNodes.map((node) => node.id)) },\n            { target: In(flowNodes.map((node) => node.id)) },\n          ],\n        })\n        return {\n          flowNodes,\n          flowEdges,\n        }\n      } finally {\n        setLoadingState((loading) => ({ ...loading, loading: false }))\n      }\n    },\n    [findFlowNodesWithSource, findFlowEdges, currentSession?.id],\n  )\n\n  const updateNodeChanges = useCallback(\n    async (changes: NodeChange<Node>[]) => {\n      for (const handler of onNodesChangesRef.current) {\n        const result = await handler(changes)\n        if (typeof result === 'boolean' && !result) {\n          return\n        }\n      }\n      for (const change of changes) {\n        if (\n          'id' in change &&\n          Object.values(SYSTEM_NODE_IDS).includes(change.id) &&\n          change.type !== 'remove'\n        ) {\n          updateNodes([change])\n        } else if (\n          change.type === 'position' &&\n          change.position &&\n          !isNaN(change.position.x) &&\n          !isNaN(change.position.y)\n        ) {\n          updateNodes([change])\n\n          const x = change.position.x\n          const y = change.position.y\n          clearTimeout(updatePositionRef.current[change.id])\n          updatePositionRef.current[change.id] = setTimeout(async () => {\n            updatePositionRef.current[change.id] = undefined\n            await updateFlowNode(\n              {\n                id: change.id,\n                x,\n                y,\n              },\n              { silent: true },\n            )\n          }, 200) as unknown as number\n        } else if (change.type === 'remove') {\n          // DISABLED: delete node\n          const node = getNodes([change.id])?.[0]\n          if (!node?.type || DISABLED_DELETE_NODE_TYPES.includes(node.type as FlowNodeTypeEnum)) {\n            return\n          }\n          await deleteFlowNode({ id: change.id })\n        } else if (\n          change.type === 'dimensions' &&\n          change.dimensions &&\n          !isNaN(change.dimensions.width) &&\n          !isNaN(change.dimensions.height)\n        ) {\n          const node = getNodes([change.id])?.[0]\n          if (!node?.width && !node?.height) {\n            return\n          }\n          updateNodes([change])\n\n          clearTimeout(updateDimensionsRef.current[change.id])\n          const width = change.dimensions.width\n          const height = change.dimensions.height\n          updateDimensionsRef.current[change.id] = setTimeout(async () => {\n            await updateFlowNode(\n              {\n                id: change.id,\n                width,\n                height,\n              },\n              { silent: true },\n            )\n          }, 200) as unknown as number\n        } else if (change.type === 'select') {\n          updateNodes([change])\n        }\n      }\n    },\n    [updateNodes, updateFlowNode, getNodes, deleteFlowNode],\n  )\n\n  const updateEdgeChanges = useCallback(\n    (changes: EdgeChange<Edge>[]) => {\n      Promise.all(\n        changes.map(async (change) => {\n          if (change.type === 'remove') {\n            return deleteFlowEdge({ id: change.id })\n          }\n        }),\n      )\n      updateEdges(changes)\n    },\n    [deleteFlowEdge, updateEdges],\n  )\n\n  const updateEdgeConnection = useCallback(\n    (connection: Connection) => {\n      addConnectionToEdges(connection)\n    },\n    [addConnectionToEdges],\n  )\n\n  const updateOrCreateNode = useCallback(\n    (input: Node | ((node: Node[]) => Node | undefined)) => {\n      setNodes((nodes) => {\n        let updatingNode\n        if (typeof input === 'function') {\n          updatingNode = input(nodes)\n        } else {\n          updatingNode = input\n        }\n        if (!updatingNode) {\n          return nodes\n        }\n        const node = nodes?.find((n) => n.id === updatingNode.id)\n        const change: NodeChange<Node> = {\n          id: updatingNode.id,\n          item: node\n            ? deepmerge(node, updatingNode)\n            : {\n                ...updatingNode,\n                position: {\n                  x: updatingNode.position?.x || 0,\n                  y: updatingNode.position?.y || 0,\n                },\n              },\n          type: node ? 'replace' : 'add',\n        }\n        return applyNodeChanges([change], nodes)\n      })\n    },\n    [setNodes],\n  )\n\n  const addOnNodeChangeHandler = useCallback(\n    (func: (changes: NodeChange<Node>[]) => Promise<boolean | void | undefined>) => {\n      onNodesChangesRef.current.push(func)\n      return () => {\n        onNodesChangesRef.current = onNodesChangesRef.current.filter((handler) => handler !== func)\n      }\n    },\n    [],\n  )\n\n  return {\n    initFlow,\n    loadingState,\n    prepareFlowInfo,\n    updateNodeChanges,\n    updateEdgeChanges,\n    updateOrCreateNode,\n    currentSessionIdRef,\n    updateEdgeConnection,\n    addOnNodeChangeHandler,\n  }\n}\n","import { useEffect, useRef } from 'react'\nimport { useFlowManager } from 'src/hooks/flows/handlers/use-flow-manager'\nimport { useFlowState } from 'src/states/flow'\nimport { useSessionState } from 'src/states/session'\n\nexport const useAutomaticallyRenderFlows = (flowManager: ReturnType<typeof useFlowManager>) => {\n  const currentSessionId = useSessionState((state) => state.currentSession?.id)\n  const { loadingState, prepareFlowInfo, initFlow, currentSessionIdRef } = flowManager\n\n  const flowStateReady = useFlowState((state) => state.ready)\n  const nodes = useFlowState((state) => state.nodes)\n\n  const flowNodesRef = useRef(nodes)\n  const removeSyncNodeQueue = useFlowState((state) => state.removeSyncNodeQueue)\n  const removeSyncEdgeQueue = useFlowState((state) => state.removeSyncEdgeQueue)\n  flowNodesRef.current = nodes\n\n  useEffect(() => {\n    if (\n      loadingState.loading ||\n      !flowStateReady ||\n      !currentSessionId ||\n      currentSessionIdRef.current === currentSessionId\n    ) {\n      return\n    }\n    initFlow(currentSessionId, async () => {\n      await prepareFlowInfo({\n        where: {\n          session_id: currentSessionId,\n        },\n      })\n    })\n  }, [\n    initFlow,\n    prepareFlowInfo,\n    loadingState.loading,\n    currentSessionIdRef,\n    flowStateReady,\n    currentSessionId,\n  ])\n\n  useEffect(() => {\n    const unsubNodeHandler = useFlowState.subscribe(\n      (state) => state.syncNodeQueue,\n      async (syncNodeQueue, previousSyncNodeQueue) => {\n        const lastTimestamps = previousSyncNodeQueue.map((node) => node.timestamp)\n        const handlingQueueItems = syncNodeQueue.filter(\n          (item) => !lastTimestamps.includes(item.timestamp),\n        )\n        if (handlingQueueItems.length) {\n          removeSyncNodeQueue(handlingQueueItems.map((item) => item.timestamp))\n        }\n      },\n    )\n    const unsubEdgeHandler = useFlowState.subscribe(\n      (state) => state.syncEdgeQueue,\n      async (syncEdgeQueue, previousSyncEdgeQueue) => {\n        const lastTimestamps = previousSyncEdgeQueue.map((node) => node.timestamp)\n        const handlingQueueItems = syncEdgeQueue.filter(\n          (item) => !lastTimestamps.includes(item.timestamp),\n        )\n        if (handlingQueueItems.length) {\n          removeSyncEdgeQueue(handlingQueueItems.map((item) => item.timestamp))\n        }\n      },\n    )\n\n    return () => {\n      unsubNodeHandler()\n      unsubEdgeHandler()\n    }\n  }, [prepareFlowInfo, removeSyncEdgeQueue, removeSyncNodeQueue])\n}\n","import { useEffect, useMemo, useRef, useState } from 'react'\nimport { LLMStatusEnum } from 'src/services/database/types/llm'\nimport { useFlowManager } from 'src/hooks/flows/handlers/use-flow-manager'\n\nimport { useAutomaticallyRenderFlows } from 'src/hooks/flows/handlers/use-automatically-render-flow'\nimport { useLocalLLMState } from 'src/services/local-llm'\n\nexport const useHomePage = () => {\n  const [initializing, setInitializing] = useState(true)\n  const flowManager = useFlowManager()\n  const selectedModel = useLocalLLMState((state) => state.selectedModel)\n  const selectedModelRef = useRef(selectedModel)\n  const setInitProgressCallback = useLocalLLMState((state) => state.setInitProgressCallback)\n  const { updateOrCreateNode, updateNodeChanges, updateEdgeChanges, updateEdgeConnection } =\n    flowManager\n  useAutomaticallyRenderFlows(flowManager)\n\n  selectedModelRef.current = selectedModel\n\n  useEffect(() => {\n    const callbackRemoval = setInitProgressCallback?.((input) => {\n      if (!selectedModelRef.current) {\n        return\n      }\n      const modelName = `${selectedModelRef.current}`\n      updateOrCreateNode((nodeRefs) => {\n        const flowNode = nodeRefs?.find((node) => {\n          if (\n            node.data?.entity &&\n            typeof node.data.entity === 'object' &&\n            'name' in node.data.entity\n          ) {\n            return node.data.entity.name === modelName\n          }\n          return false\n        })\n        if (!flowNode) return\n\n        flowNode.data.label = input.text\n        flowNode.data.status = LLMStatusEnum.Loading\n        if (input.progress === 100) {\n          flowNode.data.label = ``\n          flowNode.data.status = LLMStatusEnum.Loaded\n        }\n\n        return flowNode\n      })\n    })\n\n    return () => {\n      callbackRemoval?.()\n    }\n  }, [setInitProgressCallback, updateOrCreateNode])\n\n  const contextValue = useMemo(\n    () => ({\n      updateNodeChanges,\n      updateEdgeChanges,\n      initializing,\n      setInitializing,\n      updateEdgeConnection,\n    }),\n    [updateNodeChanges, updateEdgeChanges, initializing, setInitializing, updateEdgeConnection],\n  )\n\n  return contextValue\n}\n","import { memo, useCallback } from 'react'\nimport {\n  ReactFlow,\n  MiniMap,\n  Controls,\n  Background,\n  BackgroundVariant,\n  Node,\n  NodeChange,\n  Edge,\n  EdgeChange,\n  Connection,\n  PanOnScrollMode,\n} from '@xyflow/react'\nimport { nodeTypes } from 'src/components/flows/Nodes'\nimport { useFlowState } from 'src/states/flow'\nimport { useAppState } from 'src/states/app'\nimport { DevTools } from 'src/lib/shadcn/devtools'\nimport { isDev } from 'src/constants/dev'\nimport { useHomePage } from './hooks/use-home-page'\n\nconst HomeInner = () => {\n  const theme = useAppState((state) => state.theme)\n  const nodes = useFlowState((state) => state.nodes)\n  const edges = useFlowState((state) => state.edges)\n  const { updateNodeChanges, updateEdgeChanges, updateEdgeConnection } = useHomePage()\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange<Node>[]) => {\n      updateNodeChanges(changes)\n    },\n    [updateNodeChanges],\n  )\n\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange<Edge>[]) => {\n      updateEdgeChanges(changes)\n    },\n    [updateEdgeChanges],\n  )\n\n  const onConnect = useCallback(\n    (connection: Connection) => {\n      updateEdgeConnection(connection)\n    },\n    [updateEdgeConnection],\n  )\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      nodeTypes={nodeTypes}\n      onNodesChange={onNodesChange}\n      onEdgesChange={onEdgesChange}\n      onConnect={onConnect}\n      panOnScroll\n      panOnScrollMode={PanOnScrollMode.Free}\n      colorMode={theme}\n      fitView\n    >\n      <Background variant={BackgroundVariant.Dots} gap={24} size={1} />\n      <Controls />\n      <MiniMap />\n      {isDev ? <DevTools /> : undefined}\n    </ReactFlow>\n  )\n}\n\nexport default memo(HomeInner)\n"],"file":"assets/Home-BxCXofNm.js"}