const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-Bh9Jxj4W.js","assets/use-llm-Kc_COJca.js","assets/index-Bs2EL0Mm.js","assets/index-DAbXUXm9.css","assets/routes-Q3DgWzwS.js","assets/few_shot-D10anxZ8.js","assets/index-Bswv7jYP.js","assets/objectWithoutPropertiesLoose-CoJdz_cg.js","assets/index-CVYZ3LYG.js","assets/index-Dl2bfRQj.css","assets/pdf-eWgMKUMf.js","assets/pdf.min-jukQxExX.js","assets/pdf.worker.min-CRA75IwO.js","assets/PlateEditor-BaxQ1tY6.js","assets/chevron-down-C2fRMLBZ.js","assets/createLucideIcon-DZXM6zSt.js","assets/chevron-right-CwUZymH_.js","assets/check-CPckYtjn.js","assets/ellipsis-COcYJXxW.js","assets/highlighter-DPBZrIaM.js","assets/keyboard-TwlyQStD.js","assets/superscript-BWVgzB43.js","assets/subscript-eorZOsO7.js","assets/align-left-Cqzr8iGo.js","assets/align-center-DxV665v9.js","assets/align-right-1KImZF6n.js","assets/align-justify-4pvDMUCh.js","assets/plus-DdseC9r5.js","assets/eraser-pDSTAyjr.js","assets/star-BAcvdD03.js","assets/flag-HgutDrm0.js","assets/apple-Dy-ujZyW.js","assets/clock-_3ygTBWJ.js","assets/leaf-Dp9L_g55.js","assets/lightbulb-Cez3EIYi.js","assets/smile-B_vUcJ7Z.js","assets/compass-BUtgqjrT.js","assets/music-CajUk8Sn.js","assets/x-wv-8XEYv.js","assets/search-D7kIVwe-.js","assets/external-link-VIERdOxn.js","assets/redo-2-CqxerChX.js","assets/undo-2-BSR3H55E.js","assets/list-BB7Nay6y.js","assets/list-ordered-CU5N6fJc.js","assets/list-todo-efH1_AQm.js","assets/indent-increase-CmjYEhgs.js","assets/pilcrow-kPd6D4Ed.js","assets/heading-1-Cszmf0Cv.js","assets/heading-2-whJmJX3i.js","assets/heading-3-CoqdyJic.js","assets/table-CpUKu_ZV.js","assets/file-code-lXOJi3bD.js","assets/quote-ClRi4mcN.js","assets/minus-Ccxh3YCz.js","assets/square-G8fFihNl.js","assets/image-D8TYY2B5.js","assets/table-of-contents-BoxEFAQk.js","assets/columns-3-CAXm5b1i.js","assets/link-2-CJaA6n6k.js","assets/calendar-BWv0HE5b.js","assets/wrap-text-2NHP2xqH.js","assets/link-1rrFhL5n.js","assets/pen-DyLZYDtG.js","assets/eye-C4XtbrYp.js","assets/indent-decrease-D0cNPHwt.js","assets/trash-e4-QBa2z.js","assets/rectangle-vertical-BXCWDtEA.js","assets/rectangle-horizontal-DzRXuK8l.js","assets/list-collapse-Bac3vufw.js","assets/pointer-C2yg_2MO.js","assets/wand-sparkles-DmZmKIYm.js","assets/bold-FnAWDcX0.js","assets/italic-CRRIvtav.js","assets/underline-C12XtC3U.js","assets/strikethrough-DayVcgTC.js","assets/code-xml-Bnweu91j.js","assets/baseline-qmQD8jHC.js","assets/paint-bucket-B_ORouV0.js","assets/arrow-up-to-line-D6BbUIFG.js","assets/circle-DvxVmImz.js","assets/text-B1FQCLuI.js","assets/unlink-BqoFfo6j.js","assets/arrow-left-DLeWS8Mb.js","assets/arrow-right-CIkThkMt.js","assets/download-C1yPNiwc.js","assets/chevrons-up-down-Ot1-6qFg.js","assets/trash-2-Cvu3sV6U.js","assets/chevron-left-BNfsxm0Y.js","assets/sparkles-eoNyNVVU.js","assets/combine-DNBKGv7K.js","assets/ungroup-Cc2lnAQx.js","assets/grip-vertical-RdR8DjMM.js","assets/index-BQH3pFhd.js","assets/pen-line-BD7ohWoN.js","assets/badge-help-C2tWL6Tx.js","assets/wand-Dr-McKPX.js","assets/list-end-BAkgFyej.js","assets/list-plus-DwTupgTd.js","assets/list-minus-CiRGdabl.js","assets/feather-6srbvdQe.js","assets/album-DyEsDi0I.js","assets/corner-up-left-DrueFrBR.js","assets/loader-circle-Dbm6Dzit.js","assets/use-prevent-pitch-zoom-DzGgDOPg.js","assets/PlateEditor-BxnI1VTd.css","assets/CodeContainerApp-BGMyJ1po.js","assets/index-Br76-WZb.js","assets/folder-open-dIe9OhV5.js","assets/folder-Dbc0RVEZ.js","assets/file-Cu_wxXYl.js","assets/index-toAxGkKS.js","assets/index-DTc06RQk.css"])))=>i.map(i=>d[i]);
import { G as useConstant, r as reactExports, M as MotionConfigContext, H as motionValue, I as useIsomorphicLayoutEffect, J as cancelFrame, K as frame, N as interpolate$1, O as collectMotionValues, Q as isMotionValue, T as frameData, U as animateValue, z as createCollection, c as createContextScope$1, b as useControllableState, j as jsxRuntimeExports, P as Primitive, f as useComposedRefs, d as composeEventHandlers, g as cn, L as LazyIcon, V as create, W as subscribeWithSelector, X as devtools, s as useSessionState, y as getRepository, Y as FlowNodeTypeEnum, e as Presence, S as Slot, D as DismissableLayer, l as Portal$3, u as useLayoutEffect2, m as reactDomExports, Z as VisuallyHidden, i as useCallbackRef, p as useTranslation, x as useToast, $ as useLocalLLMState, _ as __vitePreload, a0 as customAlphabet, a1 as React, a2 as toast, a3 as encodeCSVData, a4 as logWarn, a5 as encodeSplitter, a6 as VectorDatabaseTypeEnum, a7 as VectorDatabaseStorageEnum, a8 as VectorDatabaseProviderEnum, t as useAppState, a9 as flowNodeTypeToEntity, C as SessionTypeEnum, aa as SessionStatusEnum, v as create$1, w as useModal, ab as logError, ac as Runnable, ad as HumanMessage, ae as Serializable, af as AIMessage, ag as decodeCSVData, ah as SystemMessage, ai as useLocalEmbeddingState, aj as getStorageDataSource, ak as textToSpeech, al as getDefaultExportFromCjs, am as clsx, an as dayjs, ao as decodeLine, ap as decodeSplitter, aq as Document, q as motion, h as cva, ar as MotionValue, as as nanoid, at as isDev, __tla as __tla_0 } from "./index-Bs2EL0Mm.js";
import { c as constant$3, i as interpolateNumber$2, a as color, b as interpolateRgb, d as interpolateString, e as defaultFlowState, g as getFlowStateActions, L as LLMStatusEnum, f as LLMProviderEnum, h as LLMModelTypeEnum, s as shimExports, u as useInternalNode, R as RECOMMENDATION_LOCAL_LLMS, j as LLMIcon, k as LLMInfo, T as Textarea, l as useReactFlow, H as Handle, P as Position, I as In, m as useHandleConnections, n as filterUserConnections, A as Alert, o as AlertTitle, p as AlertDescription, q as AIInput, r as mustache, t as useLocalLLM, F as FlowNodePlaceholderTypeEnum, v as omitBy, w as isUndefined, _ as _baseGetTag, x as isArray_1, y as isObjectLike_1, z as get, B as isObject$4, C as isFunction, D as toString_1, E as _Set, G as _setToArray, J as _SetCache, K as _cacheHas, M as _baseIteratee, N as _Symbol, O as isArguments_1, Q as _arrayPush, S as keys_1, U as isArrayLike_1, V as isSymbol_1, W as _arrayMap, X as _baseGet, Y as _baseUnary, Z as identity_1, $ as _defineProperty$E, a0 as eq_1, a1 as _isIndex, a2 as isObject_1, a3 as _root, a4 as _baseIsEqual, a5 as _getPrototype, a6 as _arraySome, a7 as _baseAssignValue, a8 as memoize$1, a9 as NodeResizer, aa as Panel, ab as useStore, ac as useStoreApi, ad as useNodes, ae as ViewportPortal, af as SYSTEM_NODE_IDS, ag as DISABLED_DELETE_NODE_TYPES, ah as deepmerge, ai as applyNodeChanges, aj as index, ak as PanOnScrollMode, al as Background$1, am as BackgroundVariant, an as Controls, ao as MiniMap, __tla as __tla_1 } from "./use-llm-Kc_COJca.js";
import { c as createMenuScope, a as createRovingFocusGroupScope, u as useDirection, R as Root$2, I as Item$2, A as Anchor2$1, C as Content2$4, G as Group, L as Label$2, b as Item2$1, d as CheckboxItem, e as RadioGroup, f as RadioItem, g as ItemIndicator$1, S as Separator$1, h as Arrow2, i as SubTrigger, j as SubContent, k as useId, l as Root3$1, P as Portal$2, m as createPopperScope, n as Anchor, o as hideOthers, p as ReactRemoveScroll, q as useFocusGuards, F as FocusScope, r as Content$1, s as Arrow, t as Root2$5, v as Root$3, w as Portal$4, O as Overlay, x as Content$2, B as Button, y as Label$3, z as createCollapsibleScope, D as Root$4, T as Trigger$4, E as Content$3, H as useSize, J as Input, K as Dialog, M as DialogContent, N as DialogHeader, Q as DialogTitle, U as DialogDescription, V as DialogFooter, W as Badge, X as buttonVariants, Y as TooltipProvider, Z as Tooltip$1, _ as TooltipTrigger, $ as TooltipContent, a0 as Separator$2, __tla as __tla_2 } from "./routes-Q3DgWzwS.js";
let Anchor2, convertToElementsTree, Content2$2, parseJSONLToFileSystemTree, updateFileContentOfFileSystemTree, CreateSourcebaseCard, BaseStringPromptTemplate, checkValidTemplate, Item2, renderTemplate, PromptTemplate, LoadingButton, HomePage$1, Portal$1, Root2, Trigger$2, _baseSlice, _baseFlatten, _overRest, _setToString, _baseFor, _baseRest, _isIterateeCall, last$1, debounce$2, isPlainObject_1, _apply, createToggleGroupScope, last_1, map$3, Root2$4, Root$1, Indicator, PopoverAnchor, useBaseConnectionToHandler, parseFileSystemTreeToJSONL, throttle$1, useFlowState, clamp, Root2$2, Item, Trigger2, Content2;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_1;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_2;
    } catch {
    }
  })()
]).then(async () => {
  var MessageStatusEnum = ((MessageStatusEnum2) => {
    MessageStatusEnum2["Started"] = "started";
    MessageStatusEnum2["Inprogress"] = "inprogress";
    MessageStatusEnum2["Success"] = "success";
    MessageStatusEnum2["Failed"] = "failed";
    return MessageStatusEnum2;
  })(MessageStatusEnum || {});
  var MessageRoleEnum = ((MessageRoleEnum2) => {
    MessageRoleEnum2["Human"] = "human";
    MessageRoleEnum2["User"] = "user";
    MessageRoleEnum2["AI"] = "ai";
    MessageRoleEnum2["System"] = "system";
    MessageRoleEnum2["Assistant"] = "assistant";
    MessageRoleEnum2["Tool"] = "tool";
    MessageRoleEnum2["FewShotExample"] = "few_shot_example";
    return MessageRoleEnum2;
  })(MessageRoleEnum || {});
  var ThreadStatusEnum = ((ThreadStatusEnum2) => {
    ThreadStatusEnum2["Started"] = "started";
    ThreadStatusEnum2["Inprogress"] = "inprogress";
    ThreadStatusEnum2["Done"] = "done";
    return ThreadStatusEnum2;
  })(ThreadStatusEnum || {});
  var PromptTypeEnum = ((PromptTypeEnum2) => {
    PromptTypeEnum2["Chat"] = "chat";
    PromptTypeEnum2["FewShotExample"] = "few_shot_example";
    return PromptTypeEnum2;
  })(PromptTypeEnum || {});
  function useMotionValue(initial) {
    const value = useConstant(() => motionValue(initial));
    const { isStatic } = reactExports.useContext(MotionConfigContext);
    if (isStatic) {
      const [, setLatest] = reactExports.useState(initial);
      reactExports.useEffect(() => value.on("change", setLatest), []);
    }
    return value;
  }
  function useCombineMotionValues(values, combineValues) {
    const value = useMotionValue(combineValues());
    const updateValue = () => value.set(combineValues());
    updateValue();
    useIsomorphicLayoutEffect(() => {
      const scheduleUpdate = () => frame.preRender(updateValue, false, true);
      const subscriptions = values.map((v2) => v2.on("change", scheduleUpdate));
      return () => {
        subscriptions.forEach((unsubscribe) => unsubscribe());
        cancelFrame(updateValue);
      };
    });
    return value;
  }
  const isCustomValueType = (v2) => {
    return v2 && typeof v2 === "object" && v2.mix;
  };
  const getMixer = (v2) => isCustomValueType(v2) ? v2.mix : void 0;
  function transform(...args) {
    const useImmediate = !Array.isArray(args[0]);
    const argOffset = useImmediate ? 0 : -1;
    const inputValue = args[0 + argOffset];
    const inputRange = args[1 + argOffset];
    const outputRange = args[2 + argOffset];
    const options = args[3 + argOffset];
    const interpolator = interpolate$1(inputRange, outputRange, {
      mixer: getMixer(outputRange[0]),
      ...options
    });
    return useImmediate ? interpolator(inputValue) : interpolator;
  }
  function useComputed(compute) {
    collectMotionValues.current = [];
    compute();
    const value = useCombineMotionValues(collectMotionValues.current, compute);
    collectMotionValues.current = void 0;
    return value;
  }
  function useTransform(input, inputRangeOrTransformer, outputRange, options) {
    if (typeof input === "function") {
      return useComputed(input);
    }
    const transformer2 = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);
    return Array.isArray(input) ? useListTransform(input, transformer2) : useListTransform([
      input
    ], ([latest]) => transformer2(latest));
  }
  function useListTransform(values, transformer2) {
    const latest = useConstant(() => []);
    return useCombineMotionValues(values, () => {
      latest.length = 0;
      const numValues = values.length;
      for (let i = 0; i < numValues; i++) {
        latest[i] = values[i].get();
      }
      return transformer2(latest);
    });
  }
  function toNumber$3(v2) {
    if (typeof v2 === "number") return v2;
    return parseFloat(v2);
  }
  function useSpring(source, config2 = {}) {
    const { isStatic } = reactExports.useContext(MotionConfigContext);
    const activeSpringAnimation = reactExports.useRef(null);
    const value = useMotionValue(isMotionValue(source) ? toNumber$3(source.get()) : source);
    const latestValue = reactExports.useRef(value.get());
    const latestSetter = reactExports.useRef(() => {
    });
    const startAnimation = () => {
      const animation = activeSpringAnimation.current;
      if (animation && animation.time === 0) {
        animation.sample(frameData.delta);
      }
      stopAnimation();
      activeSpringAnimation.current = animateValue({
        keyframes: [
          value.get(),
          latestValue.current
        ],
        velocity: value.getVelocity(),
        type: "spring",
        restDelta: 1e-3,
        restSpeed: 0.01,
        ...config2,
        onUpdate: latestSetter.current
      });
    };
    const stopAnimation = () => {
      if (activeSpringAnimation.current) {
        activeSpringAnimation.current.stop();
      }
    };
    reactExports.useInsertionEffect(() => {
      return value.attach((v2, set) => {
        if (isStatic) return set(v2);
        latestValue.current = v2;
        latestSetter.current = set;
        frame.update(startAnimation);
        return value.get();
      }, stopAnimation);
    }, [
      JSON.stringify(config2)
    ]);
    useIsomorphicLayoutEffect(() => {
      if (isMotionValue(source)) {
        return source.on("change", (v2) => value.set(toNumber$3(v2)));
      }
    }, [
      value
    ]);
    return value;
  }
  function numberArray(a2, b2) {
    if (!b2) b2 = [];
    var n2 = a2 ? Math.min(b2.length, a2.length) : 0, c2 = b2.slice(), i;
    return function(t2) {
      for (i = 0; i < n2; ++i) c2[i] = a2[i] * (1 - t2) + b2[i] * t2;
      return c2;
    };
  }
  function isNumberArray(x2) {
    return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
  }
  function genericArray(a2, b2) {
    var nb = b2 ? b2.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x2 = new Array(na), c2 = new Array(nb), i;
    for (i = 0; i < na; ++i) x2[i] = interpolate(a2[i], b2[i]);
    for (; i < nb; ++i) c2[i] = b2[i];
    return function(t2) {
      for (i = 0; i < na; ++i) c2[i] = x2[i](t2);
      return c2;
    };
  }
  function date$1(a2, b2) {
    var d2 = /* @__PURE__ */ new Date();
    return a2 = +a2, b2 = +b2, function(t2) {
      return d2.setTime(a2 * (1 - t2) + b2 * t2), d2;
    };
  }
  function object(a2, b2) {
    var i = {}, c2 = {}, k2;
    if (a2 === null || typeof a2 !== "object") a2 = {};
    if (b2 === null || typeof b2 !== "object") b2 = {};
    for (k2 in b2) {
      if (k2 in a2) {
        i[k2] = interpolate(a2[k2], b2[k2]);
      } else {
        c2[k2] = b2[k2];
      }
    }
    return function(t2) {
      for (k2 in i) c2[k2] = i[k2](t2);
      return c2;
    };
  }
  function interpolate(a2, b2) {
    var t2 = typeof b2, c2;
    return b2 == null || t2 === "boolean" ? constant$3(b2) : (t2 === "number" ? interpolateNumber$2 : t2 === "string" ? (c2 = color(b2)) ? (b2 = c2, interpolateRgb) : interpolateString : b2 instanceof color ? interpolateRgb : b2 instanceof Date ? date$1 : isNumberArray(b2) ? numberArray : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object : interpolateNumber$2)(a2, b2);
  }
  function interpolateRound(a2, b2) {
    return a2 = +a2, b2 = +b2, function(t2) {
      return Math.round(a2 * (1 - t2) + b2 * t2);
    };
  }
  function piecewise(interpolate$12, values) {
    if (values === void 0) values = interpolate$12, interpolate$12 = interpolate;
    var i = 0, n2 = values.length - 1, v2 = values[0], I2 = new Array(n2 < 0 ? 0 : n2);
    while (i < n2) I2[i] = interpolate$12(v2, v2 = values[++i]);
    return function(t2) {
      var i2 = Math.max(0, Math.min(n2 - 1, Math.floor(t2 *= n2)));
      return I2[i2](t2 - i2);
    };
  }
  var MENUBAR_NAME = "Menubar";
  var [Collection$2, useCollection$2, createCollectionScope$2] = createCollection(MENUBAR_NAME);
  var [createMenubarContext, createMenubarScope] = createContextScope$1(MENUBAR_NAME, [
    createCollectionScope$2,
    createRovingFocusGroupScope
  ]);
  var useMenuScope = createMenuScope();
  var useRovingFocusGroupScope$2 = createRovingFocusGroupScope();
  var [MenubarContextProvider, useMenubarContext] = createMenubarContext(MENUBAR_NAME);
  var Menubar$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, value: valueProp, onValueChange, defaultValue, loop = true, dir, ...menubarProps } = props;
    const direction = useDirection(dir);
    const rovingFocusGroupScope = useRovingFocusGroupScope$2(__scopeMenubar);
    const [value = "", setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue
    });
    const [currentTabStopId, setCurrentTabStopId] = reactExports.useState(null);
    return jsxRuntimeExports.jsx(MenubarContextProvider, {
      scope: __scopeMenubar,
      value,
      onMenuOpen: reactExports.useCallback((value2) => {
        setValue(value2);
        setCurrentTabStopId(value2);
      }, [
        setValue
      ]),
      onMenuClose: reactExports.useCallback(() => setValue(""), [
        setValue
      ]),
      onMenuToggle: reactExports.useCallback((value2) => {
        setValue((prevValue) => Boolean(prevValue) ? "" : value2);
        setCurrentTabStopId(value2);
      }, [
        setValue
      ]),
      dir: direction,
      loop,
      children: jsxRuntimeExports.jsx(Collection$2.Provider, {
        scope: __scopeMenubar,
        children: jsxRuntimeExports.jsx(Collection$2.Slot, {
          scope: __scopeMenubar,
          children: jsxRuntimeExports.jsx(Root$2, {
            asChild: true,
            ...rovingFocusGroupScope,
            orientation: "horizontal",
            loop,
            dir: direction,
            currentTabStopId,
            onCurrentTabStopIdChange: setCurrentTabStopId,
            children: jsxRuntimeExports.jsx(Primitive.div, {
              role: "menubar",
              ...menubarProps,
              ref: forwardedRef
            })
          })
        })
      })
    });
  });
  Menubar$1.displayName = MENUBAR_NAME;
  var MENU_NAME = "MenubarMenu";
  var [MenubarMenuProvider, useMenubarMenuContext] = createMenubarContext(MENU_NAME);
  var MenubarMenu$1 = (props) => {
    const { __scopeMenubar, value: valueProp, ...menuProps } = props;
    const autoValue = useId();
    const value = valueProp || autoValue || "LEGACY_REACT_AUTO_VALUE";
    const context = useMenubarContext(MENU_NAME, __scopeMenubar);
    const menuScope = useMenuScope(__scopeMenubar);
    const triggerRef = reactExports.useRef(null);
    const wasKeyboardTriggerOpenRef = reactExports.useRef(false);
    const open = context.value === value;
    reactExports.useEffect(() => {
      if (!open) wasKeyboardTriggerOpenRef.current = false;
    }, [
      open
    ]);
    return jsxRuntimeExports.jsx(MenubarMenuProvider, {
      scope: __scopeMenubar,
      value,
      triggerId: useId(),
      triggerRef,
      contentId: useId(),
      wasKeyboardTriggerOpenRef,
      children: jsxRuntimeExports.jsx(Root3$1, {
        ...menuScope,
        open,
        onOpenChange: (open2) => {
          if (!open2) context.onMenuClose();
        },
        modal: false,
        dir: context.dir,
        ...menuProps
      })
    });
  };
  MenubarMenu$1.displayName = MENU_NAME;
  var TRIGGER_NAME$4 = "MenubarTrigger";
  var MenubarTrigger$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, disabled = false, ...triggerProps } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope$2(__scopeMenubar);
    const menuScope = useMenuScope(__scopeMenubar);
    const context = useMenubarContext(TRIGGER_NAME$4, __scopeMenubar);
    const menuContext = useMenubarMenuContext(TRIGGER_NAME$4, __scopeMenubar);
    const ref = reactExports.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);
    const [isFocused, setIsFocused] = reactExports.useState(false);
    const open = context.value === menuContext.value;
    return jsxRuntimeExports.jsx(Collection$2.ItemSlot, {
      scope: __scopeMenubar,
      value: menuContext.value,
      disabled,
      children: jsxRuntimeExports.jsx(Item$2, {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        tabStopId: menuContext.value,
        children: jsxRuntimeExports.jsx(Anchor2$1, {
          asChild: true,
          ...menuScope,
          children: jsxRuntimeExports.jsx(Primitive.button, {
            type: "button",
            role: "menuitem",
            id: menuContext.triggerId,
            "aria-haspopup": "menu",
            "aria-expanded": open,
            "aria-controls": open ? menuContext.contentId : void 0,
            "data-highlighted": isFocused ? "" : void 0,
            "data-state": open ? "open" : "closed",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            ...triggerProps,
            ref: composedRefs,
            onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
              if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onMenuOpen(menuContext.value);
                if (!open) event.preventDefault();
              }
            }),
            onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {
              var _a;
              const menubarOpen = Boolean(context.value);
              if (menubarOpen && !open) {
                context.onMenuOpen(menuContext.value);
                (_a = ref.current) == null ? void 0 : _a.focus();
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if (disabled) return;
              if ([
                "Enter",
                " "
              ].includes(event.key)) context.onMenuToggle(menuContext.value);
              if (event.key === "ArrowDown") context.onMenuOpen(menuContext.value);
              if ([
                "Enter",
                " ",
                "ArrowDown"
              ].includes(event.key)) {
                menuContext.wasKeyboardTriggerOpenRef.current = true;
                event.preventDefault();
              }
            }),
            onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),
            onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))
          })
        })
      })
    });
  });
  MenubarTrigger$1.displayName = TRIGGER_NAME$4;
  var PORTAL_NAME$2 = "MenubarPortal";
  var MenubarPortal = (props) => {
    const { __scopeMenubar, ...portalProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(Portal$2, {
      ...menuScope,
      ...portalProps
    });
  };
  MenubarPortal.displayName = PORTAL_NAME$2;
  var CONTENT_NAME$4 = "MenubarContent";
  var MenubarContent$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, align = "start", ...contentProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    const context = useMenubarContext(CONTENT_NAME$4, __scopeMenubar);
    const menuContext = useMenubarMenuContext(CONTENT_NAME$4, __scopeMenubar);
    const getItems = useCollection$2(__scopeMenubar);
    const hasInteractedOutsideRef = reactExports.useRef(false);
    return jsxRuntimeExports.jsx(Content2$4, {
      id: menuContext.contentId,
      "aria-labelledby": menuContext.triggerId,
      "data-radix-menubar-content": "",
      ...menuScope,
      ...contentProps,
      ref: forwardedRef,
      align,
      onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
        var _a;
        const menubarOpen = Boolean(context.value);
        if (!menubarOpen && !hasInteractedOutsideRef.current) {
          (_a = menuContext.triggerRef.current) == null ? void 0 : _a.focus();
        }
        hasInteractedOutsideRef.current = false;
        event.preventDefault();
      }),
      onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {
        const target = event.target;
        const isMenubarTrigger = getItems().some((item) => {
          var _a;
          return (_a = item.ref.current) == null ? void 0 : _a.contains(target);
        });
        if (isMenubarTrigger) event.preventDefault();
      }),
      onInteractOutside: composeEventHandlers(props.onInteractOutside, () => {
        hasInteractedOutsideRef.current = true;
      }),
      onEntryFocus: (event) => {
        if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();
      },
      onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
        if ([
          "ArrowRight",
          "ArrowLeft"
        ].includes(event.key)) {
          const target = event.target;
          const targetIsSubTrigger = target.hasAttribute("data-radix-menubar-subtrigger");
          const isKeyDownInsideSubMenu = target.closest("[data-radix-menubar-content]") !== event.currentTarget;
          const prevMenuKey = context.dir === "rtl" ? "ArrowRight" : "ArrowLeft";
          const isPrevKey = prevMenuKey === event.key;
          const isNextKey = !isPrevKey;
          if (isNextKey && targetIsSubTrigger) return;
          if (isKeyDownInsideSubMenu && isPrevKey) return;
          const items = getItems().filter((item) => !item.disabled);
          let candidateValues = items.map((item) => item.value);
          if (isPrevKey) candidateValues.reverse();
          const currentIndex = candidateValues.indexOf(menuContext.value);
          candidateValues = context.loop ? wrapArray$1(candidateValues, currentIndex + 1) : candidateValues.slice(currentIndex + 1);
          const [nextValue] = candidateValues;
          if (nextValue) context.onMenuOpen(nextValue);
        }
      }, {
        checkForDefaultPrevented: false
      }),
      style: {
        ...props.style,
        ...{
          "--radix-menubar-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-menubar-content-available-width": "var(--radix-popper-available-width)",
          "--radix-menubar-content-available-height": "var(--radix-popper-available-height)",
          "--radix-menubar-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-menubar-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    });
  });
  MenubarContent$1.displayName = CONTENT_NAME$4;
  var GROUP_NAME$1 = "MenubarGroup";
  var MenubarGroup = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...groupProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(Group, {
      ...menuScope,
      ...groupProps,
      ref: forwardedRef
    });
  });
  MenubarGroup.displayName = GROUP_NAME$1;
  var LABEL_NAME$1 = "MenubarLabel";
  var MenubarLabel$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...labelProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(Label$2, {
      ...menuScope,
      ...labelProps,
      ref: forwardedRef
    });
  });
  MenubarLabel$1.displayName = LABEL_NAME$1;
  var ITEM_NAME$3 = "MenubarItem";
  var MenubarItem$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...itemProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(Item2$1, {
      ...menuScope,
      ...itemProps,
      ref: forwardedRef
    });
  });
  MenubarItem$1.displayName = ITEM_NAME$3;
  var CHECKBOX_ITEM_NAME = "MenubarCheckboxItem";
  var MenubarCheckboxItem$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...checkboxItemProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(CheckboxItem, {
      ...menuScope,
      ...checkboxItemProps,
      ref: forwardedRef
    });
  });
  MenubarCheckboxItem$1.displayName = CHECKBOX_ITEM_NAME;
  var RADIO_GROUP_NAME = "MenubarRadioGroup";
  var MenubarRadioGroup = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...radioGroupProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(RadioGroup, {
      ...menuScope,
      ...radioGroupProps,
      ref: forwardedRef
    });
  });
  MenubarRadioGroup.displayName = RADIO_GROUP_NAME;
  var RADIO_ITEM_NAME = "MenubarRadioItem";
  var MenubarRadioItem$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...radioItemProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(RadioItem, {
      ...menuScope,
      ...radioItemProps,
      ref: forwardedRef
    });
  });
  MenubarRadioItem$1.displayName = RADIO_ITEM_NAME;
  var INDICATOR_NAME$1 = "MenubarItemIndicator";
  var MenubarItemIndicator = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...itemIndicatorProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(ItemIndicator$1, {
      ...menuScope,
      ...itemIndicatorProps,
      ref: forwardedRef
    });
  });
  MenubarItemIndicator.displayName = INDICATOR_NAME$1;
  var SEPARATOR_NAME$1 = "MenubarSeparator";
  var MenubarSeparator$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...separatorProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(Separator$1, {
      ...menuScope,
      ...separatorProps,
      ref: forwardedRef
    });
  });
  MenubarSeparator$1.displayName = SEPARATOR_NAME$1;
  var ARROW_NAME$2 = "MenubarArrow";
  var MenubarArrow = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...arrowProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(Arrow2, {
      ...menuScope,
      ...arrowProps,
      ref: forwardedRef
    });
  });
  MenubarArrow.displayName = ARROW_NAME$2;
  var SUB_TRIGGER_NAME = "MenubarSubTrigger";
  var MenubarSubTrigger$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...subTriggerProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(SubTrigger, {
      "data-radix-menubar-subtrigger": "",
      ...menuScope,
      ...subTriggerProps,
      ref: forwardedRef
    });
  });
  MenubarSubTrigger$1.displayName = SUB_TRIGGER_NAME;
  var SUB_CONTENT_NAME = "MenubarSubContent";
  var MenubarSubContent$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeMenubar, ...subContentProps } = props;
    const menuScope = useMenuScope(__scopeMenubar);
    return jsxRuntimeExports.jsx(SubContent, {
      ...menuScope,
      "data-radix-menubar-content": "",
      ...subContentProps,
      ref: forwardedRef,
      style: {
        ...props.style,
        ...{
          "--radix-menubar-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-menubar-content-available-width": "var(--radix-popper-available-width)",
          "--radix-menubar-content-available-height": "var(--radix-popper-available-height)",
          "--radix-menubar-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-menubar-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    });
  });
  MenubarSubContent$1.displayName = SUB_CONTENT_NAME;
  function wrapArray$1(array2, startIndex) {
    return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
  }
  var Root3 = Menubar$1;
  var Menu = MenubarMenu$1;
  var Trigger$3 = MenubarTrigger$1;
  var Portal2 = MenubarPortal;
  var Content2$3 = MenubarContent$1;
  var Label2 = MenubarLabel$1;
  var Item3 = MenubarItem$1;
  var CheckboxItem2 = MenubarCheckboxItem$1;
  var RadioItem2 = MenubarRadioItem$1;
  var ItemIndicator2 = MenubarItemIndicator;
  var Separator2 = MenubarSeparator$1;
  var SubTrigger2 = MenubarSubTrigger$1;
  var SubContent2 = MenubarSubContent$1;
  const MenubarMenu = Menu;
  const Menubar = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Root3, {
    ref,
    className: cn("flex h-10 items-center space-x-1 rounded-md border bg-background p-1", className),
    ...props
  }));
  Menubar.displayName = Root3.displayName;
  const MenubarTrigger = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Trigger$3, {
    ref,
    className: cn("flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground", className),
    ...props
  }));
  MenubarTrigger.displayName = Trigger$3.displayName;
  const MenubarSubTrigger = reactExports.forwardRef(({ className, inset, children, ...props }, ref) => jsxRuntimeExports.jsxs(SubTrigger2, {
    ref,
    className: cn("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground", inset && "pl-8", className),
    ...props,
    children: [
      children,
      jsxRuntimeExports.jsx(LazyIcon, {
        name: "chevron-right",
        className: "ml-auto h-4 w-4"
      })
    ]
  }));
  MenubarSubTrigger.displayName = SubTrigger2.displayName;
  const MenubarSubContent = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(SubContent2, {
    ref,
    className: cn("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className),
    ...props
  }));
  MenubarSubContent.displayName = SubContent2.displayName;
  const MenubarContent = reactExports.forwardRef(({ className, align = "start", alignOffset = -4, sideOffset = 8, ...props }, ref) => jsxRuntimeExports.jsx(Portal2, {
    children: jsxRuntimeExports.jsx(Content2$3, {
      ref,
      align,
      alignOffset,
      sideOffset,
      className: cn("z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className),
      ...props
    })
  }));
  MenubarContent.displayName = Content2$3.displayName;
  const MenubarItem = reactExports.forwardRef(({ className, inset, ...props }, ref) => jsxRuntimeExports.jsx(Item3, {
    ref,
    className: cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", inset && "pl-8", className),
    ...props
  }));
  MenubarItem.displayName = Item3.displayName;
  const MenubarCheckboxItem = reactExports.forwardRef(({ className, children, checked, ...props }, ref) => jsxRuntimeExports.jsxs(CheckboxItem2, {
    ref,
    className: cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className),
    checked,
    ...props,
    children: [
      jsxRuntimeExports.jsx("span", {
        className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
        children: jsxRuntimeExports.jsx(ItemIndicator2, {
          children: jsxRuntimeExports.jsx(LazyIcon, {
            name: "check",
            className: "h-4 w-4"
          })
        })
      }),
      children
    ]
  }));
  MenubarCheckboxItem.displayName = CheckboxItem2.displayName;
  const MenubarRadioItem = reactExports.forwardRef(({ className, children, ...props }, ref) => jsxRuntimeExports.jsxs(RadioItem2, {
    ref,
    className: cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className),
    ...props,
    children: [
      jsxRuntimeExports.jsx("span", {
        className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
        children: jsxRuntimeExports.jsx(ItemIndicator2, {
          children: jsxRuntimeExports.jsx(LazyIcon, {
            name: "circle",
            className: "h-2 w-2 fill-current"
          })
        })
      }),
      children
    ]
  }));
  MenubarRadioItem.displayName = RadioItem2.displayName;
  const MenubarLabel = reactExports.forwardRef(({ className, inset, ...props }, ref) => jsxRuntimeExports.jsx(Label2, {
    ref,
    className: cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className),
    ...props
  }));
  MenubarLabel.displayName = Label2.displayName;
  const MenubarSeparator = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Separator2, {
    ref,
    className: cn("-mx-1 my-1 h-px bg-muted", className),
    ...props
  }));
  MenubarSeparator.displayName = Separator2.displayName;
  const Card = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("div", {
    ref,
    className: cn("rounded-lg border bg-card text-card-foreground shadow-sm", className),
    ...props
  }));
  Card.displayName = "Card";
  const CardHeader = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("div", {
    ref,
    className: cn("flex flex-col space-y-1.5 p-6", className),
    ...props
  }));
  CardHeader.displayName = "CardHeader";
  const CardTitle = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("h3", {
    ref,
    className: cn("text-2xl font-semibold leading-none tracking-tight", className),
    ...props
  }));
  CardTitle.displayName = "CardTitle";
  const CardDescription = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("p", {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }));
  CardDescription.displayName = "CardDescription";
  const CardContent = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("div", {
    ref,
    className: cn("p-6 pt-0", className),
    ...props
  }));
  CardContent.displayName = "CardContent";
  const CardFooter = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("div", {
    ref,
    className: cn("flex items-center p-6 pt-0", className),
    ...props
  }));
  CardFooter.displayName = "CardFooter";
  useFlowState = create()(subscribeWithSelector(devtools((set, get2) => ({
    ...defaultFlowState,
    ...getFlowStateActions(set, get2)
  }))));
  const useCreateDatabaseLLM = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createDatabaseLLM = reactExports.useCallback(async (source, record) => {
      try {
        if (!sessionId) {
          throw new Error("Session not found");
        }
        setLoading(true);
        const existed = await getRepository("LLM").findOne({
          where: {
            name: record.name,
            session_id: sessionId
          }
        });
        if (existed) {
          pushSyncNodeQueue("LLM", {
            where: {
              source_type: "LLM",
              source_id: existed.id
            }
          });
          return existed;
        }
        return getRepository("LLM").save({
          name: `${record.name}`,
          status: LLMStatusEnum.Started,
          session_id: sessionId,
          provider: LLMProviderEnum.WebLLM,
          metadata: JSON.stringify({}),
          model_type: record.model_type || LLMModelTypeEnum.LLM,
          ...record
        }).then(async (llm) => {
          var _a, _b, _c;
          await createOrUpdateFlowNode({
            source_id: llm.id,
            source_type: "LLM",
            node_type: FlowNodeTypeEnum.LLM,
            x: (_a = source.position) == null ? void 0 : _a.x,
            y: ((_b = source.position) == null ? void 0 : _b.y) + (((_c = source.measured) == null ? void 0 : _c.height) || 0) + 30
          });
          return llm;
        });
      } finally {
        setLoading(false);
      }
    }, [
      createOrUpdateFlowNode,
      pushSyncNodeQueue,
      sessionId
    ]);
    return {
      loading,
      createDatabaseLLM
    };
  };
  var POPOVER_NAME = "Popover";
  var [createPopoverContext, createPopoverScope] = createContextScope$1(POPOVER_NAME, [
    createPopperScope
  ]);
  var usePopperScope$1 = createPopperScope();
  var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
  var Popover$1 = (props) => {
    const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;
    const popperScope = usePopperScope$1(__scopePopover);
    const triggerRef = reactExports.useRef(null);
    const [hasCustomAnchor, setHasCustomAnchor] = reactExports.useState(false);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return jsxRuntimeExports.jsx(Root2$5, {
      ...popperScope,
      children: jsxRuntimeExports.jsx(PopoverProvider, {
        scope: __scopePopover,
        contentId: useId(),
        triggerRef,
        open,
        onOpenChange: setOpen,
        onOpenToggle: reactExports.useCallback(() => setOpen((prevOpen) => !prevOpen), [
          setOpen
        ]),
        hasCustomAnchor,
        onCustomAnchorAdd: reactExports.useCallback(() => setHasCustomAnchor(true), []),
        onCustomAnchorRemove: reactExports.useCallback(() => setHasCustomAnchor(false), []),
        modal,
        children
      })
    });
  };
  Popover$1.displayName = POPOVER_NAME;
  var ANCHOR_NAME = "PopoverAnchor";
  PopoverAnchor = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopePopover, ...anchorProps } = props;
    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
    const popperScope = usePopperScope$1(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    reactExports.useEffect(() => {
      onCustomAnchorAdd();
      return () => onCustomAnchorRemove();
    }, [
      onCustomAnchorAdd,
      onCustomAnchorRemove
    ]);
    return jsxRuntimeExports.jsx(Anchor, {
      ...popperScope,
      ...anchorProps,
      ref: forwardedRef
    });
  });
  PopoverAnchor.displayName = ANCHOR_NAME;
  var TRIGGER_NAME$3 = "PopoverTrigger";
  var PopoverTrigger = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopePopover, ...triggerProps } = props;
    const context = usePopoverContext(TRIGGER_NAME$3, __scopePopover);
    const popperScope = usePopperScope$1(__scopePopover);
    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
    const trigger = jsxRuntimeExports.jsx(Primitive.button, {
      type: "button",
      "aria-haspopup": "dialog",
      "aria-expanded": context.open,
      "aria-controls": context.contentId,
      "data-state": getState$2(context.open),
      ...triggerProps,
      ref: composedTriggerRef,
      onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
    });
    return context.hasCustomAnchor ? trigger : jsxRuntimeExports.jsx(Anchor, {
      asChild: true,
      ...popperScope,
      children: trigger
    });
  });
  PopoverTrigger.displayName = TRIGGER_NAME$3;
  var PORTAL_NAME$1 = "PopoverPortal";
  var [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME$1, {
    forceMount: void 0
  });
  var PopoverPortal = (props) => {
    const { __scopePopover, forceMount, children, container } = props;
    const context = usePopoverContext(PORTAL_NAME$1, __scopePopover);
    return jsxRuntimeExports.jsx(PortalProvider, {
      scope: __scopePopover,
      forceMount,
      children: jsxRuntimeExports.jsx(Presence, {
        present: forceMount || context.open,
        children: jsxRuntimeExports.jsx(Portal$3, {
          asChild: true,
          container,
          children
        })
      })
    });
  };
  PopoverPortal.displayName = PORTAL_NAME$1;
  var CONTENT_NAME$3 = "PopoverContent";
  var PopoverContent$1 = reactExports.forwardRef((props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME$3, props.__scopePopover);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME$3, props.__scopePopover);
    return jsxRuntimeExports.jsx(Presence, {
      present: forceMount || context.open,
      children: context.modal ? jsxRuntimeExports.jsx(PopoverContentModal, {
        ...contentProps,
        ref: forwardedRef
      }) : jsxRuntimeExports.jsx(PopoverContentNonModal, {
        ...contentProps,
        ref: forwardedRef
      })
    });
  });
  PopoverContent$1.displayName = CONTENT_NAME$3;
  var PopoverContentModal = reactExports.forwardRef((props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME$3, props.__scopePopover);
    const contentRef = reactExports.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const isRightClickOutsideRef = reactExports.useRef(false);
    reactExports.useEffect(() => {
      const content = contentRef.current;
      if (content) return hideOthers(content);
    }, []);
    return jsxRuntimeExports.jsx(ReactRemoveScroll, {
      as: Slot,
      allowPinchZoom: true,
      children: jsxRuntimeExports.jsx(PopoverContentImpl, {
        ...props,
        ref: composedRefs,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
          var _a;
          event.preventDefault();
          if (!isRightClickOutsideRef.current) (_a = context.triggerRef.current) == null ? void 0 : _a.focus();
        }),
        onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
          const originalEvent = event.detail.originalEvent;
          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
          isRightClickOutsideRef.current = isRightClick;
        }, {
          checkForDefaultPrevented: false
        }),
        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => event.preventDefault(), {
          checkForDefaultPrevented: false
        })
      })
    });
  });
  var PopoverContentNonModal = reactExports.forwardRef((props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME$3, props.__scopePopover);
    const hasInteractedOutsideRef = reactExports.useRef(false);
    const hasPointerDownOutsideRef = reactExports.useRef(false);
    return jsxRuntimeExports.jsx(PopoverContentImpl, {
      ...props,
      ref: forwardedRef,
      trapFocus: false,
      disableOutsidePointerEvents: false,
      onCloseAutoFocus: (event) => {
        var _a, _b;
        (_a = props.onCloseAutoFocus) == null ? void 0 : _a.call(props, event);
        if (!event.defaultPrevented) {
          if (!hasInteractedOutsideRef.current) (_b = context.triggerRef.current) == null ? void 0 : _b.focus();
          event.preventDefault();
        }
        hasInteractedOutsideRef.current = false;
        hasPointerDownOutsideRef.current = false;
      },
      onInteractOutside: (event) => {
        var _a, _b;
        (_a = props.onInteractOutside) == null ? void 0 : _a.call(props, event);
        if (!event.defaultPrevented) {
          hasInteractedOutsideRef.current = true;
          if (event.detail.originalEvent.type === "pointerdown") {
            hasPointerDownOutsideRef.current = true;
          }
        }
        const target = event.target;
        const targetIsTrigger = (_b = context.triggerRef.current) == null ? void 0 : _b.contains(target);
        if (targetIsTrigger) event.preventDefault();
        if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
          event.preventDefault();
        }
      }
    });
  });
  var PopoverContentImpl = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME$3, __scopePopover);
    const popperScope = usePopperScope$1(__scopePopover);
    useFocusGuards();
    return jsxRuntimeExports.jsx(FocusScope, {
      asChild: true,
      loop: true,
      trapped: trapFocus,
      onMountAutoFocus: onOpenAutoFocus,
      onUnmountAutoFocus: onCloseAutoFocus,
      children: jsxRuntimeExports.jsx(DismissableLayer, {
        asChild: true,
        disableOutsidePointerEvents,
        onInteractOutside,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onDismiss: () => context.onOpenChange(false),
        children: jsxRuntimeExports.jsx(Content$1, {
          "data-state": getState$2(context.open),
          role: "dialog",
          id: context.contentId,
          ...popperScope,
          ...contentProps,
          ref: forwardedRef,
          style: {
            ...contentProps.style,
            ...{
              "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
              "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
              "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
              "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
              "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
            }
          }
        })
      })
    });
  });
  var CLOSE_NAME = "PopoverClose";
  var PopoverClose = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopePopover, ...closeProps } = props;
    const context = usePopoverContext(CLOSE_NAME, __scopePopover);
    return jsxRuntimeExports.jsx(Primitive.button, {
      type: "button",
      ...closeProps,
      ref: forwardedRef,
      onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
    });
  });
  PopoverClose.displayName = CLOSE_NAME;
  var ARROW_NAME$1 = "PopoverArrow";
  var PopoverArrow = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = usePopperScope$1(__scopePopover);
    return jsxRuntimeExports.jsx(Arrow, {
      ...popperScope,
      ...arrowProps,
      ref: forwardedRef
    });
  });
  PopoverArrow.displayName = ARROW_NAME$1;
  function getState$2(open) {
    return open ? "open" : "closed";
  }
  Root2$4 = Popover$1;
  Anchor2 = PopoverAnchor;
  Trigger$2 = PopoverTrigger;
  Portal$1 = PopoverPortal;
  Content2$2 = PopoverContent$1;
  const Popover = Root2$4;
  const PopoverContent = reactExports.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => jsxRuntimeExports.jsx(Portal$1, {
    children: jsxRuntimeExports.jsx(Content2$2, {
      ref,
      align,
      sideOffset,
      className: cn("z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className),
      ...props
    })
  }));
  PopoverContent.displayName = Content2$2.displayName;
  var U = 1, Y$1 = 0.9, H = 0.8, J = 0.17, p$1 = 0.1, u$1 = 0.999, $ = 0.9999;
  var k$3 = 0.99, m$1 = /[\\\/_+.#"@\[\(\{&]/, B = /[\\\/_+.#"@\[\(\{&]/g, K$1 = /[\s-]/, X = /[\s-]/g;
  function G$1(_, C, h2, P2, A, f2, O) {
    if (f2 === C.length) return A === _.length ? U : k$3;
    var T2 = `${A},${f2}`;
    if (O[T2] !== void 0) return O[T2];
    for (var L = P2.charAt(f2), c2 = h2.indexOf(L, A), S = 0, E, N2, R, M2; c2 >= 0; ) E = G$1(_, C, h2, P2, c2 + 1, f2 + 1, O), E > S && (c2 === A ? E *= U : m$1.test(_.charAt(c2 - 1)) ? (E *= H, R = _.slice(A, c2 - 1).match(B), R && A > 0 && (E *= Math.pow(u$1, R.length))) : K$1.test(_.charAt(c2 - 1)) ? (E *= Y$1, M2 = _.slice(A, c2 - 1).match(X), M2 && A > 0 && (E *= Math.pow(u$1, M2.length))) : (E *= J, A > 0 && (E *= Math.pow(u$1, c2 - A))), _.charAt(c2) !== C.charAt(f2) && (E *= $)), (E < p$1 && h2.charAt(c2 - 1) === P2.charAt(f2 + 1) || P2.charAt(f2 + 1) === P2.charAt(f2) && h2.charAt(c2 - 1) !== P2.charAt(f2)) && (N2 = G$1(_, C, h2, P2, c2 + 1, f2 + 2, O), N2 * p$1 > E && (E = N2 * p$1)), E > S && (S = E), c2 = h2.indexOf(L, c2 + 1);
    return O[T2] = S, S;
  }
  function D(_) {
    return _.toLowerCase().replace(X, " ");
  }
  function W(_, C, h2) {
    return _ = h2 && h2.length > 0 ? `${_ + " " + h2.join(" ")}` : _, G$1(_, C, D(_), D(C), 0, 0, {});
  }
  var N = '[cmdk-group=""]', Q = '[cmdk-group-items=""]', be = '[cmdk-group-heading=""]', Z = '[cmdk-item=""]', le = `${Z}:not([aria-disabled="true"])`, Y = "cmdk-item-select", I = "data-value", he = (r, o, t2) => W(r, o, t2), ue = reactExports.createContext(void 0), K = () => reactExports.useContext(ue), de = reactExports.createContext(void 0), ee = () => reactExports.useContext(de), fe = reactExports.createContext(void 0);
  var me = reactExports.forwardRef((r, o) => {
    let t2 = k$2(() => {
      var e3, s2;
      return {
        search: "",
        value: (s2 = (e3 = r.value) != null ? e3 : r.defaultValue) != null ? s2 : "",
        filtered: {
          count: 0,
          items: /* @__PURE__ */ new Map(),
          groups: /* @__PURE__ */ new Set()
        }
      };
    }), u2 = k$2(() => /* @__PURE__ */ new Set()), c2 = k$2(() => /* @__PURE__ */ new Map()), d2 = k$2(() => /* @__PURE__ */ new Map()), f2 = k$2(() => /* @__PURE__ */ new Set()), p2 = pe(r), { label: v2, children: b2, value: l2, onValueChange: y2, filter: E, shouldFilter: C, loop: H2, disablePointerSelection: ge = false, vimBindings: $2 = true, ...O } = r, te = useId(), B2 = useId(), F = useId(), x2 = reactExports.useRef(null), R = Te();
    M(() => {
      if (l2 !== void 0) {
        let e3 = l2.trim();
        t2.current.value = e3, h2.emit();
      }
    }, [
      l2
    ]), M(() => {
      R(6, re2);
    }, []);
    let h2 = reactExports.useMemo(() => ({
      subscribe: (e3) => (f2.current.add(e3), () => f2.current.delete(e3)),
      snapshot: () => t2.current,
      setState: (e3, s2, i) => {
        var a2, m2, g2;
        if (!Object.is(t2.current[e3], s2)) {
          if (t2.current[e3] = s2, e3 === "search") W2(), U2(), R(1, z);
          else if (e3 === "value" && (i || R(5, re2), ((a2 = p2.current) == null ? void 0 : a2.value) !== void 0)) {
            let S = s2 != null ? s2 : "";
            (g2 = (m2 = p2.current).onValueChange) == null || g2.call(m2, S);
            return;
          }
          h2.emit();
        }
      },
      emit: () => {
        f2.current.forEach((e3) => e3());
      }
    }), []), q2 = reactExports.useMemo(() => ({
      value: (e3, s2, i) => {
        var a2;
        s2 !== ((a2 = d2.current.get(e3)) == null ? void 0 : a2.value) && (d2.current.set(e3, {
          value: s2,
          keywords: i
        }), t2.current.filtered.items.set(e3, ne(s2, i)), R(2, () => {
          U2(), h2.emit();
        }));
      },
      item: (e3, s2) => (u2.current.add(e3), s2 && (c2.current.has(s2) ? c2.current.get(s2).add(e3) : c2.current.set(s2, /* @__PURE__ */ new Set([
        e3
      ]))), R(3, () => {
        W2(), U2(), t2.current.value || z(), h2.emit();
      }), () => {
        d2.current.delete(e3), u2.current.delete(e3), t2.current.filtered.items.delete(e3);
        let i = A();
        R(4, () => {
          W2(), (i == null ? void 0 : i.getAttribute("id")) === e3 && z(), h2.emit();
        });
      }),
      group: (e3) => (c2.current.has(e3) || c2.current.set(e3, /* @__PURE__ */ new Set()), () => {
        d2.current.delete(e3), c2.current.delete(e3);
      }),
      filter: () => p2.current.shouldFilter,
      label: v2 || r["aria-label"],
      getDisablePointerSelection: () => p2.current.disablePointerSelection,
      listId: te,
      inputId: F,
      labelId: B2,
      listInnerRef: x2
    }), []);
    function ne(e3, s2) {
      var a2, m2;
      let i = (m2 = (a2 = p2.current) == null ? void 0 : a2.filter) != null ? m2 : he;
      return e3 ? i(e3, t2.current.search, s2) : 0;
    }
    function U2() {
      if (!t2.current.search || p2.current.shouldFilter === false) return;
      let e3 = t2.current.filtered.items, s2 = [];
      t2.current.filtered.groups.forEach((a2) => {
        let m2 = c2.current.get(a2), g2 = 0;
        m2.forEach((S) => {
          let P2 = e3.get(S);
          g2 = Math.max(P2, g2);
        }), s2.push([
          a2,
          g2
        ]);
      });
      let i = x2.current;
      _().sort((a2, m2) => {
        var P2, V;
        let g2 = a2.getAttribute("id"), S = m2.getAttribute("id");
        return ((P2 = e3.get(S)) != null ? P2 : 0) - ((V = e3.get(g2)) != null ? V : 0);
      }).forEach((a2) => {
        let m2 = a2.closest(Q);
        m2 ? m2.appendChild(a2.parentElement === m2 ? a2 : a2.closest(`${Q} > *`)) : i.appendChild(a2.parentElement === i ? a2 : a2.closest(`${Q} > *`));
      }), s2.sort((a2, m2) => m2[1] - a2[1]).forEach((a2) => {
        var g2;
        let m2 = (g2 = x2.current) == null ? void 0 : g2.querySelector(`${N}[${I}="${encodeURIComponent(a2[0])}"]`);
        m2 == null || m2.parentElement.appendChild(m2);
      });
    }
    function z() {
      let e3 = _().find((i) => i.getAttribute("aria-disabled") !== "true"), s2 = e3 == null ? void 0 : e3.getAttribute(I);
      h2.setState("value", s2 || void 0);
    }
    function W2() {
      var s2, i, a2, m2;
      if (!t2.current.search || p2.current.shouldFilter === false) {
        t2.current.filtered.count = u2.current.size;
        return;
      }
      t2.current.filtered.groups = /* @__PURE__ */ new Set();
      let e3 = 0;
      for (let g2 of u2.current) {
        let S = (i = (s2 = d2.current.get(g2)) == null ? void 0 : s2.value) != null ? i : "", P2 = (m2 = (a2 = d2.current.get(g2)) == null ? void 0 : a2.keywords) != null ? m2 : [], V = ne(S, P2);
        t2.current.filtered.items.set(g2, V), V > 0 && e3++;
      }
      for (let [g2, S] of c2.current) for (let P2 of S) if (t2.current.filtered.items.get(P2) > 0) {
        t2.current.filtered.groups.add(g2);
        break;
      }
      t2.current.filtered.count = e3;
    }
    function re2() {
      var s2, i, a2;
      let e3 = A();
      e3 && (((s2 = e3.parentElement) == null ? void 0 : s2.firstChild) === e3 && ((a2 = (i = e3.closest(N)) == null ? void 0 : i.querySelector(be)) == null || a2.scrollIntoView({
        block: "nearest"
      })), e3.scrollIntoView({
        block: "nearest"
      }));
    }
    function A() {
      var e3;
      return (e3 = x2.current) == null ? void 0 : e3.querySelector(`${Z}[aria-selected="true"]`);
    }
    function _() {
      var e3;
      return Array.from(((e3 = x2.current) == null ? void 0 : e3.querySelectorAll(le)) || []);
    }
    function J2(e3) {
      let i = _()[e3];
      i && h2.setState("value", i.getAttribute(I));
    }
    function X2(e3) {
      var g2;
      let s2 = A(), i = _(), a2 = i.findIndex((S) => S === s2), m2 = i[a2 + e3];
      (g2 = p2.current) != null && g2.loop && (m2 = a2 + e3 < 0 ? i[i.length - 1] : a2 + e3 === i.length ? i[0] : i[a2 + e3]), m2 && h2.setState("value", m2.getAttribute(I));
    }
    function oe(e3) {
      let s2 = A(), i = s2 == null ? void 0 : s2.closest(N), a2;
      for (; i && !a2; ) i = e3 > 0 ? Ie(i, N) : Me(i, N), a2 = i == null ? void 0 : i.querySelector(le);
      a2 ? h2.setState("value", a2.getAttribute(I)) : X2(e3);
    }
    let ie = () => J2(_().length - 1), ae = (e3) => {
      e3.preventDefault(), e3.metaKey ? ie() : e3.altKey ? oe(1) : X2(1);
    }, se = (e3) => {
      e3.preventDefault(), e3.metaKey ? J2(0) : e3.altKey ? oe(-1) : X2(-1);
    };
    return reactExports.createElement(Primitive.div, {
      ref: o,
      tabIndex: -1,
      ...O,
      "cmdk-root": "",
      onKeyDown: (e3) => {
        var s2;
        if ((s2 = O.onKeyDown) == null || s2.call(O, e3), !e3.defaultPrevented) switch (e3.key) {
          case "n":
          case "j": {
            $2 && e3.ctrlKey && ae(e3);
            break;
          }
          case "ArrowDown": {
            ae(e3);
            break;
          }
          case "p":
          case "k": {
            $2 && e3.ctrlKey && se(e3);
            break;
          }
          case "ArrowUp": {
            se(e3);
            break;
          }
          case "Home": {
            e3.preventDefault(), J2(0);
            break;
          }
          case "End": {
            e3.preventDefault(), ie();
            break;
          }
          case "Enter":
            if (!e3.nativeEvent.isComposing && e3.keyCode !== 229) {
              e3.preventDefault();
              let i = A();
              if (i) {
                let a2 = new Event(Y);
                i.dispatchEvent(a2);
              }
            }
        }
      }
    }, reactExports.createElement("label", {
      "cmdk-label": "",
      htmlFor: q2.inputId,
      id: q2.labelId,
      style: Le
    }, v2), j(r, (e3) => reactExports.createElement(de.Provider, {
      value: h2
    }, reactExports.createElement(ue.Provider, {
      value: q2
    }, e3))));
  }), ye = reactExports.forwardRef((r, o) => {
    var F, x2;
    let t2 = useId(), u2 = reactExports.useRef(null), c2 = reactExports.useContext(fe), d2 = K(), f2 = pe(r), p2 = (x2 = (F = f2.current) == null ? void 0 : F.forceMount) != null ? x2 : c2 == null ? void 0 : c2.forceMount;
    M(() => {
      if (!p2) return d2.item(t2, c2 == null ? void 0 : c2.id);
    }, [
      p2
    ]);
    let v2 = ve(t2, u2, [
      r.value,
      r.children,
      u2
    ], r.keywords), b2 = ee(), l2 = T((R) => R.value && R.value === v2.current), y2 = T((R) => p2 || d2.filter() === false ? true : R.search ? R.filtered.items.get(t2) > 0 : true);
    reactExports.useEffect(() => {
      let R = u2.current;
      if (!(!R || r.disabled)) return R.addEventListener(Y, E), () => R.removeEventListener(Y, E);
    }, [
      y2,
      r.onSelect,
      r.disabled
    ]);
    function E() {
      var R, h2;
      C(), (h2 = (R = f2.current).onSelect) == null || h2.call(R, v2.current);
    }
    function C() {
      b2.setState("value", v2.current, true);
    }
    if (!y2) return null;
    let { disabled: H2, value: ge, onSelect: $2, forceMount: O, keywords: te, ...B2 } = r;
    return reactExports.createElement(Primitive.div, {
      ref: G([
        u2,
        o
      ]),
      ...B2,
      id: t2,
      "cmdk-item": "",
      role: "option",
      "aria-disabled": !!H2,
      "aria-selected": !!l2,
      "data-disabled": !!H2,
      "data-selected": !!l2,
      onPointerMove: H2 || d2.getDisablePointerSelection() ? void 0 : C,
      onClick: H2 ? void 0 : E
    }, r.children);
  }), Se = reactExports.forwardRef((r, o) => {
    let { heading: t2, children: u2, forceMount: c2, ...d2 } = r, f2 = useId(), p2 = reactExports.useRef(null), v2 = reactExports.useRef(null), b2 = useId(), l2 = K(), y2 = T((C) => c2 || l2.filter() === false ? true : C.search ? C.filtered.groups.has(f2) : true);
    M(() => l2.group(f2), []), ve(f2, p2, [
      r.value,
      r.heading,
      v2
    ]);
    let E = reactExports.useMemo(() => ({
      id: f2,
      forceMount: c2
    }), [
      c2
    ]);
    return reactExports.createElement(Primitive.div, {
      ref: G([
        p2,
        o
      ]),
      ...d2,
      "cmdk-group": "",
      role: "presentation",
      hidden: y2 ? void 0 : true
    }, t2 && reactExports.createElement("div", {
      ref: v2,
      "cmdk-group-heading": "",
      "aria-hidden": true,
      id: b2
    }, t2), j(r, (C) => reactExports.createElement("div", {
      "cmdk-group-items": "",
      role: "group",
      "aria-labelledby": t2 ? b2 : void 0
    }, reactExports.createElement(fe.Provider, {
      value: E
    }, C))));
  }), Ee = reactExports.forwardRef((r, o) => {
    let { alwaysRender: t2, ...u2 } = r, c2 = reactExports.useRef(null), d2 = T((f2) => !f2.search);
    return !t2 && !d2 ? null : reactExports.createElement(Primitive.div, {
      ref: G([
        c2,
        o
      ]),
      ...u2,
      "cmdk-separator": "",
      role: "separator"
    });
  }), Ce = reactExports.forwardRef((r, o) => {
    let { onValueChange: t2, ...u2 } = r, c2 = r.value != null, d2 = ee(), f2 = T((l2) => l2.search), p2 = T((l2) => l2.value), v2 = K(), b2 = reactExports.useMemo(() => {
      var y2;
      let l2 = (y2 = v2.listInnerRef.current) == null ? void 0 : y2.querySelector(`${Z}[${I}="${encodeURIComponent(p2)}"]`);
      return l2 == null ? void 0 : l2.getAttribute("id");
    }, []);
    return reactExports.useEffect(() => {
      r.value != null && d2.setState("search", r.value);
    }, [
      r.value
    ]), reactExports.createElement(Primitive.input, {
      ref: o,
      ...u2,
      "cmdk-input": "",
      autoComplete: "off",
      autoCorrect: "off",
      spellCheck: false,
      "aria-autocomplete": "list",
      role: "combobox",
      "aria-expanded": true,
      "aria-controls": v2.listId,
      "aria-labelledby": v2.labelId,
      "aria-activedescendant": b2,
      id: v2.inputId,
      type: "text",
      value: c2 ? r.value : f2,
      onChange: (l2) => {
        c2 || d2.setState("search", l2.target.value), t2 == null || t2(l2.target.value);
      }
    });
  }), xe = reactExports.forwardRef((r, o) => {
    let { children: t2, label: u2 = "Suggestions", ...c2 } = r, d2 = reactExports.useRef(null), f2 = reactExports.useRef(null), p2 = K();
    return reactExports.useEffect(() => {
      if (f2.current && d2.current) {
        let v2 = f2.current, b2 = d2.current, l2, y2 = new ResizeObserver(() => {
          l2 = requestAnimationFrame(() => {
            let E = v2.offsetHeight;
            b2.style.setProperty("--cmdk-list-height", E.toFixed(1) + "px");
          });
        });
        return y2.observe(v2), () => {
          cancelAnimationFrame(l2), y2.unobserve(v2);
        };
      }
    }, []), reactExports.createElement(Primitive.div, {
      ref: G([
        d2,
        o
      ]),
      ...c2,
      "cmdk-list": "",
      role: "listbox",
      "aria-label": u2,
      id: p2.listId
    }, j(r, (v2) => reactExports.createElement("div", {
      ref: G([
        f2,
        p2.listInnerRef
      ]),
      "cmdk-list-sizer": ""
    }, v2)));
  }), Pe = reactExports.forwardRef((r, o) => {
    let { open: t2, onOpenChange: u2, overlayClassName: c2, contentClassName: d2, container: f2, ...p2 } = r;
    return reactExports.createElement(Root$3, {
      open: t2,
      onOpenChange: u2
    }, reactExports.createElement(Portal$4, {
      container: f2
    }, reactExports.createElement(Overlay, {
      "cmdk-overlay": "",
      className: c2
    }), reactExports.createElement(Content$2, {
      "aria-label": r.label,
      "cmdk-dialog": "",
      className: d2
    }, reactExports.createElement(me, {
      ref: o,
      ...p2
    }))));
  }), we = reactExports.forwardRef((r, o) => T((u2) => u2.filtered.count === 0) ? reactExports.createElement(Primitive.div, {
    ref: o,
    ...r,
    "cmdk-empty": "",
    role: "presentation"
  }) : null), De = reactExports.forwardRef((r, o) => {
    let { progress: t2, children: u2, label: c2 = "Loading...", ...d2 } = r;
    return reactExports.createElement(Primitive.div, {
      ref: o,
      ...d2,
      "cmdk-loading": "",
      role: "progressbar",
      "aria-valuenow": t2,
      "aria-valuemin": 0,
      "aria-valuemax": 100,
      "aria-label": c2
    }, j(r, (f2) => reactExports.createElement("div", {
      "aria-hidden": true
    }, f2)));
  }), Ve = Object.assign(me, {
    List: xe,
    Item: ye,
    Input: Ce,
    Group: Se,
    Separator: Ee,
    Dialog: Pe,
    Empty: we,
    Loading: De
  });
  function Ie(r, o) {
    let t2 = r.nextElementSibling;
    for (; t2; ) {
      if (t2.matches(o)) return t2;
      t2 = t2.nextElementSibling;
    }
  }
  function Me(r, o) {
    let t2 = r.previousElementSibling;
    for (; t2; ) {
      if (t2.matches(o)) return t2;
      t2 = t2.previousElementSibling;
    }
  }
  function pe(r) {
    let o = reactExports.useRef(r);
    return M(() => {
      o.current = r;
    }), o;
  }
  var M = typeof window == "undefined" ? reactExports.useEffect : reactExports.useLayoutEffect;
  function k$2(r) {
    let o = reactExports.useRef();
    return o.current === void 0 && (o.current = r()), o;
  }
  function G(r) {
    return (o) => {
      r.forEach((t2) => {
        typeof t2 == "function" ? t2(o) : t2 != null && (t2.current = o);
      });
    };
  }
  function T(r) {
    let o = ee(), t2 = () => r(o.snapshot());
    return shimExports.useSyncExternalStore(o.subscribe, t2, t2);
  }
  function ve(r, o, t2, u2 = []) {
    let c2 = reactExports.useRef(), d2 = K();
    return M(() => {
      var v2;
      let f2 = (() => {
        var b2;
        for (let l2 of t2) {
          if (typeof l2 == "string") return l2.trim();
          if (typeof l2 == "object" && "current" in l2) return l2.current ? (b2 = l2.current.textContent) == null ? void 0 : b2.trim() : c2.current;
        }
      })(), p2 = u2.map((b2) => b2.trim());
      d2.value(r, f2, p2), (v2 = o.current) == null || v2.setAttribute(I, f2), c2.current = f2;
    }), c2;
  }
  var Te = () => {
    let [r, o] = reactExports.useState(), t2 = k$2(() => /* @__PURE__ */ new Map());
    return M(() => {
      t2.current.forEach((u2) => u2()), t2.current = /* @__PURE__ */ new Map();
    }, [
      r
    ]), (u2, c2) => {
      t2.current.set(u2, c2), o({});
    };
  };
  function ke(r) {
    let o = r.type;
    return typeof o == "function" ? o(r.props) : "render" in o ? o.render(r.props) : r;
  }
  function j({ asChild: r, children: o }, t2) {
    return r && reactExports.isValidElement(o) ? reactExports.cloneElement(ke(o), {
      ref: o.ref
    }, t2(o.props.children)) : t2(o);
  }
  var Le = {
    position: "absolute",
    width: "1px",
    height: "1px",
    padding: "0",
    margin: "-1px",
    overflow: "hidden",
    clip: "rect(0, 0, 0, 0)",
    whiteSpace: "nowrap",
    borderWidth: "0"
  };
  const Command = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Ve, {
    ref,
    className: cn("flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground", className),
    ...props
  }));
  Command.displayName = Ve.displayName;
  const CommandInput = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsxs("div", {
    className: "flex items-center border-b px-3",
    "cmdk-input-wrapper": "",
    children: [
      jsxRuntimeExports.jsx(LazyIcon, {
        name: "search",
        className: "mr-2 h-4 w-4 shrink-0 opacity-50"
      }),
      jsxRuntimeExports.jsx(Ve.Input, {
        ref,
        className: cn("flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50", className),
        ...props
      })
    ]
  }));
  CommandInput.displayName = Ve.Input.displayName;
  const CommandList = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Ve.List, {
    ref,
    className: cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className),
    ...props
  }));
  CommandList.displayName = Ve.List.displayName;
  const CommandEmpty = reactExports.forwardRef((props, ref) => jsxRuntimeExports.jsx(Ve.Empty, {
    ref,
    className: "py-6 text-center text-sm",
    ...props
  }));
  CommandEmpty.displayName = Ve.Empty.displayName;
  const CommandGroup = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Ve.Group, {
    ref,
    className: cn("overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground", className),
    ...props
  }));
  CommandGroup.displayName = Ve.Group.displayName;
  const CommandSeparator = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Ve.Separator, {
    ref,
    className: cn("-mx-1 h-px bg-border", className),
    ...props
  }));
  CommandSeparator.displayName = Ve.Separator.displayName;
  const CommandItem = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Ve.Item, {
    ref,
    className: cn("relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0", className),
    ...props
  }));
  CommandItem.displayName = Ve.Item.displayName;
  clamp = function(value, [min2, max2]) {
    return Math.min(max2, Math.max(min2, value));
  };
  function usePrevious(value) {
    const ref = reactExports.useRef({
      value,
      previous: value
    });
    return reactExports.useMemo(() => {
      if (ref.current.value !== value) {
        ref.current.previous = ref.current.value;
        ref.current.value = value;
      }
      return ref.current.previous;
    }, [
      value
    ]);
  }
  var OPEN_KEYS = [
    " ",
    "Enter",
    "ArrowUp",
    "ArrowDown"
  ];
  var SELECTION_KEYS = [
    " ",
    "Enter"
  ];
  var SELECT_NAME = "Select";
  var [Collection$1, useCollection$1, createCollectionScope$1] = createCollection(SELECT_NAME);
  var [createSelectContext, createSelectScope] = createContextScope$1(SELECT_NAME, [
    createCollectionScope$1,
    createPopperScope
  ]);
  var usePopperScope = createPopperScope();
  var [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);
  var [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);
  var Select$1 = (props) => {
    const { __scopeSelect, children, open: openProp, defaultOpen, onOpenChange, value: valueProp, defaultValue, onValueChange, dir, name, autoComplete, disabled, required, form } = props;
    const popperScope = usePopperScope(__scopeSelect);
    const [trigger, setTrigger] = reactExports.useState(null);
    const [valueNode, setValueNode] = reactExports.useState(null);
    const [valueNodeHasChildren, setValueNodeHasChildren] = reactExports.useState(false);
    const direction = useDirection(dir);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChange
    });
    const triggerPointerDownPosRef = reactExports.useRef(null);
    const isFormControl = trigger ? form || !!trigger.closest("form") : true;
    const [nativeOptionsSet, setNativeOptionsSet] = reactExports.useState(/* @__PURE__ */ new Set());
    const nativeSelectKey = Array.from(nativeOptionsSet).map((option) => option.props.value).join(";");
    return jsxRuntimeExports.jsx(Root2$5, {
      ...popperScope,
      children: jsxRuntimeExports.jsxs(SelectProvider, {
        required,
        scope: __scopeSelect,
        trigger,
        onTriggerChange: setTrigger,
        valueNode,
        onValueNodeChange: setValueNode,
        valueNodeHasChildren,
        onValueNodeHasChildrenChange: setValueNodeHasChildren,
        contentId: useId(),
        value,
        onValueChange: setValue,
        open,
        onOpenChange: setOpen,
        dir: direction,
        triggerPointerDownPosRef,
        disabled,
        children: [
          jsxRuntimeExports.jsx(Collection$1.Provider, {
            scope: __scopeSelect,
            children: jsxRuntimeExports.jsx(SelectNativeOptionsProvider, {
              scope: props.__scopeSelect,
              onNativeOptionAdd: reactExports.useCallback((option) => {
                setNativeOptionsSet((prev) => new Set(prev).add(option));
              }, []),
              onNativeOptionRemove: reactExports.useCallback((option) => {
                setNativeOptionsSet((prev) => {
                  const optionsSet = new Set(prev);
                  optionsSet.delete(option);
                  return optionsSet;
                });
              }, []),
              children
            })
          }),
          isFormControl ? jsxRuntimeExports.jsxs(BubbleSelect, {
            "aria-hidden": true,
            required,
            tabIndex: -1,
            name,
            autoComplete,
            value,
            onChange: (event) => setValue(event.target.value),
            disabled,
            form,
            children: [
              value === void 0 ? jsxRuntimeExports.jsx("option", {
                value: ""
              }) : null,
              Array.from(nativeOptionsSet)
            ]
          }, nativeSelectKey) : null
        ]
      })
    });
  };
  Select$1.displayName = SELECT_NAME;
  var TRIGGER_NAME$2 = "SelectTrigger";
  var SelectTrigger$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, disabled = false, ...triggerProps } = props;
    const popperScope = usePopperScope(__scopeSelect);
    const context = useSelectContext(TRIGGER_NAME$2, __scopeSelect);
    const isDisabled = context.disabled || disabled;
    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);
    const getItems = useCollection$1(__scopeSelect);
    const pointerTypeRef = reactExports.useRef("touch");
    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.value === context.value);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem !== void 0) {
        context.onValueChange(nextItem.value);
      }
    });
    const handleOpen = (pointerEvent) => {
      if (!isDisabled) {
        context.onOpenChange(true);
        resetTypeahead();
      }
      if (pointerEvent) {
        context.triggerPointerDownPosRef.current = {
          x: Math.round(pointerEvent.pageX),
          y: Math.round(pointerEvent.pageY)
        };
      }
    };
    return jsxRuntimeExports.jsx(Anchor, {
      asChild: true,
      ...popperScope,
      children: jsxRuntimeExports.jsx(Primitive.button, {
        type: "button",
        role: "combobox",
        "aria-controls": context.contentId,
        "aria-expanded": context.open,
        "aria-required": context.required,
        "aria-autocomplete": "none",
        dir: context.dir,
        "data-state": context.open ? "open" : "closed",
        disabled: isDisabled,
        "data-disabled": isDisabled ? "" : void 0,
        "data-placeholder": shouldShowPlaceholder(context.value) ? "" : void 0,
        ...triggerProps,
        ref: composedRefs,
        onClick: composeEventHandlers(triggerProps.onClick, (event) => {
          event.currentTarget.focus();
          if (pointerTypeRef.current !== "mouse") {
            handleOpen(event);
          }
        }),
        onPointerDown: composeEventHandlers(triggerProps.onPointerDown, (event) => {
          pointerTypeRef.current = event.pointerType;
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId)) {
            target.releasePointerCapture(event.pointerId);
          }
          if (event.button === 0 && event.ctrlKey === false && event.pointerType === "mouse") {
            handleOpen(event);
            event.preventDefault();
          }
        }),
        onKeyDown: composeEventHandlers(triggerProps.onKeyDown, (event) => {
          const isTypingAhead = searchRef.current !== "";
          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
          if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);
          if (isTypingAhead && event.key === " ") return;
          if (OPEN_KEYS.includes(event.key)) {
            handleOpen();
            event.preventDefault();
          }
        })
      })
    });
  });
  SelectTrigger$1.displayName = TRIGGER_NAME$2;
  var VALUE_NAME = "SelectValue";
  var SelectValue$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, className, style, children, placeholder = "", ...valueProps } = props;
    const context = useSelectContext(VALUE_NAME, __scopeSelect);
    const { onValueNodeHasChildrenChange } = context;
    const hasChildren = children !== void 0;
    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);
    useLayoutEffect2(() => {
      onValueNodeHasChildrenChange(hasChildren);
    }, [
      onValueNodeHasChildrenChange,
      hasChildren
    ]);
    return jsxRuntimeExports.jsx(Primitive.span, {
      ...valueProps,
      ref: composedRefs,
      style: {
        pointerEvents: "none"
      },
      children: shouldShowPlaceholder(context.value) ? jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: placeholder
      }) : children
    });
  });
  SelectValue$1.displayName = VALUE_NAME;
  var ICON_NAME = "SelectIcon";
  var SelectIcon = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, children, ...iconProps } = props;
    return jsxRuntimeExports.jsx(Primitive.span, {
      "aria-hidden": true,
      ...iconProps,
      ref: forwardedRef,
      children: children || "\u25BC"
    });
  });
  SelectIcon.displayName = ICON_NAME;
  var PORTAL_NAME = "SelectPortal";
  var SelectPortal = (props) => {
    return jsxRuntimeExports.jsx(Portal$3, {
      asChild: true,
      ...props
    });
  };
  SelectPortal.displayName = PORTAL_NAME;
  var CONTENT_NAME$2 = "SelectContent";
  var SelectContent$1 = reactExports.forwardRef((props, forwardedRef) => {
    const context = useSelectContext(CONTENT_NAME$2, props.__scopeSelect);
    const [fragment, setFragment] = reactExports.useState();
    useLayoutEffect2(() => {
      setFragment(new DocumentFragment());
    }, []);
    if (!context.open) {
      const frag = fragment;
      return frag ? reactDomExports.createPortal(jsxRuntimeExports.jsx(SelectContentProvider, {
        scope: props.__scopeSelect,
        children: jsxRuntimeExports.jsx(Collection$1.Slot, {
          scope: props.__scopeSelect,
          children: jsxRuntimeExports.jsx("div", {
            children: props.children
          })
        })
      }), frag) : null;
    }
    return jsxRuntimeExports.jsx(SelectContentImpl, {
      ...props,
      ref: forwardedRef
    });
  });
  SelectContent$1.displayName = CONTENT_NAME$2;
  var CONTENT_MARGIN = 10;
  var [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME$2);
  var CONTENT_IMPL_NAME = "SelectContentImpl";
  var SelectContentImpl = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, position = "item-aligned", onCloseAutoFocus, onEscapeKeyDown, onPointerDownOutside, side, sideOffset, align, alignOffset, arrowPadding, collisionBoundary, collisionPadding, sticky, hideWhenDetached, avoidCollisions, ...contentProps } = props;
    const context = useSelectContext(CONTENT_NAME$2, __scopeSelect);
    const [content, setContent] = reactExports.useState(null);
    const [viewport, setViewport] = reactExports.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
    const [selectedItem, setSelectedItem] = reactExports.useState(null);
    const [selectedItemText, setSelectedItemText] = reactExports.useState(null);
    const getItems = useCollection$1(__scopeSelect);
    const [isPositioned, setIsPositioned] = reactExports.useState(false);
    const firstValidItemFoundRef = reactExports.useRef(false);
    reactExports.useEffect(() => {
      if (content) return hideOthers(content);
    }, [
      content
    ]);
    useFocusGuards();
    const focusFirst = reactExports.useCallback((candidates) => {
      const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);
      const [lastItem] = restItems.slice(-1);
      const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
      for (const candidate of candidates) {
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
        candidate == null ? void 0 : candidate.scrollIntoView({
          block: "nearest"
        });
        if (candidate === firstItem && viewport) viewport.scrollTop = 0;
        if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;
        candidate == null ? void 0 : candidate.focus();
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
      }
    }, [
      getItems,
      viewport
    ]);
    const focusSelectedItem = reactExports.useCallback(() => focusFirst([
      selectedItem,
      content
    ]), [
      focusFirst,
      selectedItem,
      content
    ]);
    reactExports.useEffect(() => {
      if (isPositioned) {
        focusSelectedItem();
      }
    }, [
      isPositioned,
      focusSelectedItem
    ]);
    const { onOpenChange, triggerPointerDownPosRef } = context;
    reactExports.useEffect(() => {
      if (content) {
        let pointerMoveDelta = {
          x: 0,
          y: 0
        };
        const handlePointerMove = (event) => {
          var _a, _b;
          pointerMoveDelta = {
            x: Math.abs(Math.round(event.pageX) - (((_a = triggerPointerDownPosRef.current) == null ? void 0 : _a.x) ?? 0)),
            y: Math.abs(Math.round(event.pageY) - (((_b = triggerPointerDownPosRef.current) == null ? void 0 : _b.y) ?? 0))
          };
        };
        const handlePointerUp = (event) => {
          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {
            event.preventDefault();
          } else {
            if (!content.contains(event.target)) {
              onOpenChange(false);
            }
          }
          document.removeEventListener("pointermove", handlePointerMove);
          triggerPointerDownPosRef.current = null;
        };
        if (triggerPointerDownPosRef.current !== null) {
          document.addEventListener("pointermove", handlePointerMove);
          document.addEventListener("pointerup", handlePointerUp, {
            capture: true,
            once: true
          });
        }
        return () => {
          document.removeEventListener("pointermove", handlePointerMove);
          document.removeEventListener("pointerup", handlePointerUp, {
            capture: true
          });
        };
      }
    }, [
      content,
      onOpenChange,
      triggerPointerDownPosRef
    ]);
    reactExports.useEffect(() => {
      const close = () => onOpenChange(false);
      window.addEventListener("blur", close);
      window.addEventListener("resize", close);
      return () => {
        window.removeEventListener("blur", close);
        window.removeEventListener("resize", close);
      };
    }, [
      onOpenChange
    ]);
    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem) {
        setTimeout(() => nextItem.ref.current.focus());
      }
    });
    const itemRefCallback = reactExports.useCallback((node, value, disabled) => {
      const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
      const isSelectedItem = context.value !== void 0 && context.value === value;
      if (isSelectedItem || isFirstValidItem) {
        setSelectedItem(node);
        if (isFirstValidItem) firstValidItemFoundRef.current = true;
      }
    }, [
      context.value
    ]);
    const handleItemLeave = reactExports.useCallback(() => content == null ? void 0 : content.focus(), [
      content
    ]);
    const itemTextRefCallback = reactExports.useCallback((node, value, disabled) => {
      const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
      const isSelectedItem = context.value !== void 0 && context.value === value;
      if (isSelectedItem || isFirstValidItem) {
        setSelectedItemText(node);
      }
    }, [
      context.value
    ]);
    const SelectPosition = position === "popper" ? SelectPopperPosition : SelectItemAlignedPosition;
    const popperContentProps = SelectPosition === SelectPopperPosition ? {
      side,
      sideOffset,
      align,
      alignOffset,
      arrowPadding,
      collisionBoundary,
      collisionPadding,
      sticky,
      hideWhenDetached,
      avoidCollisions
    } : {};
    return jsxRuntimeExports.jsx(SelectContentProvider, {
      scope: __scopeSelect,
      content,
      viewport,
      onViewportChange: setViewport,
      itemRefCallback,
      selectedItem,
      onItemLeave: handleItemLeave,
      itemTextRefCallback,
      focusSelectedItem,
      selectedItemText,
      position,
      isPositioned,
      searchRef,
      children: jsxRuntimeExports.jsx(ReactRemoveScroll, {
        as: Slot,
        allowPinchZoom: true,
        children: jsxRuntimeExports.jsx(FocusScope, {
          asChild: true,
          trapped: context.open,
          onMountAutoFocus: (event) => {
            event.preventDefault();
          },
          onUnmountAutoFocus: composeEventHandlers(onCloseAutoFocus, (event) => {
            var _a;
            (_a = context.trigger) == null ? void 0 : _a.focus({
              preventScroll: true
            });
            event.preventDefault();
          }),
          children: jsxRuntimeExports.jsx(DismissableLayer, {
            asChild: true,
            disableOutsidePointerEvents: true,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside: (event) => event.preventDefault(),
            onDismiss: () => context.onOpenChange(false),
            children: jsxRuntimeExports.jsx(SelectPosition, {
              role: "listbox",
              id: context.contentId,
              "data-state": context.open ? "open" : "closed",
              dir: context.dir,
              onContextMenu: (event) => event.preventDefault(),
              ...contentProps,
              ...popperContentProps,
              onPlaced: () => setIsPositioned(true),
              ref: composedRefs,
              style: {
                display: "flex",
                flexDirection: "column",
                outline: "none",
                ...contentProps.style
              },
              onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {
                const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                if (event.key === "Tab") event.preventDefault();
                if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);
                if ([
                  "ArrowUp",
                  "ArrowDown",
                  "Home",
                  "End"
                ].includes(event.key)) {
                  const items = getItems().filter((item) => !item.disabled);
                  let candidateNodes = items.map((item) => item.ref.current);
                  if ([
                    "ArrowUp",
                    "End"
                  ].includes(event.key)) {
                    candidateNodes = candidateNodes.slice().reverse();
                  }
                  if ([
                    "ArrowUp",
                    "ArrowDown"
                  ].includes(event.key)) {
                    const currentElement = event.target;
                    const currentIndex = candidateNodes.indexOf(currentElement);
                    candidateNodes = candidateNodes.slice(currentIndex + 1);
                  }
                  setTimeout(() => focusFirst(candidateNodes));
                  event.preventDefault();
                }
              })
            })
          })
        })
      })
    });
  });
  SelectContentImpl.displayName = CONTENT_IMPL_NAME;
  var ITEM_ALIGNED_POSITION_NAME = "SelectItemAlignedPosition";
  var SelectItemAlignedPosition = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, onPlaced, ...popperProps } = props;
    const context = useSelectContext(CONTENT_NAME$2, __scopeSelect);
    const contentContext = useSelectContentContext(CONTENT_NAME$2, __scopeSelect);
    const [contentWrapper, setContentWrapper] = reactExports.useState(null);
    const [content, setContent] = reactExports.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
    const getItems = useCollection$1(__scopeSelect);
    const shouldExpandOnScrollRef = reactExports.useRef(false);
    const shouldRepositionRef = reactExports.useRef(true);
    const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;
    const position = reactExports.useCallback(() => {
      if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {
        const triggerRect = context.trigger.getBoundingClientRect();
        const contentRect = content.getBoundingClientRect();
        const valueNodeRect = context.valueNode.getBoundingClientRect();
        const itemTextRect = selectedItemText.getBoundingClientRect();
        if (context.dir !== "rtl") {
          const itemTextOffset = itemTextRect.left - contentRect.left;
          const left = valueNodeRect.left - itemTextOffset;
          const leftDelta = triggerRect.left - left;
          const minContentWidth = triggerRect.width + leftDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const rightEdge = window.innerWidth - CONTENT_MARGIN;
          const clampedLeft = clamp(left, [
            CONTENT_MARGIN,
            Math.max(CONTENT_MARGIN, rightEdge - contentWidth)
          ]);
          contentWrapper.style.minWidth = minContentWidth + "px";
          contentWrapper.style.left = clampedLeft + "px";
        } else {
          const itemTextOffset = contentRect.right - itemTextRect.right;
          const right = window.innerWidth - valueNodeRect.right - itemTextOffset;
          const rightDelta = window.innerWidth - triggerRect.right - right;
          const minContentWidth = triggerRect.width + rightDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const leftEdge = window.innerWidth - CONTENT_MARGIN;
          const clampedRight = clamp(right, [
            CONTENT_MARGIN,
            Math.max(CONTENT_MARGIN, leftEdge - contentWidth)
          ]);
          contentWrapper.style.minWidth = minContentWidth + "px";
          contentWrapper.style.right = clampedRight + "px";
        }
        const items = getItems();
        const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
        const itemsHeight = viewport.scrollHeight;
        const contentStyles = window.getComputedStyle(content);
        const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);
        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);
        const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);
        const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);
        const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;
        const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);
        const viewportStyles = window.getComputedStyle(viewport);
        const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);
        const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);
        const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;
        const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;
        const selectedItemHalfHeight = selectedItem.offsetHeight / 2;
        const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;
        const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;
        const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;
        const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;
        if (willAlignWithoutTopOverflow) {
          const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;
          contentWrapper.style.bottom = "0px";
          const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;
          const clampedTriggerMiddleToBottomEdge = Math.max(triggerMiddleToBottomEdge, selectedItemHalfHeight + (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth);
          const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;
          contentWrapper.style.height = height + "px";
        } else {
          const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;
          contentWrapper.style.top = "0px";
          const clampedTopEdgeToTriggerMiddle = Math.max(topEdgeToTriggerMiddle, contentBorderTopWidth + viewport.offsetTop + (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight);
          const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;
          contentWrapper.style.height = height + "px";
          viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;
        }
        contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;
        contentWrapper.style.minHeight = minContentHeight + "px";
        contentWrapper.style.maxHeight = availableHeight + "px";
        onPlaced == null ? void 0 : onPlaced();
        requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);
      }
    }, [
      getItems,
      context.trigger,
      context.valueNode,
      contentWrapper,
      content,
      viewport,
      selectedItem,
      selectedItemText,
      context.dir,
      onPlaced
    ]);
    useLayoutEffect2(() => position(), [
      position
    ]);
    const [contentZIndex, setContentZIndex] = reactExports.useState();
    useLayoutEffect2(() => {
      if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [
      content
    ]);
    const handleScrollButtonChange = reactExports.useCallback((node) => {
      if (node && shouldRepositionRef.current === true) {
        position();
        focusSelectedItem == null ? void 0 : focusSelectedItem();
        shouldRepositionRef.current = false;
      }
    }, [
      position,
      focusSelectedItem
    ]);
    return jsxRuntimeExports.jsx(SelectViewportProvider, {
      scope: __scopeSelect,
      contentWrapper,
      shouldExpandOnScrollRef,
      onScrollButtonChange: handleScrollButtonChange,
      children: jsxRuntimeExports.jsx("div", {
        ref: setContentWrapper,
        style: {
          display: "flex",
          flexDirection: "column",
          position: "fixed",
          zIndex: contentZIndex
        },
        children: jsxRuntimeExports.jsx(Primitive.div, {
          ...popperProps,
          ref: composedRefs,
          style: {
            boxSizing: "border-box",
            maxHeight: "100%",
            ...popperProps.style
          }
        })
      })
    });
  });
  SelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;
  var POPPER_POSITION_NAME = "SelectPopperPosition";
  var SelectPopperPosition = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, align = "start", collisionPadding = CONTENT_MARGIN, ...popperProps } = props;
    const popperScope = usePopperScope(__scopeSelect);
    return jsxRuntimeExports.jsx(Content$1, {
      ...popperScope,
      ...popperProps,
      ref: forwardedRef,
      align,
      collisionPadding,
      style: {
        boxSizing: "border-box",
        ...popperProps.style,
        ...{
          "--radix-select-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-select-content-available-width": "var(--radix-popper-available-width)",
          "--radix-select-content-available-height": "var(--radix-popper-available-height)",
          "--radix-select-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-select-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    });
  });
  SelectPopperPosition.displayName = POPPER_POSITION_NAME;
  var [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME$2, {});
  var VIEWPORT_NAME = "SelectViewport";
  var SelectViewport = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, nonce, ...viewportProps } = props;
    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);
    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);
    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);
    const prevScrollTopRef = reactExports.useRef(0);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsx("style", {
          dangerouslySetInnerHTML: {
            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`
          },
          nonce
        }),
        jsxRuntimeExports.jsx(Collection$1.Slot, {
          scope: __scopeSelect,
          children: jsxRuntimeExports.jsx(Primitive.div, {
            "data-radix-select-viewport": "",
            role: "presentation",
            ...viewportProps,
            ref: composedRefs,
            style: {
              position: "relative",
              flex: 1,
              overflow: "hidden auto",
              ...viewportProps.style
            },
            onScroll: composeEventHandlers(viewportProps.onScroll, (event) => {
              const viewport = event.currentTarget;
              const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;
              if ((shouldExpandOnScrollRef == null ? void 0 : shouldExpandOnScrollRef.current) && contentWrapper) {
                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);
                if (scrolledBy > 0) {
                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);
                  const cssHeight = parseFloat(contentWrapper.style.height);
                  const prevHeight = Math.max(cssMinHeight, cssHeight);
                  if (prevHeight < availableHeight) {
                    const nextHeight = prevHeight + scrolledBy;
                    const clampedNextHeight = Math.min(availableHeight, nextHeight);
                    const heightDiff = nextHeight - clampedNextHeight;
                    contentWrapper.style.height = clampedNextHeight + "px";
                    if (contentWrapper.style.bottom === "0px") {
                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;
                      contentWrapper.style.justifyContent = "flex-end";
                    }
                  }
                }
              }
              prevScrollTopRef.current = viewport.scrollTop;
            })
          })
        })
      ]
    });
  });
  SelectViewport.displayName = VIEWPORT_NAME;
  var GROUP_NAME = "SelectGroup";
  var [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);
  var SelectGroup = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, ...groupProps } = props;
    const groupId = useId();
    return jsxRuntimeExports.jsx(SelectGroupContextProvider, {
      scope: __scopeSelect,
      id: groupId,
      children: jsxRuntimeExports.jsx(Primitive.div, {
        role: "group",
        "aria-labelledby": groupId,
        ...groupProps,
        ref: forwardedRef
      })
    });
  });
  SelectGroup.displayName = GROUP_NAME;
  var LABEL_NAME = "SelectLabel";
  var SelectLabel$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, ...labelProps } = props;
    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
    return jsxRuntimeExports.jsx(Primitive.div, {
      id: groupContext.id,
      ...labelProps,
      ref: forwardedRef
    });
  });
  SelectLabel$1.displayName = LABEL_NAME;
  var ITEM_NAME$2 = "SelectItem";
  var [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME$2);
  var SelectItem$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, value, disabled = false, textValue: textValueProp, ...itemProps } = props;
    const context = useSelectContext(ITEM_NAME$2, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_NAME$2, __scopeSelect);
    const isSelected = context.value === value;
    const [textValue, setTextValue] = reactExports.useState(textValueProp ?? "");
    const [isFocused, setIsFocused] = reactExports.useState(false);
    const composedRefs = useComposedRefs(forwardedRef, (node) => {
      var _a;
      return (_a = contentContext.itemRefCallback) == null ? void 0 : _a.call(contentContext, node, value, disabled);
    });
    const textId = useId();
    const pointerTypeRef = reactExports.useRef("touch");
    const handleSelect = () => {
      if (!disabled) {
        context.onValueChange(value);
        context.onOpenChange(false);
      }
    };
    if (value === "") {
      throw new Error("A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.");
    }
    return jsxRuntimeExports.jsx(SelectItemContextProvider, {
      scope: __scopeSelect,
      value,
      disabled,
      textId,
      isSelected,
      onItemTextChange: reactExports.useCallback((node) => {
        setTextValue((prevTextValue) => prevTextValue || ((node == null ? void 0 : node.textContent) ?? "").trim());
      }, []),
      children: jsxRuntimeExports.jsx(Collection$1.ItemSlot, {
        scope: __scopeSelect,
        value,
        disabled,
        textValue,
        children: jsxRuntimeExports.jsx(Primitive.div, {
          role: "option",
          "aria-labelledby": textId,
          "data-highlighted": isFocused ? "" : void 0,
          "aria-selected": isSelected && isFocused,
          "data-state": isSelected ? "checked" : "unchecked",
          "aria-disabled": disabled || void 0,
          "data-disabled": disabled ? "" : void 0,
          tabIndex: disabled ? void 0 : -1,
          ...itemProps,
          ref: composedRefs,
          onFocus: composeEventHandlers(itemProps.onFocus, () => setIsFocused(true)),
          onBlur: composeEventHandlers(itemProps.onBlur, () => setIsFocused(false)),
          onClick: composeEventHandlers(itemProps.onClick, () => {
            if (pointerTypeRef.current !== "mouse") handleSelect();
          }),
          onPointerUp: composeEventHandlers(itemProps.onPointerUp, () => {
            if (pointerTypeRef.current === "mouse") handleSelect();
          }),
          onPointerDown: composeEventHandlers(itemProps.onPointerDown, (event) => {
            pointerTypeRef.current = event.pointerType;
          }),
          onPointerMove: composeEventHandlers(itemProps.onPointerMove, (event) => {
            var _a;
            pointerTypeRef.current = event.pointerType;
            if (disabled) {
              (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
            } else if (pointerTypeRef.current === "mouse") {
              event.currentTarget.focus({
                preventScroll: true
              });
            }
          }),
          onPointerLeave: composeEventHandlers(itemProps.onPointerLeave, (event) => {
            var _a;
            if (event.currentTarget === document.activeElement) {
              (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
            }
          }),
          onKeyDown: composeEventHandlers(itemProps.onKeyDown, (event) => {
            var _a;
            const isTypingAhead = ((_a = contentContext.searchRef) == null ? void 0 : _a.current) !== "";
            if (isTypingAhead && event.key === " ") return;
            if (SELECTION_KEYS.includes(event.key)) handleSelect();
            if (event.key === " ") event.preventDefault();
          })
        })
      })
    });
  });
  SelectItem$1.displayName = ITEM_NAME$2;
  var ITEM_TEXT_NAME = "SelectItemText";
  var SelectItemText = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, className, style, ...itemTextProps } = props;
    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);
    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);
    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);
    const [itemTextNode, setItemTextNode] = reactExports.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setItemTextNode(node), itemContext.onItemTextChange, (node) => {
      var _a;
      return (_a = contentContext.itemTextRefCallback) == null ? void 0 : _a.call(contentContext, node, itemContext.value, itemContext.disabled);
    });
    const textContent = itemTextNode == null ? void 0 : itemTextNode.textContent;
    const nativeOption = reactExports.useMemo(() => jsxRuntimeExports.jsx("option", {
      value: itemContext.value,
      disabled: itemContext.disabled,
      children: textContent
    }, itemContext.value), [
      itemContext.disabled,
      itemContext.value,
      textContent
    ]);
    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;
    useLayoutEffect2(() => {
      onNativeOptionAdd(nativeOption);
      return () => onNativeOptionRemove(nativeOption);
    }, [
      onNativeOptionAdd,
      onNativeOptionRemove,
      nativeOption
    ]);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsx(Primitive.span, {
          id: itemContext.textId,
          ...itemTextProps,
          ref: composedRefs
        }),
        itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? reactDomExports.createPortal(itemTextProps.children, context.valueNode) : null
      ]
    });
  });
  SelectItemText.displayName = ITEM_TEXT_NAME;
  var ITEM_INDICATOR_NAME = "SelectItemIndicator";
  var SelectItemIndicator = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, ...itemIndicatorProps } = props;
    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
    return itemContext.isSelected ? jsxRuntimeExports.jsx(Primitive.span, {
      "aria-hidden": true,
      ...itemIndicatorProps,
      ref: forwardedRef
    }) : null;
  });
  SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
  var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
  var SelectScrollUpButton$1 = reactExports.forwardRef((props, forwardedRef) => {
    const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
    const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
    const [canScrollUp, setCanScrollUp] = reactExports.useState(false);
    const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
    useLayoutEffect2(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        let handleScroll2 = function() {
          const canScrollUp2 = viewport.scrollTop > 0;
          setCanScrollUp(canScrollUp2);
        };
        const viewport = contentContext.viewport;
        handleScroll2();
        viewport.addEventListener("scroll", handleScroll2);
        return () => viewport.removeEventListener("scroll", handleScroll2);
      }
    }, [
      contentContext.viewport,
      contentContext.isPositioned
    ]);
    return canScrollUp ? jsxRuntimeExports.jsx(SelectScrollButtonImpl, {
      ...props,
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem) {
          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;
        }
      }
    }) : null;
  });
  SelectScrollUpButton$1.displayName = SCROLL_UP_BUTTON_NAME;
  var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
  var SelectScrollDownButton$1 = reactExports.forwardRef((props, forwardedRef) => {
    const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
    const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
    const [canScrollDown, setCanScrollDown] = reactExports.useState(false);
    const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
    useLayoutEffect2(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        let handleScroll2 = function() {
          const maxScroll = viewport.scrollHeight - viewport.clientHeight;
          const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;
          setCanScrollDown(canScrollDown2);
        };
        const viewport = contentContext.viewport;
        handleScroll2();
        viewport.addEventListener("scroll", handleScroll2);
        return () => viewport.removeEventListener("scroll", handleScroll2);
      }
    }, [
      contentContext.viewport,
      contentContext.isPositioned
    ]);
    return canScrollDown ? jsxRuntimeExports.jsx(SelectScrollButtonImpl, {
      ...props,
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem) {
          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;
        }
      }
    }) : null;
  });
  SelectScrollDownButton$1.displayName = SCROLL_DOWN_BUTTON_NAME;
  var SelectScrollButtonImpl = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;
    const contentContext = useSelectContentContext("SelectScrollButton", __scopeSelect);
    const autoScrollTimerRef = reactExports.useRef(null);
    const getItems = useCollection$1(__scopeSelect);
    const clearAutoScrollTimer = reactExports.useCallback(() => {
      if (autoScrollTimerRef.current !== null) {
        window.clearInterval(autoScrollTimerRef.current);
        autoScrollTimerRef.current = null;
      }
    }, []);
    reactExports.useEffect(() => {
      return () => clearAutoScrollTimer();
    }, [
      clearAutoScrollTimer
    ]);
    useLayoutEffect2(() => {
      var _a;
      const activeItem = getItems().find((item) => item.ref.current === document.activeElement);
      (_a = activeItem == null ? void 0 : activeItem.ref.current) == null ? void 0 : _a.scrollIntoView({
        block: "nearest"
      });
    }, [
      getItems
    ]);
    return jsxRuntimeExports.jsx(Primitive.div, {
      "aria-hidden": true,
      ...scrollIndicatorProps,
      ref: forwardedRef,
      style: {
        flexShrink: 0,
        ...scrollIndicatorProps.style
      },
      onPointerDown: composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {
        if (autoScrollTimerRef.current === null) {
          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
        }
      }),
      onPointerMove: composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {
        var _a;
        (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
        if (autoScrollTimerRef.current === null) {
          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
        }
      }),
      onPointerLeave: composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {
        clearAutoScrollTimer();
      })
    });
  });
  var SEPARATOR_NAME = "SelectSeparator";
  var SelectSeparator$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, ...separatorProps } = props;
    return jsxRuntimeExports.jsx(Primitive.div, {
      "aria-hidden": true,
      ...separatorProps,
      ref: forwardedRef
    });
  });
  SelectSeparator$1.displayName = SEPARATOR_NAME;
  var ARROW_NAME = "SelectArrow";
  var SelectArrow = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeSelect, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopeSelect);
    const context = useSelectContext(ARROW_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);
    return context.open && contentContext.position === "popper" ? jsxRuntimeExports.jsx(Arrow, {
      ...popperScope,
      ...arrowProps,
      ref: forwardedRef
    }) : null;
  });
  SelectArrow.displayName = ARROW_NAME;
  function shouldShowPlaceholder(value) {
    return value === "" || value === void 0;
  }
  var BubbleSelect = reactExports.forwardRef((props, forwardedRef) => {
    const { value, ...selectProps } = props;
    const ref = reactExports.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const prevValue = usePrevious(value);
    reactExports.useEffect(() => {
      const select = ref.current;
      const selectProto = window.HTMLSelectElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(selectProto, "value");
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("change", {
          bubbles: true
        });
        setValue.call(select, value);
        select.dispatchEvent(event);
      }
    }, [
      prevValue,
      value
    ]);
    return jsxRuntimeExports.jsx(VisuallyHidden, {
      asChild: true,
      children: jsxRuntimeExports.jsx("select", {
        ...selectProps,
        ref: composedRefs,
        defaultValue: value
      })
    });
  });
  BubbleSelect.displayName = "BubbleSelect";
  function useTypeaheadSearch(onSearchChange) {
    const handleSearchChange = useCallbackRef(onSearchChange);
    const searchRef = reactExports.useRef("");
    const timerRef = reactExports.useRef(0);
    const handleTypeaheadSearch = reactExports.useCallback((key) => {
      const search = searchRef.current + key;
      handleSearchChange(search);
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "") timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
      })(search);
    }, [
      handleSearchChange
    ]);
    const resetTypeahead = reactExports.useCallback(() => {
      searchRef.current = "";
      window.clearTimeout(timerRef.current);
    }, []);
    reactExports.useEffect(() => {
      return () => window.clearTimeout(timerRef.current);
    }, []);
    return [
      searchRef,
      handleTypeaheadSearch,
      resetTypeahead
    ];
  }
  function findNextItem(items, search, currentItem) {
    const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
    const normalizedSearch = isRepeated ? search[0] : search;
    const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;
    let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));
    const excludeCurrentItem = normalizedSearch.length === 1;
    if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v2) => v2 !== currentItem);
    const nextItem = wrappedItems.find((item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase()));
    return nextItem !== currentItem ? nextItem : void 0;
  }
  function wrapArray(array2, startIndex) {
    return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
  }
  var Root2$3 = Select$1;
  var Trigger$1 = SelectTrigger$1;
  var Value = SelectValue$1;
  var Icon = SelectIcon;
  var Portal = SelectPortal;
  var Content2$1 = SelectContent$1;
  var Viewport = SelectViewport;
  var Label$1 = SelectLabel$1;
  var Item$1 = SelectItem$1;
  var ItemText = SelectItemText;
  var ItemIndicator = SelectItemIndicator;
  var ScrollUpButton = SelectScrollUpButton$1;
  var ScrollDownButton = SelectScrollDownButton$1;
  var Separator = SelectSeparator$1;
  const Select = Root2$3;
  const SelectValue = Value;
  const SelectTrigger = reactExports.forwardRef(({ className, children, ...props }, ref) => jsxRuntimeExports.jsxs(Trigger$1, {
    ref,
    className: cn("flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1", className),
    ...props,
    children: [
      children,
      jsxRuntimeExports.jsx(Icon, {
        asChild: true,
        children: jsxRuntimeExports.jsx(LazyIcon, {
          name: "chevron-down",
          className: "h-4 w-4 opacity-50"
        })
      })
    ]
  }));
  SelectTrigger.displayName = Trigger$1.displayName;
  const SelectScrollUpButton = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(ScrollUpButton, {
    ref,
    className: cn("flex cursor-default items-center justify-center py-1", className),
    ...props,
    children: jsxRuntimeExports.jsx(LazyIcon, {
      name: "chevron-up",
      className: "h-4 w-4"
    })
  }));
  SelectScrollUpButton.displayName = ScrollUpButton.displayName;
  const SelectScrollDownButton = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(ScrollDownButton, {
    ref,
    className: cn("flex cursor-default items-center justify-center py-1", className),
    ...props,
    children: jsxRuntimeExports.jsx(LazyIcon, {
      name: "chevron-down",
      className: "h-4 w-4"
    })
  }));
  SelectScrollDownButton.displayName = ScrollDownButton.displayName;
  const SelectContent = reactExports.forwardRef(({ className, children, position = "popper", ...props }, ref) => jsxRuntimeExports.jsx(Portal, {
    children: jsxRuntimeExports.jsxs(Content2$1, {
      ref,
      className: cn("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", position === "popper" && "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1", className),
      position,
      ...props,
      children: [
        jsxRuntimeExports.jsx(SelectScrollUpButton, {}),
        jsxRuntimeExports.jsx(Viewport, {
          className: cn("p-1", position === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),
          children
        }),
        jsxRuntimeExports.jsx(SelectScrollDownButton, {})
      ]
    })
  }));
  SelectContent.displayName = Content2$1.displayName;
  const SelectLabel = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Label$1, {
    ref,
    className: cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className),
    ...props
  }));
  SelectLabel.displayName = Label$1.displayName;
  const SelectItem = reactExports.forwardRef(({ className, children, ...props }, ref) => jsxRuntimeExports.jsxs(Item$1, {
    ref,
    className: cn("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className),
    ...props,
    children: [
      jsxRuntimeExports.jsx("span", {
        className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
        children: jsxRuntimeExports.jsx(ItemIndicator, {
          children: jsxRuntimeExports.jsx(LazyIcon, {
            name: "check",
            className: "h-4 w-4"
          })
        })
      }),
      jsxRuntimeExports.jsx(ItemText, {
        children
      })
    ]
  }));
  SelectItem.displayName = Item$1.displayName;
  const SelectSeparator = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Separator, {
    ref,
    className: cn("-mx-1 my-1 h-px bg-muted", className),
    ...props
  }));
  SelectSeparator.displayName = Separator.displayName;
  LoadingButton = reactExports.memo((props) => {
    const { loading, ...rest } = props;
    return jsxRuntimeExports.jsx(Button, {
      ...rest,
      disabled: props.disabled || loading,
      children: loading ? jsxRuntimeExports.jsx(LazyIcon, {
        name: "loader-circle",
        className: "animate-spin"
      }) : props.children
    });
  });
  const SUPPORTED_PROVIDERS = [
    LLMProviderEnum.WebLLM
  ];
  function CreateLLMCard(props) {
    var _a;
    const { id, setDialog } = props;
    const { t: t2 } = useTranslation("components");
    const { toast: toast2 } = useToast();
    const node = useInternalNode(id);
    const [input, setInput] = reactExports.useState("");
    const [open, setOpen] = reactExports.useState(false);
    const [search, setSearch] = reactExports.useState("");
    const [provider, setProvider] = reactExports.useState(LLMProviderEnum.WebLLM);
    const [hasCache, setHasCache] = reactExports.useState(false);
    const [llmsInfo, setLLMsInfo] = reactExports.useState();
    const syncCachedLLMURLs = useLocalLLMState((state) => state.syncCachedLLMURLs);
    const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs);
    const { loading: creatingLLM, createDatabaseLLM } = useCreateDatabaseLLM();
    reactExports.useEffect(() => {
      __vitePreload(() => import("./index-Bh9Jxj4W.js").then(async (m2) => {
        await m2.__tla;
        return m2;
      }), true ? __vite__mapDeps([0,1,2,3,4]) : void 0).then(async ({ functionCallingModelIds, prebuiltAppConfig }) => {
        const modelList2 = prebuiltAppConfig.model_list;
        setLLMsInfo({
          modelList: modelList2,
          functionCallingModelIds
        });
      });
    }, []);
    reactExports.useEffect(() => {
      syncCachedLLMURLs();
    }, [
      syncCachedLLMURLs
    ]);
    const modelList = reactExports.useMemo(() => {
      if (!(llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds) || !(llmsInfo == null ? void 0 : llmsInfo.modelList)) return [];
      const data = !search ? llmsInfo == null ? void 0 : llmsInfo.modelList : llmsInfo == null ? void 0 : llmsInfo.modelList.filter((model) => model.model_id.toLowerCase().includes(search.toLowerCase()));
      return (data || []).sort((pre, next) => {
        const preInCache = cachedLLMURLs.some((item) => item.includes(pre.model_id));
        const nextInCache = cachedLLMURLs.some((item) => item.includes(next.model_id));
        if (preInCache && !nextInCache) {
          return -1;
        }
        if (!preInCache && nextInCache) {
          return 1;
        }
        const preInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(pre.model_id);
        const nextInRecommended = RECOMMENDATION_LOCAL_LLMS.includes(next.model_id);
        if (preInRecommended && !nextInRecommended) {
          return -1;
        }
        if (!preInRecommended && nextInRecommended) {
          return 1;
        }
        const preInFunctionCalling = llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds.includes(pre.model_id);
        const nextInFunctionCalling = llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds.includes(next.model_id);
        if (preInFunctionCalling && !nextInFunctionCalling) {
          return -1;
        }
        if (!preInFunctionCalling && nextInFunctionCalling) {
          return 1;
        }
        if (pre.vram_required_MB && next.vram_required_MB && pre.vram_required_MB !== next.vram_required_MB) {
          return pre.vram_required_MB - next.vram_required_MB;
        }
        return pre.model_id.localeCompare(next.model_id);
      });
    }, [
      llmsInfo == null ? void 0 : llmsInfo.modelList,
      llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds,
      search,
      cachedLLMURLs
    ]);
    const selectedModel = reactExports.useMemo(() => {
      if (!input || !(llmsInfo == null ? void 0 : llmsInfo.modelList)) return;
      return llmsInfo == null ? void 0 : llmsInfo.modelList.find((model) => model.model_id === input);
    }, [
      input,
      llmsInfo == null ? void 0 : llmsInfo.modelList
    ]);
    reactExports.useEffect(() => {
      if (!(selectedModel == null ? void 0 : selectedModel.model_id) || !cachedLLMURLs) return;
      setHasCache(cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)));
    }, [
      cachedLLMURLs,
      selectedModel == null ? void 0 : selectedModel.model_id
    ]);
    const modelTypeToLLMType = reactExports.useCallback((modelType) => {
      if (modelType === 1) {
        return LLMModelTypeEnum.embedding;
      }
      if (modelType === 2) {
        return LLMModelTypeEnum.VLM;
      }
      return LLMModelTypeEnum.LLM;
    }, []);
    const handleOnchange = reactExports.useCallback((currentValue) => {
      setInput(currentValue);
      setOpen(false);
    }, []);
    const handleSearchChange = reactExports.useCallback((value) => {
      setSearch(value);
    }, []);
    const handleOnSelectProvider = reactExports.useCallback((value) => {
      setProvider(value);
    }, []);
    const hanldeSubmit = async () => {
      var _a2;
      if (!node) return;
      try {
        await createDatabaseLLM(node, {
          name: input,
          model_type: modelTypeToLLMType(selectedModel == null ? void 0 : selectedModel.model_type),
          function_calling: (selectedModel == null ? void 0 : selectedModel.model_id) ? (_a2 = llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds) == null ? void 0 : _a2.includes(selectedModel == null ? void 0 : selectedModel.model_id) : false
        });
        setDialog == null ? void 0 : setDialog(false);
      } catch {
        toast2({
          variant: "destructive",
          description: t2("add_llm_card.errors.failed_to_create")
        });
      } finally {
        setInput("");
      }
    };
    const modelItems = reactExports.useMemo(() => {
      return modelList.map((model) => {
        var _a2;
        return jsxRuntimeExports.jsxs(CommandItem, {
          value: model.model_id,
          onSelect: handleOnchange,
          children: [
            input === model.model_id ? jsxRuntimeExports.jsx(LazyIcon, {
              name: "check",
              className: "mr-2 h-4 w-4"
            }) : jsxRuntimeExports.jsx("div", {
              className: "mr-2 h-4 w-4"
            }),
            jsxRuntimeExports.jsxs("span", {
              className: "max-w-md",
              children: [
                jsxRuntimeExports.jsxs("div", {
                  className: "flex gap-2 mb-2",
                  children: [
                    jsxRuntimeExports.jsx(LLMIcon, {
                      name: model.model_id
                    }),
                    model.model_id
                  ]
                }),
                jsxRuntimeExports.jsx("div", {
                  className: "flex max-w-full flex-wrap gap-1",
                  children: jsxRuntimeExports.jsx(LLMInfo, {
                    model,
                    isFunctionCalling: ((_a2 = llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds) == null ? void 0 : _a2.includes(model.model_id)) || false,
                    name: model.model_id,
                    isCached: cachedLLMURLs.some((item) => item.includes(model.model_id)) || false
                  })
                })
              ]
            })
          ]
        }, model.model_id);
      });
    }, [
      cachedLLMURLs,
      handleOnchange,
      input,
      llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds,
      modelList
    ]);
    return jsxRuntimeExports.jsxs(Card, {
      className: "max-w-lg",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_llm_card.title")
          })
        }),
        jsxRuntimeExports.jsxs(CardContent, {
          children: [
            jsxRuntimeExports.jsxs("div", {
              className: "grid w-full gap-1.5",
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  children: t2("add_llm_card.provider")
                }),
                jsxRuntimeExports.jsxs(Select, {
                  value: provider,
                  onValueChange: handleOnSelectProvider,
                  children: [
                    jsxRuntimeExports.jsx(SelectTrigger, {
                      className: "w-full mb-4",
                      children: jsxRuntimeExports.jsx(SelectValue, {
                        placeholder: t2("add_llm_card.provider_select_placeholder")
                      })
                    }),
                    jsxRuntimeExports.jsx(SelectContent, {
                      children: Object.values(SUPPORTED_PROVIDERS).map((item) => {
                        return jsxRuntimeExports.jsx(SelectItem, {
                          value: item,
                          children: t2(`add_llm_card.providers.${item.toLowerCase()}`)
                        }, item);
                      })
                    })
                  ]
                }),
                jsxRuntimeExports.jsx(Label$3, {
                  children: t2("add_llm_card.model_name")
                }),
                jsxRuntimeExports.jsxs(Popover, {
                  open,
                  onOpenChange: setOpen,
                  children: [
                    jsxRuntimeExports.jsx(PopoverTrigger, {
                      asChild: true,
                      children: jsxRuntimeExports.jsxs(Button, {
                        variant: "outline",
                        role: "combobox",
                        "aria-expanded": open,
                        className: "w-full justify-between",
                        children: [
                          input ? selectedModel == null ? void 0 : selectedModel.model_id : t2("add_llm_card.select_model_placeholder"),
                          jsxRuntimeExports.jsx(LazyIcon, {
                            name: "chevrons-up-down",
                            className: "ml-2 h-4 w-4 shrink-0 opacity-50"
                          })
                        ]
                      })
                    }),
                    jsxRuntimeExports.jsx(PopoverContent, {
                      className: "w-full p-0",
                      children: jsxRuntimeExports.jsxs(Command, {
                        children: [
                          jsxRuntimeExports.jsx(CommandInput, {
                            onValueChange: handleSearchChange,
                            placeholder: t2("add_llm_card.search_placeholder")
                          }),
                          jsxRuntimeExports.jsxs(CommandList, {
                            children: [
                              jsxRuntimeExports.jsx(CommandEmpty, {
                                children: t2("add_llm_card.no_model")
                              }),
                              jsxRuntimeExports.jsx(CommandGroup, {
                                children: modelItems
                              })
                            ]
                          })
                        ]
                      })
                    })
                  ]
                })
              ]
            }),
            selectedModel ? jsxRuntimeExports.jsxs("div", {
              className: "mt-4",
              children: [
                jsxRuntimeExports.jsxs("div", {
                  className: "mt-4 text-sm text-muted-foreground center flex max-w-full flex-wrap gap-1",
                  children: [
                    jsxRuntimeExports.jsx(LLMIcon, {
                      name: selectedModel.model_id,
                      className: "mr-2"
                    }),
                    jsxRuntimeExports.jsx(LLMInfo, {
                      model: selectedModel,
                      isFunctionCalling: ((_a = llmsInfo == null ? void 0 : llmsInfo.functionCallingModelIds) == null ? void 0 : _a.includes(selectedModel.model_id)) || false,
                      name: selectedModel.model_id,
                      isCached: cachedLLMURLs.some((item) => item.includes(selectedModel.model_id)) || false
                    })
                  ]
                }),
                jsxRuntimeExports.jsxs("div", {
                  className: "mt-2 text-sm text-muted-foreground",
                  children: [
                    jsxRuntimeExports.jsx("span", {
                      className: "font-bold mr-2",
                      children: t2("add_llm_card.model_url")
                    }),
                    selectedModel.model
                  ]
                }),
                jsxRuntimeExports.jsxs("div", {
                  className: "mt-2 text-sm text-muted-foreground center flex",
                  children: [
                    jsxRuntimeExports.jsx("span", {
                      className: "font-bold mr-2",
                      children: t2("add_llm_card.model_lib_url")
                    }),
                    selectedModel.model_lib
                  ]
                }),
                jsxRuntimeExports.jsxs("div", {
                  className: "mt-2 text-sm text-muted-foreground center flex",
                  children: [
                    jsxRuntimeExports.jsx("span", {
                      className: "font-bold mr-2",
                      children: t2("add_llm_card.metadata")
                    }),
                    JSON.stringify(selectedModel.overrides)
                  ]
                })
              ]
            }) : null
          ]
        }),
        jsxRuntimeExports.jsx(CardFooter, {
          className: "flex justify-between",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            loading: creatingLLM,
            disabled: !(input == null ? void 0 : input.length),
            onClick: hanldeSubmit,
            className: "w-full",
            children: hasCache ? t2("add_llm_card.button_add") : t2("add_llm_card.button_download_and_add")
          })
        })
      ]
    });
  }
  const useCreatePrompt = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createPrompt = reactExports.useCallback(async (source, options) => {
      var _a, _b, _c;
      try {
        if (!source || !sessionId) {
          throw new Error("Source or Session not found");
        }
        setLoading(true);
        const initialX = ((_a = source.position) == null ? void 0 : _a.x) || 0;
        const initialY = (((_b = source.position) == null ? void 0 : _b.y) || 0) + (((_c = source.measured) == null ? void 0 : _c.height) || 0);
        const prompt2 = await getRepository("Prompt").save({
          content: options.content,
          prefix: options.prefix,
          role: options.role || MessageRoleEnum.System,
          status: MessageStatusEnum.Started,
          session_id: sessionId,
          type: options.type || PromptTypeEnum.Chat
        });
        if (!prompt2) {
          throw new Error("Failed to save prompt");
        }
        const promptNode = await createOrUpdateFlowNode({
          source_id: prompt2.id,
          source_type: "Prompt",
          node_type: FlowNodeTypeEnum.Prompt,
          x: initialX,
          y: initialY + 20
        });
        if (!promptNode) {
          throw new Error("Failed to save prompt node");
        }
      } finally {
        setLoading(false);
      }
    }, [
      sessionId,
      createOrUpdateFlowNode
    ]);
    return {
      loading,
      createPrompt
    };
  };
  const PROMPT_TYPES = {
    [PromptTypeEnum.Chat]: {
      label: "add_prompt_card.prompt_types.chat",
      value: PromptTypeEnum.Chat
    },
    [PromptTypeEnum.FewShotExample]: {
      label: "add_prompt_card.prompt_types.few_shot_example",
      value: PromptTypeEnum.FewShotExample
    }
  };
  const PROMPT_ROLES = {
    [MessageRoleEnum.System]: {
      label: "add_prompt_card.prompt_roles.system",
      value: MessageRoleEnum.System
    },
    [MessageRoleEnum.Human]: {
      label: "add_prompt_card.prompt_roles.human",
      value: MessageRoleEnum.Human
    },
    [MessageRoleEnum.AI]: {
      label: "add_prompt_card.prompt_roles.ai",
      value: MessageRoleEnum.AI
    }
  };
  const PromptForm = reactExports.memo(({ defaultPromptContent, defaultPromptRole, defaultPromptType, hidePromptRole, hidePromptType, loading, onSubmit }) => {
    const [input, setInput] = reactExports.useState(defaultPromptContent || "");
    const [promptType, setPromptType] = reactExports.useState(defaultPromptType || PromptTypeEnum.Chat);
    const [promptRole, setPromptRole] = reactExports.useState(defaultPromptRole);
    const [promptPrefix, setPromptPrefix] = reactExports.useState("");
    const { t: t2 } = useTranslation("components");
    const handleOnchange = reactExports.useCallback((e3) => {
      setInput(e3.target.value);
    }, []);
    const handleOnchangePrefix = reactExports.useCallback((e3) => {
      setPromptPrefix(e3.target.value);
    }, []);
    const handleOnSelectType = reactExports.useCallback((value) => {
      if (value === PromptTypeEnum.FewShotExample) {
        setInput("Question: {input}\nAnswer: {output}");
      }
      setPromptType(value);
    }, []);
    const handleOnSelectRole = reactExports.useCallback((value) => {
      setPromptRole(value);
    }, []);
    const handleSubmit = async () => {
      const result = await onSubmit({
        content: input,
        role: promptRole,
        prefix: promptPrefix,
        type: promptType
      });
      if (!result) {
        return;
      }
      setInput("");
      setPromptRole(void 0);
      setPromptType("chat");
      setPromptPrefix("");
    };
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsxs("div", {
          className: "grid w-full gap-1.5",
          children: [
            !hidePromptType ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  children: t2("add_prompt_card.prompt_type")
                }),
                jsxRuntimeExports.jsxs(Select, {
                  value: promptType,
                  onValueChange: handleOnSelectType,
                  children: [
                    jsxRuntimeExports.jsx(SelectTrigger, {
                      className: "w-full mb-4",
                      children: jsxRuntimeExports.jsx(SelectValue, {
                        placeholder: t2("add_prompt_card.type_select_placeholder")
                      })
                    }),
                    jsxRuntimeExports.jsx(SelectContent, {
                      children: Object.values(PROMPT_TYPES).map((item) => {
                        return jsxRuntimeExports.jsx(SelectItem, {
                          value: item.value,
                          children: t2(item.label)
                        }, item.value);
                      })
                    })
                  ]
                })
              ]
            }) : void 0,
            !hidePromptRole ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  children: t2("add_prompt_card.prompt_role")
                }),
                jsxRuntimeExports.jsxs(Select, {
                  value: promptRole,
                  onValueChange: handleOnSelectRole,
                  children: [
                    jsxRuntimeExports.jsx(SelectTrigger, {
                      className: "w-full mb-4",
                      children: jsxRuntimeExports.jsx(SelectValue, {
                        placeholder: t2("add_prompt_card.role_select_placeholder")
                      })
                    }),
                    jsxRuntimeExports.jsx(SelectContent, {
                      children: Object.values(PROMPT_ROLES).map((item) => {
                        return jsxRuntimeExports.jsx(SelectItem, {
                          value: item.value,
                          children: t2(item.label)
                        }, item.value);
                      })
                    })
                  ]
                })
              ]
            }) : void 0,
            promptType === PromptTypeEnum.FewShotExample && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  children: t2("add_prompt_card.prompt_prefix")
                }),
                jsxRuntimeExports.jsx(Textarea, {
                  value: promptPrefix,
                  onChange: handleOnchangePrefix,
                  disabled: false,
                  className: "h-20",
                  placeholder: t2("add_prompt_card.placeholder"),
                  id: "message"
                }),
                jsxRuntimeExports.jsx(Label$3, {
                  children: t2("add_prompt_card.prompt_content")
                }),
                jsxRuntimeExports.jsxs("div", {
                  className: "w-full border-0 text-gray-700 flex text-sm justify-end items-center",
                  children: [
                    jsxRuntimeExports.jsx(LazyIcon, {
                      name: "info",
                      className: "mr-2",
                      size: 14
                    }),
                    t2("add_prompt_card.few_shot_example_note")
                  ]
                })
              ]
            }),
            jsxRuntimeExports.jsx(Textarea, {
              value: input,
              onChange: handleOnchange,
              disabled: false,
              placeholder: t2("add_prompt_card.placeholder"),
              id: "message"
            })
          ]
        }),
        jsxRuntimeExports.jsx("div", {
          children: jsxRuntimeExports.jsx(LoadingButton, {
            loading,
            disabled: !(input == null ? void 0 : input.length),
            onClick: handleSubmit,
            className: "w-full mt-4",
            children: t2("add_prompt_card.button")
          })
        })
      ]
    });
  });
  const CreatePromptCard = reactExports.memo((props) => {
    const { id, thread, setDialog } = props;
    const { t: t2 } = useTranslation("components");
    const { toast: toast2 } = useToast();
    const node = useInternalNode(id);
    const { createPrompt, loading } = useCreatePrompt();
    const handleSubmit = async (data) => {
      if (node) {
        try {
          if (!(data == null ? void 0 : data.content)) {
            throw new Error("Prompt data is missing");
          }
          await createPrompt(node, {
            ...data,
            content: data.content,
            thread
          });
          setDialog == null ? void 0 : setDialog(false);
        } catch (error) {
          toast2({
            variant: "destructive",
            title: `${error}`
          });
        }
      }
    };
    return jsxRuntimeExports.jsxs(Card, {
      className: "mw-full",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_prompt_card.title")
          })
        }),
        jsxRuntimeExports.jsx(CardContent, {
          children: jsxRuntimeExports.jsx(PromptForm, {
            onSubmit: handleSubmit,
            loading,
            defaultPromptRole: "system",
            defaultPromptType: "chat"
          })
        })
      ]
    });
  });
  const alphabet = "0123456789abcdef";
  const segmentLengths = [
    8,
    4,
    4,
    4,
    12
  ];
  function generateUUID() {
    const uuid = segmentLengths.map((length) => customAlphabet(alphabet, length)()).join("-");
    return uuid;
  }
  const useCreateSchema = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const toSchemaItem = reactExports.useCallback((schemaId, input, result, parent) => {
      var _a;
      if (!sessionId) {
        return;
      }
      for (const item of input) {
        if ((_a = item.data) == null ? void 0 : _a.length) {
          toSchemaItem(schemaId, item.data, result, item.id);
        } else {
          result.push({
            name: item.name,
            type: item.type,
            enum: item.enum ? JSON.stringify(item.enum) : "",
            required: item.required,
            description: item.description,
            id: item.id || generateUUID(),
            parent_id: parent,
            schema_id: schemaId,
            session_id: sessionId
          });
        }
      }
      return result;
    }, [
      sessionId
    ]);
    const createSchema = reactExports.useCallback(async (source, input) => {
      var _a, _b, _c;
      try {
        if (!source || !sessionId) {
          throw new Error("Source or Session not found");
        }
        setLoading(true);
        const initialX = ((_a = source.position) == null ? void 0 : _a.x) || 0;
        const initialY = (((_b = source.position) == null ? void 0 : _b.y) || 0) + (((_c = source.measured) == null ? void 0 : _c.height) || 0);
        const schema = await getRepository("Schema").save({
          name: "Untitled Schema",
          session_id: sessionId
        });
        if (!schema) {
          throw new Error("Failed to save schema");
        }
        const schemaItems = toSchemaItem(schema.id, input, [], void 0);
        if (!(schemaItems == null ? void 0 : schemaItems.length)) {
          throw new Error("Failed to convert schema items");
        }
        await getRepository("SchemaItem").save(schemaItems);
        const promptNode = await createOrUpdateFlowNode({
          source_id: schema.id,
          source_type: "Schema",
          node_type: FlowNodeTypeEnum.Schema,
          x: initialX,
          y: initialY + 20
        });
        if (!promptNode) {
          throw new Error("Failed to save schema node");
        }
      } finally {
        setLoading(false);
      }
    }, [
      sessionId,
      toSchemaItem,
      createOrUpdateFlowNode
    ]);
    return {
      loading,
      createSchema
    };
  };
  var ACCORDION_NAME = "Accordion";
  var ACCORDION_KEYS = [
    "Home",
    "End",
    "ArrowDown",
    "ArrowUp",
    "ArrowLeft",
    "ArrowRight"
  ];
  var [Collection, useCollection, createCollectionScope] = createCollection(ACCORDION_NAME);
  var [createAccordionContext, createAccordionScope] = createContextScope$1(ACCORDION_NAME, [
    createCollectionScope,
    createCollapsibleScope
  ]);
  var useCollapsibleScope = createCollapsibleScope();
  var Accordion$1 = React.forwardRef((props, forwardedRef) => {
    const { type, ...accordionProps } = props;
    const singleProps = accordionProps;
    const multipleProps = accordionProps;
    return jsxRuntimeExports.jsx(Collection.Provider, {
      scope: props.__scopeAccordion,
      children: type === "multiple" ? jsxRuntimeExports.jsx(AccordionImplMultiple, {
        ...multipleProps,
        ref: forwardedRef
      }) : jsxRuntimeExports.jsx(AccordionImplSingle, {
        ...singleProps,
        ref: forwardedRef
      })
    });
  });
  Accordion$1.displayName = ACCORDION_NAME;
  var [AccordionValueProvider, useAccordionValueContext] = createAccordionContext(ACCORDION_NAME);
  var [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(ACCORDION_NAME, {
    collapsible: false
  });
  var AccordionImplSingle = React.forwardRef((props, forwardedRef) => {
    const { value: valueProp, defaultValue, onValueChange = () => {
    }, collapsible = false, ...accordionSingleProps } = props;
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChange
    });
    return jsxRuntimeExports.jsx(AccordionValueProvider, {
      scope: props.__scopeAccordion,
      value: value ? [
        value
      ] : [],
      onItemOpen: setValue,
      onItemClose: React.useCallback(() => collapsible && setValue(""), [
        collapsible,
        setValue
      ]),
      children: jsxRuntimeExports.jsx(AccordionCollapsibleProvider, {
        scope: props.__scopeAccordion,
        collapsible,
        children: jsxRuntimeExports.jsx(AccordionImpl, {
          ...accordionSingleProps,
          ref: forwardedRef
        })
      })
    });
  });
  var AccordionImplMultiple = React.forwardRef((props, forwardedRef) => {
    const { value: valueProp, defaultValue, onValueChange = () => {
    }, ...accordionMultipleProps } = props;
    const [value = [], setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChange
    });
    const handleItemOpen = React.useCallback((itemValue) => setValue((prevValue = []) => [
      ...prevValue,
      itemValue
    ]), [
      setValue
    ]);
    const handleItemClose = React.useCallback((itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)), [
      setValue
    ]);
    return jsxRuntimeExports.jsx(AccordionValueProvider, {
      scope: props.__scopeAccordion,
      value,
      onItemOpen: handleItemOpen,
      onItemClose: handleItemClose,
      children: jsxRuntimeExports.jsx(AccordionCollapsibleProvider, {
        scope: props.__scopeAccordion,
        collapsible: true,
        children: jsxRuntimeExports.jsx(AccordionImpl, {
          ...accordionMultipleProps,
          ref: forwardedRef
        })
      })
    });
  });
  var [AccordionImplProvider, useAccordionContext] = createAccordionContext(ACCORDION_NAME);
  var AccordionImpl = React.forwardRef((props, forwardedRef) => {
    const { __scopeAccordion, disabled, dir, orientation = "vertical", ...accordionProps } = props;
    const accordionRef = React.useRef(null);
    const composedRefs = useComposedRefs(accordionRef, forwardedRef);
    const getItems = useCollection(__scopeAccordion);
    const direction = useDirection(dir);
    const isDirectionLTR = direction === "ltr";
    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {
      var _a;
      if (!ACCORDION_KEYS.includes(event.key)) return;
      const target = event.target;
      const triggerCollection = getItems().filter((item) => {
        var _a2;
        return !((_a2 = item.ref.current) == null ? void 0 : _a2.disabled);
      });
      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);
      const triggerCount = triggerCollection.length;
      if (triggerIndex === -1) return;
      event.preventDefault();
      let nextIndex = triggerIndex;
      const homeIndex = 0;
      const endIndex = triggerCount - 1;
      const moveNext = () => {
        nextIndex = triggerIndex + 1;
        if (nextIndex > endIndex) {
          nextIndex = homeIndex;
        }
      };
      const movePrev = () => {
        nextIndex = triggerIndex - 1;
        if (nextIndex < homeIndex) {
          nextIndex = endIndex;
        }
      };
      switch (event.key) {
        case "Home":
          nextIndex = homeIndex;
          break;
        case "End":
          nextIndex = endIndex;
          break;
        case "ArrowRight":
          if (orientation === "horizontal") {
            if (isDirectionLTR) {
              moveNext();
            } else {
              movePrev();
            }
          }
          break;
        case "ArrowDown":
          if (orientation === "vertical") {
            moveNext();
          }
          break;
        case "ArrowLeft":
          if (orientation === "horizontal") {
            if (isDirectionLTR) {
              movePrev();
            } else {
              moveNext();
            }
          }
          break;
        case "ArrowUp":
          if (orientation === "vertical") {
            movePrev();
          }
          break;
      }
      const clampedIndex = nextIndex % triggerCount;
      (_a = triggerCollection[clampedIndex].ref.current) == null ? void 0 : _a.focus();
    });
    return jsxRuntimeExports.jsx(AccordionImplProvider, {
      scope: __scopeAccordion,
      disabled,
      direction: dir,
      orientation,
      children: jsxRuntimeExports.jsx(Collection.Slot, {
        scope: __scopeAccordion,
        children: jsxRuntimeExports.jsx(Primitive.div, {
          ...accordionProps,
          "data-orientation": orientation,
          ref: composedRefs,
          onKeyDown: disabled ? void 0 : handleKeyDown
        })
      })
    });
  });
  var ITEM_NAME$1 = "AccordionItem";
  var [AccordionItemProvider, useAccordionItemContext] = createAccordionContext(ITEM_NAME$1);
  var AccordionItem$1 = React.forwardRef((props, forwardedRef) => {
    const { __scopeAccordion, value, ...accordionItemProps } = props;
    const accordionContext = useAccordionContext(ITEM_NAME$1, __scopeAccordion);
    const valueContext = useAccordionValueContext(ITEM_NAME$1, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    const triggerId = useId();
    const open = value && valueContext.value.includes(value) || false;
    const disabled = accordionContext.disabled || props.disabled;
    return jsxRuntimeExports.jsx(AccordionItemProvider, {
      scope: __scopeAccordion,
      open,
      disabled,
      triggerId,
      children: jsxRuntimeExports.jsx(Root$4, {
        "data-orientation": accordionContext.orientation,
        "data-state": getState$1(open),
        ...collapsibleScope,
        ...accordionItemProps,
        ref: forwardedRef,
        disabled,
        open,
        onOpenChange: (open2) => {
          if (open2) {
            valueContext.onItemOpen(value);
          } else {
            valueContext.onItemClose(value);
          }
        }
      })
    });
  });
  AccordionItem$1.displayName = ITEM_NAME$1;
  var HEADER_NAME = "AccordionHeader";
  var AccordionHeader = React.forwardRef((props, forwardedRef) => {
    const { __scopeAccordion, ...headerProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);
    return jsxRuntimeExports.jsx(Primitive.h3, {
      "data-orientation": accordionContext.orientation,
      "data-state": getState$1(itemContext.open),
      "data-disabled": itemContext.disabled ? "" : void 0,
      ...headerProps,
      ref: forwardedRef
    });
  });
  AccordionHeader.displayName = HEADER_NAME;
  var TRIGGER_NAME$1 = "AccordionTrigger";
  var AccordionTrigger$1 = React.forwardRef((props, forwardedRef) => {
    const { __scopeAccordion, ...triggerProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(TRIGGER_NAME$1, __scopeAccordion);
    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME$1, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    return jsxRuntimeExports.jsx(Collection.ItemSlot, {
      scope: __scopeAccordion,
      children: jsxRuntimeExports.jsx(Trigger$4, {
        "aria-disabled": itemContext.open && !collapsibleContext.collapsible || void 0,
        "data-orientation": accordionContext.orientation,
        id: itemContext.triggerId,
        ...collapsibleScope,
        ...triggerProps,
        ref: forwardedRef
      })
    });
  });
  AccordionTrigger$1.displayName = TRIGGER_NAME$1;
  var CONTENT_NAME$1 = "AccordionContent";
  var AccordionContent$1 = React.forwardRef((props, forwardedRef) => {
    const { __scopeAccordion, ...contentProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(CONTENT_NAME$1, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    return jsxRuntimeExports.jsx(Content$3, {
      role: "region",
      "aria-labelledby": itemContext.triggerId,
      "data-orientation": accordionContext.orientation,
      ...collapsibleScope,
      ...contentProps,
      ref: forwardedRef,
      style: {
        ["--radix-accordion-content-height"]: "var(--radix-collapsible-content-height)",
        ["--radix-accordion-content-width"]: "var(--radix-collapsible-content-width)",
        ...props.style
      }
    });
  });
  AccordionContent$1.displayName = CONTENT_NAME$1;
  function getState$1(open) {
    return open ? "open" : "closed";
  }
  Root2$2 = Accordion$1;
  Item = AccordionItem$1;
  var Header = AccordionHeader;
  Trigger2 = AccordionTrigger$1;
  Content2 = AccordionContent$1;
  const Accordion = Root2$2;
  const AccordionItem = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Item, {
    ref,
    className: cn("border-b", className),
    ...props
  }));
  AccordionItem.displayName = "AccordionItem";
  const AccordionTrigger = reactExports.forwardRef(({ className, children, ...props }, ref) => jsxRuntimeExports.jsx(Header, {
    className: "flex",
    children: jsxRuntimeExports.jsxs(Trigger2, {
      ref,
      className: cn("flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180", className),
      ...props,
      children: [
        children,
        jsxRuntimeExports.jsx(LazyIcon, {
          name: "chevron-down",
          className: "h-4 w-4 shrink-0 transition-transform duration-200"
        })
      ]
    })
  }));
  AccordionTrigger.displayName = Trigger2.displayName;
  const AccordionContent = reactExports.forwardRef(({ className, children, ...props }, ref) => jsxRuntimeExports.jsx(Content2, {
    ref,
    className: "overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
    ...props,
    children: jsxRuntimeExports.jsx("div", {
      className: cn("pb-4 pt-0", className),
      children
    })
  }));
  AccordionContent.displayName = Content2.displayName;
  var CHECKBOX_NAME = "Checkbox";
  var [createCheckboxContext, createCheckboxScope] = createContextScope$1(CHECKBOX_NAME);
  var [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
  var Checkbox$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeCheckbox, name, checked: checkedProp, defaultChecked, required, disabled, value = "on", onCheckedChange, form, ...checkboxProps } = props;
    const [button, setButton] = reactExports.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = reactExports.useRef(false);
    const isFormControl = button ? form || !!button.closest("form") : true;
    const [checked = false, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    });
    const initialCheckedStateRef = reactExports.useRef(checked);
    reactExports.useEffect(() => {
      const form2 = button == null ? void 0 : button.form;
      if (form2) {
        const reset = () => setChecked(initialCheckedStateRef.current);
        form2.addEventListener("reset", reset);
        return () => form2.removeEventListener("reset", reset);
      }
    }, [
      button,
      setChecked
    ]);
    return jsxRuntimeExports.jsxs(CheckboxProvider, {
      scope: __scopeCheckbox,
      state: checked,
      disabled,
      children: [
        jsxRuntimeExports.jsx(Primitive.button, {
          type: "button",
          role: "checkbox",
          "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
          "aria-required": required,
          "data-state": getState(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...checkboxProps,
          ref: composedRefs,
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            if (event.key === "Enter") event.preventDefault();
          }),
          onClick: composeEventHandlers(props.onClick, (event) => {
            setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);
            if (isFormControl) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
            }
          })
        }),
        isFormControl && jsxRuntimeExports.jsx(BubbleInput, {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          form,
          style: {
            transform: "translateX(-100%)"
          },
          defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked
        })
      ]
    });
  });
  Checkbox$1.displayName = CHECKBOX_NAME;
  var INDICATOR_NAME = "CheckboxIndicator";
  var CheckboxIndicator = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;
    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
    return jsxRuntimeExports.jsx(Presence, {
      present: forceMount || isIndeterminate(context.state) || context.state === true,
      children: jsxRuntimeExports.jsx(Primitive.span, {
        "data-state": getState(context.state),
        "data-disabled": context.disabled ? "" : void 0,
        ...indicatorProps,
        ref: forwardedRef,
        style: {
          pointerEvents: "none",
          ...props.style
        }
      })
    });
  });
  CheckboxIndicator.displayName = INDICATOR_NAME;
  var BubbleInput = (props) => {
    const { control, checked, bubbles = true, defaultChecked, ...inputProps } = props;
    const ref = reactExports.useRef(null);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    reactExports.useEffect(() => {
      const input = ref.current;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", {
          bubbles
        });
        input.indeterminate = isIndeterminate(checked);
        setChecked.call(input, isIndeterminate(checked) ? false : checked);
        input.dispatchEvent(event);
      }
    }, [
      prevChecked,
      checked,
      bubbles
    ]);
    const defaultCheckedRef = reactExports.useRef(isIndeterminate(checked) ? false : checked);
    return jsxRuntimeExports.jsx("input", {
      type: "checkbox",
      "aria-hidden": true,
      defaultChecked: defaultChecked ?? defaultCheckedRef.current,
      ...inputProps,
      tabIndex: -1,
      ref,
      style: {
        ...props.style,
        ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      }
    });
  };
  function isIndeterminate(checked) {
    return checked === "indeterminate";
  }
  function getState(checked) {
    return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
  }
  Root$1 = Checkbox$1;
  Indicator = CheckboxIndicator;
  const Checkbox = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Root$1, {
    ref,
    className: cn("peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground", className),
    ...props,
    children: jsxRuntimeExports.jsx(Indicator, {
      className: cn("flex items-center justify-center text-current"),
      children: jsxRuntimeExports.jsx(LazyIcon, {
        name: "check",
        className: "h-4 w-4"
      })
    })
  }));
  Checkbox.displayName = Root$1.displayName;
  const NewOrUpdateField = reactExports.memo(({ setData, data, id }) => {
    const { t: t2 } = useTranslation("components");
    const [empty, setEmpty] = reactExports.useState({
      name: "",
      description: "",
      type: "string",
      required: false,
      data: []
    });
    const currentRow = reactExports.useMemo(() => {
      return id ? data.find((item) => item.id === id) || empty : empty;
    }, [
      data,
      empty,
      id
    ]);
    const handleChangeName = reactExports.useCallback((e3) => {
      if (e3.target.value && !/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(e3.target.value)) {
        return;
      }
      if (!id) {
        setEmpty((item) => ({
          ...item,
          name: e3.target.value || ""
        }));
      } else {
        setData((previous) => {
          return [
            ...previous.map((item) => item.id === id ? {
              ...item,
              name: e3.target.value || ""
            } : item)
          ];
        });
      }
    }, [
      id,
      setData
    ]);
    const handleChangeDescription = reactExports.useCallback((e3) => {
      if (!id) {
        setEmpty((item) => ({
          ...item,
          description: e3.target.value || ""
        }));
      } else {
        setData((previous) => {
          return [
            ...previous.map((item) => item.id === id ? {
              ...item,
              description: e3.target.value || ""
            } : item)
          ];
        });
      }
    }, [
      id,
      setData
    ]);
    const handleChangeType = reactExports.useCallback((e3) => {
      if (!id) {
        setEmpty((item) => ({
          ...item,
          type: e3 || "string"
        }));
      } else {
        setData((previous) => {
          return [
            ...previous.map((item) => item.id === id ? {
              ...item,
              type: e3 || ""
            } : item)
          ];
        });
      }
    }, [
      id,
      setData
    ]);
    const handleChangeRequired = reactExports.useCallback((e3) => {
      if (!id) {
        setEmpty((item) => ({
          ...item,
          required: !!e3 || false
        }));
      } else {
        setData((previous) => {
          return [
            ...previous.map((item) => item.id === id ? {
              ...item,
              required: !!e3 || false
            } : item)
          ];
        });
      }
    }, [
      id,
      setData
    ]);
    const handleChangeEnum = reactExports.useCallback((e3) => {
      if (!id) {
        setEmpty((item) => ({
          ...item,
          enum: e3.target.value || ""
        }));
      } else {
        setData((previous) => {
          return [
            ...previous.map((item) => item.id === id ? {
              ...item,
              enum: e3.target.value || ""
            } : item)
          ];
        });
      }
    }, [
      id,
      setData
    ]);
    const handleAddNew = reactExports.useCallback(() => {
      if (data.find((item) => item.name === empty.name)) {
        return toast({
          variant: "destructive",
          content: "Name already exists"
        });
      }
      empty.id = generateUUID();
      setData((items) => {
        return [
          ...items,
          {
            ...empty
          }
        ];
      });
      setEmpty({
        name: "",
        description: "",
        type: "string",
        required: false,
        id: generateUUID(),
        parent: id || void 0,
        data: []
      });
    }, [
      data,
      empty,
      setData,
      id
    ]);
    const handleSetChildData = reactExports.useCallback((func) => {
      setData((previousData) => {
        return [
          ...previousData.map((item) => item.id === id ? {
            ...item,
            data: func(item.data || [])
          } : item)
        ];
      });
    }, [
      id,
      setData
    ]);
    const shouldShowChildData = [
      "object",
      "array"
    ].includes(currentRow.type);
    return jsxRuntimeExports.jsxs("div", {
      className: "w-full p-1",
      children: [
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(Label$3, {
              children: t2("add_schema_card.field.name")
            }),
            jsxRuntimeExports.jsx(Input, {
              id: "name",
              onChange: handleChangeName,
              placeholder: t2("add_schema_card.field.name_placeholder"),
              value: (currentRow == null ? void 0 : currentRow.name) || ""
            })
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(Label$3, {
              children: t2("add_schema_card.field.description")
            }),
            jsxRuntimeExports.jsx(Input, {
              id: "description",
              placeholder: t2("add_schema_card.field.description_placeholder"),
              onChange: handleChangeDescription,
              value: (currentRow == null ? void 0 : currentRow.description) || ""
            })
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(Label$3, {
              children: t2("add_schema_card.field.type")
            }),
            jsxRuntimeExports.jsxs(Select, {
              onValueChange: handleChangeType,
              value: (currentRow == null ? void 0 : currentRow.type) || "",
              children: [
                jsxRuntimeExports.jsx(SelectTrigger, {
                  children: jsxRuntimeExports.jsx(SelectValue, {
                    placeholder: t2("add_schema_card.field.type_placeholder")
                  })
                }),
                jsxRuntimeExports.jsxs(SelectContent, {
                  children: [
                    jsxRuntimeExports.jsx(SelectItem, {
                      value: "string",
                      children: t2("add_schema_card.types.string")
                    }),
                    jsxRuntimeExports.jsx(SelectItem, {
                      value: "boolean",
                      children: t2("add_schema_card.types.boolean")
                    }),
                    jsxRuntimeExports.jsx(SelectItem, {
                      value: "number",
                      children: t2("add_schema_card.types.number")
                    }),
                    jsxRuntimeExports.jsx(SelectItem, {
                      value: "object",
                      children: t2("add_schema_card.types.object")
                    }),
                    jsxRuntimeExports.jsx(SelectItem, {
                      value: "array",
                      children: t2("add_schema_card.types.array")
                    })
                  ]
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "flex items-center h-10",
          children: [
            jsxRuntimeExports.jsx(Label$3, {
              children: t2("add_schema_card.field.required")
            }),
            jsxRuntimeExports.jsx(Checkbox, {
              className: "ml-2",
              "aria-label": "Select row",
              onCheckedChange: handleChangeRequired,
              checked: currentRow == null ? void 0 : currentRow.required
            })
          ]
        }),
        shouldShowChildData ? jsxRuntimeExports.jsxs("div", {
          className: "mt-2 flex flex-col gap-2",
          children: [
            jsxRuntimeExports.jsx(Label$3, {
              children: t2("add_schema_card.children")
            }),
            jsxRuntimeExports.jsx(FieldList$1, {
              data: (currentRow == null ? void 0 : currentRow.data) || [],
              setData: handleSetChildData
            })
          ]
        }) : null,
        (currentRow == null ? void 0 : currentRow.type) === "enum" ? jsxRuntimeExports.jsxs("div", {
          className: "mt-2 flex flex-col gap-2",
          children: [
            jsxRuntimeExports.jsx(Label$3, {
              children: t2("add_schema_card.field.enum")
            }),
            jsxRuntimeExports.jsx(Input, {
              id: "enum",
              onChange: handleChangeEnum,
              placeholder: "Enum"
            })
          ]
        }) : null,
        !id ? jsxRuntimeExports.jsx("div", {
          className: "w-full flex justify-end mt-2",
          children: jsxRuntimeExports.jsx(Button, {
            variant: "secondary",
            disabled: !currentRow.name || !currentRow.description || !currentRow.type,
            onClick: handleAddNew,
            className: "w-full",
            children: t2("add_schema_card.field.add_field")
          })
        }) : null
      ]
    });
  });
  const FieldList = reactExports.memo(({ data, setData }) => {
    return jsxRuntimeExports.jsxs(Accordion, {
      type: "single",
      collapsible: true,
      children: [
        data.map((row) => {
          return jsxRuntimeExports.jsxs(AccordionItem, {
            value: `${row.id}`,
            children: [
              jsxRuntimeExports.jsx(AccordionTrigger, {
                children: row.name
              }),
              jsxRuntimeExports.jsx(AccordionContent, {
                children: jsxRuntimeExports.jsx(NewOrUpdateField, {
                  setData,
                  data,
                  id: row.id
                })
              })
            ]
          }, row.id || "new");
        }),
        jsxRuntimeExports.jsx(Card, {
          className: "p-2 mt-4",
          children: jsxRuntimeExports.jsx(NewOrUpdateField, {
            setData,
            data
          })
        })
      ]
    });
  });
  const FieldList$1 = FieldList;
  const CreateSchemaCard = reactExports.memo((props) => {
    const { t: t2 } = useTranslation("components");
    const { id } = props;
    const node = useInternalNode(id);
    const [data, setData] = reactExports.useState([]);
    const { createSchema, loading } = useCreateSchema();
    const handleSubmit = async () => {
      if (node && (data == null ? void 0 : data.length)) {
        try {
          await createSchema(node, data);
          setData([]);
        } catch (error) {
          toast({
            variant: "destructive",
            title: `${error}`
          });
        }
      }
    };
    return jsxRuntimeExports.jsxs(Card, {
      className: "max-w-lg",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_schema_card.title")
          })
        }),
        jsxRuntimeExports.jsx(CardContent, {
          className: "min-w-96",
          children: jsxRuntimeExports.jsx(FieldList$1, {
            setData,
            data
          })
        }),
        jsxRuntimeExports.jsx(CardFooter, {
          className: "flex justify-between",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            loading,
            disabled: !(data == null ? void 0 : data.length),
            onClick: handleSubmit,
            className: "w-full",
            children: t2("add_schema_card.create")
          })
        })
      ]
    });
  });
  const useCreateCSVData = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createCSVData = reactExports.useCallback(async (source, headers, data) => {
      var _a, _b, _c;
      try {
        if (!source || !sessionId) {
          throw new Error("Source or Session not found");
        }
        setLoading(true);
        const initialX = ((_a = source.position) == null ? void 0 : _a.x) || 0;
        const initialY = (((_b = source.position) == null ? void 0 : _b.y) || 0) + (((_c = source.measured) == null ? void 0 : _c.height) || 0);
        const encodedData = encodeCSVData(headers, data);
        const csvData = await getRepository("CSVData").save({
          headers: encodedData.headers,
          csv: encodedData.data,
          session_id: sessionId
        });
        if (!csvData) {
          throw new Error("Failed to save");
        }
        const dataNode = await createOrUpdateFlowNode({
          source_id: csvData.id,
          source_type: "CSVData",
          node_type: FlowNodeTypeEnum.CSVData,
          x: initialX,
          y: initialY + 20
        });
        if (!dataNode) {
          throw new Error("Failed to save node");
        }
      } finally {
        setLoading(false);
      }
    }, [
      sessionId,
      createOrUpdateFlowNode
    ]);
    return {
      loading,
      createCSVData
    };
  };
  const Table = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("div", {
    className: "relative w-full overflow-auto",
    children: jsxRuntimeExports.jsx("table", {
      ref,
      className: cn("w-full caption-bottom text-sm", className),
      ...props
    })
  }));
  Table.displayName = "Table";
  const TableHeader = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("thead", {
    ref,
    className: cn("[&_tr]:border-b", className),
    ...props
  }));
  TableHeader.displayName = "TableHeader";
  const TableBody = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("tbody", {
    ref,
    className: cn("[&_tr:last-child]:border-0", className),
    ...props
  }));
  TableBody.displayName = "TableBody";
  const TableFooter = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("tfoot", {
    ref,
    className: cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className),
    ...props
  }));
  TableFooter.displayName = "TableFooter";
  const TableRow = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("tr", {
    ref,
    className: cn("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted", className),
    ...props
  }));
  TableRow.displayName = "TableRow";
  const TableHead = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("th", {
    ref,
    className: cn("h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0", className),
    ...props
  }));
  TableHead.displayName = "TableHead";
  const TableCell = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("td", {
    ref,
    className: cn("align-middle [&:has([role=checkbox])]:pr-0", className),
    ...props
  }));
  TableCell.displayName = "TableCell";
  const TableCaption = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("caption", {
    ref,
    className: cn("mt-4 text-sm text-muted-foreground", className),
    ...props
  }));
  TableCaption.displayName = "TableCaption";
  function ExampleTable({ data }) {
    const { t: t2 } = useTranslation("components");
    return jsxRuntimeExports.jsxs(Table, {
      className: "w-full",
      children: [
        jsxRuntimeExports.jsx(TableHeader, {
          children: jsxRuntimeExports.jsxs(TableRow, {
            children: [
              jsxRuntimeExports.jsx(TableHead, {
                children: t2("add_few_shot_example_card.input")
              }),
              jsxRuntimeExports.jsx(TableHead, {
                children: t2("add_few_shot_example_card.output")
              })
            ]
          })
        }),
        jsxRuntimeExports.jsx(TableBody, {
          children: data == null ? void 0 : data.map((item, index2) => jsxRuntimeExports.jsxs(TableRow, {
            children: [
              jsxRuntimeExports.jsx(TableCell, {
                className: "p-4",
                children: item.input
              }),
              jsxRuntimeExports.jsx(TableCell, {
                className: "p-4",
                children: item.output
              })
            ]
          }, `${item.input}_${item.output}_${index2}`))
        })
      ]
    });
  }
  const CreateFewShotExampleCard = reactExports.memo((props) => {
    const { id } = props;
    const { t: t2 } = useTranslation("components");
    const [data, setData] = reactExports.useState([]);
    const [input, setInput] = reactExports.useState("");
    const [output, setOutput] = reactExports.useState("");
    const node = useInternalNode(id);
    const { createCSVData, loading } = useCreateCSVData();
    const handleAdd = () => {
      setData((prevData) => [
        ...prevData,
        {
          input,
          output
        }
      ]);
      setInput("");
      setOutput("");
    };
    const handleCreateCSVData = async () => {
      if (node) {
        await createCSVData(node, [
          "input",
          "output"
        ], data.map((item) => [
          item.input,
          item.output
        ]));
      }
    };
    return jsxRuntimeExports.jsxs(Card, {
      className: "mw-full",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_few_shot_example_card.title")
          })
        }),
        jsxRuntimeExports.jsxs(CardContent, {
          children: [
            jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col space-y-1.5",
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  htmlFor: "name",
                  children: t2("add_few_shot_example_card.input")
                }),
                jsxRuntimeExports.jsx(Input, {
                  value: input,
                  onChange: (e3) => setInput(e3.target.value || ""),
                  id: "name",
                  placeholder: t2("add_few_shot_example_card.input_placeholder")
                })
              ]
            }),
            jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col space-y-1.5 mt-3",
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  htmlFor: "name",
                  children: t2("add_few_shot_example_card.output")
                }),
                jsxRuntimeExports.jsx(Textarea, {
                  value: output,
                  onChange: (e3) => setOutput(e3.target.value || ""),
                  placeholder: t2("add_few_shot_example_card.output_placeholder")
                })
              ]
            }),
            jsxRuntimeExports.jsx("div", {
              className: "w-full flex mt-4 justify-end",
              children: jsxRuntimeExports.jsx(Button, {
                disabled: !input || !output,
                onClick: handleAdd,
                className: "w-40",
                children: t2("add_few_shot_example_card.add")
              })
            }),
            jsxRuntimeExports.jsx(ExampleTable, {
              data: data || []
            })
          ]
        }),
        jsxRuntimeExports.jsx(CardFooter, {
          className: "flex justify-between",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            loading,
            disabled: !(data == null ? void 0 : data.length),
            onClick: handleCreateCSVData,
            className: "w-full",
            children: t2("add_few_shot_example_card.create")
          })
        })
      ]
    });
  });
  const useCreateTool = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const createTool = reactExports.useCallback(async (source, data, options) => {
      var _a, _b, _c;
      try {
        if (!source || !sessionId) {
          throw new Error("Source or Session not found");
        }
        if (!data.name || !data.description) {
          throw new Error("Name is required");
        }
        setLoading(true);
        const initialX = ((_a = source.position) == null ? void 0 : _a.x) || 0;
        const initialY = (((_b = source.position) == null ? void 0 : _b.y) || 0) + (((_c = source.measured) == null ? void 0 : _c.height) || 0);
        const tool = await getRepository("ToolDefinition").save({
          ...data,
          name: `${data.name}`,
          description: `${data.description}`,
          session_id: sessionId
        });
        if (!tool) {
          throw new Error("Failed create tool.");
        }
        const toolNode = await createOrUpdateFlowNode({
          source_id: tool.id,
          source_type: "ToolDefinition",
          node_type: FlowNodeTypeEnum.ToolDefinition,
          x: initialX,
          y: initialY + 20
        });
        if (!toolNode) {
          throw new Error("Failed to save node");
        }
        if (options == null ? void 0 : options.schemaNode) {
          await createOrUpdateFlowEdge({
            source: options.schemaNode.id,
            target: toolNode.id
          });
        }
      } finally {
        setLoading(false);
      }
    }, [
      sessionId,
      createOrUpdateFlowNode,
      createOrUpdateFlowEdge
    ]);
    return {
      loading,
      createTool
    };
  };
  const CreateToolCard = reactExports.memo((props) => {
    const { t: t2 } = useTranslation("components");
    const { toast: toast2 } = useToast();
    const { id } = props;
    const node = useInternalNode(id);
    const [name, setName] = reactExports.useState("");
    const [description, setDescription] = reactExports.useState("");
    const { createTool, loading } = useCreateTool();
    const handleChangeName = (e3) => {
      setName(e3.target.value);
    };
    const handleChangeDescription = (e3) => {
      setDescription(e3.target.value);
    };
    const handleSubmit = async () => {
      if (node && name && description) {
        try {
          await createTool(node, {
            name,
            description
          });
          setName("");
          setDescription("");
        } catch (error) {
          logWarn(error);
          toast2({
            variant: "destructive",
            title: t2("add_tool_card.errors.create_tool_failed")
          });
        }
      }
    };
    return jsxRuntimeExports.jsxs(Card, {
      className: "mw-full",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_tool_card.title")
          })
        }),
        jsxRuntimeExports.jsxs(CardContent, {
          children: [
            jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col space-y-1.5",
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  htmlFor: "name",
                  children: t2("add_tool_card.tool_name")
                }),
                jsxRuntimeExports.jsx(Input, {
                  onChange: handleChangeName,
                  id: "name",
                  placeholder: t2("add_tool_card.name_placeholder")
                })
              ]
            }),
            jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col space-y-1.5 mt-3",
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  htmlFor: "name",
                  children: t2("add_tool_card.tool_description")
                }),
                jsxRuntimeExports.jsx(Textarea, {
                  onChange: handleChangeDescription,
                  placeholder: t2("add_tool_card.description_placeholder")
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsx(CardFooter, {
          className: "flex justify-between",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            loading,
            onClick: handleSubmit,
            className: "w-full",
            children: t2("add_tool_card.create")
          })
        })
      ]
    });
  });
  const useCreateVectorDatabase = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const createVectorDatabase = reactExports.useCallback(async (source, data, textSplitter) => {
      var _a, _b, _c;
      try {
        if (!(data == null ? void 0 : data.name) || !source || !sessionId) {
          throw new Error("Source or Session not found");
        }
        setLoading(true);
        const initialX = ((_a = source.position) == null ? void 0 : _a.x) || 0;
        const initialY = (((_b = source.position) == null ? void 0 : _b.y) || 0) + (((_c = source.measured) == null ? void 0 : _c.height) || 0);
        const databaseSource = await getRepository("JSONLData").save({
          headers: encodeSplitter([
            "content",
            "embedding",
            "metadata"
          ]),
          jsonl: "",
          session_id: sessionId
        });
        if (!databaseSource) {
          throw new Error("Failed to save databaseSource");
        }
        const databaseSourceNode = await createOrUpdateFlowNode({
          source_id: databaseSource.id,
          source_type: "JSONLData",
          node_type: FlowNodeTypeEnum.JSONLData,
          x: initialX + 80,
          y: initialY + 30
        });
        if (!databaseSourceNode) {
          throw new Error("Failed to save databaseSource node");
        }
        const vectorDatabase = await getRepository("VectorDatabase").save({
          ...data,
          name: `${data.name}`,
          type: data.type || VectorDatabaseTypeEnum.Local,
          storage: data.storage || VectorDatabaseStorageEnum.DataNode,
          provider: data.provider || VectorDatabaseProviderEnum.Memory,
          session_id: sessionId,
          metadata: textSplitter ? JSON.stringify({
            textSplitter
          }) : void 0
        });
        if (!vectorDatabase) {
          throw new Error("Failed to save vectorDatabase");
        }
        const vectorDatabaseNode = await createOrUpdateFlowNode({
          source_id: vectorDatabase.id,
          source_type: "VectorDatabase",
          node_type: FlowNodeTypeEnum.VectorDatabase,
          x: initialX,
          y: initialY + 30
        });
        if (!vectorDatabaseNode) {
          throw new Error("Failed to save vectorDatabase node");
        }
        await createOrUpdateFlowEdge({
          source: databaseSourceNode.id,
          target: vectorDatabaseNode.id
        });
        return {
          vectorDatabase,
          vectorDatabaseNode
        };
      } finally {
        setLoading(false);
      }
    }, [
      sessionId,
      createOrUpdateFlowNode,
      createOrUpdateFlowEdge
    ]);
    return {
      loading,
      createVectorDatabase
    };
  };
  const SUPPORTED_VECTOR_DATABASE_PROVIDERS = [
    VectorDatabaseProviderEnum.Memory
  ];
  const SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE = [
    VectorDatabaseStorageEnum.DataNode
  ];
  const SUPPORTED_TEXT_SPLITTERS = [
    "TokenTextSplitter",
    "CharacterTextSplitter",
    "RecursiveCharacterTextSplitter"
  ];
  const CreateVectorDatabaseCard = reactExports.memo((props) => {
    const { t: t2 } = useTranslation("components");
    const { id } = props;
    const node = useInternalNode(id);
    const { toast: toast2 } = useToast();
    const [name, setName] = reactExports.useState("");
    const [provider, setProvider] = reactExports.useState(SUPPORTED_VECTOR_DATABASE_PROVIDERS[0]);
    const [storageType, setStorageType] = reactExports.useState(SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE[0]);
    const [textSplitter, setTextSplitter] = reactExports.useState({});
    const { loading, createVectorDatabase } = useCreateVectorDatabase();
    const handleOnSelectProvider = reactExports.useCallback((value) => {
      setProvider(value);
    }, []);
    const handleOnSelectStorageType = reactExports.useCallback((value) => {
      setStorageType(value);
    }, []);
    const handleOnSelectTextSplitter = reactExports.useCallback((value) => {
      setTextSplitter((prev) => ({
        ...prev,
        type: value,
        chunkSize: 500,
        chunkOverlap: 40
      }));
    }, []);
    const handleOnChangeName = reactExports.useCallback((e3) => {
      setName(e3.target.value || "");
    }, []);
    const handleOnChangeChunkSize = reactExports.useCallback((e3) => {
      setTextSplitter((prev) => ({
        ...prev,
        chunkSize: Number(e3.target.value)
      }));
    }, []);
    const handleOnChangeChunkOverlap = reactExports.useCallback((e3) => {
      setTextSplitter((prev) => ({
        ...prev,
        chunkOverlap: Number(e3.target.value)
      }));
    }, []);
    const handleSubmit = async () => {
      try {
        if (!node) {
          return;
        }
        await createVectorDatabase(node, {
          name,
          provider,
          storage: storageType
        }, (textSplitter == null ? void 0 : textSplitter.type) ? {
          type: textSplitter.type,
          chunkSize: textSplitter.chunkSize || 500,
          chunkOverlap: textSplitter.chunkOverlap || 0
        } : void 0);
        setName("");
        setTextSplitter({});
      } catch {
        toast2({
          variant: "destructive",
          description: t2("create_vector_database_card.errors.create_failed")
        });
      }
    };
    return jsxRuntimeExports.jsxs(Card, {
      className: "mw-full",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("create_vector_database_card.title")
          })
        }),
        jsxRuntimeExports.jsx(CardContent, {
          children: jsxRuntimeExports.jsxs("div", {
            className: "grid w-full gap-1.5",
            children: [
              jsxRuntimeExports.jsx(Label$3, {
                children: t2("create_vector_database_card.name")
              }),
              jsxRuntimeExports.jsx(Input, {
                className: "mb-4",
                value: name,
                onChange: handleOnChangeName
              }),
              (SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE == null ? void 0 : SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE.length) > 1 ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [
                  jsxRuntimeExports.jsx(Label$3, {
                    children: t2("create_vector_database_card.storage_type")
                  }),
                  jsxRuntimeExports.jsxs(Select, {
                    value: storageType,
                    onValueChange: handleOnSelectStorageType,
                    children: [
                      jsxRuntimeExports.jsx(SelectTrigger, {
                        className: "w-full mb-4",
                        children: jsxRuntimeExports.jsx(SelectValue, {
                          placeholder: t2("create_vector_database_card.provider_select_placeholder")
                        })
                      }),
                      jsxRuntimeExports.jsx(SelectContent, {
                        children: Object.values(SUPPORTED_VECTOR_DATABASE_SOURCE_TYPE).map((item) => {
                          return jsxRuntimeExports.jsx(SelectItem, {
                            value: item,
                            children: t2(`create_vector_database_card.storage_types.${item.toLowerCase()}`)
                          }, item);
                        })
                      })
                    ]
                  })
                ]
              }) : void 0,
              (SUPPORTED_VECTOR_DATABASE_PROVIDERS == null ? void 0 : SUPPORTED_VECTOR_DATABASE_PROVIDERS.length) > 1 ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [
                  jsxRuntimeExports.jsx(Label$3, {
                    children: t2("create_vector_database_card.provider")
                  }),
                  jsxRuntimeExports.jsxs(Select, {
                    value: provider,
                    onValueChange: handleOnSelectProvider,
                    children: [
                      jsxRuntimeExports.jsx(SelectTrigger, {
                        className: "w-full mb-4",
                        children: jsxRuntimeExports.jsx(SelectValue, {
                          placeholder: t2("create_vector_database_card.provider_select_placeholder")
                        })
                      }),
                      jsxRuntimeExports.jsx(SelectContent, {
                        children: Object.values(SUPPORTED_VECTOR_DATABASE_PROVIDERS).map((item) => {
                          return jsxRuntimeExports.jsx(SelectItem, {
                            value: item,
                            children: t2(`create_vector_database_card.providers.${item.toLowerCase()}`)
                          }, item);
                        })
                      })
                    ]
                  })
                ]
              }) : void 0,
              jsxRuntimeExports.jsx(Label$3, {
                children: t2("create_vector_database_card.text_splitter")
              }),
              jsxRuntimeExports.jsxs(Select, {
                value: textSplitter.type,
                onValueChange: handleOnSelectTextSplitter,
                children: [
                  jsxRuntimeExports.jsx(SelectTrigger, {
                    className: "w-full mb-4",
                    children: jsxRuntimeExports.jsx(SelectValue, {
                      placeholder: t2("create_vector_database_card.text_splitter_select_placeholder")
                    })
                  }),
                  jsxRuntimeExports.jsx(SelectContent, {
                    children: Object.values(SUPPORTED_TEXT_SPLITTERS).map((item) => {
                      return jsxRuntimeExports.jsx(SelectItem, {
                        value: item,
                        children: t2(`create_vector_database_card.text_splitters.${item.toLowerCase()}`)
                      }, item);
                    })
                  })
                ]
              }),
              textSplitter.type ? jsxRuntimeExports.jsxs(Card, {
                children: [
                  jsxRuntimeExports.jsx(CardHeader, {
                    children: jsxRuntimeExports.jsx(CardTitle, {
                      children: t2("create_vector_database_card.text_splitter_configuration")
                    })
                  }),
                  jsxRuntimeExports.jsxs(CardContent, {
                    children: [
                      jsxRuntimeExports.jsx(Label$3, {
                        children: t2("create_vector_database_card.text_splitter_chunksize")
                      }),
                      jsxRuntimeExports.jsx(Input, {
                        value: textSplitter.chunkSize,
                        onChange: handleOnChangeChunkSize,
                        placeholder: t2("create_vector_database_card.text_splitter_chunksize_placeholder")
                      }),
                      jsxRuntimeExports.jsx(Label$3, {
                        children: t2("create_vector_database_card.text_splitter_chunkoverlap")
                      }),
                      jsxRuntimeExports.jsx(Input, {
                        value: textSplitter.chunkOverlap,
                        onChange: handleOnChangeChunkOverlap,
                        placeholder: t2("create_vector_database_card.text_splitter_chunkoverlap_placeholder")
                      })
                    ]
                  })
                ]
              }) : void 0
            ]
          })
        }),
        jsxRuntimeExports.jsx(CardFooter, {
          className: "flex justify-between",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            disabled: !textSplitter.type || !name,
            loading,
            onClick: handleSubmit,
            className: "w-full",
            children: t2("create_vector_database_card.create")
          })
        })
      ]
    });
  });
  const SvgLogo = (props) => reactExports.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "512.000000pt",
    height: "512.000000pt",
    viewBox: "64 64 384.000000 384.000000",
    preserveAspectRatio: "xMidYMid meet",
    fill: "#000000",
    ...props
  }, reactExports.createElement("g", {
    transform: "translate(0.000000,512.000000) scale(0.100000,-0.100000)",
    stroke: "none"
  }, reactExports.createElement("path", {
    d: "M1953 3948 c-13 -21 -16 -289 -4 -369 15 -97 39 -193 62 -247 l18 -42 -69 -133 -69 -132 32 -22 c18 -12 40 -25 49 -28 24 -9 13 -25 -18 -25 -13 0 -24 -4 -24 -9 0 -13 40 -60 61 -71 10 -6 107 -15 215 -21 175 -9 198 -8 214 6 10 9 33 18 51 21 31 4 40 -1 92 -52 64 -63 70 -88 25 -114 -22 -12 -33 -12 -58 -3 -34 13 -41 0 -9 -17 24 -13 73 -5 89 15 10 12 17 11 43 -6 41 -24 59 -24 88 2 l24 20 -28 -17 c-26 -16 -31 -16 -62 -1 -58 27 -55 54 11 120 65 65 90 71 145 34 31 -20 41 -21 114 -15 44 4 129 10 190 14 107 6 110 7 142 39 39 39 42 55 8 55 -37 0 -31 17 14 40 22 11 42 24 46 30 7 11 -13 51 -90 184 -54 95 -54 95 -39 131 8 20 27 84 41 143 24 95 27 126 28 284 0 125 -4 180 -12 189 -30 30 -262 -126 -372 -250 l-62 -70 -42 16 c-67 25 -247 28 -332 6 l-70 -19 -86 86 c-96 96 -180 160 -272 207 -70 37 -73 38 -84 21z m1117 -261 c0 -2 -9 -14 -20 -27 -11 -13 -20 -19 -20 -15 0 5 7 17 17 27 15 17 23 22 23 15z m-830 -97 c6 -11 7 -20 2 -20 -6 0 -12 9 -15 20 -3 11 -3 20 -1 20 2 0 8 -9 14 -20z m744 -15 c-9 -14 -18 -25 -21 -25 -5 0 5 18 20 38 17 22 18 13 1 -13z m-654 -534 c0 -27 4 -61 10 -75 8 -21 7 -26 -6 -26 -38 0 -100 67 -119 128 -6 21 -4 22 54 22 l61 0 0 -49z m700 39 c0 -44 -80 -140 -117 -140 -12 0 -14 7 -9 31 3 17 6 51 6 75 l0 44 60 0 c35 0 60 -4 60 -10z m-587 -35 c15 -14 27 -30 27 -34 0 -18 -42 -60 -69 -69 -29 -10 -30 -10 -20 14 5 14 9 45 9 70 0 51 12 56 53 19z m411 -37 c3 -34 4 -64 1 -66 -15 -15 -85 53 -85 82 0 7 61 46 71 46 3 0 9 -28 13 -62z"
  }), reactExports.createElement("path", {
    d: "M1590 3717 c0 -2 15 -16 33 -33 l32 -29 -29 33 c-28 30 -36 37 -36 29z"
  }), reactExports.createElement("path", {
    d: "M1723 2863 c26 -2 68 -2 95 0 26 2 4 3 -48 3 -52 0 -74 -1 -47 -3z"
  }), reactExports.createElement("path", {
    d: "M3403 2863 c31 -2 83 -2 115 0 31 2 5 3 -58 3 -63 0 -89 -1 -57 -3z"
  }), reactExports.createElement("path", {
    d: "M3258 2853 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M2010 2830 c4 -8 20 -26 35 -40 l27 -25 -24 -6 c-16 -4 -7 -7 32 -13 58 -7 245 20 305 44 30 12 30 12 7 21 -23 9 -190 25 -324 32 -57 2 -65 1 -58 -13z"
  }), reactExports.createElement("path", {
    d: "M3165 2844 c-148 -9 -306 -28 -293 -35 8 -6 -3 -9 -32 -10 -39 -1 -36 -3 25 -11 39 -5 79 -13 90 -18 33 -15 173 -32 197 -24 13 4 37 7 53 7 29 0 29 0 3 4 -33 5 -35 14 -7 39 29 26 44 55 27 52 -7 -1 -35 -3 -63 -4z"
  }), reactExports.createElement("path", {
    d: "M2300 2749 c-63 -10 -130 -19 -147 -20 -37 -3 -40 -7 -17 -24 14 -9 -3 -19 -100 -60 -63 -27 -114 -51 -112 -53 3 -2 57 19 121 47 l117 50 41 -30 c51 -37 105 -61 121 -53 6 3 -11 -14 -39 -38 -172 -148 -266 -262 -325 -392 -16 -35 -36 -66 -45 -70 -9 -3 -55 -6 -102 -6 -94 0 -130 -16 -158 -70 -20 -39 -19 -80 10 -341 32 -287 32 -264 -5 -242 -56 33 -110 97 -139 168 -43 104 -99 136 -175 100 -122 -58 -74 -289 92 -450 65 -63 155 -118 231 -140 l59 -18 6 -56 c4 -31 15 -71 26 -89 39 -64 1 -62 962 -62 848 0 874 1 905 20 61 37 61 34 119 556 58 521 58 539 12 581 -44 40 -62 43 -242 43 l-176 0 -40 82 c-73 146 -155 247 -294 356 l-77 61 43 22 c23 12 60 33 81 47 32 21 41 23 63 13 36 -16 44 -13 12 5 -32 17 -36 31 -10 37 9 3 -2 5 -24 6 -23 0 -77 7 -120 15 -90 16 -164 26 -164 21 0 -2 31 -13 70 -25 63 -20 69 -23 60 -41 -23 -42 -111 -99 -194 -124 -99 -30 -148 -31 -236 -5 -73 22 -182 87 -200 119 -12 23 -15 21 85 60 59 24 54 24 -95 0z m1414 -684 c35 -23 56 -65 56 -112 1 -65 -91 -906 -103 -947 -7 -22 -24 -48 -40 -60 -28 -21 -34 -21 -900 -24 -851 -2 -873 -2 -904 17 -18 11 -39 30 -47 43 -15 23 -39 208 -71 538 -9 85 -22 211 -30 280 -22 184 -21 194 19 238 34 37 35 37 133 43 54 4 494 6 979 4 823 -2 883 -4 908 -20z"
  }), reactExports.createElement("path", {
    d: "M1973 2743 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M3263 2743 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M1908 2733 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M2435 2730 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0 -8 -4 -11 -10z"
  }), reactExports.createElement("path", {
    d: "M3328 2733 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M1848 2723 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M3383 2723 c9 -2 23 -2 30 0 6 3 -1 5 -18 5 -16 0 -22 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M1798 2713 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M3438 2713 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"
  }), reactExports.createElement("path", {
    d: "M1738 2703 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M3488 2703 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"
  }), reactExports.createElement("path", {
    d: "M1688 2693 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"
  }), reactExports.createElement("path", {
    d: "M3538 2693 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"
  }), reactExports.createElement("path", {
    d: "M3170 2660 c8 -5 20 -10 25 -10 6 0 3 5 -5 10 -8 5 -19 10 -25 10 -5 0 -3 -5 5 -10z"
  }), reactExports.createElement("path", {
    d: "M3230 2635 c14 -8 30 -14 35 -14 6 0 -1 6 -15 14 -14 8 -29 14 -35 14 -5 0 1 -6 15 -14z"
  }), reactExports.createElement("path", {
    d: "M3349 2584 c41 -19 76 -33 78 -31 4 5 -133 67 -145 66 -4 0 26 -16 67 -35z"
  }), reactExports.createElement("path", {
    d: "M1860 2570 c-8 -5 -10 -10 -5 -10 6 0 17 5 25 10 8 5 11 10 5 10 -5 0 -17 -5 -25 -10z"
  }), reactExports.createElement("path", {
    d: "M1764 2524 c-18 -14 -18 -14 6 -3 31 14 36 19 24 19 -6 0 -19 -7 -30 -16z"
  }), reactExports.createElement("path", {
    d: "M3470 2530 c8 -5 20 -10 25 -10 6 0 3 5 -5 10 -8 5 -19 10 -25 10 -5 0 -3 -5 5 -10z"
  })));
  function DataTable({ data }) {
    const { t: t2 } = useTranslation("components");
    return jsxRuntimeExports.jsxs(Table, {
      className: "w-full",
      children: [
        jsxRuntimeExports.jsx(TableHeader, {
          children: jsxRuntimeExports.jsx(TableRow, {
            children: jsxRuntimeExports.jsx(TableHead, {
              children: t2("add_text_data.text")
            })
          })
        }),
        jsxRuntimeExports.jsx(TableBody, {
          children: data == null ? void 0 : data.map((item, index2) => jsxRuntimeExports.jsx(TableRow, {
            children: jsxRuntimeExports.jsx(TableCell, {
              className: "p-4",
              children: item.text
            })
          }, `${item.text}_${index2}`))
        })
      ]
    });
  }
  const CreateTextDataCard = reactExports.memo((props) => {
    const { id } = props;
    const { t: t2 } = useTranslation("components");
    const [data, setData] = reactExports.useState([]);
    const [text, setText] = reactExports.useState("");
    const node = useInternalNode(id);
    const { createCSVData, loading } = useCreateCSVData();
    const handleAdd = () => {
      setData((prevData) => [
        ...prevData,
        {
          text
        }
      ]);
      setText("");
    };
    const handleCreateCSVData = async () => {
      if (node) {
        await createCSVData(node, [
          "text"
        ], data.map((item) => [
          item.text
        ]));
      }
    };
    return jsxRuntimeExports.jsxs(Card, {
      className: "mw-full",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_text_data.title")
          })
        }),
        jsxRuntimeExports.jsxs(CardContent, {
          children: [
            jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col space-y-1.5 mt-3",
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  htmlFor: "name",
                  children: t2("add_text_data.text")
                }),
                jsxRuntimeExports.jsx(Textarea, {
                  value: text,
                  onChange: (e3) => setText(e3.target.value || ""),
                  placeholder: t2("add_text_data.text_placeholder")
                })
              ]
            }),
            jsxRuntimeExports.jsx("div", {
              className: "w-full flex mt-4 justify-end",
              children: jsxRuntimeExports.jsx(Button, {
                disabled: !text,
                onClick: handleAdd,
                className: "w-40",
                children: t2("add_text_data.add")
              })
            }),
            jsxRuntimeExports.jsx(DataTable, {
              data: data || []
            })
          ]
        }),
        jsxRuntimeExports.jsx(CardFooter, {
          className: "flex justify-between",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            loading,
            disabled: !(data == null ? void 0 : data.length),
            onClick: handleCreateCSVData,
            className: "w-full",
            children: t2("add_text_data.create")
          })
        })
      ]
    });
  });
  var SupportedAddNodeEnum = ((SupportedAddNodeEnum2) => {
    SupportedAddNodeEnum2["ADD_LLM"] = "ADD_LLM";
    SupportedAddNodeEnum2["ADD_PROMPT"] = "ADD_PROMPT";
    SupportedAddNodeEnum2["ADD_TOOL_DEFINITION"] = "ADD_TOOL_DEFINITION";
    SupportedAddNodeEnum2["ADD_SCHEMA"] = "ADD_SCHEMA";
    SupportedAddNodeEnum2["ADD_FEW_SHOT_EXAMPLE"] = "ADD_FEW_SHOT_EXAMPLE";
    SupportedAddNodeEnum2["ADD_VECTOR_DATABASE"] = "ADD_VECTOR_DATABASE";
    SupportedAddNodeEnum2["ADD_TEXT_DATA"] = "ADD_TEXT_DATA";
    return SupportedAddNodeEnum2;
  })(SupportedAddNodeEnum || {});
  const SUPPORTED_MODES = [
    "ADD_LLM",
    "ADD_PROMPT",
    "ADD_SCHEMA",
    "ADD_VECTOR_DATABASE",
    {
      key: "more",
      label: "more",
      icon: "ellipsis",
      children: [
        "ADD_TOOL_DEFINITION",
        "ADD_FEW_SHOT_EXAMPLE"
      ]
    }
  ];
  const getContainer = () => {
    const id = "_coolMode_effect";
    const existingContainer = document.getElementById(id);
    if (existingContainer) {
      return existingContainer;
    }
    const container = document.createElement("div");
    container.setAttribute("id", id);
    container.setAttribute("style", "overflow:hidden; position:fixed; height:100%; top:0; left:0; right:0; bottom:0; pointer-events:none; z-index:2147483647");
    document.body.appendChild(container);
    return container;
  };
  let instanceCounter = 0;
  const applyParticleEffect = (element, options) => {
    instanceCounter++;
    const defaultParticle = "circle";
    const particleType = (options == null ? void 0 : options.particle) || defaultParticle;
    const sizes = [
      15,
      20,
      25,
      35,
      45
    ];
    const limit = 45;
    let particles = [];
    let autoAddParticle = false;
    let mouseX = 0;
    let mouseY = 0;
    const container = getContainer();
    function generateParticle() {
      const size = (options == null ? void 0 : options.size) || sizes[Math.floor(Math.random() * sizes.length)];
      const speedHorz = (options == null ? void 0 : options.speedHorz) || Math.random() * 10;
      const speedUp = (options == null ? void 0 : options.speedUp) || Math.random() * 25;
      const spinVal = Math.random() * 360;
      const spinSpeed = Math.random() * 35 * (Math.random() <= 0.5 ? -1 : 1);
      const top = mouseY - size / 2;
      const left = mouseX - size / 2;
      const direction = Math.random() <= 0.5 ? -1 : 1;
      const particle = document.createElement("div");
      if (particleType === "circle") {
        const svgNS = "http://www.w3.org/2000/svg";
        const circleSVG = document.createElementNS(svgNS, "svg");
        const circle = document.createElementNS(svgNS, "circle");
        circle.setAttributeNS(null, "cx", (size / 2).toString());
        circle.setAttributeNS(null, "cy", (size / 2).toString());
        circle.setAttributeNS(null, "r", (size / 2).toString());
        circle.setAttributeNS(null, "fill", `hsl(${Math.random() * 360}, 70%, 50%)`);
        circleSVG.appendChild(circle);
        circleSVG.setAttribute("width", size.toString());
        circleSVG.setAttribute("height", size.toString());
        particle.appendChild(circleSVG);
      } else {
        particle.innerHTML = `<img src="${particleType}" width="${size}" height="${size}" style="border-radius: 50%">`;
      }
      particle.style.position = "absolute";
      particle.style.transform = `translate3d(${left}px, ${top}px, 0px) rotate(${spinVal}deg)`;
      container.appendChild(particle);
      particles.push({
        direction,
        element: particle,
        left,
        size,
        speedHorz,
        speedUp,
        spinSpeed,
        spinVal,
        top
      });
    }
    function refreshParticles() {
      particles.forEach((p2) => {
        p2.left = p2.left - p2.speedHorz * p2.direction;
        p2.top = p2.top - p2.speedUp;
        p2.speedUp = Math.min(p2.size, p2.speedUp - 1);
        p2.spinVal = p2.spinVal + p2.spinSpeed;
        if (p2.top >= Math.max(window.innerHeight, document.body.clientHeight) + p2.size) {
          particles = particles.filter((o) => o !== p2);
          p2.element.remove();
        }
        p2.element.setAttribute("style", [
          "position:absolute",
          "will-change:transform",
          `top:${p2.top}px`,
          `left:${p2.left}px`,
          `transform:rotate(${p2.spinVal}deg)`
        ].join(";"));
      });
    }
    let animationFrame;
    let lastParticleTimestamp = 0;
    const particleGenerationDelay = 30;
    function loop() {
      const currentTime = performance.now();
      if (autoAddParticle && particles.length < limit && currentTime - lastParticleTimestamp > particleGenerationDelay) {
        generateParticle();
        lastParticleTimestamp = currentTime;
      }
      refreshParticles();
      animationFrame = requestAnimationFrame(loop);
    }
    loop();
    const isTouchInteraction = "ontouchstart" in window;
    const tap = isTouchInteraction ? "touchstart" : "mousedown";
    const tapEnd = isTouchInteraction ? "touchend" : "mouseup";
    const move = isTouchInteraction ? "touchmove" : "mousemove";
    const updateMousePosition = (e3) => {
      var _a, _b;
      if ("touches" in e3) {
        mouseX = (_a = e3.touches) == null ? void 0 : _a[0].clientX;
        mouseY = (_b = e3.touches) == null ? void 0 : _b[0].clientY;
      } else {
        mouseX = e3.clientX;
        mouseY = e3.clientY;
      }
    };
    const tapHandler = (e3) => {
      updateMousePosition(e3);
      autoAddParticle = true;
    };
    const disableAutoAddParticle = () => {
      autoAddParticle = false;
    };
    element.addEventListener(move, updateMousePosition, {
      passive: true
    });
    element.addEventListener(tap, tapHandler, {
      passive: true
    });
    element.addEventListener(tapEnd, disableAutoAddParticle, {
      passive: true
    });
    element.addEventListener("mouseleave", disableAutoAddParticle, {
      passive: true
    });
    return () => {
      element.removeEventListener(move, updateMousePosition);
      element.removeEventListener(tap, tapHandler);
      element.removeEventListener(tapEnd, disableAutoAddParticle);
      element.removeEventListener("mouseleave", disableAutoAddParticle);
      const interval = setInterval(() => {
        if (animationFrame && particles.length === 0) {
          cancelAnimationFrame(animationFrame);
          clearInterval(interval);
          if (--instanceCounter === 0) {
            container.remove();
          }
        }
      }, 500);
    };
  };
  const CoolMode = ({ children, options }) => {
    const ref = reactExports.useRef(null);
    reactExports.useEffect(() => {
      if (ref.current) {
        return applyParticleEffect(ref.current, options);
      }
    }, [
      options
    ]);
    return React.cloneElement(children, {
      ref
    });
  };
  const ToolbarNode = reactExports.memo((props) => {
    const { t: t2 } = useTranslation("flows");
    const theme = useAppState((state) => state.theme);
    const [mode, setMode] = reactExports.useState(`${SupportedAddNodeEnum.ADD_LLM}`);
    const menu = reactExports.useMemo(() => {
      return jsxRuntimeExports.jsxs(Menubar, {
        children: [
          jsxRuntimeExports.jsx(MenubarMenu, {
            children: jsxRuntimeExports.jsx(CoolMode, {
              children: jsxRuntimeExports.jsx(Button, {
                variant: "link",
                className: "!p-0 !pl-3",
                children: jsxRuntimeExports.jsx(SvgLogo, {
                  width: 32,
                  height: 32,
                  className: cn(theme === "dark" ? "fill-white" : "fill-black")
                })
              })
            })
          }),
          SUPPORTED_MODES.map((mode2) => {
            if (typeof mode2 === "object") {
              return jsxRuntimeExports.jsxs(MenubarMenu, {
                children: [
                  jsxRuntimeExports.jsx(MenubarTrigger, {
                    children: mode2.icon ? jsxRuntimeExports.jsx(LazyIcon, {
                      name: mode2.icon
                    }) : t2(`supported_nodes.${mode2.label}`)
                  }),
                  jsxRuntimeExports.jsx(MenubarContent, {
                    children: mode2.children.map((child) => {
                      return jsxRuntimeExports.jsx(MenubarItem, {
                        onClick: () => setMode(child),
                        children: t2(`supported_nodes.${child.toLowerCase()}`)
                      }, child);
                    })
                  })
                ]
              }, mode2.key);
            }
            return jsxRuntimeExports.jsx(MenubarMenu, {
              children: jsxRuntimeExports.jsx(MenubarTrigger, {
                value: mode2,
                onClick: () => setMode(mode2),
                children: t2(`supported_nodes.${mode2.toLowerCase()}`)
              })
            }, mode2);
          })
        ]
      });
    }, [
      t2,
      theme
    ]);
    const modeToComponent = reactExports.useMemo(() => {
      switch (mode) {
        case SupportedAddNodeEnum.ADD_LLM:
          return jsxRuntimeExports.jsx(CreateLLMCard, {
            ...props
          });
        case SupportedAddNodeEnum.ADD_PROMPT:
          return jsxRuntimeExports.jsx(CreatePromptCard, {
            ...props
          });
        case SupportedAddNodeEnum.ADD_SCHEMA:
          return jsxRuntimeExports.jsx(CreateSchemaCard, {
            ...props
          });
        case SupportedAddNodeEnum.ADD_FEW_SHOT_EXAMPLE:
          return jsxRuntimeExports.jsx(CreateFewShotExampleCard, {
            ...props
          });
        case SupportedAddNodeEnum.ADD_TOOL_DEFINITION:
          return jsxRuntimeExports.jsx(CreateToolCard, {
            ...props
          });
        case SupportedAddNodeEnum.ADD_VECTOR_DATABASE:
          return jsxRuntimeExports.jsx(CreateVectorDatabaseCard, {
            ...props
          });
        case SupportedAddNodeEnum.ADD_TEXT_DATA:
          return jsxRuntimeExports.jsx(CreateTextDataCard, {
            ...props
          });
      }
    }, [
      props,
      mode
    ]);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        menu,
        jsxRuntimeExports.jsx("div", {
          className: "mt-4",
          children: modeToComponent
        })
      ]
    });
  });
  const useCreateStandaloneSession = () => {
    const [loading, setLoading] = reactExports.useState(false);
    const currentSession = useSessionState((state) => state.currentSession);
    const getLatestApplications = useSessionState((state) => state.getLatestApplications);
    const cloneNode = reactExports.useCallback(async (newSession, node, newEntityIDMap, newFlowNodeIDMap) => {
      var _a;
      const entity = (_a = node.data) == null ? void 0 : _a.entity;
      let entityName = node.type ? flowNodeTypeToEntity[node.type] : void 0;
      if (entityName && entity && node && typeof entity === "object" && "id" in entity && !newEntityIDMap.has(`${entity.id}`)) {
        entityName = entityName;
        const cloneEntity = await getRepository(entityName).save({
          ...entity,
          ...entity && typeof entity === "object" && "session_id" in entity ? {
            session_id: newSession.id
          } : {}
        });
        newEntityIDMap.set(`${entity.id}`, cloneEntity.id);
        const cloneFlowNode = await getRepository("FlowNode").save({
          ...node.data.flowNode,
          session_id: newSession.id,
          id: void 0,
          source_type: entityName,
          source_id: cloneEntity.id
        });
        newFlowNodeIDMap.set(`${node.id}`, cloneFlowNode.id);
        return {
          entityName,
          entity: cloneEntity,
          node: cloneFlowNode
        };
      }
    }, []);
    const createStandaloneSession = reactExports.useCallback(async (node, options) => {
      try {
        if (!currentSession) {
          throw new Error("No current session");
        }
        setLoading(true);
        const standaloneSession = await getRepository("Session").save({
          type: SessionTypeEnum.StandaloneApp,
          name: options.name || ((currentSession == null ? void 0 : currentSession.name) ? `${currentSession.name}` : "Standalone"),
          status: SessionStatusEnum.Started
        });
        if (!standaloneSession) {
          throw new Error("Failed create standalone session");
        }
        const newEntityIDMap = /* @__PURE__ */ new Map();
        const newFlowNodeIDMap = /* @__PURE__ */ new Map();
        const mainNodeInfo = await cloneNode(standaloneSession, node, newEntityIDMap, newFlowNodeIDMap);
        if (!mainNodeInfo) {
          throw new Error("Failed to clone main node");
        }
        await getRepository("Session").update(standaloneSession.id, {
          main_node_id: mainNodeInfo.node.id,
          main_source_id: mainNodeInfo.entity.id,
          main_source_type: mainNodeInfo.entityName
        });
        for (const { node: node2, connectedNodes } of options.connections) {
          await cloneNode(standaloneSession, node2, newEntityIDMap, newFlowNodeIDMap);
          if (connectedNodes) {
            for (const connectedNode of connectedNodes) {
              await cloneNode(standaloneSession, connectedNode, newEntityIDMap, newFlowNodeIDMap);
            }
          }
        }
        for (const { connections } of options.connections) {
          for (const connection of connections) {
            const sourceId = newFlowNodeIDMap.get(`${connection.source}`);
            const targetId = newFlowNodeIDMap.get(`${connection.target}`);
            if (!sourceId || !targetId) {
              throw new Error("Failed to get connected flow node id");
            }
            await getRepository("FlowEdge").save({
              source: sourceId,
              target: targetId,
              sourceHandle: connection.sourceHandle,
              targetHandle: connection.targetHandle,
              session_id: standaloneSession.id
            });
          }
        }
        getLatestApplications();
        return true;
      } finally {
        setLoading(false);
      }
    }, [
      cloneNode,
      currentSession,
      getLatestApplications
    ]);
    return {
      loading,
      createStandaloneSession
    };
  };
  const useDeleteNodeFlow = () => {
    const [loading, setLoading] = reactExports.useState(false);
    const updateNode = useFlowState((state) => state.updateNodes);
    const updateEdges = useFlowState((state) => state.updateEdges);
    const deleteNodeFlow = reactExports.useCallback(async (id) => {
      try {
        setLoading(true);
        await getRepository("FlowNode").delete(id);
        const edges = await getRepository("FlowEdge").find({
          where: [
            {
              source: id
            },
            {
              target: id
            }
          ]
        });
        await Promise.all(edges.map((edge) => getRepository("FlowEdge").delete(edge.id)));
        await updateNode([
          {
            id,
            type: "remove"
          }
        ]);
        await updateEdges(edges.map((edge) => ({
          id: edge.id,
          type: "remove"
        })));
        return true;
      } catch {
        return false;
      } finally {
        setLoading(false);
      }
    }, [
      updateEdges,
      updateNode
    ]);
    return {
      loading,
      deleteNodeFlow
    };
  };
  const CreateStandaloneApplicationDialog = create$1(({ cloneStandaloneSession }) => {
    const currentModal = useModal();
    const { t: t2 } = useTranslation("dialogs");
    const [name, setName] = reactExports.useState("");
    const { toast: toast2 } = useToast();
    const handleChangeName = (e3) => {
      setName(e3.target.value);
    };
    const handleSubmit = async () => {
      try {
        currentModal.hide();
        await cloneStandaloneSession(name);
      } catch {
        toast2({
          variant: "destructive",
          description: t2("create_standalone_application.errors.create_failed")
        });
      }
    };
    return jsxRuntimeExports.jsx(Dialog, {
      open: currentModal.visible,
      onOpenChange: currentModal.hide,
      children: jsxRuntimeExports.jsxs(DialogContent, {
        className: "sm:max-w-[425px]",
        children: [
          jsxRuntimeExports.jsxs(DialogHeader, {
            children: [
              jsxRuntimeExports.jsx(DialogTitle, {
                children: t2("create_session.title")
              }),
              jsxRuntimeExports.jsx(DialogDescription, {
                children: t2("create_standalone_application.description")
              })
            ]
          }),
          jsxRuntimeExports.jsx("div", {
            className: "grid gap-4 py-4",
            children: jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col space-y-1.5",
              children: [
                jsxRuntimeExports.jsx(Label$3, {
                  className: "mb-2",
                  htmlFor: "name",
                  children: t2("create_standalone_application.name")
                }),
                jsxRuntimeExports.jsx(Input, {
                  onChange: handleChangeName,
                  id: "name",
                  value: name,
                  placeholder: t2("create_standalone_application.name_placeholder")
                })
              ]
            })
          }),
          jsxRuntimeExports.jsx(DialogFooter, {
            children: jsxRuntimeExports.jsx(Button, {
              onClick: handleSubmit,
              disabled: !name,
              type: "submit",
              children: t2("create_standalone_application.create")
            })
          })
        ]
      })
    });
  });
  const NodeHeader = reactExports.memo(({ id, className, enableToStandalone, getLinkedConnections }) => {
    const { t: t2 } = useTranslation("common");
    const { getNode } = useReactFlow();
    const { loading: deleting, deleteNodeFlow } = useDeleteNodeFlow();
    const { createStandaloneSession } = useCreateStandaloneSession();
    const { toast: toast2 } = useToast();
    const createStandaloneApplicationDialog = useModal(CreateStandaloneApplicationDialog);
    const handleDelete = reactExports.useCallback(async () => {
      try {
        await deleteNodeFlow(id);
        toast2({
          description: t2("deleted")
        });
      } catch {
        toast2({
          description: t2("errors.delete_failed"),
          variant: "destructive"
        });
      }
    }, [
      deleteNodeFlow,
      id,
      toast2,
      t2
    ]);
    const cloneStandaloneSession = reactExports.useCallback(async (name) => {
      try {
        const currentNode = getNode(id);
        if (!currentNode) {
          throw new Error("No current node");
        }
        const connections = (getLinkedConnections == null ? void 0 : getLinkedConnections(id)) || [];
        await createStandaloneSession(currentNode, {
          name,
          connections
        });
        toast2({
          description: t2("standalone_session_created")
        });
      } catch (error) {
        logError(error);
        toast2({
          description: t2("errors.create_standalone_session_failed"),
          variant: "destructive"
        });
      }
    }, [
      getNode,
      id,
      getLinkedConnections,
      createStandaloneSession,
      toast2,
      t2
    ]);
    const handleCreateStandaloneApplication = reactExports.useCallback(() => {
      createStandaloneApplicationDialog.show({
        cloneStandaloneSession
      });
    }, [
      cloneStandaloneSession,
      createStandaloneApplicationDialog
    ]);
    return jsxRuntimeExports.jsxs("div", {
      className: cn("flex absolute z-[51] right-0 top-0 h-10", className),
      children: [
        enableToStandalone ? jsxRuntimeExports.jsx(Button, {
          className: "!rounded-none !px-2",
          onClick: handleCreateStandaloneApplication,
          variant: "ghost",
          children: jsxRuntimeExports.jsx(LazyIcon, {
            name: "package-plus",
            size: 16
          })
        }) : void 0,
        jsxRuntimeExports.jsx(LoadingButton, {
          loading: deleting,
          className: "!rounded-none !px-2",
          onClick: handleDelete,
          variant: "ghost",
          children: jsxRuntimeExports.jsx(LazyIcon, {
            name: "trash-2",
            size: 16
          })
        })
      ]
    });
  });
  const BorderBeam = ({ className, size = 200, duration = 15, anchor = 90, borderWidth = 1.5, colorFrom = "#ffaa40", colorTo = "#9c40ff", delay = 0 }) => {
    return jsxRuntimeExports.jsx("div", {
      style: {
        "--size": size,
        "--duration": duration,
        "--anchor": anchor,
        "--border-width": borderWidth,
        "--color-from": colorFrom,
        "--color-to": colorTo,
        "--delay": `-${delay}s`
      },
      className: cn("pointer-events-none absolute inset-0 rounded-[inherit] [border:calc(var(--border-width)*1px)_solid_transparent]", "![mask-clip:padding-box,border-box] ![mask-composite:intersect] [mask:linear-gradient(transparent,transparent),linear-gradient(white,white)]", "after:absolute after:aspect-square after:w-[calc(var(--size)*1px)] after:animate-border-beam after:[animation-delay:var(--delay)] after:[background:linear-gradient(to_left,var(--color-from),var(--color-to),transparent)] after:[offset-anchor:calc(var(--anchor)*1%)_50%] after:[offset-path:rect(0_auto_auto_0_round_calc(var(--size)*1px))]", className)
    });
  };
  const DefaultHandle = reactExports.memo((props) => {
    const { className, ...rest } = props;
    return jsxRuntimeExports.jsx(Handle, {
      className: cn("!w-2 !h-2 !border-none !rounded-full !bg-slate-700", props.position === Position.Top ? "!top-[-2px]" : "", className),
      ...rest
    });
  });
  const useCreateThread = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const createThread = reactExports.useCallback(async (source, options) => {
      var _a, _b, _c, _d, _e;
      setLoading(true);
      try {
        const llm = (_a = source.data) == null ? void 0 : _a.entity;
        if (!llm || !sessionId) {
          throw new Error("LLM or Session not found");
        }
        const schema = await ((_d = (_c = (_b = options == null ? void 0 : options.connectedNodes) == null ? void 0 : _b.find((node) => node.type === FlowNodeTypeEnum.Schema)) == null ? void 0 : _c.data) == null ? void 0 : _d.entity);
        const initialX = source.position.x;
        const initialY = source.position.y + (((_e = source.measured) == null ? void 0 : _e.height) || 0);
        const thread = await getRepository("Thread").save({
          initial_llm_id: llm.id,
          title: `New thread with ${llm.name}`,
          status: ThreadStatusEnum.Started,
          messages: [],
          session_id: sessionId,
          schema_id: schema == null ? void 0 : schema.id
        });
        const flowNode = await createOrUpdateFlowNode({
          source_id: thread.id,
          source_type: "Thread",
          node_type: FlowNodeTypeEnum.Thread,
          x: initialX,
          y: initialY + 60
        });
        if (!flowNode) {
          throw new Error("Failed to create thread node");
        }
        const flowEdge = await createOrUpdateFlowEdge({
          source: source.id,
          target: flowNode.id
        });
        return {
          thread,
          flowNode,
          flowEdge
        };
      } finally {
        setLoading(false);
      }
    }, [
      createOrUpdateFlowEdge,
      createOrUpdateFlowNode,
      sessionId
    ]);
    return {
      loading,
      createThread
    };
  };
  const useActions$6 = (id, data) => {
    var _a;
    const { t: t2 } = useTranslation("flows");
    const { toast: toast2 } = useToast();
    const [loadingModel, setLoadingModel] = reactExports.useState(false);
    const [queringThreads, setQueringThreads] = reactExports.useState(false);
    const node = useInternalNode(id);
    const loadModel = useLocalLLMState((state) => state.loadModel);
    const { createThread, loading: creatingThread } = useCreateThread();
    const updateNodes = useFlowState((state) => state.updateNodes);
    const pushSyncNodeQueue = useFlowState((state) => state.pushSyncNodeQueue);
    const { getNode, getNodes, getHandleConnections } = useReactFlow();
    const queryThreadsFromModel = reactExports.useCallback(async () => {
      try {
        setQueringThreads(true);
        if (data.entity.id) {
          const threads = await getRepository("Thread").find({
            where: {
              initial_llm_id: data.entity.id
            }
          });
          pushSyncNodeQueue("Thread", {
            where: {
              source_type: "Thread",
              source_id: In(threads.map((thread) => thread.id))
            }
          });
        }
      } finally {
        setQueringThreads(false);
      }
    }, [
      (_a = data == null ? void 0 : data.entity) == null ? void 0 : _a.id,
      pushSyncNodeQueue
    ]);
    const handleLoadModel = reactExports.useCallback(async () => {
      try {
        setLoadingModel(true);
        if (data.entity && node) {
          await (loadModel == null ? void 0 : loadModel(`${data.entity.name}`));
          const llmNodeChanges = getNodes().filter((node2) => node2.type === FlowNodeTypeEnum.LLM).map((node2) => {
            node2.data.status = LLMStatusEnum.Started;
            return {
              id: node2.id,
              type: "replace",
              item: node2
            };
          });
          node.data.status = LLMStatusEnum.Loading;
          llmNodeChanges.push({
            id,
            type: "replace",
            item: node
          });
          updateNodes(llmNodeChanges);
          await queryThreadsFromModel();
        }
      } catch (error) {
        logWarn(error);
        toast2({
          variant: "destructive",
          description: t2("llm_node.errors.loading_model")
        });
      } finally {
        setLoadingModel(false);
      }
    }, [
      data.entity,
      getNodes,
      id,
      loadModel,
      node,
      queryThreadsFromModel,
      t2,
      toast2,
      updateNodes
    ]);
    const handleCreateThread = reactExports.useCallback(async () => {
      if (data.entity && node) {
        const connections = getHandleConnections({
          type: "target",
          nodeId: node.id
        }).map((connection) => getNode(connection.source)).filter(Boolean);
        await (createThread == null ? void 0 : createThread(node, {
          connectedNodes: connections
        }));
      }
    }, [
      data.entity,
      node,
      getHandleConnections,
      createThread,
      getNode
    ]);
    return {
      loadingModel,
      creatingThread,
      queringThreads,
      loadModel: handleLoadModel,
      createThread: handleCreateThread,
      queryThreads: queryThreadsFromModel
    };
  };
  useBaseConnectionToHandler = (id, handlerFunction) => {
    const [handling, setHandling] = reactExports.useState(false);
    const [newTargetConnection, setNewTargetConnection] = reactExports.useState([]);
    const { deleteElements, getNode } = useReactFlow();
    useHandleConnections({
      type: "target",
      nodeId: id,
      onConnect: (newConnections) => {
        if (newConnections == null ? void 0 : newConnections.length) {
          setNewTargetConnection((pre) => [
            ...pre,
            ...filterUserConnections(newConnections)
          ]);
        }
      }
    });
    const connectionHandler = reactExports.useCallback(async (edgeId, source, target, connection) => {
      try {
        const result = await handlerFunction({
          id,
          edgeId,
          source,
          target,
          connection
        });
        return result;
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      handlerFunction,
      id
    ]);
    reactExports.useEffect(() => {
      if (!(newTargetConnection == null ? void 0 : newTargetConnection.length) || handling) {
        return;
      }
      const handle = async () => {
        try {
          setHandling(true);
          const handlingConnections = [
            ...newTargetConnection
          ];
          setNewTargetConnection([]);
          const removeEdgeIds = [];
          const target = getNode(id);
          await Promise.all(handlingConnections.map(async (connection) => {
            const edgeId = "edgeId" in connection ? connection.edgeId : void 0;
            const source = getNode(connection.source);
            if (!source || !target) {
              return;
            }
            const response = await connectionHandler(`${edgeId}`, source, target, connection);
            if (response == null ? void 0 : response.deleteEdgeId) {
              removeEdgeIds.push(...Array.isArray(response.deleteEdgeId) ? response.deleteEdgeId : [
                response.deleteEdgeId
              ]);
            }
          }));
          if (removeEdgeIds == null ? void 0 : removeEdgeIds.length) {
            await deleteElements({
              edges: removeEdgeIds.map((id2) => ({
                id: id2
              }))
            });
          }
        } finally {
          setHandling(false);
        }
      };
      handle();
    }, [
      deleteElements,
      getNode,
      id,
      handling,
      connectionHandler,
      newTargetConnection
    ]);
  };
  const useConnectionToHandler$c = (id) => {
    const handleConnectionTo = reactExports.useCallback(async () => {
      return void 0;
    }, []);
    useBaseConnectionToHandler(id, handleConnectionTo);
  };
  const LLMNode = reactExports.memo((props) => {
    var _a, _b, _c, _d;
    const { id, data, isConnectable } = props;
    const [llmInfo, setLLMInfo] = reactExports.useState();
    const { t: t2 } = useTranslation("flows");
    const { createThread, loadModel, queringThreads, queryThreads, loadingModel } = useActions$6(id, data);
    useConnectionToHandler$c(id);
    const isLoading = [
      LLMStatusEnum.Loading,
      LLMStatusEnum.Downloading
    ].includes(data.status);
    reactExports.useEffect(() => {
      var _a2;
      if (llmInfo || !((_a2 = data == null ? void 0 : data.entity) == null ? void 0 : _a2.name)) {
        return;
      }
      __vitePreload(() => import("./index-Bh9Jxj4W.js").then(async (m2) => {
        await m2.__tla;
        return m2;
      }), true ? __vite__mapDeps([0,1,2,3,4]) : void 0).then(async ({ hasModelInCache, functionCallingModelIds, prebuiltAppConfig }) => {
        var _a3, _b2;
        const hasCache = await hasModelInCache((_a3 = data == null ? void 0 : data.entity) == null ? void 0 : _a3.name);
        setLLMInfo({
          hasCache,
          isFunctionCalling: functionCallingModelIds.includes((_b2 = data == null ? void 0 : data.entity) == null ? void 0 : _b2.name),
          info: prebuiltAppConfig.model_list.find((item) => {
            var _a4;
            return item.model_id === ((_a4 = data == null ? void 0 : data.entity) == null ? void 0 : _a4.name);
          })
        });
      });
    }, [
      (_a = data == null ? void 0 : data.entity) == null ? void 0 : _a.name,
      llmInfo
    ]);
    const llmIcon = reactExports.useMemo(() => {
      var _a2, _b2;
      switch (data.status) {
        case LLMStatusEnum.Downloading:
          return jsxRuntimeExports.jsx(LazyIcon, {
            className: "animate-spin w-7 h-7",
            name: "arrow-big-down-dash"
          });
        case LLMStatusEnum.Loaded:
          return jsxRuntimeExports.jsx(LLMIcon, {
            name: ((_a2 = data.entity) == null ? void 0 : _a2.name) || "brain",
            className: "w-7 h-7"
          });
        case LLMStatusEnum.Loading:
          return jsxRuntimeExports.jsx(LazyIcon, {
            className: "animate-spin w-7 h-7",
            name: "loader-circle"
          });
        default:
          return jsxRuntimeExports.jsx(LLMIcon, {
            name: ((_b2 = data.entity) == null ? void 0 : _b2.name) || "brain",
            className: "w-7 h-7"
          });
      }
    }, [
      (_b = data.entity) == null ? void 0 : _b.name,
      data.status
    ]);
    const actions = reactExports.useMemo(() => {
      if (isLoading) {
        return null;
      }
      if (loadingModel) {
        return jsxRuntimeExports.jsx(Button, {
          disabled: true,
          className: "w-full mt-4",
          children: jsxRuntimeExports.jsx(LazyIcon, {
            className: "animate-spin",
            size: 24,
            name: "loader-circle"
          })
        });
      }
      if (data.status === LLMStatusEnum.Loaded) {
        return jsxRuntimeExports.jsx(Button, {
          onClick: createThread,
          className: "mt-4 w-full",
          children: t2("llm_node.create_thread_button")
        });
      }
      return jsxRuntimeExports.jsxs("div", {
        className: "flex gap-2 mt-4",
        children: [
          (llmInfo == null ? void 0 : llmInfo.hasCache) ? jsxRuntimeExports.jsx(LoadingButton, {
            loading: queringThreads,
            onClick: queryThreads,
            children: jsxRuntimeExports.jsx(LazyIcon, {
              size: 24,
              name: "message-square-more"
            })
          }) : null,
          jsxRuntimeExports.jsx(Button, {
            disabled: loadingModel,
            onClick: loadModel,
            className: "w-full",
            children: t2((llmInfo == null ? void 0 : llmInfo.hasCache) ? "llm_node.load_model_button" : "llm_node.download_model_button")
          })
        ]
      });
    }, [
      isLoading,
      loadingModel,
      data.status,
      llmInfo == null ? void 0 : llmInfo.hasCache,
      queringThreads,
      queryThreads,
      loadModel,
      t2,
      createThread
    ]);
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsxs(Alert, {
              className: "flex justify-center",
              children: [
                llmIcon,
                jsxRuntimeExports.jsxs("div", {
                  className: "ml-2 pt-1 max-w-lg",
                  children: [
                    jsxRuntimeExports.jsx(AlertTitle, {
                      className: "flex gap-2 items-center pr-6",
                      children: `${((_c = data == null ? void 0 : data.entity) == null ? void 0 : _c.name) || ""}`
                    }),
                    jsxRuntimeExports.jsx(AlertDescription, {
                      className: "max-w-full",
                      children: `${data.label || ""}`
                    }),
                    jsxRuntimeExports.jsx("div", {
                      className: "max-w-full mt-2 flex-wrap flex gap-1",
                      children: jsxRuntimeExports.jsx(LLMInfo, {
                        model: llmInfo == null ? void 0 : llmInfo.info,
                        isFunctionCalling: (llmInfo == null ? void 0 : llmInfo.isFunctionCalling) || false,
                        name: (_d = data == null ? void 0 : data.entity) == null ? void 0 : _d.name,
                        isCached: (llmInfo == null ? void 0 : llmInfo.hasCache) || false
                      })
                    }),
                    actions
                  ]
                })
              ]
            }),
            isLoading ? jsxRuntimeExports.jsx(BorderBeam, {
              className: "rounded-lg"
            }) : void 0
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const NewMessageCard = reactExports.memo(({ tags, disabled, loading, onSubmit }) => {
    const { t: t2 } = useTranslation("components");
    const hanldeSubmit = async (input) => {
      try {
        await onSubmit(input);
        return true;
      } catch {
        return false;
      }
    };
    return jsxRuntimeExports.jsxs(Card, {
      className: "min-w-80",
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_message_card.title")
          })
        }),
        jsxRuntimeExports.jsxs(CardContent, {
          children: [
            jsxRuntimeExports.jsx("div", {
              className: "grid w-full gap-1.5",
              children: jsxRuntimeExports.jsx(AIInput, {
                onSubmit: hanldeSubmit,
                disabled: disabled || loading,
                placeholder: t2("add_message_card.placeholder")
              })
            }),
            tags ? jsxRuntimeExports.jsx("div", {
              className: "mt-2 gap-1 flex flex-wrap",
              children: tags
            }) : null
          ]
        })
      ]
    });
  });
  class BasePromptTemplate extends Runnable {
    get lc_attributes() {
      return {
        partialVariables: void 0
      };
    }
    constructor(input) {
      super(input);
      Object.defineProperty(this, "lc_serializable", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: true
      });
      Object.defineProperty(this, "lc_namespace", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: [
          "langchain_core",
          "prompts",
          this._getPromptType()
        ]
      });
      Object.defineProperty(this, "inputVariables", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "outputParser", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "partialVariables", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      const { inputVariables } = input;
      if (inputVariables.includes("stop")) {
        throw new Error("Cannot have an input variable named 'stop', as it is used internally, please rename.");
      }
      Object.assign(this, input);
    }
    async mergePartialAndUserVariables(userVariables) {
      const partialVariables = this.partialVariables ?? {};
      const partialValues = {};
      for (const [key, value] of Object.entries(partialVariables)) {
        if (typeof value === "string") {
          partialValues[key] = value;
        } else {
          partialValues[key] = await value();
        }
      }
      const allKwargs = {
        ...partialValues,
        ...userVariables
      };
      return allKwargs;
    }
    async invoke(input, options) {
      return this._callWithConfig((input2) => this.formatPromptValue(input2), input, {
        ...options,
        runType: "prompt"
      });
    }
    serialize() {
      throw new Error("Use .toJSON() instead");
    }
    static async deserialize(data) {
      switch (data._type) {
        case "prompt": {
          const { PromptTemplate: PromptTemplate2 } = await __vitePreload(async () => {
            const { PromptTemplate: PromptTemplate3 } = await Promise.resolve().then(() => prompt);
            return {
              PromptTemplate: PromptTemplate3
            };
          }, true ? void 0 : void 0);
          return PromptTemplate2.deserialize(data);
        }
        case void 0: {
          const { PromptTemplate: PromptTemplate2 } = await __vitePreload(async () => {
            const { PromptTemplate: PromptTemplate3 } = await Promise.resolve().then(() => prompt);
            return {
              PromptTemplate: PromptTemplate3
            };
          }, true ? void 0 : void 0);
          return PromptTemplate2.deserialize({
            ...data,
            _type: "prompt"
          });
        }
        case "few_shot": {
          const { FewShotPromptTemplate } = await __vitePreload(async () => {
            const { FewShotPromptTemplate: FewShotPromptTemplate2 } = await import("./few_shot-D10anxZ8.js").then(async (m2) => {
              await m2.__tla;
              return m2;
            });
            return {
              FewShotPromptTemplate: FewShotPromptTemplate2
            };
          }, true ? __vite__mapDeps([5,2,3,1,4]) : void 0);
          return FewShotPromptTemplate.deserialize(data);
        }
        default:
          throw new Error(`Invalid prompt type in config: ${data._type}`);
      }
    }
  }
  class BasePromptValue extends Serializable {
  }
  class StringPromptValue extends BasePromptValue {
    static lc_name() {
      return "StringPromptValue";
    }
    constructor(value) {
      super({
        value
      });
      Object.defineProperty(this, "lc_namespace", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: [
          "langchain_core",
          "prompt_values"
        ]
      });
      Object.defineProperty(this, "lc_serializable", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: true
      });
      Object.defineProperty(this, "value", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      this.value = value;
    }
    toString() {
      return this.value;
    }
    toChatMessages() {
      return [
        new HumanMessage(this.value)
      ];
    }
  }
  BaseStringPromptTemplate = class extends BasePromptTemplate {
    async formatPromptValue(values) {
      const formattedPrompt = await this.format(values);
      return new StringPromptValue(formattedPrompt);
    }
  };
  function configureMustache() {
    mustache.escape = (text) => text;
  }
  const parseFString = (template) => {
    const chars = template.split("");
    const nodes = [];
    const nextBracket = (bracket, start) => {
      for (let i2 = start; i2 < chars.length; i2 += 1) {
        if (bracket.includes(chars[i2])) {
          return i2;
        }
      }
      return -1;
    };
    let i = 0;
    while (i < chars.length) {
      if (chars[i] === "{" && i + 1 < chars.length && chars[i + 1] === "{") {
        nodes.push({
          type: "literal",
          text: "{"
        });
        i += 2;
      } else if (chars[i] === "}" && i + 1 < chars.length && chars[i + 1] === "}") {
        nodes.push({
          type: "literal",
          text: "}"
        });
        i += 2;
      } else if (chars[i] === "{") {
        const j2 = nextBracket("}", i);
        if (j2 < 0) {
          throw new Error("Unclosed '{' in template.");
        }
        nodes.push({
          type: "variable",
          name: chars.slice(i + 1, j2).join("")
        });
        i = j2 + 1;
      } else if (chars[i] === "}") {
        throw new Error("Single '}' in template.");
      } else {
        const next = nextBracket("{}", i);
        const text = (next < 0 ? chars.slice(i) : chars.slice(i, next)).join("");
        nodes.push({
          type: "literal",
          text
        });
        i = next < 0 ? chars.length : next;
      }
    }
    return nodes;
  };
  const mustacheTemplateToNodes = (template) => template.map((temp) => {
    if (temp[0] === "name") {
      const name = temp[1].includes(".") ? temp[1].split(".")[0] : temp[1];
      return {
        type: "variable",
        name
      };
    } else if ([
      "#",
      "&",
      "^",
      ">"
    ].includes(temp[0])) {
      return {
        type: "variable",
        name: temp[1]
      };
    } else {
      return {
        type: "literal",
        text: temp[1]
      };
    }
  });
  const parseMustache = (template) => {
    configureMustache();
    const parsed = mustache.parse(template);
    return mustacheTemplateToNodes(parsed);
  };
  const interpolateFString = (template, values) => parseFString(template).reduce((res, node) => {
    if (node.type === "variable") {
      if (node.name in values) {
        return res + values[node.name];
      }
      throw new Error(`(f-string) Missing value for input ${node.name}`);
    }
    return res + node.text;
  }, "");
  const interpolateMustache = (template, values) => {
    configureMustache();
    return mustache.render(template, values);
  };
  const DEFAULT_FORMATTER_MAPPING = {
    "f-string": interpolateFString,
    mustache: interpolateMustache
  };
  const DEFAULT_PARSER_MAPPING = {
    "f-string": parseFString,
    mustache: parseMustache
  };
  renderTemplate = (template, templateFormat, inputValues) => DEFAULT_FORMATTER_MAPPING[templateFormat](template, inputValues);
  const parseTemplate = (template, templateFormat) => DEFAULT_PARSER_MAPPING[templateFormat](template);
  checkValidTemplate = (template, templateFormat, inputVariables) => {
    if (!(templateFormat in DEFAULT_FORMATTER_MAPPING)) {
      const validFormats = Object.keys(DEFAULT_FORMATTER_MAPPING);
      throw new Error(`Invalid template format. Got \`${templateFormat}\`;
                         should be one of ${validFormats}`);
    }
    try {
      const dummyInputs = inputVariables.reduce((acc, v2) => {
        acc[v2] = "foo";
        return acc;
      }, {});
      if (Array.isArray(template)) {
        template.forEach((message) => {
          if (message.type === "text") {
            renderTemplate(message.text, templateFormat, dummyInputs);
          } else if (message.type === "image_url") {
            if (typeof message.image_url === "string") {
              renderTemplate(message.image_url, templateFormat, dummyInputs);
            } else {
              const imageUrl = message.image_url.url;
              renderTemplate(imageUrl, templateFormat, dummyInputs);
            }
          } else {
            throw new Error(`Invalid message template received. ${JSON.stringify(message, null, 2)}`);
          }
        });
      } else {
        renderTemplate(template, templateFormat, dummyInputs);
      }
    } catch (e3) {
      throw new Error(`Invalid prompt schema: ${e3.message}`);
    }
  };
  PromptTemplate = class extends BaseStringPromptTemplate {
    static lc_name() {
      return "PromptTemplate";
    }
    constructor(input) {
      super(input);
      Object.defineProperty(this, "template", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "templateFormat", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "f-string"
      });
      Object.defineProperty(this, "validateTemplate", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: true
      });
      Object.defineProperty(this, "additionalContentFields", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      if (input.templateFormat === "mustache" && input.validateTemplate === void 0) {
        this.validateTemplate = false;
      }
      Object.assign(this, input);
      if (this.validateTemplate) {
        if (this.templateFormat === "mustache") {
          throw new Error("Mustache templates cannot be validated.");
        }
        let totalInputVariables = this.inputVariables;
        if (this.partialVariables) {
          totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));
        }
        checkValidTemplate(this.template, this.templateFormat, totalInputVariables);
      }
    }
    _getPromptType() {
      return "prompt";
    }
    async format(values) {
      const allValues = await this.mergePartialAndUserVariables(values);
      return renderTemplate(this.template, this.templateFormat, allValues);
    }
    static fromExamples(examples, suffix, inputVariables, exampleSeparator = "\n\n", prefix2 = "") {
      const template = [
        prefix2,
        ...examples,
        suffix
      ].join(exampleSeparator);
      return new PromptTemplate({
        inputVariables,
        template
      });
    }
    static fromTemplate(template, options) {
      const { templateFormat = "f-string", ...rest } = options ?? {};
      const names = /* @__PURE__ */ new Set();
      parseTemplate(template, templateFormat).forEach((node) => {
        if (node.type === "variable") {
          names.add(node.name);
        }
      });
      return new PromptTemplate({
        inputVariables: [
          ...names
        ],
        templateFormat,
        template,
        ...rest
      });
    }
    async partial(values) {
      const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));
      const newPartialVariables = {
        ...this.partialVariables ?? {},
        ...values
      };
      const promptDict = {
        ...this,
        inputVariables: newInputVariables,
        partialVariables: newPartialVariables
      };
      return new PromptTemplate(promptDict);
    }
    serialize() {
      if (this.outputParser !== void 0) {
        throw new Error("Cannot serialize a prompt template with an output parser");
      }
      return {
        _type: this._getPromptType(),
        input_variables: this.inputVariables,
        template: this.template,
        template_format: this.templateFormat
      };
    }
    static async deserialize(data) {
      if (!data.template) {
        throw new Error("Prompt template must have a template");
      }
      const res = new PromptTemplate({
        inputVariables: data.input_variables,
        template: data.template,
        templateFormat: data.template_format
      });
      return res;
    }
  };
  const prompt = Object.freeze(Object.defineProperty({
    __proto__: null,
    PromptTemplate
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  const threadConversationTraveling = (list, nodes, connections, handledIds = [], functions) => {
    const runningNodes = list.map((id) => functions.getNode(id));
    for (const node of runningNodes) {
      if (!node) {
        continue;
      }
      const nodeConnections = functions.getHandleConnections({
        type: "target",
        nodeId: node.id
      });
      connections.push(...nodeConnections);
      if (node.type === FlowNodeTypeEnum.Thread) {
        handledIds.push(node.id);
        nodes.push(node);
        continue;
      } else if (node.type !== FlowNodeTypeEnum.Message) {
        handledIds.push(node.id);
        continue;
      } else if (handledIds.includes(node.id)) {
        continue;
      }
      handledIds.push(node.id);
      nodes.push(node);
      if (nodeConnections.length) {
        threadConversationTraveling(nodeConnections.map((c2) => c2.source), nodes, connections, handledIds, functions);
      }
    }
    return {
      nodes,
      connections
    };
  };
  const prepareThreadConnections = (threadNode, functions) => {
    const threadConnections = functions.getHandleConnections({
      nodeId: threadNode.id,
      type: "target"
    });
    const threadConnectionInfos = threadConnections.map((connection) => {
      const node = functions.getNode(connection.source);
      if (!node) {
        return;
      }
      const connections = functions.getHandleConnections({
        nodeId: node.id,
        type: "target"
      });
      return {
        connections,
        node
      };
    });
    const threadPromptNodes = threadConnectionInfos.filter((item) => {
      var _a;
      return ((_a = item.node) == null ? void 0 : _a.type) === FlowNodeTypeEnum.Prompt;
    });
    const threadPromptNodeResult = [];
    if (threadPromptNodes == null ? void 0 : threadPromptNodes.length) {
      threadPromptNodes.forEach((item) => {
        var _a;
        const promptConnectedNodes = (_a = item.connections) == null ? void 0 : _a.map((connection) => {
          return functions.getNode(connection.source);
        }).filter(Boolean);
        threadPromptNodeResult.push({
          node: item.node,
          connections: item.connections,
          connectedNodes: promptConnectedNodes
        });
      });
    }
    const threadToolsNodes = threadConnectionInfos.filter((item) => {
      var _a;
      return ((_a = item.node) == null ? void 0 : _a.type) === FlowNodeTypeEnum.ToolDefinition;
    });
    const threadToolNodeResult = [];
    if (threadToolsNodes == null ? void 0 : threadToolsNodes.length) {
      threadToolsNodes.forEach((item) => {
        var _a;
        const toolConnectedNodes = (_a = item.connections) == null ? void 0 : _a.map((connection) => {
          return functions.getNode(connection.source);
        }).filter(Boolean);
        if (toolConnectedNodes == null ? void 0 : toolConnectedNodes.find((node) => node.type === FlowNodeTypeEnum.Schema)) {
          threadToolNodeResult.push({
            node: item.node,
            connections: item.connections,
            connectedNodes: toolConnectedNodes
          });
        }
      });
    }
    const threadPlaceholderNodes = threadConnectionInfos.filter((item) => {
      var _a;
      return ((_a = item.node) == null ? void 0 : _a.type) === FlowNodeTypeEnum.PlaceHolder;
    });
    const threadPlaceholderNodeResult = [];
    if (threadPlaceholderNodes == null ? void 0 : threadPlaceholderNodes.length) {
      threadPlaceholderNodes.forEach((item) => {
        var _a;
        const placeholderConnectedNodes = (_a = item.connections) == null ? void 0 : _a.map((connection) => {
          return functions.getNode(connection.source);
        }).filter(Boolean);
        if (placeholderConnectedNodes) {
          threadPlaceholderNodeResult.push({
            node: item.node,
            connections: item.connections,
            connectedNodes: placeholderConnectedNodes
          });
        }
      });
    }
    const schemaNode = threadConnectionInfos.find((item) => {
      var _a;
      return ((_a = item.node) == null ? void 0 : _a.type) === FlowNodeTypeEnum.Schema;
    });
    return {
      thread: {
        node: threadNode,
        connections: threadConnections
      },
      llm: threadConnectionInfos.find((item) => {
        var _a;
        return ((_a = item.node) == null ? void 0 : _a.type) === FlowNodeTypeEnum.LLM;
      }),
      schemas: schemaNode ? [
        schemaNode
      ] : [],
      prompts: threadPromptNodeResult,
      tools: threadToolNodeResult,
      placeholders: threadPlaceholderNodeResult
    };
  };
  const buildHistories = (nodes) => {
    const histories = [];
    nodes.forEach((item) => {
      var _a, _b;
      const { node, connectedNodes } = item;
      if (!((_a = node.data) == null ? void 0 : _a.entity)) {
        return;
      }
      if (node.type === FlowNodeTypeEnum.Message) {
        const message = node.data.entity;
        switch (message.role) {
          case "human":
            histories.push(new HumanMessage(message.content));
            break;
          case "ai":
            histories.push(new AIMessage(message.content));
            break;
        }
      } else if (node.type === FlowNodeTypeEnum.Prompt) {
        const prompt2 = node.data.entity;
        let content = `${prompt2.prefix ? `${prompt2.prefix}
` : ""}`;
        if (prompt2.type === PromptTypeEnum.FewShotExample) {
          const connectedDataNode = connectedNodes.find((n2) => n2.type === FlowNodeTypeEnum.CSVData);
          const csvData = (_b = connectedDataNode == null ? void 0 : connectedDataNode.data) == null ? void 0 : _b.entity;
          if (csvData) {
            const { rows } = decodeCSVData(csvData.headers, csvData.csv);
            rows.forEach((row) => {
              content += `${prompt2.content.replace(/{([^{}]*)}/g, (_, key) => `${row[key]}`)}
`;
            });
          }
        } else {
          content += prompt2.content;
        }
        if (prompt2.suffix) {
          content += `
${prompt2.suffix}`;
        }
        switch (prompt2.role) {
          case "human":
            histories.push(new HumanMessage(content));
            break;
          case "system":
            histories.push(new SystemMessage(content));
            break;
          default:
            histories.push(new AIMessage(content));
            break;
        }
      }
    });
    return histories;
  };
  const prepareThreadHistory = (connectedNodes, threadPromptNodes) => {
    const messageNodes = (connectedNodes == null ? void 0 : connectedNodes.filter((node) => node.type === FlowNodeTypeEnum.Message).map((node) => ({
      node,
      connectedNodes: []
    })).reverse()) || [];
    const systems = [];
    threadPromptNodes.forEach(async (threadPromptNode) => {
      systems.unshift({
        node: threadPromptNode.node,
        connectedNodes: threadPromptNode.connectedNodes || []
      });
    });
    return {
      history: buildHistories(messageNodes),
      systems: buildHistories(systems)
    };
  };
  const useCreateMessage = ({ getNode, getHandleConnections }) => {
    const { t: t2 } = useTranslation("create_new_message");
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const similaritySearchWithScore = useLocalEmbeddingState((state) => state.similaritySearchWithScore);
    const getCurrentModelInfo = useLocalLLMState((state) => state.getCurrentModelInfo);
    const { stream } = useLocalLLM();
    const insertMessages = reactExports.useCallback(async ({ content, threadId, sourceId, initialX, initialY, initialLLMId }) => {
      const humanMessage = await getRepository("Message").save({
        thread_id: threadId,
        content,
        role: MessageRoleEnum.Human,
        status: MessageStatusEnum.Started,
        llm_id: initialLLMId
      });
      if (!humanMessage) {
        throw new Error("Failed to save message");
      }
      const humanMessageNode = await createOrUpdateFlowNode({
        source_id: humanMessage.id,
        source_type: "Message",
        node_type: FlowNodeTypeEnum.Message,
        x: initialX,
        y: initialY + 80
      });
      if (!humanMessageNode) {
        throw new Error("Failed to save human message node");
      }
      await createOrUpdateFlowEdge({
        source: sourceId,
        target: humanMessageNode.id
      });
      const aiMessage = await getRepository("Message").save({
        thread_id: threadId,
        content: t2("initial_ai_message"),
        role: MessageRoleEnum.AI,
        status: MessageStatusEnum.Inprogress,
        llm_id: initialLLMId,
        parent_message_id: humanMessage.id
      });
      if (!aiMessage) {
        throw new Error("Failed to save message");
      }
      const aiMessageNode = await createOrUpdateFlowNode({
        source_id: aiMessage.id,
        source_type: "Message",
        node_type: FlowNodeTypeEnum.Message,
        x: initialX,
        y: initialY + 250
      });
      if (!aiMessageNode) {
        throw new Error("Failed to save ai message node");
      }
      await createOrUpdateFlowEdge({
        source: humanMessageNode.id,
        target: aiMessageNode.id
      });
      return {
        aiMessage,
        humanMessage,
        aiMessageNode,
        humanMessageNode
      };
    }, [
      createOrUpdateFlowEdge,
      createOrUpdateFlowNode,
      t2
    ]);
    const handlePlaceholders = reactExports.useCallback(async (messagesInfo, threadConnection) => {
      const { placeholders } = threadConnection;
      if (!(placeholders == null ? void 0 : placeholders.length)) {
        return [];
      }
      const injectedMessages = [];
      await Promise.all(placeholders.map(async (item) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
        const placeholderRecord = (_a = item.node.data) == null ? void 0 : _a.entity;
        if (!placeholderRecord) {
          return;
        }
        switch (placeholderRecord.placeholder_type) {
          case FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER: {
            const vectorNode = (_b = item.connectedNodes) == null ? void 0 : _b.find((node) => node.type === FlowNodeTypeEnum.VectorDatabase);
            const vector = (_c = vectorNode == null ? void 0 : vectorNode.data) == null ? void 0 : _c.entity;
            const prompt2 = (_f = (_e = (_d = item.connectedNodes) == null ? void 0 : _d.find((node) => node.type === FlowNodeTypeEnum.Prompt)) == null ? void 0 : _e.data) == null ? void 0 : _f.entity;
            if (!prompt2 || !vector || !vectorNode) {
              return;
            }
            const connections = getHandleConnections({
              nodeId: vectorNode.id,
              type: "target"
            });
            const dataSourceNode = connections.map((connection) => getNode(connection.source)).find((node) => (node == null ? void 0 : node.type) && [
              FlowNodeTypeEnum.JSONLData,
              FlowNodeTypeEnum.CSVData
            ].includes(node == null ? void 0 : node.type));
            const dataSource = (_g = dataSourceNode == null ? void 0 : dataSourceNode.data) == null ? void 0 : _g.entity;
            if (!dataSource) {
              return;
            }
            const k2 = ((_h = placeholderRecord.metadata) == null ? void 0 : _h.k) ? +((_i = placeholderRecord.metadata) == null ? void 0 : _i.k) : 1;
            let minimalScore = ((_j = placeholderRecord.metadata) == null ? void 0 : _j.minimalScore) ? +((_k = placeholderRecord.metadata) == null ? void 0 : _k.minimalScore) : void 0;
            if (minimalScore && minimalScore > 1) {
              minimalScore = minimalScore / 100;
            }
            const documents = await similaritySearchWithScore({
              databaseId: vector.id,
              dataSourceId: dataSource.id,
              dataSourceType: getStorageDataSource(dataSource)
            }, messagesInfo.humanMessage.content, k2);
            if (!documents) {
              return [];
            }
            const template = new PromptTemplate({
              template: prompt2.content,
              inputVariables: [
                "context"
              ]
            });
            injectedMessages.push(new AIMessage(await template.format({
              context: !minimalScore ? documents.map(([doc]) => doc.pageContent).join("\n") : documents.filter(([, score]) => score >= minimalScore).map(([doc]) => doc.pageContent).join("\n")
            })));
          }
        }
      }));
      return injectedMessages;
    }, [
      getHandleConnections,
      getNode,
      similaritySearchWithScore
    ]);
    const invokeMessage = reactExports.useCallback(async (messagesInfo, threadConnection, threadConversionNodes, { onMessageUpdate }) => {
      const { prompts, tools, schemas, placeholders } = threadConnection;
      const injectedMessages = [];
      if (placeholders == null ? void 0 : placeholders.length) {
        injectedMessages.push(...await handlePlaceholders(messagesInfo, threadConnection));
      }
      const { history: MessageHistory, systems } = prepareThreadHistory(threadConversionNodes, prompts);
      const messages = [
        ...systems,
        ...injectedMessages,
        ...MessageHistory,
        new HumanMessage(messagesInfo.humanMessage.content)
      ];
      const { lastChunk, content } = await stream(messages, {
        tools,
        schemas,
        onMessageUpdate: ({ content: content2 }) => {
          onMessageUpdate == null ? void 0 : onMessageUpdate({
            id: messagesInfo.aiMessageNode.id,
            nodeData: {
              loading: true,
              content: content2
            }
          });
        }
      });
      messagesInfo.aiMessage.content = content;
      messagesInfo.aiMessage.metadata = JSON.stringify({
        message: lastChunk
      });
      onMessageUpdate == null ? void 0 : onMessageUpdate({
        id: messagesInfo.aiMessageNode.id,
        nodeData: {
          content,
          loading: false,
          entity: messagesInfo.aiMessage
        }
      });
      if (messagesInfo.aiMessage.id) {
        await getRepository("Message").update(messagesInfo.aiMessage.id, {
          content,
          metadata: JSON.stringify({
            message: lastChunk
          })
        });
      }
      return content;
    }, [
      handlePlaceholders,
      stream
    ]);
    const createMessage = reactExports.useCallback(async (source, content, options) => {
      var _a, _b, _c;
      const { nodes: threadConversionNodes } = threadConversationTraveling([
        source.id
      ], [], [], [], {
        getNode,
        getHandleConnections
      });
      const threadNode = threadConversionNodes.find((node) => node.type === FlowNodeTypeEnum.Thread);
      const thread = threadNode == null ? void 0 : threadNode.data.entity;
      if (!source || !thread || !threadNode) {
        throw new Error("Source or thread is not found");
      }
      const modelInfo = await getCurrentModelInfo();
      if (!modelInfo) {
        throw new Error("Model is not loaded yet");
      }
      const threadConnections = prepareThreadConnections(threadNode, {
        getNode,
        getHandleConnections
      });
      if (!(threadConnections == null ? void 0 : threadConnections.thread)) {
        throw new Error("Thread node is not found");
      }
      let messagesInfo;
      try {
        setLoading(true);
        const initialX = ((_a = source.position) == null ? void 0 : _a.x) || 0;
        const initialY = (((_b = source.position) == null ? void 0 : _b.y) || 0) + (((_c = source.measured) == null ? void 0 : _c.height) || 0);
        messagesInfo = await insertMessages({
          content,
          initialX,
          initialY,
          sourceId: source.id,
          threadId: thread.id,
          initialLLMId: thread.initial_llm_id
        });
        await invokeMessage(messagesInfo, threadConnections, threadConversionNodes, options);
        await getRepository("Message").update(`${messagesInfo.aiMessage.id}`, {
          status: MessageStatusEnum.Success
        });
        messagesInfo.aiMessage.status = MessageStatusEnum.Success;
        options.onMessageUpdate({
          id: messagesInfo.aiMessageNode.id,
          nodeData: {
            entity: messagesInfo.aiMessage,
            loading: false
          }
        });
        return true;
      } catch {
        if (messagesInfo == null ? void 0 : messagesInfo.aiMessage) {
          await getRepository("Message").update(`${messagesInfo.aiMessage.id}`, {
            status: MessageStatusEnum.Failed,
            content: t2("errors.ai_message_content_failed")
          });
        }
        if (messagesInfo == null ? void 0 : messagesInfo.aiMessageNode.id) {
          options == null ? void 0 : options.onMessageUpdate({
            id: messagesInfo.aiMessageNode.id,
            nodeData: {
              content: t2("errors.ai_message_content_failed"),
              loading: false
            }
          });
        }
      } finally {
        setLoading(false);
      }
    }, [
      getCurrentModelInfo,
      getHandleConnections,
      getNode,
      insertMessages,
      invokeMessage,
      t2
    ]);
    return {
      loading,
      createMessage
    };
  };
  const useActions$5 = (id, data) => {
    const node = useInternalNode(id);
    const { t: t2 } = useTranslation("flows");
    const { getNode, getHandleConnections } = useReactFlow();
    const updateNodes = useFlowState((state) => state.updateNodes);
    const { createMessage: createMessageFunction, loading } = useCreateMessage({
      getNode,
      getHandleConnections
    });
    const onMessageUpdate = reactExports.useCallback((info) => {
      if (!info.id) {
        return;
      }
      const item = getNode(info.id);
      if (!item || !info.nodeData) {
        return;
      }
      updateNodes([
        {
          id: item.id,
          type: "replace",
          item: {
            ...item,
            data: {
              ...item.data,
              ...omitBy(info.nodeData, isUndefined)
            }
          }
        }
      ]);
    }, [
      getNode,
      updateNodes
    ]);
    const createMessage = reactExports.useCallback(async (input) => {
      if (node && data.entity) {
        try {
          await createMessageFunction(node, input, {
            onMessageUpdate
          });
        } catch (error) {
          if (error instanceof Error && error.message.includes("LLM_NOT_LOADED_YET")) {
            return toast({
              variant: "destructive",
              title: t2("thread_node.errors.llm_not_loaded_yet")
            });
          }
          toast({
            variant: "destructive",
            title: `${error}`
          });
        }
      }
    }, [
      node,
      data.entity,
      createMessageFunction,
      onMessageUpdate,
      t2
    ]);
    const getLinkedConnections = reactExports.useCallback((id2) => {
      const currentNode = getNode(id2);
      if (!currentNode) {
        return [];
      }
      const linkedConnections = [];
      const threadConnections = prepareThreadConnections(currentNode, {
        getNode,
        getHandleConnections
      });
      if (threadConnections.thread) {
        linkedConnections.push({
          node: threadConnections.thread.node,
          connectedNodes: [],
          connections: threadConnections.thread.connections
        });
      }
      if (threadConnections.prompts) {
        linkedConnections.push(...threadConnections.prompts.map((item) => {
          return {
            node: item.node,
            connectedNodes: item.connectedNodes,
            connections: item.connections
          };
        }));
      }
      if (threadConnections.schemas) {
        linkedConnections.push(...threadConnections.schemas.map((item) => {
          return {
            node: item.node,
            connectedNodes: [],
            connections: item.connections
          };
        }));
      }
      if (threadConnections.placeholders) {
        linkedConnections.push(...threadConnections.placeholders.map((item) => {
          return {
            node: item.node,
            connectedNodes: [],
            connections: item.connections
          };
        }));
      }
      if (threadConnections.llm) {
        linkedConnections.push(threadConnections.llm);
      }
      return linkedConnections;
    }, [
      getHandleConnections,
      getNode
    ]);
    return {
      loading,
      createMessage,
      getLinkedConnections
    };
  };
  const useConnectionToHandler$b = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target, connection }) => {
      try {
        if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.Prompt && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Thread) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.LLM && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Thread) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.Schema && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Thread) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          const thread = target.data.entity;
          const schema = target.data.entity;
          await getRepository("Thread").update(thread.id, {
            schema_id: schema.id
          });
          return;
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.ToolDefinition && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Thread) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.VectorDatabase && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Thread) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.PlaceHolder && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Thread) {
          const sourceEntity = source.data.entity;
          if (sourceEntity.placeholder_type === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER) {
            await createOrUpdateFlowEdge({
              source: connection.source,
              target: connection.target,
              sourceHandle: connection.sourceHandle,
              targetHandle: connection.targetHandle
            });
            return;
          }
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createOrUpdateFlowEdge
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const ThreadNode = reactExports.memo((props) => {
    const { id, data, isConnectable } = props;
    const { t: t2 } = useTranslation("flows");
    const [showThread, setShowThread] = reactExports.useState(false);
    const connections = useHandleConnections({
      type: "source"
    });
    const targetConnections = useHandleConnections({
      type: "target"
    });
    const { getNode } = useReactFlow();
    const { loading, createMessage, getLinkedConnections } = useActions$5(id, data);
    useConnectionToHandler$b(id);
    const handleCreateMessage = reactExports.useCallback(async (...args) => {
      setShowThread(false);
      const result = await createMessage(...args);
      return result;
    }, [
      createMessage
    ]);
    const containMessage = reactExports.useMemo(() => {
      return connections.length > 0;
    }, [
      connections
    ]);
    const handleNewThread = reactExports.useCallback(() => {
      setShowThread((pre) => !pre);
    }, []);
    const inner = reactExports.useMemo(() => {
      var _a, _b;
      const tags = targetConnections.map((connection, index2) => {
        const source = getNode(connection.source);
        if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.Schema) {
          return jsxRuntimeExports.jsx(Badge, {
            children: t2("thread_node.structured_output")
          }, `${index2}`);
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.Prompt) {
          const entity = source.data.entity;
          return jsxRuntimeExports.jsx(Badge, {
            children: t2(entity.type === PromptTypeEnum.FewShotExample ? "thread_node.prompts.few_shot_example" : `thread_node.prompts.${entity.role.toLowerCase()}`)
          }, `${index2}`);
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.PlaceHolder) {
          const entity = source.data.entity;
          if ((entity == null ? void 0 : entity.placeholder_type) === FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER) {
            return jsxRuntimeExports.jsx(Badge, {
              children: t2("thread_node.vector_database_retriever")
            }, `${index2}`);
          }
        }
        return void 0;
      }).filter(Boolean);
      if (props.data.entity && !((_b = (_a = props.data.entity) == null ? void 0 : _a.messages) == null ? void 0 : _b.length) && !containMessage) {
        return jsxRuntimeExports.jsx(NewMessageCard, {
          disabled: loading,
          loading,
          onSubmit: handleCreateMessage,
          tags
        });
      }
      if (!(tags == null ? void 0 : tags.length)) {
        return jsxRuntimeExports.jsx("div", {
          className: "w-12 h-10"
        });
      }
      return jsxRuntimeExports.jsxs(Card, {
        className: "p-4 pt-2",
        children: [
          jsxRuntimeExports.jsx(CardTitle, {
            className: "mb-2",
            children: t2("thread_node.title")
          }),
          jsxRuntimeExports.jsx("div", {
            className: "flex gap-1.5",
            children: tags
          }),
          jsxRuntimeExports.jsx("div", {
            className: "mt-4 w-full flex justify-end",
            children: jsxRuntimeExports.jsxs(Button, {
              onClick: handleNewThread,
              variant: "outline",
              children: [
                jsxRuntimeExports.jsx(LazyIcon, {
                  name: showThread ? "copy-minus" : "copy-plus"
                }),
                showThread ? t2("thread_node.hide") : t2("thread_node.clone")
              ]
            })
          })
        ]
      });
    }, [
      containMessage,
      getNode,
      handleCreateMessage,
      handleNewThread,
      loading,
      props.data.entity,
      showThread,
      t2,
      targetConnections
    ]);
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id,
              enableToStandalone: true,
              getLinkedConnections
            }),
            inner,
            showThread ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
              children: [
                jsxRuntimeExports.jsx("div", {
                  className: "w-[1px] absolute ml-[50%] h-[30px] bg-gray-500"
                }),
                jsxRuntimeExports.jsx("div", {
                  className: "absolute mt-[30px] w-full",
                  children: jsxRuntimeExports.jsx("div", {
                    className: "ml-[10%] w-80 animate-in slide-in-from-bottom-5",
                    children: jsxRuntimeExports.jsx(NewMessageCard, {
                      disabled: loading,
                      loading,
                      onSubmit: handleCreateMessage
                    })
                  })
                })
              ]
            }) : void 0
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  function HumanMessageComponent({ data, onNewThread, loading, showThread }) {
    var _a;
    const { t: t2 } = useTranslation("flows");
    return jsxRuntimeExports.jsxs(Alert, {
      className: "flex min-w-52",
      children: [
        jsxRuntimeExports.jsx(LazyIcon, {
          size: 24,
          name: "user"
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "ml-2 max-w-full w-full",
          children: [
            jsxRuntimeExports.jsx(AlertTitle, {
              children: `Human`
            }),
            jsxRuntimeExports.jsx(AlertDescription, {
              children: `${data.content || ((_a = data.entity) == null ? void 0 : _a.content) || ""}`
            }),
            onNewThread ? jsxRuntimeExports.jsx("div", {
              className: "w-full mt-2 flex items-center justify-end",
              children: jsxRuntimeExports.jsxs(Button, {
                onClick: onNewThread,
                disabled: loading,
                variant: "outline",
                children: [
                  jsxRuntimeExports.jsx(LazyIcon, {
                    name: !showThread ? "plus" : "minus",
                    size: 16
                  }),
                  !showThread ? t2(`message_node.new_thread`) : t2(`message_node.hide_thread`)
                ]
              })
            }) : void 0
          ]
        })
      ]
    });
  }
  const MarkdownPreview = reactExports.lazy(() => __vitePreload(() => import("./index-Bswv7jYP.js").then(async (m2) => {
    await m2.__tla;
    return m2;
  }), true ? __vite__mapDeps([6,7,2,3,8,9]) : void 0));
  function AIMessageComponent({ data, onNewThread, loading, showThread }) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { t: t2 } = useTranslation("flows");
    const messageMetadata = reactExports.useMemo(() => {
      var _a2;
      try {
        return JSON.parse(((_a2 = data == null ? void 0 : data.entity) == null ? void 0 : _a2.metadata) || "{}");
      } catch {
        return {};
      }
    }, [
      (_a = data == null ? void 0 : data.entity) == null ? void 0 : _a.metadata
    ]);
    return jsxRuntimeExports.jsxs(Alert, {
      className: "flex min-w-52",
      children: [
        jsxRuntimeExports.jsx(LazyIcon, {
          className: cn(data.loading ? "animate-spin" : void 0),
          size: 24,
          name: data.loading ? "loader-circle" : "bot"
        }),
        jsxRuntimeExports.jsx(LazyIcon, {
          name: !showThread ? "plus" : "minus",
          size: 24
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "ml-2 w-full max-w-full",
          children: [
            jsxRuntimeExports.jsx(AlertTitle, {
              children: t2(`message_node.message_roles.${(_c = (_b = data.entity) == null ? void 0 : _b.role) == null ? void 0 : _c.toLowerCase()}`)
            }),
            jsxRuntimeExports.jsx(reactExports.Suspense, {
              fallback: jsxRuntimeExports.jsx("div", {
                className: "h-full w-ful rounded-lg flex justify-center items-center",
                children: jsxRuntimeExports.jsx(LazyIcon, {
                  name: "loader-circle",
                  className: "animate-spin"
                })
              }),
              children: jsxRuntimeExports.jsx(MarkdownPreview, {
                className: "!text-sm [&_p]:leading-relaxed !max-w-full !bg-transparent !text-inherit !font-sans",
                source: `${data.content || ((_d = data.entity) == null ? void 0 : _d.content) || ""}`
              })
            }),
            Array.isArray((_e = messageMetadata == null ? void 0 : messageMetadata.message) == null ? void 0 : _e.tool_calls) && ((_g = (_f = messageMetadata == null ? void 0 : messageMetadata.message) == null ? void 0 : _f.tool_calls) == null ? void 0 : _g.length) ? (_h = messageMetadata == null ? void 0 : messageMetadata.message) == null ? void 0 : _h.tool_calls.map((item, index2) => {
              return jsxRuntimeExports.jsx(Badge, {
                children: t2("message_node.tool_call", {
                  name: item.name,
                  args: Object.entries(item.args).map(([key, value]) => `"${key}": "${value}"`).join(", ")
                })
              }, `${item.name}_${index2}`);
            }) : null,
            onNewThread ? jsxRuntimeExports.jsx("div", {
              className: "w-full mt-2 flex items-center justify-end",
              children: jsxRuntimeExports.jsxs(Button, {
                onClick: onNewThread,
                disabled: loading,
                variant: "outline",
                children: [
                  jsxRuntimeExports.jsx(LazyIcon, {
                    name: !showThread ? "plus" : "minus",
                    size: 16
                  }),
                  !showThread ? t2(`message_node.new_thread`) : t2(`message_node.hide_thread`)
                ]
              })
            }) : void 0
          ]
        }),
        data.loading ? jsxRuntimeExports.jsx(BorderBeam, {
          size: 350,
          duration: 10
        }) : void 0
      ]
    });
  }
  const useActions$4 = (id) => {
    const { t: t2 } = useTranslation("flows");
    const node = useInternalNode(id);
    const updateNodes = useFlowState((state) => state.updateNodes);
    const { getNode, getHandleConnections } = useReactFlow();
    const { createMessage: createMessageFunction, loading } = useCreateMessage({
      getNode,
      getHandleConnections
    });
    const onMessageUpdate = reactExports.useCallback((info) => {
      if (!info.id) {
        return;
      }
      const item = getNode(info.id);
      if (!item || !info.nodeData) {
        return;
      }
      updateNodes([
        {
          id: item.id,
          type: "replace",
          item: {
            ...item,
            data: {
              ...item.data,
              ...omitBy(info.nodeData, isUndefined)
            }
          }
        }
      ]);
    }, [
      getNode,
      updateNodes
    ]);
    const createMessage = reactExports.useCallback(async (input) => {
      if (node) {
        try {
          await createMessageFunction(node, input, {
            onMessageUpdate
          });
        } catch (error) {
          if (error instanceof Error && error.message.includes("LLM_NOT_LOADED_YET")) {
            return toast({
              variant: "destructive",
              title: t2("message_node.errors.llm_not_loaded_yet")
            });
          }
          toast({
            variant: "destructive",
            title: t2("message_node.errors.create_message")
          });
        }
      }
    }, [
      node,
      t2,
      createMessageFunction,
      onMessageUpdate
    ]);
    return {
      loading,
      createMessage
    };
  };
  const useCreateIdieMessage = () => {
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const createIdieMessage = reactExports.useCallback(async (source, thread, input, options) => {
      var _a, _b, _c, _d, _e;
      if (!source || !thread) {
        return;
      }
      const prompt2 = (_b = (_a = options == null ? void 0 : options.promptNode) == null ? void 0 : _a.data) == null ? void 0 : _b.entity;
      const initialX = ((_c = source.position) == null ? void 0 : _c.x) || 0;
      const initialY = (((_d = source.position) == null ? void 0 : _d.y) || 0) + (((_e = source.measured) == null ? void 0 : _e.height) || 0);
      const newMessage = await getRepository("Message").save({
        thread_id: thread.id,
        content: input,
        role: (prompt2 == null ? void 0 : prompt2.role) || MessageRoleEnum.Human,
        status: MessageStatusEnum.Started,
        llm_id: thread.initial_llm_id
      });
      if (!newMessage) {
        throw new Error("Failed to save message");
      }
      const newMessageNode = await createOrUpdateFlowNode({
        source_id: newMessage.id,
        source_type: "Message",
        node_type: FlowNodeTypeEnum.Message,
        x: initialX,
        y: initialY
      });
      if (!newMessageNode) {
        throw new Error("Failed to save message node");
      }
      const edgeToNewMessage = await createOrUpdateFlowEdge({
        source: source.id,
        target: newMessageNode.id
      });
      let edgeToPrompt;
      if (options == null ? void 0 : options.promptNode) {
        edgeToPrompt = await createOrUpdateFlowEdge({
          source: options == null ? void 0 : options.promptNode.id,
          target: newMessageNode.id
        });
      }
      return {
        message: newMessage,
        edgeToPrompt,
        messageNode: newMessageNode,
        messageEdge: edgeToNewMessage
      };
    }, [
      createOrUpdateFlowNode,
      createOrUpdateFlowEdge
    ]);
    return {
      createIdieMessage
    };
  };
  const useConnectionToHandler$a = (id) => {
    const { createIdieMessage } = useCreateIdieMessage();
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target }) => {
      var _a, _b;
      try {
        if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.Prompt && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Message) {
          const message = (_a = target == null ? void 0 : target.data) == null ? void 0 : _a.entity;
          const prompt2 = (_b = source == null ? void 0 : source.data) == null ? void 0 : _b.entity;
          if (!prompt2 || !message || !target) {
            return {
              deleteEdgeId: edgeId
            };
          }
          await createIdieMessage(target, {
            id: message == null ? void 0 : message.thread_id,
            title: "",
            status: ThreadStatusEnum.Started,
            initial_llm_id: message.llm_id,
            session_id: prompt2.session_id
          }, prompt2.content, {
            promptNode: source
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createIdieMessage
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const MessageNode = reactExports.memo((props) => {
    var _a, _b, _c;
    const { id, data, isConnectable } = props;
    const [showThread, setShowThread] = reactExports.useState(false);
    const [speaking, setSpeaking] = reactExports.useState(false);
    const { t: t2 } = useTranslation("common");
    const connections = useHandleConnections({
      type: "source"
    });
    const { loading, createMessage } = useActions$4(id);
    const { toast: toast2 } = useToast();
    useConnectionToHandler$a(id);
    const handleCreateMessage = reactExports.useCallback(async (...args) => {
      const result = await createMessage(...args);
      setShowThread(false);
      return result;
    }, [
      createMessage
    ]);
    const isEnd = reactExports.useMemo(() => {
      return connections.length === 0;
    }, [
      connections
    ]);
    const handleCopy = reactExports.useCallback(() => {
      var _a2;
      if (!((_a2 = data.entity) == null ? void 0 : _a2.content)) {
        return;
      }
      navigator.clipboard.writeText(data.entity.content);
      toast2({
        description: t2("copied")
      });
    }, [
      toast2,
      data,
      t2
    ]);
    const handleSpeech = reactExports.useCallback(async () => {
      var _a2;
      try {
        if (speaking) {
          await textToSpeech.stop();
          return setSpeaking(false);
        }
        setSpeaking(true);
        await textToSpeech.speak(((_a2 = data.entity) == null ? void 0 : _a2.content) || "");
      } catch {
        toast2({
          variant: "destructive",
          description: t2("errors.speech_is_not_supported")
        });
      } finally {
        setSpeaking(false);
      }
    }, [
      (_a = data.entity) == null ? void 0 : _a.content,
      speaking,
      t2,
      toast2
    ]);
    const handleNewThread = reactExports.useCallback(() => {
      setShowThread((pre) => !pre);
    }, []);
    const newMessageCard = reactExports.useMemo(() => {
      var _a2;
      if (!isEnd && !showThread || data.loading || loading || ((_a2 = data == null ? void 0 : data.entity) == null ? void 0 : _a2.status) === "inprogress") {
        return void 0;
      }
      return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
          jsxRuntimeExports.jsx("div", {
            className: "w-[1px] absolute ml-[50%] h-[30px] bg-gray-500"
          }),
          jsxRuntimeExports.jsx("div", {
            className: "absolute mt-[30px] w-full",
            children: jsxRuntimeExports.jsx("div", {
              className: "ml-[10%] w-80 animate-in slide-in-from-bottom-5",
              children: jsxRuntimeExports.jsx(NewMessageCard, {
                disabled: loading,
                loading,
                onSubmit: handleCreateMessage
              })
            })
          })
        ]
      });
    }, [
      (_b = data == null ? void 0 : data.entity) == null ? void 0 : _b.status,
      data.loading,
      handleCreateMessage,
      isEnd,
      loading,
      showThread
    ]);
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "max-w-sm min-w-64",
          children: [
            jsxRuntimeExports.jsxs("div", {
              className: "w-auto",
              children: [
                jsxRuntimeExports.jsx(NodeHeader, {
                  id
                }),
                jsxRuntimeExports.jsx("div", {
                  children: ((_c = data.entity) == null ? void 0 : _c.role) === MessageRoleEnum.Human ? jsxRuntimeExports.jsx(HumanMessageComponent, {
                    data,
                    showThread,
                    onNewThread: !isEnd ? handleNewThread : void 0
                  }) : jsxRuntimeExports.jsx(AIMessageComponent, {
                    data,
                    showThread,
                    loading,
                    onNewThread: !isEnd ? handleNewThread : void 0
                  })
                }),
                jsxRuntimeExports.jsx(Button, {
                  onClick: handleSpeech,
                  className: "absolute top-0 right-[68px] !px-2 !rounded-none",
                  variant: "ghost",
                  children: jsxRuntimeExports.jsx(LazyIcon, {
                    name: speaking ? "circle-stop" : "speech",
                    size: 16
                  })
                }),
                jsxRuntimeExports.jsx(Button, {
                  onClick: handleCopy,
                  className: "absolute top-0 right-[36px] !px-2 !rounded-none",
                  variant: "ghost",
                  children: jsxRuntimeExports.jsx(LazyIcon, {
                    name: "copy",
                    size: 16
                  })
                })
              ]
            }),
            newMessageCard
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const ViewDataDetailDialog = create$1(({ title, content }) => {
    const currentModal = useModal();
    return jsxRuntimeExports.jsx(Dialog, {
      open: currentModal.visible,
      onOpenChange: currentModal.hide,
      children: jsxRuntimeExports.jsxs(DialogContent, {
        className: "sm:max-w-2xl",
        children: [
          jsxRuntimeExports.jsx(DialogHeader, {
            children: jsxRuntimeExports.jsxs("div", {
              className: "flex",
              children: [
                jsxRuntimeExports.jsx(LazyIcon, {
                  name: "file",
                  className: "mr-2 h-4 w-4"
                }),
                jsxRuntimeExports.jsx(DialogTitle, {
                  children: title
                })
              ]
            })
          }),
          jsxRuntimeExports.jsx("div", {
            className: "mx-auto w-full min-h-96 max-h-96 overflow-hidden",
            children: jsxRuntimeExports.jsx("div", {
              className: "relative w-full h-full overflow-hidden rounded-xl p-1 border border-border",
              children: jsxRuntimeExports.jsx("pre", {
                className: "break-all h-full overflow-y-auto bg-background font-mono text-xs w-full",
                children: content
              })
            })
          })
        ]
      })
    });
  });
  const useConnectionToHandler$9 = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const { createIdieMessage } = useCreateIdieMessage();
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target }) => {
      var _a, _b, _c, _d;
      try {
        const targetEntity = (_a = target == null ? void 0 : target.data) == null ? void 0 : _a.entity;
        const sourceEntity = (_b = source == null ? void 0 : source.data) == null ? void 0 : _b.entity;
        if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.Message && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Prompt) {
          const message = (_c = source == null ? void 0 : source.data) == null ? void 0 : _c.entity;
          const prompt2 = (_d = target == null ? void 0 : target.data) == null ? void 0 : _d.entity;
          if (!prompt2 || !message || !target) {
            return {
              deleteEdgeId: edgeId
            };
          }
          await createIdieMessage(source, {
            id: message == null ? void 0 : message.thread_id,
            title: "",
            status: ThreadStatusEnum.Started,
            initial_llm_id: message.llm_id,
            session_id: prompt2.session_id
          }, prompt2.content, {
            promptNode: target
          });
          return;
        } else if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.CSVData && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Prompt && (targetEntity == null ? void 0 : targetEntity.type) === PromptTypeEnum.FewShotExample && (sourceEntity == null ? void 0 : sourceEntity.headers.includes("input")) && (sourceEntity == null ? void 0 : sourceEntity.headers.includes("output"))) {
          await createOrUpdateFlowEdge({
            source: source.id,
            target: target.id
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createIdieMessage,
      createOrUpdateFlowEdge
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const PromptNode = reactExports.memo((props) => {
    var _a, _b, _c;
    const { id, data, isConnectable } = props;
    useConnectionToHandler$9(id);
    const viewDetailDialog = useModal(ViewDataDetailDialog);
    const content = reactExports.useMemo(() => {
      var _a2, _b2, _c2;
      return `${((_a2 = data.entity) == null ? void 0 : _a2.prefix) ? `${(_b2 = data.entity) == null ? void 0 : _b2.prefix}
` : ""}${((_c2 = data.entity) == null ? void 0 : _c2.content) || ""}`;
    }, [
      (_a = data.entity) == null ? void 0 : _a.prefix,
      (_b = data.entity) == null ? void 0 : _b.content
    ]);
    const promptArguments = reactExports.useMemo(() => {
      const regex = /{(.*?)}/g;
      const matches = content.match(regex);
      return (matches == null ? void 0 : matches.map((match) => match.replace("{", "").replace("}", ""))) || [];
    }, [
      content
    ]);
    const isOverLimit = content.length > 990;
    const handleOpenDetail = () => {
      viewDetailDialog.show({
        title: "Prompt",
        content
      });
    };
    return jsxRuntimeExports.jsxs("div", {
      className: "min-w-56",
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsxs(Alert, {
              className: "flex justify-center max-w-72",
              variant: "default",
              children: [
                jsxRuntimeExports.jsx(LazyIcon, {
                  size: 24,
                  name: "notepad-text"
                }),
                jsxRuntimeExports.jsxs("div", {
                  className: "ml-2 max-w-full break-words break-all",
                  children: [
                    jsxRuntimeExports.jsx(AlertTitle, {
                      children: `${((_c = data.entity) == null ? void 0 : _c.role) || ""}`
                    }),
                    jsxRuntimeExports.jsxs(AlertDescription, {
                      onClick: isOverLimit ? handleOpenDetail : void 0,
                      children: [
                        isOverLimit ? `${content.slice(0, 990)}...` : content,
                        isOverLimit ? jsxRuntimeExports.jsx("span", {
                          className: "float-right",
                          children: jsxRuntimeExports.jsx(LazyIcon, {
                            name: "chevron-right"
                          })
                        }) : void 0
                      ]
                    }),
                    (promptArguments == null ? void 0 : promptArguments.length) ? promptArguments.map((argument, index2) => {
                      return jsxRuntimeExports.jsx(Badge, {
                        className: "mt-2 mr-1",
                        variant: "default",
                        children: argument
                      }, index2);
                    }) : void 0
                  ]
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  function isNil(value) {
    return value == null;
  }
  var isNil_1 = isNil;
  const isNil$1 = getDefaultExportFromCjs(isNil_1);
  var baseGetTag$3 = _baseGetTag, isArray$6 = isArray_1, isObjectLike$3 = isObjectLike_1;
  var stringTag = "[object String]";
  function isString(value) {
    return typeof value == "string" || !isArray$6(value) && isObjectLike$3(value) && baseGetTag$3(value) == stringTag;
  }
  var isString_1 = isString;
  const isString$1 = getDefaultExportFromCjs(isString_1);
  var reactIs = {
    exports: {}
  };
  var reactIs_production_min = {};
  var b = Symbol.for("react.element"), c$1 = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k$1 = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
  u = Symbol.for("react.module.reference");
  function v(a2) {
    if ("object" === typeof a2 && null !== a2) {
      var r = a2.$$typeof;
      switch (r) {
        case b:
          switch (a2 = a2.type, a2) {
            case d:
            case f:
            case e:
            case m:
            case n:
              return a2;
            default:
              switch (a2 = a2 && a2.$$typeof, a2) {
                case k$1:
                case h:
                case l:
                case q:
                case p:
                case g:
                  return a2;
                default:
                  return r;
              }
          }
        case c$1:
          return r;
      }
    }
  }
  reactIs_production_min.ContextConsumer = h;
  reactIs_production_min.ContextProvider = g;
  reactIs_production_min.Element = b;
  reactIs_production_min.ForwardRef = l;
  reactIs_production_min.Fragment = d;
  reactIs_production_min.Lazy = q;
  reactIs_production_min.Memo = p;
  reactIs_production_min.Portal = c$1;
  reactIs_production_min.Profiler = f;
  reactIs_production_min.StrictMode = e;
  reactIs_production_min.Suspense = m;
  reactIs_production_min.SuspenseList = n;
  reactIs_production_min.isAsyncMode = function() {
    return false;
  };
  reactIs_production_min.isConcurrentMode = function() {
    return false;
  };
  reactIs_production_min.isContextConsumer = function(a2) {
    return v(a2) === h;
  };
  reactIs_production_min.isContextProvider = function(a2) {
    return v(a2) === g;
  };
  reactIs_production_min.isElement = function(a2) {
    return "object" === typeof a2 && null !== a2 && a2.$$typeof === b;
  };
  reactIs_production_min.isForwardRef = function(a2) {
    return v(a2) === l;
  };
  reactIs_production_min.isFragment = function(a2) {
    return v(a2) === d;
  };
  reactIs_production_min.isLazy = function(a2) {
    return v(a2) === q;
  };
  reactIs_production_min.isMemo = function(a2) {
    return v(a2) === p;
  };
  reactIs_production_min.isPortal = function(a2) {
    return v(a2) === c$1;
  };
  reactIs_production_min.isProfiler = function(a2) {
    return v(a2) === f;
  };
  reactIs_production_min.isStrictMode = function(a2) {
    return v(a2) === e;
  };
  reactIs_production_min.isSuspense = function(a2) {
    return v(a2) === m;
  };
  reactIs_production_min.isSuspenseList = function(a2) {
    return v(a2) === n;
  };
  reactIs_production_min.isValidElementType = function(a2) {
    return "string" === typeof a2 || "function" === typeof a2 || a2 === d || a2 === f || a2 === e || a2 === m || a2 === n || a2 === t || "object" === typeof a2 && null !== a2 && (a2.$$typeof === q || a2.$$typeof === p || a2.$$typeof === g || a2.$$typeof === h || a2.$$typeof === l || a2.$$typeof === u || void 0 !== a2.getModuleId) ? true : false;
  };
  reactIs_production_min.typeOf = v;
  {
    reactIs.exports = reactIs_production_min;
  }
  var reactIsExports = reactIs.exports;
  var baseGetTag$2 = _baseGetTag, isObjectLike$2 = isObjectLike_1;
  var numberTag = "[object Number]";
  function isNumber$2(value) {
    return typeof value == "number" || isObjectLike$2(value) && baseGetTag$2(value) == numberTag;
  }
  var isNumber_1 = isNumber$2;
  const isNumber$3 = getDefaultExportFromCjs(isNumber_1);
  var isNumber$1 = isNumber_1;
  function isNaN$1(value) {
    return isNumber$1(value) && value != +value;
  }
  var _isNaN = isNaN$1;
  const isNan = getDefaultExportFromCjs(_isNaN);
  var mathSign = function mathSign2(value) {
    if (value === 0) {
      return 0;
    }
    if (value > 0) {
      return 1;
    }
    return -1;
  };
  var isPercent = function isPercent2(value) {
    return isString$1(value) && value.indexOf("%") === value.length - 1;
  };
  var isNumber = function isNumber2(value) {
    return isNumber$3(value) && !isNan(value);
  };
  var isNumOrStr = function isNumOrStr2(value) {
    return isNumber(value) || isString$1(value);
  };
  var idCounter = 0;
  var uniqueId = function uniqueId2(prefix2) {
    var id = ++idCounter;
    return "".concat(prefix2 || "").concat(id);
  };
  var getPercentValue = function getPercentValue2(percent, totalValue) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var validate = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (!isNumber(percent) && !isString$1(percent)) {
      return defaultValue;
    }
    var value;
    if (isPercent(percent)) {
      var index2 = percent.indexOf("%");
      value = totalValue * parseFloat(percent.slice(0, index2)) / 100;
    } else {
      value = +percent;
    }
    if (isNan(value)) {
      value = defaultValue;
    }
    if (validate && value > totalValue) {
      value = totalValue;
    }
    return value;
  };
  var getAnyElementOfObject = function getAnyElementOfObject2(obj) {
    if (!obj) {
      return null;
    }
    var keys2 = Object.keys(obj);
    if (keys2 && keys2.length) {
      return obj[keys2[0]];
    }
    return null;
  };
  var hasDuplicate = function hasDuplicate2(ary) {
    if (!Array.isArray(ary)) {
      return false;
    }
    var len = ary.length;
    var cache = {};
    for (var i = 0; i < len; i++) {
      if (!cache[ary[i]]) {
        cache[ary[i]] = true;
      } else {
        return true;
      }
    }
    return false;
  };
  var interpolateNumber$1 = function interpolateNumber2(numberA, numberB) {
    if (isNumber(numberA) && isNumber(numberB)) {
      return function(t2) {
        return numberA + t2 * (numberB - numberA);
      };
    }
    return function() {
      return numberB;
    };
  };
  function findEntryInArray(ary, specifiedKey, specifiedValue) {
    if (!ary || !ary.length) {
      return null;
    }
    return ary.find(function(entry) {
      return entry && (typeof specifiedKey === "function" ? specifiedKey(entry) : get(entry, specifiedKey)) === specifiedValue;
    });
  }
  function shallowEqual(a2, b2) {
    for (var key in a2) {
      if ({}.hasOwnProperty.call(a2, key) && (!{}.hasOwnProperty.call(b2, key) || a2[key] !== b2[key])) {
        return false;
      }
    }
    for (var _key in b2) {
      if ({}.hasOwnProperty.call(b2, _key) && !{}.hasOwnProperty.call(a2, _key)) {
        return false;
      }
    }
    return true;
  }
  function _typeof$G(o) {
    "@babel/helpers - typeof";
    return _typeof$G = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$G(o);
  }
  var SVGContainerPropKeys = [
    "viewBox",
    "children"
  ];
  var SVGElementPropKeys = [
    "aria-activedescendant",
    "aria-atomic",
    "aria-autocomplete",
    "aria-busy",
    "aria-checked",
    "aria-colcount",
    "aria-colindex",
    "aria-colspan",
    "aria-controls",
    "aria-current",
    "aria-describedby",
    "aria-details",
    "aria-disabled",
    "aria-errormessage",
    "aria-expanded",
    "aria-flowto",
    "aria-haspopup",
    "aria-hidden",
    "aria-invalid",
    "aria-keyshortcuts",
    "aria-label",
    "aria-labelledby",
    "aria-level",
    "aria-live",
    "aria-modal",
    "aria-multiline",
    "aria-multiselectable",
    "aria-orientation",
    "aria-owns",
    "aria-placeholder",
    "aria-posinset",
    "aria-pressed",
    "aria-readonly",
    "aria-relevant",
    "aria-required",
    "aria-roledescription",
    "aria-rowcount",
    "aria-rowindex",
    "aria-rowspan",
    "aria-selected",
    "aria-setsize",
    "aria-sort",
    "aria-valuemax",
    "aria-valuemin",
    "aria-valuenow",
    "aria-valuetext",
    "className",
    "color",
    "height",
    "id",
    "lang",
    "max",
    "media",
    "method",
    "min",
    "name",
    "style",
    "target",
    "width",
    "role",
    "tabIndex",
    "accentHeight",
    "accumulate",
    "additive",
    "alignmentBaseline",
    "allowReorder",
    "alphabetic",
    "amplitude",
    "arabicForm",
    "ascent",
    "attributeName",
    "attributeType",
    "autoReverse",
    "azimuth",
    "baseFrequency",
    "baselineShift",
    "baseProfile",
    "bbox",
    "begin",
    "bias",
    "by",
    "calcMode",
    "capHeight",
    "clip",
    "clipPath",
    "clipPathUnits",
    "clipRule",
    "colorInterpolation",
    "colorInterpolationFilters",
    "colorProfile",
    "colorRendering",
    "contentScriptType",
    "contentStyleType",
    "cursor",
    "cx",
    "cy",
    "d",
    "decelerate",
    "descent",
    "diffuseConstant",
    "direction",
    "display",
    "divisor",
    "dominantBaseline",
    "dur",
    "dx",
    "dy",
    "edgeMode",
    "elevation",
    "enableBackground",
    "end",
    "exponent",
    "externalResourcesRequired",
    "fill",
    "fillOpacity",
    "fillRule",
    "filter",
    "filterRes",
    "filterUnits",
    "floodColor",
    "floodOpacity",
    "focusable",
    "fontFamily",
    "fontSize",
    "fontSizeAdjust",
    "fontStretch",
    "fontStyle",
    "fontVariant",
    "fontWeight",
    "format",
    "from",
    "fx",
    "fy",
    "g1",
    "g2",
    "glyphName",
    "glyphOrientationHorizontal",
    "glyphOrientationVertical",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "hanging",
    "horizAdvX",
    "horizOriginX",
    "href",
    "ideographic",
    "imageRendering",
    "in2",
    "in",
    "intercept",
    "k1",
    "k2",
    "k3",
    "k4",
    "k",
    "kernelMatrix",
    "kernelUnitLength",
    "kerning",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "letterSpacing",
    "lightingColor",
    "limitingConeAngle",
    "local",
    "markerEnd",
    "markerHeight",
    "markerMid",
    "markerStart",
    "markerUnits",
    "markerWidth",
    "mask",
    "maskContentUnits",
    "maskUnits",
    "mathematical",
    "mode",
    "numOctaves",
    "offset",
    "opacity",
    "operator",
    "order",
    "orient",
    "orientation",
    "origin",
    "overflow",
    "overlinePosition",
    "overlineThickness",
    "paintOrder",
    "panose1",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointerEvents",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "r",
    "radius",
    "refX",
    "refY",
    "renderingIntent",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "restart",
    "result",
    "rotate",
    "rx",
    "ry",
    "seed",
    "shapeRendering",
    "slope",
    "spacing",
    "specularConstant",
    "specularExponent",
    "speed",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stemh",
    "stemv",
    "stitchTiles",
    "stopColor",
    "stopOpacity",
    "strikethroughPosition",
    "strikethroughThickness",
    "string",
    "stroke",
    "strokeDasharray",
    "strokeDashoffset",
    "strokeLinecap",
    "strokeLinejoin",
    "strokeMiterlimit",
    "strokeOpacity",
    "strokeWidth",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textAnchor",
    "textDecoration",
    "textLength",
    "textRendering",
    "to",
    "transform",
    "u1",
    "u2",
    "underlinePosition",
    "underlineThickness",
    "unicode",
    "unicodeBidi",
    "unicodeRange",
    "unitsPerEm",
    "vAlphabetic",
    "values",
    "vectorEffect",
    "version",
    "vertAdvY",
    "vertOriginX",
    "vertOriginY",
    "vHanging",
    "vIdeographic",
    "viewTarget",
    "visibility",
    "vMathematical",
    "widths",
    "wordSpacing",
    "writingMode",
    "x1",
    "x2",
    "x",
    "xChannelSelector",
    "xHeight",
    "xlinkActuate",
    "xlinkArcrole",
    "xlinkHref",
    "xlinkRole",
    "xlinkShow",
    "xlinkTitle",
    "xlinkType",
    "xmlBase",
    "xmlLang",
    "xmlns",
    "xmlnsXlink",
    "xmlSpace",
    "y1",
    "y2",
    "y",
    "yChannelSelector",
    "z",
    "zoomAndPan",
    "ref",
    "key",
    "angle"
  ];
  var PolyElementKeys = [
    "points",
    "pathLength"
  ];
  var FilteredElementKeyMap = {
    svg: SVGContainerPropKeys,
    polygon: PolyElementKeys,
    polyline: PolyElementKeys
  };
  var EventKeys = [
    "dangerouslySetInnerHTML",
    "onCopy",
    "onCopyCapture",
    "onCut",
    "onCutCapture",
    "onPaste",
    "onPasteCapture",
    "onCompositionEnd",
    "onCompositionEndCapture",
    "onCompositionStart",
    "onCompositionStartCapture",
    "onCompositionUpdate",
    "onCompositionUpdateCapture",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onChangeCapture",
    "onBeforeInput",
    "onBeforeInputCapture",
    "onInput",
    "onInputCapture",
    "onReset",
    "onResetCapture",
    "onSubmit",
    "onSubmitCapture",
    "onInvalid",
    "onInvalidCapture",
    "onLoad",
    "onLoadCapture",
    "onError",
    "onErrorCapture",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyPressCapture",
    "onKeyUp",
    "onKeyUpCapture",
    "onAbort",
    "onAbortCapture",
    "onCanPlay",
    "onCanPlayCapture",
    "onCanPlayThrough",
    "onCanPlayThroughCapture",
    "onDurationChange",
    "onDurationChangeCapture",
    "onEmptied",
    "onEmptiedCapture",
    "onEncrypted",
    "onEncryptedCapture",
    "onEnded",
    "onEndedCapture",
    "onLoadedData",
    "onLoadedDataCapture",
    "onLoadedMetadata",
    "onLoadedMetadataCapture",
    "onLoadStart",
    "onLoadStartCapture",
    "onPause",
    "onPauseCapture",
    "onPlay",
    "onPlayCapture",
    "onPlaying",
    "onPlayingCapture",
    "onProgress",
    "onProgressCapture",
    "onRateChange",
    "onRateChangeCapture",
    "onSeeked",
    "onSeekedCapture",
    "onSeeking",
    "onSeekingCapture",
    "onStalled",
    "onStalledCapture",
    "onSuspend",
    "onSuspendCapture",
    "onTimeUpdate",
    "onTimeUpdateCapture",
    "onVolumeChange",
    "onVolumeChangeCapture",
    "onWaiting",
    "onWaitingCapture",
    "onAuxClick",
    "onAuxClickCapture",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onContextMenuCapture",
    "onDoubleClick",
    "onDoubleClickCapture",
    "onDrag",
    "onDragCapture",
    "onDragEnd",
    "onDragEndCapture",
    "onDragEnter",
    "onDragEnterCapture",
    "onDragExit",
    "onDragExitCapture",
    "onDragLeave",
    "onDragLeaveCapture",
    "onDragOver",
    "onDragOverCapture",
    "onDragStart",
    "onDragStartCapture",
    "onDrop",
    "onDropCapture",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseMoveCapture",
    "onMouseOut",
    "onMouseOutCapture",
    "onMouseOver",
    "onMouseOverCapture",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onSelectCapture",
    "onTouchCancel",
    "onTouchCancelCapture",
    "onTouchEnd",
    "onTouchEndCapture",
    "onTouchMove",
    "onTouchMoveCapture",
    "onTouchStart",
    "onTouchStartCapture",
    "onPointerDown",
    "onPointerDownCapture",
    "onPointerMove",
    "onPointerMoveCapture",
    "onPointerUp",
    "onPointerUpCapture",
    "onPointerCancel",
    "onPointerCancelCapture",
    "onPointerEnter",
    "onPointerEnterCapture",
    "onPointerLeave",
    "onPointerLeaveCapture",
    "onPointerOver",
    "onPointerOverCapture",
    "onPointerOut",
    "onPointerOutCapture",
    "onGotPointerCapture",
    "onGotPointerCaptureCapture",
    "onLostPointerCapture",
    "onLostPointerCaptureCapture",
    "onScroll",
    "onScrollCapture",
    "onWheel",
    "onWheelCapture",
    "onAnimationStart",
    "onAnimationStartCapture",
    "onAnimationEnd",
    "onAnimationEndCapture",
    "onAnimationIteration",
    "onAnimationIterationCapture",
    "onTransitionEnd",
    "onTransitionEndCapture"
  ];
  var adaptEventHandlers = function adaptEventHandlers2(props, newHandler) {
    if (!props || typeof props === "function" || typeof props === "boolean") {
      return null;
    }
    var inputProps = props;
    if (reactExports.isValidElement(props)) {
      inputProps = props.props;
    }
    if (!isObject$4(inputProps)) {
      return null;
    }
    var out = {};
    Object.keys(inputProps).forEach(function(key) {
      if (EventKeys.includes(key)) {
        out[key] = newHandler || function(e3) {
          return inputProps[key](inputProps, e3);
        };
      }
    });
    return out;
  };
  var getEventHandlerOfChild = function getEventHandlerOfChild2(originalHandler, data, index2) {
    return function(e3) {
      originalHandler(data, index2, e3);
      return null;
    };
  };
  var adaptEventsOfChild = function adaptEventsOfChild2(props, data, index2) {
    if (!isObject$4(props) || _typeof$G(props) !== "object") {
      return null;
    }
    var out = null;
    Object.keys(props).forEach(function(key) {
      var item = props[key];
      if (EventKeys.includes(key) && typeof item === "function") {
        if (!out) out = {};
        out[key] = getEventHandlerOfChild(item, data, index2);
      }
    });
    return out;
  };
  var _excluded$g = [
    "children"
  ], _excluded2$5 = [
    "children"
  ];
  function _objectWithoutProperties$g(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$g(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$g(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var REACT_BROWSER_EVENT_MAP = {
    click: "onClick",
    mousedown: "onMouseDown",
    mouseup: "onMouseUp",
    mouseover: "onMouseOver",
    mousemove: "onMouseMove",
    mouseout: "onMouseOut",
    mouseenter: "onMouseEnter",
    mouseleave: "onMouseLeave",
    touchcancel: "onTouchCancel",
    touchend: "onTouchEnd",
    touchmove: "onTouchMove",
    touchstart: "onTouchStart"
  };
  var getDisplayName = function getDisplayName2(Comp) {
    if (typeof Comp === "string") {
      return Comp;
    }
    if (!Comp) {
      return "";
    }
    return Comp.displayName || Comp.name || "Component";
  };
  var lastChildren = null;
  var lastResult = null;
  var toArray = function toArray2(children) {
    if (children === lastChildren && Array.isArray(lastResult)) {
      return lastResult;
    }
    var result = [];
    reactExports.Children.forEach(children, function(child) {
      if (isNil$1(child)) return;
      if (reactIsExports.isFragment(child)) {
        result = result.concat(toArray2(child.props.children));
      } else {
        result.push(child);
      }
    });
    lastResult = result;
    lastChildren = children;
    return result;
  };
  function findAllByType(children, type) {
    var result = [];
    var types = [];
    if (Array.isArray(type)) {
      types = type.map(function(t2) {
        return getDisplayName(t2);
      });
    } else {
      types = [
        getDisplayName(type)
      ];
    }
    toArray(children).forEach(function(child) {
      var childType = get(child, "type.displayName") || get(child, "type.name");
      if (types.indexOf(childType) !== -1) {
        result.push(child);
      }
    });
    return result;
  }
  function findChildByType(children, type) {
    var result = findAllByType(children, type);
    return result && result[0];
  }
  var validateWidthHeight = function validateWidthHeight2(el) {
    if (!el || !el.props) {
      return false;
    }
    var _el$props = el.props, width = _el$props.width, height = _el$props.height;
    if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0) {
      return false;
    }
    return true;
  };
  var SVG_TAGS = [
    "a",
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animate",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "circle",
    "clipPath",
    "color-profile",
    "cursor",
    "defs",
    "desc",
    "ellipse",
    "feBlend",
    "feColormatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "filter",
    "font",
    "font-face",
    "font-face-format",
    "font-face-name",
    "font-face-url",
    "foreignObject",
    "g",
    "glyph",
    "glyphRef",
    "hkern",
    "image",
    "line",
    "lineGradient",
    "marker",
    "mask",
    "metadata",
    "missing-glyph",
    "mpath",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "script",
    "set",
    "stop",
    "style",
    "svg",
    "switch",
    "symbol",
    "text",
    "textPath",
    "title",
    "tref",
    "tspan",
    "use",
    "view",
    "vkern"
  ];
  var isSvgElement = function isSvgElement2(child) {
    return child && child.type && isString$1(child.type) && SVG_TAGS.indexOf(child.type) >= 0;
  };
  var isValidSpreadableProp = function isValidSpreadableProp2(property, key, includeEvents, svgElementType) {
    var _FilteredElementKeyMa;
    var matchingElementTypeKeys = (_FilteredElementKeyMa = FilteredElementKeyMap === null || FilteredElementKeyMap === void 0 ? void 0 : FilteredElementKeyMap[svgElementType]) !== null && _FilteredElementKeyMa !== void 0 ? _FilteredElementKeyMa : [];
    return !isFunction(property) && (svgElementType && matchingElementTypeKeys.includes(key) || SVGElementPropKeys.includes(key)) || includeEvents && EventKeys.includes(key);
  };
  var filterProps = function filterProps2(props, includeEvents, svgElementType) {
    if (!props || typeof props === "function" || typeof props === "boolean") {
      return null;
    }
    var inputProps = props;
    if (reactExports.isValidElement(props)) {
      inputProps = props.props;
    }
    if (!isObject$4(inputProps)) {
      return null;
    }
    var out = {};
    Object.keys(inputProps).forEach(function(key) {
      var _inputProps;
      if (isValidSpreadableProp((_inputProps = inputProps) === null || _inputProps === void 0 ? void 0 : _inputProps[key], key, includeEvents, svgElementType)) {
        out[key] = inputProps[key];
      }
    });
    return out;
  };
  var isChildrenEqual = function isChildrenEqual2(nextChildren, prevChildren) {
    if (nextChildren === prevChildren) {
      return true;
    }
    var count = reactExports.Children.count(nextChildren);
    if (count !== reactExports.Children.count(prevChildren)) {
      return false;
    }
    if (count === 0) {
      return true;
    }
    if (count === 1) {
      return isSingleChildEqual(Array.isArray(nextChildren) ? nextChildren[0] : nextChildren, Array.isArray(prevChildren) ? prevChildren[0] : prevChildren);
    }
    for (var i = 0; i < count; i++) {
      var nextChild = nextChildren[i];
      var prevChild = prevChildren[i];
      if (Array.isArray(nextChild) || Array.isArray(prevChild)) {
        if (!isChildrenEqual2(nextChild, prevChild)) {
          return false;
        }
      } else if (!isSingleChildEqual(nextChild, prevChild)) {
        return false;
      }
    }
    return true;
  };
  var isSingleChildEqual = function isSingleChildEqual2(nextChild, prevChild) {
    if (isNil$1(nextChild) && isNil$1(prevChild)) {
      return true;
    }
    if (!isNil$1(nextChild) && !isNil$1(prevChild)) {
      var _ref = nextChild.props || {}, nextChildren = _ref.children, nextProps = _objectWithoutProperties$g(_ref, _excluded$g);
      var _ref2 = prevChild.props || {}, prevChildren = _ref2.children, prevProps = _objectWithoutProperties$g(_ref2, _excluded2$5);
      if (nextChildren && prevChildren) {
        return shallowEqual(nextProps, prevProps) && isChildrenEqual(nextChildren, prevChildren);
      }
      if (!nextChildren && !prevChildren) {
        return shallowEqual(nextProps, prevProps);
      }
      return false;
    }
    return false;
  };
  var renderByOrder = function renderByOrder2(children, renderMap) {
    var elements = [];
    var record = {};
    toArray(children).forEach(function(child, index2) {
      if (isSvgElement(child)) {
        elements.push(child);
      } else if (child) {
        var displayName = getDisplayName(child.type);
        var _ref3 = renderMap[displayName] || {}, handler = _ref3.handler, once = _ref3.once;
        if (handler && (!once || !record[displayName])) {
          var results = handler(child, displayName, index2);
          elements.push(results);
          record[displayName] = true;
        }
      }
    });
    return elements;
  };
  var getReactEventByType = function getReactEventByType2(e3) {
    var type = e3 && e3.type;
    if (type && REACT_BROWSER_EVENT_MAP[type]) {
      return REACT_BROWSER_EVENT_MAP[type];
    }
    return null;
  };
  var parseChildIndex = function parseChildIndex2(child, children) {
    return toArray(children).indexOf(child);
  };
  var _excluded$f = [
    "children",
    "width",
    "height",
    "viewBox",
    "className",
    "style",
    "title",
    "desc"
  ];
  function _extends$p() {
    _extends$p = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$p.apply(this, arguments);
  }
  function _objectWithoutProperties$f(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$f(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$f(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function Surface(props) {
    var children = props.children, width = props.width, height = props.height, viewBox = props.viewBox, className = props.className, style = props.style, title = props.title, desc = props.desc, others = _objectWithoutProperties$f(props, _excluded$f);
    var svgView = viewBox || {
      width,
      height,
      x: 0,
      y: 0
    };
    var layerClass = clsx("recharts-surface", className);
    return React.createElement("svg", _extends$p({}, filterProps(others, true, "svg"), {
      className: layerClass,
      width,
      height,
      style,
      viewBox: "".concat(svgView.x, " ").concat(svgView.y, " ").concat(svgView.width, " ").concat(svgView.height)
    }), React.createElement("title", null, title), React.createElement("desc", null, desc), children);
  }
  var _excluded$e = [
    "children",
    "className"
  ];
  function _extends$o() {
    _extends$o = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$o.apply(this, arguments);
  }
  function _objectWithoutProperties$e(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$e(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$e(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var Layer = React.forwardRef(function(props, ref) {
    var children = props.children, className = props.className, others = _objectWithoutProperties$e(props, _excluded$e);
    var layerClass = clsx("recharts-layer", className);
    return React.createElement("g", _extends$o({
      className: layerClass
    }, filterProps(others, true), {
      ref
    }), children);
  });
  var warn = function warn2(condition, format2) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
  };
  function baseSlice$2(array2, start, end) {
    var index2 = -1, length = array2.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index2 < length) {
      result[index2] = array2[index2 + start];
    }
    return result;
  }
  _baseSlice = baseSlice$2;
  var baseSlice$1 = _baseSlice;
  function castSlice$1(array2, start, end) {
    var length = array2.length;
    end = end === void 0 ? length : end;
    return !start && end >= length ? array2 : baseSlice$1(array2, start, end);
  }
  var _castSlice = castSlice$1;
  var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsVarRange$1 = "\\ufe0e\\ufe0f";
  var rsZWJ$1 = "\\u200d";
  var reHasUnicode = RegExp("[" + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + "]");
  function hasUnicode$2(string) {
    return reHasUnicode.test(string);
  }
  var _hasUnicode = hasUnicode$2;
  function asciiToArray$1(string) {
    return string.split("");
  }
  var _asciiToArray = asciiToArray$1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
  var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
  var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
  ].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [
    rsNonAstral + rsCombo + "?",
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
  ].join("|") + ")";
  var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
  function unicodeToArray$1(string) {
    return string.match(reUnicode) || [];
  }
  var _unicodeToArray = unicodeToArray$1;
  var asciiToArray = _asciiToArray, hasUnicode$1 = _hasUnicode, unicodeToArray = _unicodeToArray;
  function stringToArray$1(string) {
    return hasUnicode$1(string) ? unicodeToArray(string) : asciiToArray(string);
  }
  var _stringToArray = stringToArray$1;
  var castSlice = _castSlice, hasUnicode = _hasUnicode, stringToArray = _stringToArray, toString$1 = toString_1;
  function createCaseFirst$1(methodName) {
    return function(string) {
      string = toString$1(string);
      var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }
  var _createCaseFirst = createCaseFirst$1;
  var createCaseFirst = _createCaseFirst;
  var upperFirst = createCaseFirst("toUpperCase");
  var upperFirst_1 = upperFirst;
  const upperFirst$1 = getDefaultExportFromCjs(upperFirst_1);
  function constant$2(x2) {
    return function constant2() {
      return x2;
    };
  }
  const cos = Math.cos;
  const sin = Math.sin;
  const sqrt$1 = Math.sqrt;
  const pi$1 = Math.PI;
  const tau$1 = 2 * pi$1;
  const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
  function append(strings) {
    this._ += strings[0];
    for (let i = 1, n2 = strings.length; i < n2; ++i) {
      this._ += arguments[i] + strings[i];
    }
  }
  function appendRound(digits) {
    let d2 = Math.floor(digits);
    if (!(d2 >= 0)) throw new Error(`invalid digits: ${digits}`);
    if (d2 > 15) return append;
    const k2 = 10 ** d2;
    return function(strings) {
      this._ += strings[0];
      for (let i = 1, n2 = strings.length; i < n2; ++i) {
        this._ += Math.round(arguments[i] * k2) / k2 + strings[i];
      }
    };
  }
  class Path {
    constructor(digits) {
      this._x0 = this._y0 = this._x1 = this._y1 = null;
      this._ = "";
      this._append = digits == null ? append : appendRound(digits);
    }
    moveTo(x2, y2) {
      this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._append`Z`;
      }
    }
    lineTo(x2, y2) {
      this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
    }
    quadraticCurveTo(x1, y1, x2, y2) {
      this._append`Q${+x1},${+y1},${this._x1 = +x2},${this._y1 = +y2}`;
    }
    bezierCurveTo(x1, y1, x2, y2, x3, y3) {
      this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
    }
    arcTo(x1, y1, x2, y2, r) {
      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
      if (r < 0) throw new Error(`negative radius: ${r}`);
      let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      if (this._x1 === null) {
        this._append`M${this._x1 = x1},${this._y1 = y1}`;
      } else if (!(l01_2 > epsilon)) ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
        this._append`L${this._x1 = x1},${this._y1 = y1}`;
      } else {
        let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l2 = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l2 / l01, t21 = l2 / l21;
        if (Math.abs(t01 - 1) > epsilon) {
          this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
        }
        this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
      }
    }
    arc(x2, y2, r, a0, a1, ccw) {
      x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
      if (r < 0) throw new Error(`negative radius: ${r}`);
      let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
      if (this._x1 === null) {
        this._append`M${x0},${y0}`;
      } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._append`L${x0},${y0}`;
      }
      if (!r) return;
      if (da < 0) da = da % tau + tau;
      if (da > tauEpsilon) {
        this._append`A${r},${r},0,1,${cw},${x2 - dx},${y2 - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
      } else if (da > epsilon) {
        this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x2 + r * Math.cos(a1)},${this._y1 = y2 + r * Math.sin(a1)}`;
      }
    }
    rect(x2, y2, w, h2) {
      this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w = +w}v${+h2}h${-w}Z`;
    }
    toString() {
      return this._;
    }
  }
  function withPath(shape) {
    let digits = 3;
    shape.digits = function(_) {
      if (!arguments.length) return digits;
      if (_ == null) {
        digits = null;
      } else {
        const d2 = Math.floor(_);
        if (!(d2 >= 0)) throw new RangeError(`invalid digits: ${_}`);
        digits = d2;
      }
      return shape;
    };
    return () => new Path(digits);
  }
  function array(x2) {
    return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
  }
  function Linear(context) {
    this._context = context;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x2, y2);
          break;
      }
    }
  };
  function curveLinear(context) {
    return new Linear(context);
  }
  function x(p2) {
    return p2[0];
  }
  function y(p2) {
    return p2[1];
  }
  function shapeLine(x$1, y$1) {
    var defined2 = constant$2(true), context = null, curve = curveLinear, output = null, path = withPath(line);
    x$1 = typeof x$1 === "function" ? x$1 : x$1 === void 0 ? x : constant$2(x$1);
    y$1 = typeof y$1 === "function" ? y$1 : y$1 === void 0 ? y : constant$2(y$1);
    function line(data) {
      var i, n2 = (data = array(data)).length, d2, defined0 = false, buffer;
      if (context == null) output = curve(buffer = path());
      for (i = 0; i <= n2; ++i) {
        if (!(i < n2 && defined2(d2 = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) output.lineStart();
          else output.lineEnd();
        }
        if (defined0) output.point(+x$1(d2, i, data), +y$1(d2, i, data));
      }
      if (buffer) return output = null, buffer + "" || null;
    }
    line.x = function(_) {
      return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$2(+_), line) : x$1;
    };
    line.y = function(_) {
      return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$2(+_), line) : y$1;
    };
    line.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant$2(!!_), line) : defined2;
    };
    line.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
  }
  function shapeArea(x0, y0, y1) {
    var x1 = null, defined2 = constant$2(true), context = null, curve = curveLinear, output = null, path = withPath(area);
    x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant$2(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant$2(0) : constant$2(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant$2(+y1);
    function area(data) {
      var i, j2, k2, n2 = (data = array(data)).length, d2, defined0 = false, buffer, x0z = new Array(n2), y0z = new Array(n2);
      if (context == null) output = curve(buffer = path());
      for (i = 0; i <= n2; ++i) {
        if (!(i < n2 && defined2(d2 = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) {
            j2 = i;
            output.areaStart();
            output.lineStart();
          } else {
            output.lineEnd();
            output.lineStart();
            for (k2 = i - 1; k2 >= j2; --k2) {
              output.point(x0z[k2], y0z[k2]);
            }
            output.lineEnd();
            output.areaEnd();
          }
        }
        if (defined0) {
          x0z[i] = +x0(d2, i, data), y0z[i] = +y0(d2, i, data);
          output.point(x1 ? +x1(d2, i, data) : x0z[i], y1 ? +y1(d2, i, data) : y0z[i]);
        }
      }
      if (buffer) return output = null, buffer + "" || null;
    }
    function arealine() {
      return shapeLine().defined(defined2).curve(curve).context(context);
    }
    area.x = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$2(+_), x1 = null, area) : x0;
    };
    area.x0 = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$2(+_), area) : x0;
    };
    area.x1 = function(_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), area) : x1;
    };
    area.y = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$2(+_), y1 = null, area) : y0;
    };
    area.y0 = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$2(+_), area) : y0;
    };
    area.y1 = function(_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
      return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
      return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
      return arealine().x(x1).y(y0);
    };
    area.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant$2(!!_), area) : defined2;
    };
    area.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
  }
  class Bump {
    constructor(context, x2) {
      this._context = context;
      this._x = x2;
    }
    areaStart() {
      this._line = 0;
    }
    areaEnd() {
      this._line = NaN;
    }
    lineStart() {
      this._point = 0;
    }
    lineEnd() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    }
    point(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0: {
          this._point = 1;
          if (this._line) this._context.lineTo(x2, y2);
          else this._context.moveTo(x2, y2);
          break;
        }
        case 1:
          this._point = 2;
        default: {
          if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
          else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
          break;
        }
      }
      this._x0 = x2, this._y0 = y2;
    }
  }
  function bumpX(context) {
    return new Bump(context, true);
  }
  function bumpY(context) {
    return new Bump(context, false);
  }
  const symbolCircle = {
    draw(context, size) {
      const r = sqrt$1(size / pi$1);
      context.moveTo(r, 0);
      context.arc(0, 0, r, 0, tau$1);
    }
  };
  const symbolCross = {
    draw(context, size) {
      const r = sqrt$1(size / 5) / 2;
      context.moveTo(-3 * r, -r);
      context.lineTo(-r, -r);
      context.lineTo(-r, -3 * r);
      context.lineTo(r, -3 * r);
      context.lineTo(r, -r);
      context.lineTo(3 * r, -r);
      context.lineTo(3 * r, r);
      context.lineTo(r, r);
      context.lineTo(r, 3 * r);
      context.lineTo(-r, 3 * r);
      context.lineTo(-r, r);
      context.lineTo(-3 * r, r);
      context.closePath();
    }
  };
  const tan30 = sqrt$1(1 / 3);
  const tan30_2 = tan30 * 2;
  const symbolDiamond = {
    draw(context, size) {
      const y2 = sqrt$1(size / tan30_2);
      const x2 = y2 * tan30;
      context.moveTo(0, -y2);
      context.lineTo(x2, 0);
      context.lineTo(0, y2);
      context.lineTo(-x2, 0);
      context.closePath();
    }
  };
  const symbolSquare = {
    draw(context, size) {
      const w = sqrt$1(size);
      const x2 = -w / 2;
      context.rect(x2, x2, w, w);
    }
  };
  const ka = 0.8908130915292852;
  const kr = sin(pi$1 / 10) / sin(7 * pi$1 / 10);
  const kx = sin(tau$1 / 10) * kr;
  const ky = -cos(tau$1 / 10) * kr;
  const symbolStar = {
    draw(context, size) {
      const r = sqrt$1(size * ka);
      const x2 = kx * r;
      const y2 = ky * r;
      context.moveTo(0, -r);
      context.lineTo(x2, y2);
      for (let i = 1; i < 5; ++i) {
        const a2 = tau$1 * i / 5;
        const c2 = cos(a2);
        const s2 = sin(a2);
        context.lineTo(s2 * r, -c2 * r);
        context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2);
      }
      context.closePath();
    }
  };
  const sqrt3 = sqrt$1(3);
  const symbolTriangle = {
    draw(context, size) {
      const y2 = -sqrt$1(size / (sqrt3 * 3));
      context.moveTo(0, y2 * 2);
      context.lineTo(-sqrt3 * y2, -y2);
      context.lineTo(sqrt3 * y2, -y2);
      context.closePath();
    }
  };
  const c = -0.5;
  const s = sqrt$1(3) / 2;
  const k = 1 / sqrt$1(12);
  const a = (k / 2 + 1) * 3;
  const symbolWye = {
    draw(context, size) {
      const r = sqrt$1(size / a);
      const x0 = r / 2, y0 = r * k;
      const x1 = x0, y1 = r * k + r;
      const x2 = -x1, y2 = y1;
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
      context.lineTo(x2, y2);
      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
      context.closePath();
    }
  };
  function Symbol$2(type, size) {
    let context = null, path = withPath(symbol);
    type = typeof type === "function" ? type : constant$2(type || symbolCircle);
    size = typeof size === "function" ? size : constant$2(size === void 0 ? 64 : +size);
    function symbol() {
      let buffer;
      if (!context) context = buffer = path();
      type.apply(this, arguments).draw(context, +size.apply(this, arguments));
      if (buffer) return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
      return arguments.length ? (type = typeof _ === "function" ? _ : constant$2(_), symbol) : type;
    };
    symbol.size = function(_) {
      return arguments.length ? (size = typeof _ === "function" ? _ : constant$2(+_), symbol) : size;
    };
    symbol.context = function(_) {
      return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
  }
  function noop$2() {
  }
  function point$2(that, x2, y2) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x2) / 6, (that._y0 + 4 * that._y1 + y2) / 6);
  }
  function Basis(context) {
    this._context = context;
  }
  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3:
          point$2(this, this._x1, this._y1);
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        default:
          point$2(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function curveBasis(context) {
    return new Basis(context);
  }
  function BasisClosed(context) {
    this._context = context;
  }
  BasisClosed.prototype = {
    areaStart: noop$2,
    areaEnd: noop$2,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x2 = x2, this._y2 = y2;
          break;
        case 1:
          this._point = 2;
          this._x3 = x2, this._y3 = y2;
          break;
        case 2:
          this._point = 3;
          this._x4 = x2, this._y4 = y2;
          this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
          break;
        default:
          point$2(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function curveBasisClosed(context) {
    return new BasisClosed(context);
  }
  function BasisOpen(context) {
    this._context = context;
  }
  BasisOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
          break;
        case 3:
          this._point = 4;
        default:
          point$2(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function curveBasisOpen(context) {
    return new BasisOpen(context);
  }
  function LinearClosed(context) {
    this._context = context;
  }
  LinearClosed.prototype = {
    areaStart: noop$2,
    areaEnd: noop$2,
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._point) this._context.closePath();
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) this._context.lineTo(x2, y2);
      else this._point = 1, this._context.moveTo(x2, y2);
    }
  };
  function curveLinearClosed(context) {
    return new LinearClosed(context);
  }
  function sign(x2) {
    return x2 < 0 ? -1 : 1;
  }
  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
  }
  function slope2(that, t2) {
    var h2 = that._x1 - that._x0;
    return h2 ? (3 * (that._y1 - that._y0) / h2 - t2) / 2 : t2;
  }
  function point$1(that, t02, t12) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
  }
  function MonotoneX(context) {
    this._context = context;
  }
  MonotoneX.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point$1(this, this._t0, slope2(this, this._t0));
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      var t12 = NaN;
      x2 = +x2, y2 = +y2;
      if (x2 === this._x1 && y2 === this._y1) return;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point$1(this, slope2(this, t12 = slope3(this, x2, y2)), t12);
          break;
        default:
          point$1(this, this._t0, t12 = slope3(this, x2, y2));
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
      this._t0 = t12;
    }
  };
  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }
  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
    MonotoneX.prototype.point.call(this, y2, x2);
  };
  function ReflectContext(context) {
    this._context = context;
  }
  ReflectContext.prototype = {
    moveTo: function(x2, y2) {
      this._context.moveTo(y2, x2);
    },
    closePath: function() {
      this._context.closePath();
    },
    lineTo: function(x2, y2) {
      this._context.lineTo(y2, x2);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
      this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
    }
  };
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }
  function Natural(context) {
    this._context = context;
  }
  Natural.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function() {
      var x2 = this._x, y2 = this._y, n2 = x2.length;
      if (n2) {
        this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
        if (n2 === 2) {
          this._context.lineTo(x2[1], y2[1]);
        } else {
          var px = controlPoints(x2), py = controlPoints(y2);
          for (var i0 = 0, i1 = 1; i1 < n2; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
          }
        }
      }
      if (this._line || this._line !== 0 && n2 === 1) this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function(x2, y2) {
      this._x.push(+x2);
      this._y.push(+y2);
    }
  };
  function controlPoints(x2) {
    var i, n2 = x2.length - 1, m2, a2 = new Array(n2), b2 = new Array(n2), r = new Array(n2);
    a2[0] = 0, b2[0] = 2, r[0] = x2[0] + 2 * x2[1];
    for (i = 1; i < n2 - 1; ++i) a2[i] = 1, b2[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
    a2[n2 - 1] = 2, b2[n2 - 1] = 7, r[n2 - 1] = 8 * x2[n2 - 1] + x2[n2];
    for (i = 1; i < n2; ++i) m2 = a2[i] / b2[i - 1], b2[i] -= m2, r[i] -= m2 * r[i - 1];
    a2[n2 - 1] = r[n2 - 1] / b2[n2 - 1];
    for (i = n2 - 2; i >= 0; --i) a2[i] = (r[i] - a2[i + 1]) / b2[i];
    b2[n2 - 1] = (x2[n2] + a2[n2 - 1]) / 2;
    for (i = 0; i < n2 - 1; ++i) b2[i] = 2 * x2[i + 1] - a2[i + 1];
    return [
      a2,
      b2
    ];
  }
  function curveNatural(context) {
    return new Natural(context);
  }
  function Step(context, t2) {
    this._context = context;
    this._t = t2;
  }
  Step.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y2);
            this._context.lineTo(x2, y2);
          } else {
            var x1 = this._x * (1 - this._t) + x2 * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y2);
          }
          break;
        }
      }
      this._x = x2, this._y = y2;
    }
  };
  function curveStep(context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }
  function stackOffsetNone(series, order) {
    if (!((n2 = series.length) > 1)) return;
    for (var i = 1, j2, s0, s1 = series[order[0]], n2, m2 = s1.length; i < n2; ++i) {
      s0 = s1, s1 = series[order[i]];
      for (j2 = 0; j2 < m2; ++j2) {
        s1[j2][1] += s1[j2][0] = isNaN(s0[j2][1]) ? s0[j2][0] : s0[j2][1];
      }
    }
  }
  function stackOrderNone(series) {
    var n2 = series.length, o = new Array(n2);
    while (--n2 >= 0) o[n2] = n2;
    return o;
  }
  function stackValue(d2, key) {
    return d2[key];
  }
  function stackSeries(key) {
    const series = [];
    series.key = key;
    return series;
  }
  function shapeStack() {
    var keys2 = constant$2([]), order = stackOrderNone, offset = stackOffsetNone, value = stackValue;
    function stack(data) {
      var sz = Array.from(keys2.apply(this, arguments), stackSeries), i, n2 = sz.length, j2 = -1, oz;
      for (const d2 of data) {
        for (i = 0, ++j2; i < n2; ++i) {
          (sz[i][j2] = [
            0,
            +value(d2, sz[i].key, j2, data)
          ]).data = d2;
        }
      }
      for (i = 0, oz = array(order(sz)); i < n2; ++i) {
        sz[oz[i]].index = i;
      }
      offset(sz, oz);
      return sz;
    }
    stack.keys = function(_) {
      return arguments.length ? (keys2 = typeof _ === "function" ? _ : constant$2(Array.from(_)), stack) : keys2;
    };
    stack.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant$2(+_), stack) : value;
    };
    stack.order = function(_) {
      return arguments.length ? (order = _ == null ? stackOrderNone : typeof _ === "function" ? _ : constant$2(Array.from(_)), stack) : order;
    };
    stack.offset = function(_) {
      return arguments.length ? (offset = _ == null ? stackOffsetNone : _, stack) : offset;
    };
    return stack;
  }
  function stackOffsetExpand(series, order) {
    if (!((n2 = series.length) > 0)) return;
    for (var i, n2, j2 = 0, m2 = series[0].length, y2; j2 < m2; ++j2) {
      for (y2 = i = 0; i < n2; ++i) y2 += series[i][j2][1] || 0;
      if (y2) for (i = 0; i < n2; ++i) series[i][j2][1] /= y2;
    }
    stackOffsetNone(series, order);
  }
  function stackOffsetSilhouette(series, order) {
    if (!((n2 = series.length) > 0)) return;
    for (var j2 = 0, s0 = series[order[0]], n2, m2 = s0.length; j2 < m2; ++j2) {
      for (var i = 0, y2 = 0; i < n2; ++i) y2 += series[i][j2][1] || 0;
      s0[j2][1] += s0[j2][0] = -y2 / 2;
    }
    stackOffsetNone(series, order);
  }
  function stackOffsetWiggle(series, order) {
    if (!((n2 = series.length) > 0) || !((m2 = (s0 = series[order[0]]).length) > 0)) return;
    for (var y2 = 0, j2 = 1, s0, m2, n2; j2 < m2; ++j2) {
      for (var i = 0, s1 = 0, s2 = 0; i < n2; ++i) {
        var si = series[order[i]], sij0 = si[j2][1] || 0, sij1 = si[j2 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
        for (var k2 = 0; k2 < i; ++k2) {
          var sk = series[order[k2]], skj0 = sk[j2][1] || 0, skj1 = sk[j2 - 1][1] || 0;
          s3 += skj0 - skj1;
        }
        s1 += sij0, s2 += s3 * sij0;
      }
      s0[j2 - 1][1] += s0[j2 - 1][0] = y2;
      if (s1) y2 -= s2 / s1;
    }
    s0[j2 - 1][1] += s0[j2 - 1][0] = y2;
    stackOffsetNone(series, order);
  }
  function _typeof$F(o) {
    "@babel/helpers - typeof";
    return _typeof$F = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$F(o);
  }
  var _excluded$d = [
    "type",
    "size",
    "sizeType"
  ];
  function _extends$n() {
    _extends$n = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$n.apply(this, arguments);
  }
  function ownKeys$y(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$y(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$y(Object(t2), true).forEach(function(r2) {
        _defineProperty$D(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$y(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$D(obj, key, value) {
    key = _toPropertyKey$E(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$E(t2) {
    var i = _toPrimitive$E(t2, "string");
    return "symbol" == _typeof$F(i) ? i : i + "";
  }
  function _toPrimitive$E(t2, r) {
    if ("object" != _typeof$F(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$F(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _objectWithoutProperties$d(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$d(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$d(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var symbolFactories = {
    symbolCircle,
    symbolCross,
    symbolDiamond,
    symbolSquare,
    symbolStar,
    symbolTriangle,
    symbolWye
  };
  var RADIAN$1 = Math.PI / 180;
  var getSymbolFactory = function getSymbolFactory2(type) {
    var name = "symbol".concat(upperFirst$1(type));
    return symbolFactories[name] || symbolCircle;
  };
  var calculateAreaSize = function calculateAreaSize2(size, sizeType, type) {
    if (sizeType === "area") {
      return size;
    }
    switch (type) {
      case "cross":
        return 5 * size * size / 9;
      case "diamond":
        return 0.5 * size * size / Math.sqrt(3);
      case "square":
        return size * size;
      case "star": {
        var angle = 18 * RADIAN$1;
        return 1.25 * size * size * (Math.tan(angle) - Math.tan(angle * 2) * Math.pow(Math.tan(angle), 2));
      }
      case "triangle":
        return Math.sqrt(3) * size * size / 4;
      case "wye":
        return (21 - 10 * Math.sqrt(3)) * size * size / 8;
      default:
        return Math.PI * size * size / 4;
    }
  };
  var registerSymbol = function registerSymbol2(key, factory) {
    symbolFactories["symbol".concat(upperFirst$1(key))] = factory;
  };
  var Symbols = function Symbols2(_ref) {
    var _ref$type = _ref.type, type = _ref$type === void 0 ? "circle" : _ref$type, _ref$size = _ref.size, size = _ref$size === void 0 ? 64 : _ref$size, _ref$sizeType = _ref.sizeType, sizeType = _ref$sizeType === void 0 ? "area" : _ref$sizeType, rest = _objectWithoutProperties$d(_ref, _excluded$d);
    var props = _objectSpread$y(_objectSpread$y({}, rest), {}, {
      type,
      size,
      sizeType
    });
    var getPath2 = function getPath3() {
      var symbolFactory = getSymbolFactory(type);
      var symbol = Symbol$2().type(symbolFactory).size(calculateAreaSize(size, sizeType, type));
      return symbol();
    };
    var className = props.className, cx = props.cx, cy = props.cy;
    var filteredProps = filterProps(props, true);
    if (cx === +cx && cy === +cy && size === +size) {
      return React.createElement("path", _extends$n({}, filteredProps, {
        className: clsx("recharts-symbols", className),
        transform: "translate(".concat(cx, ", ").concat(cy, ")"),
        d: getPath2()
      }));
    }
    return null;
  };
  Symbols.registerSymbol = registerSymbol;
  function _typeof$E(o) {
    "@babel/helpers - typeof";
    return _typeof$E = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$E(o);
  }
  function _extends$m() {
    _extends$m = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$m.apply(this, arguments);
  }
  function ownKeys$x(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$x(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$x(Object(t2), true).forEach(function(r2) {
        _defineProperty$C(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$x(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$h(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$h(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$D(descriptor.key), descriptor);
    }
  }
  function _createClass$h(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$h(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$d(t2, o, e3) {
    return o = _getPrototypeOf$e(o), _possibleConstructorReturn$e(t2, _isNativeReflectConstruct$e() ? Reflect.construct(o, e3 || [], _getPrototypeOf$e(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$e(self, call) {
    if (call && (_typeof$E(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$e(self);
  }
  function _assertThisInitialized$e(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$e() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$e = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$e(o) {
    _getPrototypeOf$e = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$e(o);
  }
  function _inherits$e(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$e(subClass, superClass);
  }
  function _setPrototypeOf$e(o, p2) {
    _setPrototypeOf$e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$e(o, p2);
  }
  function _defineProperty$C(obj, key, value) {
    key = _toPropertyKey$D(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$D(t2) {
    var i = _toPrimitive$D(t2, "string");
    return "symbol" == _typeof$E(i) ? i : i + "";
  }
  function _toPrimitive$D(t2, r) {
    if ("object" != _typeof$E(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$E(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var SIZE = 32;
  var DefaultLegendContent = function(_PureComponent) {
    function DefaultLegendContent2() {
      _classCallCheck$h(this, DefaultLegendContent2);
      return _callSuper$d(this, DefaultLegendContent2, arguments);
    }
    _inherits$e(DefaultLegendContent2, _PureComponent);
    return _createClass$h(DefaultLegendContent2, [
      {
        key: "renderIcon",
        value: function renderIcon(data) {
          var inactiveColor = this.props.inactiveColor;
          var halfSize = SIZE / 2;
          var sixthSize = SIZE / 6;
          var thirdSize = SIZE / 3;
          var color2 = data.inactive ? inactiveColor : data.color;
          if (data.type === "plainline") {
            return React.createElement("line", {
              strokeWidth: 4,
              fill: "none",
              stroke: color2,
              strokeDasharray: data.payload.strokeDasharray,
              x1: 0,
              y1: halfSize,
              x2: SIZE,
              y2: halfSize,
              className: "recharts-legend-icon"
            });
          }
          if (data.type === "line") {
            return React.createElement("path", {
              strokeWidth: 4,
              fill: "none",
              stroke: color2,
              d: "M0,".concat(halfSize, "h").concat(thirdSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(2 * thirdSize, ",").concat(halfSize, "\n            H").concat(SIZE, "M").concat(2 * thirdSize, ",").concat(halfSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(thirdSize, ",").concat(halfSize),
              className: "recharts-legend-icon"
            });
          }
          if (data.type === "rect") {
            return React.createElement("path", {
              stroke: "none",
              fill: color2,
              d: "M0,".concat(SIZE / 8, "h").concat(SIZE, "v").concat(SIZE * 3 / 4, "h").concat(-SIZE, "z"),
              className: "recharts-legend-icon"
            });
          }
          if (React.isValidElement(data.legendIcon)) {
            var iconProps = _objectSpread$x({}, data);
            delete iconProps.legendIcon;
            return React.cloneElement(data.legendIcon, iconProps);
          }
          return React.createElement(Symbols, {
            fill: color2,
            cx: halfSize,
            cy: halfSize,
            size: SIZE,
            sizeType: "diameter",
            type: data.type
          });
        }
      },
      {
        key: "renderItems",
        value: function renderItems() {
          var _this = this;
          var _this$props = this.props, payload = _this$props.payload, iconSize = _this$props.iconSize, layout = _this$props.layout, formatter = _this$props.formatter, inactiveColor = _this$props.inactiveColor;
          var viewBox = {
            x: 0,
            y: 0,
            width: SIZE,
            height: SIZE
          };
          var itemStyle = {
            display: layout === "horizontal" ? "inline-block" : "block",
            marginRight: 10
          };
          var svgStyle = {
            display: "inline-block",
            verticalAlign: "middle",
            marginRight: 4
          };
          return payload.map(function(entry, i) {
            var finalFormatter = entry.formatter || formatter;
            var className = clsx(_defineProperty$C(_defineProperty$C({
              "recharts-legend-item": true
            }, "legend-item-".concat(i), true), "inactive", entry.inactive));
            if (entry.type === "none") {
              return null;
            }
            var entryValue = !isFunction(entry.value) ? entry.value : null;
            warn(!isFunction(entry.value), `The name property is also required when using a function for the dataKey of a chart's cartesian components. Ex: <Bar name="Name of my Data"/>`);
            var color2 = entry.inactive ? inactiveColor : entry.color;
            return React.createElement("li", _extends$m({
              className,
              style: itemStyle,
              key: "legend-item-".concat(i)
            }, adaptEventsOfChild(_this.props, entry, i)), React.createElement(Surface, {
              width: iconSize,
              height: iconSize,
              viewBox,
              style: svgStyle
            }, _this.renderIcon(entry)), React.createElement("span", {
              className: "recharts-legend-item-text",
              style: {
                color: color2
              }
            }, finalFormatter ? finalFormatter(entryValue, entry, i) : entryValue));
          });
        }
      },
      {
        key: "render",
        value: function render() {
          var _this$props2 = this.props, payload = _this$props2.payload, layout = _this$props2.layout, align = _this$props2.align;
          if (!payload || !payload.length) {
            return null;
          }
          var finalStyle = {
            padding: 0,
            margin: 0,
            textAlign: layout === "horizontal" ? align : "left"
          };
          return React.createElement("ul", {
            className: "recharts-default-legend",
            style: finalStyle
          }, this.renderItems());
        }
      }
    ]);
  }(reactExports.PureComponent);
  _defineProperty$C(DefaultLegendContent, "displayName", "Legend");
  _defineProperty$C(DefaultLegendContent, "defaultProps", {
    iconSize: 14,
    layout: "horizontal",
    align: "center",
    verticalAlign: "middle",
    inactiveColor: "#ccc"
  });
  function baseFindIndex$2(array2, predicate, fromIndex, fromRight) {
    var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index2-- : ++index2 < length) {
      if (predicate(array2[index2], index2, array2)) {
        return index2;
      }
    }
    return -1;
  }
  var _baseFindIndex = baseFindIndex$2;
  function baseIsNaN$1(value) {
    return value !== value;
  }
  var _baseIsNaN = baseIsNaN$1;
  function strictIndexOf$1(array2, value, fromIndex) {
    var index2 = fromIndex - 1, length = array2.length;
    while (++index2 < length) {
      if (array2[index2] === value) {
        return index2;
      }
    }
    return -1;
  }
  var _strictIndexOf = strictIndexOf$1;
  var baseFindIndex$1 = _baseFindIndex, baseIsNaN = _baseIsNaN, strictIndexOf = _strictIndexOf;
  function baseIndexOf$1(array2, value, fromIndex) {
    return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex$1(array2, baseIsNaN, fromIndex);
  }
  var _baseIndexOf = baseIndexOf$1;
  var baseIndexOf = _baseIndexOf;
  function arrayIncludes$1(array2, value) {
    var length = array2 == null ? 0 : array2.length;
    return !!length && baseIndexOf(array2, value, 0) > -1;
  }
  var _arrayIncludes = arrayIncludes$1;
  function arrayIncludesWith$1(array2, value, comparator) {
    var index2 = -1, length = array2 == null ? 0 : array2.length;
    while (++index2 < length) {
      if (comparator(value, array2[index2])) {
        return true;
      }
    }
    return false;
  }
  var _arrayIncludesWith = arrayIncludesWith$1;
  function noop$1() {
  }
  var noop_1 = noop$1;
  var Set$1 = _Set, noop = noop_1, setToArray$1 = _setToArray;
  var INFINITY$1 = 1 / 0;
  var createSet$1 = !(Set$1 && 1 / setToArray$1(new Set$1([
    ,
    -0
  ]))[1] == INFINITY$1) ? noop : function(values) {
    return new Set$1(values);
  };
  var _createSet = createSet$1;
  var SetCache = _SetCache, arrayIncludes = _arrayIncludes, arrayIncludesWith = _arrayIncludesWith, cacheHas = _cacheHas, createSet = _createSet, setToArray = _setToArray;
  var LARGE_ARRAY_SIZE = 200;
  function baseUniq$1(array2, iteratee, comparator) {
    var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array2);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }
    outer: while (++index2 < length) {
      var value = array2[index2], computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }
  var _baseUniq = baseUniq$1;
  var baseIteratee$7 = _baseIteratee, baseUniq = _baseUniq;
  function uniqBy(array2, iteratee) {
    return array2 && array2.length ? baseUniq(array2, baseIteratee$7(iteratee)) : [];
  }
  var uniqBy_1 = uniqBy;
  const uniqBy$1 = getDefaultExportFromCjs(uniqBy_1);
  function getUniqPayload(payload, option, defaultUniqBy2) {
    if (option === true) {
      return uniqBy$1(payload, defaultUniqBy2);
    }
    if (isFunction(option)) {
      return uniqBy$1(payload, option);
    }
    return payload;
  }
  function _typeof$D(o) {
    "@babel/helpers - typeof";
    return _typeof$D = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$D(o);
  }
  var _excluded$c = [
    "ref"
  ];
  function ownKeys$w(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$w(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$w(Object(t2), true).forEach(function(r2) {
        _defineProperty$B(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$w(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$g(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$g(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$C(descriptor.key), descriptor);
    }
  }
  function _createClass$g(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$g(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$g(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$c(t2, o, e3) {
    return o = _getPrototypeOf$d(o), _possibleConstructorReturn$d(t2, _isNativeReflectConstruct$d() ? Reflect.construct(o, e3 || [], _getPrototypeOf$d(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$d(self, call) {
    if (call && (_typeof$D(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$d(self);
  }
  function _assertThisInitialized$d(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$d() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$d = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$d(o) {
    _getPrototypeOf$d = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$d(o);
  }
  function _inherits$d(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$d(subClass, superClass);
  }
  function _setPrototypeOf$d(o, p2) {
    _setPrototypeOf$d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$d(o, p2);
  }
  function _defineProperty$B(obj, key, value) {
    key = _toPropertyKey$C(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$C(t2) {
    var i = _toPrimitive$C(t2, "string");
    return "symbol" == _typeof$D(i) ? i : i + "";
  }
  function _toPrimitive$C(t2, r) {
    if ("object" != _typeof$D(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$D(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _objectWithoutProperties$c(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$c(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$c(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function defaultUniqBy$1(entry) {
    return entry.value;
  }
  function renderContent$1(content, props) {
    if (React.isValidElement(content)) {
      return React.cloneElement(content, props);
    }
    if (typeof content === "function") {
      return React.createElement(content, props);
    }
    props.ref;
    var otherProps = _objectWithoutProperties$c(props, _excluded$c);
    return React.createElement(DefaultLegendContent, otherProps);
  }
  var EPS$1 = 1;
  var Legend = function(_PureComponent) {
    function Legend2() {
      var _this;
      _classCallCheck$g(this, Legend2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper$c(this, Legend2, [].concat(args));
      _defineProperty$B(_this, "lastBoundingBox", {
        width: -1,
        height: -1
      });
      return _this;
    }
    _inherits$d(Legend2, _PureComponent);
    return _createClass$g(Legend2, [
      {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateBBox();
        }
      },
      {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this.updateBBox();
        }
      },
      {
        key: "getBBox",
        value: function getBBox() {
          if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            var box = this.wrapperNode.getBoundingClientRect();
            box.height = this.wrapperNode.offsetHeight;
            box.width = this.wrapperNode.offsetWidth;
            return box;
          }
          return null;
        }
      },
      {
        key: "updateBBox",
        value: function updateBBox() {
          var onBBoxUpdate = this.props.onBBoxUpdate;
          var box = this.getBBox();
          if (box) {
            if (Math.abs(box.width - this.lastBoundingBox.width) > EPS$1 || Math.abs(box.height - this.lastBoundingBox.height) > EPS$1) {
              this.lastBoundingBox.width = box.width;
              this.lastBoundingBox.height = box.height;
              if (onBBoxUpdate) {
                onBBoxUpdate(box);
              }
            }
          } else if (this.lastBoundingBox.width !== -1 || this.lastBoundingBox.height !== -1) {
            this.lastBoundingBox.width = -1;
            this.lastBoundingBox.height = -1;
            if (onBBoxUpdate) {
              onBBoxUpdate(null);
            }
          }
        }
      },
      {
        key: "getBBoxSnapshot",
        value: function getBBoxSnapshot() {
          if (this.lastBoundingBox.width >= 0 && this.lastBoundingBox.height >= 0) {
            return _objectSpread$w({}, this.lastBoundingBox);
          }
          return {
            width: 0,
            height: 0
          };
        }
      },
      {
        key: "getDefaultPosition",
        value: function getDefaultPosition(style) {
          var _this$props = this.props, layout = _this$props.layout, align = _this$props.align, verticalAlign = _this$props.verticalAlign, margin = _this$props.margin, chartWidth = _this$props.chartWidth, chartHeight = _this$props.chartHeight;
          var hPos, vPos;
          if (!style || (style.left === void 0 || style.left === null) && (style.right === void 0 || style.right === null)) {
            if (align === "center" && layout === "vertical") {
              var box = this.getBBoxSnapshot();
              hPos = {
                left: ((chartWidth || 0) - box.width) / 2
              };
            } else {
              hPos = align === "right" ? {
                right: margin && margin.right || 0
              } : {
                left: margin && margin.left || 0
              };
            }
          }
          if (!style || (style.top === void 0 || style.top === null) && (style.bottom === void 0 || style.bottom === null)) {
            if (verticalAlign === "middle") {
              var _box = this.getBBoxSnapshot();
              vPos = {
                top: ((chartHeight || 0) - _box.height) / 2
              };
            } else {
              vPos = verticalAlign === "bottom" ? {
                bottom: margin && margin.bottom || 0
              } : {
                top: margin && margin.top || 0
              };
            }
          }
          return _objectSpread$w(_objectSpread$w({}, hPos), vPos);
        }
      },
      {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$props2 = this.props, content = _this$props2.content, width = _this$props2.width, height = _this$props2.height, wrapperStyle = _this$props2.wrapperStyle, payloadUniqBy = _this$props2.payloadUniqBy, payload = _this$props2.payload;
          var outerStyle = _objectSpread$w(_objectSpread$w({
            position: "absolute",
            width: width || "auto",
            height: height || "auto"
          }, this.getDefaultPosition(wrapperStyle)), wrapperStyle);
          return React.createElement("div", {
            className: "recharts-legend-wrapper",
            style: outerStyle,
            ref: function ref(node) {
              _this2.wrapperNode = node;
            }
          }, renderContent$1(content, _objectSpread$w(_objectSpread$w({}, this.props), {}, {
            payload: getUniqPayload(payload, payloadUniqBy, defaultUniqBy$1)
          })));
        }
      }
    ], [
      {
        key: "getWithHeight",
        value: function getWithHeight(item, chartWidth) {
          var _this$defaultProps$it = _objectSpread$w(_objectSpread$w({}, this.defaultProps), item.props), layout = _this$defaultProps$it.layout;
          if (layout === "vertical" && isNumber(item.props.height)) {
            return {
              height: item.props.height
            };
          }
          if (layout === "horizontal") {
            return {
              width: item.props.width || chartWidth
            };
          }
          return null;
        }
      }
    ]);
  }(reactExports.PureComponent);
  _defineProperty$B(Legend, "displayName", "Legend");
  _defineProperty$B(Legend, "defaultProps", {
    iconSize: 14,
    layout: "horizontal",
    align: "center",
    verticalAlign: "bottom"
  });
  var Symbol$1 = _Symbol, isArguments = isArguments_1, isArray$5 = isArray_1;
  var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
  function isFlattenable$1(value) {
    return isArray$5(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  var _isFlattenable = isFlattenable$1;
  var arrayPush = _arrayPush, isFlattenable = _isFlattenable;
  function baseFlatten$2(array2, depth, predicate, isStrict, result) {
    var index2 = -1, length = array2.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index2 < length) {
      var value = array2[index2];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten$2(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  _baseFlatten = baseFlatten$2;
  function createBaseFor$1(fromRight) {
    return function(object2, iteratee, keysFunc) {
      var index2 = -1, iterable = Object(object2), props = keysFunc(object2), length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index2];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object2;
    };
  }
  var _createBaseFor = createBaseFor$1;
  var createBaseFor = _createBaseFor;
  var baseFor$1 = createBaseFor();
  _baseFor = baseFor$1;
  var baseFor = _baseFor, keys$2 = keys_1;
  function baseForOwn$2(object2, iteratee) {
    return object2 && baseFor(object2, iteratee, keys$2);
  }
  var _baseForOwn = baseForOwn$2;
  var isArrayLike$3 = isArrayLike_1;
  function createBaseEach$1(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike$3(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
      while (fromRight ? index2-- : ++index2 < length) {
        if (iteratee(iterable[index2], index2, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  var _createBaseEach = createBaseEach$1;
  var baseForOwn$1 = _baseForOwn, createBaseEach = _createBaseEach;
  var baseEach$3 = createBaseEach(baseForOwn$1);
  var _baseEach = baseEach$3;
  var baseEach$2 = _baseEach, isArrayLike$2 = isArrayLike_1;
  function baseMap$2(collection, iteratee) {
    var index2 = -1, result = isArrayLike$2(collection) ? Array(collection.length) : [];
    baseEach$2(collection, function(value, key, collection2) {
      result[++index2] = iteratee(value, key, collection2);
    });
    return result;
  }
  var _baseMap = baseMap$2;
  function baseSortBy$1(array2, comparer) {
    var length = array2.length;
    array2.sort(comparer);
    while (length--) {
      array2[length] = array2[length].value;
    }
    return array2;
  }
  var _baseSortBy = baseSortBy$1;
  var isSymbol$2 = isSymbol_1;
  function compareAscending$1(value, other) {
    if (value !== other) {
      var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol$2(value);
      var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol$2(other);
      if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
        return 1;
      }
      if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
        return -1;
      }
    }
    return 0;
  }
  var _compareAscending = compareAscending$1;
  var compareAscending = _compareAscending;
  function compareMultiple$1(object2, other, orders) {
    var index2 = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
    while (++index2 < length) {
      var result = compareAscending(objCriteria[index2], othCriteria[index2]);
      if (result) {
        if (index2 >= ordersLength) {
          return result;
        }
        var order = orders[index2];
        return result * (order == "desc" ? -1 : 1);
      }
    }
    return object2.index - other.index;
  }
  var _compareMultiple = compareMultiple$1;
  var arrayMap$1 = _arrayMap, baseGet = _baseGet, baseIteratee$6 = _baseIteratee, baseMap$1 = _baseMap, baseSortBy = _baseSortBy, baseUnary = _baseUnary, compareMultiple = _compareMultiple, identity$9 = identity_1, isArray$4 = isArray_1;
  function baseOrderBy$1(collection, iteratees, orders) {
    if (iteratees.length) {
      iteratees = arrayMap$1(iteratees, function(iteratee) {
        if (isArray$4(iteratee)) {
          return function(value) {
            return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
          };
        }
        return iteratee;
      });
    } else {
      iteratees = [
        identity$9
      ];
    }
    var index2 = -1;
    iteratees = arrayMap$1(iteratees, baseUnary(baseIteratee$6));
    var result = baseMap$1(collection, function(value, key, collection2) {
      var criteria = arrayMap$1(iteratees, function(iteratee) {
        return iteratee(value);
      });
      return {
        "criteria": criteria,
        "index": ++index2,
        "value": value
      };
    });
    return baseSortBy(result, function(object2, other) {
      return compareMultiple(object2, other, orders);
    });
  }
  var _baseOrderBy = baseOrderBy$1;
  function apply$1(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  _apply = apply$1;
  var apply = _apply;
  var nativeMax$4 = Math.max;
  function overRest$1(func, start, transform2) {
    start = nativeMax$4(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index2 = -1, length = nativeMax$4(args.length - start, 0), array2 = Array(length);
      while (++index2 < length) {
        array2[index2] = args[start + index2];
      }
      index2 = -1;
      var otherArgs = Array(start + 1);
      while (++index2 < start) {
        otherArgs[index2] = args[index2];
      }
      otherArgs[start] = transform2(array2);
      return apply(func, this, otherArgs);
    };
  }
  _overRest = overRest$1;
  function constant$1(value) {
    return function() {
      return value;
    };
  }
  var constant_1 = constant$1;
  var constant = constant_1, defineProperty = _defineProperty$E, identity$8 = identity_1;
  var baseSetToString$1 = !defineProperty ? identity$8 : function(func, string) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string),
      "writable": true
    });
  };
  var _baseSetToString = baseSetToString$1;
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut$1(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  var _shortOut = shortOut$1;
  var baseSetToString = _baseSetToString, shortOut = _shortOut;
  var setToString$1 = shortOut(baseSetToString);
  _setToString = setToString$1;
  var identity$7 = identity_1, overRest = _overRest, setToString = _setToString;
  function baseRest$1(func, start) {
    return setToString(overRest(func, start, identity$7), func + "");
  }
  _baseRest = baseRest$1;
  var eq = eq_1, isArrayLike$1 = isArrayLike_1, isIndex = _isIndex, isObject$3 = isObject_1;
  function isIterateeCall$5(value, index2, object2) {
    if (!isObject$3(object2)) {
      return false;
    }
    var type = typeof index2;
    if (type == "number" ? isArrayLike$1(object2) && isIndex(index2, object2.length) : type == "string" && index2 in object2) {
      return eq(object2[index2], value);
    }
    return false;
  }
  _isIterateeCall = isIterateeCall$5;
  var baseFlatten$1 = _baseFlatten, baseOrderBy = _baseOrderBy, baseRest = _baseRest, isIterateeCall$4 = _isIterateeCall;
  var sortBy = baseRest(function(collection, iteratees) {
    if (collection == null) {
      return [];
    }
    var length = iteratees.length;
    if (length > 1 && isIterateeCall$4(collection, iteratees[0], iteratees[1])) {
      iteratees = [];
    } else if (length > 2 && isIterateeCall$4(iteratees[0], iteratees[1], iteratees[2])) {
      iteratees = [
        iteratees[0]
      ];
    }
    return baseOrderBy(collection, baseFlatten$1(iteratees, 1), []);
  });
  var sortBy_1 = sortBy;
  const sortBy$1 = getDefaultExportFromCjs(sortBy_1);
  function _typeof$C(o) {
    "@babel/helpers - typeof";
    return _typeof$C = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$C(o);
  }
  function _extends$l() {
    _extends$l = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$l.apply(this, arguments);
  }
  function _slicedToArray$b(arr, i) {
    return _arrayWithHoles$c(arr) || _iterableToArrayLimit$b(arr, i) || _unsupportedIterableToArray$i(arr, i) || _nonIterableRest$c();
  }
  function _nonIterableRest$c() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$i(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$i(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$i(o, minLen);
  }
  function _arrayLikeToArray$i(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$b(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$c(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function ownKeys$v(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$v(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$v(Object(t2), true).forEach(function(r2) {
        _defineProperty$A(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$v(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$A(obj, key, value) {
    key = _toPropertyKey$B(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$B(t2) {
    var i = _toPrimitive$B(t2, "string");
    return "symbol" == _typeof$C(i) ? i : i + "";
  }
  function _toPrimitive$B(t2, r) {
    if ("object" != _typeof$C(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$C(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function defaultFormatter(value) {
    return Array.isArray(value) && isNumOrStr(value[0]) && isNumOrStr(value[1]) ? value.join(" ~ ") : value;
  }
  var DefaultTooltipContent = function DefaultTooltipContent2(props) {
    var _props$separator = props.separator, separator = _props$separator === void 0 ? " : " : _props$separator, _props$contentStyle = props.contentStyle, contentStyle = _props$contentStyle === void 0 ? {} : _props$contentStyle, _props$itemStyle = props.itemStyle, itemStyle = _props$itemStyle === void 0 ? {} : _props$itemStyle, _props$labelStyle = props.labelStyle, labelStyle = _props$labelStyle === void 0 ? {} : _props$labelStyle, payload = props.payload, formatter = props.formatter, itemSorter = props.itemSorter, wrapperClassName = props.wrapperClassName, labelClassName = props.labelClassName, label = props.label, labelFormatter = props.labelFormatter, _props$accessibilityL = props.accessibilityLayer, accessibilityLayer = _props$accessibilityL === void 0 ? false : _props$accessibilityL;
    var renderContent2 = function renderContent3() {
      if (payload && payload.length) {
        var listStyle = {
          padding: 0,
          margin: 0
        };
        var items = (itemSorter ? sortBy$1(payload, itemSorter) : payload).map(function(entry, i) {
          if (entry.type === "none") {
            return null;
          }
          var finalItemStyle = _objectSpread$v({
            display: "block",
            paddingTop: 4,
            paddingBottom: 4,
            color: entry.color || "#000"
          }, itemStyle);
          var finalFormatter = entry.formatter || formatter || defaultFormatter;
          var value = entry.value, name = entry.name;
          var finalValue = value;
          var finalName = name;
          if (finalFormatter && finalValue != null && finalName != null) {
            var formatted = finalFormatter(value, name, entry, i, payload);
            if (Array.isArray(formatted)) {
              var _formatted = _slicedToArray$b(formatted, 2);
              finalValue = _formatted[0];
              finalName = _formatted[1];
            } else {
              finalValue = formatted;
            }
          }
          return React.createElement("li", {
            className: "recharts-tooltip-item",
            key: "tooltip-item-".concat(i),
            style: finalItemStyle
          }, isNumOrStr(finalName) ? React.createElement("span", {
            className: "recharts-tooltip-item-name"
          }, finalName) : null, isNumOrStr(finalName) ? React.createElement("span", {
            className: "recharts-tooltip-item-separator"
          }, separator) : null, React.createElement("span", {
            className: "recharts-tooltip-item-value"
          }, finalValue), React.createElement("span", {
            className: "recharts-tooltip-item-unit"
          }, entry.unit || ""));
        });
        return React.createElement("ul", {
          className: "recharts-tooltip-item-list",
          style: listStyle
        }, items);
      }
      return null;
    };
    var finalStyle = _objectSpread$v({
      margin: 0,
      padding: 10,
      backgroundColor: "#fff",
      border: "1px solid #ccc",
      whiteSpace: "nowrap"
    }, contentStyle);
    var finalLabelStyle = _objectSpread$v({
      margin: 0
    }, labelStyle);
    var hasLabel = !isNil$1(label);
    var finalLabel = hasLabel ? label : "";
    var wrapperCN = clsx("recharts-default-tooltip", wrapperClassName);
    var labelCN = clsx("recharts-tooltip-label", labelClassName);
    if (hasLabel && labelFormatter && payload !== void 0 && payload !== null) {
      finalLabel = labelFormatter(label, payload);
    }
    var accessibilityAttributes = accessibilityLayer ? {
      role: "status",
      "aria-live": "assertive"
    } : {};
    return React.createElement("div", _extends$l({
      className: wrapperCN,
      style: finalStyle
    }, accessibilityAttributes), React.createElement("p", {
      className: labelCN,
      style: finalLabelStyle
    }, React.isValidElement(finalLabel) ? finalLabel : "".concat(finalLabel)), renderContent2());
  };
  function _typeof$B(o) {
    "@babel/helpers - typeof";
    return _typeof$B = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$B(o);
  }
  function _defineProperty$z(obj, key, value) {
    key = _toPropertyKey$A(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$A(t2) {
    var i = _toPrimitive$A(t2, "string");
    return "symbol" == _typeof$B(i) ? i : i + "";
  }
  function _toPrimitive$A(t2, r) {
    if ("object" != _typeof$B(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$B(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var CSS_CLASS_PREFIX = "recharts-tooltip-wrapper";
  var TOOLTIP_HIDDEN = {
    visibility: "hidden"
  };
  function getTooltipCSSClassName(_ref) {
    var coordinate = _ref.coordinate, translateX = _ref.translateX, translateY = _ref.translateY;
    return clsx(CSS_CLASS_PREFIX, _defineProperty$z(_defineProperty$z(_defineProperty$z(_defineProperty$z({}, "".concat(CSS_CLASS_PREFIX, "-right"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX >= coordinate.x), "".concat(CSS_CLASS_PREFIX, "-left"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX < coordinate.x), "".concat(CSS_CLASS_PREFIX, "-bottom"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY >= coordinate.y), "".concat(CSS_CLASS_PREFIX, "-top"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY < coordinate.y));
  }
  function getTooltipTranslateXY(_ref2) {
    var allowEscapeViewBox = _ref2.allowEscapeViewBox, coordinate = _ref2.coordinate, key = _ref2.key, offsetTopLeft = _ref2.offsetTopLeft, position = _ref2.position, reverseDirection = _ref2.reverseDirection, tooltipDimension = _ref2.tooltipDimension, viewBox = _ref2.viewBox, viewBoxDimension = _ref2.viewBoxDimension;
    if (position && isNumber(position[key])) {
      return position[key];
    }
    var negative = coordinate[key] - tooltipDimension - offsetTopLeft;
    var positive = coordinate[key] + offsetTopLeft;
    if (allowEscapeViewBox[key]) {
      return reverseDirection[key] ? negative : positive;
    }
    if (reverseDirection[key]) {
      var _tooltipBoundary = negative;
      var _viewBoxBoundary = viewBox[key];
      if (_tooltipBoundary < _viewBoxBoundary) {
        return Math.max(positive, viewBox[key]);
      }
      return Math.max(negative, viewBox[key]);
    }
    var tooltipBoundary = positive + tooltipDimension;
    var viewBoxBoundary = viewBox[key] + viewBoxDimension;
    if (tooltipBoundary > viewBoxBoundary) {
      return Math.max(negative, viewBox[key]);
    }
    return Math.max(positive, viewBox[key]);
  }
  function getTransformStyle(_ref3) {
    var translateX = _ref3.translateX, translateY = _ref3.translateY, useTranslate3d = _ref3.useTranslate3d;
    return {
      transform: useTranslate3d ? "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)") : "translate(".concat(translateX, "px, ").concat(translateY, "px)")
    };
  }
  function getTooltipTranslate(_ref4) {
    var allowEscapeViewBox = _ref4.allowEscapeViewBox, coordinate = _ref4.coordinate, offsetTopLeft = _ref4.offsetTopLeft, position = _ref4.position, reverseDirection = _ref4.reverseDirection, tooltipBox = _ref4.tooltipBox, useTranslate3d = _ref4.useTranslate3d, viewBox = _ref4.viewBox;
    var cssProperties, translateX, translateY;
    if (tooltipBox.height > 0 && tooltipBox.width > 0 && coordinate) {
      translateX = getTooltipTranslateXY({
        allowEscapeViewBox,
        coordinate,
        key: "x",
        offsetTopLeft,
        position,
        reverseDirection,
        tooltipDimension: tooltipBox.width,
        viewBox,
        viewBoxDimension: viewBox.width
      });
      translateY = getTooltipTranslateXY({
        allowEscapeViewBox,
        coordinate,
        key: "y",
        offsetTopLeft,
        position,
        reverseDirection,
        tooltipDimension: tooltipBox.height,
        viewBox,
        viewBoxDimension: viewBox.height
      });
      cssProperties = getTransformStyle({
        translateX,
        translateY,
        useTranslate3d
      });
    } else {
      cssProperties = TOOLTIP_HIDDEN;
    }
    return {
      cssProperties,
      cssClasses: getTooltipCSSClassName({
        translateX,
        translateY,
        coordinate
      })
    };
  }
  function _typeof$A(o) {
    "@babel/helpers - typeof";
    return _typeof$A = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$A(o);
  }
  function ownKeys$u(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$u(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$u(Object(t2), true).forEach(function(r2) {
        _defineProperty$y(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$u(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$f(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$f(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$z(descriptor.key), descriptor);
    }
  }
  function _createClass$f(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$f(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$b(t2, o, e3) {
    return o = _getPrototypeOf$c(o), _possibleConstructorReturn$c(t2, _isNativeReflectConstruct$c() ? Reflect.construct(o, e3 || [], _getPrototypeOf$c(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$c(self, call) {
    if (call && (_typeof$A(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$c(self);
  }
  function _assertThisInitialized$c(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$c() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$c = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$c(o) {
    _getPrototypeOf$c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$c(o);
  }
  function _inherits$c(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$c(subClass, superClass);
  }
  function _setPrototypeOf$c(o, p2) {
    _setPrototypeOf$c = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$c(o, p2);
  }
  function _defineProperty$y(obj, key, value) {
    key = _toPropertyKey$z(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$z(t2) {
    var i = _toPrimitive$z(t2, "string");
    return "symbol" == _typeof$A(i) ? i : i + "";
  }
  function _toPrimitive$z(t2, r) {
    if ("object" != _typeof$A(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$A(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var EPSILON = 1;
  var TooltipBoundingBox = function(_PureComponent) {
    function TooltipBoundingBox2() {
      var _this;
      _classCallCheck$f(this, TooltipBoundingBox2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper$b(this, TooltipBoundingBox2, [].concat(args));
      _defineProperty$y(_this, "state", {
        dismissed: false,
        dismissedAtCoordinate: {
          x: 0,
          y: 0
        },
        lastBoundingBox: {
          width: -1,
          height: -1
        }
      });
      _defineProperty$y(_this, "handleKeyDown", function(event) {
        if (event.key === "Escape") {
          var _this$props$coordinat, _this$props$coordinat2, _this$props$coordinat3, _this$props$coordinat4;
          _this.setState({
            dismissed: true,
            dismissedAtCoordinate: {
              x: (_this$props$coordinat = (_this$props$coordinat2 = _this.props.coordinate) === null || _this$props$coordinat2 === void 0 ? void 0 : _this$props$coordinat2.x) !== null && _this$props$coordinat !== void 0 ? _this$props$coordinat : 0,
              y: (_this$props$coordinat3 = (_this$props$coordinat4 = _this.props.coordinate) === null || _this$props$coordinat4 === void 0 ? void 0 : _this$props$coordinat4.y) !== null && _this$props$coordinat3 !== void 0 ? _this$props$coordinat3 : 0
            }
          });
        }
      });
      return _this;
    }
    _inherits$c(TooltipBoundingBox2, _PureComponent);
    return _createClass$f(TooltipBoundingBox2, [
      {
        key: "updateBBox",
        value: function updateBBox() {
          if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            var box = this.wrapperNode.getBoundingClientRect();
            if (Math.abs(box.width - this.state.lastBoundingBox.width) > EPSILON || Math.abs(box.height - this.state.lastBoundingBox.height) > EPSILON) {
              this.setState({
                lastBoundingBox: {
                  width: box.width,
                  height: box.height
                }
              });
            }
          } else if (this.state.lastBoundingBox.width !== -1 || this.state.lastBoundingBox.height !== -1) {
            this.setState({
              lastBoundingBox: {
                width: -1,
                height: -1
              }
            });
          }
        }
      },
      {
        key: "componentDidMount",
        value: function componentDidMount() {
          document.addEventListener("keydown", this.handleKeyDown);
          this.updateBBox();
        }
      },
      {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          document.removeEventListener("keydown", this.handleKeyDown);
        }
      },
      {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var _this$props$coordinat5, _this$props$coordinat6;
          if (this.props.active) {
            this.updateBBox();
          }
          if (!this.state.dismissed) {
            return;
          }
          if (((_this$props$coordinat5 = this.props.coordinate) === null || _this$props$coordinat5 === void 0 ? void 0 : _this$props$coordinat5.x) !== this.state.dismissedAtCoordinate.x || ((_this$props$coordinat6 = this.props.coordinate) === null || _this$props$coordinat6 === void 0 ? void 0 : _this$props$coordinat6.y) !== this.state.dismissedAtCoordinate.y) {
            this.state.dismissed = false;
          }
        }
      },
      {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$props = this.props, active = _this$props.active, allowEscapeViewBox = _this$props.allowEscapeViewBox, animationDuration = _this$props.animationDuration, animationEasing = _this$props.animationEasing, children = _this$props.children, coordinate = _this$props.coordinate, hasPayload = _this$props.hasPayload, isAnimationActive = _this$props.isAnimationActive, offset = _this$props.offset, position = _this$props.position, reverseDirection = _this$props.reverseDirection, useTranslate3d = _this$props.useTranslate3d, viewBox = _this$props.viewBox, wrapperStyle = _this$props.wrapperStyle;
          var _getTooltipTranslate = getTooltipTranslate({
            allowEscapeViewBox,
            coordinate,
            offsetTopLeft: offset,
            position,
            reverseDirection,
            tooltipBox: this.state.lastBoundingBox,
            useTranslate3d,
            viewBox
          }), cssClasses = _getTooltipTranslate.cssClasses, cssProperties = _getTooltipTranslate.cssProperties;
          var outerStyle = _objectSpread$u(_objectSpread$u({
            transition: isAnimationActive && active ? "transform ".concat(animationDuration, "ms ").concat(animationEasing) : void 0
          }, cssProperties), {}, {
            pointerEvents: "none",
            visibility: !this.state.dismissed && active && hasPayload ? "visible" : "hidden",
            position: "absolute",
            top: 0,
            left: 0
          }, wrapperStyle);
          return React.createElement("div", {
            tabIndex: -1,
            className: cssClasses,
            style: outerStyle,
            ref: function ref(node) {
              _this2.wrapperNode = node;
            }
          }, children);
        }
      }
    ]);
  }(reactExports.PureComponent);
  var parseIsSsrByDefault = function parseIsSsrByDefault2() {
    return !(typeof window !== "undefined" && window.document && window.document.createElement && window.setTimeout);
  };
  var Global = {
    isSsr: parseIsSsrByDefault(),
    get: function get2(key) {
      return Global[key];
    },
    set: function set(key, value) {
      if (typeof key === "string") {
        Global[key] = value;
      } else {
        var keys2 = Object.keys(key);
        if (keys2 && keys2.length) {
          keys2.forEach(function(k2) {
            Global[k2] = key[k2];
          });
        }
      }
    }
  };
  function _typeof$z(o) {
    "@babel/helpers - typeof";
    return _typeof$z = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$z(o);
  }
  function ownKeys$t(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$t(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$t(Object(t2), true).forEach(function(r2) {
        _defineProperty$x(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$t(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$e(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$e(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$y(descriptor.key), descriptor);
    }
  }
  function _createClass$e(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$e(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$a(t2, o, e3) {
    return o = _getPrototypeOf$b(o), _possibleConstructorReturn$b(t2, _isNativeReflectConstruct$b() ? Reflect.construct(o, e3 || [], _getPrototypeOf$b(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$b(self, call) {
    if (call && (_typeof$z(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$b(self);
  }
  function _assertThisInitialized$b(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$b() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$b = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$b(o) {
    _getPrototypeOf$b = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$b(o);
  }
  function _inherits$b(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$b(subClass, superClass);
  }
  function _setPrototypeOf$b(o, p2) {
    _setPrototypeOf$b = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$b(o, p2);
  }
  function _defineProperty$x(obj, key, value) {
    key = _toPropertyKey$y(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$y(t2) {
    var i = _toPrimitive$y(t2, "string");
    return "symbol" == _typeof$z(i) ? i : i + "";
  }
  function _toPrimitive$y(t2, r) {
    if ("object" != _typeof$z(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$z(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function defaultUniqBy(entry) {
    return entry.dataKey;
  }
  function renderContent(content, props) {
    if (React.isValidElement(content)) {
      return React.cloneElement(content, props);
    }
    if (typeof content === "function") {
      return React.createElement(content, props);
    }
    return React.createElement(DefaultTooltipContent, props);
  }
  var Tooltip = function(_PureComponent) {
    function Tooltip2() {
      _classCallCheck$e(this, Tooltip2);
      return _callSuper$a(this, Tooltip2, arguments);
    }
    _inherits$b(Tooltip2, _PureComponent);
    return _createClass$e(Tooltip2, [
      {
        key: "render",
        value: function render() {
          var _this = this;
          var _this$props = this.props, active = _this$props.active, allowEscapeViewBox = _this$props.allowEscapeViewBox, animationDuration = _this$props.animationDuration, animationEasing = _this$props.animationEasing, content = _this$props.content, coordinate = _this$props.coordinate, filterNull = _this$props.filterNull, isAnimationActive = _this$props.isAnimationActive, offset = _this$props.offset, payload = _this$props.payload, payloadUniqBy = _this$props.payloadUniqBy, position = _this$props.position, reverseDirection = _this$props.reverseDirection, useTranslate3d = _this$props.useTranslate3d, viewBox = _this$props.viewBox, wrapperStyle = _this$props.wrapperStyle;
          var finalPayload = payload !== null && payload !== void 0 ? payload : [];
          if (filterNull && finalPayload.length) {
            finalPayload = getUniqPayload(payload.filter(function(entry) {
              return entry.value != null && (entry.hide !== true || _this.props.includeHidden);
            }), payloadUniqBy, defaultUniqBy);
          }
          var hasPayload = finalPayload.length > 0;
          return React.createElement(TooltipBoundingBox, {
            allowEscapeViewBox,
            animationDuration,
            animationEasing,
            isAnimationActive,
            active,
            coordinate,
            hasPayload,
            offset,
            position,
            reverseDirection,
            useTranslate3d,
            viewBox,
            wrapperStyle
          }, renderContent(content, _objectSpread$t(_objectSpread$t({}, this.props), {}, {
            payload: finalPayload
          })));
        }
      }
    ]);
  }(reactExports.PureComponent);
  _defineProperty$x(Tooltip, "displayName", "Tooltip");
  _defineProperty$x(Tooltip, "defaultProps", {
    accessibilityLayer: false,
    allowEscapeViewBox: {
      x: false,
      y: false
    },
    animationDuration: 400,
    animationEasing: "ease",
    contentStyle: {},
    coordinate: {
      x: 0,
      y: 0
    },
    cursor: true,
    cursorStyle: {},
    filterNull: true,
    isAnimationActive: !Global.isSsr,
    itemStyle: {},
    labelStyle: {},
    offset: 10,
    reverseDirection: {
      x: false,
      y: false
    },
    separator: " : ",
    trigger: "hover",
    useTranslate3d: false,
    viewBox: {
      x: 0,
      y: 0,
      height: 0,
      width: 0
    },
    wrapperStyle: {}
  });
  var root = _root;
  var now$1 = function() {
    return root.Date.now();
  };
  var now_1 = now$1;
  var reWhitespace = /\s/;
  function trimmedEndIndex$1(string) {
    var index2 = string.length;
    while (index2-- && reWhitespace.test(string.charAt(index2))) {
    }
    return index2;
  }
  var _trimmedEndIndex = trimmedEndIndex$1;
  var trimmedEndIndex = _trimmedEndIndex;
  var reTrimStart = /^\s+/;
  function baseTrim$1(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
  }
  var _baseTrim = baseTrim$1;
  var baseTrim = _baseTrim, isObject$2 = isObject_1, isSymbol$1 = isSymbol_1;
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber$2(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol$1(value)) {
      return NAN;
    }
    if (isObject$2(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject$2(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var toNumber_1 = toNumber$2;
  var isObject$1 = isObject_1, now = now_1, toNumber$1 = toNumber_1;
  var FUNC_ERROR_TEXT$1 = "Expected a function";
  var nativeMax$3 = Math.max, nativeMin = Math.min;
  function debounce$1(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait = toNumber$1(wait) || 0;
    if (isObject$1(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax$3(toNumber$1(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now());
    }
    function debounced() {
      var time2 = now(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  var debounce_1 = debounce$1;
  debounce$2 = getDefaultExportFromCjs(debounce_1);
  var debounce = debounce_1, isObject = isObject_1;
  var FUNC_ERROR_TEXT = "Expected a function";
  function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = "leading" in options ? !!options.leading : leading;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  var throttle_1 = throttle;
  throttle$1 = getDefaultExportFromCjs(throttle_1);
  function _typeof$y(o) {
    "@babel/helpers - typeof";
    return _typeof$y = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$y(o);
  }
  function ownKeys$s(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$s(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$s(Object(t2), true).forEach(function(r2) {
        _defineProperty$w(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$s(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$w(obj, key, value) {
    key = _toPropertyKey$x(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$x(t2) {
    var i = _toPrimitive$x(t2, "string");
    return "symbol" == _typeof$y(i) ? i : i + "";
  }
  function _toPrimitive$x(t2, r) {
    if ("object" != _typeof$y(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$y(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _slicedToArray$a(arr, i) {
    return _arrayWithHoles$b(arr) || _iterableToArrayLimit$a(arr, i) || _unsupportedIterableToArray$h(arr, i) || _nonIterableRest$b();
  }
  function _nonIterableRest$b() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$h(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$h(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$h(o, minLen);
  }
  function _arrayLikeToArray$h(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$a(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$b(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var ResponsiveContainer = reactExports.forwardRef(function(_ref, ref) {
    var aspect = _ref.aspect, _ref$initialDimension = _ref.initialDimension, initialDimension = _ref$initialDimension === void 0 ? {
      width: -1,
      height: -1
    } : _ref$initialDimension, _ref$width = _ref.width, width = _ref$width === void 0 ? "100%" : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? "100%" : _ref$height, _ref$minWidth = _ref.minWidth, minWidth = _ref$minWidth === void 0 ? 0 : _ref$minWidth, minHeight = _ref.minHeight, maxHeight = _ref.maxHeight, children = _ref.children, _ref$debounce = _ref.debounce, debounce2 = _ref$debounce === void 0 ? 0 : _ref$debounce, id = _ref.id, className = _ref.className, onResize = _ref.onResize, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style;
    var containerRef = reactExports.useRef(null);
    var onResizeRef = reactExports.useRef();
    onResizeRef.current = onResize;
    reactExports.useImperativeHandle(ref, function() {
      return Object.defineProperty(containerRef.current, "current", {
        get: function get2() {
          console.warn("The usage of ref.current.current is deprecated and will no longer be supported.");
          return containerRef.current;
        },
        configurable: true
      });
    });
    var _useState = reactExports.useState({
      containerWidth: initialDimension.width,
      containerHeight: initialDimension.height
    }), _useState2 = _slicedToArray$a(_useState, 2), sizes = _useState2[0], setSizes = _useState2[1];
    var setContainerSize = reactExports.useCallback(function(newWidth, newHeight) {
      setSizes(function(prevState) {
        var roundedWidth = Math.round(newWidth);
        var roundedHeight = Math.round(newHeight);
        if (prevState.containerWidth === roundedWidth && prevState.containerHeight === roundedHeight) {
          return prevState;
        }
        return {
          containerWidth: roundedWidth,
          containerHeight: roundedHeight
        };
      });
    }, []);
    reactExports.useEffect(function() {
      var callback = function callback2(entries) {
        var _onResizeRef$current;
        var _entries$0$contentRec = entries[0].contentRect, containerWidth2 = _entries$0$contentRec.width, containerHeight2 = _entries$0$contentRec.height;
        setContainerSize(containerWidth2, containerHeight2);
        (_onResizeRef$current = onResizeRef.current) === null || _onResizeRef$current === void 0 || _onResizeRef$current.call(onResizeRef, containerWidth2, containerHeight2);
      };
      if (debounce2 > 0) {
        callback = throttle$1(callback, debounce2, {
          trailing: true,
          leading: false
        });
      }
      var observer = new ResizeObserver(callback);
      var _containerRef$current = containerRef.current.getBoundingClientRect(), containerWidth = _containerRef$current.width, containerHeight = _containerRef$current.height;
      setContainerSize(containerWidth, containerHeight);
      observer.observe(containerRef.current);
      return function() {
        observer.disconnect();
      };
    }, [
      setContainerSize,
      debounce2
    ]);
    var chartContent = reactExports.useMemo(function() {
      var containerWidth = sizes.containerWidth, containerHeight = sizes.containerHeight;
      if (containerWidth < 0 || containerHeight < 0) {
        return null;
      }
      warn(isPercent(width) || isPercent(height), "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.", width, height);
      warn(!aspect || aspect > 0, "The aspect(%s) must be greater than zero.", aspect);
      var calculatedWidth = isPercent(width) ? containerWidth : width;
      var calculatedHeight = isPercent(height) ? containerHeight : height;
      if (aspect && aspect > 0) {
        if (calculatedWidth) {
          calculatedHeight = calculatedWidth / aspect;
        } else if (calculatedHeight) {
          calculatedWidth = calculatedHeight * aspect;
        }
        if (maxHeight && calculatedHeight > maxHeight) {
          calculatedHeight = maxHeight;
        }
      }
      warn(calculatedWidth > 0 || calculatedHeight > 0, "The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);
      var isCharts = !Array.isArray(children) && getDisplayName(children.type).endsWith("Chart");
      return React.Children.map(children, function(child) {
        if (React.isValidElement(child)) {
          return reactExports.cloneElement(child, _objectSpread$s({
            width: calculatedWidth,
            height: calculatedHeight
          }, isCharts ? {
            style: _objectSpread$s({
              height: "100%",
              width: "100%",
              maxHeight: calculatedHeight,
              maxWidth: calculatedWidth
            }, child.props.style)
          } : {}));
        }
        return child;
      });
    }, [
      aspect,
      children,
      height,
      maxHeight,
      minHeight,
      minWidth,
      sizes,
      width
    ]);
    return React.createElement("div", {
      id: id ? "".concat(id) : void 0,
      className: clsx("recharts-responsive-container", className),
      style: _objectSpread$s(_objectSpread$s({}, style), {}, {
        width,
        height,
        minWidth,
        minHeight,
        maxHeight
      }),
      ref: containerRef
    }, chartContent);
  });
  var Cell = function Cell2(_props) {
    return null;
  };
  Cell.displayName = "Cell";
  function _typeof$x(o) {
    "@babel/helpers - typeof";
    return _typeof$x = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$x(o);
  }
  function ownKeys$r(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$r(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$r(Object(t2), true).forEach(function(r2) {
        _defineProperty$v(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$r(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$v(obj, key, value) {
    key = _toPropertyKey$w(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$w(t2) {
    var i = _toPrimitive$w(t2, "string");
    return "symbol" == _typeof$x(i) ? i : i + "";
  }
  function _toPrimitive$w(t2, r) {
    if ("object" != _typeof$x(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$x(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var stringCache = {
    widthCache: {},
    cacheCount: 0
  };
  var MAX_CACHE_NUM = 2e3;
  var SPAN_STYLE = {
    position: "absolute",
    top: "-20000px",
    left: 0,
    padding: 0,
    margin: 0,
    border: "none",
    whiteSpace: "pre"
  };
  var MEASUREMENT_SPAN_ID = "recharts_measurement_span";
  function removeInvalidKeys(obj) {
    var copyObj = _objectSpread$r({}, obj);
    Object.keys(copyObj).forEach(function(key) {
      if (!copyObj[key]) {
        delete copyObj[key];
      }
    });
    return copyObj;
  }
  var getStringSize = function getStringSize2(text) {
    var style = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (text === void 0 || text === null || Global.isSsr) {
      return {
        width: 0,
        height: 0
      };
    }
    var copyStyle = removeInvalidKeys(style);
    var cacheKey = JSON.stringify({
      text,
      copyStyle
    });
    if (stringCache.widthCache[cacheKey]) {
      return stringCache.widthCache[cacheKey];
    }
    try {
      var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
      if (!measurementSpan) {
        measurementSpan = document.createElement("span");
        measurementSpan.setAttribute("id", MEASUREMENT_SPAN_ID);
        measurementSpan.setAttribute("aria-hidden", "true");
        document.body.appendChild(measurementSpan);
      }
      var measurementSpanStyle = _objectSpread$r(_objectSpread$r({}, SPAN_STYLE), copyStyle);
      Object.assign(measurementSpan.style, measurementSpanStyle);
      measurementSpan.textContent = "".concat(text);
      var rect = measurementSpan.getBoundingClientRect();
      var result = {
        width: rect.width,
        height: rect.height
      };
      stringCache.widthCache[cacheKey] = result;
      if (++stringCache.cacheCount > MAX_CACHE_NUM) {
        stringCache.cacheCount = 0;
        stringCache.widthCache = {};
      }
      return result;
    } catch (e3) {
      return {
        width: 0,
        height: 0
      };
    }
  };
  var getOffset = function getOffset2(rect) {
    return {
      top: rect.top + window.scrollY - document.documentElement.clientTop,
      left: rect.left + window.scrollX - document.documentElement.clientLeft
    };
  };
  function _typeof$w(o) {
    "@babel/helpers - typeof";
    return _typeof$w = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$w(o);
  }
  function _slicedToArray$9(arr, i) {
    return _arrayWithHoles$a(arr) || _iterableToArrayLimit$9(arr, i) || _unsupportedIterableToArray$g(arr, i) || _nonIterableRest$a();
  }
  function _nonIterableRest$a() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$g(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$g(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$g(o, minLen);
  }
  function _arrayLikeToArray$g(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$9(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) {
          if (Object(t2) !== t2) return;
          f2 = false;
        } else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$a(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _classCallCheck$d(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$d(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$v(descriptor.key), descriptor);
    }
  }
  function _createClass$d(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$d(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$d(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _toPropertyKey$v(t2) {
    var i = _toPrimitive$v(t2, "string");
    return "symbol" == _typeof$w(i) ? i : i + "";
  }
  function _toPrimitive$v(t2, r) {
    if ("object" != _typeof$w(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r);
      if ("object" != _typeof$w(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(t2);
  }
  var MULTIPLY_OR_DIVIDE_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([*/])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
  var ADD_OR_SUBTRACT_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([+-])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
  var CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/;
  var NUM_SPLIT_REGEX = /(-?\d+(?:\.\d+)?)([a-zA-Z%]+)?/;
  var CONVERSION_RATES = {
    cm: 96 / 2.54,
    mm: 96 / 25.4,
    pt: 96 / 72,
    pc: 96 / 6,
    "in": 96,
    Q: 96 / (2.54 * 40),
    px: 1
  };
  var FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES);
  var STR_NAN = "NaN";
  function convertToPx(value, unit2) {
    return value * CONVERSION_RATES[unit2];
  }
  var DecimalCSS = function() {
    function DecimalCSS2(num, unit2) {
      _classCallCheck$d(this, DecimalCSS2);
      this.num = num;
      this.unit = unit2;
      this.num = num;
      this.unit = unit2;
      if (Number.isNaN(num)) {
        this.unit = "";
      }
      if (unit2 !== "" && !CSS_LENGTH_UNIT_REGEX.test(unit2)) {
        this.num = NaN;
        this.unit = "";
      }
      if (FIXED_CSS_LENGTH_UNITS.includes(unit2)) {
        this.num = convertToPx(num, unit2);
        this.unit = "px";
      }
    }
    return _createClass$d(DecimalCSS2, [
      {
        key: "add",
        value: function add2(other) {
          if (this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num + other.num, this.unit);
        }
      },
      {
        key: "subtract",
        value: function subtract2(other) {
          if (this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num - other.num, this.unit);
        }
      },
      {
        key: "multiply",
        value: function multiply(other) {
          if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num * other.num, this.unit || other.unit);
        }
      },
      {
        key: "divide",
        value: function divide2(other) {
          if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num / other.num, this.unit || other.unit);
        }
      },
      {
        key: "toString",
        value: function toString2() {
          return "".concat(this.num).concat(this.unit);
        }
      },
      {
        key: "isNaN",
        value: function isNaN2() {
          return Number.isNaN(this.num);
        }
      }
    ], [
      {
        key: "parse",
        value: function parse(str) {
          var _NUM_SPLIT_REGEX$exec;
          var _ref = (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null && _NUM_SPLIT_REGEX$exec !== void 0 ? _NUM_SPLIT_REGEX$exec : [], _ref2 = _slicedToArray$9(_ref, 3), numStr = _ref2[1], unit2 = _ref2[2];
          return new DecimalCSS2(parseFloat(numStr), unit2 !== null && unit2 !== void 0 ? unit2 : "");
        }
      }
    ]);
  }();
  function calculateArithmetic(expr) {
    if (expr.includes(STR_NAN)) {
      return STR_NAN;
    }
    var newExpr = expr;
    while (newExpr.includes("*") || newExpr.includes("/")) {
      var _MULTIPLY_OR_DIVIDE_R;
      var _ref3 = (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null && _MULTIPLY_OR_DIVIDE_R !== void 0 ? _MULTIPLY_OR_DIVIDE_R : [], _ref4 = _slicedToArray$9(_ref3, 4), leftOperand = _ref4[1], operator = _ref4[2], rightOperand = _ref4[3];
      var lTs = DecimalCSS.parse(leftOperand !== null && leftOperand !== void 0 ? leftOperand : "");
      var rTs = DecimalCSS.parse(rightOperand !== null && rightOperand !== void 0 ? rightOperand : "");
      var result = operator === "*" ? lTs.multiply(rTs) : lTs.divide(rTs);
      if (result.isNaN()) {
        return STR_NAN;
      }
      newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString());
    }
    while (newExpr.includes("+") || /.-\d+(?:\.\d+)?/.test(newExpr)) {
      var _ADD_OR_SUBTRACT_REGE;
      var _ref5 = (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null && _ADD_OR_SUBTRACT_REGE !== void 0 ? _ADD_OR_SUBTRACT_REGE : [], _ref6 = _slicedToArray$9(_ref5, 4), _leftOperand = _ref6[1], _operator = _ref6[2], _rightOperand = _ref6[3];
      var _lTs = DecimalCSS.parse(_leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : "");
      var _rTs = DecimalCSS.parse(_rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : "");
      var _result = _operator === "+" ? _lTs.add(_rTs) : _lTs.subtract(_rTs);
      if (_result.isNaN()) {
        return STR_NAN;
      }
      newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString());
    }
    return newExpr;
  }
  var PARENTHESES_REGEX = /\(([^()]*)\)/;
  function calculateParentheses(expr) {
    var newExpr = expr;
    while (newExpr.includes("(")) {
      var _PARENTHESES_REGEX$ex = PARENTHESES_REGEX.exec(newExpr), _PARENTHESES_REGEX$ex2 = _slicedToArray$9(_PARENTHESES_REGEX$ex, 2), parentheticalExpression = _PARENTHESES_REGEX$ex2[1];
      newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression));
    }
    return newExpr;
  }
  function evaluateExpression(expression) {
    var newExpr = expression.replace(/\s+/g, "");
    newExpr = calculateParentheses(newExpr);
    newExpr = calculateArithmetic(newExpr);
    return newExpr;
  }
  function safeEvaluateExpression(expression) {
    try {
      return evaluateExpression(expression);
    } catch (e3) {
      return STR_NAN;
    }
  }
  function reduceCSSCalc(expression) {
    var result = safeEvaluateExpression(expression.slice(5, -1));
    if (result === STR_NAN) {
      return "";
    }
    return result;
  }
  var _excluded$b = [
    "x",
    "y",
    "lineHeight",
    "capHeight",
    "scaleToFit",
    "textAnchor",
    "verticalAnchor",
    "fill"
  ], _excluded2$4 = [
    "dx",
    "dy",
    "angle",
    "className",
    "breakAll"
  ];
  function _extends$k() {
    _extends$k = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$k.apply(this, arguments);
  }
  function _objectWithoutProperties$b(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$b(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$b(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _slicedToArray$8(arr, i) {
    return _arrayWithHoles$9(arr) || _iterableToArrayLimit$8(arr, i) || _unsupportedIterableToArray$f(arr, i) || _nonIterableRest$9();
  }
  function _nonIterableRest$9() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$f(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$f(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$f(o, minLen);
  }
  function _arrayLikeToArray$f(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$8(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) {
          if (Object(t2) !== t2) return;
          f2 = false;
        } else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$9(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/;
  var calculateWordWidths = function calculateWordWidths2(_ref) {
    var children = _ref.children, breakAll = _ref.breakAll, style = _ref.style;
    try {
      var words = [];
      if (!isNil$1(children)) {
        if (breakAll) {
          words = children.toString().split("");
        } else {
          words = children.toString().split(BREAKING_SPACES);
        }
      }
      var wordsWithComputedWidth = words.map(function(word) {
        return {
          word,
          width: getStringSize(word, style).width
        };
      });
      var spaceWidth = breakAll ? 0 : getStringSize("\xA0", style).width;
      return {
        wordsWithComputedWidth,
        spaceWidth
      };
    } catch (e3) {
      return null;
    }
  };
  var calculateWordsByLines = function calculateWordsByLines2(_ref2, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) {
    var maxLines = _ref2.maxLines, children = _ref2.children, style = _ref2.style, breakAll = _ref2.breakAll;
    var shouldLimitLines = isNumber(maxLines);
    var text = children;
    var calculate = function calculate2() {
      var words = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return words.reduce(function(result2, _ref3) {
        var word = _ref3.word, width = _ref3.width;
        var currentLine = result2[result2.length - 1];
        if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < Number(lineWidth))) {
          currentLine.words.push(word);
          currentLine.width += width + spaceWidth;
        } else {
          var newLine = {
            words: [
              word
            ],
            width
          };
          result2.push(newLine);
        }
        return result2;
      }, []);
    };
    var originalResult = calculate(initialWordsWithComputedWith);
    var findLongestLine = function findLongestLine2(words) {
      return words.reduce(function(a2, b2) {
        return a2.width > b2.width ? a2 : b2;
      });
    };
    if (!shouldLimitLines) {
      return originalResult;
    }
    var suffix = "\u2026";
    var checkOverflow = function checkOverflow2(index2) {
      var tempText = text.slice(0, index2);
      var words = calculateWordWidths({
        breakAll,
        style,
        children: tempText + suffix
      }).wordsWithComputedWidth;
      var result2 = calculate(words);
      var doesOverflow = result2.length > maxLines || findLongestLine(result2).width > Number(lineWidth);
      return [
        doesOverflow,
        result2
      ];
    };
    var start = 0;
    var end = text.length - 1;
    var iterations = 0;
    var trimmedResult;
    while (start <= end && iterations <= text.length - 1) {
      var middle = Math.floor((start + end) / 2);
      var prev = middle - 1;
      var _checkOverflow = checkOverflow(prev), _checkOverflow2 = _slicedToArray$8(_checkOverflow, 2), doesPrevOverflow = _checkOverflow2[0], result = _checkOverflow2[1];
      var _checkOverflow3 = checkOverflow(middle), _checkOverflow4 = _slicedToArray$8(_checkOverflow3, 1), doesMiddleOverflow = _checkOverflow4[0];
      if (!doesPrevOverflow && !doesMiddleOverflow) {
        start = middle + 1;
      }
      if (doesPrevOverflow && doesMiddleOverflow) {
        end = middle - 1;
      }
      if (!doesPrevOverflow && doesMiddleOverflow) {
        trimmedResult = result;
        break;
      }
      iterations++;
    }
    return trimmedResult || originalResult;
  };
  var getWordsWithoutCalculate = function getWordsWithoutCalculate2(children) {
    var words = !isNil$1(children) ? children.toString().split(BREAKING_SPACES) : [];
    return [
      {
        words
      }
    ];
  };
  var getWordsByLines = function getWordsByLines2(_ref4) {
    var width = _ref4.width, scaleToFit = _ref4.scaleToFit, children = _ref4.children, style = _ref4.style, breakAll = _ref4.breakAll, maxLines = _ref4.maxLines;
    if ((width || scaleToFit) && !Global.isSsr) {
      var wordsWithComputedWidth, spaceWidth;
      var wordWidths = calculateWordWidths({
        breakAll,
        children,
        style
      });
      if (wordWidths) {
        var wcw = wordWidths.wordsWithComputedWidth, sw = wordWidths.spaceWidth;
        wordsWithComputedWidth = wcw;
        spaceWidth = sw;
      } else {
        return getWordsWithoutCalculate(children);
      }
      return calculateWordsByLines({
        breakAll,
        children,
        maxLines,
        style
      }, wordsWithComputedWidth, spaceWidth, width, scaleToFit);
    }
    return getWordsWithoutCalculate(children);
  };
  var DEFAULT_FILL = "#808080";
  var Text = function Text2(_ref5) {
    var _ref5$x = _ref5.x, propsX = _ref5$x === void 0 ? 0 : _ref5$x, _ref5$y = _ref5.y, propsY = _ref5$y === void 0 ? 0 : _ref5$y, _ref5$lineHeight = _ref5.lineHeight, lineHeight = _ref5$lineHeight === void 0 ? "1em" : _ref5$lineHeight, _ref5$capHeight = _ref5.capHeight, capHeight = _ref5$capHeight === void 0 ? "0.71em" : _ref5$capHeight, _ref5$scaleToFit = _ref5.scaleToFit, scaleToFit = _ref5$scaleToFit === void 0 ? false : _ref5$scaleToFit, _ref5$textAnchor = _ref5.textAnchor, textAnchor = _ref5$textAnchor === void 0 ? "start" : _ref5$textAnchor, _ref5$verticalAnchor = _ref5.verticalAnchor, verticalAnchor = _ref5$verticalAnchor === void 0 ? "end" : _ref5$verticalAnchor, _ref5$fill = _ref5.fill, fill = _ref5$fill === void 0 ? DEFAULT_FILL : _ref5$fill, props = _objectWithoutProperties$b(_ref5, _excluded$b);
    var wordsByLines = reactExports.useMemo(function() {
      return getWordsByLines({
        breakAll: props.breakAll,
        children: props.children,
        maxLines: props.maxLines,
        scaleToFit,
        style: props.style,
        width: props.width
      });
    }, [
      props.breakAll,
      props.children,
      props.maxLines,
      scaleToFit,
      props.style,
      props.width
    ]);
    var dx = props.dx, dy = props.dy, angle = props.angle, className = props.className, breakAll = props.breakAll, textProps = _objectWithoutProperties$b(props, _excluded2$4);
    if (!isNumOrStr(propsX) || !isNumOrStr(propsY)) {
      return null;
    }
    var x2 = propsX + (isNumber(dx) ? dx : 0);
    var y2 = propsY + (isNumber(dy) ? dy : 0);
    var startDy;
    switch (verticalAnchor) {
      case "start":
        startDy = reduceCSSCalc("calc(".concat(capHeight, ")"));
        break;
      case "middle":
        startDy = reduceCSSCalc("calc(".concat((wordsByLines.length - 1) / 2, " * -").concat(lineHeight, " + (").concat(capHeight, " / 2))"));
        break;
      default:
        startDy = reduceCSSCalc("calc(".concat(wordsByLines.length - 1, " * -").concat(lineHeight, ")"));
        break;
    }
    var transforms = [];
    if (scaleToFit) {
      var lineWidth = wordsByLines[0].width;
      var width = props.width;
      transforms.push("scale(".concat((isNumber(width) ? width / lineWidth : 1) / lineWidth, ")"));
    }
    if (angle) {
      transforms.push("rotate(".concat(angle, ", ").concat(x2, ", ").concat(y2, ")"));
    }
    if (transforms.length) {
      textProps.transform = transforms.join(" ");
    }
    return React.createElement("text", _extends$k({}, filterProps(textProps, true), {
      x: x2,
      y: y2,
      className: clsx("recharts-text", className),
      textAnchor,
      fill: fill.includes("url") ? DEFAULT_FILL : fill
    }), wordsByLines.map(function(line, index2) {
      var words = line.words.join(breakAll ? "" : " ");
      return React.createElement("tspan", {
        x: x2,
        dy: index2 === 0 ? startDy : lineHeight,
        key: "".concat(words, "-").concat(index2)
      }, words);
    }));
  };
  function ascending(a2, b2) {
    return a2 == null || b2 == null ? NaN : a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
  }
  function descending(a2, b2) {
    return a2 == null || b2 == null ? NaN : b2 < a2 ? -1 : b2 > a2 ? 1 : b2 >= a2 ? 0 : NaN;
  }
  function bisector(f2) {
    let compare1, compare2, delta;
    if (f2.length !== 2) {
      compare1 = ascending;
      compare2 = (d2, x2) => ascending(f2(d2), x2);
      delta = (d2, x2) => f2(d2) - x2;
    } else {
      compare1 = f2 === ascending || f2 === descending ? f2 : zero;
      compare2 = f2;
      delta = f2;
    }
    function left(a2, x2, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare1(x2, x2) !== 0) return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x2) < 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a2, x2, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare1(x2, x2) !== 0) return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x2) <= 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a2, x2, lo = 0, hi = a2.length) {
      const i = left(a2, x2, lo, hi - 1);
      return i > lo && delta(a2[i - 1], x2) > -delta(a2[i], x2) ? i - 1 : i;
    }
    return {
      left,
      center,
      right
    };
  }
  function zero() {
    return 0;
  }
  function number$2(x2) {
    return x2 === null ? NaN : +x2;
  }
  function* numbers(values, valueof) {
    {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          yield value;
        }
      }
    }
  }
  const ascendingBisect = bisector(ascending);
  const bisectRight = ascendingBisect.right;
  bisector(number$2).center;
  class InternMap extends Map {
    constructor(entries, key = keyof) {
      super();
      Object.defineProperties(this, {
        _intern: {
          value: /* @__PURE__ */ new Map()
        },
        _key: {
          value: key
        }
      });
      if (entries != null) for (const [key2, value] of entries) this.set(key2, value);
    }
    get(key) {
      return super.get(intern_get(this, key));
    }
    has(key) {
      return super.has(intern_get(this, key));
    }
    set(key, value) {
      return super.set(intern_set(this, key), value);
    }
    delete(key) {
      return super.delete(intern_delete(this, key));
    }
  }
  function intern_get({ _intern, _key }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
  }
  function intern_set({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
  }
  function intern_delete({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
      value = _intern.get(key);
      _intern.delete(key);
    }
    return value;
  }
  function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }
  function compareDefined(compare = ascending) {
    if (compare === ascending) return ascendingDefined;
    if (typeof compare !== "function") throw new TypeError("compare is not a function");
    return (a2, b2) => {
      const x2 = compare(a2, b2);
      if (x2 || x2 === 0) return x2;
      return (compare(b2, b2) === 0) - (compare(a2, a2) === 0);
    };
  }
  function ascendingDefined(a2, b2) {
    return (a2 == null || !(a2 >= a2)) - (b2 == null || !(b2 >= b2)) || (a2 < b2 ? -1 : a2 > b2 ? 1 : 0);
  }
  const e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
  function tickSpec(start, stop, count) {
    const step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
    let i1, i2, inc;
    if (power < 0) {
      inc = Math.pow(10, -power) / factor;
      i1 = Math.round(start * inc);
      i2 = Math.round(stop * inc);
      if (i1 / inc < start) ++i1;
      if (i2 / inc > stop) --i2;
      inc = -inc;
    } else {
      inc = Math.pow(10, power) * factor;
      i1 = Math.round(start / inc);
      i2 = Math.round(stop / inc);
      if (i1 * inc < start) ++i1;
      if (i2 * inc > stop) --i2;
    }
    if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
    return [
      i1,
      i2,
      inc
    ];
  }
  function ticks(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    if (!(count > 0)) return [];
    if (start === stop) return [
      start
    ];
    const reverse2 = stop < start, [i1, i2, inc] = reverse2 ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
    if (!(i2 >= i1)) return [];
    const n2 = i2 - i1 + 1, ticks2 = new Array(n2);
    if (reverse2) {
      if (inc < 0) for (let i = 0; i < n2; ++i) ticks2[i] = (i2 - i) / -inc;
      else for (let i = 0; i < n2; ++i) ticks2[i] = (i2 - i) * inc;
    } else {
      if (inc < 0) for (let i = 0; i < n2; ++i) ticks2[i] = (i1 + i) / -inc;
      else for (let i = 0; i < n2; ++i) ticks2[i] = (i1 + i) * inc;
    }
    return ticks2;
  }
  function tickIncrement(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    return tickSpec(start, stop, count)[2];
  }
  function tickStep(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    const reverse2 = stop < start, inc = reverse2 ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
    return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
  }
  function max$2(values, valueof) {
    let max2;
    {
      for (const value of values) {
        if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
          max2 = value;
        }
      }
    }
    return max2;
  }
  function min$2(values, valueof) {
    let min2;
    {
      for (const value of values) {
        if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
          min2 = value;
        }
      }
    }
    return min2;
  }
  function quickselect(array2, k2, left = 0, right = Infinity, compare) {
    k2 = Math.floor(k2);
    left = Math.floor(Math.max(0, left));
    right = Math.floor(Math.min(array2.length - 1, right));
    if (!(left <= k2 && k2 <= right)) return array2;
    compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
    while (right > left) {
      if (right - left > 600) {
        const n2 = right - left + 1;
        const m2 = k2 - left + 1;
        const z = Math.log(n2);
        const s2 = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s2 * (n2 - s2) / n2) * (m2 - n2 / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left, Math.floor(k2 - m2 * s2 / n2 + sd));
        const newRight = Math.min(right, Math.floor(k2 + (n2 - m2) * s2 / n2 + sd));
        quickselect(array2, k2, newLeft, newRight, compare);
      }
      const t2 = array2[k2];
      let i = left;
      let j2 = right;
      swap(array2, left, k2);
      if (compare(array2[right], t2) > 0) swap(array2, left, right);
      while (i < j2) {
        swap(array2, i, j2), ++i, --j2;
        while (compare(array2[i], t2) < 0) ++i;
        while (compare(array2[j2], t2) > 0) --j2;
      }
      if (compare(array2[left], t2) === 0) swap(array2, left, j2);
      else ++j2, swap(array2, j2, right);
      if (j2 <= k2) left = j2 + 1;
      if (k2 <= j2) right = j2 - 1;
    }
    return array2;
  }
  function swap(array2, i, j2) {
    const t2 = array2[i];
    array2[i] = array2[j2];
    array2[j2] = t2;
  }
  function quantile$1(values, p2, valueof) {
    values = Float64Array.from(numbers(values));
    if (!(n2 = values.length) || isNaN(p2 = +p2)) return;
    if (p2 <= 0 || n2 < 2) return min$2(values);
    if (p2 >= 1) return max$2(values);
    var n2, i = (n2 - 1) * p2, i0 = Math.floor(i), value0 = max$2(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min$2(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileSorted(values, p2, valueof = number$2) {
    if (!(n2 = values.length) || isNaN(p2 = +p2)) return;
    if (p2 <= 0 || n2 < 2) return +valueof(values[0], 0, values);
    if (p2 >= 1) return +valueof(values[n2 - 1], n2 - 1, values);
    var n2, i = (n2 - 1) * p2, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
  }
  function range$3(start, stop, step) {
    start = +start, stop = +stop, step = (n2 = arguments.length) < 2 ? (stop = start, start = 0, 1) : n2 < 3 ? 1 : +step;
    var i = -1, n2 = Math.max(0, Math.ceil((stop - start) / step)) | 0, range2 = new Array(n2);
    while (++i < n2) {
      range2[i] = start + i * step;
    }
    return range2;
  }
  function initRange(domain, range2) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range2).domain(domain);
        break;
    }
    return this;
  }
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break;
      case 1: {
        if (typeof domain === "function") this.interpolator(domain);
        else this.range(domain);
        break;
      }
      default: {
        this.domain(domain);
        if (typeof interpolator === "function") this.interpolator(interpolator);
        else this.range(interpolator);
        break;
      }
    }
    return this;
  }
  const implicit = Symbol("implicit");
  function ordinal() {
    var index2 = new InternMap(), domain = [], range2 = [], unknown = implicit;
    function scale(d2) {
      let i = index2.get(d2);
      if (i === void 0) {
        if (unknown !== implicit) return unknown;
        index2.set(d2, i = domain.push(d2) - 1);
      }
      return range2[i % range2.length];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [], index2 = new InternMap();
      for (const value of _) {
        if (index2.has(value)) continue;
        index2.set(value, domain.push(value) - 1);
      }
      return scale;
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), scale) : range2.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return ordinal(domain, range2).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return scale;
  }
  function band() {
    var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round2 = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
      var n2 = domain().length, reverse2 = r1 < r0, start = reverse2 ? r1 : r0, stop = reverse2 ? r0 : r1;
      step = (stop - start) / Math.max(1, n2 - paddingInner + paddingOuter * 2);
      if (round2) step = Math.floor(step);
      start += (stop - start - step * (n2 - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round2) start = Math.round(start), bandwidth = Math.round(bandwidth);
      var values = range$3(n2).map(function(i) {
        return start + step * i;
      });
      return ordinalRange(reverse2 ? values.reverse() : values);
    }
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function(_) {
      return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [
        r0,
        r1
      ];
    };
    scale.rangeRound = function(_) {
      return [r0, r1] = _, r0 = +r0, r1 = +r1, round2 = true, rescale();
    };
    scale.bandwidth = function() {
      return bandwidth;
    };
    scale.step = function() {
      return step;
    };
    scale.round = function(_) {
      return arguments.length ? (round2 = !!_, rescale()) : round2;
    };
    scale.padding = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_) {
      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function(_) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function() {
      return band(domain(), [
        r0,
        r1
      ]).round(round2).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return initRange.apply(rescale(), arguments);
  }
  function pointish(scale) {
    var copy2 = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
      return pointish(copy2());
    };
    return scale;
  }
  function point() {
    return pointish(band.apply(null, arguments).paddingInner(1));
  }
  function constants(x2) {
    return function() {
      return x2;
    };
  }
  function number$1(x2) {
    return +x2;
  }
  var unit = [
    0,
    1
  ];
  function identity$6(x2) {
    return x2;
  }
  function normalize(a2, b2) {
    return (b2 -= a2 = +a2) ? function(x2) {
      return (x2 - a2) / b2;
    } : constants(isNaN(b2) ? NaN : 0.5);
  }
  function clamper(a2, b2) {
    var t2;
    if (a2 > b2) t2 = a2, a2 = b2, b2 = t2;
    return function(x2) {
      return Math.max(a2, Math.min(b2, x2));
    };
  }
  function bimap(domain, range2, interpolate2) {
    var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
    else d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
    return function(x2) {
      return r0(d0(x2));
    };
  }
  function polymap(domain, range2, interpolate2) {
    var j2 = Math.min(domain.length, range2.length) - 1, d2 = new Array(j2), r = new Array(j2), i = -1;
    if (domain[j2] < domain[0]) {
      domain = domain.slice().reverse();
      range2 = range2.slice().reverse();
    }
    while (++i < j2) {
      d2[i] = normalize(domain[i], domain[i + 1]);
      r[i] = interpolate2(range2[i], range2[i + 1]);
    }
    return function(x2) {
      var i2 = bisectRight(domain, x2, 1, j2) - 1;
      return r[i2](d2[i2](x2));
    };
  }
  function copy$1(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer$2() {
    var domain = unit, range2 = unit, interpolate$12 = interpolate, transform2, untransform, unknown, clamp2 = identity$6, piecewise2, output, input;
    function rescale() {
      var n2 = Math.min(domain.length, range2.length);
      if (clamp2 !== identity$6) clamp2 = clamper(domain[0], domain[n2 - 1]);
      piecewise2 = n2 > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : (output || (output = piecewise2(domain.map(transform2), range2, interpolate$12)))(transform2(clamp2(x2)));
    }
    scale.invert = function(y2) {
      return clamp2(untransform((input || (input = piecewise2(range2, domain.map(transform2), interpolateNumber$2)))(y2)));
    };
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
    };
    scale.rangeRound = function(_) {
      return range2 = Array.from(_), interpolate$12 = interpolateRound, rescale();
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp2 = _ ? true : identity$6, rescale()) : clamp2 !== identity$6;
    };
    scale.interpolate = function(_) {
      return arguments.length ? (interpolate$12 = _, rescale()) : interpolate$12;
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t2, u2) {
      transform2 = t2, untransform = u2;
      return rescale();
    };
  }
  function continuous() {
    return transformer$2()(identity$6, identity$6);
  }
  function formatDecimal(x2) {
    return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
  }
  function formatDecimalParts(x2, p2) {
    if ((i = (x2 = p2 ? x2.toExponential(p2 - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
    var i, coefficient = x2.slice(0, i);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x2.slice(i + 1)
    ];
  }
  function exponent(x2) {
    return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
  }
  function formatGroup(grouping, thousands) {
    return function(value, width) {
      var i = value.length, t2 = [], j2 = 0, g2 = grouping[0], length = 0;
      while (i > 0 && g2 > 0) {
        if (length + g2 + 1 > width) g2 = Math.max(1, width - length);
        t2.push(value.substring(i -= g2, i + g2));
        if ((length += g2 + 1) > width) break;
        g2 = grouping[j2 = (j2 + 1) % grouping.length];
      }
      return t2.reverse().join(thousands);
    };
  }
  function formatNumerals(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i) {
        return numerals[+i];
      });
    };
  }
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };
  function formatTrim(s2) {
    out: for (var n2 = s2.length, i = 1, i0 = -1, i1; i < n2; ++i) {
      switch (s2[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0) i0 = i;
          i1 = i;
          break;
        default:
          if (!+s2[i]) break out;
          if (i0 > 0) i0 = 0;
          break;
      }
    }
    return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
  }
  var prefixExponent;
  function formatPrefixAuto(x2, p2) {
    var d2 = formatDecimalParts(x2, p2);
    if (!d2) return x2 + "";
    var coefficient = d2[0], exponent2 = d2[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n2 = coefficient.length;
    return i === n2 ? coefficient : i > n2 ? coefficient + new Array(i - n2 + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x2, Math.max(0, p2 + i - 1))[0];
  }
  function formatRounded(x2, p2) {
    var d2 = formatDecimalParts(x2, p2);
    if (!d2) return x2 + "";
    var coefficient = d2[0], exponent2 = d2[1];
    return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
  }
  const formatTypes = {
    "%": (x2, p2) => (x2 * 100).toFixed(p2),
    "b": (x2) => Math.round(x2).toString(2),
    "c": (x2) => x2 + "",
    "d": formatDecimal,
    "e": (x2, p2) => x2.toExponential(p2),
    "f": (x2, p2) => x2.toFixed(p2),
    "g": (x2, p2) => x2.toPrecision(p2),
    "o": (x2) => Math.round(x2).toString(8),
    "p": (x2, p2) => formatRounded(x2 * 100, p2),
    "r": formatRounded,
    "s": formatPrefixAuto,
    "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
    "x": (x2) => Math.round(x2).toString(16)
  };
  function identity$5(x2) {
    return x2;
  }
  var map$4 = Array.prototype.map, prefixes = [
    "y",
    "z",
    "a",
    "f",
    "p",
    "n",
    "\xB5",
    "m",
    "",
    "k",
    "M",
    "G",
    "T",
    "P",
    "E",
    "Z",
    "Y"
  ];
  function formatLocale$1(locale2) {
    var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity$5 : formatGroup(map$4.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity$5 : formatNumerals(map$4.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
      if (type === "n") comma = true, type = "g";
      else if (!formatTypes[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
      if (zero2 || fill === "0" && align === "=") zero2 = true, fill = "0", align = "=";
      var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
      var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value) {
        var valuePrefix = prefix2, valueSuffix = suffix, i, n2, c2;
        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          var valueNegative = value < 0 || 1 / value < 0;
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          if (trim) value = formatTrim(value);
          if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
          valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
          if (maybeSuffix) {
            i = -1, n2 = value.length;
            while (++i < n2) {
              if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
                valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        }
        if (comma && !zero2) value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero2) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value) {
      var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k2 = Math.pow(10, -e3), prefix2 = prefixes[8 + e3 / 3];
      return function(value2) {
        return f2(k2 * value2) + prefix2;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }
  var locale$1;
  var format;
  var formatPrefix;
  defaultLocale$1({
    thousands: ",",
    grouping: [
      3
    ],
    currency: [
      "$",
      ""
    ]
  });
  function defaultLocale$1(definition) {
    locale$1 = formatLocale$1(definition);
    format = locale$1.format;
    formatPrefix = locale$1.formatPrefix;
    return locale$1;
  }
  function precisionFixed(step) {
    return Math.max(0, -exponent(Math.abs(step)));
  }
  function precisionPrefix(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
  }
  function precisionRound(step, max2) {
    step = Math.abs(step), max2 = Math.abs(max2) - step;
    return Math.max(0, exponent(max2) - exponent(step)) + 1;
  }
  function tickFormat(start, stop, count, specifier) {
    var step = tickStep(start, stop, count), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format(specifier);
  }
  function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
      var d2 = domain();
      return ticks(d2[0], d2[d2.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
      var d2 = domain();
      return tickFormat(d2[0], d2[d2.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
      if (count == null) count = 10;
      var d2 = domain();
      var i0 = 0;
      var i1 = d2.length - 1;
      var start = d2[i0];
      var stop = d2[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop < start) {
        step = start, start = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start, stop, count);
        if (step === prestep) {
          d2[i0] = start;
          d2[i1] = stop;
          return domain(d2);
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale;
    };
    return scale;
  }
  function linear() {
    var scale = continuous();
    scale.copy = function() {
      return copy$1(scale, linear());
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }
  function identity$4(domain) {
    var unknown;
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : x2;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
      return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return identity$4(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, number$1) : [
      0,
      1
    ];
    return linearish(scale);
  }
  function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t2;
    if (x1 < x0) {
      t2 = i0, i0 = i1, i1 = t2;
      t2 = x0, x0 = x1, x1 = t2;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  }
  function transformLog(x2) {
    return Math.log(x2);
  }
  function transformExp(x2) {
    return Math.exp(x2);
  }
  function transformLogn(x2) {
    return -Math.log(-x2);
  }
  function transformExpn(x2) {
    return -Math.exp(-x2);
  }
  function pow10(x2) {
    return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
  }
  function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2);
  }
  function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x2) => Math.log(x2) / base);
  }
  function reflect(f2) {
    return (x2, k2) => -f2(-x2, k2);
  }
  function loggish(transform2) {
    const scale = transform2(transformLog, transformExp);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
      logs = logp(base), pows = powp(base);
      if (domain()[0] < 0) {
        logs = reflect(logs), pows = reflect(pows);
        transform2(transformLogn, transformExpn);
      } else {
        transform2(transformLog, transformExp);
      }
      return scale;
    }
    scale.base = function(_) {
      return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count) => {
      const d2 = domain();
      let u2 = d2[0];
      let v2 = d2[d2.length - 1];
      const r = v2 < u2;
      if (r) [u2, v2] = [
        v2,
        u2
      ];
      let i = logs(u2);
      let j2 = logs(v2);
      let k2;
      let t2;
      const n2 = count == null ? 10 : +count;
      let z = [];
      if (!(base % 1) && j2 - i < n2) {
        i = Math.floor(i), j2 = Math.ceil(j2);
        if (u2 > 0) for (; i <= j2; ++i) {
          for (k2 = 1; k2 < base; ++k2) {
            t2 = i < 0 ? k2 / pows(-i) : k2 * pows(i);
            if (t2 < u2) continue;
            if (t2 > v2) break;
            z.push(t2);
          }
        }
        else for (; i <= j2; ++i) {
          for (k2 = base - 1; k2 >= 1; --k2) {
            t2 = i > 0 ? k2 / pows(-i) : k2 * pows(i);
            if (t2 < u2) continue;
            if (t2 > v2) break;
            z.push(t2);
          }
        }
        if (z.length * 2 < n2) z = ticks(u2, v2, n2);
      } else {
        z = ticks(i, j2, Math.min(j2 - i, n2)).map(pows);
      }
      return r ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier) => {
      if (count == null) count = 10;
      if (specifier == null) specifier = base === 10 ? "s" : ",";
      if (typeof specifier !== "function") {
        if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
        specifier = format(specifier);
      }
      if (count === Infinity) return specifier;
      const k2 = Math.max(1, base * count / scale.ticks().length);
      return (d2) => {
        let i = d2 / pows(Math.round(logs(d2)));
        if (i * base < base - 0.5) i *= base;
        return i <= k2 ? specifier(d2) : "";
      };
    };
    scale.nice = () => {
      return domain(nice(domain(), {
        floor: (x2) => pows(Math.floor(logs(x2))),
        ceil: (x2) => pows(Math.ceil(logs(x2)))
      }));
    };
    return scale;
  }
  function log() {
    const scale = loggish(transformer$2()).domain([
      1,
      10
    ]);
    scale.copy = () => copy$1(scale, log()).base(scale.base());
    initRange.apply(scale, arguments);
    return scale;
  }
  function transformSymlog(c2) {
    return function(x2) {
      return Math.sign(x2) * Math.log1p(Math.abs(x2 / c2));
    };
  }
  function transformSymexp(c2) {
    return function(x2) {
      return Math.sign(x2) * Math.expm1(Math.abs(x2)) * c2;
    };
  }
  function symlogish(transform2) {
    var c2 = 1, scale = transform2(transformSymlog(c2), transformSymexp(c2));
    scale.constant = function(_) {
      return arguments.length ? transform2(transformSymlog(c2 = +_), transformSymexp(c2)) : c2;
    };
    return linearish(scale);
  }
  function symlog() {
    var scale = symlogish(transformer$2());
    scale.copy = function() {
      return copy$1(scale, symlog()).constant(scale.constant());
    };
    return initRange.apply(scale, arguments);
  }
  function transformPow(exponent2) {
    return function(x2) {
      return x2 < 0 ? -Math.pow(-x2, exponent2) : Math.pow(x2, exponent2);
    };
  }
  function transformSqrt(x2) {
    return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2);
  }
  function transformSquare(x2) {
    return x2 < 0 ? -x2 * x2 : x2 * x2;
  }
  function powish(transform2) {
    var scale = transform2(identity$6, identity$6), exponent2 = 1;
    function rescale() {
      return exponent2 === 1 ? transform2(identity$6, identity$6) : exponent2 === 0.5 ? transform2(transformSqrt, transformSquare) : transform2(transformPow(exponent2), transformPow(1 / exponent2));
    }
    scale.exponent = function(_) {
      return arguments.length ? (exponent2 = +_, rescale()) : exponent2;
    };
    return linearish(scale);
  }
  function pow() {
    var scale = powish(transformer$2());
    scale.copy = function() {
      return copy$1(scale, pow()).exponent(scale.exponent());
    };
    initRange.apply(scale, arguments);
    return scale;
  }
  function sqrt() {
    return pow.apply(null, arguments).exponent(0.5);
  }
  function square(x2) {
    return Math.sign(x2) * x2 * x2;
  }
  function unsquare(x2) {
    return Math.sign(x2) * Math.sqrt(Math.abs(x2));
  }
  function radial() {
    var squared = continuous(), range2 = [
      0,
      1
    ], round2 = false, unknown;
    function scale(x2) {
      var y2 = unsquare(squared(x2));
      return isNaN(y2) ? unknown : round2 ? Math.round(y2) : y2;
    }
    scale.invert = function(y2) {
      return squared.invert(square(y2));
    };
    scale.domain = function(_) {
      return arguments.length ? (squared.domain(_), scale) : squared.domain();
    };
    scale.range = function(_) {
      return arguments.length ? (squared.range((range2 = Array.from(_, number$1)).map(square)), scale) : range2.slice();
    };
    scale.rangeRound = function(_) {
      return scale.range(_).round(true);
    };
    scale.round = function(_) {
      return arguments.length ? (round2 = !!_, scale) : round2;
    };
    scale.clamp = function(_) {
      return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return radial(squared.domain(), range2).round(round2).clamp(squared.clamp()).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }
  function quantile() {
    var domain = [], range2 = [], thresholds = [], unknown;
    function rescale() {
      var i = 0, n2 = Math.max(1, range2.length);
      thresholds = new Array(n2 - 1);
      while (++i < n2) thresholds[i - 1] = quantileSorted(domain, i / n2);
      return scale;
    }
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : range2[bisectRight(thresholds, x2)];
    }
    scale.invertExtent = function(y2) {
      var i = range2.indexOf(y2);
      return i < 0 ? [
        NaN,
        NaN
      ] : [
        i > 0 ? thresholds[i - 1] : domain[0],
        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
      ];
    };
    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [];
      for (let d2 of _) if (d2 != null && !isNaN(d2 = +d2)) domain.push(d2);
      domain.sort(ascending);
      return rescale();
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
      return thresholds.slice();
    };
    scale.copy = function() {
      return quantile().domain(domain).range(range2).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }
  function quantize() {
    var x0 = 0, x1 = 1, n2 = 1, domain = [
      0.5
    ], range2 = [
      0,
      1
    ], unknown;
    function scale(x2) {
      return x2 != null && x2 <= x2 ? range2[bisectRight(domain, x2, 0, n2)] : unknown;
    }
    function rescale() {
      var i = -1;
      domain = new Array(n2);
      while (++i < n2) domain[i] = ((i + 1) * x1 - (i - n2) * x0) / (n2 + 1);
      return scale;
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [
        x0,
        x1
      ];
    };
    scale.range = function(_) {
      return arguments.length ? (n2 = (range2 = Array.from(_)).length - 1, rescale()) : range2.slice();
    };
    scale.invertExtent = function(y2) {
      var i = range2.indexOf(y2);
      return i < 0 ? [
        NaN,
        NaN
      ] : i < 1 ? [
        x0,
        domain[0]
      ] : i >= n2 ? [
        domain[n2 - 1],
        x1
      ] : [
        domain[i - 1],
        domain[i]
      ];
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : scale;
    };
    scale.thresholds = function() {
      return domain.slice();
    };
    scale.copy = function() {
      return quantize().domain([
        x0,
        x1
      ]).range(range2).unknown(unknown);
    };
    return initRange.apply(linearish(scale), arguments);
  }
  function threshold() {
    var domain = [
      0.5
    ], range2 = [
      0,
      1
    ], unknown, n2 = 1;
    function scale(x2) {
      return x2 != null && x2 <= x2 ? range2[bisectRight(domain, x2, 0, n2)] : unknown;
    }
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_), n2 = Math.min(domain.length, range2.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range2 = Array.from(_), n2 = Math.min(domain.length, range2.length - 1), scale) : range2.slice();
    };
    scale.invertExtent = function(y2) {
      var i = range2.indexOf(y2);
      return [
        domain[i - 1],
        domain[i]
      ];
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return threshold().domain(domain).range(range2).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }
  const t0 = /* @__PURE__ */ new Date(), t1 = /* @__PURE__ */ new Date();
  function timeInterval(floori, offseti, count, field) {
    function interval(date2) {
      return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
    }
    interval.floor = (date2) => {
      return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
    };
    interval.ceil = (date2) => {
      return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
    };
    interval.round = (date2) => {
      const d0 = interval(date2), d1 = interval.ceil(date2);
      return date2 - d0 < d1 - date2 ? d0 : d1;
    };
    interval.offset = (date2, step) => {
      return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
    };
    interval.range = (start, stop, step) => {
      const range2 = [];
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0)) return range2;
      let previous;
      do
        range2.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
      while (previous < start && start < stop);
      return range2;
    };
    interval.filter = (test) => {
      return timeInterval((date2) => {
        if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
      }, (date2, step) => {
        if (date2 >= date2) {
          if (step < 0) while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
          else while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
        }
      });
    };
    if (count) {
      interval.count = (start, end) => {
        t0.setTime(+start), t1.setTime(+end);
        floori(t0), floori(t1);
        return Math.floor(count(t0, t1));
      };
      interval.every = (step) => {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d2) => field(d2) % step === 0 : (d2) => interval.count(0, d2) % step === 0);
      };
    }
    return interval;
  }
  const millisecond = timeInterval(() => {
  }, (date2, step) => {
    date2.setTime(+date2 + step);
  }, (start, end) => {
    return end - start;
  });
  millisecond.every = (k2) => {
    k2 = Math.floor(k2);
    if (!isFinite(k2) || !(k2 > 0)) return null;
    if (!(k2 > 1)) return millisecond;
    return timeInterval((date2) => {
      date2.setTime(Math.floor(date2 / k2) * k2);
    }, (date2, step) => {
      date2.setTime(+date2 + step * k2);
    }, (start, end) => {
      return (end - start) / k2;
    });
  };
  millisecond.range;
  const durationSecond = 1e3;
  const durationMinute = durationSecond * 60;
  const durationHour = durationMinute * 60;
  const durationDay = durationHour * 24;
  const durationWeek = durationDay * 7;
  const durationMonth = durationDay * 30;
  const durationYear = durationDay * 365;
  const second = timeInterval((date2) => {
    date2.setTime(date2 - date2.getMilliseconds());
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationSecond);
  }, (start, end) => {
    return (end - start) / durationSecond;
  }, (date2) => {
    return date2.getUTCSeconds();
  });
  second.range;
  const timeMinute = timeInterval((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationMinute);
  }, (start, end) => {
    return (end - start) / durationMinute;
  }, (date2) => {
    return date2.getMinutes();
  });
  timeMinute.range;
  const utcMinute = timeInterval((date2) => {
    date2.setUTCSeconds(0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationMinute);
  }, (start, end) => {
    return (end - start) / durationMinute;
  }, (date2) => {
    return date2.getUTCMinutes();
  });
  utcMinute.range;
  const timeHour = timeInterval((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationHour);
  }, (start, end) => {
    return (end - start) / durationHour;
  }, (date2) => {
    return date2.getHours();
  });
  timeHour.range;
  const utcHour = timeInterval((date2) => {
    date2.setUTCMinutes(0, 0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationHour);
  }, (start, end) => {
    return (end - start) / durationHour;
  }, (date2) => {
    return date2.getUTCHours();
  });
  utcHour.range;
  const timeDay = timeInterval((date2) => date2.setHours(0, 0, 0, 0), (date2, step) => date2.setDate(date2.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, (date2) => date2.getDate() - 1);
  timeDay.range;
  const utcDay = timeInterval((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay;
  }, (date2) => {
    return date2.getUTCDate() - 1;
  });
  utcDay.range;
  const unixDay = timeInterval((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay;
  }, (date2) => {
    return Math.floor(date2 / durationDay);
  });
  unixDay.range;
  function timeWeekday(i) {
    return timeInterval((date2) => {
      date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setDate(date2.getDate() + step * 7);
    }, (start, end) => {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  const timeSunday = timeWeekday(0);
  const timeMonday = timeWeekday(1);
  const timeTuesday = timeWeekday(2);
  const timeWednesday = timeWeekday(3);
  const timeThursday = timeWeekday(4);
  const timeFriday = timeWeekday(5);
  const timeSaturday = timeWeekday(6);
  timeSunday.range;
  timeMonday.range;
  timeTuesday.range;
  timeWednesday.range;
  timeThursday.range;
  timeFriday.range;
  timeSaturday.range;
  function utcWeekday(i) {
    return timeInterval((date2) => {
      date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step * 7);
    }, (start, end) => {
      return (end - start) / durationWeek;
    });
  }
  const utcSunday = utcWeekday(0);
  const utcMonday = utcWeekday(1);
  const utcTuesday = utcWeekday(2);
  const utcWednesday = utcWeekday(3);
  const utcThursday = utcWeekday(4);
  const utcFriday = utcWeekday(5);
  const utcSaturday = utcWeekday(6);
  utcSunday.range;
  utcMonday.range;
  utcTuesday.range;
  utcWednesday.range;
  utcThursday.range;
  utcFriday.range;
  utcSaturday.range;
  const timeMonth = timeInterval((date2) => {
    date2.setDate(1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setMonth(date2.getMonth() + step);
  }, (start, end) => {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, (date2) => {
    return date2.getMonth();
  });
  timeMonth.range;
  const utcMonth = timeInterval((date2) => {
    date2.setUTCDate(1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCMonth(date2.getUTCMonth() + step);
  }, (start, end) => {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, (date2) => {
    return date2.getUTCMonth();
  });
  utcMonth.range;
  const timeYear = timeInterval((date2) => {
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step);
  }, (start, end) => {
    return end.getFullYear() - start.getFullYear();
  }, (date2) => {
    return date2.getFullYear();
  });
  timeYear.every = (k2) => {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
      date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step * k2);
    });
  };
  timeYear.range;
  const utcYear = timeInterval((date2) => {
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step);
  }, (start, end) => {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, (date2) => {
    return date2.getUTCFullYear();
  });
  utcYear.every = (k2) => {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
      date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
    });
  };
  utcYear.range;
  function ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [
      [
        second,
        1,
        durationSecond
      ],
      [
        second,
        5,
        5 * durationSecond
      ],
      [
        second,
        15,
        15 * durationSecond
      ],
      [
        second,
        30,
        30 * durationSecond
      ],
      [
        minute,
        1,
        durationMinute
      ],
      [
        minute,
        5,
        5 * durationMinute
      ],
      [
        minute,
        15,
        15 * durationMinute
      ],
      [
        minute,
        30,
        30 * durationMinute
      ],
      [
        hour,
        1,
        durationHour
      ],
      [
        hour,
        3,
        3 * durationHour
      ],
      [
        hour,
        6,
        6 * durationHour
      ],
      [
        hour,
        12,
        12 * durationHour
      ],
      [
        day,
        1,
        durationDay
      ],
      [
        day,
        2,
        2 * durationDay
      ],
      [
        week,
        1,
        durationWeek
      ],
      [
        month,
        1,
        durationMonth
      ],
      [
        month,
        3,
        3 * durationMonth
      ],
      [
        year,
        1,
        durationYear
      ]
    ];
    function ticks2(start, stop, count) {
      const reverse2 = stop < start;
      if (reverse2) [start, stop] = [
        stop,
        start
      ];
      const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
      const ticks3 = interval ? interval.range(start, +stop + 1) : [];
      return reverse2 ? ticks3.reverse() : ticks3;
    }
    function tickInterval(start, stop, count) {
      const target = Math.abs(stop - start) / count;
      const i = bisector(([, , step2]) => step2).right(tickIntervals, target);
      if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
      if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
      const [t2, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
      return t2.every(step);
    }
    return [
      ticks2,
      tickInterval
    ];
  }
  const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
  const [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
  function localDate(d2) {
    if (0 <= d2.y && d2.y < 100) {
      var date2 = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
      date2.setFullYear(d2.y);
      return date2;
    }
    return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
  }
  function utcDate(d2) {
    if (0 <= d2.y && d2.y < 100) {
      var date2 = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
      date2.setUTCFullYear(d2.y);
      return date2;
    }
    return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
  }
  function newDate(y2, m2, d2) {
    return {
      y: y2,
      m: m2,
      d: d2,
      H: 0,
      M: 0,
      S: 0,
      L: 0
    };
  }
  function formatLocale(locale2) {
    var locale_dateTime = locale2.dateTime, locale_date = locale2.date, locale_time = locale2.time, locale_periods = locale2.periods, locale_weekdays = locale2.days, locale_shortWeekdays = locale2.shortDays, locale_months = locale2.months, locale_shortMonths = locale2.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats2) {
      return function(date2) {
        var string = [], i = -1, j2 = 0, n2 = specifier.length, c2, pad2, format2;
        if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
        while (++i < n2) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j2, i));
            if ((pad2 = pads[c2 = specifier.charAt(++i)]) != null) c2 = specifier.charAt(++i);
            else pad2 = c2 === "e" ? " " : "0";
            if (format2 = formats2[c2]) c2 = format2(date2, pad2);
            string.push(c2);
            j2 = i + 1;
          }
        }
        string.push(specifier.slice(j2, i));
        return string.join("");
      };
    }
    function newParse(specifier, Z2) {
      return function(string) {
        var d2 = newDate(1900, void 0, 1), i = parseSpecifier(d2, specifier, string += "", 0), week, day;
        if (i != string.length) return null;
        if ("Q" in d2) return new Date(d2.Q);
        if ("s" in d2) return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
        if (Z2 && !("Z" in d2)) d2.Z = 0;
        if ("p" in d2) d2.H = d2.H % 12 + d2.p * 12;
        if (d2.m === void 0) d2.m = "q" in d2 ? d2.q : 0;
        if ("V" in d2) {
          if (d2.V < 1 || d2.V > 53) return null;
          if (!("w" in d2)) d2.w = 1;
          if ("Z" in d2) {
            week = utcDate(newDate(d2.y, 0, 1)), day = week.getUTCDay();
            week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay.offset(week, (d2.V - 1) * 7);
            d2.y = week.getUTCFullYear();
            d2.m = week.getUTCMonth();
            d2.d = week.getUTCDate() + (d2.w + 6) % 7;
          } else {
            week = localDate(newDate(d2.y, 0, 1)), day = week.getDay();
            week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
            week = timeDay.offset(week, (d2.V - 1) * 7);
            d2.y = week.getFullYear();
            d2.m = week.getMonth();
            d2.d = week.getDate() + (d2.w + 6) % 7;
          }
        } else if ("W" in d2 || "U" in d2) {
          if (!("w" in d2)) d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
          day = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
          d2.m = 0;
          d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day + 5) % 7 : d2.w + d2.U * 7 - (day + 6) % 7;
        }
        if ("Z" in d2) {
          d2.H += d2.Z / 100 | 0;
          d2.M += d2.Z % 100;
          return utcDate(d2);
        }
        return localDate(d2);
      };
    }
    function parseSpecifier(d2, specifier, string, j2) {
      var i = 0, n2 = specifier.length, m2 = string.length, c2, parse;
      while (i < n2) {
        if (j2 >= m2) return -1;
        c2 = specifier.charCodeAt(i++);
        if (c2 === 37) {
          c2 = specifier.charAt(i++);
          parse = parses[c2 in pads ? specifier.charAt(i++) : c2];
          if (!parse || (j2 = parse(d2, string, j2)) < 0) return -1;
        } else if (c2 != string.charCodeAt(j2++)) {
          return -1;
        }
      }
      return j2;
    }
    function parsePeriod(d2, string, i) {
      var n2 = periodRe.exec(string.slice(i));
      return n2 ? (d2.p = periodLookup.get(n2[0].toLowerCase()), i + n2[0].length) : -1;
    }
    function parseShortWeekday(d2, string, i) {
      var n2 = shortWeekdayRe.exec(string.slice(i));
      return n2 ? (d2.w = shortWeekdayLookup.get(n2[0].toLowerCase()), i + n2[0].length) : -1;
    }
    function parseWeekday(d2, string, i) {
      var n2 = weekdayRe.exec(string.slice(i));
      return n2 ? (d2.w = weekdayLookup.get(n2[0].toLowerCase()), i + n2[0].length) : -1;
    }
    function parseShortMonth(d2, string, i) {
      var n2 = shortMonthRe.exec(string.slice(i));
      return n2 ? (d2.m = shortMonthLookup.get(n2[0].toLowerCase()), i + n2[0].length) : -1;
    }
    function parseMonth(d2, string, i) {
      var n2 = monthRe.exec(string.slice(i));
      return n2 ? (d2.m = monthLookup.get(n2[0].toLowerCase()), i + n2[0].length) : -1;
    }
    function parseLocaleDateTime(d2, string, i) {
      return parseSpecifier(d2, locale_dateTime, string, i);
    }
    function parseLocaleDate(d2, string, i) {
      return parseSpecifier(d2, locale_date, string, i);
    }
    function parseLocaleTime(d2, string, i) {
      return parseSpecifier(d2, locale_time, string, i);
    }
    function formatShortWeekday(d2) {
      return locale_shortWeekdays[d2.getDay()];
    }
    function formatWeekday(d2) {
      return locale_weekdays[d2.getDay()];
    }
    function formatShortMonth(d2) {
      return locale_shortMonths[d2.getMonth()];
    }
    function formatMonth(d2) {
      return locale_months[d2.getMonth()];
    }
    function formatPeriod(d2) {
      return locale_periods[+(d2.getHours() >= 12)];
    }
    function formatQuarter(d2) {
      return 1 + ~~(d2.getMonth() / 3);
    }
    function formatUTCShortWeekday(d2) {
      return locale_shortWeekdays[d2.getUTCDay()];
    }
    function formatUTCWeekday(d2) {
      return locale_weekdays[d2.getUTCDay()];
    }
    function formatUTCShortMonth(d2) {
      return locale_shortMonths[d2.getUTCMonth()];
    }
    function formatUTCMonth(d2) {
      return locale_months[d2.getUTCMonth()];
    }
    function formatUTCPeriod(d2) {
      return locale_periods[+(d2.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d2) {
      return 1 + ~~(d2.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f2 = newFormat(specifier += "", formats);
        f2.toString = function() {
          return specifier;
        };
        return f2;
      },
      parse: function(specifier) {
        var p2 = newParse(specifier += "", false);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      },
      utcFormat: function(specifier) {
        var f2 = newFormat(specifier += "", utcFormats);
        f2.toString = function() {
          return specifier;
        };
        return f2;
      },
      utcParse: function(specifier) {
        var p2 = newParse(specifier += "", true);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      }
    };
  }
  var pads = {
    "-": "",
    "_": " ",
    "0": "0"
  }, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
  function pad(value, fill, width) {
    var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
    return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function requote(s2) {
    return s2.replace(requoteRe, "\\$&");
  }
  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names) {
    return new Map(names.map((name, i) => [
      name.toLowerCase(),
      i
    ]));
  }
  function parseWeekdayNumberSunday(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 1));
    return n2 ? (d2.w = +n2[0], i + n2[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 1));
    return n2 ? (d2.u = +n2[0], i + n2[0].length) : -1;
  }
  function parseWeekNumberSunday(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.U = +n2[0], i + n2[0].length) : -1;
  }
  function parseWeekNumberISO(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.V = +n2[0], i + n2[0].length) : -1;
  }
  function parseWeekNumberMonday(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.W = +n2[0], i + n2[0].length) : -1;
  }
  function parseFullYear(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 4));
    return n2 ? (d2.y = +n2[0], i + n2[0].length) : -1;
  }
  function parseYear(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.y = +n2[0] + (+n2[0] > 68 ? 1900 : 2e3), i + n2[0].length) : -1;
  }
  function parseZone(d2, string, i) {
    var n2 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n2 ? (d2.Z = n2[1] ? 0 : -(n2[2] + (n2[3] || "00")), i + n2[0].length) : -1;
  }
  function parseQuarter(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 1));
    return n2 ? (d2.q = n2[0] * 3 - 3, i + n2[0].length) : -1;
  }
  function parseMonthNumber(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.m = n2[0] - 1, i + n2[0].length) : -1;
  }
  function parseDayOfMonth(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.d = +n2[0], i + n2[0].length) : -1;
  }
  function parseDayOfYear(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 3));
    return n2 ? (d2.m = 0, d2.d = +n2[0], i + n2[0].length) : -1;
  }
  function parseHour24(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.H = +n2[0], i + n2[0].length) : -1;
  }
  function parseMinutes(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.M = +n2[0], i + n2[0].length) : -1;
  }
  function parseSeconds(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 2));
    return n2 ? (d2.S = +n2[0], i + n2[0].length) : -1;
  }
  function parseMilliseconds(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 3));
    return n2 ? (d2.L = +n2[0], i + n2[0].length) : -1;
  }
  function parseMicroseconds(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i, i + 6));
    return n2 ? (d2.L = Math.floor(n2[0] / 1e3), i + n2[0].length) : -1;
  }
  function parseLiteralPercent(d2, string, i) {
    var n2 = percentRe.exec(string.slice(i, i + 1));
    return n2 ? i + n2[0].length : -1;
  }
  function parseUnixTimestamp(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i));
    return n2 ? (d2.Q = +n2[0], i + n2[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d2, string, i) {
    var n2 = numberRe.exec(string.slice(i));
    return n2 ? (d2.s = +n2[0], i + n2[0].length) : -1;
  }
  function formatDayOfMonth(d2, p2) {
    return pad(d2.getDate(), p2, 2);
  }
  function formatHour24(d2, p2) {
    return pad(d2.getHours(), p2, 2);
  }
  function formatHour12(d2, p2) {
    return pad(d2.getHours() % 12 || 12, p2, 2);
  }
  function formatDayOfYear(d2, p2) {
    return pad(1 + timeDay.count(timeYear(d2), d2), p2, 3);
  }
  function formatMilliseconds(d2, p2) {
    return pad(d2.getMilliseconds(), p2, 3);
  }
  function formatMicroseconds(d2, p2) {
    return formatMilliseconds(d2, p2) + "000";
  }
  function formatMonthNumber(d2, p2) {
    return pad(d2.getMonth() + 1, p2, 2);
  }
  function formatMinutes(d2, p2) {
    return pad(d2.getMinutes(), p2, 2);
  }
  function formatSeconds(d2, p2) {
    return pad(d2.getSeconds(), p2, 2);
  }
  function formatWeekdayNumberMonday(d2) {
    var day = d2.getDay();
    return day === 0 ? 7 : day;
  }
  function formatWeekNumberSunday(d2, p2) {
    return pad(timeSunday.count(timeYear(d2) - 1, d2), p2, 2);
  }
  function dISO(d2) {
    var day = d2.getDay();
    return day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
  }
  function formatWeekNumberISO(d2, p2) {
    d2 = dISO(d2);
    return pad(timeThursday.count(timeYear(d2), d2) + (timeYear(d2).getDay() === 4), p2, 2);
  }
  function formatWeekdayNumberSunday(d2) {
    return d2.getDay();
  }
  function formatWeekNumberMonday(d2, p2) {
    return pad(timeMonday.count(timeYear(d2) - 1, d2), p2, 2);
  }
  function formatYear(d2, p2) {
    return pad(d2.getFullYear() % 100, p2, 2);
  }
  function formatYearISO(d2, p2) {
    d2 = dISO(d2);
    return pad(d2.getFullYear() % 100, p2, 2);
  }
  function formatFullYear(d2, p2) {
    return pad(d2.getFullYear() % 1e4, p2, 4);
  }
  function formatFullYearISO(d2, p2) {
    var day = d2.getDay();
    d2 = day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
    return pad(d2.getFullYear() % 1e4, p2, 4);
  }
  function formatZone(d2) {
    var z = d2.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d2, p2) {
    return pad(d2.getUTCDate(), p2, 2);
  }
  function formatUTCHour24(d2, p2) {
    return pad(d2.getUTCHours(), p2, 2);
  }
  function formatUTCHour12(d2, p2) {
    return pad(d2.getUTCHours() % 12 || 12, p2, 2);
  }
  function formatUTCDayOfYear(d2, p2) {
    return pad(1 + utcDay.count(utcYear(d2), d2), p2, 3);
  }
  function formatUTCMilliseconds(d2, p2) {
    return pad(d2.getUTCMilliseconds(), p2, 3);
  }
  function formatUTCMicroseconds(d2, p2) {
    return formatUTCMilliseconds(d2, p2) + "000";
  }
  function formatUTCMonthNumber(d2, p2) {
    return pad(d2.getUTCMonth() + 1, p2, 2);
  }
  function formatUTCMinutes(d2, p2) {
    return pad(d2.getUTCMinutes(), p2, 2);
  }
  function formatUTCSeconds(d2, p2) {
    return pad(d2.getUTCSeconds(), p2, 2);
  }
  function formatUTCWeekdayNumberMonday(d2) {
    var dow = d2.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d2, p2) {
    return pad(utcSunday.count(utcYear(d2) - 1, d2), p2, 2);
  }
  function UTCdISO(d2) {
    var day = d2.getUTCDay();
    return day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
  }
  function formatUTCWeekNumberISO(d2, p2) {
    d2 = UTCdISO(d2);
    return pad(utcThursday.count(utcYear(d2), d2) + (utcYear(d2).getUTCDay() === 4), p2, 2);
  }
  function formatUTCWeekdayNumberSunday(d2) {
    return d2.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d2, p2) {
    return pad(utcMonday.count(utcYear(d2) - 1, d2), p2, 2);
  }
  function formatUTCYear(d2, p2) {
    return pad(d2.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCYearISO(d2, p2) {
    d2 = UTCdISO(d2);
    return pad(d2.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCFullYear(d2, p2) {
    return pad(d2.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCFullYearISO(d2, p2) {
    var day = d2.getUTCDay();
    d2 = day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
    return pad(d2.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d2) {
    return +d2;
  }
  function formatUnixTimestampSeconds(d2) {
    return Math.floor(+d2 / 1e3);
  }
  var locale;
  var timeFormat;
  var utcFormat;
  defaultLocale({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: [
      "AM",
      "PM"
    ],
    days: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ],
    shortDays: [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ],
    months: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    shortMonths: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ]
  });
  function defaultLocale(definition) {
    locale = formatLocale(definition);
    timeFormat = locale.format;
    locale.parse;
    utcFormat = locale.utcFormat;
    locale.utcParse;
    return locale;
  }
  function date(t2) {
    return new Date(t2);
  }
  function number(t2) {
    return t2 instanceof Date ? +t2 : +/* @__PURE__ */ new Date(+t2);
  }
  function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
    var scale = continuous(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
    function tickFormat2(date2) {
      return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
    }
    scale.invert = function(y2) {
      return new Date(invert(y2));
    };
    scale.domain = function(_) {
      return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
    };
    scale.ticks = function(interval) {
      var d2 = domain();
      return ticks2(d2[0], d2[d2.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
      return specifier == null ? tickFormat2 : format2(specifier);
    };
    scale.nice = function(interval) {
      var d2 = domain();
      if (!interval || typeof interval.range !== "function") interval = tickInterval(d2[0], d2[d2.length - 1], interval == null ? 10 : interval);
      return interval ? domain(nice(d2, interval)) : scale;
    };
    scale.copy = function() {
      return copy$1(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2));
    };
    return scale;
  }
  function time() {
    return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([
      new Date(2e3, 0, 1),
      new Date(2e3, 0, 2)
    ]), arguments);
  }
  function utcTime() {
    return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([
      Date.UTC(2e3, 0, 1),
      Date.UTC(2e3, 0, 2)
    ]), arguments);
  }
  function transformer$1() {
    var x0 = 0, x1 = 1, t02, t12, k10, transform2, interpolator = identity$6, clamp2 = false, unknown;
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : interpolator(k10 === 0 ? 0.5 : (x2 = (transform2(x2) - t02) * k10, clamp2 ? Math.max(0, Math.min(1, x2)) : x2));
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1] = _, t02 = transform2(x0 = +x0), t12 = transform2(x1 = +x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale) : [
        x0,
        x1
      ];
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp2 = !!_, scale) : clamp2;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range2(interpolate2) {
      return function(_) {
        var r0, r1;
        return arguments.length ? ([r0, r1] = _, interpolator = interpolate2(r0, r1), scale) : [
          interpolator(0),
          interpolator(1)
        ];
      };
    }
    scale.range = range2(interpolate);
    scale.rangeRound = range2(interpolateRound);
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t2) {
      transform2 = t2, t02 = t2(x0), t12 = t2(x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
      return scale;
    };
  }
  function copy(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
  }
  function sequential() {
    var scale = linearish(transformer$1()(identity$6));
    scale.copy = function() {
      return copy(scale, sequential());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialLog() {
    var scale = loggish(transformer$1()).domain([
      1,
      10
    ]);
    scale.copy = function() {
      return copy(scale, sequentialLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSymlog() {
    var scale = symlogish(transformer$1());
    scale.copy = function() {
      return copy(scale, sequentialSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialPow() {
    var scale = powish(transformer$1());
    scale.copy = function() {
      return copy(scale, sequentialPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
  }
  function sequentialQuantile() {
    var domain = [], interpolator = identity$6;
    function scale(x2) {
      if (x2 != null && !isNaN(x2 = +x2)) return interpolator((bisectRight(domain, x2, 1) - 1) / (domain.length - 1));
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [];
      for (let d2 of _) if (d2 != null && !isNaN(d2 = +d2)) domain.push(d2);
      domain.sort(ascending);
      return scale;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    scale.range = function() {
      return domain.map((d2, i) => interpolator(i / (domain.length - 1)));
    };
    scale.quantiles = function(n2) {
      return Array.from({
        length: n2 + 1
      }, (_, i) => quantile$1(domain, i / n2));
    };
    scale.copy = function() {
      return sequentialQuantile(interpolator).domain(domain);
    };
    return initInterpolator.apply(scale, arguments);
  }
  function transformer() {
    var x0 = 0, x1 = 0.5, x2 = 1, s2 = 1, t02, t12, t2, k10, k21, interpolator = identity$6, transform2, clamp2 = false, unknown;
    function scale(x3) {
      return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform2(x3)) - t12) * (s2 * x3 < s2 * t12 ? k10 : k21), interpolator(clamp2 ? Math.max(0, Math.min(1, x3)) : x3));
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1, x2] = _, t02 = transform2(x0 = +x0), t12 = transform2(x1 = +x1), t2 = transform2(x2 = +x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1, scale) : [
        x0,
        x1,
        x2
      ];
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp2 = !!_, scale) : clamp2;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range2(interpolate2) {
      return function(_) {
        var r0, r1, r2;
        return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate2, [
          r0,
          r1,
          r2
        ]), scale) : [
          interpolator(0),
          interpolator(0.5),
          interpolator(1)
        ];
      };
    }
    scale.range = range2(interpolate);
    scale.rangeRound = range2(interpolateRound);
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t3) {
      transform2 = t3, t02 = t3(x0), t12 = t3(x1), t2 = t3(x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1;
      return scale;
    };
  }
  function diverging() {
    var scale = linearish(transformer()(identity$6));
    scale.copy = function() {
      return copy(scale, diverging());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingLog() {
    var scale = loggish(transformer()).domain([
      0.1,
      1,
      10
    ]);
    scale.copy = function() {
      return copy(scale, divergingLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSymlog() {
    var scale = symlogish(transformer());
    scale.copy = function() {
      return copy(scale, divergingSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingPow() {
    var scale = powish(transformer());
    scale.copy = function() {
      return copy(scale, divergingPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
  }
  const d3Scales = Object.freeze(Object.defineProperty({
    __proto__: null,
    scaleBand: band,
    scaleDiverging: diverging,
    scaleDivergingLog: divergingLog,
    scaleDivergingPow: divergingPow,
    scaleDivergingSqrt: divergingSqrt,
    scaleDivergingSymlog: divergingSymlog,
    scaleIdentity: identity$4,
    scaleImplicit: implicit,
    scaleLinear: linear,
    scaleLog: log,
    scaleOrdinal: ordinal,
    scalePoint: point,
    scalePow: pow,
    scaleQuantile: quantile,
    scaleQuantize: quantize,
    scaleRadial: radial,
    scaleSequential: sequential,
    scaleSequentialLog: sequentialLog,
    scaleSequentialPow: sequentialPow,
    scaleSequentialQuantile: sequentialQuantile,
    scaleSequentialSqrt: sequentialSqrt,
    scaleSequentialSymlog: sequentialSymlog,
    scaleSqrt: sqrt,
    scaleSymlog: symlog,
    scaleThreshold: threshold,
    scaleTime: time,
    scaleUtc: utcTime,
    tickFormat
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var isSymbol = isSymbol_1;
  function baseExtremum$2(array2, iteratee, comparator) {
    var index2 = -1, length = array2.length;
    while (++index2 < length) {
      var value = array2[index2], current = iteratee(value);
      if (current != null && (computed === void 0 ? current === current && !isSymbol(current) : comparator(current, computed))) {
        var computed = current, result = value;
      }
    }
    return result;
  }
  var _baseExtremum = baseExtremum$2;
  function baseGt$1(value, other) {
    return value > other;
  }
  var _baseGt = baseGt$1;
  var baseExtremum$1 = _baseExtremum, baseGt = _baseGt, identity$3 = identity_1;
  function max(array2) {
    return array2 && array2.length ? baseExtremum$1(array2, identity$3, baseGt) : void 0;
  }
  var max_1 = max;
  const max$1 = getDefaultExportFromCjs(max_1);
  function baseLt$1(value, other) {
    return value < other;
  }
  var _baseLt = baseLt$1;
  var baseExtremum = _baseExtremum, baseLt = _baseLt, identity$2 = identity_1;
  function min(array2) {
    return array2 && array2.length ? baseExtremum(array2, identity$2, baseLt) : void 0;
  }
  var min_1 = min;
  const min$1 = getDefaultExportFromCjs(min_1);
  var arrayMap = _arrayMap, baseIteratee$5 = _baseIteratee, baseMap = _baseMap, isArray$3 = isArray_1;
  function map$2(collection, iteratee) {
    var func = isArray$3(collection) ? arrayMap : baseMap;
    return func(collection, baseIteratee$5(iteratee));
  }
  var map_1 = map$2;
  map$3 = getDefaultExportFromCjs(map_1);
  var baseFlatten = _baseFlatten, map$1 = map_1;
  function flatMap(collection, iteratee) {
    return baseFlatten(map$1(collection, iteratee), 1);
  }
  var flatMap_1 = flatMap;
  const flatMap$1 = getDefaultExportFromCjs(flatMap_1);
  var baseIsEqual = _baseIsEqual;
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }
  var isEqual_1 = isEqual;
  const isEqual$1 = getDefaultExportFromCjs(isEqual_1);
  var MAX_DIGITS = 1e9, defaults = {
    precision: 20,
    rounding: 4,
    toExpNeg: -7,
    toExpPos: 21,
    LN10: "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"
  }, Decimal, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", exponentOutOfRange = decimalError + "Exponent out of range: ", mathfloor = Math.floor, mathpow = Math.pow, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, ONE, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE), P = {};
  P.absoluteValue = P.abs = function() {
    var x2 = new this.constructor(this);
    if (x2.s) x2.s = 1;
    return x2;
  };
  P.comparedTo = P.cmp = function(y2) {
    var i, j2, xdL, ydL, x2 = this;
    y2 = new x2.constructor(y2);
    if (x2.s !== y2.s) return x2.s || -y2.s;
    if (x2.e !== y2.e) return x2.e > y2.e ^ x2.s < 0 ? 1 : -1;
    xdL = x2.d.length;
    ydL = y2.d.length;
    for (i = 0, j2 = xdL < ydL ? xdL : ydL; i < j2; ++i) {
      if (x2.d[i] !== y2.d[i]) return x2.d[i] > y2.d[i] ^ x2.s < 0 ? 1 : -1;
    }
    return xdL === ydL ? 0 : xdL > ydL ^ x2.s < 0 ? 1 : -1;
  };
  P.decimalPlaces = P.dp = function() {
    var x2 = this, w = x2.d.length - 1, dp = (w - x2.e) * LOG_BASE;
    w = x2.d[w];
    if (w) for (; w % 10 == 0; w /= 10) dp--;
    return dp < 0 ? 0 : dp;
  };
  P.dividedBy = P.div = function(y2) {
    return divide(this, new this.constructor(y2));
  };
  P.dividedToIntegerBy = P.idiv = function(y2) {
    var x2 = this, Ctor = x2.constructor;
    return round(divide(x2, new Ctor(y2), 0, 1), Ctor.precision);
  };
  P.equals = P.eq = function(y2) {
    return !this.cmp(y2);
  };
  P.exponent = function() {
    return getBase10Exponent(this);
  };
  P.greaterThan = P.gt = function(y2) {
    return this.cmp(y2) > 0;
  };
  P.greaterThanOrEqualTo = P.gte = function(y2) {
    return this.cmp(y2) >= 0;
  };
  P.isInteger = P.isint = function() {
    return this.e > this.d.length - 2;
  };
  P.isNegative = P.isneg = function() {
    return this.s < 0;
  };
  P.isPositive = P.ispos = function() {
    return this.s > 0;
  };
  P.isZero = function() {
    return this.s === 0;
  };
  P.lessThan = P.lt = function(y2) {
    return this.cmp(y2) < 0;
  };
  P.lessThanOrEqualTo = P.lte = function(y2) {
    return this.cmp(y2) < 1;
  };
  P.logarithm = P.log = function(base) {
    var r, x2 = this, Ctor = x2.constructor, pr = Ctor.precision, wpr = pr + 5;
    if (base === void 0) {
      base = new Ctor(10);
    } else {
      base = new Ctor(base);
      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + "NaN");
    }
    if (x2.s < 1) throw Error(decimalError + (x2.s ? "NaN" : "-Infinity"));
    if (x2.eq(ONE)) return new Ctor(0);
    external = false;
    r = divide(ln(x2, wpr), ln(base, wpr), wpr);
    external = true;
    return round(r, pr);
  };
  P.minus = P.sub = function(y2) {
    var x2 = this;
    y2 = new x2.constructor(y2);
    return x2.s == y2.s ? subtract(x2, y2) : add(x2, (y2.s = -y2.s, y2));
  };
  P.modulo = P.mod = function(y2) {
    var q2, x2 = this, Ctor = x2.constructor, pr = Ctor.precision;
    y2 = new Ctor(y2);
    if (!y2.s) throw Error(decimalError + "NaN");
    if (!x2.s) return round(new Ctor(x2), pr);
    external = false;
    q2 = divide(x2, y2, 0, 1).times(y2);
    external = true;
    return x2.minus(q2);
  };
  P.naturalExponential = P.exp = function() {
    return exp(this);
  };
  P.naturalLogarithm = P.ln = function() {
    return ln(this);
  };
  P.negated = P.neg = function() {
    var x2 = new this.constructor(this);
    x2.s = -x2.s || 0;
    return x2;
  };
  P.plus = P.add = function(y2) {
    var x2 = this;
    y2 = new x2.constructor(y2);
    return x2.s == y2.s ? add(x2, y2) : subtract(x2, (y2.s = -y2.s, y2));
  };
  P.precision = P.sd = function(z) {
    var e3, sd, w, x2 = this;
    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
    e3 = getBase10Exponent(x2) + 1;
    w = x2.d.length - 1;
    sd = w * LOG_BASE + 1;
    w = x2.d[w];
    if (w) {
      for (; w % 10 == 0; w /= 10) sd--;
      for (w = x2.d[0]; w >= 10; w /= 10) sd++;
    }
    return z && e3 > sd ? e3 : sd;
  };
  P.squareRoot = P.sqrt = function() {
    var e3, n2, pr, r, s2, t2, wpr, x2 = this, Ctor = x2.constructor;
    if (x2.s < 1) {
      if (!x2.s) return new Ctor(0);
      throw Error(decimalError + "NaN");
    }
    e3 = getBase10Exponent(x2);
    external = false;
    s2 = Math.sqrt(+x2);
    if (s2 == 0 || s2 == 1 / 0) {
      n2 = digitsToString(x2.d);
      if ((n2.length + e3) % 2 == 0) n2 += "0";
      s2 = Math.sqrt(n2);
      e3 = mathfloor((e3 + 1) / 2) - (e3 < 0 || e3 % 2);
      if (s2 == 1 / 0) {
        n2 = "5e" + e3;
      } else {
        n2 = s2.toExponential();
        n2 = n2.slice(0, n2.indexOf("e") + 1) + e3;
      }
      r = new Ctor(n2);
    } else {
      r = new Ctor(s2.toString());
    }
    pr = Ctor.precision;
    s2 = wpr = pr + 3;
    for (; ; ) {
      t2 = r;
      r = t2.plus(divide(x2, t2, wpr + 2)).times(0.5);
      if (digitsToString(t2.d).slice(0, wpr) === (n2 = digitsToString(r.d)).slice(0, wpr)) {
        n2 = n2.slice(wpr - 3, wpr + 1);
        if (s2 == wpr && n2 == "4999") {
          round(t2, pr + 1, 0);
          if (t2.times(t2).eq(x2)) {
            r = t2;
            break;
          }
        } else if (n2 != "9999") {
          break;
        }
        wpr += 4;
      }
    }
    external = true;
    return round(r, pr);
  };
  P.times = P.mul = function(y2) {
    var carry, e3, i, k2, r, rL, t2, xdL, ydL, x2 = this, Ctor = x2.constructor, xd = x2.d, yd = (y2 = new Ctor(y2)).d;
    if (!x2.s || !y2.s) return new Ctor(0);
    y2.s *= x2.s;
    e3 = x2.e + y2.e;
    xdL = xd.length;
    ydL = yd.length;
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }
    r = [];
    rL = xdL + ydL;
    for (i = rL; i--; ) r.push(0);
    for (i = ydL; --i >= 0; ) {
      carry = 0;
      for (k2 = xdL + i; k2 > i; ) {
        t2 = r[k2] + yd[i] * xd[k2 - i - 1] + carry;
        r[k2--] = t2 % BASE | 0;
        carry = t2 / BASE | 0;
      }
      r[k2] = (r[k2] + carry) % BASE | 0;
    }
    for (; !r[--rL]; ) r.pop();
    if (carry) ++e3;
    else r.shift();
    y2.d = r;
    y2.e = e3;
    return external ? round(y2, Ctor.precision) : y2;
  };
  P.toDecimalPlaces = P.todp = function(dp, rm) {
    var x2 = this, Ctor = x2.constructor;
    x2 = new Ctor(x2);
    if (dp === void 0) return x2;
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);
    return round(x2, dp + getBase10Exponent(x2) + 1, rm);
  };
  P.toExponential = function(dp, rm) {
    var str, x2 = this, Ctor = x2.constructor;
    if (dp === void 0) {
      str = toString(x2, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
      x2 = round(new Ctor(x2), dp + 1, rm);
      str = toString(x2, true, dp + 1);
    }
    return str;
  };
  P.toFixed = function(dp, rm) {
    var str, y2, x2 = this, Ctor = x2.constructor;
    if (dp === void 0) return toString(x2);
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);
    y2 = round(new Ctor(x2), dp + getBase10Exponent(x2) + 1, rm);
    str = toString(y2.abs(), false, dp + getBase10Exponent(y2) + 1);
    return x2.isneg() && !x2.isZero() ? "-" + str : str;
  };
  P.toInteger = P.toint = function() {
    var x2 = this, Ctor = x2.constructor;
    return round(new Ctor(x2), getBase10Exponent(x2) + 1, Ctor.rounding);
  };
  P.toNumber = function() {
    return +this;
  };
  P.toPower = P.pow = function(y2) {
    var e3, k2, pr, r, sign2, yIsInt, x2 = this, Ctor = x2.constructor, guard = 12, yn = +(y2 = new Ctor(y2));
    if (!y2.s) return new Ctor(ONE);
    x2 = new Ctor(x2);
    if (!x2.s) {
      if (y2.s < 1) throw Error(decimalError + "Infinity");
      return x2;
    }
    if (x2.eq(ONE)) return x2;
    pr = Ctor.precision;
    if (y2.eq(ONE)) return round(x2, pr);
    e3 = y2.e;
    k2 = y2.d.length - 1;
    yIsInt = e3 >= k2;
    sign2 = x2.s;
    if (!yIsInt) {
      if (sign2 < 0) throw Error(decimalError + "NaN");
    } else if ((k2 = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = new Ctor(ONE);
      e3 = Math.ceil(pr / LOG_BASE + 4);
      external = false;
      for (; ; ) {
        if (k2 % 2) {
          r = r.times(x2);
          truncate(r.d, e3);
        }
        k2 = mathfloor(k2 / 2);
        if (k2 === 0) break;
        x2 = x2.times(x2);
        truncate(x2.d, e3);
      }
      external = true;
      return y2.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);
    }
    sign2 = sign2 < 0 && y2.d[Math.max(e3, k2)] & 1 ? -1 : 1;
    x2.s = 1;
    external = false;
    r = y2.times(ln(x2, pr + guard));
    external = true;
    r = exp(r);
    r.s = sign2;
    return r;
  };
  P.toPrecision = function(sd, rm) {
    var e3, str, x2 = this, Ctor = x2.constructor;
    if (sd === void 0) {
      e3 = getBase10Exponent(x2);
      str = toString(x2, e3 <= Ctor.toExpNeg || e3 >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
      x2 = round(new Ctor(x2), sd, rm);
      e3 = getBase10Exponent(x2);
      str = toString(x2, sd <= e3 || e3 <= Ctor.toExpNeg, sd);
    }
    return str;
  };
  P.toSignificantDigits = P.tosd = function(sd, rm) {
    var x2 = this, Ctor = x2.constructor;
    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    }
    return round(new Ctor(x2), sd, rm);
  };
  P.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for("nodejs.util.inspect.custom")] = function() {
    var x2 = this, e3 = getBase10Exponent(x2), Ctor = x2.constructor;
    return toString(x2, e3 <= Ctor.toExpNeg || e3 >= Ctor.toExpPos);
  };
  function add(x2, y2) {
    var carry, d2, e3, i, k2, len, xd, yd, Ctor = x2.constructor, pr = Ctor.precision;
    if (!x2.s || !y2.s) {
      if (!y2.s) y2 = new Ctor(x2);
      return external ? round(y2, pr) : y2;
    }
    xd = x2.d;
    yd = y2.d;
    k2 = x2.e;
    e3 = y2.e;
    xd = xd.slice();
    i = k2 - e3;
    if (i) {
      if (i < 0) {
        d2 = xd;
        i = -i;
        len = yd.length;
      } else {
        d2 = yd;
        e3 = k2;
        len = xd.length;
      }
      k2 = Math.ceil(pr / LOG_BASE);
      len = k2 > len ? k2 + 1 : len + 1;
      if (i > len) {
        i = len;
        d2.length = 1;
      }
      d2.reverse();
      for (; i--; ) d2.push(0);
      d2.reverse();
    }
    len = xd.length;
    i = yd.length;
    if (len - i < 0) {
      i = len;
      d2 = yd;
      yd = xd;
      xd = d2;
    }
    for (carry = 0; i; ) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }
    if (carry) {
      xd.unshift(carry);
      ++e3;
    }
    for (len = xd.length; xd[--len] == 0; ) xd.pop();
    y2.d = xd;
    y2.e = e3;
    return external ? round(y2, pr) : y2;
  }
  function checkInt32(i, min2, max2) {
    if (i !== ~~i || i < min2 || i > max2) {
      throw Error(invalidArgument + i);
    }
  }
  function digitsToString(d2) {
    var i, k2, ws, indexOfLastWord = d2.length - 1, str = "", w = d2[0];
    if (indexOfLastWord > 0) {
      str += w;
      for (i = 1; i < indexOfLastWord; i++) {
        ws = d2[i] + "";
        k2 = LOG_BASE - ws.length;
        if (k2) str += getZeroString(k2);
        str += ws;
      }
      w = d2[i];
      ws = w + "";
      k2 = LOG_BASE - ws.length;
      if (k2) str += getZeroString(k2);
    } else if (w === 0) {
      return "0";
    }
    for (; w % 10 === 0; ) w /= 10;
    return str + w;
  }
  var divide = /* @__PURE__ */ function() {
    function multiplyInteger(x2, k2) {
      var temp, carry = 0, i = x2.length;
      for (x2 = x2.slice(); i--; ) {
        temp = x2[i] * k2 + carry;
        x2[i] = temp % BASE | 0;
        carry = temp / BASE | 0;
      }
      if (carry) x2.unshift(carry);
      return x2;
    }
    function compare(a2, b2, aL, bL) {
      var i, r;
      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a2[i] != b2[i]) {
            r = a2[i] > b2[i] ? 1 : -1;
            break;
          }
        }
      }
      return r;
    }
    function subtract2(a2, b2, aL) {
      var i = 0;
      for (; aL--; ) {
        a2[aL] -= i;
        i = a2[aL] < b2[aL] ? 1 : 0;
        a2[aL] = i * BASE + a2[aL] - b2[aL];
      }
      for (; !a2[0] && a2.length > 1; ) a2.shift();
    }
    return function(x2, y2, pr, dp) {
      var cmp, e3, i, k2, prod, prodL, q2, qd, rem, remL, rem0, sd, t2, xi, xL, yd0, yL, yz, Ctor = x2.constructor, sign2 = x2.s == y2.s ? 1 : -1, xd = x2.d, yd = y2.d;
      if (!x2.s) return new Ctor(x2);
      if (!y2.s) throw Error(decimalError + "Division by zero");
      e3 = x2.e - y2.e;
      yL = yd.length;
      xL = xd.length;
      q2 = new Ctor(sign2);
      qd = q2.d = [];
      for (i = 0; yd[i] == (xd[i] || 0); ) ++i;
      if (yd[i] > (xd[i] || 0)) --e3;
      if (pr == null) {
        sd = pr = Ctor.precision;
      } else if (dp) {
        sd = pr + (getBase10Exponent(x2) - getBase10Exponent(y2)) + 1;
      } else {
        sd = pr;
      }
      if (sd < 0) return new Ctor(0);
      sd = sd / LOG_BASE + 2 | 0;
      i = 0;
      if (yL == 1) {
        k2 = 0;
        yd = yd[0];
        sd++;
        for (; (i < xL || k2) && sd--; i++) {
          t2 = k2 * BASE + (xd[i] || 0);
          qd[i] = t2 / yd | 0;
          k2 = t2 % yd | 0;
        }
      } else {
        k2 = BASE / (yd[0] + 1) | 0;
        if (k2 > 1) {
          yd = multiplyInteger(yd, k2);
          xd = multiplyInteger(xd, k2);
          yL = yd.length;
          xL = xd.length;
        }
        xi = yL;
        rem = xd.slice(0, yL);
        remL = rem.length;
        for (; remL < yL; ) rem[remL++] = 0;
        yz = yd.slice();
        yz.unshift(0);
        yd0 = yd[0];
        if (yd[1] >= BASE / 2) ++yd0;
        do {
          k2 = 0;
          cmp = compare(yd, rem, yL, remL);
          if (cmp < 0) {
            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);
            k2 = rem0 / yd0 | 0;
            if (k2 > 1) {
              if (k2 >= BASE) k2 = BASE - 1;
              prod = multiplyInteger(yd, k2);
              prodL = prod.length;
              remL = rem.length;
              cmp = compare(prod, rem, prodL, remL);
              if (cmp == 1) {
                k2--;
                subtract2(prod, yL < prodL ? yz : yd, prodL);
              }
            } else {
              if (k2 == 0) cmp = k2 = 1;
              prod = yd.slice();
            }
            prodL = prod.length;
            if (prodL < remL) prod.unshift(0);
            subtract2(rem, prod, remL);
            if (cmp == -1) {
              remL = rem.length;
              cmp = compare(yd, rem, yL, remL);
              if (cmp < 1) {
                k2++;
                subtract2(rem, yL < remL ? yz : yd, remL);
              }
            }
            remL = rem.length;
          } else if (cmp === 0) {
            k2++;
            rem = [
              0
            ];
          }
          qd[i++] = k2;
          if (cmp && rem[0]) {
            rem[remL++] = xd[xi] || 0;
          } else {
            rem = [
              xd[xi]
            ];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] !== void 0) && sd--);
      }
      if (!qd[0]) qd.shift();
      q2.e = e3;
      return round(q2, dp ? pr + getBase10Exponent(q2) + 1 : pr);
    };
  }();
  function exp(x2, sd) {
    var denominator, guard, pow2, sum, t2, wpr, i = 0, k2 = 0, Ctor = x2.constructor, pr = Ctor.precision;
    if (getBase10Exponent(x2) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x2));
    if (!x2.s) return new Ctor(ONE);
    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }
    t2 = new Ctor(0.03125);
    while (x2.abs().gte(0.1)) {
      x2 = x2.times(t2);
      k2 += 5;
    }
    guard = Math.log(mathpow(2, k2)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow2 = sum = new Ctor(ONE);
    Ctor.precision = wpr;
    for (; ; ) {
      pow2 = round(pow2.times(x2), wpr);
      denominator = denominator.times(++i);
      t2 = sum.plus(divide(pow2, denominator, wpr));
      if (digitsToString(t2.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        while (k2--) sum = round(sum.times(sum), wpr);
        Ctor.precision = pr;
        return sd == null ? (external = true, round(sum, pr)) : sum;
      }
      sum = t2;
    }
  }
  function getBase10Exponent(x2) {
    var e3 = x2.e * LOG_BASE, w = x2.d[0];
    for (; w >= 10; w /= 10) e3++;
    return e3;
  }
  function getLn10(Ctor, sd, pr) {
    if (sd > Ctor.LN10.sd()) {
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(decimalError + "LN10 precision limit exceeded");
    }
    return round(new Ctor(Ctor.LN10), sd);
  }
  function getZeroString(k2) {
    var zs = "";
    for (; k2--; ) zs += "0";
    return zs;
  }
  function ln(y2, sd) {
    var c2, c0, denominator, e3, numerator, sum, t2, wpr, x2, n2 = 1, guard = 10, x3 = y2, xd = x3.d, Ctor = x3.constructor, pr = Ctor.precision;
    if (x3.s < 1) throw Error(decimalError + (x3.s ? "NaN" : "-Infinity"));
    if (x3.eq(ONE)) return new Ctor(0);
    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }
    if (x3.eq(10)) {
      if (sd == null) external = true;
      return getLn10(Ctor, wpr);
    }
    wpr += guard;
    Ctor.precision = wpr;
    c2 = digitsToString(xd);
    c0 = c2.charAt(0);
    e3 = getBase10Exponent(x3);
    if (Math.abs(e3) < 15e14) {
      while (c0 < 7 && c0 != 1 || c0 == 1 && c2.charAt(1) > 3) {
        x3 = x3.times(y2);
        c2 = digitsToString(x3.d);
        c0 = c2.charAt(0);
        n2++;
      }
      e3 = getBase10Exponent(x3);
      if (c0 > 1) {
        x3 = new Ctor("0." + c2);
        e3++;
      } else {
        x3 = new Ctor(c0 + "." + c2.slice(1));
      }
    } else {
      t2 = getLn10(Ctor, wpr + 2, pr).times(e3 + "");
      x3 = ln(new Ctor(c0 + "." + c2.slice(1)), wpr - guard).plus(t2);
      Ctor.precision = pr;
      return sd == null ? (external = true, round(x3, pr)) : x3;
    }
    sum = numerator = x3 = divide(x3.minus(ONE), x3.plus(ONE), wpr);
    x2 = round(x3.times(x3), wpr);
    denominator = 3;
    for (; ; ) {
      numerator = round(numerator.times(x2), wpr);
      t2 = sum.plus(divide(numerator, new Ctor(denominator), wpr));
      if (digitsToString(t2.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2);
        if (e3 !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e3 + ""));
        sum = divide(sum, new Ctor(n2), wpr);
        Ctor.precision = pr;
        return sd == null ? (external = true, round(sum, pr)) : sum;
      }
      sum = t2;
      denominator += 2;
    }
  }
  function parseDecimal(x2, str) {
    var e3, i, len;
    if ((e3 = str.indexOf(".")) > -1) str = str.replace(".", "");
    if ((i = str.search(/e/i)) > 0) {
      if (e3 < 0) e3 = i;
      e3 += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e3 < 0) {
      e3 = str.length;
    }
    for (i = 0; str.charCodeAt(i) === 48; ) ++i;
    for (len = str.length; str.charCodeAt(len - 1) === 48; ) --len;
    str = str.slice(i, len);
    if (str) {
      len -= i;
      e3 = e3 - i - 1;
      x2.e = mathfloor(e3 / LOG_BASE);
      x2.d = [];
      i = (e3 + 1) % LOG_BASE;
      if (e3 < 0) i += LOG_BASE;
      if (i < len) {
        if (i) x2.d.push(+str.slice(0, i));
        for (len -= LOG_BASE; i < len; ) x2.d.push(+str.slice(i, i += LOG_BASE));
        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }
      for (; i--; ) str += "0";
      x2.d.push(+str);
      if (external && (x2.e > MAX_E || x2.e < -MAX_E)) throw Error(exponentOutOfRange + e3);
    } else {
      x2.s = 0;
      x2.e = 0;
      x2.d = [
        0
      ];
    }
    return x2;
  }
  function round(x2, sd, rm) {
    var i, j2, k2, n2, rd, doRound, w, xdi, xd = x2.d;
    for (n2 = 1, k2 = xd[0]; k2 >= 10; k2 /= 10) n2++;
    i = sd - n2;
    if (i < 0) {
      i += LOG_BASE;
      j2 = sd;
      w = xd[xdi = 0];
    } else {
      xdi = Math.ceil((i + 1) / LOG_BASE);
      k2 = xd.length;
      if (xdi >= k2) return x2;
      w = k2 = xd[xdi];
      for (n2 = 1; k2 >= 10; k2 /= 10) n2++;
      i %= LOG_BASE;
      j2 = i - LOG_BASE + n2;
    }
    if (rm !== void 0) {
      k2 = mathpow(10, n2 - j2 - 1);
      rd = w / k2 % 10 | 0;
      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k2;
      doRound = rm < 4 ? (rd || doRound) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 && (i > 0 ? j2 > 0 ? w / mathpow(10, n2 - j2) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x2.s < 0 ? 8 : 7));
    }
    if (sd < 1 || !xd[0]) {
      if (doRound) {
        k2 = getBase10Exponent(x2);
        xd.length = 1;
        sd = sd - k2 - 1;
        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
        x2.e = mathfloor(-sd / LOG_BASE) || 0;
      } else {
        xd.length = 1;
        xd[0] = x2.e = x2.s = 0;
      }
      return x2;
    }
    if (i == 0) {
      xd.length = xdi;
      k2 = 1;
      xdi--;
    } else {
      xd.length = xdi + 1;
      k2 = mathpow(10, LOG_BASE - i);
      xd[xdi] = j2 > 0 ? (w / mathpow(10, n2 - j2) % mathpow(10, j2) | 0) * k2 : 0;
    }
    if (doRound) {
      for (; ; ) {
        if (xdi == 0) {
          if ((xd[0] += k2) == BASE) {
            xd[0] = 1;
            ++x2.e;
          }
          break;
        } else {
          xd[xdi] += k2;
          if (xd[xdi] != BASE) break;
          xd[xdi--] = 0;
          k2 = 1;
        }
      }
    }
    for (i = xd.length; xd[--i] === 0; ) xd.pop();
    if (external && (x2.e > MAX_E || x2.e < -MAX_E)) {
      throw Error(exponentOutOfRange + getBase10Exponent(x2));
    }
    return x2;
  }
  function subtract(x2, y2) {
    var d2, e3, i, j2, k2, len, xd, xe2, xLTy, yd, Ctor = x2.constructor, pr = Ctor.precision;
    if (!x2.s || !y2.s) {
      if (y2.s) y2.s = -y2.s;
      else y2 = new Ctor(x2);
      return external ? round(y2, pr) : y2;
    }
    xd = x2.d;
    yd = y2.d;
    e3 = y2.e;
    xe2 = x2.e;
    xd = xd.slice();
    k2 = xe2 - e3;
    if (k2) {
      xLTy = k2 < 0;
      if (xLTy) {
        d2 = xd;
        k2 = -k2;
        len = yd.length;
      } else {
        d2 = yd;
        e3 = xe2;
        len = xd.length;
      }
      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
      if (k2 > i) {
        k2 = i;
        d2.length = 1;
      }
      d2.reverse();
      for (i = k2; i--; ) d2.push(0);
      d2.reverse();
    } else {
      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;
      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }
      k2 = 0;
    }
    if (xLTy) {
      d2 = xd;
      xd = yd;
      yd = d2;
      y2.s = -y2.s;
    }
    len = xd.length;
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;
    for (i = yd.length; i > k2; ) {
      if (xd[--i] < yd[i]) {
        for (j2 = i; j2 && xd[--j2] === 0; ) xd[j2] = BASE - 1;
        --xd[j2];
        xd[i] += BASE;
      }
      xd[i] -= yd[i];
    }
    for (; xd[--len] === 0; ) xd.pop();
    for (; xd[0] === 0; xd.shift()) --e3;
    if (!xd[0]) return new Ctor(0);
    y2.d = xd;
    y2.e = e3;
    return external ? round(y2, pr) : y2;
  }
  function toString(x2, isExp, sd) {
    var k2, e3 = getBase10Exponent(x2), str = digitsToString(x2.d), len = str.length;
    if (isExp) {
      if (sd && (k2 = sd - len) > 0) {
        str = str.charAt(0) + "." + str.slice(1) + getZeroString(k2);
      } else if (len > 1) {
        str = str.charAt(0) + "." + str.slice(1);
      }
      str = str + (e3 < 0 ? "e" : "e+") + e3;
    } else if (e3 < 0) {
      str = "0." + getZeroString(-e3 - 1) + str;
      if (sd && (k2 = sd - len) > 0) str += getZeroString(k2);
    } else if (e3 >= len) {
      str += getZeroString(e3 + 1 - len);
      if (sd && (k2 = sd - e3 - 1) > 0) str = str + "." + getZeroString(k2);
    } else {
      if ((k2 = e3 + 1) < len) str = str.slice(0, k2) + "." + str.slice(k2);
      if (sd && (k2 = sd - len) > 0) {
        if (e3 + 1 === len) str += ".";
        str += getZeroString(k2);
      }
    }
    return x2.s < 0 ? "-" + str : str;
  }
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }
  function clone(obj) {
    var i, p2, ps;
    function Decimal2(value) {
      var x2 = this;
      if (!(x2 instanceof Decimal2)) return new Decimal2(value);
      x2.constructor = Decimal2;
      if (value instanceof Decimal2) {
        x2.s = value.s;
        x2.e = value.e;
        x2.d = (value = value.d) ? value.slice() : value;
        return;
      }
      if (typeof value === "number") {
        if (value * 0 !== 0) {
          throw Error(invalidArgument + value);
        }
        if (value > 0) {
          x2.s = 1;
        } else if (value < 0) {
          value = -value;
          x2.s = -1;
        } else {
          x2.s = 0;
          x2.e = 0;
          x2.d = [
            0
          ];
          return;
        }
        if (value === ~~value && value < 1e7) {
          x2.e = 0;
          x2.d = [
            value
          ];
          return;
        }
        return parseDecimal(x2, value.toString());
      } else if (typeof value !== "string") {
        throw Error(invalidArgument + value);
      }
      if (value.charCodeAt(0) === 45) {
        value = value.slice(1);
        x2.s = -1;
      } else {
        x2.s = 1;
      }
      if (isDecimal.test(value)) parseDecimal(x2, value);
      else throw Error(invalidArgument + value);
    }
    Decimal2.prototype = P;
    Decimal2.ROUND_UP = 0;
    Decimal2.ROUND_DOWN = 1;
    Decimal2.ROUND_CEIL = 2;
    Decimal2.ROUND_FLOOR = 3;
    Decimal2.ROUND_HALF_UP = 4;
    Decimal2.ROUND_HALF_DOWN = 5;
    Decimal2.ROUND_HALF_EVEN = 6;
    Decimal2.ROUND_HALF_CEIL = 7;
    Decimal2.ROUND_HALF_FLOOR = 8;
    Decimal2.clone = clone;
    Decimal2.config = Decimal2.set = config;
    if (obj === void 0) obj = {};
    if (obj) {
      ps = [
        "precision",
        "rounding",
        "toExpNeg",
        "toExpPos",
        "LN10"
      ];
      for (i = 0; i < ps.length; ) if (!obj.hasOwnProperty(p2 = ps[i++])) obj[p2] = this[p2];
    }
    Decimal2.config(obj);
    return Decimal2;
  }
  function config(obj) {
    if (!obj || typeof obj !== "object") {
      throw Error(decimalError + "Object expected");
    }
    var i, p2, v2, ps = [
      "precision",
      1,
      MAX_DIGITS,
      "rounding",
      0,
      8,
      "toExpNeg",
      -1 / 0,
      0,
      "toExpPos",
      0,
      1 / 0
    ];
    for (i = 0; i < ps.length; i += 3) {
      if ((v2 = obj[p2 = ps[i]]) !== void 0) {
        if (mathfloor(v2) === v2 && v2 >= ps[i + 1] && v2 <= ps[i + 2]) this[p2] = v2;
        else throw Error(invalidArgument + p2 + ": " + v2);
      }
    }
    if ((v2 = obj[p2 = "LN10"]) !== void 0) {
      if (v2 == Math.LN10) this[p2] = new this(v2);
      else throw Error(invalidArgument + p2 + ": " + v2);
    }
    return this;
  }
  var Decimal = clone(defaults);
  ONE = new Decimal(1);
  const Decimal$1 = Decimal;
  function _toConsumableArray$9(arr) {
    return _arrayWithoutHoles$9(arr) || _iterableToArray$a(arr) || _unsupportedIterableToArray$e(arr) || _nonIterableSpread$9();
  }
  function _nonIterableSpread$9() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$e(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$e(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$e(o, minLen);
  }
  function _iterableToArray$a(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }
  function _arrayWithoutHoles$9(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$e(arr);
  }
  function _arrayLikeToArray$e(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  var identity$1 = function identity2(i) {
    return i;
  };
  var PLACE_HOLDER = {
    "@@functional/placeholder": true
  };
  var isPlaceHolder = function isPlaceHolder2(val) {
    return val === PLACE_HOLDER;
  };
  var curry0 = function curry02(fn) {
    return function _curried() {
      if (arguments.length === 0 || arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? void 0 : arguments[0])) {
        return _curried;
      }
      return fn.apply(void 0, arguments);
    };
  };
  var curryN = function curryN2(n2, fn) {
    if (n2 === 1) {
      return fn;
    }
    return curry0(function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var argsLength = args.filter(function(arg) {
        return arg !== PLACE_HOLDER;
      }).length;
      if (argsLength >= n2) {
        return fn.apply(void 0, args);
      }
      return curryN2(n2 - argsLength, curry0(function() {
        for (var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          restArgs[_key2] = arguments[_key2];
        }
        var newArgs = args.map(function(arg) {
          return isPlaceHolder(arg) ? restArgs.shift() : arg;
        });
        return fn.apply(void 0, _toConsumableArray$9(newArgs).concat(restArgs));
      }));
    });
  };
  var curry = function curry2(fn) {
    return curryN(fn.length, fn);
  };
  var range$2 = function range2(begin, end) {
    var arr = [];
    for (var i = begin; i < end; ++i) {
      arr[i - begin] = i;
    }
    return arr;
  };
  var map = curry(function(fn, arr) {
    if (Array.isArray(arr)) {
      return arr.map(fn);
    }
    return Object.keys(arr).map(function(key) {
      return arr[key];
    }).map(fn);
  });
  var compose = function compose2() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    if (!args.length) {
      return identity$1;
    }
    var fns = args.reverse();
    var firstFn = fns[0];
    var tailsFn = fns.slice(1);
    return function() {
      return tailsFn.reduce(function(res, fn) {
        return fn(res);
      }, firstFn.apply(void 0, arguments));
    };
  };
  var reverse = function reverse2(arr) {
    if (Array.isArray(arr)) {
      return arr.reverse();
    }
    return arr.split("").reverse.join("");
  };
  var memoize = function memoize2(fn) {
    var lastArgs = null;
    var lastResult2 = null;
    return function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      if (lastArgs && args.every(function(val, i) {
        return val === lastArgs[i];
      })) {
        return lastResult2;
      }
      lastArgs = args;
      lastResult2 = fn.apply(void 0, args);
      return lastResult2;
    };
  };
  function getDigitCount(value) {
    var result;
    if (value === 0) {
      result = 1;
    } else {
      result = Math.floor(new Decimal$1(value).abs().log(10).toNumber()) + 1;
    }
    return result;
  }
  function rangeStep(start, end, step) {
    var num = new Decimal$1(start);
    var i = 0;
    var result = [];
    while (num.lt(end) && i < 1e5) {
      result.push(num.toNumber());
      num = num.add(step);
      i++;
    }
    return result;
  }
  var interpolateNumber = curry(function(a2, b2, t2) {
    var newA = +a2;
    var newB = +b2;
    return newA + t2 * (newB - newA);
  });
  var uninterpolateNumber = curry(function(a2, b2, x2) {
    var diff = b2 - +a2;
    diff = diff || Infinity;
    return (x2 - a2) / diff;
  });
  var uninterpolateTruncation = curry(function(a2, b2, x2) {
    var diff = b2 - +a2;
    diff = diff || Infinity;
    return Math.max(0, Math.min(1, (x2 - a2) / diff));
  });
  const Arithmetic = {
    rangeStep,
    getDigitCount,
    interpolateNumber,
    uninterpolateNumber,
    uninterpolateTruncation
  };
  function _toConsumableArray$8(arr) {
    return _arrayWithoutHoles$8(arr) || _iterableToArray$9(arr) || _unsupportedIterableToArray$d(arr) || _nonIterableSpread$8();
  }
  function _nonIterableSpread$8() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArray$9(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }
  function _arrayWithoutHoles$8(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$d(arr);
  }
  function _slicedToArray$7(arr, i) {
    return _arrayWithHoles$8(arr) || _iterableToArrayLimit$7(arr, i) || _unsupportedIterableToArray$d(arr, i) || _nonIterableRest$8();
  }
  function _nonIterableRest$8() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$d(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$d(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$d(o, minLen);
  }
  function _arrayLikeToArray$d(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit$7(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles$8(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function getValidInterval(_ref) {
    var _ref2 = _slicedToArray$7(_ref, 2), min2 = _ref2[0], max2 = _ref2[1];
    var validMin = min2, validMax = max2;
    if (min2 > max2) {
      validMin = max2;
      validMax = min2;
    }
    return [
      validMin,
      validMax
    ];
  }
  function getFormatStep(roughStep, allowDecimals, correctionFactor) {
    if (roughStep.lte(0)) {
      return new Decimal$1(0);
    }
    var digitCount = Arithmetic.getDigitCount(roughStep.toNumber());
    var digitCountValue = new Decimal$1(10).pow(digitCount);
    var stepRatio = roughStep.div(digitCountValue);
    var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;
    var amendStepRatio = new Decimal$1(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);
    var formatStep = amendStepRatio.mul(digitCountValue);
    return allowDecimals ? formatStep : new Decimal$1(Math.ceil(formatStep));
  }
  function getTickOfSingleValue(value, tickCount, allowDecimals) {
    var step = 1;
    var middle = new Decimal$1(value);
    if (!middle.isint() && allowDecimals) {
      var absVal = Math.abs(value);
      if (absVal < 1) {
        step = new Decimal$1(10).pow(Arithmetic.getDigitCount(value) - 1);
        middle = new Decimal$1(Math.floor(middle.div(step).toNumber())).mul(step);
      } else if (absVal > 1) {
        middle = new Decimal$1(Math.floor(value));
      }
    } else if (value === 0) {
      middle = new Decimal$1(Math.floor((tickCount - 1) / 2));
    } else if (!allowDecimals) {
      middle = new Decimal$1(Math.floor(value));
    }
    var middleIndex = Math.floor((tickCount - 1) / 2);
    var fn = compose(map(function(n2) {
      return middle.add(new Decimal$1(n2 - middleIndex).mul(step)).toNumber();
    }), range$2);
    return fn(0, tickCount);
  }
  function calculateStep(min2, max2, tickCount, allowDecimals) {
    var correctionFactor = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    if (!Number.isFinite((max2 - min2) / (tickCount - 1))) {
      return {
        step: new Decimal$1(0),
        tickMin: new Decimal$1(0),
        tickMax: new Decimal$1(0)
      };
    }
    var step = getFormatStep(new Decimal$1(max2).sub(min2).div(tickCount - 1), allowDecimals, correctionFactor);
    var middle;
    if (min2 <= 0 && max2 >= 0) {
      middle = new Decimal$1(0);
    } else {
      middle = new Decimal$1(min2).add(max2).div(2);
      middle = middle.sub(new Decimal$1(middle).mod(step));
    }
    var belowCount = Math.ceil(middle.sub(min2).div(step).toNumber());
    var upCount = Math.ceil(new Decimal$1(max2).sub(middle).div(step).toNumber());
    var scaleCount = belowCount + upCount + 1;
    if (scaleCount > tickCount) {
      return calculateStep(min2, max2, tickCount, allowDecimals, correctionFactor + 1);
    }
    if (scaleCount < tickCount) {
      upCount = max2 > 0 ? upCount + (tickCount - scaleCount) : upCount;
      belowCount = max2 > 0 ? belowCount : belowCount + (tickCount - scaleCount);
    }
    return {
      step,
      tickMin: middle.sub(new Decimal$1(belowCount).mul(step)),
      tickMax: middle.add(new Decimal$1(upCount).mul(step))
    };
  }
  function getNiceTickValuesFn(_ref3) {
    var _ref4 = _slicedToArray$7(_ref3, 2), min2 = _ref4[0], max2 = _ref4[1];
    var tickCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var count = Math.max(tickCount, 2);
    var _getValidInterval = getValidInterval([
      min2,
      max2
    ]), _getValidInterval2 = _slicedToArray$7(_getValidInterval, 2), cormin = _getValidInterval2[0], cormax = _getValidInterval2[1];
    if (cormin === -Infinity || cormax === Infinity) {
      var _values = cormax === Infinity ? [
        cormin
      ].concat(_toConsumableArray$8(range$2(0, tickCount - 1).map(function() {
        return Infinity;
      }))) : [].concat(_toConsumableArray$8(range$2(0, tickCount - 1).map(function() {
        return -Infinity;
      })), [
        cormax
      ]);
      return min2 > max2 ? reverse(_values) : _values;
    }
    if (cormin === cormax) {
      return getTickOfSingleValue(cormin, tickCount, allowDecimals);
    }
    var _calculateStep = calculateStep(cormin, cormax, count, allowDecimals), step = _calculateStep.step, tickMin = _calculateStep.tickMin, tickMax = _calculateStep.tickMax;
    var values = Arithmetic.rangeStep(tickMin, tickMax.add(new Decimal$1(0.1).mul(step)), step);
    return min2 > max2 ? reverse(values) : values;
  }
  function getTickValuesFixedDomainFn(_ref7, tickCount) {
    var _ref8 = _slicedToArray$7(_ref7, 2), min2 = _ref8[0], max2 = _ref8[1];
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var _getValidInterval5 = getValidInterval([
      min2,
      max2
    ]), _getValidInterval6 = _slicedToArray$7(_getValidInterval5, 2), cormin = _getValidInterval6[0], cormax = _getValidInterval6[1];
    if (cormin === -Infinity || cormax === Infinity) {
      return [
        min2,
        max2
      ];
    }
    if (cormin === cormax) {
      return [
        cormin
      ];
    }
    var count = Math.max(tickCount, 2);
    var step = getFormatStep(new Decimal$1(cormax).sub(cormin).div(count - 1), allowDecimals, 0);
    var values = [].concat(_toConsumableArray$8(Arithmetic.rangeStep(new Decimal$1(cormin), new Decimal$1(cormax).sub(new Decimal$1(0.99).mul(step)), step)), [
      cormax
    ]);
    return min2 > max2 ? reverse(values) : values;
  }
  var getNiceTickValues = memoize(getNiceTickValuesFn);
  var getTickValuesFixedDomain = memoize(getTickValuesFixedDomainFn);
  var prefix = "Invariant failed";
  function invariant(condition, message) {
    {
      throw new Error(prefix);
    }
  }
  var _excluded$a = [
    "offset",
    "layout",
    "width",
    "dataKey",
    "data",
    "dataPointFormatter",
    "xAxis",
    "yAxis"
  ];
  function _typeof$v(o) {
    "@babel/helpers - typeof";
    return _typeof$v = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$v(o);
  }
  function _extends$j() {
    _extends$j = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$j.apply(this, arguments);
  }
  function _slicedToArray$6(arr, i) {
    return _arrayWithHoles$7(arr) || _iterableToArrayLimit$6(arr, i) || _unsupportedIterableToArray$c(arr, i) || _nonIterableRest$7();
  }
  function _nonIterableRest$7() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$c(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$c(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$c(o, minLen);
  }
  function _arrayLikeToArray$c(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$6(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$7(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _objectWithoutProperties$a(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$a(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$a(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _classCallCheck$c(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$c(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$u(descriptor.key), descriptor);
    }
  }
  function _createClass$c(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$c(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$9(t2, o, e3) {
    return o = _getPrototypeOf$a(o), _possibleConstructorReturn$a(t2, _isNativeReflectConstruct$a() ? Reflect.construct(o, e3 || [], _getPrototypeOf$a(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$a(self, call) {
    if (call && (_typeof$v(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$a(self);
  }
  function _assertThisInitialized$a(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$a() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t22) {
    }
    return (_isNativeReflectConstruct$a = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$a(o) {
    _getPrototypeOf$a = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$a(o);
  }
  function _inherits$a(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$a(subClass, superClass);
  }
  function _setPrototypeOf$a(o, p2) {
    _setPrototypeOf$a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p22) {
      o2.__proto__ = p22;
      return o2;
    };
    return _setPrototypeOf$a(o, p2);
  }
  function _defineProperty$u(obj, key, value) {
    key = _toPropertyKey$u(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$u(t2) {
    var i = _toPrimitive$u(t2, "string");
    return "symbol" == _typeof$v(i) ? i : i + "";
  }
  function _toPrimitive$u(t2, r) {
    if ("object" != _typeof$v(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$v(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var ErrorBar = function(_React$Component) {
    function ErrorBar2() {
      _classCallCheck$c(this, ErrorBar2);
      return _callSuper$9(this, ErrorBar2, arguments);
    }
    _inherits$a(ErrorBar2, _React$Component);
    return _createClass$c(ErrorBar2, [
      {
        key: "render",
        value: function render() {
          var _this$props = this.props, offset = _this$props.offset, layout = _this$props.layout, width = _this$props.width, dataKey = _this$props.dataKey, data = _this$props.data, dataPointFormatter = _this$props.dataPointFormatter, xAxis = _this$props.xAxis, yAxis = _this$props.yAxis, others = _objectWithoutProperties$a(_this$props, _excluded$a);
          var svgProps = filterProps(others, false);
          !!(this.props.direction === "x" && xAxis.type !== "number") ? invariant() : void 0;
          var errorBars = data.map(function(entry) {
            var _dataPointFormatter = dataPointFormatter(entry, dataKey), x2 = _dataPointFormatter.x, y2 = _dataPointFormatter.y, value = _dataPointFormatter.value, errorVal = _dataPointFormatter.errorVal;
            if (!errorVal) {
              return null;
            }
            var lineCoordinates = [];
            var lowBound, highBound;
            if (Array.isArray(errorVal)) {
              var _errorVal = _slicedToArray$6(errorVal, 2);
              lowBound = _errorVal[0];
              highBound = _errorVal[1];
            } else {
              lowBound = highBound = errorVal;
            }
            if (layout === "vertical") {
              var scale = xAxis.scale;
              var yMid = y2 + offset;
              var yMin = yMid + width;
              var yMax = yMid - width;
              var xMin = scale(value - lowBound);
              var xMax = scale(value + highBound);
              lineCoordinates.push({
                x1: xMax,
                y1: yMin,
                x2: xMax,
                y2: yMax
              });
              lineCoordinates.push({
                x1: xMin,
                y1: yMid,
                x2: xMax,
                y2: yMid
              });
              lineCoordinates.push({
                x1: xMin,
                y1: yMin,
                x2: xMin,
                y2: yMax
              });
            } else if (layout === "horizontal") {
              var _scale = yAxis.scale;
              var xMid = x2 + offset;
              var _xMin = xMid - width;
              var _xMax = xMid + width;
              var _yMin = _scale(value - lowBound);
              var _yMax = _scale(value + highBound);
              lineCoordinates.push({
                x1: _xMin,
                y1: _yMax,
                x2: _xMax,
                y2: _yMax
              });
              lineCoordinates.push({
                x1: xMid,
                y1: _yMin,
                x2: xMid,
                y2: _yMax
              });
              lineCoordinates.push({
                x1: _xMin,
                y1: _yMin,
                x2: _xMax,
                y2: _yMin
              });
            }
            return React.createElement(Layer, _extends$j({
              className: "recharts-errorBar",
              key: "bar-".concat(lineCoordinates.map(function(c2) {
                return "".concat(c2.x1, "-").concat(c2.x2, "-").concat(c2.y1, "-").concat(c2.y2);
              }))
            }, svgProps), lineCoordinates.map(function(coordinates) {
              return React.createElement("line", _extends$j({}, coordinates, {
                key: "line-".concat(coordinates.x1, "-").concat(coordinates.x2, "-").concat(coordinates.y1, "-").concat(coordinates.y2)
              }));
            }));
          });
          return React.createElement(Layer, {
            className: "recharts-errorBars"
          }, errorBars);
        }
      }
    ]);
  }(React.Component);
  _defineProperty$u(ErrorBar, "defaultProps", {
    stroke: "black",
    strokeWidth: 1.5,
    width: 5,
    offset: 0,
    layout: "horizontal"
  });
  _defineProperty$u(ErrorBar, "displayName", "ErrorBar");
  function _typeof$u(o) {
    "@babel/helpers - typeof";
    return _typeof$u = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$u(o);
  }
  function ownKeys$q(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$q(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$q(Object(t2), true).forEach(function(r2) {
        _defineProperty$t(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$q(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$t(obj, key, value) {
    key = _toPropertyKey$t(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$t(t2) {
    var i = _toPrimitive$t(t2, "string");
    return "symbol" == _typeof$u(i) ? i : i + "";
  }
  function _toPrimitive$t(t2, r) {
    if ("object" != _typeof$u(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$u(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var getLegendProps = function getLegendProps2(_ref) {
    var children = _ref.children, formattedGraphicalItems = _ref.formattedGraphicalItems, legendWidth = _ref.legendWidth, legendContent = _ref.legendContent;
    var legendItem = findChildByType(children, Legend);
    if (!legendItem) {
      return null;
    }
    var legendDefaultProps = Legend.defaultProps;
    var legendProps = legendDefaultProps !== void 0 ? _objectSpread$q(_objectSpread$q({}, legendDefaultProps), legendItem.props) : {};
    var legendData;
    if (legendItem.props && legendItem.props.payload) {
      legendData = legendItem.props && legendItem.props.payload;
    } else if (legendContent === "children") {
      legendData = (formattedGraphicalItems || []).reduce(function(result, _ref2) {
        var item = _ref2.item, props = _ref2.props;
        var data = props.sectors || props.data || [];
        return result.concat(data.map(function(entry) {
          return {
            type: legendItem.props.iconType || item.props.legendType,
            value: entry.name,
            color: entry.fill,
            payload: entry
          };
        }));
      }, []);
    } else {
      legendData = (formattedGraphicalItems || []).map(function(_ref3) {
        var item = _ref3.item;
        var itemDefaultProps = item.type.defaultProps;
        var itemProps = itemDefaultProps !== void 0 ? _objectSpread$q(_objectSpread$q({}, itemDefaultProps), item.props) : {};
        var dataKey = itemProps.dataKey, name = itemProps.name, legendType = itemProps.legendType, hide = itemProps.hide;
        return {
          inactive: hide,
          dataKey,
          type: legendProps.iconType || legendType || "square",
          color: getMainColorOfGraphicItem(item),
          value: name || dataKey,
          payload: itemProps
        };
      });
    }
    return _objectSpread$q(_objectSpread$q(_objectSpread$q({}, legendProps), Legend.getWithHeight(legendItem, legendWidth)), {}, {
      payload: legendData,
      item: legendItem
    });
  };
  function _typeof$t(o) {
    "@babel/helpers - typeof";
    return _typeof$t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$t(o);
  }
  function _toConsumableArray$7(arr) {
    return _arrayWithoutHoles$7(arr) || _iterableToArray$8(arr) || _unsupportedIterableToArray$b(arr) || _nonIterableSpread$7();
  }
  function _nonIterableSpread$7() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$b(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$b(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$b(o, minLen);
  }
  function _iterableToArray$8(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles$7(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$b(arr);
  }
  function _arrayLikeToArray$b(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function ownKeys$p(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$p(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$p(Object(t2), true).forEach(function(r2) {
        _defineProperty$s(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$p(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$s(obj, key, value) {
    key = _toPropertyKey$s(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$s(t2) {
    var i = _toPrimitive$s(t2, "string");
    return "symbol" == _typeof$t(i) ? i : i + "";
  }
  function _toPrimitive$s(t2, r) {
    if ("object" != _typeof$t(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$t(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function getValueByDataKey(obj, dataKey, defaultValue) {
    if (isNil$1(obj) || isNil$1(dataKey)) {
      return defaultValue;
    }
    if (isNumOrStr(dataKey)) {
      return get(obj, dataKey, defaultValue);
    }
    if (isFunction(dataKey)) {
      return dataKey(obj);
    }
    return defaultValue;
  }
  function getDomainOfDataByKey(data, key, type, filterNil) {
    var flattenData = flatMap$1(data, function(entry) {
      return getValueByDataKey(entry, key);
    });
    if (type === "number") {
      var domain = flattenData.filter(function(entry) {
        return isNumber(entry) || parseFloat(entry);
      });
      return domain.length ? [
        min$1(domain),
        max$1(domain)
      ] : [
        Infinity,
        -Infinity
      ];
    }
    var validateData = filterNil ? flattenData.filter(function(entry) {
      return !isNil$1(entry);
    }) : flattenData;
    return validateData.map(function(entry) {
      return isNumOrStr(entry) || entry instanceof Date ? entry : "";
    });
  }
  var calculateActiveTickIndex = function calculateActiveTickIndex2(coordinate) {
    var _ticks$length;
    var ticks2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var unsortedTicks = arguments.length > 2 ? arguments[2] : void 0;
    var axis = arguments.length > 3 ? arguments[3] : void 0;
    var index2 = -1;
    var len = (_ticks$length = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2.length) !== null && _ticks$length !== void 0 ? _ticks$length : 0;
    if (len <= 1) {
      return 0;
    }
    if (axis && axis.axisType === "angleAxis" && Math.abs(Math.abs(axis.range[1] - axis.range[0]) - 360) <= 1e-6) {
      var range2 = axis.range;
      for (var i = 0; i < len; i++) {
        var before = i > 0 ? unsortedTicks[i - 1].coordinate : unsortedTicks[len - 1].coordinate;
        var cur = unsortedTicks[i].coordinate;
        var after = i >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i + 1].coordinate;
        var sameDirectionCoord = void 0;
        if (mathSign(cur - before) !== mathSign(after - cur)) {
          var diffInterval = [];
          if (mathSign(after - cur) === mathSign(range2[1] - range2[0])) {
            sameDirectionCoord = after;
            var curInRange = cur + range2[1] - range2[0];
            diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2);
            diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2);
          } else {
            sameDirectionCoord = before;
            var afterInRange = after + range2[1] - range2[0];
            diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2);
            diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2);
          }
          var sameInterval = [
            Math.min(cur, (sameDirectionCoord + cur) / 2),
            Math.max(cur, (sameDirectionCoord + cur) / 2)
          ];
          if (coordinate > sameInterval[0] && coordinate <= sameInterval[1] || coordinate >= diffInterval[0] && coordinate <= diffInterval[1]) {
            index2 = unsortedTicks[i].index;
            break;
          }
        } else {
          var minValue = Math.min(before, after);
          var maxValue = Math.max(before, after);
          if (coordinate > (minValue + cur) / 2 && coordinate <= (maxValue + cur) / 2) {
            index2 = unsortedTicks[i].index;
            break;
          }
        }
      }
    } else {
      for (var _i = 0; _i < len; _i++) {
        if (_i === 0 && coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2 || _i > 0 && _i < len - 1 && coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2 && coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2 || _i === len - 1 && coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2) {
          index2 = ticks2[_i].index;
          break;
        }
      }
    }
    return index2;
  };
  var getMainColorOfGraphicItem = function getMainColorOfGraphicItem2(item) {
    var _item$type;
    var _ref = item, displayName = _ref.type.displayName;
    var defaultedProps = (_item$type = item.type) !== null && _item$type !== void 0 && _item$type.defaultProps ? _objectSpread$p(_objectSpread$p({}, item.type.defaultProps), item.props) : item.props;
    var stroke = defaultedProps.stroke, fill = defaultedProps.fill;
    var result;
    switch (displayName) {
      case "Line":
        result = stroke;
        break;
      case "Area":
      case "Radar":
        result = stroke && stroke !== "none" ? stroke : fill;
        break;
      default:
        result = fill;
        break;
    }
    return result;
  };
  var getBarSizeList = function getBarSizeList2(_ref2) {
    var globalSize = _ref2.barSize, totalSize = _ref2.totalSize, _ref2$stackGroups = _ref2.stackGroups, stackGroups = _ref2$stackGroups === void 0 ? {} : _ref2$stackGroups;
    if (!stackGroups) {
      return {};
    }
    var result = {};
    var numericAxisIds = Object.keys(stackGroups);
    for (var i = 0, len = numericAxisIds.length; i < len; i++) {
      var sgs = stackGroups[numericAxisIds[i]].stackGroups;
      var stackIds = Object.keys(sgs);
      for (var j2 = 0, sLen = stackIds.length; j2 < sLen; j2++) {
        var _sgs$stackIds$j = sgs[stackIds[j2]], items = _sgs$stackIds$j.items, cateAxisId = _sgs$stackIds$j.cateAxisId;
        var barItems = items.filter(function(item) {
          return getDisplayName(item.type).indexOf("Bar") >= 0;
        });
        if (barItems && barItems.length) {
          var barItemDefaultProps = barItems[0].type.defaultProps;
          var barItemProps = barItemDefaultProps !== void 0 ? _objectSpread$p(_objectSpread$p({}, barItemDefaultProps), barItems[0].props) : barItems[0].props;
          var selfSize = barItemProps.barSize;
          var cateId = barItemProps[cateAxisId];
          if (!result[cateId]) {
            result[cateId] = [];
          }
          var barSize = isNil$1(selfSize) ? globalSize : selfSize;
          result[cateId].push({
            item: barItems[0],
            stackList: barItems.slice(1),
            barSize: isNil$1(barSize) ? void 0 : getPercentValue(barSize, totalSize, 0)
          });
        }
      }
    }
    return result;
  };
  var getBarPosition = function getBarPosition2(_ref3) {
    var barGap = _ref3.barGap, barCategoryGap = _ref3.barCategoryGap, bandSize = _ref3.bandSize, _ref3$sizeList = _ref3.sizeList, sizeList = _ref3$sizeList === void 0 ? [] : _ref3$sizeList, maxBarSize = _ref3.maxBarSize;
    var len = sizeList.length;
    if (len < 1) return null;
    var realBarGap = getPercentValue(barGap, bandSize, 0, true);
    var result;
    var initialValue = [];
    if (sizeList[0].barSize === +sizeList[0].barSize) {
      var useFull = false;
      var fullBarSize = bandSize / len;
      var sum = sizeList.reduce(function(res, entry) {
        return res + entry.barSize || 0;
      }, 0);
      sum += (len - 1) * realBarGap;
      if (sum >= bandSize) {
        sum -= (len - 1) * realBarGap;
        realBarGap = 0;
      }
      if (sum >= bandSize && fullBarSize > 0) {
        useFull = true;
        fullBarSize *= 0.9;
        sum = len * fullBarSize;
      }
      var offset = (bandSize - sum) / 2 >> 0;
      var prev = {
        offset: offset - realBarGap,
        size: 0
      };
      result = sizeList.reduce(function(res, entry) {
        var newPosition = {
          item: entry.item,
          position: {
            offset: prev.offset + prev.size + realBarGap,
            size: useFull ? fullBarSize : entry.barSize
          }
        };
        var newRes = [].concat(_toConsumableArray$7(res), [
          newPosition
        ]);
        prev = newRes[newRes.length - 1].position;
        if (entry.stackList && entry.stackList.length) {
          entry.stackList.forEach(function(item) {
            newRes.push({
              item,
              position: prev
            });
          });
        }
        return newRes;
      }, initialValue);
    } else {
      var _offset = getPercentValue(barCategoryGap, bandSize, 0, true);
      if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
        realBarGap = 0;
      }
      var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len;
      if (originalSize > 1) {
        originalSize >>= 0;
      }
      var size = maxBarSize === +maxBarSize ? Math.min(originalSize, maxBarSize) : originalSize;
      result = sizeList.reduce(function(res, entry, i) {
        var newRes = [].concat(_toConsumableArray$7(res), [
          {
            item: entry.item,
            position: {
              offset: _offset + (originalSize + realBarGap) * i + (originalSize - size) / 2,
              size
            }
          }
        ]);
        if (entry.stackList && entry.stackList.length) {
          entry.stackList.forEach(function(item) {
            newRes.push({
              item,
              position: newRes[newRes.length - 1].position
            });
          });
        }
        return newRes;
      }, initialValue);
    }
    return result;
  };
  var appendOffsetOfLegend = function appendOffsetOfLegend2(offset, _unused, props, legendBox) {
    var children = props.children, width = props.width, margin = props.margin;
    var legendWidth = width - (margin.left || 0) - (margin.right || 0);
    var legendProps = getLegendProps({
      children,
      legendWidth
    });
    if (legendProps) {
      var _ref4 = legendBox || {}, boxWidth = _ref4.width, boxHeight = _ref4.height;
      var align = legendProps.align, verticalAlign = legendProps.verticalAlign, layout = legendProps.layout;
      if ((layout === "vertical" || layout === "horizontal" && verticalAlign === "middle") && align !== "center" && isNumber(offset[align])) {
        return _objectSpread$p(_objectSpread$p({}, offset), {}, _defineProperty$s({}, align, offset[align] + (boxWidth || 0)));
      }
      if ((layout === "horizontal" || layout === "vertical" && align === "center") && verticalAlign !== "middle" && isNumber(offset[verticalAlign])) {
        return _objectSpread$p(_objectSpread$p({}, offset), {}, _defineProperty$s({}, verticalAlign, offset[verticalAlign] + (boxHeight || 0)));
      }
    }
    return offset;
  };
  var isErrorBarRelevantForAxis = function isErrorBarRelevantForAxis2(layout, axisType, direction) {
    if (isNil$1(axisType)) {
      return true;
    }
    if (layout === "horizontal") {
      return axisType === "yAxis";
    }
    if (layout === "vertical") {
      return axisType === "xAxis";
    }
    if (direction === "x") {
      return axisType === "xAxis";
    }
    if (direction === "y") {
      return axisType === "yAxis";
    }
    return true;
  };
  var getDomainOfErrorBars = function getDomainOfErrorBars2(data, item, dataKey, layout, axisType) {
    var children = item.props.children;
    var errorBars = findAllByType(children, ErrorBar).filter(function(errorBarChild) {
      return isErrorBarRelevantForAxis(layout, axisType, errorBarChild.props.direction);
    });
    if (errorBars && errorBars.length) {
      var keys2 = errorBars.map(function(errorBarChild) {
        return errorBarChild.props.dataKey;
      });
      return data.reduce(function(result, entry) {
        var entryValue = getValueByDataKey(entry, dataKey);
        if (isNil$1(entryValue)) return result;
        var mainValue = Array.isArray(entryValue) ? [
          min$1(entryValue),
          max$1(entryValue)
        ] : [
          entryValue,
          entryValue
        ];
        var errorDomain = keys2.reduce(function(prevErrorArr, k2) {
          var errorValue = getValueByDataKey(entry, k2, 0);
          var lowerValue = mainValue[0] - Math.abs(Array.isArray(errorValue) ? errorValue[0] : errorValue);
          var upperValue = mainValue[1] + Math.abs(Array.isArray(errorValue) ? errorValue[1] : errorValue);
          return [
            Math.min(lowerValue, prevErrorArr[0]),
            Math.max(upperValue, prevErrorArr[1])
          ];
        }, [
          Infinity,
          -Infinity
        ]);
        return [
          Math.min(errorDomain[0], result[0]),
          Math.max(errorDomain[1], result[1])
        ];
      }, [
        Infinity,
        -Infinity
      ]);
    }
    return null;
  };
  var parseErrorBarsOfAxis = function parseErrorBarsOfAxis2(data, items, dataKey, axisType, layout) {
    var domains = items.map(function(item) {
      return getDomainOfErrorBars(data, item, dataKey, layout, axisType);
    }).filter(function(entry) {
      return !isNil$1(entry);
    });
    if (domains && domains.length) {
      return domains.reduce(function(result, entry) {
        return [
          Math.min(result[0], entry[0]),
          Math.max(result[1], entry[1])
        ];
      }, [
        Infinity,
        -Infinity
      ]);
    }
    return null;
  };
  var getDomainOfItemsWithSameAxis = function getDomainOfItemsWithSameAxis2(data, items, type, layout, filterNil) {
    var domains = items.map(function(item) {
      var dataKey = item.props.dataKey;
      if (type === "number" && dataKey) {
        return getDomainOfErrorBars(data, item, dataKey, layout) || getDomainOfDataByKey(data, dataKey, type, filterNil);
      }
      return getDomainOfDataByKey(data, dataKey, type, filterNil);
    });
    if (type === "number") {
      return domains.reduce(function(result, entry) {
        return [
          Math.min(result[0], entry[0]),
          Math.max(result[1], entry[1])
        ];
      }, [
        Infinity,
        -Infinity
      ]);
    }
    var tag = {};
    return domains.reduce(function(result, entry) {
      for (var i = 0, len = entry.length; i < len; i++) {
        if (!tag[entry[i]]) {
          tag[entry[i]] = true;
          result.push(entry[i]);
        }
      }
      return result;
    }, []);
  };
  var isCategoricalAxis = function isCategoricalAxis2(layout, axisType) {
    return layout === "horizontal" && axisType === "xAxis" || layout === "vertical" && axisType === "yAxis" || layout === "centric" && axisType === "angleAxis" || layout === "radial" && axisType === "radiusAxis";
  };
  var getCoordinatesOfGrid = function getCoordinatesOfGrid2(ticks2, minValue, maxValue, syncWithTicks) {
    if (syncWithTicks) {
      return ticks2.map(function(entry) {
        return entry.coordinate;
      });
    }
    var hasMin, hasMax;
    var values = ticks2.map(function(entry) {
      if (entry.coordinate === minValue) {
        hasMin = true;
      }
      if (entry.coordinate === maxValue) {
        hasMax = true;
      }
      return entry.coordinate;
    });
    if (!hasMin) {
      values.push(minValue);
    }
    if (!hasMax) {
      values.push(maxValue);
    }
    return values;
  };
  var getTicksOfAxis = function getTicksOfAxis2(axis, isGrid, isAll) {
    if (!axis) return null;
    var scale = axis.scale;
    var duplicateDomain = axis.duplicateDomain, type = axis.type, range2 = axis.range;
    var offsetForBand = axis.realScaleType === "scaleBand" ? scale.bandwidth() / 2 : 2;
    var offset = (isGrid || isAll) && type === "category" && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
    offset = axis.axisType === "angleAxis" && (range2 === null || range2 === void 0 ? void 0 : range2.length) >= 2 ? mathSign(range2[0] - range2[1]) * 2 * offset : offset;
    if (isGrid && (axis.ticks || axis.niceTicks)) {
      var result = (axis.ticks || axis.niceTicks).map(function(entry) {
        var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
        return {
          coordinate: scale(scaleContent) + offset,
          value: entry,
          offset
        };
      });
      return result.filter(function(row) {
        return !isNan(row.coordinate);
      });
    }
    if (axis.isCategorical && axis.categoricalDomain) {
      return axis.categoricalDomain.map(function(entry, index2) {
        return {
          coordinate: scale(entry) + offset,
          value: entry,
          index: index2,
          offset
        };
      });
    }
    if (scale.ticks && !isAll) {
      return scale.ticks(axis.tickCount).map(function(entry) {
        return {
          coordinate: scale(entry) + offset,
          value: entry,
          offset
        };
      });
    }
    return scale.domain().map(function(entry, index2) {
      return {
        coordinate: scale(entry) + offset,
        value: duplicateDomain ? duplicateDomain[entry] : entry,
        index: index2,
        offset
      };
    });
  };
  var handlerWeakMap = /* @__PURE__ */ new WeakMap();
  var combineEventHandlers = function combineEventHandlers2(defaultHandler, childHandler) {
    if (typeof childHandler !== "function") {
      return defaultHandler;
    }
    if (!handlerWeakMap.has(defaultHandler)) {
      handlerWeakMap.set(defaultHandler, /* @__PURE__ */ new WeakMap());
    }
    var childWeakMap = handlerWeakMap.get(defaultHandler);
    if (childWeakMap.has(childHandler)) {
      return childWeakMap.get(childHandler);
    }
    var combineHandler = function combineHandler2() {
      defaultHandler.apply(void 0, arguments);
      childHandler.apply(void 0, arguments);
    };
    childWeakMap.set(childHandler, combineHandler);
    return combineHandler;
  };
  var parseScale = function parseScale2(axis, chartType, hasBar) {
    var scale = axis.scale, type = axis.type, layout = axis.layout, axisType = axis.axisType;
    if (scale === "auto") {
      if (layout === "radial" && axisType === "radiusAxis") {
        return {
          scale: band(),
          realScaleType: "band"
        };
      }
      if (layout === "radial" && axisType === "angleAxis") {
        return {
          scale: linear(),
          realScaleType: "linear"
        };
      }
      if (type === "category" && chartType && (chartType.indexOf("LineChart") >= 0 || chartType.indexOf("AreaChart") >= 0 || chartType.indexOf("ComposedChart") >= 0 && !hasBar)) {
        return {
          scale: point(),
          realScaleType: "point"
        };
      }
      if (type === "category") {
        return {
          scale: band(),
          realScaleType: "band"
        };
      }
      return {
        scale: linear(),
        realScaleType: "linear"
      };
    }
    if (isString$1(scale)) {
      var name = "scale".concat(upperFirst$1(scale));
      return {
        scale: (d3Scales[name] || point)(),
        realScaleType: d3Scales[name] ? name : "point"
      };
    }
    return isFunction(scale) ? {
      scale
    } : {
      scale: point(),
      realScaleType: "point"
    };
  };
  var EPS = 1e-4;
  var checkDomainOfScale = function checkDomainOfScale2(scale) {
    var domain = scale.domain();
    if (!domain || domain.length <= 2) {
      return;
    }
    var len = domain.length;
    var range2 = scale.range();
    var minValue = Math.min(range2[0], range2[1]) - EPS;
    var maxValue = Math.max(range2[0], range2[1]) + EPS;
    var first = scale(domain[0]);
    var last2 = scale(domain[len - 1]);
    if (first < minValue || first > maxValue || last2 < minValue || last2 > maxValue) {
      scale.domain([
        domain[0],
        domain[len - 1]
      ]);
    }
  };
  var findPositionOfBar = function findPositionOfBar2(barPosition, child) {
    if (!barPosition) {
      return null;
    }
    for (var i = 0, len = barPosition.length; i < len; i++) {
      if (barPosition[i].item === child) {
        return barPosition[i].position;
      }
    }
    return null;
  };
  var truncateByDomain = function truncateByDomain2(value, domain) {
    if (!domain || domain.length !== 2 || !isNumber(domain[0]) || !isNumber(domain[1])) {
      return value;
    }
    var minValue = Math.min(domain[0], domain[1]);
    var maxValue = Math.max(domain[0], domain[1]);
    var result = [
      value[0],
      value[1]
    ];
    if (!isNumber(value[0]) || value[0] < minValue) {
      result[0] = minValue;
    }
    if (!isNumber(value[1]) || value[1] > maxValue) {
      result[1] = maxValue;
    }
    if (result[0] > maxValue) {
      result[0] = maxValue;
    }
    if (result[1] < minValue) {
      result[1] = minValue;
    }
    return result;
  };
  var offsetSign = function offsetSign2(series) {
    var n2 = series.length;
    if (n2 <= 0) {
      return;
    }
    for (var j2 = 0, m2 = series[0].length; j2 < m2; ++j2) {
      var positive = 0;
      var negative = 0;
      for (var i = 0; i < n2; ++i) {
        var value = isNan(series[i][j2][1]) ? series[i][j2][0] : series[i][j2][1];
        if (value >= 0) {
          series[i][j2][0] = positive;
          series[i][j2][1] = positive + value;
          positive = series[i][j2][1];
        } else {
          series[i][j2][0] = negative;
          series[i][j2][1] = negative + value;
          negative = series[i][j2][1];
        }
      }
    }
  };
  var offsetPositive = function offsetPositive2(series) {
    var n2 = series.length;
    if (n2 <= 0) {
      return;
    }
    for (var j2 = 0, m2 = series[0].length; j2 < m2; ++j2) {
      var positive = 0;
      for (var i = 0; i < n2; ++i) {
        var value = isNan(series[i][j2][1]) ? series[i][j2][0] : series[i][j2][1];
        if (value >= 0) {
          series[i][j2][0] = positive;
          series[i][j2][1] = positive + value;
          positive = series[i][j2][1];
        } else {
          series[i][j2][0] = 0;
          series[i][j2][1] = 0;
        }
      }
    }
  };
  var STACK_OFFSET_MAP = {
    sign: offsetSign,
    expand: stackOffsetExpand,
    none: stackOffsetNone,
    silhouette: stackOffsetSilhouette,
    wiggle: stackOffsetWiggle,
    positive: offsetPositive
  };
  var getStackedData = function getStackedData2(data, stackItems, offsetType) {
    var dataKeys = stackItems.map(function(item) {
      return item.props.dataKey;
    });
    var offsetAccessor = STACK_OFFSET_MAP[offsetType];
    var stack = shapeStack().keys(dataKeys).value(function(d2, key) {
      return +getValueByDataKey(d2, key, 0);
    }).order(stackOrderNone).offset(offsetAccessor);
    return stack(data);
  };
  var getStackGroupsByAxisId = function getStackGroupsByAxisId2(data, _items, numericAxisId, cateAxisId, offsetType, reverseStackOrder) {
    if (!data) {
      return null;
    }
    var items = reverseStackOrder ? _items.reverse() : _items;
    var parentStackGroupsInitialValue = {};
    var stackGroups = items.reduce(function(result, item) {
      var _item$type2;
      var defaultedProps = (_item$type2 = item.type) !== null && _item$type2 !== void 0 && _item$type2.defaultProps ? _objectSpread$p(_objectSpread$p({}, item.type.defaultProps), item.props) : item.props;
      var stackId = defaultedProps.stackId, hide = defaultedProps.hide;
      if (hide) {
        return result;
      }
      var axisId = defaultedProps[numericAxisId];
      var parentGroup = result[axisId] || {
        hasStack: false,
        stackGroups: {}
      };
      if (isNumOrStr(stackId)) {
        var childGroup = parentGroup.stackGroups[stackId] || {
          numericAxisId,
          cateAxisId,
          items: []
        };
        childGroup.items.push(item);
        parentGroup.hasStack = true;
        parentGroup.stackGroups[stackId] = childGroup;
      } else {
        parentGroup.stackGroups[uniqueId("_stackId_")] = {
          numericAxisId,
          cateAxisId,
          items: [
            item
          ]
        };
      }
      return _objectSpread$p(_objectSpread$p({}, result), {}, _defineProperty$s({}, axisId, parentGroup));
    }, parentStackGroupsInitialValue);
    var axisStackGroupsInitialValue = {};
    return Object.keys(stackGroups).reduce(function(result, axisId) {
      var group = stackGroups[axisId];
      if (group.hasStack) {
        var stackGroupsInitialValue = {};
        group.stackGroups = Object.keys(group.stackGroups).reduce(function(res, stackId) {
          var g2 = group.stackGroups[stackId];
          return _objectSpread$p(_objectSpread$p({}, res), {}, _defineProperty$s({}, stackId, {
            numericAxisId,
            cateAxisId,
            items: g2.items,
            stackedData: getStackedData(data, g2.items, offsetType)
          }));
        }, stackGroupsInitialValue);
      }
      return _objectSpread$p(_objectSpread$p({}, result), {}, _defineProperty$s({}, axisId, group));
    }, axisStackGroupsInitialValue);
  };
  var getTicksOfScale = function getTicksOfScale2(scale, opts) {
    var realScaleType = opts.realScaleType, type = opts.type, tickCount = opts.tickCount, originalDomain = opts.originalDomain, allowDecimals = opts.allowDecimals;
    var scaleType = realScaleType || opts.scale;
    if (scaleType !== "auto" && scaleType !== "linear") {
      return null;
    }
    if (tickCount && type === "number" && originalDomain && (originalDomain[0] === "auto" || originalDomain[1] === "auto")) {
      var domain = scale.domain();
      if (!domain.length) {
        return null;
      }
      var tickValues = getNiceTickValues(domain, tickCount, allowDecimals);
      scale.domain([
        min$1(tickValues),
        max$1(tickValues)
      ]);
      return {
        niceTicks: tickValues
      };
    }
    if (tickCount && type === "number") {
      var _domain = scale.domain();
      var _tickValues = getTickValuesFixedDomain(_domain, tickCount, allowDecimals);
      return {
        niceTicks: _tickValues
      };
    }
    return null;
  };
  var getCateCoordinateOfBar = function getCateCoordinateOfBar2(_ref6) {
    var axis = _ref6.axis, ticks2 = _ref6.ticks, offset = _ref6.offset, bandSize = _ref6.bandSize, entry = _ref6.entry, index2 = _ref6.index;
    if (axis.type === "category") {
      return ticks2[index2] ? ticks2[index2].coordinate + offset : null;
    }
    var value = getValueByDataKey(entry, axis.dataKey, axis.domain[index2]);
    return !isNil$1(value) ? axis.scale(value) - bandSize / 2 + offset : null;
  };
  var getBaseValueOfBar = function getBaseValueOfBar2(_ref7) {
    var numericAxis = _ref7.numericAxis;
    var domain = numericAxis.scale.domain();
    if (numericAxis.type === "number") {
      var minValue = Math.min(domain[0], domain[1]);
      var maxValue = Math.max(domain[0], domain[1]);
      if (minValue <= 0 && maxValue >= 0) {
        return 0;
      }
      if (maxValue < 0) {
        return maxValue;
      }
      return minValue;
    }
    return domain[0];
  };
  var getStackedDataOfItem = function getStackedDataOfItem2(item, stackGroups) {
    var _item$type3;
    var defaultedProps = (_item$type3 = item.type) !== null && _item$type3 !== void 0 && _item$type3.defaultProps ? _objectSpread$p(_objectSpread$p({}, item.type.defaultProps), item.props) : item.props;
    var stackId = defaultedProps.stackId;
    if (isNumOrStr(stackId)) {
      var group = stackGroups[stackId];
      if (group) {
        var itemIndex = group.items.indexOf(item);
        return itemIndex >= 0 ? group.stackedData[itemIndex] : null;
      }
    }
    return null;
  };
  var getDomainOfSingle = function getDomainOfSingle2(data) {
    return data.reduce(function(result, entry) {
      return [
        min$1(entry.concat([
          result[0]
        ]).filter(isNumber)),
        max$1(entry.concat([
          result[1]
        ]).filter(isNumber))
      ];
    }, [
      Infinity,
      -Infinity
    ]);
  };
  var getDomainOfStackGroups = function getDomainOfStackGroups2(stackGroups, startIndex, endIndex) {
    return Object.keys(stackGroups).reduce(function(result, stackId) {
      var group = stackGroups[stackId];
      var stackedData = group.stackedData;
      var domain = stackedData.reduce(function(res, entry) {
        var s2 = getDomainOfSingle(entry.slice(startIndex, endIndex + 1));
        return [
          Math.min(res[0], s2[0]),
          Math.max(res[1], s2[1])
        ];
      }, [
        Infinity,
        -Infinity
      ]);
      return [
        Math.min(domain[0], result[0]),
        Math.max(domain[1], result[1])
      ];
    }, [
      Infinity,
      -Infinity
    ]).map(function(result) {
      return result === Infinity || result === -Infinity ? 0 : result;
    });
  };
  var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
  var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
  var parseSpecifiedDomain = function parseSpecifiedDomain2(specifiedDomain, dataDomain, allowDataOverflow) {
    if (isFunction(specifiedDomain)) {
      return specifiedDomain(dataDomain, allowDataOverflow);
    }
    if (!Array.isArray(specifiedDomain)) {
      return dataDomain;
    }
    var domain = [];
    if (isNumber(specifiedDomain[0])) {
      domain[0] = allowDataOverflow ? specifiedDomain[0] : Math.min(specifiedDomain[0], dataDomain[0]);
    } else if (MIN_VALUE_REG.test(specifiedDomain[0])) {
      var value = +MIN_VALUE_REG.exec(specifiedDomain[0])[1];
      domain[0] = dataDomain[0] - value;
    } else if (isFunction(specifiedDomain[0])) {
      domain[0] = specifiedDomain[0](dataDomain[0]);
    } else {
      domain[0] = dataDomain[0];
    }
    if (isNumber(specifiedDomain[1])) {
      domain[1] = allowDataOverflow ? specifiedDomain[1] : Math.max(specifiedDomain[1], dataDomain[1]);
    } else if (MAX_VALUE_REG.test(specifiedDomain[1])) {
      var _value = +MAX_VALUE_REG.exec(specifiedDomain[1])[1];
      domain[1] = dataDomain[1] + _value;
    } else if (isFunction(specifiedDomain[1])) {
      domain[1] = specifiedDomain[1](dataDomain[1]);
    } else {
      domain[1] = dataDomain[1];
    }
    return domain;
  };
  var getBandSizeOfAxis = function getBandSizeOfAxis2(axis, ticks2, isBar) {
    if (axis && axis.scale && axis.scale.bandwidth) {
      var bandWidth = axis.scale.bandwidth();
      if (!isBar || bandWidth > 0) {
        return bandWidth;
      }
    }
    if (axis && ticks2 && ticks2.length >= 2) {
      var orderedTicks = sortBy$1(ticks2, function(o) {
        return o.coordinate;
      });
      var bandSize = Infinity;
      for (var i = 1, len = orderedTicks.length; i < len; i++) {
        var cur = orderedTicks[i];
        var prev = orderedTicks[i - 1];
        bandSize = Math.min((cur.coordinate || 0) - (prev.coordinate || 0), bandSize);
      }
      return bandSize === Infinity ? 0 : bandSize;
    }
    return isBar ? void 0 : 0;
  };
  var parseDomainOfCategoryAxis = function parseDomainOfCategoryAxis2(specifiedDomain, calculatedDomain, axisChild) {
    if (!specifiedDomain || !specifiedDomain.length) {
      return calculatedDomain;
    }
    if (isEqual$1(specifiedDomain, get(axisChild, "type.defaultProps.domain"))) {
      return calculatedDomain;
    }
    return specifiedDomain;
  };
  var getTooltipItem = function getTooltipItem2(graphicalItem, payload) {
    var defaultedProps = graphicalItem.type.defaultProps ? _objectSpread$p(_objectSpread$p({}, graphicalItem.type.defaultProps), graphicalItem.props) : graphicalItem.props;
    var dataKey = defaultedProps.dataKey, name = defaultedProps.name, unit2 = defaultedProps.unit, formatter = defaultedProps.formatter, tooltipType = defaultedProps.tooltipType, chartType = defaultedProps.chartType, hide = defaultedProps.hide;
    return _objectSpread$p(_objectSpread$p({}, filterProps(graphicalItem, false)), {}, {
      dataKey,
      unit: unit2,
      formatter,
      name: name || dataKey,
      color: getMainColorOfGraphicItem(graphicalItem),
      value: getValueByDataKey(payload, dataKey),
      type: tooltipType,
      payload,
      chartType,
      hide
    });
  };
  function _typeof$s(o) {
    "@babel/helpers - typeof";
    return _typeof$s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$s(o);
  }
  function ownKeys$o(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$o(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$o(Object(t2), true).forEach(function(r2) {
        _defineProperty$r(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$o(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$r(obj, key, value) {
    key = _toPropertyKey$r(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$r(t2) {
    var i = _toPrimitive$r(t2, "string");
    return "symbol" == _typeof$s(i) ? i : i + "";
  }
  function _toPrimitive$r(t2, r) {
    if ("object" != _typeof$s(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$s(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var RADIAN = Math.PI / 180;
  var radianToDegree = function radianToDegree2(angleInRadian) {
    return angleInRadian * 180 / Math.PI;
  };
  var polarToCartesian = function polarToCartesian2(cx, cy, radius, angle) {
    return {
      x: cx + Math.cos(-RADIAN * angle) * radius,
      y: cy + Math.sin(-RADIAN * angle) * radius
    };
  };
  var distanceBetweenPoints = function distanceBetweenPoints2(point2, anotherPoint) {
    var x1 = point2.x, y1 = point2.y;
    var x2 = anotherPoint.x, y2 = anotherPoint.y;
    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
  };
  var getAngleOfPoint = function getAngleOfPoint2(_ref, _ref2) {
    var x2 = _ref.x, y2 = _ref.y;
    var cx = _ref2.cx, cy = _ref2.cy;
    var radius = distanceBetweenPoints({
      x: x2,
      y: y2
    }, {
      x: cx,
      y: cy
    });
    if (radius <= 0) {
      return {
        radius
      };
    }
    var cos2 = (x2 - cx) / radius;
    var angleInRadian = Math.acos(cos2);
    if (y2 > cy) {
      angleInRadian = 2 * Math.PI - angleInRadian;
    }
    return {
      radius,
      angle: radianToDegree(angleInRadian),
      angleInRadian
    };
  };
  var formatAngleOfSector = function formatAngleOfSector2(_ref3) {
    var startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
    var startCnt = Math.floor(startAngle / 360);
    var endCnt = Math.floor(endAngle / 360);
    var min2 = Math.min(startCnt, endCnt);
    return {
      startAngle: startAngle - min2 * 360,
      endAngle: endAngle - min2 * 360
    };
  };
  var reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor2(angle, _ref4) {
    var startAngle = _ref4.startAngle, endAngle = _ref4.endAngle;
    var startCnt = Math.floor(startAngle / 360);
    var endCnt = Math.floor(endAngle / 360);
    var min2 = Math.min(startCnt, endCnt);
    return angle + min2 * 360;
  };
  var inRangeOfSector = function inRangeOfSector2(_ref5, sector) {
    var x2 = _ref5.x, y2 = _ref5.y;
    var _getAngleOfPoint = getAngleOfPoint({
      x: x2,
      y: y2
    }, sector), radius = _getAngleOfPoint.radius, angle = _getAngleOfPoint.angle;
    var innerRadius = sector.innerRadius, outerRadius = sector.outerRadius;
    if (radius < innerRadius || radius > outerRadius) {
      return false;
    }
    if (radius === 0) {
      return true;
    }
    var _formatAngleOfSector = formatAngleOfSector(sector), startAngle = _formatAngleOfSector.startAngle, endAngle = _formatAngleOfSector.endAngle;
    var formatAngle = angle;
    var inRange;
    if (startAngle <= endAngle) {
      while (formatAngle > endAngle) {
        formatAngle -= 360;
      }
      while (formatAngle < startAngle) {
        formatAngle += 360;
      }
      inRange = formatAngle >= startAngle && formatAngle <= endAngle;
    } else {
      while (formatAngle > startAngle) {
        formatAngle -= 360;
      }
      while (formatAngle < endAngle) {
        formatAngle += 360;
      }
      inRange = formatAngle >= endAngle && formatAngle <= startAngle;
    }
    if (inRange) {
      return _objectSpread$o(_objectSpread$o({}, sector), {}, {
        radius,
        angle: reverseFormatAngleOfSetor(formatAngle, sector)
      });
    }
    return null;
  };
  function _typeof$r(o) {
    "@babel/helpers - typeof";
    return _typeof$r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$r(o);
  }
  var _excluded$9 = [
    "offset"
  ];
  function _toConsumableArray$6(arr) {
    return _arrayWithoutHoles$6(arr) || _iterableToArray$7(arr) || _unsupportedIterableToArray$a(arr) || _nonIterableSpread$6();
  }
  function _nonIterableSpread$6() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$a(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$a(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$a(o, minLen);
  }
  function _iterableToArray$7(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles$6(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$a(arr);
  }
  function _arrayLikeToArray$a(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _objectWithoutProperties$9(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$9(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$9(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function ownKeys$n(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$n(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$n(Object(t2), true).forEach(function(r2) {
        _defineProperty$q(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$n(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$q(obj, key, value) {
    key = _toPropertyKey$q(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$q(t2) {
    var i = _toPrimitive$q(t2, "string");
    return "symbol" == _typeof$r(i) ? i : i + "";
  }
  function _toPrimitive$q(t2, r) {
    if ("object" != _typeof$r(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$r(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _extends$i() {
    _extends$i = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$i.apply(this, arguments);
  }
  var getLabel = function getLabel2(props) {
    var value = props.value, formatter = props.formatter;
    var label = isNil$1(props.children) ? value : props.children;
    if (isFunction(formatter)) {
      return formatter(label);
    }
    return label;
  };
  var getDeltaAngle$1 = function getDeltaAngle2(startAngle, endAngle) {
    var sign2 = mathSign(endAngle - startAngle);
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
    return sign2 * deltaAngle;
  };
  var renderRadialLabel = function renderRadialLabel2(labelProps, label, attrs) {
    var position = labelProps.position, viewBox = labelProps.viewBox, offset = labelProps.offset, className = labelProps.className;
    var _ref = viewBox, cx = _ref.cx, cy = _ref.cy, innerRadius = _ref.innerRadius, outerRadius = _ref.outerRadius, startAngle = _ref.startAngle, endAngle = _ref.endAngle, clockWise = _ref.clockWise;
    var radius = (innerRadius + outerRadius) / 2;
    var deltaAngle = getDeltaAngle$1(startAngle, endAngle);
    var sign2 = deltaAngle >= 0 ? 1 : -1;
    var labelAngle, direction;
    if (position === "insideStart") {
      labelAngle = startAngle + sign2 * offset;
      direction = clockWise;
    } else if (position === "insideEnd") {
      labelAngle = endAngle - sign2 * offset;
      direction = !clockWise;
    } else if (position === "end") {
      labelAngle = endAngle + sign2 * offset;
      direction = clockWise;
    }
    direction = deltaAngle <= 0 ? direction : !direction;
    var startPoint = polarToCartesian(cx, cy, radius, labelAngle);
    var endPoint = polarToCartesian(cx, cy, radius, labelAngle + (direction ? 1 : -1) * 359);
    var path = "M".concat(startPoint.x, ",").concat(startPoint.y, "\n    A").concat(radius, ",").concat(radius, ",0,1,").concat(direction ? 0 : 1, ",\n    ").concat(endPoint.x, ",").concat(endPoint.y);
    var id = isNil$1(labelProps.id) ? uniqueId("recharts-radial-line-") : labelProps.id;
    return React.createElement("text", _extends$i({}, attrs, {
      dominantBaseline: "central",
      className: clsx("recharts-radial-bar-label", className)
    }), React.createElement("defs", null, React.createElement("path", {
      id,
      d: path
    })), React.createElement("textPath", {
      xlinkHref: "#".concat(id)
    }, label));
  };
  var getAttrsOfPolarLabel = function getAttrsOfPolarLabel2(props) {
    var viewBox = props.viewBox, offset = props.offset, position = props.position;
    var _ref2 = viewBox, cx = _ref2.cx, cy = _ref2.cy, innerRadius = _ref2.innerRadius, outerRadius = _ref2.outerRadius, startAngle = _ref2.startAngle, endAngle = _ref2.endAngle;
    var midAngle = (startAngle + endAngle) / 2;
    if (position === "outside") {
      var _polarToCartesian = polarToCartesian(cx, cy, outerRadius + offset, midAngle), _x = _polarToCartesian.x, _y = _polarToCartesian.y;
      return {
        x: _x,
        y: _y,
        textAnchor: _x >= cx ? "start" : "end",
        verticalAnchor: "middle"
      };
    }
    if (position === "center") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "middle"
      };
    }
    if (position === "centerTop") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "start"
      };
    }
    if (position === "centerBottom") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "end"
      };
    }
    var r = (innerRadius + outerRadius) / 2;
    var _polarToCartesian2 = polarToCartesian(cx, cy, r, midAngle), x2 = _polarToCartesian2.x, y2 = _polarToCartesian2.y;
    return {
      x: x2,
      y: y2,
      textAnchor: "middle",
      verticalAnchor: "middle"
    };
  };
  var getAttrsOfCartesianLabel = function getAttrsOfCartesianLabel2(props) {
    var viewBox = props.viewBox, parentViewBox = props.parentViewBox, offset = props.offset, position = props.position;
    var _ref3 = viewBox, x2 = _ref3.x, y2 = _ref3.y, width = _ref3.width, height = _ref3.height;
    var verticalSign = height >= 0 ? 1 : -1;
    var verticalOffset = verticalSign * offset;
    var verticalEnd = verticalSign > 0 ? "end" : "start";
    var verticalStart = verticalSign > 0 ? "start" : "end";
    var horizontalSign = width >= 0 ? 1 : -1;
    var horizontalOffset = horizontalSign * offset;
    var horizontalEnd = horizontalSign > 0 ? "end" : "start";
    var horizontalStart = horizontalSign > 0 ? "start" : "end";
    if (position === "top") {
      var attrs = {
        x: x2 + width / 2,
        y: y2 - verticalSign * offset,
        textAnchor: "middle",
        verticalAnchor: verticalEnd
      };
      return _objectSpread$n(_objectSpread$n({}, attrs), parentViewBox ? {
        height: Math.max(y2 - parentViewBox.y, 0),
        width
      } : {});
    }
    if (position === "bottom") {
      var _attrs = {
        x: x2 + width / 2,
        y: y2 + height + verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalStart
      };
      return _objectSpread$n(_objectSpread$n({}, _attrs), parentViewBox ? {
        height: Math.max(parentViewBox.y + parentViewBox.height - (y2 + height), 0),
        width
      } : {});
    }
    if (position === "left") {
      var _attrs2 = {
        x: x2 - horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalEnd,
        verticalAnchor: "middle"
      };
      return _objectSpread$n(_objectSpread$n({}, _attrs2), parentViewBox ? {
        width: Math.max(_attrs2.x - parentViewBox.x, 0),
        height
      } : {});
    }
    if (position === "right") {
      var _attrs3 = {
        x: x2 + width + horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalStart,
        verticalAnchor: "middle"
      };
      return _objectSpread$n(_objectSpread$n({}, _attrs3), parentViewBox ? {
        width: Math.max(parentViewBox.x + parentViewBox.width - _attrs3.x, 0),
        height
      } : {});
    }
    var sizeAttrs = parentViewBox ? {
      width,
      height
    } : {};
    if (position === "insideLeft") {
      return _objectSpread$n({
        x: x2 + horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalStart,
        verticalAnchor: "middle"
      }, sizeAttrs);
    }
    if (position === "insideRight") {
      return _objectSpread$n({
        x: x2 + width - horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalEnd,
        verticalAnchor: "middle"
      }, sizeAttrs);
    }
    if (position === "insideTop") {
      return _objectSpread$n({
        x: x2 + width / 2,
        y: y2 + verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideBottom") {
      return _objectSpread$n({
        x: x2 + width / 2,
        y: y2 + height - verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (position === "insideTopLeft") {
      return _objectSpread$n({
        x: x2 + horizontalOffset,
        y: y2 + verticalOffset,
        textAnchor: horizontalStart,
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideTopRight") {
      return _objectSpread$n({
        x: x2 + width - horizontalOffset,
        y: y2 + verticalOffset,
        textAnchor: horizontalEnd,
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideBottomLeft") {
      return _objectSpread$n({
        x: x2 + horizontalOffset,
        y: y2 + height - verticalOffset,
        textAnchor: horizontalStart,
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (position === "insideBottomRight") {
      return _objectSpread$n({
        x: x2 + width - horizontalOffset,
        y: y2 + height - verticalOffset,
        textAnchor: horizontalEnd,
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (isObject$4(position) && (isNumber(position.x) || isPercent(position.x)) && (isNumber(position.y) || isPercent(position.y))) {
      return _objectSpread$n({
        x: x2 + getPercentValue(position.x, width),
        y: y2 + getPercentValue(position.y, height),
        textAnchor: "end",
        verticalAnchor: "end"
      }, sizeAttrs);
    }
    return _objectSpread$n({
      x: x2 + width / 2,
      y: y2 + height / 2,
      textAnchor: "middle",
      verticalAnchor: "middle"
    }, sizeAttrs);
  };
  var isPolar = function isPolar2(viewBox) {
    return "cx" in viewBox && isNumber(viewBox.cx);
  };
  function Label(_ref4) {
    var _ref4$offset = _ref4.offset, offset = _ref4$offset === void 0 ? 5 : _ref4$offset, restProps = _objectWithoutProperties$9(_ref4, _excluded$9);
    var props = _objectSpread$n({
      offset
    }, restProps);
    var viewBox = props.viewBox, position = props.position, value = props.value, children = props.children, content = props.content, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, textBreakAll = props.textBreakAll;
    if (!viewBox || isNil$1(value) && isNil$1(children) && !reactExports.isValidElement(content) && !isFunction(content)) {
      return null;
    }
    if (reactExports.isValidElement(content)) {
      return reactExports.cloneElement(content, props);
    }
    var label;
    if (isFunction(content)) {
      label = reactExports.createElement(content, props);
      if (reactExports.isValidElement(label)) {
        return label;
      }
    } else {
      label = getLabel(props);
    }
    var isPolarLabel = isPolar(viewBox);
    var attrs = filterProps(props, true);
    if (isPolarLabel && (position === "insideStart" || position === "insideEnd" || position === "end")) {
      return renderRadialLabel(props, label, attrs);
    }
    var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(props) : getAttrsOfCartesianLabel(props);
    return React.createElement(Text, _extends$i({
      className: clsx("recharts-label", className)
    }, attrs, positionAttrs, {
      breakAll: textBreakAll
    }), label);
  }
  Label.displayName = "Label";
  var parseViewBox = function parseViewBox2(props) {
    var cx = props.cx, cy = props.cy, angle = props.angle, startAngle = props.startAngle, endAngle = props.endAngle, r = props.r, radius = props.radius, innerRadius = props.innerRadius, outerRadius = props.outerRadius, x2 = props.x, y2 = props.y, top = props.top, left = props.left, width = props.width, height = props.height, clockWise = props.clockWise, labelViewBox = props.labelViewBox;
    if (labelViewBox) {
      return labelViewBox;
    }
    if (isNumber(width) && isNumber(height)) {
      if (isNumber(x2) && isNumber(y2)) {
        return {
          x: x2,
          y: y2,
          width,
          height
        };
      }
      if (isNumber(top) && isNumber(left)) {
        return {
          x: top,
          y: left,
          width,
          height
        };
      }
    }
    if (isNumber(x2) && isNumber(y2)) {
      return {
        x: x2,
        y: y2,
        width: 0,
        height: 0
      };
    }
    if (isNumber(cx) && isNumber(cy)) {
      return {
        cx,
        cy,
        startAngle: startAngle || angle || 0,
        endAngle: endAngle || angle || 0,
        innerRadius: innerRadius || 0,
        outerRadius: outerRadius || radius || r || 0,
        clockWise
      };
    }
    if (props.viewBox) {
      return props.viewBox;
    }
    return {};
  };
  var parseLabel = function parseLabel2(label, viewBox) {
    if (!label) {
      return null;
    }
    if (label === true) {
      return React.createElement(Label, {
        key: "label-implicit",
        viewBox
      });
    }
    if (isNumOrStr(label)) {
      return React.createElement(Label, {
        key: "label-implicit",
        viewBox,
        value: label
      });
    }
    if (reactExports.isValidElement(label)) {
      if (label.type === Label) {
        return reactExports.cloneElement(label, {
          key: "label-implicit",
          viewBox
        });
      }
      return React.createElement(Label, {
        key: "label-implicit",
        content: label,
        viewBox
      });
    }
    if (isFunction(label)) {
      return React.createElement(Label, {
        key: "label-implicit",
        content: label,
        viewBox
      });
    }
    if (isObject$4(label)) {
      return React.createElement(Label, _extends$i({
        viewBox
      }, label, {
        key: "label-implicit"
      }));
    }
    return null;
  };
  var renderCallByParent$1 = function renderCallByParent2(parentProps, viewBox) {
    var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
      return null;
    }
    var children = parentProps.children;
    var parentViewBox = parseViewBox(parentProps);
    var explicitChildren = findAllByType(children, Label).map(function(child, index2) {
      return reactExports.cloneElement(child, {
        viewBox: viewBox || parentViewBox,
        key: "label-".concat(index2)
      });
    });
    if (!checkPropsLabel) {
      return explicitChildren;
    }
    var implicitLabel = parseLabel(parentProps.label, viewBox || parentViewBox);
    return [
      implicitLabel
    ].concat(_toConsumableArray$6(explicitChildren));
  };
  Label.parseViewBox = parseViewBox;
  Label.renderCallByParent = renderCallByParent$1;
  function last(array2) {
    var length = array2 == null ? 0 : array2.length;
    return length ? array2[length - 1] : void 0;
  }
  last_1 = last;
  last$1 = getDefaultExportFromCjs(last_1);
  function _typeof$q(o) {
    "@babel/helpers - typeof";
    return _typeof$q = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$q(o);
  }
  var _excluded$8 = [
    "valueAccessor"
  ], _excluded2$3 = [
    "data",
    "dataKey",
    "clockWise",
    "id",
    "textBreakAll"
  ];
  function _toConsumableArray$5(arr) {
    return _arrayWithoutHoles$5(arr) || _iterableToArray$6(arr) || _unsupportedIterableToArray$9(arr) || _nonIterableSpread$5();
  }
  function _nonIterableSpread$5() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$9(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$9(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$9(o, minLen);
  }
  function _iterableToArray$6(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles$5(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$9(arr);
  }
  function _arrayLikeToArray$9(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _extends$h() {
    _extends$h = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$h.apply(this, arguments);
  }
  function ownKeys$m(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$m(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$m(Object(t2), true).forEach(function(r2) {
        _defineProperty$p(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$m(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$p(obj, key, value) {
    key = _toPropertyKey$p(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$p(t2) {
    var i = _toPrimitive$p(t2, "string");
    return "symbol" == _typeof$q(i) ? i : i + "";
  }
  function _toPrimitive$p(t2, r) {
    if ("object" != _typeof$q(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$q(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _objectWithoutProperties$8(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$8(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$8(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var defaultAccessor = function defaultAccessor2(entry) {
    return Array.isArray(entry.value) ? last$1(entry.value) : entry.value;
  };
  function LabelList(_ref) {
    var _ref$valueAccessor = _ref.valueAccessor, valueAccessor = _ref$valueAccessor === void 0 ? defaultAccessor : _ref$valueAccessor, restProps = _objectWithoutProperties$8(_ref, _excluded$8);
    var data = restProps.data, dataKey = restProps.dataKey, clockWise = restProps.clockWise, id = restProps.id, textBreakAll = restProps.textBreakAll, others = _objectWithoutProperties$8(restProps, _excluded2$3);
    if (!data || !data.length) {
      return null;
    }
    return React.createElement(Layer, {
      className: "recharts-label-list"
    }, data.map(function(entry, index2) {
      var value = isNil$1(dataKey) ? valueAccessor(entry, index2) : getValueByDataKey(entry && entry.payload, dataKey);
      var idProps = isNil$1(id) ? {} : {
        id: "".concat(id, "-").concat(index2)
      };
      return React.createElement(Label, _extends$h({}, filterProps(entry, true), others, idProps, {
        parentViewBox: entry.parentViewBox,
        value,
        textBreakAll,
        viewBox: Label.parseViewBox(isNil$1(clockWise) ? entry : _objectSpread$m(_objectSpread$m({}, entry), {}, {
          clockWise
        })),
        key: "label-".concat(index2),
        index: index2
      }));
    }));
  }
  LabelList.displayName = "LabelList";
  function parseLabelList(label, data) {
    if (!label) {
      return null;
    }
    if (label === true) {
      return React.createElement(LabelList, {
        key: "labelList-implicit",
        data
      });
    }
    if (React.isValidElement(label) || isFunction(label)) {
      return React.createElement(LabelList, {
        key: "labelList-implicit",
        data,
        content: label
      });
    }
    if (isObject$4(label)) {
      return React.createElement(LabelList, _extends$h({
        data
      }, label, {
        key: "labelList-implicit"
      }));
    }
    return null;
  }
  function renderCallByParent(parentProps, data) {
    var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
      return null;
    }
    var children = parentProps.children;
    var explicitChildren = findAllByType(children, LabelList).map(function(child, index2) {
      return reactExports.cloneElement(child, {
        data,
        key: "labelList-".concat(index2)
      });
    });
    if (!checkPropsLabel) {
      return explicitChildren;
    }
    var implicitLabelList = parseLabelList(parentProps.label, data);
    return [
      implicitLabelList
    ].concat(_toConsumableArray$5(explicitChildren));
  }
  LabelList.renderCallByParent = renderCallByParent;
  function _typeof$p(o) {
    "@babel/helpers - typeof";
    return _typeof$p = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$p(o);
  }
  function _extends$g() {
    _extends$g = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$g.apply(this, arguments);
  }
  function ownKeys$l(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$l(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$l(Object(t2), true).forEach(function(r2) {
        _defineProperty$o(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$l(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$o(obj, key, value) {
    key = _toPropertyKey$o(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$o(t2) {
    var i = _toPrimitive$o(t2, "string");
    return "symbol" == _typeof$p(i) ? i : i + "";
  }
  function _toPrimitive$o(t2, r) {
    if ("object" != _typeof$p(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$p(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var getDeltaAngle = function getDeltaAngle2(startAngle, endAngle) {
    var sign2 = mathSign(endAngle - startAngle);
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999);
    return sign2 * deltaAngle;
  };
  var getTangentCircle = function getTangentCircle2(_ref) {
    var cx = _ref.cx, cy = _ref.cy, radius = _ref.radius, angle = _ref.angle, sign2 = _ref.sign, isExternal = _ref.isExternal, cornerRadius = _ref.cornerRadius, cornerIsExternal = _ref.cornerIsExternal;
    var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius;
    var theta = Math.asin(cornerRadius / centerRadius) / RADIAN;
    var centerAngle = cornerIsExternal ? angle : angle + sign2 * theta;
    var center = polarToCartesian(cx, cy, centerRadius, centerAngle);
    var circleTangency = polarToCartesian(cx, cy, radius, centerAngle);
    var lineTangencyAngle = cornerIsExternal ? angle - sign2 * theta : angle;
    var lineTangency = polarToCartesian(cx, cy, centerRadius * Math.cos(theta * RADIAN), lineTangencyAngle);
    return {
      center,
      circleTangency,
      lineTangency,
      theta
    };
  };
  var getSectorPath = function getSectorPath2(_ref2) {
    var cx = _ref2.cx, cy = _ref2.cy, innerRadius = _ref2.innerRadius, outerRadius = _ref2.outerRadius, startAngle = _ref2.startAngle, endAngle = _ref2.endAngle;
    var angle = getDeltaAngle(startAngle, endAngle);
    var tempEndAngle = startAngle + angle;
    var outerStartPoint = polarToCartesian(cx, cy, outerRadius, startAngle);
    var outerEndPoint = polarToCartesian(cx, cy, outerRadius, tempEndAngle);
    var path = "M ".concat(outerStartPoint.x, ",").concat(outerStartPoint.y, "\n    A ").concat(outerRadius, ",").concat(outerRadius, ",0,\n    ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle > tempEndAngle), ",\n    ").concat(outerEndPoint.x, ",").concat(outerEndPoint.y, "\n  ");
    if (innerRadius > 0) {
      var innerStartPoint = polarToCartesian(cx, cy, innerRadius, startAngle);
      var innerEndPoint = polarToCartesian(cx, cy, innerRadius, tempEndAngle);
      path += "L ".concat(innerEndPoint.x, ",").concat(innerEndPoint.y, "\n            A ").concat(innerRadius, ",").concat(innerRadius, ",0,\n            ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle <= tempEndAngle), ",\n            ").concat(innerStartPoint.x, ",").concat(innerStartPoint.y, " Z");
    } else {
      path += "L ".concat(cx, ",").concat(cy, " Z");
    }
    return path;
  };
  var getSectorWithCorner = function getSectorWithCorner2(_ref3) {
    var cx = _ref3.cx, cy = _ref3.cy, innerRadius = _ref3.innerRadius, outerRadius = _ref3.outerRadius, cornerRadius = _ref3.cornerRadius, forceCornerRadius = _ref3.forceCornerRadius, cornerIsExternal = _ref3.cornerIsExternal, startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
    var sign2 = mathSign(endAngle - startAngle);
    var _getTangentCircle = getTangentCircle({
      cx,
      cy,
      radius: outerRadius,
      angle: startAngle,
      sign: sign2,
      cornerRadius,
      cornerIsExternal
    }), soct = _getTangentCircle.circleTangency, solt = _getTangentCircle.lineTangency, sot = _getTangentCircle.theta;
    var _getTangentCircle2 = getTangentCircle({
      cx,
      cy,
      radius: outerRadius,
      angle: endAngle,
      sign: -sign2,
      cornerRadius,
      cornerIsExternal
    }), eoct = _getTangentCircle2.circleTangency, eolt = _getTangentCircle2.lineTangency, eot = _getTangentCircle2.theta;
    var outerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sot - eot;
    if (outerArcAngle < 0) {
      if (forceCornerRadius) {
        return "M ".concat(solt.x, ",").concat(solt.y, "\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(cornerRadius * 2, ",0\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(-cornerRadius * 2, ",0\n      ");
      }
      return getSectorPath({
        cx,
        cy,
        innerRadius,
        outerRadius,
        startAngle,
        endAngle
      });
    }
    var path = "M ".concat(solt.x, ",").concat(solt.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(soct.x, ",").concat(soct.y, "\n    A").concat(outerRadius, ",").concat(outerRadius, ",0,").concat(+(outerArcAngle > 180), ",").concat(+(sign2 < 0), ",").concat(eoct.x, ",").concat(eoct.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eolt.x, ",").concat(eolt.y, "\n  ");
    if (innerRadius > 0) {
      var _getTangentCircle3 = getTangentCircle({
        cx,
        cy,
        radius: innerRadius,
        angle: startAngle,
        sign: sign2,
        isExternal: true,
        cornerRadius,
        cornerIsExternal
      }), sict = _getTangentCircle3.circleTangency, silt = _getTangentCircle3.lineTangency, sit = _getTangentCircle3.theta;
      var _getTangentCircle4 = getTangentCircle({
        cx,
        cy,
        radius: innerRadius,
        angle: endAngle,
        sign: -sign2,
        isExternal: true,
        cornerRadius,
        cornerIsExternal
      }), eict = _getTangentCircle4.circleTangency, eilt = _getTangentCircle4.lineTangency, eit = _getTangentCircle4.theta;
      var innerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sit - eit;
      if (innerArcAngle < 0 && cornerRadius === 0) {
        return "".concat(path, "L").concat(cx, ",").concat(cy, "Z");
      }
      path += "L".concat(eilt.x, ",").concat(eilt.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eict.x, ",").concat(eict.y, "\n      A").concat(innerRadius, ",").concat(innerRadius, ",0,").concat(+(innerArcAngle > 180), ",").concat(+(sign2 > 0), ",").concat(sict.x, ",").concat(sict.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(silt.x, ",").concat(silt.y, "Z");
    } else {
      path += "L".concat(cx, ",").concat(cy, "Z");
    }
    return path;
  };
  var defaultProps$3 = {
    cx: 0,
    cy: 0,
    innerRadius: 0,
    outerRadius: 0,
    startAngle: 0,
    endAngle: 0,
    cornerRadius: 0,
    forceCornerRadius: false,
    cornerIsExternal: false
  };
  var Sector = function Sector2(sectorProps) {
    var props = _objectSpread$l(_objectSpread$l({}, defaultProps$3), sectorProps);
    var cx = props.cx, cy = props.cy, innerRadius = props.innerRadius, outerRadius = props.outerRadius, cornerRadius = props.cornerRadius, forceCornerRadius = props.forceCornerRadius, cornerIsExternal = props.cornerIsExternal, startAngle = props.startAngle, endAngle = props.endAngle, className = props.className;
    if (outerRadius < innerRadius || startAngle === endAngle) {
      return null;
    }
    var layerClass = clsx("recharts-sector", className);
    var deltaRadius = outerRadius - innerRadius;
    var cr = getPercentValue(cornerRadius, deltaRadius, 0, true);
    var path;
    if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
      path = getSectorWithCorner({
        cx,
        cy,
        innerRadius,
        outerRadius,
        cornerRadius: Math.min(cr, deltaRadius / 2),
        forceCornerRadius,
        cornerIsExternal,
        startAngle,
        endAngle
      });
    } else {
      path = getSectorPath({
        cx,
        cy,
        innerRadius,
        outerRadius,
        startAngle,
        endAngle
      });
    }
    return React.createElement("path", _extends$g({}, filterProps(props, true), {
      className: layerClass,
      d: path,
      role: "img"
    }));
  };
  function _typeof$o(o) {
    "@babel/helpers - typeof";
    return _typeof$o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$o(o);
  }
  function _extends$f() {
    _extends$f = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$f.apply(this, arguments);
  }
  function ownKeys$k(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$k(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$k(Object(t2), true).forEach(function(r2) {
        _defineProperty$n(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$k(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$n(obj, key, value) {
    key = _toPropertyKey$n(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$n(t2) {
    var i = _toPrimitive$n(t2, "string");
    return "symbol" == _typeof$o(i) ? i : i + "";
  }
  function _toPrimitive$n(t2, r) {
    if ("object" != _typeof$o(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$o(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var CURVE_FACTORIES = {
    curveBasisClosed,
    curveBasisOpen,
    curveBasis,
    curveBumpX: bumpX,
    curveBumpY: bumpY,
    curveLinearClosed,
    curveLinear,
    curveMonotoneX: monotoneX,
    curveMonotoneY: monotoneY,
    curveNatural,
    curveStep,
    curveStepAfter: stepAfter,
    curveStepBefore: stepBefore
  };
  var defined = function defined2(p2) {
    return p2.x === +p2.x && p2.y === +p2.y;
  };
  var getX = function getX2(p2) {
    return p2.x;
  };
  var getY = function getY2(p2) {
    return p2.y;
  };
  var getCurveFactory = function getCurveFactory2(type, layout) {
    if (isFunction(type)) {
      return type;
    }
    var name = "curve".concat(upperFirst$1(type));
    if ((name === "curveMonotone" || name === "curveBump") && layout) {
      return CURVE_FACTORIES["".concat(name).concat(layout === "vertical" ? "Y" : "X")];
    }
    return CURVE_FACTORIES[name] || curveLinear;
  };
  var getPath$1 = function getPath2(_ref) {
    var _ref$type = _ref.type, type = _ref$type === void 0 ? "linear" : _ref$type, _ref$points = _ref.points, points = _ref$points === void 0 ? [] : _ref$points, baseLine = _ref.baseLine, layout = _ref.layout, _ref$connectNulls = _ref.connectNulls, connectNulls = _ref$connectNulls === void 0 ? false : _ref$connectNulls;
    var curveFactory = getCurveFactory(type, layout);
    var formatPoints = connectNulls ? points.filter(function(entry) {
      return defined(entry);
    }) : points;
    var lineFunction;
    if (Array.isArray(baseLine)) {
      var formatBaseLine = connectNulls ? baseLine.filter(function(base) {
        return defined(base);
      }) : baseLine;
      var areaPoints = formatPoints.map(function(entry, index2) {
        return _objectSpread$k(_objectSpread$k({}, entry), {}, {
          base: formatBaseLine[index2]
        });
      });
      if (layout === "vertical") {
        lineFunction = shapeArea().y(getY).x1(getX).x0(function(d2) {
          return d2.base.x;
        });
      } else {
        lineFunction = shapeArea().x(getX).y1(getY).y0(function(d2) {
          return d2.base.y;
        });
      }
      lineFunction.defined(defined).curve(curveFactory);
      return lineFunction(areaPoints);
    }
    if (layout === "vertical" && isNumber(baseLine)) {
      lineFunction = shapeArea().y(getY).x1(getX).x0(baseLine);
    } else if (isNumber(baseLine)) {
      lineFunction = shapeArea().x(getX).y1(getY).y0(baseLine);
    } else {
      lineFunction = shapeLine().x(getX).y(getY);
    }
    lineFunction.defined(defined).curve(curveFactory);
    return lineFunction(formatPoints);
  };
  var Curve = function Curve2(props) {
    var className = props.className, points = props.points, path = props.path, pathRef = props.pathRef;
    if ((!points || !points.length) && !path) {
      return null;
    }
    var realPath = points && points.length ? getPath$1(props) : path;
    return React.createElement("path", _extends$f({}, filterProps(props, false), adaptEventHandlers(props), {
      className: clsx("recharts-curve", className),
      d: realPath,
      ref: pathRef
    }));
  };
  var propTypes = {
    exports: {}
  };
  var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  function emptyFunction() {
  }
  function emptyFunctionWithReset() {
  }
  emptyFunctionWithReset.resetWarningCache = emptyFunction;
  var factoryWithThrowingShims = function() {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }
      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = "Invariant Violation";
      throw err;
    }
    shim.isRequired = shim;
    function getShim() {
      return shim;
    }
    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  {
    propTypes.exports = factoryWithThrowingShims();
  }
  var propTypesExports = propTypes.exports;
  const PropTypes = getDefaultExportFromCjs(propTypesExports);
  var getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  function combineComparators(comparatorA, comparatorB) {
    return function isEqual2(a2, b2, state) {
      return comparatorA(a2, b2, state) && comparatorB(a2, b2, state);
    };
  }
  function createIsCircular(areItemsEqual) {
    return function isCircular(a2, b2, state) {
      if (!a2 || !b2 || typeof a2 !== "object" || typeof b2 !== "object") {
        return areItemsEqual(a2, b2, state);
      }
      var cache = state.cache;
      var cachedA = cache.get(a2);
      var cachedB = cache.get(b2);
      if (cachedA && cachedB) {
        return cachedA === b2 && cachedB === a2;
      }
      cache.set(a2, b2);
      cache.set(b2, a2);
      var result = areItemsEqual(a2, b2, state);
      cache.delete(a2);
      cache.delete(b2);
      return result;
    };
  }
  function getStrictProperties(object2) {
    return getOwnPropertyNames(object2).concat(getOwnPropertySymbols(object2));
  }
  var hasOwn = Object.hasOwn || function(object2, property) {
    return hasOwnProperty$1.call(object2, property);
  };
  function sameValueZeroEqual(a2, b2) {
    return a2 || b2 ? a2 === b2 : a2 === b2 || a2 !== a2 && b2 !== b2;
  }
  var OWNER = "_owner";
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, keys$1 = Object.keys;
  function areArraysEqual(a2, b2, state) {
    var index2 = a2.length;
    if (b2.length !== index2) {
      return false;
    }
    while (index2-- > 0) {
      if (!state.equals(a2[index2], b2[index2], index2, index2, a2, b2, state)) {
        return false;
      }
    }
    return true;
  }
  function areDatesEqual(a2, b2) {
    return sameValueZeroEqual(a2.getTime(), b2.getTime());
  }
  function areMapsEqual(a2, b2, state) {
    if (a2.size !== b2.size) {
      return false;
    }
    var matchedIndices = {};
    var aIterable = a2.entries();
    var index2 = 0;
    var aResult;
    var bResult;
    while (aResult = aIterable.next()) {
      if (aResult.done) {
        break;
      }
      var bIterable = b2.entries();
      var hasMatch = false;
      var matchIndex = 0;
      while (bResult = bIterable.next()) {
        if (bResult.done) {
          break;
        }
        var _a = aResult.value, aKey = _a[0], aValue = _a[1];
        var _b = bResult.value, bKey = _b[0], bValue = _b[1];
        if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aKey, bKey, index2, matchIndex, a2, b2, state) && state.equals(aValue, bValue, aKey, bKey, a2, b2, state))) {
          matchedIndices[matchIndex] = true;
        }
        matchIndex++;
      }
      if (!hasMatch) {
        return false;
      }
      index2++;
    }
    return true;
  }
  function areObjectsEqual(a2, b2, state) {
    var properties = keys$1(a2);
    var index2 = properties.length;
    if (keys$1(b2).length !== index2) {
      return false;
    }
    var property;
    while (index2-- > 0) {
      property = properties[index2];
      if (property === OWNER && (a2.$$typeof || b2.$$typeof) && a2.$$typeof !== b2.$$typeof) {
        return false;
      }
      if (!hasOwn(b2, property) || !state.equals(a2[property], b2[property], property, property, a2, b2, state)) {
        return false;
      }
    }
    return true;
  }
  function areObjectsEqualStrict(a2, b2, state) {
    var properties = getStrictProperties(a2);
    var index2 = properties.length;
    if (getStrictProperties(b2).length !== index2) {
      return false;
    }
    var property;
    var descriptorA;
    var descriptorB;
    while (index2-- > 0) {
      property = properties[index2];
      if (property === OWNER && (a2.$$typeof || b2.$$typeof) && a2.$$typeof !== b2.$$typeof) {
        return false;
      }
      if (!hasOwn(b2, property)) {
        return false;
      }
      if (!state.equals(a2[property], b2[property], property, property, a2, b2, state)) {
        return false;
      }
      descriptorA = getOwnPropertyDescriptor(a2, property);
      descriptorB = getOwnPropertyDescriptor(b2, property);
      if ((descriptorA || descriptorB) && (!descriptorA || !descriptorB || descriptorA.configurable !== descriptorB.configurable || descriptorA.enumerable !== descriptorB.enumerable || descriptorA.writable !== descriptorB.writable)) {
        return false;
      }
    }
    return true;
  }
  function arePrimitiveWrappersEqual(a2, b2) {
    return sameValueZeroEqual(a2.valueOf(), b2.valueOf());
  }
  function areRegExpsEqual(a2, b2) {
    return a2.source === b2.source && a2.flags === b2.flags;
  }
  function areSetsEqual(a2, b2, state) {
    if (a2.size !== b2.size) {
      return false;
    }
    var matchedIndices = {};
    var aIterable = a2.values();
    var aResult;
    var bResult;
    while (aResult = aIterable.next()) {
      if (aResult.done) {
        break;
      }
      var bIterable = b2.values();
      var hasMatch = false;
      var matchIndex = 0;
      while (bResult = bIterable.next()) {
        if (bResult.done) {
          break;
        }
        if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aResult.value, bResult.value, aResult.value, bResult.value, a2, b2, state))) {
          matchedIndices[matchIndex] = true;
        }
        matchIndex++;
      }
      if (!hasMatch) {
        return false;
      }
    }
    return true;
  }
  function areTypedArraysEqual(a2, b2) {
    var index2 = a2.length;
    if (b2.length !== index2) {
      return false;
    }
    while (index2-- > 0) {
      if (a2[index2] !== b2[index2]) {
        return false;
      }
    }
    return true;
  }
  var ARGUMENTS_TAG = "[object Arguments]";
  var BOOLEAN_TAG = "[object Boolean]";
  var DATE_TAG = "[object Date]";
  var MAP_TAG = "[object Map]";
  var NUMBER_TAG = "[object Number]";
  var OBJECT_TAG = "[object Object]";
  var REG_EXP_TAG = "[object RegExp]";
  var SET_TAG = "[object Set]";
  var STRING_TAG = "[object String]";
  var isArray$2 = Array.isArray;
  var isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView ? ArrayBuffer.isView : null;
  var assign = Object.assign;
  var getTag = Object.prototype.toString.call.bind(Object.prototype.toString);
  function createEqualityComparator(_a) {
    var areArraysEqual2 = _a.areArraysEqual, areDatesEqual2 = _a.areDatesEqual, areMapsEqual2 = _a.areMapsEqual, areObjectsEqual2 = _a.areObjectsEqual, arePrimitiveWrappersEqual2 = _a.arePrimitiveWrappersEqual, areRegExpsEqual2 = _a.areRegExpsEqual, areSetsEqual2 = _a.areSetsEqual, areTypedArraysEqual2 = _a.areTypedArraysEqual;
    return function comparator(a2, b2, state) {
      if (a2 === b2) {
        return true;
      }
      if (a2 == null || b2 == null || typeof a2 !== "object" || typeof b2 !== "object") {
        return a2 !== a2 && b2 !== b2;
      }
      var constructor = a2.constructor;
      if (constructor !== b2.constructor) {
        return false;
      }
      if (constructor === Object) {
        return areObjectsEqual2(a2, b2, state);
      }
      if (isArray$2(a2)) {
        return areArraysEqual2(a2, b2, state);
      }
      if (isTypedArray != null && isTypedArray(a2)) {
        return areTypedArraysEqual2(a2, b2, state);
      }
      if (constructor === Date) {
        return areDatesEqual2(a2, b2, state);
      }
      if (constructor === RegExp) {
        return areRegExpsEqual2(a2, b2, state);
      }
      if (constructor === Map) {
        return areMapsEqual2(a2, b2, state);
      }
      if (constructor === Set) {
        return areSetsEqual2(a2, b2, state);
      }
      var tag = getTag(a2);
      if (tag === DATE_TAG) {
        return areDatesEqual2(a2, b2, state);
      }
      if (tag === REG_EXP_TAG) {
        return areRegExpsEqual2(a2, b2, state);
      }
      if (tag === MAP_TAG) {
        return areMapsEqual2(a2, b2, state);
      }
      if (tag === SET_TAG) {
        return areSetsEqual2(a2, b2, state);
      }
      if (tag === OBJECT_TAG) {
        return typeof a2.then !== "function" && typeof b2.then !== "function" && areObjectsEqual2(a2, b2, state);
      }
      if (tag === ARGUMENTS_TAG) {
        return areObjectsEqual2(a2, b2, state);
      }
      if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {
        return arePrimitiveWrappersEqual2(a2, b2, state);
      }
      return false;
    };
  }
  function createEqualityComparatorConfig(_a) {
    var circular = _a.circular, createCustomConfig = _a.createCustomConfig, strict = _a.strict;
    var config2 = {
      areArraysEqual: strict ? areObjectsEqualStrict : areArraysEqual,
      areDatesEqual,
      areMapsEqual: strict ? combineComparators(areMapsEqual, areObjectsEqualStrict) : areMapsEqual,
      areObjectsEqual: strict ? areObjectsEqualStrict : areObjectsEqual,
      arePrimitiveWrappersEqual,
      areRegExpsEqual,
      areSetsEqual: strict ? combineComparators(areSetsEqual, areObjectsEqualStrict) : areSetsEqual,
      areTypedArraysEqual: strict ? areObjectsEqualStrict : areTypedArraysEqual
    };
    if (createCustomConfig) {
      config2 = assign({}, config2, createCustomConfig(config2));
    }
    if (circular) {
      var areArraysEqual$1 = createIsCircular(config2.areArraysEqual);
      var areMapsEqual$1 = createIsCircular(config2.areMapsEqual);
      var areObjectsEqual$1 = createIsCircular(config2.areObjectsEqual);
      var areSetsEqual$1 = createIsCircular(config2.areSetsEqual);
      config2 = assign({}, config2, {
        areArraysEqual: areArraysEqual$1,
        areMapsEqual: areMapsEqual$1,
        areObjectsEqual: areObjectsEqual$1,
        areSetsEqual: areSetsEqual$1
      });
    }
    return config2;
  }
  function createInternalEqualityComparator(compare) {
    return function(a2, b2, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {
      return compare(a2, b2, state);
    };
  }
  function createIsEqual(_a) {
    var circular = _a.circular, comparator = _a.comparator, createState = _a.createState, equals = _a.equals, strict = _a.strict;
    if (createState) {
      return function isEqual2(a2, b2) {
        var _a2 = createState(), _b = _a2.cache, cache = _b === void 0 ? circular ? /* @__PURE__ */ new WeakMap() : void 0 : _b, meta = _a2.meta;
        return comparator(a2, b2, {
          cache,
          equals,
          meta,
          strict
        });
      };
    }
    if (circular) {
      return function isEqual2(a2, b2) {
        return comparator(a2, b2, {
          cache: /* @__PURE__ */ new WeakMap(),
          equals,
          meta: void 0,
          strict
        });
      };
    }
    var state = {
      cache: void 0,
      equals,
      meta: void 0,
      strict
    };
    return function isEqual2(a2, b2) {
      return comparator(a2, b2, state);
    };
  }
  var deepEqual = createCustomEqual();
  createCustomEqual({
    strict: true
  });
  createCustomEqual({
    circular: true
  });
  createCustomEqual({
    circular: true,
    strict: true
  });
  createCustomEqual({
    createInternalComparator: function() {
      return sameValueZeroEqual;
    }
  });
  createCustomEqual({
    strict: true,
    createInternalComparator: function() {
      return sameValueZeroEqual;
    }
  });
  createCustomEqual({
    circular: true,
    createInternalComparator: function() {
      return sameValueZeroEqual;
    }
  });
  createCustomEqual({
    circular: true,
    createInternalComparator: function() {
      return sameValueZeroEqual;
    },
    strict: true
  });
  function createCustomEqual(options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.circular, circular = _a === void 0 ? false : _a, createCustomInternalComparator = options.createInternalComparator, createState = options.createState, _b = options.strict, strict = _b === void 0 ? false : _b;
    var config2 = createEqualityComparatorConfig(options);
    var comparator = createEqualityComparator(config2);
    var equals = createCustomInternalComparator ? createCustomInternalComparator(comparator) : createInternalEqualityComparator(comparator);
    return createIsEqual({
      circular,
      comparator,
      createState,
      equals,
      strict
    });
  }
  function safeRequestAnimationFrame(callback) {
    if (typeof requestAnimationFrame !== "undefined") requestAnimationFrame(callback);
  }
  function setRafTimeout(callback) {
    var timeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var currTime = -1;
    var shouldUpdate = function shouldUpdate2(now2) {
      if (currTime < 0) {
        currTime = now2;
      }
      if (now2 - currTime > timeout) {
        callback(now2);
        currTime = -1;
      } else {
        safeRequestAnimationFrame(shouldUpdate2);
      }
    };
    requestAnimationFrame(shouldUpdate);
  }
  function _typeof$n(o) {
    "@babel/helpers - typeof";
    return _typeof$n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$n(o);
  }
  function _toArray(arr) {
    return _arrayWithHoles$6(arr) || _iterableToArray$5(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableRest$6();
  }
  function _nonIterableRest$6() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$8(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$8(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$8(o, minLen);
  }
  function _arrayLikeToArray$8(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArray$5(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithHoles$6(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function createAnimateManager() {
    var currStyle = {};
    var handleChange = function handleChange2() {
      return null;
    };
    var shouldStop = false;
    var setStyle = function setStyle2(_style) {
      if (shouldStop) {
        return;
      }
      if (Array.isArray(_style)) {
        if (!_style.length) {
          return;
        }
        var styles = _style;
        var _styles = _toArray(styles), curr = _styles[0], restStyles = _styles.slice(1);
        if (typeof curr === "number") {
          setRafTimeout(setStyle2.bind(null, restStyles), curr);
          return;
        }
        setStyle2(curr);
        setRafTimeout(setStyle2.bind(null, restStyles));
        return;
      }
      if (_typeof$n(_style) === "object") {
        currStyle = _style;
        handleChange(currStyle);
      }
      if (typeof _style === "function") {
        _style();
      }
    };
    return {
      stop: function stop() {
        shouldStop = true;
      },
      start: function start(style) {
        shouldStop = false;
        setStyle(style);
      },
      subscribe: function subscribe(_handleChange) {
        handleChange = _handleChange;
        return function() {
          handleChange = function handleChange2() {
            return null;
          };
        };
      }
    };
  }
  function _typeof$m(o) {
    "@babel/helpers - typeof";
    return _typeof$m = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$m(o);
  }
  function ownKeys$j(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$j(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$j(Object(t2), true).forEach(function(r2) {
        _defineProperty$m(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$j(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$m(obj, key, value) {
    key = _toPropertyKey$m(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$m(arg) {
    var key = _toPrimitive$m(arg, "string");
    return _typeof$m(key) === "symbol" ? key : String(key);
  }
  function _toPrimitive$m(input, hint) {
    if (_typeof$m(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$m(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var getIntersectionKeys = function getIntersectionKeys2(preObj, nextObj) {
    return [
      Object.keys(preObj),
      Object.keys(nextObj)
    ].reduce(function(a2, b2) {
      return a2.filter(function(c2) {
        return b2.includes(c2);
      });
    });
  };
  var identity = function identity2(param) {
    return param;
  };
  var getDashCase = function getDashCase2(name) {
    return name.replace(/([A-Z])/g, function(v2) {
      return "-".concat(v2.toLowerCase());
    });
  };
  var mapObject = function mapObject2(fn, obj) {
    return Object.keys(obj).reduce(function(res, key) {
      return _objectSpread$j(_objectSpread$j({}, res), {}, _defineProperty$m({}, key, fn(key, obj[key])));
    }, {});
  };
  var getTransitionVal = function getTransitionVal2(props, duration, easing) {
    return props.map(function(prop) {
      return "".concat(getDashCase(prop), " ").concat(duration, "ms ").concat(easing);
    }).join(",");
  };
  function _slicedToArray$5(arr, i) {
    return _arrayWithHoles$5(arr) || _iterableToArrayLimit$5(arr, i) || _unsupportedIterableToArray$7(arr, i) || _nonIterableRest$5();
  }
  function _nonIterableRest$5() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit$5(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$5(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _toConsumableArray$4(arr) {
    return _arrayWithoutHoles$4(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$7(arr) || _nonIterableSpread$4();
  }
  function _nonIterableSpread$4() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$7(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$7(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$7(o, minLen);
  }
  function _iterableToArray$4(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles$4(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$7(arr);
  }
  function _arrayLikeToArray$7(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  var ACCURACY = 1e-4;
  var cubicBezierFactor = function cubicBezierFactor2(c1, c2) {
    return [
      0,
      3 * c1,
      3 * c2 - 6 * c1,
      3 * c1 - 3 * c2 + 1
    ];
  };
  var multyTime = function multyTime2(params, t2) {
    return params.map(function(param, i) {
      return param * Math.pow(t2, i);
    }).reduce(function(pre, curr) {
      return pre + curr;
    });
  };
  var cubicBezier = function cubicBezier2(c1, c2) {
    return function(t2) {
      var params = cubicBezierFactor(c1, c2);
      return multyTime(params, t2);
    };
  };
  var derivativeCubicBezier = function derivativeCubicBezier2(c1, c2) {
    return function(t2) {
      var params = cubicBezierFactor(c1, c2);
      var newParams = [].concat(_toConsumableArray$4(params.map(function(param, i) {
        return param * i;
      }).slice(1)), [
        0
      ]);
      return multyTime(newParams, t2);
    };
  };
  var configBezier = function configBezier2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var x1 = args[0], y1 = args[1], x2 = args[2], y2 = args[3];
    if (args.length === 1) {
      switch (args[0]) {
        case "linear":
          x1 = 0;
          y1 = 0;
          x2 = 1;
          y2 = 1;
          break;
        case "ease":
          x1 = 0.25;
          y1 = 0.1;
          x2 = 0.25;
          y2 = 1;
          break;
        case "ease-in":
          x1 = 0.42;
          y1 = 0;
          x2 = 1;
          y2 = 1;
          break;
        case "ease-out":
          x1 = 0.42;
          y1 = 0;
          x2 = 0.58;
          y2 = 1;
          break;
        case "ease-in-out":
          x1 = 0;
          y1 = 0;
          x2 = 0.58;
          y2 = 1;
          break;
        default: {
          var easing = args[0].split("(");
          if (easing[0] === "cubic-bezier" && easing[1].split(")")[0].split(",").length === 4) {
            var _easing$1$split$0$spl = easing[1].split(")")[0].split(",").map(function(x3) {
              return parseFloat(x3);
            });
            var _easing$1$split$0$spl2 = _slicedToArray$5(_easing$1$split$0$spl, 4);
            x1 = _easing$1$split$0$spl2[0];
            y1 = _easing$1$split$0$spl2[1];
            x2 = _easing$1$split$0$spl2[2];
            y2 = _easing$1$split$0$spl2[3];
          }
        }
      }
    }
    var curveX = cubicBezier(x1, x2);
    var curveY = cubicBezier(y1, y2);
    var derCurveX = derivativeCubicBezier(x1, x2);
    var rangeValue = function rangeValue2(value) {
      if (value > 1) {
        return 1;
      }
      if (value < 0) {
        return 0;
      }
      return value;
    };
    var bezier = function bezier2(_t) {
      var t2 = _t > 1 ? 1 : _t;
      var x3 = t2;
      for (var i = 0; i < 8; ++i) {
        var evalT = curveX(x3) - t2;
        var derVal = derCurveX(x3);
        if (Math.abs(evalT - t2) < ACCURACY || derVal < ACCURACY) {
          return curveY(x3);
        }
        x3 = rangeValue(x3 - evalT / derVal);
      }
      return curveY(x3);
    };
    bezier.isStepper = false;
    return bezier;
  };
  var configSpring = function configSpring2() {
    var config2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _config$stiff = config2.stiff, stiff = _config$stiff === void 0 ? 100 : _config$stiff, _config$damping = config2.damping, damping = _config$damping === void 0 ? 8 : _config$damping, _config$dt = config2.dt, dt = _config$dt === void 0 ? 17 : _config$dt;
    var stepper = function stepper2(currX, destX, currV) {
      var FSpring = -(currX - destX) * stiff;
      var FDamping = currV * damping;
      var newV = currV + (FSpring - FDamping) * dt / 1e3;
      var newX = currV * dt / 1e3 + currX;
      if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
        return [
          destX,
          0
        ];
      }
      return [
        newX,
        newV
      ];
    };
    stepper.isStepper = true;
    stepper.dt = dt;
    return stepper;
  };
  var configEasing = function configEasing2() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var easing = args[0];
    if (typeof easing === "string") {
      switch (easing) {
        case "ease":
        case "ease-in-out":
        case "ease-out":
        case "ease-in":
        case "linear":
          return configBezier(easing);
        case "spring":
          return configSpring();
        default:
          if (easing.split("(")[0] === "cubic-bezier") {
            return configBezier(easing);
          }
      }
    }
    if (typeof easing === "function") {
      return easing;
    }
    return null;
  };
  function _typeof$l(o) {
    "@babel/helpers - typeof";
    return _typeof$l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$l(o);
  }
  function _toConsumableArray$3(arr) {
    return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread$3();
  }
  function _nonIterableSpread$3() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArray$3(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles$3(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$6(arr);
  }
  function ownKeys$i(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$i(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$i(Object(t2), true).forEach(function(r2) {
        _defineProperty$l(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$i(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$l(obj, key, value) {
    key = _toPropertyKey$l(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$l(arg) {
    var key = _toPrimitive$l(arg, "string");
    return _typeof$l(key) === "symbol" ? key : String(key);
  }
  function _toPrimitive$l(input, hint) {
    if (_typeof$l(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$l(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _slicedToArray$4(arr, i) {
    return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i) || _unsupportedIterableToArray$6(arr, i) || _nonIterableRest$4();
  }
  function _nonIterableRest$4() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$6(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$6(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$6(o, minLen);
  }
  function _arrayLikeToArray$6(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$4(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$4(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var alpha = function alpha2(begin, end, k2) {
    return begin + (end - begin) * k2;
  };
  var needContinue = function needContinue2(_ref) {
    var from = _ref.from, to = _ref.to;
    return from !== to;
  };
  var calStepperVals = function calStepperVals2(easing, preVals, steps) {
    var nextStepVals = mapObject(function(key, val) {
      if (needContinue(val)) {
        var _easing = easing(val.from, val.to, val.velocity), _easing2 = _slicedToArray$4(_easing, 2), newX = _easing2[0], newV = _easing2[1];
        return _objectSpread$i(_objectSpread$i({}, val), {}, {
          from: newX,
          velocity: newV
        });
      }
      return val;
    }, preVals);
    if (steps < 1) {
      return mapObject(function(key, val) {
        if (needContinue(val)) {
          return _objectSpread$i(_objectSpread$i({}, val), {}, {
            velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
            from: alpha(val.from, nextStepVals[key].from, steps)
          });
        }
        return val;
      }, preVals);
    }
    return calStepperVals2(easing, nextStepVals, steps - 1);
  };
  const configUpdate = function(from, to, easing, duration, render) {
    var interKeys = getIntersectionKeys(from, to);
    var timingStyle = interKeys.reduce(function(res, key) {
      return _objectSpread$i(_objectSpread$i({}, res), {}, _defineProperty$l({}, key, [
        from[key],
        to[key]
      ]));
    }, {});
    var stepperStyle = interKeys.reduce(function(res, key) {
      return _objectSpread$i(_objectSpread$i({}, res), {}, _defineProperty$l({}, key, {
        from: from[key],
        velocity: 0,
        to: to[key]
      }));
    }, {});
    var cafId = -1;
    var preTime;
    var beginTime;
    var update = function update2() {
      return null;
    };
    var getCurrStyle = function getCurrStyle2() {
      return mapObject(function(key, val) {
        return val.from;
      }, stepperStyle);
    };
    var shouldStopAnimation = function shouldStopAnimation2() {
      return !Object.values(stepperStyle).filter(needContinue).length;
    };
    var stepperUpdate = function stepperUpdate2(now2) {
      if (!preTime) {
        preTime = now2;
      }
      var deltaTime = now2 - preTime;
      var steps = deltaTime / easing.dt;
      stepperStyle = calStepperVals(easing, stepperStyle, steps);
      render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from), to), getCurrStyle()));
      preTime = now2;
      if (!shouldStopAnimation()) {
        cafId = requestAnimationFrame(update);
      }
    };
    var timingUpdate = function timingUpdate2(now2) {
      if (!beginTime) {
        beginTime = now2;
      }
      var t2 = (now2 - beginTime) / duration;
      var currStyle = mapObject(function(key, val) {
        return alpha.apply(void 0, _toConsumableArray$3(val).concat([
          easing(t2)
        ]));
      }, timingStyle);
      render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from), to), currStyle));
      if (t2 < 1) {
        cafId = requestAnimationFrame(update);
      } else {
        var finalStyle = mapObject(function(key, val) {
          return alpha.apply(void 0, _toConsumableArray$3(val).concat([
            easing(1)
          ]));
        }, timingStyle);
        render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from), to), finalStyle));
      }
    };
    update = easing.isStepper ? stepperUpdate : timingUpdate;
    return function() {
      requestAnimationFrame(update);
      return function() {
        cancelAnimationFrame(cafId);
      };
    };
  };
  function _typeof$k(o) {
    "@babel/helpers - typeof";
    return _typeof$k = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$k(o);
  }
  var _excluded$7 = [
    "children",
    "begin",
    "duration",
    "attributeName",
    "easing",
    "isActive",
    "steps",
    "from",
    "to",
    "canBegin",
    "onAnimationEnd",
    "shouldReAnimate",
    "onAnimationReStart"
  ];
  function _objectWithoutProperties$7(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$7(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$7(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _toConsumableArray$2(arr) {
    return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$5(arr) || _nonIterableSpread$2();
  }
  function _nonIterableSpread$2() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$5(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$5(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$5(o, minLen);
  }
  function _iterableToArray$2(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles$2(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$5(arr);
  }
  function _arrayLikeToArray$5(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function ownKeys$h(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$h(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$h(Object(t2), true).forEach(function(r2) {
        _defineProperty$k(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$h(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$k(obj, key, value) {
    key = _toPropertyKey$k(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck$b(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$b(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$k(descriptor.key), descriptor);
    }
  }
  function _createClass$b(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$b(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _toPropertyKey$k(arg) {
    var key = _toPrimitive$k(arg, "string");
    return _typeof$k(key) === "symbol" ? key : String(key);
  }
  function _toPrimitive$k(input, hint) {
    if (_typeof$k(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$k(res) !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _inherits$9(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$9(subClass, superClass);
  }
  function _setPrototypeOf$9(o, p2) {
    _setPrototypeOf$9 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$9(o, p2);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf$9(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf$9(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn$9(this, result);
    };
  }
  function _possibleConstructorReturn$9(self, call) {
    if (call && (_typeof$k(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$9(self);
  }
  function _assertThisInitialized$9(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$9() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _getPrototypeOf$9(o) {
    _getPrototypeOf$9 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$9(o);
  }
  var Animate = function(_PureComponent) {
    _inherits$9(Animate2, _PureComponent);
    var _super = _createSuper(Animate2);
    function Animate2(props, context) {
      var _this;
      _classCallCheck$b(this, Animate2);
      _this = _super.call(this, props, context);
      var _this$props = _this.props, isActive = _this$props.isActive, attributeName = _this$props.attributeName, from = _this$props.from, to = _this$props.to, steps = _this$props.steps, children = _this$props.children, duration = _this$props.duration;
      _this.handleStyleChange = _this.handleStyleChange.bind(_assertThisInitialized$9(_this));
      _this.changeStyle = _this.changeStyle.bind(_assertThisInitialized$9(_this));
      if (!isActive || duration <= 0) {
        _this.state = {
          style: {}
        };
        if (typeof children === "function") {
          _this.state = {
            style: to
          };
        }
        return _possibleConstructorReturn$9(_this);
      }
      if (steps && steps.length) {
        _this.state = {
          style: steps[0].style
        };
      } else if (from) {
        if (typeof children === "function") {
          _this.state = {
            style: from
          };
          return _possibleConstructorReturn$9(_this);
        }
        _this.state = {
          style: attributeName ? _defineProperty$k({}, attributeName, from) : from
        };
      } else {
        _this.state = {
          style: {}
        };
      }
      return _this;
    }
    _createClass$b(Animate2, [
      {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this$props2 = this.props, isActive = _this$props2.isActive, canBegin = _this$props2.canBegin;
          this.mounted = true;
          if (!isActive || !canBegin) {
            return;
          }
          this.runAnimation(this.props);
        }
      },
      {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props3 = this.props, isActive = _this$props3.isActive, canBegin = _this$props3.canBegin, attributeName = _this$props3.attributeName, shouldReAnimate = _this$props3.shouldReAnimate, to = _this$props3.to, currentFrom = _this$props3.from;
          var style = this.state.style;
          if (!canBegin) {
            return;
          }
          if (!isActive) {
            var newState = {
              style: attributeName ? _defineProperty$k({}, attributeName, to) : to
            };
            if (this.state && style) {
              if (attributeName && style[attributeName] !== to || !attributeName && style !== to) {
                this.setState(newState);
              }
            }
            return;
          }
          if (deepEqual(prevProps.to, to) && prevProps.canBegin && prevProps.isActive) {
            return;
          }
          var isTriggered = !prevProps.canBegin || !prevProps.isActive;
          if (this.manager) {
            this.manager.stop();
          }
          if (this.stopJSAnimation) {
            this.stopJSAnimation();
          }
          var from = isTriggered || shouldReAnimate ? currentFrom : prevProps.to;
          if (this.state && style) {
            var _newState = {
              style: attributeName ? _defineProperty$k({}, attributeName, from) : from
            };
            if (attributeName && style[attributeName] !== from || !attributeName && style !== from) {
              this.setState(_newState);
            }
          }
          this.runAnimation(_objectSpread$h(_objectSpread$h({}, this.props), {}, {
            from,
            begin: 0
          }));
        }
      },
      {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
          var onAnimationEnd = this.props.onAnimationEnd;
          if (this.unSubscribe) {
            this.unSubscribe();
          }
          if (this.manager) {
            this.manager.stop();
            this.manager = null;
          }
          if (this.stopJSAnimation) {
            this.stopJSAnimation();
          }
          if (onAnimationEnd) {
            onAnimationEnd();
          }
        }
      },
      {
        key: "handleStyleChange",
        value: function handleStyleChange(style) {
          this.changeStyle(style);
        }
      },
      {
        key: "changeStyle",
        value: function changeStyle(style) {
          if (this.mounted) {
            this.setState({
              style
            });
          }
        }
      },
      {
        key: "runJSAnimation",
        value: function runJSAnimation(props) {
          var _this2 = this;
          var from = props.from, to = props.to, duration = props.duration, easing = props.easing, begin = props.begin, onAnimationEnd = props.onAnimationEnd, onAnimationStart = props.onAnimationStart;
          var startAnimation = configUpdate(from, to, configEasing(easing), duration, this.changeStyle);
          var finalStartAnimation = function finalStartAnimation2() {
            _this2.stopJSAnimation = startAnimation();
          };
          this.manager.start([
            onAnimationStart,
            begin,
            finalStartAnimation,
            duration,
            onAnimationEnd
          ]);
        }
      },
      {
        key: "runStepAnimation",
        value: function runStepAnimation(props) {
          var _this3 = this;
          var steps = props.steps, begin = props.begin, onAnimationStart = props.onAnimationStart;
          var _steps$ = steps[0], initialStyle = _steps$.style, _steps$$duration = _steps$.duration, initialTime = _steps$$duration === void 0 ? 0 : _steps$$duration;
          var addStyle = function addStyle2(sequence, nextItem, index2) {
            if (index2 === 0) {
              return sequence;
            }
            var duration = nextItem.duration, _nextItem$easing = nextItem.easing, easing = _nextItem$easing === void 0 ? "ease" : _nextItem$easing, style = nextItem.style, nextProperties = nextItem.properties, onAnimationEnd = nextItem.onAnimationEnd;
            var preItem = index2 > 0 ? steps[index2 - 1] : nextItem;
            var properties = nextProperties || Object.keys(style);
            if (typeof easing === "function" || easing === "spring") {
              return [].concat(_toConsumableArray$2(sequence), [
                _this3.runJSAnimation.bind(_this3, {
                  from: preItem.style,
                  to: style,
                  duration,
                  easing
                }),
                duration
              ]);
            }
            var transition = getTransitionVal(properties, duration, easing);
            var newStyle = _objectSpread$h(_objectSpread$h(_objectSpread$h({}, preItem.style), style), {}, {
              transition
            });
            return [].concat(_toConsumableArray$2(sequence), [
              newStyle,
              duration,
              onAnimationEnd
            ]).filter(identity);
          };
          return this.manager.start([
            onAnimationStart
          ].concat(_toConsumableArray$2(steps.reduce(addStyle, [
            initialStyle,
            Math.max(initialTime, begin)
          ])), [
            props.onAnimationEnd
          ]));
        }
      },
      {
        key: "runAnimation",
        value: function runAnimation(props) {
          if (!this.manager) {
            this.manager = createAnimateManager();
          }
          var begin = props.begin, duration = props.duration, attributeName = props.attributeName, propsTo = props.to, easing = props.easing, onAnimationStart = props.onAnimationStart, onAnimationEnd = props.onAnimationEnd, steps = props.steps, children = props.children;
          var manager = this.manager;
          this.unSubscribe = manager.subscribe(this.handleStyleChange);
          if (typeof easing === "function" || typeof children === "function" || easing === "spring") {
            this.runJSAnimation(props);
            return;
          }
          if (steps.length > 1) {
            this.runStepAnimation(props);
            return;
          }
          var to = attributeName ? _defineProperty$k({}, attributeName, propsTo) : propsTo;
          var transition = getTransitionVal(Object.keys(to), duration, easing);
          manager.start([
            onAnimationStart,
            begin,
            _objectSpread$h(_objectSpread$h({}, to), {}, {
              transition
            }),
            duration,
            onAnimationEnd
          ]);
        }
      },
      {
        key: "render",
        value: function render() {
          var _this$props4 = this.props, children = _this$props4.children;
          _this$props4.begin;
          var duration = _this$props4.duration;
          _this$props4.attributeName;
          _this$props4.easing;
          var isActive = _this$props4.isActive;
          _this$props4.steps;
          _this$props4.from;
          _this$props4.to;
          _this$props4.canBegin;
          _this$props4.onAnimationEnd;
          _this$props4.shouldReAnimate;
          _this$props4.onAnimationReStart;
          var others = _objectWithoutProperties$7(_this$props4, _excluded$7);
          var count = reactExports.Children.count(children);
          var stateStyle = this.state.style;
          if (typeof children === "function") {
            return children(stateStyle);
          }
          if (!isActive || count === 0 || duration <= 0) {
            return children;
          }
          var cloneContainer = function cloneContainer2(container) {
            var _container$props = container.props, _container$props$styl = _container$props.style, style = _container$props$styl === void 0 ? {} : _container$props$styl, className = _container$props.className;
            var res = reactExports.cloneElement(container, _objectSpread$h(_objectSpread$h({}, others), {}, {
              style: _objectSpread$h(_objectSpread$h({}, style), stateStyle),
              className
            }));
            return res;
          };
          if (count === 1) {
            return cloneContainer(reactExports.Children.only(children));
          }
          return React.createElement("div", null, reactExports.Children.map(children, function(child) {
            return cloneContainer(child);
          }));
        }
      }
    ]);
    return Animate2;
  }(reactExports.PureComponent);
  Animate.displayName = "Animate";
  Animate.defaultProps = {
    begin: 0,
    duration: 1e3,
    from: "",
    to: "",
    attributeName: "",
    easing: "ease",
    isActive: true,
    canBegin: true,
    steps: [],
    onAnimationEnd: function onAnimationEnd() {
    },
    onAnimationStart: function onAnimationStart() {
    }
  };
  Animate.propTypes = {
    from: PropTypes.oneOfType([
      PropTypes.object,
      PropTypes.string
    ]),
    to: PropTypes.oneOfType([
      PropTypes.object,
      PropTypes.string
    ]),
    attributeName: PropTypes.string,
    duration: PropTypes.number,
    begin: PropTypes.number,
    easing: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.func
    ]),
    steps: PropTypes.arrayOf(PropTypes.shape({
      duration: PropTypes.number.isRequired,
      style: PropTypes.object.isRequired,
      easing: PropTypes.oneOfType([
        PropTypes.oneOf([
          "ease",
          "ease-in",
          "ease-out",
          "ease-in-out",
          "linear"
        ]),
        PropTypes.func
      ]),
      properties: PropTypes.arrayOf("string"),
      onAnimationEnd: PropTypes.func
    })),
    children: PropTypes.oneOfType([
      PropTypes.node,
      PropTypes.func
    ]),
    isActive: PropTypes.bool,
    canBegin: PropTypes.bool,
    onAnimationEnd: PropTypes.func,
    shouldReAnimate: PropTypes.bool,
    onAnimationStart: PropTypes.func,
    onAnimationReStart: PropTypes.func
  };
  ({
    appearOptions: PropTypes.object,
    enterOptions: PropTypes.object,
    leaveOptions: PropTypes.object,
    children: PropTypes.element
  });
  ({
    appear: PropTypes.object,
    enter: PropTypes.object,
    leave: PropTypes.object,
    children: PropTypes.oneOfType([
      PropTypes.array,
      PropTypes.element
    ]),
    component: PropTypes.any
  });
  function _typeof$j(o) {
    "@babel/helpers - typeof";
    return _typeof$j = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$j(o);
  }
  function _extends$e() {
    _extends$e = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$e.apply(this, arguments);
  }
  function _slicedToArray$3(arr, i) {
    return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest$3();
  }
  function _nonIterableRest$3() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$4(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$4(o, minLen);
  }
  function _arrayLikeToArray$4(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$3(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$3(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function ownKeys$g(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$g(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$g(Object(t2), true).forEach(function(r2) {
        _defineProperty$j(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$g(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$j(obj, key, value) {
    key = _toPropertyKey$j(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$j(t2) {
    var i = _toPrimitive$j(t2, "string");
    return "symbol" == _typeof$j(i) ? i : i + "";
  }
  function _toPrimitive$j(t2, r) {
    if ("object" != _typeof$j(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$j(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var getRectanglePath = function getRectanglePath2(x2, y2, width, height, radius) {
    var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2);
    var ySign = height >= 0 ? 1 : -1;
    var xSign = width >= 0 ? 1 : -1;
    var clockWise = height >= 0 && width >= 0 || height < 0 && width < 0 ? 1 : 0;
    var path;
    if (maxRadius > 0 && radius instanceof Array) {
      var newRadius = [
        0,
        0,
        0,
        0
      ];
      for (var i = 0, len = 4; i < len; i++) {
        newRadius[i] = radius[i] > maxRadius ? maxRadius : radius[i];
      }
      path = "M".concat(x2, ",").concat(y2 + ySign * newRadius[0]);
      if (newRadius[0] > 0) {
        path += "A ".concat(newRadius[0], ",").concat(newRadius[0], ",0,0,").concat(clockWise, ",").concat(x2 + xSign * newRadius[0], ",").concat(y2);
      }
      path += "L ".concat(x2 + width - xSign * newRadius[1], ",").concat(y2);
      if (newRadius[1] > 0) {
        path += "A ".concat(newRadius[1], ",").concat(newRadius[1], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width, ",").concat(y2 + ySign * newRadius[1]);
      }
      path += "L ".concat(x2 + width, ",").concat(y2 + height - ySign * newRadius[2]);
      if (newRadius[2] > 0) {
        path += "A ".concat(newRadius[2], ",").concat(newRadius[2], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width - xSign * newRadius[2], ",").concat(y2 + height);
      }
      path += "L ".concat(x2 + xSign * newRadius[3], ",").concat(y2 + height);
      if (newRadius[3] > 0) {
        path += "A ".concat(newRadius[3], ",").concat(newRadius[3], ",0,0,").concat(clockWise, ",\n        ").concat(x2, ",").concat(y2 + height - ySign * newRadius[3]);
      }
      path += "Z";
    } else if (maxRadius > 0 && radius === +radius && radius > 0) {
      var _newRadius = Math.min(maxRadius, radius);
      path = "M ".concat(x2, ",").concat(y2 + ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + xSign * _newRadius, ",").concat(y2, "\n            L ").concat(x2 + width - xSign * _newRadius, ",").concat(y2, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width, ",").concat(y2 + ySign * _newRadius, "\n            L ").concat(x2 + width, ",").concat(y2 + height - ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width - xSign * _newRadius, ",").concat(y2 + height, "\n            L ").concat(x2 + xSign * _newRadius, ",").concat(y2 + height, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2, ",").concat(y2 + height - ySign * _newRadius, " Z");
    } else {
      path = "M ".concat(x2, ",").concat(y2, " h ").concat(width, " v ").concat(height, " h ").concat(-width, " Z");
    }
    return path;
  };
  var isInRectangle = function isInRectangle2(point2, rect) {
    if (!point2 || !rect) {
      return false;
    }
    var px = point2.x, py = point2.y;
    var x2 = rect.x, y2 = rect.y, width = rect.width, height = rect.height;
    if (Math.abs(width) > 0 && Math.abs(height) > 0) {
      var minX = Math.min(x2, x2 + width);
      var maxX = Math.max(x2, x2 + width);
      var minY = Math.min(y2, y2 + height);
      var maxY = Math.max(y2, y2 + height);
      return px >= minX && px <= maxX && py >= minY && py <= maxY;
    }
    return false;
  };
  var defaultProps$2 = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    radius: 0,
    isAnimationActive: false,
    isUpdateAnimationActive: false,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: "ease"
  };
  var Rectangle = function Rectangle2(rectangleProps) {
    var props = _objectSpread$g(_objectSpread$g({}, defaultProps$2), rectangleProps);
    var pathRef = reactExports.useRef();
    var _useState = reactExports.useState(-1), _useState2 = _slicedToArray$3(_useState, 2), totalLength = _useState2[0], setTotalLength = _useState2[1];
    reactExports.useEffect(function() {
      if (pathRef.current && pathRef.current.getTotalLength) {
        try {
          var pathTotalLength = pathRef.current.getTotalLength();
          if (pathTotalLength) {
            setTotalLength(pathTotalLength);
          }
        } catch (err) {
        }
      }
    }, []);
    var x2 = props.x, y2 = props.y, width = props.width, height = props.height, radius = props.radius, className = props.className;
    var animationEasing = props.animationEasing, animationDuration = props.animationDuration, animationBegin = props.animationBegin, isAnimationActive = props.isAnimationActive, isUpdateAnimationActive = props.isUpdateAnimationActive;
    if (x2 !== +x2 || y2 !== +y2 || width !== +width || height !== +height || width === 0 || height === 0) {
      return null;
    }
    var layerClass = clsx("recharts-rectangle", className);
    if (!isUpdateAnimationActive) {
      return React.createElement("path", _extends$e({}, filterProps(props, true), {
        className: layerClass,
        d: getRectanglePath(x2, y2, width, height, radius)
      }));
    }
    return React.createElement(Animate, {
      canBegin: totalLength > 0,
      from: {
        width,
        height,
        x: x2,
        y: y2
      },
      to: {
        width,
        height,
        x: x2,
        y: y2
      },
      duration: animationDuration,
      animationEasing,
      isActive: isUpdateAnimationActive
    }, function(_ref) {
      var currWidth = _ref.width, currHeight = _ref.height, currX = _ref.x, currY = _ref.y;
      return React.createElement(Animate, {
        canBegin: totalLength > 0,
        from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px"),
        to: "".concat(totalLength, "px 0px"),
        attributeName: "strokeDasharray",
        begin: animationBegin,
        duration: animationDuration,
        isActive: isAnimationActive,
        easing: animationEasing
      }, React.createElement("path", _extends$e({}, filterProps(props, true), {
        className: layerClass,
        d: getRectanglePath(currX, currY, currWidth, currHeight, radius),
        ref: pathRef
      })));
    });
  };
  function _extends$d() {
    _extends$d = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$d.apply(this, arguments);
  }
  var Dot = function Dot2(props) {
    var cx = props.cx, cy = props.cy, r = props.r, className = props.className;
    var layerClass = clsx("recharts-dot", className);
    if (cx === +cx && cy === +cy && r === +r) {
      return React.createElement("circle", _extends$d({}, filterProps(props, false), adaptEventHandlers(props), {
        className: layerClass,
        cx,
        cy,
        r
      }));
    }
    return null;
  };
  function _typeof$i(o) {
    "@babel/helpers - typeof";
    return _typeof$i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$i(o);
  }
  var _excluded$6 = [
    "x",
    "y",
    "top",
    "left",
    "width",
    "height",
    "className"
  ];
  function _extends$c() {
    _extends$c = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$c.apply(this, arguments);
  }
  function ownKeys$f(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$f(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$f(Object(t2), true).forEach(function(r2) {
        _defineProperty$i(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$f(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$i(obj, key, value) {
    key = _toPropertyKey$i(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$i(t2) {
    var i = _toPrimitive$i(t2, "string");
    return "symbol" == _typeof$i(i) ? i : i + "";
  }
  function _toPrimitive$i(t2, r) {
    if ("object" != _typeof$i(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$i(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _objectWithoutProperties$6(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$6(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$6(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var getPath = function getPath2(x2, y2, width, height, top, left) {
    return "M".concat(x2, ",").concat(top, "v").concat(height, "M").concat(left, ",").concat(y2, "h").concat(width);
  };
  var Cross = function Cross2(_ref) {
    var _ref$x = _ref.x, x2 = _ref$x === void 0 ? 0 : _ref$x, _ref$y = _ref.y, y2 = _ref$y === void 0 ? 0 : _ref$y, _ref$top = _ref.top, top = _ref$top === void 0 ? 0 : _ref$top, _ref$left = _ref.left, left = _ref$left === void 0 ? 0 : _ref$left, _ref$width = _ref.width, width = _ref$width === void 0 ? 0 : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? 0 : _ref$height, className = _ref.className, rest = _objectWithoutProperties$6(_ref, _excluded$6);
    var props = _objectSpread$f({
      x: x2,
      y: y2,
      top,
      left,
      width,
      height
    }, rest);
    if (!isNumber(x2) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || !isNumber(top) || !isNumber(left)) {
      return null;
    }
    return React.createElement("path", _extends$c({}, filterProps(props, true), {
      className: clsx("recharts-cross", className),
      d: getPath(x2, y2, width, height, top, left)
    }));
  };
  var baseGetTag$1 = _baseGetTag, getPrototype = _getPrototype, isObjectLike$1 = isObjectLike_1;
  var objectTag = "[object Object]";
  var funcProto = Function.prototype, objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);
  function isPlainObject(value) {
    if (!isObjectLike$1(value) || baseGetTag$1(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  isPlainObject_1 = isPlainObject;
  const isPlainObject$1 = getDefaultExportFromCjs(isPlainObject_1);
  var baseGetTag = _baseGetTag, isObjectLike = isObjectLike_1;
  var boolTag = "[object Boolean]";
  function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
  }
  var isBoolean_1 = isBoolean;
  const isBoolean$1 = getDefaultExportFromCjs(isBoolean_1);
  function _typeof$h(o) {
    "@babel/helpers - typeof";
    return _typeof$h = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$h(o);
  }
  function _extends$b() {
    _extends$b = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$b.apply(this, arguments);
  }
  function _slicedToArray$2(arr, i) {
    return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest$2();
  }
  function _nonIterableRest$2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$3(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$3(o, minLen);
  }
  function _arrayLikeToArray$3(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$2(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function ownKeys$e(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$e(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$e(Object(t2), true).forEach(function(r2) {
        _defineProperty$h(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$e(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$h(obj, key, value) {
    key = _toPropertyKey$h(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$h(t2) {
    var i = _toPrimitive$h(t2, "string");
    return "symbol" == _typeof$h(i) ? i : i + "";
  }
  function _toPrimitive$h(t2, r) {
    if ("object" != _typeof$h(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$h(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var getTrapezoidPath = function getTrapezoidPath2(x2, y2, upperWidth, lowerWidth, height) {
    var widthGap = upperWidth - lowerWidth;
    var path;
    path = "M ".concat(x2, ",").concat(y2);
    path += "L ".concat(x2 + upperWidth, ",").concat(y2);
    path += "L ".concat(x2 + upperWidth - widthGap / 2, ",").concat(y2 + height);
    path += "L ".concat(x2 + upperWidth - widthGap / 2 - lowerWidth, ",").concat(y2 + height);
    path += "L ".concat(x2, ",").concat(y2, " Z");
    return path;
  };
  var defaultProps$1 = {
    x: 0,
    y: 0,
    upperWidth: 0,
    lowerWidth: 0,
    height: 0,
    isUpdateAnimationActive: false,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: "ease"
  };
  var Trapezoid = function Trapezoid2(props) {
    var trapezoidProps = _objectSpread$e(_objectSpread$e({}, defaultProps$1), props);
    var pathRef = reactExports.useRef();
    var _useState = reactExports.useState(-1), _useState2 = _slicedToArray$2(_useState, 2), totalLength = _useState2[0], setTotalLength = _useState2[1];
    reactExports.useEffect(function() {
      if (pathRef.current && pathRef.current.getTotalLength) {
        try {
          var pathTotalLength = pathRef.current.getTotalLength();
          if (pathTotalLength) {
            setTotalLength(pathTotalLength);
          }
        } catch (err) {
        }
      }
    }, []);
    var x2 = trapezoidProps.x, y2 = trapezoidProps.y, upperWidth = trapezoidProps.upperWidth, lowerWidth = trapezoidProps.lowerWidth, height = trapezoidProps.height, className = trapezoidProps.className;
    var animationEasing = trapezoidProps.animationEasing, animationDuration = trapezoidProps.animationDuration, animationBegin = trapezoidProps.animationBegin, isUpdateAnimationActive = trapezoidProps.isUpdateAnimationActive;
    if (x2 !== +x2 || y2 !== +y2 || upperWidth !== +upperWidth || lowerWidth !== +lowerWidth || height !== +height || upperWidth === 0 && lowerWidth === 0 || height === 0) {
      return null;
    }
    var layerClass = clsx("recharts-trapezoid", className);
    if (!isUpdateAnimationActive) {
      return React.createElement("g", null, React.createElement("path", _extends$b({}, filterProps(trapezoidProps, true), {
        className: layerClass,
        d: getTrapezoidPath(x2, y2, upperWidth, lowerWidth, height)
      })));
    }
    return React.createElement(Animate, {
      canBegin: totalLength > 0,
      from: {
        upperWidth: 0,
        lowerWidth: 0,
        height,
        x: x2,
        y: y2
      },
      to: {
        upperWidth,
        lowerWidth,
        height,
        x: x2,
        y: y2
      },
      duration: animationDuration,
      animationEasing,
      isActive: isUpdateAnimationActive
    }, function(_ref) {
      var currUpperWidth = _ref.upperWidth, currLowerWidth = _ref.lowerWidth, currHeight = _ref.height, currX = _ref.x, currY = _ref.y;
      return React.createElement(Animate, {
        canBegin: totalLength > 0,
        from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px"),
        to: "".concat(totalLength, "px 0px"),
        attributeName: "strokeDasharray",
        begin: animationBegin,
        duration: animationDuration,
        easing: animationEasing
      }, React.createElement("path", _extends$b({}, filterProps(trapezoidProps, true), {
        className: layerClass,
        d: getTrapezoidPath(currX, currY, currUpperWidth, currLowerWidth, currHeight),
        ref: pathRef
      })));
    });
  };
  var _excluded$5 = [
    "option",
    "shapeType",
    "propTransformer",
    "activeClassName",
    "isActive"
  ];
  function _typeof$g(o) {
    "@babel/helpers - typeof";
    return _typeof$g = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$g(o);
  }
  function _objectWithoutProperties$5(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$5(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$5(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function ownKeys$d(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$d(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$d(Object(t2), true).forEach(function(r2) {
        _defineProperty$g(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$d(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$g(obj, key, value) {
    key = _toPropertyKey$g(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$g(t2) {
    var i = _toPrimitive$g(t2, "string");
    return "symbol" == _typeof$g(i) ? i : i + "";
  }
  function _toPrimitive$g(t2, r) {
    if ("object" != _typeof$g(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$g(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function defaultPropTransformer(option, props) {
    return _objectSpread$d(_objectSpread$d({}, props), option);
  }
  function isSymbolsProps(shapeType, _elementProps) {
    return shapeType === "symbols";
  }
  function ShapeSelector(_ref) {
    var shapeType = _ref.shapeType, elementProps = _ref.elementProps;
    switch (shapeType) {
      case "rectangle":
        return React.createElement(Rectangle, elementProps);
      case "trapezoid":
        return React.createElement(Trapezoid, elementProps);
      case "sector":
        return React.createElement(Sector, elementProps);
      case "symbols":
        if (isSymbolsProps(shapeType)) {
          return React.createElement(Symbols, elementProps);
        }
        break;
      default:
        return null;
    }
  }
  function getPropsFromShapeOption(option) {
    if (reactExports.isValidElement(option)) {
      return option.props;
    }
    return option;
  }
  function Shape(_ref2) {
    var option = _ref2.option, shapeType = _ref2.shapeType, _ref2$propTransformer = _ref2.propTransformer, propTransformer = _ref2$propTransformer === void 0 ? defaultPropTransformer : _ref2$propTransformer, _ref2$activeClassName = _ref2.activeClassName, activeClassName = _ref2$activeClassName === void 0 ? "recharts-active-shape" : _ref2$activeClassName, isActive = _ref2.isActive, props = _objectWithoutProperties$5(_ref2, _excluded$5);
    var shape;
    if (reactExports.isValidElement(option)) {
      shape = reactExports.cloneElement(option, _objectSpread$d(_objectSpread$d({}, props), getPropsFromShapeOption(option)));
    } else if (isFunction(option)) {
      shape = option(props);
    } else if (isPlainObject$1(option) && !isBoolean$1(option)) {
      var nextProps = propTransformer(option, props);
      shape = React.createElement(ShapeSelector, {
        shapeType,
        elementProps: nextProps
      });
    } else {
      var elementProps = props;
      shape = React.createElement(ShapeSelector, {
        shapeType,
        elementProps
      });
    }
    if (isActive) {
      return React.createElement(Layer, {
        className: activeClassName
      }, shape);
    }
    return shape;
  }
  function isFunnel(graphicalItem, _item) {
    return _item != null && "trapezoids" in graphicalItem.props;
  }
  function isPie(graphicalItem, _item) {
    return _item != null && "sectors" in graphicalItem.props;
  }
  function isScatter(graphicalItem, _item) {
    return _item != null && "points" in graphicalItem.props;
  }
  function compareFunnel(shapeData, activeTooltipItem) {
    var _activeTooltipItem$la, _activeTooltipItem$la2;
    var xMatches = shapeData.x === (activeTooltipItem === null || activeTooltipItem === void 0 || (_activeTooltipItem$la = activeTooltipItem.labelViewBox) === null || _activeTooltipItem$la === void 0 ? void 0 : _activeTooltipItem$la.x) || shapeData.x === activeTooltipItem.x;
    var yMatches = shapeData.y === (activeTooltipItem === null || activeTooltipItem === void 0 || (_activeTooltipItem$la2 = activeTooltipItem.labelViewBox) === null || _activeTooltipItem$la2 === void 0 ? void 0 : _activeTooltipItem$la2.y) || shapeData.y === activeTooltipItem.y;
    return xMatches && yMatches;
  }
  function comparePie(shapeData, activeTooltipItem) {
    var startAngleMatches = shapeData.endAngle === activeTooltipItem.endAngle;
    var endAngleMatches = shapeData.startAngle === activeTooltipItem.startAngle;
    return startAngleMatches && endAngleMatches;
  }
  function compareScatter(shapeData, activeTooltipItem) {
    var xMatches = shapeData.x === activeTooltipItem.x;
    var yMatches = shapeData.y === activeTooltipItem.y;
    var zMatches = shapeData.z === activeTooltipItem.z;
    return xMatches && yMatches && zMatches;
  }
  function getComparisonFn(graphicalItem, activeItem) {
    var comparison;
    if (isFunnel(graphicalItem, activeItem)) {
      comparison = compareFunnel;
    } else if (isPie(graphicalItem, activeItem)) {
      comparison = comparePie;
    } else if (isScatter(graphicalItem, activeItem)) {
      comparison = compareScatter;
    }
    return comparison;
  }
  function getShapeDataKey(graphicalItem, activeItem) {
    var shapeKey;
    if (isFunnel(graphicalItem, activeItem)) {
      shapeKey = "trapezoids";
    } else if (isPie(graphicalItem, activeItem)) {
      shapeKey = "sectors";
    } else if (isScatter(graphicalItem, activeItem)) {
      shapeKey = "points";
    }
    return shapeKey;
  }
  function getActiveShapeTooltipPayload(graphicalItem, activeItem) {
    if (isFunnel(graphicalItem, activeItem)) {
      var _activeItem$tooltipPa;
      return (_activeItem$tooltipPa = activeItem.tooltipPayload) === null || _activeItem$tooltipPa === void 0 || (_activeItem$tooltipPa = _activeItem$tooltipPa[0]) === null || _activeItem$tooltipPa === void 0 || (_activeItem$tooltipPa = _activeItem$tooltipPa.payload) === null || _activeItem$tooltipPa === void 0 ? void 0 : _activeItem$tooltipPa.payload;
    }
    if (isPie(graphicalItem, activeItem)) {
      var _activeItem$tooltipPa2;
      return (_activeItem$tooltipPa2 = activeItem.tooltipPayload) === null || _activeItem$tooltipPa2 === void 0 || (_activeItem$tooltipPa2 = _activeItem$tooltipPa2[0]) === null || _activeItem$tooltipPa2 === void 0 || (_activeItem$tooltipPa2 = _activeItem$tooltipPa2.payload) === null || _activeItem$tooltipPa2 === void 0 ? void 0 : _activeItem$tooltipPa2.payload;
    }
    if (isScatter(graphicalItem, activeItem)) {
      return activeItem.payload;
    }
    return {};
  }
  function getActiveShapeIndexForTooltip(_ref3) {
    var activeTooltipItem = _ref3.activeTooltipItem, graphicalItem = _ref3.graphicalItem, itemData = _ref3.itemData;
    var shapeKey = getShapeDataKey(graphicalItem, activeTooltipItem);
    var tooltipPayload = getActiveShapeTooltipPayload(graphicalItem, activeTooltipItem);
    var activeItemMatches = itemData.filter(function(datum, dataIndex) {
      var valuesMatch = isEqual$1(tooltipPayload, datum);
      var mouseCoordinateMatches = graphicalItem.props[shapeKey].filter(function(shapeData) {
        var comparison = getComparisonFn(graphicalItem, activeTooltipItem);
        return comparison(shapeData, activeTooltipItem);
      });
      var indexOfMouseCoordinates = graphicalItem.props[shapeKey].indexOf(mouseCoordinateMatches[mouseCoordinateMatches.length - 1]);
      var coordinatesMatch = dataIndex === indexOfMouseCoordinates;
      return valuesMatch && coordinatesMatch;
    });
    var activeIndex = itemData.indexOf(activeItemMatches[activeItemMatches.length - 1]);
    return activeIndex;
  }
  var nativeCeil$1 = Math.ceil, nativeMax$2 = Math.max;
  function baseRange$1(start, end, step, fromRight) {
    var index2 = -1, length = nativeMax$2(nativeCeil$1((end - start) / (step || 1)), 0), result = Array(length);
    while (length--) {
      result[fromRight ? length : ++index2] = start;
      start += step;
    }
    return result;
  }
  var _baseRange = baseRange$1;
  var toNumber = toNumber_1;
  var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
  function toFinite$2(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign2 = value < 0 ? -1 : 1;
      return sign2 * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  var toFinite_1 = toFinite$2;
  var baseRange = _baseRange, isIterateeCall$3 = _isIterateeCall, toFinite$1 = toFinite_1;
  function createRange$1(fromRight) {
    return function(start, end, step) {
      if (step && typeof step != "number" && isIterateeCall$3(start, end, step)) {
        end = step = void 0;
      }
      start = toFinite$1(start);
      if (end === void 0) {
        end = start;
        start = 0;
      } else {
        end = toFinite$1(end);
      }
      step = step === void 0 ? start < end ? 1 : -1 : toFinite$1(step);
      return baseRange(start, end, step, fromRight);
    };
  }
  var _createRange = createRange$1;
  var createRange = _createRange;
  var range = createRange();
  var range_1 = range;
  const range$1 = getDefaultExportFromCjs(range_1);
  function _typeof$f(o) {
    "@babel/helpers - typeof";
    return _typeof$f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$f(o);
  }
  function ownKeys$c(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$c(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$c(Object(t2), true).forEach(function(r2) {
        _defineProperty$f(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$c(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$f(obj, key, value) {
    key = _toPropertyKey$f(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$f(t2) {
    var i = _toPrimitive$f(t2, "string");
    return "symbol" == _typeof$f(i) ? i : i + "";
  }
  function _toPrimitive$f(t2, r) {
    if ("object" != _typeof$f(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$f(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var PREFIX_LIST = [
    "Webkit",
    "Moz",
    "O",
    "ms"
  ];
  var generatePrefixStyle = function generatePrefixStyle2(name, value) {
    var camelName = name.replace(/(\w)/, function(v2) {
      return v2.toUpperCase();
    });
    var result = PREFIX_LIST.reduce(function(res, entry) {
      return _objectSpread$c(_objectSpread$c({}, res), {}, _defineProperty$f({}, entry + camelName, value));
    }, {});
    result[name] = value;
    return result;
  };
  function _typeof$e(o) {
    "@babel/helpers - typeof";
    return _typeof$e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$e(o);
  }
  function _extends$a() {
    _extends$a = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$a.apply(this, arguments);
  }
  function ownKeys$b(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$b(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$b(Object(t2), true).forEach(function(r2) {
        _defineProperty$e(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$b(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$a(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$a(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$e(descriptor.key), descriptor);
    }
  }
  function _createClass$a(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$a(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$a(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$8(t2, o, e3) {
    return o = _getPrototypeOf$8(o), _possibleConstructorReturn$8(t2, _isNativeReflectConstruct$8() ? Reflect.construct(o, e3 || [], _getPrototypeOf$8(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$8(self, call) {
    if (call && (_typeof$e(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$8(self);
  }
  function _assertThisInitialized$8(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$8() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$8(o) {
    _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$8(o);
  }
  function _inherits$8(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$8(subClass, superClass);
  }
  function _setPrototypeOf$8(o, p2) {
    _setPrototypeOf$8 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$8(o, p2);
  }
  function _defineProperty$e(obj, key, value) {
    key = _toPropertyKey$e(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$e(t2) {
    var i = _toPrimitive$e(t2, "string");
    return "symbol" == _typeof$e(i) ? i : i + "";
  }
  function _toPrimitive$e(t2, r) {
    if ("object" != _typeof$e(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$e(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var createScale = function createScale2(_ref) {
    var data = _ref.data, startIndex = _ref.startIndex, endIndex = _ref.endIndex, x2 = _ref.x, width = _ref.width, travellerWidth = _ref.travellerWidth;
    if (!data || !data.length) {
      return {};
    }
    var len = data.length;
    var scale = point().domain(range$1(0, len)).range([
      x2,
      x2 + width - travellerWidth
    ]);
    var scaleValues = scale.domain().map(function(entry) {
      return scale(entry);
    });
    return {
      isTextActive: false,
      isSlideMoving: false,
      isTravellerMoving: false,
      isTravellerFocused: false,
      startX: scale(startIndex),
      endX: scale(endIndex),
      scale,
      scaleValues
    };
  };
  var isTouch = function isTouch2(e3) {
    return e3.changedTouches && !!e3.changedTouches.length;
  };
  var Brush = function(_PureComponent) {
    function Brush2(props) {
      var _this;
      _classCallCheck$a(this, Brush2);
      _this = _callSuper$8(this, Brush2, [
        props
      ]);
      _defineProperty$e(_this, "handleDrag", function(e3) {
        if (_this.leaveTimer) {
          clearTimeout(_this.leaveTimer);
          _this.leaveTimer = null;
        }
        if (_this.state.isTravellerMoving) {
          _this.handleTravellerMove(e3);
        } else if (_this.state.isSlideMoving) {
          _this.handleSlideDrag(e3);
        }
      });
      _defineProperty$e(_this, "handleTouchMove", function(e3) {
        if (e3.changedTouches != null && e3.changedTouches.length > 0) {
          _this.handleDrag(e3.changedTouches[0]);
        }
      });
      _defineProperty$e(_this, "handleDragEnd", function() {
        _this.setState({
          isTravellerMoving: false,
          isSlideMoving: false
        }, function() {
          var _this$props = _this.props, endIndex = _this$props.endIndex, onDragEnd = _this$props.onDragEnd, startIndex = _this$props.startIndex;
          onDragEnd === null || onDragEnd === void 0 || onDragEnd({
            endIndex,
            startIndex
          });
        });
        _this.detachDragEndListener();
      });
      _defineProperty$e(_this, "handleLeaveWrapper", function() {
        if (_this.state.isTravellerMoving || _this.state.isSlideMoving) {
          _this.leaveTimer = window.setTimeout(_this.handleDragEnd, _this.props.leaveTimeOut);
        }
      });
      _defineProperty$e(_this, "handleEnterSlideOrTraveller", function() {
        _this.setState({
          isTextActive: true
        });
      });
      _defineProperty$e(_this, "handleLeaveSlideOrTraveller", function() {
        _this.setState({
          isTextActive: false
        });
      });
      _defineProperty$e(_this, "handleSlideDragStart", function(e3) {
        var event = isTouch(e3) ? e3.changedTouches[0] : e3;
        _this.setState({
          isTravellerMoving: false,
          isSlideMoving: true,
          slideMoveStartX: event.pageX
        });
        _this.attachDragEndListener();
      });
      _this.travellerDragStartHandlers = {
        startX: _this.handleTravellerDragStart.bind(_this, "startX"),
        endX: _this.handleTravellerDragStart.bind(_this, "endX")
      };
      _this.state = {};
      return _this;
    }
    _inherits$8(Brush2, _PureComponent);
    return _createClass$a(Brush2, [
      {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.leaveTimer) {
            clearTimeout(this.leaveTimer);
            this.leaveTimer = null;
          }
          this.detachDragEndListener();
        }
      },
      {
        key: "getIndex",
        value: function getIndex(_ref2) {
          var startX = _ref2.startX, endX = _ref2.endX;
          var scaleValues = this.state.scaleValues;
          var _this$props2 = this.props, gap = _this$props2.gap, data = _this$props2.data;
          var lastIndex = data.length - 1;
          var min2 = Math.min(startX, endX);
          var max2 = Math.max(startX, endX);
          var minIndex = Brush2.getIndexInRange(scaleValues, min2);
          var maxIndex = Brush2.getIndexInRange(scaleValues, max2);
          return {
            startIndex: minIndex - minIndex % gap,
            endIndex: maxIndex === lastIndex ? lastIndex : maxIndex - maxIndex % gap
          };
        }
      },
      {
        key: "getTextOfTick",
        value: function getTextOfTick(index2) {
          var _this$props3 = this.props, data = _this$props3.data, tickFormatter = _this$props3.tickFormatter, dataKey = _this$props3.dataKey;
          var text = getValueByDataKey(data[index2], dataKey, index2);
          return isFunction(tickFormatter) ? tickFormatter(text, index2) : text;
        }
      },
      {
        key: "attachDragEndListener",
        value: function attachDragEndListener() {
          window.addEventListener("mouseup", this.handleDragEnd, true);
          window.addEventListener("touchend", this.handleDragEnd, true);
          window.addEventListener("mousemove", this.handleDrag, true);
        }
      },
      {
        key: "detachDragEndListener",
        value: function detachDragEndListener() {
          window.removeEventListener("mouseup", this.handleDragEnd, true);
          window.removeEventListener("touchend", this.handleDragEnd, true);
          window.removeEventListener("mousemove", this.handleDrag, true);
        }
      },
      {
        key: "handleSlideDrag",
        value: function handleSlideDrag(e3) {
          var _this$state = this.state, slideMoveStartX = _this$state.slideMoveStartX, startX = _this$state.startX, endX = _this$state.endX;
          var _this$props4 = this.props, x2 = _this$props4.x, width = _this$props4.width, travellerWidth = _this$props4.travellerWidth, startIndex = _this$props4.startIndex, endIndex = _this$props4.endIndex, onChange = _this$props4.onChange;
          var delta = e3.pageX - slideMoveStartX;
          if (delta > 0) {
            delta = Math.min(delta, x2 + width - travellerWidth - endX, x2 + width - travellerWidth - startX);
          } else if (delta < 0) {
            delta = Math.max(delta, x2 - startX, x2 - endX);
          }
          var newIndex = this.getIndex({
            startX: startX + delta,
            endX: endX + delta
          });
          if ((newIndex.startIndex !== startIndex || newIndex.endIndex !== endIndex) && onChange) {
            onChange(newIndex);
          }
          this.setState({
            startX: startX + delta,
            endX: endX + delta,
            slideMoveStartX: e3.pageX
          });
        }
      },
      {
        key: "handleTravellerDragStart",
        value: function handleTravellerDragStart(id, e3) {
          var event = isTouch(e3) ? e3.changedTouches[0] : e3;
          this.setState({
            isSlideMoving: false,
            isTravellerMoving: true,
            movingTravellerId: id,
            brushMoveStartX: event.pageX
          });
          this.attachDragEndListener();
        }
      },
      {
        key: "handleTravellerMove",
        value: function handleTravellerMove(e3) {
          var _this$state2 = this.state, brushMoveStartX = _this$state2.brushMoveStartX, movingTravellerId = _this$state2.movingTravellerId, endX = _this$state2.endX, startX = _this$state2.startX;
          var prevValue = this.state[movingTravellerId];
          var _this$props5 = this.props, x2 = _this$props5.x, width = _this$props5.width, travellerWidth = _this$props5.travellerWidth, onChange = _this$props5.onChange, gap = _this$props5.gap, data = _this$props5.data;
          var params = {
            startX: this.state.startX,
            endX: this.state.endX
          };
          var delta = e3.pageX - brushMoveStartX;
          if (delta > 0) {
            delta = Math.min(delta, x2 + width - travellerWidth - prevValue);
          } else if (delta < 0) {
            delta = Math.max(delta, x2 - prevValue);
          }
          params[movingTravellerId] = prevValue + delta;
          var newIndex = this.getIndex(params);
          var startIndex = newIndex.startIndex, endIndex = newIndex.endIndex;
          var isFullGap = function isFullGap2() {
            var lastIndex = data.length - 1;
            if (movingTravellerId === "startX" && (endX > startX ? startIndex % gap === 0 : endIndex % gap === 0) || endX < startX && endIndex === lastIndex || movingTravellerId === "endX" && (endX > startX ? endIndex % gap === 0 : startIndex % gap === 0) || endX > startX && endIndex === lastIndex) {
              return true;
            }
            return false;
          };
          this.setState(_defineProperty$e(_defineProperty$e({}, movingTravellerId, prevValue + delta), "brushMoveStartX", e3.pageX), function() {
            if (onChange) {
              if (isFullGap()) {
                onChange(newIndex);
              }
            }
          });
        }
      },
      {
        key: "handleTravellerMoveKeyboard",
        value: function handleTravellerMoveKeyboard(direction, id) {
          var _this2 = this;
          var _this$state3 = this.state, scaleValues = _this$state3.scaleValues, startX = _this$state3.startX, endX = _this$state3.endX;
          var currentScaleValue = this.state[id];
          var currentIndex = scaleValues.indexOf(currentScaleValue);
          if (currentIndex === -1) {
            return;
          }
          var newIndex = currentIndex + direction;
          if (newIndex === -1 || newIndex >= scaleValues.length) {
            return;
          }
          var newScaleValue = scaleValues[newIndex];
          if (id === "startX" && newScaleValue >= endX || id === "endX" && newScaleValue <= startX) {
            return;
          }
          this.setState(_defineProperty$e({}, id, newScaleValue), function() {
            _this2.props.onChange(_this2.getIndex({
              startX: _this2.state.startX,
              endX: _this2.state.endX
            }));
          });
        }
      },
      {
        key: "renderBackground",
        value: function renderBackground() {
          var _this$props6 = this.props, x2 = _this$props6.x, y2 = _this$props6.y, width = _this$props6.width, height = _this$props6.height, fill = _this$props6.fill, stroke = _this$props6.stroke;
          return React.createElement("rect", {
            stroke,
            fill,
            x: x2,
            y: y2,
            width,
            height
          });
        }
      },
      {
        key: "renderPanorama",
        value: function renderPanorama() {
          var _this$props7 = this.props, x2 = _this$props7.x, y2 = _this$props7.y, width = _this$props7.width, height = _this$props7.height, data = _this$props7.data, children = _this$props7.children, padding = _this$props7.padding;
          var chartElement = reactExports.Children.only(children);
          if (!chartElement) {
            return null;
          }
          return React.cloneElement(chartElement, {
            x: x2,
            y: y2,
            width,
            height,
            margin: padding,
            compact: true,
            data
          });
        }
      },
      {
        key: "renderTravellerLayer",
        value: function renderTravellerLayer(travellerX, id) {
          var _data$startIndex, _data$endIndex, _this3 = this;
          var _this$props8 = this.props, y2 = _this$props8.y, travellerWidth = _this$props8.travellerWidth, height = _this$props8.height, traveller = _this$props8.traveller, ariaLabel = _this$props8.ariaLabel, data = _this$props8.data, startIndex = _this$props8.startIndex, endIndex = _this$props8.endIndex;
          var x2 = Math.max(travellerX, this.props.x);
          var travellerProps = _objectSpread$b(_objectSpread$b({}, filterProps(this.props, false)), {}, {
            x: x2,
            y: y2,
            width: travellerWidth,
            height
          });
          var ariaLabelBrush = ariaLabel || "Min value: ".concat((_data$startIndex = data[startIndex]) === null || _data$startIndex === void 0 ? void 0 : _data$startIndex.name, ", Max value: ").concat((_data$endIndex = data[endIndex]) === null || _data$endIndex === void 0 ? void 0 : _data$endIndex.name);
          return React.createElement(Layer, {
            tabIndex: 0,
            role: "slider",
            "aria-label": ariaLabelBrush,
            "aria-valuenow": travellerX,
            className: "recharts-brush-traveller",
            onMouseEnter: this.handleEnterSlideOrTraveller,
            onMouseLeave: this.handleLeaveSlideOrTraveller,
            onMouseDown: this.travellerDragStartHandlers[id],
            onTouchStart: this.travellerDragStartHandlers[id],
            onKeyDown: function onKeyDown(e3) {
              if (![
                "ArrowLeft",
                "ArrowRight"
              ].includes(e3.key)) {
                return;
              }
              e3.preventDefault();
              e3.stopPropagation();
              _this3.handleTravellerMoveKeyboard(e3.key === "ArrowRight" ? 1 : -1, id);
            },
            onFocus: function onFocus() {
              _this3.setState({
                isTravellerFocused: true
              });
            },
            onBlur: function onBlur() {
              _this3.setState({
                isTravellerFocused: false
              });
            },
            style: {
              cursor: "col-resize"
            }
          }, Brush2.renderTraveller(traveller, travellerProps));
        }
      },
      {
        key: "renderSlide",
        value: function renderSlide(startX, endX) {
          var _this$props9 = this.props, y2 = _this$props9.y, height = _this$props9.height, stroke = _this$props9.stroke, travellerWidth = _this$props9.travellerWidth;
          var x2 = Math.min(startX, endX) + travellerWidth;
          var width = Math.max(Math.abs(endX - startX) - travellerWidth, 0);
          return React.createElement("rect", {
            className: "recharts-brush-slide",
            onMouseEnter: this.handleEnterSlideOrTraveller,
            onMouseLeave: this.handleLeaveSlideOrTraveller,
            onMouseDown: this.handleSlideDragStart,
            onTouchStart: this.handleSlideDragStart,
            style: {
              cursor: "move"
            },
            stroke: "none",
            fill: stroke,
            fillOpacity: 0.2,
            x: x2,
            y: y2,
            width,
            height
          });
        }
      },
      {
        key: "renderText",
        value: function renderText() {
          var _this$props10 = this.props, startIndex = _this$props10.startIndex, endIndex = _this$props10.endIndex, y2 = _this$props10.y, height = _this$props10.height, travellerWidth = _this$props10.travellerWidth, stroke = _this$props10.stroke;
          var _this$state4 = this.state, startX = _this$state4.startX, endX = _this$state4.endX;
          var offset = 5;
          var attrs = {
            pointerEvents: "none",
            fill: stroke
          };
          return React.createElement(Layer, {
            className: "recharts-brush-texts"
          }, React.createElement(Text, _extends$a({
            textAnchor: "end",
            verticalAnchor: "middle",
            x: Math.min(startX, endX) - offset,
            y: y2 + height / 2
          }, attrs), this.getTextOfTick(startIndex)), React.createElement(Text, _extends$a({
            textAnchor: "start",
            verticalAnchor: "middle",
            x: Math.max(startX, endX) + travellerWidth + offset,
            y: y2 + height / 2
          }, attrs), this.getTextOfTick(endIndex)));
        }
      },
      {
        key: "render",
        value: function render() {
          var _this$props11 = this.props, data = _this$props11.data, className = _this$props11.className, children = _this$props11.children, x2 = _this$props11.x, y2 = _this$props11.y, width = _this$props11.width, height = _this$props11.height, alwaysShowText = _this$props11.alwaysShowText;
          var _this$state5 = this.state, startX = _this$state5.startX, endX = _this$state5.endX, isTextActive = _this$state5.isTextActive, isSlideMoving = _this$state5.isSlideMoving, isTravellerMoving = _this$state5.isTravellerMoving, isTravellerFocused = _this$state5.isTravellerFocused;
          if (!data || !data.length || !isNumber(x2) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || width <= 0 || height <= 0) {
            return null;
          }
          var layerClass = clsx("recharts-brush", className);
          var isPanoramic = React.Children.count(children) === 1;
          var style = generatePrefixStyle("userSelect", "none");
          return React.createElement(Layer, {
            className: layerClass,
            onMouseLeave: this.handleLeaveWrapper,
            onTouchMove: this.handleTouchMove,
            style
          }, this.renderBackground(), isPanoramic && this.renderPanorama(), this.renderSlide(startX, endX), this.renderTravellerLayer(startX, "startX"), this.renderTravellerLayer(endX, "endX"), (isTextActive || isSlideMoving || isTravellerMoving || isTravellerFocused || alwaysShowText) && this.renderText());
        }
      }
    ], [
      {
        key: "renderDefaultTraveller",
        value: function renderDefaultTraveller(props) {
          var x2 = props.x, y2 = props.y, width = props.width, height = props.height, stroke = props.stroke;
          var lineY = Math.floor(y2 + height / 2) - 1;
          return React.createElement(React.Fragment, null, React.createElement("rect", {
            x: x2,
            y: y2,
            width,
            height,
            fill: stroke,
            stroke: "none"
          }), React.createElement("line", {
            x1: x2 + 1,
            y1: lineY,
            x2: x2 + width - 1,
            y2: lineY,
            fill: "none",
            stroke: "#fff"
          }), React.createElement("line", {
            x1: x2 + 1,
            y1: lineY + 2,
            x2: x2 + width - 1,
            y2: lineY + 2,
            fill: "none",
            stroke: "#fff"
          }));
        }
      },
      {
        key: "renderTraveller",
        value: function renderTraveller(option, props) {
          var rectangle;
          if (React.isValidElement(option)) {
            rectangle = React.cloneElement(option, props);
          } else if (isFunction(option)) {
            rectangle = option(props);
          } else {
            rectangle = Brush2.renderDefaultTraveller(props);
          }
          return rectangle;
        }
      },
      {
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var data = nextProps.data, width = nextProps.width, x2 = nextProps.x, travellerWidth = nextProps.travellerWidth, updateId = nextProps.updateId, startIndex = nextProps.startIndex, endIndex = nextProps.endIndex;
          if (data !== prevState.prevData || updateId !== prevState.prevUpdateId) {
            return _objectSpread$b({
              prevData: data,
              prevTravellerWidth: travellerWidth,
              prevUpdateId: updateId,
              prevX: x2,
              prevWidth: width
            }, data && data.length ? createScale({
              data,
              width,
              x: x2,
              travellerWidth,
              startIndex,
              endIndex
            }) : {
              scale: null,
              scaleValues: null
            });
          }
          if (prevState.scale && (width !== prevState.prevWidth || x2 !== prevState.prevX || travellerWidth !== prevState.prevTravellerWidth)) {
            prevState.scale.range([
              x2,
              x2 + width - travellerWidth
            ]);
            var scaleValues = prevState.scale.domain().map(function(entry) {
              return prevState.scale(entry);
            });
            return {
              prevData: data,
              prevTravellerWidth: travellerWidth,
              prevUpdateId: updateId,
              prevX: x2,
              prevWidth: width,
              startX: prevState.scale(nextProps.startIndex),
              endX: prevState.scale(nextProps.endIndex),
              scaleValues
            };
          }
          return null;
        }
      },
      {
        key: "getIndexInRange",
        value: function getIndexInRange(valueRange, x2) {
          var len = valueRange.length;
          var start = 0;
          var end = len - 1;
          while (end - start > 1) {
            var middle = Math.floor((start + end) / 2);
            if (valueRange[middle] > x2) {
              end = middle;
            } else {
              start = middle;
            }
          }
          return x2 >= valueRange[end] ? end : start;
        }
      }
    ]);
  }(reactExports.PureComponent);
  _defineProperty$e(Brush, "displayName", "Brush");
  _defineProperty$e(Brush, "defaultProps", {
    height: 40,
    travellerWidth: 5,
    gap: 1,
    fill: "#fff",
    stroke: "#666",
    padding: {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    },
    leaveTimeOut: 1e3,
    alwaysShowText: false
  });
  var baseEach$1 = _baseEach;
  function baseSome$1(collection, predicate) {
    var result;
    baseEach$1(collection, function(value, index2, collection2) {
      result = predicate(value, index2, collection2);
      return !result;
    });
    return !!result;
  }
  var _baseSome = baseSome$1;
  var arraySome = _arraySome, baseIteratee$4 = _baseIteratee, baseSome = _baseSome, isArray$1 = isArray_1, isIterateeCall$2 = _isIterateeCall;
  function some(collection, predicate, guard) {
    var func = isArray$1(collection) ? arraySome : baseSome;
    if (guard && isIterateeCall$2(collection, predicate, guard)) {
      predicate = void 0;
    }
    return func(collection, baseIteratee$4(predicate));
  }
  var some_1 = some;
  const some$1 = getDefaultExportFromCjs(some_1);
  var ifOverflowMatches = function ifOverflowMatches2(props, value) {
    var alwaysShow = props.alwaysShow;
    var ifOverflow = props.ifOverflow;
    if (alwaysShow) {
      ifOverflow = "extendDomain";
    }
    return ifOverflow === value;
  };
  var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee$3 = _baseIteratee;
  function mapValues(object2, iteratee) {
    var result = {};
    iteratee = baseIteratee$3(iteratee);
    baseForOwn(object2, function(value, key, object3) {
      baseAssignValue(result, key, iteratee(value, key, object3));
    });
    return result;
  }
  var mapValues_1 = mapValues;
  const mapValues$1 = getDefaultExportFromCjs(mapValues_1);
  function arrayEvery$1(array2, predicate) {
    var index2 = -1, length = array2 == null ? 0 : array2.length;
    while (++index2 < length) {
      if (!predicate(array2[index2], index2, array2)) {
        return false;
      }
    }
    return true;
  }
  var _arrayEvery = arrayEvery$1;
  var baseEach = _baseEach;
  function baseEvery$1(collection, predicate) {
    var result = true;
    baseEach(collection, function(value, index2, collection2) {
      result = !!predicate(value, index2, collection2);
      return result;
    });
    return result;
  }
  var _baseEvery = baseEvery$1;
  var arrayEvery = _arrayEvery, baseEvery = _baseEvery, baseIteratee$2 = _baseIteratee, isArray = isArray_1, isIterateeCall$1 = _isIterateeCall;
  function every(collection, predicate, guard) {
    var func = isArray(collection) ? arrayEvery : baseEvery;
    if (guard && isIterateeCall$1(collection, predicate, guard)) {
      predicate = void 0;
    }
    return func(collection, baseIteratee$2(predicate));
  }
  var every_1 = every;
  const every$1 = getDefaultExportFromCjs(every_1);
  var _excluded$4 = [
    "x",
    "y"
  ];
  function _typeof$d(o) {
    "@babel/helpers - typeof";
    return _typeof$d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$d(o);
  }
  function _extends$9() {
    _extends$9 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$9.apply(this, arguments);
  }
  function ownKeys$a(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$a(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$a(Object(t2), true).forEach(function(r2) {
        _defineProperty$d(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$a(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$d(obj, key, value) {
    key = _toPropertyKey$d(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$d(t2) {
    var i = _toPrimitive$d(t2, "string");
    return "symbol" == _typeof$d(i) ? i : i + "";
  }
  function _toPrimitive$d(t2, r) {
    if ("object" != _typeof$d(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$d(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _objectWithoutProperties$4(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$4(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$4(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function typeguardBarRectangleProps(_ref, props) {
    var xProp = _ref.x, yProp = _ref.y, option = _objectWithoutProperties$4(_ref, _excluded$4);
    var xValue = "".concat(xProp);
    var x2 = parseInt(xValue, 10);
    var yValue = "".concat(yProp);
    var y2 = parseInt(yValue, 10);
    var heightValue = "".concat(props.height || option.height);
    var height = parseInt(heightValue, 10);
    var widthValue = "".concat(props.width || option.width);
    var width = parseInt(widthValue, 10);
    return _objectSpread$a(_objectSpread$a(_objectSpread$a(_objectSpread$a(_objectSpread$a({}, props), option), x2 ? {
      x: x2
    } : {}), y2 ? {
      y: y2
    } : {}), {}, {
      height,
      width,
      name: props.name,
      radius: props.radius
    });
  }
  function BarRectangle(props) {
    return React.createElement(Shape, _extends$9({
      shapeType: "rectangle",
      propTransformer: typeguardBarRectangleProps,
      activeClassName: "recharts-active-bar"
    }, props));
  }
  var minPointSizeCallback = function minPointSizeCallback2(minPointSize) {
    var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return function(value, index2) {
      if (typeof minPointSize === "number") return minPointSize;
      var isValueNumber = typeof value === "number";
      if (isValueNumber) {
        return minPointSize(value, index2);
      }
      !isValueNumber ? invariant() : void 0;
      return defaultValue;
    };
  };
  var _excluded$3 = [
    "value",
    "background"
  ];
  var _Bar;
  function _typeof$c(o) {
    "@babel/helpers - typeof";
    return _typeof$c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$c(o);
  }
  function _objectWithoutProperties$3(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$3(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$3(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _extends$8() {
    _extends$8 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$8.apply(this, arguments);
  }
  function ownKeys$9(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$9(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$9(Object(t2), true).forEach(function(r2) {
        _defineProperty$c(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$9(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$9(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$9(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$c(descriptor.key), descriptor);
    }
  }
  function _createClass$9(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$9(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$9(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$7(t2, o, e3) {
    return o = _getPrototypeOf$7(o), _possibleConstructorReturn$7(t2, _isNativeReflectConstruct$7() ? Reflect.construct(o, e3 || [], _getPrototypeOf$7(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$7(self, call) {
    if (call && (_typeof$c(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$7(self);
  }
  function _assertThisInitialized$7(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$7() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$7(o) {
    _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$7(o);
  }
  function _inherits$7(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$7(subClass, superClass);
  }
  function _setPrototypeOf$7(o, p2) {
    _setPrototypeOf$7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$7(o, p2);
  }
  function _defineProperty$c(obj, key, value) {
    key = _toPropertyKey$c(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$c(t2) {
    var i = _toPrimitive$c(t2, "string");
    return "symbol" == _typeof$c(i) ? i : i + "";
  }
  function _toPrimitive$c(t2, r) {
    if ("object" != _typeof$c(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$c(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var Bar = function(_PureComponent) {
    function Bar2() {
      var _this;
      _classCallCheck$9(this, Bar2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper$7(this, Bar2, [].concat(args));
      _defineProperty$c(_this, "state", {
        isAnimationFinished: false
      });
      _defineProperty$c(_this, "id", uniqueId("recharts-bar-"));
      _defineProperty$c(_this, "handleAnimationEnd", function() {
        var onAnimationEnd = _this.props.onAnimationEnd;
        _this.setState({
          isAnimationFinished: true
        });
        if (onAnimationEnd) {
          onAnimationEnd();
        }
      });
      _defineProperty$c(_this, "handleAnimationStart", function() {
        var onAnimationStart = _this.props.onAnimationStart;
        _this.setState({
          isAnimationFinished: false
        });
        if (onAnimationStart) {
          onAnimationStart();
        }
      });
      return _this;
    }
    _inherits$7(Bar2, _PureComponent);
    return _createClass$9(Bar2, [
      {
        key: "renderRectanglesStatically",
        value: function renderRectanglesStatically(data) {
          var _this2 = this;
          var _this$props = this.props, shape = _this$props.shape, dataKey = _this$props.dataKey, activeIndex = _this$props.activeIndex, activeBar = _this$props.activeBar;
          var baseProps = filterProps(this.props, false);
          return data && data.map(function(entry, i) {
            var isActive = i === activeIndex;
            var option = isActive ? activeBar : shape;
            var props = _objectSpread$9(_objectSpread$9(_objectSpread$9({}, baseProps), entry), {}, {
              isActive,
              option,
              index: i,
              dataKey,
              onAnimationStart: _this2.handleAnimationStart,
              onAnimationEnd: _this2.handleAnimationEnd
            });
            return React.createElement(Layer, _extends$8({
              className: "recharts-bar-rectangle"
            }, adaptEventsOfChild(_this2.props, entry, i), {
              key: "rectangle-".concat(entry === null || entry === void 0 ? void 0 : entry.x, "-").concat(entry === null || entry === void 0 ? void 0 : entry.y, "-").concat(entry === null || entry === void 0 ? void 0 : entry.value)
            }), React.createElement(BarRectangle, props));
          });
        }
      },
      {
        key: "renderRectanglesWithAnimation",
        value: function renderRectanglesWithAnimation() {
          var _this3 = this;
          var _this$props2 = this.props, data = _this$props2.data, layout = _this$props2.layout, isAnimationActive = _this$props2.isAnimationActive, animationBegin = _this$props2.animationBegin, animationDuration = _this$props2.animationDuration, animationEasing = _this$props2.animationEasing, animationId = _this$props2.animationId;
          var prevData = this.state.prevData;
          return React.createElement(Animate, {
            begin: animationBegin,
            duration: animationDuration,
            isActive: isAnimationActive,
            easing: animationEasing,
            from: {
              t: 0
            },
            to: {
              t: 1
            },
            key: "bar-".concat(animationId),
            onAnimationEnd: this.handleAnimationEnd,
            onAnimationStart: this.handleAnimationStart
          }, function(_ref) {
            var t2 = _ref.t;
            var stepData = data.map(function(entry, index2) {
              var prev = prevData && prevData[index2];
              if (prev) {
                var interpolatorX = interpolateNumber$1(prev.x, entry.x);
                var interpolatorY = interpolateNumber$1(prev.y, entry.y);
                var interpolatorWidth = interpolateNumber$1(prev.width, entry.width);
                var interpolatorHeight = interpolateNumber$1(prev.height, entry.height);
                return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                  x: interpolatorX(t2),
                  y: interpolatorY(t2),
                  width: interpolatorWidth(t2),
                  height: interpolatorHeight(t2)
                });
              }
              if (layout === "horizontal") {
                var _interpolatorHeight = interpolateNumber$1(0, entry.height);
                var h2 = _interpolatorHeight(t2);
                return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                  y: entry.y + entry.height - h2,
                  height: h2
                });
              }
              var interpolator = interpolateNumber$1(0, entry.width);
              var w = interpolator(t2);
              return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                width: w
              });
            });
            return React.createElement(Layer, null, _this3.renderRectanglesStatically(stepData));
          });
        }
      },
      {
        key: "renderRectangles",
        value: function renderRectangles() {
          var _this$props3 = this.props, data = _this$props3.data, isAnimationActive = _this$props3.isAnimationActive;
          var prevData = this.state.prevData;
          if (isAnimationActive && data && data.length && (!prevData || !isEqual$1(prevData, data))) {
            return this.renderRectanglesWithAnimation();
          }
          return this.renderRectanglesStatically(data);
        }
      },
      {
        key: "renderBackground",
        value: function renderBackground() {
          var _this4 = this;
          var _this$props4 = this.props, data = _this$props4.data, dataKey = _this$props4.dataKey, activeIndex = _this$props4.activeIndex;
          var backgroundProps = filterProps(this.props.background, false);
          return data.map(function(entry, i) {
            entry.value;
            var background = entry.background, rest = _objectWithoutProperties$3(entry, _excluded$3);
            if (!background) {
              return null;
            }
            var props = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, rest), {}, {
              fill: "#eee"
            }, background), backgroundProps), adaptEventsOfChild(_this4.props, entry, i)), {}, {
              onAnimationStart: _this4.handleAnimationStart,
              onAnimationEnd: _this4.handleAnimationEnd,
              dataKey,
              index: i,
              className: "recharts-bar-background-rectangle"
            });
            return React.createElement(BarRectangle, _extends$8({
              key: "background-bar-".concat(i),
              option: _this4.props.background,
              isActive: i === activeIndex
            }, props));
          });
        }
      },
      {
        key: "renderErrorBar",
        value: function renderErrorBar(needClip, clipPathId) {
          if (this.props.isAnimationActive && !this.state.isAnimationFinished) {
            return null;
          }
          var _this$props5 = this.props, data = _this$props5.data, xAxis = _this$props5.xAxis, yAxis = _this$props5.yAxis, layout = _this$props5.layout, children = _this$props5.children;
          var errorBarItems = findAllByType(children, ErrorBar);
          if (!errorBarItems) {
            return null;
          }
          var offset = layout === "vertical" ? data[0].height / 2 : data[0].width / 2;
          var dataPointFormatter = function dataPointFormatter2(dataPoint, dataKey) {
            var value = Array.isArray(dataPoint.value) ? dataPoint.value[1] : dataPoint.value;
            return {
              x: dataPoint.x,
              y: dataPoint.y,
              value,
              errorVal: getValueByDataKey(dataPoint, dataKey)
            };
          };
          var errorBarProps = {
            clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
          };
          return React.createElement(Layer, errorBarProps, errorBarItems.map(function(item) {
            return React.cloneElement(item, {
              key: "error-bar-".concat(clipPathId, "-").concat(item.props.dataKey),
              data,
              xAxis,
              yAxis,
              layout,
              offset,
              dataPointFormatter
            });
          }));
        }
      },
      {
        key: "render",
        value: function render() {
          var _this$props6 = this.props, hide = _this$props6.hide, data = _this$props6.data, className = _this$props6.className, xAxis = _this$props6.xAxis, yAxis = _this$props6.yAxis, left = _this$props6.left, top = _this$props6.top, width = _this$props6.width, height = _this$props6.height, isAnimationActive = _this$props6.isAnimationActive, background = _this$props6.background, id = _this$props6.id;
          if (hide || !data || !data.length) {
            return null;
          }
          var isAnimationFinished = this.state.isAnimationFinished;
          var layerClass = clsx("recharts-bar", className);
          var needClipX = xAxis && xAxis.allowDataOverflow;
          var needClipY = yAxis && yAxis.allowDataOverflow;
          var needClip = needClipX || needClipY;
          var clipPathId = isNil$1(id) ? this.id : id;
          return React.createElement(Layer, {
            className: layerClass
          }, needClipX || needClipY ? React.createElement("defs", null, React.createElement("clipPath", {
            id: "clipPath-".concat(clipPathId)
          }, React.createElement("rect", {
            x: needClipX ? left : left - width / 2,
            y: needClipY ? top : top - height / 2,
            width: needClipX ? width : width * 2,
            height: needClipY ? height : height * 2
          }))) : null, React.createElement(Layer, {
            className: "recharts-bar-rectangles",
            clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
          }, background ? this.renderBackground() : null, this.renderRectangles()), this.renderErrorBar(needClip, clipPathId), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, data));
        }
      }
    ], [
      {
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          if (nextProps.animationId !== prevState.prevAnimationId) {
            return {
              prevAnimationId: nextProps.animationId,
              curData: nextProps.data,
              prevData: prevState.curData
            };
          }
          if (nextProps.data !== prevState.curData) {
            return {
              curData: nextProps.data
            };
          }
          return null;
        }
      }
    ]);
  }(reactExports.PureComponent);
  _Bar = Bar;
  _defineProperty$c(Bar, "displayName", "Bar");
  _defineProperty$c(Bar, "defaultProps", {
    xAxisId: 0,
    yAxisId: 0,
    legendType: "rect",
    minPointSize: 0,
    hide: false,
    data: [],
    layout: "vertical",
    activeBar: false,
    isAnimationActive: !Global.isSsr,
    animationBegin: 0,
    animationDuration: 400,
    animationEasing: "ease"
  });
  _defineProperty$c(Bar, "getComposedData", function(_ref2) {
    var props = _ref2.props, item = _ref2.item, barPosition = _ref2.barPosition, bandSize = _ref2.bandSize, xAxis = _ref2.xAxis, yAxis = _ref2.yAxis, xAxisTicks = _ref2.xAxisTicks, yAxisTicks = _ref2.yAxisTicks, stackedData = _ref2.stackedData, dataStartIndex = _ref2.dataStartIndex, displayedData = _ref2.displayedData, offset = _ref2.offset;
    var pos = findPositionOfBar(barPosition, item);
    if (!pos) {
      return null;
    }
    var layout = props.layout;
    var itemDefaultProps = item.type.defaultProps;
    var itemProps = itemDefaultProps !== void 0 ? _objectSpread$9(_objectSpread$9({}, itemDefaultProps), item.props) : item.props;
    var dataKey = itemProps.dataKey, children = itemProps.children, minPointSizeProp = itemProps.minPointSize;
    var numericAxis = layout === "horizontal" ? yAxis : xAxis;
    var stackedDomain = stackedData ? numericAxis.scale.domain() : null;
    var baseValue = getBaseValueOfBar({
      numericAxis
    });
    var cells = findAllByType(children, Cell);
    var rects = displayedData.map(function(entry, index2) {
      var value, x2, y2, width, height, background;
      if (stackedData) {
        value = truncateByDomain(stackedData[dataStartIndex + index2], stackedDomain);
      } else {
        value = getValueByDataKey(entry, dataKey);
        if (!Array.isArray(value)) {
          value = [
            baseValue,
            value
          ];
        }
      }
      var minPointSize = minPointSizeCallback(minPointSizeProp, _Bar.defaultProps.minPointSize)(value[1], index2);
      if (layout === "horizontal") {
        var _ref4;
        var _ref3 = [
          yAxis.scale(value[0]),
          yAxis.scale(value[1])
        ], baseValueScale = _ref3[0], currentValueScale = _ref3[1];
        x2 = getCateCoordinateOfBar({
          axis: xAxis,
          ticks: xAxisTicks,
          bandSize,
          offset: pos.offset,
          entry,
          index: index2
        });
        y2 = (_ref4 = currentValueScale !== null && currentValueScale !== void 0 ? currentValueScale : baseValueScale) !== null && _ref4 !== void 0 ? _ref4 : void 0;
        width = pos.size;
        var computedHeight = baseValueScale - currentValueScale;
        height = Number.isNaN(computedHeight) ? 0 : computedHeight;
        background = {
          x: x2,
          y: yAxis.y,
          width,
          height: yAxis.height
        };
        if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {
          var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));
          y2 -= delta;
          height += delta;
        }
      } else {
        var _ref5 = [
          xAxis.scale(value[0]),
          xAxis.scale(value[1])
        ], _baseValueScale = _ref5[0], _currentValueScale = _ref5[1];
        x2 = _baseValueScale;
        y2 = getCateCoordinateOfBar({
          axis: yAxis,
          ticks: yAxisTicks,
          bandSize,
          offset: pos.offset,
          entry,
          index: index2
        });
        width = _currentValueScale - _baseValueScale;
        height = pos.size;
        background = {
          x: xAxis.x,
          y: y2,
          width: xAxis.width,
          height
        };
        if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {
          var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));
          width += _delta;
        }
      }
      return _objectSpread$9(_objectSpread$9(_objectSpread$9({}, entry), {}, {
        x: x2,
        y: y2,
        width,
        height,
        value: stackedData ? value : value[1],
        payload: entry,
        background
      }, cells && cells[index2] && cells[index2].props), {}, {
        tooltipPayload: [
          getTooltipItem(item, entry)
        ],
        tooltipPosition: {
          x: x2 + width / 2,
          y: y2 + height / 2
        }
      });
    });
    return _objectSpread$9({
      data: rects,
      layout
    }, offset);
  });
  function _typeof$b(o) {
    "@babel/helpers - typeof";
    return _typeof$b = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$b(o);
  }
  function _classCallCheck$8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$8(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$b(descriptor.key), descriptor);
    }
  }
  function _createClass$8(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$8(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$8(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function ownKeys$8(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$8(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$8(Object(t2), true).forEach(function(r2) {
        _defineProperty$b(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$8(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$b(obj, key, value) {
    key = _toPropertyKey$b(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$b(t2) {
    var i = _toPrimitive$b(t2, "string");
    return "symbol" == _typeof$b(i) ? i : i + "";
  }
  function _toPrimitive$b(t2, r) {
    if ("object" != _typeof$b(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$b(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var formatAxisMap = function formatAxisMap2(props, axisMap, offset, axisType, chartName) {
    var width = props.width, height = props.height, layout = props.layout, children = props.children;
    var ids = Object.keys(axisMap);
    var steps = {
      left: offset.left,
      leftMirror: offset.left,
      right: width - offset.right,
      rightMirror: width - offset.right,
      top: offset.top,
      topMirror: offset.top,
      bottom: height - offset.bottom,
      bottomMirror: height - offset.bottom
    };
    var hasBar = !!findChildByType(children, Bar);
    return ids.reduce(function(result, id) {
      var axis = axisMap[id];
      var orientation = axis.orientation, domain = axis.domain, _axis$padding = axis.padding, padding = _axis$padding === void 0 ? {} : _axis$padding, mirror = axis.mirror, reversed = axis.reversed;
      var offsetKey = "".concat(orientation).concat(mirror ? "Mirror" : "");
      var calculatedPadding, range2, x2, y2, needSpace;
      if (axis.type === "number" && (axis.padding === "gap" || axis.padding === "no-gap")) {
        var diff = domain[1] - domain[0];
        var smallestDistanceBetweenValues = Infinity;
        var sortedValues = axis.categoricalDomain.sort();
        sortedValues.forEach(function(value, index2) {
          if (index2 > 0) {
            smallestDistanceBetweenValues = Math.min((value || 0) - (sortedValues[index2 - 1] || 0), smallestDistanceBetweenValues);
          }
        });
        if (Number.isFinite(smallestDistanceBetweenValues)) {
          var smallestDistanceInPercent = smallestDistanceBetweenValues / diff;
          var rangeWidth = axis.layout === "vertical" ? offset.height : offset.width;
          if (axis.padding === "gap") {
            calculatedPadding = smallestDistanceInPercent * rangeWidth / 2;
          }
          if (axis.padding === "no-gap") {
            var gap = getPercentValue(props.barCategoryGap, smallestDistanceInPercent * rangeWidth);
            var halfBand = smallestDistanceInPercent * rangeWidth / 2;
            calculatedPadding = halfBand - gap - (halfBand - gap) / rangeWidth * gap;
          }
        }
      }
      if (axisType === "xAxis") {
        range2 = [
          offset.left + (padding.left || 0) + (calculatedPadding || 0),
          offset.left + offset.width - (padding.right || 0) - (calculatedPadding || 0)
        ];
      } else if (axisType === "yAxis") {
        range2 = layout === "horizontal" ? [
          offset.top + offset.height - (padding.bottom || 0),
          offset.top + (padding.top || 0)
        ] : [
          offset.top + (padding.top || 0) + (calculatedPadding || 0),
          offset.top + offset.height - (padding.bottom || 0) - (calculatedPadding || 0)
        ];
      } else {
        range2 = axis.range;
      }
      if (reversed) {
        range2 = [
          range2[1],
          range2[0]
        ];
      }
      var _parseScale = parseScale(axis, chartName, hasBar), scale = _parseScale.scale, realScaleType = _parseScale.realScaleType;
      scale.domain(domain).range(range2);
      checkDomainOfScale(scale);
      var ticks2 = getTicksOfScale(scale, _objectSpread$8(_objectSpread$8({}, axis), {}, {
        realScaleType
      }));
      if (axisType === "xAxis") {
        needSpace = orientation === "top" && !mirror || orientation === "bottom" && mirror;
        x2 = offset.left;
        y2 = steps[offsetKey] - needSpace * axis.height;
      } else if (axisType === "yAxis") {
        needSpace = orientation === "left" && !mirror || orientation === "right" && mirror;
        x2 = steps[offsetKey] - needSpace * axis.width;
        y2 = offset.top;
      }
      var finalAxis = _objectSpread$8(_objectSpread$8(_objectSpread$8({}, axis), ticks2), {}, {
        realScaleType,
        x: x2,
        y: y2,
        scale,
        width: axisType === "xAxis" ? offset.width : axis.width,
        height: axisType === "yAxis" ? offset.height : axis.height
      });
      finalAxis.bandSize = getBandSizeOfAxis(finalAxis, ticks2);
      if (!axis.hide && axisType === "xAxis") {
        steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.height;
      } else if (!axis.hide) {
        steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.width;
      }
      return _objectSpread$8(_objectSpread$8({}, result), {}, _defineProperty$b({}, id, finalAxis));
    }, {});
  };
  var rectWithPoints = function rectWithPoints2(_ref, _ref2) {
    var x1 = _ref.x, y1 = _ref.y;
    var x2 = _ref2.x, y2 = _ref2.y;
    return {
      x: Math.min(x1, x2),
      y: Math.min(y1, y2),
      width: Math.abs(x2 - x1),
      height: Math.abs(y2 - y1)
    };
  };
  var rectWithCoords = function rectWithCoords2(_ref3) {
    var x1 = _ref3.x1, y1 = _ref3.y1, x2 = _ref3.x2, y2 = _ref3.y2;
    return rectWithPoints({
      x: x1,
      y: y1
    }, {
      x: x2,
      y: y2
    });
  };
  var ScaleHelper = function() {
    function ScaleHelper2(scale) {
      _classCallCheck$8(this, ScaleHelper2);
      this.scale = scale;
    }
    return _createClass$8(ScaleHelper2, [
      {
        key: "domain",
        get: function get2() {
          return this.scale.domain;
        }
      },
      {
        key: "range",
        get: function get2() {
          return this.scale.range;
        }
      },
      {
        key: "rangeMin",
        get: function get2() {
          return this.range()[0];
        }
      },
      {
        key: "rangeMax",
        get: function get2() {
          return this.range()[1];
        }
      },
      {
        key: "bandwidth",
        get: function get2() {
          return this.scale.bandwidth;
        }
      },
      {
        key: "apply",
        value: function apply2(value) {
          var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref4.bandAware, position = _ref4.position;
          if (value === void 0) {
            return void 0;
          }
          if (position) {
            switch (position) {
              case "start": {
                return this.scale(value);
              }
              case "middle": {
                var offset = this.bandwidth ? this.bandwidth() / 2 : 0;
                return this.scale(value) + offset;
              }
              case "end": {
                var _offset = this.bandwidth ? this.bandwidth() : 0;
                return this.scale(value) + _offset;
              }
              default: {
                return this.scale(value);
              }
            }
          }
          if (bandAware) {
            var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
            return this.scale(value) + _offset2;
          }
          return this.scale(value);
        }
      },
      {
        key: "isInRange",
        value: function isInRange(value) {
          var range2 = this.range();
          var first = range2[0];
          var last2 = range2[range2.length - 1];
          return first <= last2 ? value >= first && value <= last2 : value >= last2 && value <= first;
        }
      }
    ], [
      {
        key: "create",
        value: function create2(obj) {
          return new ScaleHelper2(obj);
        }
      }
    ]);
  }();
  _defineProperty$b(ScaleHelper, "EPS", 1e-4);
  var createLabeledScales = function createLabeledScales2(options) {
    var scales = Object.keys(options).reduce(function(res, key) {
      return _objectSpread$8(_objectSpread$8({}, res), {}, _defineProperty$b({}, key, ScaleHelper.create(options[key])));
    }, {});
    return _objectSpread$8(_objectSpread$8({}, scales), {}, {
      apply: function apply2(coord) {
        var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref5.bandAware, position = _ref5.position;
        return mapValues$1(coord, function(value, label) {
          return scales[label].apply(value, {
            bandAware,
            position
          });
        });
      },
      isInRange: function isInRange(coord) {
        return every$1(coord, function(value, label) {
          return scales[label].isInRange(value);
        });
      }
    });
  };
  function normalizeAngle(angle) {
    return (angle % 180 + 180) % 180;
  }
  var getAngledRectangleWidth = function getAngledRectangleWidth2(_ref6) {
    var width = _ref6.width, height = _ref6.height;
    var angle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var normalizedAngle = normalizeAngle(angle);
    var angleRadians = normalizedAngle * Math.PI / 180;
    var angleThreshold = Math.atan(height / width);
    var angledWidth = angleRadians > angleThreshold && angleRadians < Math.PI - angleThreshold ? height / Math.sin(angleRadians) : width / Math.cos(angleRadians);
    return Math.abs(angledWidth);
  };
  var baseIteratee$1 = _baseIteratee, isArrayLike = isArrayLike_1, keys = keys_1;
  function createFind$1(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee$1(predicate);
        collection = keys(collection);
        predicate = function(key) {
          return iteratee(iterable[key], key, iterable);
        };
      }
      var index2 = findIndexFunc(collection, predicate, fromIndex);
      return index2 > -1 ? iterable[iteratee ? collection[index2] : index2] : void 0;
    };
  }
  var _createFind = createFind$1;
  var toFinite = toFinite_1;
  function toInteger$2(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  var toInteger_1 = toInteger$2;
  var baseFindIndex = _baseFindIndex, baseIteratee = _baseIteratee, toInteger$1 = toInteger_1;
  var nativeMax$1 = Math.max;
  function findIndex$1(array2, predicate, fromIndex) {
    var length = array2 == null ? 0 : array2.length;
    if (!length) {
      return -1;
    }
    var index2 = fromIndex == null ? 0 : toInteger$1(fromIndex);
    if (index2 < 0) {
      index2 = nativeMax$1(length + index2, 0);
    }
    return baseFindIndex(array2, baseIteratee(predicate), index2);
  }
  var findIndex_1 = findIndex$1;
  var createFind = _createFind, findIndex = findIndex_1;
  var find = createFind(findIndex);
  var find_1 = find;
  const find$1 = getDefaultExportFromCjs(find_1);
  var calculateViewBox = memoize$1(function(offset) {
    return {
      x: offset.left,
      y: offset.top,
      width: offset.width,
      height: offset.height
    };
  }, function(offset) {
    return [
      "l",
      offset.left,
      "t",
      offset.top,
      "w",
      offset.width,
      "h",
      offset.height
    ].join("");
  });
  var XAxisContext = reactExports.createContext(void 0);
  var YAxisContext = reactExports.createContext(void 0);
  var ViewBoxContext = reactExports.createContext(void 0);
  var OffsetContext = reactExports.createContext({});
  var ClipPathIdContext = reactExports.createContext(void 0);
  var ChartHeightContext = reactExports.createContext(0);
  var ChartWidthContext = reactExports.createContext(0);
  var ChartLayoutContextProvider = function ChartLayoutContextProvider2(props) {
    var _props$state = props.state, xAxisMap = _props$state.xAxisMap, yAxisMap = _props$state.yAxisMap, offset = _props$state.offset, clipPathId = props.clipPathId, children = props.children, width = props.width, height = props.height;
    var viewBox = calculateViewBox(offset);
    return React.createElement(XAxisContext.Provider, {
      value: xAxisMap
    }, React.createElement(YAxisContext.Provider, {
      value: yAxisMap
    }, React.createElement(OffsetContext.Provider, {
      value: offset
    }, React.createElement(ViewBoxContext.Provider, {
      value: viewBox
    }, React.createElement(ClipPathIdContext.Provider, {
      value: clipPathId
    }, React.createElement(ChartHeightContext.Provider, {
      value: height
    }, React.createElement(ChartWidthContext.Provider, {
      value: width
    }, children)))))));
  };
  var useClipPathId = function useClipPathId2() {
    return reactExports.useContext(ClipPathIdContext);
  };
  var useXAxisOrThrow = function useXAxisOrThrow2(xAxisId) {
    var xAxisMap = reactExports.useContext(XAxisContext);
    !(xAxisMap != null) ? invariant() : void 0;
    var xAxis = xAxisMap[xAxisId];
    !(xAxis != null) ? invariant() : void 0;
    return xAxis;
  };
  var useArbitraryXAxis = function useArbitraryXAxis2() {
    var xAxisMap = reactExports.useContext(XAxisContext);
    return getAnyElementOfObject(xAxisMap);
  };
  var useYAxisWithFiniteDomainOrRandom = function useYAxisWithFiniteDomainOrRandom2() {
    var yAxisMap = reactExports.useContext(YAxisContext);
    var yAxisWithFiniteDomain = find$1(yAxisMap, function(axis) {
      return every$1(axis.domain, Number.isFinite);
    });
    return yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);
  };
  var useYAxisOrThrow = function useYAxisOrThrow2(yAxisId) {
    var yAxisMap = reactExports.useContext(YAxisContext);
    !(yAxisMap != null) ? invariant() : void 0;
    var yAxis = yAxisMap[yAxisId];
    !(yAxis != null) ? invariant() : void 0;
    return yAxis;
  };
  var useViewBox = function useViewBox2() {
    var viewBox = reactExports.useContext(ViewBoxContext);
    return viewBox;
  };
  var useOffset = function useOffset2() {
    return reactExports.useContext(OffsetContext);
  };
  var useChartWidth = function useChartWidth2() {
    return reactExports.useContext(ChartWidthContext);
  };
  var useChartHeight = function useChartHeight2() {
    return reactExports.useContext(ChartHeightContext);
  };
  function _typeof$a(o) {
    "@babel/helpers - typeof";
    return _typeof$a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$a(o);
  }
  function _classCallCheck$7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$7(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$a(descriptor.key), descriptor);
    }
  }
  function _createClass$7(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$7(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$6(t2, o, e3) {
    return o = _getPrototypeOf$6(o), _possibleConstructorReturn$6(t2, _isNativeReflectConstruct$6() ? Reflect.construct(o, e3 || [], _getPrototypeOf$6(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$6(self, call) {
    if (call && (_typeof$a(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$6(self);
  }
  function _assertThisInitialized$6(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$6() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$6(o) {
    _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$6(o);
  }
  function _inherits$6(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$6(subClass, superClass);
  }
  function _setPrototypeOf$6(o, p2) {
    _setPrototypeOf$6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$6(o, p2);
  }
  function ownKeys$7(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$7(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$7(Object(t2), true).forEach(function(r2) {
        _defineProperty$a(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$7(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$a(obj, key, value) {
    key = _toPropertyKey$a(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$a(t2) {
    var i = _toPrimitive$a(t2, "string");
    return "symbol" == _typeof$a(i) ? i : i + "";
  }
  function _toPrimitive$a(t2, r) {
    if ("object" != _typeof$a(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$a(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _slicedToArray$1(arr, i) {
    return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$1();
  }
  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$2(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$2(o, minLen);
  }
  function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit$1(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _extends$7() {
    _extends$7 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$7.apply(this, arguments);
  }
  var renderLine = function renderLine2(option, props) {
    var line;
    if (React.isValidElement(option)) {
      line = React.cloneElement(option, props);
    } else if (isFunction(option)) {
      line = option(props);
    } else {
      line = React.createElement("line", _extends$7({}, props, {
        className: "recharts-reference-line-line"
      }));
    }
    return line;
  };
  var getEndPoints = function getEndPoints2(scales, isFixedX, isFixedY, isSegment, viewBox, position, xAxisOrientation, yAxisOrientation, props) {
    var x2 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
    if (isFixedY) {
      var yCoord = props.y;
      var coord = scales.y.apply(yCoord, {
        position
      });
      if (ifOverflowMatches(props, "discard") && !scales.y.isInRange(coord)) {
        return null;
      }
      var points = [
        {
          x: x2 + width,
          y: coord
        },
        {
          x: x2,
          y: coord
        }
      ];
      return yAxisOrientation === "left" ? points.reverse() : points;
    }
    if (isFixedX) {
      var xCoord = props.x;
      var _coord = scales.x.apply(xCoord, {
        position
      });
      if (ifOverflowMatches(props, "discard") && !scales.x.isInRange(_coord)) {
        return null;
      }
      var _points = [
        {
          x: _coord,
          y: y2 + height
        },
        {
          x: _coord,
          y: y2
        }
      ];
      return xAxisOrientation === "top" ? _points.reverse() : _points;
    }
    if (isSegment) {
      var segment = props.segment;
      var _points2 = segment.map(function(p2) {
        return scales.apply(p2, {
          position
        });
      });
      if (ifOverflowMatches(props, "discard") && some$1(_points2, function(p2) {
        return !scales.isInRange(p2);
      })) {
        return null;
      }
      return _points2;
    }
    return null;
  };
  function ReferenceLineImpl(props) {
    var fixedX = props.x, fixedY = props.y, segment = props.segment, xAxisId = props.xAxisId, yAxisId = props.yAxisId, shape = props.shape, className = props.className, alwaysShow = props.alwaysShow;
    var clipPathId = useClipPathId();
    var xAxis = useXAxisOrThrow(xAxisId);
    var yAxis = useYAxisOrThrow(yAxisId);
    var viewBox = useViewBox();
    if (!clipPathId || !viewBox) {
      return null;
    }
    warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
    var scales = createLabeledScales({
      x: xAxis.scale,
      y: yAxis.scale
    });
    var isX = isNumOrStr(fixedX);
    var isY = isNumOrStr(fixedY);
    var isSegment = segment && segment.length === 2;
    var endPoints = getEndPoints(scales, isX, isY, isSegment, viewBox, props.position, xAxis.orientation, yAxis.orientation, props);
    if (!endPoints) {
      return null;
    }
    var _endPoints = _slicedToArray$1(endPoints, 2), _endPoints$ = _endPoints[0], x1 = _endPoints$.x, y1 = _endPoints$.y, _endPoints$2 = _endPoints[1], x2 = _endPoints$2.x, y2 = _endPoints$2.y;
    var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
    var lineProps = _objectSpread$7(_objectSpread$7({
      clipPath
    }, filterProps(props, true)), {}, {
      x1,
      y1,
      x2,
      y2
    });
    return React.createElement(Layer, {
      className: clsx("recharts-reference-line", className)
    }, renderLine(shape, lineProps), Label.renderCallByParent(props, rectWithCoords({
      x1,
      y1,
      x2,
      y2
    })));
  }
  var ReferenceLine = function(_React$Component) {
    function ReferenceLine2() {
      _classCallCheck$7(this, ReferenceLine2);
      return _callSuper$6(this, ReferenceLine2, arguments);
    }
    _inherits$6(ReferenceLine2, _React$Component);
    return _createClass$7(ReferenceLine2, [
      {
        key: "render",
        value: function render() {
          return React.createElement(ReferenceLineImpl, this.props);
        }
      }
    ]);
  }(React.Component);
  _defineProperty$a(ReferenceLine, "displayName", "ReferenceLine");
  _defineProperty$a(ReferenceLine, "defaultProps", {
    isFront: false,
    ifOverflow: "discard",
    xAxisId: 0,
    yAxisId: 0,
    fill: "none",
    stroke: "#ccc",
    fillOpacity: 1,
    strokeWidth: 1,
    position: "middle"
  });
  function _extends$6() {
    _extends$6 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$6.apply(this, arguments);
  }
  function _typeof$9(o) {
    "@babel/helpers - typeof";
    return _typeof$9 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$9(o);
  }
  function ownKeys$6(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$6(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$6(Object(t2), true).forEach(function(r2) {
        _defineProperty$9(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$6(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$6(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$9(descriptor.key), descriptor);
    }
  }
  function _createClass$6(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$6(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$5(t2, o, e3) {
    return o = _getPrototypeOf$5(o), _possibleConstructorReturn$5(t2, _isNativeReflectConstruct$5() ? Reflect.construct(o, e3 || [], _getPrototypeOf$5(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$5(self, call) {
    if (call && (_typeof$9(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$5(self);
  }
  function _assertThisInitialized$5(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$5() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$5(o) {
    _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$5(o);
  }
  function _inherits$5(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$5(subClass, superClass);
  }
  function _setPrototypeOf$5(o, p2) {
    _setPrototypeOf$5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$5(o, p2);
  }
  function _defineProperty$9(obj, key, value) {
    key = _toPropertyKey$9(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$9(t2) {
    var i = _toPrimitive$9(t2, "string");
    return "symbol" == _typeof$9(i) ? i : i + "";
  }
  function _toPrimitive$9(t2, r) {
    if ("object" != _typeof$9(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$9(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var getCoordinate = function getCoordinate2(props) {
    var x2 = props.x, y2 = props.y, xAxis = props.xAxis, yAxis = props.yAxis;
    var scales = createLabeledScales({
      x: xAxis.scale,
      y: yAxis.scale
    });
    var result = scales.apply({
      x: x2,
      y: y2
    }, {
      bandAware: true
    });
    if (ifOverflowMatches(props, "discard") && !scales.isInRange(result)) {
      return null;
    }
    return result;
  };
  var ReferenceDot = function(_React$Component) {
    function ReferenceDot2() {
      _classCallCheck$6(this, ReferenceDot2);
      return _callSuper$5(this, ReferenceDot2, arguments);
    }
    _inherits$5(ReferenceDot2, _React$Component);
    return _createClass$6(ReferenceDot2, [
      {
        key: "render",
        value: function render() {
          var _this$props = this.props, x2 = _this$props.x, y2 = _this$props.y, r = _this$props.r, alwaysShow = _this$props.alwaysShow, clipPathId = _this$props.clipPathId;
          var isX = isNumOrStr(x2);
          var isY = isNumOrStr(y2);
          warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
          if (!isX || !isY) {
            return null;
          }
          var coordinate = getCoordinate(this.props);
          if (!coordinate) {
            return null;
          }
          var cx = coordinate.x, cy = coordinate.y;
          var _this$props2 = this.props, shape = _this$props2.shape, className = _this$props2.className;
          var clipPath = ifOverflowMatches(this.props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
          var dotProps = _objectSpread$6(_objectSpread$6({
            clipPath
          }, filterProps(this.props, true)), {}, {
            cx,
            cy
          });
          return React.createElement(Layer, {
            className: clsx("recharts-reference-dot", className)
          }, ReferenceDot2.renderDot(shape, dotProps), Label.renderCallByParent(this.props, {
            x: cx - r,
            y: cy - r,
            width: 2 * r,
            height: 2 * r
          }));
        }
      }
    ]);
  }(React.Component);
  _defineProperty$9(ReferenceDot, "displayName", "ReferenceDot");
  _defineProperty$9(ReferenceDot, "defaultProps", {
    isFront: false,
    ifOverflow: "discard",
    xAxisId: 0,
    yAxisId: 0,
    r: 10,
    fill: "#fff",
    stroke: "#ccc",
    fillOpacity: 1,
    strokeWidth: 1
  });
  _defineProperty$9(ReferenceDot, "renderDot", function(option, props) {
    var dot;
    if (React.isValidElement(option)) {
      dot = React.cloneElement(option, props);
    } else if (isFunction(option)) {
      dot = option(props);
    } else {
      dot = React.createElement(Dot, _extends$6({}, props, {
        cx: props.cx,
        cy: props.cy,
        className: "recharts-reference-dot-dot"
      }));
    }
    return dot;
  });
  function _extends$5() {
    _extends$5 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$5.apply(this, arguments);
  }
  function _typeof$8(o) {
    "@babel/helpers - typeof";
    return _typeof$8 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$8(o);
  }
  function ownKeys$5(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$5(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$5(Object(t2), true).forEach(function(r2) {
        _defineProperty$8(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$5(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _classCallCheck$5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$5(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$8(descriptor.key), descriptor);
    }
  }
  function _createClass$5(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$5(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$4(t2, o, e3) {
    return o = _getPrototypeOf$4(o), _possibleConstructorReturn$4(t2, _isNativeReflectConstruct$4() ? Reflect.construct(o, e3 || [], _getPrototypeOf$4(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$4(self, call) {
    if (call && (_typeof$8(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$4(self);
  }
  function _assertThisInitialized$4(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$4() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$4(o) {
    _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$4(o);
  }
  function _inherits$4(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$4(subClass, superClass);
  }
  function _setPrototypeOf$4(o, p2) {
    _setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$4(o, p2);
  }
  function _defineProperty$8(obj, key, value) {
    key = _toPropertyKey$8(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$8(t2) {
    var i = _toPrimitive$8(t2, "string");
    return "symbol" == _typeof$8(i) ? i : i + "";
  }
  function _toPrimitive$8(t2, r) {
    if ("object" != _typeof$8(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$8(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var getRect = function getRect2(hasX1, hasX2, hasY1, hasY2, props) {
    var xValue1 = props.x1, xValue2 = props.x2, yValue1 = props.y1, yValue2 = props.y2, xAxis = props.xAxis, yAxis = props.yAxis;
    if (!xAxis || !yAxis) return null;
    var scales = createLabeledScales({
      x: xAxis.scale,
      y: yAxis.scale
    });
    var p1 = {
      x: hasX1 ? scales.x.apply(xValue1, {
        position: "start"
      }) : scales.x.rangeMin,
      y: hasY1 ? scales.y.apply(yValue1, {
        position: "start"
      }) : scales.y.rangeMin
    };
    var p2 = {
      x: hasX2 ? scales.x.apply(xValue2, {
        position: "end"
      }) : scales.x.rangeMax,
      y: hasY2 ? scales.y.apply(yValue2, {
        position: "end"
      }) : scales.y.rangeMax
    };
    if (ifOverflowMatches(props, "discard") && (!scales.isInRange(p1) || !scales.isInRange(p2))) {
      return null;
    }
    return rectWithPoints(p1, p2);
  };
  var ReferenceArea = function(_React$Component) {
    function ReferenceArea2() {
      _classCallCheck$5(this, ReferenceArea2);
      return _callSuper$4(this, ReferenceArea2, arguments);
    }
    _inherits$4(ReferenceArea2, _React$Component);
    return _createClass$5(ReferenceArea2, [
      {
        key: "render",
        value: function render() {
          var _this$props = this.props, x1 = _this$props.x1, x2 = _this$props.x2, y1 = _this$props.y1, y2 = _this$props.y2, className = _this$props.className, alwaysShow = _this$props.alwaysShow, clipPathId = _this$props.clipPathId;
          warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
          var hasX1 = isNumOrStr(x1);
          var hasX2 = isNumOrStr(x2);
          var hasY1 = isNumOrStr(y1);
          var hasY2 = isNumOrStr(y2);
          var shape = this.props.shape;
          if (!hasX1 && !hasX2 && !hasY1 && !hasY2 && !shape) {
            return null;
          }
          var rect = getRect(hasX1, hasX2, hasY1, hasY2, this.props);
          if (!rect && !shape) {
            return null;
          }
          var clipPath = ifOverflowMatches(this.props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
          return React.createElement(Layer, {
            className: clsx("recharts-reference-area", className)
          }, ReferenceArea2.renderRect(shape, _objectSpread$5(_objectSpread$5({
            clipPath
          }, filterProps(this.props, true)), rect)), Label.renderCallByParent(this.props, rect));
        }
      }
    ]);
  }(React.Component);
  _defineProperty$8(ReferenceArea, "displayName", "ReferenceArea");
  _defineProperty$8(ReferenceArea, "defaultProps", {
    isFront: false,
    ifOverflow: "discard",
    xAxisId: 0,
    yAxisId: 0,
    r: 10,
    fill: "#ccc",
    fillOpacity: 0.5,
    stroke: "none",
    strokeWidth: 1
  });
  _defineProperty$8(ReferenceArea, "renderRect", function(option, props) {
    var rect;
    if (React.isValidElement(option)) {
      rect = React.cloneElement(option, props);
    } else if (isFunction(option)) {
      rect = option(props);
    } else {
      rect = React.createElement(Rectangle, _extends$5({}, props, {
        className: "recharts-reference-area-rect"
      }));
    }
    return rect;
  });
  function getEveryNthWithCondition(array2, n2, isValid) {
    if (n2 < 1) {
      return [];
    }
    if (n2 === 1 && isValid === void 0) {
      return array2;
    }
    var result = [];
    for (var i = 0; i < array2.length; i += n2) {
      {
        result.push(array2[i]);
      }
    }
    return result;
  }
  function getAngledTickWidth(contentSize, unitSize, angle) {
    var size = {
      width: contentSize.width + unitSize.width,
      height: contentSize.height + unitSize.height
    };
    return getAngledRectangleWidth(size, angle);
  }
  function getTickBoundaries(viewBox, sign2, sizeKey) {
    var isWidth = sizeKey === "width";
    var x2 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
    if (sign2 === 1) {
      return {
        start: isWidth ? x2 : y2,
        end: isWidth ? x2 + width : y2 + height
      };
    }
    return {
      start: isWidth ? x2 + width : y2 + height,
      end: isWidth ? x2 : y2
    };
  }
  function isVisible(sign2, tickPosition, getSize, start, end) {
    if (sign2 * tickPosition < sign2 * start || sign2 * tickPosition > sign2 * end) {
      return false;
    }
    var size = getSize();
    return sign2 * (tickPosition - sign2 * size / 2 - start) >= 0 && sign2 * (tickPosition + sign2 * size / 2 - end) <= 0;
  }
  function getNumberIntervalTicks(ticks2, interval) {
    return getEveryNthWithCondition(ticks2, interval + 1);
  }
  function getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap) {
    var result = (ticks2 || []).slice();
    var initialStart = boundaries.start, end = boundaries.end;
    var index2 = 0;
    var stepsize = 1;
    var start = initialStart;
    var _loop = function _loop2() {
      var entry = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2[index2];
      if (entry === void 0) {
        return {
          v: getEveryNthWithCondition(ticks2, stepsize)
        };
      }
      var i = index2;
      var size;
      var getSize = function getSize2() {
        if (size === void 0) {
          size = getTickSize(entry, i);
        }
        return size;
      };
      var tickCoord = entry.coordinate;
      var isShow = index2 === 0 || isVisible(sign2, tickCoord, getSize, start, end);
      if (!isShow) {
        index2 = 0;
        start = initialStart;
        stepsize += 1;
      }
      if (isShow) {
        start = tickCoord + sign2 * (getSize() / 2 + minTickGap);
        index2 += stepsize;
      }
    }, _ret;
    while (stepsize <= result.length) {
      _ret = _loop();
      if (_ret) return _ret.v;
    }
    return [];
  }
  function _typeof$7(o) {
    "@babel/helpers - typeof";
    return _typeof$7 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$7(o);
  }
  function ownKeys$4(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$4(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$4(Object(t2), true).forEach(function(r2) {
        _defineProperty$7(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$4(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$7(obj, key, value) {
    key = _toPropertyKey$7(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$7(t2) {
    var i = _toPrimitive$7(t2, "string");
    return "symbol" == _typeof$7(i) ? i : i + "";
  }
  function _toPrimitive$7(t2, r) {
    if ("object" != _typeof$7(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$7(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap) {
    var result = (ticks2 || []).slice();
    var len = result.length;
    var start = boundaries.start;
    var end = boundaries.end;
    var _loop = function _loop2(i2) {
      var entry = result[i2];
      var size;
      var getSize = function getSize2() {
        if (size === void 0) {
          size = getTickSize(entry, i2);
        }
        return size;
      };
      if (i2 === len - 1) {
        var gap = sign2 * (entry.coordinate + sign2 * getSize() / 2 - end);
        result[i2] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
          tickCoord: gap > 0 ? entry.coordinate - gap * sign2 : entry.coordinate
        });
      } else {
        result[i2] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
          tickCoord: entry.coordinate
        });
      }
      var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
      if (isShow) {
        end = entry.tickCoord - sign2 * (getSize() / 2 + minTickGap);
        result[i2] = _objectSpread$4(_objectSpread$4({}, entry), {}, {
          isShow: true
        });
      }
    };
    for (var i = len - 1; i >= 0; i--) {
      _loop(i);
    }
    return result;
  }
  function getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, preserveEnd) {
    var result = (ticks2 || []).slice();
    var len = result.length;
    var start = boundaries.start, end = boundaries.end;
    if (preserveEnd) {
      var tail = ticks2[len - 1];
      var tailSize = getTickSize(tail, len - 1);
      var tailGap = sign2 * (tail.coordinate + sign2 * tailSize / 2 - end);
      result[len - 1] = tail = _objectSpread$4(_objectSpread$4({}, tail), {}, {
        tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign2 : tail.coordinate
      });
      var isTailShow = isVisible(sign2, tail.tickCoord, function() {
        return tailSize;
      }, start, end);
      if (isTailShow) {
        end = tail.tickCoord - sign2 * (tailSize / 2 + minTickGap);
        result[len - 1] = _objectSpread$4(_objectSpread$4({}, tail), {}, {
          isShow: true
        });
      }
    }
    var count = preserveEnd ? len - 1 : len;
    var _loop2 = function _loop22(i2) {
      var entry = result[i2];
      var size;
      var getSize = function getSize2() {
        if (size === void 0) {
          size = getTickSize(entry, i2);
        }
        return size;
      };
      if (i2 === 0) {
        var gap = sign2 * (entry.coordinate - sign2 * getSize() / 2 - start);
        result[i2] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
          tickCoord: gap < 0 ? entry.coordinate - gap * sign2 : entry.coordinate
        });
      } else {
        result[i2] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
          tickCoord: entry.coordinate
        });
      }
      var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
      if (isShow) {
        start = entry.tickCoord + sign2 * (getSize() / 2 + minTickGap);
        result[i2] = _objectSpread$4(_objectSpread$4({}, entry), {}, {
          isShow: true
        });
      }
    };
    for (var i = 0; i < count; i++) {
      _loop2(i);
    }
    return result;
  }
  function getTicks(props, fontSize, letterSpacing) {
    var tick = props.tick, ticks2 = props.ticks, viewBox = props.viewBox, minTickGap = props.minTickGap, orientation = props.orientation, interval = props.interval, tickFormatter = props.tickFormatter, unit2 = props.unit, angle = props.angle;
    if (!ticks2 || !ticks2.length || !tick) {
      return [];
    }
    if (isNumber(interval) || Global.isSsr) {
      return getNumberIntervalTicks(ticks2, typeof interval === "number" && isNumber(interval) ? interval : 0);
    }
    var candidates = [];
    var sizeKey = orientation === "top" || orientation === "bottom" ? "width" : "height";
    var unitSize = unit2 && sizeKey === "width" ? getStringSize(unit2, {
      fontSize,
      letterSpacing
    }) : {
      width: 0,
      height: 0
    };
    var getTickSize = function getTickSize2(content, index2) {
      var value = isFunction(tickFormatter) ? tickFormatter(content.value, index2) : content.value;
      return sizeKey === "width" ? getAngledTickWidth(getStringSize(value, {
        fontSize,
        letterSpacing
      }), unitSize, angle) : getStringSize(value, {
        fontSize,
        letterSpacing
      })[sizeKey];
    };
    var sign2 = ticks2.length >= 2 ? mathSign(ticks2[1].coordinate - ticks2[0].coordinate) : 1;
    var boundaries = getTickBoundaries(viewBox, sign2, sizeKey);
    if (interval === "equidistantPreserveStart") {
      return getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap);
    }
    if (interval === "preserveStart" || interval === "preserveStartEnd") {
      candidates = getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, interval === "preserveStartEnd");
    } else {
      candidates = getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap);
    }
    return candidates.filter(function(entry) {
      return entry.isShow;
    });
  }
  var _excluded$2 = [
    "viewBox"
  ], _excluded2$2 = [
    "viewBox"
  ], _excluded3 = [
    "ticks"
  ];
  function _typeof$6(o) {
    "@babel/helpers - typeof";
    return _typeof$6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$6(o);
  }
  function _extends$4() {
    _extends$4 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$4.apply(this, arguments);
  }
  function ownKeys$3(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$3(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$3(Object(t2), true).forEach(function(r2) {
        _defineProperty$6(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$3(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _objectWithoutProperties$2(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$2(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$2(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _classCallCheck$4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$4(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$6(descriptor.key), descriptor);
    }
  }
  function _createClass$4(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$4(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$4(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$3(t2, o, e3) {
    return o = _getPrototypeOf$3(o), _possibleConstructorReturn$3(t2, _isNativeReflectConstruct$3() ? Reflect.construct(o, e3 || [], _getPrototypeOf$3(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$3(self, call) {
    if (call && (_typeof$6(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$3(self);
  }
  function _assertThisInitialized$3(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$3() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$3(o) {
    _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$3(o);
  }
  function _inherits$3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$3(subClass, superClass);
  }
  function _setPrototypeOf$3(o, p2) {
    _setPrototypeOf$3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$3(o, p2);
  }
  function _defineProperty$6(obj, key, value) {
    key = _toPropertyKey$6(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$6(t2) {
    var i = _toPrimitive$6(t2, "string");
    return "symbol" == _typeof$6(i) ? i : i + "";
  }
  function _toPrimitive$6(t2, r) {
    if ("object" != _typeof$6(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$6(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var CartesianAxis = function(_Component) {
    function CartesianAxis2(props) {
      var _this;
      _classCallCheck$4(this, CartesianAxis2);
      _this = _callSuper$3(this, CartesianAxis2, [
        props
      ]);
      _this.state = {
        fontSize: "",
        letterSpacing: ""
      };
      return _this;
    }
    _inherits$3(CartesianAxis2, _Component);
    return _createClass$4(CartesianAxis2, [
      {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(_ref, nextState) {
          var viewBox = _ref.viewBox, restProps = _objectWithoutProperties$2(_ref, _excluded$2);
          var _this$props = this.props, viewBoxOld = _this$props.viewBox, restPropsOld = _objectWithoutProperties$2(_this$props, _excluded2$2);
          return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld) || !shallowEqual(nextState, this.state);
        }
      },
      {
        key: "componentDidMount",
        value: function componentDidMount() {
          var htmlLayer = this.layerReference;
          if (!htmlLayer) return;
          var tick = htmlLayer.getElementsByClassName("recharts-cartesian-axis-tick-value")[0];
          if (tick) {
            this.setState({
              fontSize: window.getComputedStyle(tick).fontSize,
              letterSpacing: window.getComputedStyle(tick).letterSpacing
            });
          }
        }
      },
      {
        key: "getTickLineCoord",
        value: function getTickLineCoord(data) {
          var _this$props2 = this.props, x2 = _this$props2.x, y2 = _this$props2.y, width = _this$props2.width, height = _this$props2.height, orientation = _this$props2.orientation, tickSize = _this$props2.tickSize, mirror = _this$props2.mirror, tickMargin = _this$props2.tickMargin;
          var x1, x22, y1, y22, tx, ty;
          var sign2 = mirror ? -1 : 1;
          var finalTickSize = data.tickSize || tickSize;
          var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;
          switch (orientation) {
            case "top":
              x1 = x22 = data.coordinate;
              y22 = y2 + +!mirror * height;
              y1 = y22 - sign2 * finalTickSize;
              ty = y1 - sign2 * tickMargin;
              tx = tickCoord;
              break;
            case "left":
              y1 = y22 = data.coordinate;
              x22 = x2 + +!mirror * width;
              x1 = x22 - sign2 * finalTickSize;
              tx = x1 - sign2 * tickMargin;
              ty = tickCoord;
              break;
            case "right":
              y1 = y22 = data.coordinate;
              x22 = x2 + +mirror * width;
              x1 = x22 + sign2 * finalTickSize;
              tx = x1 + sign2 * tickMargin;
              ty = tickCoord;
              break;
            default:
              x1 = x22 = data.coordinate;
              y22 = y2 + +mirror * height;
              y1 = y22 + sign2 * finalTickSize;
              ty = y1 + sign2 * tickMargin;
              tx = tickCoord;
              break;
          }
          return {
            line: {
              x1,
              y1,
              x2: x22,
              y2: y22
            },
            tick: {
              x: tx,
              y: ty
            }
          };
        }
      },
      {
        key: "getTickTextAnchor",
        value: function getTickTextAnchor() {
          var _this$props3 = this.props, orientation = _this$props3.orientation, mirror = _this$props3.mirror;
          var textAnchor;
          switch (orientation) {
            case "left":
              textAnchor = mirror ? "start" : "end";
              break;
            case "right":
              textAnchor = mirror ? "end" : "start";
              break;
            default:
              textAnchor = "middle";
              break;
          }
          return textAnchor;
        }
      },
      {
        key: "getTickVerticalAnchor",
        value: function getTickVerticalAnchor() {
          var _this$props4 = this.props, orientation = _this$props4.orientation, mirror = _this$props4.mirror;
          var verticalAnchor = "end";
          switch (orientation) {
            case "left":
            case "right":
              verticalAnchor = "middle";
              break;
            case "top":
              verticalAnchor = mirror ? "start" : "end";
              break;
            default:
              verticalAnchor = mirror ? "end" : "start";
              break;
          }
          return verticalAnchor;
        }
      },
      {
        key: "renderAxisLine",
        value: function renderAxisLine() {
          var _this$props5 = this.props, x2 = _this$props5.x, y2 = _this$props5.y, width = _this$props5.width, height = _this$props5.height, orientation = _this$props5.orientation, mirror = _this$props5.mirror, axisLine = _this$props5.axisLine;
          var props = _objectSpread$3(_objectSpread$3(_objectSpread$3({}, filterProps(this.props, false)), filterProps(axisLine, false)), {}, {
            fill: "none"
          });
          if (orientation === "top" || orientation === "bottom") {
            var needHeight = +(orientation === "top" && !mirror || orientation === "bottom" && mirror);
            props = _objectSpread$3(_objectSpread$3({}, props), {}, {
              x1: x2,
              y1: y2 + needHeight * height,
              x2: x2 + width,
              y2: y2 + needHeight * height
            });
          } else {
            var needWidth = +(orientation === "left" && !mirror || orientation === "right" && mirror);
            props = _objectSpread$3(_objectSpread$3({}, props), {}, {
              x1: x2 + needWidth * width,
              y1: y2,
              x2: x2 + needWidth * width,
              y2: y2 + height
            });
          }
          return React.createElement("line", _extends$4({}, props, {
            className: clsx("recharts-cartesian-axis-line", get(axisLine, "className"))
          }));
        }
      },
      {
        key: "renderTicks",
        value: function renderTicks(ticks2, fontSize, letterSpacing) {
          var _this2 = this;
          var _this$props6 = this.props, tickLine = _this$props6.tickLine, stroke = _this$props6.stroke, tick = _this$props6.tick, tickFormatter = _this$props6.tickFormatter, unit2 = _this$props6.unit;
          var finalTicks = getTicks(_objectSpread$3(_objectSpread$3({}, this.props), {}, {
            ticks: ticks2
          }), fontSize, letterSpacing);
          var textAnchor = this.getTickTextAnchor();
          var verticalAnchor = this.getTickVerticalAnchor();
          var axisProps = filterProps(this.props, false);
          var customTickProps = filterProps(tick, false);
          var tickLineProps = _objectSpread$3(_objectSpread$3({}, axisProps), {}, {
            fill: "none"
          }, filterProps(tickLine, false));
          var items = finalTicks.map(function(entry, i) {
            var _this2$getTickLineCoo = _this2.getTickLineCoord(entry), lineCoord = _this2$getTickLineCoo.line, tickCoord = _this2$getTickLineCoo.tick;
            var tickProps = _objectSpread$3(_objectSpread$3(_objectSpread$3(_objectSpread$3({
              textAnchor,
              verticalAnchor
            }, axisProps), {}, {
              stroke: "none",
              fill: stroke
            }, customTickProps), tickCoord), {}, {
              index: i,
              payload: entry,
              visibleTicksCount: finalTicks.length,
              tickFormatter
            });
            return React.createElement(Layer, _extends$4({
              className: "recharts-cartesian-axis-tick",
              key: "tick-".concat(entry.value, "-").concat(entry.coordinate, "-").concat(entry.tickCoord)
            }, adaptEventsOfChild(_this2.props, entry, i)), tickLine && React.createElement("line", _extends$4({}, tickLineProps, lineCoord, {
              className: clsx("recharts-cartesian-axis-tick-line", get(tickLine, "className"))
            })), tick && CartesianAxis2.renderTickItem(tick, tickProps, "".concat(isFunction(tickFormatter) ? tickFormatter(entry.value, i) : entry.value).concat(unit2 || "")));
          });
          return React.createElement("g", {
            className: "recharts-cartesian-axis-ticks"
          }, items);
        }
      },
      {
        key: "render",
        value: function render() {
          var _this3 = this;
          var _this$props7 = this.props, axisLine = _this$props7.axisLine, width = _this$props7.width, height = _this$props7.height, ticksGenerator = _this$props7.ticksGenerator, className = _this$props7.className, hide = _this$props7.hide;
          if (hide) {
            return null;
          }
          var _this$props8 = this.props, ticks2 = _this$props8.ticks, noTicksProps = _objectWithoutProperties$2(_this$props8, _excluded3);
          var finalTicks = ticks2;
          if (isFunction(ticksGenerator)) {
            finalTicks = ticks2 && ticks2.length > 0 ? ticksGenerator(this.props) : ticksGenerator(noTicksProps);
          }
          if (width <= 0 || height <= 0 || !finalTicks || !finalTicks.length) {
            return null;
          }
          return React.createElement(Layer, {
            className: clsx("recharts-cartesian-axis", className),
            ref: function ref(_ref2) {
              _this3.layerReference = _ref2;
            }
          }, axisLine && this.renderAxisLine(), this.renderTicks(finalTicks, this.state.fontSize, this.state.letterSpacing), Label.renderCallByParent(this.props));
        }
      }
    ], [
      {
        key: "renderTickItem",
        value: function renderTickItem(option, props, value) {
          var tickItem;
          if (React.isValidElement(option)) {
            tickItem = React.cloneElement(option, props);
          } else if (isFunction(option)) {
            tickItem = option(props);
          } else {
            tickItem = React.createElement(Text, _extends$4({}, props, {
              className: "recharts-cartesian-axis-tick-value"
            }), value);
          }
          return tickItem;
        }
      }
    ]);
  }(reactExports.Component);
  _defineProperty$6(CartesianAxis, "displayName", "CartesianAxis");
  _defineProperty$6(CartesianAxis, "defaultProps", {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    viewBox: {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    },
    orientation: "bottom",
    ticks: [],
    stroke: "#666",
    tickLine: true,
    axisLine: true,
    tick: true,
    mirror: false,
    minTickGap: 5,
    tickSize: 6,
    tickMargin: 2,
    interval: "preserveEnd"
  });
  var _excluded$1 = [
    "x1",
    "y1",
    "x2",
    "y2",
    "key"
  ], _excluded2$1 = [
    "offset"
  ];
  function _typeof$5(o) {
    "@babel/helpers - typeof";
    return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$5(o);
  }
  function ownKeys$2(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$2(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$2(Object(t2), true).forEach(function(r2) {
        _defineProperty$5(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$5(obj, key, value) {
    key = _toPropertyKey$5(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$5(t2) {
    var i = _toPrimitive$5(t2, "string");
    return "symbol" == _typeof$5(i) ? i : i + "";
  }
  function _toPrimitive$5(t2, r) {
    if ("object" != _typeof$5(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$5(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _extends$3() {
    _extends$3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$3.apply(this, arguments);
  }
  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var Background = function Background2(props) {
    var fill = props.fill;
    if (!fill || fill === "none") {
      return null;
    }
    var fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, ry = props.ry;
    return React.createElement("rect", {
      x: x2,
      y: y2,
      ry,
      width,
      height,
      stroke: "none",
      fill,
      fillOpacity,
      className: "recharts-cartesian-grid-bg"
    });
  };
  function renderLineItem(option, props) {
    var lineItem;
    if (React.isValidElement(option)) {
      lineItem = React.cloneElement(option, props);
    } else if (isFunction(option)) {
      lineItem = option(props);
    } else {
      var x1 = props.x1, y1 = props.y1, x2 = props.x2, y2 = props.y2, key = props.key, others = _objectWithoutProperties$1(props, _excluded$1);
      var _filterProps = filterProps(others, false);
      _filterProps.offset;
      var restOfFilteredProps = _objectWithoutProperties$1(_filterProps, _excluded2$1);
      lineItem = React.createElement("line", _extends$3({}, restOfFilteredProps, {
        x1,
        y1,
        x2,
        y2,
        fill: "none",
        key
      }));
    }
    return lineItem;
  }
  function HorizontalGridLines(props) {
    var x2 = props.x, width = props.width, _props$horizontal = props.horizontal, horizontal = _props$horizontal === void 0 ? true : _props$horizontal, horizontalPoints = props.horizontalPoints;
    if (!horizontal || !horizontalPoints || !horizontalPoints.length) {
      return null;
    }
    var items = horizontalPoints.map(function(entry, i) {
      var lineItemProps = _objectSpread$2(_objectSpread$2({}, props), {}, {
        x1: x2,
        y1: entry,
        x2: x2 + width,
        y2: entry,
        key: "line-".concat(i),
        index: i
      });
      return renderLineItem(horizontal, lineItemProps);
    });
    return React.createElement("g", {
      className: "recharts-cartesian-grid-horizontal"
    }, items);
  }
  function VerticalGridLines(props) {
    var y2 = props.y, height = props.height, _props$vertical = props.vertical, vertical = _props$vertical === void 0 ? true : _props$vertical, verticalPoints = props.verticalPoints;
    if (!vertical || !verticalPoints || !verticalPoints.length) {
      return null;
    }
    var items = verticalPoints.map(function(entry, i) {
      var lineItemProps = _objectSpread$2(_objectSpread$2({}, props), {}, {
        x1: entry,
        y1: y2,
        x2: entry,
        y2: y2 + height,
        key: "line-".concat(i),
        index: i
      });
      return renderLineItem(vertical, lineItemProps);
    });
    return React.createElement("g", {
      className: "recharts-cartesian-grid-vertical"
    }, items);
  }
  function HorizontalStripes(props) {
    var horizontalFill = props.horizontalFill, fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, horizontalPoints = props.horizontalPoints, _props$horizontal2 = props.horizontal, horizontal = _props$horizontal2 === void 0 ? true : _props$horizontal2;
    if (!horizontal || !horizontalFill || !horizontalFill.length) {
      return null;
    }
    var roundedSortedHorizontalPoints = horizontalPoints.map(function(e3) {
      return Math.round(e3 + y2 - y2);
    }).sort(function(a2, b2) {
      return a2 - b2;
    });
    if (y2 !== roundedSortedHorizontalPoints[0]) {
      roundedSortedHorizontalPoints.unshift(0);
    }
    var items = roundedSortedHorizontalPoints.map(function(entry, i) {
      var lastStripe = !roundedSortedHorizontalPoints[i + 1];
      var lineHeight = lastStripe ? y2 + height - entry : roundedSortedHorizontalPoints[i + 1] - entry;
      if (lineHeight <= 0) {
        return null;
      }
      var colorIndex = i % horizontalFill.length;
      return React.createElement("rect", {
        key: "react-".concat(i),
        y: entry,
        x: x2,
        height: lineHeight,
        width,
        stroke: "none",
        fill: horizontalFill[colorIndex],
        fillOpacity,
        className: "recharts-cartesian-grid-bg"
      });
    });
    return React.createElement("g", {
      className: "recharts-cartesian-gridstripes-horizontal"
    }, items);
  }
  function VerticalStripes(props) {
    var _props$vertical2 = props.vertical, vertical = _props$vertical2 === void 0 ? true : _props$vertical2, verticalFill = props.verticalFill, fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, verticalPoints = props.verticalPoints;
    if (!vertical || !verticalFill || !verticalFill.length) {
      return null;
    }
    var roundedSortedVerticalPoints = verticalPoints.map(function(e3) {
      return Math.round(e3 + x2 - x2);
    }).sort(function(a2, b2) {
      return a2 - b2;
    });
    if (x2 !== roundedSortedVerticalPoints[0]) {
      roundedSortedVerticalPoints.unshift(0);
    }
    var items = roundedSortedVerticalPoints.map(function(entry, i) {
      var lastStripe = !roundedSortedVerticalPoints[i + 1];
      var lineWidth = lastStripe ? x2 + width - entry : roundedSortedVerticalPoints[i + 1] - entry;
      if (lineWidth <= 0) {
        return null;
      }
      var colorIndex = i % verticalFill.length;
      return React.createElement("rect", {
        key: "react-".concat(i),
        x: entry,
        y: y2,
        width: lineWidth,
        height,
        stroke: "none",
        fill: verticalFill[colorIndex],
        fillOpacity,
        className: "recharts-cartesian-grid-bg"
      });
    });
    return React.createElement("g", {
      className: "recharts-cartesian-gridstripes-vertical"
    }, items);
  }
  var defaultVerticalCoordinatesGenerator = function defaultVerticalCoordinatesGenerator2(_ref, syncWithTicks) {
    var xAxis = _ref.xAxis, width = _ref.width, height = _ref.height, offset = _ref.offset;
    return getCoordinatesOfGrid(getTicks(_objectSpread$2(_objectSpread$2(_objectSpread$2({}, CartesianAxis.defaultProps), xAxis), {}, {
      ticks: getTicksOfAxis(xAxis, true),
      viewBox: {
        x: 0,
        y: 0,
        width,
        height
      }
    })), offset.left, offset.left + offset.width, syncWithTicks);
  };
  var defaultHorizontalCoordinatesGenerator = function defaultHorizontalCoordinatesGenerator2(_ref2, syncWithTicks) {
    var yAxis = _ref2.yAxis, width = _ref2.width, height = _ref2.height, offset = _ref2.offset;
    return getCoordinatesOfGrid(getTicks(_objectSpread$2(_objectSpread$2(_objectSpread$2({}, CartesianAxis.defaultProps), yAxis), {}, {
      ticks: getTicksOfAxis(yAxis, true),
      viewBox: {
        x: 0,
        y: 0,
        width,
        height
      }
    })), offset.top, offset.top + offset.height, syncWithTicks);
  };
  var defaultProps = {
    horizontal: true,
    vertical: true,
    horizontalPoints: [],
    verticalPoints: [],
    stroke: "#ccc",
    fill: "none",
    verticalFill: [],
    horizontalFill: []
  };
  function CartesianGrid(props) {
    var _props$stroke, _props$fill, _props$horizontal3, _props$horizontalFill, _props$vertical3, _props$verticalFill;
    var chartWidth = useChartWidth();
    var chartHeight = useChartHeight();
    var offset = useOffset();
    var propsIncludingDefaults = _objectSpread$2(_objectSpread$2({}, props), {}, {
      stroke: (_props$stroke = props.stroke) !== null && _props$stroke !== void 0 ? _props$stroke : defaultProps.stroke,
      fill: (_props$fill = props.fill) !== null && _props$fill !== void 0 ? _props$fill : defaultProps.fill,
      horizontal: (_props$horizontal3 = props.horizontal) !== null && _props$horizontal3 !== void 0 ? _props$horizontal3 : defaultProps.horizontal,
      horizontalFill: (_props$horizontalFill = props.horizontalFill) !== null && _props$horizontalFill !== void 0 ? _props$horizontalFill : defaultProps.horizontalFill,
      vertical: (_props$vertical3 = props.vertical) !== null && _props$vertical3 !== void 0 ? _props$vertical3 : defaultProps.vertical,
      verticalFill: (_props$verticalFill = props.verticalFill) !== null && _props$verticalFill !== void 0 ? _props$verticalFill : defaultProps.verticalFill,
      x: isNumber(props.x) ? props.x : offset.left,
      y: isNumber(props.y) ? props.y : offset.top,
      width: isNumber(props.width) ? props.width : offset.width,
      height: isNumber(props.height) ? props.height : offset.height
    });
    var x2 = propsIncludingDefaults.x, y2 = propsIncludingDefaults.y, width = propsIncludingDefaults.width, height = propsIncludingDefaults.height, syncWithTicks = propsIncludingDefaults.syncWithTicks, horizontalValues = propsIncludingDefaults.horizontalValues, verticalValues = propsIncludingDefaults.verticalValues;
    var xAxis = useArbitraryXAxis();
    var yAxis = useYAxisWithFiniteDomainOrRandom();
    if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0 || !isNumber(x2) || x2 !== +x2 || !isNumber(y2) || y2 !== +y2) {
      return null;
    }
    var verticalCoordinatesGenerator = propsIncludingDefaults.verticalCoordinatesGenerator || defaultVerticalCoordinatesGenerator;
    var horizontalCoordinatesGenerator = propsIncludingDefaults.horizontalCoordinatesGenerator || defaultHorizontalCoordinatesGenerator;
    var horizontalPoints = propsIncludingDefaults.horizontalPoints, verticalPoints = propsIncludingDefaults.verticalPoints;
    if ((!horizontalPoints || !horizontalPoints.length) && isFunction(horizontalCoordinatesGenerator)) {
      var isHorizontalValues = horizontalValues && horizontalValues.length;
      var generatorResult = horizontalCoordinatesGenerator({
        yAxis: yAxis ? _objectSpread$2(_objectSpread$2({}, yAxis), {}, {
          ticks: isHorizontalValues ? horizontalValues : yAxis.ticks
        }) : void 0,
        width: chartWidth,
        height: chartHeight,
        offset
      }, isHorizontalValues ? true : syncWithTicks);
      warn(Array.isArray(generatorResult), "horizontalCoordinatesGenerator should return Array but instead it returned [".concat(_typeof$5(generatorResult), "]"));
      if (Array.isArray(generatorResult)) {
        horizontalPoints = generatorResult;
      }
    }
    if ((!verticalPoints || !verticalPoints.length) && isFunction(verticalCoordinatesGenerator)) {
      var isVerticalValues = verticalValues && verticalValues.length;
      var _generatorResult = verticalCoordinatesGenerator({
        xAxis: xAxis ? _objectSpread$2(_objectSpread$2({}, xAxis), {}, {
          ticks: isVerticalValues ? verticalValues : xAxis.ticks
        }) : void 0,
        width: chartWidth,
        height: chartHeight,
        offset
      }, isVerticalValues ? true : syncWithTicks);
      warn(Array.isArray(_generatorResult), "verticalCoordinatesGenerator should return Array but instead it returned [".concat(_typeof$5(_generatorResult), "]"));
      if (Array.isArray(_generatorResult)) {
        verticalPoints = _generatorResult;
      }
    }
    return React.createElement("g", {
      className: "recharts-cartesian-grid"
    }, React.createElement(Background, {
      fill: propsIncludingDefaults.fill,
      fillOpacity: propsIncludingDefaults.fillOpacity,
      x: propsIncludingDefaults.x,
      y: propsIncludingDefaults.y,
      width: propsIncludingDefaults.width,
      height: propsIncludingDefaults.height,
      ry: propsIncludingDefaults.ry
    }), React.createElement(HorizontalGridLines, _extends$3({}, propsIncludingDefaults, {
      offset,
      horizontalPoints,
      xAxis,
      yAxis
    })), React.createElement(VerticalGridLines, _extends$3({}, propsIncludingDefaults, {
      offset,
      verticalPoints,
      xAxis,
      yAxis
    })), React.createElement(HorizontalStripes, _extends$3({}, propsIncludingDefaults, {
      horizontalPoints
    })), React.createElement(VerticalStripes, _extends$3({}, propsIncludingDefaults, {
      verticalPoints
    })));
  }
  CartesianGrid.displayName = "CartesianGrid";
  function _typeof$4(o) {
    "@babel/helpers - typeof";
    return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$4(o);
  }
  function _classCallCheck$3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$3(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$4(descriptor.key), descriptor);
    }
  }
  function _createClass$3(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$3(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$2(t2, o, e3) {
    return o = _getPrototypeOf$2(o), _possibleConstructorReturn$2(t2, _isNativeReflectConstruct$2() ? Reflect.construct(o, e3 || [], _getPrototypeOf$2(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$2(self, call) {
    if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$2(self);
  }
  function _assertThisInitialized$2(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$2() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$2(o) {
    _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$2(o);
  }
  function _inherits$2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$2(subClass, superClass);
  }
  function _setPrototypeOf$2(o, p2) {
    _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$2(o, p2);
  }
  function _defineProperty$4(obj, key, value) {
    key = _toPropertyKey$4(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$4(t2) {
    var i = _toPrimitive$4(t2, "string");
    return "symbol" == _typeof$4(i) ? i : i + "";
  }
  function _toPrimitive$4(t2, r) {
    if ("object" != _typeof$4(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$4(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _extends$2() {
    _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$2.apply(this, arguments);
  }
  function XAxisImpl(_ref) {
    var xAxisId = _ref.xAxisId;
    var width = useChartWidth();
    var height = useChartHeight();
    var axisOptions = useXAxisOrThrow(xAxisId);
    if (axisOptions == null) {
      return null;
    }
    return React.createElement(CartesianAxis, _extends$2({}, axisOptions, {
      className: clsx("recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType), axisOptions.className),
      viewBox: {
        x: 0,
        y: 0,
        width,
        height
      },
      ticksGenerator: function ticksGenerator(axis) {
        return getTicksOfAxis(axis, true);
      }
    }));
  }
  var XAxis = function(_React$Component) {
    function XAxis2() {
      _classCallCheck$3(this, XAxis2);
      return _callSuper$2(this, XAxis2, arguments);
    }
    _inherits$2(XAxis2, _React$Component);
    return _createClass$3(XAxis2, [
      {
        key: "render",
        value: function render() {
          return React.createElement(XAxisImpl, this.props);
        }
      }
    ]);
  }(React.Component);
  _defineProperty$4(XAxis, "displayName", "XAxis");
  _defineProperty$4(XAxis, "defaultProps", {
    allowDecimals: true,
    hide: false,
    orientation: "bottom",
    width: 0,
    height: 30,
    mirror: false,
    xAxisId: 0,
    tickCount: 5,
    type: "category",
    padding: {
      left: 0,
      right: 0
    },
    allowDataOverflow: false,
    scale: "auto",
    reversed: false,
    allowDuplicatedCategory: true
  });
  function _typeof$3(o) {
    "@babel/helpers - typeof";
    return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$3(o);
  }
  function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$2(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$3(descriptor.key), descriptor);
    }
  }
  function _createClass$2(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper$1(t2, o, e3) {
    return o = _getPrototypeOf$1(o), _possibleConstructorReturn$1(t2, _isNativeReflectConstruct$1() ? Reflect.construct(o, e3 || [], _getPrototypeOf$1(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn$1(self, call) {
    if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$1(self);
  }
  function _assertThisInitialized$1(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct$1() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t3) {
    }
    return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf$1(o) {
    _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf$1(o);
  }
  function _inherits$1(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$1(subClass, superClass);
  }
  function _setPrototypeOf$1(o, p2) {
    _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf$1(o, p2);
  }
  function _defineProperty$3(obj, key, value) {
    key = _toPropertyKey$3(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$3(t2) {
    var i = _toPrimitive$3(t2, "string");
    return "symbol" == _typeof$3(i) ? i : i + "";
  }
  function _toPrimitive$3(t2, r) {
    if ("object" != _typeof$3(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$3(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function _extends$1() {
    _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$1.apply(this, arguments);
  }
  var YAxisImpl = function YAxisImpl2(_ref) {
    var yAxisId = _ref.yAxisId;
    var width = useChartWidth();
    var height = useChartHeight();
    var axisOptions = useYAxisOrThrow(yAxisId);
    if (axisOptions == null) {
      return null;
    }
    return React.createElement(CartesianAxis, _extends$1({}, axisOptions, {
      className: clsx("recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType), axisOptions.className),
      viewBox: {
        x: 0,
        y: 0,
        width,
        height
      },
      ticksGenerator: function ticksGenerator(axis) {
        return getTicksOfAxis(axis, true);
      }
    }));
  };
  var YAxis = function(_React$Component) {
    function YAxis2() {
      _classCallCheck$2(this, YAxis2);
      return _callSuper$1(this, YAxis2, arguments);
    }
    _inherits$1(YAxis2, _React$Component);
    return _createClass$2(YAxis2, [
      {
        key: "render",
        value: function render() {
          return React.createElement(YAxisImpl, this.props);
        }
      }
    ]);
  }(React.Component);
  _defineProperty$3(YAxis, "displayName", "YAxis");
  _defineProperty$3(YAxis, "defaultProps", {
    allowDuplicatedCategory: true,
    allowDecimals: true,
    hide: false,
    orientation: "left",
    width: 60,
    height: 0,
    mirror: false,
    yAxisId: 0,
    tickCount: 5,
    type: "number",
    padding: {
      top: 0,
      bottom: 0
    },
    allowDataOverflow: false,
    scale: "auto",
    reversed: false
  });
  function _toConsumableArray$1(arr) {
    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
  }
  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$1(o, minLen);
  }
  function _iterableToArray$1(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }
  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  var detectReferenceElementsDomain = function detectReferenceElementsDomain2(children, domain, axisId, axisType, specifiedTicks) {
    var lines = findAllByType(children, ReferenceLine);
    var dots = findAllByType(children, ReferenceDot);
    var elements = [].concat(_toConsumableArray$1(lines), _toConsumableArray$1(dots));
    var areas = findAllByType(children, ReferenceArea);
    var idKey = "".concat(axisType, "Id");
    var valueKey = axisType[0];
    var finalDomain = domain;
    if (elements.length) {
      finalDomain = elements.reduce(function(result, el) {
        if (el.props[idKey] === axisId && ifOverflowMatches(el.props, "extendDomain") && isNumber(el.props[valueKey])) {
          var value = el.props[valueKey];
          return [
            Math.min(result[0], value),
            Math.max(result[1], value)
          ];
        }
        return result;
      }, finalDomain);
    }
    if (areas.length) {
      var key1 = "".concat(valueKey, "1");
      var key2 = "".concat(valueKey, "2");
      finalDomain = areas.reduce(function(result, el) {
        if (el.props[idKey] === axisId && ifOverflowMatches(el.props, "extendDomain") && isNumber(el.props[key1]) && isNumber(el.props[key2])) {
          var value1 = el.props[key1];
          var value2 = el.props[key2];
          return [
            Math.min(result[0], value1, value2),
            Math.max(result[1], value1, value2)
          ];
        }
        return result;
      }, finalDomain);
    }
    if (specifiedTicks && specifiedTicks.length) {
      finalDomain = specifiedTicks.reduce(function(result, tick) {
        if (isNumber(tick)) {
          return [
            Math.min(result[0], tick),
            Math.max(result[1], tick)
          ];
        }
        return result;
      }, finalDomain);
    }
    return finalDomain;
  };
  var eventemitter3 = {
    exports: {}
  };
  (function(module) {
    var has = Object.prototype.hasOwnProperty, prefix2 = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__) prefix2 = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [
        emitter._events[evt],
        listener
      ];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix2 ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [
        handlers.fn
      ];
      for (var i = 0, l2 = handlers.length, ee2 = new Array(l2); i < l2; i++) {
        ee2[i] = handlers[i].fn;
      }
      return ee2;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j2;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j2 = 1, args = new Array(len - 1); j2 < len; j2++) {
                args[j2 - 1] = arguments[j2];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix2 ? prefix2 + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix2;
    EventEmitter2.EventEmitter = EventEmitter2;
    {
      module.exports = EventEmitter2;
    }
  })(eventemitter3);
  var eventemitter3Exports = eventemitter3.exports;
  const EventEmitter = getDefaultExportFromCjs(eventemitter3Exports);
  var eventCenter = new EventEmitter();
  var SYNC_EVENT = "recharts.syncMouseEvents";
  function _typeof$2(o) {
    "@babel/helpers - typeof";
    return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$2(o);
  }
  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$2(descriptor.key), descriptor);
    }
  }
  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty$2(obj, key, value) {
    key = _toPropertyKey$2(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$2(t2) {
    var i = _toPrimitive$2(t2, "string");
    return "symbol" == _typeof$2(i) ? i : i + "";
  }
  function _toPrimitive$2(t2, r) {
    if ("object" != _typeof$2(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r);
      if ("object" != _typeof$2(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(t2);
  }
  var AccessibilityManager = function() {
    function AccessibilityManager2() {
      _classCallCheck$1(this, AccessibilityManager2);
      _defineProperty$2(this, "activeIndex", 0);
      _defineProperty$2(this, "coordinateList", []);
      _defineProperty$2(this, "layout", "horizontal");
    }
    return _createClass$1(AccessibilityManager2, [
      {
        key: "setDetails",
        value: function setDetails(_ref) {
          var _ref2;
          var _ref$coordinateList = _ref.coordinateList, coordinateList = _ref$coordinateList === void 0 ? null : _ref$coordinateList, _ref$container = _ref.container, container = _ref$container === void 0 ? null : _ref$container, _ref$layout = _ref.layout, layout = _ref$layout === void 0 ? null : _ref$layout, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? null : _ref$offset, _ref$mouseHandlerCall = _ref.mouseHandlerCallback, mouseHandlerCallback = _ref$mouseHandlerCall === void 0 ? null : _ref$mouseHandlerCall;
          this.coordinateList = (_ref2 = coordinateList !== null && coordinateList !== void 0 ? coordinateList : this.coordinateList) !== null && _ref2 !== void 0 ? _ref2 : [];
          this.container = container !== null && container !== void 0 ? container : this.container;
          this.layout = layout !== null && layout !== void 0 ? layout : this.layout;
          this.offset = offset !== null && offset !== void 0 ? offset : this.offset;
          this.mouseHandlerCallback = mouseHandlerCallback !== null && mouseHandlerCallback !== void 0 ? mouseHandlerCallback : this.mouseHandlerCallback;
          this.activeIndex = Math.min(Math.max(this.activeIndex, 0), this.coordinateList.length - 1);
        }
      },
      {
        key: "focus",
        value: function focus() {
          this.spoofMouse();
        }
      },
      {
        key: "keyboardEvent",
        value: function keyboardEvent(e3) {
          if (this.coordinateList.length === 0) {
            return;
          }
          switch (e3.key) {
            case "ArrowRight": {
              if (this.layout !== "horizontal") {
                return;
              }
              this.activeIndex = Math.min(this.activeIndex + 1, this.coordinateList.length - 1);
              this.spoofMouse();
              break;
            }
            case "ArrowLeft": {
              if (this.layout !== "horizontal") {
                return;
              }
              this.activeIndex = Math.max(this.activeIndex - 1, 0);
              this.spoofMouse();
              break;
            }
          }
        }
      },
      {
        key: "setIndex",
        value: function setIndex(newIndex) {
          this.activeIndex = newIndex;
        }
      },
      {
        key: "spoofMouse",
        value: function spoofMouse() {
          var _window, _window2;
          if (this.layout !== "horizontal") {
            return;
          }
          if (this.coordinateList.length === 0) {
            return;
          }
          var _this$container$getBo = this.container.getBoundingClientRect(), x2 = _this$container$getBo.x, y2 = _this$container$getBo.y, height = _this$container$getBo.height;
          var coordinate = this.coordinateList[this.activeIndex].coordinate;
          var scrollOffsetX = ((_window = window) === null || _window === void 0 ? void 0 : _window.scrollX) || 0;
          var scrollOffsetY = ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.scrollY) || 0;
          var pageX = x2 + coordinate + scrollOffsetX;
          var pageY = y2 + this.offset.top + height / 2 + scrollOffsetY;
          this.mouseHandlerCallback({
            pageX,
            pageY
          });
        }
      }
    ]);
  }();
  function isDomainSpecifiedByUser(domain, allowDataOverflow, axisType) {
    if (axisType === "number" && allowDataOverflow === true && Array.isArray(domain)) {
      var domainStart = domain === null || domain === void 0 ? void 0 : domain[0];
      var domainEnd = domain === null || domain === void 0 ? void 0 : domain[1];
      if (!!domainStart && !!domainEnd && isNumber(domainStart) && isNumber(domainEnd)) {
        return true;
      }
    }
    return false;
  }
  function getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize) {
    var halfSize = tooltipAxisBandSize / 2;
    return {
      stroke: "none",
      fill: "#ccc",
      x: layout === "horizontal" ? activeCoordinate.x - halfSize : offset.left + 0.5,
      y: layout === "horizontal" ? offset.top + 0.5 : activeCoordinate.y - halfSize,
      width: layout === "horizontal" ? tooltipAxisBandSize : offset.width - 1,
      height: layout === "horizontal" ? offset.height - 1 : tooltipAxisBandSize
    };
  }
  function getRadialCursorPoints(activeCoordinate) {
    var cx = activeCoordinate.cx, cy = activeCoordinate.cy, radius = activeCoordinate.radius, startAngle = activeCoordinate.startAngle, endAngle = activeCoordinate.endAngle;
    var startPoint = polarToCartesian(cx, cy, radius, startAngle);
    var endPoint = polarToCartesian(cx, cy, radius, endAngle);
    return {
      points: [
        startPoint,
        endPoint
      ],
      cx,
      cy,
      radius,
      startAngle,
      endAngle
    };
  }
  function getCursorPoints(layout, activeCoordinate, offset) {
    var x1, y1, x2, y2;
    if (layout === "horizontal") {
      x1 = activeCoordinate.x;
      x2 = x1;
      y1 = offset.top;
      y2 = offset.top + offset.height;
    } else if (layout === "vertical") {
      y1 = activeCoordinate.y;
      y2 = y1;
      x1 = offset.left;
      x2 = offset.left + offset.width;
    } else if (activeCoordinate.cx != null && activeCoordinate.cy != null) {
      if (layout === "centric") {
        var cx = activeCoordinate.cx, cy = activeCoordinate.cy, innerRadius = activeCoordinate.innerRadius, outerRadius = activeCoordinate.outerRadius, angle = activeCoordinate.angle;
        var innerPoint = polarToCartesian(cx, cy, innerRadius, angle);
        var outerPoint = polarToCartesian(cx, cy, outerRadius, angle);
        x1 = innerPoint.x;
        y1 = innerPoint.y;
        x2 = outerPoint.x;
        y2 = outerPoint.y;
      } else {
        return getRadialCursorPoints(activeCoordinate);
      }
    }
    return [
      {
        x: x1,
        y: y1
      },
      {
        x: x2,
        y: y2
      }
    ];
  }
  function _typeof$1(o) {
    "@babel/helpers - typeof";
    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof$1(o);
  }
  function ownKeys$1(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread$1(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys$1(Object(t2), true).forEach(function(r2) {
        _defineProperty$1(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty$1(obj, key, value) {
    key = _toPropertyKey$1(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$1(t2) {
    var i = _toPrimitive$1(t2, "string");
    return "symbol" == _typeof$1(i) ? i : i + "";
  }
  function _toPrimitive$1(t2, r) {
    if ("object" != _typeof$1(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof$1(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  function Cursor(props) {
    var _element$props$cursor, _defaultProps;
    var element = props.element, tooltipEventType = props.tooltipEventType, isActive = props.isActive, activeCoordinate = props.activeCoordinate, activePayload = props.activePayload, offset = props.offset, activeTooltipIndex = props.activeTooltipIndex, tooltipAxisBandSize = props.tooltipAxisBandSize, layout = props.layout, chartName = props.chartName;
    var elementPropsCursor = (_element$props$cursor = element.props.cursor) !== null && _element$props$cursor !== void 0 ? _element$props$cursor : (_defaultProps = element.type.defaultProps) === null || _defaultProps === void 0 ? void 0 : _defaultProps.cursor;
    if (!element || !elementPropsCursor || !isActive || !activeCoordinate || chartName !== "ScatterChart" && tooltipEventType !== "axis") {
      return null;
    }
    var restProps;
    var cursorComp = Curve;
    if (chartName === "ScatterChart") {
      restProps = activeCoordinate;
      cursorComp = Cross;
    } else if (chartName === "BarChart") {
      restProps = getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize);
      cursorComp = Rectangle;
    } else if (layout === "radial") {
      var _getRadialCursorPoint = getRadialCursorPoints(activeCoordinate), cx = _getRadialCursorPoint.cx, cy = _getRadialCursorPoint.cy, radius = _getRadialCursorPoint.radius, startAngle = _getRadialCursorPoint.startAngle, endAngle = _getRadialCursorPoint.endAngle;
      restProps = {
        cx,
        cy,
        startAngle,
        endAngle,
        innerRadius: radius,
        outerRadius: radius
      };
      cursorComp = Sector;
    } else {
      restProps = {
        points: getCursorPoints(layout, activeCoordinate, offset)
      };
      cursorComp = Curve;
    }
    var cursorProps = _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({
      stroke: "#ccc",
      pointerEvents: "none"
    }, offset), restProps), filterProps(elementPropsCursor, false)), {}, {
      payload: activePayload,
      payloadIndex: activeTooltipIndex,
      className: clsx("recharts-tooltip-cursor", elementPropsCursor.className)
    });
    return reactExports.isValidElement(elementPropsCursor) ? reactExports.cloneElement(elementPropsCursor, cursorProps) : reactExports.createElement(cursorComp, cursorProps);
  }
  var _excluded = [
    "item"
  ], _excluded2 = [
    "children",
    "className",
    "width",
    "height",
    "style",
    "compact",
    "title",
    "desc"
  ];
  function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof(o);
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit(r, l2) {
    var t2 = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t2) {
      var e3, n2, i, u2, a2 = [], f2 = true, o = false;
      try {
        if (i = (t2 = t2.call(r)).next, 0 === l2) ;
        else for (; !(f2 = (e3 = i.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
      } catch (r2) {
        o = true, n2 = r2;
      } finally {
        try {
          if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
        } finally {
          if (o) throw n2;
        }
      }
      return a2;
    }
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _callSuper(t2, o, e3) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct() ? Reflect.construct(o, e3 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e3));
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct() {
    try {
      var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t22) {
    }
    return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
      return !!t2;
    })();
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _setPrototypeOf(o, p2) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p22) {
      o2.__proto__ = p22;
      return o2;
    };
    return _setPrototypeOf(o, p2);
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o, minLen);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function ownKeys(e3, r) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e3);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e3, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread(e3) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t2), true).forEach(function(r2) {
        _defineProperty(e3, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e3, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e3;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(t2) {
    var i = _toPrimitive(t2, "string");
    return "symbol" == _typeof(i) ? i : i + "";
  }
  function _toPrimitive(t2, r) {
    if ("object" != _typeof(t2) || !t2) return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i = e3.call(t2, r || "default");
      if ("object" != _typeof(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }
  var ORIENT_MAP = {
    xAxis: [
      "bottom",
      "top"
    ],
    yAxis: [
      "left",
      "right"
    ]
  };
  var FULL_WIDTH_AND_HEIGHT = {
    width: "100%",
    height: "100%"
  };
  var originCoordinate = {
    x: 0,
    y: 0
  };
  function renderAsIs(element) {
    return element;
  }
  var calculateTooltipPos = function calculateTooltipPos2(rangeObj, layout) {
    if (layout === "horizontal") {
      return rangeObj.x;
    }
    if (layout === "vertical") {
      return rangeObj.y;
    }
    if (layout === "centric") {
      return rangeObj.angle;
    }
    return rangeObj.radius;
  };
  var getActiveCoordinate = function getActiveCoordinate2(layout, tooltipTicks, activeIndex, rangeObj) {
    var entry = tooltipTicks.find(function(tick) {
      return tick && tick.index === activeIndex;
    });
    if (entry) {
      if (layout === "horizontal") {
        return {
          x: entry.coordinate,
          y: rangeObj.y
        };
      }
      if (layout === "vertical") {
        return {
          x: rangeObj.x,
          y: entry.coordinate
        };
      }
      if (layout === "centric") {
        var _angle = entry.coordinate;
        var _radius = rangeObj.radius;
        return _objectSpread(_objectSpread(_objectSpread({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle)), {}, {
          angle: _angle,
          radius: _radius
        });
      }
      var radius = entry.coordinate;
      var angle = rangeObj.angle;
      return _objectSpread(_objectSpread(_objectSpread({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle)), {}, {
        angle,
        radius
      });
    }
    return originCoordinate;
  };
  var getDisplayedData = function getDisplayedData2(data, _ref) {
    var graphicalItems = _ref.graphicalItems, dataStartIndex = _ref.dataStartIndex, dataEndIndex = _ref.dataEndIndex;
    var itemsData = (graphicalItems !== null && graphicalItems !== void 0 ? graphicalItems : []).reduce(function(result, child) {
      var itemData = child.props.data;
      if (itemData && itemData.length) {
        return [].concat(_toConsumableArray(result), _toConsumableArray(itemData));
      }
      return result;
    }, []);
    if (itemsData.length > 0) {
      return itemsData;
    }
    if (data && data.length && isNumber(dataStartIndex) && isNumber(dataEndIndex)) {
      return data.slice(dataStartIndex, dataEndIndex + 1);
    }
    return [];
  };
  function getDefaultDomainByAxisType(axisType) {
    return axisType === "number" ? [
      0,
      "auto"
    ] : void 0;
  }
  var getTooltipContent = function getTooltipContent2(state, chartData, activeIndex, activeLabel) {
    var graphicalItems = state.graphicalItems, tooltipAxis = state.tooltipAxis;
    var displayedData = getDisplayedData(chartData, state);
    if (activeIndex < 0 || !graphicalItems || !graphicalItems.length || activeIndex >= displayedData.length) {
      return null;
    }
    return graphicalItems.reduce(function(result, child) {
      var _child$props$data;
      var data = (_child$props$data = child.props.data) !== null && _child$props$data !== void 0 ? _child$props$data : chartData;
      if (data && state.dataStartIndex + state.dataEndIndex !== 0 && state.dataEndIndex - state.dataStartIndex >= activeIndex) {
        data = data.slice(state.dataStartIndex, state.dataEndIndex + 1);
      }
      var payload;
      if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
        var entries = data === void 0 ? displayedData : data;
        payload = findEntryInArray(entries, tooltipAxis.dataKey, activeLabel);
      } else {
        payload = data && data[activeIndex] || displayedData[activeIndex];
      }
      if (!payload) {
        return result;
      }
      return [].concat(_toConsumableArray(result), [
        getTooltipItem(child, payload)
      ]);
    }, []);
  };
  var getTooltipData = function getTooltipData2(state, chartData, layout, rangeObj) {
    var rangeData = rangeObj || {
      x: state.chartX,
      y: state.chartY
    };
    var pos = calculateTooltipPos(rangeData, layout);
    var ticks2 = state.orderedTooltipTicks, axis = state.tooltipAxis, tooltipTicks = state.tooltipTicks;
    var activeIndex = calculateActiveTickIndex(pos, ticks2, tooltipTicks, axis);
    if (activeIndex >= 0 && tooltipTicks) {
      var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value;
      var activePayload = getTooltipContent(state, chartData, activeIndex, activeLabel);
      var activeCoordinate = getActiveCoordinate(layout, ticks2, activeIndex, rangeData);
      return {
        activeTooltipIndex: activeIndex,
        activeLabel,
        activePayload,
        activeCoordinate
      };
    }
    return null;
  };
  var getAxisMapByAxes = function getAxisMapByAxes2(props, _ref2) {
    var axes = _ref2.axes, graphicalItems = _ref2.graphicalItems, axisType = _ref2.axisType, axisIdKey = _ref2.axisIdKey, stackGroups = _ref2.stackGroups, dataStartIndex = _ref2.dataStartIndex, dataEndIndex = _ref2.dataEndIndex;
    var layout = props.layout, children = props.children, stackOffset = props.stackOffset;
    var isCategorical = isCategoricalAxis(layout, axisType);
    return axes.reduce(function(result, child) {
      var _childProps$domain2;
      var childProps = child.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, child.type.defaultProps), child.props) : child.props;
      var type = childProps.type, dataKey = childProps.dataKey, allowDataOverflow = childProps.allowDataOverflow, allowDuplicatedCategory = childProps.allowDuplicatedCategory, scale = childProps.scale, ticks2 = childProps.ticks, includeHidden = childProps.includeHidden;
      var axisId = childProps[axisIdKey];
      if (result[axisId]) {
        return result;
      }
      var displayedData = getDisplayedData(props.data, {
        graphicalItems: graphicalItems.filter(function(item) {
          var _defaultProps;
          var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : (_defaultProps = item.type.defaultProps) === null || _defaultProps === void 0 ? void 0 : _defaultProps[axisIdKey];
          return itemAxisId === axisId;
        }),
        dataStartIndex,
        dataEndIndex
      });
      var len = displayedData.length;
      var domain, duplicateDomain, categoricalDomain;
      if (isDomainSpecifiedByUser(childProps.domain, allowDataOverflow, type)) {
        domain = parseSpecifiedDomain(childProps.domain, null, allowDataOverflow);
        if (isCategorical && (type === "number" || scale !== "auto")) {
          categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, "category");
        }
      }
      var defaultDomain = getDefaultDomainByAxisType(type);
      if (!domain || domain.length === 0) {
        var _childProps$domain;
        var childDomain = (_childProps$domain = childProps.domain) !== null && _childProps$domain !== void 0 ? _childProps$domain : defaultDomain;
        if (dataKey) {
          domain = getDomainOfDataByKey(displayedData, dataKey, type);
          if (type === "category" && isCategorical) {
            var duplicate = hasDuplicate(domain);
            if (allowDuplicatedCategory && duplicate) {
              duplicateDomain = domain;
              domain = range$1(0, len);
            } else if (!allowDuplicatedCategory) {
              domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(function(finalDomain, entry) {
                return finalDomain.indexOf(entry) >= 0 ? finalDomain : [].concat(_toConsumableArray(finalDomain), [
                  entry
                ]);
              }, []);
            }
          } else if (type === "category") {
            if (!allowDuplicatedCategory) {
              domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(function(finalDomain, entry) {
                return finalDomain.indexOf(entry) >= 0 || entry === "" || isNil$1(entry) ? finalDomain : [].concat(_toConsumableArray(finalDomain), [
                  entry
                ]);
              }, []);
            } else {
              domain = domain.filter(function(entry) {
                return entry !== "" && !isNil$1(entry);
              });
            }
          } else if (type === "number") {
            var errorBarsDomain = parseErrorBarsOfAxis(displayedData, graphicalItems.filter(function(item) {
              var _defaultProps2, _defaultProps3;
              var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : (_defaultProps2 = item.type.defaultProps) === null || _defaultProps2 === void 0 ? void 0 : _defaultProps2[axisIdKey];
              var itemHide = "hide" in item.props ? item.props.hide : (_defaultProps3 = item.type.defaultProps) === null || _defaultProps3 === void 0 ? void 0 : _defaultProps3.hide;
              return itemAxisId === axisId && (includeHidden || !itemHide);
            }), dataKey, axisType, layout);
            if (errorBarsDomain) {
              domain = errorBarsDomain;
            }
          }
          if (isCategorical && (type === "number" || scale !== "auto")) {
            categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, "category");
          }
        } else if (isCategorical) {
          domain = range$1(0, len);
        } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack && type === "number") {
          domain = stackOffset === "expand" ? [
            0,
            1
          ] : getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
        } else {
          domain = getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
            var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : item.type.defaultProps[axisIdKey];
            var itemHide = "hide" in item.props ? item.props.hide : item.type.defaultProps.hide;
            return itemAxisId === axisId && (includeHidden || !itemHide);
          }), type, layout, true);
        }
        if (type === "number") {
          domain = detectReferenceElementsDomain(children, domain, axisId, axisType, ticks2);
          if (childDomain) {
            domain = parseSpecifiedDomain(childDomain, domain, allowDataOverflow);
          }
        } else if (type === "category" && childDomain) {
          var axisDomain = childDomain;
          var isDomainValid = domain.every(function(entry) {
            return axisDomain.indexOf(entry) >= 0;
          });
          if (isDomainValid) {
            domain = axisDomain;
          }
        }
      }
      return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, axisId, _objectSpread(_objectSpread({}, childProps), {}, {
        axisType,
        domain,
        categoricalDomain,
        duplicateDomain,
        originalDomain: (_childProps$domain2 = childProps.domain) !== null && _childProps$domain2 !== void 0 ? _childProps$domain2 : defaultDomain,
        isCategorical,
        layout
      })));
    }, {});
  };
  var getAxisMapByItems = function getAxisMapByItems2(props, _ref3) {
    var graphicalItems = _ref3.graphicalItems, Axis = _ref3.Axis, axisType = _ref3.axisType, axisIdKey = _ref3.axisIdKey, stackGroups = _ref3.stackGroups, dataStartIndex = _ref3.dataStartIndex, dataEndIndex = _ref3.dataEndIndex;
    var layout = props.layout, children = props.children;
    var displayedData = getDisplayedData(props.data, {
      graphicalItems,
      dataStartIndex,
      dataEndIndex
    });
    var len = displayedData.length;
    var isCategorical = isCategoricalAxis(layout, axisType);
    var index2 = -1;
    return graphicalItems.reduce(function(result, child) {
      var childProps = child.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, child.type.defaultProps), child.props) : child.props;
      var axisId = childProps[axisIdKey];
      var originalDomain = getDefaultDomainByAxisType("number");
      if (!result[axisId]) {
        index2++;
        var domain;
        if (isCategorical) {
          domain = range$1(0, len);
        } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {
          domain = getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
          domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
        } else {
          domain = parseSpecifiedDomain(originalDomain, getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
            var _defaultProps4, _defaultProps5;
            var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : (_defaultProps4 = item.type.defaultProps) === null || _defaultProps4 === void 0 ? void 0 : _defaultProps4[axisIdKey];
            var itemHide = "hide" in item.props ? item.props.hide : (_defaultProps5 = item.type.defaultProps) === null || _defaultProps5 === void 0 ? void 0 : _defaultProps5.hide;
            return itemAxisId === axisId && !itemHide;
          }), "number", layout), Axis.defaultProps.allowDataOverflow);
          domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
        }
        return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, axisId, _objectSpread(_objectSpread({
          axisType
        }, Axis.defaultProps), {}, {
          hide: true,
          orientation: get(ORIENT_MAP, "".concat(axisType, ".").concat(index2 % 2), null),
          domain,
          originalDomain,
          isCategorical,
          layout
        })));
      }
      return result;
    }, {});
  };
  var getAxisMap = function getAxisMap2(props, _ref4) {
    var _ref4$axisType = _ref4.axisType, axisType = _ref4$axisType === void 0 ? "xAxis" : _ref4$axisType, AxisComp = _ref4.AxisComp, graphicalItems = _ref4.graphicalItems, stackGroups = _ref4.stackGroups, dataStartIndex = _ref4.dataStartIndex, dataEndIndex = _ref4.dataEndIndex;
    var children = props.children;
    var axisIdKey = "".concat(axisType, "Id");
    var axes = findAllByType(children, AxisComp);
    var axisMap = {};
    if (axes && axes.length) {
      axisMap = getAxisMapByAxes(props, {
        axes,
        graphicalItems,
        axisType,
        axisIdKey,
        stackGroups,
        dataStartIndex,
        dataEndIndex
      });
    } else if (graphicalItems && graphicalItems.length) {
      axisMap = getAxisMapByItems(props, {
        Axis: AxisComp,
        graphicalItems,
        axisType,
        axisIdKey,
        stackGroups,
        dataStartIndex,
        dataEndIndex
      });
    }
    return axisMap;
  };
  var tooltipTicksGenerator = function tooltipTicksGenerator2(axisMap) {
    var axis = getAnyElementOfObject(axisMap);
    var tooltipTicks = getTicksOfAxis(axis, false, true);
    return {
      tooltipTicks,
      orderedTooltipTicks: sortBy$1(tooltipTicks, function(o) {
        return o.coordinate;
      }),
      tooltipAxis: axis,
      tooltipAxisBandSize: getBandSizeOfAxis(axis, tooltipTicks)
    };
  };
  var createDefaultState = function createDefaultState2(props) {
    var children = props.children, defaultShowTooltip = props.defaultShowTooltip;
    var brushItem = findChildByType(children, Brush);
    var startIndex = 0;
    var endIndex = 0;
    if (props.data && props.data.length !== 0) {
      endIndex = props.data.length - 1;
    }
    if (brushItem && brushItem.props) {
      if (brushItem.props.startIndex >= 0) {
        startIndex = brushItem.props.startIndex;
      }
      if (brushItem.props.endIndex >= 0) {
        endIndex = brushItem.props.endIndex;
      }
    }
    return {
      chartX: 0,
      chartY: 0,
      dataStartIndex: startIndex,
      dataEndIndex: endIndex,
      activeTooltipIndex: -1,
      isTooltipActive: Boolean(defaultShowTooltip)
    };
  };
  var hasGraphicalBarItem = function hasGraphicalBarItem2(graphicalItems) {
    if (!graphicalItems || !graphicalItems.length) {
      return false;
    }
    return graphicalItems.some(function(item) {
      var name = getDisplayName(item && item.type);
      return name && name.indexOf("Bar") >= 0;
    });
  };
  var getAxisNameByLayout = function getAxisNameByLayout2(layout) {
    if (layout === "horizontal") {
      return {
        numericAxisName: "yAxis",
        cateAxisName: "xAxis"
      };
    }
    if (layout === "vertical") {
      return {
        numericAxisName: "xAxis",
        cateAxisName: "yAxis"
      };
    }
    if (layout === "centric") {
      return {
        numericAxisName: "radiusAxis",
        cateAxisName: "angleAxis"
      };
    }
    return {
      numericAxisName: "angleAxis",
      cateAxisName: "radiusAxis"
    };
  };
  var calculateOffset = function calculateOffset2(_ref5, prevLegendBBox) {
    var props = _ref5.props, graphicalItems = _ref5.graphicalItems, _ref5$xAxisMap = _ref5.xAxisMap, xAxisMap = _ref5$xAxisMap === void 0 ? {} : _ref5$xAxisMap, _ref5$yAxisMap = _ref5.yAxisMap, yAxisMap = _ref5$yAxisMap === void 0 ? {} : _ref5$yAxisMap;
    var width = props.width, height = props.height, children = props.children;
    var margin = props.margin || {};
    var brushItem = findChildByType(children, Brush);
    var legendItem = findChildByType(children, Legend);
    var offsetH = Object.keys(yAxisMap).reduce(function(result, id) {
      var entry = yAxisMap[id];
      var orientation = entry.orientation;
      if (!entry.mirror && !entry.hide) {
        return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, orientation, result[orientation] + entry.width));
      }
      return result;
    }, {
      left: margin.left || 0,
      right: margin.right || 0
    });
    var offsetV = Object.keys(xAxisMap).reduce(function(result, id) {
      var entry = xAxisMap[id];
      var orientation = entry.orientation;
      if (!entry.mirror && !entry.hide) {
        return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, orientation, get(result, "".concat(orientation)) + entry.height));
      }
      return result;
    }, {
      top: margin.top || 0,
      bottom: margin.bottom || 0
    });
    var offset = _objectSpread(_objectSpread({}, offsetV), offsetH);
    var brushBottom = offset.bottom;
    if (brushItem) {
      offset.bottom += brushItem.props.height || Brush.defaultProps.height;
    }
    if (legendItem && prevLegendBBox) {
      offset = appendOffsetOfLegend(offset, graphicalItems, props, prevLegendBBox);
    }
    var offsetWidth = width - offset.left - offset.right;
    var offsetHeight = height - offset.top - offset.bottom;
    return _objectSpread(_objectSpread({
      brushBottom
    }, offset), {}, {
      width: Math.max(offsetWidth, 0),
      height: Math.max(offsetHeight, 0)
    });
  };
  var getCartesianAxisSize = function getCartesianAxisSize2(axisObj, axisName) {
    if (axisName === "xAxis") {
      return axisObj[axisName].width;
    }
    if (axisName === "yAxis") {
      return axisObj[axisName].height;
    }
    return void 0;
  };
  var generateCategoricalChart = function generateCategoricalChart2(_ref6) {
    var chartName = _ref6.chartName, GraphicalChild = _ref6.GraphicalChild, _ref6$defaultTooltipE = _ref6.defaultTooltipEventType, defaultTooltipEventType = _ref6$defaultTooltipE === void 0 ? "axis" : _ref6$defaultTooltipE, _ref6$validateTooltip = _ref6.validateTooltipEventTypes, validateTooltipEventTypes = _ref6$validateTooltip === void 0 ? [
      "axis"
    ] : _ref6$validateTooltip, axisComponents = _ref6.axisComponents, legendContent = _ref6.legendContent, formatAxisMap2 = _ref6.formatAxisMap, defaultProps2 = _ref6.defaultProps;
    var getFormatItems = function getFormatItems2(props, currentState) {
      var graphicalItems = currentState.graphicalItems, stackGroups = currentState.stackGroups, offset = currentState.offset, updateId = currentState.updateId, dataStartIndex = currentState.dataStartIndex, dataEndIndex = currentState.dataEndIndex;
      var barSize = props.barSize, layout = props.layout, barGap = props.barGap, barCategoryGap = props.barCategoryGap, globalMaxBarSize = props.maxBarSize;
      var _getAxisNameByLayout = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout.numericAxisName, cateAxisName = _getAxisNameByLayout.cateAxisName;
      var hasBar = hasGraphicalBarItem(graphicalItems);
      var formattedItems = [];
      graphicalItems.forEach(function(item, index2) {
        var displayedData = getDisplayedData(props.data, {
          graphicalItems: [
            item
          ],
          dataStartIndex,
          dataEndIndex
        });
        var itemProps = item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.type.defaultProps), item.props) : item.props;
        var dataKey = itemProps.dataKey, childMaxBarSize = itemProps.maxBarSize;
        var numericAxisId = itemProps["".concat(numericAxisName, "Id")];
        var cateAxisId = itemProps["".concat(cateAxisName, "Id")];
        var axisObjInitialValue = {};
        var axisObj = axisComponents.reduce(function(result, entry) {
          var axisMap = currentState["".concat(entry.axisType, "Map")];
          var id = itemProps["".concat(entry.axisType, "Id")];
          !(axisMap && axisMap[id] || entry.axisType === "zAxis") ? invariant() : void 0;
          var axis = axisMap[id];
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty(_defineProperty({}, entry.axisType, axis), "".concat(entry.axisType, "Ticks"), getTicksOfAxis(axis)));
        }, axisObjInitialValue);
        var cateAxis = axisObj[cateAxisName];
        var cateTicks = axisObj["".concat(cateAxisName, "Ticks")];
        var stackedData = stackGroups && stackGroups[numericAxisId] && stackGroups[numericAxisId].hasStack && getStackedDataOfItem(item, stackGroups[numericAxisId].stackGroups);
        var itemIsBar = getDisplayName(item.type).indexOf("Bar") >= 0;
        var bandSize = getBandSizeOfAxis(cateAxis, cateTicks);
        var barPosition = [];
        var sizeList = hasBar && getBarSizeList({
          barSize,
          stackGroups,
          totalSize: getCartesianAxisSize(axisObj, cateAxisName)
        });
        if (itemIsBar) {
          var _ref7, _getBandSizeOfAxis;
          var maxBarSize = isNil$1(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
          var barBandSize = (_ref7 = (_getBandSizeOfAxis = getBandSizeOfAxis(cateAxis, cateTicks, true)) !== null && _getBandSizeOfAxis !== void 0 ? _getBandSizeOfAxis : maxBarSize) !== null && _ref7 !== void 0 ? _ref7 : 0;
          barPosition = getBarPosition({
            barGap,
            barCategoryGap,
            bandSize: barBandSize !== bandSize ? barBandSize : bandSize,
            sizeList: sizeList[cateAxisId],
            maxBarSize
          });
          if (barBandSize !== bandSize) {
            barPosition = barPosition.map(function(pos) {
              return _objectSpread(_objectSpread({}, pos), {}, {
                position: _objectSpread(_objectSpread({}, pos.position), {}, {
                  offset: pos.position.offset - barBandSize / 2
                })
              });
            });
          }
        }
        var composedFn = item && item.type && item.type.getComposedData;
        if (composedFn) {
          formattedItems.push({
            props: _objectSpread(_objectSpread({}, composedFn(_objectSpread(_objectSpread({}, axisObj), {}, {
              displayedData,
              props,
              dataKey,
              item,
              bandSize,
              barPosition,
              offset,
              stackedData,
              layout,
              dataStartIndex,
              dataEndIndex
            }))), {}, _defineProperty(_defineProperty(_defineProperty({
              key: item.key || "item-".concat(index2)
            }, numericAxisName, axisObj[numericAxisName]), cateAxisName, axisObj[cateAxisName]), "animationId", updateId)),
            childIndex: parseChildIndex(item, props.children),
            item
          });
        }
      });
      return formattedItems;
    };
    var updateStateOfAxisMapsOffsetAndStackGroups = function updateStateOfAxisMapsOffsetAndStackGroups2(_ref8, prevState) {
      var props = _ref8.props, dataStartIndex = _ref8.dataStartIndex, dataEndIndex = _ref8.dataEndIndex, updateId = _ref8.updateId;
      if (!validateWidthHeight({
        props
      })) {
        return null;
      }
      var children = props.children, layout = props.layout, stackOffset = props.stackOffset, data = props.data, reverseStackOrder = props.reverseStackOrder;
      var _getAxisNameByLayout2 = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout2.numericAxisName, cateAxisName = _getAxisNameByLayout2.cateAxisName;
      var graphicalItems = findAllByType(children, GraphicalChild);
      var stackGroups = getStackGroupsByAxisId(data, graphicalItems, "".concat(numericAxisName, "Id"), "".concat(cateAxisName, "Id"), stackOffset, reverseStackOrder);
      var axisObj = axisComponents.reduce(function(result, entry) {
        var name = "".concat(entry.axisType, "Map");
        return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, name, getAxisMap(props, _objectSpread(_objectSpread({}, entry), {}, {
          graphicalItems,
          stackGroups: entry.axisType === numericAxisName && stackGroups,
          dataStartIndex,
          dataEndIndex
        }))));
      }, {});
      var offset = calculateOffset(_objectSpread(_objectSpread({}, axisObj), {}, {
        props,
        graphicalItems
      }), prevState === null || prevState === void 0 ? void 0 : prevState.legendBBox);
      Object.keys(axisObj).forEach(function(key) {
        axisObj[key] = formatAxisMap2(props, axisObj[key], offset, key.replace("Map", ""), chartName);
      });
      var cateAxisMap = axisObj["".concat(cateAxisName, "Map")];
      var ticksObj = tooltipTicksGenerator(cateAxisMap);
      var formattedGraphicalItems = getFormatItems(props, _objectSpread(_objectSpread({}, axisObj), {}, {
        dataStartIndex,
        dataEndIndex,
        updateId,
        graphicalItems,
        stackGroups,
        offset
      }));
      return _objectSpread(_objectSpread({
        formattedGraphicalItems,
        graphicalItems,
        offset,
        stackGroups
      }, ticksObj), axisObj);
    };
    var CategoricalChartWrapper = function(_Component) {
      function CategoricalChartWrapper2(_props) {
        var _props$id, _props$throttleDelay;
        var _this;
        _classCallCheck(this, CategoricalChartWrapper2);
        _this = _callSuper(this, CategoricalChartWrapper2, [
          _props
        ]);
        _defineProperty(_this, "eventEmitterSymbol", Symbol("rechartsEventEmitter"));
        _defineProperty(_this, "accessibilityManager", new AccessibilityManager());
        _defineProperty(_this, "handleLegendBBoxUpdate", function(box) {
          if (box) {
            var _this$state = _this.state, dataStartIndex = _this$state.dataStartIndex, dataEndIndex = _this$state.dataEndIndex, updateId = _this$state.updateId;
            _this.setState(_objectSpread({
              legendBBox: box
            }, updateStateOfAxisMapsOffsetAndStackGroups({
              props: _this.props,
              dataStartIndex,
              dataEndIndex,
              updateId
            }, _objectSpread(_objectSpread({}, _this.state), {}, {
              legendBBox: box
            }))));
          }
        });
        _defineProperty(_this, "handleReceiveSyncEvent", function(cId, data, emitter) {
          if (_this.props.syncId === cId) {
            if (emitter === _this.eventEmitterSymbol && typeof _this.props.syncMethod !== "function") {
              return;
            }
            _this.applySyncEvent(data);
          }
        });
        _defineProperty(_this, "handleBrushChange", function(_ref9) {
          var startIndex = _ref9.startIndex, endIndex = _ref9.endIndex;
          if (startIndex !== _this.state.dataStartIndex || endIndex !== _this.state.dataEndIndex) {
            var updateId = _this.state.updateId;
            _this.setState(function() {
              return _objectSpread({
                dataStartIndex: startIndex,
                dataEndIndex: endIndex
              }, updateStateOfAxisMapsOffsetAndStackGroups({
                props: _this.props,
                dataStartIndex: startIndex,
                dataEndIndex: endIndex,
                updateId
              }, _this.state));
            });
            _this.triggerSyncEvent({
              dataStartIndex: startIndex,
              dataEndIndex: endIndex
            });
          }
        });
        _defineProperty(_this, "handleMouseEnter", function(e3) {
          var mouse = _this.getMouseInfo(e3);
          if (mouse) {
            var _nextState = _objectSpread(_objectSpread({}, mouse), {}, {
              isTooltipActive: true
            });
            _this.setState(_nextState);
            _this.triggerSyncEvent(_nextState);
            var onMouseEnter = _this.props.onMouseEnter;
            if (isFunction(onMouseEnter)) {
              onMouseEnter(_nextState, e3);
            }
          }
        });
        _defineProperty(_this, "triggeredAfterMouseMove", function(e3) {
          var mouse = _this.getMouseInfo(e3);
          var nextState = mouse ? _objectSpread(_objectSpread({}, mouse), {}, {
            isTooltipActive: true
          }) : {
            isTooltipActive: false
          };
          _this.setState(nextState);
          _this.triggerSyncEvent(nextState);
          var onMouseMove = _this.props.onMouseMove;
          if (isFunction(onMouseMove)) {
            onMouseMove(nextState, e3);
          }
        });
        _defineProperty(_this, "handleItemMouseEnter", function(el) {
          _this.setState(function() {
            return {
              isTooltipActive: true,
              activeItem: el,
              activePayload: el.tooltipPayload,
              activeCoordinate: el.tooltipPosition || {
                x: el.cx,
                y: el.cy
              }
            };
          });
        });
        _defineProperty(_this, "handleItemMouseLeave", function() {
          _this.setState(function() {
            return {
              isTooltipActive: false
            };
          });
        });
        _defineProperty(_this, "handleMouseMove", function(e3) {
          e3.persist();
          _this.throttleTriggeredAfterMouseMove(e3);
        });
        _defineProperty(_this, "handleMouseLeave", function(e3) {
          _this.throttleTriggeredAfterMouseMove.cancel();
          var nextState = {
            isTooltipActive: false
          };
          _this.setState(nextState);
          _this.triggerSyncEvent(nextState);
          var onMouseLeave = _this.props.onMouseLeave;
          if (isFunction(onMouseLeave)) {
            onMouseLeave(nextState, e3);
          }
        });
        _defineProperty(_this, "handleOuterEvent", function(e3) {
          var eventName = getReactEventByType(e3);
          var event = get(_this.props, "".concat(eventName));
          if (eventName && isFunction(event)) {
            var _mouse;
            var mouse;
            if (/.*touch.*/i.test(eventName)) {
              mouse = _this.getMouseInfo(e3.changedTouches[0]);
            } else {
              mouse = _this.getMouseInfo(e3);
            }
            event((_mouse = mouse) !== null && _mouse !== void 0 ? _mouse : {}, e3);
          }
        });
        _defineProperty(_this, "handleClick", function(e3) {
          var mouse = _this.getMouseInfo(e3);
          if (mouse) {
            var _nextState2 = _objectSpread(_objectSpread({}, mouse), {}, {
              isTooltipActive: true
            });
            _this.setState(_nextState2);
            _this.triggerSyncEvent(_nextState2);
            var onClick = _this.props.onClick;
            if (isFunction(onClick)) {
              onClick(_nextState2, e3);
            }
          }
        });
        _defineProperty(_this, "handleMouseDown", function(e3) {
          var onMouseDown = _this.props.onMouseDown;
          if (isFunction(onMouseDown)) {
            var _nextState3 = _this.getMouseInfo(e3);
            onMouseDown(_nextState3, e3);
          }
        });
        _defineProperty(_this, "handleMouseUp", function(e3) {
          var onMouseUp = _this.props.onMouseUp;
          if (isFunction(onMouseUp)) {
            var _nextState4 = _this.getMouseInfo(e3);
            onMouseUp(_nextState4, e3);
          }
        });
        _defineProperty(_this, "handleTouchMove", function(e3) {
          if (e3.changedTouches != null && e3.changedTouches.length > 0) {
            _this.throttleTriggeredAfterMouseMove(e3.changedTouches[0]);
          }
        });
        _defineProperty(_this, "handleTouchStart", function(e3) {
          if (e3.changedTouches != null && e3.changedTouches.length > 0) {
            _this.handleMouseDown(e3.changedTouches[0]);
          }
        });
        _defineProperty(_this, "handleTouchEnd", function(e3) {
          if (e3.changedTouches != null && e3.changedTouches.length > 0) {
            _this.handleMouseUp(e3.changedTouches[0]);
          }
        });
        _defineProperty(_this, "triggerSyncEvent", function(data) {
          if (_this.props.syncId !== void 0) {
            eventCenter.emit(SYNC_EVENT, _this.props.syncId, data, _this.eventEmitterSymbol);
          }
        });
        _defineProperty(_this, "applySyncEvent", function(data) {
          var _this$props = _this.props, layout = _this$props.layout, syncMethod = _this$props.syncMethod;
          var updateId = _this.state.updateId;
          var dataStartIndex = data.dataStartIndex, dataEndIndex = data.dataEndIndex;
          if (data.dataStartIndex !== void 0 || data.dataEndIndex !== void 0) {
            _this.setState(_objectSpread({
              dataStartIndex,
              dataEndIndex
            }, updateStateOfAxisMapsOffsetAndStackGroups({
              props: _this.props,
              dataStartIndex,
              dataEndIndex,
              updateId
            }, _this.state)));
          } else if (data.activeTooltipIndex !== void 0) {
            var chartX = data.chartX, chartY = data.chartY;
            var activeTooltipIndex = data.activeTooltipIndex;
            var _this$state2 = _this.state, offset = _this$state2.offset, tooltipTicks = _this$state2.tooltipTicks;
            if (!offset) {
              return;
            }
            if (typeof syncMethod === "function") {
              activeTooltipIndex = syncMethod(tooltipTicks, data);
            } else if (syncMethod === "value") {
              activeTooltipIndex = -1;
              for (var i = 0; i < tooltipTicks.length; i++) {
                if (tooltipTicks[i].value === data.activeLabel) {
                  activeTooltipIndex = i;
                  break;
                }
              }
            }
            var viewBox = _objectSpread(_objectSpread({}, offset), {}, {
              x: offset.left,
              y: offset.top
            });
            var validateChartX = Math.min(chartX, viewBox.x + viewBox.width);
            var validateChartY = Math.min(chartY, viewBox.y + viewBox.height);
            var activeLabel = tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value;
            var activePayload = getTooltipContent(_this.state, _this.props.data, activeTooltipIndex);
            var activeCoordinate = tooltipTicks[activeTooltipIndex] ? {
              x: layout === "horizontal" ? tooltipTicks[activeTooltipIndex].coordinate : validateChartX,
              y: layout === "horizontal" ? validateChartY : tooltipTicks[activeTooltipIndex].coordinate
            } : originCoordinate;
            _this.setState(_objectSpread(_objectSpread({}, data), {}, {
              activeLabel,
              activeCoordinate,
              activePayload,
              activeTooltipIndex
            }));
          } else {
            _this.setState(data);
          }
        });
        _defineProperty(_this, "renderCursor", function(element) {
          var _element$props$active;
          var _this$state3 = _this.state, isTooltipActive = _this$state3.isTooltipActive, activeCoordinate = _this$state3.activeCoordinate, activePayload = _this$state3.activePayload, offset = _this$state3.offset, activeTooltipIndex = _this$state3.activeTooltipIndex, tooltipAxisBandSize = _this$state3.tooltipAxisBandSize;
          var tooltipEventType = _this.getTooltipEventType();
          var isActive = (_element$props$active = element.props.active) !== null && _element$props$active !== void 0 ? _element$props$active : isTooltipActive;
          var layout = _this.props.layout;
          var key = element.key || "_recharts-cursor";
          return React.createElement(Cursor, {
            key,
            activeCoordinate,
            activePayload,
            activeTooltipIndex,
            chartName,
            element,
            isActive,
            layout,
            offset,
            tooltipAxisBandSize,
            tooltipEventType
          });
        });
        _defineProperty(_this, "renderPolarAxis", function(element, displayName, index2) {
          var axisType = get(element, "type.axisType");
          var axisMap = get(_this.state, "".concat(axisType, "Map"));
          var elementDefaultProps = element.type.defaultProps;
          var elementProps = elementDefaultProps !== void 0 ? _objectSpread(_objectSpread({}, elementDefaultProps), element.props) : element.props;
          var axisOption = axisMap && axisMap[elementProps["".concat(axisType, "Id")]];
          return reactExports.cloneElement(element, _objectSpread(_objectSpread({}, axisOption), {}, {
            className: clsx(axisType, axisOption.className),
            key: element.key || "".concat(displayName, "-").concat(index2),
            ticks: getTicksOfAxis(axisOption, true)
          }));
        });
        _defineProperty(_this, "renderPolarGrid", function(element) {
          var _element$props = element.props, radialLines = _element$props.radialLines, polarAngles = _element$props.polarAngles, polarRadius = _element$props.polarRadius;
          var _this$state4 = _this.state, radiusAxisMap = _this$state4.radiusAxisMap, angleAxisMap = _this$state4.angleAxisMap;
          var radiusAxis = getAnyElementOfObject(radiusAxisMap);
          var angleAxis = getAnyElementOfObject(angleAxisMap);
          var cx = angleAxis.cx, cy = angleAxis.cy, innerRadius = angleAxis.innerRadius, outerRadius = angleAxis.outerRadius;
          return reactExports.cloneElement(element, {
            polarAngles: Array.isArray(polarAngles) ? polarAngles : getTicksOfAxis(angleAxis, true).map(function(entry) {
              return entry.coordinate;
            }),
            polarRadius: Array.isArray(polarRadius) ? polarRadius : getTicksOfAxis(radiusAxis, true).map(function(entry) {
              return entry.coordinate;
            }),
            cx,
            cy,
            innerRadius,
            outerRadius,
            key: element.key || "polar-grid",
            radialLines
          });
        });
        _defineProperty(_this, "renderLegend", function() {
          var formattedGraphicalItems = _this.state.formattedGraphicalItems;
          var _this$props2 = _this.props, children = _this$props2.children, width = _this$props2.width, height = _this$props2.height;
          var margin = _this.props.margin || {};
          var legendWidth = width - (margin.left || 0) - (margin.right || 0);
          var props = getLegendProps({
            children,
            formattedGraphicalItems,
            legendWidth,
            legendContent
          });
          if (!props) {
            return null;
          }
          var item = props.item, otherProps = _objectWithoutProperties(props, _excluded);
          return reactExports.cloneElement(item, _objectSpread(_objectSpread({}, otherProps), {}, {
            chartWidth: width,
            chartHeight: height,
            margin,
            onBBoxUpdate: _this.handleLegendBBoxUpdate
          }));
        });
        _defineProperty(_this, "renderTooltip", function() {
          var _tooltipItem$props$ac;
          var _this$props3 = _this.props, children = _this$props3.children, accessibilityLayer = _this$props3.accessibilityLayer;
          var tooltipItem = findChildByType(children, Tooltip);
          if (!tooltipItem) {
            return null;
          }
          var _this$state5 = _this.state, isTooltipActive = _this$state5.isTooltipActive, activeCoordinate = _this$state5.activeCoordinate, activePayload = _this$state5.activePayload, activeLabel = _this$state5.activeLabel, offset = _this$state5.offset;
          var isActive = (_tooltipItem$props$ac = tooltipItem.props.active) !== null && _tooltipItem$props$ac !== void 0 ? _tooltipItem$props$ac : isTooltipActive;
          return reactExports.cloneElement(tooltipItem, {
            viewBox: _objectSpread(_objectSpread({}, offset), {}, {
              x: offset.left,
              y: offset.top
            }),
            active: isActive,
            label: activeLabel,
            payload: isActive ? activePayload : [],
            coordinate: activeCoordinate,
            accessibilityLayer
          });
        });
        _defineProperty(_this, "renderBrush", function(element) {
          var _this$props4 = _this.props, margin = _this$props4.margin, data = _this$props4.data;
          var _this$state6 = _this.state, offset = _this$state6.offset, dataStartIndex = _this$state6.dataStartIndex, dataEndIndex = _this$state6.dataEndIndex, updateId = _this$state6.updateId;
          return reactExports.cloneElement(element, {
            key: element.key || "_recharts-brush",
            onChange: combineEventHandlers(_this.handleBrushChange, element.props.onChange),
            data,
            x: isNumber(element.props.x) ? element.props.x : offset.left,
            y: isNumber(element.props.y) ? element.props.y : offset.top + offset.height + offset.brushBottom - (margin.bottom || 0),
            width: isNumber(element.props.width) ? element.props.width : offset.width,
            startIndex: dataStartIndex,
            endIndex: dataEndIndex,
            updateId: "brush-".concat(updateId)
          });
        });
        _defineProperty(_this, "renderReferenceElement", function(element, displayName, index2) {
          if (!element) {
            return null;
          }
          var _this2 = _this, clipPathId = _this2.clipPathId;
          var _this$state7 = _this.state, xAxisMap = _this$state7.xAxisMap, yAxisMap = _this$state7.yAxisMap, offset = _this$state7.offset;
          var elementDefaultProps = element.type.defaultProps || {};
          var _element$props2 = element.props, _element$props2$xAxis = _element$props2.xAxisId, xAxisId = _element$props2$xAxis === void 0 ? elementDefaultProps.xAxisId : _element$props2$xAxis, _element$props2$yAxis = _element$props2.yAxisId, yAxisId = _element$props2$yAxis === void 0 ? elementDefaultProps.yAxisId : _element$props2$yAxis;
          return reactExports.cloneElement(element, {
            key: element.key || "".concat(displayName, "-").concat(index2),
            xAxis: xAxisMap[xAxisId],
            yAxis: yAxisMap[yAxisId],
            viewBox: {
              x: offset.left,
              y: offset.top,
              width: offset.width,
              height: offset.height
            },
            clipPathId
          });
        });
        _defineProperty(_this, "renderActivePoints", function(_ref10) {
          var item = _ref10.item, activePoint = _ref10.activePoint, basePoint = _ref10.basePoint, childIndex = _ref10.childIndex, isRange = _ref10.isRange;
          var result = [];
          var key = item.props.key;
          var itemItemProps = item.item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.item.type.defaultProps), item.item.props) : item.item.props;
          var activeDot = itemItemProps.activeDot, dataKey = itemItemProps.dataKey;
          var dotProps = _objectSpread(_objectSpread({
            index: childIndex,
            dataKey,
            cx: activePoint.x,
            cy: activePoint.y,
            r: 4,
            fill: getMainColorOfGraphicItem(item.item),
            strokeWidth: 2,
            stroke: "#fff",
            payload: activePoint.payload,
            value: activePoint.value
          }, filterProps(activeDot, false)), adaptEventHandlers(activeDot));
          result.push(CategoricalChartWrapper2.renderActiveDot(activeDot, dotProps, "".concat(key, "-activePoint-").concat(childIndex)));
          if (basePoint) {
            result.push(CategoricalChartWrapper2.renderActiveDot(activeDot, _objectSpread(_objectSpread({}, dotProps), {}, {
              cx: basePoint.x,
              cy: basePoint.y
            }), "".concat(key, "-basePoint-").concat(childIndex)));
          } else if (isRange) {
            result.push(null);
          }
          return result;
        });
        _defineProperty(_this, "renderGraphicChild", function(element, displayName, index2) {
          var item = _this.filterFormatItem(element, displayName, index2);
          if (!item) {
            return null;
          }
          var tooltipEventType = _this.getTooltipEventType();
          var _this$state8 = _this.state, isTooltipActive = _this$state8.isTooltipActive, tooltipAxis = _this$state8.tooltipAxis, activeTooltipIndex = _this$state8.activeTooltipIndex, activeLabel = _this$state8.activeLabel;
          var children = _this.props.children;
          var tooltipItem = findChildByType(children, Tooltip);
          var _item$props = item.props, points = _item$props.points, isRange = _item$props.isRange, baseLine = _item$props.baseLine;
          var itemItemProps = item.item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.item.type.defaultProps), item.item.props) : item.item.props;
          var activeDot = itemItemProps.activeDot, hide = itemItemProps.hide, activeBar = itemItemProps.activeBar, activeShape = itemItemProps.activeShape;
          var hasActive = Boolean(!hide && isTooltipActive && tooltipItem && (activeDot || activeBar || activeShape));
          var itemEvents = {};
          if (tooltipEventType !== "axis" && tooltipItem && tooltipItem.props.trigger === "click") {
            itemEvents = {
              onClick: combineEventHandlers(_this.handleItemMouseEnter, element.props.onClick)
            };
          } else if (tooltipEventType !== "axis") {
            itemEvents = {
              onMouseLeave: combineEventHandlers(_this.handleItemMouseLeave, element.props.onMouseLeave),
              onMouseEnter: combineEventHandlers(_this.handleItemMouseEnter, element.props.onMouseEnter)
            };
          }
          var graphicalItem = reactExports.cloneElement(element, _objectSpread(_objectSpread({}, item.props), itemEvents));
          function findWithPayload(entry) {
            return typeof tooltipAxis.dataKey === "function" ? tooltipAxis.dataKey(entry.payload) : null;
          }
          if (hasActive) {
            if (activeTooltipIndex >= 0) {
              var activePoint, basePoint;
              if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
                var specifiedKey = typeof tooltipAxis.dataKey === "function" ? findWithPayload : "payload.".concat(tooltipAxis.dataKey.toString());
                activePoint = findEntryInArray(points, specifiedKey, activeLabel);
                basePoint = isRange && baseLine && findEntryInArray(baseLine, specifiedKey, activeLabel);
              } else {
                activePoint = points === null || points === void 0 ? void 0 : points[activeTooltipIndex];
                basePoint = isRange && baseLine && baseLine[activeTooltipIndex];
              }
              if (activeShape || activeBar) {
                var activeIndex = element.props.activeIndex !== void 0 ? element.props.activeIndex : activeTooltipIndex;
                return [
                  reactExports.cloneElement(element, _objectSpread(_objectSpread(_objectSpread({}, item.props), itemEvents), {}, {
                    activeIndex
                  })),
                  null,
                  null
                ];
              }
              if (!isNil$1(activePoint)) {
                return [
                  graphicalItem
                ].concat(_toConsumableArray(_this.renderActivePoints({
                  item,
                  activePoint,
                  basePoint,
                  childIndex: activeTooltipIndex,
                  isRange
                })));
              }
            } else {
              var _this$getItemByXY;
              var _ref11 = (_this$getItemByXY = _this.getItemByXY(_this.state.activeCoordinate)) !== null && _this$getItemByXY !== void 0 ? _this$getItemByXY : {
                graphicalItem
              }, _ref11$graphicalItem = _ref11.graphicalItem, _ref11$graphicalItem$ = _ref11$graphicalItem.item, xyItem = _ref11$graphicalItem$ === void 0 ? element : _ref11$graphicalItem$, childIndex = _ref11$graphicalItem.childIndex;
              var elementProps = _objectSpread(_objectSpread(_objectSpread({}, item.props), itemEvents), {}, {
                activeIndex: childIndex
              });
              return [
                reactExports.cloneElement(xyItem, elementProps),
                null,
                null
              ];
            }
          }
          if (isRange) {
            return [
              graphicalItem,
              null,
              null
            ];
          }
          return [
            graphicalItem,
            null
          ];
        });
        _defineProperty(_this, "renderCustomized", function(element, displayName, index2) {
          return reactExports.cloneElement(element, _objectSpread(_objectSpread({
            key: "recharts-customized-".concat(index2)
          }, _this.props), _this.state));
        });
        _defineProperty(_this, "renderMap", {
          CartesianGrid: {
            handler: renderAsIs,
            once: true
          },
          ReferenceArea: {
            handler: _this.renderReferenceElement
          },
          ReferenceLine: {
            handler: renderAsIs
          },
          ReferenceDot: {
            handler: _this.renderReferenceElement
          },
          XAxis: {
            handler: renderAsIs
          },
          YAxis: {
            handler: renderAsIs
          },
          Brush: {
            handler: _this.renderBrush,
            once: true
          },
          Bar: {
            handler: _this.renderGraphicChild
          },
          Line: {
            handler: _this.renderGraphicChild
          },
          Area: {
            handler: _this.renderGraphicChild
          },
          Radar: {
            handler: _this.renderGraphicChild
          },
          RadialBar: {
            handler: _this.renderGraphicChild
          },
          Scatter: {
            handler: _this.renderGraphicChild
          },
          Pie: {
            handler: _this.renderGraphicChild
          },
          Funnel: {
            handler: _this.renderGraphicChild
          },
          Tooltip: {
            handler: _this.renderCursor,
            once: true
          },
          PolarGrid: {
            handler: _this.renderPolarGrid,
            once: true
          },
          PolarAngleAxis: {
            handler: _this.renderPolarAxis
          },
          PolarRadiusAxis: {
            handler: _this.renderPolarAxis
          },
          Customized: {
            handler: _this.renderCustomized
          }
        });
        _this.clipPathId = "".concat((_props$id = _props.id) !== null && _props$id !== void 0 ? _props$id : uniqueId("recharts"), "-clip");
        _this.throttleTriggeredAfterMouseMove = throttle$1(_this.triggeredAfterMouseMove, (_props$throttleDelay = _props.throttleDelay) !== null && _props$throttleDelay !== void 0 ? _props$throttleDelay : 1e3 / 60);
        _this.state = {};
        return _this;
      }
      _inherits(CategoricalChartWrapper2, _Component);
      return _createClass(CategoricalChartWrapper2, [
        {
          key: "componentDidMount",
          value: function componentDidMount() {
            var _this$props$margin$le, _this$props$margin$to;
            this.addListener();
            this.accessibilityManager.setDetails({
              container: this.container,
              offset: {
                left: (_this$props$margin$le = this.props.margin.left) !== null && _this$props$margin$le !== void 0 ? _this$props$margin$le : 0,
                top: (_this$props$margin$to = this.props.margin.top) !== null && _this$props$margin$to !== void 0 ? _this$props$margin$to : 0
              },
              coordinateList: this.state.tooltipTicks,
              mouseHandlerCallback: this.triggeredAfterMouseMove,
              layout: this.props.layout
            });
            this.displayDefaultTooltip();
          }
        },
        {
          key: "displayDefaultTooltip",
          value: function displayDefaultTooltip() {
            var _this$props5 = this.props, children = _this$props5.children, data = _this$props5.data, height = _this$props5.height, layout = _this$props5.layout;
            var tooltipElem = findChildByType(children, Tooltip);
            if (!tooltipElem) {
              return;
            }
            var defaultIndex = tooltipElem.props.defaultIndex;
            if (typeof defaultIndex !== "number" || defaultIndex < 0 || defaultIndex > this.state.tooltipTicks.length - 1) {
              return;
            }
            var activeLabel = this.state.tooltipTicks[defaultIndex] && this.state.tooltipTicks[defaultIndex].value;
            var activePayload = getTooltipContent(this.state, data, defaultIndex, activeLabel);
            var independentAxisCoord = this.state.tooltipTicks[defaultIndex].coordinate;
            var dependentAxisCoord = (this.state.offset.top + height) / 2;
            var isHorizontal = layout === "horizontal";
            var activeCoordinate = isHorizontal ? {
              x: independentAxisCoord,
              y: dependentAxisCoord
            } : {
              y: independentAxisCoord,
              x: dependentAxisCoord
            };
            var scatterPlotElement = this.state.formattedGraphicalItems.find(function(_ref12) {
              var item = _ref12.item;
              return item.type.name === "Scatter";
            });
            if (scatterPlotElement) {
              activeCoordinate = _objectSpread(_objectSpread({}, activeCoordinate), scatterPlotElement.props.points[defaultIndex].tooltipPosition);
              activePayload = scatterPlotElement.props.points[defaultIndex].tooltipPayload;
            }
            var nextState = {
              activeTooltipIndex: defaultIndex,
              isTooltipActive: true,
              activeLabel,
              activePayload,
              activeCoordinate
            };
            this.setState(nextState);
            this.renderCursor(tooltipElem);
            this.accessibilityManager.setIndex(defaultIndex);
          }
        },
        {
          key: "getSnapshotBeforeUpdate",
          value: function getSnapshotBeforeUpdate(prevProps, prevState) {
            if (!this.props.accessibilityLayer) {
              return null;
            }
            if (this.state.tooltipTicks !== prevState.tooltipTicks) {
              this.accessibilityManager.setDetails({
                coordinateList: this.state.tooltipTicks
              });
            }
            if (this.props.layout !== prevProps.layout) {
              this.accessibilityManager.setDetails({
                layout: this.props.layout
              });
            }
            if (this.props.margin !== prevProps.margin) {
              var _this$props$margin$le2, _this$props$margin$to2;
              this.accessibilityManager.setDetails({
                offset: {
                  left: (_this$props$margin$le2 = this.props.margin.left) !== null && _this$props$margin$le2 !== void 0 ? _this$props$margin$le2 : 0,
                  top: (_this$props$margin$to2 = this.props.margin.top) !== null && _this$props$margin$to2 !== void 0 ? _this$props$margin$to2 : 0
                }
              });
            }
            return null;
          }
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (!isChildrenEqual([
              findChildByType(prevProps.children, Tooltip)
            ], [
              findChildByType(this.props.children, Tooltip)
            ])) {
              this.displayDefaultTooltip();
            }
          }
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.removeListener();
            this.throttleTriggeredAfterMouseMove.cancel();
          }
        },
        {
          key: "getTooltipEventType",
          value: function getTooltipEventType() {
            var tooltipItem = findChildByType(this.props.children, Tooltip);
            if (tooltipItem && typeof tooltipItem.props.shared === "boolean") {
              var eventType = tooltipItem.props.shared ? "axis" : "item";
              return validateTooltipEventTypes.indexOf(eventType) >= 0 ? eventType : defaultTooltipEventType;
            }
            return defaultTooltipEventType;
          }
        },
        {
          key: "getMouseInfo",
          value: function getMouseInfo(event) {
            if (!this.container) {
              return null;
            }
            var element = this.container;
            var boundingRect = element.getBoundingClientRect();
            var containerOffset = getOffset(boundingRect);
            var e3 = {
              chartX: Math.round(event.pageX - containerOffset.left),
              chartY: Math.round(event.pageY - containerOffset.top)
            };
            var scale = boundingRect.width / element.offsetWidth || 1;
            var rangeObj = this.inRange(e3.chartX, e3.chartY, scale);
            if (!rangeObj) {
              return null;
            }
            var _this$state9 = this.state, xAxisMap = _this$state9.xAxisMap, yAxisMap = _this$state9.yAxisMap;
            var tooltipEventType = this.getTooltipEventType();
            if (tooltipEventType !== "axis" && xAxisMap && yAxisMap) {
              var xScale = getAnyElementOfObject(xAxisMap).scale;
              var yScale = getAnyElementOfObject(yAxisMap).scale;
              var xValue = xScale && xScale.invert ? xScale.invert(e3.chartX) : null;
              var yValue = yScale && yScale.invert ? yScale.invert(e3.chartY) : null;
              return _objectSpread(_objectSpread({}, e3), {}, {
                xValue,
                yValue
              });
            }
            var toolTipData = getTooltipData(this.state, this.props.data, this.props.layout, rangeObj);
            if (toolTipData) {
              return _objectSpread(_objectSpread({}, e3), toolTipData);
            }
            return null;
          }
        },
        {
          key: "inRange",
          value: function inRange(x2, y2) {
            var scale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
            var layout = this.props.layout;
            var scaledX = x2 / scale, scaledY = y2 / scale;
            if (layout === "horizontal" || layout === "vertical") {
              var offset = this.state.offset;
              var isInRange = scaledX >= offset.left && scaledX <= offset.left + offset.width && scaledY >= offset.top && scaledY <= offset.top + offset.height;
              return isInRange ? {
                x: scaledX,
                y: scaledY
              } : null;
            }
            var _this$state10 = this.state, angleAxisMap = _this$state10.angleAxisMap, radiusAxisMap = _this$state10.radiusAxisMap;
            if (angleAxisMap && radiusAxisMap) {
              var angleAxis = getAnyElementOfObject(angleAxisMap);
              return inRangeOfSector({
                x: scaledX,
                y: scaledY
              }, angleAxis);
            }
            return null;
          }
        },
        {
          key: "parseEventsOfWrapper",
          value: function parseEventsOfWrapper() {
            var children = this.props.children;
            var tooltipEventType = this.getTooltipEventType();
            var tooltipItem = findChildByType(children, Tooltip);
            var tooltipEvents = {};
            if (tooltipItem && tooltipEventType === "axis") {
              if (tooltipItem.props.trigger === "click") {
                tooltipEvents = {
                  onClick: this.handleClick
                };
              } else {
                tooltipEvents = {
                  onMouseEnter: this.handleMouseEnter,
                  onMouseMove: this.handleMouseMove,
                  onMouseLeave: this.handleMouseLeave,
                  onTouchMove: this.handleTouchMove,
                  onTouchStart: this.handleTouchStart,
                  onTouchEnd: this.handleTouchEnd
                };
              }
            }
            var outerEvents = adaptEventHandlers(this.props, this.handleOuterEvent);
            return _objectSpread(_objectSpread({}, outerEvents), tooltipEvents);
          }
        },
        {
          key: "addListener",
          value: function addListener() {
            eventCenter.on(SYNC_EVENT, this.handleReceiveSyncEvent);
          }
        },
        {
          key: "removeListener",
          value: function removeListener() {
            eventCenter.removeListener(SYNC_EVENT, this.handleReceiveSyncEvent);
          }
        },
        {
          key: "filterFormatItem",
          value: function filterFormatItem(item, displayName, childIndex) {
            var formattedGraphicalItems = this.state.formattedGraphicalItems;
            for (var i = 0, len = formattedGraphicalItems.length; i < len; i++) {
              var entry = formattedGraphicalItems[i];
              if (entry.item === item || entry.props.key === item.key || displayName === getDisplayName(entry.item.type) && childIndex === entry.childIndex) {
                return entry;
              }
            }
            return null;
          }
        },
        {
          key: "renderClipPath",
          value: function renderClipPath() {
            var clipPathId = this.clipPathId;
            var _this$state$offset = this.state.offset, left = _this$state$offset.left, top = _this$state$offset.top, height = _this$state$offset.height, width = _this$state$offset.width;
            return React.createElement("defs", null, React.createElement("clipPath", {
              id: clipPathId
            }, React.createElement("rect", {
              x: left,
              y: top,
              height,
              width
            })));
          }
        },
        {
          key: "getXScales",
          value: function getXScales() {
            var xAxisMap = this.state.xAxisMap;
            return xAxisMap ? Object.entries(xAxisMap).reduce(function(res, _ref13) {
              var _ref14 = _slicedToArray(_ref13, 2), axisId = _ref14[0], axisProps = _ref14[1];
              return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, axisId, axisProps.scale));
            }, {}) : null;
          }
        },
        {
          key: "getYScales",
          value: function getYScales() {
            var yAxisMap = this.state.yAxisMap;
            return yAxisMap ? Object.entries(yAxisMap).reduce(function(res, _ref15) {
              var _ref16 = _slicedToArray(_ref15, 2), axisId = _ref16[0], axisProps = _ref16[1];
              return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, axisId, axisProps.scale));
            }, {}) : null;
          }
        },
        {
          key: "getXScaleByAxisId",
          value: function getXScaleByAxisId(axisId) {
            var _this$state$xAxisMap;
            return (_this$state$xAxisMap = this.state.xAxisMap) === null || _this$state$xAxisMap === void 0 || (_this$state$xAxisMap = _this$state$xAxisMap[axisId]) === null || _this$state$xAxisMap === void 0 ? void 0 : _this$state$xAxisMap.scale;
          }
        },
        {
          key: "getYScaleByAxisId",
          value: function getYScaleByAxisId(axisId) {
            var _this$state$yAxisMap;
            return (_this$state$yAxisMap = this.state.yAxisMap) === null || _this$state$yAxisMap === void 0 || (_this$state$yAxisMap = _this$state$yAxisMap[axisId]) === null || _this$state$yAxisMap === void 0 ? void 0 : _this$state$yAxisMap.scale;
          }
        },
        {
          key: "getItemByXY",
          value: function getItemByXY(chartXY) {
            var _this$state11 = this.state, formattedGraphicalItems = _this$state11.formattedGraphicalItems, activeItem = _this$state11.activeItem;
            if (formattedGraphicalItems && formattedGraphicalItems.length) {
              for (var i = 0, len = formattedGraphicalItems.length; i < len; i++) {
                var graphicalItem = formattedGraphicalItems[i];
                var props = graphicalItem.props, item = graphicalItem.item;
                var itemProps = item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.type.defaultProps), item.props) : item.props;
                var itemDisplayName = getDisplayName(item.type);
                if (itemDisplayName === "Bar") {
                  var activeBarItem = (props.data || []).find(function(entry) {
                    return isInRectangle(chartXY, entry);
                  });
                  if (activeBarItem) {
                    return {
                      graphicalItem,
                      payload: activeBarItem
                    };
                  }
                } else if (itemDisplayName === "RadialBar") {
                  var _activeBarItem = (props.data || []).find(function(entry) {
                    return inRangeOfSector(chartXY, entry);
                  });
                  if (_activeBarItem) {
                    return {
                      graphicalItem,
                      payload: _activeBarItem
                    };
                  }
                } else if (isFunnel(graphicalItem, activeItem) || isPie(graphicalItem, activeItem) || isScatter(graphicalItem, activeItem)) {
                  var activeIndex = getActiveShapeIndexForTooltip({
                    graphicalItem,
                    activeTooltipItem: activeItem,
                    itemData: itemProps.data
                  });
                  var childIndex = itemProps.activeIndex === void 0 ? activeIndex : itemProps.activeIndex;
                  return {
                    graphicalItem: _objectSpread(_objectSpread({}, graphicalItem), {}, {
                      childIndex
                    }),
                    payload: isScatter(graphicalItem, activeItem) ? itemProps.data[activeIndex] : graphicalItem.props.data[activeIndex]
                  };
                }
              }
            }
            return null;
          }
        },
        {
          key: "render",
          value: function render() {
            var _this3 = this;
            if (!validateWidthHeight(this)) {
              return null;
            }
            var _this$props6 = this.props, children = _this$props6.children, className = _this$props6.className, width = _this$props6.width, height = _this$props6.height, style = _this$props6.style, compact = _this$props6.compact, title = _this$props6.title, desc = _this$props6.desc, others = _objectWithoutProperties(_this$props6, _excluded2);
            var attrs = filterProps(others, false);
            if (compact) {
              return React.createElement(ChartLayoutContextProvider, {
                state: this.state,
                width: this.props.width,
                height: this.props.height,
                clipPathId: this.clipPathId
              }, React.createElement(Surface, _extends({}, attrs, {
                width,
                height,
                title,
                desc
              }), this.renderClipPath(), renderByOrder(children, this.renderMap)));
            }
            if (this.props.accessibilityLayer) {
              var _this$props$tabIndex, _this$props$role;
              attrs.tabIndex = (_this$props$tabIndex = this.props.tabIndex) !== null && _this$props$tabIndex !== void 0 ? _this$props$tabIndex : 0;
              attrs.role = (_this$props$role = this.props.role) !== null && _this$props$role !== void 0 ? _this$props$role : "application";
              attrs.onKeyDown = function(e3) {
                _this3.accessibilityManager.keyboardEvent(e3);
              };
              attrs.onFocus = function() {
                _this3.accessibilityManager.focus();
              };
            }
            var events = this.parseEventsOfWrapper();
            return React.createElement(ChartLayoutContextProvider, {
              state: this.state,
              width: this.props.width,
              height: this.props.height,
              clipPathId: this.clipPathId
            }, React.createElement("div", _extends({
              className: clsx("recharts-wrapper", className),
              style: _objectSpread({
                position: "relative",
                cursor: "default",
                width,
                height
              }, style)
            }, events, {
              ref: function ref(node) {
                _this3.container = node;
              }
            }), React.createElement(Surface, _extends({}, attrs, {
              width,
              height,
              title,
              desc,
              style: FULL_WIDTH_AND_HEIGHT
            }), this.renderClipPath(), renderByOrder(children, this.renderMap)), this.renderLegend(), this.renderTooltip()));
          }
        }
      ]);
    }(reactExports.Component);
    _defineProperty(CategoricalChartWrapper, "displayName", chartName);
    _defineProperty(CategoricalChartWrapper, "defaultProps", _objectSpread({
      layout: "horizontal",
      stackOffset: "none",
      barCategoryGap: "10%",
      barGap: 4,
      margin: {
        top: 5,
        right: 5,
        bottom: 5,
        left: 5
      },
      reverseStackOrder: false,
      syncMethod: "index"
    }, defaultProps2));
    _defineProperty(CategoricalChartWrapper, "getDerivedStateFromProps", function(nextProps, prevState) {
      var dataKey = nextProps.dataKey, data = nextProps.data, children = nextProps.children, width = nextProps.width, height = nextProps.height, layout = nextProps.layout, stackOffset = nextProps.stackOffset, margin = nextProps.margin;
      var dataStartIndex = prevState.dataStartIndex, dataEndIndex = prevState.dataEndIndex;
      if (prevState.updateId === void 0) {
        var defaultState = createDefaultState(nextProps);
        return _objectSpread(_objectSpread(_objectSpread({}, defaultState), {}, {
          updateId: 0
        }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread(_objectSpread({
          props: nextProps
        }, defaultState), {}, {
          updateId: 0
        }), prevState)), {}, {
          prevDataKey: dataKey,
          prevData: data,
          prevWidth: width,
          prevHeight: height,
          prevLayout: layout,
          prevStackOffset: stackOffset,
          prevMargin: margin,
          prevChildren: children
        });
      }
      if (dataKey !== prevState.prevDataKey || data !== prevState.prevData || width !== prevState.prevWidth || height !== prevState.prevHeight || layout !== prevState.prevLayout || stackOffset !== prevState.prevStackOffset || !shallowEqual(margin, prevState.prevMargin)) {
        var _defaultState = createDefaultState(nextProps);
        var keepFromPrevState = {
          chartX: prevState.chartX,
          chartY: prevState.chartY,
          isTooltipActive: prevState.isTooltipActive
        };
        var updatesToState = _objectSpread(_objectSpread({}, getTooltipData(prevState, data, layout)), {}, {
          updateId: prevState.updateId + 1
        });
        var newState = _objectSpread(_objectSpread(_objectSpread({}, _defaultState), keepFromPrevState), updatesToState);
        return _objectSpread(_objectSpread(_objectSpread({}, newState), updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread({
          props: nextProps
        }, newState), prevState)), {}, {
          prevDataKey: dataKey,
          prevData: data,
          prevWidth: width,
          prevHeight: height,
          prevLayout: layout,
          prevStackOffset: stackOffset,
          prevMargin: margin,
          prevChildren: children
        });
      }
      if (!isChildrenEqual(children, prevState.prevChildren)) {
        var _brush$props$startInd, _brush$props, _brush$props$endIndex, _brush$props2;
        var brush = findChildByType(children, Brush);
        var startIndex = brush ? (_brush$props$startInd = (_brush$props = brush.props) === null || _brush$props === void 0 ? void 0 : _brush$props.startIndex) !== null && _brush$props$startInd !== void 0 ? _brush$props$startInd : dataStartIndex : dataStartIndex;
        var endIndex = brush ? (_brush$props$endIndex = (_brush$props2 = brush.props) === null || _brush$props2 === void 0 ? void 0 : _brush$props2.endIndex) !== null && _brush$props$endIndex !== void 0 ? _brush$props$endIndex : dataEndIndex : dataEndIndex;
        var hasDifferentStartOrEndIndex = startIndex !== dataStartIndex || endIndex !== dataEndIndex;
        var hasGlobalData = !isNil$1(data);
        var newUpdateId = hasGlobalData && !hasDifferentStartOrEndIndex ? prevState.updateId : prevState.updateId + 1;
        return _objectSpread(_objectSpread({
          updateId: newUpdateId
        }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread(_objectSpread({
          props: nextProps
        }, prevState), {}, {
          updateId: newUpdateId,
          dataStartIndex: startIndex,
          dataEndIndex: endIndex
        }), prevState)), {}, {
          prevChildren: children,
          dataStartIndex: startIndex,
          dataEndIndex: endIndex
        });
      }
      return null;
    });
    _defineProperty(CategoricalChartWrapper, "renderActiveDot", function(option, props, key) {
      var dot;
      if (reactExports.isValidElement(option)) {
        dot = reactExports.cloneElement(option, props);
      } else if (isFunction(option)) {
        dot = option(props);
      } else {
        dot = React.createElement(Dot, props);
      }
      return React.createElement(Layer, {
        className: "recharts-active-dot",
        key
      }, dot);
    });
    var CategoricalChart = reactExports.forwardRef(function CategoricalChart2(props, ref) {
      return React.createElement(CategoricalChartWrapper, _extends({}, props, {
        ref
      }));
    });
    CategoricalChart.displayName = CategoricalChartWrapper.displayName;
    return CategoricalChart;
  };
  var BarChart = generateCategoricalChart({
    chartName: "BarChart",
    GraphicalChild: Bar,
    defaultTooltipEventType: "axis",
    validateTooltipEventTypes: [
      "axis",
      "item"
    ],
    axisComponents: [
      {
        axisType: "xAxis",
        AxisComp: XAxis
      },
      {
        axisType: "yAxis",
        AxisComp: YAxis
      }
    ],
    formatAxisMap
  });
  const THEMES = {
    light: "",
    dark: ".dark"
  };
  const ChartContext = reactExports.createContext(null);
  function useChart() {
    const context = reactExports.useContext(ChartContext);
    if (!context) {
      throw new Error("useChart must be used within a <ChartContainer />");
    }
    return context;
  }
  const ChartContainer = reactExports.forwardRef(({ id, className, children, config: config2, ...props }, ref) => {
    const uniqueId2 = reactExports.useId();
    const chartId = `chart-${id || uniqueId2.replace(/:/g, "")}`;
    return jsxRuntimeExports.jsx(ChartContext.Provider, {
      value: {
        config: config2
      },
      children: jsxRuntimeExports.jsxs("div", {
        "data-chart": chartId,
        ref,
        className: cn("flex aspect-video justify-center text-xs", className),
        ...props,
        children: [
          jsxRuntimeExports.jsx(ChartStyle, {
            id: chartId,
            config: config2
          }),
          jsxRuntimeExports.jsx(ResponsiveContainer, {
            children
          })
        ]
      })
    });
  });
  ChartContainer.displayName = "Chart";
  const ChartStyle = ({ id, config: config2 }) => {
    const colorConfig = Object.entries(config2).filter(([_, config22]) => config22.theme || config22.color);
    if (!colorConfig.length) {
      return null;
    }
    return jsxRuntimeExports.jsx("style", {
      dangerouslySetInnerHTML: {
        __html: Object.entries(THEMES).map(([theme, prefix2]) => `
${prefix2} [data-chart=${id}] {
${colorConfig.map(([key, itemConfig]) => {
          var _a;
          const color2 = ((_a = itemConfig.theme) == null ? void 0 : _a[theme]) || itemConfig.color;
          return color2 ? `  --color-${key}: ${color2};` : null;
        }).join("\n")}
}
`).join("\n")
      }
    });
  };
  const ChartTooltip = Tooltip;
  const ChartTooltipContent = reactExports.forwardRef(({ active, payload, className, indicator = "dot", hideLabel = false, hideIndicator = false, label, labelFormatter, labelClassName, formatter, color: color2, nameKey, labelKey }, ref) => {
    const { config: config2 } = useChart();
    const tooltipLabel = reactExports.useMemo(() => {
      var _a;
      if (hideLabel || !(payload == null ? void 0 : payload.length)) {
        return null;
      }
      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config2, item, key);
      const value = !labelKey && typeof label === "string" ? ((_a = config2[label]) == null ? void 0 : _a.label) || label : itemConfig == null ? void 0 : itemConfig.label;
      if (labelFormatter) {
        return jsxRuntimeExports.jsx("div", {
          className: cn("font-medium", labelClassName),
          children: labelFormatter(value, payload)
        });
      }
      if (!value) {
        return null;
      }
      return jsxRuntimeExports.jsx("div", {
        className: cn("font-medium", labelClassName),
        children: value
      });
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config2,
      labelKey
    ]);
    if (!active || !(payload == null ? void 0 : payload.length)) {
      return null;
    }
    const nestLabel = payload.length === 1 && indicator !== "dot";
    return jsxRuntimeExports.jsxs("div", {
      ref,
      className: cn("grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl", className),
      children: [
        !nestLabel ? tooltipLabel : null,
        jsxRuntimeExports.jsx("div", {
          className: "grid gap-1.5",
          children: payload.map((item, index2) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config2, item, key);
            const indicatorColor = color2 || item.payload.fill || item.color;
            return jsxRuntimeExports.jsx("div", {
              className: cn("flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground", indicator === "dot" && "items-center"),
              children: formatter && (item == null ? void 0 : item.value) !== void 0 && item.name ? formatter(item.value, item.name, item, index2, item.payload) : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [
                  (itemConfig == null ? void 0 : itemConfig.icon) ? jsxRuntimeExports.jsx(itemConfig.icon, {}) : !hideIndicator && jsxRuntimeExports.jsx("div", {
                    className: cn("shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]", {
                      "h-2.5 w-2.5": indicator === "dot",
                      "w-1": indicator === "line",
                      "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                      "my-0.5": nestLabel && indicator === "dashed"
                    }),
                    style: {
                      "--color-bg": indicatorColor,
                      "--color-border": indicatorColor
                    }
                  }),
                  jsxRuntimeExports.jsxs("div", {
                    className: cn("flex flex-1 justify-between leading-none", nestLabel ? "items-end" : "items-center"),
                    children: [
                      jsxRuntimeExports.jsxs("div", {
                        className: "grid gap-1.5",
                        children: [
                          nestLabel ? tooltipLabel : null,
                          jsxRuntimeExports.jsx("span", {
                            className: "text-muted-foreground",
                            children: (itemConfig == null ? void 0 : itemConfig.label) || item.name
                          })
                        ]
                      }),
                      item.value && jsxRuntimeExports.jsx("span", {
                        className: "font-mono font-medium tabular-nums text-foreground",
                        children: item.value.toLocaleString()
                      })
                    ]
                  })
                ]
              })
            }, item.dataKey);
          })
        })
      ]
    });
  });
  ChartTooltipContent.displayName = "ChartTooltip";
  const ChartLegendContent = reactExports.forwardRef(({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
    const { config: config2 } = useChart();
    if (!(payload == null ? void 0 : payload.length)) {
      return null;
    }
    return jsxRuntimeExports.jsx("div", {
      ref,
      className: cn("flex items-center justify-center gap-4", verticalAlign === "top" ? "pb-3" : "pt-3", className),
      children: payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`;
        const itemConfig = getPayloadConfigFromPayload(config2, item, key);
        return jsxRuntimeExports.jsxs("div", {
          className: cn("flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"),
          children: [
            (itemConfig == null ? void 0 : itemConfig.icon) && !hideIcon ? jsxRuntimeExports.jsx(itemConfig.icon, {}) : jsxRuntimeExports.jsx("div", {
              className: "h-2 w-2 shrink-0 rounded-[2px]",
              style: {
                backgroundColor: item.color
              }
            }),
            itemConfig == null ? void 0 : itemConfig.label
          ]
        }, item.value);
      })
    });
  });
  ChartLegendContent.displayName = "ChartLegend";
  function getPayloadConfigFromPayload(config2, payload, key) {
    if (typeof payload !== "object" || payload === null) {
      return void 0;
    }
    const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload : void 0;
    let configLabelKey = key;
    if (key in payload && typeof payload[key] === "string") {
      configLabelKey = payload[key];
    } else if (payloadPayload && key in payloadPayload && typeof payloadPayload[key] === "string") {
      configLabelKey = payloadPayload[key];
    }
    return configLabelKey in config2 ? config2[configLabelKey] : config2[key];
  }
  const formatBytes = (bytes) => {
    const sizes = [
      "Bytes",
      "KB",
      "MB",
      "GB",
      "TB"
    ];
    if (bytes === void 0) return "Unknown size";
    if (bytes === 0) return "0 Byte";
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${Math.round(bytes / Math.pow(1024, i))} ${sizes[i]}`;
  };
  const SessionInfoNode = reactExports.memo(() => {
    const { t: t2 } = useTranslation("flows");
    const [cachedModdels, setCachedModels] = reactExports.useState();
    const cachedLLMURLs = useLocalLLMState((state) => state.cachedLLMURLs);
    const currentSession = useSessionState((state) => state.currentSession);
    const [latestUpdate, setLatestUpdate] = reactExports.useState();
    const [usedBytes, setUsedBytes] = reactExports.useState("");
    const [countInfo, setCountInfo] = reactExports.useState();
    const chartConfig = reactExports.useMemo(() => {
      return {
        nodes: {
          label: t2("session_info_node.entities.nodes"),
          color: "#2563eb"
        },
        edges: {
          label: t2("session_info_node.entities.edges"),
          color: "#34d399"
        },
        threads: {
          label: t2("session_info_node.entities.threads"),
          color: "#fbbf24"
        },
        llms: {
          label: t2("session_info_node.entities.llms"),
          color: "#f87171"
        },
        prompts: {
          label: t2("session_info_node.entities.prompts"),
          color: "#a78bfa"
        },
        tools: {
          label: t2("session_info_node.entities.tools"),
          color: "#ffcccb"
        },
        schemas: {
          label: t2("session_info_node.entities.schemas"),
          color: "#ffb6c1"
        },
        vectorDatabases: {
          label: t2("session_info_node.entities.vector_databases"),
          color: "#ff69b4"
        },
        jsonlDatas: {
          label: t2("session_info_node.entities.jsonl_data"),
          color: "#ff1493"
        },
        csvDatas: {
          label: t2("session_info_node.entities.csv_data"),
          color: "#db7093"
        }
      };
    }, [
      t2
    ]);
    reactExports.useEffect(() => {
      __vitePreload(async () => {
        const { functionCallingModelIds, prebuiltAppConfig } = await import("./index-Bh9Jxj4W.js").then(async (m2) => {
          await m2.__tla;
          return m2;
        });
        return {
          functionCallingModelIds,
          prebuiltAppConfig
        };
      }, true ? __vite__mapDeps([0,1,2,3,4]) : void 0).then(({ functionCallingModelIds, prebuiltAppConfig }) => {
        setCachedModels(cachedLLMURLs == null ? void 0 : cachedLLMURLs.map((url) => {
          const item = prebuiltAppConfig.model_list.find((model) => url.includes(model.model));
          if (!item) {
            return;
          }
          return {
            model_id: (item == null ? void 0 : item.model_id) || "",
            info: item,
            isFunctionCalling: functionCallingModelIds.includes((item == null ? void 0 : item.model_id) || "")
          };
        }));
      });
    }, [
      cachedLLMURLs,
      currentSession == null ? void 0 : currentSession.id
    ]);
    const fetchSessionInfo = reactExports.useCallback(async () => {
      navigator.storage.estimate().then((estimate) => {
        if (estimate) {
          setUsedBytes(t2("session_info_node.used_bytes", {
            used: formatBytes(estimate.usage),
            total: formatBytes(estimate == null ? void 0 : estimate.quota)
          }));
        }
      });
      if (!(currentSession == null ? void 0 : currentSession.id)) {
        return;
      }
      Promise.all([
        getRepository("FlowNode").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("FlowEdge").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("Thread").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("Prompt").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("LLM").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("Schema").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("ToolDefinition").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("VectorDatabase").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("JSONLData").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        }),
        getRepository("CSVData").findOne({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          },
          order: {
            updated_at: "DESC"
          }
        })
      ]).then((response) => {
        const maxUpdatedAt = response.reduce((acc, item) => {
          if ((item == null ? void 0 : item.updated_at) && (!acc || new Date(item.updated_at) > acc)) {
            return new Date(item.updated_at);
          }
          return acc;
        }, currentSession.updated_at ? new Date(currentSession.updated_at) : void 0);
        setLatestUpdate(maxUpdatedAt);
      });
      Promise.all([
        getRepository("FlowNode").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("FlowEdge").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("Thread").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("Prompt").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("LLM").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("ToolDefinition").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("Schema").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("VectorDatabase").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("JSONLData").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        }),
        getRepository("CSVData").count({
          where: {
            session_id: currentSession == null ? void 0 : currentSession.id
          }
        })
      ]).then(([nodes, edges, threads, prompts, llms, tools, schemas, vectorDatabases, jsonlDatas, csvDatas]) => {
        setCountInfo([
          {
            name: t2("session_info_node.count_info.title"),
            nodes: nodes || 0,
            edges: edges || 0,
            threads: threads || 0,
            prompts: prompts || 0,
            llms: llms || 0,
            tools: tools || 0,
            schemas: schemas || 0,
            vectorDatabases: vectorDatabases || 0,
            jsonlDatas: jsonlDatas || 0,
            csvDatas: csvDatas || 0
          }
        ]);
      });
    }, [
      currentSession == null ? void 0 : currentSession.id,
      currentSession == null ? void 0 : currentSession.updated_at,
      t2
    ]);
    const handleReload = reactExports.useCallback(() => {
      fetchSessionInfo();
    }, [
      fetchSessionInfo
    ]);
    reactExports.useEffect(() => {
      fetchSessionInfo();
    }, [
      fetchSessionInfo
    ]);
    return jsxRuntimeExports.jsxs(Card, {
      className: "w-96",
      children: [
        jsxRuntimeExports.jsxs(CardHeader, {
          children: [
            jsxRuntimeExports.jsx(CardTitle, {
              children: t2("session_info_node.title")
            }),
            jsxRuntimeExports.jsx(CardDescription, {
              children: latestUpdate || (currentSession == null ? void 0 : currentSession.updated_at) ? dayjs(latestUpdate || (currentSession == null ? void 0 : currentSession.updated_at)).fromNow() : ""
            })
          ]
        }),
        jsxRuntimeExports.jsxs(CardContent, {
          className: "grid gap-4",
          children: [
            jsxRuntimeExports.jsx("div", {
              className: "flex items-center space-x-4 rounded-md border p-4",
              children: jsxRuntimeExports.jsxs("div", {
                className: "flex-1 space-y-1",
                children: [
                  jsxRuntimeExports.jsx("p", {
                    className: "text-sm font-medium leading-none",
                    children: t2("session_info_node.disk_size")
                  }),
                  jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-muted-foreground",
                    children: usedBytes
                  })
                ]
              })
            }),
            jsxRuntimeExports.jsx("div", {
              className: "flex items-center space-x-4 rounded-md border p-4",
              children: jsxRuntimeExports.jsxs("div", {
                className: "flex-1 space-y-1",
                children: [
                  jsxRuntimeExports.jsxs("div", {
                    className: "text-sm font-medium leading-none",
                    children: [
                      t2("session_info_node.cached_llms"),
                      jsxRuntimeExports.jsx(Badge, {
                        className: "ml-2",
                        children: (cachedModdels == null ? void 0 : cachedModdels.length) || 0
                      })
                    ]
                  }),
                  cachedModdels == null ? void 0 : cachedModdels.map((llm) => jsxRuntimeExports.jsxs("div", {
                    className: "text-sm text-muted-foreground gap-1",
                    children: [
                      llm == null ? void 0 : llm.model_id,
                      jsxRuntimeExports.jsx("div", {
                        className: "max-w-full gap-1 flex flex-wrap mt-1",
                        children: jsxRuntimeExports.jsx(LLMInfo, {
                          model: llm == null ? void 0 : llm.info,
                          isFunctionCalling: (llm == null ? void 0 : llm.isFunctionCalling) || false,
                          isCached: true
                        })
                      })
                    ]
                  }, llm == null ? void 0 : llm.model_id))
                ]
              })
            }),
            jsxRuntimeExports.jsx("div", {
              children: jsxRuntimeExports.jsx(ChartContainer, {
                config: chartConfig,
                className: "min-h-28 w-full",
                children: jsxRuntimeExports.jsxs(BarChart, {
                  accessibilityLayer: true,
                  data: countInfo,
                  children: [
                    jsxRuntimeExports.jsx(CartesianGrid, {
                      vertical: false
                    }),
                    jsxRuntimeExports.jsx(XAxis, {
                      dataKey: "name",
                      tickLine: false,
                      tickMargin: 10,
                      axisLine: false
                    }),
                    jsxRuntimeExports.jsx(ChartTooltip, {
                      content: jsxRuntimeExports.jsx(ChartTooltipContent, {})
                    }),
                    Object.entries(chartConfig).map(([key, item]) => jsxRuntimeExports.jsx(Bar, {
                      dataKey: key,
                      fill: item.color,
                      radius: 4
                    }, key))
                  ]
                })
              })
            })
          ]
        }),
        jsxRuntimeExports.jsx(CardFooter, {
          children: jsxRuntimeExports.jsxs(Button, {
            className: "w-full",
            onClick: handleReload,
            children: [
              jsxRuntimeExports.jsx(LazyIcon, {
                size: 24,
                name: "refresh-ccw"
              }),
              t2("session_info_node.reload")
            ]
          })
        })
      ]
    });
  });
  const convertToTypeScriptInterface = (data) => {
    const generateInterfaceString = (items, parentId = null) => {
      let interfaceString = "{\n";
      items.filter((item) => item.parent_id === parentId).forEach((item) => {
        if (item.type === "object") {
          const nestedItems = data.filter((nestedItem) => nestedItem.parent_id === item.id);
          const nestedInterface = generateInterfaceString(nestedItems, item.id);
          interfaceString += `  ${item.name}${item.required ? "" : "?"}: ${nestedInterface}
`;
        } else {
          interfaceString += `  // ${item.description || ""}
  ${item.name}${item.required ? "" : "?"}: ${item.type};
`;
        }
      });
      interfaceString += "}";
      return interfaceString;
    };
    return generateInterfaceString(data);
  };
  const convertToZodSchemaString = (data) => {
    const generateSchemaString = (items, parentId = null) => {
      let schemaString2 = "";
      items.filter((item) => item.parent_id === parentId).forEach((item) => {
        if (item.type === "object") {
          const nestedSchema = generateSchemaString(items, item.id);
          schemaString2 += `    ${item.name}: z.object({
${nestedSchema}    })${item.required ? "" : ".optional()"}.describe('${item.description || ""}'),
`;
        } else {
          schemaString2 += `    ${item.name}: z.${item.type}()${item.required ? "" : ".optional()"}.describe('${item.description || ""}'),
`;
        }
      });
      return schemaString2;
    };
    let schemaString = "const schema = z.object({\n";
    schemaString += generateSchemaString(data);
    schemaString += "});";
    return schemaString;
  };
  var TABS_NAME = "Tabs";
  var [createTabsContext, createTabsScope] = createContextScope$1(TABS_NAME, [
    createRovingFocusGroupScope
  ]);
  var useRovingFocusGroupScope$1 = createRovingFocusGroupScope();
  var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
  var Tabs$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeTabs, value: valueProp, onValueChange, defaultValue, orientation = "horizontal", dir, activationMode = "automatic", ...tabsProps } = props;
    const direction = useDirection(dir);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue
    });
    return jsxRuntimeExports.jsx(TabsProvider, {
      scope: __scopeTabs,
      baseId: useId(),
      value,
      onValueChange: setValue,
      orientation,
      dir: direction,
      activationMode,
      children: jsxRuntimeExports.jsx(Primitive.div, {
        dir: direction,
        "data-orientation": orientation,
        ...tabsProps,
        ref: forwardedRef
      })
    });
  });
  Tabs$1.displayName = TABS_NAME;
  var TAB_LIST_NAME = "TabsList";
  var TabsList$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeTabs, loop = true, ...listProps } = props;
    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope$1(__scopeTabs);
    return jsxRuntimeExports.jsx(Root$2, {
      asChild: true,
      ...rovingFocusGroupScope,
      orientation: context.orientation,
      dir: context.dir,
      loop,
      children: jsxRuntimeExports.jsx(Primitive.div, {
        role: "tablist",
        "aria-orientation": context.orientation,
        ...listProps,
        ref: forwardedRef
      })
    });
  });
  TabsList$1.displayName = TAB_LIST_NAME;
  var TRIGGER_NAME = "TabsTrigger";
  var TabsTrigger$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
    const context = useTabsContext(TRIGGER_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope$1(__scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    return jsxRuntimeExports.jsx(Item$2, {
      asChild: true,
      ...rovingFocusGroupScope,
      focusable: !disabled,
      active: isSelected,
      children: jsxRuntimeExports.jsx(Primitive.button, {
        type: "button",
        role: "tab",
        "aria-selected": isSelected,
        "aria-controls": contentId,
        "data-state": isSelected ? "active" : "inactive",
        "data-disabled": disabled ? "" : void 0,
        disabled,
        id: triggerId,
        ...triggerProps,
        ref: forwardedRef,
        onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
          if (!disabled && event.button === 0 && event.ctrlKey === false) {
            context.onValueChange(value);
          } else {
            event.preventDefault();
          }
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          if ([
            " ",
            "Enter"
          ].includes(event.key)) context.onValueChange(value);
        }),
        onFocus: composeEventHandlers(props.onFocus, () => {
          const isAutomaticActivation = context.activationMode !== "manual";
          if (!isSelected && !disabled && isAutomaticActivation) {
            context.onValueChange(value);
          }
        })
      })
    });
  });
  TabsTrigger$1.displayName = TRIGGER_NAME;
  var CONTENT_NAME = "TabsContent";
  var TabsContent$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
    const context = useTabsContext(CONTENT_NAME, __scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    const isMountAnimationPreventedRef = reactExports.useRef(isSelected);
    reactExports.useEffect(() => {
      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
      return () => cancelAnimationFrame(rAF);
    }, []);
    return jsxRuntimeExports.jsx(Presence, {
      present: forceMount || isSelected,
      children: ({ present }) => jsxRuntimeExports.jsx(Primitive.div, {
        "data-state": isSelected ? "active" : "inactive",
        "data-orientation": context.orientation,
        role: "tabpanel",
        "aria-labelledby": triggerId,
        hidden: !present,
        id: contentId,
        tabIndex: 0,
        ...contentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
        },
        children: present && children
      })
    });
  });
  TabsContent$1.displayName = CONTENT_NAME;
  function makeTriggerId(baseId, value) {
    return `${baseId}-trigger-${value}`;
  }
  function makeContentId(baseId, value) {
    return `${baseId}-content-${value}`;
  }
  var Root2$1 = Tabs$1;
  var List = TabsList$1;
  var Trigger = TabsTrigger$1;
  var Content = TabsContent$1;
  const Tabs = Root2$1;
  const TabsList = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(List, {
    ref,
    className: cn("inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground", className),
    ...props
  }));
  TabsList.displayName = List.displayName;
  const TabsTrigger = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Trigger, {
    ref,
    className: cn("inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm", className),
    ...props
  }));
  TabsTrigger.displayName = Trigger.displayName;
  const TabsContent = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx(Content, {
    ref,
    className: cn("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2", className),
    ...props
  }));
  TabsContent.displayName = Content.displayName;
  const useConnectionToHandler$8 = (id) => {
    const connectionHandler = reactExports.useCallback(async ({ edgeId }) => {
      try {
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, []);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const SchemaNode = reactExports.memo((props) => {
    var _a, _b;
    const { t: t2 } = useTranslation("flows");
    const { id, data, isConnectable } = props;
    const loadingRef = reactExports.useRef(false);
    const node = useInternalNode(id);
    const updateNodes = useFlowState((state) => state.updateNodes);
    useConnectionToHandler$8(id);
    reactExports.useEffect(() => {
      var _a2;
      const schema = data == null ? void 0 : data.entity;
      if (!schema || !node || loadingRef.current || ((_a2 = schema == null ? void 0 : schema.schema_items) == null ? void 0 : _a2.length) || data.loaded) return;
      loadingRef.current = true;
      getRepository("SchemaItem").find({
        where: {
          schema_id: schema.id
        }
      }).then((schemaItems) => {
        updateNodes([
          {
            id: node.id,
            type: "replace",
            item: {
              ...node,
              data: {
                ...(node == null ? void 0 : node.data) || {},
                loaded: true,
                entity: {
                  ...data.entity,
                  schema_items: schemaItems
                }
              }
            }
          }
        ]);
      }).finally(() => {
        loadingRef.current = false;
      });
    }, [
      data.entity,
      data.loaded,
      node,
      updateNodes
    ]);
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsxs(Tabs, {
              defaultValue: "account",
              className: "w-[400px]",
              children: [
                jsxRuntimeExports.jsxs(TabsList, {
                  className: "grid w-full grid-cols-2",
                  children: [
                    jsxRuntimeExports.jsx(TabsTrigger, {
                      value: "account",
                      children: t2("schema_node.typescript")
                    }),
                    jsxRuntimeExports.jsx(TabsTrigger, {
                      value: "password",
                      children: t2("schema_node.zod")
                    })
                  ]
                }),
                jsxRuntimeExports.jsx(TabsContent, {
                  value: "account",
                  children: jsxRuntimeExports.jsx(Card, {
                    className: "p-4",
                    children: jsxRuntimeExports.jsx("pre", {
                      children: convertToTypeScriptInterface(((_a = data == null ? void 0 : data.entity) == null ? void 0 : _a.schema_items) || [])
                    })
                  })
                }),
                jsxRuntimeExports.jsx(TabsContent, {
                  value: "password",
                  children: jsxRuntimeExports.jsx(Card, {
                    className: "p-4",
                    children: jsxRuntimeExports.jsx("pre", {
                      children: convertToZodSchemaString(((_b = data == null ? void 0 : data.entity) == null ? void 0 : _b.schema_items) || [])
                    })
                  })
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const Pagination = ({ className, ...props }) => jsxRuntimeExports.jsx("nav", {
    role: "navigation",
    "aria-label": "pagination",
    className: cn("mx-auto flex w-full justify-center", className),
    ...props
  });
  Pagination.displayName = "Pagination";
  const PaginationContent = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("ul", {
    ref,
    className: cn("flex flex-row items-center gap-1", className),
    ...props
  }));
  PaginationContent.displayName = "PaginationContent";
  const PaginationItem = reactExports.forwardRef(({ className, ...props }, ref) => jsxRuntimeExports.jsx("li", {
    ref,
    className: cn("", className),
    ...props
  }));
  PaginationItem.displayName = "PaginationItem";
  const PaginationLink = ({ className, isActive, size = "icon", ...props }) => jsxRuntimeExports.jsx("a", {
    "aria-current": isActive ? "page" : void 0,
    className: cn(buttonVariants({
      variant: isActive ? "outline" : "ghost",
      size
    }), className),
    ...props
  });
  PaginationLink.displayName = "PaginationLink";
  const PaginationPrevious = ({ className, ...props }) => {
    const { t: t2 } = useTranslation("atoms");
    return jsxRuntimeExports.jsxs(PaginationLink, {
      "aria-label": "Go to previous page",
      size: "default",
      className: cn("gap-1 pl-2.5", className),
      ...props,
      children: [
        jsxRuntimeExports.jsx(LazyIcon, {
          name: "chevron-left",
          className: "h-4 w-4"
        }),
        jsxRuntimeExports.jsx("span", {
          children: t2("pagination.previous")
        })
      ]
    });
  };
  PaginationPrevious.displayName = "PaginationPrevious";
  const PaginationNext = ({ className, ...props }) => {
    const { t: t2 } = useTranslation("atoms");
    return jsxRuntimeExports.jsxs(PaginationLink, {
      "aria-label": "Go to next page",
      size: "default",
      className: cn("gap-1 pr-2.5", className),
      ...props,
      children: [
        jsxRuntimeExports.jsx("span", {
          children: t2("pagination.next")
        }),
        jsxRuntimeExports.jsx(LazyIcon, {
          name: "chevron-right",
          className: "h-4 w-4"
        })
      ]
    });
  };
  PaginationNext.displayName = "PaginationNext";
  const PaginationEllipsis = ({ className, ...props }) => {
    const { t: t2 } = useTranslation("atoms");
    return jsxRuntimeExports.jsxs("span", {
      "aria-hidden": true,
      className: cn("flex h-9 w-9 items-center justify-center", className),
      ...props,
      children: [
        jsxRuntimeExports.jsx(LazyIcon, {
          name: "ellipsis",
          className: "h-4 w-4"
        }),
        jsxRuntimeExports.jsx("span", {
          className: "sr-only",
          children: t2("pagination.more_pages")
        })
      ]
    });
  };
  PaginationEllipsis.displayName = "PaginationEllipsis";
  const DataViewer = reactExports.memo((props) => {
    const { data, headers, limitLengthByColumns, showPerPage = 7, paginationShowLimit = 1, contentLengthLimit = 64 } = props;
    const [pagination, setPagination] = reactExports.useState({
      page: 1,
      maxPage: 1
    });
    const viewDetailDialog = useModal(ViewDataDetailDialog);
    reactExports.useEffect(() => {
      setPagination((pre) => ({
        ...pre,
        maxPage: Math.ceil(data.length / showPerPage)
      }));
    }, [
      data.length,
      showPerPage
    ]);
    const showingRows = reactExports.useMemo(() => {
      return data.slice((pagination.page - 1) * showPerPage, pagination.page * showPerPage);
    }, [
      data,
      pagination.page,
      showPerPage
    ]);
    const renderPagination = reactExports.useMemo(() => {
      let renderLeftEllipsis = false;
      let renderRightEllipsis = false;
      return jsxRuntimeExports.jsx(Pagination, {
        className: "mt-4 mb-4 ml-4 mr-4 w-full",
        children: jsxRuntimeExports.jsxs(PaginationContent, {
          children: [
            pagination.page > 1 ? jsxRuntimeExports.jsx(PaginationItem, {
              onClick: () => setPagination((pre) => ({
                ...pre,
                page: pre.page - 1
              })),
              children: jsxRuntimeExports.jsx(PaginationPrevious, {})
            }) : null,
            Array.from({
              length: pagination.maxPage
            }, (_, index2) => {
              const page = index2 + 1;
              const isHardShow = index2 === 0 || index2 === pagination.maxPage - 1;
              if (!isHardShow && page > pagination.page + paginationShowLimit && renderRightEllipsis) {
                return null;
              } else if (!isHardShow && page > pagination.page + paginationShowLimit) {
                renderRightEllipsis = true;
                return jsxRuntimeExports.jsx(PaginationItem, {
                  children: jsxRuntimeExports.jsx(PaginationEllipsis, {})
                }, index2);
              }
              if (!isHardShow && page < pagination.page - paginationShowLimit && renderLeftEllipsis) {
                return null;
              } else if (!isHardShow && page < pagination.page - paginationShowLimit) {
                renderLeftEllipsis = true;
                return jsxRuntimeExports.jsx(PaginationItem, {
                  children: jsxRuntimeExports.jsx(PaginationEllipsis, {})
                }, index2);
              }
              return jsxRuntimeExports.jsx(PaginationItem, {
                onClick: () => setPagination((pre) => ({
                  ...pre,
                  page
                })),
                children: jsxRuntimeExports.jsx(PaginationLink, {
                  isActive: index2 + 1 === pagination.page,
                  children: index2 + 1
                })
              }, index2);
            }),
            pagination.page < pagination.maxPage ? jsxRuntimeExports.jsx(PaginationItem, {
              onClick: () => setPagination((pre) => ({
                ...pre,
                page: pre.page + 1
              })),
              children: jsxRuntimeExports.jsx(PaginationNext, {})
            }) : null
          ]
        })
      });
    }, [
      pagination.maxPage,
      pagination.page,
      paginationShowLimit
    ]);
    const renderRow = (item, index2) => {
      if (!item) {
        return;
      }
      const columns = Array.isArray(item) ? item : headers.map((header) => item[header]);
      return jsxRuntimeExports.jsxs(TableRow, {
        children: [
          jsxRuntimeExports.jsx(TableCell, {
            children: jsxRuntimeExports.jsx("div", {
              className: "font-bold",
              children: index2 + 1
            })
          }),
          columns.map((cell, cellIndex) => {
            const value = typeof cell === "string" ? cell : JSON.stringify(cell);
            const field = headers[cellIndex];
            const columnLimit = (limitLengthByColumns == null ? void 0 : limitLengthByColumns[field]) || contentLengthLimit;
            const isTruncated = value.length > columnLimit;
            return jsxRuntimeExports.jsx(TableCell, {
              className: "p-4",
              children: jsxRuntimeExports.jsxs("div", {
                onClick: isTruncated ? () => viewDetailDialog.show({
                  title: field,
                  content: value
                }) : void 0,
                className: "flex gap-4",
                children: [
                  isTruncated ? `${value.substring(0, columnLimit)}...` : value,
                  isTruncated ? jsxRuntimeExports.jsx(LazyIcon, {
                    className: "w-6 mt-[-2px]",
                    name: "chevron-right"
                  }) : null
                ]
              })
            }, `${cellIndex}`);
          })
        ]
      }, `${index2}`);
    };
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsxs(Table, {
          className: "w-full",
          children: [
            jsxRuntimeExports.jsx(TableHeader, {
              children: jsxRuntimeExports.jsxs(TableRow, {
                children: [
                  jsxRuntimeExports.jsx(TableHead, {}, "index"),
                  headers ? headers.map((header) => jsxRuntimeExports.jsx(TableHead, {
                    children: jsxRuntimeExports.jsx("div", {
                      className: "font-bold",
                      children: header
                    })
                  }, header)) : void 0
                ]
              })
            }),
            jsxRuntimeExports.jsx(TableBody, {
              children: (showingRows == null ? void 0 : showingRows.length) ? showingRows == null ? void 0 : showingRows.map(renderRow) : void 0
            })
          ]
        }),
        renderPagination
      ]
    });
  });
  const CSVDataNode = reactExports.memo((props) => {
    var _a, _b;
    const { id, data, isConnectable } = props;
    const csv = reactExports.useMemo(() => {
      if (!(data == null ? void 0 : data.entity)) {
        return {
          headers: [],
          rows: []
        };
      }
      const lines = decodeLine(data.entity.csv);
      return {
        headers: decodeSplitter(data.entity.headers),
        rows: lines.map((row) => decodeSplitter(row))
      };
    }, [
      data == null ? void 0 : data.entity
    ]);
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsxs(Card, {
              className: "min-w-32 min-h-16 p-4",
              children: [
                jsxRuntimeExports.jsx(CardHeader, {
                  className: "!p-0",
                  children: jsxRuntimeExports.jsxs("div", {
                    className: "pt-2 flex !flex-row",
                    children: [
                      jsxRuntimeExports.jsx(LazyIcon, {
                        name: "file-spreadsheet",
                        className: "mr-2"
                      }),
                      jsxRuntimeExports.jsxs(Label$3, {
                        className: "!font-medium leading-none tracking-tight pr-8",
                        children: [
                          FlowNodeTypeEnum.CSVData,
                          " ",
                          ((_a = csv == null ? void 0 : csv.rows) == null ? void 0 : _a.length) ? `(${((_b = csv == null ? void 0 : csv.rows) == null ? void 0 : _b.length) || 0})` : ""
                        ]
                      })
                    ]
                  })
                }),
                jsxRuntimeExports.jsx(CardContent, {
                  className: "pb-0",
                  children: jsxRuntimeExports.jsx(DataViewer, {
                    data: csv.rows,
                    headers: csv.headers
                  })
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const useConnectionToHandler$7 = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target, connection }) => {
      try {
        if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.Schema && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.ToolDefinition) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createOrUpdateFlowEdge
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const ToolNode = reactExports.memo(({ id, data, isConnectable }) => {
    var _a, _b;
    useConnectionToHandler$7(id);
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsx("div", {
          children: jsxRuntimeExports.jsxs(Alert, {
            className: "flex justify-center",
            children: [
              jsxRuntimeExports.jsx(LazyIcon, {
                size: 24,
                name: "wrench"
              }),
              jsxRuntimeExports.jsxs("div", {
                className: "ml-2",
                children: [
                  jsxRuntimeExports.jsx(AlertTitle, {
                    children: `${((_a = data.entity) == null ? void 0 : _a.name) || ""}`
                  }),
                  jsxRuntimeExports.jsx(AlertDescription, {
                    children: `${((_b = data.entity) == null ? void 0 : _b.description) || ""}`
                  })
                ]
              })
            ]
          })
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const useConnectionToHandler$6 = (id) => {
    const connectionHandler = reactExports.useCallback(async ({ edgeId }) => {
      return {
        deleteEdgeId: edgeId
      };
    }, []);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const EmbeddingNode = reactExports.memo((props) => {
    const { id, data, isConnectable } = props;
    useConnectionToHandler$6(id);
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsx("div", {
          children: jsxRuntimeExports.jsxs(Alert, {
            className: "flex justify-center max-w-80",
            variant: "default",
            children: [
              jsxRuntimeExports.jsx(LLMIcon, {
                name: data.model || "brain",
                className: "w-7 h-7"
              }),
              jsxRuntimeExports.jsx("div", {
                className: "ml-2 pr-4 flex items-center",
                children: jsxRuntimeExports.jsx(AlertTitle, {
                  children: `${data.model || ""}`
                })
              })
            ]
          })
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  class BaseDocumentLoader {
    async loadAndSplit(splitter) {
      if (splitter === void 0) {
        throw new Error("You must pass a text splitter to use this method.");
      }
      const docs = await this.load();
      return splitter.invoke(docs);
    }
  }
  class WebPDFLoader extends BaseDocumentLoader {
    constructor(blob, { splitPages = true, pdfjs = PDFLoaderImports, parsedItemSeparator = "" } = {}) {
      super();
      Object.defineProperty(this, "blob", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "splitPages", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: true
      });
      Object.defineProperty(this, "pdfjs", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "parsedItemSeparator", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      this.blob = blob;
      this.splitPages = splitPages ?? this.splitPages;
      this.pdfjs = pdfjs;
      this.parsedItemSeparator = parsedItemSeparator;
    }
    async load() {
      const { getDocument, version } = await this.pdfjs();
      const parsedPdf = await getDocument({
        data: new Uint8Array(await this.blob.arrayBuffer()),
        useWorkerFetch: false,
        isEvalSupported: false,
        useSystemFonts: true
      }).promise;
      const meta = await parsedPdf.getMetadata().catch(() => null);
      const documents = [];
      for (let i = 1; i <= parsedPdf.numPages; i += 1) {
        const page = await parsedPdf.getPage(i);
        const content = await page.getTextContent();
        if (content.items.length === 0) {
          continue;
        }
        let lastY;
        const textItems = [];
        for (const item of content.items) {
          if ("str" in item) {
            if (lastY === item.transform[5] || !lastY) {
              textItems.push(item.str);
            } else {
              textItems.push(`
${item.str}`);
            }
            lastY = item.transform[5];
          }
        }
        const text = textItems.join(this.parsedItemSeparator);
        documents.push(new Document({
          pageContent: text,
          metadata: {
            pdf: {
              version,
              info: meta == null ? void 0 : meta.info,
              metadata: meta == null ? void 0 : meta.metadata,
              totalPages: parsedPdf.numPages
            },
            loc: {
              pageNumber: i
            }
          }
        }));
      }
      if (this.splitPages) {
        return documents;
      }
      if (documents.length === 0) {
        return [];
      }
      return [
        new Document({
          pageContent: documents.map((doc) => doc.pageContent).join("\n\n"),
          metadata: {
            pdf: {
              version,
              info: meta == null ? void 0 : meta.info,
              metadata: meta == null ? void 0 : meta.metadata,
              totalPages: parsedPdf.numPages
            }
          }
        })
      ];
    }
  }
  async function PDFLoaderImports() {
    try {
      const { default: mod } = await __vitePreload(async () => {
        const { default: mod2 } = await import("./pdf-eWgMKUMf.js").then(async (m2) => {
          await m2.__tla;
          return m2;
        }).then((n2) => n2.p);
        return {
          default: mod2
        };
      }, true ? __vite__mapDeps([10,2,3]) : void 0);
      const { getDocument, version } = mod;
      return {
        getDocument,
        version
      };
    } catch (e3) {
      console.error(e3);
      throw new Error("Failed to load pdf-parse. Please install it with eg. `npm install pdf-parse`.");
    }
  }
  const DEFAULT_PROMPT$1 = `Use the following pieces of context to answer the question at the end.
If you don't know the answer, just say that you don't know, don't try to make up an answer.
Use three sentences maximum and keep the answer as concise as possible.

{context}
`;
  const CreateVectorDatabasePromptDialog = create$1((props) => {
    const { source, documents } = props;
    const currentModal = useModal();
    const { toast: toast2 } = useToast();
    const { t: t2 } = useTranslation("dialogs");
    const { loading, createPrompt } = useCreatePrompt();
    const handleSubmit = async (data) => {
      try {
        if (!data.content || !data.content.includes(`{context}`)) {
          toast2({
            title: t2("create_vector_database_prompt.errors.fill_context"),
            variant: "destructive"
          });
          return;
        }
        const content = data.content.replace("{context}", documents.map((doc) => `<document>${doc.pageContent}</document>`).join("\n"));
        await createPrompt(source, {
          ...data,
          content
        });
        currentModal.hide();
        return true;
      } catch {
        toast2({
          title: t2("create_vector_database_prompt.errors.create_failed"),
          variant: "destructive"
        });
      }
    };
    return jsxRuntimeExports.jsx(Dialog, {
      open: currentModal.visible,
      onOpenChange: currentModal.hide,
      children: jsxRuntimeExports.jsxs(DialogContent, {
        className: "sm:max-w-[425px]",
        children: [
          jsxRuntimeExports.jsx(DialogHeader, {
            children: jsxRuntimeExports.jsxs("div", {
              className: "flex",
              children: [
                jsxRuntimeExports.jsx(LazyIcon, {
                  name: "file",
                  className: "mr-2 h-4 w-4"
                }),
                jsxRuntimeExports.jsx(DialogTitle, {
                  children: t2("create_vector_database_prompt.title")
                })
              ]
            })
          }),
          jsxRuntimeExports.jsxs("div", {
            className: "flex gap-4 py-4 flex-col",
            children: [
              jsxRuntimeExports.jsx(PromptForm, {
                onSubmit: handleSubmit,
                loading,
                hidePromptType: true,
                defaultPromptRole: "system",
                defaultPromptContent: DEFAULT_PROMPT$1
              }),
              jsxRuntimeExports.jsxs("div", {
                className: "w-full border-0 text-gray-700 flex text-sm items-center",
                children: [
                  jsxRuntimeExports.jsx(LazyIcon, {
                    name: "info",
                    className: "mr-2",
                    size: 14
                  }),
                  t2("create_vector_database_prompt.fill_content_note")
                ]
              })
            ]
          })
        ]
      })
    });
  });
  const useCreateVectorDatabaseRetriever = () => {
    const sessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const createVectorDatabaseRetriever = reactExports.useCallback(async ({ prompt: prompt2, source, metadata }) => {
      var _a, _b, _c, _d;
      try {
        const vectorDatabase = (_a = source == null ? void 0 : source.data) == null ? void 0 : _a.entity;
        if (!vectorDatabase || !sessionId) {
          throw new Error("Source or Session not found");
        }
        setLoading(true);
        const initialX = ((_b = source.position) == null ? void 0 : _b.x) || 0;
        const initialY = (((_c = source.position) == null ? void 0 : _c.y) || 0) + (((_d = source.measured) == null ? void 0 : _d.height) || 0);
        const systempPrompt = await getRepository("Prompt").save({
          ...prompt2,
          status: (prompt2 == null ? void 0 : prompt2.status) || MessageStatusEnum.Started,
          role: (prompt2 == null ? void 0 : prompt2.role) || MessageRoleEnum.System,
          type: (prompt2 == null ? void 0 : prompt2.type) || PromptTypeEnum.Chat,
          content: (prompt2 == null ? void 0 : prompt2.content) || "{context}",
          session_id: sessionId
        });
        if (!systempPrompt) {
          throw new Error("Failed to save prompt");
        }
        const systemPromptNode = await createOrUpdateFlowNode({
          source_id: systempPrompt.id,
          source_type: "Prompt",
          node_type: FlowNodeTypeEnum.Prompt,
          x: initialX,
          y: initialY + 20
        });
        if (!systemPromptNode) {
          throw new Error("Failed to save prompt node");
        }
        const retriever = await getRepository("FlowNodePlaceholder").save({
          placeholder: `Retriever for ${vectorDatabase.name}`,
          placeholder_type: FlowNodePlaceholderTypeEnum.VECTOR_DATABASE_RETREIVER,
          session_id: sessionId,
          metadata
        });
        if (!retriever) {
          throw new Error("Failed to save node placeholder");
        }
        const retrieverNode = await createOrUpdateFlowNode({
          source_id: retriever.id,
          source_type: "FlowNodePlaceholder",
          node_type: FlowNodeTypeEnum.PlaceHolder,
          x: initialX,
          y: initialY + 40
        });
        if (!retrieverNode) {
          throw new Error("Failed to save node placeholder node");
        }
        await createOrUpdateFlowEdge({
          source: systemPromptNode.id,
          target: retrieverNode.id
        });
        await createOrUpdateFlowEdge({
          source: source.id,
          target: retrieverNode.id
        });
      } finally {
        setLoading(false);
      }
    }, [
      sessionId,
      createOrUpdateFlowNode,
      createOrUpdateFlowEdge
    ]);
    return {
      loading,
      createVectorDatabaseRetriever
    };
  };
  const DEFAULT_PROMPT = `Use the following pieces of context to answer the question at the end.
If you don't know the answer, just say that you don't know, don't try to make up an answer.
----------------
{context}
`;
  const CreateVectorDatabaseRetrieverDialog = create$1((props) => {
    const { source } = props;
    const currentModal = useModal();
    const { toast: toast2 } = useToast();
    const { t: t2 } = useTranslation("dialogs");
    const [k2, setK] = reactExports.useState(1);
    const [minimalScore, setMinimalScore] = reactExports.useState(void 0);
    const { loading, createVectorDatabaseRetriever } = useCreateVectorDatabaseRetriever();
    const handleSubmit = async (data) => {
      try {
        const content = data.content;
        if (!content || !content.includes(`{context}`)) {
          toast2({
            title: t2("create_vector_database_retriever.errors.fill_context"),
            variant: "destructive"
          });
          return;
        }
        await createVectorDatabaseRetriever({
          source,
          prompt: {
            content
          },
          metadata: {
            k: k2,
            minimalScore
          }
        });
        currentModal.hide();
        return true;
      } catch {
        toast2({
          title: t2("create_vector_database_retriever.errors.create_failed"),
          variant: "destructive"
        });
      }
    };
    const handleOnChangeK = (e3) => {
      setK(e3.target.value ? Number(e3.target.value) : void 0);
    };
    const handleOnChangeMinimalScore = (e3) => {
      setMinimalScore(e3.target.value ? Number(e3.target.value) : void 0);
    };
    return jsxRuntimeExports.jsx(Dialog, {
      open: currentModal.visible,
      onOpenChange: currentModal.hide,
      children: jsxRuntimeExports.jsxs(DialogContent, {
        className: "sm:max-w-[425px]",
        children: [
          jsxRuntimeExports.jsx(DialogHeader, {
            children: jsxRuntimeExports.jsxs("div", {
              className: "flex",
              children: [
                jsxRuntimeExports.jsx(LazyIcon, {
                  name: "file",
                  className: "mr-2 h-4 w-4"
                }),
                jsxRuntimeExports.jsx(DialogTitle, {
                  children: t2("create_vector_database_retriever.title")
                })
              ]
            })
          }),
          jsxRuntimeExports.jsxs("div", {
            className: "flex gap-4 py-4 flex-col",
            children: [
              jsxRuntimeExports.jsx(PromptForm, {
                onSubmit: handleSubmit,
                loading,
                hidePromptType: true,
                defaultPromptRole: "system",
                defaultPromptContent: DEFAULT_PROMPT
              }),
              jsxRuntimeExports.jsxs(Card, {
                children: [
                  jsxRuntimeExports.jsx(CardHeader, {
                    children: jsxRuntimeExports.jsx(CardTitle, {
                      children: t2("create_vector_database_retriever.retriever_settings")
                    })
                  }),
                  jsxRuntimeExports.jsxs(CardContent, {
                    children: [
                      jsxRuntimeExports.jsx(Label$3, {
                        children: t2("create_vector_database_retriever.retriever_k")
                      }),
                      jsxRuntimeExports.jsx(Input, {
                        value: k2 || "",
                        type: "number",
                        onChange: handleOnChangeK,
                        placeholder: t2("create_vector_database_retriever.retriever_k_placeholder")
                      }),
                      jsxRuntimeExports.jsx(Label$3, {
                        children: t2("create_vector_database_retriever.retriever_minimum_score")
                      }),
                      jsxRuntimeExports.jsx(Input, {
                        value: minimalScore || "",
                        type: "number",
                        onChange: handleOnChangeMinimalScore,
                        placeholder: t2("create_vector_database_retriever.retriever_minimum_score_placeholder")
                      })
                    ]
                  })
                ]
              }),
              jsxRuntimeExports.jsxs("div", {
                className: "w-full border-0 text-gray-700 flex text-sm items-center",
                children: [
                  jsxRuntimeExports.jsx(LazyIcon, {
                    name: "info",
                    className: "mr-2",
                    size: 14
                  }),
                  t2("create_vector_database_retriever.fill_content_note")
                ]
              })
            ]
          })
        ]
      })
    });
  });
  const useConnectionToHandler$5 = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const indexVector = useLocalEmbeddingState((state) => state.index);
    const connectionHandler = reactExports.useCallback(async ({ edgeId, target, source }) => {
      var _a, _b;
      try {
        const targetEntity = (_a = target == null ? void 0 : target.data) == null ? void 0 : _a.entity;
        if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.CSVData && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.VectorDatabase) {
          const csvData = (_b = source == null ? void 0 : source.data) == null ? void 0 : _b.entity;
          if (!csvData || !targetEntity) {
            return {
              deleteEdgeId: edgeId
            };
          }
          const { rows } = decodeCSVData(csvData.headers, csvData.csv);
          const documents = rows.map((row) => new Document({
            pageContent: `${row.text}`
          }));
          await indexVector({
            databaseId: targetEntity.id,
            dataSourceId: csvData.id,
            dataSourceType: "CSVData"
          }, documents);
          await createOrUpdateFlowEdge({
            source: source.id,
            target: target.id
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createOrUpdateFlowEdge,
      indexVector
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  var baseSlice = _baseSlice, isIterateeCall = _isIterateeCall, toInteger = toInteger_1;
  var nativeCeil = Math.ceil, nativeMax = Math.max;
  function chunk(array2, size, guard) {
    if (guard ? isIterateeCall(array2, size, guard) : size === void 0) {
      size = 1;
    } else {
      size = nativeMax(toInteger(size), 0);
    }
    var length = array2 == null ? 0 : array2.length;
    if (!length || size < 1) {
      return [];
    }
    var index2 = 0, resIndex = 0, result = Array(nativeCeil(length / size));
    while (index2 < length) {
      result[resIndex++] = baseSlice(array2, index2, index2 += size);
    }
    return result;
  }
  var chunk_1 = chunk;
  const chunk$1 = getDefaultExportFromCjs(chunk_1);
  const useActions$3 = (id) => {
    var _a, _b;
    const [loading, setLoading] = reactExports.useState(false);
    const { t: t2 } = useTranslation("flows");
    const { toast: toast2 } = useToast();
    const node = useInternalNode(id);
    const { getNode, getHandleConnections } = useReactFlow();
    const updateNodes = useFlowState((state) => state.updateNodes);
    const indexFunction = useLocalEmbeddingState((state) => state.index);
    const similaritySearchWithScoreFunction = useLocalEmbeddingState((state) => state.similaritySearchWithScore);
    const similaritySearchWithScore = reactExports.useCallback(async (input, options) => {
      var _a2, _b2;
      try {
        const entity = (_a2 = node == null ? void 0 : node.data) == null ? void 0 : _a2.entity;
        if (!entity) {
          toast2({
            variant: "destructive",
            title: t2("vector_database_node.errors.vector_database_not_found")
          });
          return;
        }
        const connections = getHandleConnections({
          nodeId: id,
          type: "target"
        });
        const dataSourceNode = connections.map((connection) => getNode(connection.source)).find((node2) => (node2 == null ? void 0 : node2.type) && [
          FlowNodeTypeEnum.JSONLData,
          FlowNodeTypeEnum.CSVData
        ].includes(node2 == null ? void 0 : node2.type));
        const dataSource = (_b2 = dataSourceNode == null ? void 0 : dataSourceNode.data) == null ? void 0 : _b2.entity;
        if (!dataSource && entity.storage === "DataNode") {
          toast2({
            variant: "destructive",
            title: t2("vector_database_node.errors.data_node_not_found")
          });
          return;
        }
        setLoading(true);
        const result = await similaritySearchWithScoreFunction({
          databaseId: entity.id,
          dataSourceId: dataSource.id,
          dataSourceType: getStorageDataSource(dataSource)
        }, input, options == null ? void 0 : options.k);
        return result;
      } catch {
        toast2({
          variant: "destructive",
          title: t2("vector_database_node.errors.similarity_search_failed")
        });
      } finally {
        setLoading(false);
      }
    }, [
      (_a = node == null ? void 0 : node.data) == null ? void 0 : _a.entity,
      getHandleConnections,
      id,
      similaritySearchWithScoreFunction,
      toast2,
      t2,
      getNode
    ]);
    const indexData = reactExports.useCallback(async (data, options) => {
      var _a2, _b2, _c;
      try {
        const documents = data.content ? [
          new Document({
            pageContent: data.content,
            id: data.id,
            metadata: {
              id: data.id
            }
          })
        ] : data.documents;
        if (!(documents == null ? void 0 : documents.length)) {
          toast2({
            variant: "destructive",
            title: t2("vector_database_node.errors.content_not_found")
          });
          return;
        }
        const entity = (_a2 = node == null ? void 0 : node.data) == null ? void 0 : _a2.entity;
        if (!entity) {
          toast2({
            variant: "destructive",
            title: t2("vector_database_node.errors.vector_database_not_found")
          });
          return;
        }
        const connections = getHandleConnections({
          nodeId: id,
          type: "target"
        });
        const dataSourceNode = connections.map((connection) => getNode(connection.source)).find((node2) => (node2 == null ? void 0 : node2.type) && [
          FlowNodeTypeEnum.JSONLData,
          FlowNodeTypeEnum.CSVData
        ].includes(node2 == null ? void 0 : node2.type));
        const dataSource = (_b2 = dataSourceNode == null ? void 0 : dataSourceNode.data) == null ? void 0 : _b2.entity;
        if (!dataSource && entity.storage === "DataNode") {
          toast2({
            variant: "destructive",
            title: t2("vector_database_node.errors.data_node_not_found")
          });
          return;
        }
        setLoading(true);
        const dataSourceType = getStorageDataSource(dataSource);
        const chunkedDocuments = chunk$1(documents, 10);
        let handledCount = 0;
        for (const partDocuments of chunkedDocuments) {
          (_c = options == null ? void 0 : options.onProgressReport) == null ? void 0 : _c.call(options, {
            handling: partDocuments.length,
            handled: handledCount,
            total: documents.length
          });
          await indexFunction({
            databaseId: entity.id,
            dataSourceId: dataSource.id,
            dataSourceType
          }, partDocuments);
          if (dataSourceType && dataSourceNode) {
            const updatedDataNode = await getRepository(dataSourceType).findOne({
              where: {
                id: dataSource.id
              }
            });
            updateNodes([
              {
                type: "replace",
                id: dataSourceNode.id,
                item: {
                  ...dataSourceNode,
                  data: {
                    ...dataSourceNode.data,
                    entity: updatedDataNode
                  }
                }
              }
            ]);
          }
          handledCount += partDocuments.length;
        }
      } catch {
        toast2({
          variant: "destructive",
          title: t2("vector_database_node.errors.similarity_search_failed")
        });
      } finally {
        setLoading(false);
      }
    }, [
      (_b = node == null ? void 0 : node.data) == null ? void 0 : _b.entity,
      getHandleConnections,
      id,
      indexFunction,
      toast2,
      t2,
      getNode,
      updateNodes
    ]);
    return {
      loading,
      indexData,
      similaritySearchWithScore
    };
  };
  const K_RANGE = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
  ];
  const VectorSearch = reactExports.memo((props) => {
    const { t: t2 } = useTranslation("flows");
    const [value, setValue] = reactExports.useState("");
    const [documents, setDocuments] = reactExports.useState([]);
    const [k2, setK] = reactExports.useState(`${1}`);
    const { loading, onSimilaritySearch, onCreatePrompt, onCreateRetriever } = props;
    const handleSeach = async () => {
      setDocuments(await onSimilaritySearch(value, +k2));
      setValue("");
    };
    const handleKeyDown = async (e3) => {
      if (e3.key === "Enter" && !e3.shiftKey) {
        e3.preventDefault();
        handleSeach();
      }
    };
    return jsxRuntimeExports.jsxs("div", {
      className: "mt-4 max-w-full",
      children: [
        jsxRuntimeExports.jsx("div", {
          className: "bg-black/5 dark:bg-white/5 rounded-xl relative",
          children: jsxRuntimeExports.jsxs("div", {
            className: "relative px-2 py-1 pb-2",
            children: [
              jsxRuntimeExports.jsxs(Select, {
                value: `${k2}`,
                onValueChange: (newValue) => setK(newValue),
                children: [
                  jsxRuntimeExports.jsx(SelectTrigger, {
                    className: "absolute left-0 !w-14 top-[2px] rounded-xl bg-transparent border-none focus:outline-none focus:ring-0 focus:border-opacity-0 focus:ring-transparent",
                    children: jsxRuntimeExports.jsx(SelectValue, {
                      placeholder: t2("vector_database_node.k_select_placeholder")
                    })
                  }),
                  jsxRuntimeExports.jsx(SelectContent, {
                    children: K_RANGE.map((item) => {
                      return jsxRuntimeExports.jsx(SelectItem, {
                        value: `${item}`,
                        children: item
                      }, `${item}`);
                    })
                  })
                ]
              }),
              jsxRuntimeExports.jsx(Textarea, {
                value,
                disabled: loading,
                placeholder: t2("vector_database_node.similarity_search_placeholder"),
                className: cn("w-full rounded-xl px-2 pl-11 border-none resize-none bg-transparent", `min-h-8 max-h-8`),
                onKeyDown: handleKeyDown,
                onChange: (e3) => {
                  setValue(e3.target.value);
                }
              }),
              jsxRuntimeExports.jsx("button", {
                type: "button",
                disabled: loading,
                onClick: handleSeach,
                className: "absolute right-3 top-5 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-1",
                children: jsxRuntimeExports.jsx(LazyIcon, {
                  name: loading ? "loader-circle" : "arrow-right",
                  className: cn("w-4 h-4 dark:text-white", value ? "opacity-100" : "opacity-30", loading ? "animate-spin" : "")
                })
              })
            ]
          })
        }),
        jsxRuntimeExports.jsx(Accordion, {
          type: "single",
          collapsible: true,
          children: documents == null ? void 0 : documents.map(([row, score], index2) => {
            return jsxRuntimeExports.jsxs(AccordionItem, {
              value: `${index2}`,
              children: [
                jsxRuntimeExports.jsxs(AccordionTrigger, {
                  children: [
                    `[${score.toFixed(2)}] ${row.pageContent}`.substring(0, 32),
                    "..."
                  ]
                }),
                jsxRuntimeExports.jsx(AccordionContent, {
                  children: row.pageContent
                })
              ]
            }, `${index2}`);
          })
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "w-full mt-4 flex flex-col gap-1",
          children: [
            jsxRuntimeExports.jsx(Button, {
              disabled: loading,
              onClick: onCreateRetriever,
              className: "w-full",
              children: t2("vector_database_node.to_retriever")
            }),
            (documents == null ? void 0 : documents.length) && onCreatePrompt ? jsxRuntimeExports.jsx(Button, {
              disabled: loading,
              onClick: () => onCreatePrompt(documents),
              className: "w-full",
              children: t2("vector_database_node.create_prompt")
            }) : void 0
          ]
        })
      ]
    });
  });
  const IndexNewText = reactExports.memo(({ loading, onCreateData }) => {
    const { t: t2 } = useTranslation("flows");
    const [id, setId] = reactExports.useState("");
    const [text, setText] = reactExports.useState("");
    const handleIndexText = async () => {
      if (!text) {
        return;
      }
      await onCreateData({
        id,
        content: text
      });
      setId("");
      setText("");
    };
    return jsxRuntimeExports.jsxs("div", {
      className: "min-w-80",
      children: [
        jsxRuntimeExports.jsxs("div", {
          className: "flex flex-col space-y-1.5 mt-3",
          children: [
            jsxRuntimeExports.jsx(Label$3, {
              htmlFor: "name",
              children: t2("vector_database_node.add_text.id")
            }),
            jsxRuntimeExports.jsx(Input, {
              value: id,
              disabled: loading,
              onChange: (e3) => setId(e3.target.value || ""),
              placeholder: t2("vector_database_node.add_text.id_placeholder"),
              className: "mb-4"
            }),
            jsxRuntimeExports.jsxs(Label$3, {
              htmlFor: "name",
              children: [
                t2("vector_database_node.add_text.content"),
                " ",
                jsxRuntimeExports.jsx("span", {
                  className: "text-red-600",
                  children: "*"
                })
              ]
            }),
            jsxRuntimeExports.jsx(Textarea, {
              value: text,
              disabled: loading,
              onChange: (e3) => setText(e3.target.value || ""),
              placeholder: t2("vector_database_node.add_text.content_placeholder")
            })
          ]
        }),
        jsxRuntimeExports.jsx("div", {
          className: "flex justify-between mt-6",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            loading,
            disabled: !(text == null ? void 0 : text.length),
            onClick: handleIndexText,
            className: "w-full",
            children: t2("vector_database_node.add_text.add")
          })
        })
      ]
    });
  });
  function useFileInput({ accept, maxSize }) {
    const { t: t2 } = useTranslation("atoms");
    const [fileName, setFileName] = reactExports.useState("");
    const [error, setError] = reactExports.useState("");
    const fileInputRef = reactExports.useRef(null);
    const [fileSize, setFileSize] = reactExports.useState(0);
    const handleFileSelect = (e3) => {
      var _a;
      const file = (_a = e3.target.files) == null ? void 0 : _a[0];
      validateAndSetFile(file);
    };
    const validateAndSetFile = (file) => {
      setError("");
      if (file) {
        if (maxSize && file.size > maxSize * 1024 * 1024) {
          setError(t2("file_upload_input.errors.max_size", {
            maxSize,
            fileSize: (file.size / 1024 / 1024).toFixed(2)
          }));
          return;
        }
        const acceptFiles = accept == null ? void 0 : accept.split(",").map((a2) => a2.replace(".", "").trim());
        if (accept && !file.type.match(accept.replace("/*", "")) && !(acceptFiles == null ? void 0 : acceptFiles.some((item) => file.type.includes(item)))) {
          setError(t2("file_upload_input.errors.accept", {
            accept
          }));
          return;
        }
        setFileSize(file.size);
        setFileName(file.name);
        return file;
      }
    };
    const clearFile = () => {
      setFileName("");
      setError("");
      setFileSize(0);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    };
    return {
      fileName,
      error,
      fileInputRef,
      handleFileSelect,
      validateAndSetFile,
      clearFile,
      fileSize
    };
  }
  function FileUploadInput({ file, setFile, loading, progress, fileOptions }) {
    const { toast: toast2 } = useToast();
    const { t: t2 } = useTranslation("atoms");
    const [isDragging, setIsDragging] = reactExports.useState(false);
    const { fileName, fileInputRef, clearFile, error, validateAndSetFile, fileSize } = useFileInput({
      accept: (fileOptions == null ? void 0 : fileOptions.accept) || "image/*",
      maxSize: (fileOptions == null ? void 0 : fileOptions.maxSize) || 3
    });
    reactExports.useEffect(() => {
      if (!file) {
        clearFile();
      }
    }, [
      clearFile,
      file
    ]);
    reactExports.useEffect(() => {
      if (error) {
        toast2({
          title: error,
          variant: "destructive"
        });
      }
    }, [
      error,
      toast2
    ]);
    function handleFile(file2) {
      const result = validateAndSetFile(file2);
      if (result) {
        setFile(result);
      }
    }
    function handleDrop(e3) {
      e3.preventDefault();
      setIsDragging(false);
      const droppedFile = e3.dataTransfer.files[0];
      if (!droppedFile) return;
      handleFile(droppedFile);
    }
    function handleChange(e3) {
      var _a;
      const selectedFile = (_a = e3.target.files) == null ? void 0 : _a[0];
      if (!selectedFile) return;
      handleFile(selectedFile);
    }
    function removeFile() {
      clearFile();
      setFile(void 0);
    }
    const preview = reactExports.useMemo(() => {
      if (!file) {
        return jsxRuntimeExports.jsx("div", {
          className: "w-16 h-16 rounded-lg bg-zinc-100 dark:bg-zinc-800 flex items-center justify-center",
          children: jsxRuntimeExports.jsx(LazyIcon, {
            name: "file-text",
            className: "w-8 h-8 text-zinc-400"
          })
        });
      }
      const isImage = file.type.startsWith("image/");
      return jsxRuntimeExports.jsx("div", {
        className: "relative w-16 h-16 rounded-lg overflow-hidden",
        children: isImage ? jsxRuntimeExports.jsx("img", {
          src: URL.createObjectURL(file),
          alt: "Preview",
          className: "w-full h-full object-cover"
        }) : jsxRuntimeExports.jsx(LazyIcon, {
          className: "w-14 h-14",
          name: "file-text"
        })
      });
    }, [
      file
    ]);
    return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
      children: jsxRuntimeExports.jsxs("div", {
        className: cn("relative group cursor-pointer", "rounded-lg border-2 border-dashed", "transition-colors duration-200", isDragging ? "border-indigo-500 bg-indigo-50/50 dark:bg-indigo-500/10" : "border-zinc-200 dark:border-zinc-800"),
        onDragOver: (e3) => {
          e3.preventDefault();
          setIsDragging(true);
        },
        onDragLeave: () => setIsDragging(false),
        onDrop: handleDrop,
        onClick: () => {
          var _a;
          return (_a = fileInputRef.current) == null ? void 0 : _a.click();
        },
        onKeyDown: (e3) => {
          var _a;
          if (e3.key === "Enter" || e3.key === " ") {
            e3.preventDefault();
            (_a = fileInputRef.current) == null ? void 0 : _a.click();
          }
        },
        "aria-label": "Upload file",
        children: [
          jsxRuntimeExports.jsx("input", {
            ref: fileInputRef,
            type: "file",
            disabled: loading || !!(progress && progress < 1),
            accept: (fileOptions == null ? void 0 : fileOptions.accept) || "image/*",
            onChange: handleChange,
            className: "hidden"
          }),
          jsxRuntimeExports.jsx("div", {
            className: "p-8 space-y-4",
            children: !fileName ? jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col items-center gap-2",
              children: [
                jsxRuntimeExports.jsx(LazyIcon, {
                  name: "upload",
                  className: "w-8 h-8 text-zinc-400 dark:text-zinc-500"
                }),
                jsxRuntimeExports.jsx("p", {
                  className: "text-sm text-zinc-600 dark:text-zinc-400",
                  children: t2("file_upload_input.drop_file")
                })
              ]
            }) : jsxRuntimeExports.jsxs("div", {
              className: "flex items-center gap-4",
              children: [
                preview,
                jsxRuntimeExports.jsxs("div", {
                  className: "flex-1 min-w-0",
                  children: [
                    jsxRuntimeExports.jsxs("p", {
                      className: "text-sm font-medium truncate",
                      children: [
                        fileName || "No file selected",
                        " ",
                        jsxRuntimeExports.jsx("span", {
                          className: "text-xs text-zinc-500 leading-5",
                          children: fileSize ? `(${(fileSize / 1024 / 1024).toFixed(2)} MB)` : ""
                        })
                      ]
                    }),
                    progress && progress < 1 ? jsxRuntimeExports.jsxs("div", {
                      className: "flex items-center gap-2 text-xs",
                      children: [
                        jsxRuntimeExports.jsxs("p", {
                          children: [
                            (progress * 100).toFixed(2),
                            " %"
                          ]
                        }),
                        jsxRuntimeExports.jsx("div", {
                          className: "h-1 flex-1 bg-zinc-100 dark:bg-zinc-800 rounded-full overflow-hidden items-center flex",
                          children: jsxRuntimeExports.jsx("div", {
                            className: "h-full bg-indigo-500 transition-all duration-200",
                            style: {
                              width: `${progress * 100}%`
                            }
                          })
                        })
                      ]
                    }) : void 0
                  ]
                }),
                jsxRuntimeExports.jsx("button", {
                  type: "button",
                  disabled: loading || !!(progress && progress < 1),
                  onClick: (e3) => {
                    e3.stopPropagation();
                    removeFile();
                  },
                  className: "p-1 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded",
                  children: jsxRuntimeExports.jsx(LazyIcon, {
                    name: "x",
                    className: "w-5 h-5 text-zinc-400"
                  })
                }),
                progress && progress < 1 ? jsxRuntimeExports.jsx(BorderBeam, {
                  className: "rounded-lg"
                }) : void 0
              ]
            })
          })
        ]
      })
    });
  }
  function IndexNewFile({ onFileSubmit, fileOptions, progress, loading }) {
    const { t: t2 } = useTranslation("flows");
    const [file, setFile] = reactExports.useState();
    const handleFileSubmit = async () => {
      if (!file) return;
      await onFileSubmit(file);
      setFile(void 0);
    };
    return jsxRuntimeExports.jsxs("div", {
      className: "w-full max-w-md space-y-2 mt-4",
      children: [
        jsxRuntimeExports.jsx("div", {
          className: "mb-6",
          children: jsxRuntimeExports.jsx(FileUploadInput, {
            progress,
            loading,
            fileOptions,
            setFile,
            file
          })
        }),
        jsxRuntimeExports.jsx(LoadingButton, {
          loading,
          disabled: !file,
          onClick: handleFileSubmit,
          className: "w-full mt-4",
          children: t2("vector_database_node.add_file.index")
        })
      ]
    });
  }
  const VectorDatabaseNode = reactExports.memo((props) => {
    var _a;
    const { t: t2 } = useTranslation("flows");
    const [progress, setProgress] = reactExports.useState(0);
    const [mode, setMode] = reactExports.useState("search");
    const node = useInternalNode(props.id);
    const { id, data, isConnectable } = props;
    const { loading, similaritySearchWithScore, indexData } = useActions$3(id);
    const createPromptDialog = useModal(CreateVectorDatabasePromptDialog);
    const createRetrieverDialog = useModal(CreateVectorDatabaseRetrieverDialog);
    useConnectionToHandler$5(id);
    const handleCreateData = reactExports.useCallback(async (...args) => {
      if (node) {
        await indexData(...args);
      }
    }, [
      indexData,
      node
    ]);
    const handleSimilaritySearch = reactExports.useCallback(async (value, k2) => {
      const input = value.trim();
      const documents = await similaritySearchWithScore(input, {
        k: k2
      });
      if (!(documents == null ? void 0 : documents.length)) {
        return;
      }
      return documents;
    }, [
      similaritySearchWithScore
    ]);
    const handleCreatePrompt = reactExports.useCallback((content) => {
      createPromptDialog.show({
        source: node,
        documents: content.map(([doc]) => doc)
      });
    }, [
      createPromptDialog,
      node
    ]);
    const handleCreateRetriever = reactExports.useCallback(async () => {
      createRetrieverDialog.show({
        source: node
      });
    }, [
      createRetrieverDialog,
      node
    ]);
    const handleIndexPDF = reactExports.useCallback(async (file) => {
      if (file.type.includes("text") || file.type.includes("txt")) {
        const reader = new FileReader();
        reader.onload = async (e3) => {
          var _a2;
          const content = (_a2 = e3.target) == null ? void 0 : _a2.result;
          await handleCreateData({
            content
          });
        };
        reader.readAsText(file);
      } else if (file.type.endsWith("pdf")) {
        const blob = new Blob([
          file
        ], {
          type: "application/pdf"
        });
        const customBuildLoader = new WebPDFLoader(blob, {
          pdfjs: async () => {
            const pdfjs = await __vitePreload(() => import("./pdf.min-jukQxExX.js").then(async (m2) => {
              await m2.__tla;
              return m2;
            }), true ? __vite__mapDeps([11,2,3,1,4]) : void 0);
            await __vitePreload(() => import("./pdf.worker.min-CRA75IwO.js").then(async (m2) => {
              await m2.__tla;
              return m2;
            }), true ? __vite__mapDeps([12,1,2,3,4]) : void 0);
            pdfjs.GlobalWorkerOptions.workerSrc = new URL("pdfjs-dist/build/pdf.worker.min.js", import.meta.url).toString();
            return pdfjs;
          },
          parsedItemSeparator: " "
        });
        const documents = await customBuildLoader.load();
        await handleCreateData({
          documents
        }, {
          onProgressReport: (info) => {
            setProgress((info.handled + info.handling) / info.total);
          }
        });
      }
    }, [
      handleCreateData
    ]);
    const renderContent2 = reactExports.useMemo(() => {
      switch (mode) {
        case "search":
          return jsxRuntimeExports.jsx(TabsContent, {
            value: "search",
            children: jsxRuntimeExports.jsx(VectorSearch, {
              loading,
              onSimilaritySearch: handleSimilaritySearch,
              onCreatePrompt: handleCreatePrompt,
              onCreateRetriever: handleCreateRetriever
            })
          });
        case "new":
          return jsxRuntimeExports.jsx(TabsContent, {
            className: "min-w-80",
            value: "new",
            children: jsxRuntimeExports.jsx(IndexNewText, {
              loading,
              onCreateData: handleCreateData
            })
          });
        case "file":
          return jsxRuntimeExports.jsx(TabsContent, {
            value: "file",
            children: jsxRuntimeExports.jsx(IndexNewFile, {
              loading,
              progress,
              onFileSubmit: handleIndexPDF,
              fileOptions: {
                accept: ".pdf,.txt,.text",
                maxSize: 1
              }
            })
          });
      }
    }, [
      handleCreateData,
      handleCreatePrompt,
      handleCreateRetriever,
      handleIndexPDF,
      handleSimilaritySearch,
      loading,
      mode,
      progress
    ]);
    return jsxRuntimeExports.jsxs("div", {
      className: "min-w-72 max-w-md",
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "max-w-full",
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsxs(Alert, {
              className: "flex justify-center",
              variant: "default",
              children: [
                jsxRuntimeExports.jsx(LazyIcon, {
                  size: 24,
                  name: "database-zap"
                }),
                jsxRuntimeExports.jsxs("div", {
                  className: "ml-2 max-w-full",
                  children: [
                    jsxRuntimeExports.jsx(AlertTitle, {
                      children: `${((_a = data.entity) == null ? void 0 : _a.name) || ""}`
                    }),
                    jsxRuntimeExports.jsxs(Tabs, {
                      value: mode,
                      onValueChange: setMode,
                      defaultValue: "search",
                      className: "w-full mt-4",
                      children: [
                        jsxRuntimeExports.jsxs(TabsList, {
                          className: "grid w-full grid-cols-3",
                          children: [
                            jsxRuntimeExports.jsx(TabsTrigger, {
                              value: "search",
                              children: t2("vector_database_node.search")
                            }),
                            jsxRuntimeExports.jsx(TabsTrigger, {
                              value: "new",
                              children: t2("vector_database_node.text")
                            }),
                            jsxRuntimeExports.jsx(TabsTrigger, {
                              value: "file",
                              children: t2("vector_database_node.file")
                            })
                          ]
                        }),
                        renderContent2
                      ]
                    })
                  ]
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const LIMIT_LENGTH_BY_COLUMNS = {
    embedding: 32
  };
  const JSONLDataNode = reactExports.memo((props) => {
    var _a, _b, _c;
    const { id, data, isConnectable } = props;
    const jsonl = reactExports.useMemo(() => {
      var _a2;
      if (!((_a2 = data == null ? void 0 : data.entity) == null ? void 0 : _a2.jsonl)) {
        return {
          headers: [],
          rows: []
        };
      }
      const headers = decodeSplitter(data.entity.headers || "");
      const lines = decodeLine(data.entity.jsonl);
      return {
        headers,
        rows: lines.map((row) => {
          try {
            const data2 = JSON.parse(row);
            return data2;
          } catch {
            return [];
          }
        })
      };
    }, [
      (_a = data == null ? void 0 : data.entity) == null ? void 0 : _a.jsonl,
      data.entity.headers
    ]);
    return jsxRuntimeExports.jsxs("div", {
      className: "min-w-80",
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsxs(Card, {
              className: "min-w-32 min-h-16 p-4",
              children: [
                jsxRuntimeExports.jsx(CardHeader, {
                  className: "!p-0",
                  children: jsxRuntimeExports.jsxs("div", {
                    className: "pt-2 flex !flex-row",
                    children: [
                      jsxRuntimeExports.jsx(LazyIcon, {
                        name: "file-json",
                        className: "mr-2"
                      }),
                      jsxRuntimeExports.jsxs(Label$3, {
                        className: "!font-medium leading-none tracking-tight pr-8",
                        children: [
                          FlowNodeTypeEnum.JSONLData,
                          " ",
                          ((_b = jsonl == null ? void 0 : jsonl.rows) == null ? void 0 : _b.length) ? `(${((_c = jsonl == null ? void 0 : jsonl.rows) == null ? void 0 : _c.length) || 0})` : ""
                        ]
                      })
                    ]
                  })
                }),
                jsxRuntimeExports.jsx(CardContent, {
                  className: "pb-0",
                  children: jsxRuntimeExports.jsx(DataViewer, {
                    data: jsonl.rows,
                    headers: jsonl.headers,
                    limitLengthByColumns: LIMIT_LENGTH_BY_COLUMNS
                  })
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const DEFAULT_MAGNIFICATION = 60;
  const DEFAULT_DISTANCE = 140;
  const dockVariants = cva("supports-backdrop-blur:bg-white/10 supports-backdrop-blur:dark:bg-black/10 mx-auto flex h-[58px] w-max gap-2 rounded-lg border p-2 backdrop-blur-md");
  const Dock = React.forwardRef(({ className, children, magnification = DEFAULT_MAGNIFICATION, distance = DEFAULT_DISTANCE, direction = "bottom", ...props }, ref) => {
    const mouseX = useMotionValue(Infinity);
    const renderChildren = () => {
      return React.Children.map(children, (child) => {
        if (React.isValidElement(child) && child.type === DockIcon) {
          return React.cloneElement(child, {
            ...child.props,
            mouseX,
            magnification,
            distance
          });
        }
        return child;
      });
    };
    return jsxRuntimeExports.jsx(motion.div, {
      ref,
      onMouseMove: (e3) => mouseX.set(e3.pageX),
      onMouseLeave: () => mouseX.set(Infinity),
      ...props,
      className: cn(dockVariants({
        className
      }), {
        "items-start": direction === "top",
        "items-center": direction === "middle",
        "items-end": direction === "bottom"
      }),
      children: renderChildren()
    });
  });
  Dock.displayName = "Dock";
  const DockIcon = ({ magnification = DEFAULT_MAGNIFICATION, distance = DEFAULT_DISTANCE, mouseX, className, children, ...props }) => {
    const ref = reactExports.useRef(null);
    const distanceCalc = useTransform(mouseX || new MotionValue(), (val) => {
      var _a;
      const bounds = ((_a = ref.current) == null ? void 0 : _a.getBoundingClientRect()) ?? {
        x: 0,
        width: 0
      };
      return val - bounds.x - bounds.width / 2;
    });
    const widthSync = useTransform(distanceCalc, [
      -distance,
      0,
      distance
    ], [
      40,
      magnification,
      40
    ]);
    const width = useSpring(widthSync, {
      mass: 0.1,
      stiffness: 150,
      damping: 12
    });
    return jsxRuntimeExports.jsx(motion.div, {
      ref,
      style: {
        width
      },
      className: cn("flex aspect-square cursor-pointer items-center justify-center rounded-full", className),
      ...props,
      children
    });
  };
  DockIcon.displayName = "DockIcon";
  const DEFAULT_NODE_SIZE = {
    [FlowNodeTypeEnum.Shape]: {
      width: 100,
      height: 100
    },
    [FlowNodeTypeEnum.CircleShape]: {
      width: 100,
      height: 100
    },
    [FlowNodeTypeEnum.TriangleShape]: {
      width: 100,
      height: 100
    },
    [FlowNodeTypeEnum.EditorApp]: {
      width: 1240,
      height: 400
    }
  };
  const useActions$2 = (id) => {
    const node = useInternalNode(id);
    const currentSession = useSessionState((state) => state.currentSession);
    const [loading, setLoading] = reactExports.useState(false);
    const createOrUpdateFlowNode = useFlowState((state) => state.createOrUpdateFlowNode);
    const createNode = reactExports.useCallback(async (nodeType) => {
      var _a, _b, _c;
      try {
        setLoading(true);
        if (node && (currentSession == null ? void 0 : currentSession.id)) {
          const initialX = ((_a = node.position) == null ? void 0 : _a.x) || 0;
          const initialY = (((_b = node.position) == null ? void 0 : _b.y) || 0) + (((_c = node.measured) == null ? void 0 : _c.height) || 0);
          const nodeData = await getRepository("FlowNodeData").save({
            data: {},
            session_id: currentSession.id
          });
          if (!nodeData) {
            throw new Error("Failed to save node data");
          }
          const newNode = await createOrUpdateFlowNode({
            node_type: nodeType,
            data: {},
            source_id: nodeData.id,
            source_type: "FlowNodeData",
            x: initialX,
            y: initialY + 20,
            ...DEFAULT_NODE_SIZE[nodeType] || {}
          });
          if (!newNode) {
            throw new Error("Failed to save node");
          }
        }
      } finally {
        setLoading(false);
      }
    }, [
      createOrUpdateFlowNode,
      currentSession == null ? void 0 : currentSession.id,
      node
    ]);
    return {
      loading,
      createNode
    };
  };
  const DATA = {
    applications: [
      {
        key: FlowNodeTypeEnum.EditorApp,
        icon: "notebook-text",
        label: "application_bar.note"
      },
      {
        key: FlowNodeTypeEnum.VSLiteApp,
        icon: "square-terminal",
        label: "application_bar.vslite"
      }
    ],
    shapes: [
      {
        key: FlowNodeTypeEnum.Shape,
        icon: "square",
        label: "application_bar.square"
      },
      {
        key: FlowNodeTypeEnum.CircleShape,
        icon: "circle",
        label: "application_bar.circle"
      },
      {
        key: FlowNodeTypeEnum.TriangleShape,
        icon: "triangle",
        label: "application_bar.triangle"
      }
    ],
    old: [
      {
        key: FlowNodeTypeEnum.CodeContainerApp,
        icon: "file-code-2",
        label: "application_bar.code_editor"
      }
    ]
  };
  const ApplicationBarNode = reactExports.memo((props) => {
    const { t: t2 } = useTranslation("flows");
    const { toast: toast2 } = useToast();
    const { loading, createNode } = useActions$2(props.id);
    const handleAddNode = async (nodeType) => {
      try {
        if (loading) {
          return;
        }
        await createNode(nodeType);
      } catch {
        toast2({
          description: t2("application_bar.errors.add_node_failed"),
          variant: "destructive"
        });
      }
    };
    return jsxRuntimeExports.jsx(TooltipProvider, {
      children: jsxRuntimeExports.jsxs(Dock, {
        direction: "middle",
        children: [
          DATA.applications.map((item) => jsxRuntimeExports.jsx(DockIcon, {
            children: jsxRuntimeExports.jsxs(Tooltip$1, {
              children: [
                jsxRuntimeExports.jsx(TooltipTrigger, {
                  children: jsxRuntimeExports.jsx(LazyIcon, {
                    onClick: () => handleAddNode(item.key),
                    name: item.icon
                  })
                }),
                jsxRuntimeExports.jsx(TooltipContent, {
                  children: jsxRuntimeExports.jsx("p", {
                    children: t2(item.label)
                  })
                })
              ]
            })
          }, item.label)),
          jsxRuntimeExports.jsx(Separator$2, {
            orientation: "vertical",
            className: "h-full"
          }),
          DATA.shapes.map((item) => jsxRuntimeExports.jsx(DockIcon, {
            children: jsxRuntimeExports.jsxs(Tooltip$1, {
              children: [
                jsxRuntimeExports.jsx(TooltipTrigger, {
                  children: jsxRuntimeExports.jsx(LazyIcon, {
                    onClick: () => handleAddNode(item.key),
                    name: item.icon
                  })
                }),
                jsxRuntimeExports.jsx(TooltipContent, {
                  children: jsxRuntimeExports.jsx("p", {
                    children: t2(item.label)
                  })
                })
              ]
            })
          }, item.label)),
          jsxRuntimeExports.jsx(Separator$2, {
            orientation: "vertical",
            className: "h-full"
          }),
          DATA.old.map((item) => jsxRuntimeExports.jsx(DockIcon, {
            children: jsxRuntimeExports.jsxs(Tooltip$1, {
              children: [
                jsxRuntimeExports.jsx(TooltipTrigger, {
                  children: jsxRuntimeExports.jsx(LazyIcon, {
                    onClick: () => handleAddNode(item.key),
                    name: item.icon
                  })
                }),
                jsxRuntimeExports.jsx(TooltipContent, {
                  children: jsxRuntimeExports.jsx("p", {
                    children: t2(item.label)
                  })
                })
              ]
            })
          }, item.label))
        ]
      })
    });
  });
  const DefaultNodeResizer = reactExports.memo((props) => {
    const { lineClassName, handleClassName, ...rest } = props;
    return jsxRuntimeExports.jsx(NodeResizer, {
      lineClassName: cn("!border-1.5", lineClassName),
      handleClassName: cn("!w-2 !h-2 !border-2 !rounded-full", handleClassName),
      ...rest
    });
  });
  const useConnectionToHandler$4 = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target, connection }) => {
      try {
        if ([
          FlowNodeTypeEnum.CircleShape,
          FlowNodeTypeEnum.TriangleShape
        ].includes(source == null ? void 0 : source.type) && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.Shape) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createOrUpdateFlowEdge
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const ShapeNode = reactExports.memo((props) => {
    const { id, selected, isConnectable } = props;
    useConnectionToHandler$4(id);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsx(DefaultNodeResizer, {
          isVisible: !!selected,
          minWidth: 40,
          minHeight: 40
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsx("div", {
          className: "min-w-10 min-h-10 w-full h-full bg-border border",
          children: jsxRuntimeExports.jsx(NodeHeader, {
            id
          })
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          isConnectable
        })
      ]
    });
  });
  const useConnectionToHandler$3 = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target, connection }) => {
      try {
        if ([
          FlowNodeTypeEnum.Shape,
          FlowNodeTypeEnum.TriangleShape
        ].includes(source == null ? void 0 : source.type) && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.CircleShape) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createOrUpdateFlowEdge
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const CircleNode = reactExports.memo((props) => {
    const { id, selected, isConnectable } = props;
    useConnectionToHandler$3(id);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsx(DefaultNodeResizer, {
          isVisible: !!selected,
          minWidth: 40,
          minHeight: 40
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsx("div", {
          className: "min-w-10 min-h-10 w-full h-full bg-border rounded-full border",
          children: jsxRuntimeExports.jsx(NodeHeader, {
            id
          })
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          isConnectable
        })
      ]
    });
  });
  const useConnectionToHandler$2 = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target, connection }) => {
      try {
        if ([
          FlowNodeTypeEnum.CircleShape,
          FlowNodeTypeEnum.Shape
        ].includes(source == null ? void 0 : source.type) && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.TriangleShape) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createOrUpdateFlowEdge
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const TriangleNode = reactExports.memo((props) => {
    const { id, selected, width, height, isConnectable } = props;
    useConnectionToHandler$2(id);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsx(DefaultNodeResizer, {
          isVisible: !!selected,
          minWidth: 40,
          minHeight: 40
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsx("div", {
          className: "w-0 h-0 border-l-transparent border-r-transparent border-b-border",
          style: {
            borderLeftWidth: (width || 0) / 2,
            borderRightWidth: (width || 0) / 2,
            borderBottomWidth: height || 0
          }
        }),
        jsxRuntimeExports.jsx(NodeHeader, {
          id,
          className: "absolute top-0 right-0"
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          isConnectable
        })
      ]
    });
  });
  const useConnectionToHandler$1 = (id) => {
    const createOrUpdateFlowEdge = useFlowState((state) => state.createOrUpdateFlowEdge);
    const connectionHandler = reactExports.useCallback(async ({ edgeId, source, target, connection }) => {
      try {
        if ((source == null ? void 0 : source.type) === FlowNodeTypeEnum.LLM && (target == null ? void 0 : target.type) === FlowNodeTypeEnum.EditorApp) {
          await createOrUpdateFlowEdge({
            source: connection.source,
            target: connection.target,
            sourceHandle: connection.sourceHandle,
            targetHandle: connection.targetHandle
          });
          return;
        }
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, [
      createOrUpdateFlowEdge
    ]);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const useActions$1 = (id) => {
    const node = useInternalNode(id);
    const { t: t2 } = useTranslation("flows");
    const refDebounce = reactExports.useRef(null);
    const { toast: toast2 } = useToast();
    const { getNode, getHandleConnections } = useReactFlow();
    const stream = useLocalLLMState((state) => state.stream);
    const updateEditorContent = reactExports.useCallback(async (value) => {
      if (!node) return;
      clearTimeout(refDebounce.current);
      refDebounce.current = setTimeout(async () => {
        await getRepository("FlowNode").update(node.id, {
          data: value
        });
      }, 150);
    }, [
      node
    ]);
    const createMessage = reactExports.useCallback(async (input, onMessageUpdate) => {
      if (node) {
        const connections = getHandleConnections({
          nodeId: id,
          type: "target"
        });
        const llmConnection = connections.find((connection) => {
          const currentNode = getNode(connection.source);
          return (currentNode == null ? void 0 : currentNode.type) === FlowNodeTypeEnum.LLM;
        });
        const llmNode = llmConnection ? getNode(llmConnection == null ? void 0 : llmConnection.source) : void 0;
        if (!llmNode) {
          return toast2({
            variant: "destructive",
            description: t2("editor_node.errors.llm_not_found")
          });
        } else if (llmNode.data.status !== LLMStatusEnum.Loaded) {
          return toast2({
            variant: "destructive",
            description: t2("editor_node.errors.llm_not_loaded_yet")
          });
        }
        try {
          const streamResponse = stream(input);
          if (!streamResponse) {
            throw new Error("Stream is not supported");
          }
          const chunks = [];
          for await (const chunk2 of streamResponse) {
            if (!chunk2) {
              continue;
            }
            if (Array.isArray(chunk2)) {
              chunks.push(...chunk2.map((c2) => c2.content));
              if (chunk2 == null ? void 0 : chunk2.length) {
                onMessageUpdate == null ? void 0 : onMessageUpdate(chunk2.map((c2) => c2.content).join(""));
              }
            }
          }
          return chunks.join("");
        } catch (error) {
          if (error instanceof Error && error.message.includes("LLM_NOT_LOADED_YET")) {
            return toast2({
              title: t2("editor_node.errors.llm_not_loaded_yet")
            });
          }
          toast2({
            variant: "destructive",
            title: t2("editor_node.errors.stream_message_failed")
          });
        }
      }
    }, [
      node,
      getHandleConnections,
      id,
      getNode,
      toast2,
      t2,
      stream
    ]);
    return {
      createMessage,
      updateEditorContent
    };
  };
  const PlateAppEditor = reactExports.lazy(() => __vitePreload(() => import("./PlateEditor-BaxQ1tY6.js").then(async (m2) => {
    await m2.__tla;
    return m2;
  }), true ? __vite__mapDeps([13,2,3,1,4,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105]) : void 0));
  const EditorAppNode = reactExports.memo((props) => {
    var _a;
    const { id, data, selected, isConnectable } = props;
    useConnectionToHandler$1(id);
    const { createMessage, updateEditorContent } = useActions$1(id);
    const handleChangeContent = reactExports.useCallback((value) => {
      updateEditorContent(value);
    }, [
      updateEditorContent
    ]);
    return jsxRuntimeExports.jsxs("div", {
      className: "w-full min-w-[1240px] h-full",
      children: [
        jsxRuntimeExports.jsx(DefaultNodeResizer, {
          isVisible: !!selected,
          minWidth: 1240,
          minHeight: 400
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "min-w-10 min-h-10 w-full h-full rounded-lg border bg-background",
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              className: "!z-[100]",
              id
            }),
            jsxRuntimeExports.jsx(reactExports.Suspense, {
              fallback: jsxRuntimeExports.jsx("div", {
                className: "h-full w-ful rounded-lg flex justify-center items-center",
                children: jsxRuntimeExports.jsx(LazyIcon, {
                  name: "loader-circle",
                  className: "animate-spin"
                })
              }),
              children: jsxRuntimeExports.jsx("div", {
                className: "h-full w-ful rounded-lg",
                "data-registry": "plate",
                children: jsxRuntimeExports.jsx(PlateAppEditor, {
                  defaultValue: (_a = data == null ? void 0 : data.flowNode) == null ? void 0 : _a.data,
                  onValueChange: handleChangeContent,
                  copilotStream: createMessage
                })
              })
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          isConnectable
        })
      ]
    });
  });
  const useConnectionToHandler = (id) => {
    const connectionHandler = reactExports.useCallback(async ({ edgeId }) => {
      try {
        return {
          deleteEdgeId: edgeId
        };
      } catch {
        return {
          deleteEdgeId: edgeId
        };
      }
    }, []);
    useBaseConnectionToHandler(id, connectionHandler);
  };
  const PlaceholderNode = reactExports.memo((props) => {
    var _a, _b;
    const { id, data, isConnectable } = props;
    const { t: t2 } = useTranslation("flows");
    useConnectionToHandler(id);
    let placeholder = "";
    switch ((_a = data.entity) == null ? void 0 : _a.placeholder_type) {
      case "VECTOR_DATABASE_RETREIVER":
        placeholder = t2("placeholder_node.vector_database_retriever");
        break;
    }
    return jsxRuntimeExports.jsxs("div", {
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs(Alert, {
          className: "flex justify-center max-w-80",
          variant: "default",
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsx(LazyIcon, {
              name: "land-plot",
              className: "w-7 h-7"
            }),
            jsxRuntimeExports.jsxs("div", {
              className: "ml-2 pr-4",
              children: [
                jsxRuntimeExports.jsx(AlertTitle, {
                  children: `${((_b = data.entity) == null ? void 0 : _b.placeholder) || ""}`
                }),
                jsxRuntimeExports.jsx(AlertDescription, {
                  children: placeholder ? jsxRuntimeExports.jsx(Badge, {
                    children: placeholder
                  }) : void 0
                })
              ]
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          id: "a",
          isConnectable
        })
      ]
    });
  });
  const CodeContainerApp = reactExports.lazy(() => __vitePreload(() => import("./CodeContainerApp-BGMyJ1po.js").then(async (m2) => {
    await m2.__tla;
    return m2;
  }).then((n2) => n2.C), true ? __vite__mapDeps([106,2,3,1,4,104,107,7,108,15,109,110]) : void 0));
  const CodeContainerAppNode = reactExports.memo((props) => {
    const { id, isConnectable } = props;
    return jsxRuntimeExports.jsxs("div", {
      className: "w-[1380px] h-[600px]",
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "w-full h-full rounded-lg border bg-card overflow-hidden",
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id
            }),
            jsxRuntimeExports.jsx(reactExports.Suspense, {
              fallback: jsxRuntimeExports.jsx("div", {
                className: "h-full w-full flex justify-center items-center",
                children: jsxRuntimeExports.jsx(LazyIcon, {
                  name: "loader-circle",
                  className: "animate-spin"
                })
              }),
              children: jsxRuntimeExports.jsx(CodeContainerApp, {
                ...props
              })
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          isConnectable
        })
      ]
    });
  });
  convertToElementsTree = function(tree, parentPath = "") {
    const elements = [];
    for (const [name, node] of Object.entries(tree)) {
      const id = nanoid();
      const path = [
        parentPath,
        name
      ].filter(Boolean).join("/");
      const file = "file" in node && "contents" in node.file ? node.file : void 0;
      const element = {
        id,
        isSelectable: true,
        content: typeof (file == null ? void 0 : file.contents) === "string" ? file.contents : void 0,
        file: path,
        name,
        children: []
      };
      if ("directory" in node) {
        element.children = convertToElementsTree(node.directory, path);
      }
      elements.push(element);
    }
    return elements;
  };
  parseJSONLToFileSystemTree = function(jsonl) {
    const lines = jsonl.trim().split("\n");
    const root2 = {};
    lines.forEach((line) => {
      const { file, content } = JSON.parse(line);
      const parts = file.split("/");
      let currentNode = root2;
      for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        if (i === parts.length - 1) {
          currentNode[part] = {
            file: {
              contents: content
            }
          };
        } else {
          if (!currentNode[part]) {
            currentNode[part] = {
              directory: {}
            };
          }
          currentNode = currentNode[part].directory;
        }
      }
    });
    return root2;
  };
  parseFileSystemTreeToJSONL = function(tree) {
    const lines = [];
    function traverse(node, path = []) {
      for (const [name, value] of Object.entries(node)) {
        if ("file" in value) {
          const filePath = [
            ...path,
            name
          ].join("/");
          if ("contents" in value.file) {
            const content = value.file.contents;
            lines.push(JSON.stringify({
              file: filePath,
              content
            }));
          }
        } else if ("directory" in value) {
          traverse(value.directory, [
            ...path,
            name
          ]);
        }
      }
    }
    traverse(tree);
    return lines.join("\n");
  };
  updateFileContentOfFileSystemTree = function(tree, filePath, newContent) {
    const parts = filePath.replace(/^\.\//, "").split("/");
    let currentNode = tree;
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i];
      if (i === parts.length - 1) {
        if (part in currentNode && "file" in currentNode[part]) {
          currentNode[part].file.contents = newContent;
        } else {
          logWarn(`Path "${filePath}" is not a file.`);
        }
      } else {
        if (part in currentNode && "directory" in currentNode[part]) {
          currentNode = currentNode[part].directory;
        } else {
          logWarn(`Path "${filePath}" does not exist.`);
          return tree;
        }
      }
    }
    return tree;
  };
  const SOURCE_BASES = [
    "vite-vue",
    "shadcn-react-vite"
  ];
  const getSourceBase = async (sourceBase) => {
    switch (sourceBase) {
      case "vite-vue":
        return __vitePreload(() => import("./vite-vue-DBYCUH0Q.js"), true ? [] : void 0).then((module) => module.VITE_VUE_BASE);
      case "shadcn-react-vite":
        return __vitePreload(() => import("./shadcn-react-vite-jEuwPVM6.js"), true ? [] : void 0).then((module) => module.SHADCN_REACT_VITE_BASE);
      default:
        throw new Error(`Unknown source base: ${sourceBase}`);
    }
  };
  CreateSourcebaseCard = reactExports.memo(({ className, onUpdateSourceBase }) => {
    const { t: t2 } = useTranslation("components");
    const [sourcebase, setSourcebase] = reactExports.useState();
    return jsxRuntimeExports.jsxs(Card, {
      className: cn("mw-full", className),
      children: [
        jsxRuntimeExports.jsx(CardHeader, {
          className: "p-4",
          children: jsxRuntimeExports.jsx(CardTitle, {
            children: t2("add_source_base.title")
          })
        }),
        jsxRuntimeExports.jsx(CardContent, {
          className: "p-4",
          children: jsxRuntimeExports.jsxs("div", {
            className: "flex items-center justify-center w-full h-full flex-col",
            children: [
              jsxRuntimeExports.jsxs(Select, {
                onValueChange: (value) => setSourcebase(value),
                children: [
                  jsxRuntimeExports.jsx(SelectTrigger, {
                    className: "w-full mb-4",
                    children: jsxRuntimeExports.jsx(SelectValue, {
                      placeholder: t2("add_source_base.source_base_select_placeholder")
                    })
                  }),
                  jsxRuntimeExports.jsx(SelectContent, {
                    children: SOURCE_BASES.map((key) => {
                      return jsxRuntimeExports.jsx(SelectItem, {
                        value: `${key}`,
                        children: t2(`add_source_base.sourcebases.${key.toLowerCase()}`)
                      }, `${key}`);
                    })
                  })
                ]
              }),
              jsxRuntimeExports.jsx(Button, {
                className: "w-full",
                onClick: async () => sourcebase && onUpdateSourceBase(await getSourceBase(sourcebase)),
                children: t2("add_source_base.update_source")
              })
            ]
          })
        })
      ]
    });
  });
  const useActions = (id) => {
    useInternalNode(id);
    const updateCodeContainerData = reactExports.useCallback(async (id2, data) => {
      await getRepository("FlowNode").update(id2, {
        raw: parseFileSystemTreeToJSONL(data)
      });
    }, []);
    return {
      updateCodeContainerData
    };
  };
  const VSLiteApp = reactExports.lazy(() => __vitePreload(() => import("./index-toAxGkKS.js").then(async (m2) => {
    await m2.__tla;
    return m2;
  }), true ? __vite__mapDeps([111,2,3,104,4,107,1,112]) : void 0));
  const VSLiteAppNode = reactExports.memo((props) => {
    var _a, _b, _c;
    const { id, isConnectable, data } = props;
    const [fileSystemTree, setFileSystemTree] = reactExports.useState(((_a = data == null ? void 0 : data.flowNode) == null ? void 0 : _a.raw) ? parseJSONLToFileSystemTree(data.flowNode.raw) : void 0);
    const { updateCodeContainerData } = useActions(id);
    const handleUpdateCodeContainerData = reactExports.useCallback(async (tree) => {
      var _a2, _b2;
      if (!((_a2 = data == null ? void 0 : data.flowNode) == null ? void 0 : _a2.id)) return;
      await updateCodeContainerData((_b2 = data == null ? void 0 : data.flowNode) == null ? void 0 : _b2.id, tree);
      setFileSystemTree(tree);
    }, [
      (_b = data == null ? void 0 : data.flowNode) == null ? void 0 : _b.id,
      updateCodeContainerData
    ]);
    const handleUpdateCodeContainerFile = reactExports.useCallback(async (filePath, code) => {
      setFileSystemTree((prev) => {
        var _a2;
        if (!prev) return prev;
        const result = updateFileContentOfFileSystemTree(prev, filePath, code);
        updateCodeContainerData((_a2 = data == null ? void 0 : data.flowNode) == null ? void 0 : _a2.id, result);
        return result;
      });
    }, [
      (_c = data == null ? void 0 : data.flowNode) == null ? void 0 : _c.id,
      updateCodeContainerData
    ]);
    if (!fileSystemTree) {
      return jsxRuntimeExports.jsx("div", {
        className: "h-full flex justify-center items-center",
        children: jsxRuntimeExports.jsx(CreateSourcebaseCard, {
          className: "w-64",
          onUpdateSourceBase: handleUpdateCodeContainerData
        })
      });
    }
    return jsxRuntimeExports.jsxs("div", {
      className: "w-[1380px] h-[600px]",
      children: [
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "target",
          position: Position.Top,
          isConnectable
        }),
        jsxRuntimeExports.jsxs("div", {
          className: "w-full h-full rounded-lg border bg-card overflow-hidden",
          children: [
            jsxRuntimeExports.jsx(NodeHeader, {
              id,
              className: "z-50"
            }),
            jsxRuntimeExports.jsx(reactExports.Suspense, {
              fallback: jsxRuntimeExports.jsx("div", {
                className: "h-full w-full flex justify-center items-center",
                children: jsxRuntimeExports.jsx(LazyIcon, {
                  name: "loader-circle",
                  className: "animate-spin"
                })
              }),
              children: jsxRuntimeExports.jsx(VSLiteApp, {
                fileSystemTree,
                onUpdateFileContent: handleUpdateCodeContainerFile
              })
            })
          ]
        }),
        jsxRuntimeExports.jsx(DefaultHandle, {
          type: "source",
          position: Position.Bottom,
          isConnectable
        })
      ]
    });
  });
  const nodeTypes = {
    [FlowNodeTypeEnum.LLM]: LLMNode,
    [FlowNodeTypeEnum.Toolbox]: ToolbarNode,
    [FlowNodeTypeEnum.Thread]: ThreadNode,
    [FlowNodeTypeEnum.Message]: MessageNode,
    [FlowNodeTypeEnum.Prompt]: PromptNode,
    [FlowNodeTypeEnum.SessionInfo]: SessionInfoNode,
    [FlowNodeTypeEnum.Schema]: SchemaNode,
    [FlowNodeTypeEnum.CSVData]: CSVDataNode,
    [FlowNodeTypeEnum.ToolDefinition]: ToolNode,
    [FlowNodeTypeEnum.DefaultEmbeddingModel]: EmbeddingNode,
    [FlowNodeTypeEnum.VectorDatabase]: VectorDatabaseNode,
    [FlowNodeTypeEnum.JSONLData]: JSONLDataNode,
    [FlowNodeTypeEnum.ApplicationBar]: ApplicationBarNode,
    [FlowNodeTypeEnum.Shape]: ShapeNode,
    [FlowNodeTypeEnum.CircleShape]: CircleNode,
    [FlowNodeTypeEnum.TriangleShape]: TriangleNode,
    [FlowNodeTypeEnum.EditorApp]: EditorAppNode,
    [FlowNodeTypeEnum.PlaceHolder]: PlaceholderNode,
    [FlowNodeTypeEnum.CodeContainerApp]: CodeContainerAppNode,
    [FlowNodeTypeEnum.VSLiteApp]: VSLiteAppNode
  };
  function createContextScope(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function createContext3(rootComponentName, defaultContext) {
      const BaseContext = reactExports.createContext(defaultContext);
      const index2 = defaultContexts.length;
      defaultContexts = [
        ...defaultContexts,
        defaultContext
      ];
      function Provider(props) {
        const { scope, children, ...context } = props;
        const Context = (scope == null ? void 0 : scope[scopeName][index2]) || BaseContext;
        const value = reactExports.useMemo(() => context, Object.values(context));
        return jsxRuntimeExports.jsx(Context.Provider, {
          value,
          children
        });
      }
      function useContext2(consumerName, scope) {
        const Context = (scope == null ? void 0 : scope[scopeName][index2]) || BaseContext;
        const context = reactExports.useContext(Context);
        if (context) return context;
        if (defaultContext !== void 0) return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      Provider.displayName = rootComponentName + "Provider";
      return [
        Provider,
        useContext2
      ];
    }
    const createScope = () => {
      const scopeContexts = defaultContexts.map((defaultContext) => {
        return reactExports.createContext(defaultContext);
      });
      return function useScope(scope) {
        const contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
        return reactExports.useMemo(() => ({
          [`__scope${scopeName}`]: {
            ...scope,
            [scopeName]: contexts
          }
        }), [
          scope,
          contexts
        ]);
      };
    };
    createScope.scopeName = scopeName;
    return [
      createContext3,
      composeContextScopes(createScope, ...createContextScopeDeps)
    ];
  }
  function composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1) return baseScope;
    const createScope = () => {
      const scopeHooks = scopes.map((createScope2) => ({
        useScope: createScope2(),
        scopeName: createScope2.scopeName
      }));
      return function useComposedScopes(overrideScopes) {
        const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return {
            ...nextScopes2,
            ...currentScope
          };
        }, {});
        return reactExports.useMemo(() => ({
          [`__scope${baseScope.scopeName}`]: nextScopes
        }), [
          nextScopes
        ]);
      };
    };
    createScope.scopeName = baseScope.scopeName;
    return createScope;
  }
  var NAME = "Toggle";
  var Toggle$1 = reactExports.forwardRef((props, forwardedRef) => {
    const { pressed: pressedProp, defaultPressed = false, onPressedChange, ...buttonProps } = props;
    const [pressed = false, setPressed] = useControllableState({
      prop: pressedProp,
      onChange: onPressedChange,
      defaultProp: defaultPressed
    });
    return jsxRuntimeExports.jsx(Primitive.button, {
      type: "button",
      "aria-pressed": pressed,
      "data-state": pressed ? "on" : "off",
      "data-disabled": props.disabled ? "" : void 0,
      ...buttonProps,
      ref: forwardedRef,
      onClick: composeEventHandlers(props.onClick, () => {
        if (!props.disabled) {
          setPressed(!pressed);
        }
      })
    });
  });
  Toggle$1.displayName = NAME;
  var Root = Toggle$1;
  var TOGGLE_GROUP_NAME = "ToggleGroup";
  let createToggleGroupContext;
  [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [
    createRovingFocusGroupScope
  ]);
  var useRovingFocusGroupScope = createRovingFocusGroupScope();
  var ToggleGroup$1 = React.forwardRef((props, forwardedRef) => {
    const { type, ...toggleGroupProps } = props;
    if (type === "single") {
      const singleProps = toggleGroupProps;
      return jsxRuntimeExports.jsx(ToggleGroupImplSingle, {
        ...singleProps,
        ref: forwardedRef
      });
    }
    if (type === "multiple") {
      const multipleProps = toggleGroupProps;
      return jsxRuntimeExports.jsx(ToggleGroupImplMultiple, {
        ...multipleProps,
        ref: forwardedRef
      });
    }
    throw new Error(`Missing prop \`type\` expected on \`${TOGGLE_GROUP_NAME}\``);
  });
  ToggleGroup$1.displayName = TOGGLE_GROUP_NAME;
  var [ToggleGroupValueProvider, useToggleGroupValueContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);
  var ToggleGroupImplSingle = React.forwardRef((props, forwardedRef) => {
    const { value: valueProp, defaultValue, onValueChange = () => {
    }, ...toggleGroupSingleProps } = props;
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChange
    });
    return jsxRuntimeExports.jsx(ToggleGroupValueProvider, {
      scope: props.__scopeToggleGroup,
      type: "single",
      value: value ? [
        value
      ] : [],
      onItemActivate: setValue,
      onItemDeactivate: React.useCallback(() => setValue(""), [
        setValue
      ]),
      children: jsxRuntimeExports.jsx(ToggleGroupImpl, {
        ...toggleGroupSingleProps,
        ref: forwardedRef
      })
    });
  });
  var ToggleGroupImplMultiple = React.forwardRef((props, forwardedRef) => {
    const { value: valueProp, defaultValue, onValueChange = () => {
    }, ...toggleGroupMultipleProps } = props;
    const [value = [], setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChange
    });
    const handleButtonActivate = React.useCallback((itemValue) => setValue((prevValue = []) => [
      ...prevValue,
      itemValue
    ]), [
      setValue
    ]);
    const handleButtonDeactivate = React.useCallback((itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)), [
      setValue
    ]);
    return jsxRuntimeExports.jsx(ToggleGroupValueProvider, {
      scope: props.__scopeToggleGroup,
      type: "multiple",
      value,
      onItemActivate: handleButtonActivate,
      onItemDeactivate: handleButtonDeactivate,
      children: jsxRuntimeExports.jsx(ToggleGroupImpl, {
        ...toggleGroupMultipleProps,
        ref: forwardedRef
      })
    });
  });
  ToggleGroup$1.displayName = TOGGLE_GROUP_NAME;
  var [ToggleGroupContext$1, useToggleGroupContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);
  var ToggleGroupImpl = React.forwardRef((props, forwardedRef) => {
    const { __scopeToggleGroup, disabled = false, rovingFocus = true, orientation, dir, loop = true, ...toggleGroupProps } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);
    const direction = useDirection(dir);
    const commonProps = {
      role: "group",
      dir: direction,
      ...toggleGroupProps
    };
    return jsxRuntimeExports.jsx(ToggleGroupContext$1, {
      scope: __scopeToggleGroup,
      rovingFocus,
      disabled,
      children: rovingFocus ? jsxRuntimeExports.jsx(Root$2, {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation,
        dir: direction,
        loop,
        children: jsxRuntimeExports.jsx(Primitive.div, {
          ...commonProps,
          ref: forwardedRef
        })
      }) : jsxRuntimeExports.jsx(Primitive.div, {
        ...commonProps,
        ref: forwardedRef
      })
    });
  });
  var ITEM_NAME = "ToggleGroupItem";
  var ToggleGroupItem$1 = React.forwardRef((props, forwardedRef) => {
    const valueContext = useToggleGroupValueContext(ITEM_NAME, props.__scopeToggleGroup);
    const context = useToggleGroupContext(ITEM_NAME, props.__scopeToggleGroup);
    const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);
    const pressed = valueContext.value.includes(props.value);
    const disabled = context.disabled || props.disabled;
    const commonProps = {
      ...props,
      pressed,
      disabled
    };
    const ref = React.useRef(null);
    return context.rovingFocus ? jsxRuntimeExports.jsx(Item$2, {
      asChild: true,
      ...rovingFocusGroupScope,
      focusable: !disabled,
      active: pressed,
      ref,
      children: jsxRuntimeExports.jsx(ToggleGroupItemImpl, {
        ...commonProps,
        ref: forwardedRef
      })
    }) : jsxRuntimeExports.jsx(ToggleGroupItemImpl, {
      ...commonProps,
      ref: forwardedRef
    });
  });
  ToggleGroupItem$1.displayName = ITEM_NAME;
  var ToggleGroupItemImpl = React.forwardRef((props, forwardedRef) => {
    const { __scopeToggleGroup, value, ...itemProps } = props;
    const valueContext = useToggleGroupValueContext(ITEM_NAME, __scopeToggleGroup);
    const singleProps = {
      role: "radio",
      "aria-checked": props.pressed,
      "aria-pressed": void 0
    };
    const typeProps = valueContext.type === "single" ? singleProps : void 0;
    return jsxRuntimeExports.jsx(Toggle$1, {
      ...typeProps,
      ...itemProps,
      ref: forwardedRef,
      onPressedChange: (pressed) => {
        if (pressed) {
          valueContext.onItemActivate(value);
        } else {
          valueContext.onItemDeactivate(value);
        }
      }
    });
  });
  Root2 = ToggleGroup$1;
  Item2 = ToggleGroupItem$1;
  const toggleVariants = cva("inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2", {
    variants: {
      variant: {
        default: "bg-transparent",
        outline: "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground"
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  });
  const Toggle = reactExports.forwardRef(({ className, variant, size, ...props }, ref) => jsxRuntimeExports.jsx(Root, {
    ref,
    className: cn(toggleVariants({
      variant,
      size,
      className
    })),
    ...props
  }));
  Toggle.displayName = Root.displayName;
  const ToggleGroupContext = reactExports.createContext({
    size: "default",
    variant: "default"
  });
  const ToggleGroup = reactExports.forwardRef(({ className, variant, size, children, ...props }, ref) => jsxRuntimeExports.jsx(Root2, {
    ref,
    className: cn("flex items-center justify-center gap-1", className),
    ...props,
    children: jsxRuntimeExports.jsx(ToggleGroupContext.Provider, {
      value: {
        variant,
        size
      },
      children
    })
  }));
  ToggleGroup.displayName = Root2.displayName;
  const ToggleGroupItem = reactExports.forwardRef(({ className, children, variant, size, ...props }, ref) => {
    const context = reactExports.useContext(ToggleGroupContext);
    return jsxRuntimeExports.jsx(Item2, {
      ref,
      className: cn(toggleVariants({
        variant: context.variant || variant,
        size: context.size || size
      }), className),
      ...props,
      children
    });
  });
  ToggleGroupItem.displayName = Item2.displayName;
  function ViewportLogger() {
    const viewport = useStore((s2) => `x: ${s2.transform[0].toFixed(2)}, y: ${s2.transform[1].toFixed(2)}, zoom: ${s2.transform[2].toFixed(2)}`);
    return jsxRuntimeExports.jsx("div", {
      children: viewport
    });
  }
  function ChangeInfo({ change }) {
    var _a, _b, _c, _d;
    const id = "id" in change ? change.id : "-";
    const { type } = change;
    return jsxRuntimeExports.jsxs("div", {
      className: "mb-3",
      children: [
        jsxRuntimeExports.jsxs("div", {
          children: [
            "node id: ",
            id
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            type === "add" ? JSON.stringify(change.item, null, 2) : null,
            type === "dimensions" ? `dimensions: ${(_a = change.dimensions) == null ? void 0 : _a.width} \xD7 ${(_b = change.dimensions) == null ? void 0 : _b.height}` : null,
            type === "position" ? `position: ${(_c = change.position) == null ? void 0 : _c.x.toFixed(1)}, ${(_d = change.position) == null ? void 0 : _d.y.toFixed(1)}` : null,
            type === "remove" ? "remove" : null,
            type === "select" ? change.selected ? "select" : "unselect" : null
          ]
        })
      ]
    });
  }
  function ChangeLogger({ limit = 20 }) {
    const [changes, setChanges] = reactExports.useState([]);
    const store = useStoreApi();
    const handleNodeChanges = reactExports.useCallback((newChanges) => {
      setChanges((prevChanges) => [
        ...newChanges,
        ...prevChanges
      ].slice(0, limit));
    }, [
      limit
    ]);
    reactExports.useEffect(() => {
      store.setState({
        onNodesChange: handleNodeChanges
      });
      return () => store.setState({
        onNodesChange: void 0
      });
    }, [
      handleNodeChanges,
      store
    ]);
    const NoChanges = () => jsxRuntimeExports.jsx("div", {
      children: "No Changes Triggered"
    });
    return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
      children: changes.length === 0 ? jsxRuntimeExports.jsx(NoChanges, {}) : changes.map((change, index2) => jsxRuntimeExports.jsx(ChangeInfo, {
        change
      }, index2))
    });
  }
  function NodeInspector() {
    const { getInternalNode } = useReactFlow();
    const nodes = useNodes();
    return jsxRuntimeExports.jsx(ViewportPortal, {
      children: jsxRuntimeExports.jsx("div", {
        className: "text-secondary-foreground",
        children: nodes.map((node) => {
          var _a, _b;
          const internalNode = getInternalNode(node.id);
          if (!internalNode) {
            return null;
          }
          const absPosition = internalNode == null ? void 0 : internalNode.internals.positionAbsolute;
          return jsxRuntimeExports.jsx(NodeInfo, {
            id: node.id,
            selected: !!node.selected,
            type: node.type || "default",
            position: node.position,
            absPosition,
            width: ((_a = node.measured) == null ? void 0 : _a.width) ?? 0,
            height: ((_b = node.measured) == null ? void 0 : _b.height) ?? 0,
            data: node.data
          }, node.id);
        })
      })
    });
  }
  function NodeInfo({ id, type, selected, position, absPosition, width, height, data }) {
    if (!width || !height) return null;
    const absoluteTransform = `translate(${absPosition.x}px, ${absPosition.y + height}px)`;
    const formattedPosition = `${position.x.toFixed(1)}, ${position.y.toFixed(1)}`;
    const formattedDimensions = `${width} \xD7 ${height}`;
    const selectionStatus = selected ? "Selected" : "Not Selected";
    return jsxRuntimeExports.jsxs("div", {
      style: {
        position: "absolute",
        transform: absoluteTransform,
        width: width * 2
      },
      className: "text-xs",
      children: [
        jsxRuntimeExports.jsxs("div", {
          children: [
            "id: ",
            id
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            "type: ",
            type
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            "selected: ",
            selectionStatus
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            "position: ",
            formattedPosition
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            "dimensions: ",
            formattedDimensions
          ]
        }),
        jsxRuntimeExports.jsxs("div", {
          children: [
            "data: ",
            JSON.stringify(data, null, 2)
          ]
        })
      ]
    });
  }
  function DevToolsToggle({ tools }) {
    return jsxRuntimeExports.jsx(Panel, {
      position: "top-left",
      className: "bg-card p-1 border rounded shadow-sm",
      children: jsxRuntimeExports.jsx(ToggleGroup, {
        type: "multiple",
        children: tools.map(({ active, setActive, label, value }) => jsxRuntimeExports.jsx(ToggleGroupItem, {
          value,
          onClick: () => setActive((prev) => !prev),
          "aria-pressed": active,
          className: "bg-card text-card-foreground transition-colors duration-300 hover:bg-secondary hover:text-secondary-foreground",
          children: label
        }, value))
      })
    });
  }
  function DevTools() {
    const [nodeInspectorActive, setNodeInspectorActive] = reactExports.useState(false);
    const [changeLoggerActive, setChangeLoggerActive] = reactExports.useState(false);
    const [viewportLoggerActive, setViewportLoggerActive] = reactExports.useState(false);
    const tools = [
      {
        active: nodeInspectorActive,
        setActive: setNodeInspectorActive,
        label: "Node Inspector",
        value: "node-inspector"
      },
      {
        active: changeLoggerActive,
        setActive: setChangeLoggerActive,
        label: "Change Logger",
        value: "change-logger"
      },
      {
        active: viewportLoggerActive,
        setActive: setViewportLoggerActive,
        label: "Viewport Logger",
        value: "viewport-logger"
      }
    ];
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsx(DevToolsToggle, {
          tools
        }),
        changeLoggerActive && jsxRuntimeExports.jsx(Panel, {
          className: "text-xs p-5 bg-white rounded shadow-md overflow-y-auto max-h-[50%] mt-20",
          position: "bottom-right",
          children: jsxRuntimeExports.jsx(ChangeLogger, {})
        }),
        nodeInspectorActive && jsxRuntimeExports.jsx(NodeInspector, {}),
        viewportLoggerActive && jsxRuntimeExports.jsx(Panel, {
          position: "bottom-left",
          className: "text-secondary-foreground",
          children: jsxRuntimeExports.jsx(ViewportLogger, {})
        })
      ]
    });
  }
  DevTools.displayName = "DevTools";
  const useFlowManager = () => {
    const updatePositionRef = reactExports.useRef({});
    const updateDimensionsRef = reactExports.useRef({});
    const flowEdges = useFlowState((state) => state.flowEdges);
    const currentSession = useSessionState((state) => state.currentSession);
    const setNodes = useFlowState((state) => state.setNodes);
    const updateNodes = useFlowState((state) => state.updateNodes);
    const updateEdges = useFlowState((state) => state.updateEdges);
    const addConnectionToEdges = useFlowState((state) => state.addConnectionToEdges);
    const resetFlows = useFlowState((state) => state.reset);
    const findFlowEdges = useFlowState((state) => state.findFlowEdges);
    const deleteFlowNode = useFlowState((state) => state.deleteFlowNode);
    const deleteFlowEdge = useFlowState((state) => state.deleteFlowEdge);
    const updateFlowNode = useFlowState((state) => state.updateFlowNode);
    const getNodes = useFlowState((state) => state.getNodes);
    const findFlowNodesWithSource = useFlowState((state) => state.findFlowNodesWithSource);
    const flowEdgesRef = reactExports.useRef(flowEdges);
    const currentSessionIdRef = reactExports.useRef();
    const [loadingState, setLoadingState] = reactExports.useState({
      loading: false
    });
    flowEdgesRef.current = flowEdges;
    const initialFlow = reactExports.useCallback(async (currentSessionId, func) => {
      try {
        currentSessionIdRef.current = currentSessionId;
        resetFlows();
        await (func == null ? void 0 : func());
      } catch {
        currentSessionIdRef.current = void 0;
      }
    }, [
      resetFlows
    ]);
    const prepareFlowInfo = reactExports.useCallback(async (query) => {
      try {
        if (!(currentSession == null ? void 0 : currentSession.id)) {
          return;
        }
        setLoadingState((loading) => ({
          ...loading,
          loading: true
        }));
        const flowNodes = await findFlowNodesWithSource({
          ...query,
          where: {
            ...query.where,
            session_id: currentSession.id
          }
        });
        const flowEdges2 = await findFlowEdges({
          where: [
            {
              source: In(flowNodes.map((node) => node.id))
            },
            {
              target: In(flowNodes.map((node) => node.id))
            }
          ]
        });
        return {
          flowNodes,
          flowEdges: flowEdges2
        };
      } finally {
        setLoadingState((loading) => ({
          ...loading,
          loading: false
        }));
      }
    }, [
      findFlowNodesWithSource,
      findFlowEdges,
      currentSession == null ? void 0 : currentSession.id
    ]);
    const updateNodeChanges = reactExports.useCallback(async (changes) => {
      var _a, _b;
      for (const change of changes) {
        if ("id" in change && Object.values(SYSTEM_NODE_IDS).includes(change.id) && change.type !== "remove") {
          updateNodes([
            change
          ]);
        } else if (change.type === "position" && change.position && !isNaN(change.position.x) && !isNaN(change.position.y)) {
          updateNodes([
            change
          ]);
          const x2 = change.position.x;
          const y2 = change.position.y;
          clearTimeout(updatePositionRef.current[change.id]);
          updatePositionRef.current[change.id] = setTimeout(async () => {
            updatePositionRef.current[change.id] = void 0;
            await updateFlowNode({
              id: change.id,
              x: x2,
              y: y2
            }, {
              silent: true
            });
          }, 200);
        } else if (change.type === "remove") {
          const node = (_a = getNodes([
            change.id
          ])) == null ? void 0 : _a[0];
          if (!(node == null ? void 0 : node.type) || DISABLED_DELETE_NODE_TYPES.includes(node.type)) {
            return;
          }
          await deleteFlowNode({
            id: change.id
          });
        } else if (change.type === "dimensions" && change.dimensions && !isNaN(change.dimensions.width) && !isNaN(change.dimensions.height)) {
          const node = (_b = getNodes([
            change.id
          ])) == null ? void 0 : _b[0];
          if (!(node == null ? void 0 : node.width) && !(node == null ? void 0 : node.height)) {
            return;
          }
          updateNodes([
            change
          ]);
          clearTimeout(updateDimensionsRef.current[change.id]);
          const width = change.dimensions.width;
          const height = change.dimensions.height;
          updateDimensionsRef.current[change.id] = setTimeout(async () => {
            await updateFlowNode({
              id: change.id,
              width,
              height
            }, {
              silent: true
            });
          }, 200);
        } else if (change.type === "select") {
          updateNodes([
            change
          ]);
        }
      }
    }, [
      updateNodes,
      updateFlowNode,
      getNodes,
      deleteFlowNode
    ]);
    const updateEdgeChanges = reactExports.useCallback((changes) => {
      Promise.all(changes.map(async (change) => {
        if (change.type === "remove") {
          return deleteFlowEdge({
            id: change.id
          });
        }
      }));
      updateEdges(changes);
    }, [
      deleteFlowEdge,
      updateEdges
    ]);
    const updateEdgeConnection = reactExports.useCallback((connection) => {
      addConnectionToEdges(connection);
    }, [
      addConnectionToEdges
    ]);
    const syncEdges = reactExports.useCallback(() => {
      var _a;
      if (!((_a = flowEdgesRef.current) == null ? void 0 : _a.length)) {
        return;
      }
    }, []);
    const updateOrCreateNode = reactExports.useCallback((input) => {
      setNodes((nodes) => {
        var _a, _b;
        let updatingNode;
        if (typeof input === "function") {
          updatingNode = input(nodes);
        } else {
          updatingNode = input;
        }
        if (!updatingNode) {
          return nodes;
        }
        const node = nodes == null ? void 0 : nodes.find((n2) => n2.id === updatingNode.id);
        const change = {
          id: updatingNode.id,
          item: node ? deepmerge(node, updatingNode) : {
            ...updatingNode,
            position: {
              x: ((_a = updatingNode.position) == null ? void 0 : _a.x) || 0,
              y: ((_b = updatingNode.position) == null ? void 0 : _b.y) || 0
            }
          },
          type: node ? "replace" : "add"
        };
        return applyNodeChanges([
          change
        ], nodes);
      });
    }, [
      setNodes
    ]);
    return {
      syncEdges,
      initialFlow,
      loadingState,
      prepareFlowInfo,
      updateNodeChanges,
      updateEdgeChanges,
      updateOrCreateNode,
      currentSessionIdRef,
      updateEdgeConnection
    };
  };
  const useAutomaticallyRenderFlows = (flowManager) => {
    const currentSessionId = useSessionState((state) => {
      var _a;
      return (_a = state.currentSession) == null ? void 0 : _a.id;
    });
    const { loadingState, prepareFlowInfo, syncEdges, initialFlow, currentSessionIdRef } = flowManager;
    const flowStateReady = useFlowState((state) => state.ready);
    const removeSyncNodeQueue = useFlowState((state) => state.removeSyncNodeQueue);
    const removeSyncEdgeQueue = useFlowState((state) => state.removeSyncEdgeQueue);
    reactExports.useLayoutEffect(() => {
    }, [
      currentSessionId
    ]);
    reactExports.useEffect(() => {
      if (loadingState.loading || !flowStateReady || !currentSessionId || currentSessionIdRef.current === currentSessionId) {
        return;
      }
      initialFlow(currentSessionId, async () => {
        await prepareFlowInfo({
          where: {
            session_id: currentSessionId
          }
        });
      });
    }, [
      initialFlow,
      prepareFlowInfo,
      loadingState.loading,
      currentSessionIdRef,
      flowStateReady,
      currentSessionId
    ]);
    reactExports.useEffect(() => {
      const unsubNodeHandler = useFlowState.subscribe((state) => state.syncNodeQueue, async (syncNodeQueue, previousSyncNodeQueue) => {
        var _a;
        const lastTimestamps = previousSyncNodeQueue.map((node) => node.timestamp);
        const handlingQueueItems = syncNodeQueue.filter((item) => !lastTimestamps.includes(item.timestamp));
        if (handlingQueueItems.length) {
          removeSyncNodeQueue(handlingQueueItems.map((item) => item.timestamp));
          for (const item of handlingQueueItems) {
            const response = await prepareFlowInfo(item.query);
            switch (item.syncType) {
              case "Thread":
                {
                  const threadIds = (_a = response == null ? void 0 : response.flowNodes) == null ? void 0 : _a.map((node) => {
                    if (node.source_id && node.source_type === "Thread") {
                      return node.source_id;
                    }
                  }).filter(Boolean);
                  if (threadIds == null ? void 0 : threadIds.length) {
                    const messages = await getRepository("Message").find({
                      where: {
                        thread_id: In(threadIds)
                      }
                    });
                    await prepareFlowInfo({
                      where: {
                        source_type: "Message",
                        source_id: In(messages.map((message) => message.id))
                      }
                    });
                  }
                }
                break;
            }
          }
        }
      });
      const unsubEdgeHandler = useFlowState.subscribe((state) => state.syncEdgeQueue, async (syncEdgeQueue, previousSyncEdgeQueue) => {
        const lastTimestamps = previousSyncEdgeQueue.map((node) => node.timestamp);
        const handlingQueueItems = syncEdgeQueue.filter((item) => !lastTimestamps.includes(item.timestamp));
        if (handlingQueueItems.length) {
          removeSyncEdgeQueue(handlingQueueItems.map((item) => item.timestamp));
          syncEdges();
        }
      });
      return () => {
        unsubNodeHandler();
        unsubEdgeHandler();
      };
    }, [
      prepareFlowInfo,
      removeSyncEdgeQueue,
      removeSyncNodeQueue,
      syncEdges
    ]);
  };
  const useHomePage = () => {
    const [initializing, setInitializing] = reactExports.useState(true);
    const flowManager = useFlowManager();
    const selectedModel = useLocalLLMState((state) => state.selectedModel);
    const selectedModelRef = reactExports.useRef(selectedModel);
    const setInitProgressCallback = useLocalLLMState((state) => state.setInitProgressCallback);
    const { updateOrCreateNode, updateNodeChanges, updateEdgeChanges, updateEdgeConnection } = flowManager;
    useAutomaticallyRenderFlows(flowManager);
    selectedModelRef.current = selectedModel;
    reactExports.useEffect(() => {
      const callbackRemoval = setInitProgressCallback == null ? void 0 : setInitProgressCallback((input) => {
        if (!selectedModelRef.current) {
          return;
        }
        const modelName = `${selectedModelRef.current}`;
        updateOrCreateNode((nodeRefs) => {
          const flowNode = nodeRefs == null ? void 0 : nodeRefs.find((node) => {
            var _a;
            if (((_a = node.data) == null ? void 0 : _a.entity) && typeof node.data.entity === "object" && "name" in node.data.entity) {
              return node.data.entity.name === modelName;
            }
            return false;
          });
          if (!flowNode) return;
          flowNode.data.label = input.text;
          flowNode.data.status = LLMStatusEnum.Loading;
          if (input.progress === 100) {
            flowNode.data.label = ``;
            flowNode.data.status = LLMStatusEnum.Loaded;
          }
          return flowNode;
        });
      });
      return () => {
        callbackRemoval == null ? void 0 : callbackRemoval();
      };
    }, [
      setInitProgressCallback,
      updateOrCreateNode
    ]);
    const contextValue = reactExports.useMemo(() => ({
      updateNodeChanges,
      updateEdgeChanges,
      initializing,
      setInitializing,
      updateEdgeConnection
    }), [
      updateNodeChanges,
      updateEdgeChanges,
      initializing,
      setInitializing,
      updateEdgeConnection
    ]);
    return contextValue;
  };
  const HomeInner = () => {
    const theme = useAppState((state) => state.theme);
    const nodes = useFlowState((state) => state.nodes);
    const edges = useFlowState((state) => state.edges);
    const { updateNodeChanges, updateEdgeChanges, updateEdgeConnection } = useHomePage();
    const onNodesChange = reactExports.useCallback((changes) => {
      updateNodeChanges(changes);
    }, [
      updateNodeChanges
    ]);
    const onEdgesChange = reactExports.useCallback((changes) => {
      updateEdgeChanges(changes);
    }, [
      updateEdgeChanges
    ]);
    const onConnect = reactExports.useCallback((connection) => {
      updateEdgeConnection(connection);
    }, [
      updateEdgeConnection
    ]);
    return jsxRuntimeExports.jsxs(index, {
      nodes,
      edges,
      nodeTypes,
      onNodesChange,
      onEdgesChange,
      onConnect,
      panOnScroll: true,
      panOnScrollMode: PanOnScrollMode.Free,
      colorMode: theme,
      fitView: true,
      children: [
        jsxRuntimeExports.jsx(Background$1, {
          variant: BackgroundVariant.Dots,
          gap: 24,
          size: 1
        }),
        jsxRuntimeExports.jsx(Controls, {}),
        jsxRuntimeExports.jsx(MiniMap, {}),
        isDev ? jsxRuntimeExports.jsx(DevTools, {}) : void 0
      ]
    });
  };
  const HomeInner$1 = reactExports.memo(HomeInner);
  function HomePage() {
    return jsxRuntimeExports.jsx(HomeInner$1, {});
  }
  HomePage$1 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: HomePage
  }, Symbol.toStringTag, {
    value: "Module"
  }));
});
export {
  Anchor2 as A,
  convertToElementsTree as B,
  Content2$2 as C,
  parseJSONLToFileSystemTree as D,
  updateFileContentOfFileSystemTree as E,
  CreateSourcebaseCard as F,
  BaseStringPromptTemplate as G,
  checkValidTemplate as H,
  Item2 as I,
  renderTemplate as J,
  PromptTemplate as K,
  LoadingButton as L,
  HomePage$1 as M,
  Portal$1 as P,
  Root2 as R,
  Trigger$2 as T,
  _baseSlice as _,
  __tla,
  _baseFlatten as a,
  _overRest as b,
  _setToString as c,
  _baseFor as d,
  _baseRest as e,
  _isIterateeCall as f,
  last$1 as g,
  debounce$2 as h,
  isPlainObject_1 as i,
  _apply as j,
  createToggleGroupScope as k,
  last_1 as l,
  map$3 as m,
  Root2$4 as n,
  Root$1 as o,
  Indicator as p,
  PopoverAnchor as q,
  useBaseConnectionToHandler as r,
  parseFileSystemTreeToJSONL as s,
  throttle$1 as t,
  useFlowState as u,
  clamp as v,
  Root2$2 as w,
  Item as x,
  Trigger2 as y,
  Content2 as z
};
