{"version":3,"mappings":"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","names":["loading","setLoading","useState","mainLLMInfo","setLLMInfo","currentSession","useSessionState","state","t","useTranslation","useToast","useLoadModel","useLLM","useModalRef","SessionPassphraseDialog","createMessage","input","messages","onMessageUpdate","toast","data","pre","LLMStatusEnum","message","content","stream","HumanMessage","error","useCallback","getRepository","In","connections","connection","FlowNodeTypeEnum","llmNode","llm","loadModel","sessionPassphraseDialogRef","useEffect","loadCurrentModel","useFileSystemTree","fileSystemTree","setFileSystemTree","updateCodeContainerData","id","parseFileSystemTreeToJSONL","prev","result","updateFileSystemTree","changes","init","mainNode","VSLiteApp","lazy","VSLiteApplication","memo","useCreateMessage","updateCodeContainerFile","onMessage","jsxs","TooltipProvider","jsx","LLMIcon","LazyIcon","TooltipContent","Suspense","DefaultLoader","handleSendMessage"],"ignoreList":[],"sources":["../../src/components/pages/VSLiteApplication/hooks/use-create-message.ts","../../src/components/pages/VSLiteApplication/hooks/use-file-system-tree.ts","../../src/components/pages/VSLiteApplication/VSLiteApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { Message } from 'ai/react'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [loading, setLoading] = useState(false)\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loadModel } = useLoadModel()\n  const { stream } = useLLM()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string, messages: Message[], onMessageUpdate?: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n          return\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, (data) => {\n            setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const history = messages.map((message) => {\n            if (message.role === 'system') {\n              return new SystemMessage(message.content)\n            }\n            if (message.role === 'assistant') {\n              return new AIMessage(message.content)\n            }\n            return new HumanMessage(message.content)\n          })\n          const { content } = await stream(\n            mainLLMInfo.llm.provider,\n            [...history, new HumanMessage(input)],\n            {\n              onMessageUpdate: ({ content }) => {\n                onMessageUpdate?.(content)\n              },\n              llm: mainLLMInfo.llm,\n            },\n          )\n          onMessageUpdate?.(content)\n          return content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n            return\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [\n      currentSession?.main_node_id,\n      mainLLMInfo?.llm,\n      mainLLMInfo?.status,\n      toast,\n      t,\n      loadModel,\n      stream,\n    ],\n  )\n\n  const init = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!currentSession?.main_node_id) {\n        return\n      }\n\n      const connections = await getRepository('FlowEdge').find({\n        where: {\n          target: currentSession.main_node_id,\n        },\n      })\n      const connectedNodes = await getRepository('FlowNode').find({\n        where: {\n          id: In(connections.map((connection) => connection.source)),\n        },\n      })\n      const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n      if (!llmNode) {\n        return\n      }\n      const llm = await getRepository('LLM').findOne({\n        where: {\n          id: llmNode.source_id,\n        },\n      })\n      if (!llm) {\n        return\n      }\n      if (currentSession.passphrase) {\n        await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n      }\n      await loadModel(llm.provider, llm.name, (data) => {\n        setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n      })\n      setLLMInfo({\n        llm,\n        status: LLMStatusEnum.Loaded,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  const loadCurrentModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!mainLLMInfo?.llm) {\n        return\n      }\n      await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, (data) => {\n        setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } finally {\n      setLoading(false)\n    }\n  }, [loadModel, mainLLMInfo?.llm])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    loading,\n    mainLLMInfo,\n    createMessage,\n    loadCurrentModel,\n  }\n}\n","import type { FileSystemTree } from '@webcontainer/api'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FileSystemTreeChange,\n  parseFileSystemTreeToJSONL,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFileSystemTree = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [fileSystemTree, setFileSystemTree] = useState<FileSystemTree>()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const updateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      if (!currentSession?.main_node_id) {\n        return\n      }\n      setFileSystemTree((prev) => {\n        if (!currentSession?.main_node_id) return prev\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(currentSession?.main_node_id, result)\n        return result\n      })\n    },\n    [currentSession?.main_node_id, updateCodeContainerData],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const mainNode = await getRepository('FlowNode').findOne({\n      where: {\n        id: currentSession?.main_node_id,\n      },\n    })\n    if (!mainNode) {\n      return\n    }\n    setFileSystemTree(mainNode.raw ? parseJSONLToFileSystemTree(mainNode.raw) : {})\n  }, [currentSession?.main_node_id])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    fileSystemTree,\n    updateCodeContainerFile,\n    updateCodeContainerData,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\nimport { Message } from 'ai/react'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useFileSystemTree } from './hooks/use-file-system-tree'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nconst VSLiteApplication = memo(() => {\n  const { loading, mainLLMInfo, loadCurrentModel, createMessage } = useCreateMessage()\n  const { fileSystemTree, updateCodeContainerFile } = useFileSystemTree()\n\n  const handleSendMessage = useCallback(\n    (message: string, messages: Message[], onMessage?: (chunk: string) => void) => {\n      return createMessage(message, messages, onMessage)\n    },\n    [createMessage],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name || ''\n              ) : loading ? (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              ) : undefined}\n              {mainLLMInfo?.llm && mainLLMInfo?.status !== LLMStatusEnum.Loaded ? (\n                <LazyIcon\n                  size={16}\n                  name=\"loader-circle\"\n                  onClick={loadCurrentModel}\n                  className=\"animate-spin ml-2\"\n                />\n              ) : undefined}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {fileSystemTree !== undefined ? (\n          <VSLiteApp\n            autoLoad\n            hideAppName\n            llm={mainLLMInfo?.llm}\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={updateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        ) : undefined}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default VSLiteApplication\n"],"file":"assets/VSLiteApplication-BZ_LF9KD.js"}