{"version":3,"mappings":"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","names":["useState","mainLLMInfo","currentSession","useSessionState","state","useTranslation","useToast","loadModel","useLoadModel","useLLM","sessionPassphraseDialogRef","useModalRef","SessionPassphraseDialog","createMessage","input","messages","onMessageUpdate","toast","t","LLMStatusEnum","data","setLLMInfo","pre","SystemMessage","message","stream","history","content","error","init","useCallback","connections","getRepository","llmNode","connection","llm","passphraseConfirm","setLoading","useEffect","loading","fileSystemTree","updateCodeContainerData","id","parseFileSystemTreeToJSONL","changes","setFileSystemTree","prev","result","mainNode","VSLiteApp","lazy","VSLiteApplication","memo","loadCurrentModel","useCreateMessage","updateCodeContainerFile","useFileSystemTree","handleSendMessage","onMessage","jsxs","TooltipProvider","Tooltip","cn","jsx","LLMIcon","TooltipTrigger","LazyIcon","TooltipContent","Suspense"],"ignoreList":[],"sources":["../../src/components/pages/VSLiteApplication/hooks/use-create-message.ts","../../src/components/pages/VSLiteApplication/hooks/use-file-system-tree.ts","../../src/components/pages/VSLiteApplication/VSLiteApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { Message } from 'ai/react'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [loading, setLoading] = useState(false)\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loadModel } = useLoadModel()\n  const { stream } = useLLM()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string, messages: Message[], onMessageUpdate?: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n          return\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, (data) => {\n            setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const history = messages.map((message) => {\n            if (message.role === 'system') {\n              return new SystemMessage(message.content)\n            }\n            if (message.role === 'assistant') {\n              return new AIMessage(message.content)\n            }\n            return new HumanMessage(message.content)\n          })\n          const { content } = await stream(\n            mainLLMInfo.llm.provider,\n            [...history, new HumanMessage(input)],\n            {\n              onMessageUpdate: ({ content }) => {\n                onMessageUpdate?.(content)\n              },\n              llm: mainLLMInfo.llm,\n            },\n          )\n          onMessageUpdate?.(content)\n          return content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n            return\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [\n      currentSession?.main_node_id,\n      mainLLMInfo?.llm,\n      mainLLMInfo?.status,\n      toast,\n      t,\n      loadModel,\n      stream,\n    ],\n  )\n\n  const init = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!currentSession?.main_node_id) {\n        return\n      }\n\n      const connections = await getRepository('FlowEdge').find({\n        where: {\n          target: currentSession.main_node_id,\n        },\n      })\n      const connectedNodes = await getRepository('FlowNode').find({\n        where: {\n          id: In(connections.map((connection) => connection.source)),\n        },\n      })\n      const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n      if (!llmNode) {\n        return\n      }\n      const llm = await getRepository('LLM').findOne({\n        where: {\n          id: llmNode.source_id,\n        },\n      })\n      if (!llm) {\n        return\n      }\n      if (currentSession.passphrase) {\n        await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n      }\n      await loadModel(llm.provider, llm.name, (data) => {\n        setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n      })\n      setLLMInfo({\n        llm,\n        status: LLMStatusEnum.Loaded,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  const loadCurrentModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!mainLLMInfo?.llm) {\n        return\n      }\n      await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, (data) => {\n        setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } finally {\n      setLoading(false)\n    }\n  }, [loadModel, mainLLMInfo?.llm])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    loading,\n    mainLLMInfo,\n    createMessage,\n    loadCurrentModel,\n  }\n}\n","import type { FileSystemTree } from '@webcontainer/api'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FileSystemTreeChange,\n  parseFileSystemTreeToJSONL,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFileSystemTree = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [fileSystemTree, setFileSystemTree] = useState<FileSystemTree>()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const updateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      if (!currentSession?.main_node_id) {\n        return\n      }\n      setFileSystemTree((prev) => {\n        if (!currentSession?.main_node_id) return prev\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(currentSession?.main_node_id, result)\n        return result\n      })\n    },\n    [currentSession?.main_node_id, updateCodeContainerData],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const mainNode = await getRepository('FlowNode').findOne({\n      where: {\n        id: currentSession?.main_node_id,\n      },\n    })\n    if (!mainNode) {\n      return\n    }\n    setFileSystemTree(mainNode.raw ? parseJSONLToFileSystemTree(mainNode.raw) : {})\n  }, [currentSession?.main_node_id])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    fileSystemTree,\n    updateCodeContainerFile,\n    updateCodeContainerData,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\nimport { Message } from 'ai/react'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useFileSystemTree } from './hooks/use-file-system-tree'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nconst VSLiteApplication = memo(() => {\n  const { loading, mainLLMInfo, loadCurrentModel, createMessage } = useCreateMessage()\n  const { fileSystemTree, updateCodeContainerFile } = useFileSystemTree()\n\n  const handleSendMessage = useCallback(\n    (message: string, messages: Message[], onMessage?: (chunk: string) => void) => {\n      return createMessage(message, messages, onMessage)\n    },\n    [createMessage],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name || ''\n              ) : loading ? (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              ) : undefined}\n              {mainLLMInfo?.llm && mainLLMInfo?.status !== LLMStatusEnum.Loaded ? (\n                <LazyIcon\n                  size={16}\n                  name=\"loader-circle\"\n                  onClick={loadCurrentModel}\n                  className=\"animate-spin ml-2\"\n                />\n              ) : undefined}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {fileSystemTree !== undefined ? (\n          <VSLiteApp\n            autoLoad\n            hideAppName\n            llm={mainLLMInfo?.llm}\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={updateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        ) : undefined}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default VSLiteApplication\n"],"file":"assets/VSLiteApplication-C_8EQjKT.js"}