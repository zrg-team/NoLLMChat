{"version":3,"mappings":"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","names":["useCreateMessage","useState","setLLMInfo","state","t","useToast","loadModel","useLoadModel","useConfirmPassphrase","sessionPassphraseDialogRef","useModalRef","useCallback","messages","currentSession","mainLLMInfo","toast","data","pre","LLMStatusEnum","history","message","AIMessage","confirmPassphrase","HumanMessage","input","content","onMessageUpdate","response","error","setLoading","llmNode","getRepository","In","connections","connection","node","llm","passphraseConfirm","loadCurrentModel","useEffect","init","loading","createMessage","useSessionState","fileSystemTree","setFileSystemTree","id","parseFileSystemTreeToJSONL","updateCodeContainerFile","changes","prev","updateCodeContainerData","result","parseJSONLToFileSystemTree","mainNode","VSLiteApp","lazy","VSLiteApplication","memo","useFileSystemTree","handleSendMessage","onMessage","jsxs","jsx","TooltipProvider","cn","TooltipTrigger","LazyIcon","Suspense","DefaultLoader"],"ignoreList":[],"sources":["../../src/components/pages/VSLiteApplication/hooks/use-create-message.ts","../../src/components/pages/VSLiteApplication/hooks/use-file-system-tree.ts","../../src/components/pages/VSLiteApplication/VSLiteApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { Message } from 'ai/react'\nimport { llmHandler } from 'src/handlers'\nimport { useConfirmPassphrase } from 'src/hooks/mutations/use-confirm-passphrase'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [loading, setLoading] = useState(false)\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loadModel } = useLoadModel()\n  const { confirmPassphrase } = useConfirmPassphrase()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string, messages: Message[], onMessageUpdate?: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n          return\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n            provider: mainLLMInfo.llm.provider,\n            callback: (data) => {\n              setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n            },\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const history = messages.map((message) => {\n            if (message.role === 'system') {\n              return new SystemMessage(message.content)\n            }\n            if (message.role === 'assistant') {\n              return new AIMessage(message.content)\n            }\n            return new HumanMessage(message.content)\n          })\n          await confirmPassphrase()\n          const response = await llmHandler.stream(\n            mainLLMInfo.llm.provider,\n            [...history, new HumanMessage(input)],\n            {\n              onMessageUpdate: ({ content }) => {\n                onMessageUpdate?.(content)\n              },\n              llm: mainLLMInfo.llm,\n            },\n          )\n          onMessageUpdate?.(response?.content || '')\n          return response?.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n            return\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [currentSession?.main_node_id, mainLLMInfo?.llm, mainLLMInfo?.status, toast, t, loadModel],\n  )\n\n  const init = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!currentSession?.main_node_id) {\n        return\n      }\n\n      const connections = await getRepository('FlowEdge').find({\n        where: {\n          target: currentSession.main_node_id,\n        },\n      })\n      const connectedNodes = await getRepository('FlowNode').find({\n        where: {\n          id: In(connections.map((connection) => connection.source)),\n        },\n      })\n      const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n      if (!llmNode) {\n        return\n      }\n      const llm = await getRepository('LLM').findOne({\n        where: {\n          id: llmNode.source_id,\n        },\n      })\n      if (!llm) {\n        return\n      }\n      if (currentSession.passphrase) {\n        await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n      }\n      await loadModel(llm.provider, llm.name, {\n        provider: llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo({\n        llm,\n        status: LLMStatusEnum.Loaded,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  const loadCurrentModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!mainLLMInfo?.llm) {\n        return\n      }\n      await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n        provider: mainLLMInfo.llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } finally {\n      setLoading(false)\n    }\n  }, [loadModel, mainLLMInfo?.llm])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    loading,\n    mainLLMInfo,\n    createMessage,\n    loadCurrentModel,\n  }\n}\n","import type { FileSystemTree } from '@webcontainer/api'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FileSystemTreeChange,\n  parseFileSystemTreeToJSONL,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFileSystemTree = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [fileSystemTree, setFileSystemTree] = useState<FileSystemTree>()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const updateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      if (!currentSession?.main_node_id) {\n        return\n      }\n      setFileSystemTree((prev) => {\n        if (!currentSession?.main_node_id) return prev\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(currentSession?.main_node_id, result)\n        return result\n      })\n    },\n    [currentSession?.main_node_id, updateCodeContainerData],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const mainNode = await getRepository('FlowNode').findOne({\n      where: {\n        id: currentSession?.main_node_id,\n      },\n    })\n    if (!mainNode) {\n      return\n    }\n    setFileSystemTree(mainNode.raw ? parseJSONLToFileSystemTree(mainNode.raw) : {})\n  }, [currentSession?.main_node_id])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    fileSystemTree,\n    updateCodeContainerFile,\n    updateCodeContainerData,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\nimport { Message } from 'ai/react'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useFileSystemTree } from './hooks/use-file-system-tree'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nconst VSLiteApplication = memo(() => {\n  const { loading, mainLLMInfo, loadCurrentModel, createMessage } = useCreateMessage()\n  const { fileSystemTree, updateCodeContainerFile } = useFileSystemTree()\n\n  const handleSendMessage = useCallback(\n    (message: string, messages: Message[], onMessage?: (chunk: string) => void) => {\n      return createMessage(message, messages, onMessage)\n    },\n    [createMessage],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name || ''\n              ) : loading ? (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              ) : undefined}\n              {mainLLMInfo?.llm && mainLLMInfo?.status !== LLMStatusEnum.Loaded ? (\n                <LazyIcon\n                  size={16}\n                  name=\"loader-circle\"\n                  onClick={loadCurrentModel}\n                  className=\"animate-spin ml-2\"\n                />\n              ) : undefined}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {fileSystemTree !== undefined ? (\n          <VSLiteApp\n            autoLoad\n            hideAppName\n            llm={mainLLMInfo?.llm}\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={updateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        ) : undefined}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default VSLiteApplication\n"],"file":"assets/VSLiteApplication-CihNflvx.js"}