{"version":3,"mappings":"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","names":["setLoading","useState","mainLLMInfo","currentSession","useSessionState","state","t","toast","useToast","loadModel","useConfirmPassphrase","sessionPassphraseDialogRef","useModalRef","SessionPassphraseDialog","useCallback","input","messages","onMessageUpdate","LLMStatusEnum","pre","setLLMInfo","history","message","HumanMessage","content","response","error","getRepository","In","connections","connection","node","FlowNodeTypeEnum","llmNode","passphraseConfirm","llm","data","loadCurrentModel","useEffect","init","loading","createMessage","useFileSystemTree","id","parseFileSystemTreeToJSONL","changes","prev","result","updateFileSystemTree","updateCodeContainerData","mainNode","setFileSystemTree","fileSystemTree","VSLiteApp","lazy","VSLiteApplication","memo","handleSendMessage","onMessage","Tooltip","jsxs","TooltipTrigger","LazyIcon","jsx","Suspense","updateCodeContainerFile"],"ignoreList":[],"sources":["../../src/components/pages/VSLiteApplication/hooks/use-create-message.ts","../../src/components/pages/VSLiteApplication/hooks/use-file-system-tree.ts","../../src/components/pages/VSLiteApplication/VSLiteApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { Message } from 'ai/react'\nimport { llmHandler } from 'src/handlers'\nimport { useConfirmPassphrase } from 'src/hooks/mutations/use-confirm-passphrase'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [loading, setLoading] = useState(false)\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loadModel } = useLoadModel()\n  const { confirmPassphrase } = useConfirmPassphrase()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string, messages: Message[], onMessageUpdate?: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n          return\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n            provider: mainLLMInfo.llm.provider,\n            callback: (data) => {\n              setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n            },\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const history = messages.map((message) => {\n            if (message.role === 'system') {\n              return new SystemMessage(message.content)\n            }\n            if (message.role === 'assistant') {\n              return new AIMessage(message.content)\n            }\n            return new HumanMessage(message.content)\n          })\n          await confirmPassphrase()\n          const response = await llmHandler.stream(\n            mainLLMInfo.llm.provider,\n            [...history, new HumanMessage(input)],\n            {\n              onMessageUpdate: ({ content }) => {\n                onMessageUpdate?.(content)\n              },\n              llm: mainLLMInfo.llm,\n            },\n          )\n          onMessageUpdate?.(response?.content || '')\n          return response?.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n            return\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [currentSession?.main_node_id, mainLLMInfo?.llm, mainLLMInfo?.status, toast, t, loadModel],\n  )\n\n  const init = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!currentSession?.main_node_id) {\n        return\n      }\n\n      const connections = await getRepository('FlowEdge').find({\n        where: {\n          target: currentSession.main_node_id,\n        },\n      })\n      const connectedNodes = await getRepository('FlowNode').find({\n        where: {\n          id: In(connections.map((connection) => connection.source)),\n        },\n      })\n      const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n      if (!llmNode) {\n        return\n      }\n      const llm = await getRepository('LLM').findOne({\n        where: {\n          id: llmNode.source_id,\n        },\n      })\n      if (!llm) {\n        return\n      }\n      if (currentSession.passphrase) {\n        await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n      }\n      await loadModel(llm.provider, llm.name, {\n        provider: llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo({\n        llm,\n        status: LLMStatusEnum.Loaded,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  const loadCurrentModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!mainLLMInfo?.llm) {\n        return\n      }\n      await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n        provider: mainLLMInfo.llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } finally {\n      setLoading(false)\n    }\n  }, [loadModel, mainLLMInfo?.llm])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    loading,\n    mainLLMInfo,\n    createMessage,\n    loadCurrentModel,\n  }\n}\n","import type { FileSystemTree } from '@webcontainer/api'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getRepository } from 'src/services/database/database'\nimport {\n  FileSystemTreeChange,\n  parseFileSystemTreeToJSONL,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFileSystemTree = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [fileSystemTree, setFileSystemTree] = useState<FileSystemTree>()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const updateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      if (!currentSession?.main_node_id) {\n        return\n      }\n      setFileSystemTree((prev) => {\n        if (!currentSession?.main_node_id) return prev\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(currentSession?.main_node_id, result)\n        return result\n      })\n    },\n    [currentSession?.main_node_id, updateCodeContainerData],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const mainNode = await getRepository('FlowNode').findOne({\n      where: {\n        id: currentSession?.main_node_id,\n      },\n    })\n    if (!mainNode) {\n      return\n    }\n    setFileSystemTree(mainNode.raw ? parseJSONLToFileSystemTree(mainNode.raw) : {})\n  }, [currentSession?.main_node_id])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    fileSystemTree,\n    updateCodeContainerFile,\n    updateCodeContainerData,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\nimport { Message } from 'ai/react'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useFileSystemTree } from './hooks/use-file-system-tree'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nconst VSLiteApplication = memo(() => {\n  const { loading, mainLLMInfo, loadCurrentModel, createMessage } = useCreateMessage()\n  const { fileSystemTree, updateCodeContainerFile } = useFileSystemTree()\n\n  const handleSendMessage = useCallback(\n    (message: string, messages: Message[], onMessage?: (chunk: string) => void) => {\n      return createMessage(message, messages, onMessage)\n    },\n    [createMessage],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name || ''\n              ) : loading ? (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              ) : undefined}\n              {mainLLMInfo?.llm && mainLLMInfo?.status !== LLMStatusEnum.Loaded ? (\n                <LazyIcon\n                  size={16}\n                  name=\"loader-circle\"\n                  onClick={loadCurrentModel}\n                  className=\"animate-spin ml-2\"\n                />\n              ) : undefined}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {fileSystemTree !== undefined ? (\n          <VSLiteApp\n            autoLoad\n            hideAppName\n            llm={mainLLMInfo?.llm}\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={updateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        ) : undefined}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default VSLiteApplication\n"],"file":"assets/VSLiteApplication-D66_eGzC.js"}