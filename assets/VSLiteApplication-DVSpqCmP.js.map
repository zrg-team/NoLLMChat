{"version":3,"mappings":"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","names":["useCreateMessage","useState","mainLLMInfo","setLLMInfo","state","t","loadModel","useLoadModel","stream","sessionPassphraseDialogRef","useModalRef","SessionPassphraseDialog","createMessage","useCallback","input","messages","onMessageUpdate","currentSession","LLMStatusEnum","data","pre","history","message","AIMessage","content","response","error","toast","init","llmNode","In","connection","node","FlowNodeTypeEnum","llm","getRepository","passphraseConfirm","loadCurrentModel","setLoading","useEffect","loading","fileSystemTree","updateCodeContainerData","id","parseFileSystemTreeToJSONL","updateCodeContainerFile","changes","setFileSystemTree","prev","updateFileSystemTree","result","parseJSONLToFileSystemTree","mainNode","VSLiteApp","lazy","VSLiteApplication","memo","handleSendMessage","onMessage","jsxs","jsx","cn","LLMIcon","TooltipTrigger","LazyIcon","Suspense","DefaultLoader"],"ignoreList":[],"sources":["../../src/components/pages/VSLiteApplication/hooks/use-create-message.ts","../../src/components/pages/VSLiteApplication/hooks/use-file-system-tree.ts","../../src/components/pages/VSLiteApplication/VSLiteApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { Message } from 'ai/react'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [loading, setLoading] = useState(false)\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loadModel } = useLoadModel()\n  const { stream } = useLLM()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string, messages: Message[], onMessageUpdate?: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n          return\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n            provider: mainLLMInfo.llm.provider,\n            callback: (data) => {\n              setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n            },\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const history = messages.map((message) => {\n            if (message.role === 'system') {\n              return new SystemMessage(message.content)\n            }\n            if (message.role === 'assistant') {\n              return new AIMessage(message.content)\n            }\n            return new HumanMessage(message.content)\n          })\n          const response = await stream(\n            mainLLMInfo.llm.provider,\n            [...history, new HumanMessage(input)],\n            {\n              onMessageUpdate: ({ content }) => {\n                onMessageUpdate?.(content)\n              },\n              llm: mainLLMInfo.llm,\n            },\n          )\n          onMessageUpdate?.(response?.content || '')\n          return response?.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n            return\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [\n      currentSession?.main_node_id,\n      mainLLMInfo?.llm,\n      mainLLMInfo?.status,\n      toast,\n      t,\n      loadModel,\n      stream,\n    ],\n  )\n\n  const init = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!currentSession?.main_node_id) {\n        return\n      }\n\n      const connections = await getRepository('FlowEdge').find({\n        where: {\n          target: currentSession.main_node_id,\n        },\n      })\n      const connectedNodes = await getRepository('FlowNode').find({\n        where: {\n          id: In(connections.map((connection) => connection.source)),\n        },\n      })\n      const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n      if (!llmNode) {\n        return\n      }\n      const llm = await getRepository('LLM').findOne({\n        where: {\n          id: llmNode.source_id,\n        },\n      })\n      if (!llm) {\n        return\n      }\n      if (currentSession.passphrase) {\n        await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n      }\n      await loadModel(llm.provider, llm.name, {\n        provider: llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo({\n        llm,\n        status: LLMStatusEnum.Loaded,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  const loadCurrentModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!mainLLMInfo?.llm) {\n        return\n      }\n      await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n        provider: mainLLMInfo.llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } finally {\n      setLoading(false)\n    }\n  }, [loadModel, mainLLMInfo?.llm])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    loading,\n    mainLLMInfo,\n    createMessage,\n    loadCurrentModel,\n  }\n}\n","import type { FileSystemTree } from '@webcontainer/api'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FileSystemTreeChange,\n  parseFileSystemTreeToJSONL,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFileSystemTree = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [fileSystemTree, setFileSystemTree] = useState<FileSystemTree>()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const updateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      if (!currentSession?.main_node_id) {\n        return\n      }\n      setFileSystemTree((prev) => {\n        if (!currentSession?.main_node_id) return prev\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(currentSession?.main_node_id, result)\n        return result\n      })\n    },\n    [currentSession?.main_node_id, updateCodeContainerData],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const mainNode = await getRepository('FlowNode').findOne({\n      where: {\n        id: currentSession?.main_node_id,\n      },\n    })\n    if (!mainNode) {\n      return\n    }\n    setFileSystemTree(mainNode.raw ? parseJSONLToFileSystemTree(mainNode.raw) : {})\n  }, [currentSession?.main_node_id])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    fileSystemTree,\n    updateCodeContainerFile,\n    updateCodeContainerData,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\nimport { Message } from 'ai/react'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useFileSystemTree } from './hooks/use-file-system-tree'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nconst VSLiteApplication = memo(() => {\n  const { loading, mainLLMInfo, loadCurrentModel, createMessage } = useCreateMessage()\n  const { fileSystemTree, updateCodeContainerFile } = useFileSystemTree()\n\n  const handleSendMessage = useCallback(\n    (message: string, messages: Message[], onMessage?: (chunk: string) => void) => {\n      return createMessage(message, messages, onMessage)\n    },\n    [createMessage],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name || ''\n              ) : loading ? (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              ) : undefined}\n              {mainLLMInfo?.llm && mainLLMInfo?.status !== LLMStatusEnum.Loaded ? (\n                <LazyIcon\n                  size={16}\n                  name=\"loader-circle\"\n                  onClick={loadCurrentModel}\n                  className=\"animate-spin ml-2\"\n                />\n              ) : undefined}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {fileSystemTree !== undefined ? (\n          <VSLiteApp\n            autoLoad\n            hideAppName\n            llm={mainLLMInfo?.llm}\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={updateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        ) : undefined}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default VSLiteApplication\n"],"file":"assets/VSLiteApplication-DVSpqCmP.js"}