{"version":3,"mappings":"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","names":["useState","mainLLMInfo","currentSession","useSessionState","state","useTranslation","useToast","loadModel","useLoadModel","useLLM","sessionPassphraseDialogRef","useModalRef","SessionPassphraseDialog","createMessage","useCallback","input","messages","onMessageUpdate","toast","t","LLMStatusEnum","data","setLLMInfo","pre","message","SystemMessage","AIMessage","HumanMessage","response","stream","history","error","init","setLoading","getRepository","llmNode","connections","llm","passphraseConfirm","useEffect","loading","useFileSystemTree","fileSystemTree","setFileSystemTree","updateCodeContainerData","id","changes","prev","result","updateFileSystemTree","mainNode","parseJSONLToFileSystemTree","VSLiteApplication","memo","loadCurrentModel","updateCodeContainerFile","onMessage","jsxs","jsx","Tooltip","cn","LLMIcon","TooltipContent","Suspense","VSLiteApp","handleSendMessage"],"ignoreList":[],"sources":["../../src/components/pages/VSLiteApplication/hooks/use-create-message.ts","../../src/components/pages/VSLiteApplication/hooks/use-file-system-tree.ts","../../src/components/pages/VSLiteApplication/VSLiteApplication.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { AIMessage, HumanMessage, SystemMessage } from '@langchain/core/messages'\nimport { useToast } from 'src/lib/hooks/use-toast'\nimport { FlowNodeTypeEnum, LLM, LLMStatusEnum } from 'src/services/database/types'\nimport { useTranslation } from 'react-i18next'\nimport { getRepository } from 'src/services/database'\nimport { useSessionState } from 'src/states/session'\nimport { In } from 'src/services/database/typeorm-wrapper'\nimport { Message } from 'ai/react'\nimport { useLLM } from 'src/hooks/mutations/use-llm'\nimport { useLoadModel } from 'src/hooks/mutations/use-load-model'\nimport { passphraseConfirm } from 'src/utils/passphrase'\nimport SessionPassphraseDialog from 'src/components/dialogs/SessionPassphraseDialog'\nimport { useModalRef } from 'src/hooks/use-modal-ref'\n\nexport const useCreateMessage = () => {\n  const [loading, setLoading] = useState(false)\n  const [mainLLMInfo, setLLMInfo] = useState<{\n    llm: LLM\n    status: LLMStatusEnum\n    progress?: string\n  }>()\n  const currentSession = useSessionState((state) => state.currentSession)\n  const { t } = useTranslation('flows')\n  const { toast } = useToast()\n  const { loadModel } = useLoadModel()\n  const { stream } = useLLM()\n  const { modalRef: sessionPassphraseDialogRef } = useModalRef(SessionPassphraseDialog)\n\n  const createMessage = useCallback(\n    async (input: string, messages: Message[], onMessageUpdate?: (chunk: string) => void) => {\n      if (currentSession?.main_node_id) {\n        if (!mainLLMInfo?.llm) {\n          toast({\n            variant: 'destructive',\n            description: t('editor_node.errors.llm_not_found'),\n          })\n          return\n        }\n\n        if (mainLLMInfo?.status !== LLMStatusEnum.Loaded) {\n          await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n            provider: mainLLMInfo.llm.provider,\n            callback: (data) => {\n              setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n            },\n          })\n          setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n        }\n        try {\n          const history = messages.map((message) => {\n            if (message.role === 'system') {\n              return new SystemMessage(message.content)\n            }\n            if (message.role === 'assistant') {\n              return new AIMessage(message.content)\n            }\n            return new HumanMessage(message.content)\n          })\n          const response = await stream(\n            mainLLMInfo.llm.provider,\n            [...history, new HumanMessage(input)],\n            {\n              onMessageUpdate: ({ content }) => {\n                onMessageUpdate?.(content)\n              },\n              llm: mainLLMInfo.llm,\n            },\n          )\n          onMessageUpdate?.(response?.content || '')\n          return response?.content\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('LLM_NOT_LOADED_YET')) {\n            toast({\n              title: t('editor_node.errors.llm_not_loaded_yet'),\n            })\n            return\n          }\n          toast({\n            variant: 'destructive',\n            title: t('editor_node.errors.stream_message_failed'),\n          })\n        }\n      }\n    },\n    [\n      currentSession?.main_node_id,\n      mainLLMInfo?.llm,\n      mainLLMInfo?.status,\n      toast,\n      t,\n      loadModel,\n      stream,\n    ],\n  )\n\n  const init = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!currentSession?.main_node_id) {\n        return\n      }\n\n      const connections = await getRepository('FlowEdge').find({\n        where: {\n          target: currentSession.main_node_id,\n        },\n      })\n      const connectedNodes = await getRepository('FlowNode').find({\n        where: {\n          id: In(connections.map((connection) => connection.source)),\n        },\n      })\n      const llmNode = connectedNodes.find((node) => node.source_type === FlowNodeTypeEnum.LLM)\n      if (!llmNode) {\n        return\n      }\n      const llm = await getRepository('LLM').findOne({\n        where: {\n          id: llmNode.source_id,\n        },\n      })\n      if (!llm) {\n        return\n      }\n      if (currentSession.passphrase) {\n        await passphraseConfirm(currentSession.passphrase!, sessionPassphraseDialogRef.current)\n      }\n      await loadModel(llm.provider, llm.name, {\n        provider: llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, llm, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo({\n        llm,\n        status: LLMStatusEnum.Loaded,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }, [\n    currentSession?.main_node_id,\n    currentSession?.passphrase,\n    loadModel,\n    sessionPassphraseDialogRef,\n  ])\n\n  const loadCurrentModel = useCallback(async () => {\n    try {\n      setLoading(true)\n      if (!mainLLMInfo?.llm) {\n        return\n      }\n      await loadModel(mainLLMInfo.llm.provider, mainLLMInfo.llm.name, {\n        provider: mainLLMInfo.llm.provider,\n        callback: (data) => {\n          setLLMInfo((pre) => (pre ? { ...pre, progress: data.text } : pre))\n        },\n      })\n      setLLMInfo((pre) => (pre ? { ...pre, status: LLMStatusEnum.Loaded, progress: '' } : pre))\n    } finally {\n      setLoading(false)\n    }\n  }, [loadModel, mainLLMInfo?.llm])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    loading,\n    mainLLMInfo,\n    createMessage,\n    loadCurrentModel,\n  }\n}\n","import type { FileSystemTree } from '@webcontainer/api'\nimport { useCallback, useEffect, useState } from 'react'\nimport { getRepository } from 'src/services/database'\nimport {\n  FileSystemTreeChange,\n  parseFileSystemTreeToJSONL,\n  parseJSONLToFileSystemTree,\n  updateFileSystemTree,\n} from 'src/services/web-container/utils/file-tree'\nimport { useSessionState } from 'src/states/session'\n\nexport const useFileSystemTree = () => {\n  const currentSession = useSessionState((state) => state.currentSession)\n  const [fileSystemTree, setFileSystemTree] = useState<FileSystemTree>()\n\n  const updateCodeContainerData = useCallback(async (id: string, data: FileSystemTree) => {\n    await getRepository('FlowNode').update(id, {\n      raw: parseFileSystemTreeToJSONL(data),\n    })\n  }, [])\n\n  const updateCodeContainerFile = useCallback(\n    async (changes: FileSystemTreeChange[]) => {\n      if (!currentSession?.main_node_id) {\n        return\n      }\n      setFileSystemTree((prev) => {\n        if (!currentSession?.main_node_id) return prev\n        const result = updateFileSystemTree(prev || {}, changes)\n        updateCodeContainerData(currentSession?.main_node_id, result)\n        return result\n      })\n    },\n    [currentSession?.main_node_id, updateCodeContainerData],\n  )\n\n  const init = useCallback(async () => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n\n    const mainNode = await getRepository('FlowNode').findOne({\n      where: {\n        id: currentSession?.main_node_id,\n      },\n    })\n    if (!mainNode) {\n      return\n    }\n    setFileSystemTree(mainNode.raw ? parseJSONLToFileSystemTree(mainNode.raw) : {})\n  }, [currentSession?.main_node_id])\n\n  useEffect(() => {\n    if (!currentSession?.main_node_id) {\n      return\n    }\n    init()\n  }, [currentSession?.main_node_id, init])\n\n  return {\n    fileSystemTree,\n    updateCodeContainerFile,\n    updateCodeContainerData,\n  }\n}\n","'use client'\n\nimport { memo, lazy, Suspense, useCallback } from 'react'\nimport LazyIcon from 'src/components/atoms/LazyIcon'\nimport LLMIcon from 'src/components/atoms/LLMIcon'\nimport { cn } from 'src/lib/utils'\nimport { LLMStatusEnum } from 'src/services/database/types'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from 'src/lib/shadcn/ui/tooltip'\nimport { DefaultLoader } from 'src/components/atoms/DefaultLoader'\nimport { Message } from 'ai/react'\n\nimport { useCreateMessage } from './hooks/use-create-message'\nimport { useFileSystemTree } from './hooks/use-file-system-tree'\n\nconst VSLiteApp = lazy(() => import('src/lib/vslite/index'))\n\nconst VSLiteApplication = memo(() => {\n  const { loading, mainLLMInfo, loadCurrentModel, createMessage } = useCreateMessage()\n  const { fileSystemTree, updateCodeContainerFile } = useFileSystemTree()\n\n  const handleSendMessage = useCallback(\n    (message: string, messages: Message[], onMessage?: (chunk: string) => void) => {\n      return createMessage(message, messages, onMessage)\n    },\n    [createMessage],\n  )\n\n  return (\n    <div className=\"h-full w-full relative\" data-registry=\"plate\">\n      <TooltipProvider>\n        <Tooltip>\n          <div\n            className={cn(\n              'flex absolute !z-[51] right-1 top-0 max-w-28 h-9 items-center justify-center flex-row',\n            )}\n          >\n            {mainLLMInfo?.status === LLMStatusEnum.Loaded && mainLLMInfo?.llm?.name ? (\n              <LLMIcon name={mainLLMInfo?.llm?.name} className=\"w-5 h-5 mr-1\" />\n            ) : undefined}\n            <TooltipTrigger className=\"overflow-hidden !text-ellipsis w-full max-w-full max-h-full whitespace-nowrap text-sm\">\n              {mainLLMInfo?.progress ? (\n                mainLLMInfo.progress\n              ) : mainLLMInfo?.status === LLMStatusEnum.Loaded ? (\n                mainLLMInfo?.llm?.name || ''\n              ) : loading ? (\n                <LazyIcon size={16} name=\"loader-circle\" className=\"animate-spin ml-2\" />\n              ) : undefined}\n              {mainLLMInfo?.llm && mainLLMInfo?.status !== LLMStatusEnum.Loaded ? (\n                <LazyIcon\n                  size={16}\n                  name=\"loader-circle\"\n                  onClick={loadCurrentModel}\n                  className=\"animate-spin ml-2\"\n                />\n              ) : undefined}\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{mainLLMInfo?.progress || mainLLMInfo?.llm?.name || ''}</p>\n            </TooltipContent>\n          </div>\n        </Tooltip>\n      </TooltipProvider>\n      <Suspense fallback={<DefaultLoader simple />}>\n        {fileSystemTree !== undefined ? (\n          <VSLiteApp\n            autoLoad\n            hideAppName\n            llm={mainLLMInfo?.llm}\n            fileSystemTree={fileSystemTree}\n            onUpdateFileContent={updateCodeContainerFile}\n            sendMessage={handleSendMessage}\n          />\n        ) : undefined}\n      </Suspense>\n    </div>\n  )\n})\n\nexport default VSLiteApplication\n"],"file":"assets/VSLiteApplication-d7R7ZM7e.js"}