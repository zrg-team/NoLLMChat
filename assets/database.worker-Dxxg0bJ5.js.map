{"version":3,"file":"database.worker-Dxxg0bJ5.js","sources":["../node_modules/reflect-metadata/Reflect.js","../node_modules/typeorm/browser/metadata-builder/MetadataUtils.js","../node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.js","../node_modules/vite-plugin-node-polyfills/shims/global/dist/index.js","../node_modules/vite-plugin-node-polyfills/shims/buffer/dist/index.js","../node_modules/typeorm/browser/platform/BrowserPlatformTools.js","../node_modules/typeorm/browser/util/ObjectUtils.js","../node_modules/typeorm/browser/error/TypeORMError.js","../node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.js","../node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.js","../node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.js","../node_modules/typeorm/browser/error/ConnectionIsNotSetError.js","../node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.js","../node_modules/typeorm/browser/error/CannotDetermineEntityError.js","../node_modules/typeorm/browser/error/UpdateValuesMissingError.js","../node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.js","../node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.js","../node_modules/typeorm/browser/error/TransactionNotStartedError.js","../node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js","../node_modules/typeorm/browser/util/InstanceChecker.js","../node_modules/typeorm/browser/error/EntityNotFoundError.js","../node_modules/typeorm/browser/error/EntityMetadataNotFoundError.js","../node_modules/typeorm/browser/error/MustBeEntityError.js","../node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.js","../node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.js","../node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.js","../node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.js","../node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.js","../node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.js","../node_modules/typeorm/browser/error/MissingDeleteDateColumnError.js","../node_modules/typeorm/browser/error/CircularRelationsError.js","../node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js","../node_modules/typeorm/browser/error/MissingPrimaryColumnError.js","../node_modules/typeorm/browser/error/EntityPropertyNotFoundError.js","../node_modules/typeorm/browser/error/MissingDriverError.js","../node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js","../node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.js","../node_modules/typeorm/browser/error/InsertValuesMissingError.js","../node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.js","../node_modules/typeorm/browser/error/DriverOptionNotSetError.js","../node_modules/typeorm/browser/error/FindRelationsNotFoundError.js","../node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.js","../node_modules/typeorm/browser/error/DataTypeNotSupportedError.js","../node_modules/typeorm/browser/error/InitializedRelationError.js","../node_modules/typeorm/browser/error/QueryFailedError.js","../node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.js","../node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.js","../node_modules/typeorm/browser/error/ColumnTypeUndefinedError.js","../node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js","../node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.js","../node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.js","../node_modules/typeorm/browser/error/NoConnectionOptionError.js","../node_modules/typeorm/browser/error/ForbiddenTransactionModeOverrideError.js","../node_modules/typeorm/browser/query-builder/Alias.js","../node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js","../node_modules/inherits/inherits_browser.js","../node_modules/vite-plugin-node-polyfills/shims/buffer/dist/index.cjs","../node_modules/safe-buffer/index.js","../node_modules/sha.js/hash.js","../node_modules/sha.js/sha.js","../node_modules/sha.js/sha1.js","../node_modules/sha.js/sha256.js","../node_modules/sha.js/sha224.js","../node_modules/sha.js/sha512.js","../node_modules/sha.js/sha384.js","../node_modules/sha.js/index.js","../node_modules/typeorm/browser/util/StringUtils.js","../node_modules/typeorm/browser/util/VersionUtils.js","../node_modules/typeorm/browser/driver/DriverUtils.js","../node_modules/typeorm/browser/query-builder/JoinAttribute.js","../node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js","../node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.js","../node_modules/typeorm/browser/query-builder/QueryExpressionMap.js","../node_modules/typeorm/browser/query-builder/Brackets.js","../node_modules/typeorm/browser/util/ApplyValueTransformers.js","../node_modules/typeorm/browser/find-options/FindOperator.js","../node_modules/typeorm/browser/find-options/operator/In.js","../node_modules/typeorm/browser/util/escapeRegExp.js","../node_modules/typeorm/browser/query-builder/QueryBuilder.js","../node_modules/typeorm/browser/query-builder/result/DeleteResult.js","../node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.js","../node_modules/typeorm/node_modules/uuid/dist/esm-browser/rng.js","../node_modules/typeorm/node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/typeorm/node_modules/uuid/dist/esm-browser/native.js","../node_modules/typeorm/node_modules/uuid/dist/esm-browser/v4.js","../node_modules/typeorm/browser/subscriber/BroadcasterResult.js","../node_modules/typeorm/browser/query-builder/result/InsertResult.js","../node_modules/typeorm/browser/query-builder/ReturningResultsEntityUpdator.js","../node_modules/typeorm/browser/query-builder/InsertQueryBuilder.js","../node_modules/typeorm/browser/query-builder/RelationUpdater.js","../node_modules/typeorm/browser/query-builder/RelationRemover.js","../node_modules/typeorm/browser/query-builder/RelationQueryBuilder.js","../node_modules/typeorm/browser/util/OrmUtils.js","../node_modules/typeorm/browser/query-builder/transformer/RawSqlResultsToEntityTransformer.js","../node_modules/typeorm/browser/query-builder/relation-id/RelationIdLoader.js","../node_modules/typeorm/browser/query-builder/RelationIdLoader.js","../node_modules/typeorm/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js","../node_modules/typeorm/browser/query-builder/relation-count/RelationCountLoader.js","../node_modules/typeorm/browser/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","../node_modules/typeorm/browser/find-options/FindOptionsUtils.js","../node_modules/typeorm/browser/query-builder/SelectQueryBuilder.js","../node_modules/typeorm/browser/query-builder/result/UpdateResult.js","../node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.js","../node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.js","../node_modules/typeorm/browser/query-builder/index.js","../node_modules/typeorm/browser/util/RandomGenerator.js","../node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js","../node_modules/typeorm/browser/schema-builder/table/TableColumn.js","../node_modules/typeorm/browser/schema-builder/table/TableIndex.js","../node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js","../node_modules/typeorm/browser/schema-builder/util/TableUtils.js","../node_modules/typeorm/browser/schema-builder/table/TableUnique.js","../node_modules/typeorm/browser/schema-builder/table/TableCheck.js","../node_modules/typeorm/browser/schema-builder/table/TableExclusion.js","../node_modules/typeorm/browser/schema-builder/table/Table.js","../node_modules/typeorm/browser/migration/Migration.js","../node_modules/typeorm/browser/driver/sqlserver/MssqlParameter.js","../node_modules/typeorm/browser/migration/MigrationExecutor.js","../node_modules/typeorm/browser/util/DepGraph.js","../node_modules/typeorm/browser/metadata-builder/EntityMetadataValidator.js","../node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js","../node_modules/typeorm/browser/util/TreeRepositoryUtils.js","../node_modules/typeorm/browser/repository/Repository.js","../node_modules/typeorm/browser/repository/TreeRepository.js","../node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.js","../node_modules/typeorm/browser/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.js","../node_modules/typeorm/browser/repository/AbstractRepository.js","../node_modules/typeorm/browser/persistence/SubjectTopoligicalSorter.js","../node_modules/dayjs/dayjs.min.js","../node_modules/typeorm/browser/util/DateUtils.js","../node_modules/typeorm/browser/persistence/SubjectChangedColumnsComputer.js","../node_modules/typeorm/browser/error/NestedSetMultipleRootError.js","../node_modules/typeorm/browser/persistence/tree/NestedSetSubjectExecutor.js","../node_modules/typeorm/browser/persistence/tree/ClosureSubjectExecutor.js","../node_modules/typeorm/browser/metadata/EntityMetadata.js","../node_modules/typeorm/browser/persistence/tree/MaterializedPathSubjectExecutor.js","../node_modules/typeorm/browser/persistence/SubjectExecutor.js","../node_modules/typeorm/browser/persistence/Subject.js","../node_modules/typeorm/browser/persistence/subject-builder/OneToManySubjectBuilder.js","../node_modules/typeorm/browser/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","../node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js","../node_modules/typeorm/browser/persistence/SubjectDatabaseEntityLoader.js","../node_modules/typeorm/browser/persistence/subject-builder/CascadesSubjectBuilder.js","../node_modules/typeorm/browser/persistence/EntityPersistExecutor.js","../node_modules/typeorm/browser/entity-manager/EntityManager.js","../node_modules/typeorm/browser/entity-manager/SqljsEntityManager.js","../node_modules/typeorm/browser/entity-manager/EntityManagerFactory.js","../node_modules/typeorm/browser/schema-builder/view/View.js","../node_modules/typeorm/browser/schema-builder/util/ViewUtils.js","../node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.js","../node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js","../node_modules/typeorm/browser/driver/Query.js","../node_modules/typeorm/browser/driver/SqlInMemory.js","../node_modules/typeorm/browser/query-runner/BaseQueryRunner.js","../node_modules/typeorm/browser/driver/types/MetadataTableType.js","../node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js","../node_modules/typeorm/browser/subscriber/Broadcaster.js","../node_modules/typeorm/browser/query-runner/QueryResult.js","../node_modules/typeorm/browser/driver/cordova/CordovaQueryRunner.js","../node_modules/typeorm/browser/driver/cordova/CordovaDriver.js","../node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js","../node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js","../node_modules/typeorm/browser/driver/nativescript/NativescriptQueryRunner.js","../node_modules/typeorm/browser/driver/nativescript/NativescriptDriver.js","../node_modules/typeorm/browser/driver/sqljs/SqljsQueryRunner.js","../node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js","../node_modules/typeorm/browser/driver/postgres/PostgresQueryRunner.js","../node_modules/typeorm/browser/driver/postgres/PostgresDriver.js","../node_modules/typeorm/browser/driver/expo/ExpoQueryRunner.js","../node_modules/typeorm/browser/driver/expo/ExpoDriver.js","../node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlQueryRunner.js","../node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlDriver.js","../node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresQueryRunner.js","../node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresDriver.js","../node_modules/typeorm/browser/driver/capacitor/CapacitorQueryRunner.js","../node_modules/typeorm/browser/driver/capacitor/CapacitorDriver.js","../node_modules/typeorm/browser/driver/spanner/SpannerQueryRunner.js","../node_modules/typeorm/browser/driver/spanner/SpannerDriver.js","../node_modules/typeorm/browser/driver/DriverFactory.js","../node_modules/typeorm/browser/platform/BrowserDirectoryExportedClassesLoader.js","../node_modules/typeorm/browser/container.js","../node_modules/typeorm/browser/metadata/ColumnMetadata.js","../node_modules/typeorm/browser/metadata/IndexMetadata.js","../node_modules/typeorm/browser/metadata/RelationMetadata.js","../node_modules/typeorm/browser/metadata/EmbeddedMetadata.js","../node_modules/typeorm/browser/metadata/RelationIdMetadata.js","../node_modules/typeorm/browser/metadata/RelationCountMetadata.js","../node_modules/typeorm/browser/metadata/types/EventListenerTypes.js","../node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js","../node_modules/typeorm/browser/metadata-builder/JunctionEntityMetadataBuilder.js","../node_modules/typeorm/browser/metadata-builder/ClosureJunctionEntityMetadataBuilder.js","../node_modules/typeorm/browser/metadata/UniqueMetadata.js","../node_modules/typeorm/browser/metadata-builder/RelationJoinColumnBuilder.js","../node_modules/typeorm/browser/metadata/EntityListenerMetadata.js","../node_modules/typeorm/browser/metadata/CheckMetadata.js","../node_modules/typeorm/browser/metadata/ExclusionMetadata.js","../node_modules/typeorm/browser/metadata-builder/EntityMetadataBuilder.js","../node_modules/typeorm/browser/entity-schema/EntitySchemaEmbeddedError.js","../node_modules/typeorm/browser/entity-schema/EntitySchemaTransformer.js","../node_modules/typeorm/browser/connection/ConnectionMetadataBuilder.js","../node_modules/typeorm/browser/logger/AbstractLogger.js","../node_modules/typeorm/browser/logger/SimpleConsoleLogger.js","../node_modules/typeorm/browser/logger/AdvancedConsoleLogger.js","../node_modules/typeorm/browser/platform/BrowserFileLoggerDummy.js","../node_modules/vite-plugin-node-polyfills/shims/process/dist/index.js","../node_modules/debug/node_modules/ms/index.js","../node_modules/debug/src/common.js","../node_modules/debug/src/browser.js","../node_modules/typeorm/browser/logger/DebugLogger.js","../node_modules/typeorm/browser/logger/LoggerFactory.js","../node_modules/typeorm/browser/cache/RedisQueryResultCache.js","../node_modules/typeorm/browser/cache/DbQueryResultCache.js","../node_modules/typeorm/browser/cache/QueryResultCacheFactory.js","../node_modules/typeorm/browser/query-builder/RelationLoader.js","../node_modules/typeorm/browser/data-source/DataSource.js","../node_modules/typeorm/browser/globals.js","../node_modules/typeorm/browser/decorator/columns/Column.js","../node_modules/typeorm/browser/decorator/columns/CreateDateColumn.js","../node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.js","../node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.js","../node_modules/typeorm/browser/decorator/relations/JoinColumn.js","../node_modules/typeorm/browser/decorator/relations/ManyToOne.js","../node_modules/typeorm/browser/decorator/relations/OneToMany.js","../node_modules/typeorm/browser/decorator/relations/OneToOne.js","../node_modules/typeorm/browser/decorator/entity/Entity.js","../node_modules/typeorm/browser/find-options/operator/Any.js","../node_modules/typeorm/browser/find-options/operator/ArrayContainedBy.js","../node_modules/typeorm/browser/find-options/operator/ArrayContains.js","../node_modules/typeorm/browser/find-options/operator/ArrayOverlap.js","../node_modules/typeorm/browser/find-options/operator/Between.js","../node_modules/typeorm/browser/find-options/EqualOperator.js","../node_modules/typeorm/browser/find-options/operator/Equal.js","../node_modules/typeorm/browser/find-options/operator/IsNull.js","../node_modules/typeorm/browser/find-options/operator/LessThan.js","../node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.js","../node_modules/typeorm/browser/find-options/operator/Like.js","../node_modules/typeorm/browser/find-options/operator/MoreThan.js","../node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.js","../node_modules/typeorm/browser/find-options/operator/Not.js","../node_modules/typeorm/browser/find-options/operator/Raw.js","../node_modules/@electric-sql/pglite/dist/chunk-MPW3RCU6.js","../node_modules/@electric-sql/pglite/dist/contrib/uuid_ossp.js","../src/constants/dev.ts","../node_modules/chalk/source/vendor/ansi-styles/index.js","../node_modules/chalk/source/vendor/supports-color/browser.js","../node_modules/chalk/source/utilities.js","../node_modules/chalk/source/index.js","../src/utils/logger.ts","../node_modules/eventemitter3/index.js","../node_modules/@electric-sql/pglite/dist/chunk-JSQ47LU7.js","../node_modules/@electric-sql/pglite/dist/chunk-PZ27VTCT.js","../node_modules/@electric-sql/pglite/dist/chunk-4ZP5PNUC.js","../node_modules/@electric-sql/pglite/dist/chunk-GMYUOGPV.js","../node_modules/@electric-sql/pglite/dist/postgres.js","../node_modules/@electric-sql/pglite/dist/index.js","../src/lib/typeorm-pglite-browser/pglite-instance.ts","../src/lib/typeorm-pglite-browser/pglite-pool.ts","../src/lib/typeorm-pglite-browser/pglite-driver.ts","../src/utils/worker-base.ts","../src/services/database/types/flow-node.ts","../src/services/database/types/session.ts","../src/services/database/types/index.ts","../src/services/database/entities/thread.ts","../src/services/database/entities/message.ts","../src/services/database/entities/llm.ts","../src/services/database/entities/flow-node.ts","../src/services/database/entities/flow-edge.ts","../src/services/database/entities/prompt.ts","../src/services/database/entities/prompt-variable.ts","../src/services/database/entities/session.ts","../src/services/database/entities/schema.ts","../src/services/database/entities/schema-item.ts","../src/services/database/entities/json-data.ts","../src/services/database/entities/csv-data.ts","../src/services/database/entities/tool-definition.ts","../src/services/database/entities/vector-database.ts","../src/services/database/entities/jsonl-data.ts","../src/services/database/entities/flow-node-data.ts","../src/services/database/entities/flow-node-placeholder.ts","../src/services/database/entities/index.ts","../src/services/database/utils/serialize.base.ts","../src/services/database/utils/serialize.worker.ts","../src/services/database/utils/bridge.base.ts","../src/services/database/worker/database.worker.ts"],"sourcesContent":["/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof globalThis === \"object\" ? globalThis :\n            typeof global === \"object\" ? global :\n                typeof self === \"object\" ? self :\n                    typeof this === \"object\" ? this :\n                        sloppyModeThis();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect !== \"undefined\") {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter, root);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                if (previous)\n                    previous(key, value);\n            };\n        }\n        function functionThis() {\n            try {\n                return Function(\"return this;\")();\n            }\n            catch (_) { }\n        }\n        function indirectEvalThis() {\n            try {\n                return (void 0, eval)(\"(function() { return this; })()\");\n            }\n            catch (_) { }\n        }\n        function sloppyModeThis() {\n            return functionThis() || indirectEvalThis();\n        }\n    })(function (exporter, root) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var _Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        var registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\n        var metadataRegistry = GetOrCreateMetadataRegistry();\n        var metadataProvider = CreateMetadataProvider(metadataRegistry);\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return;\n            return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ true);\n            provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var provider = GetMetadataProvider(O, P, /*create*/ false);\n            if (!provider) {\n                return [];\n            }\n            return provider.OrdinaryOwnMetadataKeys(O, P);\n        }\n        // 6 ECMAScript Data Types and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        function SameValueZero(x, y) {\n            return x === y || x !== x && y !== y;\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // Global metadata registry\n        // - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\n        // - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\n        /**\n         * Creates a registry used to allow multiple `reflect-metadata` providers.\n         */\n        function CreateMetadataRegistry() {\n            var fallback;\n            if (!IsUndefined(registrySymbol) &&\n                typeof root.Reflect !== \"undefined\" &&\n                !(registrySymbol in root.Reflect) &&\n                typeof root.Reflect.defineMetadata === \"function\") {\n                // interoperate with older version of `reflect-metadata` that did not support a registry.\n                fallback = CreateFallbackProvider(root.Reflect);\n            }\n            var first;\n            var second;\n            var rest;\n            var targetProviderMap = new _WeakMap();\n            var registry = {\n                registerProvider: registerProvider,\n                getProvider: getProvider,\n                setProvider: setProvider,\n            };\n            return registry;\n            function registerProvider(provider) {\n                if (!Object.isExtensible(registry)) {\n                    throw new Error(\"Cannot add provider to a frozen registry.\");\n                }\n                switch (true) {\n                    case fallback === provider: break;\n                    case IsUndefined(first):\n                        first = provider;\n                        break;\n                    case first === provider: break;\n                    case IsUndefined(second):\n                        second = provider;\n                        break;\n                    case second === provider: break;\n                    default:\n                        if (rest === undefined)\n                            rest = new _Set();\n                        rest.add(provider);\n                        break;\n                }\n            }\n            function getProviderNoCache(O, P) {\n                if (!IsUndefined(first)) {\n                    if (first.isProviderFor(O, P))\n                        return first;\n                    if (!IsUndefined(second)) {\n                        if (second.isProviderFor(O, P))\n                            return first;\n                        if (!IsUndefined(rest)) {\n                            var iterator = GetIterator(rest);\n                            while (true) {\n                                var next = IteratorStep(iterator);\n                                if (!next) {\n                                    return undefined;\n                                }\n                                var provider = IteratorValue(next);\n                                if (provider.isProviderFor(O, P)) {\n                                    IteratorClose(iterator);\n                                    return provider;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\n                    return fallback;\n                }\n                return undefined;\n            }\n            function getProvider(O, P) {\n                var providerMap = targetProviderMap.get(O);\n                var provider;\n                if (!IsUndefined(providerMap)) {\n                    provider = providerMap.get(P);\n                }\n                if (!IsUndefined(provider)) {\n                    return provider;\n                }\n                provider = getProviderNoCache(O, P);\n                if (!IsUndefined(provider)) {\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return provider;\n            }\n            function hasProvider(provider) {\n                if (IsUndefined(provider))\n                    throw new TypeError();\n                return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\n            }\n            function setProvider(O, P, provider) {\n                if (!hasProvider(provider)) {\n                    throw new Error(\"Metadata provider not registered.\");\n                }\n                var existingProvider = getProvider(O, P);\n                if (existingProvider !== provider) {\n                    if (!IsUndefined(existingProvider)) {\n                        return false;\n                    }\n                    var providerMap = targetProviderMap.get(O);\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return true;\n            }\n        }\n        /**\n         * Gets or creates the shared registry of metadata providers.\n         */\n        function GetOrCreateMetadataRegistry() {\n            var metadataRegistry;\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                metadataRegistry = root.Reflect[registrySymbol];\n            }\n            if (IsUndefined(metadataRegistry)) {\n                metadataRegistry = CreateMetadataRegistry();\n            }\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                Object.defineProperty(root.Reflect, registrySymbol, {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: metadataRegistry\n                });\n            }\n            return metadataRegistry;\n        }\n        function CreateMetadataProvider(registry) {\n            // [[Metadata]] internal slot\n            // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n            var metadata = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var targetMetadata = metadata.get(O);\n                    if (IsUndefined(targetMetadata))\n                        return false;\n                    return targetMetadata.has(P);\n                },\n                OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\n                OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\n                OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\n                OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\n                OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\n            };\n            metadataRegistry.registerProvider(provider);\n            return provider;\n            function GetOrCreateMetadataMap(O, P, Create) {\n                var targetMetadata = metadata.get(O);\n                var createdTargetMetadata = false;\n                if (IsUndefined(targetMetadata)) {\n                    if (!Create)\n                        return undefined;\n                    targetMetadata = new _Map();\n                    metadata.set(O, targetMetadata);\n                    createdTargetMetadata = true;\n                }\n                var metadataMap = targetMetadata.get(P);\n                if (IsUndefined(metadataMap)) {\n                    if (!Create)\n                        return undefined;\n                    metadataMap = new _Map();\n                    targetMetadata.set(P, metadataMap);\n                    if (!registry.setProvider(O, P, provider)) {\n                        targetMetadata.delete(P);\n                        if (createdTargetMetadata) {\n                            metadata.delete(O);\n                        }\n                        throw new Error(\"Wrong provider for target.\");\n                    }\n                }\n                return metadataMap;\n            }\n            // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n            function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                return ToBoolean(metadataMap.has(MetadataKey));\n            }\n            // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n            function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return undefined;\n                return metadataMap.get(MetadataKey);\n            }\n            // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n            function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n                metadataMap.set(MetadataKey, MetadataValue);\n            }\n            // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n            function OrdinaryOwnMetadataKeys(O, P) {\n                var keys = [];\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return keys;\n                var keysObj = metadataMap.keys();\n                var iterator = GetIterator(keysObj);\n                var k = 0;\n                while (true) {\n                    var next = IteratorStep(iterator);\n                    if (!next) {\n                        keys.length = k;\n                        return keys;\n                    }\n                    var nextValue = IteratorValue(next);\n                    try {\n                        keys[k] = nextValue;\n                    }\n                    catch (e) {\n                        try {\n                            IteratorClose(iterator);\n                        }\n                        finally {\n                            throw e;\n                        }\n                    }\n                    k++;\n                }\n            }\n            function OrdinaryDeleteMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                if (!metadataMap.delete(MetadataKey))\n                    return false;\n                if (metadataMap.size === 0) {\n                    var targetMetadata = metadata.get(O);\n                    if (!IsUndefined(targetMetadata)) {\n                        targetMetadata.delete(P);\n                        if (targetMetadata.size === 0) {\n                            metadata.delete(targetMetadata);\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        function CreateFallbackProvider(reflect) {\n            var defineMetadata = reflect.defineMetadata, hasOwnMetadata = reflect.hasOwnMetadata, getOwnMetadata = reflect.getOwnMetadata, getOwnMetadataKeys = reflect.getOwnMetadataKeys, deleteMetadata = reflect.deleteMetadata;\n            var metadataOwner = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var metadataPropertySet = metadataOwner.get(O);\n                    if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\n                        return true;\n                    }\n                    if (getOwnMetadataKeys(O, P).length) {\n                        if (IsUndefined(metadataPropertySet)) {\n                            metadataPropertySet = new _Set();\n                            metadataOwner.set(O, metadataPropertySet);\n                        }\n                        metadataPropertySet.add(P);\n                        return true;\n                    }\n                    return false;\n                },\n                OrdinaryDefineOwnMetadata: defineMetadata,\n                OrdinaryHasOwnMetadata: hasOwnMetadata,\n                OrdinaryGetOwnMetadata: getOwnMetadata,\n                OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\n                OrdinaryDeleteMetadata: deleteMetadata,\n            };\n            return provider;\n        }\n        /**\n         * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\n         * then this module's metadata provider is assigned to the object.\n         */\n        function GetMetadataProvider(O, P, Create) {\n            var registeredProvider = metadataRegistry.getProvider(O, P);\n            if (!IsUndefined(registeredProvider)) {\n                return registeredProvider;\n            }\n            if (Create) {\n                if (metadataRegistry.setProvider(O, P, metadataProvider)) {\n                    return metadataProvider;\n                }\n                throw new Error(\"Illegal state.\");\n            }\n            return undefined;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            var Map = /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (SameValueZero(key, this._cacheKey)) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (!SameValueZero(this._cacheKey, key)) {\n                        this._cacheIndex = -1;\n                        for (var i = 0; i < this._keys.length; i++) {\n                            if (SameValueZero(this._keys[i], key)) {\n                                this._cacheIndex = i;\n                                break;\n                            }\n                        }\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            return Map;\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            var Set = /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.keys(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n            return Set;\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    var array = new Uint8Array(size);\n                    if (typeof crypto !== \"undefined\") {\n                        crypto.getRandomValues(array);\n                    }\n                    else if (typeof msCrypto !== \"undefined\") {\n                        msCrypto.getRandomValues(array);\n                    }\n                    else {\n                        FillRandomBytes(array, size);\n                    }\n                    return array;\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    static getInheritanceTree(entity) {\n        const tree = [entity];\n        const getPrototypeOf = (object) => {\n            const proto = Object.getPrototypeOf(object);\n            if (proto && proto.name) {\n                tree.push(proto);\n                getPrototypeOf(proto);\n            }\n        };\n        getPrototypeOf(entity);\n        return tree;\n    }\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    static isInherited(target1, target2) {\n        return target1.prototype instanceof target2;\n    }\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    static filterByTarget(array, classes) {\n        if (!classes)\n            return array;\n        return array.filter((item) => item.target && classes.indexOf(item.target) !== -1);\n    }\n}\n\n//# sourceMappingURL=MetadataUtils.js.map\n","import { MetadataUtils } from \"../metadata-builder/MetadataUtils\";\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n    constructor() {\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this.tables = [];\n        this.trees = [];\n        this.entityRepositories = [];\n        this.transactionEntityManagers = [];\n        this.transactionRepositories = [];\n        this.namingStrategies = [];\n        this.entitySubscribers = [];\n        this.indices = [];\n        this.uniques = [];\n        this.checks = [];\n        this.exclusions = [];\n        this.columns = [];\n        this.generations = [];\n        this.relations = [];\n        this.joinColumns = [];\n        this.joinTables = [];\n        this.entityListeners = [];\n        this.relationCounts = [];\n        this.relationIds = [];\n        this.embeddeds = [];\n        this.inheritances = [];\n        this.discriminatorValues = [];\n    }\n    filterTables(target) {\n        return this.filterByTarget(this.tables, target);\n    }\n    filterColumns(target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n    }\n    findGenerated(target, propertyName) {\n        return this.generations.find((generated) => {\n            return ((Array.isArray(target)\n                ? target.indexOf(generated.target) !== -1\n                : generated.target === target) &&\n                generated.propertyName === propertyName);\n        });\n    }\n    findTree(target) {\n        return this.trees.find((tree) => {\n            return Array.isArray(target)\n                ? target.indexOf(tree.target) !== -1\n                : tree.target === target;\n        });\n    }\n    filterRelations(target) {\n        return this.filterByTargetAndWithoutDuplicateRelationProperties(this.relations, target);\n    }\n    filterRelationIds(target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n    }\n    filterRelationCounts(target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n    }\n    filterIndices(target) {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter((index) => {\n            return Array.isArray(target)\n                ? target.indexOf(index.target) !== -1\n                : index.target === target;\n        });\n    }\n    filterUniques(target) {\n        return this.uniques.filter((unique) => {\n            return Array.isArray(target)\n                ? target.indexOf(unique.target) !== -1\n                : unique.target === target;\n        });\n    }\n    filterChecks(target) {\n        return this.checks.filter((check) => {\n            return Array.isArray(target)\n                ? target.indexOf(check.target) !== -1\n                : check.target === target;\n        });\n    }\n    filterExclusions(target) {\n        return this.exclusions.filter((exclusion) => {\n            return Array.isArray(target)\n                ? target.indexOf(exclusion.target) !== -1\n                : exclusion.target === target;\n        });\n    }\n    filterListeners(target) {\n        return this.filterByTarget(this.entityListeners, target);\n    }\n    filterEmbeddeds(target) {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n    }\n    findJoinTable(target, propertyName) {\n        return this.joinTables.find((joinTable) => {\n            return (joinTable.target === target &&\n                joinTable.propertyName === propertyName);\n        });\n    }\n    filterJoinColumns(target, propertyName) {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter((joinColumn) => {\n            return (joinColumn.target === target &&\n                joinColumn.propertyName === propertyName);\n        });\n    }\n    filterSubscribers(target) {\n        return this.filterByTarget(this.entitySubscribers, target);\n    }\n    filterNamingStrategies(target) {\n        return this.filterByTarget(this.namingStrategies, target);\n    }\n    filterTransactionEntityManagers(target, propertyName) {\n        return this.transactionEntityManagers.filter((transactionEm) => {\n            return ((Array.isArray(target)\n                ? target.indexOf(transactionEm.target) !== -1\n                : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName);\n        });\n    }\n    filterTransactionRepository(target, propertyName) {\n        return this.transactionRepositories.filter((transactionEm) => {\n            return ((Array.isArray(target)\n                ? target.indexOf(transactionEm.target) !== -1\n                : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName);\n        });\n    }\n    filterSingleTableChildren(target) {\n        return this.tables.filter((table) => {\n            return (typeof table.target === \"function\" &&\n                typeof target === \"function\" &&\n                MetadataUtils.isInherited(table.target, target) &&\n                table.type === \"entity-child\");\n        });\n    }\n    findInheritanceType(target) {\n        return this.inheritances.find((inheritance) => inheritance.target === target);\n    }\n    findDiscriminatorValue(target) {\n        return this.discriminatorValues.find((discriminatorValue) => discriminatorValue.target === target);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Filters given array by a given target or targets.\n     */\n    filterByTarget(array, target) {\n        return array.filter((table) => {\n            return Array.isArray(target)\n                ? target.indexOf(table.target) !== -1\n                : table.target === target;\n        });\n    }\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    filterByTargetAndWithoutDuplicateProperties(array, target) {\n        const newArray = [];\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target;\n            if (sameTarget) {\n                if (!newArray.find((newItem) => newItem.propertyName === item.propertyName))\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n    /**\n     * Filters given array by a given target or targets and prevents duplicate relation property names.\n     */\n    filterByTargetAndWithoutDuplicateRelationProperties(array, target) {\n        const newArray = [];\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target;\n            if (sameTarget) {\n                const existingIndex = newArray.findIndex((newItem) => newItem.propertyName === item.propertyName);\n                if (Array.isArray(target) &&\n                    existingIndex !== -1 &&\n                    target.indexOf(item.target) <\n                        target.indexOf(newArray[existingIndex].target)) {\n                    const clone = Object.create(newArray[existingIndex]);\n                    clone.type = item.type;\n                    newArray[existingIndex] = clone;\n                }\n                else if (existingIndex === -1) {\n                    newArray.push(item);\n                }\n            }\n        });\n        return newArray;\n    }\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    filterByTargetAndWithoutDuplicateEmbeddedProperties(array, target) {\n        const newArray = [];\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target;\n            if (sameTarget) {\n                const isDuplicateEmbeddedProperty = newArray.find((newItem) => newItem.prefix === item.prefix &&\n                    newItem.propertyName === item.propertyName);\n                if (!isDuplicateEmbeddedProperty)\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n}\n\n//# sourceMappingURL=MetadataArgsStorage.js.map\n","const global = globalThis || void 0 || self;\n\nexport { global as default, global };\n//# sourceMappingURL=index.js.map\n","var buffer = {};\n\nvar base64Js = {};\n\nbase64Js.byteLength = byteLength;\nbase64Js.toByteArray = toByteArray;\nbase64Js.fromByteArray = fromByteArray;\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens (b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4);\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n\n  var curByte = 0;\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen;\n\n  var i;\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = (tmp >> 16) & 0xFF;\n    arr[curByte++] = (tmp >> 8) & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[curByte++] = (tmp >> 8) & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    );\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    );\n  }\n\n  return parts.join('')\n}\n\nvar ieee754 = {};\n\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\nieee754.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = (nBytes * 8) - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n};\n\nieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = (nBytes * 8) - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n(function (exports) {\n\n\tconst base64 = base64Js;\n\tconst ieee754$1 = ieee754;\n\tconst customInspectSymbol =\n\t  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n\t    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n\t    : null;\n\n\texports.Buffer = Buffer;\n\texports.SlowBuffer = SlowBuffer;\n\texports.INSPECT_MAX_BYTES = 50;\n\n\tconst K_MAX_LENGTH = 0x7fffffff;\n\texports.kMaxLength = K_MAX_LENGTH;\n\tconst { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n\t *               implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * We report that the browser does not support typed arrays if the are not subclassable\n\t * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n\t * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n\t * for __proto__ and has a buggy typed array implementation.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n\n\tif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n\t    typeof console.error === 'function') {\n\t  console.error(\n\t    'This browser lacks typed array (Uint8Array) support which is required by ' +\n\t    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n\t  );\n\t}\n\n\tfunction typedArraySupport () {\n\t  // Can typed array instances can be augmented?\n\t  try {\n\t    const arr = new GlobalUint8Array(1);\n\t    const proto = { foo: function () { return 42 } };\n\t    Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n\t    Object.setPrototypeOf(arr, proto);\n\t    return arr.foo() === 42\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\n\tObject.defineProperty(Buffer.prototype, 'parent', {\n\t  enumerable: true,\n\t  get: function () {\n\t    if (!Buffer.isBuffer(this)) return undefined\n\t    return this.buffer\n\t  }\n\t});\n\n\tObject.defineProperty(Buffer.prototype, 'offset', {\n\t  enumerable: true,\n\t  get: function () {\n\t    if (!Buffer.isBuffer(this)) return undefined\n\t    return this.byteOffset\n\t  }\n\t});\n\n\tfunction createBuffer (length) {\n\t  if (length > K_MAX_LENGTH) {\n\t    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n\t  }\n\t  // Return an augmented `Uint8Array` instance\n\t  const buf = new GlobalUint8Array(length);\n\t  Object.setPrototypeOf(buf, Buffer.prototype);\n\t  return buf\n\t}\n\n\t/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */\n\n\tfunction Buffer (arg, encodingOrOffset, length) {\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    if (typeof encodingOrOffset === 'string') {\n\t      throw new TypeError(\n\t        'The \"string\" argument must be of type string. Received type number'\n\t      )\n\t    }\n\t    return allocUnsafe(arg)\n\t  }\n\t  return from(arg, encodingOrOffset, length)\n\t}\n\n\tBuffer.poolSize = 8192; // not used by this implementation\n\n\tfunction from (value, encodingOrOffset, length) {\n\t  if (typeof value === 'string') {\n\t    return fromString(value, encodingOrOffset)\n\t  }\n\n\t  if (GlobalArrayBuffer.isView(value)) {\n\t    return fromArrayView(value)\n\t  }\n\n\t  if (value == null) {\n\t    throw new TypeError(\n\t      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n\t      'or Array-like Object. Received type ' + (typeof value)\n\t    )\n\t  }\n\n\t  if (isInstance(value, GlobalArrayBuffer) ||\n\t      (value && isInstance(value.buffer, GlobalArrayBuffer))) {\n\t    return fromArrayBuffer(value, encodingOrOffset, length)\n\t  }\n\n\t  if (typeof GlobalSharedArrayBuffer !== 'undefined' &&\n\t      (isInstance(value, GlobalSharedArrayBuffer) ||\n\t      (value && isInstance(value.buffer, GlobalSharedArrayBuffer)))) {\n\t    return fromArrayBuffer(value, encodingOrOffset, length)\n\t  }\n\n\t  if (typeof value === 'number') {\n\t    throw new TypeError(\n\t      'The \"value\" argument must not be of type number. Received type number'\n\t    )\n\t  }\n\n\t  const valueOf = value.valueOf && value.valueOf();\n\t  if (valueOf != null && valueOf !== value) {\n\t    return Buffer.from(valueOf, encodingOrOffset, length)\n\t  }\n\n\t  const b = fromObject(value);\n\t  if (b) return b\n\n\t  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n\t      typeof value[Symbol.toPrimitive] === 'function') {\n\t    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n\t  }\n\n\t  throw new TypeError(\n\t    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n\t    'or Array-like Object. Received type ' + (typeof value)\n\t  )\n\t}\n\n\t/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/\n\tBuffer.from = function (value, encodingOrOffset, length) {\n\t  return from(value, encodingOrOffset, length)\n\t};\n\n\t// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n\t// https://github.com/feross/buffer/pull/148\n\tObject.setPrototypeOf(Buffer.prototype, GlobalUint8Array.prototype);\n\tObject.setPrototypeOf(Buffer, GlobalUint8Array);\n\n\tfunction assertSize (size) {\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('\"size\" argument must be of type number')\n\t  } else if (size < 0) {\n\t    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n\t  }\n\t}\n\n\tfunction alloc (size, fill, encoding) {\n\t  assertSize(size);\n\t  if (size <= 0) {\n\t    return createBuffer(size)\n\t  }\n\t  if (fill !== undefined) {\n\t    // Only pay attention to encoding if it's a string. This\n\t    // prevents accidentally sending in a number that would\n\t    // be interpreted as a start offset.\n\t    return typeof encoding === 'string'\n\t      ? createBuffer(size).fill(fill, encoding)\n\t      : createBuffer(size).fill(fill)\n\t  }\n\t  return createBuffer(size)\n\t}\n\n\t/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/\n\tBuffer.alloc = function (size, fill, encoding) {\n\t  return alloc(size, fill, encoding)\n\t};\n\n\tfunction allocUnsafe (size) {\n\t  assertSize(size);\n\t  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n\t}\n\n\t/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */\n\tBuffer.allocUnsafe = function (size) {\n\t  return allocUnsafe(size)\n\t};\n\t/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */\n\tBuffer.allocUnsafeSlow = function (size) {\n\t  return allocUnsafe(size)\n\t};\n\n\tfunction fromString (string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') {\n\t    encoding = 'utf8';\n\t  }\n\n\t  if (!Buffer.isEncoding(encoding)) {\n\t    throw new TypeError('Unknown encoding: ' + encoding)\n\t  }\n\n\t  const length = byteLength(string, encoding) | 0;\n\t  let buf = createBuffer(length);\n\n\t  const actual = buf.write(string, encoding);\n\n\t  if (actual !== length) {\n\t    // Writing a hex string, for example, that contains invalid characters will\n\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t    // 'abxxcd' will be treated as 'ab')\n\t    buf = buf.slice(0, actual);\n\t  }\n\n\t  return buf\n\t}\n\n\tfunction fromArrayLike (array) {\n\t  const length = array.length < 0 ? 0 : checked(array.length) | 0;\n\t  const buf = createBuffer(length);\n\t  for (let i = 0; i < length; i += 1) {\n\t    buf[i] = array[i] & 255;\n\t  }\n\t  return buf\n\t}\n\n\tfunction fromArrayView (arrayView) {\n\t  if (isInstance(arrayView, GlobalUint8Array)) {\n\t    const copy = new GlobalUint8Array(arrayView);\n\t    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n\t  }\n\t  return fromArrayLike(arrayView)\n\t}\n\n\tfunction fromArrayBuffer (array, byteOffset, length) {\n\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t    throw new RangeError('\"offset\" is outside of buffer bounds')\n\t  }\n\n\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t    throw new RangeError('\"length\" is outside of buffer bounds')\n\t  }\n\n\t  let buf;\n\t  if (byteOffset === undefined && length === undefined) {\n\t    buf = new GlobalUint8Array(array);\n\t  } else if (length === undefined) {\n\t    buf = new GlobalUint8Array(array, byteOffset);\n\t  } else {\n\t    buf = new GlobalUint8Array(array, byteOffset, length);\n\t  }\n\n\t  // Return an augmented `Uint8Array` instance\n\t  Object.setPrototypeOf(buf, Buffer.prototype);\n\n\t  return buf\n\t}\n\n\tfunction fromObject (obj) {\n\t  if (Buffer.isBuffer(obj)) {\n\t    const len = checked(obj.length) | 0;\n\t    const buf = createBuffer(len);\n\n\t    if (buf.length === 0) {\n\t      return buf\n\t    }\n\n\t    obj.copy(buf, 0, 0, len);\n\t    return buf\n\t  }\n\n\t  if (obj.length !== undefined) {\n\t    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n\t      return createBuffer(0)\n\t    }\n\t    return fromArrayLike(obj)\n\t  }\n\n\t  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n\t    return fromArrayLike(obj.data)\n\t  }\n\t}\n\n\tfunction checked (length) {\n\t  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= K_MAX_LENGTH) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\n\tfunction SlowBuffer (length) {\n\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t    length = 0;\n\t  }\n\t  return Buffer.alloc(+length)\n\t}\n\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return b != null && b._isBuffer === true &&\n\t    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n\t};\n\n\tBuffer.compare = function compare (a, b) {\n\t  if (isInstance(a, GlobalUint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n\t  if (isInstance(b, GlobalUint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError(\n\t      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n\t    )\n\t  }\n\n\t  if (a === b) return 0\n\n\t  let x = a.length;\n\t  let y = b.length;\n\n\t  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n\t    if (a[i] !== b[i]) {\n\t      x = a[i];\n\t      y = b[i];\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t};\n\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'latin1':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t};\n\n\tBuffer.concat = function concat (list, length) {\n\t  if (!Array.isArray(list)) {\n\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t  }\n\n\t  if (list.length === 0) {\n\t    return Buffer.alloc(0)\n\t  }\n\n\t  let i;\n\t  if (length === undefined) {\n\t    length = 0;\n\t    for (i = 0; i < list.length; ++i) {\n\t      length += list[i].length;\n\t    }\n\t  }\n\n\t  const buffer = Buffer.allocUnsafe(length);\n\t  let pos = 0;\n\t  for (i = 0; i < list.length; ++i) {\n\t    let buf = list[i];\n\t    if (isInstance(buf, GlobalUint8Array)) {\n\t      if (pos + buf.length > buffer.length) {\n\t        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n\t        buf.copy(buffer, pos);\n\t      } else {\n\t        GlobalUint8Array.prototype.set.call(\n\t          buffer,\n\t          buf,\n\t          pos\n\t        );\n\t      }\n\t    } else if (!Buffer.isBuffer(buf)) {\n\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t    } else {\n\t      buf.copy(buffer, pos);\n\t    }\n\t    pos += buf.length;\n\t  }\n\t  return buffer\n\t};\n\n\tfunction byteLength (string, encoding) {\n\t  if (Buffer.isBuffer(string)) {\n\t    return string.length\n\t  }\n\t  if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n\t    return string.byteLength\n\t  }\n\t  if (typeof string !== 'string') {\n\t    throw new TypeError(\n\t      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n\t      'Received type ' + typeof string\n\t    )\n\t  }\n\n\t  const len = string.length;\n\t  const mustMatch = (arguments.length > 2 && arguments[2] === true);\n\t  if (!mustMatch && len === 0) return 0\n\n\t  // Use a for loop to avoid recursion\n\t  let loweredCase = false;\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) {\n\t          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n\t        }\n\t        encoding = ('' + encoding).toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength;\n\n\tfunction slowToString (encoding, start, end) {\n\t  let loweredCase = false;\n\n\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t  // property of a typed array.\n\n\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t  // to their upper/lower bounds if the value passed is out of range.\n\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t  if (start === undefined || start < 0) {\n\t    start = 0;\n\t  }\n\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t  // coercion fail below.\n\t  if (start > this.length) {\n\t    return ''\n\t  }\n\n\t  if (end === undefined || end > this.length) {\n\t    end = this.length;\n\t  }\n\n\t  if (end <= 0) {\n\t    return ''\n\t  }\n\n\t  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n\t  end >>>= 0;\n\t  start >>>= 0;\n\n\t  if (end <= start) {\n\t    return ''\n\t  }\n\n\t  if (!encoding) encoding = 'utf8';\n\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Slice(this, start, end)\n\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t}\n\n\t// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n\t// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n\t// reliably in a browserify context because there could be multiple different\n\t// copies of the 'buffer' package in use. This method works even for Buffer\n\t// instances that were created from another copy of the `buffer` package.\n\t// See: https://github.com/feross/buffer/issues/154\n\tBuffer.prototype._isBuffer = true;\n\n\tfunction swap (b, n, m) {\n\t  const i = b[n];\n\t  b[n] = b[m];\n\t  b[m] = i;\n\t}\n\n\tBuffer.prototype.swap16 = function swap16 () {\n\t  const len = this.length;\n\t  if (len % 2 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t  }\n\t  for (let i = 0; i < len; i += 2) {\n\t    swap(this, i, i + 1);\n\t  }\n\t  return this\n\t};\n\n\tBuffer.prototype.swap32 = function swap32 () {\n\t  const len = this.length;\n\t  if (len % 4 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t  }\n\t  for (let i = 0; i < len; i += 4) {\n\t    swap(this, i, i + 3);\n\t    swap(this, i + 1, i + 2);\n\t  }\n\t  return this\n\t};\n\n\tBuffer.prototype.swap64 = function swap64 () {\n\t  const len = this.length;\n\t  if (len % 8 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t  }\n\t  for (let i = 0; i < len; i += 8) {\n\t    swap(this, i, i + 7);\n\t    swap(this, i + 1, i + 6);\n\t    swap(this, i + 2, i + 5);\n\t    swap(this, i + 3, i + 4);\n\t  }\n\t  return this\n\t};\n\n\tBuffer.prototype.toString = function toString () {\n\t  const length = this.length;\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t};\n\n\tBuffer.prototype.toLocaleString = Buffer.prototype.toString;\n\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t};\n\n\tBuffer.prototype.inspect = function inspect () {\n\t  let str = '';\n\t  const max = exports.INSPECT_MAX_BYTES;\n\t  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n\t  if (this.length > max) str += ' ... ';\n\t  return '<Buffer ' + str + '>'\n\t};\n\tif (customInspectSymbol) {\n\t  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n\t}\n\n\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t  if (isInstance(target, GlobalUint8Array)) {\n\t    target = Buffer.from(target, target.offset, target.byteLength);\n\t  }\n\t  if (!Buffer.isBuffer(target)) {\n\t    throw new TypeError(\n\t      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n\t      'Received type ' + (typeof target)\n\t    )\n\t  }\n\n\t  if (start === undefined) {\n\t    start = 0;\n\t  }\n\t  if (end === undefined) {\n\t    end = target ? target.length : 0;\n\t  }\n\t  if (thisStart === undefined) {\n\t    thisStart = 0;\n\t  }\n\t  if (thisEnd === undefined) {\n\t    thisEnd = this.length;\n\t  }\n\n\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t    throw new RangeError('out of range index')\n\t  }\n\n\t  if (thisStart >= thisEnd && start >= end) {\n\t    return 0\n\t  }\n\t  if (thisStart >= thisEnd) {\n\t    return -1\n\t  }\n\t  if (start >= end) {\n\t    return 1\n\t  }\n\n\t  start >>>= 0;\n\t  end >>>= 0;\n\t  thisStart >>>= 0;\n\t  thisEnd >>>= 0;\n\n\t  if (this === target) return 0\n\n\t  let x = thisEnd - thisStart;\n\t  let y = end - start;\n\t  const len = Math.min(x, y);\n\n\t  const thisCopy = this.slice(thisStart, thisEnd);\n\t  const targetCopy = target.slice(start, end);\n\n\t  for (let i = 0; i < len; ++i) {\n\t    if (thisCopy[i] !== targetCopy[i]) {\n\t      x = thisCopy[i];\n\t      y = targetCopy[i];\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t};\n\n\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t//\n\t// Arguments:\n\t// - buffer - a Buffer to search\n\t// - val - a string, Buffer, or number\n\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t// - encoding - an optional encoding, relevant is val is a string\n\t// - dir - true for indexOf, false for lastIndexOf\n\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t  // Empty buffer means no match\n\t  if (buffer.length === 0) return -1\n\n\t  // Normalize byteOffset\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset;\n\t    byteOffset = 0;\n\t  } else if (byteOffset > 0x7fffffff) {\n\t    byteOffset = 0x7fffffff;\n\t  } else if (byteOffset < -0x80000000) {\n\t    byteOffset = -0x80000000;\n\t  }\n\t  byteOffset = +byteOffset; // Coerce to Number.\n\t  if (numberIsNaN(byteOffset)) {\n\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t    byteOffset = dir ? 0 : (buffer.length - 1);\n\t  }\n\n\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\t  if (byteOffset >= buffer.length) {\n\t    if (dir) return -1\n\t    else byteOffset = buffer.length - 1;\n\t  } else if (byteOffset < 0) {\n\t    if (dir) byteOffset = 0;\n\t    else return -1\n\t  }\n\n\t  // Normalize val\n\t  if (typeof val === 'string') {\n\t    val = Buffer.from(val, encoding);\n\t  }\n\n\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t  if (Buffer.isBuffer(val)) {\n\t    // Special case: looking for empty string/buffer always fails\n\t    if (val.length === 0) {\n\t      return -1\n\t    }\n\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t  } else if (typeof val === 'number') {\n\t    val = val & 0xFF; // Search for a byte value [0-255]\n\t    if (typeof GlobalUint8Array.prototype.indexOf === 'function') {\n\t      if (dir) {\n\t        return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t      } else {\n\t        return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t      }\n\t    }\n\t    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n\t  }\n\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\n\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t  let indexSize = 1;\n\t  let arrLength = arr.length;\n\t  let valLength = val.length;\n\n\t  if (encoding !== undefined) {\n\t    encoding = String(encoding).toLowerCase();\n\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t      if (arr.length < 2 || val.length < 2) {\n\t        return -1\n\t      }\n\t      indexSize = 2;\n\t      arrLength /= 2;\n\t      valLength /= 2;\n\t      byteOffset /= 2;\n\t    }\n\t  }\n\n\t  function read (buf, i) {\n\t    if (indexSize === 1) {\n\t      return buf[i]\n\t    } else {\n\t      return buf.readUInt16BE(i * indexSize)\n\t    }\n\t  }\n\n\t  let i;\n\t  if (dir) {\n\t    let foundIndex = -1;\n\t    for (i = byteOffset; i < arrLength; i++) {\n\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t        if (foundIndex === -1) foundIndex = i;\n\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex;\n\t        foundIndex = -1;\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\t    for (i = byteOffset; i >= 0; i--) {\n\t      let found = true;\n\t      for (let j = 0; j < valLength; j++) {\n\t        if (read(arr, i + j) !== read(val, j)) {\n\t          found = false;\n\t          break\n\t        }\n\t      }\n\t      if (found) return i\n\t    }\n\t  }\n\n\t  return -1\n\t}\n\n\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t};\n\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t};\n\n\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t};\n\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0;\n\t  const remaining = buf.length - offset;\n\t  if (!length) {\n\t    length = remaining;\n\t  } else {\n\t    length = Number(length);\n\t    if (length > remaining) {\n\t      length = remaining;\n\t    }\n\t  }\n\n\t  const strLen = string.length;\n\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2;\n\t  }\n\t  let i;\n\t  for (i = 0; i < length; ++i) {\n\t    const parsed = parseInt(string.substr(i * 2, 2), 16);\n\t    if (numberIsNaN(parsed)) return i\n\t    buf[offset + i] = parsed;\n\t  }\n\t  return i\n\t}\n\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8';\n\t    length = this.length;\n\t    offset = 0;\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset;\n\t    length = this.length;\n\t    offset = 0;\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset >>> 0;\n\t    if (isFinite(length)) {\n\t      length = length >>> 0;\n\t      if (encoding === undefined) encoding = 'utf8';\n\t    } else {\n\t      encoding = length;\n\t      length = undefined;\n\t    }\n\t  } else {\n\t    throw new Error(\n\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t    )\n\t  }\n\n\t  const remaining = this.length - offset;\n\t  if (length === undefined || length > remaining) length = remaining;\n\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t  }\n\n\t  if (!encoding) encoding = 'utf8';\n\n\t  let loweredCase = false;\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return asciiWrite(this, string, offset, length)\n\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t};\n\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t};\n\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end);\n\t  const res = [];\n\n\t  let i = start;\n\t  while (i < end) {\n\t    const firstByte = buf[i];\n\t    let codePoint = null;\n\t    let bytesPerSequence = (firstByte > 0xEF)\n\t      ? 4\n\t      : (firstByte > 0xDF)\n\t          ? 3\n\t          : (firstByte > 0xBF)\n\t              ? 2\n\t              : 1;\n\n\t    if (i + bytesPerSequence <= end) {\n\t      let secondByte, thirdByte, fourthByte, tempCodePoint;\n\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte;\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1];\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1];\n\t          thirdByte = buf[i + 2];\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1];\n\t          thirdByte = buf[i + 2];\n\t          fourthByte = buf[i + 3];\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t      }\n\t    }\n\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD;\n\t      bytesPerSequence = 1;\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000;\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n\t      codePoint = 0xDC00 | codePoint & 0x3FF;\n\t    }\n\n\t    res.push(codePoint);\n\t    i += bytesPerSequence;\n\t  }\n\n\t  return decodeCodePointsArray(res)\n\t}\n\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tconst MAX_ARGUMENTS_LENGTH = 0x1000;\n\n\tfunction decodeCodePointsArray (codePoints) {\n\t  const len = codePoints.length;\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  let res = '';\n\t  let i = 0;\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    );\n\t  }\n\t  return res\n\t}\n\n\tfunction asciiSlice (buf, start, end) {\n\t  let ret = '';\n\t  end = Math.min(buf.length, end);\n\n\t  for (let i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F);\n\t  }\n\t  return ret\n\t}\n\n\tfunction latin1Slice (buf, start, end) {\n\t  let ret = '';\n\t  end = Math.min(buf.length, end);\n\n\t  for (let i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i]);\n\t  }\n\t  return ret\n\t}\n\n\tfunction hexSlice (buf, start, end) {\n\t  const len = buf.length;\n\n\t  if (!start || start < 0) start = 0;\n\t  if (!end || end < 0 || end > len) end = len;\n\n\t  let out = '';\n\t  for (let i = start; i < end; ++i) {\n\t    out += hexSliceLookupTable[buf[i]];\n\t  }\n\t  return out\n\t}\n\n\tfunction utf16leSlice (buf, start, end) {\n\t  const bytes = buf.slice(start, end);\n\t  let res = '';\n\t  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n\t  for (let i = 0; i < bytes.length - 1; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));\n\t  }\n\t  return res\n\t}\n\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  const len = this.length;\n\t  start = ~~start;\n\t  end = end === undefined ? len : ~~end;\n\n\t  if (start < 0) {\n\t    start += len;\n\t    if (start < 0) start = 0;\n\t  } else if (start > len) {\n\t    start = len;\n\t  }\n\n\t  if (end < 0) {\n\t    end += len;\n\t    if (end < 0) end = 0;\n\t  } else if (end > len) {\n\t    end = len;\n\t  }\n\n\t  if (end < start) end = start;\n\n\t  const newBuf = this.subarray(start, end);\n\t  // Return an augmented `Uint8Array` instance\n\t  Object.setPrototypeOf(newBuf, Buffer.prototype);\n\n\t  return newBuf\n\t};\n\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\n\tBuffer.prototype.readUintLE =\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  let val = this[offset];\n\t  let mul = 1;\n\t  let i = 0;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul;\n\t  }\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readUintBE =\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length);\n\t  }\n\n\t  let val = this[offset + --byteLength];\n\t  let mul = 1;\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul;\n\t  }\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readUint8 =\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 1, this.length);\n\t  return this[offset]\n\t};\n\n\tBuffer.prototype.readUint16LE =\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  return this[offset] | (this[offset + 1] << 8)\n\t};\n\n\tBuffer.prototype.readUint16BE =\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  return (this[offset] << 8) | this[offset + 1]\n\t};\n\n\tBuffer.prototype.readUint32LE =\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t};\n\n\tBuffer.prototype.readUint32BE =\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t};\n\n\tBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const lo = first +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 24;\n\n\t  const hi = this[++offset] +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset] * 2 ** 16 +\n\t    last * 2 ** 24;\n\n\t  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n\t});\n\n\tBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const hi = first * 2 ** 24 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset];\n\n\t  const lo = this[++offset] * 2 ** 24 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    last;\n\n\t  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n\t});\n\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  let val = this[offset];\n\t  let mul = 1;\n\t  let i = 0;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul;\n\t  }\n\t  mul *= 0x80;\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  let i = byteLength;\n\t  let mul = 1;\n\t  let val = this[offset + --i];\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul;\n\t  }\n\t  mul *= 0x80;\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 1, this.length);\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t};\n\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  const val = this[offset] | (this[offset + 1] << 8);\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t};\n\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  const val = this[offset + 1] | (this[offset] << 8);\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t};\n\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t};\n\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t};\n\n\tBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const val = this[offset + 4] +\n\t    this[offset + 5] * 2 ** 8 +\n\t    this[offset + 6] * 2 ** 16 +\n\t    (last << 24); // Overflow\n\n\t  return (BigInt(val) << BigInt(32)) +\n\t    BigInt(first +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 24)\n\t});\n\n\tBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const val = (first << 24) + // Overflow\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset];\n\n\t  return (BigInt(val) << BigInt(32)) +\n\t    BigInt(this[++offset] * 2 ** 24 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    last)\n\t});\n\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\t  return ieee754$1.read(this, offset, true, 23, 4)\n\t};\n\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\t  return ieee754$1.read(this, offset, false, 23, 4)\n\t};\n\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 8, this.length);\n\t  return ieee754$1.read(this, offset, true, 52, 8)\n\t};\n\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 8, this.length);\n\t  return ieee754$1.read(this, offset, false, 52, 8)\n\t};\n\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t}\n\n\tBuffer.prototype.writeUintLE =\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) {\n\t    const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0);\n\t  }\n\n\t  let mul = 1;\n\t  let i = 0;\n\t  this[offset] = value & 0xFF;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeUintBE =\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) {\n\t    const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0);\n\t  }\n\n\t  let i = byteLength - 1;\n\t  let mul = 1;\n\t  this[offset + i] = value & 0xFF;\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeUint8 =\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n\t  this[offset] = (value & 0xff);\n\t  return offset + 1\n\t};\n\n\tBuffer.prototype.writeUint16LE =\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\t  this[offset] = (value & 0xff);\n\t  this[offset + 1] = (value >>> 8);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeUint16BE =\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\t  this[offset] = (value >>> 8);\n\t  this[offset + 1] = (value & 0xff);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeUint32LE =\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\t  this[offset + 3] = (value >>> 24);\n\t  this[offset + 2] = (value >>> 16);\n\t  this[offset + 1] = (value >>> 8);\n\t  this[offset] = (value & 0xff);\n\t  return offset + 4\n\t};\n\n\tBuffer.prototype.writeUint32BE =\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\t  this[offset] = (value >>> 24);\n\t  this[offset + 1] = (value >>> 16);\n\t  this[offset + 2] = (value >>> 8);\n\t  this[offset + 3] = (value & 0xff);\n\t  return offset + 4\n\t};\n\n\tfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n\t  checkIntBI(value, min, max, buf, offset, 7);\n\n\t  let lo = Number(value & BigInt(0xffffffff));\n\t  buf[offset++] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset++] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset++] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset++] = lo;\n\t  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n\t  buf[offset++] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset++] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset++] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset++] = hi;\n\t  return offset\n\t}\n\n\tfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n\t  checkIntBI(value, min, max, buf, offset, 7);\n\n\t  let lo = Number(value & BigInt(0xffffffff));\n\t  buf[offset + 7] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset + 6] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset + 5] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset + 4] = lo;\n\t  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n\t  buf[offset + 3] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset + 2] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset + 1] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset] = hi;\n\t  return offset + 8\n\t}\n\n\tBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n\t  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n\t});\n\n\tBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n\t  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n\t});\n\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    const limit = Math.pow(2, (8 * byteLength) - 1);\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n\t  }\n\n\t  let i = 0;\n\t  let mul = 1;\n\t  let sub = 0;\n\t  this[offset] = value & 0xFF;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t      sub = 1;\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    const limit = Math.pow(2, (8 * byteLength) - 1);\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n\t  }\n\n\t  let i = byteLength - 1;\n\t  let mul = 1;\n\t  let sub = 0;\n\t  this[offset + i] = value & 0xFF;\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t      sub = 1;\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n\t  if (value < 0) value = 0xff + value + 1;\n\t  this[offset] = (value & 0xff);\n\t  return offset + 1\n\t};\n\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\t  this[offset] = (value & 0xff);\n\t  this[offset + 1] = (value >>> 8);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\t  this[offset] = (value >>> 8);\n\t  this[offset + 1] = (value & 0xff);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\t  this[offset] = (value & 0xff);\n\t  this[offset + 1] = (value >>> 8);\n\t  this[offset + 2] = (value >>> 16);\n\t  this[offset + 3] = (value >>> 24);\n\t  return offset + 4\n\t};\n\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\t  if (value < 0) value = 0xffffffff + value + 1;\n\t  this[offset] = (value >>> 24);\n\t  this[offset + 1] = (value >>> 16);\n\t  this[offset + 2] = (value >>> 8);\n\t  this[offset + 3] = (value & 0xff);\n\t  return offset + 4\n\t};\n\n\tBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n\t  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n\t});\n\n\tBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n\t  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n\t});\n\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t  if (offset < 0) throw new RangeError('Index out of range')\n\t}\n\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4);\n\t  }\n\t  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t};\n\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t};\n\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8);\n\t  }\n\t  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);\n\t  return offset + 8\n\t}\n\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t};\n\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t};\n\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n\t  if (!start) start = 0;\n\t  if (!end && end !== 0) end = this.length;\n\t  if (targetStart >= target.length) targetStart = target.length;\n\t  if (!targetStart) targetStart = 0;\n\t  if (end > 0 && end < start) end = start;\n\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length;\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start;\n\t  }\n\n\t  const len = end - start;\n\n\t  if (this === target && typeof GlobalUint8Array.prototype.copyWithin === 'function') {\n\t    // Use built-in when available, missing from IE11\n\t    this.copyWithin(targetStart, start, end);\n\t  } else {\n\t    GlobalUint8Array.prototype.set.call(\n\t      target,\n\t      this.subarray(start, end),\n\t      targetStart\n\t    );\n\t  }\n\n\t  return len\n\t};\n\n\t// Usage:\n\t//    buffer.fill(number[, offset[, end]])\n\t//    buffer.fill(buffer[, offset[, end]])\n\t//    buffer.fill(string[, offset[, end]][, encoding])\n\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t  // Handle string cases:\n\t  if (typeof val === 'string') {\n\t    if (typeof start === 'string') {\n\t      encoding = start;\n\t      start = 0;\n\t      end = this.length;\n\t    } else if (typeof end === 'string') {\n\t      encoding = end;\n\t      end = this.length;\n\t    }\n\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t      throw new TypeError('encoding must be a string')\n\t    }\n\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t    if (val.length === 1) {\n\t      const code = val.charCodeAt(0);\n\t      if ((encoding === 'utf8' && code < 128) ||\n\t          encoding === 'latin1') {\n\t        // Fast path: If `val` fits into a single byte, use that numeric value.\n\t        val = code;\n\t      }\n\t    }\n\t  } else if (typeof val === 'number') {\n\t    val = val & 255;\n\t  } else if (typeof val === 'boolean') {\n\t    val = Number(val);\n\t  }\n\n\t  // Invalid ranges are not set to a default, so can range check early.\n\t  if (start < 0 || this.length < start || this.length < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\n\t  if (end <= start) {\n\t    return this\n\t  }\n\n\t  start = start >>> 0;\n\t  end = end === undefined ? this.length : end >>> 0;\n\n\t  if (!val) val = 0;\n\n\t  let i;\n\t  if (typeof val === 'number') {\n\t    for (i = start; i < end; ++i) {\n\t      this[i] = val;\n\t    }\n\t  } else {\n\t    const bytes = Buffer.isBuffer(val)\n\t      ? val\n\t      : Buffer.from(val, encoding);\n\t    const len = bytes.length;\n\t    if (len === 0) {\n\t      throw new TypeError('The value \"' + val +\n\t        '\" is invalid for argument \"value\"')\n\t    }\n\t    for (i = 0; i < end - start; ++i) {\n\t      this[i + start] = bytes[i % len];\n\t    }\n\t  }\n\n\t  return this\n\t};\n\n\t// CUSTOM ERRORS\n\t// =============\n\n\t// Simplified versions from Node, changed for Buffer-only usage\n\tconst errors = {};\n\tfunction E (sym, getMessage, Base) {\n\t  errors[sym] = class NodeError extends Base {\n\t    constructor () {\n\t      super();\n\n\t      Object.defineProperty(this, 'message', {\n\t        value: getMessage.apply(this, arguments),\n\t        writable: true,\n\t        configurable: true\n\t      });\n\n\t      // Add the error code to the name to include it in the stack trace.\n\t      this.name = `${this.name} [${sym}]`;\n\t      // Access the stack to generate the error message including the error code\n\t      // from the name.\n\t      this.stack; // eslint-disable-line no-unused-expressions\n\t      // Reset the name to the actual name.\n\t      delete this.name;\n\t    }\n\n\t    get code () {\n\t      return sym\n\t    }\n\n\t    set code (value) {\n\t      Object.defineProperty(this, 'code', {\n\t        configurable: true,\n\t        enumerable: true,\n\t        value,\n\t        writable: true\n\t      });\n\t    }\n\n\t    toString () {\n\t      return `${this.name} [${sym}]: ${this.message}`\n\t    }\n\t  };\n\t}\n\n\tE('ERR_BUFFER_OUT_OF_BOUNDS',\n\t  function (name) {\n\t    if (name) {\n\t      return `${name} is outside of buffer bounds`\n\t    }\n\n\t    return 'Attempt to access memory outside buffer bounds'\n\t  }, RangeError);\n\tE('ERR_INVALID_ARG_TYPE',\n\t  function (name, actual) {\n\t    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n\t  }, TypeError);\n\tE('ERR_OUT_OF_RANGE',\n\t  function (str, range, input) {\n\t    let msg = `The value of \"${str}\" is out of range.`;\n\t    let received = input;\n\t    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n\t      received = addNumericalSeparator(String(input));\n\t    } else if (typeof input === 'bigint') {\n\t      received = String(input);\n\t      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n\t        received = addNumericalSeparator(received);\n\t      }\n\t      received += 'n';\n\t    }\n\t    msg += ` It must be ${range}. Received ${received}`;\n\t    return msg\n\t  }, RangeError);\n\n\tfunction addNumericalSeparator (val) {\n\t  let res = '';\n\t  let i = val.length;\n\t  const start = val[0] === '-' ? 1 : 0;\n\t  for (; i >= start + 4; i -= 3) {\n\t    res = `_${val.slice(i - 3, i)}${res}`;\n\t  }\n\t  return `${val.slice(0, i)}${res}`\n\t}\n\n\t// CHECK FUNCTIONS\n\t// ===============\n\n\tfunction checkBounds (buf, offset, byteLength) {\n\t  validateNumber(offset, 'offset');\n\t  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n\t    boundsError(offset, buf.length - (byteLength + 1));\n\t  }\n\t}\n\n\tfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n\t  if (value > max || value < min) {\n\t    const n = typeof min === 'bigint' ? 'n' : '';\n\t    let range;\n\t    if (byteLength > 3) {\n\t      if (min === 0 || min === BigInt(0)) {\n\t        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\n\t      } else {\n\t        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n\t                `${(byteLength + 1) * 8 - 1}${n}`;\n\t      }\n\t    } else {\n\t      range = `>= ${min}${n} and <= ${max}${n}`;\n\t    }\n\t    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n\t  }\n\t  checkBounds(buf, offset, byteLength);\n\t}\n\n\tfunction validateNumber (value, name) {\n\t  if (typeof value !== 'number') {\n\t    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n\t  }\n\t}\n\n\tfunction boundsError (value, length, type) {\n\t  if (Math.floor(value) !== value) {\n\t    validateNumber(value, type);\n\t    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n\t  }\n\n\t  if (length < 0) {\n\t    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n\t  }\n\n\t  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n\t                                    `>= ${type ? 1 : 0} and <= ${length}`,\n\t                                    value)\n\t}\n\n\t// HELPER FUNCTIONS\n\t// ================\n\n\tconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n\n\tfunction base64clean (str) {\n\t  // Node takes equal signs as end of the Base64 encoding\n\t  str = str.split('=')[0];\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = str.trim().replace(INVALID_BASE64_RE, '');\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '=';\n\t  }\n\t  return str\n\t}\n\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity;\n\t  let codePoint;\n\t  const length = string.length;\n\t  let leadSurrogate = null;\n\t  const bytes = [];\n\n\t  for (let i = 0; i < length; ++i) {\n\t    codePoint = string.charCodeAt(i);\n\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t          continue\n\t        }\n\n\t        // valid lead\n\t        leadSurrogate = codePoint;\n\n\t        continue\n\t      }\n\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t        leadSurrogate = codePoint;\n\t        continue\n\t      }\n\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t    }\n\n\t    leadSurrogate = null;\n\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint);\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\n\t  return bytes\n\t}\n\n\tfunction asciiToBytes (str) {\n\t  const byteArray = [];\n\t  for (let i = 0; i < str.length; ++i) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF);\n\t  }\n\t  return byteArray\n\t}\n\n\tfunction utf16leToBytes (str, units) {\n\t  let c, hi, lo;\n\t  const byteArray = [];\n\t  for (let i = 0; i < str.length; ++i) {\n\t    if ((units -= 2) < 0) break\n\n\t    c = str.charCodeAt(i);\n\t    hi = c >> 8;\n\t    lo = c % 256;\n\t    byteArray.push(lo);\n\t    byteArray.push(hi);\n\t  }\n\n\t  return byteArray\n\t}\n\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  let i;\n\t  for (i = 0; i < length; ++i) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i];\n\t  }\n\t  return i\n\t}\n\n\t// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n\t// the `instanceof` check but they should be treated as of that type.\n\t// See: https://github.com/feross/buffer/issues/166\n\tfunction isInstance (obj, type) {\n\t  return obj instanceof type ||\n\t    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n\t      obj.constructor.name === type.name)\n\t}\n\tfunction numberIsNaN (obj) {\n\t  // For IE11 support\n\t  return obj !== obj // eslint-disable-line no-self-compare\n\t}\n\n\t// Create lookup table for `toString('hex')`\n\t// See: https://github.com/feross/buffer/issues/219\n\tconst hexSliceLookupTable = (function () {\n\t  const alphabet = '0123456789abcdef';\n\t  const table = new Array(256);\n\t  for (let i = 0; i < 16; ++i) {\n\t    const i16 = i * 16;\n\t    for (let j = 0; j < 16; ++j) {\n\t      table[i16 + j] = alphabet[i] + alphabet[j];\n\t    }\n\t  }\n\t  return table\n\t})();\n\n\t// Return not function with Error if BigInt not supported\n\tfunction defineBigIntMethod (fn) {\n\t  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n\t}\n\n\tfunction BufferBigIntNotDefined () {\n\t  throw new Error('BigInt not supported')\n\t} \n} (buffer));\n\nconst Buffer = buffer.Buffer;\n\nconst Blob = buffer.Blob;\nconst BlobOptions = buffer.BlobOptions;\nconst Buffer$1 = buffer.Buffer;\nconst File = buffer.File;\nconst FileOptions = buffer.FileOptions;\nconst INSPECT_MAX_BYTES = buffer.INSPECT_MAX_BYTES;\nconst SlowBuffer = buffer.SlowBuffer;\nconst TranscodeEncoding = buffer.TranscodeEncoding;\nconst atob = buffer.atob;\nconst btoa = buffer.btoa;\nconst constants = buffer.constants;\nconst isAscii = buffer.isAscii;\nconst isUtf8 = buffer.isUtf8;\nconst kMaxLength = buffer.kMaxLength;\nconst kStringMaxLength = buffer.kStringMaxLength;\nconst resolveObjectURL = buffer.resolveObjectURL;\nconst transcode = buffer.transcode;\nexport { Blob, BlobOptions, Buffer$1 as Buffer, File, FileOptions, INSPECT_MAX_BYTES, SlowBuffer, TranscodeEncoding, atob, btoa, constants, Buffer as default, isAscii, isUtf8, kMaxLength, kStringMaxLength, resolveObjectURL, transcode };\n//# sourceMappingURL=index.js.map\n","/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nimport { Buffer } from \"buffer\";\nexport class PlatformTools {\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable() {\n        if (typeof window !== \"undefined\") {\n            return window;\n        }\n        else {\n            // NativeScript uses global, not window\n            return global;\n        }\n    }\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n        return \"\";\n    }\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n        return \"\";\n    }\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n        return \"\";\n    }\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n        return \"\";\n    }\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n        return false;\n    }\n    static dotenv(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name) {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n    static readFileSync(filename) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n    static appendFileSync(filename, data) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n    static writeFile(path, data) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql) {\n        return sql;\n    }\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json) {\n        return json;\n    }\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix, info) {\n        console.info(prefix + \" \", info);\n    }\n    static logError(prefix, error) {\n        console.error(prefix + \" \", error);\n    }\n    static logWarn(prefix, warning) {\n        console.warn(prefix + \" \", warning);\n    }\n    static log(message) {\n        console.log(message);\n    }\n    static warn(message) {\n        return message;\n    }\n}\n/**\n * Type of the currently running platform.\n */\nPlatformTools.type = \"browser\";\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {\n}\nexport class Readable {\n}\nexport class Writable {\n}\nif (typeof window !== \"undefined\") {\n    window.Buffer = Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n\n//# sourceMappingURL=BrowserPlatformTools.js.map\n","export class ObjectUtils {\n    /**\n     * Checks if given value is an object.\n     * We cannot use instanceof because it has problems when running on different contexts.\n     * And we don't simply use typeof because typeof null === \"object\".\n     */\n    static isObject(val) {\n        return val !== null && typeof val === \"object\";\n    }\n    /**\n     * Checks if given value is an object.\n     * We cannot use instanceof because it has problems when running on different contexts.\n     * And we don't simply use typeof because typeof null === \"object\".\n     */\n    static isObjectWithName(val) {\n        return (val !== null && typeof val === \"object\" && val[\"name\"] !== undefined);\n    }\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object.\n     * @param target The target object to copy to.\n     * @param sources One or more source objects from which to copy properties\n     */\n    static assign(target, ...sources) {\n        for (const source of sources) {\n            for (const prop of Object.getOwnPropertyNames(source)) {\n                ;\n                target[prop] = source[prop];\n            }\n        }\n    }\n    /**\n     * Converts MixedList<T> to strictly an array of its T items.\n     */\n    static mixedListToArray(list) {\n        if (list !== null && typeof list === \"object\") {\n            return Object.keys(list).map((key) => list[key]);\n        }\n        else {\n            return list;\n        }\n    }\n}\n\n//# sourceMappingURL=ObjectUtils.js.map\n","export class TypeORMError extends Error {\n    get name() {\n        return this.constructor.name;\n    }\n    constructor(message) {\n        super(message);\n        // restore prototype chain because the base `Error` type\n        // will break the prototype chain a little\n        if (Object.setPrototypeOf) {\n            Object.setPrototypeOf(this, new.target.prototype);\n        }\n        else {\n            ;\n            this.__proto__ = new.target.prototype;\n        }\n    }\n}\n\n//# sourceMappingURL=TypeORMError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when operation is going to be executed on a subject without identifier.\n * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.\n * If this error occurs still, it most probably is an ORM internal problem which must be reported and fixed.\n */\nexport class SubjectWithoutIdentifierError extends TypeORMError {\n    constructor(subject) {\n        super(`Internal error. Subject ${subject.metadata.targetName} must have an identifier to perform operation.`);\n    }\n}\n\n//# sourceMappingURL=SubjectWithoutIdentifierError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when consumer tries to connect when he already connected.\n */\nexport class CannotConnectAlreadyConnectedError extends TypeORMError {\n    constructor(connectionName) {\n        super(`Cannot create a \"${connectionName}\" connection because connection to the database already established.`);\n    }\n}\n\n//# sourceMappingURL=CannotConnectAlreadyConnectedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when selected sql driver does not supports locking.\n */\nexport class LockNotSupportedOnGivenDriverError extends TypeORMError {\n    constructor() {\n        super(`Locking not supported on given driver.`);\n    }\n}\n\n//# sourceMappingURL=LockNotSupportedOnGivenDriverError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nexport class ConnectionIsNotSetError extends TypeORMError {\n    constructor(dbType) {\n        super(`Connection with ${dbType} database is not established. Check connection configuration.`);\n    }\n}\n\n//# sourceMappingURL=ConnectionIsNotSetError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user tries to create entity id map from the mixed id value,\n * but id value is a single value when entity requires multiple values.\n */\nexport class CannotCreateEntityIdMapError extends TypeORMError {\n    constructor(metadata, id) {\n        super();\n        const objectExample = metadata.primaryColumns.reduce((object, column, index) => {\n            column.setEntityValue(object, index + 1);\n            return object;\n        }, {});\n        this.message = `Cannot use given entity id \"${id}\" because \"${metadata.targetName}\" contains multiple primary columns, you must provide object in following form: ${JSON.stringify(objectExample)} as an id.`;\n    }\n}\n\n//# sourceMappingURL=CannotCreateEntityIdMapError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.\n */\nexport class CannotDetermineEntityError extends TypeORMError {\n    constructor(operation) {\n        super(`Cannot ${operation}, given value must be instance of entity class, ` +\n            `instead object literal is given. Or you must specify an entity target to method call.`);\n    }\n}\n\n//# sourceMappingURL=CannotDetermineEntityError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nexport class UpdateValuesMissingError extends TypeORMError {\n    constructor() {\n        super(`Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify updated values.`);\n    }\n}\n\n//# sourceMappingURL=UpdateValuesMissingError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nexport class TreeRepositoryNotSupportedError extends TypeORMError {\n    constructor(driver) {\n        super(`Tree repositories are not supported in ${driver.options.type} driver.`);\n    }\n}\n\n//# sourceMappingURL=TreeRepositoryNotSupportedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown if custom repository was not found.\n */\nexport class CustomRepositoryNotFoundError extends TypeORMError {\n    constructor(repository) {\n        super(`Custom repository ${typeof repository === \"function\"\n            ? repository.name\n            : repository.constructor.name} was not found. ` +\n            `Did you forgot to put @EntityRepository decorator on it?`);\n    }\n}\n\n//# sourceMappingURL=CustomRepositoryNotFoundError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\n */\nexport class TransactionNotStartedError extends TypeORMError {\n    constructor() {\n        super(`Transaction is not started yet, start transaction before committing or rolling it back.`);\n    }\n}\n\n//# sourceMappingURL=TransactionNotStartedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when transaction is already started and user tries to run it again.\n */\nexport class TransactionAlreadyStartedError extends TypeORMError {\n    constructor() {\n        super(`Transaction already started for the given connection, commit current transaction before starting a new one.`);\n    }\n}\n\n//# sourceMappingURL=TransactionAlreadyStartedError.js.map\n","export class InstanceChecker {\n    static isMssqlParameter(obj) {\n        return this.check(obj, \"MssqlParameter\");\n    }\n    static isEntityMetadata(obj) {\n        return this.check(obj, \"EntityMetadata\");\n    }\n    static isColumnMetadata(obj) {\n        return this.check(obj, \"ColumnMetadata\");\n    }\n    static isSelectQueryBuilder(obj) {\n        return this.check(obj, \"SelectQueryBuilder\");\n    }\n    static isInsertQueryBuilder(obj) {\n        return this.check(obj, \"InsertQueryBuilder\");\n    }\n    static isDeleteQueryBuilder(obj) {\n        return this.check(obj, \"DeleteQueryBuilder\");\n    }\n    static isUpdateQueryBuilder(obj) {\n        return this.check(obj, \"UpdateQueryBuilder\");\n    }\n    static isSoftDeleteQueryBuilder(obj) {\n        return this.check(obj, \"SoftDeleteQueryBuilder\");\n    }\n    static isRelationQueryBuilder(obj) {\n        return this.check(obj, \"RelationQueryBuilder\");\n    }\n    static isBrackets(obj) {\n        return this.check(obj, \"Brackets\") || this.check(obj, \"NotBrackets\");\n    }\n    static isNotBrackets(obj) {\n        return this.check(obj, \"NotBrackets\");\n    }\n    static isSubject(obj) {\n        return this.check(obj, \"Subject\");\n    }\n    static isRdbmsSchemaBuilder(obj) {\n        return this.check(obj, \"RdbmsSchemaBuilder\");\n    }\n    static isMongoEntityManager(obj) {\n        return this.check(obj, \"MongoEntityManager\");\n    }\n    static isSqljsEntityManager(obj) {\n        return this.check(obj, \"SqljsEntityManager\");\n    }\n    static isEntitySchema(obj) {\n        return this.check(obj, \"EntitySchema\");\n    }\n    static isBaseEntityConstructor(obj) {\n        return (typeof obj === \"function\" &&\n            typeof obj.hasId === \"function\" &&\n            typeof obj.save === \"function\" &&\n            typeof obj.useDataSource === \"function\");\n    }\n    static isFindOperator(obj) {\n        return (this.check(obj, \"FindOperator\") || this.check(obj, \"EqualOperator\"));\n    }\n    static isEqualOperator(obj) {\n        return this.check(obj, \"EqualOperator\");\n    }\n    static isQuery(obj) {\n        return this.check(obj, \"Query\");\n    }\n    static isTable(obj) {\n        return this.check(obj, \"Table\");\n    }\n    static isTableCheck(obj) {\n        return this.check(obj, \"TableCheck\");\n    }\n    static isTableColumn(obj) {\n        return this.check(obj, \"TableColumn\");\n    }\n    static isTableExclusion(obj) {\n        return this.check(obj, \"TableExclusion\");\n    }\n    static isTableForeignKey(obj) {\n        return this.check(obj, \"TableForeignKey\");\n    }\n    static isTableIndex(obj) {\n        return this.check(obj, \"TableIndex\");\n    }\n    static isTableUnique(obj) {\n        return this.check(obj, \"TableUnique\");\n    }\n    static isView(obj) {\n        return this.check(obj, \"View\");\n    }\n    static isDataSource(obj) {\n        return this.check(obj, \"DataSource\");\n    }\n    static check(obj, name) {\n        return (typeof obj === \"object\" &&\n            obj !== null &&\n            obj[\"@instanceof\"] ===\n                Symbol.for(name));\n    }\n}\n\n//# sourceMappingURL=InstanceChecker.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nexport class EntityNotFoundError extends TypeORMError {\n    constructor(entityClass, criteria) {\n        super();\n        this.entityClass = entityClass;\n        this.criteria = criteria;\n        this.message =\n            `Could not find any entity of type \"${this.stringifyTarget(entityClass)}\" ` + `matching: ${this.stringifyCriteria(criteria)}`;\n    }\n    stringifyTarget(target) {\n        if (InstanceChecker.isEntitySchema(target)) {\n            return target.options.name;\n        }\n        else if (typeof target === \"function\") {\n            return target.name;\n        }\n        else if (ObjectUtils.isObject(target) && \"name\" in target) {\n            return target.name;\n        }\n        else {\n            return target;\n        }\n    }\n    stringifyCriteria(criteria) {\n        try {\n            return JSON.stringify(criteria, null, 4);\n        }\n        catch (e) { }\n        return \"\" + criteria;\n    }\n}\n\n//# sourceMappingURL=EntityNotFoundError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nexport class EntityMetadataNotFoundError extends TypeORMError {\n    constructor(target) {\n        super();\n        this.message = `No metadata for \"${this.stringifyTarget(target)}\" was found.`;\n    }\n    stringifyTarget(target) {\n        if (InstanceChecker.isEntitySchema(target)) {\n            return target.options.name;\n        }\n        else if (typeof target === \"function\") {\n            return target.name;\n        }\n        else if (ObjectUtils.isObject(target) && \"name\" in target) {\n            return target.name;\n        }\n        else {\n            return target;\n        }\n    }\n}\n\n//# sourceMappingURL=EntityMetadataNotFoundError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when method expects entity but instead something else is given.\n */\nexport class MustBeEntityError extends TypeORMError {\n    constructor(operation, wrongValue) {\n        super(`Cannot ${operation}, given value must be an entity, instead \"${wrongValue}\" is given.`);\n    }\n}\n\n//# sourceMappingURL=MustBeEntityError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\nexport class OptimisticLockVersionMismatchError extends TypeORMError {\n    constructor(entity, expectedVersion, actualVersion) {\n        super(`The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`);\n    }\n}\n\n//# sourceMappingURL=OptimisticLockVersionMismatchError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.\n */\nexport class LimitOnUpdateNotSupportedError extends TypeORMError {\n    constructor() {\n        super(`Your database does not support LIMIT on UPDATE statements.`);\n    }\n}\n\n//# sourceMappingURL=LimitOnUpdateNotSupportedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\n */\nexport class CustomRepositoryCannotInheritRepositoryError extends TypeORMError {\n    constructor(repository) {\n        super(`Custom entity repository ${typeof repository === \"function\"\n            ? repository.name\n            : repository.constructor.name} ` +\n            ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`);\n    }\n}\n\n//# sourceMappingURL=CustomRepositoryCannotInheritRepositoryError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\n */\nexport class QueryRunnerProviderAlreadyReleasedError extends TypeORMError {\n    constructor() {\n        super(`Database connection provided by a query runner was already ` +\n            `released, cannot continue to use its querying methods anymore.`);\n    }\n}\n\n//# sourceMappingURL=QueryRunnerProviderAlreadyReleasedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user saves tree children entity but its parent is not saved yet.\n */\nexport class CannotAttachTreeChildrenEntityError extends TypeORMError {\n    constructor(entityName) {\n        super(`Cannot attach entity \"${entityName}\" to its parent. Please make sure parent ` +\n            `is saved in the database before saving children nodes.`);\n    }\n}\n\n//# sourceMappingURL=CannotAttachTreeChildrenEntityError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\n */\nexport class CustomRepositoryDoesNotHaveEntityError extends TypeORMError {\n    constructor(repository) {\n        super(`Custom repository ${typeof repository === \"function\"\n            ? repository.name\n            : repository.constructor.name} does not have managed entity. ` +\n            `Did you forget to specify entity for it @EntityRepository(MyEntity)? `);\n    }\n}\n\n//# sourceMappingURL=CustomRepositoryDoesNotHaveEntityError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nexport class MissingDeleteDateColumnError extends TypeORMError {\n    constructor(entityMetadata) {\n        super(`Entity \"${entityMetadata.name}\" does not have delete date columns.`);\n    }\n}\n\n//# sourceMappingURL=MissingDeleteDateColumnError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when circular relations detected with nullable set to false.\n */\nexport class CircularRelationsError extends TypeORMError {\n    constructor(path) {\n        super(`Circular relations detected: ${path}. To resolve this issue you need to ` +\n            `set nullable: true somewhere in this dependency structure.`);\n    }\n}\n\n//# sourceMappingURL=CircularRelationsError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user tries to build a query with RETURNING / OUTPUT statement,\n * but used database does not support it.\n */\nexport class ReturningStatementNotSupportedError extends TypeORMError {\n    constructor() {\n        super(`OUTPUT or RETURNING clause only supported by Microsoft SQL Server or PostgreSQL or MariaDB databases.`);\n    }\n}\n\n//# sourceMappingURL=ReturningStatementNotSupportedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nexport class MissingPrimaryColumnError extends TypeORMError {\n    constructor(entityMetadata) {\n        super(`Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\n            `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`);\n    }\n}\n\n//# sourceMappingURL=MissingPrimaryColumnError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when specified entity property was not found.\n */\nexport class EntityPropertyNotFoundError extends TypeORMError {\n    constructor(propertyPath, metadata) {\n        super(propertyPath);\n        Object.setPrototypeOf(this, EntityPropertyNotFoundError.prototype);\n        this.message = `Property \"${propertyPath}\" was not found in \"${metadata.targetName}\". Make sure your query is correct.`;\n    }\n}\n\n//# sourceMappingURL=EntityPropertyNotFoundError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nexport class MissingDriverError extends TypeORMError {\n    constructor(driverType, availableDrivers = []) {\n        super(`Wrong driver: \"${driverType}\" given. Supported drivers are: ` +\n            `${availableDrivers.map((d) => `\"${d}\"`).join(\", \")}.`);\n    }\n}\n\n//# sourceMappingURL=MissingDriverError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when required driver's package is not installed.\n */\nexport class DriverPackageNotInstalledError extends TypeORMError {\n    constructor(driverName, packageName) {\n        super(`${driverName} package has not been found installed. ` +\n            `Try to install it: npm install ${packageName} --save`);\n    }\n}\n\n//# sourceMappingURL=DriverPackageNotInstalledError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when an entity does not have no version and no update date column.\n */\nexport class NoVersionOrUpdateDateColumnError extends TypeORMError {\n    constructor(entity) {\n        super(`Entity ${entity} does not have version or update date columns.`);\n    }\n}\n\n//# sourceMappingURL=NoVersionOrUpdateDateColumnError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.\n */\nexport class InsertValuesMissingError extends TypeORMError {\n    constructor() {\n        super(`Cannot perform insert query because values are not defined. ` +\n            `Call \"qb.values(...)\" method to specify inserted values.`);\n    }\n}\n\n//# sourceMappingURL=InsertValuesMissingError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when an optimistic lock cannot be used in query builder.\n */\nexport class OptimisticLockCanNotBeUsedError extends TypeORMError {\n    constructor() {\n        super(`The optimistic lock can be used only with getOne() method.`);\n    }\n}\n\n//# sourceMappingURL=OptimisticLockCanNotBeUsedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown if some required driver's option is not set.\n */\nexport class DriverOptionNotSetError extends TypeORMError {\n    constructor(optionName) {\n        super(`Driver option (${optionName}) is not set. ` +\n            `Please set it to perform connection to the database.`);\n    }\n}\n\n//# sourceMappingURL=DriverOptionNotSetError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when relations specified in the find options were not found in the entities.\n */\nexport class FindRelationsNotFoundError extends TypeORMError {\n    constructor(notFoundRelations) {\n        super();\n        if (notFoundRelations.length === 1) {\n            this.message = `Relation \"${notFoundRelations[0]}\" was not found; please check if it is correct and really exists in your entity.`;\n        }\n        else {\n            this.message = `Relations ${notFoundRelations\n                .map((relation) => `\"${relation}\"`)\n                .join(\", \")} were not found; please check if relations are correct and they exist in your entities.`;\n        }\n    }\n}\n\n//# sourceMappingURL=FindRelationsNotFoundError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when a transaction is required for the current operation, but there is none open.\n */\nexport class PessimisticLockTransactionRequiredError extends TypeORMError {\n    constructor() {\n        super(`An open transaction is required for pessimistic lock.`);\n    }\n}\n\n//# sourceMappingURL=PessimisticLockTransactionRequiredError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nexport class DataTypeNotSupportedError extends TypeORMError {\n    constructor(column, dataType, database) {\n        super();\n        const type = typeof dataType === \"string\" ? dataType : dataType.name;\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\n    }\n}\n\n//# sourceMappingURL=DataTypeNotSupportedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when relation has array initialized which is forbidden my ORM.\n *\n * @see https://github.com/typeorm/typeorm/issues/1319\n * @see http://typeorm.io/#/relations-faq/avoid-relation-property-initializers\n */\nexport class InitializedRelationError extends TypeORMError {\n    constructor(relation) {\n        super(`Array initializations are not allowed in entity relations. ` +\n            `Please remove array initialization (= []) from \"${relation.entityMetadata.targetName}#${relation.propertyPath}\". ` +\n            `This is ORM requirement to make relations to work properly. Refer docs for more information.`);\n    }\n}\n\n//# sourceMappingURL=InitializedRelationError.js.map\n","import { ObjectUtils } from \"../util/ObjectUtils\";\nimport { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when query execution has failed.\n */\nexport class QueryFailedError extends TypeORMError {\n    constructor(query, parameters, driverError) {\n        super(driverError\n            .toString()\n            .replace(/^error: /, \"\")\n            .replace(/^Error: /, \"\")\n            .replace(/^Request/, \"\"));\n        this.query = query;\n        this.parameters = parameters;\n        this.driverError = driverError;\n        if (driverError) {\n            const { name: _, // eslint-disable-line\n            ...otherProperties } = driverError;\n            ObjectUtils.assign(this, {\n                ...otherProperties,\n            });\n        }\n    }\n}\n\n//# sourceMappingURL=QueryFailedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when consumer tries to release entity manager that does not use single database connection.\n */\nexport class NoNeedToReleaseEntityManagerError extends TypeORMError {\n    constructor() {\n        super(`Entity manager is not using single database connection and cannot be released. ` +\n            `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\n            `methods have a single database connection and they should be released.`);\n    }\n}\n\n//# sourceMappingURL=NoNeedToReleaseEntityManagerError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when same object is scheduled for remove and updation at the same time.\n */\nexport class SubjectRemovedAndUpdatedError extends TypeORMError {\n    constructor(subject) {\n        super(`Removed entity \"${subject.metadata.name}\" is also scheduled for update operation. ` +\n            `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`);\n    }\n}\n\n//# sourceMappingURL=SubjectRemovedAndUpdatedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when ORM cannot get column's type automatically.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class ColumnTypeUndefinedError extends TypeORMError {\n    constructor(object, propertyName) {\n        super(`Column type for ${object.constructor.name}#${propertyName} is not defined and cannot be guessed. ` +\n            `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n            `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application (before any entity imported).` +\n            `If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`);\n    }\n}\n\n//# sourceMappingURL=ColumnTypeUndefinedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nexport class QueryRunnerAlreadyReleasedError extends TypeORMError {\n    constructor() {\n        super(`Query runner already released. Cannot run queries anymore.`);\n    }\n}\n\n//# sourceMappingURL=QueryRunnerAlreadyReleasedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.\n */\nexport class OffsetWithoutLimitNotSupportedError extends TypeORMError {\n    constructor() {\n        super(`RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in ` +\n            `conjunction with offset function (or take in conjunction with skip function if you are ` +\n            `using pagination).`);\n    }\n}\n\n//# sourceMappingURL=OffsetWithoutLimitNotSupportedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when consumer tries to execute operation allowed only if connection is opened.\n */\nexport class CannotExecuteNotConnectedError extends TypeORMError {\n    constructor(connectionName) {\n        super(`Cannot execute operation on \"${connectionName}\" connection because connection is not yet established.`);\n    }\n}\n\n//# sourceMappingURL=CannotExecuteNotConnectedError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when some option is not set in the connection options.\n */\nexport class NoConnectionOptionError extends TypeORMError {\n    constructor(optionName) {\n        super(`Option \"${optionName}\" is not set in your connection options, please ` +\n            `define \"${optionName}\" option in your connection options or ormconfig.json`);\n    }\n}\n\n//# sourceMappingURL=NoConnectionOptionError.js.map\n","import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when the per-migration transaction mode is overriden but the global transaction mode is set to \"all\".\n */\nexport class ForbiddenTransactionModeOverrideError extends TypeORMError {\n    constructor(migrationsOverridingTransactionMode) {\n        const migrationNames = migrationsOverridingTransactionMode.map((migration) => `\"${migration.name}\"`);\n        super(`Migrations ${migrationNames.join(\", \")} override the transaction mode, but the global transaction mode is \"all\"`);\n    }\n}\n\n//# sourceMappingURL=ForbiddenTransactionModeOverrideError.js.map\n","import { ObjectUtils } from \"../util/ObjectUtils\";\nimport { TypeORMError } from \"../error\";\n/**\n */\nexport class Alias {\n    constructor(alias) {\n        ObjectUtils.assign(this, alias || {});\n    }\n    get target() {\n        return this.metadata.target;\n    }\n    get hasMetadata() {\n        return !!this._metadata;\n    }\n    set metadata(metadata) {\n        this._metadata = metadata;\n    }\n    get metadata() {\n        if (!this._metadata)\n            throw new TypeORMError(`Cannot get entity metadata for the given alias \"${this.name}\"`);\n        return this._metadata;\n    }\n}\n\n//# sourceMappingURL=Alias.js.map\n","/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    static isAliasProperty(str) {\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\n            return false;\n        // extra alias and its property relation\n        const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\n        if (!aliasName || !propertyName)\n            return false;\n        // alias and property must be represented in a special format\n        // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n        //     return false;\n        // make sure string is not a subquery\n        if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1)\n            return false;\n        return true;\n    }\n}\n\n//# sourceMappingURL=QueryBuilderUtils.js.map\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });\n\nvar buffer = {};\n\nvar base64Js = {};\n\nbase64Js.byteLength = byteLength;\nbase64Js.toByteArray = toByteArray;\nbase64Js.fromByteArray = fromByteArray;\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens (b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4);\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n\n  var curByte = 0;\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen;\n\n  var i;\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = (tmp >> 16) & 0xFF;\n    arr[curByte++] = (tmp >> 8) & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[curByte++] = (tmp >> 8) & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    );\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    );\n  }\n\n  return parts.join('')\n}\n\nvar ieee754 = {};\n\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\nieee754.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = (nBytes * 8) - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n};\n\nieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = (nBytes * 8) - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n(function (exports) {\n\n\tconst base64 = base64Js;\n\tconst ieee754$1 = ieee754;\n\tconst customInspectSymbol =\n\t  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n\t    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n\t    : null;\n\n\texports.Buffer = Buffer;\n\texports.SlowBuffer = SlowBuffer;\n\texports.INSPECT_MAX_BYTES = 50;\n\n\tconst K_MAX_LENGTH = 0x7fffffff;\n\texports.kMaxLength = K_MAX_LENGTH;\n\tconst { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;\n\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n\t *               implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * We report that the browser does not support typed arrays if the are not subclassable\n\t * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n\t * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n\t * for __proto__ and has a buggy typed array implementation.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n\n\tif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n\t    typeof console.error === 'function') {\n\t  console.error(\n\t    'This browser lacks typed array (Uint8Array) support which is required by ' +\n\t    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n\t  );\n\t}\n\n\tfunction typedArraySupport () {\n\t  // Can typed array instances can be augmented?\n\t  try {\n\t    const arr = new GlobalUint8Array(1);\n\t    const proto = { foo: function () { return 42 } };\n\t    Object.setPrototypeOf(proto, GlobalUint8Array.prototype);\n\t    Object.setPrototypeOf(arr, proto);\n\t    return arr.foo() === 42\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\n\tObject.defineProperty(Buffer.prototype, 'parent', {\n\t  enumerable: true,\n\t  get: function () {\n\t    if (!Buffer.isBuffer(this)) return undefined\n\t    return this.buffer\n\t  }\n\t});\n\n\tObject.defineProperty(Buffer.prototype, 'offset', {\n\t  enumerable: true,\n\t  get: function () {\n\t    if (!Buffer.isBuffer(this)) return undefined\n\t    return this.byteOffset\n\t  }\n\t});\n\n\tfunction createBuffer (length) {\n\t  if (length > K_MAX_LENGTH) {\n\t    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n\t  }\n\t  // Return an augmented `Uint8Array` instance\n\t  const buf = new GlobalUint8Array(length);\n\t  Object.setPrototypeOf(buf, Buffer.prototype);\n\t  return buf\n\t}\n\n\t/**\n\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t * returns a single octet.\n\t *\n\t * The `Uint8Array` prototype remains unmodified.\n\t */\n\n\tfunction Buffer (arg, encodingOrOffset, length) {\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    if (typeof encodingOrOffset === 'string') {\n\t      throw new TypeError(\n\t        'The \"string\" argument must be of type string. Received type number'\n\t      )\n\t    }\n\t    return allocUnsafe(arg)\n\t  }\n\t  return from(arg, encodingOrOffset, length)\n\t}\n\n\tBuffer.poolSize = 8192; // not used by this implementation\n\n\tfunction from (value, encodingOrOffset, length) {\n\t  if (typeof value === 'string') {\n\t    return fromString(value, encodingOrOffset)\n\t  }\n\n\t  if (GlobalArrayBuffer.isView(value)) {\n\t    return fromArrayView(value)\n\t  }\n\n\t  if (value == null) {\n\t    throw new TypeError(\n\t      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n\t      'or Array-like Object. Received type ' + (typeof value)\n\t    )\n\t  }\n\n\t  if (isInstance(value, GlobalArrayBuffer) ||\n\t      (value && isInstance(value.buffer, GlobalArrayBuffer))) {\n\t    return fromArrayBuffer(value, encodingOrOffset, length)\n\t  }\n\n\t  if (typeof GlobalSharedArrayBuffer !== 'undefined' &&\n\t      (isInstance(value, GlobalSharedArrayBuffer) ||\n\t      (value && isInstance(value.buffer, GlobalSharedArrayBuffer)))) {\n\t    return fromArrayBuffer(value, encodingOrOffset, length)\n\t  }\n\n\t  if (typeof value === 'number') {\n\t    throw new TypeError(\n\t      'The \"value\" argument must not be of type number. Received type number'\n\t    )\n\t  }\n\n\t  const valueOf = value.valueOf && value.valueOf();\n\t  if (valueOf != null && valueOf !== value) {\n\t    return Buffer.from(valueOf, encodingOrOffset, length)\n\t  }\n\n\t  const b = fromObject(value);\n\t  if (b) return b\n\n\t  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n\t      typeof value[Symbol.toPrimitive] === 'function') {\n\t    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n\t  }\n\n\t  throw new TypeError(\n\t    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n\t    'or Array-like Object. Received type ' + (typeof value)\n\t  )\n\t}\n\n\t/**\n\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t * if value is a number.\n\t * Buffer.from(str[, encoding])\n\t * Buffer.from(array)\n\t * Buffer.from(buffer)\n\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t **/\n\tBuffer.from = function (value, encodingOrOffset, length) {\n\t  return from(value, encodingOrOffset, length)\n\t};\n\n\t// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n\t// https://github.com/feross/buffer/pull/148\n\tObject.setPrototypeOf(Buffer.prototype, GlobalUint8Array.prototype);\n\tObject.setPrototypeOf(Buffer, GlobalUint8Array);\n\n\tfunction assertSize (size) {\n\t  if (typeof size !== 'number') {\n\t    throw new TypeError('\"size\" argument must be of type number')\n\t  } else if (size < 0) {\n\t    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n\t  }\n\t}\n\n\tfunction alloc (size, fill, encoding) {\n\t  assertSize(size);\n\t  if (size <= 0) {\n\t    return createBuffer(size)\n\t  }\n\t  if (fill !== undefined) {\n\t    // Only pay attention to encoding if it's a string. This\n\t    // prevents accidentally sending in a number that would\n\t    // be interpreted as a start offset.\n\t    return typeof encoding === 'string'\n\t      ? createBuffer(size).fill(fill, encoding)\n\t      : createBuffer(size).fill(fill)\n\t  }\n\t  return createBuffer(size)\n\t}\n\n\t/**\n\t * Creates a new filled Buffer instance.\n\t * alloc(size[, fill[, encoding]])\n\t **/\n\tBuffer.alloc = function (size, fill, encoding) {\n\t  return alloc(size, fill, encoding)\n\t};\n\n\tfunction allocUnsafe (size) {\n\t  assertSize(size);\n\t  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n\t}\n\n\t/**\n\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t * */\n\tBuffer.allocUnsafe = function (size) {\n\t  return allocUnsafe(size)\n\t};\n\t/**\n\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t */\n\tBuffer.allocUnsafeSlow = function (size) {\n\t  return allocUnsafe(size)\n\t};\n\n\tfunction fromString (string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') {\n\t    encoding = 'utf8';\n\t  }\n\n\t  if (!Buffer.isEncoding(encoding)) {\n\t    throw new TypeError('Unknown encoding: ' + encoding)\n\t  }\n\n\t  const length = byteLength(string, encoding) | 0;\n\t  let buf = createBuffer(length);\n\n\t  const actual = buf.write(string, encoding);\n\n\t  if (actual !== length) {\n\t    // Writing a hex string, for example, that contains invalid characters will\n\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t    // 'abxxcd' will be treated as 'ab')\n\t    buf = buf.slice(0, actual);\n\t  }\n\n\t  return buf\n\t}\n\n\tfunction fromArrayLike (array) {\n\t  const length = array.length < 0 ? 0 : checked(array.length) | 0;\n\t  const buf = createBuffer(length);\n\t  for (let i = 0; i < length; i += 1) {\n\t    buf[i] = array[i] & 255;\n\t  }\n\t  return buf\n\t}\n\n\tfunction fromArrayView (arrayView) {\n\t  if (isInstance(arrayView, GlobalUint8Array)) {\n\t    const copy = new GlobalUint8Array(arrayView);\n\t    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n\t  }\n\t  return fromArrayLike(arrayView)\n\t}\n\n\tfunction fromArrayBuffer (array, byteOffset, length) {\n\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t    throw new RangeError('\"offset\" is outside of buffer bounds')\n\t  }\n\n\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t    throw new RangeError('\"length\" is outside of buffer bounds')\n\t  }\n\n\t  let buf;\n\t  if (byteOffset === undefined && length === undefined) {\n\t    buf = new GlobalUint8Array(array);\n\t  } else if (length === undefined) {\n\t    buf = new GlobalUint8Array(array, byteOffset);\n\t  } else {\n\t    buf = new GlobalUint8Array(array, byteOffset, length);\n\t  }\n\n\t  // Return an augmented `Uint8Array` instance\n\t  Object.setPrototypeOf(buf, Buffer.prototype);\n\n\t  return buf\n\t}\n\n\tfunction fromObject (obj) {\n\t  if (Buffer.isBuffer(obj)) {\n\t    const len = checked(obj.length) | 0;\n\t    const buf = createBuffer(len);\n\n\t    if (buf.length === 0) {\n\t      return buf\n\t    }\n\n\t    obj.copy(buf, 0, 0, len);\n\t    return buf\n\t  }\n\n\t  if (obj.length !== undefined) {\n\t    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n\t      return createBuffer(0)\n\t    }\n\t    return fromArrayLike(obj)\n\t  }\n\n\t  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n\t    return fromArrayLike(obj.data)\n\t  }\n\t}\n\n\tfunction checked (length) {\n\t  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= K_MAX_LENGTH) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\n\tfunction SlowBuffer (length) {\n\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t    length = 0;\n\t  }\n\t  return Buffer.alloc(+length)\n\t}\n\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return b != null && b._isBuffer === true &&\n\t    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n\t};\n\n\tBuffer.compare = function compare (a, b) {\n\t  if (isInstance(a, GlobalUint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n\t  if (isInstance(b, GlobalUint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError(\n\t      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n\t    )\n\t  }\n\n\t  if (a === b) return 0\n\n\t  let x = a.length;\n\t  let y = b.length;\n\n\t  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n\t    if (a[i] !== b[i]) {\n\t      x = a[i];\n\t      y = b[i];\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t};\n\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'latin1':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t};\n\n\tBuffer.concat = function concat (list, length) {\n\t  if (!Array.isArray(list)) {\n\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t  }\n\n\t  if (list.length === 0) {\n\t    return Buffer.alloc(0)\n\t  }\n\n\t  let i;\n\t  if (length === undefined) {\n\t    length = 0;\n\t    for (i = 0; i < list.length; ++i) {\n\t      length += list[i].length;\n\t    }\n\t  }\n\n\t  const buffer = Buffer.allocUnsafe(length);\n\t  let pos = 0;\n\t  for (i = 0; i < list.length; ++i) {\n\t    let buf = list[i];\n\t    if (isInstance(buf, GlobalUint8Array)) {\n\t      if (pos + buf.length > buffer.length) {\n\t        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n\t        buf.copy(buffer, pos);\n\t      } else {\n\t        GlobalUint8Array.prototype.set.call(\n\t          buffer,\n\t          buf,\n\t          pos\n\t        );\n\t      }\n\t    } else if (!Buffer.isBuffer(buf)) {\n\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t    } else {\n\t      buf.copy(buffer, pos);\n\t    }\n\t    pos += buf.length;\n\t  }\n\t  return buffer\n\t};\n\n\tfunction byteLength (string, encoding) {\n\t  if (Buffer.isBuffer(string)) {\n\t    return string.length\n\t  }\n\t  if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {\n\t    return string.byteLength\n\t  }\n\t  if (typeof string !== 'string') {\n\t    throw new TypeError(\n\t      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n\t      'Received type ' + typeof string\n\t    )\n\t  }\n\n\t  const len = string.length;\n\t  const mustMatch = (arguments.length > 2 && arguments[2] === true);\n\t  if (!mustMatch && len === 0) return 0\n\n\t  // Use a for loop to avoid recursion\n\t  let loweredCase = false;\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) {\n\t          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n\t        }\n\t        encoding = ('' + encoding).toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength;\n\n\tfunction slowToString (encoding, start, end) {\n\t  let loweredCase = false;\n\n\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t  // property of a typed array.\n\n\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t  // to their upper/lower bounds if the value passed is out of range.\n\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t  if (start === undefined || start < 0) {\n\t    start = 0;\n\t  }\n\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t  // coercion fail below.\n\t  if (start > this.length) {\n\t    return ''\n\t  }\n\n\t  if (end === undefined || end > this.length) {\n\t    end = this.length;\n\t  }\n\n\t  if (end <= 0) {\n\t    return ''\n\t  }\n\n\t  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n\t  end >>>= 0;\n\t  start >>>= 0;\n\n\t  if (end <= start) {\n\t    return ''\n\t  }\n\n\t  if (!encoding) encoding = 'utf8';\n\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\n\t      case 'latin1':\n\t      case 'binary':\n\t        return latin1Slice(this, start, end)\n\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t}\n\n\t// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n\t// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n\t// reliably in a browserify context because there could be multiple different\n\t// copies of the 'buffer' package in use. This method works even for Buffer\n\t// instances that were created from another copy of the `buffer` package.\n\t// See: https://github.com/feross/buffer/issues/154\n\tBuffer.prototype._isBuffer = true;\n\n\tfunction swap (b, n, m) {\n\t  const i = b[n];\n\t  b[n] = b[m];\n\t  b[m] = i;\n\t}\n\n\tBuffer.prototype.swap16 = function swap16 () {\n\t  const len = this.length;\n\t  if (len % 2 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t  }\n\t  for (let i = 0; i < len; i += 2) {\n\t    swap(this, i, i + 1);\n\t  }\n\t  return this\n\t};\n\n\tBuffer.prototype.swap32 = function swap32 () {\n\t  const len = this.length;\n\t  if (len % 4 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t  }\n\t  for (let i = 0; i < len; i += 4) {\n\t    swap(this, i, i + 3);\n\t    swap(this, i + 1, i + 2);\n\t  }\n\t  return this\n\t};\n\n\tBuffer.prototype.swap64 = function swap64 () {\n\t  const len = this.length;\n\t  if (len % 8 !== 0) {\n\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t  }\n\t  for (let i = 0; i < len; i += 8) {\n\t    swap(this, i, i + 7);\n\t    swap(this, i + 1, i + 6);\n\t    swap(this, i + 2, i + 5);\n\t    swap(this, i + 3, i + 4);\n\t  }\n\t  return this\n\t};\n\n\tBuffer.prototype.toString = function toString () {\n\t  const length = this.length;\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t};\n\n\tBuffer.prototype.toLocaleString = Buffer.prototype.toString;\n\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t};\n\n\tBuffer.prototype.inspect = function inspect () {\n\t  let str = '';\n\t  const max = exports.INSPECT_MAX_BYTES;\n\t  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n\t  if (this.length > max) str += ' ... ';\n\t  return '<Buffer ' + str + '>'\n\t};\n\tif (customInspectSymbol) {\n\t  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n\t}\n\n\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t  if (isInstance(target, GlobalUint8Array)) {\n\t    target = Buffer.from(target, target.offset, target.byteLength);\n\t  }\n\t  if (!Buffer.isBuffer(target)) {\n\t    throw new TypeError(\n\t      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n\t      'Received type ' + (typeof target)\n\t    )\n\t  }\n\n\t  if (start === undefined) {\n\t    start = 0;\n\t  }\n\t  if (end === undefined) {\n\t    end = target ? target.length : 0;\n\t  }\n\t  if (thisStart === undefined) {\n\t    thisStart = 0;\n\t  }\n\t  if (thisEnd === undefined) {\n\t    thisEnd = this.length;\n\t  }\n\n\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t    throw new RangeError('out of range index')\n\t  }\n\n\t  if (thisStart >= thisEnd && start >= end) {\n\t    return 0\n\t  }\n\t  if (thisStart >= thisEnd) {\n\t    return -1\n\t  }\n\t  if (start >= end) {\n\t    return 1\n\t  }\n\n\t  start >>>= 0;\n\t  end >>>= 0;\n\t  thisStart >>>= 0;\n\t  thisEnd >>>= 0;\n\n\t  if (this === target) return 0\n\n\t  let x = thisEnd - thisStart;\n\t  let y = end - start;\n\t  const len = Math.min(x, y);\n\n\t  const thisCopy = this.slice(thisStart, thisEnd);\n\t  const targetCopy = target.slice(start, end);\n\n\t  for (let i = 0; i < len; ++i) {\n\t    if (thisCopy[i] !== targetCopy[i]) {\n\t      x = thisCopy[i];\n\t      y = targetCopy[i];\n\t      break\n\t    }\n\t  }\n\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t};\n\n\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t//\n\t// Arguments:\n\t// - buffer - a Buffer to search\n\t// - val - a string, Buffer, or number\n\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t// - encoding - an optional encoding, relevant is val is a string\n\t// - dir - true for indexOf, false for lastIndexOf\n\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t  // Empty buffer means no match\n\t  if (buffer.length === 0) return -1\n\n\t  // Normalize byteOffset\n\t  if (typeof byteOffset === 'string') {\n\t    encoding = byteOffset;\n\t    byteOffset = 0;\n\t  } else if (byteOffset > 0x7fffffff) {\n\t    byteOffset = 0x7fffffff;\n\t  } else if (byteOffset < -0x80000000) {\n\t    byteOffset = -0x80000000;\n\t  }\n\t  byteOffset = +byteOffset; // Coerce to Number.\n\t  if (numberIsNaN(byteOffset)) {\n\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t    byteOffset = dir ? 0 : (buffer.length - 1);\n\t  }\n\n\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\t  if (byteOffset >= buffer.length) {\n\t    if (dir) return -1\n\t    else byteOffset = buffer.length - 1;\n\t  } else if (byteOffset < 0) {\n\t    if (dir) byteOffset = 0;\n\t    else return -1\n\t  }\n\n\t  // Normalize val\n\t  if (typeof val === 'string') {\n\t    val = Buffer.from(val, encoding);\n\t  }\n\n\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t  if (Buffer.isBuffer(val)) {\n\t    // Special case: looking for empty string/buffer always fails\n\t    if (val.length === 0) {\n\t      return -1\n\t    }\n\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t  } else if (typeof val === 'number') {\n\t    val = val & 0xFF; // Search for a byte value [0-255]\n\t    if (typeof GlobalUint8Array.prototype.indexOf === 'function') {\n\t      if (dir) {\n\t        return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t      } else {\n\t        return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t      }\n\t    }\n\t    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n\t  }\n\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\n\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t  let indexSize = 1;\n\t  let arrLength = arr.length;\n\t  let valLength = val.length;\n\n\t  if (encoding !== undefined) {\n\t    encoding = String(encoding).toLowerCase();\n\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t      if (arr.length < 2 || val.length < 2) {\n\t        return -1\n\t      }\n\t      indexSize = 2;\n\t      arrLength /= 2;\n\t      valLength /= 2;\n\t      byteOffset /= 2;\n\t    }\n\t  }\n\n\t  function read (buf, i) {\n\t    if (indexSize === 1) {\n\t      return buf[i]\n\t    } else {\n\t      return buf.readUInt16BE(i * indexSize)\n\t    }\n\t  }\n\n\t  let i;\n\t  if (dir) {\n\t    let foundIndex = -1;\n\t    for (i = byteOffset; i < arrLength; i++) {\n\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t        if (foundIndex === -1) foundIndex = i;\n\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t      } else {\n\t        if (foundIndex !== -1) i -= i - foundIndex;\n\t        foundIndex = -1;\n\t      }\n\t    }\n\t  } else {\n\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\t    for (i = byteOffset; i >= 0; i--) {\n\t      let found = true;\n\t      for (let j = 0; j < valLength; j++) {\n\t        if (read(arr, i + j) !== read(val, j)) {\n\t          found = false;\n\t          break\n\t        }\n\t      }\n\t      if (found) return i\n\t    }\n\t  }\n\n\t  return -1\n\t}\n\n\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t};\n\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t};\n\n\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t};\n\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0;\n\t  const remaining = buf.length - offset;\n\t  if (!length) {\n\t    length = remaining;\n\t  } else {\n\t    length = Number(length);\n\t    if (length > remaining) {\n\t      length = remaining;\n\t    }\n\t  }\n\n\t  const strLen = string.length;\n\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2;\n\t  }\n\t  let i;\n\t  for (i = 0; i < length; ++i) {\n\t    const parsed = parseInt(string.substr(i * 2, 2), 16);\n\t    if (numberIsNaN(parsed)) return i\n\t    buf[offset + i] = parsed;\n\t  }\n\t  return i\n\t}\n\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8';\n\t    length = this.length;\n\t    offset = 0;\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset;\n\t    length = this.length;\n\t    offset = 0;\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset >>> 0;\n\t    if (isFinite(length)) {\n\t      length = length >>> 0;\n\t      if (encoding === undefined) encoding = 'utf8';\n\t    } else {\n\t      encoding = length;\n\t      length = undefined;\n\t    }\n\t  } else {\n\t    throw new Error(\n\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t    )\n\t  }\n\n\t  const remaining = this.length - offset;\n\t  if (length === undefined || length > remaining) length = remaining;\n\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t  }\n\n\t  if (!encoding) encoding = 'utf8';\n\n\t  let loweredCase = false;\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\n\t      case 'ascii':\n\t      case 'latin1':\n\t      case 'binary':\n\t        return asciiWrite(this, string, offset, length)\n\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase();\n\t        loweredCase = true;\n\t    }\n\t  }\n\t};\n\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t};\n\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end);\n\t  const res = [];\n\n\t  let i = start;\n\t  while (i < end) {\n\t    const firstByte = buf[i];\n\t    let codePoint = null;\n\t    let bytesPerSequence = (firstByte > 0xEF)\n\t      ? 4\n\t      : (firstByte > 0xDF)\n\t          ? 3\n\t          : (firstByte > 0xBF)\n\t              ? 2\n\t              : 1;\n\n\t    if (i + bytesPerSequence <= end) {\n\t      let secondByte, thirdByte, fourthByte, tempCodePoint;\n\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte;\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1];\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1];\n\t          thirdByte = buf[i + 2];\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1];\n\t          thirdByte = buf[i + 2];\n\t          fourthByte = buf[i + 3];\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint;\n\t            }\n\t          }\n\t      }\n\t    }\n\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD;\n\t      bytesPerSequence = 1;\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000;\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n\t      codePoint = 0xDC00 | codePoint & 0x3FF;\n\t    }\n\n\t    res.push(codePoint);\n\t    i += bytesPerSequence;\n\t  }\n\n\t  return decodeCodePointsArray(res)\n\t}\n\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tconst MAX_ARGUMENTS_LENGTH = 0x1000;\n\n\tfunction decodeCodePointsArray (codePoints) {\n\t  const len = codePoints.length;\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  let res = '';\n\t  let i = 0;\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    );\n\t  }\n\t  return res\n\t}\n\n\tfunction asciiSlice (buf, start, end) {\n\t  let ret = '';\n\t  end = Math.min(buf.length, end);\n\n\t  for (let i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F);\n\t  }\n\t  return ret\n\t}\n\n\tfunction latin1Slice (buf, start, end) {\n\t  let ret = '';\n\t  end = Math.min(buf.length, end);\n\n\t  for (let i = start; i < end; ++i) {\n\t    ret += String.fromCharCode(buf[i]);\n\t  }\n\t  return ret\n\t}\n\n\tfunction hexSlice (buf, start, end) {\n\t  const len = buf.length;\n\n\t  if (!start || start < 0) start = 0;\n\t  if (!end || end < 0 || end > len) end = len;\n\n\t  let out = '';\n\t  for (let i = start; i < end; ++i) {\n\t    out += hexSliceLookupTable[buf[i]];\n\t  }\n\t  return out\n\t}\n\n\tfunction utf16leSlice (buf, start, end) {\n\t  const bytes = buf.slice(start, end);\n\t  let res = '';\n\t  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n\t  for (let i = 0; i < bytes.length - 1; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));\n\t  }\n\t  return res\n\t}\n\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  const len = this.length;\n\t  start = ~~start;\n\t  end = end === undefined ? len : ~~end;\n\n\t  if (start < 0) {\n\t    start += len;\n\t    if (start < 0) start = 0;\n\t  } else if (start > len) {\n\t    start = len;\n\t  }\n\n\t  if (end < 0) {\n\t    end += len;\n\t    if (end < 0) end = 0;\n\t  } else if (end > len) {\n\t    end = len;\n\t  }\n\n\t  if (end < start) end = start;\n\n\t  const newBuf = this.subarray(start, end);\n\t  // Return an augmented `Uint8Array` instance\n\t  Object.setPrototypeOf(newBuf, Buffer.prototype);\n\n\t  return newBuf\n\t};\n\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\n\tBuffer.prototype.readUintLE =\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  let val = this[offset];\n\t  let mul = 1;\n\t  let i = 0;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul;\n\t  }\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readUintBE =\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length);\n\t  }\n\n\t  let val = this[offset + --byteLength];\n\t  let mul = 1;\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul;\n\t  }\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readUint8 =\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 1, this.length);\n\t  return this[offset]\n\t};\n\n\tBuffer.prototype.readUint16LE =\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  return this[offset] | (this[offset + 1] << 8)\n\t};\n\n\tBuffer.prototype.readUint16BE =\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  return (this[offset] << 8) | this[offset + 1]\n\t};\n\n\tBuffer.prototype.readUint32LE =\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t};\n\n\tBuffer.prototype.readUint32BE =\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t};\n\n\tBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const lo = first +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 24;\n\n\t  const hi = this[++offset] +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset] * 2 ** 16 +\n\t    last * 2 ** 24;\n\n\t  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n\t});\n\n\tBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const hi = first * 2 ** 24 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset];\n\n\t  const lo = this[++offset] * 2 ** 24 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    last;\n\n\t  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n\t});\n\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  let val = this[offset];\n\t  let mul = 1;\n\t  let i = 0;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul;\n\t  }\n\t  mul *= 0x80;\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n\t  let i = byteLength;\n\t  let mul = 1;\n\t  let val = this[offset + --i];\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul;\n\t  }\n\t  mul *= 0x80;\n\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n\t  return val\n\t};\n\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 1, this.length);\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t};\n\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  const val = this[offset] | (this[offset + 1] << 8);\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t};\n\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 2, this.length);\n\t  const val = this[offset + 1] | (this[offset] << 8);\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t};\n\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t};\n\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t};\n\n\tBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const val = this[offset + 4] +\n\t    this[offset + 5] * 2 ** 8 +\n\t    this[offset + 6] * 2 ** 16 +\n\t    (last << 24); // Overflow\n\n\t  return (BigInt(val) << BigInt(32)) +\n\t    BigInt(first +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 24)\n\t});\n\n\tBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n\t  offset = offset >>> 0;\n\t  validateNumber(offset, 'offset');\n\t  const first = this[offset];\n\t  const last = this[offset + 7];\n\t  if (first === undefined || last === undefined) {\n\t    boundsError(offset, this.length - 8);\n\t  }\n\n\t  const val = (first << 24) + // Overflow\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    this[++offset];\n\n\t  return (BigInt(val) << BigInt(32)) +\n\t    BigInt(this[++offset] * 2 ** 24 +\n\t    this[++offset] * 2 ** 16 +\n\t    this[++offset] * 2 ** 8 +\n\t    last)\n\t});\n\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\t  return ieee754$1.read(this, offset, true, 23, 4)\n\t};\n\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 4, this.length);\n\t  return ieee754$1.read(this, offset, false, 23, 4)\n\t};\n\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 8, this.length);\n\t  return ieee754$1.read(this, offset, true, 52, 8)\n\t};\n\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkOffset(offset, 8, this.length);\n\t  return ieee754$1.read(this, offset, false, 52, 8)\n\t};\n\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t}\n\n\tBuffer.prototype.writeUintLE =\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) {\n\t    const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0);\n\t  }\n\n\t  let mul = 1;\n\t  let i = 0;\n\t  this[offset] = value & 0xFF;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeUintBE =\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  byteLength = byteLength >>> 0;\n\t  if (!noAssert) {\n\t    const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n\t    checkInt(this, value, offset, byteLength, maxBytes, 0);\n\t  }\n\n\t  let i = byteLength - 1;\n\t  let mul = 1;\n\t  this[offset + i] = value & 0xFF;\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeUint8 =\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n\t  this[offset] = (value & 0xff);\n\t  return offset + 1\n\t};\n\n\tBuffer.prototype.writeUint16LE =\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\t  this[offset] = (value & 0xff);\n\t  this[offset + 1] = (value >>> 8);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeUint16BE =\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\t  this[offset] = (value >>> 8);\n\t  this[offset + 1] = (value & 0xff);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeUint32LE =\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\t  this[offset + 3] = (value >>> 24);\n\t  this[offset + 2] = (value >>> 16);\n\t  this[offset + 1] = (value >>> 8);\n\t  this[offset] = (value & 0xff);\n\t  return offset + 4\n\t};\n\n\tBuffer.prototype.writeUint32BE =\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\t  this[offset] = (value >>> 24);\n\t  this[offset + 1] = (value >>> 16);\n\t  this[offset + 2] = (value >>> 8);\n\t  this[offset + 3] = (value & 0xff);\n\t  return offset + 4\n\t};\n\n\tfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n\t  checkIntBI(value, min, max, buf, offset, 7);\n\n\t  let lo = Number(value & BigInt(0xffffffff));\n\t  buf[offset++] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset++] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset++] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset++] = lo;\n\t  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n\t  buf[offset++] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset++] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset++] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset++] = hi;\n\t  return offset\n\t}\n\n\tfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n\t  checkIntBI(value, min, max, buf, offset, 7);\n\n\t  let lo = Number(value & BigInt(0xffffffff));\n\t  buf[offset + 7] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset + 6] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset + 5] = lo;\n\t  lo = lo >> 8;\n\t  buf[offset + 4] = lo;\n\t  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n\t  buf[offset + 3] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset + 2] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset + 1] = hi;\n\t  hi = hi >> 8;\n\t  buf[offset] = hi;\n\t  return offset + 8\n\t}\n\n\tBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n\t  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n\t});\n\n\tBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n\t  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n\t});\n\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    const limit = Math.pow(2, (8 * byteLength) - 1);\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n\t  }\n\n\t  let i = 0;\n\t  let mul = 1;\n\t  let sub = 0;\n\t  this[offset] = value & 0xFF;\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t      sub = 1;\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    const limit = Math.pow(2, (8 * byteLength) - 1);\n\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n\t  }\n\n\t  let i = byteLength - 1;\n\t  let mul = 1;\n\t  let sub = 0;\n\t  this[offset + i] = value & 0xFF;\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t      sub = 1;\n\t    }\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n\t  }\n\n\t  return offset + byteLength\n\t};\n\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n\t  if (value < 0) value = 0xff + value + 1;\n\t  this[offset] = (value & 0xff);\n\t  return offset + 1\n\t};\n\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\t  this[offset] = (value & 0xff);\n\t  this[offset + 1] = (value >>> 8);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\t  this[offset] = (value >>> 8);\n\t  this[offset + 1] = (value & 0xff);\n\t  return offset + 2\n\t};\n\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\t  this[offset] = (value & 0xff);\n\t  this[offset + 1] = (value >>> 8);\n\t  this[offset + 2] = (value >>> 16);\n\t  this[offset + 3] = (value >>> 24);\n\t  return offset + 4\n\t};\n\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\t  if (value < 0) value = 0xffffffff + value + 1;\n\t  this[offset] = (value >>> 24);\n\t  this[offset + 1] = (value >>> 16);\n\t  this[offset + 2] = (value >>> 8);\n\t  this[offset + 3] = (value & 0xff);\n\t  return offset + 4\n\t};\n\n\tBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n\t  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n\t});\n\n\tBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n\t  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n\t});\n\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t  if (offset < 0) throw new RangeError('Index out of range')\n\t}\n\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4);\n\t  }\n\t  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);\n\t  return offset + 4\n\t}\n\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t};\n\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t};\n\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  value = +value;\n\t  offset = offset >>> 0;\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8);\n\t  }\n\t  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);\n\t  return offset + 8\n\t}\n\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t};\n\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t};\n\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n\t  if (!start) start = 0;\n\t  if (!end && end !== 0) end = this.length;\n\t  if (targetStart >= target.length) targetStart = target.length;\n\t  if (!targetStart) targetStart = 0;\n\t  if (end > 0 && end < start) end = start;\n\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length;\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start;\n\t  }\n\n\t  const len = end - start;\n\n\t  if (this === target && typeof GlobalUint8Array.prototype.copyWithin === 'function') {\n\t    // Use built-in when available, missing from IE11\n\t    this.copyWithin(targetStart, start, end);\n\t  } else {\n\t    GlobalUint8Array.prototype.set.call(\n\t      target,\n\t      this.subarray(start, end),\n\t      targetStart\n\t    );\n\t  }\n\n\t  return len\n\t};\n\n\t// Usage:\n\t//    buffer.fill(number[, offset[, end]])\n\t//    buffer.fill(buffer[, offset[, end]])\n\t//    buffer.fill(string[, offset[, end]][, encoding])\n\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t  // Handle string cases:\n\t  if (typeof val === 'string') {\n\t    if (typeof start === 'string') {\n\t      encoding = start;\n\t      start = 0;\n\t      end = this.length;\n\t    } else if (typeof end === 'string') {\n\t      encoding = end;\n\t      end = this.length;\n\t    }\n\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t      throw new TypeError('encoding must be a string')\n\t    }\n\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t    }\n\t    if (val.length === 1) {\n\t      const code = val.charCodeAt(0);\n\t      if ((encoding === 'utf8' && code < 128) ||\n\t          encoding === 'latin1') {\n\t        // Fast path: If `val` fits into a single byte, use that numeric value.\n\t        val = code;\n\t      }\n\t    }\n\t  } else if (typeof val === 'number') {\n\t    val = val & 255;\n\t  } else if (typeof val === 'boolean') {\n\t    val = Number(val);\n\t  }\n\n\t  // Invalid ranges are not set to a default, so can range check early.\n\t  if (start < 0 || this.length < start || this.length < end) {\n\t    throw new RangeError('Out of range index')\n\t  }\n\n\t  if (end <= start) {\n\t    return this\n\t  }\n\n\t  start = start >>> 0;\n\t  end = end === undefined ? this.length : end >>> 0;\n\n\t  if (!val) val = 0;\n\n\t  let i;\n\t  if (typeof val === 'number') {\n\t    for (i = start; i < end; ++i) {\n\t      this[i] = val;\n\t    }\n\t  } else {\n\t    const bytes = Buffer.isBuffer(val)\n\t      ? val\n\t      : Buffer.from(val, encoding);\n\t    const len = bytes.length;\n\t    if (len === 0) {\n\t      throw new TypeError('The value \"' + val +\n\t        '\" is invalid for argument \"value\"')\n\t    }\n\t    for (i = 0; i < end - start; ++i) {\n\t      this[i + start] = bytes[i % len];\n\t    }\n\t  }\n\n\t  return this\n\t};\n\n\t// CUSTOM ERRORS\n\t// =============\n\n\t// Simplified versions from Node, changed for Buffer-only usage\n\tconst errors = {};\n\tfunction E (sym, getMessage, Base) {\n\t  errors[sym] = class NodeError extends Base {\n\t    constructor () {\n\t      super();\n\n\t      Object.defineProperty(this, 'message', {\n\t        value: getMessage.apply(this, arguments),\n\t        writable: true,\n\t        configurable: true\n\t      });\n\n\t      // Add the error code to the name to include it in the stack trace.\n\t      this.name = `${this.name} [${sym}]`;\n\t      // Access the stack to generate the error message including the error code\n\t      // from the name.\n\t      this.stack; // eslint-disable-line no-unused-expressions\n\t      // Reset the name to the actual name.\n\t      delete this.name;\n\t    }\n\n\t    get code () {\n\t      return sym\n\t    }\n\n\t    set code (value) {\n\t      Object.defineProperty(this, 'code', {\n\t        configurable: true,\n\t        enumerable: true,\n\t        value,\n\t        writable: true\n\t      });\n\t    }\n\n\t    toString () {\n\t      return `${this.name} [${sym}]: ${this.message}`\n\t    }\n\t  };\n\t}\n\n\tE('ERR_BUFFER_OUT_OF_BOUNDS',\n\t  function (name) {\n\t    if (name) {\n\t      return `${name} is outside of buffer bounds`\n\t    }\n\n\t    return 'Attempt to access memory outside buffer bounds'\n\t  }, RangeError);\n\tE('ERR_INVALID_ARG_TYPE',\n\t  function (name, actual) {\n\t    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n\t  }, TypeError);\n\tE('ERR_OUT_OF_RANGE',\n\t  function (str, range, input) {\n\t    let msg = `The value of \"${str}\" is out of range.`;\n\t    let received = input;\n\t    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n\t      received = addNumericalSeparator(String(input));\n\t    } else if (typeof input === 'bigint') {\n\t      received = String(input);\n\t      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n\t        received = addNumericalSeparator(received);\n\t      }\n\t      received += 'n';\n\t    }\n\t    msg += ` It must be ${range}. Received ${received}`;\n\t    return msg\n\t  }, RangeError);\n\n\tfunction addNumericalSeparator (val) {\n\t  let res = '';\n\t  let i = val.length;\n\t  const start = val[0] === '-' ? 1 : 0;\n\t  for (; i >= start + 4; i -= 3) {\n\t    res = `_${val.slice(i - 3, i)}${res}`;\n\t  }\n\t  return `${val.slice(0, i)}${res}`\n\t}\n\n\t// CHECK FUNCTIONS\n\t// ===============\n\n\tfunction checkBounds (buf, offset, byteLength) {\n\t  validateNumber(offset, 'offset');\n\t  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n\t    boundsError(offset, buf.length - (byteLength + 1));\n\t  }\n\t}\n\n\tfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n\t  if (value > max || value < min) {\n\t    const n = typeof min === 'bigint' ? 'n' : '';\n\t    let range;\n\t    if (byteLength > 3) {\n\t      if (min === 0 || min === BigInt(0)) {\n\t        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\n\t      } else {\n\t        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n\t                `${(byteLength + 1) * 8 - 1}${n}`;\n\t      }\n\t    } else {\n\t      range = `>= ${min}${n} and <= ${max}${n}`;\n\t    }\n\t    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n\t  }\n\t  checkBounds(buf, offset, byteLength);\n\t}\n\n\tfunction validateNumber (value, name) {\n\t  if (typeof value !== 'number') {\n\t    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n\t  }\n\t}\n\n\tfunction boundsError (value, length, type) {\n\t  if (Math.floor(value) !== value) {\n\t    validateNumber(value, type);\n\t    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n\t  }\n\n\t  if (length < 0) {\n\t    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n\t  }\n\n\t  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n\t                                    `>= ${type ? 1 : 0} and <= ${length}`,\n\t                                    value)\n\t}\n\n\t// HELPER FUNCTIONS\n\t// ================\n\n\tconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n\n\tfunction base64clean (str) {\n\t  // Node takes equal signs as end of the Base64 encoding\n\t  str = str.split('=')[0];\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = str.trim().replace(INVALID_BASE64_RE, '');\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '=';\n\t  }\n\t  return str\n\t}\n\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity;\n\t  let codePoint;\n\t  const length = string.length;\n\t  let leadSurrogate = null;\n\t  const bytes = [];\n\n\t  for (let i = 0; i < length; ++i) {\n\t    codePoint = string.charCodeAt(i);\n\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t          continue\n\t        }\n\n\t        // valid lead\n\t        leadSurrogate = codePoint;\n\n\t        continue\n\t      }\n\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t        leadSurrogate = codePoint;\n\t        continue\n\t      }\n\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n\t    }\n\n\t    leadSurrogate = null;\n\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint);\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      );\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\n\t  return bytes\n\t}\n\n\tfunction asciiToBytes (str) {\n\t  const byteArray = [];\n\t  for (let i = 0; i < str.length; ++i) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF);\n\t  }\n\t  return byteArray\n\t}\n\n\tfunction utf16leToBytes (str, units) {\n\t  let c, hi, lo;\n\t  const byteArray = [];\n\t  for (let i = 0; i < str.length; ++i) {\n\t    if ((units -= 2) < 0) break\n\n\t    c = str.charCodeAt(i);\n\t    hi = c >> 8;\n\t    lo = c % 256;\n\t    byteArray.push(lo);\n\t    byteArray.push(hi);\n\t  }\n\n\t  return byteArray\n\t}\n\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  let i;\n\t  for (i = 0; i < length; ++i) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i];\n\t  }\n\t  return i\n\t}\n\n\t// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n\t// the `instanceof` check but they should be treated as of that type.\n\t// See: https://github.com/feross/buffer/issues/166\n\tfunction isInstance (obj, type) {\n\t  return obj instanceof type ||\n\t    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n\t      obj.constructor.name === type.name)\n\t}\n\tfunction numberIsNaN (obj) {\n\t  // For IE11 support\n\t  return obj !== obj // eslint-disable-line no-self-compare\n\t}\n\n\t// Create lookup table for `toString('hex')`\n\t// See: https://github.com/feross/buffer/issues/219\n\tconst hexSliceLookupTable = (function () {\n\t  const alphabet = '0123456789abcdef';\n\t  const table = new Array(256);\n\t  for (let i = 0; i < 16; ++i) {\n\t    const i16 = i * 16;\n\t    for (let j = 0; j < 16; ++j) {\n\t      table[i16 + j] = alphabet[i] + alphabet[j];\n\t    }\n\t  }\n\t  return table\n\t})();\n\n\t// Return not function with Error if BigInt not supported\n\tfunction defineBigIntMethod (fn) {\n\t  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n\t}\n\n\tfunction BufferBigIntNotDefined () {\n\t  throw new Error('BigInt not supported')\n\t} \n} (buffer));\n\nconst Buffer = buffer.Buffer;\n\nexports.Blob = buffer.Blob;\nexports.BlobOptions = buffer.BlobOptions;\nexports.Buffer = buffer.Buffer;\nexports.File = buffer.File;\nexports.FileOptions = buffer.FileOptions;\nexports.INSPECT_MAX_BYTES = buffer.INSPECT_MAX_BYTES;\nexports.SlowBuffer = buffer.SlowBuffer;\nexports.TranscodeEncoding = buffer.TranscodeEncoding;\nexports.atob = buffer.atob;\nexports.btoa = buffer.btoa;\nexports.constants = buffer.constants;\nexports.default = Buffer;\nexports.isAscii = buffer.isAscii;\nexports.isUtf8 = buffer.isUtf8;\nexports.kMaxLength = buffer.kMaxLength;\nexports.kStringMaxLength = buffer.kStringMaxLength;\nexports.resolveObjectURL = buffer.resolveObjectURL;\nexports.transcode = buffer.transcode;\n//# sourceMappingURL=index.cjs.map\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n * in FIPS PUB 180-1\n * This source code is derived from sha1.js of the same repository.\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n * operation was added.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha, Hash)\n\nSha.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n]\n\nvar W = new Array(64)\n\nfunction Sha256 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha256, Hash)\n\nSha256.prototype.init = function () {\n  this._a = 0x6a09e667\n  this._b = 0xbb67ae85\n  this._c = 0x3c6ef372\n  this._d = 0xa54ff53a\n  this._e = 0x510e527f\n  this._f = 0x9b05688c\n  this._g = 0x1f83d9ab\n  this._h = 0x5be0cd19\n\n  return this\n}\n\nfunction ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)\n}\n\nfunction sigma1 (x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)\n}\n\nfunction gamma0 (x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)\n}\n\nfunction gamma1 (x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)\n}\n\nSha256.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0\n\n  for (var j = 0; j < 64; ++j) {\n    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0\n    var T2 = (sigma0(a) + maj(a, b, c)) | 0\n\n    h = g\n    g = f\n    f = e\n    e = (d + T1) | 0\n    d = c\n    c = b\n    b = a\n    a = (T1 + T2) | 0\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n  this._f = (f + this._f) | 0\n  this._g = (g + this._g) | 0\n  this._h = (h + this._h) | 0\n}\n\nSha256.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(32)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n  H.writeInt32BE(this._h, 28)\n\n  return H\n}\n\nmodule.exports = Sha256\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Sha256 = require('./sha256')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(64)\n\nfunction Sha224 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha224, Sha256)\n\nSha224.prototype.init = function () {\n  this._a = 0xc1059ed8\n  this._b = 0x367cd507\n  this._c = 0x3070dd17\n  this._d = 0xf70e5939\n  this._e = 0xffc00b31\n  this._f = 0x68581511\n  this._g = 0x64f98fa7\n  this._h = 0xbefa4fa4\n\n  return this\n}\n\nSha224.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(28)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n\n  return H\n}\n\nmodule.exports = Sha224\n","var inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]\n\nvar W = new Array(160)\n\nfunction Sha512 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha512, Hash)\n\nSha512.prototype.init = function () {\n  this._ah = 0x6a09e667\n  this._bh = 0xbb67ae85\n  this._ch = 0x3c6ef372\n  this._dh = 0xa54ff53a\n  this._eh = 0x510e527f\n  this._fh = 0x9b05688c\n  this._gh = 0x1f83d9ab\n  this._hh = 0x5be0cd19\n\n  this._al = 0xf3bcc908\n  this._bl = 0x84caa73b\n  this._cl = 0xfe94f82b\n  this._dl = 0x5f1d36f1\n  this._el = 0xade682d1\n  this._fl = 0x2b3e6c1f\n  this._gl = 0xfb41bd6b\n  this._hl = 0x137e2179\n\n  return this\n}\n\nfunction Ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x, xl) {\n  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)\n}\n\nfunction sigma1 (x, xl) {\n  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)\n}\n\nfunction Gamma0 (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)\n}\n\nfunction Gamma0l (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)\n}\n\nfunction Gamma1 (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)\n}\n\nfunction Gamma1l (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)\n}\n\nfunction getCarry (a, b) {\n  return (a >>> 0) < (b >>> 0) ? 1 : 0\n}\n\nSha512.prototype._update = function (M) {\n  var W = this._w\n\n  var ah = this._ah | 0\n  var bh = this._bh | 0\n  var ch = this._ch | 0\n  var dh = this._dh | 0\n  var eh = this._eh | 0\n  var fh = this._fh | 0\n  var gh = this._gh | 0\n  var hh = this._hh | 0\n\n  var al = this._al | 0\n  var bl = this._bl | 0\n  var cl = this._cl | 0\n  var dl = this._dl | 0\n  var el = this._el | 0\n  var fl = this._fl | 0\n  var gl = this._gl | 0\n  var hl = this._hl | 0\n\n  for (var i = 0; i < 32; i += 2) {\n    W[i] = M.readInt32BE(i * 4)\n    W[i + 1] = M.readInt32BE(i * 4 + 4)\n  }\n  for (; i < 160; i += 2) {\n    var xh = W[i - 15 * 2]\n    var xl = W[i - 15 * 2 + 1]\n    var gamma0 = Gamma0(xh, xl)\n    var gamma0l = Gamma0l(xl, xh)\n\n    xh = W[i - 2 * 2]\n    xl = W[i - 2 * 2 + 1]\n    var gamma1 = Gamma1(xh, xl)\n    var gamma1l = Gamma1l(xl, xh)\n\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n    var Wi7h = W[i - 7 * 2]\n    var Wi7l = W[i - 7 * 2 + 1]\n\n    var Wi16h = W[i - 16 * 2]\n    var Wi16l = W[i - 16 * 2 + 1]\n\n    var Wil = (gamma0l + Wi7l) | 0\n    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0\n    Wil = (Wil + gamma1l) | 0\n    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0\n    Wil = (Wil + Wi16l) | 0\n    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0\n\n    W[i] = Wih\n    W[i + 1] = Wil\n  }\n\n  for (var j = 0; j < 160; j += 2) {\n    Wih = W[j]\n    Wil = W[j + 1]\n\n    var majh = maj(ah, bh, ch)\n    var majl = maj(al, bl, cl)\n\n    var sigma0h = sigma0(ah, al)\n    var sigma0l = sigma0(al, ah)\n    var sigma1h = sigma1(eh, el)\n    var sigma1l = sigma1(el, eh)\n\n    // t1 = h + sigma1 + ch + K[j] + W[j]\n    var Kih = K[j]\n    var Kil = K[j + 1]\n\n    var chh = Ch(eh, fh, gh)\n    var chl = Ch(el, fl, gl)\n\n    var t1l = (hl + sigma1l) | 0\n    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0\n    t1l = (t1l + chl) | 0\n    t1h = (t1h + chh + getCarry(t1l, chl)) | 0\n    t1l = (t1l + Kil) | 0\n    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0\n    t1l = (t1l + Wil) | 0\n    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0\n\n    // t2 = sigma0 + maj\n    var t2l = (sigma0l + majl) | 0\n    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0\n\n    hh = gh\n    hl = gl\n    gh = fh\n    gl = fl\n    fh = eh\n    fl = el\n    el = (dl + t1l) | 0\n    eh = (dh + t1h + getCarry(el, dl)) | 0\n    dh = ch\n    dl = cl\n    ch = bh\n    cl = bl\n    bh = ah\n    bl = al\n    al = (t1l + t2l) | 0\n    ah = (t1h + t2h + getCarry(al, t1l)) | 0\n  }\n\n  this._al = (this._al + al) | 0\n  this._bl = (this._bl + bl) | 0\n  this._cl = (this._cl + cl) | 0\n  this._dl = (this._dl + dl) | 0\n  this._el = (this._el + el) | 0\n  this._fl = (this._fl + fl) | 0\n  this._gl = (this._gl + gl) | 0\n  this._hl = (this._hl + hl) | 0\n\n  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0\n  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0\n  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0\n  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0\n  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0\n  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0\n  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0\n  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0\n}\n\nSha512.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(64)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n  writeInt64BE(this._gh, this._gl, 48)\n  writeInt64BE(this._hh, this._hl, 56)\n\n  return H\n}\n\nmodule.exports = Sha512\n","var inherits = require('inherits')\nvar SHA512 = require('./sha512')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(160)\n\nfunction Sha384 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha384, SHA512)\n\nSha384.prototype.init = function () {\n  this._ah = 0xcbbb9d5d\n  this._bh = 0x629a292a\n  this._ch = 0x9159015a\n  this._dh = 0x152fecd8\n  this._eh = 0x67332667\n  this._fh = 0x8eb44a87\n  this._gh = 0xdb0c2e0d\n  this._hh = 0x47b5481d\n\n  this._al = 0xc1059ed8\n  this._bl = 0x367cd507\n  this._cl = 0x3070dd17\n  this._dl = 0xf70e5939\n  this._el = 0xffc00b31\n  this._fl = 0x68581511\n  this._gl = 0x64f98fa7\n  this._hl = 0xbefa4fa4\n\n  return this\n}\n\nSha384.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(48)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n\n  return H\n}\n\nmodule.exports = Sha384\n","var exports = module.exports = function SHA (algorithm) {\n  algorithm = algorithm.toLowerCase()\n\n  var Algorithm = exports[algorithm]\n  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')\n\n  return new Algorithm()\n}\n\nexports.sha = require('./sha')\nexports.sha1 = require('./sha1')\nexports.sha224 = require('./sha224')\nexports.sha256 = require('./sha256')\nexports.sha384 = require('./sha384')\nexports.sha512 = require('./sha512')\n","import shajs from \"sha.js\";\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str, firstCapital = false) {\n    if (firstCapital)\n        str = \" \" + str;\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2) {\n        if (p2)\n            return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n/**\n * Converts string into snake_case.\n *\n */\nexport function snakeCase(str) {\n    return (str\n        // ABc -> a_bc\n        .replace(/([A-Z])([A-Z])([a-z])/g, \"$1_$2$3\")\n        // aC -> a_c\n        .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\")\n        .toLowerCase());\n}\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str) {\n    return str.replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str, abbrLettersCount = 1) {\n    const words = str\n        .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\")\n        .split(\" \");\n    return words.reduce((res, word) => {\n        res += word.substr(0, abbrLettersCount);\n        return res;\n    }, \"\");\n}\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\nexport function shorten(input, options = {}) {\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options;\n    const segments = input.split(separator);\n    const shortSegments = segments.reduce((acc, val) => {\n        // split the given segment into many terms based on an eventual camel cased name\n        const segmentTerms = val\n            .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\")\n            .split(\" \");\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        const length = segmentTerms.length > 1 ? termLength : segmentLength;\n        const shortSegment = segmentTerms\n            .map((term) => term.substr(0, length))\n            .join(\"\");\n        acc.push(shortSegment);\n        return acc;\n    }, []);\n    return shortSegments.join(separator);\n}\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input, options = {}) {\n    const hashFunction = shajs(\"sha1\");\n    hashFunction.update(input, \"utf8\");\n    const hashedInput = hashFunction.digest(\"hex\");\n    if (options.length) {\n        return hashedInput.slice(0, options.length);\n    }\n    return hashedInput;\n}\n\n//# sourceMappingURL=StringUtils.js.map\n","export class VersionUtils {\n    static isGreaterOrEqual(version, targetVersion) {\n        const v1 = parseVersion(version);\n        const v2 = parseVersion(targetVersion);\n        return (v1[0] > v2[0] ||\n            (v1[0] === v2[0] && v1[1] > v2[1]) ||\n            (v1[0] === v2[0] && v1[1] === v2[1] && v1[2] >= v2[2]));\n    }\n}\nfunction parseVersion(version = \"\") {\n    const v = [0, 0, 0];\n    version.split(\".\").forEach((value, i) => (v[i] = parseInt(value, 10)));\n    return v;\n}\n\n//# sourceMappingURL=VersionUtils.js.map\n","import { hash, shorten } from \"../util/StringUtils\";\nimport { VersionUtils } from \"../util/VersionUtils\";\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver) {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type);\n    }\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver) {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type);\n    }\n    static isReleaseVersionOrGreater(driver, version) {\n        return (driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version));\n    }\n    static isPostgresFamily(driver) {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(driver.options.type);\n    }\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options, buildOptions) {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url);\n            if (buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(options, buildOptions) {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url);\n            if (buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias({ maxAliasLength }, buildOptions, ...alias) {\n        const joiner = buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\";\n        let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner);\n        if (maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias);\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias;\n                }\n            }\n            return hash(newAlias, { length: maxAliasLength });\n        }\n        return newAlias;\n    }\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias({ maxAliasLength }, buildOptions, ...alias) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions);\n            buildOptions = { shorten: false, joiner: \"_\" };\n        }\n        else {\n            buildOptions = Object.assign({ shorten: false, joiner: \"_\" }, buildOptions);\n        }\n        return this.buildAlias({ maxAliasLength }, buildOptions, ...alias);\n    }\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Extracts connection data from the connection url.\n     */\n    static parseConnectionUrl(url) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        };\n    }\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    static parseMongoDBConnectionUrl(url) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n        let afterQuestionMark = \"\";\n        let host = undefined;\n        let port = undefined;\n        let hostReplicaSet = undefined;\n        let replicaSet = undefined;\n        let optionsObject = {};\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(afterBase.indexOf(\"?\") + 1, afterBase.length);\n            const optionsList = afterQuestionMark.split(\"&\");\n            let optionKey;\n            let optionValue;\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0];\n                optionValue = optionItem.split(\"=\")[1];\n                optionsObject[optionKey] = optionValue;\n            });\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"];\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort;\n        }\n        else {\n            ;\n            [host, port] = hostAndPort.split(\":\");\n        }\n        let connectionUrl = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        };\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value;\n        }\n        return connectionUrl;\n    }\n}\n\n//# sourceMappingURL=DriverUtils.js.map\n","import { QueryBuilderUtils } from \"./QueryBuilderUtils\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Stores all join attributes which will be used to build a JOIN query.\n */\nexport class JoinAttribute {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryExpressionMap, joinAttribute) {\n        this.connection = connection;\n        this.queryExpressionMap = queryExpressionMap;\n        this.isSelectedEvaluated = false;\n        this.relationEvaluated = false;\n        if (joinAttribute) {\n            ObjectUtils.assign(this, joinAttribute);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    get isMany() {\n        if (this.isMappingMany !== undefined)\n            return this.isMappingMany;\n        if (this.relation)\n            return this.relation.isManyToMany || this.relation.isOneToMany;\n        return false;\n    }\n    /**\n     * Indicates if this join is selected.\n     */\n    get isSelected() {\n        if (!this.isSelectedEvaluated) {\n            let getValue = () => {\n                for (const select of this.queryExpressionMap.selects) {\n                    if (select.selection === this.alias.name)\n                        return true;\n                    if (this.metadata &&\n                        !!this.metadata.columns.find((column) => select.selection ===\n                            this.alias.name + \".\" + column.propertyPath))\n                        return true;\n                }\n                return false;\n            };\n            this.isSelectedCache = getValue();\n            this.isSelectedEvaluated = true;\n        }\n        return this.isSelectedCache;\n    }\n    /**\n     * Name of the table which we should join.\n     */\n    get tablePath() {\n        return this.metadata\n            ? this.metadata.tablePath\n            : this.entityOrProperty;\n    }\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias() {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n        return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\n    }\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath() {\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n            return undefined;\n        return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\n    }\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\n     */\n    get relation() {\n        if (!this.relationEvaluated) {\n            let getValue = () => {\n                if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n                    return undefined;\n                const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);\n                let relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n                if (relation) {\n                    return relation;\n                }\n                if (relationOwnerSelection.metadata.parentEntityMetadata) {\n                    relation =\n                        relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(this.relationPropertyPath);\n                    if (relation) {\n                        return relation;\n                    }\n                }\n                throw new TypeORMError(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n            };\n            this.relationCache = getValue.bind(this)();\n            this.relationEvaluated = true;\n        }\n        return this.relationCache;\n    }\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata() {\n        // entityOrProperty is relation, e.g. \"post.category\"\n        if (this.relation)\n            return this.relation.inverseEntityMetadata;\n        // entityOrProperty is Entity class\n        if (this.connection.hasMetadata(this.entityOrProperty))\n            return this.connection.getMetadata(this.entityOrProperty);\n        // Overriden mapping entity provided for leftJoinAndMapOne with custom query builder\n        if (this.mapAsEntity && this.connection.hasMetadata(this.mapAsEntity)) {\n            return this.connection.getMetadata(this.mapAsEntity);\n        }\n        return undefined;\n        /*if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\n\n            // first try to find entity with such name, this is needed when entity does not have a target class,\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\n            if (metadata)\n                return metadata;\n\n            // check if we have entity with such table name, and use its metadata if found\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\n        }*/\n    }\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias() {\n        if (!this.relation) {\n            throw new TypeORMError(`Cannot get junction table for join without relation.`);\n        }\n        if (typeof this.entityOrProperty !== \"string\") {\n            throw new TypeORMError(`Junction property is not defined.`);\n        }\n        const aliasProperty = this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\n        if (this.relation.isOwning) {\n            return DriverUtils.buildAlias(this.connection.driver, undefined, aliasProperty, this.alias.name);\n        }\n        else {\n            return DriverUtils.buildAlias(this.connection.driver, undefined, this.alias.name, aliasProperty);\n        }\n    }\n    get mapToPropertyParentAlias() {\n        if (!this.mapToProperty)\n            return undefined;\n        return this.mapToProperty.split(\".\")[0];\n    }\n    get mapToPropertyPropertyName() {\n        if (!this.mapToProperty)\n            return undefined;\n        return this.mapToProperty.split(\".\")[1];\n    }\n}\n\n//# sourceMappingURL=JoinAttribute.js.map\n","import { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\nimport { TypeORMError } from \"../../error/TypeORMError\";\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nexport class RelationIdAttribute {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryExpressionMap, relationIdAttribute) {\n        this.queryExpressionMap = queryExpressionMap;\n        /**\n         * Indicates if relation id should NOT be loaded as id map.\n         */\n        this.disableMixedMap = false;\n        ObjectUtils.assign(this, relationIdAttribute || {});\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    get joinInverseSideMetadata() {\n        return this.relation.inverseEntityMetadata;\n    }\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value must be a string representation of alias property`);\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n    }\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value must be a string representation of alias property`);\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n    }\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value must be a string representation of alias property`);\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n        if (!relation)\n            throw new TypeORMError(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n        return relation;\n    }\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias() {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rid\";\n    }\n    /**\n     * Metadata of the joined entity.\n     * If extra condition without entity was joined, then it will return undefined.\n     */\n    get junctionMetadata() {\n        return this.relation.junctionEntityMetadata;\n    }\n    get mapToPropertyParentAlias() {\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n    }\n    get mapToPropertyPropertyPath() {\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n    }\n}\n\n//# sourceMappingURL=RelationIdAttribute.js.map\n","import { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\nimport { TypeORMError } from \"../../error/TypeORMError\";\nexport class RelationCountAttribute {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(expressionMap, relationCountAttribute) {\n        this.expressionMap = expressionMap;\n        ObjectUtils.assign(this, relationCountAttribute || {});\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    get joinInverseSideMetadata() {\n        return this.relation.inverseEntityMetadata;\n    }\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value must be a string representation of alias property`);\n        return this.relationName.split(\".\")[0];\n    }\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationProperty() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value is a string representation of alias property`);\n        return this.relationName.split(\".\")[1];\n    }\n    get junctionAlias() {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rc\";\n    }\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value is a string representation of alias property`);\n        const [parentAlias, propertyPath] = this.relationName.split(\".\");\n        const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new TypeORMError(`Relation with property path ${propertyPath} in entity was not found.`);\n        return relation;\n    }\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value is a string representation of alias property`);\n        const parentAlias = this.relationName.split(\".\")[0];\n        const selection = this.expressionMap.findAliasByName(parentAlias);\n        return selection.metadata;\n    }\n    get mapToPropertyPropertyName() {\n        return this.mapToProperty.split(\".\")[1];\n    }\n}\n\n//# sourceMappingURL=RelationCountAttribute.js.map\n","import { Alias } from \"./Alias\";\nimport { JoinAttribute } from \"./JoinAttribute\";\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\nimport { TypeORMError } from \"../error\";\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nexport class QueryExpressionMap {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Strategy to load relations.\n         */\n        this.relationLoadStrategy = \"join\";\n        /**\n         * Indicates if QueryBuilder used to select entities and not a raw results.\n         */\n        this.queryEntity = false;\n        /**\n         * All aliases (including main alias) used in the query.\n         */\n        this.aliases = [];\n        /**\n         * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n         */\n        this.queryType = \"select\";\n        /**\n         * Data needs to be SELECT-ed.\n         */\n        this.selects = [];\n        /**\n         * Max execution time in millisecond.\n         */\n        this.maxExecutionTime = 0;\n        /**\n         * Whether SELECT is DISTINCT.\n         */\n        this.selectDistinct = false;\n        /**\n         * SELECT DISTINCT ON query (postgres).\n         */\n        this.selectDistinctOn = [];\n        /**\n         * Extra returning columns to be added to the returning statement if driver supports it.\n         */\n        this.extraReturningColumns = [];\n        /**\n         * Optional on conflict statement used in insertion query in postgres.\n         */\n        this.onConflict = \"\";\n        /**\n         * Optional on ignore statement used in insertion query in databases.\n         */\n        this.onIgnore = false;\n        /**\n         * JOIN queries.\n         */\n        this.joinAttributes = [];\n        /**\n         * RelationId queries.\n         */\n        this.relationIdAttributes = [];\n        /**\n         * Relation count queries.\n         */\n        this.relationCountAttributes = [];\n        /**\n         * WHERE queries.\n         */\n        this.wheres = [];\n        /**\n         * HAVING queries.\n         */\n        this.havings = [];\n        /**\n         * ORDER BY queries.\n         */\n        this.orderBys = {};\n        /**\n         * GROUP BY queries.\n         */\n        this.groupBys = [];\n        /**\n         * Indicates if soft-deleted rows should be included in entity result.\n         * By default the soft-deleted rows are not included.\n         */\n        this.withDeleted = false;\n        /**\n         * Parameters used to be escaped in final query.\n         */\n        this.parameters = {};\n        /**\n         * Indicates if alias, table names and column names will be escaped by driver, or not.\n         *\n         * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n         */\n        this.disableEscaping = true;\n        /**\n         * Indicates if virtual columns should be included in entity result.\n         *\n         * todo: what to do with it? is it properly used? what about persistence?\n         */\n        this.enableRelationIdValues = false;\n        /**\n         * Extra where condition appended to the end of original where conditions with AND keyword.\n         * Original condition will be wrapped into brackets.\n         */\n        this.extraAppendedAndWhereCondition = \"\";\n        /**\n         * Indicates if query builder creates a subquery.\n         */\n        this.subQuery = false;\n        /**\n         * Indicates if property names are prefixed with alias names during property replacement.\n         * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n         * but user can use them in WHERE expressions.\n         */\n        this.aliasNamePrefixingEnabled = true;\n        /**\n         * Options that define QueryBuilder behaviour.\n         */\n        this.options = [];\n        /**\n         * List of columns where data should be inserted.\n         * Used in INSERT query.\n         */\n        this.insertColumns = [];\n        /**\n         * Used if user wants to update or delete a specific entities.\n         */\n        this.whereEntities = [];\n        /**\n         * Indicates if entity must be updated after insertion / updation.\n         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n         */\n        this.updateEntity = true;\n        /**\n         * Indicates if listeners and subscribers must be called before and after query execution.\n         */\n        this.callListeners = true;\n        /**\n         * Indicates if query must be wrapped into transaction.\n         */\n        this.useTransaction = false;\n        /**\n         * Extra parameters.\n         *\n         * @deprecated Use standard parameters instead\n         */\n        this.nativeParameters = {};\n        /**\n         * Items from an entity that have been locally generated & are recorded here for later use.\n         * Examples include the UUID generation when the database does not natively support it.\n         * These are included in the entity index order.\n         */\n        this.locallyGenerated = {};\n        this.commonTableExpressions = [];\n        if (connection.options.relationLoadStrategy) {\n            this.relationLoadStrategy = connection.options.relationLoadStrategy;\n        }\n        this.timeTravel =\n            connection.options\n                ?.timeTravelQueries || false;\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Get all ORDER BY queries - if order by is specified by user then it uses them,\n     * otherwise it uses default entity order by if it was set.\n     */\n    get allOrderBys() {\n        if (!Object.keys(this.orderBys).length &&\n            this.mainAlias.hasMetadata &&\n            this.options.indexOf(\"disable-global-order\") === -1) {\n            const entityOrderBy = this.mainAlias.metadata.orderBy || {};\n            return Object.keys(entityOrderBy).reduce((orderBy, key) => {\n                orderBy[this.mainAlias.name + \".\" + key] = entityOrderBy[key];\n                return orderBy;\n            }, {});\n        }\n        return this.orderBys;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    setMainAlias(alias) {\n        // if main alias is already set then remove it from the array\n        // if (this.mainAlias)\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n        // set new main alias\n        this.mainAlias = alias;\n        return alias;\n    }\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    createAlias(options) {\n        let aliasName = options.name;\n        if (!aliasName && options.tablePath)\n            aliasName = options.tablePath;\n        if (!aliasName && typeof options.target === \"function\")\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n        const alias = new Alias();\n        alias.type = options.type;\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tablePath)\n            alias.tablePath = options.tablePath;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n        this.aliases.push(alias);\n        return alias;\n    }\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    findAliasByName(aliasName) {\n        const alias = this.aliases.find((alias) => alias.name === aliasName);\n        if (!alias)\n            throw new TypeORMError(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\n        return alias;\n    }\n    findColumnByAliasExpression(aliasExpression) {\n        const [aliasName, propertyPath] = aliasExpression.split(\".\");\n        const alias = this.findAliasByName(aliasName);\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\n    }\n    /**\n     * Gets relation metadata of the relation this query builder works with.\n     *\n     * todo: add proper exceptions\n     */\n    get relationMetadata() {\n        if (!this.mainAlias)\n            throw new TypeORMError(`Entity to work with is not specified!`); // todo: better message\n        const relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n        if (!relationMetadata)\n            throw new TypeORMError(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`); // todo: better message\n        return relationMetadata;\n    }\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    clone() {\n        const map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map((select) => select);\n        map.maxExecutionTime = this.maxExecutionTime;\n        map.selectDistinct = this.selectDistinct;\n        map.selectDistinctOn = this.selectDistinctOn;\n        this.aliases.forEach((alias) => map.aliases.push(new Alias(alias)));\n        map.relationLoadStrategy = this.relationLoadStrategy;\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.returning = this.returning;\n        map.onConflict = this.onConflict;\n        map.onIgnore = this.onIgnore;\n        map.onUpdate = this.onUpdate;\n        map.joinAttributes = this.joinAttributes.map((join) => new JoinAttribute(this.connection, this, join));\n        map.relationIdAttributes = this.relationIdAttributes.map((relationId) => new RelationIdAttribute(this, relationId));\n        map.relationCountAttributes = this.relationCountAttributes.map((relationCount) => new RelationCountAttribute(this, relationCount));\n        map.wheres = this.wheres.map((where) => ({ ...where }));\n        map.havings = this.havings.map((having) => ({ ...having }));\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map((groupBy) => groupBy);\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.onLocked = this.onLocked;\n        map.lockVersion = this.lockVersion;\n        map.lockTables = this.lockTables;\n        map.withDeleted = this.withDeleted;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n        map.subQuery = this.subQuery;\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n        map.cache = this.cache;\n        map.cacheId = this.cacheId;\n        map.cacheDuration = this.cacheDuration;\n        map.relationPropertyPath = this.relationPropertyPath;\n        map.of = this.of;\n        map.insertColumns = this.insertColumns;\n        map.whereEntities = this.whereEntities;\n        map.updateEntity = this.updateEntity;\n        map.callListeners = this.callListeners;\n        map.useTransaction = this.useTransaction;\n        map.timeTravel = this.timeTravel;\n        map.nativeParameters = Object.assign({}, this.nativeParameters);\n        map.comment = this.comment;\n        map.commonTableExpressions = this.commonTableExpressions.map((cteOptions) => ({\n            alias: cteOptions.alias,\n            queryBuilder: typeof cteOptions.queryBuilder === \"string\"\n                ? cteOptions.queryBuilder\n                : cteOptions.queryBuilder.clone(),\n            options: cteOptions.options,\n        }));\n        return map;\n    }\n}\n\n//# sourceMappingURL=QueryExpressionMap.js.map\n","/**\n * Syntax sugar.\n * Allows to use brackets in WHERE expressions for better syntax.\n */\nexport class Brackets {\n    /**\n     * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.\n     */\n    constructor(whereFactory) {\n        this[\"@instanceof\"] = Symbol.for(\"Brackets\");\n        this.whereFactory = whereFactory;\n    }\n}\n\n//# sourceMappingURL=Brackets.js.map\n","export class ApplyValueTransformers {\n    static transformFrom(transformer, databaseValue) {\n        if (Array.isArray(transformer)) {\n            const reverseTransformers = transformer.slice().reverse();\n            return reverseTransformers.reduce((transformedValue, _transformer) => {\n                return _transformer.from(transformedValue);\n            }, databaseValue);\n        }\n        return transformer.from(databaseValue);\n    }\n    static transformTo(transformer, entityValue) {\n        if (Array.isArray(transformer)) {\n            return transformer.reduce((transformedValue, _transformer) => {\n                return _transformer.to(transformedValue);\n            }, entityValue);\n        }\n        return transformer.to(entityValue);\n    }\n}\n\n//# sourceMappingURL=ApplyValueTransformers.js.map\n","import { InstanceChecker } from \"../util/InstanceChecker\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(type, value, useParameter = true, multipleParameters = false, getSql, objectLiteralParameters) {\n        this[\"@instanceof\"] = Symbol.for(\"FindOperator\");\n        this._type = type;\n        this._value = value;\n        this._useParameter = useParameter;\n        this._multipleParameters = multipleParameters;\n        this._getSql = getSql;\n        this._objectLiteralParameters = objectLiteralParameters;\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.useParameter;\n        return this._useParameter;\n    }\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.multipleParameters;\n        return this._multipleParameters;\n    }\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.value;\n        return this._value;\n    }\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get objectLiteralParameters() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.objectLiteralParameters;\n        return this._objectLiteralParameters;\n    }\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get child() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value;\n        return undefined;\n    }\n    /**\n     * Gets the SQL generator\n     */\n    get getSql() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.getSql;\n        return this._getSql;\n    }\n    transformValue(transformer) {\n        if (this._value instanceof FindOperator) {\n            this._value.transformValue(transformer);\n        }\n        else {\n            this._value =\n                Array.isArray(this._value) && this._multipleParameters\n                    ? this._value.map((v) => transformer &&\n                        ApplyValueTransformers.transformTo(transformer, v))\n                    : ApplyValueTransformers.transformTo(transformer, this._value);\n        }\n    }\n}\n\n//# sourceMappingURL=FindOperator.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: In([...]) }\n */\nexport function In(value) {\n    return new FindOperator(\"in\", value, true, true);\n}\n\n//# sourceMappingURL=In.js.map\n","// Escape special characters in regular expressions\n// Per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\nconst ESCAPE_REGEXP = /[.*+\\-?^${}()|[\\]\\\\]/g;\nexport const escapeRegExp = (s) => s.replace(ESCAPE_REGEXP, \"\\\\$&\");\n\n//# sourceMappingURL=escapeRegExp.js.map\n","import { QueryExpressionMap } from \"./QueryExpressionMap\";\nimport { Brackets } from \"./Brackets\";\nimport { FindOperator } from \"../find-options/FindOperator\";\nimport { In } from \"../find-options/operator/In\";\nimport { TypeORMError } from \"../error\";\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nimport { escapeRegExp } from \"../util/escapeRegExp\";\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class QueryBuilder {\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connectionOrQueryBuilder, queryRunner) {\n        this[\"@instanceof\"] = Symbol.for(\"QueryBuilder\");\n        /**\n         * Memo to help keep place of current parameter index for `createParameter`\n         */\n        this.parameterIndex = 0;\n        if (InstanceChecker.isDataSource(connectionOrQueryBuilder)) {\n            this.connection = connectionOrQueryBuilder;\n            this.queryRunner = queryRunner;\n            this.expressionMap = new QueryExpressionMap(this.connection);\n        }\n        else {\n            this.connection = connectionOrQueryBuilder.connection;\n            this.queryRunner = connectionOrQueryBuilder.queryRunner;\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\n        }\n    }\n    static registerQueryBuilderClass(name, factory) {\n        QueryBuilder.queryBuilderRegistry[name] = factory;\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias() {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(`Main alias is not set`); // todo: better exception\n        return this.expressionMap.mainAlias.name;\n    }\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection, selectionAliasName) {\n        this.expressionMap.queryType = \"select\";\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map((selection) => ({\n                selection: selection,\n            }));\n        }\n        else if (selection) {\n            this.expressionMap.selects = [\n                { selection: selection, aliasName: selectionAliasName },\n            ];\n        }\n        if (InstanceChecker.isSelectQueryBuilder(this))\n            return this;\n        return QueryBuilder.queryBuilderRegistry[\"SelectQueryBuilder\"](this);\n    }\n    /**\n     * Creates INSERT query.\n     */\n    insert() {\n        this.expressionMap.queryType = \"insert\";\n        if (InstanceChecker.isInsertQueryBuilder(this))\n            return this;\n        return QueryBuilder.queryBuilderRegistry[\"InsertQueryBuilder\"](this);\n    }\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(entityOrTableNameUpdateSet, maybeUpdateSet) {\n        const updateSet = maybeUpdateSet\n            ? maybeUpdateSet\n            : entityOrTableNameUpdateSet;\n        entityOrTableNameUpdateSet = InstanceChecker.isEntitySchema(entityOrTableNameUpdateSet)\n            ? entityOrTableNameUpdateSet.options.name\n            : entityOrTableNameUpdateSet;\n        if (typeof entityOrTableNameUpdateSet === \"function\" ||\n            typeof entityOrTableNameUpdateSet === \"string\") {\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        this.expressionMap.queryType = \"update\";\n        this.expressionMap.valuesSet = updateSet;\n        if (InstanceChecker.isUpdateQueryBuilder(this))\n            return this;\n        return QueryBuilder.queryBuilderRegistry[\"UpdateQueryBuilder\"](this);\n    }\n    /**\n     * Creates DELETE query.\n     */\n    delete() {\n        this.expressionMap.queryType = \"delete\";\n        if (InstanceChecker.isDeleteQueryBuilder(this))\n            return this;\n        return QueryBuilder.queryBuilderRegistry[\"DeleteQueryBuilder\"](this);\n    }\n    softDelete() {\n        this.expressionMap.queryType = \"soft-delete\";\n        if (InstanceChecker.isSoftDeleteQueryBuilder(this))\n            return this;\n        return QueryBuilder.queryBuilderRegistry[\"SoftDeleteQueryBuilder\"](this);\n    }\n    restore() {\n        this.expressionMap.queryType = \"restore\";\n        if (InstanceChecker.isSoftDeleteQueryBuilder(this))\n            return this;\n        return QueryBuilder.queryBuilderRegistry[\"SoftDeleteQueryBuilder\"](this);\n    }\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(entityTargetOrPropertyPath, maybePropertyPath) {\n        const entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;\n        const propertyPath = arguments.length === 2\n            ? maybePropertyPath\n            : entityTargetOrPropertyPath;\n        this.expressionMap.queryType = \"relation\";\n        this.expressionMap.relationPropertyPath = propertyPath;\n        if (entityTarget) {\n            const mainAlias = this.createFromAlias(entityTarget);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        if (InstanceChecker.isRelationQueryBuilder(this))\n            return this;\n        return QueryBuilder.queryBuilderRegistry[\"RelationQueryBuilder\"](this);\n    }\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation(target, relation) {\n        const entityMetadata = this.connection.getMetadata(target);\n        const relations = Array.isArray(relation) ? relation : [relation];\n        return relations.every((relation) => {\n            return !!entityMetadata.findRelationWithPropertyPath(relation);\n        });\n    }\n    /**\n     * Check the existence of a parameter for this query builder.\n     */\n    hasParameter(key) {\n        return (this.parentQueryBuilder?.hasParameter(key) ||\n            key in this.expressionMap.parameters);\n    }\n    /**\n     * Sets parameter name and its value.\n     *\n     * The key for this parameter may contain numbers, letters, underscores, or periods.\n     */\n    setParameter(key, value) {\n        if (typeof value === \"function\") {\n            throw new TypeORMError(`Function parameter isn't supported in the parameters. Please check \"${key}\" parameter.`);\n        }\n        if (!key.match(/^([A-Za-z0-9_.]+)$/)) {\n            throw new TypeORMError(\"QueryBuilder parameter keys may only contain numbers, letters, underscores, or periods.\");\n        }\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setParameter(key, value);\n        }\n        this.expressionMap.parameters[key] = value;\n        return this;\n    }\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters) {\n        for (const [key, value] of Object.entries(parameters)) {\n            this.setParameter(key, value);\n        }\n        return this;\n    }\n    createParameter(value) {\n        let parameterName;\n        do {\n            parameterName = `orm_param_${this.parameterIndex++}`;\n        } while (this.hasParameter(parameterName));\n        this.setParameter(parameterName, value);\n        return `:${parameterName}`;\n    }\n    /**\n     * Adds native parameters from the given object.\n     *\n     * @deprecated Use `setParameters` instead\n     */\n    setNativeParameters(parameters) {\n        // set parent query builder parameters as well in sub-query mode\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setNativeParameters(parameters);\n        }\n        Object.keys(parameters).forEach((key) => {\n            this.expressionMap.nativeParameters[key] = parameters[key];\n        });\n        return this;\n    }\n    /**\n     * Gets all parameters.\n     */\n    getParameters() {\n        const parameters = Object.assign({}, this.expressionMap.parameters);\n        // add discriminator column parameter if it exist\n        if (this.expressionMap.mainAlias &&\n            this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter((childMetadata) => childMetadata.discriminatorColumn)\n                    .map((childMetadata) => childMetadata.discriminatorValue);\n                values.push(metadata.discriminatorValue);\n                parameters[\"discriminatorColumnValues\"] = values;\n            }\n        }\n        return parameters;\n    }\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql() {\n        // TODO rename to logSql()\n        const [query, parameters] = this.getQueryAndParameters();\n        this.connection.logger.logQuery(query, parameters);\n        return this;\n    }\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql() {\n        return this.getQueryAndParameters()[0];\n    }\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    getQueryAndParameters() {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        const query = this.getQuery();\n        const parameters = this.getParameters();\n        return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);\n    }\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute() {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        try {\n            return await queryRunner.query(sql, parameters); // await is needed here because we are using finally\n        }\n        finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    createQueryBuilder(queryRunner) {\n        return new this.constructor(this.connection, queryRunner ?? this.queryRunner);\n    }\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone() {\n        return new this.constructor(this);\n    }\n    /**\n     * Includes a Query comment in the query builder.  This is helpful for debugging purposes,\n     * such as finding a specific query in the database server's logs, or for categorization using\n     * an APM product.\n     */\n    comment(comment) {\n        this.expressionMap.comment = comment;\n        return this;\n    }\n    /**\n     * Disables escaping.\n     */\n    disableEscaping() {\n        this.expressionMap.disableEscaping = false;\n        return this;\n    }\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name) {\n        if (!this.expressionMap.disableEscaping)\n            return name;\n        return this.connection.driver.escape(name);\n    }\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    setQueryRunner(queryRunner) {\n        this.queryRunner = queryRunner;\n        return this;\n    }\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    callListeners(enabled) {\n        this.expressionMap.callListeners = enabled;\n        return this;\n    }\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    useTransaction(enabled) {\n        this.expressionMap.useTransaction = enabled;\n        return this;\n    }\n    /**\n     * Adds CTE to query\n     */\n    addCommonTableExpression(queryBuilder, alias, options) {\n        this.expressionMap.commonTableExpressions.push({\n            queryBuilder,\n            alias,\n            options: options || {},\n        });\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    getTableName(tablePath) {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return this.escape(i);\n        })\n            .join(\".\");\n    }\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    getMainTableName() {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(`Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`);\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath;\n        return this.expressionMap.mainAlias.tablePath;\n    }\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    createFromAlias(entityTarget, aliasName) {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            const metadata = this.connection.getMetadata(entityTarget);\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath,\n            });\n        }\n        else {\n            if (typeof entityTarget === \"string\") {\n                const isSubquery = entityTarget.substr(0, 1) === \"(\" &&\n                    entityTarget.substr(-1) === \")\";\n                return this.expressionMap.createAlias({\n                    type: \"from\",\n                    name: aliasName,\n                    tablePath: !isSubquery\n                        ? entityTarget\n                        : undefined,\n                    subQuery: isSubquery ? entityTarget : undefined,\n                });\n            }\n            const subQueryBuilder = entityTarget(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            const subquery = subQueryBuilder.getQuery();\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                subQuery: subquery,\n            });\n        }\n    }\n    /**\n     * @deprecated this way of replace property names is too slow.\n     *  Instead, we'll replace property names at the end - once query is build.\n     */\n    replacePropertyNames(statement) {\n        return statement;\n    }\n    /**\n     * Replaces all entity's propertyName to name in the given SQL string.\n     */\n    replacePropertyNamesForTheWholeQuery(statement) {\n        const replacements = {};\n        for (const alias of this.expressionMap.aliases) {\n            if (!alias.hasMetadata)\n                continue;\n            const replaceAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled && alias.name\n                ? `${alias.name}.`\n                : \"\";\n            if (!replacements[replaceAliasNamePrefix]) {\n                replacements[replaceAliasNamePrefix] = {};\n            }\n            // Insert & overwrite the replacements from least to most relevant in our replacements object.\n            // To do this we iterate and overwrite in the order of relevance.\n            // Least to Most Relevant:\n            // * Relation Property Path to first join column key\n            // * Relation Property Path + Column Path\n            // * Column Database Name\n            // * Column Property Name\n            // * Column Property Path\n            for (const relation of alias.metadata.relations) {\n                if (relation.joinColumns.length > 0)\n                    replacements[replaceAliasNamePrefix][relation.propertyPath] = relation.joinColumns[0].databaseName;\n            }\n            for (const relation of alias.metadata.relations) {\n                const allColumns = [\n                    ...relation.joinColumns,\n                    ...relation.inverseJoinColumns,\n                ];\n                for (const joinColumn of allColumns) {\n                    const propertyKey = `${relation.propertyPath}.${joinColumn.referencedColumn.propertyPath}`;\n                    replacements[replaceAliasNamePrefix][propertyKey] =\n                        joinColumn.databaseName;\n                }\n            }\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.databaseName] =\n                    column.databaseName;\n            }\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyName] =\n                    column.databaseName;\n            }\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyPath] =\n                    column.databaseName;\n            }\n        }\n        const replacementKeys = Object.keys(replacements);\n        const replaceAliasNamePrefixes = replacementKeys\n            .map((key) => escapeRegExp(key))\n            .join(\"|\");\n        if (replacementKeys.length > 0) {\n            statement = statement.replace(new RegExp(\n            // Avoid a lookbehind here since it's not well supported\n            `([ =(]|^.{0})` + // any of ' =(' or start of line\n                // followed by our prefix, e.g. 'tablename.' or ''\n                `${replaceAliasNamePrefixes\n                    ? \"(\" + replaceAliasNamePrefixes + \")\"\n                    : \"\"}([^ =(),]+)` + // a possible property name: sequence of anything but ' =(),'\n                // terminated by ' =),' or end of line\n                `(?=[ =),]|.{0}$)`, \"gm\"), (...matches) => {\n                let match, pre, p;\n                if (replaceAliasNamePrefixes) {\n                    match = matches[0];\n                    pre = matches[1];\n                    p = matches[3];\n                    if (replacements[matches[2]][p]) {\n                        return `${pre}${this.escape(matches[2].substring(0, matches[2].length - 1))}.${this.escape(replacements[matches[2]][p])}`;\n                    }\n                }\n                else {\n                    match = matches[0];\n                    pre = matches[1];\n                    p = matches[2];\n                    if (replacements[\"\"][p]) {\n                        return `${pre}${this.escape(replacements[\"\"][p])}`;\n                    }\n                }\n                return match;\n            });\n        }\n        return statement;\n    }\n    createComment() {\n        if (!this.expressionMap.comment) {\n            return \"\";\n        }\n        // ANSI SQL 2003 support C style comments - comments that start with `/*` and end with `*/`\n        // In some dialects query nesting is available - but not all.  Because of this, we'll need\n        // to scrub \"ending\" characters from the SQL but otherwise we can leave everything else\n        // as-is and it should be valid.\n        return `/* ${this.expressionMap.comment.replace(/\\*\\//g, \"\")} */ `;\n    }\n    /**\n     * Time travel queries for CockroachDB\n     */\n    createTimeTravelQuery() {\n        if (this.expressionMap.queryType === \"select\" &&\n            this.expressionMap.timeTravel) {\n            return ` AS OF SYSTEM TIME ${this.expressionMap.timeTravel}`;\n        }\n        return \"\";\n    }\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    createWhereExpression() {\n        const conditionsArray = [];\n        const whereExpression = this.createWhereClausesExpression(this.expressionMap.wheres);\n        if (whereExpression.length > 0 && whereExpression !== \"1=1\") {\n            conditionsArray.push(this.replacePropertyNames(whereExpression));\n        }\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            // Adds the global condition of \"non-deleted\" for the entity with delete date columns in select query.\n            if (this.expressionMap.queryType === \"select\" &&\n                !this.expressionMap.withDeleted &&\n                metadata.deleteDateColumn) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias.name +\n                        \".\" +\n                        metadata.deleteDateColumn.propertyName\n                    : metadata.deleteDateColumn.propertyName;\n                const condition = `${this.replacePropertyNames(column)} IS NULL`;\n                conditionsArray.push(condition);\n            }\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias.name +\n                        \".\" +\n                        metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName;\n                const condition = `${this.replacePropertyNames(column)} IN (:...discriminatorColumnValues)`;\n                conditionsArray.push(condition);\n            }\n        }\n        if (this.expressionMap.extraAppendedAndWhereCondition) {\n            const condition = this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\n            conditionsArray.push(condition);\n        }\n        let condition = \"\";\n        // time travel\n        condition += this.createTimeTravelQuery();\n        if (!conditionsArray.length) {\n            condition += \"\";\n        }\n        else if (conditionsArray.length === 1) {\n            condition += ` WHERE ${conditionsArray[0]}`;\n        }\n        else {\n            condition += ` WHERE ( ${conditionsArray.join(\" ) AND ( \")} )`;\n        }\n        return condition;\n    }\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    createReturningExpression(returningType) {\n        const columns = this.getReturningColumns();\n        const driver = this.connection.driver;\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported(returningType)) {\n            columns.push(...this.expressionMap.extraReturningColumns.filter((column) => {\n                return columns.indexOf(column) === -1;\n            }));\n        }\n        if (columns.length) {\n            let columnsExpression = columns\n                .map((column) => {\n                const name = this.escape(column.databaseName);\n                if (driver.options.type === \"mssql\") {\n                    if (this.expressionMap.queryType === \"insert\" ||\n                        this.expressionMap.queryType === \"update\" ||\n                        this.expressionMap.queryType === \"soft-delete\" ||\n                        this.expressionMap.queryType === \"restore\") {\n                        return \"INSERTED.\" + name;\n                    }\n                    else {\n                        return (this.escape(this.getMainTableName()) +\n                            \".\" +\n                            name);\n                    }\n                }\n                else {\n                    return name;\n                }\n            })\n                .join(\", \");\n            if (driver.options.type === \"oracle\") {\n                columnsExpression +=\n                    \" INTO \" +\n                        columns\n                            .map((column) => {\n                            return this.createParameter({\n                                type: driver.columnTypeToNativeParameter(column.type),\n                                dir: driver.oracle.BIND_OUT,\n                            });\n                        })\n                            .join(\", \");\n            }\n            if (driver.options.type === \"mssql\") {\n                if (this.expressionMap.queryType === \"insert\" ||\n                    this.expressionMap.queryType === \"update\") {\n                    columnsExpression += \" INTO @OutputTable\";\n                }\n            }\n            return columnsExpression;\n        }\n        else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning;\n        }\n        return \"\";\n    }\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    getReturningColumns() {\n        const columns = [];\n        if (Array.isArray(this.expressionMap.returning)) {\n            ;\n            this.expressionMap.returning.forEach((columnName) => {\n                if (this.expressionMap.mainAlias.hasMetadata) {\n                    columns.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnName));\n                }\n            });\n        }\n        return columns;\n    }\n    createWhereClausesExpression(clauses) {\n        return clauses\n            .map((clause, index) => {\n            const expression = this.createWhereConditionExpression(clause.condition);\n            switch (clause.type) {\n                case \"and\":\n                    return ((index > 0 ? \"AND \" : \"\") +\n                        `${this.connection.options.isolateWhereStatements\n                            ? \"(\"\n                            : \"\"}${expression}${this.connection.options.isolateWhereStatements\n                            ? \")\"\n                            : \"\"}`);\n                case \"or\":\n                    return ((index > 0 ? \"OR \" : \"\") +\n                        `${this.connection.options.isolateWhereStatements\n                            ? \"(\"\n                            : \"\"}${expression}${this.connection.options.isolateWhereStatements\n                            ? \")\"\n                            : \"\"}`);\n            }\n            return expression;\n        })\n            .join(\" \")\n            .trim();\n    }\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    createWhereConditionExpression(condition, alwaysWrap = false) {\n        if (typeof condition === \"string\")\n            return condition;\n        if (Array.isArray(condition)) {\n            if (condition.length === 0) {\n                return \"1=1\";\n            }\n            // In the future we should probably remove this entire condition\n            // but for now to prevent any breaking changes it exists.\n            if (condition.length === 1 && !alwaysWrap) {\n                return this.createWhereClausesExpression(condition);\n            }\n            return \"(\" + this.createWhereClausesExpression(condition) + \")\";\n        }\n        const { driver } = this.connection;\n        switch (condition.operator) {\n            case \"lessThan\":\n                return `${condition.parameters[0]} < ${condition.parameters[1]}`;\n            case \"lessThanOrEqual\":\n                return `${condition.parameters[0]} <= ${condition.parameters[1]}`;\n            case \"arrayContains\":\n                return `${condition.parameters[0]} @> ${condition.parameters[1]}`;\n            case \"jsonContains\":\n                return `${condition.parameters[0]} ::jsonb @> ${condition.parameters[1]}`;\n            case \"arrayContainedBy\":\n                return `${condition.parameters[0]} <@ ${condition.parameters[1]}`;\n            case \"arrayOverlap\":\n                return `${condition.parameters[0]} && ${condition.parameters[1]}`;\n            case \"moreThan\":\n                return `${condition.parameters[0]} > ${condition.parameters[1]}`;\n            case \"moreThanOrEqual\":\n                return `${condition.parameters[0]} >= ${condition.parameters[1]}`;\n            case \"notEqual\":\n                return `${condition.parameters[0]} != ${condition.parameters[1]}`;\n            case \"equal\":\n                return `${condition.parameters[0]} = ${condition.parameters[1]}`;\n            case \"ilike\":\n                if (driver.options.type === \"postgres\" ||\n                    driver.options.type === \"cockroachdb\") {\n                    return `${condition.parameters[0]} ILIKE ${condition.parameters[1]}`;\n                }\n                return `UPPER(${condition.parameters[0]}) LIKE UPPER(${condition.parameters[1]})`;\n            case \"like\":\n                return `${condition.parameters[0]} LIKE ${condition.parameters[1]}`;\n            case \"between\":\n                return `${condition.parameters[0]} BETWEEN ${condition.parameters[1]} AND ${condition.parameters[2]}`;\n            case \"in\":\n                if (condition.parameters.length <= 1) {\n                    return \"0=1\";\n                }\n                return `${condition.parameters[0]} IN (${condition.parameters\n                    .slice(1)\n                    .join(\", \")})`;\n            case \"any\":\n                if (driver.options.type === \"cockroachdb\") {\n                    return `${condition.parameters[0]}::STRING = ANY(${condition.parameters[1]}::STRING[])`;\n                }\n                return `${condition.parameters[0]} = ANY(${condition.parameters[1]})`;\n            case \"isNull\":\n                return `${condition.parameters[0]} IS NULL`;\n            case \"not\":\n                return `NOT(${this.createWhereConditionExpression(condition.condition)})`;\n            case \"brackets\":\n                return `${this.createWhereConditionExpression(condition.condition, true)}`;\n            case \"and\":\n                return \"(\" + condition.parameters.join(\" AND \") + \")\";\n            case \"or\":\n                return \"(\" + condition.parameters.join(\" OR \") + \")\";\n        }\n        throw new TypeError(`Unsupported FindOperator ${FindOperator.constructor.name}`);\n    }\n    createCteExpression() {\n        if (!this.hasCommonTableExpressions()) {\n            return \"\";\n        }\n        const databaseRequireRecusiveHint = this.connection.driver.cteCapabilities.requiresRecursiveHint;\n        const cteStrings = this.expressionMap.commonTableExpressions.map((cte) => {\n            const cteBodyExpression = typeof cte.queryBuilder === \"string\"\n                ? cte.queryBuilder\n                : cte.queryBuilder.getQuery();\n            if (typeof cte.queryBuilder !== \"string\") {\n                if (cte.queryBuilder.hasCommonTableExpressions()) {\n                    throw new TypeORMError(`Nested CTEs aren't supported (CTE: ${cte.alias})`);\n                }\n                if (!this.connection.driver.cteCapabilities.writable &&\n                    !InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)) {\n                    throw new TypeORMError(`Only select queries are supported in CTEs in ${this.connection.options.type} (CTE: ${cte.alias})`);\n                }\n                this.setParameters(cte.queryBuilder.getParameters());\n            }\n            let cteHeader = this.escape(cte.alias);\n            if (cte.options.columnNames) {\n                const escapedColumnNames = cte.options.columnNames.map((column) => this.escape(column));\n                if (InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)) {\n                    if (cte.queryBuilder.expressionMap.selects.length &&\n                        cte.options.columnNames.length !==\n                            cte.queryBuilder.expressionMap.selects.length) {\n                        throw new TypeORMError(`cte.options.columnNames length (${cte.options.columnNames.length}) doesn't match subquery select list length ${cte.queryBuilder.expressionMap.selects.length} (CTE: ${cte.alias})`);\n                    }\n                }\n                cteHeader += `(${escapedColumnNames.join(\", \")})`;\n            }\n            const recursiveClause = cte.options.recursive && databaseRequireRecusiveHint\n                ? \"RECURSIVE\"\n                : \"\";\n            let materializeClause = \"\";\n            if (this.connection.driver.cteCapabilities.materializedHint &&\n                cte.options.materialized !== undefined) {\n                materializeClause = cte.options.materialized\n                    ? \"MATERIALIZED\"\n                    : \"NOT MATERIALIZED\";\n            }\n            return [\n                recursiveClause,\n                cteHeader,\n                \"AS\",\n                materializeClause,\n                `(${cteBodyExpression})`,\n            ]\n                .filter(Boolean)\n                .join(\" \");\n        });\n        return \"WITH \" + cteStrings.join(\", \") + \" \";\n    }\n    /**\n     * Creates \"WHERE\" condition for an in-ids condition.\n     */\n    getWhereInIdsCondition(ids) {\n        const metadata = this.expressionMap.mainAlias.metadata;\n        const normalized = (Array.isArray(ids) ? ids : [ids]).map((id) => metadata.ensureEntityIdMap(id));\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys) {\n            const primaryColumn = metadata.primaryColumns[0];\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            // This also fails for embedded & relation, so until that is fixed skip it.\n            if (!primaryColumn.transformer &&\n                !primaryColumn.relationMetadata &&\n                !primaryColumn.embeddedMetadata) {\n                return {\n                    [primaryColumn.propertyName]: In(normalized.map((id) => primaryColumn.getEntityValue(id, false))),\n                };\n            }\n        }\n        return new Brackets((qb) => {\n            for (const data of normalized) {\n                qb.orWhere(new Brackets((qb) => qb.where(data)));\n            }\n        });\n    }\n    getExistsCondition(subQuery) {\n        const query = subQuery\n            .clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(\"1\")\n            .setOption(\"disable-global-order\");\n        return [`EXISTS (${query.getQuery()})`, query.getParameters()];\n    }\n    findColumnsForPropertyPath(propertyPath) {\n        // Make a helper to iterate the entity & relations?\n        // Use that to set the correct alias?  Or the other way around?\n        // Start with the main alias with our property paths\n        let alias = this.expressionMap.mainAlias;\n        const root = [];\n        const propertyPathParts = propertyPath.split(\".\");\n        while (propertyPathParts.length > 1) {\n            const part = propertyPathParts[0];\n            if (!alias?.hasMetadata) {\n                // If there's no metadata, we're wasting our time\n                // and can't actually look any of this up.\n                break;\n            }\n            if (alias.metadata.hasEmbeddedWithPropertyPath(part)) {\n                // If this is an embedded then we should combine the two as part of our lookup.\n                // Instead of just breaking, we keep going with this in case there's an embedded/relation\n                // inside an embedded.\n                propertyPathParts.unshift(`${propertyPathParts.shift()}.${propertyPathParts.shift()}`);\n                continue;\n            }\n            if (alias.metadata.hasRelationWithPropertyPath(part)) {\n                // If this is a relation then we should find the aliases\n                // that match the relation & then continue further down\n                // the property path\n                const joinAttr = this.expressionMap.joinAttributes.find((joinAttr) => joinAttr.relationPropertyPath === part);\n                if (!joinAttr?.alias) {\n                    const fullRelationPath = root.length > 0 ? `${root.join(\".\")}.${part}` : part;\n                    throw new Error(`Cannot find alias for relation at ${fullRelationPath}`);\n                }\n                alias = joinAttr.alias;\n                root.push(...part.split(\".\"));\n                propertyPathParts.shift();\n                continue;\n            }\n            break;\n        }\n        if (!alias) {\n            throw new Error(`Cannot find alias for property ${propertyPath}`);\n        }\n        // Remaining parts are combined back and used to find the actual property path\n        const aliasPropertyPath = propertyPathParts.join(\".\");\n        const columns = alias.metadata.findColumnsWithPropertyPath(aliasPropertyPath);\n        if (!columns.length) {\n            throw new EntityPropertyNotFoundError(propertyPath, alias.metadata);\n        }\n        return [alias, root, columns];\n    }\n    /**\n     * Creates a property paths for a given ObjectLiteral.\n     */\n    createPropertyPath(metadata, entity, prefix = \"\") {\n        const paths = [];\n        for (const key of Object.keys(entity)) {\n            const path = prefix ? `${prefix}.${key}` : key;\n            // There's times where we don't actually want to traverse deeper.\n            // If the value is a `FindOperator`, or null, or not an object, then we don't, for example.\n            if (entity[key] === null ||\n                typeof entity[key] !== \"object\" ||\n                InstanceChecker.isFindOperator(entity[key])) {\n                paths.push(path);\n                continue;\n            }\n            if (metadata.hasEmbeddedWithPropertyPath(path)) {\n                const subPaths = this.createPropertyPath(metadata, entity[key], path);\n                paths.push(...subPaths);\n                continue;\n            }\n            if (metadata.hasRelationWithPropertyPath(path)) {\n                const relation = metadata.findRelationWithPropertyPath(path);\n                // There's also cases where we don't want to return back all of the properties.\n                // These handles the situation where someone passes the model & we don't need to make\n                // a HUGE `where` to uniquely look up the entity.\n                // In the case of a *-to-one, there's only ever one possible entity on the other side\n                // so if the join columns are all defined we can return just the relation itself\n                // because it will fetch only the join columns and do the lookup.\n                if (relation.relationType === \"one-to-one\" ||\n                    relation.relationType === \"many-to-one\") {\n                    const joinColumns = relation.joinColumns\n                        .map((j) => j.referencedColumn)\n                        .filter((j) => !!j);\n                    const hasAllJoinColumns = joinColumns.length > 0 &&\n                        joinColumns.every((column) => column.getEntityValue(entity[key], false));\n                    if (hasAllJoinColumns) {\n                        paths.push(path);\n                        continue;\n                    }\n                }\n                if (relation.relationType === \"one-to-many\" ||\n                    relation.relationType === \"many-to-many\") {\n                    throw new Error(`Cannot query across ${relation.relationType} for property ${path}`);\n                }\n                // For any other case, if the `entity[key]` contains all of the primary keys we can do a\n                // lookup via these.  We don't need to look up via any other values 'cause these are\n                // the unique primary keys.\n                // This handles the situation where someone passes the model & we don't need to make\n                // a HUGE where.\n                const primaryColumns = relation.inverseEntityMetadata.primaryColumns;\n                const hasAllPrimaryKeys = primaryColumns.length > 0 &&\n                    primaryColumns.every((column) => column.getEntityValue(entity[key], false));\n                if (hasAllPrimaryKeys) {\n                    const subPaths = primaryColumns.map((column) => `${path}.${column.propertyPath}`);\n                    paths.push(...subPaths);\n                    continue;\n                }\n                // If nothing else, just return every property that's being passed to us.\n                const subPaths = this.createPropertyPath(relation.inverseEntityMetadata, entity[key]).map((p) => `${path}.${p}`);\n                paths.push(...subPaths);\n                continue;\n            }\n            paths.push(path);\n        }\n        return paths;\n    }\n    *getPredicates(where) {\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            const propertyPaths = this.createPropertyPath(this.expressionMap.mainAlias.metadata, where);\n            for (const propertyPath of propertyPaths) {\n                const [alias, aliasPropertyPath, columns] = this.findColumnsForPropertyPath(propertyPath);\n                for (const column of columns) {\n                    let containedWhere = where;\n                    for (const part of aliasPropertyPath) {\n                        if (!containedWhere || !(part in containedWhere)) {\n                            containedWhere = {};\n                            break;\n                        }\n                        containedWhere = containedWhere[part];\n                    }\n                    // Use the correct alias & the property path from the column\n                    const aliasPath = this.expressionMap\n                        .aliasNamePrefixingEnabled\n                        ? `${alias.name}.${column.propertyPath}`\n                        : column.propertyPath;\n                    const parameterValue = column.getEntityValue(containedWhere, true);\n                    yield [aliasPath, parameterValue];\n                }\n            }\n        }\n        else {\n            for (const key of Object.keys(where)) {\n                const parameterValue = where[key];\n                const aliasPath = this.expressionMap.aliasNamePrefixingEnabled\n                    ? `${this.alias}.${key}`\n                    : key;\n                yield [aliasPath, parameterValue];\n            }\n        }\n    }\n    getWherePredicateCondition(aliasPath, parameterValue) {\n        if (InstanceChecker.isFindOperator(parameterValue)) {\n            let parameters = [];\n            if (parameterValue.useParameter) {\n                if (parameterValue.objectLiteralParameters) {\n                    this.setParameters(parameterValue.objectLiteralParameters);\n                }\n                else if (parameterValue.multipleParameters) {\n                    for (const v of parameterValue.value) {\n                        parameters.push(this.createParameter(v));\n                    }\n                }\n                else {\n                    parameters.push(this.createParameter(parameterValue.value));\n                }\n            }\n            if (parameterValue.type === \"raw\") {\n                if (parameterValue.getSql) {\n                    return parameterValue.getSql(aliasPath);\n                }\n                else {\n                    return {\n                        operator: \"equal\",\n                        parameters: [aliasPath, parameterValue.value],\n                    };\n                }\n            }\n            else if (parameterValue.type === \"not\") {\n                if (parameterValue.child) {\n                    return {\n                        operator: parameterValue.type,\n                        condition: this.getWherePredicateCondition(aliasPath, parameterValue.child),\n                    };\n                }\n                else {\n                    return {\n                        operator: \"notEqual\",\n                        parameters: [aliasPath, ...parameters],\n                    };\n                }\n            }\n            else if (parameterValue.type === \"and\") {\n                const values = parameterValue.value;\n                return {\n                    operator: parameterValue.type,\n                    parameters: values.map((operator) => this.createWhereConditionExpression(this.getWherePredicateCondition(aliasPath, operator))),\n                };\n            }\n            else if (parameterValue.type === \"or\") {\n                const values = parameterValue.value;\n                return {\n                    operator: parameterValue.type,\n                    parameters: values.map((operator) => this.createWhereConditionExpression(this.getWherePredicateCondition(aliasPath, operator))),\n                };\n            }\n            else {\n                return {\n                    operator: parameterValue.type,\n                    parameters: [aliasPath, ...parameters],\n                };\n            }\n            // } else if (parameterValue === null) {\n            //     return {\n            //         operator: \"isNull\",\n            //         parameters: [\n            //             aliasPath,\n            //         ]\n            //     };\n        }\n        else {\n            return {\n                operator: \"equal\",\n                parameters: [aliasPath, this.createParameter(parameterValue)],\n            };\n        }\n    }\n    getWhereCondition(where) {\n        if (typeof where === \"string\") {\n            return where;\n        }\n        if (InstanceChecker.isBrackets(where)) {\n            const whereQueryBuilder = this.createQueryBuilder();\n            whereQueryBuilder.parentQueryBuilder = this;\n            whereQueryBuilder.expressionMap.mainAlias =\n                this.expressionMap.mainAlias;\n            whereQueryBuilder.expressionMap.aliasNamePrefixingEnabled =\n                this.expressionMap.aliasNamePrefixingEnabled;\n            whereQueryBuilder.expressionMap.parameters =\n                this.expressionMap.parameters;\n            whereQueryBuilder.expressionMap.nativeParameters =\n                this.expressionMap.nativeParameters;\n            whereQueryBuilder.expressionMap.wheres = [];\n            where.whereFactory(whereQueryBuilder);\n            return {\n                operator: InstanceChecker.isNotBrackets(where)\n                    ? \"not\"\n                    : \"brackets\",\n                condition: whereQueryBuilder.expressionMap.wheres,\n            };\n        }\n        if (typeof where === \"function\") {\n            return where(this);\n        }\n        const wheres = Array.isArray(where) ? where : [where];\n        const clauses = [];\n        for (const where of wheres) {\n            const conditions = [];\n            // Filter the conditions and set up the parameter values\n            for (const [aliasPath, parameterValue] of this.getPredicates(where)) {\n                conditions.push({\n                    type: \"and\",\n                    condition: this.getWherePredicateCondition(aliasPath, parameterValue),\n                });\n            }\n            clauses.push({ type: \"or\", condition: conditions });\n        }\n        if (clauses.length === 1) {\n            return clauses[0].condition;\n        }\n        return clauses;\n    }\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner();\n    }\n    hasCommonTableExpressions() {\n        return this.expressionMap.commonTableExpressions.length > 0;\n    }\n}\n/**\n * Contains all registered query builder classes.\n */\nQueryBuilder.queryBuilderRegistry = {};\n\n//# sourceMappingURL=QueryBuilder.js.map\n","/**\n * Result object returned by DeleteQueryBuilder execution.\n */\nexport class DeleteResult {\n    static from(queryResult) {\n        const result = new this();\n        result.raw = queryResult.records;\n        result.affected = queryResult.affected;\n        return result;\n    }\n}\n\n//# sourceMappingURL=DeleteResult.js.map\n","import { QueryBuilder } from \"./QueryBuilder\";\nimport { DeleteResult } from \"./result/DeleteResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder extends QueryBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connectionOrQueryBuilder, queryRunner) {\n        super(connectionOrQueryBuilder, queryRunner);\n        this[\"@instanceof\"] = Symbol.for(\"DeleteQueryBuilder\");\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        let sql = this.createComment();\n        sql += this.createCteExpression();\n        sql += this.createDeleteExpression();\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n    }\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute() {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            // call before deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                await queryRunner.broadcaster.broadcast(\"BeforeRemove\", this.expressionMap.mainAlias.metadata);\n            }\n            // execute query\n            const queryResult = await queryRunner.query(sql, parameters, true);\n            const deleteResult = DeleteResult.from(queryResult);\n            // call after deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                await queryRunner.broadcaster.broadcast(\"AfterRemove\", this.expressionMap.mainAlias.metadata);\n            }\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n            return deleteResult;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from(entityTarget, aliasName) {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where);\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder with a condition for the given ids.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     */\n    whereInIds(ids) {\n        return this.where(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids) {\n        return this.andWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids) {\n        return this.orWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    output(output) {\n        return this.returning(output);\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\n            throw new ReturningStatementNotSupportedError();\n        }\n        this.expressionMap.returning = returning;\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    createDeleteExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression(\"delete\");\n        if (returningExpression === \"\") {\n            return `DELETE FROM ${tableName}${whereExpression}`;\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n        }\n        return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n    }\n}\n\n//# sourceMappingURL=DeleteQueryBuilder.js.map\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","/**\n * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.\n */\nexport class BroadcasterResult {\n    constructor() {\n        /**\n         * Number of executed listeners and subscribers.\n         */\n        this.count = 0;\n        /**\n         * Promises returned by listeners and subscribers which needs to be awaited.\n         */\n        this.promises = [];\n    }\n    /**\n     * Wait for all promises to settle\n     */\n    async wait() {\n        if (this.promises.length > 0) {\n            await Promise.all(this.promises);\n        }\n        return this;\n    }\n}\n\n//# sourceMappingURL=BroadcasterResult.js.map\n","/**\n * Result object returned by InsertQueryBuilder execution.\n */\nexport class InsertResult {\n    constructor() {\n        /**\n         * Contains inserted entity id.\n         * Has entity-like structure (not just column database name and values).\n         */\n        this.identifiers = [];\n        /**\n         * Generated values returned by a database.\n         * Has entity-like structure (not just column database name and values).\n         */\n        this.generatedMaps = [];\n    }\n    static from(queryResult) {\n        const result = new this();\n        result.raw = queryResult.raw;\n        return result;\n    }\n}\n\n//# sourceMappingURL=InsertResult.js.map\n","import { TypeORMError } from \"../error\";\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\nexport class ReturningResultsEntityUpdator {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryRunner, expressionMap) {\n        this.queryRunner = queryRunner;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates entities with a special columns after updation query execution.\n     */\n    async update(updateResult, entities) {\n        const metadata = this.expressionMap.mainAlias.metadata;\n        await Promise.all(entities.map(async (entity, entityIndex) => {\n            // if database supports returning/output statement then we already should have updating values in the raw data returned by insert query\n            if (this.queryRunner.connection.driver.isReturningSqlSupported(\"update\")) {\n                if (this.queryRunner.connection.driver.options.type ===\n                    \"oracle\" &&\n                    Array.isArray(updateResult.raw) &&\n                    this.expressionMap.extraReturningColumns.length > 0) {\n                    updateResult.raw = updateResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n                        newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                        return newRaw;\n                    }, {});\n                }\n                const result = Array.isArray(updateResult.raw)\n                    ? updateResult.raw[entityIndex]\n                    : updateResult.raw;\n                const returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);\n                if (returningColumns) {\n                    this.queryRunner.manager.merge(metadata.target, entity, returningColumns);\n                    updateResult.generatedMaps.push(returningColumns);\n                }\n            }\n            else {\n                // for driver which do not support returning/output statement we need to perform separate query and load what we need\n                const updationColumns = this.expressionMap.extraReturningColumns;\n                if (updationColumns.length > 0) {\n                    // get entity id by which we will get needed data\n                    const entityId = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n                    if (!entityId)\n                        throw new TypeORMError(`Cannot update entity because entity id is not set in the entity.`);\n                    // execute query to get needed data\n                    const loadedReturningColumns = (await this.queryRunner.manager\n                        .createQueryBuilder()\n                        .select(metadata.primaryColumns.map((column) => metadata.targetName +\n                        \".\" +\n                        column.propertyPath))\n                        .addSelect(updationColumns.map((column) => metadata.targetName +\n                        \".\" +\n                        column.propertyPath))\n                        .from(metadata.target, metadata.targetName)\n                        .where(entityId)\n                        .withDeleted()\n                        .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties might be overridden by merge process\n                        .getOne());\n                    if (loadedReturningColumns) {\n                        this.queryRunner.manager.merge(metadata.target, entity, loadedReturningColumns);\n                        updateResult.generatedMaps.push(loadedReturningColumns);\n                    }\n                }\n            }\n        }));\n    }\n    /**\n     * Updates entities with a special columns after insertion query execution.\n     */\n    async insert(insertResult, entities) {\n        const metadata = this.expressionMap.mainAlias.metadata;\n        let insertionColumns = metadata.getInsertionReturningColumns();\n        // to prevent extra select SQL execution for databases not supporting RETURNING\n        // in the case if we have generated column and it's value returned by underlying driver\n        // we remove this column from the insertionColumns list\n        const needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported(\"insert\");\n        insertionColumns = insertionColumns.filter((column) => {\n            if (!column.isGenerated)\n                return true;\n            return needToCheckGenerated === true;\n        });\n        const generatedMaps = entities.map((entity, entityIndex) => {\n            if (this.queryRunner.connection.driver.options.type === \"oracle\" &&\n                Array.isArray(insertResult.raw) &&\n                this.expressionMap.extraReturningColumns.length > 0) {\n                insertResult.raw = insertResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n                    newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                    return newRaw;\n                }, {});\n            }\n            // get all values generated by a database for us\n            const result = Array.isArray(insertResult.raw)\n                ? insertResult.raw[entityIndex]\n                : insertResult.raw;\n            const generatedMap = this.queryRunner.connection.driver.createGeneratedMap(metadata, result, entityIndex, entities.length) || {};\n            if (entityIndex in this.expressionMap.locallyGenerated) {\n                this.queryRunner.manager.merge(metadata.target, generatedMap, this.expressionMap.locallyGenerated[entityIndex]);\n            }\n            this.queryRunner.manager.merge(metadata.target, entity, generatedMap);\n            return generatedMap;\n        });\n        // for postgres and mssql we use returning/output statement to get values of inserted default and generated values\n        // for other drivers we have to re-select this data from the database\n        if (insertionColumns.length > 0 &&\n            !this.queryRunner.connection.driver.isReturningSqlSupported(\"insert\")) {\n            const entityIds = entities.map((entity) => {\n                const entityId = metadata.getEntityIdMap(entity);\n                // We have to check for an empty `entityId` - if we don't, the query against the database\n                // effectively drops the `where` clause entirely and the first record will be returned -\n                // not what we want at all.\n                if (!entityId)\n                    throw new TypeORMError(`Cannot update entity because entity id is not set in the entity.`);\n                return entityId;\n            });\n            // to select just inserted entities we need a criteria to select by.\n            // for newly inserted entities in drivers which do not support returning statement\n            // row identifier can only be an increment column\n            // (since its the only thing that can be generated by those databases)\n            // or (and) other primary key which is defined by a user and inserted value has it\n            const returningResult = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(metadata.primaryColumns.map((column) => metadata.targetName + \".\" + column.propertyPath))\n                .addSelect(insertionColumns.map((column) => metadata.targetName + \".\" + column.propertyPath))\n                .from(metadata.target, metadata.targetName)\n                .where(entityIds)\n                .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties might be overridden by merge process\n                .getMany();\n            entities.forEach((entity, entityIndex) => {\n                this.queryRunner.manager.merge(metadata.target, generatedMaps[entityIndex], returningResult[entityIndex]);\n                this.queryRunner.manager.merge(metadata.target, entity, returningResult[entityIndex]);\n            });\n        }\n        entities.forEach((entity, entityIndex) => {\n            const entityId = metadata.getEntityIdMap(entity);\n            insertResult.identifiers.push(entityId);\n            insertResult.generatedMaps.push(generatedMaps[entityIndex]);\n        });\n    }\n    /**\n     * Columns we need to be returned from the database when we update entity.\n     */\n    getUpdationReturningColumns() {\n        return this.expressionMap.mainAlias.metadata.columns.filter((column) => {\n            return (column.asExpression !== undefined ||\n                column.isUpdateDate ||\n                column.isVersion);\n        });\n    }\n    /**\n     * Columns we need to be returned from the database when we soft delete and restore entity.\n     */\n    getSoftDeletionReturningColumns() {\n        return this.expressionMap.mainAlias.metadata.columns.filter((column) => {\n            return (column.asExpression !== undefined ||\n                column.isUpdateDate ||\n                column.isVersion ||\n                column.isDeleteDate);\n        });\n    }\n}\n\n//# sourceMappingURL=ReturningResultsEntityUpdator.js.map\n","import { v4 as uuidv4 } from \"uuid\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { TypeORMError } from \"../error\";\nimport { InsertValuesMissingError } from \"../error/InsertValuesMissingError\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { InsertResult } from \"./result/InsertResult\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class InsertQueryBuilder extends QueryBuilder {\n    constructor() {\n        super(...arguments);\n        this[\"@instanceof\"] = Symbol.for(\"InsertQueryBuilder\");\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        let sql = this.createComment();\n        sql += this.createCteExpression();\n        sql += this.createInsertExpression();\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n    }\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute() {\n        // console.time(\".value sets\");\n        const valueSets = this.getValueSets();\n        // console.timeEnd(\".value sets\");\n        // If user passed empty array of entities then we don't need to do\n        // anything.\n        //\n        // Fixes GitHub issues #3111 and #5734. If we were to let this through\n        // we would run into problems downstream, like subscribers getting\n        // invoked with the empty array where they expect an entity, and SQL\n        // queries with an empty VALUES clause.\n        if (valueSets.length === 0)\n            return new InsertResult();\n        // console.time(\"QueryBuilder.execute\");\n        // console.time(\".database stuff\");\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            // console.timeEnd(\".database stuff\");\n            // call before insertion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                valueSets.forEach((valueSet) => {\n                    queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult, this.expressionMap.mainAlias.metadata, valueSet);\n                });\n                await broadcastResult.wait();\n            }\n            let declareSql = null;\n            let selectOutputSql = null;\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            // console.time(\".prepare returning statement\");\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            const returningColumns = [];\n            if (Array.isArray(this.expressionMap.returning) &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                for (const columnPath of this.expressionMap.returning) {\n                    returningColumns.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnPath));\n                }\n            }\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                if (!(valueSets.length > 1 &&\n                    this.connection.driver.options.type === \"oracle\")) {\n                    this.expressionMap.extraReturningColumns =\n                        this.expressionMap.mainAlias.metadata.getInsertionReturningColumns();\n                }\n                returningColumns.push(...this.expressionMap.extraReturningColumns.filter((c) => !returningColumns.includes(c)));\n            }\n            if (returningColumns.length > 0 &&\n                this.connection.driver.options.type === \"mssql\") {\n                declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", returningColumns);\n                selectOutputSql = `SELECT * FROM @OutputTable`;\n            }\n            // console.timeEnd(\".prepare returning statement\");\n            // execute query\n            // console.time(\".getting query and parameters\");\n            const [insertSql, parameters] = this.getQueryAndParameters();\n            // console.timeEnd(\".getting query and parameters\");\n            // console.time(\".query execution by database\");\n            const statements = [declareSql, insertSql, selectOutputSql];\n            const sql = statements.filter((s) => s != null).join(\";\\n\\n\");\n            const queryResult = await queryRunner.query(sql, parameters, true);\n            const insertResult = InsertResult.from(queryResult);\n            // console.timeEnd(\".query execution by database\");\n            // load returning results and set them to the entity if entity updation is enabled\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                // console.time(\".updating entity\");\n                await returningResultsEntityUpdator.insert(insertResult, valueSets);\n                // console.timeEnd(\".updating entity\");\n            }\n            // call after insertion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                valueSets.forEach((valueSet) => {\n                    queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult, this.expressionMap.mainAlias.metadata, valueSet);\n                });\n                await broadcastResult.wait();\n            }\n            // close transaction if we started it\n            // console.time(\".commit\");\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            // console.timeEnd(\".commit\");\n            return insertResult;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            // console.time(\".releasing connection\");\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n            // console.timeEnd(\".releasing connection\");\n            // console.timeEnd(\"QueryBuilder.execute\");\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    into(entityTarget, columns) {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget);\n        this.expressionMap.setMainAlias(mainAlias);\n        this.expressionMap.insertColumns = columns || [];\n        return this;\n    }\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(values) {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    output(output) {\n        return this.returning(output);\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"insert\")) {\n            throw new ReturningStatementNotSupportedError();\n        }\n        this.expressionMap.returning = returning;\n        return this;\n    }\n    /**\n     * Indicates if entity must be updated after insertion operations.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n    /**\n     * Adds additional ON CONFLICT statement supported in postgres and cockroach.\n     *\n     * @deprecated Use `orIgnore` or `orUpdate`\n     */\n    onConflict(statement) {\n        this.expressionMap.onConflict = statement;\n        return this;\n    }\n    /**\n     * Adds additional ignore statement supported in databases.\n     */\n    orIgnore(statement = true) {\n        this.expressionMap.onIgnore = !!statement;\n        return this;\n    }\n    /**\n     * Adds additional update statement supported in databases.\n     */\n    orUpdate(statementOrOverwrite, conflictTarget, orUpdateOptions) {\n        if (!Array.isArray(statementOrOverwrite)) {\n            this.expressionMap.onUpdate = {\n                conflict: statementOrOverwrite?.conflict_target,\n                columns: statementOrOverwrite?.columns,\n                overwrite: statementOrOverwrite?.overwrite,\n                skipUpdateIfNoValuesChanged: orUpdateOptions?.skipUpdateIfNoValuesChanged,\n                upsertType: orUpdateOptions?.upsertType,\n            };\n            return this;\n        }\n        this.expressionMap.onUpdate = {\n            overwrite: statementOrOverwrite,\n            conflict: conflictTarget,\n            skipUpdateIfNoValuesChanged: orUpdateOptions?.skipUpdateIfNoValuesChanged,\n            indexPredicate: orUpdateOptions?.indexPredicate,\n            upsertType: orUpdateOptions?.upsertType,\n        };\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    createInsertExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n        const returningExpression = this.connection.driver.options.type === \"oracle\" &&\n            this.getValueSets().length > 1\n            ? null\n            : this.createReturningExpression(\"insert\"); // oracle doesnt support returning with multi-row insert\n        const columnsExpression = this.createColumnNamesExpression();\n        let query = \"INSERT \";\n        if (this.expressionMap.onUpdate?.upsertType === \"primary-key\") {\n            query = \"UPSERT \";\n        }\n        if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\") {\n            query += `${this.expressionMap.onIgnore ? \" IGNORE \" : \"\"}`;\n        }\n        query += `INTO ${tableName}`;\n        if (this.alias !== this.getMainTableName() &&\n            DriverUtils.isPostgresFamily(this.connection.driver)) {\n            query += ` AS \"${this.alias}\"`;\n        }\n        // add columns expression\n        if (columnsExpression) {\n            query += `(${columnsExpression})`;\n        }\n        else {\n            if (!valuesExpression &&\n                (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                    this.connection.driver.options.type === \"aurora-mysql\"))\n                // special syntax for mysql DEFAULT VALUES insertion\n                query += \"()\";\n        }\n        // add OUTPUT expression\n        if (returningExpression &&\n            this.connection.driver.options.type === \"mssql\") {\n            query += ` OUTPUT ${returningExpression}`;\n        }\n        // add VALUES expression\n        if (valuesExpression) {\n            if ((this.connection.driver.options.type === \"oracle\" ||\n                this.connection.driver.options.type === \"sap\") &&\n                this.getValueSets().length > 1) {\n                query += ` ${valuesExpression}`;\n            }\n            else {\n                query += ` VALUES ${valuesExpression}`;\n            }\n        }\n        else {\n            if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                this.connection.driver.options.type === \"aurora-mysql\") {\n                // special syntax for mysql DEFAULT VALUES insertion\n                query += \" VALUES ()\";\n            }\n            else {\n                query += ` DEFAULT VALUES`;\n            }\n        }\n        if (this.expressionMap.onUpdate?.upsertType !== \"primary-key\") {\n            if (this.connection.driver.supportedUpsertTypes.includes(\"on-conflict-do-update\")) {\n                if (this.expressionMap.onIgnore) {\n                    query += \" ON CONFLICT DO NOTHING \";\n                }\n                else if (this.expressionMap.onConflict) {\n                    query += ` ON CONFLICT ${this.expressionMap.onConflict} `;\n                }\n                else if (this.expressionMap.onUpdate) {\n                    const { overwrite, columns, conflict, skipUpdateIfNoValuesChanged, indexPredicate, } = this.expressionMap.onUpdate;\n                    let conflictTarget = \"ON CONFLICT\";\n                    if (Array.isArray(conflict)) {\n                        conflictTarget += ` ( ${conflict\n                            .map((column) => this.escape(column))\n                            .join(\", \")} )`;\n                        if (indexPredicate &&\n                            !DriverUtils.isPostgresFamily(this.connection.driver)) {\n                            throw new TypeORMError(`indexPredicate option is not supported by the current database driver`);\n                        }\n                        if (indexPredicate &&\n                            DriverUtils.isPostgresFamily(this.connection.driver)) {\n                            conflictTarget += ` WHERE ( ${indexPredicate} )`;\n                        }\n                    }\n                    else if (conflict) {\n                        conflictTarget += ` ON CONSTRAINT ${this.escape(conflict)}`;\n                    }\n                    const updatePart = [];\n                    if (Array.isArray(overwrite)) {\n                        updatePart.push(...overwrite.map((column) => `${this.escape(column)} = EXCLUDED.${this.escape(column)}`));\n                    }\n                    else if (columns) {\n                        updatePart.push(...columns.map((column) => `${this.escape(column)} = :${column}`));\n                    }\n                    if (updatePart.length > 0) {\n                        query += ` ${conflictTarget} DO UPDATE SET `;\n                        updatePart.push(...this.expressionMap\n                            .mainAlias.metadata.columns.filter((column) => column.isUpdateDate &&\n                            !overwrite?.includes(column.databaseName) &&\n                            !((this.connection.driver.options\n                                .type === \"oracle\" &&\n                                this.getValueSets().length >\n                                    1) ||\n                                DriverUtils.isSQLiteFamily(this.connection.driver) ||\n                                this.connection.driver.options\n                                    .type === \"sap\" ||\n                                this.connection.driver.options\n                                    .type === \"spanner\"))\n                            .map((column) => `${this.escape(column.databaseName)} = DEFAULT`));\n                        query += updatePart.join(\", \");\n                        query += \" \";\n                    }\n                    if (Array.isArray(overwrite) &&\n                        skipUpdateIfNoValuesChanged &&\n                        DriverUtils.isPostgresFamily(this.connection.driver)) {\n                        query += ` WHERE (`;\n                        query += overwrite\n                            .map((column) => `${tableName}.${this.escape(column)} IS DISTINCT FROM EXCLUDED.${this.escape(column)}`)\n                            .join(\" OR \");\n                        query += \") \";\n                    }\n                }\n            }\n            else if (this.connection.driver.supportedUpsertTypes.includes(\"on-duplicate-key-update\")) {\n                if (this.expressionMap.onUpdate) {\n                    const { overwrite, columns } = this.expressionMap.onUpdate;\n                    if (Array.isArray(overwrite)) {\n                        query += \" ON DUPLICATE KEY UPDATE \";\n                        query += overwrite\n                            .map((column) => `${this.escape(column)} = VALUES(${this.escape(column)})`)\n                            .join(\", \");\n                        query += \" \";\n                    }\n                    else if (Array.isArray(columns)) {\n                        query += \" ON DUPLICATE KEY UPDATE \";\n                        query += columns\n                            .map((column) => `${this.escape(column)} = :${column}`)\n                            .join(\", \");\n                        query += \" \";\n                    }\n                }\n            }\n            else {\n                if (this.expressionMap.onUpdate) {\n                    throw new TypeORMError(`onUpdate is not supported by the current database driver`);\n                }\n            }\n        }\n        // add RETURNING expression\n        if (returningExpression &&\n            (DriverUtils.isPostgresFamily(this.connection.driver) ||\n                this.connection.driver.options.type === \"oracle\" ||\n                this.connection.driver.options.type === \"cockroachdb\" ||\n                DriverUtils.isMySQLFamily(this.connection.driver))) {\n            query += ` RETURNING ${returningExpression}`;\n        }\n        // Inserting a specific value for an auto-increment primary key in mssql requires enabling IDENTITY_INSERT\n        // IDENTITY_INSERT can only be enabled for tables where there is an IDENTITY column and only if there is a value to be inserted (i.e. supplying DEFAULT is prohibited if IDENTITY_INSERT is enabled)\n        if (this.connection.driver.options.type === \"mssql\" &&\n            this.expressionMap.mainAlias.hasMetadata &&\n            this.expressionMap\n                .mainAlias.metadata.columns.filter((column) => this.expressionMap.insertColumns.length > 0\n                ? this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1\n                : column.isInsert)\n                .some((column) => this.isOverridingAutoIncrementBehavior(column))) {\n            query = `SET IDENTITY_INSERT ${tableName} ON; ${query}; SET IDENTITY_INSERT ${tableName} OFF`;\n        }\n        return query;\n    }\n    /**\n     * Gets list of columns where values must be inserted to.\n     */\n    getInsertedColumns() {\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            return [];\n        return this.expressionMap.mainAlias.metadata.columns.filter((column) => {\n            // if user specified list of columns he wants to insert to, then we filter only them\n            if (this.expressionMap.insertColumns.length)\n                return (this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1);\n            // skip columns the user doesn't want included by default\n            if (!column.isInsert) {\n                return false;\n            }\n            // if user did not specified such list then return all columns except auto-increment one\n            // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n            if (column.isGenerated &&\n                column.generationStrategy === \"increment\" &&\n                !(this.connection.driver.options.type === \"spanner\") &&\n                !(this.connection.driver.options.type === \"oracle\") &&\n                !DriverUtils.isSQLiteFamily(this.connection.driver) &&\n                !DriverUtils.isMySQLFamily(this.connection.driver) &&\n                !(this.connection.driver.options.type === \"aurora-mysql\") &&\n                !(this.connection.driver.options.type === \"mssql\" &&\n                    this.isOverridingAutoIncrementBehavior(column)))\n                return false;\n            return true;\n        });\n    }\n    /**\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\n     */\n    createColumnNamesExpression() {\n        const columns = this.getInsertedColumns();\n        if (columns.length > 0)\n            return columns\n                .map((column) => this.escape(column.databaseName))\n                .join(\", \");\n        // in the case if there are no insert columns specified and table without metadata used\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\n        if (!this.expressionMap.mainAlias.hasMetadata &&\n            !this.expressionMap.insertColumns.length) {\n            const valueSets = this.getValueSets();\n            if (valueSets.length === 1)\n                return Object.keys(valueSets[0])\n                    .map((columnName) => this.escape(columnName))\n                    .join(\", \");\n        }\n        // get a table name and all column database names\n        return this.expressionMap.insertColumns\n            .map((columnName) => this.escape(columnName))\n            .join(\", \");\n    }\n    /**\n     * Creates list of values needs to be inserted in the VALUES expression.\n     */\n    createValuesExpression() {\n        const valueSets = this.getValueSets();\n        const columns = this.getInsertedColumns();\n        // if column metadatas are given then apply all necessary operations with values\n        if (columns.length > 0) {\n            let expression = \"\";\n            valueSets.forEach((valueSet, valueSetIndex) => {\n                columns.forEach((column, columnIndex) => {\n                    if (columnIndex === 0) {\n                        if (this.connection.driver.options.type === \"oracle\" &&\n                            valueSets.length > 1) {\n                            expression += \" SELECT \";\n                        }\n                        else if (this.connection.driver.options.type === \"sap\" &&\n                            valueSets.length > 1) {\n                            expression += \" SELECT \";\n                        }\n                        else {\n                            expression += \"(\";\n                        }\n                    }\n                    // extract real value from the entity\n                    let value = column.getEntityValue(valueSet);\n                    // if column is relational and value is an object then get real referenced column value from this object\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n                    // and we extract \"1\" from this object\n                    /*if (column.referencedColumn && value instanceof Object && !(typeof value === \"function\")) { // todo: check if we still need it since getEntityValue already has similar code\n                        value = column.referencedColumn.getEntityValue(value);\n                    }*/\n                    if (!(typeof value === \"function\")) {\n                        // make sure our value is normalized by a driver\n                        value = this.connection.driver.preparePersistentValue(value, column);\n                    }\n                    // newly inserted entities always have a version equal to 1 (first version)\n                    // also, user-specified version must be empty\n                    if (column.isVersion && value === undefined) {\n                        expression += \"1\";\n                        // } else if (column.isNestedSetLeft) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                        //\n                        // } else if (column.isNestedSetRight) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                    }\n                    else if (column.isDiscriminator) {\n                        expression += this.createParameter(this.expressionMap.mainAlias.metadata\n                            .discriminatorValue);\n                        // return \"1\";\n                        // for create and update dates we insert current date\n                        // no, we don't do it because this constant is already in \"default\" value of the column\n                        // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n                        // } else if (column.isCreateDate || column.isUpdateDate) {\n                        //     return \"CURRENT_TIMESTAMP\";\n                        // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n                    }\n                    else if (column.isGenerated &&\n                        column.generationStrategy === \"uuid\" &&\n                        !this.connection.driver.isUUIDGenerationSupported() &&\n                        value === undefined) {\n                        value = uuidv4();\n                        expression += this.createParameter(value);\n                        if (!(valueSetIndex in\n                            this.expressionMap.locallyGenerated)) {\n                            this.expressionMap.locallyGenerated[valueSetIndex] =\n                                {};\n                        }\n                        column.setEntityValue(this.expressionMap.locallyGenerated[valueSetIndex], value);\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if ((this.connection.driver.options.type === \"oracle\" &&\n                            valueSets.length > 1) ||\n                            DriverUtils.isSQLiteFamily(this.connection.driver) ||\n                            this.connection.driver.options.type === \"sap\" ||\n                            this.connection.driver.options.type === \"spanner\") {\n                            // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n                            if (column.default !== undefined &&\n                                column.default !== null) {\n                                // try to use default defined in the column\n                                expression +=\n                                    this.connection.driver.normalizeDefault(column);\n                            }\n                            else {\n                                expression += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\n                            }\n                        }\n                        else {\n                            expression += \"DEFAULT\";\n                        }\n                    }\n                    else if (value === null &&\n                        this.connection.driver.options.type === \"spanner\") {\n                        expression += \"NULL\";\n                        // support for SQL expressions in queries\n                    }\n                    else if (typeof value === \"function\") {\n                        expression += value();\n                        // just any other regular value\n                    }\n                    else {\n                        if (this.connection.driver.options.type === \"mssql\")\n                            value = this.connection.driver.parametrizeValue(column, value);\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\n                        // if (value instanceof Array)\n                        //     value = new ArrayParameter(value);\n                        const paramName = this.createParameter(value);\n                        if ((DriverUtils.isMySQLFamily(this.connection.driver) ||\n                            this.connection.driver.options.type ===\n                                \"aurora-mysql\") &&\n                            this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            const useLegacy = this.connection.driver.options.legacySpatialSupport;\n                            const geomFromText = useLegacy\n                                ? \"GeomFromText\"\n                                : \"ST_GeomFromText\";\n                            if (column.srid != null) {\n                                expression += `${geomFromText}(${paramName}, ${column.srid})`;\n                            }\n                            else {\n                                expression += `${geomFromText}(${paramName})`;\n                            }\n                        }\n                        else if (DriverUtils.isPostgresFamily(this.connection.driver) &&\n                            this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                                expression += `ST_SetSRID(ST_GeomFromGeoJSON(${paramName}), ${column.srid})::${column.type}`;\n                            }\n                            else {\n                                expression += `ST_GeomFromGeoJSON(${paramName})::${column.type}`;\n                            }\n                        }\n                        else if (this.connection.driver.options.type === \"mssql\" &&\n                            this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression +=\n                                column.type +\n                                    \"::STGeomFromText(\" +\n                                    paramName +\n                                    \", \" +\n                                    (column.srid || \"0\") +\n                                    \")\";\n                        }\n                        else {\n                            expression += paramName;\n                        }\n                    }\n                    if (columnIndex === columns.length - 1) {\n                        if (valueSetIndex === valueSets.length - 1) {\n                            if (this.connection.driver.options.type ===\n                                \"oracle\" &&\n                                valueSets.length > 1) {\n                                expression += \" FROM DUAL \";\n                            }\n                            else if (this.connection.driver.options.type === \"sap\" &&\n                                valueSets.length > 1) {\n                                expression += \" FROM dummy \";\n                            }\n                            else {\n                                expression += \")\";\n                            }\n                        }\n                        else {\n                            if (this.connection.driver.options.type ===\n                                \"oracle\" &&\n                                valueSets.length > 1) {\n                                expression += \" FROM DUAL UNION ALL \";\n                            }\n                            else if (this.connection.driver.options.type === \"sap\" &&\n                                valueSets.length > 1) {\n                                expression += \" FROM dummy UNION ALL \";\n                            }\n                            else {\n                                expression += \"), \";\n                            }\n                        }\n                    }\n                    else {\n                        expression += \", \";\n                    }\n                });\n            });\n            if (expression === \"()\")\n                return \"\";\n            return expression;\n        }\n        else {\n            // for tables without metadata\n            // get values needs to be inserted\n            let expression = \"\";\n            valueSets.forEach((valueSet, insertionIndex) => {\n                const columns = Object.keys(valueSet);\n                columns.forEach((columnName, columnIndex) => {\n                    if (columnIndex === 0) {\n                        expression += \"(\";\n                    }\n                    const value = valueSet[columnName];\n                    // support for SQL expressions in queries\n                    if (typeof value === \"function\") {\n                        expression += value();\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if ((this.connection.driver.options.type === \"oracle\" &&\n                            valueSets.length > 1) ||\n                            DriverUtils.isSQLiteFamily(this.connection.driver) ||\n                            this.connection.driver.options.type === \"sap\" ||\n                            this.connection.driver.options.type === \"spanner\") {\n                            expression += \"NULL\";\n                        }\n                        else {\n                            expression += \"DEFAULT\";\n                        }\n                    }\n                    else if (value === null &&\n                        this.connection.driver.options.type === \"spanner\") {\n                        // just any other regular value\n                    }\n                    else {\n                        expression += this.createParameter(value);\n                    }\n                    if (columnIndex === Object.keys(valueSet).length - 1) {\n                        if (insertionIndex === valueSets.length - 1) {\n                            expression += \")\";\n                        }\n                        else {\n                            expression += \"), \";\n                        }\n                    }\n                    else {\n                        expression += \", \";\n                    }\n                });\n            });\n            if (expression === \"()\")\n                return \"\";\n            return expression;\n        }\n    }\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    getValueSets() {\n        if (Array.isArray(this.expressionMap.valuesSet))\n            return this.expressionMap.valuesSet;\n        if (ObjectUtils.isObject(this.expressionMap.valuesSet))\n            return [this.expressionMap.valuesSet];\n        throw new InsertValuesMissingError();\n    }\n    /**\n     * Checks if column is an auto-generated primary key, but the current insertion specifies a value for it.\n     *\n     * @param column\n     */\n    isOverridingAutoIncrementBehavior(column) {\n        return (column.isPrimary &&\n            column.isGenerated &&\n            column.generationStrategy === \"increment\" &&\n            this.getValueSets().some((valueSet) => column.getEntityValue(valueSet) !== undefined &&\n                column.getEntityValue(valueSet) !== null));\n    }\n}\n\n//# sourceMappingURL=InsertQueryBuilder.js.map\n","import { TypeORMError } from \"../error\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationUpdater {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryBuilder, expressionMap) {\n        this.queryBuilder = queryBuilder;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs set or add operation on a relation.\n     */\n    async update(value) {\n        const relation = this.expressionMap.relationMetadata;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            const updateSet = relation.joinColumns.reduce((updateSet, joinColumn) => {\n                const relationValue = ObjectUtils.isObject(value)\n                    ? joinColumn.referencedColumn.getEntityValue(value)\n                    : value;\n                joinColumn.setEntityValue(updateSet, relationValue);\n                return updateSet;\n            }, {});\n            if (!this.expressionMap.of ||\n                (Array.isArray(this.expressionMap.of) &&\n                    !this.expressionMap.of.length))\n                return;\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.entityMetadata.target)\n                .set(updateSet)\n                .whereInIds(this.expressionMap.of)\n                .execute();\n        }\n        else if ((relation.isOneToOneNotOwner || relation.isOneToMany) &&\n            value === null) {\n            // we handle null a bit different way\n            const updateSet = {};\n            relation.inverseRelation.joinColumns.forEach((column) => {\n                updateSet[column.propertyName] = null;\n            });\n            const ofs = Array.isArray(this.expressionMap.of)\n                ? this.expressionMap.of\n                : [this.expressionMap.of];\n            const parameters = {};\n            const conditions = [];\n            ofs.forEach((of, ofIndex) => {\n                relation.inverseRelation.joinColumns.map((column, columnIndex) => {\n                    const parameterName = \"joinColumn_\" + ofIndex + \"_\" + columnIndex;\n                    parameters[parameterName] = ObjectUtils.isObject(of)\n                        ? column.referencedColumn.getEntityValue(of)\n                        : of;\n                    conditions.push(`${column.propertyPath} = :${parameterName}`);\n                });\n            });\n            const condition = conditions\n                .map((str) => \"(\" + str + \")\")\n                .join(\" OR \");\n            if (!condition)\n                return;\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n        }\n        else if (relation.isOneToOneNotOwner || relation.isOneToMany) {\n            if (Array.isArray(this.expressionMap.of))\n                throw new TypeORMError(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);\n            const of = this.expressionMap.of;\n            const updateSet = relation.inverseRelation.joinColumns.reduce((updateSet, joinColumn) => {\n                const relationValue = ObjectUtils.isObject(of)\n                    ? joinColumn.referencedColumn.getEntityValue(of)\n                    : of;\n                joinColumn.setEntityValue(updateSet, relationValue);\n                return updateSet;\n            }, {});\n            if (!value || (Array.isArray(value) && !value.length))\n                return;\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .whereInIds(value)\n                .execute();\n        }\n        else {\n            // many to many\n            const junctionMetadata = relation.junctionEntityMetadata;\n            const ofs = Array.isArray(this.expressionMap.of)\n                ? this.expressionMap.of\n                : [this.expressionMap.of];\n            const values = Array.isArray(value) ? value : [value];\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs;\n            const bulkInserted = [];\n            firstColumnValues.forEach((firstColumnVal) => {\n                secondColumnValues.forEach((secondColumnVal) => {\n                    const inserted = {};\n                    junctionMetadata.ownerColumns.forEach((column) => {\n                        inserted[column.databaseName] = ObjectUtils.isObject(firstColumnVal)\n                            ? column.referencedColumn.getEntityValue(firstColumnVal)\n                            : firstColumnVal;\n                    });\n                    junctionMetadata.inverseColumns.forEach((column) => {\n                        inserted[column.databaseName] = ObjectUtils.isObject(secondColumnVal)\n                            ? column.referencedColumn.getEntityValue(secondColumnVal)\n                            : secondColumnVal;\n                    });\n                    bulkInserted.push(inserted);\n                });\n            });\n            if (!bulkInserted.length)\n                return;\n            if (this.queryBuilder.connection.driver.options.type === \"oracle\" ||\n                this.queryBuilder.connection.driver.options.type === \"sap\") {\n                await Promise.all(bulkInserted.map((value) => {\n                    return this.queryBuilder\n                        .createQueryBuilder()\n                        .insert()\n                        .into(junctionMetadata.tableName)\n                        .values(value)\n                        .execute();\n                }));\n            }\n            else {\n                await this.queryBuilder\n                    .createQueryBuilder()\n                    .insert()\n                    .into(junctionMetadata.tableName)\n                    .values(bulkInserted)\n                    .execute();\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=RelationUpdater.js.map\n","import { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationRemover {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryBuilder, expressionMap) {\n        this.queryBuilder = queryBuilder;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs remove operation on a relation.\n     */\n    async remove(value) {\n        const relation = this.expressionMap.relationMetadata;\n        if (relation.isOneToMany) {\n            // if (this.expressionMap.of instanceof Array)\n            //     throw new TypeORMError(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);\n            // DELETE FROM post WHERE post.categoryId = of AND post.id = id\n            const ofs = Array.isArray(this.expressionMap.of)\n                ? this.expressionMap.of\n                : [this.expressionMap.of];\n            const values = Array.isArray(value) ? value : [value];\n            const updateSet = {};\n            relation.inverseRelation.joinColumns.forEach((column) => {\n                updateSet[column.propertyName] = null;\n            });\n            const parameters = {};\n            const conditions = [];\n            ofs.forEach((of, ofIndex) => {\n                conditions.push(...values.map((value, valueIndex) => {\n                    return [\n                        ...relation.inverseRelation.joinColumns.map((column, columnIndex) => {\n                            const parameterName = \"joinColumn_\" +\n                                ofIndex +\n                                \"_\" +\n                                valueIndex +\n                                \"_\" +\n                                columnIndex;\n                            parameters[parameterName] =\n                                ObjectUtils.isObject(of)\n                                    ? column.referencedColumn.getEntityValue(of)\n                                    : of;\n                            return `${column.propertyPath} = :${parameterName}`;\n                        }),\n                        ...relation.inverseRelation.entityMetadata.primaryColumns.map((column, columnIndex) => {\n                            const parameterName = \"primaryColumn_\" +\n                                valueIndex +\n                                \"_\" +\n                                valueIndex +\n                                \"_\" +\n                                columnIndex;\n                            parameters[parameterName] =\n                                ObjectUtils.isObject(value)\n                                    ? column.getEntityValue(value)\n                                    : value;\n                            return `${column.propertyPath} = :${parameterName}`;\n                        }),\n                    ].join(\" AND \");\n                }));\n            });\n            const condition = conditions\n                .map((str) => \"(\" + str + \")\")\n                .join(\" OR \");\n            if (!condition)\n                return;\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n        }\n        else {\n            // many to many\n            const junctionMetadata = relation.junctionEntityMetadata;\n            const ofs = Array.isArray(this.expressionMap.of)\n                ? this.expressionMap.of\n                : [this.expressionMap.of];\n            const values = Array.isArray(value) ? value : [value];\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs;\n            const parameters = {};\n            const conditions = [];\n            firstColumnValues.forEach((firstColumnVal, firstColumnValIndex) => {\n                conditions.push(...secondColumnValues.map((secondColumnVal, secondColumnValIndex) => {\n                    return [\n                        ...junctionMetadata.ownerColumns.map((column, columnIndex) => {\n                            const parameterName = \"firstValue_\" +\n                                firstColumnValIndex +\n                                \"_\" +\n                                secondColumnValIndex +\n                                \"_\" +\n                                columnIndex;\n                            parameters[parameterName] =\n                                ObjectUtils.isObject(firstColumnVal)\n                                    ? column.referencedColumn.getEntityValue(firstColumnVal)\n                                    : firstColumnVal;\n                            return `${column.databaseName} = :${parameterName}`;\n                        }),\n                        ...junctionMetadata.inverseColumns.map((column, columnIndex) => {\n                            const parameterName = \"secondValue_\" +\n                                firstColumnValIndex +\n                                \"_\" +\n                                secondColumnValIndex +\n                                \"_\" +\n                                columnIndex;\n                            parameters[parameterName] =\n                                ObjectUtils.isObject(secondColumnVal)\n                                    ? column.referencedColumn.getEntityValue(secondColumnVal)\n                                    : secondColumnVal;\n                            return `${column.databaseName} = :${parameterName}`;\n                        }),\n                    ].join(\" AND \");\n                }));\n            });\n            const condition = conditions\n                .map((str) => \"(\" + str + \")\")\n                .join(\" OR \");\n            await this.queryBuilder\n                .createQueryBuilder()\n                .delete()\n                .from(junctionMetadata.tableName)\n                .where(condition)\n                .setParameters(parameters)\n                .execute();\n        }\n    }\n}\n\n//# sourceMappingURL=RelationRemover.js.map\n","import { QueryBuilder } from \"./QueryBuilder\";\nimport { RelationUpdater } from \"./RelationUpdater\";\nimport { RelationRemover } from \"./RelationRemover\";\nimport { TypeORMError } from \"../error\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationQueryBuilder extends QueryBuilder {\n    constructor() {\n        super(...arguments);\n        this[\"@instanceof\"] = Symbol.for(\"RelationQueryBuilder\");\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        return \"\";\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sets entity (target) which relations will be updated.\n     */\n    of(entity) {\n        this.expressionMap.of = entity;\n        return this;\n    }\n    /**\n     * Sets entity relation's value.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Works only for many-to-one and one-to-one relations.\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\n     */\n    async set(value) {\n        const relation = this.expressionMap.relationMetadata;\n        if (!this.expressionMap.of)\n            // todo: move this check before relation query builder creation?\n            throw new TypeORMError(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n        if (relation.isManyToMany || relation.isOneToMany)\n            throw new TypeORMError(`Set operation is only supported for many-to-one and one-to-one relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .add() method instead.`);\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!ObjectUtils.isObject(value) ||\n                Object.keys(value).length < relation.joinColumns.length))\n            throw new TypeORMError(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n    /**\n     * Adds (binds) given value to entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async add(value) {\n        if (Array.isArray(value) && value.length === 0)\n            return;\n        const relation = this.expressionMap.relationMetadata;\n        if (!this.expressionMap.of)\n            // todo: move this check before relation query builder creation?\n            throw new TypeORMError(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new TypeORMError(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set() method instead.`);\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!ObjectUtils.isObject(value) ||\n                Object.keys(value).length < relation.joinColumns.length))\n            throw new TypeORMError(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value);\n    }\n    /**\n     * Removes (unbinds) given value from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async remove(value) {\n        if (Array.isArray(value) && value.length === 0)\n            return;\n        const relation = this.expressionMap.relationMetadata;\n        if (!this.expressionMap.of)\n            // todo: move this check before relation query builder creation?\n            throw new TypeORMError(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new TypeORMError(`Add operation is only supported for many-to-many and one-to-many relations. ` +\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                `Use .set(null) method instead.`);\n        const remover = new RelationRemover(this, this.expressionMap);\n        return remover.remove(value);\n    }\n    /**\n     * Adds (binds) and removes (unbinds) given values to/from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async addAndRemove(added, removed) {\n        await this.remove(removed);\n        await this.add(added);\n    }\n    /**\n     * Gets entity's relation id.\n    async getId(): Promise<any> {\n\n    }*/\n    /**\n     * Gets entity's relation ids.\n    async getIds(): Promise<any[]> {\n        return [];\n    }*/\n    /**\n     * Loads a single entity (relational) from the relation.\n     * You can also provide id of relational entity to filter by.\n     */\n    async loadOne() {\n        return this.loadMany().then((results) => results[0]);\n    }\n    /**\n     * Loads many entities (relational) from the relation.\n     * You can also provide ids of relational entities to filter by.\n     */\n    async loadMany() {\n        let of = this.expressionMap.of;\n        if (!ObjectUtils.isObject(of)) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.hasMultiplePrimaryKeys)\n                throw new TypeORMError(`Cannot load entity because only one primary key was specified, however entity contains multiple primary keys`);\n            of = metadata.primaryColumns[0].createValueMap(of);\n        }\n        return this.connection.relationLoader.load(this.expressionMap.relationMetadata, of, this.queryRunner);\n    }\n}\n\n//# sourceMappingURL=RelationQueryBuilder.js.map\n","export class OrmUtils {\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    /**\n     * Chunks array into pieces.\n     */\n    static chunk(array, size) {\n        return Array.from(Array(Math.ceil(array.length / size)), (_, i) => {\n            return array.slice(i * size, i * size + size);\n        });\n    }\n    static splitClassesAndStrings(classesAndStrings) {\n        return [\n            classesAndStrings.filter((cls) => typeof cls !== \"string\"),\n            classesAndStrings.filter((str) => typeof str === \"string\"),\n        ];\n    }\n    static groupBy(array, propertyCallback) {\n        return array.reduce((groupedArray, value) => {\n            const key = propertyCallback(value);\n            let grouped = groupedArray.find((i) => i.id === key);\n            if (!grouped) {\n                grouped = { id: key, items: [] };\n                groupedArray.push(grouped);\n            }\n            grouped.items.push(value);\n            return groupedArray;\n        }, []);\n    }\n    static uniq(array, criteriaOrProperty) {\n        return array.reduce((uniqueArray, item) => {\n            let found = false;\n            if (typeof criteriaOrProperty === \"function\") {\n                const itemValue = criteriaOrProperty(item);\n                found = !!uniqueArray.find((uniqueItem) => criteriaOrProperty(uniqueItem) === itemValue);\n            }\n            else if (typeof criteriaOrProperty === \"string\") {\n                found = !!uniqueArray.find((uniqueItem) => uniqueItem[criteriaOrProperty] ===\n                    item[criteriaOrProperty]);\n            }\n            else {\n                found = uniqueArray.indexOf(item) !== -1;\n            }\n            if (!found)\n                uniqueArray.push(item);\n            return uniqueArray;\n        }, []);\n    }\n    // Checks if it's an object made by Object.create(null), {} or new Object()\n    static isPlainObject(item) {\n        if (item === null || item === undefined) {\n            return false;\n        }\n        return !item.constructor || item.constructor === Object;\n    }\n    static mergeArrayKey(target, key, value, memo) {\n        // Have we seen this before?  Prevent infinite recursion.\n        if (memo.has(value)) {\n            target[key] = memo.get(value);\n            return;\n        }\n        if (value instanceof Promise) {\n            // Skip promises entirely.\n            // This is a hold-over from the old code & is because we don't want to pull in\n            // the lazy fields.  Ideally we'd remove these promises via another function first\n            // but for now we have to do it here.\n            return;\n        }\n        if (!this.isPlainObject(value) && !Array.isArray(value)) {\n            target[key] = value;\n            return;\n        }\n        if (!target[key]) {\n            target[key] = Array.isArray(value) ? [] : {};\n        }\n        memo.set(value, target[key]);\n        this.merge(target[key], value, memo);\n        memo.delete(value);\n    }\n    static mergeObjectKey(target, key, value, memo) {\n        // Have we seen this before?  Prevent infinite recursion.\n        if (memo.has(value)) {\n            Object.assign(target, { [key]: memo.get(value) });\n            return;\n        }\n        if (value instanceof Promise) {\n            // Skip promises entirely.\n            // This is a hold-over from the old code & is because we don't want to pull in\n            // the lazy fields.  Ideally we'd remove these promises via another function first\n            // but for now we have to do it here.\n            return;\n        }\n        if (!this.isPlainObject(value) && !Array.isArray(value)) {\n            Object.assign(target, { [key]: value });\n            return;\n        }\n        if (!target[key]) {\n            Object.assign(target, { [key]: Array.isArray(value) ? [] : {} });\n        }\n        memo.set(value, target[key]);\n        this.merge(target[key], value, memo);\n        memo.delete(value);\n    }\n    static merge(target, source, memo = new Map()) {\n        if (this.isPlainObject(target) && this.isPlainObject(source)) {\n            for (const key of Object.keys(source)) {\n                if (key === \"__proto__\")\n                    continue;\n                this.mergeObjectKey(target, key, source[key], memo);\n            }\n        }\n        if (Array.isArray(target) && Array.isArray(source)) {\n            for (let key = 0; key < source.length; key++) {\n                this.mergeArrayKey(target, key, source[key], memo);\n            }\n        }\n    }\n    /**\n     * Deep Object.assign.\n     */\n    static mergeDeep(target, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n        for (const source of sources) {\n            OrmUtils.merge(target, source);\n        }\n        return target;\n    }\n    /**\n     * Deep compare objects.\n     *\n     * @see http://stackoverflow.com/a/1144249\n     */\n    static deepCompare(...args) {\n        let i, l, leftChain, rightChain;\n        if (arguments.length < 1) {\n            return true; // Die silently? Don't know how to handle such case, please help...\n            // throw \"Need two or more arguments to compare\";\n        }\n        for (i = 1, l = arguments.length; i < l; i++) {\n            leftChain = []; // Todo: this can be cached\n            rightChain = [];\n            if (!this.compare2Objects(leftChain, rightChain, arguments[0], arguments[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Gets deeper value of object.\n     */\n    static deepValue(obj, path) {\n        const segments = path.split(\".\");\n        for (let i = 0, len = segments.length; i < len; i++) {\n            obj = obj[segments[i]];\n        }\n        return obj;\n    }\n    static replaceEmptyObjectsWithBooleans(obj) {\n        for (let key in obj) {\n            if (obj[key] && typeof obj[key] === \"object\") {\n                if (Object.keys(obj[key]).length === 0) {\n                    obj[key] = true;\n                }\n                else {\n                    this.replaceEmptyObjectsWithBooleans(obj[key]);\n                }\n            }\n        }\n    }\n    static propertyPathsToTruthyObject(paths) {\n        let obj = {};\n        for (let path of paths) {\n            const props = path.split(\".\");\n            if (!props.length)\n                continue;\n            if (!obj[props[0]] || obj[props[0]] === true) {\n                obj[props[0]] = {};\n            }\n            let recursiveChild = obj[props[0]];\n            for (let [key, prop] of props.entries()) {\n                if (key === 0)\n                    continue;\n                if (recursiveChild[prop]) {\n                    recursiveChild = recursiveChild[prop];\n                }\n                else if (key === props.length - 1) {\n                    recursiveChild[prop] = {};\n                    recursiveChild = null;\n                }\n                else {\n                    recursiveChild[prop] = {};\n                    recursiveChild = recursiveChild[prop];\n                }\n            }\n        }\n        this.replaceEmptyObjectsWithBooleans(obj);\n        return obj;\n    }\n    /**\n     * Check if two entity-id-maps are the same\n     */\n    static compareIds(firstId, secondId) {\n        if (firstId === undefined ||\n            firstId === null ||\n            secondId === undefined ||\n            secondId === null)\n            return false;\n        // Optimized version for the common case\n        if (((typeof firstId.id === \"string\" &&\n            typeof secondId.id === \"string\") ||\n            (typeof firstId.id === \"number\" &&\n                typeof secondId.id === \"number\")) &&\n            Object.keys(firstId).length === 1 &&\n            Object.keys(secondId).length === 1) {\n            return firstId.id === secondId.id;\n        }\n        return OrmUtils.deepCompare(firstId, secondId);\n    }\n    /**\n     * Transforms given value into boolean value.\n     */\n    static toBoolean(value) {\n        if (typeof value === \"boolean\")\n            return value;\n        if (typeof value === \"string\")\n            return value === \"true\" || value === \"1\";\n        if (typeof value === \"number\")\n            return value > 0;\n        return false;\n    }\n    /**\n     * Composes an object from the given array of keys and values.\n     */\n    static zipObject(keys, values) {\n        return keys.reduce((object, column, index) => {\n            object[column] = values[index];\n            return object;\n        }, {});\n    }\n    /**\n     * Compares two arrays.\n     */\n    static isArraysEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length)\n            return false;\n        return arr1.every((element) => {\n            return arr2.indexOf(element) !== -1;\n        });\n    }\n    static areMutuallyExclusive(...lists) {\n        const haveSharedObjects = lists.some((list) => {\n            const otherLists = lists.filter((otherList) => otherList !== list);\n            return list.some((item) => otherLists.some((otherList) => otherList.includes(item)));\n        });\n        return !haveSharedObjects;\n    }\n    /**\n     * Parses the CHECK constraint on the specified column and returns\n     * all values allowed by the constraint or undefined if the constraint\n     * is not present.\n     */\n    static parseSqlCheckExpression(sql, columnName) {\n        const enumMatch = sql.match(new RegExp(`\"${columnName}\" varchar CHECK\\\\s*\\\\(\\\\s*\"${columnName}\"\\\\s+IN\\\\s*`));\n        if (enumMatch && enumMatch.index) {\n            const afterMatch = sql.substring(enumMatch.index + enumMatch[0].length);\n            // This is an enum\n            // all enum values stored as a comma separated list\n            const chars = afterMatch;\n            /**\n             * * When outside quotes: empty string\n             * * When inside single quotes: `'`\n             */\n            let currentQuotes = \"\";\n            let nextValue = \"\";\n            const enumValues = [];\n            for (let idx = 0; idx < chars.length; idx++) {\n                const char = chars[idx];\n                switch (char) {\n                    case \",\":\n                        if (currentQuotes == \"\") {\n                            enumValues.push(nextValue);\n                            nextValue = \"\";\n                        }\n                        else {\n                            nextValue += char;\n                        }\n                        break;\n                    case \"'\":\n                        if (currentQuotes == char) {\n                            const isNextCharQuote = chars[idx + 1] === char;\n                            if (isNextCharQuote) {\n                                // double quote in sql should be treated as a\n                                // single quote that's part of the quoted string\n                                nextValue += char;\n                                idx += 1; // skip that next quote\n                            }\n                            else {\n                                currentQuotes = \"\";\n                            }\n                        }\n                        else {\n                            currentQuotes = char;\n                        }\n                        break;\n                    case \")\":\n                        if (currentQuotes == \"\") {\n                            enumValues.push(nextValue);\n                            return enumValues;\n                        }\n                        else {\n                            nextValue += char;\n                        }\n                        break;\n                    default:\n                        if (currentQuotes != \"\") {\n                            nextValue += char;\n                        }\n                }\n            }\n        }\n        return undefined;\n    }\n    // -------------------------------------------------------------------------\n    // Private methods\n    // -------------------------------------------------------------------------\n    static compare2Objects(leftChain, rightChain, x, y) {\n        let p;\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (Number.isNaN(x) && Number.isNaN(y))\n            return true;\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y)\n            return true;\n        // Unequal, but either is null or undefined (use case: jsonb comparison)\n        // PR #3776, todo: add tests\n        if (x === null || y === null || x === undefined || y === undefined)\n            return false;\n        // Fix the buffer compare bug.\n        // See: https://github.com/typeorm/typeorm/issues/3654\n        if ((typeof x.equals === \"function\" ||\n            typeof x.equals === \"function\") &&\n            x.equals(y))\n            return true;\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if ((typeof x === \"function\" && typeof y === \"function\") ||\n            (x instanceof Date && y instanceof Date) ||\n            (x instanceof RegExp && y instanceof RegExp) ||\n            (typeof x === \"string\" && typeof y === \"string\") ||\n            (typeof x === \"number\" && typeof y === \"number\"))\n            return x.toString() === y.toString();\n        // At last checking prototypes as good as we can\n        if (!(typeof x === \"object\" && typeof y === \"object\"))\n            return false;\n        if (Object.prototype.isPrototypeOf.call(x, y) ||\n            Object.prototype.isPrototypeOf.call(y, x))\n            return false;\n        if (x.constructor !== y.constructor)\n            return false;\n        if (x.prototype !== y.prototype)\n            return false;\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\n            return false;\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n        }\n        for (p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n            switch (typeof x[p]) {\n                case \"object\":\n                case \"function\":\n                    leftChain.push(x);\n                    rightChain.push(y);\n                    if (!this.compare2Objects(leftChain, rightChain, x[p], y[p])) {\n                        return false;\n                    }\n                    leftChain.pop();\n                    rightChain.pop();\n                    break;\n                default:\n                    if (x[p] !== y[p]) {\n                        return false;\n                    }\n                    break;\n            }\n        }\n        return true;\n    }\n}\n\n//# sourceMappingURL=OrmUtils.js.map\n","import { OrmUtils } from \"../../util/OrmUtils\";\nimport { DriverUtils } from \"../../driver/DriverUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nexport class RawSqlResultsToEntityTransformer {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {\n        this.expressionMap = expressionMap;\n        this.driver = driver;\n        this.rawRelationIdResults = rawRelationIdResults;\n        this.rawRelationCountResults = rawRelationCountResults;\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    transform(rawResults, alias) {\n        const group = this.group(rawResults, alias);\n        const entities = [];\n        group.forEach((results) => {\n            const entity = this.transformRawResultsGroup(results, alias);\n            if (entity !== undefined &&\n                !Object.values(entity).every((value) => value === null))\n                entities.push(entity);\n        });\n        return entities;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Groups given raw results by ids of given alias.\n     */\n    group(rawResults, alias) {\n        const map = new Map();\n        const keys = [];\n        if (alias.metadata.tableType === \"view\") {\n            keys.push(...alias.metadata.columns.map((column) => DriverUtils.buildAlias(this.driver, undefined, alias.name, column.databaseName)));\n        }\n        else {\n            keys.push(...alias.metadata.primaryColumns.map((column) => DriverUtils.buildAlias(this.driver, undefined, alias.name, column.databaseName)));\n        }\n        rawResults.forEach((rawResult) => {\n            const id = keys\n                .map((key) => {\n                const keyValue = rawResult[key];\n                if (Buffer.isBuffer(keyValue)) {\n                    return keyValue.toString(\"hex\");\n                }\n                if (ObjectUtils.isObject(keyValue)) {\n                    return JSON.stringify(keyValue);\n                }\n                return keyValue;\n            })\n                .join(\"_\"); // todo: check partial\n            const items = map.get(id);\n            if (!items) {\n                map.set(id, [rawResult]);\n            }\n            else {\n                items.push(rawResult);\n            }\n        });\n        return map;\n    }\n    /**\n     * Transforms set of data results into single entity.\n     */\n    transformRawResultsGroup(rawResults, alias) {\n        // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;\n        let metadata = alias.metadata;\n        if (metadata.discriminatorColumn) {\n            const discriminatorValues = rawResults.map((result) => result[DriverUtils.buildAlias(this.driver, undefined, alias.name, alias.metadata.discriminatorColumn.databaseName)]);\n            const discriminatorMetadata = metadata.childEntityMetadatas.find((childEntityMetadata) => {\n                return (typeof discriminatorValues.find((value) => value ===\n                    childEntityMetadata.discriminatorValue) !== \"undefined\");\n            });\n            if (discriminatorMetadata)\n                metadata = discriminatorMetadata;\n        }\n        let entity = metadata.create(this.queryRunner, {\n            fromDeserializer: true,\n            pojo: this.expressionMap.options.indexOf(\"create-pojo\") !== -1,\n        });\n        // get value from columns selections and put them into newly created entity\n        const hasColumns = this.transformColumns(rawResults, alias, entity, metadata);\n        const hasRelations = this.transformJoins(rawResults, entity, alias, metadata);\n        const hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);\n        const hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\n        // if we have at least one selected column then return this entity\n        // since entity must have at least primary columns to be really selected and transformed into entity\n        if (hasColumns)\n            return entity;\n        // if we don't have any selected column we should not return entity,\n        // except for the case when entity only contain a primary column as a relation to another entity\n        // in this case its absolutely possible our entity to not have any columns except a single relation\n        const hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter((column) => column.isVirtual === false).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns\n        if (hasOnlyVirtualPrimaryColumns &&\n            (hasRelations || hasRelationIds || hasRelationCounts))\n            return entity;\n        return undefined;\n    }\n    // get value from columns selections and put them into object\n    transformColumns(rawResults, alias, entity, metadata) {\n        let hasData = false;\n        metadata.columns.forEach((column) => {\n            // if table inheritance is used make sure this column is not child's column\n            if (metadata.childEntityMetadatas.length > 0 &&\n                metadata.childEntityMetadatas.findIndex((childMetadata) => childMetadata.target === column.target) !== -1)\n                return;\n            const value = rawResults[0][DriverUtils.buildAlias(this.driver, undefined, alias.name, column.databaseName)];\n            if (value === undefined || column.isVirtual)\n                return;\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\n            // then we don't add this column and its value into the entity\n            if (!this.expressionMap.selects.find((select) => select.selection === alias.name ||\n                select.selection ===\n                    alias.name + \".\" + column.propertyPath))\n                return;\n            column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\n            if (value !== null)\n                // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\n                hasData = true;\n        });\n        return hasData;\n    }\n    /**\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\n     */\n    transformJoins(rawResults, entity, alias, metadata) {\n        let hasData = false;\n        // let discriminatorValue: string = \"\";\n        // if (metadata.discriminatorColumn)\n        //     discriminatorValue = rawResults[0][DriverUtils.buildAlias(this.connection.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)];\n        this.expressionMap.joinAttributes.forEach((join) => {\n            // todo: we have problem here - when inner joins are used without selects it still create empty array\n            // skip joins without metadata\n            if (!join.metadata)\n                return;\n            // if simple left or inner join was performed without selection then we don't need to do anything\n            if (!join.isSelected)\n                return;\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)\n            // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\n            if (join.relation &&\n                !metadata.relations.find((relation) => relation === join.relation))\n                return;\n            // some checks to make sure this join is for current alias\n            if (join.mapToProperty) {\n                if (join.mapToPropertyParentAlias !== alias.name)\n                    return;\n            }\n            else {\n                if (!join.relation ||\n                    join.parentAlias !== alias.name ||\n                    join.relationPropertyPath !== join.relation.propertyPath)\n                    return;\n            }\n            // transform joined data into entities\n            let result = this.transform(rawResults, join.alias);\n            result = !join.isMany ? result[0] : result;\n            result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database\n            if (result === undefined)\n                // if nothing was joined then simply return\n                return;\n            // if join was mapped to some property then save result to that property\n            if (join.mapToPropertyPropertyName) {\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\n            }\n            else {\n                // otherwise set to relation\n                join.relation.setEntityValue(entity, result);\n            }\n            hasData = true;\n        });\n        return hasData;\n    }\n    transformRelationIds(rawSqlResults, alias, entity, metadata) {\n        let hasData = false;\n        this.rawRelationIdResults.forEach((rawRelationIdResult, index) => {\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !==\n                alias.name)\n                return;\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\n            const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\n            if (valueMap === undefined || valueMap === null) {\n                return;\n            }\n            // prepare common data for this call\n            this.prepareDataForTransformRelationIds();\n            // Extract idMaps from prepared data by hash\n            const hash = this.hashEntityIds(relation, valueMap);\n            const idMaps = this.relationIdMaps[index][hash] || [];\n            // Map data to properties\n            const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\n            const mapToProperty = (properties, map, value) => {\n                const property = properties.shift();\n                if (property && properties.length === 0) {\n                    map[property] = value;\n                    return map;\n                }\n                if (property && properties.length > 0) {\n                    mapToProperty(properties, map[property], value);\n                }\n                else {\n                    return map;\n                }\n            };\n            if (relation.isOneToOne || relation.isManyToOne) {\n                if (idMaps[0] !== undefined) {\n                    mapToProperty(properties, entity, idMaps[0]);\n                    hasData = true;\n                }\n            }\n            else {\n                mapToProperty(properties, entity, idMaps);\n                hasData = hasData || idMaps.length > 0;\n            }\n        });\n        return hasData;\n    }\n    transformRelationCounts(rawSqlResults, alias, entity) {\n        let hasData = false;\n        this.rawRelationCountResults\n            .filter((rawRelationCountResult) => rawRelationCountResult.relationCountAttribute\n            .parentAlias === alias.name)\n            .forEach((rawRelationCountResult) => {\n            const relation = rawRelationCountResult.relationCountAttribute.relation;\n            let referenceColumnName;\n            if (relation.isOneToMany) {\n                referenceColumnName =\n                    relation.inverseRelation.joinColumns[0]\n                        .referencedColumn.databaseName; // todo: fix joinColumns[0]\n            }\n            else {\n                referenceColumnName = relation.isOwning\n                    ? relation.joinColumns[0].referencedColumn.databaseName\n                    : relation.inverseRelation.joinColumns[0]\n                        .referencedColumn.databaseName;\n            }\n            const referenceColumnValue = rawSqlResults[0][DriverUtils.buildAlias(this.driver, undefined, alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\n            if (referenceColumnValue !== undefined &&\n                referenceColumnValue !== null) {\n                entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\n                rawRelationCountResult.results\n                    .filter((result) => result[\"parentId\"] === referenceColumnValue)\n                    .forEach((result) => {\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\n                    hasData = true;\n                });\n            }\n        });\n        return hasData;\n    }\n    createValueMapFromJoinColumns(relation, parentAlias, rawSqlResults) {\n        let columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map((joinColumn) => joinColumn);\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map((joinColumn) => joinColumn);\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map((joinColumn) => joinColumn);\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map((joinColumn) => joinColumn);\n            }\n        }\n        return columns.reduce((valueMap, column) => {\n            rawSqlResults.forEach((rawSqlResult) => {\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    valueMap[column.databaseName] =\n                        this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildAlias(this.driver, undefined, parentAlias, column.databaseName)], column);\n                }\n                else {\n                    valueMap[column.databaseName] =\n                        this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildAlias(this.driver, undefined, parentAlias, column.referencedColumn.databaseName)], column.referencedColumn);\n                }\n            });\n            return valueMap;\n        }, {});\n    }\n    extractEntityPrimaryIds(relation, relationIdRawResult) {\n        let columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map((joinColumn) => joinColumn);\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map((joinColumn) => joinColumn);\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map((joinColumn) => joinColumn);\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map((joinColumn) => joinColumn);\n            }\n        }\n        return columns.reduce((data, column) => {\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\n            return data;\n        }, {});\n    }\n    /*private removeVirtualColumns(entity: ObjectLiteral, alias: Alias) {\n        const virtualColumns = this.expressionMap.selects\n            .filter(select => select.virtual)\n            .map(select => select.selection.replace(alias.name + \".\", \"\"));\n\n        virtualColumns.forEach(virtualColumn => delete entity[virtualColumn]);\n    }*/\n    /** Prepare data to run #transformRelationIds, as a lot of result independent data is needed in every call */\n    prepareDataForTransformRelationIds() {\n        // Return early if the relationIdMaps were already calculated\n        if (this.relationIdMaps) {\n            return;\n        }\n        // Ensure this prepare function is only called once\n        this.relationIdMaps = this.rawRelationIdResults.map((rawRelationIdResult) => {\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\n            // Calculate column metadata\n            let columns;\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\n                columns = relation.joinColumns;\n            }\n            else if (relation.isOneToMany ||\n                relation.isOneToOneNotOwner) {\n                columns = relation.inverseEntityMetadata.primaryColumns;\n            }\n            else {\n                // ManyToMany\n                if (relation.isOwning) {\n                    columns = relation.inverseJoinColumns;\n                }\n                else {\n                    columns = relation.inverseRelation.joinColumns;\n                }\n            }\n            // Calculate the idMaps for the rawRelationIdResult\n            return rawRelationIdResult.results.reduce((agg, result) => {\n                let idMap = columns.reduce((idMap, column) => {\n                    let value = result[column.databaseName];\n                    if (relation.isOneToMany ||\n                        relation.isOneToOneNotOwner) {\n                        if (column.isVirtual &&\n                            column.referencedColumn &&\n                            column.referencedColumn.propertyName !==\n                                column.propertyName) {\n                            // if column is a relation\n                            value =\n                                column.referencedColumn.createValueMap(value);\n                        }\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(value));\n                    }\n                    if (!column.isPrimary &&\n                        column.referencedColumn.referencedColumn) {\n                        // if column is a relation\n                        value =\n                            column.referencedColumn.referencedColumn.createValueMap(value);\n                    }\n                    return OrmUtils.mergeDeep(idMap, column.referencedColumn.createValueMap(value));\n                }, {});\n                if (columns.length === 1 &&\n                    !rawRelationIdResult.relationIdAttribute.disableMixedMap) {\n                    if (relation.isOneToMany ||\n                        relation.isOneToOneNotOwner) {\n                        idMap = columns[0].getEntityValue(idMap);\n                    }\n                    else {\n                        idMap =\n                            columns[0].referencedColumn.getEntityValue(idMap);\n                    }\n                }\n                // If an idMap is found, set it in the aggregator under the correct hash\n                if (idMap !== undefined) {\n                    const hash = this.hashEntityIds(relation, result);\n                    if (agg[hash]) {\n                        agg[hash].push(idMap);\n                    }\n                    else {\n                        agg[hash] = [idMap];\n                    }\n                }\n                return agg;\n            }, {});\n        });\n    }\n    /**\n     * Use a simple JSON.stringify to create a simple hash of the primary ids of an entity.\n     * As this.extractEntityPrimaryIds always creates the primary id object in the same order, if the same relation is\n     * given, a simple JSON.stringify should be enough to get a unique hash per entity!\n     */\n    hashEntityIds(relation, data) {\n        const entityPrimaryIds = this.extractEntityPrimaryIds(relation, data);\n        return JSON.stringify(entityPrimaryIds);\n    }\n}\n\n//# sourceMappingURL=RawSqlResultsToEntityTransformer.js.map\n","import { DriverUtils } from \"../../driver/DriverUtils\";\nimport { TypeORMError } from \"../../error/TypeORMError\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nexport class RelationIdLoader {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryRunner, relationIdAttributes) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.relationIdAttributes = relationIdAttributes;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    async load(rawEntities) {\n        const promises = this.relationIdAttributes.map(async (relationIdAttr) => {\n            if (relationIdAttr.relation.isManyToOne ||\n                relationIdAttr.relation.isOneToOneOwner) {\n                // example: Post and Tag\n                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\n                // we expect it to load id of tag\n                if (relationIdAttr.queryBuilderFactory)\n                    throw new TypeORMError(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\n                const duplicates = {};\n                const results = rawEntities\n                    .map((rawEntity) => {\n                    const result = {};\n                    const duplicateParts = [];\n                    relationIdAttr.relation.joinColumns.forEach((joinColumn) => {\n                        result[joinColumn.databaseName] =\n                            this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildAlias(this.connection.driver, undefined, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn);\n                        const duplicatePart = `${joinColumn.databaseName}:${result[joinColumn.databaseName]}`;\n                        if (duplicateParts.indexOf(duplicatePart) === -1) {\n                            duplicateParts.push(duplicatePart);\n                        }\n                    });\n                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach((primaryColumn) => {\n                        result[primaryColumn.databaseName] =\n                            this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildAlias(this.connection.driver, undefined, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);\n                        const duplicatePart = `${primaryColumn.databaseName}:${result[primaryColumn.databaseName]}`;\n                        if (duplicateParts.indexOf(duplicatePart) === -1) {\n                            duplicateParts.push(duplicatePart);\n                        }\n                    });\n                    duplicateParts.sort();\n                    const duplicate = duplicateParts.join(\"::\");\n                    if (duplicates[duplicate]) {\n                        return null;\n                    }\n                    duplicates[duplicate] = true;\n                    return result;\n                })\n                    .filter((v) => v);\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results: results,\n                };\n            }\n            else if (relationIdAttr.relation.isOneToMany ||\n                relationIdAttr.relation.isOneToOneNotOwner) {\n                // example: Post and Category\n                // loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // we expect it to load array of category ids\n                const relation = relationIdAttr.relation; // \"post.categories\"\n                const joinColumns = relation.isOwning\n                    ? relation.joinColumns\n                    : relation.inverseRelation.joinColumns;\n                const table = relation.inverseEntityMetadata.target; // category\n                const tableName = relation.inverseEntityMetadata.tableName; // category\n                const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n                const duplicates = {};\n                const parameters = {};\n                const condition = rawEntities\n                    .map((rawEntity, index) => {\n                    const duplicateParts = [];\n                    const parameterParts = {};\n                    const queryPart = joinColumns\n                        .map((joinColumn) => {\n                        const parameterName = joinColumn.databaseName + index;\n                        const parameterValue = rawEntity[DriverUtils.buildAlias(this.connection.driver, undefined, relationIdAttr.parentAlias, joinColumn.referencedColumn\n                            .databaseName)];\n                        const duplicatePart = `${tableAlias}:${joinColumn.propertyPath}:${parameterValue}`;\n                        if (duplicateParts.indexOf(duplicatePart) !== -1) {\n                            return \"\";\n                        }\n                        duplicateParts.push(duplicatePart);\n                        parameterParts[parameterName] =\n                            parameterValue;\n                        return (tableAlias +\n                            \".\" +\n                            joinColumn.propertyPath +\n                            \" = :\" +\n                            parameterName);\n                    })\n                        .filter((v) => v)\n                        .join(\" AND \");\n                    duplicateParts.sort();\n                    const duplicate = duplicateParts.join(\"::\");\n                    if (duplicates[duplicate]) {\n                        return \"\";\n                    }\n                    duplicates[duplicate] = true;\n                    Object.assign(parameters, parameterParts);\n                    return queryPart;\n                })\n                    .filter((v) => v)\n                    .map((condition) => \"(\" + condition + \")\")\n                    .join(\" OR \");\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (!condition)\n                    return {\n                        relationIdAttribute: relationIdAttr,\n                        results: [],\n                    };\n                // generate query:\n                // SELECT category.id, category.postId FROM category category ON category.postId = :postId\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                const columns = OrmUtils.uniq([\n                    ...joinColumns,\n                    ...relation.inverseRelation.entityMetadata\n                        .primaryColumns,\n                ], (column) => column.propertyPath);\n                columns.forEach((joinColumn) => {\n                    qb.addSelect(tableAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\n                });\n                qb.from(table, tableAlias)\n                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\n                    .setParameters(parameters);\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n                const results = await qb.getRawMany();\n                results.forEach((result) => {\n                    joinColumns.forEach((column) => {\n                        result[column.databaseName] =\n                            this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);\n                    });\n                    relation.inverseRelation.entityMetadata.primaryColumns.forEach((column) => {\n                        result[column.databaseName] =\n                            this.connection.driver.prepareHydratedValue(result[column.databaseName], column);\n                    });\n                });\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results,\n                };\n            }\n            else {\n                // many-to-many\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n                const relation = relationIdAttr.relation;\n                const joinColumns = relation.isOwning\n                    ? relation.joinColumns\n                    : relation.inverseRelation.inverseJoinColumns;\n                const inverseJoinColumns = relation.isOwning\n                    ? relation.inverseJoinColumns\n                    : relation.inverseRelation.joinColumns;\n                const junctionAlias = relationIdAttr.junctionAlias;\n                const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;\n                const junctionTableName = relation.isOwning\n                    ? relation.junctionEntityMetadata.tableName\n                    : relation.inverseRelation.junctionEntityMetadata\n                        .tableName;\n                const mappedColumns = rawEntities.map((rawEntity) => {\n                    return joinColumns.reduce((map, joinColumn) => {\n                        map[joinColumn.propertyPath] =\n                            rawEntity[DriverUtils.buildAlias(this.connection.driver, undefined, relationIdAttr.parentAlias, joinColumn.referencedColumn\n                                .databaseName)];\n                        return map;\n                    }, {});\n                });\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (mappedColumns.length === 0)\n                    return {\n                        relationIdAttribute: relationIdAttr,\n                        results: [],\n                    };\n                const parameters = {};\n                const duplicates = {};\n                const joinColumnConditions = mappedColumns\n                    .map((mappedColumn, index) => {\n                    const duplicateParts = [];\n                    const parameterParts = {};\n                    const queryPart = Object.keys(mappedColumn)\n                        .map((key) => {\n                        const parameterName = key + index;\n                        const parameterValue = mappedColumn[key];\n                        const duplicatePart = `${junctionAlias}:${key}:${parameterValue}`;\n                        if (duplicateParts.indexOf(duplicatePart) !== -1) {\n                            return \"\";\n                        }\n                        duplicateParts.push(duplicatePart);\n                        parameterParts[parameterName] =\n                            parameterValue;\n                        return (junctionAlias +\n                            \".\" +\n                            key +\n                            \" = :\" +\n                            parameterName);\n                    })\n                        .filter((s) => s)\n                        .join(\" AND \");\n                    duplicateParts.sort();\n                    const duplicate = duplicateParts.join(\"::\");\n                    if (duplicates[duplicate]) {\n                        return \"\";\n                    }\n                    duplicates[duplicate] = true;\n                    Object.assign(parameters, parameterParts);\n                    return queryPart;\n                })\n                    .filter((s) => s);\n                const inverseJoinColumnCondition = inverseJoinColumns\n                    .map((joinColumn) => {\n                    return (junctionAlias +\n                        \".\" +\n                        joinColumn.propertyPath +\n                        \" = \" +\n                        inverseSideTableAlias +\n                        \".\" +\n                        joinColumn.referencedColumn.propertyPath);\n                })\n                    .join(\" AND \");\n                const condition = joinColumnConditions\n                    .map((condition) => {\n                    return (\"(\" +\n                        condition +\n                        \" AND \" +\n                        inverseJoinColumnCondition +\n                        \")\");\n                })\n                    .join(\" OR \");\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                inverseJoinColumns.forEach((joinColumn) => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName).addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n                joinColumns.forEach((joinColumn) => {\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName).addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\n                });\n                qb.from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .setParameters(parameters);\n                // apply condition (custom query builder factory)\n                if (relationIdAttr.queryBuilderFactory)\n                    relationIdAttr.queryBuilderFactory(qb);\n                const results = await qb.getRawMany();\n                results.forEach((result) => {\n                    ;\n                    [...joinColumns, ...inverseJoinColumns].forEach((column) => {\n                        result[column.databaseName] =\n                            this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);\n                    });\n                });\n                return {\n                    relationIdAttribute: relationIdAttr,\n                    results,\n                };\n            }\n        });\n        return Promise.all(promises);\n    }\n}\n\n//# sourceMappingURL=RelationIdLoader.js.map\n","import { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Loads relation ids for the given entities.\n */\nexport class RelationIdLoader {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryRunner) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    load(relation, entityOrEntities, relatedEntityOrRelatedEntities) {\n        const entities = Array.isArray(entityOrEntities)\n            ? entityOrEntities\n            : [entityOrEntities];\n        const relatedEntities = Array.isArray(relatedEntityOrRelatedEntities)\n            ? relatedEntityOrRelatedEntities\n            : relatedEntityOrRelatedEntities\n                ? [relatedEntityOrRelatedEntities]\n                : undefined;\n        // load relation ids depend of relation type\n        if (relation.isManyToMany) {\n            return this.loadForManyToMany(relation, entities, relatedEntities);\n        }\n        else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities);\n        }\n        else {\n            // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities);\n        }\n    }\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    async loadManyToManyRelationIdsAndGroup(relation, entitiesOrEntities, relatedEntityOrEntities, queryBuilder) {\n        // console.log(\"relation:\", relation.propertyName);\n        // console.log(\"entitiesOrEntities\", entitiesOrEntities);\n        const isMany = relation.isManyToMany || relation.isOneToMany;\n        const entities = Array.isArray(entitiesOrEntities)\n            ? entitiesOrEntities\n            : [entitiesOrEntities];\n        if (!relatedEntityOrEntities) {\n            relatedEntityOrEntities = await this.connection.relationLoader.load(relation, entitiesOrEntities, this.queryRunner, queryBuilder);\n            if (!relatedEntityOrEntities.length)\n                return entities.map((entity) => ({\n                    entity: entity,\n                    related: isMany ? [] : undefined,\n                }));\n        }\n        // const relationIds = await this.load(relation, relatedEntityOrEntities!, entitiesOrEntities);\n        const relationIds = await this.load(relation, entitiesOrEntities, relatedEntityOrEntities);\n        // console.log(\"entities\", entities);\n        // console.log(\"relatedEntityOrEntities\", relatedEntityOrEntities);\n        // console.log(\"relationIds\", relationIds);\n        const relatedEntities = Array.isArray(relatedEntityOrEntities)\n            ? relatedEntityOrEntities\n            : [relatedEntityOrEntities];\n        let columns = [], inverseColumns = [];\n        if (relation.isManyToManyOwner) {\n            columns = relation.junctionEntityMetadata.inverseColumns.map((column) => column.referencedColumn);\n            inverseColumns = relation.junctionEntityMetadata.ownerColumns.map((column) => column.referencedColumn);\n        }\n        else if (relation.isManyToManyNotOwner) {\n            columns = relation.junctionEntityMetadata.ownerColumns.map((column) => column.referencedColumn);\n            inverseColumns =\n                relation.junctionEntityMetadata.inverseColumns.map((column) => column.referencedColumn);\n        }\n        else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.joinColumns.map((column) => column.referencedColumn);\n            inverseColumns = relation.entityMetadata.primaryColumns;\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.entityMetadata.primaryColumns;\n            inverseColumns = relation.inverseRelation.joinColumns.map((column) => column.referencedColumn);\n        }\n        else {\n        }\n        return entities.map((entity) => {\n            const group = {\n                entity: entity,\n                related: isMany ? [] : undefined,\n            };\n            const entityRelationIds = relationIds.filter((relationId) => {\n                return inverseColumns.every((column) => {\n                    return column.compareEntityValue(entity, relationId[column.entityMetadata.name +\n                        \"_\" +\n                        column.propertyAliasName]);\n                });\n            });\n            if (!entityRelationIds.length)\n                return group;\n            relatedEntities.forEach((relatedEntity) => {\n                entityRelationIds.forEach((relationId) => {\n                    const relatedEntityMatched = columns.every((column) => {\n                        return column.compareEntityValue(relatedEntity, relationId[DriverUtils.buildAlias(this.connection.driver, undefined, column.entityMetadata.name +\n                            \"_\" +\n                            relation.propertyPath.replace(\".\", \"_\") +\n                            \"_\" +\n                            column.propertyPath.replace(\".\", \"_\"))]);\n                    });\n                    if (relatedEntityMatched) {\n                        if (isMany) {\n                            ;\n                            group.related.push(relatedEntity);\n                        }\n                        else {\n                            group.related = relatedEntity;\n                        }\n                    }\n                });\n            });\n            return group;\n        });\n    }\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n     async loadManyToManyRelationIdsAndMap(\n     relation: RelationMetadata,\n     entityOrEntities: ObjectLiteral|ObjectLiteral[],\n     mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n     propertyName: string\n     ): Promise<void> {\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    loadForManyToMany(relation, entities, relatedEntities) {\n        const junctionMetadata = relation.junctionEntityMetadata;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning\n            ? junctionMetadata.ownerColumns\n            : junctionMetadata.inverseColumns;\n        const inverseColumns = relation.isOwning\n            ? junctionMetadata.inverseColumns\n            : junctionMetadata.ownerColumns;\n        const qb = this.connection.createQueryBuilder(this.queryRunner);\n        // select all columns from junction table\n        columns.forEach((column) => {\n            const columnName = DriverUtils.buildAlias(this.connection.driver, undefined, column.referencedColumn.entityMetadata.name +\n                \"_\" +\n                column.referencedColumn.propertyPath.replace(\".\", \"_\"));\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        inverseColumns.forEach((column) => {\n            const columnName = DriverUtils.buildAlias(this.connection.driver, undefined, column.referencedColumn.entityMetadata.name +\n                \"_\" +\n                relation.propertyPath.replace(\".\", \"_\") +\n                \"_\" +\n                column.referencedColumn.propertyPath.replace(\".\", \"_\"));\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add conditions for the given entities\n        let condition1 = \"\";\n        if (columns.length === 1) {\n            const values = entities.map((entity) => columns[0].referencedColumn.getEntityValue(entity));\n            const areAllNumbers = values.every((value) => typeof value === \"number\");\n            if (areAllNumbers) {\n                condition1 = `${mainAlias}.${columns[0].propertyPath} IN (${values.join(\", \")})`;\n            }\n            else {\n                qb.setParameter(\"values1\", values);\n                condition1 =\n                    mainAlias +\n                        \".\" +\n                        columns[0].propertyPath +\n                        \" IN (:...values1)\"; // todo: use ANY for postgres\n            }\n        }\n        else {\n            condition1 =\n                \"(\" +\n                    entities\n                        .map((entity, entityIndex) => {\n                        return columns\n                            .map((column) => {\n                            const paramName = \"entity1_\" +\n                                entityIndex +\n                                \"_\" +\n                                column.propertyName;\n                            qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                            return (mainAlias +\n                                \".\" +\n                                column.propertyPath +\n                                \" = :\" +\n                                paramName);\n                        })\n                            .join(\" AND \");\n                    })\n                        .map((condition) => \"(\" + condition + \")\")\n                        .join(\" OR \") +\n                    \")\";\n        }\n        // add conditions for the given inverse entities\n        let condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                const values = relatedEntities.map((entity) => inverseColumns[0].referencedColumn.getEntityValue(entity));\n                const areAllNumbers = values.every((value) => typeof value === \"number\");\n                if (areAllNumbers) {\n                    condition2 = `${mainAlias}.${inverseColumns[0].propertyPath} IN (${values.join(\", \")})`;\n                }\n                else {\n                    qb.setParameter(\"values2\", values);\n                    condition2 =\n                        mainAlias +\n                            \".\" +\n                            inverseColumns[0].propertyPath +\n                            \" IN (:...values2)\"; // todo: use ANY for postgres\n                }\n            }\n            else {\n                condition2 =\n                    \"(\" +\n                        relatedEntities\n                            .map((entity, entityIndex) => {\n                            return inverseColumns\n                                .map((column) => {\n                                const paramName = \"entity2_\" +\n                                    entityIndex +\n                                    \"_\" +\n                                    column.propertyName;\n                                qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                                return (mainAlias +\n                                    \".\" +\n                                    column.propertyPath +\n                                    \" = :\" +\n                                    paramName);\n                            })\n                                .join(\" AND \");\n                        })\n                            .map((condition) => \"(\" + condition + \")\")\n                            .join(\" OR \") +\n                        \")\";\n            }\n        }\n        // qb.from(junctionMetadata.target, mainAlias)\n        //     .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"));\n        //\n        // // execute query\n        // const { values1, values2 } = qb.getParameters();\n        // console.log(`I can do it`, { values1, values2 });\n        // if (inverseColumns.length === 1 &&\n        //     columns.length === 1 &&\n        //     this.connection.driver instanceof SqliteDriver &&\n        //     (values1.length + values2.length) > 500 &&\n        //     values1.length === values2.length) {\n        //     console.log(`I can do it`);\n        //     return qb.getRawMany();\n        //\n        // } else {\n        //     return qb.getRawMany();\n        // }\n        // execute query\n        const condition = [condition1, condition2]\n            .filter((v) => v.length > 0)\n            .join(\" AND \");\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities) {\n        const mainAlias = relation.entityMetadata.targetName;\n        // console.log(\"entitiesx\", entities);\n        // console.log(\"relatedEntitiesx\", relatedEntities);\n        const hasAllJoinColumnsInEntity = relation.joinColumns.every((joinColumn) => {\n            return !!relation.entityMetadata.nonVirtualColumns.find((column) => column === joinColumn);\n        });\n        if (relatedEntities && hasAllJoinColumnsInEntity) {\n            let relationIdMaps = [];\n            entities.forEach((entity) => {\n                let relationIdMap = {};\n                relation.entityMetadata.primaryColumns.forEach((primaryColumn) => {\n                    const key = primaryColumn.entityMetadata.name +\n                        \"_\" +\n                        primaryColumn.propertyPath.replace(\".\", \"_\");\n                    relationIdMap[key] =\n                        primaryColumn.getEntityValue(entity);\n                });\n                relatedEntities.forEach((relatedEntity) => {\n                    relation.joinColumns.forEach((joinColumn) => {\n                        const entityColumnValue = joinColumn.getEntityValue(entity);\n                        const relatedEntityColumnValue = joinColumn.referencedColumn.getEntityValue(relatedEntity);\n                        if (entityColumnValue === undefined ||\n                            relatedEntityColumnValue === undefined)\n                            return;\n                        if (entityColumnValue === relatedEntityColumnValue) {\n                            const key = joinColumn.referencedColumn.entityMetadata\n                                .name +\n                                \"_\" +\n                                relation.propertyPath.replace(\".\", \"_\") +\n                                \"_\" +\n                                joinColumn.referencedColumn.propertyPath.replace(\".\", \"_\");\n                            relationIdMap[key] = relatedEntityColumnValue;\n                        }\n                    });\n                });\n                if (Object.keys(relationIdMap).length ===\n                    relation.entityMetadata.primaryColumns.length +\n                        relation.joinColumns.length) {\n                    relationIdMaps.push(relationIdMap);\n                }\n            });\n            // console.log(\"relationIdMap\", relationIdMaps);\n            // console.log(\"entities.length\", entities.length);\n            if (relationIdMaps.length === entities.length)\n                return Promise.resolve(relationIdMaps);\n        }\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder(this.queryRunner);\n        relation.entityMetadata.primaryColumns.forEach((primaryColumn) => {\n            const columnName = DriverUtils.buildAlias(this.connection.driver, undefined, primaryColumn.entityMetadata.name +\n                \"_\" +\n                primaryColumn.propertyPath.replace(\".\", \"_\"));\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach((column) => {\n            const columnName = DriverUtils.buildAlias(this.connection.driver, undefined, column.referencedColumn.entityMetadata.name +\n                \"_\" +\n                relation.propertyPath.replace(\".\", \"_\") +\n                \"_\" +\n                column.referencedColumn.propertyPath.replace(\".\", \"_\"));\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        let condition = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n            const values = entities.map((entity) => relation.entityMetadata.primaryColumns[0].getEntityValue(entity));\n            const areAllNumbers = values.every((value) => typeof value === \"number\");\n            if (areAllNumbers) {\n                condition = `${mainAlias}.${relation.entityMetadata.primaryColumns[0].propertyPath} IN (${values.join(\", \")})`;\n            }\n            else {\n                qb.setParameter(\"values\", values);\n                condition =\n                    mainAlias +\n                        \".\" +\n                        relation.entityMetadata.primaryColumns[0].propertyPath +\n                        \" IN (:...values)\"; // todo: use ANY for postgres\n            }\n        }\n        else {\n            condition = entities\n                .map((entity, entityIndex) => {\n                return relation.entityMetadata.primaryColumns\n                    .map((column, columnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return (mainAlias +\n                        \".\" +\n                        column.propertyPath +\n                        \" = :\" +\n                        paramName);\n                })\n                    .join(\" AND \");\n            })\n                .map((condition) => \"(\" + condition + \")\")\n                .join(\" OR \");\n        }\n        // execute query\n        return qb\n            .from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities) {\n        relation = relation.inverseRelation;\n        if (relation.entityMetadata.primaryColumns.length ===\n            relation.joinColumns.length) {\n            const sameReferencedColumns = relation.entityMetadata.primaryColumns.every((column) => {\n                return relation.joinColumns.indexOf(column) !== -1;\n            });\n            if (sameReferencedColumns) {\n                return Promise.resolve(entities.map((entity) => {\n                    const result = {};\n                    relation.joinColumns.forEach(function (joinColumn) {\n                        const value = joinColumn.referencedColumn.getEntityValue(entity);\n                        const joinColumnName = joinColumn.referencedColumn.entityMetadata\n                            .name +\n                            \"_\" +\n                            joinColumn.referencedColumn.propertyPath.replace(\".\", \"_\");\n                        const primaryColumnName = joinColumn.entityMetadata.name +\n                            \"_\" +\n                            relation.inverseRelation.propertyPath.replace(\".\", \"_\") +\n                            \"_\" +\n                            joinColumn.propertyPath.replace(\".\", \"_\");\n                        result[joinColumnName] = value;\n                        result[primaryColumnName] = value;\n                    });\n                    return result;\n                }));\n            }\n        }\n        const mainAlias = relation.entityMetadata.targetName;\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder(this.queryRunner);\n        relation.entityMetadata.primaryColumns.forEach((primaryColumn) => {\n            const columnName = DriverUtils.buildAlias(this.connection.driver, undefined, primaryColumn.entityMetadata.name +\n                \"_\" +\n                relation.inverseRelation.propertyPath.replace(\".\", \"_\") +\n                \"_\" +\n                primaryColumn.propertyPath.replace(\".\", \"_\"));\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach((column) => {\n            const columnName = DriverUtils.buildAlias(this.connection.driver, undefined, column.referencedColumn.entityMetadata.name +\n                \"_\" +\n                column.referencedColumn.propertyPath.replace(\".\", \"_\"));\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        let condition = \"\";\n        if (relation.joinColumns.length === 1) {\n            const values = entities.map((entity) => relation.joinColumns[0].referencedColumn.getEntityValue(entity));\n            const areAllNumbers = values.every((value) => typeof value === \"number\");\n            if (areAllNumbers) {\n                condition = `${mainAlias}.${relation.joinColumns[0].propertyPath} IN (${values.join(\", \")})`;\n            }\n            else {\n                qb.setParameter(\"values\", values);\n                condition =\n                    mainAlias +\n                        \".\" +\n                        relation.joinColumns[0].propertyPath +\n                        \" IN (:...values)\"; // todo: use ANY for postgres\n            }\n        }\n        else {\n            condition = entities\n                .map((entity, entityIndex) => {\n                return relation.joinColumns\n                    .map((joinColumn, joinColumnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                    qb.setParameter(paramName, joinColumn.referencedColumn.getEntityValue(entity));\n                    return (mainAlias +\n                        \".\" +\n                        joinColumn.propertyPath +\n                        \" = :\" +\n                        paramName);\n                })\n                    .join(\" AND \");\n            })\n                .map((condition) => \"(\" + condition + \")\")\n                .join(\" OR \");\n        }\n        // execute query\n        return qb\n            .from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n}\n\n//# sourceMappingURL=RelationIdLoader.js.map\n","import { RelationIdAttribute } from \"./RelationIdAttribute\";\nexport class RelationIdMetadataToAttributeTransformer {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(expressionMap) {\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    transform() {\n        // by example:\n        // post has relation id:\n        // @RelationId(post => post.categories) categoryIds\n        // category has relation id\n        // @RelationId(category => category.images) imageIds\n        // we load post and join category\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationIds.forEach((relationId) => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        }\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach((join) => {\n            // ensure this join has a metadata, because relation id can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n            join.metadata.relationIds.forEach((relationId) => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    metadataToAttribute(parentAliasName, relationId) {\n        return new RelationIdAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationId.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName, // category.imageIds\n            alias: relationId.alias,\n            queryBuilderFactory: relationId.queryBuilderFactory,\n        });\n    }\n}\n\n//# sourceMappingURL=RelationIdMetadataToAttributeTransformer.js.map\n","export class RelationCountLoader {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryRunner, relationCountAttributes) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.relationCountAttributes = relationCountAttributes;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    async load(rawEntities) {\n        const onlyUnique = (value, index, self) => {\n            return self.indexOf(value) === index;\n        };\n        const promises = this.relationCountAttributes.map(async (relationCountAttr) => {\n            if (relationCountAttr.relation.isOneToMany) {\n                // example: Post and Category\n                // loadRelationCountAndMap(\"post.categoryCount\", \"post.categories\")\n                // we expect it to load array of post ids\n                // todo(dima): fix issues wit multiple primary keys and remove joinColumns[0]\n                const relation = relationCountAttr.relation; // \"category.posts\"\n                const inverseRelation = relation.inverseRelation; // \"post.category\"\n                const referenceColumnName = inverseRelation.joinColumns[0].referencedColumn\n                    .propertyName; // post id\n                const inverseSideTable = relation.inverseEntityMetadata.target; // Post\n                const inverseSideTableName = relation.inverseEntityMetadata.tableName; // post\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\n                const inverseSidePropertyName = inverseRelation.propertyName; // \"category\" from \"post.category\"\n                let referenceColumnValues = rawEntities\n                    .map((rawEntity) => rawEntity[relationCountAttr.parentAlias +\n                    \"_\" +\n                    referenceColumnName])\n                    .filter((value) => !!value);\n                referenceColumnValues =\n                    referenceColumnValues.filter(onlyUnique);\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return {\n                        relationCountAttribute: relationCountAttr,\n                        results: [],\n                    };\n                // generate query:\n                // SELECT category.post as parentId, COUNT(*) AS cnt FROM category category WHERE category.post IN (1, 2) GROUP BY category.post\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\n                    .addSelect(\"COUNT(*)\", \"cnt\")\n                    .from(inverseSideTable, inverseSideTableAlias)\n                    .where(inverseSideTableAlias +\n                    \".\" +\n                    inverseSidePropertyName +\n                    \" IN (:...ids)\")\n                    .addGroupBy(inverseSideTableAlias +\n                    \".\" +\n                    inverseSidePropertyName)\n                    .setParameter(\"ids\", referenceColumnValues);\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany(),\n                };\n            }\n            else {\n                // example: Post and Category\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\n                // we expect it to load array of post ids\n                let joinTableColumnName;\n                let inverseJoinColumnName;\n                let firstJunctionColumn;\n                let secondJunctionColumn;\n                if (relationCountAttr.relation.isOwning) {\n                    // todo fix joinColumns[0] and inverseJoinColumns[0].\n                    joinTableColumnName =\n                        relationCountAttr.relation.joinColumns[0]\n                            .referencedColumn.databaseName;\n                    inverseJoinColumnName =\n                        relationCountAttr.relation.inverseJoinColumns[0]\n                            .referencedColumn.databaseName;\n                    firstJunctionColumn =\n                        relationCountAttr.relation.junctionEntityMetadata\n                            .columns[0];\n                    secondJunctionColumn =\n                        relationCountAttr.relation.junctionEntityMetadata\n                            .columns[1];\n                }\n                else {\n                    joinTableColumnName =\n                        relationCountAttr.relation.inverseRelation\n                            .inverseJoinColumns[0].referencedColumn\n                            .databaseName;\n                    inverseJoinColumnName =\n                        relationCountAttr.relation.inverseRelation\n                            .joinColumns[0].referencedColumn.databaseName;\n                    firstJunctionColumn =\n                        relationCountAttr.relation.junctionEntityMetadata\n                            .columns[1];\n                    secondJunctionColumn =\n                        relationCountAttr.relation.junctionEntityMetadata\n                            .columns[0];\n                }\n                let referenceColumnValues = rawEntities\n                    .map((rawEntity) => rawEntity[relationCountAttr.parentAlias +\n                    \"_\" +\n                    joinTableColumnName])\n                    .filter((value) => !!value);\n                referenceColumnValues =\n                    referenceColumnValues.filter(onlyUnique);\n                // ensure we won't perform redundant queries for joined data which was not found in selection\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                if (referenceColumnValues.length === 0)\n                    return {\n                        relationCountAttribute: relationCountAttr,\n                        results: [],\n                    };\n                const junctionAlias = relationCountAttr.junctionAlias;\n                const inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                const junctionTableName = relationCountAttr.relation.junctionEntityMetadata\n                    .tableName;\n                const condition = junctionAlias +\n                    \".\" +\n                    firstJunctionColumn.propertyName +\n                    \" IN (\" +\n                    referenceColumnValues.map((vals) => isNaN(vals) ? \"'\" + vals + \"'\" : vals) +\n                    \")\" +\n                    \" AND \" +\n                    junctionAlias +\n                    \".\" +\n                    secondJunctionColumn.propertyName +\n                    \" = \" +\n                    inverseSideTableAlias +\n                    \".\" +\n                    inverseJoinColumnName;\n                const qb = this.connection.createQueryBuilder(this.queryRunner);\n                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\n                    .addSelect(\"COUNT(\" +\n                    qb.escape(inverseSideTableAlias) +\n                    \".\" +\n                    qb.escape(inverseJoinColumnName) +\n                    \")\", \"cnt\")\n                    .from(inverseSideTableName, inverseSideTableAlias)\n                    .innerJoin(junctionTableName, junctionAlias, condition)\n                    .addGroupBy(junctionAlias +\n                    \".\" +\n                    firstJunctionColumn.propertyName);\n                // apply condition (custom query builder factory)\n                if (relationCountAttr.queryBuilderFactory)\n                    relationCountAttr.queryBuilderFactory(qb);\n                return {\n                    relationCountAttribute: relationCountAttr,\n                    results: await qb.getRawMany(),\n                };\n            }\n        });\n        return Promise.all(promises);\n    }\n}\n\n//# sourceMappingURL=RelationCountLoader.js.map\n","import { RelationCountAttribute } from \"./RelationCountAttribute\";\nexport class RelationCountMetadataToAttributeTransformer {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(expressionMap) {\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    transform() {\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach((relationCount) => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        }\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach((join) => {\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n            join.metadata.relationCounts.forEach((relationCount) => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationCount);\n                this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    metadataToAttribute(parentAliasName, relationCount) {\n        return new RelationCountAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName, // category.imageIds\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory,\n        });\n    }\n}\n\n//# sourceMappingURL=RelationCountMetadataToAttributeTransformer.js.map\n","import { FindRelationsNotFoundError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { EntityPropertyNotFoundError } from \"../error\";\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions(obj) {\n        const possibleOptions = obj;\n        return (possibleOptions &&\n            (Array.isArray(possibleOptions.select) ||\n                Array.isArray(possibleOptions.relations) ||\n                typeof possibleOptions.select === \"object\" ||\n                typeof possibleOptions.relations === \"object\" ||\n                typeof possibleOptions.where === \"object\" ||\n                // typeof possibleOptions.where === \"string\" ||\n                typeof possibleOptions.join === \"object\" ||\n                typeof possibleOptions.order === \"object\" ||\n                typeof possibleOptions.cache === \"object\" ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                typeof possibleOptions.comment === \"string\" ||\n                typeof possibleOptions.lock === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                typeof possibleOptions.withDeleted === \"boolean\" ||\n                typeof possibleOptions.relationLoadStrategy === \"string\" ||\n                typeof possibleOptions.transaction === \"boolean\"));\n    }\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions(obj) {\n        const possibleOptions = obj;\n        return (possibleOptions &&\n            (this.isFindOneOptions(possibleOptions) ||\n                typeof possibleOptions.skip ===\n                    \"number\" ||\n                typeof possibleOptions.take ===\n                    \"number\" ||\n                typeof possibleOptions.skip ===\n                    \"string\" ||\n                typeof possibleOptions.take ===\n                    \"string\"));\n    }\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object) {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias;\n        return undefined;\n    }\n    /**\n     * Applies give find many options to the given query builder.\n\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }*/\n    /**\n     * Applies give find options to the given query builder.\n\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (options.transaction === true) {\n            qb.expressionMap.useTransaction = true;\n        }\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.comment) {\n            qb.comment(options.comment);\n        }\n\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.hasColumnWithPropertyPath(`${select}`))\n                    throw new TypeORMError(`${select} column was not found in the ${metadata.name} entity.`);\n\n                const columns = metadata.findColumnsWithPropertyPath(`${select}`);\n\n                for (const column of columns) {\n                    qb.addSelect(qb.alias + \".\" + column.propertyPath);\n                }\n            });\n        }\n\n        if (options.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations];\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version);\n            } else if (\n                options.lock.mode === \"pessimistic_read\" ||\n                options.lock.mode === \"pessimistic_write\" ||\n                options.lock.mode === \"dirty_read\" ||\n                options.lock.mode === \"pessimistic_partial_write\" ||\n                options.lock.mode === \"pessimistic_write_or_fail\" ||\n                options.lock.mode === \"for_no_key_update\" ||\n                options.lock.mode === \"for_key_share\"\n            ) {\n                const tableNames = options.lock.tables ? options.lock.tables.map((table) => {\n                    const tableAlias = qb.expressionMap.aliases.find((alias) => {\n                        return alias.metadata.tableNameWithoutPrefix === table;\n                    });\n                    if (!tableAlias) {\n                        throw new TypeORMError(`\"${table}\" is not part of this query`);\n                    }\n                    return qb.escape(tableAlias.name);\n                }) : undefined;\n                qb.setLock(options.lock.mode, undefined, tableNames);\n            }\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        return qb;\n    }*/\n    static applyOptionsToTreeQueryBuilder(qb, options) {\n        if (options?.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations];\n            FindOptionsUtils.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias.name, qb.expressionMap.mainAlias.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n        return qb;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    static applyRelationsRecursively(qb, allRelations, alias, metadata, prefix) {\n        // find all relations that match given prefix\n        let matchedBaseRelations = [];\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\");\n            matchedBaseRelations = allRelations\n                .filter((relation) => relation.match(regexp))\n                .map((relation) => metadata.findRelationWithPropertyPath(relation.replace(regexp, \"\")))\n                .filter((entity) => entity);\n        }\n        else {\n            matchedBaseRelations = allRelations\n                .map((relation) => metadata.findRelationWithPropertyPath(relation))\n                .filter((entity) => entity);\n        }\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias = DriverUtils.buildAlias(qb.connection.driver, { joiner: \"__\" }, alias, relation.propertyPath);\n            // add a join for the found relation\n            const selection = alias + \".\" + relation.propertyPath;\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                qb.concatRelationMetadata(relation);\n            }\n            else {\n                qb.leftJoinAndSelect(selection, relationAlias);\n            }\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(allRelations.indexOf(prefix\n                ? prefix + \".\" + relation.propertyPath\n                : relation.propertyPath), 1);\n            // try to find sub-relations\n            let relationMetadata;\n            let relationName;\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                relationMetadata = relation.inverseEntityMetadata;\n                relationName = relationAlias;\n            }\n            else {\n                const join = qb.expressionMap.joinAttributes.find((join) => join.entityOrProperty === selection);\n                relationMetadata = join.metadata;\n                relationName = join.alias.name;\n            }\n            if (!relationName || !relationMetadata) {\n                throw new EntityPropertyNotFoundError(relation.propertyPath, metadata);\n            }\n            this.applyRelationsRecursively(qb, allRelations, relationName, relationMetadata, prefix\n                ? prefix + \".\" + relation.propertyPath\n                : relation.propertyPath);\n            // join the eager relations of the found relation\n            // Only supported for \"join\" relationLoadStrategy\n            if (qb.expressionMap.relationLoadStrategy === \"join\") {\n                const relMetadata = metadata.relations.find((metadata) => metadata.propertyName === relation.propertyPath);\n                if (relMetadata) {\n                    this.joinEagerRelations(qb, relationAlias, relMetadata.inverseEntityMetadata);\n                }\n            }\n        });\n    }\n    static joinEagerRelations(qb, alias, metadata) {\n        metadata.eagerRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias = DriverUtils.buildAlias(qb.connection.driver, { joiner: \"__\" }, alias, relation.propertyName);\n            // add a join for the relation\n            // Checking whether the relation wasn't joined yet.\n            let addJoin = true;\n            // TODO: Review this validation\n            for (const join of qb.expressionMap.joinAttributes) {\n                if (join.condition !== undefined ||\n                    join.mapToProperty !== undefined ||\n                    join.isMappingMany !== undefined ||\n                    join.direction !== \"LEFT\" ||\n                    join.entityOrProperty !==\n                        `${alias}.${relation.propertyPath}`) {\n                    continue;\n                }\n                addJoin = false;\n                relationAlias = join.alias.name;\n                break;\n            }\n            const joinAlreadyAdded = Boolean(qb.expressionMap.joinAttributes.find((joinAttribute) => joinAttribute.alias.name === relationAlias));\n            if (addJoin && !joinAlreadyAdded) {\n                qb.leftJoin(alias + \".\" + relation.propertyPath, relationAlias);\n            }\n            // Checking whether the relation wasn't selected yet.\n            // This check shall be after the join check to detect relationAlias.\n            let addSelect = true;\n            for (const select of qb.expressionMap.selects) {\n                if (select.aliasName !== undefined ||\n                    select.virtual !== undefined ||\n                    select.selection !== relationAlias) {\n                    continue;\n                }\n                addSelect = false;\n                break;\n            }\n            if (addSelect) {\n                qb.addSelect(relationAlias);\n            }\n            // (recursive) join the eager relations\n            this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\n        });\n    }\n}\n\n//# sourceMappingURL=FindOptionsUtils.js.map\n","import { RawSqlResultsToEntityTransformer } from \"./transformer/RawSqlResultsToEntityTransformer\";\nimport { PessimisticLockTransactionRequiredError } from \"../error/PessimisticLockTransactionRequiredError\";\nimport { NoVersionOrUpdateDateColumnError } from \"../error/NoVersionOrUpdateDateColumnError\";\nimport { OptimisticLockVersionMismatchError } from \"../error/OptimisticLockVersionMismatchError\";\nimport { OptimisticLockCanNotBeUsedError } from \"../error/OptimisticLockCanNotBeUsedError\";\nimport { JoinAttribute } from \"./JoinAttribute\";\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\nimport { RelationIdLoader } from \"./relation-id/RelationIdLoader\";\nimport { RelationIdLoader as QueryStrategyRelationIdLoader } from \"./RelationIdLoader\";\nimport { RelationIdMetadataToAttributeTransformer } from \"./relation-id/RelationIdMetadataToAttributeTransformer\";\nimport { RelationCountLoader } from \"./relation-count/RelationCountLoader\";\nimport { RelationCountMetadataToAttributeTransformer } from \"./relation-count/RelationCountMetadataToAttributeTransformer\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { LockNotSupportedOnGivenDriverError } from \"../error/LockNotSupportedOnGivenDriverError\";\nimport { OffsetWithoutLimitNotSupportedError } from \"../error/OffsetWithoutLimitNotSupportedError\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\";\nimport { TypeORMError } from \"../error\";\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nimport { FindOperator } from \"../find-options/FindOperator\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SelectQueryBuilder extends QueryBuilder {\n    constructor() {\n        super(...arguments);\n        this[\"@instanceof\"] = Symbol.for(\"SelectQueryBuilder\");\n        this.findOptions = {};\n        this.selects = [];\n        this.joins = [];\n        this.conditions = \"\";\n        this.orderBys = [];\n        this.relationMetadatas = [];\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        let sql = this.createComment();\n        sql += this.createCteExpression();\n        sql += this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitOffsetExpression();\n        sql += this.createLockExpression();\n        sql = sql.trim();\n        if (this.expressionMap.subQuery)\n            sql = \"(\" + sql + \")\";\n        return this.replacePropertyNamesForTheWholeQuery(sql);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    setFindOptions(findOptions) {\n        this.findOptions = findOptions;\n        this.applyFindOptions();\n        return this;\n    }\n    /**\n     * Creates a subquery - query that can be used inside other queries.\n     */\n    subQuery() {\n        const qb = this.createQueryBuilder();\n        qb.expressionMap.subQuery = true;\n        qb.parentQueryBuilder = this;\n        return qb;\n    }\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection, selectionAliasName) {\n        this.expressionMap.queryType = \"select\";\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map((selection) => ({\n                selection: selection,\n            }));\n        }\n        else if (typeof selection === \"function\") {\n            const subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({\n                selection: subQueryBuilder.getQuery(),\n                aliasName: selectionAliasName,\n            });\n        }\n        else if (selection) {\n            this.expressionMap.selects = [\n                { selection: selection, aliasName: selectionAliasName },\n            ];\n        }\n        return this;\n    }\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection, selectionAliasName) {\n        if (!selection)\n            return this;\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = this.expressionMap.selects.concat(selection.map((selection) => ({ selection: selection })));\n        }\n        else if (typeof selection === \"function\") {\n            const subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({\n                selection: subQueryBuilder.getQuery(),\n                aliasName: selectionAliasName,\n            });\n        }\n        else if (selection) {\n            this.expressionMap.selects.push({\n                selection: selection,\n                aliasName: selectionAliasName,\n            });\n        }\n        return this;\n    }\n    /**\n     * Set max execution time.\n     * @param milliseconds\n     */\n    maxExecutionTime(milliseconds) {\n        this.expressionMap.maxExecutionTime = milliseconds;\n        return this;\n    }\n    /**\n     * Sets whether the selection is DISTINCT.\n     */\n    distinct(distinct = true) {\n        this.expressionMap.selectDistinct = distinct;\n        return this;\n    }\n    /**\n     * Sets the distinct on clause for Postgres.\n     */\n    distinctOn(distinctOn) {\n        this.expressionMap.selectDistinctOn = distinctOn;\n        return this;\n    }\n    fromDummy() {\n        return this.from(this.connection.driver.dummyTableName ??\n            \"(SELECT 1 AS dummy_column)\", \"dummy_table\");\n    }\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    from(entityTarget, aliasName) {\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    }\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    addFrom(entityTarget, aliasName) {\n        const alias = this.createFromAlias(entityTarget, aliasName);\n        if (!this.expressionMap.mainAlias)\n            this.expressionMap.setMainAlias(alias);\n        return this;\n    }\n    /**\n     * INNER JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entityOrProperty, alias, condition, parameters) {\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n    /**\n     * LEFT JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entityOrProperty, alias, condition, parameters) {\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n    /**\n     * INNER JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entityOrProperty, alias, condition, parameters) {\n        this.addSelect(alias);\n        this.innerJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n    /**\n     * LEFT JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entityOrProperty, alias, condition, parameters) {\n        this.addSelect(alias);\n        this.leftJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    }\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty, entityOrProperty, alias, condition, parameters) {\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    }\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty, entityOrProperty, alias, condition, parameters, mapAsEntity) {\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, false, mapAsEntity);\n        return this;\n    }\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty, entityOrProperty, alias, condition, parameters) {\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    }\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty, entityOrProperty, alias, condition, parameters, mapAsEntity) {\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, false, mapAsEntity);\n        return this;\n    }\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationIdAndMap(mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {\n        const relationIdAttribute = new RelationIdAttribute(this.expressionMap);\n        relationIdAttribute.mapToProperty = mapToProperty;\n        relationIdAttribute.relationName = relationName;\n        if (typeof aliasNameOrOptions === \"string\")\n            relationIdAttribute.alias = aliasNameOrOptions;\n        if (typeof aliasNameOrOptions === \"object\" &&\n            aliasNameOrOptions.disableMixedMap)\n            relationIdAttribute.disableMixedMap = true;\n        relationIdAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationIdAttributes.push(relationIdAttribute);\n        if (relationIdAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationIdAttribute.junctionAlias,\n                metadata: relationIdAttribute.relation.junctionEntityMetadata,\n            });\n        }\n        return this;\n    }\n    /**\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    loadRelationCountAndMap(mapToProperty, relationName, aliasName, queryBuilderFactory) {\n        const relationCountAttribute = new RelationCountAttribute(this.expressionMap);\n        relationCountAttribute.mapToProperty = mapToProperty;\n        relationCountAttribute.relationName = relationName;\n        relationCountAttribute.alias = aliasName;\n        relationCountAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationCountAttributes.push(relationCountAttribute);\n        this.expressionMap.createAlias({\n            type: \"other\",\n            name: relationCountAttribute.junctionAlias,\n        });\n        if (relationCountAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationCountAttribute.junctionAlias,\n                metadata: relationCountAttribute.relation.junctionEntityMetadata,\n            });\n        }\n        return this;\n    }\n    /**\n     * Loads all relation ids for all relations of the selected entity.\n     * All relation ids will be mapped to relation property themself.\n     * If array of strings is given then loads only relation ids of the given properties.\n     */\n    loadAllRelationIds(options) {\n        // todo: add skip relations\n        this.expressionMap.mainAlias.metadata.relations.forEach((relation) => {\n            if (options !== undefined &&\n                options.relations !== undefined &&\n                options.relations.indexOf(relation.propertyPath) === -1)\n                return;\n            this.loadRelationIdAndMap(this.expressionMap.mainAlias.name +\n                \".\" +\n                relation.propertyPath, this.expressionMap.mainAlias.name +\n                \".\" +\n                relation.propertyPath, options);\n        });\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where);\n        if (condition) {\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ];\n        }\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Sets a new where EXISTS clause\n     */\n    whereExists(subQuery) {\n        return this.where(...this.getExistsCondition(subQuery));\n    }\n    /**\n     * Adds a new AND where EXISTS clause\n     */\n    andWhereExists(subQuery) {\n        return this.andWhere(...this.getExistsCondition(subQuery));\n    }\n    /**\n     * Adds a new OR where EXISTS clause\n     */\n    orWhereExists(subQuery) {\n        return this.orWhere(...this.getExistsCondition(subQuery));\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    whereInIds(ids) {\n        return this.where(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    andWhereInIds(ids) {\n        return this.andWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    orWhereInIds(ids) {\n        return this.orWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Sets HAVING condition in the query builder.\n     * If you had previously HAVING expression defined,\n     * calling this function will override previously set HAVING conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    having(having, parameters) {\n        this.expressionMap.havings.push({ type: \"simple\", condition: having });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andHaving(having, parameters) {\n        this.expressionMap.havings.push({ type: \"and\", condition: having });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new OR HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orHaving(having, parameters) {\n        this.expressionMap.havings.push({ type: \"or\", condition: having });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(groupBy) {\n        if (groupBy) {\n            this.expressionMap.groupBys = [groupBy];\n        }\n        else {\n            this.expressionMap.groupBys = [];\n        }\n        return this;\n    }\n    /**\n     * Adds GROUP BY condition in the query builder.\n     */\n    addGroupBy(groupBy) {\n        this.expressionMap.groupBys.push(groupBy);\n        return this;\n    }\n    /**\n     * Enables time travelling for the current query (only supported by cockroach currently)\n     */\n    timeTravelQuery(timeTravelFn) {\n        if (this.connection.driver.options.type === \"cockroachdb\") {\n            if (timeTravelFn === undefined) {\n                this.expressionMap.timeTravel = \"follower_read_timestamp()\";\n            }\n            else {\n                this.expressionMap.timeTravel = timeTravelFn;\n            }\n        }\n        return this;\n    }\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort, order = \"ASC\", nulls) {\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new TypeORMError(`SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.`);\n        if (nulls !== undefined &&\n            nulls !== \"NULLS FIRST\" &&\n            nulls !== \"NULLS LAST\")\n            throw new TypeORMError(`SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.`);\n        if (sort) {\n            if (typeof sort === \"object\") {\n                this.expressionMap.orderBys = sort;\n            }\n            else {\n                if (nulls) {\n                    this.expressionMap.orderBys = {\n                        [sort]: { order, nulls },\n                    };\n                }\n                else {\n                    this.expressionMap.orderBys = { [sort]: order };\n                }\n            }\n        }\n        else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort, order = \"ASC\", nulls) {\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new TypeORMError(`SelectQueryBuilder.addOrderBy \"order\" can accept only \"ASC\" and \"DESC\" values.`);\n        if (nulls !== undefined &&\n            nulls !== \"NULLS FIRST\" &&\n            nulls !== \"NULLS LAST\")\n            throw new TypeORMError(`SelectQueryBuilder.addOrderBy \"nulls\" can accept only \"NULLS FIRST\" and \"NULLS LAST\" values.`);\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        }\n        else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use the take method instead.\n     */\n    limit(limit) {\n        this.expressionMap.limit = this.normalizeNumber(limit);\n        if (this.expressionMap.limit !== undefined &&\n            isNaN(this.expressionMap.limit))\n            throw new TypeORMError(`Provided \"limit\" value is not a number. Please provide a numeric value.`);\n        return this;\n    }\n    /**\n     * Sets OFFSET - selection offset.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use the skip method instead.\n     */\n    offset(offset) {\n        this.expressionMap.offset = this.normalizeNumber(offset);\n        if (this.expressionMap.offset !== undefined &&\n            isNaN(this.expressionMap.offset))\n            throw new TypeORMError(`Provided \"offset\" value is not a number. Please provide a numeric value.`);\n        return this;\n    }\n    /**\n     * Sets maximal number of entities to take.\n     */\n    take(take) {\n        this.expressionMap.take = this.normalizeNumber(take);\n        if (this.expressionMap.take !== undefined &&\n            isNaN(this.expressionMap.take))\n            throw new TypeORMError(`Provided \"take\" value is not a number. Please provide a numeric value.`);\n        return this;\n    }\n    /**\n     * Sets number of entities to skip.\n     */\n    skip(skip) {\n        this.expressionMap.skip = this.normalizeNumber(skip);\n        if (this.expressionMap.skip !== undefined &&\n            isNaN(this.expressionMap.skip))\n            throw new TypeORMError(`Provided \"skip\" value is not a number. Please provide a numeric value.`);\n        return this;\n    }\n    /**\n     * Set certain index to be used by the query.\n     *\n     * @param index Name of index to be used.\n     */\n    useIndex(index) {\n        this.expressionMap.useIndex = index;\n        return this;\n    }\n    /**\n     * Sets locking mode.\n     */\n    setLock(lockMode, lockVersion, lockTables) {\n        this.expressionMap.lockMode = lockMode;\n        this.expressionMap.lockVersion = lockVersion;\n        this.expressionMap.lockTables = lockTables;\n        return this;\n    }\n    /**\n     * Sets lock handling by adding NO WAIT or SKIP LOCKED.\n     */\n    setOnLocked(onLocked) {\n        this.expressionMap.onLocked = onLocked;\n        return this;\n    }\n    /**\n     * Disables the global condition of \"non-deleted\" for the entity with delete date columns.\n     */\n    withDeleted() {\n        this.expressionMap.withDeleted = true;\n        return this;\n    }\n    /**\n     * Gets first raw result returned by execution of generated query builder sql.\n     */\n    async getRawOne() {\n        return (await this.getRawMany())[0];\n    }\n    /**\n     * Gets all raw results returned by execution of generated query builder sql.\n     */\n    async getRawMany() {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n        this.expressionMap.queryEntity = false;\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            const results = await this.loadRawResults(queryRunner);\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            return results;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    async getRawAndEntities() {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            this.expressionMap.queryEntity = true;\n            const results = await this.executeEntitiesAndRawResults(queryRunner);\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            return results;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner)\n                // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n    /**\n     * Gets single entity returned by execution of generated query builder sql.\n     */\n    async getOne() {\n        const results = await this.getRawAndEntities();\n        const result = results.entities[0];\n        if (result &&\n            this.expressionMap.lockMode === \"optimistic\" &&\n            this.expressionMap.lockVersion) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            if (this.expressionMap.lockVersion instanceof Date) {\n                const actualVersion = metadata.updateDateColumn.getEntityValue(result); // what if columns arent set?\n                if (actualVersion.getTime() !==\n                    this.expressionMap.lockVersion.getTime())\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n            }\n            else {\n                const actualVersion = metadata.versionColumn.getEntityValue(result); // what if columns arent set?\n                if (actualVersion !== this.expressionMap.lockVersion)\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n            }\n        }\n        if (result === undefined) {\n            return null;\n        }\n        return result;\n    }\n    /**\n     * Gets the first entity returned by execution of generated query builder sql or rejects the returned promise on error.\n     */\n    async getOneOrFail() {\n        const entity = await this.getOne();\n        if (!entity) {\n            throw new EntityNotFoundError(this.expressionMap.mainAlias.target, this.expressionMap.parameters);\n        }\n        return entity;\n    }\n    /**\n     * Gets entities returned by execution of generated query builder sql.\n     */\n    async getMany() {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n        const results = await this.getRawAndEntities();\n        return results.entities;\n    }\n    /**\n     * Gets count - number of entities selected by sql generated by this query builder.\n     * Count excludes all limitations set by offset, limit, skip, and take.\n     */\n    async getCount() {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            this.expressionMap.queryEntity = false;\n            const results = await this.executeCountQuery(queryRunner);\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            return results;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner)\n                // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n    /**\n     * Gets exists\n     * Returns whether any rows exists matching current query.\n     */\n    async getExists() {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            this.expressionMap.queryEntity = false;\n            const results = await this.executeExistsQuery(queryRunner);\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            return results;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner)\n                // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n    /**\n     * Executes built SQL query and returns entities and overall entities count (without limitation).\n     * This method is useful to build pagination.\n     */\n    async getManyAndCount() {\n        if (this.expressionMap.lockMode === \"optimistic\")\n            throw new OptimisticLockCanNotBeUsedError();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            this.expressionMap.queryEntity = true;\n            const entitiesAndRaw = await this.executeEntitiesAndRawResults(queryRunner);\n            this.expressionMap.queryEntity = false;\n            const cacheId = this.expressionMap.cacheId;\n            // Creates a new cacheId for the count query, or it will retreive the above query results\n            // and count will return 0.\n            this.expressionMap.cacheId = cacheId ? `${cacheId}-count` : cacheId;\n            const count = await this.executeCountQuery(queryRunner);\n            const results = [entitiesAndRaw.entities, count];\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            return results;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner)\n                // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n    /**\n     * Executes built SQL query and returns raw data stream.\n     */\n    async stream() {\n        this.expressionMap.queryEntity = false;\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            const releaseFn = () => {\n                if (queryRunner !== this.queryRunner)\n                    // means we created our own query runner\n                    return queryRunner.release();\n                return;\n            };\n            const results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);\n            // close transaction if we started it\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n            }\n            return results;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n    }\n    /**\n     * Enables or disables query result caching.\n     */\n    cache(enabledOrMillisecondsOrId, maybeMilliseconds) {\n        if (typeof enabledOrMillisecondsOrId === \"boolean\") {\n            this.expressionMap.cache = enabledOrMillisecondsOrId;\n        }\n        else if (typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheDuration = enabledOrMillisecondsOrId;\n        }\n        else if (typeof enabledOrMillisecondsOrId === \"string\" ||\n            typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheId = enabledOrMillisecondsOrId;\n        }\n        if (maybeMilliseconds) {\n            this.expressionMap.cacheDuration = maybeMilliseconds;\n        }\n        return this;\n    }\n    /**\n     * Sets extra options that can be used to configure how query builder works.\n     */\n    setOption(option) {\n        this.expressionMap.options.push(option);\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    join(direction, entityOrProperty, aliasName, condition, parameters, mapToProperty, isMappingMany, mapAsEntity) {\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        const joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\n        joinAttribute.direction = direction;\n        joinAttribute.mapAsEntity = mapAsEntity;\n        joinAttribute.mapToProperty = mapToProperty;\n        joinAttribute.isMappingMany = isMappingMany;\n        joinAttribute.entityOrProperty = entityOrProperty; // relationName\n        joinAttribute.condition = condition; // joinInverseSideCondition\n        // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + \"_\" + destinationTableAlias : destinationTableAlias + \"_\" + parentAlias;\n        this.expressionMap.joinAttributes.push(joinAttribute);\n        const joinAttributeMetadata = joinAttribute.metadata;\n        if (joinAttributeMetadata) {\n            if (joinAttributeMetadata.deleteDateColumn &&\n                !this.expressionMap.withDeleted) {\n                const conditionDeleteColumn = `${aliasName}.${joinAttributeMetadata.deleteDateColumn.propertyName} IS NULL`;\n                joinAttribute.condition = joinAttribute.condition\n                    ? ` ${joinAttribute.condition} AND ${conditionDeleteColumn}`\n                    : `${conditionDeleteColumn}`;\n            }\n            // todo: find and set metadata right there?\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                metadata: joinAttributeMetadata,\n            });\n            if (joinAttribute.relation &&\n                joinAttribute.relation.junctionEntityMetadata) {\n                this.expressionMap.createAlias({\n                    type: \"join\",\n                    name: joinAttribute.junctionAlias,\n                    metadata: joinAttribute.relation.junctionEntityMetadata,\n                });\n            }\n        }\n        else {\n            let subQuery = \"\";\n            if (typeof entityOrProperty === \"function\") {\n                const subQueryBuilder = entityOrProperty(this.subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n            }\n            else {\n                subQuery = entityOrProperty;\n            }\n            const isSubQuery = typeof entityOrProperty === \"function\" ||\n                (entityOrProperty.substr(0, 1) === \"(\" &&\n                    entityOrProperty.substr(-1) === \")\");\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                tablePath: isSubQuery === false\n                    ? entityOrProperty\n                    : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    }\n    /**\n     * Creates \"SELECT FROM\" part of SQL query.\n     */\n    createSelectExpression() {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(\"Cannot build query because main alias is not set (call qb#from method)\");\n        // todo throw exception if selects or from is missing\n        const allSelects = [];\n        const excludedSelects = [];\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            allSelects.push(...this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));\n            excludedSelects.push(...this.findEntityColumnSelects(this.expressionMap.mainAlias.name, metadata));\n        }\n        // add selects from joins\n        this.expressionMap.joinAttributes.forEach((join) => {\n            if (join.metadata) {\n                allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias.name, join.metadata));\n                excludedSelects.push(...this.findEntityColumnSelects(join.alias.name, join.metadata));\n            }\n            else {\n                const hasMainAlias = this.expressionMap.selects.some((select) => select.selection === join.alias.name);\n                if (hasMainAlias) {\n                    allSelects.push({\n                        selection: this.escape(join.alias.name) + \".*\",\n                    });\n                    const excludedSelect = this.expressionMap.selects.find((select) => select.selection === join.alias.name);\n                    excludedSelects.push(excludedSelect);\n                }\n            }\n        });\n        // add all other selects\n        this.expressionMap.selects\n            .filter((select) => excludedSelects.indexOf(select) === -1)\n            .forEach((select) => allSelects.push({\n            selection: this.replacePropertyNames(select.selection),\n            aliasName: select.aliasName,\n        }));\n        // if still selection is empty, then simply set it to all (*)\n        if (allSelects.length === 0)\n            allSelects.push({ selection: \"*\" });\n        // Use certain index\n        let useIndex = \"\";\n        if (this.expressionMap.useIndex) {\n            if (DriverUtils.isMySQLFamily(this.connection.driver)) {\n                useIndex = ` USE INDEX (${this.expressionMap.useIndex})`;\n            }\n        }\n        // create a selection query\n        const froms = this.expressionMap.aliases\n            .filter((alias) => alias.type === \"from\" &&\n            (alias.tablePath || alias.subQuery))\n            .map((alias) => {\n            if (alias.subQuery)\n                return alias.subQuery + \" \" + this.escape(alias.name);\n            return (this.getTableName(alias.tablePath) +\n                \" \" +\n                this.escape(alias.name));\n        });\n        const select = this.createSelectDistinctExpression();\n        const selection = allSelects\n            .map((select) => select.selection +\n            (select.aliasName\n                ? \" AS \" + this.escape(select.aliasName)\n                : \"\"))\n            .join(\", \");\n        return (select +\n            selection +\n            \" FROM \" +\n            froms.join(\", \") +\n            this.createTableLockExpression() +\n            useIndex);\n    }\n    /**\n     * Creates select | select distinct part of SQL query.\n     */\n    createSelectDistinctExpression() {\n        const { selectDistinct, selectDistinctOn, maxExecutionTime } = this.expressionMap;\n        const { driver } = this.connection;\n        let select = \"SELECT \";\n        if (maxExecutionTime > 0) {\n            if (DriverUtils.isMySQLFamily(driver)) {\n                select += `/*+ MAX_EXECUTION_TIME(${this.expressionMap.maxExecutionTime}) */ `;\n            }\n        }\n        if (DriverUtils.isPostgresFamily(driver) &&\n            selectDistinctOn.length > 0) {\n            const selectDistinctOnMap = selectDistinctOn\n                .map((on) => this.replacePropertyNames(on))\n                .join(\", \");\n            select = `SELECT DISTINCT ON (${selectDistinctOnMap}) `;\n        }\n        else if (selectDistinct) {\n            select = \"SELECT DISTINCT \";\n        }\n        return select;\n    }\n    /**\n     * Creates \"JOIN\" part of SQL query.\n     */\n    createJoinExpression() {\n        // examples:\n        // select from owning side\n        // qb.select(\"post\")\n        //     .leftJoinAndSelect(\"post.category\", \"category\");\n        // select from non-owning side\n        // qb.select(\"category\")\n        //     .leftJoinAndSelect(\"category.post\", \"post\");\n        const joins = this.expressionMap.joinAttributes.map((joinAttr) => {\n            const relation = joinAttr.relation;\n            const destinationTableName = joinAttr.tablePath;\n            const destinationTableAlias = joinAttr.alias.name;\n            let appendedCondition = joinAttr.condition\n                ? \" AND (\" + joinAttr.condition + \")\"\n                : \"\";\n            const parentAlias = joinAttr.parentAlias;\n            // if join was build without relation (e.g. without \"post.category\") then it means that we have direct\n            // table to join, without junction table involved. This means we simply join direct table.\n            if (!parentAlias || !relation) {\n                const destinationJoin = joinAttr.alias.subQuery\n                    ? joinAttr.alias.subQuery\n                    : this.getTableName(destinationTableName);\n                return (\" \" +\n                    joinAttr.direction +\n                    \" JOIN \" +\n                    destinationJoin +\n                    \" \" +\n                    this.escape(destinationTableAlias) +\n                    this.createTableLockExpression() +\n                    (joinAttr.condition\n                        ? \" ON \" + this.replacePropertyNames(joinAttr.condition)\n                        : \"\"));\n            }\n            // if real entity relation is involved\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\n                // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`\n                const condition = relation.joinColumns\n                    .map((joinColumn) => {\n                    return (destinationTableAlias +\n                        \".\" +\n                        joinColumn.referencedColumn.propertyPath +\n                        \"=\" +\n                        parentAlias +\n                        \".\" +\n                        relation.propertyPath +\n                        \".\" +\n                        joinColumn.referencedColumn.propertyPath);\n                })\n                    .join(\" AND \");\n                return (\" \" +\n                    joinAttr.direction +\n                    \" JOIN \" +\n                    this.getTableName(destinationTableName) +\n                    \" \" +\n                    this.escape(destinationTableAlias) +\n                    this.createTableLockExpression() +\n                    \" ON \" +\n                    this.replacePropertyNames(condition + appendedCondition));\n            }\n            else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`\n                const condition = relation\n                    .inverseRelation.joinColumns.map((joinColumn) => {\n                    if (relation.inverseEntityMetadata.tableType ===\n                        \"entity-child\" &&\n                        relation.inverseEntityMetadata.discriminatorColumn) {\n                        appendedCondition +=\n                            \" AND \" +\n                                destinationTableAlias +\n                                \".\" +\n                                relation.inverseEntityMetadata\n                                    .discriminatorColumn.databaseName +\n                                \"='\" +\n                                relation.inverseEntityMetadata\n                                    .discriminatorValue +\n                                \"'\";\n                    }\n                    return (destinationTableAlias +\n                        \".\" +\n                        relation.inverseRelation.propertyPath +\n                        \".\" +\n                        joinColumn.referencedColumn.propertyPath +\n                        \"=\" +\n                        parentAlias +\n                        \".\" +\n                        joinColumn.referencedColumn.propertyPath);\n                })\n                    .join(\" AND \");\n                if (!condition)\n                    throw new TypeORMError(`Relation ${relation.entityMetadata.name}.${relation.propertyName} does not have join columns.`);\n                return (\" \" +\n                    joinAttr.direction +\n                    \" JOIN \" +\n                    this.getTableName(destinationTableName) +\n                    \" \" +\n                    this.escape(destinationTableAlias) +\n                    this.createTableLockExpression() +\n                    \" ON \" +\n                    this.replacePropertyNames(condition + appendedCondition));\n            }\n            else {\n                // means many-to-many\n                const junctionTableName = relation.junctionEntityMetadata.tablePath;\n                const junctionAlias = joinAttr.junctionAlias;\n                let junctionCondition = \"\", destinationCondition = \"\";\n                if (relation.isOwning) {\n                    junctionCondition = relation.joinColumns\n                        .map((joinColumn) => {\n                        // `post_category`.`postId` = `post`.`id`\n                        return (junctionAlias +\n                            \".\" +\n                            joinColumn.propertyPath +\n                            \"=\" +\n                            parentAlias +\n                            \".\" +\n                            joinColumn.referencedColumn.propertyPath);\n                    })\n                        .join(\" AND \");\n                    destinationCondition = relation.inverseJoinColumns\n                        .map((joinColumn) => {\n                        // `category`.`id` = `post_category`.`categoryId`\n                        return (destinationTableAlias +\n                            \".\" +\n                            joinColumn.referencedColumn.propertyPath +\n                            \"=\" +\n                            junctionAlias +\n                            \".\" +\n                            joinColumn.propertyPath);\n                    })\n                        .join(\" AND \");\n                }\n                else {\n                    junctionCondition = relation\n                        .inverseRelation.inverseJoinColumns.map((joinColumn) => {\n                        // `post_category`.`categoryId` = `category`.`id`\n                        return (junctionAlias +\n                            \".\" +\n                            joinColumn.propertyPath +\n                            \"=\" +\n                            parentAlias +\n                            \".\" +\n                            joinColumn.referencedColumn.propertyPath);\n                    })\n                        .join(\" AND \");\n                    destinationCondition = relation\n                        .inverseRelation.joinColumns.map((joinColumn) => {\n                        // `post`.`id` = `post_category`.`postId`\n                        return (destinationTableAlias +\n                            \".\" +\n                            joinColumn.referencedColumn.propertyPath +\n                            \"=\" +\n                            junctionAlias +\n                            \".\" +\n                            joinColumn.propertyPath);\n                    })\n                        .join(\" AND \");\n                }\n                return (\" \" +\n                    joinAttr.direction +\n                    \" JOIN \" +\n                    this.getTableName(junctionTableName) +\n                    \" \" +\n                    this.escape(junctionAlias) +\n                    this.createTableLockExpression() +\n                    \" ON \" +\n                    this.replacePropertyNames(junctionCondition) +\n                    \" \" +\n                    joinAttr.direction +\n                    \" JOIN \" +\n                    this.getTableName(destinationTableName) +\n                    \" \" +\n                    this.escape(destinationTableAlias) +\n                    this.createTableLockExpression() +\n                    \" ON \" +\n                    this.replacePropertyNames(destinationCondition + appendedCondition));\n            }\n        });\n        return joins.join(\" \");\n    }\n    /**\n     * Creates \"GROUP BY\" part of SQL query.\n     */\n    createGroupByExpression() {\n        if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length)\n            return \"\";\n        return (\" GROUP BY \" +\n            this.replacePropertyNames(this.expressionMap.groupBys.join(\", \")));\n    }\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    createOrderByExpression() {\n        const orderBys = this.expressionMap.allOrderBys;\n        if (Object.keys(orderBys).length === 0)\n            return \"\";\n        return (\" ORDER BY \" +\n            Object.keys(orderBys)\n                .map((columnName) => {\n                const orderValue = typeof orderBys[columnName] === \"string\"\n                    ? orderBys[columnName]\n                    : orderBys[columnName].order +\n                        \" \" +\n                        orderBys[columnName].nulls;\n                const selection = this.expressionMap.selects.find((s) => s.selection === columnName);\n                if (selection &&\n                    !selection.aliasName &&\n                    columnName.indexOf(\".\") !== -1) {\n                    const criteriaParts = columnName.split(\".\");\n                    const aliasName = criteriaParts[0];\n                    const propertyPath = criteriaParts.slice(1).join(\".\");\n                    const alias = this.expressionMap.aliases.find((alias) => alias.name === aliasName);\n                    if (alias) {\n                        const column = alias.metadata.findColumnWithPropertyPath(propertyPath);\n                        if (column) {\n                            const orderAlias = DriverUtils.buildAlias(this.connection.driver, undefined, aliasName, column.databaseName);\n                            return (this.escape(orderAlias) + \" \" + orderValue);\n                        }\n                    }\n                }\n                return (this.replacePropertyNames(columnName) + \" \" + orderValue);\n            })\n                .join(\", \"));\n    }\n    /**\n     * Creates \"LIMIT\" and \"OFFSET\" parts of SQL query.\n     */\n    createLimitOffsetExpression() {\n        // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results\n        // we can use regular limit / offset, that's why we add offset and limit construction here based on skip and take values\n        let offset = this.expressionMap.offset, limit = this.expressionMap.limit;\n        if (!offset &&\n            !limit &&\n            this.expressionMap.joinAttributes.length === 0) {\n            offset = this.expressionMap.skip;\n            limit = this.expressionMap.take;\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            // Due to a limitation in SQL Server's parser implementation it does not support using\n            // OFFSET or FETCH NEXT without an ORDER BY clause being provided. In cases where the\n            // user does not request one we insert a dummy ORDER BY that does nothing and should\n            // have no effect on the query planner or on the order of the results returned.\n            // https://dba.stackexchange.com/a/193799\n            let prefix = \"\";\n            if ((limit || offset) &&\n                Object.keys(this.expressionMap.allOrderBys).length <= 0) {\n                prefix = \" ORDER BY (SELECT NULL)\";\n            }\n            if (limit && offset)\n                return (prefix +\n                    \" OFFSET \" +\n                    offset +\n                    \" ROWS FETCH NEXT \" +\n                    limit +\n                    \" ROWS ONLY\");\n            if (limit)\n                return (prefix + \" OFFSET 0 ROWS FETCH NEXT \" + limit + \" ROWS ONLY\");\n            if (offset)\n                return prefix + \" OFFSET \" + offset + \" ROWS\";\n        }\n        else if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\" ||\n            this.connection.driver.options.type === \"sap\" ||\n            this.connection.driver.options.type === \"spanner\") {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                throw new OffsetWithoutLimitNotSupportedError();\n        }\n        else if (DriverUtils.isSQLiteFamily(this.connection.driver)) {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" LIMIT -1 OFFSET \" + offset;\n        }\n        else if (this.connection.driver.options.type === \"oracle\") {\n            if (limit && offset)\n                return (\" OFFSET \" +\n                    offset +\n                    \" ROWS FETCH NEXT \" +\n                    limit +\n                    \" ROWS ONLY\");\n            if (limit)\n                return \" FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (offset)\n                return \" OFFSET \" + offset + \" ROWS\";\n        }\n        else {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" OFFSET \" + offset;\n        }\n        return \"\";\n    }\n    /**\n     * Creates \"LOCK\" part of SELECT Query after table Clause\n     * ex.\n     *  SELECT 1\n     *  FROM USER U WITH (NOLOCK)\n     *  JOIN ORDER O WITH (NOLOCK)\n     *      ON U.ID=O.OrderID\n     */\n    createTableLockExpression() {\n        if (this.connection.driver.options.type === \"mssql\") {\n            switch (this.expressionMap.lockMode) {\n                case \"pessimistic_read\":\n                    return \" WITH (HOLDLOCK, ROWLOCK)\";\n                case \"pessimistic_write\":\n                    return \" WITH (UPDLOCK, ROWLOCK)\";\n                case \"dirty_read\":\n                    return \" WITH (NOLOCK)\";\n            }\n        }\n        return \"\";\n    }\n    /**\n     * Creates \"LOCK\" part of SQL query.\n     */\n    createLockExpression() {\n        const driver = this.connection.driver;\n        let lockTablesClause = \"\";\n        if (this.expressionMap.lockTables) {\n            if (!(DriverUtils.isPostgresFamily(driver) ||\n                driver.options.type === \"cockroachdb\")) {\n                throw new TypeORMError(\"Lock tables not supported in selected driver\");\n            }\n            if (this.expressionMap.lockTables.length < 1) {\n                throw new TypeORMError(\"lockTables cannot be an empty array\");\n            }\n            lockTablesClause = \" OF \" + this.expressionMap.lockTables.join(\", \");\n        }\n        let onLockExpression = \"\";\n        if (this.expressionMap.onLocked === \"nowait\") {\n            onLockExpression = \" NOWAIT\";\n        }\n        else if (this.expressionMap.onLocked === \"skip_locked\") {\n            onLockExpression = \" SKIP LOCKED\";\n        }\n        switch (this.expressionMap.lockMode) {\n            case \"pessimistic_read\":\n                if (driver.options.type === \"mysql\" ||\n                    driver.options.type === \"aurora-mysql\") {\n                    if (DriverUtils.isReleaseVersionOrGreater(driver, \"8.0.0\")) {\n                        return (\" FOR SHARE\" + lockTablesClause + onLockExpression);\n                    }\n                    else {\n                        return \" LOCK IN SHARE MODE\";\n                    }\n                }\n                else if (driver.options.type === \"mariadb\") {\n                    return \" LOCK IN SHARE MODE\";\n                }\n                else if (DriverUtils.isPostgresFamily(driver)) {\n                    return \" FOR SHARE\" + lockTablesClause + onLockExpression;\n                }\n                else if (driver.options.type === \"oracle\") {\n                    return \" FOR UPDATE\";\n                }\n                else if (driver.options.type === \"mssql\") {\n                    return \"\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write\":\n                if (DriverUtils.isMySQLFamily(driver) ||\n                    driver.options.type === \"aurora-mysql\" ||\n                    driver.options.type === \"oracle\") {\n                    return \" FOR UPDATE\" + onLockExpression;\n                }\n                else if (DriverUtils.isPostgresFamily(driver) ||\n                    driver.options.type === \"cockroachdb\") {\n                    return \" FOR UPDATE\" + lockTablesClause + onLockExpression;\n                }\n                else if (driver.options.type === \"mssql\") {\n                    return \"\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_partial_write\":\n                if (DriverUtils.isPostgresFamily(driver)) {\n                    return \" FOR UPDATE\" + lockTablesClause + \" SKIP LOCKED\";\n                }\n                else if (DriverUtils.isMySQLFamily(driver)) {\n                    return \" FOR UPDATE SKIP LOCKED\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write_or_fail\":\n                if (DriverUtils.isPostgresFamily(driver) ||\n                    driver.options.type === \"cockroachdb\") {\n                    return \" FOR UPDATE\" + lockTablesClause + \" NOWAIT\";\n                }\n                else if (DriverUtils.isMySQLFamily(driver)) {\n                    return \" FOR UPDATE NOWAIT\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"for_no_key_update\":\n                if (DriverUtils.isPostgresFamily(driver) ||\n                    driver.options.type === \"cockroachdb\") {\n                    return (\" FOR NO KEY UPDATE\" +\n                        lockTablesClause +\n                        onLockExpression);\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"for_key_share\":\n                if (DriverUtils.isPostgresFamily(driver)) {\n                    return (\" FOR KEY SHARE\" + lockTablesClause + onLockExpression);\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            default:\n                return \"\";\n        }\n    }\n    /**\n     * Creates \"HAVING\" part of SQL query.\n     */\n    createHavingExpression() {\n        if (!this.expressionMap.havings || !this.expressionMap.havings.length)\n            return \"\";\n        const conditions = this.expressionMap.havings\n            .map((having, index) => {\n            switch (having.type) {\n                case \"and\":\n                    return ((index > 0 ? \"AND \" : \"\") +\n                        this.replacePropertyNames(having.condition));\n                case \"or\":\n                    return ((index > 0 ? \"OR \" : \"\") +\n                        this.replacePropertyNames(having.condition));\n                default:\n                    return this.replacePropertyNames(having.condition);\n            }\n        })\n            .join(\" \");\n        if (!conditions.length)\n            return \"\";\n        return \" HAVING \" + conditions;\n    }\n    buildEscapedEntityColumnSelects(aliasName, metadata) {\n        const hasMainAlias = this.expressionMap.selects.some((select) => select.selection === aliasName);\n        const columns = [];\n        if (hasMainAlias) {\n            columns.push(...metadata.columns.filter((column) => column.isSelect === true));\n        }\n        columns.push(...metadata.columns.filter((column) => {\n            return this.expressionMap.selects.some((select) => select.selection ===\n                aliasName + \".\" + column.propertyPath);\n        }));\n        // if user used partial selection and did not select some primary columns which are required to be selected\n        // we select those primary columns and mark them as \"virtual\". Later virtual column values will be removed from final entity\n        // to make entity contain exactly what user selected\n        if (columns.length === 0)\n            // however not in the case when nothing (even partial) was selected from this target (for example joins without selection)\n            return [];\n        const nonSelectedPrimaryColumns = this.expressionMap.queryEntity\n            ? metadata.primaryColumns.filter((primaryColumn) => columns.indexOf(primaryColumn) === -1)\n            : [];\n        const allColumns = [...columns, ...nonSelectedPrimaryColumns];\n        const finalSelects = [];\n        const escapedAliasName = this.escape(aliasName);\n        allColumns.forEach((column) => {\n            let selectionPath = escapedAliasName + \".\" + this.escape(column.databaseName);\n            if (column.isVirtualProperty && column.query) {\n                selectionPath = `(${column.query(escapedAliasName)})`;\n            }\n            if (this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                    this.connection.driver.options.type === \"aurora-mysql\") {\n                    const useLegacy = this.connection.driver.options.legacySpatialSupport;\n                    const asText = useLegacy ? \"AsText\" : \"ST_AsText\";\n                    selectionPath = `${asText}(${selectionPath})`;\n                }\n                if (DriverUtils.isPostgresFamily(this.connection.driver))\n                    if (column.precision) {\n                        // cast to JSON to trigger parsing in the driver\n                        selectionPath = `ST_AsGeoJSON(${selectionPath}, ${column.precision})::json`;\n                    }\n                    else {\n                        selectionPath = `ST_AsGeoJSON(${selectionPath})::json`;\n                    }\n                if (this.connection.driver.options.type === \"mssql\")\n                    selectionPath = `${selectionPath}.ToString()`;\n            }\n            const selections = this.expressionMap.selects.filter((select) => select.selection === aliasName + \".\" + column.propertyPath);\n            if (selections.length) {\n                selections.forEach((selection) => {\n                    finalSelects.push({\n                        selection: selectionPath,\n                        aliasName: selection.aliasName\n                            ? selection.aliasName\n                            : DriverUtils.buildAlias(this.connection.driver, undefined, aliasName, column.databaseName),\n                        // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\n                        virtual: selection.virtual,\n                    });\n                });\n            }\n            else {\n                if (column.isVirtualProperty) {\n                    // Do not add unselected virtual properties to final select\n                    return;\n                }\n                finalSelects.push({\n                    selection: selectionPath,\n                    aliasName: DriverUtils.buildAlias(this.connection.driver, undefined, aliasName, column.databaseName),\n                    // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\n                    virtual: hasMainAlias,\n                });\n            }\n        });\n        return finalSelects;\n    }\n    findEntityColumnSelects(aliasName, metadata) {\n        const mainSelect = this.expressionMap.selects.find((select) => select.selection === aliasName);\n        if (mainSelect)\n            return [mainSelect];\n        return this.expressionMap.selects.filter((select) => {\n            return metadata.columns.some((column) => select.selection === aliasName + \".\" + column.propertyPath);\n        });\n    }\n    computeCountExpression() {\n        const mainAlias = this.expressionMap.mainAlias.name; // todo: will this work with \"fromTableName\"?\n        const metadata = this.expressionMap.mainAlias.metadata;\n        const primaryColumns = metadata.primaryColumns;\n        const distinctAlias = this.escape(mainAlias);\n        // If we aren't doing anything that will create a join, we can use a simpler `COUNT` instead\n        // so we prevent poor query patterns in the most likely cases\n        if (this.expressionMap.joinAttributes.length === 0 &&\n            this.expressionMap.relationIdAttributes.length === 0 &&\n            this.expressionMap.relationCountAttributes.length === 0) {\n            return \"COUNT(1)\";\n        }\n        // For everything else, we'll need to do some hackery to get the correct count values.\n        if (this.connection.driver.options.type === \"cockroachdb\" ||\n            DriverUtils.isPostgresFamily(this.connection.driver)) {\n            // Postgres and CockroachDB can pass multiple parameters to the `DISTINCT` function\n            // https://www.postgresql.org/docs/9.5/sql-select.html#SQL-DISTINCT\n            return (\"COUNT(DISTINCT(\" +\n                primaryColumns\n                    .map((c) => `${distinctAlias}.${this.escape(c.databaseName)}`)\n                    .join(\", \") +\n                \"))\");\n        }\n        if (DriverUtils.isMySQLFamily(this.connection.driver)) {\n            // MySQL & MariaDB can pass multiple parameters to the `DISTINCT` language construct\n            // https://mariadb.com/kb/en/count-distinct/\n            return (\"COUNT(DISTINCT \" +\n                primaryColumns\n                    .map((c) => `${distinctAlias}.${this.escape(c.databaseName)}`)\n                    .join(\", \") +\n                \")\");\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            // SQL Server has gotta be different from everyone else.  They don't support\n            // distinct counting multiple columns & they don't have the same operator\n            // characteristic for concatenating, so we gotta use the `CONCAT` function.\n            // However, If it's exactly 1 column we can omit the `CONCAT` for better performance.\n            const columnsExpression = primaryColumns\n                .map((primaryColumn) => `${distinctAlias}.${this.escape(primaryColumn.databaseName)}`)\n                .join(\", '|;|', \");\n            if (primaryColumns.length === 1) {\n                return `COUNT(DISTINCT(${columnsExpression}))`;\n            }\n            return `COUNT(DISTINCT(CONCAT(${columnsExpression})))`;\n        }\n        if (this.connection.driver.options.type === \"spanner\") {\n            // spanner also has gotta be different from everyone else.\n            // they do not support concatenation of different column types without casting them to string\n            if (primaryColumns.length === 1) {\n                return `COUNT(DISTINCT(${distinctAlias}.${this.escape(primaryColumns[0].databaseName)}))`;\n            }\n            const columnsExpression = primaryColumns\n                .map((primaryColumn) => `CAST(${distinctAlias}.${this.escape(primaryColumn.databaseName)} AS STRING)`)\n                .join(\", '|;|', \");\n            return `COUNT(DISTINCT(CONCAT(${columnsExpression})))`;\n        }\n        // If all else fails, fall back to a `COUNT` and `DISTINCT` across all the primary columns concatenated.\n        // Per the SQL spec, this is the canonical string concatenation mechanism which is most\n        // likely to work across servers implementing the SQL standard.\n        // Please note, if there is only one primary column that the concatenation does not occur in this\n        // query and the query is a standard `COUNT DISTINCT` in that case.\n        return (`COUNT(DISTINCT(` +\n            primaryColumns\n                .map((c) => `${distinctAlias}.${this.escape(c.databaseName)}`)\n                .join(\" || '|;|' || \") +\n            \"))\");\n    }\n    async executeCountQuery(queryRunner) {\n        const countSql = this.computeCountExpression();\n        const results = await this.clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(countSql, \"cnt\")\n            .setOption(\"disable-global-order\")\n            .loadRawResults(queryRunner);\n        if (!results || !results[0] || !results[0][\"cnt\"])\n            return 0;\n        return parseInt(results[0][\"cnt\"]);\n    }\n    async executeExistsQuery(queryRunner) {\n        const results = await this.connection\n            .createQueryBuilder()\n            .fromDummy()\n            .select(\"1\", \"row_exists\")\n            .whereExists(this)\n            .limit(1)\n            .loadRawResults(queryRunner);\n        return results.length > 0;\n    }\n    applyFindOptions() {\n        // todo: convert relations: string[] to object map to simplify code\n        // todo: same with selects\n        if (this.expressionMap.mainAlias.metadata) {\n            if (this.findOptions.relationLoadStrategy) {\n                this.expressionMap.relationLoadStrategy =\n                    this.findOptions.relationLoadStrategy;\n            }\n            if (this.findOptions.comment) {\n                this.comment(this.findOptions.comment);\n            }\n            if (this.findOptions.withDeleted) {\n                this.withDeleted();\n            }\n            if (this.findOptions.select) {\n                const select = Array.isArray(this.findOptions.select)\n                    ? OrmUtils.propertyPathsToTruthyObject(this.findOptions.select)\n                    : this.findOptions.select;\n                this.buildSelect(select, this.expressionMap.mainAlias.metadata, this.expressionMap.mainAlias.name);\n            }\n            if (this.selects.length) {\n                this.select(this.selects);\n            }\n            this.selects = [];\n            if (this.findOptions.relations) {\n                const relations = Array.isArray(this.findOptions.relations)\n                    ? OrmUtils.propertyPathsToTruthyObject(this.findOptions.relations)\n                    : this.findOptions.relations;\n                this.buildRelations(relations, typeof this.findOptions.select === \"object\"\n                    ? this.findOptions.select\n                    : undefined, this.expressionMap.mainAlias.metadata, this.expressionMap.mainAlias.name);\n                if (this.findOptions.loadEagerRelations !== false &&\n                    this.expressionMap.relationLoadStrategy === \"join\") {\n                    this.buildEagerRelations(relations, typeof this.findOptions.select === \"object\"\n                        ? this.findOptions\n                            .select\n                        : undefined, this.expressionMap.mainAlias.metadata, this.expressionMap.mainAlias.name);\n                }\n            }\n            if (this.selects.length) {\n                this.addSelect(this.selects);\n            }\n            if (this.findOptions.where) {\n                this.conditions = this.buildWhere(this.findOptions.where, this.expressionMap.mainAlias.metadata, this.expressionMap.mainAlias.name);\n                if (this.conditions.length)\n                    this.andWhere(this.conditions.substr(0, 1) !== \"(\"\n                        ? \"(\" + this.conditions + \")\"\n                        : this.conditions); // temporary and where and braces\n            }\n            if (this.findOptions.order) {\n                this.buildOrder(this.findOptions.order, this.expressionMap.mainAlias.metadata, this.expressionMap.mainAlias.name);\n            }\n            // apply joins\n            if (this.joins.length) {\n                this.joins.forEach((join) => {\n                    if (join.select && !join.selection) {\n                        // if (join.selection) {\n                        //\n                        // } else {\n                        if (join.type === \"inner\") {\n                            this.innerJoinAndSelect(`${join.parentAlias}.${join.relationMetadata.propertyPath}`, join.alias);\n                        }\n                        else {\n                            this.leftJoinAndSelect(`${join.parentAlias}.${join.relationMetadata.propertyPath}`, join.alias);\n                        }\n                        // }\n                    }\n                    else {\n                        if (join.type === \"inner\") {\n                            this.innerJoin(`${join.parentAlias}.${join.relationMetadata.propertyPath}`, join.alias);\n                        }\n                        else {\n                            this.leftJoin(`${join.parentAlias}.${join.relationMetadata.propertyPath}`, join.alias);\n                        }\n                    }\n                    // if (join.select) {\n                    //     if (this.findOptions.loadEagerRelations !== false) {\n                    //         FindOptionsUtils.joinEagerRelations(\n                    //             this,\n                    //             join.alias,\n                    //             join.relationMetadata.inverseEntityMetadata\n                    //         );\n                    //     }\n                    // }\n                });\n            }\n            // if (this.conditions.length) {\n            //     this.where(this.conditions.join(\" AND \"));\n            // }\n            // apply offset\n            if (this.findOptions.skip !== undefined) {\n                // if (this.findOptions.options && this.findOptions.options.pagination === false) {\n                //     this.offset(this.findOptions.skip);\n                // } else {\n                this.skip(this.findOptions.skip);\n                // }\n            }\n            // apply limit\n            if (this.findOptions.take !== undefined) {\n                // if (this.findOptions.options && this.findOptions.options.pagination === false) {\n                //     this.limit(this.findOptions.take);\n                // } else {\n                this.take(this.findOptions.take);\n                // }\n            }\n            // apply caching options\n            if (typeof this.findOptions.cache === \"number\") {\n                this.cache(this.findOptions.cache);\n            }\n            else if (typeof this.findOptions.cache === \"boolean\") {\n                this.cache(this.findOptions.cache);\n            }\n            else if (typeof this.findOptions.cache === \"object\") {\n                this.cache(this.findOptions.cache.id, this.findOptions.cache.milliseconds);\n            }\n            if (this.findOptions.join) {\n                if (this.findOptions.join.leftJoin)\n                    Object.keys(this.findOptions.join.leftJoin).forEach((key) => {\n                        this.leftJoin(this.findOptions.join.leftJoin[key], key);\n                    });\n                if (this.findOptions.join.innerJoin)\n                    Object.keys(this.findOptions.join.innerJoin).forEach((key) => {\n                        this.innerJoin(this.findOptions.join.innerJoin[key], key);\n                    });\n                if (this.findOptions.join.leftJoinAndSelect)\n                    Object.keys(this.findOptions.join.leftJoinAndSelect).forEach((key) => {\n                        this.leftJoinAndSelect(this.findOptions.join.leftJoinAndSelect[key], key);\n                    });\n                if (this.findOptions.join.innerJoinAndSelect)\n                    Object.keys(this.findOptions.join.innerJoinAndSelect).forEach((key) => {\n                        this.innerJoinAndSelect(this.findOptions.join.innerJoinAndSelect[key], key);\n                    });\n            }\n            if (this.findOptions.lock) {\n                if (this.findOptions.lock.mode === \"optimistic\") {\n                    this.setLock(this.findOptions.lock.mode, this.findOptions.lock.version);\n                }\n                else if (this.findOptions.lock.mode === \"pessimistic_read\" ||\n                    this.findOptions.lock.mode === \"pessimistic_write\" ||\n                    this.findOptions.lock.mode === \"dirty_read\" ||\n                    this.findOptions.lock.mode ===\n                        \"pessimistic_partial_write\" ||\n                    this.findOptions.lock.mode ===\n                        \"pessimistic_write_or_fail\" ||\n                    this.findOptions.lock.mode === \"for_no_key_update\" ||\n                    this.findOptions.lock.mode === \"for_key_share\") {\n                    const tableNames = this.findOptions.lock.tables\n                        ? this.findOptions.lock.tables.map((table) => {\n                            const tableAlias = this.expressionMap.aliases.find((alias) => {\n                                return (alias.metadata\n                                    .tableNameWithoutPrefix === table);\n                            });\n                            if (!tableAlias) {\n                                throw new TypeORMError(`\"${table}\" is not part of this query`);\n                            }\n                            return this.escape(tableAlias.name);\n                        })\n                        : undefined;\n                    this.setLock(this.findOptions.lock.mode, undefined, tableNames);\n                    if (this.findOptions.lock.onLocked) {\n                        this.setOnLocked(this.findOptions.lock.onLocked);\n                    }\n                }\n            }\n            if (this.findOptions.loadRelationIds === true) {\n                this.loadAllRelationIds();\n            }\n            else if (typeof this.findOptions.loadRelationIds === \"object\") {\n                this.loadAllRelationIds(this.findOptions.loadRelationIds);\n            }\n            if (this.findOptions.loadEagerRelations !== false) {\n                FindOptionsUtils.joinEagerRelations(this, this.expressionMap.mainAlias.name, this.expressionMap.mainAlias.metadata);\n            }\n            if (this.findOptions.transaction === true) {\n                this.expressionMap.useTransaction = true;\n            }\n            // if (this.orderBys.length) {\n            //     this.orderBys.forEach(orderBy => {\n            //         this.addOrderBy(orderBy.alias, orderBy.direction, orderBy.nulls);\n            //     });\n            // }\n            // todo\n            // if (this.options.options && this.options.options.eagerRelations) {\n            //     this.queryBuilder\n            // }\n            // todo\n            // if (this.findOptions.options && this.findOptions.listeners === false) {\n            //     this.callListeners(false);\n            // }\n        }\n    }\n    concatRelationMetadata(relationMetadata) {\n        this.relationMetadatas.push(relationMetadata);\n    }\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    async executeEntitiesAndRawResults(queryRunner) {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(`Alias is not set. Use \"from\" method to set an alias.`);\n        if ((this.expressionMap.lockMode === \"pessimistic_read\" ||\n            this.expressionMap.lockMode === \"pessimistic_write\" ||\n            this.expressionMap.lockMode === \"pessimistic_partial_write\" ||\n            this.expressionMap.lockMode === \"pessimistic_write_or_fail\" ||\n            this.expressionMap.lockMode === \"for_no_key_update\" ||\n            this.expressionMap.lockMode === \"for_key_share\") &&\n            !queryRunner.isTransactionActive)\n            throw new PessimisticLockTransactionRequiredError();\n        if (this.expressionMap.lockMode === \"optimistic\") {\n            const metadata = this.expressionMap.mainAlias.metadata;\n            if (!metadata.versionColumn && !metadata.updateDateColumn)\n                throw new NoVersionOrUpdateDateColumnError(metadata.name);\n        }\n        const relationIdLoader = new RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);\n        const relationCountLoader = new RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);\n        const relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer(this.expressionMap);\n        relationIdMetadataTransformer.transform();\n        const relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer(this.expressionMap);\n        relationCountMetadataTransformer.transform();\n        let rawResults = [], entities = [];\n        // for pagination enabled (e.g. skip and take) its much more complicated - its a special process\n        // where we make two queries to find the data we need\n        // first query find ids in skip and take range\n        // and second query loads the actual data in given ids range\n        if ((this.expressionMap.skip || this.expressionMap.take) &&\n            this.expressionMap.joinAttributes.length > 0) {\n            // we are skipping order by here because its not working in subqueries anyway\n            // to make order by working we need to apply it on a distinct query\n            const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\n            const metadata = this.expressionMap.mainAlias.metadata;\n            const mainAliasName = this.expressionMap.mainAlias.name;\n            const querySelects = metadata.primaryColumns.map((primaryColumn) => {\n                const distinctAlias = this.escape(\"distinctAlias\");\n                const columnAlias = this.escape(DriverUtils.buildAlias(this.connection.driver, undefined, mainAliasName, primaryColumn.databaseName));\n                if (!orderBys[columnAlias])\n                    // make sure we aren't overriding user-defined order in inverse direction\n                    orderBys[columnAlias] = \"ASC\";\n                const alias = DriverUtils.buildAlias(this.connection.driver, undefined, \"ids_\" + mainAliasName, primaryColumn.databaseName);\n                return `${distinctAlias}.${columnAlias} AS ${this.escape(alias)}`;\n            });\n            const originalQuery = this.clone();\n            // preserve original timeTravel value since we set it to \"false\" in subquery\n            const originalQueryTimeTravel = originalQuery.expressionMap.timeTravel;\n            rawResults = await new SelectQueryBuilder(this.connection, queryRunner)\n                .select(`DISTINCT ${querySelects.join(\", \")}`)\n                .addSelect(selects)\n                .from(`(${originalQuery\n                .orderBy()\n                .timeTravelQuery(false) // set it to \"false\" since time travel clause must appear at the very end and applies to the entire SELECT clause.\n                .getQuery()})`, \"distinctAlias\")\n                .timeTravelQuery(originalQueryTimeTravel)\n                .offset(this.expressionMap.skip)\n                .limit(this.expressionMap.take)\n                .orderBy(orderBys)\n                .cache(this.expressionMap.cache && this.expressionMap.cacheId\n                ? `${this.expressionMap.cacheId}-pagination`\n                : this.expressionMap.cache, this.expressionMap.cacheDuration)\n                .setParameters(this.getParameters())\n                .setNativeParameters(this.expressionMap.nativeParameters)\n                .getRawMany();\n            if (rawResults.length > 0) {\n                let condition = \"\";\n                const parameters = {};\n                if (metadata.hasMultiplePrimaryKeys) {\n                    condition = rawResults\n                        .map((result, index) => {\n                        return metadata.primaryColumns\n                            .map((primaryColumn) => {\n                            const paramKey = `orm_distinct_ids_${index}_${primaryColumn.databaseName}`;\n                            const paramKeyResult = DriverUtils.buildAlias(this.connection.driver, undefined, \"ids_\" + mainAliasName, primaryColumn.databaseName);\n                            parameters[paramKey] =\n                                result[paramKeyResult];\n                            return `${mainAliasName}.${primaryColumn.propertyPath}=:${paramKey}`;\n                        })\n                            .join(\" AND \");\n                    })\n                        .join(\" OR \");\n                }\n                else {\n                    const alias = DriverUtils.buildAlias(this.connection.driver, undefined, \"ids_\" + mainAliasName, metadata.primaryColumns[0].databaseName);\n                    const ids = rawResults.map((result) => result[alias]);\n                    const areAllNumbers = ids.every((id) => typeof id === \"number\");\n                    if (areAllNumbers) {\n                        // fixes #190. if all numbers then its safe to perform query without parameter\n                        condition = `${mainAliasName}.${metadata.primaryColumns[0].propertyPath} IN (${ids.join(\", \")})`;\n                    }\n                    else {\n                        parameters[\"orm_distinct_ids\"] = ids;\n                        condition =\n                            mainAliasName +\n                                \".\" +\n                                metadata.primaryColumns[0].propertyPath +\n                                \" IN (:...orm_distinct_ids)\";\n                    }\n                }\n                rawResults = await this.clone()\n                    .mergeExpressionMap({\n                    extraAppendedAndWhereCondition: condition,\n                })\n                    .setParameters(parameters)\n                    .loadRawResults(queryRunner);\n            }\n        }\n        else {\n            rawResults = await this.loadRawResults(queryRunner);\n        }\n        if (rawResults.length > 0) {\n            // transform raw results into entities\n            const rawRelationIdResults = await relationIdLoader.load(rawResults);\n            const rawRelationCountResults = await relationCountLoader.load(rawResults);\n            const transformer = new RawSqlResultsToEntityTransformer(this.expressionMap, this.connection.driver, rawRelationIdResults, rawRelationCountResults, this.queryRunner);\n            entities = transformer.transform(rawResults, this.expressionMap.mainAlias);\n            // broadcast all \"after load\" events\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                await queryRunner.broadcaster.broadcast(\"Load\", this.expressionMap.mainAlias.metadata, entities);\n            }\n        }\n        if (this.expressionMap.relationLoadStrategy === \"query\") {\n            const queryStrategyRelationIdLoader = new QueryStrategyRelationIdLoader(this.connection, queryRunner);\n            await Promise.all(this.relationMetadatas.map(async (relation) => {\n                const relationTarget = relation.inverseEntityMetadata.target;\n                const relationAlias = relation.inverseEntityMetadata.targetName;\n                const select = Array.isArray(this.findOptions.select)\n                    ? OrmUtils.propertyPathsToTruthyObject(this.findOptions.select)\n                    : this.findOptions.select;\n                const relations = Array.isArray(this.findOptions.relations)\n                    ? OrmUtils.propertyPathsToTruthyObject(this.findOptions.relations)\n                    : this.findOptions.relations;\n                const queryBuilder = this.createQueryBuilder(queryRunner)\n                    .select(relationAlias)\n                    .from(relationTarget, relationAlias)\n                    .setFindOptions({\n                    select: select\n                        ? OrmUtils.deepValue(select, relation.propertyPath)\n                        : undefined,\n                    order: this.findOptions.order\n                        ? OrmUtils.deepValue(this.findOptions.order, relation.propertyPath)\n                        : undefined,\n                    relations: relations\n                        ? OrmUtils.deepValue(relations, relation.propertyPath)\n                        : undefined,\n                    withDeleted: this.findOptions.withDeleted,\n                    relationLoadStrategy: this.findOptions.relationLoadStrategy,\n                });\n                if (entities.length > 0) {\n                    const relatedEntityGroups = await queryStrategyRelationIdLoader.loadManyToManyRelationIdsAndGroup(relation, entities, undefined, queryBuilder);\n                    entities.forEach((entity) => {\n                        const relatedEntityGroup = relatedEntityGroups.find((group) => group.entity === entity);\n                        if (relatedEntityGroup) {\n                            const value = relatedEntityGroup.related === undefined\n                                ? null\n                                : relatedEntityGroup.related;\n                            relation.setEntityValue(entity, value);\n                        }\n                    });\n                }\n            }));\n        }\n        return {\n            raw: rawResults,\n            entities: entities,\n        };\n    }\n    createOrderByCombinedWithSelectExpression(parentAlias) {\n        // if table has a default order then apply it\n        const orderBys = this.expressionMap.allOrderBys;\n        const selectString = Object.keys(orderBys)\n            .map((orderCriteria) => {\n            if (orderCriteria.indexOf(\".\") !== -1) {\n                const criteriaParts = orderCriteria.split(\".\");\n                const aliasName = criteriaParts[0];\n                const propertyPath = criteriaParts.slice(1).join(\".\");\n                const alias = this.expressionMap.findAliasByName(aliasName);\n                const column = alias.metadata.findColumnWithPropertyPath(propertyPath);\n                return (this.escape(parentAlias) +\n                    \".\" +\n                    this.escape(DriverUtils.buildAlias(this.connection.driver, undefined, aliasName, column.databaseName)));\n            }\n            else {\n                if (this.expressionMap.selects.find((select) => select.selection === orderCriteria ||\n                    select.aliasName === orderCriteria))\n                    return (this.escape(parentAlias) +\n                        \".\" +\n                        this.escape(orderCriteria));\n                return \"\";\n            }\n        })\n            .join(\", \");\n        const orderByObject = {};\n        Object.keys(orderBys).forEach((orderCriteria) => {\n            if (orderCriteria.indexOf(\".\") !== -1) {\n                const criteriaParts = orderCriteria.split(\".\");\n                const aliasName = criteriaParts[0];\n                const propertyPath = criteriaParts.slice(1).join(\".\");\n                const alias = this.expressionMap.findAliasByName(aliasName);\n                const column = alias.metadata.findColumnWithPropertyPath(propertyPath);\n                orderByObject[this.escape(parentAlias) +\n                    \".\" +\n                    this.escape(DriverUtils.buildAlias(this.connection.driver, undefined, aliasName, column.databaseName))] = orderBys[orderCriteria];\n            }\n            else {\n                if (this.expressionMap.selects.find((select) => select.selection === orderCriteria ||\n                    select.aliasName === orderCriteria)) {\n                    orderByObject[this.escape(parentAlias) +\n                        \".\" +\n                        this.escape(orderCriteria)] = orderBys[orderCriteria];\n                }\n                else {\n                    orderByObject[orderCriteria] = orderBys[orderCriteria];\n                }\n            }\n        });\n        return [selectString, orderByObject];\n    }\n    /**\n     * Loads raw results from the database.\n     */\n    async loadRawResults(queryRunner) {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryId = sql +\n            \" -- PARAMETERS: \" +\n            JSON.stringify(parameters, (_, value) => typeof value === \"bigint\" ? value.toString() : value);\n        const cacheOptions = typeof this.connection.options.cache === \"object\"\n            ? this.connection.options.cache\n            : {};\n        let savedQueryResultCacheOptions = undefined;\n        const isCachingEnabled = \n        // Caching is enabled globally and isn't disabled locally.\n        (cacheOptions.alwaysEnabled &&\n            this.expressionMap.cache !== false) ||\n            // ...or it's enabled locally explicitly.\n            this.expressionMap.cache === true;\n        let cacheError = false;\n        if (this.connection.queryResultCache && isCachingEnabled) {\n            try {\n                savedQueryResultCacheOptions =\n                    await this.connection.queryResultCache.getFromCache({\n                        identifier: this.expressionMap.cacheId,\n                        query: queryId,\n                        duration: this.expressionMap.cacheDuration ||\n                            cacheOptions.duration ||\n                            1000,\n                    }, queryRunner);\n                if (savedQueryResultCacheOptions &&\n                    !this.connection.queryResultCache.isExpired(savedQueryResultCacheOptions)) {\n                    return JSON.parse(savedQueryResultCacheOptions.result);\n                }\n            }\n            catch (error) {\n                if (!cacheOptions.ignoreErrors) {\n                    throw error;\n                }\n                cacheError = true;\n            }\n        }\n        const results = await queryRunner.query(sql, parameters, true);\n        if (!cacheError &&\n            this.connection.queryResultCache &&\n            isCachingEnabled) {\n            try {\n                await this.connection.queryResultCache.storeInCache({\n                    identifier: this.expressionMap.cacheId,\n                    query: queryId,\n                    time: new Date().getTime(),\n                    duration: this.expressionMap.cacheDuration ||\n                        cacheOptions.duration ||\n                        1000,\n                    result: JSON.stringify(results.records),\n                }, savedQueryResultCacheOptions, queryRunner);\n            }\n            catch (error) {\n                if (!cacheOptions.ignoreErrors) {\n                    throw error;\n                }\n            }\n        }\n        return results.records;\n    }\n    /**\n     * Merges into expression map given expression map properties.\n     */\n    mergeExpressionMap(expressionMap) {\n        ObjectUtils.assign(this.expressionMap, expressionMap);\n        return this;\n    }\n    /**\n     * Normalizes a give number - converts to int if possible.\n     */\n    normalizeNumber(num) {\n        if (typeof num === \"number\" || num === undefined || num === null)\n            return num;\n        return Number(num);\n    }\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    obtainQueryRunner() {\n        return (this.queryRunner ||\n            this.connection.createQueryRunner(this.connection.defaultReplicationModeForReads()));\n    }\n    buildSelect(select, metadata, alias, embedPrefix) {\n        for (let key in select) {\n            if (select[key] === undefined || select[key] === false)\n                continue;\n            const propertyPath = embedPrefix ? embedPrefix + \".\" + key : key;\n            const column = metadata.findColumnWithPropertyPathStrict(propertyPath);\n            const embed = metadata.findEmbeddedWithPropertyPath(propertyPath);\n            const relation = metadata.findRelationWithPropertyPath(propertyPath);\n            if (!embed && !column && !relation)\n                throw new EntityPropertyNotFoundError(propertyPath, metadata);\n            if (column) {\n                this.selects.push(alias + \".\" + propertyPath);\n                // this.addSelect(alias + \".\" + propertyPath);\n            }\n            else if (embed) {\n                this.buildSelect(select[key], metadata, alias, propertyPath);\n                // } else if (relation) {\n                //     const joinAlias = alias + \"_\" + relation.propertyName;\n                //     const existJoin = this.joins.find(join => join.alias === joinAlias);\n                //     if (!existJoin) {\n                //         this.joins.push({\n                //             type: \"left\",\n                //             select: false,\n                //             alias: joinAlias,\n                //             parentAlias: alias,\n                //             relationMetadata: relation\n                //         });\n                //     }\n                //     this.buildOrder(select[key] as FindOptionsOrder<any>, relation.inverseEntityMetadata, joinAlias);\n            }\n        }\n    }\n    buildRelations(relations, selection, metadata, alias, embedPrefix) {\n        if (!relations)\n            return;\n        Object.keys(relations).forEach((relationName) => {\n            const relationValue = relations[relationName];\n            const propertyPath = embedPrefix\n                ? embedPrefix + \".\" + relationName\n                : relationName;\n            const embed = metadata.findEmbeddedWithPropertyPath(propertyPath);\n            const relation = metadata.findRelationWithPropertyPath(propertyPath);\n            if (!embed && !relation)\n                throw new EntityPropertyNotFoundError(propertyPath, metadata);\n            if (embed) {\n                this.buildRelations(relationValue, typeof selection === \"object\"\n                    ? OrmUtils.deepValue(selection, embed.propertyPath)\n                    : undefined, metadata, alias, propertyPath);\n            }\n            else if (relation) {\n                let joinAlias = alias + \"_\" + propertyPath.replace(\".\", \"_\");\n                joinAlias = DriverUtils.buildAlias(this.connection.driver, { joiner: \"__\" }, alias, joinAlias);\n                if (relationValue === true ||\n                    typeof relationValue === \"object\") {\n                    if (this.expressionMap.relationLoadStrategy === \"query\") {\n                        this.concatRelationMetadata(relation);\n                    }\n                    else {\n                        // join\n                        this.joins.push({\n                            type: \"left\",\n                            select: true,\n                            selection: selection &&\n                                typeof selection[relationName] === \"object\"\n                                ? selection[relationName]\n                                : undefined,\n                            alias: joinAlias,\n                            parentAlias: alias,\n                            relationMetadata: relation,\n                        });\n                        if (selection &&\n                            typeof selection[relationName] === \"object\") {\n                            this.buildSelect(selection[relationName], relation.inverseEntityMetadata, joinAlias);\n                        }\n                    }\n                }\n                if (typeof relationValue === \"object\" &&\n                    this.expressionMap.relationLoadStrategy === \"join\") {\n                    this.buildRelations(relationValue, typeof selection === \"object\"\n                        ? OrmUtils.deepValue(selection, relation.propertyPath)\n                        : undefined, relation.inverseEntityMetadata, joinAlias, undefined);\n                }\n            }\n        });\n    }\n    buildEagerRelations(relations, selection, metadata, alias, embedPrefix) {\n        if (!relations)\n            return;\n        Object.keys(relations).forEach((relationName) => {\n            const relationValue = relations[relationName];\n            const propertyPath = embedPrefix\n                ? embedPrefix + \".\" + relationName\n                : relationName;\n            const embed = metadata.findEmbeddedWithPropertyPath(propertyPath);\n            const relation = metadata.findRelationWithPropertyPath(propertyPath);\n            if (!embed && !relation)\n                throw new EntityPropertyNotFoundError(propertyPath, metadata);\n            if (embed) {\n                this.buildEagerRelations(relationValue, typeof selection === \"object\"\n                    ? OrmUtils.deepValue(selection, embed.propertyPath)\n                    : undefined, metadata, alias, propertyPath);\n            }\n            else if (relation) {\n                let joinAlias = alias + \"_\" + propertyPath.replace(\".\", \"_\");\n                joinAlias = DriverUtils.buildAlias(this.connection.driver, { joiner: \"__\" }, alias, joinAlias);\n                if (relationValue === true ||\n                    typeof relationValue === \"object\") {\n                    relation.inverseEntityMetadata.eagerRelations.forEach((eagerRelation) => {\n                        let eagerRelationJoinAlias = joinAlias +\n                            \"_\" +\n                            eagerRelation.propertyPath.replace(\".\", \"_\");\n                        eagerRelationJoinAlias = DriverUtils.buildAlias(this.connection.driver, { joiner: \"__\" }, joinAlias, eagerRelationJoinAlias);\n                        const existJoin = this.joins.find((join) => join.alias === eagerRelationJoinAlias);\n                        if (!existJoin) {\n                            this.joins.push({\n                                type: \"left\",\n                                select: true,\n                                alias: eagerRelationJoinAlias,\n                                parentAlias: joinAlias,\n                                selection: undefined,\n                                relationMetadata: eagerRelation,\n                            });\n                        }\n                        if (selection &&\n                            typeof selection[relationName] === \"object\") {\n                            this.buildSelect(selection[relationName], relation.inverseEntityMetadata, joinAlias);\n                        }\n                    });\n                }\n                if (typeof relationValue === \"object\") {\n                    this.buildEagerRelations(relationValue, typeof selection === \"object\"\n                        ? OrmUtils.deepValue(selection, relation.propertyPath)\n                        : undefined, relation.inverseEntityMetadata, joinAlias, undefined);\n                }\n            }\n        });\n    }\n    buildOrder(order, metadata, alias, embedPrefix) {\n        for (let key in order) {\n            if (order[key] === undefined)\n                continue;\n            const propertyPath = embedPrefix ? embedPrefix + \".\" + key : key;\n            const column = metadata.findColumnWithPropertyPathStrict(propertyPath);\n            const embed = metadata.findEmbeddedWithPropertyPath(propertyPath);\n            const relation = metadata.findRelationWithPropertyPath(propertyPath);\n            if (!embed && !column && !relation)\n                throw new EntityPropertyNotFoundError(propertyPath, metadata);\n            if (column) {\n                let direction = typeof order[key] === \"object\"\n                    ? order[key].direction\n                    : order[key];\n                direction =\n                    direction === \"DESC\" ||\n                        direction === \"desc\" ||\n                        direction === -1\n                        ? \"DESC\"\n                        : \"ASC\";\n                let nulls = typeof order[key] === \"object\"\n                    ? order[key].nulls\n                    : undefined;\n                nulls =\n                    nulls?.toLowerCase() === \"first\"\n                        ? \"NULLS FIRST\"\n                        : nulls?.toLowerCase() === \"last\"\n                            ? \"NULLS LAST\"\n                            : undefined;\n                let aliasPath = `${alias}.${propertyPath}`;\n                // const selection = this.expressionMap.selects.find(\n                //     (s) => s.selection === aliasPath,\n                // )\n                // if (selection) {\n                //     // this is not building correctly now???\n                //     aliasPath = this.escape(\n                //         DriverUtils.buildAlias(\n                //             this.connection.driver,\n                //             undefined,\n                //             alias,\n                //             column.databaseName,\n                //         ),\n                //     )\n                //     // selection.aliasName = aliasPath\n                // } else {\n                //     if (column.isVirtualProperty && column.query) {\n                //         aliasPath = `(${column.query(alias)})`\n                //     }\n                // }\n                // console.log(\"add sort\", selection, aliasPath, direction, nulls)\n                this.addOrderBy(aliasPath, direction, nulls);\n                // this.orderBys.push({ alias: alias + \".\" + propertyPath, direction, nulls });\n            }\n            else if (embed) {\n                this.buildOrder(order[key], metadata, alias, propertyPath);\n            }\n            else if (relation) {\n                let joinAlias = alias + \"_\" + propertyPath.replace(\".\", \"_\");\n                joinAlias = DriverUtils.buildAlias(this.connection.driver, { joiner: \"__\" }, alias, joinAlias);\n                // console.log(\"joinAlias\", joinAlias, joinAlias.length, this.connection.driver.maxAliasLength)\n                // todo: use expressionMap.joinAttributes, and create a new one using\n                //  const joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\n                const existJoin = this.joins.find((join) => join.alias === joinAlias);\n                if (!existJoin) {\n                    this.joins.push({\n                        type: \"left\",\n                        select: false,\n                        alias: joinAlias,\n                        parentAlias: alias,\n                        selection: undefined,\n                        relationMetadata: relation,\n                    });\n                }\n                this.buildOrder(order[key], relation.inverseEntityMetadata, joinAlias);\n            }\n        }\n    }\n    buildWhere(where, metadata, alias, embedPrefix) {\n        let condition = \"\";\n        // let parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n        if (Array.isArray(where)) {\n            if (where.length) {\n                condition = where\n                    .map((whereItem) => {\n                    return this.buildWhere(whereItem, metadata, alias, embedPrefix);\n                })\n                    .filter((condition) => !!condition)\n                    .map((condition) => \"(\" + condition + \")\")\n                    .join(\" OR \");\n            }\n        }\n        else {\n            let andConditions = [];\n            for (let key in where) {\n                if (where[key] === undefined || where[key] === null)\n                    continue;\n                const propertyPath = embedPrefix ? embedPrefix + \".\" + key : key;\n                const column = metadata.findColumnWithPropertyPathStrict(propertyPath);\n                const embed = metadata.findEmbeddedWithPropertyPath(propertyPath);\n                const relation = metadata.findRelationWithPropertyPath(propertyPath);\n                if (!embed && !column && !relation)\n                    throw new EntityPropertyNotFoundError(propertyPath, metadata);\n                if (column) {\n                    let aliasPath = `${alias}.${propertyPath}`;\n                    if (column.isVirtualProperty && column.query) {\n                        aliasPath = `(${column.query(alias)})`;\n                    }\n                    // const parameterName = alias + \"_\" + propertyPath.split(\".\").join(\"_\") + \"_\" + parameterIndex;\n                    // todo: we need to handle other operators as well?\n                    let parameterValue = where[key];\n                    if (InstanceChecker.isEqualOperator(where[key])) {\n                        parameterValue = where[key].value;\n                    }\n                    if (column.transformer) {\n                        parameterValue instanceof FindOperator\n                            ? parameterValue.transformValue(column.transformer)\n                            : (parameterValue =\n                                ApplyValueTransformers.transformTo(column.transformer, parameterValue));\n                    }\n                    // if (parameterValue === null) {\n                    //     andConditions.push(`${aliasPath} IS NULL`);\n                    //\n                    // } else if (parameterValue instanceof FindOperator) {\n                    //     // let parameters: any[] = [];\n                    //     // if (parameterValue.useParameter) {\n                    //     //     const realParameterValues: any[] = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];\n                    //     //     realParameterValues.forEach((realParameterValue, realParameterValueIndex) => {\n                    //     //\n                    //     //         // don't create parameters for number to prevent max number of variables issues as much as possible\n                    //     //         if (typeof realParameterValue === \"number\") {\n                    //     //             parameters.push(realParameterValue);\n                    //     //\n                    //     //         } else {\n                    //     //             this.expressionMap.nativeParameters[parameterName + realParameterValueIndex] = realParameterValue;\n                    //     //             parameterIndex++;\n                    //     //             parameters.push(this.connection.driver.createParameter(parameterName + realParameterValueIndex, parameterIndex - 1));\n                    //     //         }\n                    //     //     });\n                    //     // }\n                    //     andConditions.push(\n                    //         this.createWhereConditionExpression(this.getWherePredicateCondition(aliasPath, parameterValue))\n                    //         // parameterValue.toSql(this.connection, aliasPath, parameters));\n                    //     )\n                    //\n                    // } else {\n                    //     this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                    //     parameterIndex++;\n                    //     const parameter = this.connection.driver.createParameter(parameterName, parameterIndex - 1);\n                    //     andConditions.push(`${aliasPath} = ${parameter}`);\n                    // }\n                    andConditions.push(this.createWhereConditionExpression(this.getWherePredicateCondition(aliasPath, parameterValue)));\n                    // this.conditions.push(`${alias}.${propertyPath} = :${paramName}`);\n                    // this.expressionMap.parameters[paramName] = where[key]; // todo: handle functions and other edge cases\n                }\n                else if (embed) {\n                    const condition = this.buildWhere(where[key], metadata, alias, propertyPath);\n                    if (condition)\n                        andConditions.push(condition);\n                }\n                else if (relation) {\n                    // if all properties of where are undefined we don't need to join anything\n                    // this can happen when user defines map with conditional queries inside\n                    if (typeof where[key] === \"object\") {\n                        const allAllUndefined = Object.keys(where[key]).every((k) => where[key][k] === undefined);\n                        if (allAllUndefined) {\n                            continue;\n                        }\n                    }\n                    if (InstanceChecker.isFindOperator(where[key])) {\n                        if (where[key].type === \"moreThan\" ||\n                            where[key].type === \"lessThan\" ||\n                            where[key].type === \"moreThanOrEqual\" ||\n                            where[key].type === \"lessThanOrEqual\") {\n                            let sqlOperator = \"\";\n                            if (where[key].type === \"moreThan\") {\n                                sqlOperator = \">\";\n                            }\n                            else if (where[key].type === \"lessThan\") {\n                                sqlOperator = \"<\";\n                            }\n                            else if (where[key].type === \"moreThanOrEqual\") {\n                                sqlOperator = \">=\";\n                            }\n                            else if (where[key].type === \"lessThanOrEqual\") {\n                                sqlOperator = \"<=\";\n                            }\n                            // basically relation count functionality\n                            const qb = this.subQuery();\n                            if (relation.isManyToManyOwner) {\n                                qb.select(\"COUNT(*)\")\n                                    .from(relation.joinTableName, relation.joinTableName)\n                                    .where(relation.joinColumns\n                                    .map((column) => {\n                                    return `${relation.joinTableName}.${column.propertyName} = ${alias}.${column.referencedColumn\n                                        .propertyName}`;\n                                })\n                                    .join(\" AND \"));\n                            }\n                            else if (relation.isManyToManyNotOwner) {\n                                qb.select(\"COUNT(*)\")\n                                    .from(relation.inverseRelation.joinTableName, relation.inverseRelation.joinTableName)\n                                    .where(relation\n                                    .inverseRelation.inverseJoinColumns.map((column) => {\n                                    return `${relation.inverseRelation\n                                        .joinTableName}.${column.propertyName} = ${alias}.${column.referencedColumn\n                                        .propertyName}`;\n                                })\n                                    .join(\" AND \"));\n                            }\n                            else if (relation.isOneToMany) {\n                                qb.select(\"COUNT(*)\")\n                                    .from(relation.inverseEntityMetadata.target, relation.inverseEntityMetadata\n                                    .tableName)\n                                    .where(relation\n                                    .inverseRelation.joinColumns.map((column) => {\n                                    return `${relation\n                                        .inverseEntityMetadata\n                                        .tableName}.${column.propertyName} = ${alias}.${column.referencedColumn\n                                        .propertyName}`;\n                                })\n                                    .join(\" AND \"));\n                            }\n                            else {\n                                throw new Error(`This relation isn't supported by given find operator`);\n                            }\n                            // this\n                            //     .addSelect(qb.getSql(), relation.propertyAliasName + \"_cnt\")\n                            //     .andWhere(this.escape(relation.propertyAliasName + \"_cnt\") + \" \" + sqlOperator + \" \" + parseInt(where[key].value));\n                            this.andWhere(qb.getSql() +\n                                \" \" +\n                                sqlOperator +\n                                \" \" +\n                                parseInt(where[key].value));\n                        }\n                        else {\n                            if (relation.isManyToOne ||\n                                (relation.isOneToOne &&\n                                    relation.isOneToOneOwner)) {\n                                const aliasPath = `${alias}.${propertyPath}`;\n                                andConditions.push(this.createWhereConditionExpression(this.getWherePredicateCondition(aliasPath, where[key])));\n                            }\n                            else {\n                                throw new Error(`This relation isn't supported by given find operator`);\n                            }\n                        }\n                    }\n                    else {\n                        // const joinAlias = alias + \"_\" + relation.propertyName;\n                        let joinAlias = alias +\n                            \"_\" +\n                            relation.propertyPath.replace(\".\", \"_\");\n                        joinAlias = DriverUtils.buildAlias(this.connection.driver, { joiner: \"__\" }, alias, joinAlias);\n                        const existJoin = this.joins.find((join) => join.alias === joinAlias);\n                        if (!existJoin) {\n                            this.joins.push({\n                                type: \"left\",\n                                select: false,\n                                selection: undefined,\n                                alias: joinAlias,\n                                parentAlias: alias,\n                                relationMetadata: relation,\n                            });\n                        }\n                        const condition = this.buildWhere(where[key], relation.inverseEntityMetadata, joinAlias);\n                        if (condition) {\n                            andConditions.push(condition);\n                            // parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n                        }\n                    }\n                }\n            }\n            condition = andConditions.length\n                ? \"(\" + andConditions.join(\") AND (\") + \")\"\n                : andConditions.join(\" AND \");\n        }\n        return condition.length ? \"(\" + condition + \")\" : condition;\n    }\n}\n\n//# sourceMappingURL=SelectQueryBuilder.js.map\n","/**\n * Result object returned by UpdateQueryBuilder execution.\n */\nexport class UpdateResult {\n    constructor() {\n        /**\n         * Contains inserted entity id.\n         * Has entity-like structure (not just column database name and values).\n         */\n        // identifier: ObjectLiteral[] = [];\n        /**\n         * Generated values returned by a database.\n         * Has entity-like structure (not just column database name and values).\n         */\n        this.generatedMaps = [];\n    }\n    static from(queryResult) {\n        const result = new this();\n        result.raw = queryResult.records;\n        result.affected = queryResult.affected;\n        return result;\n    }\n}\n\n//# sourceMappingURL=UpdateResult.js.map\n","import { QueryBuilder } from \"./QueryBuilder\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { MissingDeleteDateColumnError } from \"../error/MissingDeleteDateColumnError\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SoftDeleteQueryBuilder extends QueryBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connectionOrQueryBuilder, queryRunner) {\n        super(connectionOrQueryBuilder, queryRunner);\n        this[\"@instanceof\"] = Symbol.for(\"SoftDeleteQueryBuilder\");\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        let sql = this.createUpdateExpression();\n        sql += this.createCteExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n    }\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute() {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            // call before soft remove and recover methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                if (this.expressionMap.queryType === \"soft-delete\")\n                    await queryRunner.broadcaster.broadcast(\"BeforeSoftRemove\", this.expressionMap.mainAlias.metadata);\n                else if (this.expressionMap.queryType === \"restore\")\n                    await queryRunner.broadcaster.broadcast(\"BeforeRecover\", this.expressionMap.mainAlias.metadata);\n            }\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                this.expressionMap.extraReturningColumns =\n                    returningResultsEntityUpdator.getSoftDeletionReturningColumns();\n            }\n            // execute update query\n            const [sql, parameters] = this.getQueryAndParameters();\n            const queryResult = await queryRunner.query(sql, parameters, true);\n            const updateResult = UpdateResult.from(queryResult);\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\n            }\n            // call after soft remove and recover methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                if (this.expressionMap.queryType === \"soft-delete\")\n                    await queryRunner.broadcaster.broadcast(\"AfterSoftRemove\", this.expressionMap.mainAlias.metadata);\n                else if (this.expressionMap.queryType === \"restore\")\n                    await queryRunner.broadcaster.broadcast(\"AfterRecover\", this.expressionMap.mainAlias.metadata);\n            }\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n            return updateResult;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from(entityTarget, aliasName) {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where);\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids) {\n        return this.where(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids) {\n        return this.andWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids) {\n        return this.orWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    output(output) {\n        return this.returning(output);\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"update\")) {\n            throw new ReturningStatementNotSupportedError();\n        }\n        this.expressionMap.returning = returning;\n        return this;\n    }\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort, order = \"ASC\", nulls) {\n        if (sort) {\n            if (typeof sort === \"object\") {\n                this.expressionMap.orderBys = sort;\n            }\n            else {\n                if (nulls) {\n                    this.expressionMap.orderBys = {\n                        [sort]: { order, nulls },\n                    };\n                }\n                else {\n                    this.expressionMap.orderBys = { [sort]: order };\n                }\n            }\n        }\n        else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort, order = \"ASC\", nulls) {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        }\n        else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit) {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity) {\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            throw new TypeORMError(`.whereEntity method can only be used on queries which update real entity table.`);\n        this.expressionMap.wheres = [];\n        const entities = Array.isArray(entity) ? entity : [entity];\n        entities.forEach((entity) => {\n            const entityIdMap = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new TypeORMError(`Provided entity does not have ids set, cannot perform operation.`);\n            this.orWhereInIds(entityIdMap);\n        });\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    createUpdateExpression() {\n        const metadata = this.expressionMap.mainAlias.hasMetadata\n            ? this.expressionMap.mainAlias.metadata\n            : undefined;\n        if (!metadata)\n            throw new TypeORMError(`Cannot get entity metadata for the given alias \"${this.expressionMap.mainAlias}\"`);\n        if (!metadata.deleteDateColumn) {\n            throw new MissingDeleteDateColumnError(metadata);\n        }\n        // prepare columns and values to be updated\n        const updateColumnAndValues = [];\n        switch (this.expressionMap.queryType) {\n            case \"soft-delete\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) +\n                    \" = CURRENT_TIMESTAMP\");\n                break;\n            case \"restore\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) +\n                    \" = NULL\");\n                break;\n            default:\n                throw new TypeORMError(`The queryType must be \"soft-delete\" or \"restore\"`);\n        }\n        if (metadata.versionColumn)\n            updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) +\n                \" = \" +\n                this.escape(metadata.versionColumn.databaseName) +\n                \" + 1\");\n        if (metadata.updateDateColumn)\n            updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) +\n                \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression(\"update\");\n        if (returningExpression === \"\") {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n        }\n        return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n    }\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return (\" ORDER BY \" +\n                Object.keys(orderBys)\n                    .map((columnName) => {\n                    if (typeof orderBys[columnName] === \"string\") {\n                        return (this.replacePropertyNames(columnName) +\n                            \" \" +\n                            orderBys[columnName]);\n                    }\n                    else {\n                        return (this.replacePropertyNames(columnName) +\n                            \" \" +\n                            orderBys[columnName].order +\n                            \" \" +\n                            orderBys[columnName].nulls);\n                    }\n                })\n                    .join(\", \"));\n        return \"\";\n    }\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    createLimitExpression() {\n        let limit = this.expressionMap.limit;\n        if (limit) {\n            if (DriverUtils.isMySQLFamily(this.connection.driver)) {\n                return \" LIMIT \" + limit;\n            }\n            else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n        return \"\";\n    }\n}\n\n//# sourceMappingURL=SoftDeleteQueryBuilder.js.map\n","import { QueryBuilder } from \"./QueryBuilder\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { TypeORMError } from \"../error\";\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class UpdateQueryBuilder extends QueryBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connectionOrQueryBuilder, queryRunner) {\n        super(connectionOrQueryBuilder, queryRunner);\n        this[\"@instanceof\"] = Symbol.for(\"UpdateQueryBuilder\");\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        let sql = this.createComment();\n        sql += this.createCteExpression();\n        sql += this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n    }\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute() {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            // call before updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                await queryRunner.broadcaster.broadcast(\"BeforeUpdate\", this.expressionMap.mainAlias.metadata, this.expressionMap.valuesSet);\n            }\n            let declareSql = null;\n            let selectOutputSql = null;\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            const returningColumns = [];\n            if (Array.isArray(this.expressionMap.returning) &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                for (const columnPath of this.expressionMap.returning) {\n                    returningColumns.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnPath));\n                }\n            }\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                this.expressionMap.extraReturningColumns =\n                    returningResultsEntityUpdator.getUpdationReturningColumns();\n                returningColumns.push(...this.expressionMap.extraReturningColumns.filter((c) => !returningColumns.includes(c)));\n            }\n            if (returningColumns.length > 0 &&\n                this.connection.driver.options.type === \"mssql\") {\n                declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", returningColumns);\n                selectOutputSql = `SELECT * FROM @OutputTable`;\n            }\n            // execute update query\n            const [updateSql, parameters] = this.getQueryAndParameters();\n            const statements = [declareSql, updateSql, selectOutputSql];\n            const queryResult = await queryRunner.query(statements.filter((sql) => sql != null).join(\";\\n\\n\"), parameters, true);\n            const updateResult = UpdateResult.from(queryResult);\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\n            }\n            // call after updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                await queryRunner.broadcaster.broadcast(\"AfterUpdate\", this.expressionMap.mainAlias.metadata, this.expressionMap.valuesSet);\n            }\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n            return updateResult;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Values needs to be updated.\n     */\n    set(values) {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where);\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder with a condition for the given ids.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     */\n    whereInIds(ids) {\n        return this.where(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids) {\n        return this.andWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids) {\n        return this.orWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    output(output) {\n        return this.returning(output);\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"update\")) {\n            throw new ReturningStatementNotSupportedError();\n        }\n        this.expressionMap.returning = returning;\n        return this;\n    }\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort, order = \"ASC\", nulls) {\n        if (sort) {\n            if (typeof sort === \"object\") {\n                this.expressionMap.orderBys = sort;\n            }\n            else {\n                if (nulls) {\n                    this.expressionMap.orderBys = {\n                        [sort]: { order, nulls },\n                    };\n                }\n                else {\n                    this.expressionMap.orderBys = { [sort]: order };\n                }\n            }\n        }\n        else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort, order = \"ASC\", nulls) {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        }\n        else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit) {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity) {\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            throw new TypeORMError(`.whereEntity method can only be used on queries which update real entity table.`);\n        this.expressionMap.wheres = [];\n        const entities = Array.isArray(entity) ? entity : [entity];\n        entities.forEach((entity) => {\n            const entityIdMap = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new TypeORMError(`Provided entity does not have ids set, cannot perform operation.`);\n            this.orWhereInIds(entityIdMap);\n        });\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    createUpdateExpression() {\n        const valuesSet = this.getValueSet();\n        const metadata = this.expressionMap.mainAlias.hasMetadata\n            ? this.expressionMap.mainAlias.metadata\n            : undefined;\n        // it doesn't make sense to update undefined properties, so just skip them\n        const valuesSetNormalized = {};\n        for (let key in valuesSet) {\n            if (valuesSet[key] !== undefined) {\n                valuesSetNormalized[key] = valuesSet[key];\n            }\n        }\n        // prepare columns and values to be updated\n        const updateColumnAndValues = [];\n        const updatedColumns = [];\n        if (metadata) {\n            this.createPropertyPath(metadata, valuesSetNormalized).forEach((propertyPath) => {\n                // todo: make this and other query builder to work with properly with tables without metadata\n                const columns = metadata.findColumnsWithPropertyPath(propertyPath);\n                if (columns.length <= 0) {\n                    throw new EntityPropertyNotFoundError(propertyPath, metadata);\n                }\n                columns.forEach((column) => {\n                    if (!column.isUpdate ||\n                        updatedColumns.includes(column)) {\n                        return;\n                    }\n                    updatedColumns.push(column);\n                    //\n                    let value = column.getEntityValue(valuesSetNormalized);\n                    if (column.referencedColumn &&\n                        typeof value === \"object\" &&\n                        !(value instanceof Date) &&\n                        value !== null &&\n                        !Buffer.isBuffer(value)) {\n                        value =\n                            column.referencedColumn.getEntityValue(value);\n                    }\n                    else if (!(typeof value === \"function\")) {\n                        value =\n                            this.connection.driver.preparePersistentValue(value, column);\n                    }\n                    // todo: duplication zone\n                    if (typeof value === \"function\") {\n                        // support for SQL expressions in update query\n                        updateColumnAndValues.push(this.escape(column.databaseName) +\n                            \" = \" +\n                            value());\n                    }\n                    else if ((this.connection.driver.options.type === \"sap\" ||\n                        this.connection.driver.options.type ===\n                            \"spanner\") &&\n                        value === null) {\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = NULL\");\n                    }\n                    else {\n                        if (this.connection.driver.options.type === \"mssql\") {\n                            value = this.connection.driver.parametrizeValue(column, value);\n                        }\n                        const paramName = this.createParameter(value);\n                        let expression = null;\n                        if ((DriverUtils.isMySQLFamily(this.connection.driver) ||\n                            this.connection.driver.options.type ===\n                                \"aurora-mysql\") &&\n                            this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            const useLegacy = this.connection.driver.options.legacySpatialSupport;\n                            const geomFromText = useLegacy\n                                ? \"GeomFromText\"\n                                : \"ST_GeomFromText\";\n                            if (column.srid != null) {\n                                expression = `${geomFromText}(${paramName}, ${column.srid})`;\n                            }\n                            else {\n                                expression = `${geomFromText}(${paramName})`;\n                            }\n                        }\n                        else if (DriverUtils.isPostgresFamily(this.connection.driver) &&\n                            this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                                expression = `ST_SetSRID(ST_GeomFromGeoJSON(${paramName}), ${column.srid})::${column.type}`;\n                            }\n                            else {\n                                expression = `ST_GeomFromGeoJSON(${paramName})::${column.type}`;\n                            }\n                        }\n                        else if (this.connection.driver.options.type ===\n                            \"mssql\" &&\n                            this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression =\n                                column.type +\n                                    \"::STGeomFromText(\" +\n                                    paramName +\n                                    \", \" +\n                                    (column.srid || \"0\") +\n                                    \")\";\n                        }\n                        else {\n                            expression = paramName;\n                        }\n                        updateColumnAndValues.push(this.escape(column.databaseName) +\n                            \" = \" +\n                            expression);\n                    }\n                });\n            });\n            // Don't allow calling update only with columns that are `update: false`\n            if (updateColumnAndValues.length > 0 ||\n                Object.keys(valuesSetNormalized).length === 0) {\n                if (metadata.versionColumn &&\n                    updatedColumns.indexOf(metadata.versionColumn) === -1)\n                    updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) +\n                        \" = \" +\n                        this.escape(metadata.versionColumn.databaseName) +\n                        \" + 1\");\n                if (metadata.updateDateColumn &&\n                    updatedColumns.indexOf(metadata.updateDateColumn) === -1)\n                    updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) +\n                        \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n            }\n        }\n        else {\n            Object.keys(valuesSetNormalized).map((key) => {\n                let value = valuesSetNormalized[key];\n                // todo: duplication zone\n                if (typeof value === \"function\") {\n                    // support for SQL expressions in update query\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + value());\n                }\n                else if ((this.connection.driver.options.type === \"sap\" ||\n                    this.connection.driver.options.type === \"spanner\") &&\n                    value === null) {\n                    updateColumnAndValues.push(this.escape(key) + \" = NULL\");\n                }\n                else {\n                    // we need to store array values in a special class to make sure parameter replacement will work correctly\n                    // if (value instanceof Array)\n                    //     value = new ArrayParameter(value);\n                    const paramName = this.createParameter(value);\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + paramName);\n                }\n            });\n        }\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression(\"update\");\n        if (returningExpression === \"\") {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n        }\n        return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n    }\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return (\" ORDER BY \" +\n                Object.keys(orderBys)\n                    .map((columnName) => {\n                    if (typeof orderBys[columnName] === \"string\") {\n                        return (this.replacePropertyNames(columnName) +\n                            \" \" +\n                            orderBys[columnName]);\n                    }\n                    else {\n                        return (this.replacePropertyNames(columnName) +\n                            \" \" +\n                            orderBys[columnName].order +\n                            \" \" +\n                            orderBys[columnName].nulls);\n                    }\n                })\n                    .join(\", \"));\n        return \"\";\n    }\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    createLimitExpression() {\n        let limit = this.expressionMap.limit;\n        if (limit) {\n            if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                this.connection.driver.options.type === \"aurora-mysql\") {\n                return \" LIMIT \" + limit;\n            }\n            else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n        return \"\";\n    }\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    getValueSet() {\n        if (typeof this.expressionMap.valuesSet === \"object\")\n            return this.expressionMap.valuesSet;\n        throw new UpdateValuesMissingError();\n    }\n}\n\n//# sourceMappingURL=UpdateQueryBuilder.js.map\n","import { DeleteQueryBuilder } from \"./DeleteQueryBuilder\";\nimport { InsertQueryBuilder } from \"./InsertQueryBuilder\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { RelationQueryBuilder } from \"./RelationQueryBuilder\";\nimport { SelectQueryBuilder } from \"./SelectQueryBuilder\";\nimport { SoftDeleteQueryBuilder } from \"./SoftDeleteQueryBuilder\";\nimport { UpdateQueryBuilder } from \"./UpdateQueryBuilder\";\nexport function registerQueryBuilders() {\n    QueryBuilder.registerQueryBuilderClass(\"DeleteQueryBuilder\", (qb) => new DeleteQueryBuilder(qb));\n    QueryBuilder.registerQueryBuilderClass(\"InsertQueryBuilder\", (qb) => new InsertQueryBuilder(qb));\n    QueryBuilder.registerQueryBuilderClass(\"RelationQueryBuilder\", (qb) => new RelationQueryBuilder(qb));\n    QueryBuilder.registerQueryBuilderClass(\"SelectQueryBuilder\", (qb) => new SelectQueryBuilder(qb));\n    QueryBuilder.registerQueryBuilderClass(\"SoftDeleteQueryBuilder\", (qb) => new SoftDeleteQueryBuilder(qb));\n    QueryBuilder.registerQueryBuilderClass(\"UpdateQueryBuilder\", (qb) => new UpdateQueryBuilder(qb));\n}\n\n//# sourceMappingURL=index.js.map\n","export class RandomGenerator {\n    /**\n     *  discuss at: http://locutus.io/php/sha1/\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n     * improved by: Michael White (http://getsprink.com)\n     * improved by: Kevin van Zonneveld (http://kvz.io)\n     *    input by: Brett Zamir (http://brett-zamir.me)\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\n     *      note 1: in a steaming fashion for faster and more efficient hashing\n     *   example 1: sha1('Kevin van Zonneveld')\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\n     */\n    static sha1(str) {\n        let _rotLeft = function (n, s) {\n            let t4 = (n << s) | (n >>> (32 - s));\n            return t4;\n        };\n        let _cvtHex = function (val) {\n            let str = \"\";\n            let i;\n            let v;\n            for (i = 7; i >= 0; i--) {\n                v = (val >>> (i * 4)) & 0x0f;\n                str += v.toString(16);\n            }\n            return str;\n        };\n        let blockstart;\n        let i, j;\n        let W = new Array(80);\n        let H0 = 0x67452301;\n        let H1 = 0xefcdab89;\n        let H2 = 0x98badcfe;\n        let H3 = 0x10325476;\n        let H4 = 0xc3d2e1f0;\n        let A, B, C, D, E;\n        let temp;\n        // utf8_encode\n        str = /*unescape*/ encodeURIComponent(str);\n        let strLen = str.length;\n        let wordArray = [];\n        for (i = 0; i < strLen - 3; i += 4) {\n            j =\n                (str.charCodeAt(i) << 24) |\n                    (str.charCodeAt(i + 1) << 16) |\n                    (str.charCodeAt(i + 2) << 8) |\n                    str.charCodeAt(i + 3);\n            wordArray.push(j);\n        }\n        switch (strLen % 4) {\n            case 0:\n                i = 0x080000000;\n                break;\n            case 1:\n                i = (str.charCodeAt(strLen - 1) << 24) | 0x0800000;\n                break;\n            case 2:\n                i =\n                    (str.charCodeAt(strLen - 2) << 24) |\n                        (str.charCodeAt(strLen - 1) << 16) |\n                        0x08000;\n                break;\n            case 3:\n                i =\n                    (str.charCodeAt(strLen - 3) << 24) |\n                        (str.charCodeAt(strLen - 2) << 16) |\n                        (str.charCodeAt(strLen - 1) << 8) |\n                        0x80;\n                break;\n        }\n        wordArray.push(i);\n        while (wordArray.length % 16 !== 14) {\n            wordArray.push(0);\n        }\n        wordArray.push(strLen >>> 29);\n        wordArray.push((strLen << 3) & 0x0ffffffff);\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\n            for (i = 0; i < 16; i++) {\n                W[i] = wordArray[blockstart + i];\n            }\n            for (i = 16; i <= 79; i++) {\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n            }\n            A = H0;\n            B = H1;\n            C = H2;\n            D = H3;\n            E = H4;\n            for (i = 0; i <= 19; i++) {\n                temp =\n                    (_rotLeft(A, 5) +\n                        ((B & C) | (~B & D)) +\n                        E +\n                        W[i] +\n                        0x5a827999) &\n                        0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            for (i = 20; i <= 39; i++) {\n                temp =\n                    (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ed9eba1) &\n                        0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            for (i = 40; i <= 59; i++) {\n                temp =\n                    (_rotLeft(A, 5) +\n                        ((B & C) | (B & D) | (C & D)) +\n                        E +\n                        W[i] +\n                        0x8f1bbcdc) &\n                        0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            for (i = 60; i <= 79; i++) {\n                temp =\n                    (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xca62c1d6) &\n                        0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            H0 = (H0 + A) & 0x0ffffffff;\n            H1 = (H1 + B) & 0x0ffffffff;\n            H2 = (H2 + C) & 0x0ffffffff;\n            H3 = (H3 + D) & 0x0ffffffff;\n            H4 = (H4 + E) & 0x0ffffffff;\n        }\n        temp =\n            _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\n        return temp.toLowerCase();\n    }\n}\n\n//# sourceMappingURL=RandomGenerator.js.map\n","import { RandomGenerator } from \"../util/RandomGenerator\";\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\";\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy {\n    constructor() {\n        this.nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" };\n        this.materializedPathColumnName = \"mpath\";\n    }\n    getTableName(tableOrName) {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name;\n        }\n        return tableOrName.split(\".\").pop();\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName, userSpecifiedName) {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n    }\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName) {\n        return originalClosureTableName + \"_closure\";\n    }\n    columnName(propertyName, customName, embeddedPrefixes) {\n        const name = customName || propertyName;\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n        return name;\n    }\n    relationName(propertyName) {\n        return propertyName;\n    }\n    primaryKeyName(tableOrName, columnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    uniqueConstraintName(tableOrName, columnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    relationConstraintName(tableOrName, columnNames, where) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n    defaultConstraintName(tableOrName, columnName) {\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${columnName}`;\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    foreignKeyName(tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    indexName(tableOrName, columnNames, where) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n    checkConstraintName(tableOrName, expression, isEnum) {\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n        return isEnum ? `${name}_ENUM` : name;\n    }\n    exclusionConstraintName(tableOrName, expression) {\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n    joinColumnName(relationName, referencedColumnName) {\n        return camelCase(relationName + \"_\" + referencedColumnName);\n    }\n    joinTableName(firstTableName, secondTableName, firstPropertyName, secondPropertyName) {\n        return snakeCase(firstTableName +\n            \"_\" +\n            firstPropertyName.replace(/\\./gi, \"_\") +\n            \"_\" +\n            secondTableName);\n    }\n    joinTableColumnDuplicationPrefix(columnName, index) {\n        return columnName + \"_\" + index;\n    }\n    joinTableColumnName(tableName, propertyName, columnName) {\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n    }\n    joinTableInverseColumnName(tableName, propertyName, columnName) {\n        return this.joinTableColumnName(tableName, propertyName, columnName);\n    }\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix, tableName) {\n        return prefix + tableName;\n    }\n}\n\n//# sourceMappingURL=DefaultNamingStrategy.js.map\n","/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableColumn\");\n        /**\n         * Indicates if column is NULL, or is NOT NULL in the database.\n         */\n        this.isNullable = false;\n        /**\n         * Indicates if column is auto-generated sequence.\n         */\n        this.isGenerated = false;\n        /**\n         * Indicates if column is a primary key.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if column has unique value.\n         */\n        this.isUnique = false;\n        /**\n         * Indicates if column stores array.\n         */\n        this.isArray = false;\n        /**\n         * Column type's length. Used only on some column types.\n         * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n         */\n        this.length = \"\";\n        /**\n         * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n         * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n         */\n        this.zerofill = false;\n        /**\n         * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n         */\n        this.unsigned = false;\n        if (options) {\n            this.name = options.name;\n            this.type = options.type || \"\";\n            this.length = options.length || \"\";\n            this.width = options.width;\n            this.charset = options.charset;\n            this.collation = options.collation;\n            this.precision = options.precision;\n            this.scale = options.scale;\n            this.zerofill = options.zerofill || false;\n            this.unsigned = this.zerofill ? true : options.unsigned || false;\n            this.default = options.default;\n            this.onUpdate = options.onUpdate;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.generationStrategy = options.generationStrategy;\n            this.generatedIdentity = options.generatedIdentity;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.isArray = options.isArray || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n            this.enumName = options.enumName;\n            this.primaryKeyConstraintName = options.primaryKeyConstraintName;\n            this.asExpression = options.asExpression;\n            this.generatedType = options.generatedType;\n            this.spatialFeatureType = options.spatialFeatureType;\n            this.srid = options.srid;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    clone() {\n        return new TableColumn({\n            name: this.name,\n            type: this.type,\n            length: this.length,\n            width: this.width,\n            charset: this.charset,\n            collation: this.collation,\n            precision: this.precision,\n            scale: this.scale,\n            zerofill: this.zerofill,\n            unsigned: this.unsigned,\n            enum: this.enum,\n            enumName: this.enumName,\n            primaryKeyConstraintName: this.primaryKeyConstraintName,\n            asExpression: this.asExpression,\n            generatedType: this.generatedType,\n            default: this.default,\n            onUpdate: this.onUpdate,\n            isNullable: this.isNullable,\n            isGenerated: this.isGenerated,\n            generationStrategy: this.generationStrategy,\n            generatedIdentity: this.generatedIdentity,\n            isPrimary: this.isPrimary,\n            isUnique: this.isUnique,\n            isArray: this.isArray,\n            comment: this.comment,\n            spatialFeatureType: this.spatialFeatureType,\n            srid: this.srid,\n        });\n    }\n}\n\n//# sourceMappingURL=TableColumn.js.map\n","/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableIndex\");\n        /**\n         * Columns included in this index.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.isUnique = !!options.isUnique;\n        this.isSpatial = !!options.isSpatial;\n        this.isConcurrent = !!options.isConcurrent;\n        this.isFulltext = !!options.isFulltext;\n        this.isNullFiltered = !!options.isNullFiltered;\n        this.parser = options.parser;\n        this.where = options.where ? options.where : \"\";\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone() {\n        return new TableIndex({\n            name: this.name,\n            columnNames: [...this.columnNames],\n            isUnique: this.isUnique,\n            isSpatial: this.isSpatial,\n            isConcurrent: this.isConcurrent,\n            isFulltext: this.isFulltext,\n            isNullFiltered: this.isNullFiltered,\n            parser: this.parser,\n            where: this.where,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata) {\n        return new TableIndex({\n            name: indexMetadata.name,\n            columnNames: indexMetadata.columns.map((column) => column.databaseName),\n            isUnique: indexMetadata.isUnique,\n            isSpatial: indexMetadata.isSpatial,\n            isConcurrent: indexMetadata.isConcurrent,\n            isFulltext: indexMetadata.isFulltext,\n            isNullFiltered: indexMetadata.isNullFiltered,\n            parser: indexMetadata.parser,\n            where: indexMetadata.where,\n        });\n    }\n}\n\n//# sourceMappingURL=TableIndex.js.map\n","/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableForeignKey\");\n        /**\n         * Column names which included by this foreign key.\n         */\n        this.columnNames = [];\n        /**\n         * Column names which included by this foreign key.\n         */\n        this.referencedColumnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.referencedColumnNames = options.referencedColumnNames;\n        this.referencedDatabase = options.referencedDatabase;\n        this.referencedSchema = options.referencedSchema;\n        this.referencedTableName = options.referencedTableName;\n        this.onDelete = options.onDelete;\n        this.onUpdate = options.onUpdate;\n        this.deferrable = options.deferrable;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone() {\n        return new TableForeignKey({\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedDatabase: this.referencedDatabase,\n            referencedSchema: this.referencedSchema,\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(metadata, driver) {\n        return new TableForeignKey({\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedDatabase: metadata.referencedEntityMetadata.database,\n            referencedSchema: metadata.referencedEntityMetadata.schema,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        });\n    }\n}\n\n//# sourceMappingURL=TableForeignKey.js.map\n","export class TableUtils {\n    static createTableColumnOptions(columnMetadata, driver) {\n        return {\n            name: columnMetadata.databaseName,\n            length: driver.getColumnLength(columnMetadata),\n            width: columnMetadata.width,\n            charset: columnMetadata.charset,\n            collation: columnMetadata.collation,\n            precision: columnMetadata.precision,\n            scale: columnMetadata.scale,\n            zerofill: columnMetadata.zerofill,\n            unsigned: columnMetadata.unsigned,\n            asExpression: columnMetadata.asExpression,\n            generatedType: columnMetadata.generatedType,\n            default: driver.normalizeDefault(columnMetadata),\n            onUpdate: columnMetadata.onUpdate,\n            comment: columnMetadata.comment,\n            isGenerated: columnMetadata.isGenerated,\n            generationStrategy: columnMetadata.generationStrategy,\n            generatedIdentity: columnMetadata.generatedIdentity,\n            isNullable: columnMetadata.isNullable,\n            type: driver.normalizeType(columnMetadata),\n            isPrimary: columnMetadata.isPrimary,\n            isUnique: driver.normalizeIsUnique(columnMetadata),\n            isArray: columnMetadata.isArray || false,\n            enum: columnMetadata.enum\n                ? columnMetadata.enum.map((val) => val + \"\")\n                : columnMetadata.enum,\n            enumName: columnMetadata.enumName,\n            primaryKeyConstraintName: columnMetadata.primaryKeyConstraintName,\n            spatialFeatureType: columnMetadata.spatialFeatureType,\n            srid: columnMetadata.srid,\n        };\n    }\n}\n\n//# sourceMappingURL=TableUtils.js.map\n","/**\n * Database's table unique constraint stored in this class.\n */\nexport class TableUnique {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableUnique\");\n        /**\n         * Columns that contains this constraint.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.deferrable = options.deferrable;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone() {\n        return new TableUnique({\n            name: this.name,\n            columnNames: [...this.columnNames],\n            deferrable: this.deferrable,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates unique from the unique metadata object.\n     */\n    static create(uniqueMetadata) {\n        return new TableUnique({\n            name: uniqueMetadata.name,\n            columnNames: uniqueMetadata.columns.map((column) => column.databaseName),\n            deferrable: uniqueMetadata.deferrable,\n        });\n    }\n}\n\n//# sourceMappingURL=TableUnique.js.map\n","/**\n * Database's table check constraint stored in this class.\n */\nexport class TableCheck {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableCheck\");\n        /**\n         * Column that contains this constraint.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.expression = options.expression;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone() {\n        return new TableCheck({\n            name: this.name,\n            columnNames: this.columnNames ? [...this.columnNames] : [],\n            expression: this.expression,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates checks from the check metadata object.\n     */\n    static create(checkMetadata) {\n        return new TableCheck({\n            name: checkMetadata.name,\n            expression: checkMetadata.expression,\n        });\n    }\n}\n\n//# sourceMappingURL=TableCheck.js.map\n","/**\n * Database's table exclusion constraint stored in this class.\n */\nexport class TableExclusion {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableExclusion\");\n        this.name = options.name;\n        this.expression = options.expression;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone() {\n        return new TableExclusion({\n            name: this.name,\n            expression: this.expression,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates exclusions from the exclusion metadata object.\n     */\n    static create(exclusionMetadata) {\n        return new TableExclusion({\n            name: exclusionMetadata.name,\n            expression: exclusionMetadata.expression,\n        });\n    }\n}\n\n//# sourceMappingURL=TableExclusion.js.map\n","import { TableColumn } from \"./TableColumn\";\nimport { TableIndex } from \"./TableIndex\";\nimport { TableForeignKey } from \"./TableForeignKey\";\nimport { TableUtils } from \"../util/TableUtils\";\nimport { TableUnique } from \"./TableUnique\";\nimport { TableCheck } from \"./TableCheck\";\nimport { TableExclusion } from \"./TableExclusion\";\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"Table\");\n        /**\n         * Table columns.\n         */\n        this.columns = [];\n        /**\n         * Table indices.\n         */\n        this.indices = [];\n        /**\n         * Table foreign keys.\n         */\n        this.foreignKeys = [];\n        /**\n         * Table unique constraints.\n         */\n        this.uniques = [];\n        /**\n         * Table check constraints.\n         */\n        this.checks = [];\n        /**\n         * Table exclusion constraints.\n         */\n        this.exclusions = [];\n        /**\n         * Indicates if table was just created.\n         * This is needed, for example to check if we need to skip primary keys creation\n         * for new tables.\n         */\n        this.justCreated = false;\n        /**\n         * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n         */\n        this.withoutRowid = false;\n        if (options) {\n            this.database = options.database;\n            this.schema = options.schema;\n            this.name = options.name;\n            if (options.columns)\n                this.columns = options.columns.map((column) => new TableColumn(column));\n            if (options.indices)\n                this.indices = options.indices.map((index) => new TableIndex(index));\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map((foreignKey) => new TableForeignKey({\n                    ...foreignKey,\n                    referencedDatabase: foreignKey?.referencedDatabase ||\n                        options.database,\n                    referencedSchema: foreignKey?.referencedSchema || options.schema,\n                }));\n            if (options.uniques)\n                this.uniques = options.uniques.map((unique) => new TableUnique(unique));\n            if (options.checks)\n                this.checks = options.checks.map((check) => new TableCheck(check));\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map((exclusion) => new TableExclusion(exclusion));\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated;\n            if (options.withoutRowid)\n                this.withoutRowid = options.withoutRowid;\n            this.engine = options.engine;\n            this.comment = options.comment;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    get primaryColumns() {\n        return this.columns.filter((column) => column.isPrimary);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone() {\n        return new Table({\n            schema: this.schema,\n            database: this.database,\n            name: this.name,\n            columns: this.columns.map((column) => column.clone()),\n            indices: this.indices.map((constraint) => constraint.clone()),\n            foreignKeys: this.foreignKeys.map((constraint) => constraint.clone()),\n            uniques: this.uniques.map((constraint) => constraint.clone()),\n            checks: this.checks.map((constraint) => constraint.clone()),\n            exclusions: this.exclusions.map((constraint) => constraint.clone()),\n            justCreated: this.justCreated,\n            withoutRowid: this.withoutRowid,\n            engine: this.engine,\n            comment: this.comment,\n        });\n    }\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column) {\n        this.columns.push(column);\n    }\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column) {\n        const foundColumn = this.columns.find((c) => c.name === column.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint) {\n        this.uniques.push(uniqueConstraint);\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find((column) => column.name === uniqueConstraint.columnNames[0]);\n            if (uniqueColumn)\n                uniqueColumn.isUnique = true;\n        }\n    }\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique) {\n        const foundUnique = this.uniques.find((unique) => unique.name === removedUnique.name);\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find((column) => column.name === foundUnique.columnNames[0]);\n                if (uniqueColumn)\n                    uniqueColumn.isUnique = false;\n            }\n        }\n    }\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint) {\n        this.checks.push(checkConstraint);\n    }\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck) {\n        const foundCheck = this.checks.find((check) => check.name === removedCheck.name);\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1);\n        }\n    }\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint) {\n        this.exclusions.push(exclusionConstraint);\n    }\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion) {\n        const foundExclusion = this.exclusions.find((exclusion) => exclusion.name === removedExclusion.name);\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n        }\n    }\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey) {\n        this.foreignKeys.push(foreignKey);\n    }\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey) {\n        const fk = this.foreignKeys.find((foreignKey) => foreignKey.name === removedForeignKey.name);\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n    /**\n     * Adds index.\n     */\n    addIndex(index, isMysql = false) {\n        this.indices.push(index);\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find((c) => c.name === index.columnNames[0]);\n            if (column)\n                column.isUnique = true;\n        }\n    }\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex, isMysql = false) {\n        const index = this.indices.find((index) => index.name === tableIndex.name);\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find((c) => c.name === index.columnNames[0]);\n                if (column)\n                    column.isUnique = this.indices.some((ind) => ind.columnNames.length === 1 &&\n                        ind.columnNames[0] === column.name &&\n                        !!index.isUnique);\n            }\n        }\n    }\n    findColumnByName(name) {\n        return this.columns.find((column) => column.name === name);\n    }\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column) {\n        return this.indices.filter((index) => {\n            return !!index.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column) {\n        return this.foreignKeys.filter((foreignKey) => {\n            return !!foreignKey.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column) {\n        return this.uniques.filter((unique) => {\n            return !!unique.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column) {\n        return this.checks.filter((check) => {\n            return !!check.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata, driver) {\n        const database = entityMetadata.database === driver.database\n            ? undefined\n            : entityMetadata.database;\n        const schema = entityMetadata.schema === driver.options.schema\n            ? undefined\n            : entityMetadata.schema;\n        const options = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(entityMetadata.tableName, schema, database),\n            withoutRowid: entityMetadata.withoutRowid,\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter((column) => column && !column.isVirtualProperty)\n                .map((column) => TableUtils.createTableColumnOptions(column, driver)),\n            indices: entityMetadata.indices\n                .filter((index) => index.synchronize === true)\n                .map((index) => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map((unique) => TableUnique.create(unique)),\n            checks: entityMetadata.checks.map((check) => TableCheck.create(check)),\n            exclusions: entityMetadata.exclusions.map((exclusion) => TableExclusion.create(exclusion)),\n            comment: entityMetadata.comment,\n        };\n        return new Table(options);\n    }\n}\n\n//# sourceMappingURL=Table.js.map\n","/**\n * Represents entity of the migration in the database.\n */\nexport class Migration {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(id, timestamp, name, instance, transaction) {\n        this.id = id;\n        this.timestamp = timestamp;\n        this.name = name;\n        this.instance = instance;\n        this.transaction = transaction;\n    }\n}\n\n//# sourceMappingURL=Migration.js.map\n","/**\n * Sql server driver requires parameter types to be specified fo input parameters used in the query.\n *\n * @see https://github.com/patriksimek/node-mssql#data-types\n */\nexport class MssqlParameter {\n    constructor(value, type, ...params) {\n        this.value = value;\n        this.type = type;\n        this[\"@instanceof\"] = Symbol.for(\"MssqlParameter\");\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        this.params = [];\n        this.params = params || [];\n    }\n}\n\n//# sourceMappingURL=MssqlParameter.js.map\n","import { Table } from \"../schema-builder/table/Table\";\nimport { Migration } from \"./Migration\";\nimport { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\";\nimport { ForbiddenTransactionModeOverrideError, TypeORMError } from \"../error\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryRunner) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates how migrations should be run in transactions.\n         *   all: all migrations are run in a single transaction\n         *   none: all migrations are run without a transaction\n         *   each: each migration is run in a separate transaction\n         */\n        this.transaction = \"all\";\n        const { schema } = this.connection.driver.options;\n        const database = this.connection.driver.database;\n        this.migrationsDatabase = database;\n        this.migrationsSchema = schema;\n        this.migrationsTableName =\n            connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, schema, database);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Tries to execute a single migration given.\n     */\n    async executeMigration(migration) {\n        return this.withQueryRunner(async (queryRunner) => {\n            await this.createMigrationsTableIfNotExist(queryRunner);\n            // create typeorm_metadata table if it's not created yet\n            const schemaBuilder = this.connection.driver.createSchemaBuilder();\n            if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\n                await schemaBuilder.createMetadataTableIfNecessary(queryRunner);\n            }\n            await queryRunner.beforeMigration();\n            await migration.instance.up(queryRunner);\n            await queryRunner.afterMigration();\n            await this.insertExecutedMigration(queryRunner, migration);\n            return migration;\n        });\n    }\n    /**\n     * Returns an array of all migrations.\n     */\n    async getAllMigrations() {\n        return Promise.resolve(this.getMigrations());\n    }\n    /**\n     * Returns an array of all executed migrations.\n     */\n    async getExecutedMigrations() {\n        return this.withQueryRunner(async (queryRunner) => {\n            await this.createMigrationsTableIfNotExist(queryRunner);\n            return await this.loadExecutedMigrations(queryRunner);\n        });\n    }\n    /**\n     * Returns an array of all pending migrations.\n     */\n    async getPendingMigrations() {\n        const allMigrations = await this.getAllMigrations();\n        const executedMigrations = await this.getExecutedMigrations();\n        return allMigrations.filter((migration) => !executedMigrations.find((executedMigration) => executedMigration.name === migration.name));\n    }\n    /**\n     * Inserts an executed migration.\n     */\n    insertMigration(migration) {\n        return this.withQueryRunner((q) => this.insertExecutedMigration(q, migration));\n    }\n    /**\n     * Deletes an executed migration.\n     */\n    deleteMigration(migration) {\n        return this.withQueryRunner((q) => this.deleteExecutedMigration(q, migration));\n    }\n    /**\n     * Lists all migrations and whether they have been executed or not\n     * returns true if there are unapplied migrations\n     */\n    async showMigrations() {\n        let hasUnappliedMigrations = false;\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n        for (const migration of allMigrations) {\n            const executedMigration = executedMigrations.find((executedMigration) => executedMigration.name === migration.name);\n            if (executedMigration) {\n                this.connection.logger.logSchemaBuild(`[X] ${executedMigration.id} ${migration.name}`);\n            }\n            else {\n                hasUnappliedMigrations = true;\n                this.connection.logger.logSchemaBuild(`[ ] ${migration.name}`);\n            }\n        }\n        // if query runner was created by us then release it\n        if (!this.queryRunner) {\n            await queryRunner.release();\n        }\n        return hasUnappliedMigrations;\n    }\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations() {\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // create migrations table if it's not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // create the typeorm_metadata table if it's not created yet\n        const schemaBuilder = this.connection.driver.createSchemaBuilder();\n        if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\n            await schemaBuilder.createMetadataTableIfNecessary(queryRunner);\n        }\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n        // variable to store all migrations we did successfully\n        const successMigrations = [];\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter((migration) => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find((executedMigration) => executedMigration.name === migration.name);\n            if (executedMigration)\n                return false;\n            // migration is new and not executed. now check if its timestamp is correct\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n            //     throw new TypeORMError(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.logSchemaBuild(`No migrations are pending`);\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n            return [];\n        }\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${allMigrations.length} migrations were found in the source code.`);\n        if (lastTimeExecutedMigration)\n            this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`${pendingMigrations.length} migrations are new migrations must be executed.`);\n        if (this.transaction === \"all\") {\n            // If we desire to run all migrations in a single transaction\n            // but there is a migration that explicitly overrides the transaction mode\n            // then we have to fail since we cannot properly resolve that intent\n            // In theory we could support overrides that are set to `true`,\n            // however to keep the interface more rigid, we fail those too\n            const migrationsOverridingTransactionMode = pendingMigrations.filter((migration) => !(migration.instance?.transaction === undefined));\n            if (migrationsOverridingTransactionMode.length > 0) {\n                const error = new ForbiddenTransactionModeOverrideError(migrationsOverridingTransactionMode);\n                this.connection.logger.logMigration(`Migrations failed, error: ${error.message}`);\n                throw error;\n            }\n        }\n        // Set the per-migration defaults for the transaction mode\n        // so that we have one centralized place that controls this behavior\n        // When transaction mode is `each` the default is to run in a transaction\n        // When transaction mode is `none` the default is to not run in a transaction\n        // When transaction mode is `all` the default is to not run in a transaction\n        // since all the migrations are already running in one single transaction\n        const txModeDefault = {\n            each: true,\n            none: false,\n            all: false,\n        }[this.transaction];\n        for (const migration of pendingMigrations) {\n            if (migration.instance) {\n                const instanceTx = migration.instance.transaction;\n                if (instanceTx === undefined) {\n                    migration.transaction = txModeDefault;\n                }\n                else {\n                    migration.transaction = instanceTx;\n                }\n            }\n        }\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction === \"all\" && !queryRunner.isTransactionActive) {\n            await queryRunner.beforeMigration();\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n        // run all pending migrations in a sequence\n        try {\n            for (const migration of pendingMigrations) {\n                if (this.fake) {\n                    // directly insert migration record into the database if it is fake\n                    await this.insertExecutedMigration(queryRunner, migration);\n                    // nothing else needs to be done, continue to next migration\n                    continue;\n                }\n                if (migration.transaction && !queryRunner.isTransactionActive) {\n                    await queryRunner.beforeMigration();\n                    await queryRunner.startTransaction();\n                    transactionStartedByUs = true;\n                }\n                await migration\n                    .instance.up(queryRunner)\n                    .catch((error) => {\n                    // informative log about migration failure\n                    this.connection.logger.logMigration(`Migration \"${migration.name}\" failed, error: ${error?.message}`);\n                    throw error;\n                })\n                    .then(async () => {\n                    // now when migration is executed we need to insert record about it into the database\n                    await this.insertExecutedMigration(queryRunner, migration);\n                    // commit transaction if we started it\n                    if (migration.transaction && transactionStartedByUs) {\n                        await queryRunner.commitTransaction();\n                        await queryRunner.afterMigration();\n                    }\n                })\n                    .then(() => {\n                    // informative log about migration success\n                    successMigrations.push(migration);\n                    this.connection.logger.logSchemaBuild(`Migration ${migration.name} has been ${this.fake ? \"(fake)\" : \"\"} executed successfully.`);\n                });\n            }\n            // commit transaction if we started it\n            if (this.transaction === \"all\" && transactionStartedByUs) {\n                await queryRunner.commitTransaction();\n                await queryRunner.afterMigration();\n            }\n        }\n        catch (err) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw err;\n        }\n        finally {\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n        return successMigrations;\n    }\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration() {\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // create migrations table if it's not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // create typeorm_metadata table if it's not created yet\n        const schemaBuilder = this.connection.driver.createSchemaBuilder();\n        if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\n            await schemaBuilder.createMetadataTableIfNecessary(queryRunner);\n        }\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.logSchemaBuild(`No migrations were found in the database. Nothing to revert!`);\n            return;\n        }\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find((migration) => migration.name === lastTimeExecutedMigration.name);\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new TypeORMError(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp).toString()}.`);\n        this.connection.logger.logSchemaBuild(`Now reverting it...`);\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction !== \"none\" && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n        try {\n            if (!this.fake) {\n                await queryRunner.beforeMigration();\n                await migrationToRevert.instance.down(queryRunner);\n                await queryRunner.afterMigration();\n            }\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert);\n            this.connection.logger.logSchemaBuild(`Migration ${migrationToRevert.name} has been ${this.fake ? \"(fake)\" : \"\"} reverted successfully.`);\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n        }\n        catch (err) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw err;\n        }\n        finally {\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    async createMigrationsTableIfNotExist(queryRunner) {\n        // If driver is mongo no need to create\n        if (this.connection.driver.options.type === \"mongodb\") {\n            return;\n        }\n        const tableExist = await queryRunner.hasTable(this.migrationsTable); // todo: table name should be configurable\n        if (!tableExist) {\n            await queryRunner.createTable(new Table({\n                database: this.migrationsDatabase,\n                schema: this.migrationsSchema,\n                name: this.migrationsTable,\n                columns: [\n                    {\n                        name: \"id\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .migrationId,\n                        }),\n                        isGenerated: true,\n                        generationStrategy: \"increment\",\n                        isPrimary: true,\n                        isNullable: false,\n                    },\n                    {\n                        name: \"timestamp\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .migrationTimestamp,\n                        }),\n                        isPrimary: false,\n                        isNullable: false,\n                    },\n                    {\n                        name: \"name\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .migrationName,\n                        }),\n                        isNullable: false,\n                    },\n                ],\n            }));\n        }\n    }\n    /**\n     * Loads all migrations that were executed and saved into the database (sorts by id).\n     */\n    async loadExecutedMigrations(queryRunner) {\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const mongoRunner = queryRunner;\n            return mongoRunner\n                .cursor(this.migrationsTableName, {})\n                .sort({ _id: -1 })\n                .toArray();\n        }\n        else {\n            const migrationsRaw = await this.connection.manager\n                .createQueryBuilder(queryRunner)\n                .select()\n                .orderBy(this.connection.driver.escape(\"id\"), \"DESC\")\n                .from(this.migrationsTable, this.migrationsTableName)\n                .getRawMany();\n            return migrationsRaw.map((migrationRaw) => {\n                return new Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n            });\n        }\n    }\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    getMigrations() {\n        const migrations = this.connection.migrations.map((migration) => {\n            const migrationClassName = migration.name || migration.constructor.name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13), 10);\n            if (!migrationTimestamp || isNaN(migrationTimestamp)) {\n                throw new TypeORMError(`${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`);\n            }\n            return new Migration(undefined, migrationTimestamp, migrationClassName, migration);\n        });\n        this.checkForDuplicateMigrations(migrations);\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n    checkForDuplicateMigrations(migrations) {\n        const migrationNames = migrations.map((migration) => migration.name);\n        const duplicates = Array.from(new Set(migrationNames.filter((migrationName, index) => migrationNames.indexOf(migrationName) < index)));\n        if (duplicates.length > 0) {\n            throw Error(`Duplicate migrations: ${duplicates.join(\", \")}`);\n        }\n    }\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    getLatestTimestampMigration(migrations) {\n        const sortedMigrations = migrations\n            .map((migration) => migration)\n            .sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n    /**\n     * Finds the latest migration in the given array of migrations.\n     * PRE: Migration array must be sorted by descending id.\n     */\n    getLatestExecutedMigration(sortedMigrations) {\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    async insertExecutedMigration(queryRunner, migration) {\n        const values = {};\n        if (this.connection.driver.options.type === \"mssql\") {\n            values[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({\n                type: this.connection.driver.mappedDataTypes\n                    .migrationTimestamp,\n            }));\n            values[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({\n                type: this.connection.driver.mappedDataTypes.migrationName,\n            }));\n        }\n        else {\n            values[\"timestamp\"] = migration.timestamp;\n            values[\"name\"] = migration.name;\n        }\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const mongoRunner = queryRunner;\n            await mongoRunner.databaseConnection\n                .db(this.connection.driver.database)\n                .collection(this.migrationsTableName)\n                .insertOne(values);\n        }\n        else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb\n                .insert()\n                .into(this.migrationsTable)\n                .values(values)\n                .execute();\n        }\n    }\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    async deleteExecutedMigration(queryRunner, migration) {\n        const conditions = {};\n        if (this.connection.driver.options.type === \"mssql\") {\n            conditions[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({\n                type: this.connection.driver.mappedDataTypes\n                    .migrationTimestamp,\n            }));\n            conditions[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({\n                type: this.connection.driver.mappedDataTypes.migrationName,\n            }));\n        }\n        else {\n            conditions[\"timestamp\"] = migration.timestamp;\n            conditions[\"name\"] = migration.name;\n        }\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const mongoRunner = queryRunner;\n            await mongoRunner.databaseConnection\n                .db(this.connection.driver.database)\n                .collection(this.migrationsTableName)\n                .deleteOne(conditions);\n        }\n        else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb\n                .delete()\n                .from(this.migrationsTable)\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\n                .andWhere(`${qb.escape(\"name\")} = :name`)\n                .setParameters(conditions)\n                .execute();\n        }\n    }\n    async withQueryRunner(callback) {\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            return await callback(queryRunner);\n        }\n        finally {\n            if (!this.queryRunner) {\n                await queryRunner.release();\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=MigrationExecutor.js.map\n","/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\n/**\n * A simple dependency graph\n */\nimport { TypeORMError } from \"../error\";\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges, leavesOnly, result) {\n    let currentPath = [];\n    let visited = {};\n    return function DFS(currentNode) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node) {\n            if (!visited[node]) {\n                DFS(node);\n            }\n            else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new TypeORMError(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) &&\n            result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\nexport class DepGraph {\n    constructor() {\n        this.nodes = {};\n        this.outgoingEdges = {}; // Node -> [Dependency Node]\n        this.incomingEdges = {}; // Node -> [Dependant Node]\n    }\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    addNode(node, data) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            }\n            else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    }\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    removeNode(node) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key) {\n                    const idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * Check if a node exists in the graph\n     */\n    hasNode(node) {\n        return this.nodes.hasOwnProperty(node);\n    }\n    /**\n     * Get the data associated with a node name\n     */\n    getNodeData(node) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        }\n        else {\n            throw new TypeORMError(`Node does not exist: ${node}`);\n        }\n    }\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    setNodeData(node, data) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        }\n        else {\n            throw new TypeORMError(`Node does not exist: ${node}`);\n        }\n    }\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    addDependency(from, to) {\n        if (!this.hasNode(from)) {\n            throw new TypeORMError(`Node does not exist: ${from}`);\n        }\n        if (!this.hasNode(to)) {\n            throw new TypeORMError(`Node does not exist: ${to}`);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    }\n    /**\n     * Remove a dependency between two nodes.\n     */\n    removeDependency(from, to) {\n        let idx;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    }\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    dependenciesOf(node, leavesOnly) {\n        if (this.hasNode(node)) {\n            let result = [];\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new TypeORMError(`Node does not exist: ${node}`);\n        }\n    }\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    dependantsOf(node, leavesOnly) {\n        if (this.hasNode(node)) {\n            let result = [];\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new TypeORMError(`Node does not exist: ${node}`);\n        }\n    }\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    overallOrder(leavesOnly) {\n        let self = this;\n        let result = [];\n        let keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        }\n        else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n) {\n                CycleDFS(n);\n            });\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS(n);\n            });\n            return result;\n        }\n    }\n}\n\n//# sourceMappingURL=DepGraph.js.map\n","import { MissingPrimaryColumnError } from \"../error/MissingPrimaryColumnError\";\nimport { CircularRelationsError } from \"../error/CircularRelationsError\";\nimport { DepGraph } from \"../util/DepGraph\";\nimport { DataTypeNotSupportedError } from \"../error/DataTypeNotSupportedError\";\nimport { NoConnectionOptionError } from \"../error/NoConnectionOptionError\";\nimport { InitializedRelationError } from \"../error/InitializedRelationError\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas, driver) {\n        entityMetadatas.forEach((entityMetadata) => this.validate(entityMetadata, entityMetadatas, driver));\n        this.validateDependencies(entityMetadatas);\n        this.validateEagerRelations(entityMetadatas);\n    }\n    /**\n     * Validates given entity metadata.\n     */\n    validate(entityMetadata, allEntityMetadatas, driver) {\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n        // if entity has multiple primary keys and uses custom constraint name,\n        // then all primary keys should have the same constraint name\n        if (entityMetadata.primaryColumns.length > 1) {\n            const areConstraintNamesEqual = entityMetadata.primaryColumns.every((columnMetadata, i, columnMetadatas) => columnMetadata.primaryKeyConstraintName ===\n                columnMetadatas[0].primaryKeyConstraintName);\n            if (!areConstraintNamesEqual) {\n                throw new TypeORMError(`Entity ${entityMetadata.name} has multiple primary columns with different constraint names. Constraint names should be the equal.`);\n            }\n        }\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritancePattern === \"STI\" ||\n            entityMetadata.tableType === \"entity-child\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new TypeORMError(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`);\n            if (typeof entityMetadata.discriminatorValue === \"undefined\")\n                throw new TypeORMError(`Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`);\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find((metadata) => {\n                return (metadata !== entityMetadata &&\n                    (metadata.inheritancePattern === \"STI\" ||\n                        metadata.tableType === \"entity-child\") &&\n                    metadata.tableName === entityMetadata.tableName &&\n                    metadata.discriminatorValue ===\n                        entityMetadata.discriminatorValue &&\n                    metadata.inheritanceTree.some((parent) => entityMetadata.inheritanceTree.indexOf(parent) !== -1));\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new TypeORMError(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`);\n        }\n        entityMetadata.relationCounts.forEach((relationCount) => {\n            if (relationCount.relation.isManyToOne ||\n                relationCount.relation.isOneToOne)\n                throw new TypeORMError(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\n        });\n        if (!(driver.options.type === \"mongodb\")) {\n            entityMetadata.columns\n                .filter((column) => !column.isVirtualProperty)\n                .forEach((column) => {\n                const normalizedColumn = driver.normalizeType(column);\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) ===\n                    -1)\n                    throw new DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n                if (column.length &&\n                    driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)\n                    throw new TypeORMError(`Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`);\n                if (column.type === \"enum\" &&\n                    !column.enum &&\n                    !column.enumName)\n                    throw new TypeORMError(`Column \"${column.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as enum, but missing \"enum\" or \"enumName\" properties.`);\n            });\n        }\n        if (DriverUtils.isMySQLFamily(driver) ||\n            driver.options.type === \"aurora-mysql\") {\n            const generatedColumns = entityMetadata.columns.filter((column) => column.isGenerated && column.generationStrategy !== \"uuid\");\n            if (generatedColumns.length > 1)\n                throw new TypeORMError(`Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`);\n        }\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (DriverUtils.isMySQLFamily(driver)) {\n            const metadatasWithDatabase = allEntityMetadatas.filter((metadata) => metadata.database);\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError(\"database\");\n        }\n        if (driver.options.type === \"mssql\") {\n            const charsetColumns = entityMetadata.columns.filter((column) => column.charset);\n            if (charsetColumns.length > 1)\n                throw new TypeORMError(`Character set specifying is not supported in Sql Server`);\n        }\n        // Postgres supports only STORED generated columns.\n        if (driver.options.type === \"postgres\") {\n            const virtualColumn = entityMetadata.columns.find((column) => column.asExpression &&\n                (!column.generatedType ||\n                    column.generatedType === \"VIRTUAL\"));\n            if (virtualColumn)\n                throw new TypeORMError(`Column \"${virtualColumn.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as VIRTUAL, but Postgres supports only STORED generated columns.`);\n        }\n        // check if relations are all without initialized properties\n        const entityInstance = entityMetadata.create(undefined, {\n            fromDeserializer: true,\n        });\n        entityMetadata.relations.forEach((relation) => {\n            if (relation.isManyToMany || relation.isOneToMany) {\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false)\n                    return;\n                // get entity relation value and check if its an array\n                const relationInitializedValue = relation.getEntityValue(entityInstance);\n                if (Array.isArray(relationInitializedValue))\n                    throw new InitializedRelationError(relation);\n            }\n        });\n        // validate relations\n        entityMetadata.relations.forEach((relation) => {\n            // check OnDeleteTypes\n            if (driver.supportedOnDeleteTypes &&\n                relation.onDelete &&\n                !driver.supportedOnDeleteTypes.includes(relation.onDelete)) {\n                throw new TypeORMError(`OnDeleteType \"${relation.onDelete}\" is not supported for ${driver.options.type}!`);\n            }\n            // check OnUpdateTypes\n            if (driver.supportedOnUpdateTypes &&\n                relation.onUpdate &&\n                !driver.supportedOnUpdateTypes.includes(relation.onUpdate)) {\n                throw new TypeORMError(`OnUpdateType \"${relation.onUpdate}\" is not valid for ${driver.options.type}!`);\n            }\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new TypeORMError(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new TypeORMError(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n        });\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach((relation) => {\n            const isCircularCascadeRemove = relation.isCascadeRemove &&\n                relation.inverseRelation &&\n                relation.inverseRelation.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new TypeORMError(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` +\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n        entityMetadata.eagerRelations.forEach((relation) => { });\n    }\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    validateDependencies(entityMetadatas) {\n        const graph = new DepGraph();\n        entityMetadatas.forEach((entityMetadata) => {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.relationsWithJoinColumns\n                .filter((relation) => !relation.isNullable)\n                .forEach((relation) => {\n                graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n            });\n        });\n        try {\n            graph.overallOrder();\n        }\n        catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    }\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    validateEagerRelations(entityMetadatas) {\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.eagerRelations.forEach((relation) => {\n                if (relation.inverseRelation &&\n                    relation.inverseRelation.isEager)\n                    throw new TypeORMError(`Circular eager relations are disallowed. ` +\n                        `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` +\n                        `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` +\n                        ` Remove \"eager: true\" from one side of the relation.`);\n            });\n        });\n    }\n}\n\n//# sourceMappingURL=EntityMetadataValidator.js.map\n","/**\n * Dummy driver classes for replacement via `package.json` in browser builds.\n * Using those classes reduces the build size by one third.\n *\n * If we don't include those dummy classes (and just disable the driver import\n * with `false` in `package.json`) typeorm will throw an error on runtime and\n * during webpack builds even if those driver are not used.\n */\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoQueryRunner {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoEntityManager {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MongoRepository {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class PostgresDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class AuroraMysqlDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class CockroachDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class AuroraPostgresDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class SqlServerDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class SapDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class MysqlDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class OracleDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class SqliteDriver {\n}\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nexport class BetterSqlite3Driver {\n}\n\n//# sourceMappingURL=BrowserDisabledDriversDummy.js.map\n","/**\n * Provides utilities for manipulating tree structures.\n *\n */\nexport class TreeRepositoryUtils {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    static createRelationMaps(manager, metadata, alias, rawResults) {\n        return rawResults.map((rawResult) => {\n            const joinColumn = metadata.treeParentRelation.joinColumns[0];\n            const referencedColumn = joinColumn.referencedColumn ?? metadata.primaryColumns[0];\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n            const referencedColumnName = referencedColumn.givenDatabaseName ||\n                referencedColumn.databaseName;\n            const id = rawResult[alias + \"_\" + referencedColumnName];\n            const parentId = rawResult[alias + \"_\" + joinColumnName];\n            return {\n                id: manager.connection.driver.prepareHydratedValue(id, referencedColumn),\n                parentId: manager.connection.driver.prepareHydratedValue(parentId, joinColumn),\n            };\n        });\n    }\n    static buildChildrenEntityTree(metadata, entity, entities, relationMaps, options) {\n        const childProperty = metadata.treeChildrenRelation.propertyName;\n        if (options.depth === 0) {\n            entity[childProperty] = [];\n            return;\n        }\n        const joinColumn = metadata.treeParentRelation.joinColumns[0];\n        const referencedColumn = joinColumn.referencedColumn ?? metadata.primaryColumns[0];\n        const parentEntityId = referencedColumn.getEntityValue(entity);\n        const childRelationMaps = relationMaps.filter((relationMap) => relationMap.parentId === parentEntityId);\n        const childIds = new Set(childRelationMaps.map((relationMap) => relationMap.id));\n        entity[childProperty] = entities.filter((entity) => childIds.has(referencedColumn.getEntityValue(entity)));\n        entity[childProperty].forEach((childEntity) => {\n            TreeRepositoryUtils.buildChildrenEntityTree(metadata, childEntity, entities, relationMaps, {\n                ...options,\n                depth: options.depth - 1,\n            });\n        });\n    }\n    static buildParentEntityTree(metadata, entity, entities, relationMaps) {\n        const parentProperty = metadata.treeParentRelation.propertyName;\n        const joinColumn = metadata.treeParentRelation.joinColumns[0];\n        const referencedColumn = joinColumn.referencedColumn ?? metadata.primaryColumns[0];\n        const entityId = referencedColumn.getEntityValue(entity);\n        const parentRelationMap = relationMaps.find((relationMap) => relationMap.id === entityId);\n        const parentEntity = entities.find((entity) => {\n            if (!parentRelationMap)\n                return false;\n            return (referencedColumn.getEntityValue(entity) ===\n                parentRelationMap.parentId);\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            TreeRepositoryUtils.buildParentEntityTree(metadata, entity[parentProperty], entities, relationMaps);\n        }\n    }\n}\n\n//# sourceMappingURL=TreeRepositoryUtils.js.map\n","/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository {\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    get metadata() {\n        return this.manager.connection.getMetadata(this.target);\n    }\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(target, manager, queryRunner) {\n        this.target = target;\n        this.manager = manager;\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(alias, queryRunner) {\n        return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    }\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity) {\n        return this.manager.hasId(this.metadata.target, entity);\n    }\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity) {\n        return this.manager.getId(this.metadata.target, entity);\n    }\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainEntityLikeOrPlainEntityLikes) {\n        return this.manager.create(this.metadata.target, plainEntityLikeOrPlainEntityLikes);\n    }\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(mergeIntoEntity, ...entityLikes) {\n        return this.manager.merge(this.metadata.target, mergeIntoEntity, ...entityLikes);\n    }\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike) {\n        return this.manager.preload(this.metadata.target, entityLike);\n    }\n    /**\n     * Saves one or many given entities.\n     */\n    save(entityOrEntities, options) {\n        return this.manager.save(this.metadata.target, entityOrEntities, options);\n    }\n    /**\n     * Removes one or many given entities.\n     */\n    remove(entityOrEntities, options) {\n        return this.manager.remove(this.metadata.target, entityOrEntities, options);\n    }\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove(entityOrEntities, options) {\n        return this.manager.softRemove(this.metadata.target, entityOrEntities, options);\n    }\n    /**\n     * Recovers one or many given entities.\n     */\n    recover(entityOrEntities, options) {\n        return this.manager.recover(this.metadata.target, entityOrEntities, options);\n    }\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(entity) {\n        return this.manager.insert(this.metadata.target, entity);\n    }\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(criteria, partialEntity) {\n        return this.manager.update(this.metadata.target, criteria, partialEntity);\n    }\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    upsert(entityOrEntities, conflictPathsOrOptions) {\n        return this.manager.upsert(this.metadata.target, entityOrEntities, conflictPathsOrOptions);\n    }\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(criteria) {\n        return this.manager.delete(this.metadata.target, criteria);\n    }\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(criteria) {\n        return this.manager.softDelete(this.metadata.target, criteria);\n    }\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(criteria) {\n        return this.manager.restore(this.metadata.target, criteria);\n    }\n    /**\n     * Checks whether any entity exists that matches the given options.\n     *\n     * @deprecated use `exists` method instead, for example:\n     *\n     * .exists()\n     */\n    exist(options) {\n        return this.manager.exists(this.metadata.target, options);\n    }\n    /**\n     * Checks whether any entity exists that matches the given options.\n     */\n    exists(options) {\n        return this.manager.exists(this.metadata.target, options);\n    }\n    /**\n     * Checks whether any entity exists that matches the given conditions.\n     */\n    existsBy(where) {\n        return this.manager.existsBy(this.metadata.target, where);\n    }\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count(options) {\n        return this.manager.count(this.metadata.target, options);\n    }\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy(where) {\n        return this.manager.countBy(this.metadata.target, where);\n    }\n    /**\n     * Return the SUM of a column\n     */\n    sum(columnName, where) {\n        return this.manager.sum(this.metadata.target, columnName, where);\n    }\n    /**\n     * Return the AVG of a column\n     */\n    average(columnName, where) {\n        return this.manager.average(this.metadata.target, columnName, where);\n    }\n    /**\n     * Return the MIN of a column\n     */\n    minimum(columnName, where) {\n        return this.manager.minimum(this.metadata.target, columnName, where);\n    }\n    /**\n     * Return the MAX of a column\n     */\n    maximum(columnName, where) {\n        return this.manager.maximum(this.metadata.target, columnName, where);\n    }\n    /**\n     * Finds entities that match given find options.\n     */\n    async find(options) {\n        return this.manager.find(this.metadata.target, options);\n    }\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy(where) {\n        return this.manager.findBy(this.metadata.target, where);\n    }\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(options) {\n        return this.manager.findAndCount(this.metadata.target, options);\n    }\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(where) {\n        return this.manager.findAndCountBy(this.metadata.target, where);\n    }\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds(ids) {\n        return this.manager.findByIds(this.metadata.target, ids);\n    }\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne(options) {\n        return this.manager.findOne(this.metadata.target, options);\n    }\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy(where) {\n        return this.manager.findOneBy(this.metadata.target, where);\n    }\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(id) {\n        return this.manager.findOneById(this.metadata.target, id);\n    }\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options) {\n        return this.manager.findOneOrFail(this.metadata.target, options);\n    }\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(where) {\n        return this.manager.findOneByOrFail(this.metadata.target, where);\n    }\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query, parameters) {\n        return this.manager.query(query, parameters);\n    }\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear() {\n        return this.manager.clear(this.metadata.target);\n    }\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(conditions, propertyPath, value) {\n        return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n    }\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(conditions, propertyPath, value) {\n        return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n    }\n    /**\n     * Extends repository with provided functions.\n     */\n    extend(customs) {\n        // return {\n        //     ...this,\n        //     ...custom\n        // };\n        const thisRepo = this.constructor;\n        const { target, manager, queryRunner } = this;\n        const ChildClass = class extends thisRepo {\n            constructor(target, manager, queryRunner) {\n                super(target, manager, queryRunner);\n            }\n        };\n        for (const custom in customs)\n            ChildClass.prototype[custom] = customs[custom];\n        return new ChildClass(target, manager, queryRunner);\n    }\n}\n\n//# sourceMappingURL=Repository.js.map\n","import { DriverUtils } from \"../driver/DriverUtils\";\nimport { TypeORMError } from \"../error/TypeORMError\";\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\nimport { TreeRepositoryUtils } from \"../util/TreeRepositoryUtils\";\nimport { Repository } from \"./Repository\";\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nexport class TreeRepository extends Repository {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    async findTrees(options) {\n        const roots = await this.findRoots(options);\n        await Promise.all(roots.map((root) => this.findDescendantsTree(root, options)));\n        return roots;\n    }\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    findRoots(options) {\n        const escapeAlias = (alias) => this.manager.connection.driver.escape(alias);\n        const escapeColumn = (column) => this.manager.connection.driver.escape(column);\n        const joinColumn = this.metadata.treeParentRelation.joinColumns[0];\n        const parentPropertyName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n        const qb = this.createQueryBuilder(\"treeEntity\");\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options);\n        return qb\n            .where(`${escapeAlias(\"treeEntity\")}.${escapeColumn(parentPropertyName)} IS NULL`)\n            .getMany();\n    }\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    findDescendants(entity, options) {\n        const qb = this.createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity);\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options);\n        return qb.getMany();\n    }\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    async findDescendantsTree(entity, options) {\n        // todo: throw exception if there is no column of this relation?\n        const qb = this.createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity);\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options);\n        const entities = await qb.getRawAndEntities();\n        const relationMaps = TreeRepositoryUtils.createRelationMaps(this.manager, this.metadata, \"treeEntity\", entities.raw);\n        TreeRepositoryUtils.buildChildrenEntityTree(this.metadata, entity, entities.entities, relationMaps, {\n            depth: -1,\n            ...options,\n        });\n        return entity;\n    }\n    /**\n     * Gets number of descendants of the entity.\n     */\n    countDescendants(entity) {\n        return this.createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity).getCount();\n    }\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    createDescendantsQueryBuilder(alias, closureTableAlias, entity) {\n        // create shortcuts for better readability\n        const escape = (alias) => this.manager.connection.driver.escape(alias);\n        if (this.metadata.treeType === \"closure-table\") {\n            const joinCondition = this.metadata.closureJunctionTable.descendantColumns\n                .map((column) => {\n                return (escape(closureTableAlias) +\n                    \".\" +\n                    escape(column.propertyPath) +\n                    \" = \" +\n                    escape(alias) +\n                    \".\" +\n                    escape(column.referencedColumn.propertyPath));\n            })\n                .join(\" AND \");\n            const parameters = {};\n            const whereCondition = this.metadata.closureJunctionTable.ancestorColumns\n                .map((column) => {\n                parameters[column.referencedColumn.propertyName] =\n                    column.referencedColumn.getEntityValue(entity);\n                return (escape(closureTableAlias) +\n                    \".\" +\n                    escape(column.propertyPath) +\n                    \" = :\" +\n                    column.referencedColumn.propertyName);\n            })\n                .join(\" AND \");\n            return this.createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters);\n        }\n        else if (this.metadata.treeType === \"nested-set\") {\n            const whereCondition = alias +\n                \".\" +\n                this.metadata.nestedSetLeftColumn.propertyPath +\n                \" BETWEEN \" +\n                \"joined.\" +\n                this.metadata.nestedSetLeftColumn.propertyPath +\n                \" AND joined.\" +\n                this.metadata.nestedSetRightColumn.propertyPath;\n            const parameters = {};\n            const joinCondition = this.metadata\n                .treeParentRelation.joinColumns.map((joinColumn) => {\n                const parameterName = joinColumn.referencedColumn.propertyPath.replace(\".\", \"_\");\n                parameters[parameterName] =\n                    joinColumn.referencedColumn.getEntityValue(entity);\n                return (\"joined.\" +\n                    joinColumn.referencedColumn.propertyPath +\n                    \" = :\" +\n                    parameterName);\n            })\n                .join(\" AND \");\n            return this.createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", whereCondition)\n                .where(joinCondition, parameters);\n        }\n        else if (this.metadata.treeType === \"materialized-path\") {\n            return this.createQueryBuilder(alias).where((qb) => {\n                const subQuery = qb\n                    .subQuery()\n                    .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn.propertyPath}`, \"path\")\n                    .from(this.metadata.target, this.metadata.targetName)\n                    .whereInIds(this.metadata.getEntityIdMap(entity));\n                if (DriverUtils.isSQLiteFamily(this.manager.connection.driver)) {\n                    return `${alias}.${this.metadata.materializedPathColumn.propertyPath} LIKE ${subQuery.getQuery()} || '%'`;\n                }\n                else {\n                    return `${alias}.${this.metadata.materializedPathColumn.propertyPath} LIKE NULLIF(CONCAT(${subQuery.getQuery()}, '%'), '%')`;\n                }\n            });\n        }\n        throw new TypeORMError(`Supported only in tree entities`);\n    }\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    findAncestors(entity, options) {\n        const qb = this.createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity);\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options);\n        return qb.getMany();\n    }\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    async findAncestorsTree(entity, options) {\n        // todo: throw exception if there is no column of this relation?\n        const qb = this.createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity);\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options);\n        const entities = await qb.getRawAndEntities();\n        const relationMaps = TreeRepositoryUtils.createRelationMaps(this.manager, this.metadata, \"treeEntity\", entities.raw);\n        TreeRepositoryUtils.buildParentEntityTree(this.metadata, entity, entities.entities, relationMaps);\n        return entity;\n    }\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    countAncestors(entity) {\n        return this.createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity).getCount();\n    }\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    createAncestorsQueryBuilder(alias, closureTableAlias, entity) {\n        // create shortcuts for better readability\n        // const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n        if (this.metadata.treeType === \"closure-table\") {\n            const joinCondition = this.metadata.closureJunctionTable.ancestorColumns\n                .map((column) => {\n                return (closureTableAlias +\n                    \".\" +\n                    column.propertyPath +\n                    \" = \" +\n                    alias +\n                    \".\" +\n                    column.referencedColumn.propertyPath);\n            })\n                .join(\" AND \");\n            const parameters = {};\n            const whereCondition = this.metadata.closureJunctionTable.descendantColumns\n                .map((column) => {\n                parameters[column.referencedColumn.propertyName] =\n                    column.referencedColumn.getEntityValue(entity);\n                return (closureTableAlias +\n                    \".\" +\n                    column.propertyPath +\n                    \" = :\" +\n                    column.referencedColumn.propertyName);\n            })\n                .join(\" AND \");\n            return this.createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters);\n        }\n        else if (this.metadata.treeType === \"nested-set\") {\n            const joinCondition = \"joined.\" +\n                this.metadata.nestedSetLeftColumn.propertyPath +\n                \" BETWEEN \" +\n                alias +\n                \".\" +\n                this.metadata.nestedSetLeftColumn.propertyPath +\n                \" AND \" +\n                alias +\n                \".\" +\n                this.metadata.nestedSetRightColumn.propertyPath;\n            const parameters = {};\n            const whereCondition = this.metadata\n                .treeParentRelation.joinColumns.map((joinColumn) => {\n                const parameterName = joinColumn.referencedColumn.propertyPath.replace(\".\", \"_\");\n                parameters[parameterName] =\n                    joinColumn.referencedColumn.getEntityValue(entity);\n                return (\"joined.\" +\n                    joinColumn.referencedColumn.propertyPath +\n                    \" = :\" +\n                    parameterName);\n            })\n                .join(\" AND \");\n            return this.createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", joinCondition)\n                .where(whereCondition, parameters);\n        }\n        else if (this.metadata.treeType === \"materialized-path\") {\n            // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');\n            return this.createQueryBuilder(alias).where((qb) => {\n                const subQuery = qb\n                    .subQuery()\n                    .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn.propertyPath}`, \"path\")\n                    .from(this.metadata.target, this.metadata.targetName)\n                    .whereInIds(this.metadata.getEntityIdMap(entity));\n                if (DriverUtils.isSQLiteFamily(this.manager.connection.driver)) {\n                    return `${subQuery.getQuery()} LIKE ${alias}.${this.metadata.materializedPathColumn.propertyPath} || '%'`;\n                }\n                else {\n                    return `${subQuery.getQuery()} LIKE CONCAT(${alias}.${this.metadata.materializedPathColumn.propertyPath}, '%')`;\n                }\n            });\n        }\n        throw new TypeORMError(`Supported only in tree entities`);\n    }\n}\n\n//# sourceMappingURL=TreeRepository.js.map\n","import { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToNewEntityTransformer {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    transform(newEntity, object, metadata, getLazyRelationsPromiseValue = false) {\n        // console.log(\"groupAndTransform entity:\", newEntity);\n        // console.log(\"groupAndTransform object:\", object);\n        this.groupAndTransform(newEntity, object, metadata, getLazyRelationsPromiseValue);\n        // console.log(\"result:\", newEntity);\n        return newEntity;\n    }\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    groupAndTransform(entity, object, metadata, getLazyRelationsPromiseValue = false) {\n        // console.log(\"groupAndTransform entity:\", entity);\n        // console.log(\"groupAndTransform object:\", object);\n        // copy regular column properties from the given object\n        metadata.nonVirtualColumns.forEach((column) => {\n            const objectColumnValue = column.getEntityValue(object);\n            if (objectColumnValue !== undefined)\n                column.setEntityValue(entity, objectColumnValue);\n        });\n        // // copy relation properties from the given object\n        if (metadata.relations.length) {\n            metadata.relations.forEach((relation) => {\n                let entityRelatedValue = relation.getEntityValue(entity);\n                const objectRelatedValue = relation.getEntityValue(object, getLazyRelationsPromiseValue);\n                if (objectRelatedValue === undefined)\n                    return;\n                if (relation.isOneToMany || relation.isManyToMany) {\n                    if (!Array.isArray(objectRelatedValue))\n                        return;\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = [];\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n                    objectRelatedValue.forEach((objectRelatedValueItem) => {\n                        // check if we have this item from the merging object in the original entity we merge into\n                        let objectRelatedValueEntity = entityRelatedValue.find((entityRelatedValueItem) => {\n                            return relation.inverseEntityMetadata.compareEntities(objectRelatedValueItem, entityRelatedValueItem);\n                        });\n                        const inverseEntityMetadata = relation.inverseEntityMetadata.findInheritanceMetadata(objectRelatedValueItem);\n                        // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array\n                        if (!objectRelatedValueEntity) {\n                            objectRelatedValueEntity =\n                                inverseEntityMetadata.create(undefined, {\n                                    fromDeserializer: true,\n                                });\n                            entityRelatedValue.push(objectRelatedValueEntity);\n                        }\n                        this.groupAndTransform(objectRelatedValueEntity, objectRelatedValueItem, inverseEntityMetadata, getLazyRelationsPromiseValue);\n                    });\n                }\n                else {\n                    // if related object isn't an object (direct relation id for example)\n                    // we just set it to the entity relation, we don't need anything more from it\n                    // however we do it only if original entity does not have this relation set to object\n                    // to prevent full overriding of objects\n                    if (!ObjectUtils.isObject(objectRelatedValue)) {\n                        if (!ObjectUtils.isObject(entityRelatedValue))\n                            relation.setEntityValue(entity, objectRelatedValue);\n                        return;\n                    }\n                    const inverseEntityMetadata = relation.inverseEntityMetadata.findInheritanceMetadata(objectRelatedValue);\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = inverseEntityMetadata.create(undefined, {\n                            fromDeserializer: true,\n                        });\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n                    this.groupAndTransform(entityRelatedValue, objectRelatedValue, inverseEntityMetadata, getLazyRelationsPromiseValue);\n                }\n            });\n        }\n    }\n}\n\n//# sourceMappingURL=PlainObjectToNewEntityTransformer.js.map\n","/**\n */\nclass LoadMapItem {\n    constructor(plainEntity, metadata, parentLoadMapItem, relation) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n    get target() {\n        return this.metadata.target;\n    }\n    get id() {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    }\n}\nclass LoadMap {\n    constructor() {\n        this.loadMapItems = [];\n    }\n    get mainLoadMapItem() {\n        return this.loadMapItems.find((item) => !item.relation && !item.parentLoadMapItem);\n    }\n    addLoadMap(newLoadMap) {\n        const item = this.loadMapItems.find((item) => item.target === newLoadMap.target && item.id === newLoadMap.id);\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    }\n    fillEntities(target, entities) {\n        entities.forEach((entity) => {\n            const item = this.loadMapItems.find((loadMapItem) => {\n                return (loadMapItem.target === target &&\n                    loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity));\n            });\n            if (item)\n                item.entity = entity;\n        });\n    }\n    groupByTargetIds() {\n        const groups = [];\n        this.loadMapItems.forEach((loadMapItem) => {\n            let group = groups.find((group) => group.target === loadMapItem.target);\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    }\n}\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n    constructor(manager) {\n        this.manager = manager;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    async transform(plainObject, metadata) {\n        // if plain object does not have id then nothing to load really\n        if (!metadata.hasAllPrimaryKeys(plainObject))\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap();\n        const fillLoadMap = (entity, entityMetadata, parentLoadMapItem, relation) => {\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n            loadMap.addLoadMap(item);\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter((value) => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n        };\n        fillLoadMap(plainObject, metadata);\n        // load all entities and store them in the load map\n        await Promise.all(loadMap.groupByTargetIds().map((targetWithIds) => {\n            // todo: fix type hinting\n            return this.manager\n                .findByIds(targetWithIds.target, targetWithIds.ids)\n                .then((entities) => loadMap.fillEntities(targetWithIds.target, entities));\n        }));\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach((loadMapItem) => {\n            if (!loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity)\n                return;\n            if (loadMapItem.relation.isManyToMany ||\n                loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n            }\n            else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n            }\n        });\n        return loadMap.mainLoadMapItem\n            ? loadMap.mainLoadMapItem.entity\n            : undefined;\n    }\n}\n\n//# sourceMappingURL=PlainObjectToDatabaseEntityTransformer.js.map\n","import { CustomRepositoryDoesNotHaveEntityError } from \"../error/CustomRepositoryDoesNotHaveEntityError\";\nimport { getMetadataArgsStorage } from \"../globals\";\nimport { CustomRepositoryNotFoundError } from \"../error/CustomRepositoryNotFoundError\";\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @deprecated use Repository.extend function to create a custom repository\n */\nexport class AbstractRepository {\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    get repository() {\n        const target = this.getCustomRepositoryTarget(this);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n        return this.manager.getRepository(target);\n    }\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    get treeRepository() {\n        const target = this.getCustomRepositoryTarget(this);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n        return this.manager.getTreeRepository(target);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a SQL query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    createQueryBuilder(alias) {\n        const target = this.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n        return this.manager\n            .getRepository(target)\n            .createQueryBuilder(alias);\n    }\n    /**\n     * Creates a new query builder for the given entity that can be used to build a SQL query.\n     */\n    createQueryBuilderFor(entity, alias) {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    }\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    getRepositoryFor(entity) {\n        return this.manager.getRepository(entity);\n    }\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    getTreeRepositoryFor(entity) {\n        return this.manager.getTreeRepository(entity);\n    }\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    getCustomRepositoryTarget(customRepository) {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find((repository) => {\n            return (repository.target ===\n                (typeof customRepository === \"function\"\n                    ? customRepository\n                    : customRepository.constructor));\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n        return entityRepositoryMetadataArgs.entity;\n    }\n}\n\n//# sourceMappingURL=AbstractRepository.js.map\n","import { TypeORMError } from \"../error\";\n/**\n * Orders insert or remove subjects in proper order (using topological sorting)\n * to make sure insert or remove operations are executed in a proper order.\n */\nexport class SubjectTopoligicalSorter {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(subjects) {\n        this.subjects = [...subjects]; // copy subjects to prevent changing of sent array\n        this.metadatas = this.getUniqueMetadatas(this.subjects);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sorts (orders) subjects in their topological order.\n     */\n    sort(direction) {\n        // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here\n        if (!this.metadatas.length)\n            return this.subjects;\n        const sortedSubjects = [];\n        // first if we sort for deletion all junction subjects\n        // junction subjects are subjects without entity and database entity set\n        if (direction === \"delete\") {\n            const junctionSubjects = this.subjects.filter((subject) => !subject.entity && !subject.databaseEntity);\n            sortedSubjects.push(...junctionSubjects);\n            this.removeAlreadySorted(junctionSubjects);\n        }\n        // next we always insert entities with non-nullable relations, sort them first\n        const nonNullableDependencies = this.getNonNullableDependencies();\n        let sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);\n        if (direction === \"insert\")\n            sortedNonNullableEntityTargets =\n                sortedNonNullableEntityTargets.reverse();\n        // so we have a sorted entity targets\n        // go thought each of them and find all subjects with sorted entity target\n        // add those sorted targets and remove them from original array of targets\n        sortedNonNullableEntityTargets.forEach((sortedEntityTarget) => {\n            const entityTargetSubjects = this.subjects.filter((subject) => subject.metadata.targetName === sortedEntityTarget ||\n                subject.metadata.inheritanceTree.some((s) => s.name === sortedEntityTarget));\n            sortedSubjects.push(...entityTargetSubjects);\n            this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // next sort all other entities\n        // same process as in above but with other entities\n        const otherDependencies = this.getDependencies();\n        let sortedOtherEntityTargets = this.toposort(otherDependencies);\n        if (direction === \"insert\")\n            sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();\n        sortedOtherEntityTargets.forEach((sortedEntityTarget) => {\n            const entityTargetSubjects = this.subjects.filter((subject) => subject.metadata.targetName === sortedEntityTarget);\n            sortedSubjects.push(...entityTargetSubjects);\n            this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // if we have something left in the subjects add them as well\n        sortedSubjects.push(...this.subjects);\n        return sortedSubjects;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes already sorted subjects from this.subjects list of subjects.\n     */\n    removeAlreadySorted(subjects) {\n        subjects.forEach((subject) => {\n            this.subjects.splice(this.subjects.indexOf(subject), 1);\n        });\n    }\n    /**\n     * Extracts all unique metadatas from the given subjects.\n     */\n    getUniqueMetadatas(subjects) {\n        const metadatas = [];\n        subjects.forEach((subject) => {\n            if (metadatas.indexOf(subject.metadata) === -1)\n                metadatas.push(subject.metadata);\n        });\n        return metadatas;\n    }\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    getNonNullableDependencies() {\n        return this.metadatas.reduce((dependencies, metadata) => {\n            metadata.relationsWithJoinColumns.forEach((relation) => {\n                if (relation.isNullable)\n                    return;\n                dependencies.push([\n                    metadata.targetName,\n                    relation.inverseEntityMetadata.targetName,\n                ]);\n            });\n            return dependencies;\n        }, []);\n    }\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    getDependencies() {\n        return this.metadatas.reduce((dependencies, metadata) => {\n            metadata.relationsWithJoinColumns.forEach((relation) => {\n                // if relation is self-referenced we skip it\n                if (relation.inverseEntityMetadata === metadata)\n                    return;\n                dependencies.push([\n                    metadata.targetName,\n                    relation.inverseEntityMetadata.targetName,\n                ]);\n            });\n            return dependencies;\n        }, []);\n    }\n    /**\n     * Sorts given graph using topological sorting algorithm.\n     *\n     * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.\n     */\n    toposort(edges) {\n        function uniqueNodes(arr) {\n            let res = [];\n            for (let i = 0, len = arr.length; i < len; i++) {\n                let edge = arr[i];\n                if (res.indexOf(edge[0]) < 0)\n                    res.push(edge[0]);\n                if (res.indexOf(edge[1]) < 0)\n                    res.push(edge[1]);\n            }\n            return res;\n        }\n        const nodes = uniqueNodes(edges);\n        let cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor;\n        while (i--) {\n            if (!visited[i])\n                visit(nodes[i], i, []);\n        }\n        function visit(node, i, predecessors) {\n            if (predecessors.indexOf(node) >= 0) {\n                throw new TypeORMError(\"Cyclic dependency: \" + JSON.stringify(node)); // todo: better error\n            }\n            if (!~nodes.indexOf(node)) {\n                throw new TypeORMError(\"Found unknown node. Make sure to provided all involved nodes. Unknown node: \" +\n                    JSON.stringify(node));\n            }\n            if (visited[i])\n                return;\n            visited[i] = true;\n            // outgoing edges\n            let outgoing = edges.filter(function (edge) {\n                return edge[0] === node;\n            });\n            if ((i = outgoing.length)) {\n                let preds = predecessors.concat(node);\n                do {\n                    let child = outgoing[--i][1];\n                    visit(child, nodes.indexOf(child), preds);\n                } while (i);\n            }\n            sorted[--cursor] = node;\n        }\n        return sorted;\n    }\n}\n\n//# sourceMappingURL=SubjectTopoligicalSorter.js.map\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=\"$isDayjsObject\",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return b.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return b.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return b.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return b.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return b.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return b.s(e.$s,2,\"0\");case\"SSS\":return b.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));","import dayjs from \"dayjs\";\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DateUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(mixedDate) {\n        if (!mixedDate)\n            return mixedDate;\n        return typeof mixedDate === \"string\"\n            ? new Date(mixedDate)\n            : mixedDate;\n    }\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value) {\n        if (value instanceof Date) {\n            return (this.formatZerolessValue(value.getFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getDate()));\n        }\n        return value;\n    }\n    /**\n     * Converts given value into date object.\n     */\n    static mixedDateToDate(mixedDate, toUtc = false, useMilliseconds = true) {\n        /**\n         * new Date(ISOString) is not a reliable parser to date strings.\n         * It's better to use 'date-fns' parser to parser string in ISO Format.\n         *\n         * The problem here is with wrong timezone.\n         *\n         * For example:\n         *\n         * ``new Date('2021-04-28')`` will generate `2021-04-28T00:00:00.000Z`\n         * in my timezone, which is not true for my timezone (GMT-0300). It should\n         * be `2021-04-28T03:00:00.000Z` as `new Date(2021, 3, 28)` generates.\n         *\n         * https://stackoverflow.com/a/2587398\n         */\n        let date = typeof mixedDate === \"string\"\n            ? dayjs(mixedDate).toDate()\n            : mixedDate;\n        if (toUtc)\n            date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n        if (!useMilliseconds)\n            date.setUTCMilliseconds(0);\n        return date;\n    }\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(value, skipSeconds = false) {\n        if (value instanceof Date)\n            return (this.formatZerolessValue(value.getHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getMinutes()) +\n                (!skipSeconds\n                    ? \":\" + this.formatZerolessValue(value.getSeconds())\n                    : \"\"));\n        return value;\n    }\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToDate(value) {\n        if (typeof value === \"string\") {\n            const [hours, minutes, seconds] = value.split(\":\");\n            const date = new Date();\n            if (hours)\n                date.setHours(parseInt(hours));\n            if (minutes)\n                date.setMinutes(parseInt(minutes));\n            if (seconds)\n                date.setSeconds(parseInt(seconds));\n            return date;\n        }\n        return value;\n    }\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(value, skipSeconds = false) {\n        value =\n            value instanceof Date\n                ? value.getHours() +\n                    \":\" +\n                    value.getMinutes() +\n                    (!skipSeconds ? \":\" + value.getSeconds() : \"\")\n                : value;\n        if (typeof value === \"string\") {\n            return value\n                .split(\":\")\n                .map((v) => (v.length === 1 ? \"0\" + v : v)) // append zero at beginning if we have a first-zero-less number\n                .join(\":\");\n        }\n        return value;\n    }\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(value, useMilliseconds) {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            let finalValue = this.formatZerolessValue(value.getFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getDate()) +\n                \" \" +\n                this.formatZerolessValue(value.getHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getMinutes()) +\n                \":\" +\n                this.formatZerolessValue(value.getSeconds());\n            if (useMilliseconds)\n                finalValue += `.${this.formatMilliseconds(value.getMilliseconds())}`;\n            value = finalValue;\n        }\n        return value;\n    }\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value) {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return (this.formatZerolessValue(value.getUTCFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) +\n                \" \" +\n                this.formatZerolessValue(value.getUTCHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) +\n                \":\" +\n                this.formatZerolessValue(value.getUTCSeconds()) +\n                \".\" +\n                this.formatMilliseconds(value.getUTCMilliseconds()));\n        }\n        return value;\n    }\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value) {\n        if (Array.isArray(value)) {\n            return value.map((i) => String(i)).join(\",\");\n        }\n        return value;\n    }\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value) {\n        if (typeof value === \"string\") {\n            if (value.length > 0) {\n                return value.split(\",\");\n            }\n            else {\n                return [];\n            }\n        }\n        return value;\n    }\n    static simpleJsonToString(value) {\n        return JSON.stringify(value);\n    }\n    static stringToSimpleJson(value) {\n        return typeof value === \"string\" ? JSON.parse(value) : value;\n    }\n    static simpleEnumToString(value) {\n        return \"\" + value;\n    }\n    static stringToSimpleEnum(value, columnMetadata) {\n        if (columnMetadata.enum &&\n            !isNaN(value) &&\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n            // convert to number if that exists in poosible enum options\n            value = parseInt(value);\n        }\n        return value;\n    }\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Formats given number to \"0x\" format, e.g. if the totalLength = 2 and the value is 1 then it will return \"01\".\n     */\n    static formatZerolessValue(value, totalLength = 2) {\n        const pad = \"0\".repeat(totalLength);\n        return String(`${pad}${value}`).slice(-totalLength);\n    }\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    static formatMilliseconds(value) {\n        if (value < 10) {\n            return \"00\" + value;\n        }\n        else if (value < 100) {\n            return \"0\" + value;\n        }\n        else {\n            return String(value);\n        }\n    }\n}\n\n//# sourceMappingURL=DateUtils.js.map\n","import { DateUtils } from \"../util/DateUtils\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Finds what columns are changed in the subject entities.\n */\nexport class SubjectChangedColumnsComputer {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Finds what columns are changed in the subject entities.\n     */\n    compute(subjects) {\n        subjects.forEach((subject) => {\n            this.computeDiffColumns(subject);\n            this.computeDiffRelationalColumns(subjects, subject);\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    computeDiffColumns(subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.columns.forEach((column) => {\n            // ignore special columns\n            if (column.isVirtual ||\n                column.isDiscriminator // ||\n            // column.isUpdateDate ||\n            // column.isVersion ||\n            // column.isCreateDate\n            )\n                return;\n            const changeMap = subject.changeMaps.find((changeMap) => changeMap.column === column);\n            if (changeMap) {\n                subject.changeMaps.splice(subject.changeMaps.indexOf(changeMap), 1);\n            }\n            // get user provided value - column value from the user provided persisted entity\n            const entityValue = column.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (entityValue === undefined)\n                return;\n            // if there is no database entity then all columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // skip transform database value for json / jsonb for comparison later on\n                const shouldTransformDatabaseEntity = column.type !== \"json\" && column.type !== \"jsonb\";\n                // get database value of the column\n                let databaseValue = column.getEntityValue(subject.databaseEntity, shouldTransformDatabaseEntity);\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\n                if (column.relationMetadata) {\n                    const value = column.relationMetadata.getEntityValue(subject.entity);\n                    if (value !== null && value !== undefined)\n                        return;\n                }\n                let normalizedValue = entityValue;\n                // normalize special values to make proper comparision\n                if (entityValue !== null) {\n                    switch (column.type) {\n                        case \"date\":\n                            normalizedValue =\n                                DateUtils.mixedDateToDateString(entityValue);\n                            break;\n                        case \"time\":\n                        case \"time with time zone\":\n                        case \"time without time zone\":\n                        case \"timetz\":\n                            normalizedValue =\n                                DateUtils.mixedDateToTimeString(entityValue);\n                            break;\n                        case \"datetime\":\n                        case \"datetime2\":\n                        case Date:\n                        case \"timestamp\":\n                        case \"timestamp without time zone\":\n                        case \"timestamp with time zone\":\n                        case \"timestamp with local time zone\":\n                        case \"timestamptz\":\n                            normalizedValue =\n                                DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                            databaseValue =\n                                DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n                            break;\n                        case \"json\":\n                        case \"jsonb\":\n                            // JSON.stringify doesn't work because postgresql sorts jsonb before save.\n                            // If you try to save json '[{\"messages\": \"\", \"attribute Key\": \"\", \"level\":\"\"}] ' as jsonb,\n                            // then postgresql will save it as '[{\"level\": \"\", \"message\":\"\", \"attributeKey\": \"\"}]'\n                            if (OrmUtils.deepCompare(entityValue, databaseValue))\n                                return;\n                            break;\n                        case \"simple-array\":\n                            normalizedValue =\n                                DateUtils.simpleArrayToString(entityValue);\n                            databaseValue =\n                                DateUtils.simpleArrayToString(databaseValue);\n                            break;\n                        case \"simple-enum\":\n                            normalizedValue =\n                                DateUtils.simpleEnumToString(entityValue);\n                            databaseValue =\n                                DateUtils.simpleEnumToString(databaseValue);\n                            break;\n                        case \"simple-json\":\n                            normalizedValue =\n                                DateUtils.simpleJsonToString(entityValue);\n                            databaseValue =\n                                DateUtils.simpleJsonToString(databaseValue);\n                            break;\n                    }\n                    if (column.transformer) {\n                        normalizedValue = ApplyValueTransformers.transformTo(column.transformer, entityValue);\n                    }\n                }\n                // if value is not changed - then do nothing\n                if (Buffer.isBuffer(normalizedValue) &&\n                    Buffer.isBuffer(databaseValue)) {\n                    if (normalizedValue.equals(databaseValue)) {\n                        return;\n                    }\n                }\n                else {\n                    if (normalizedValue === databaseValue)\n                        return;\n                }\n            }\n            if (!subject.diffColumns.includes(column))\n                subject.diffColumns.push(column);\n            subject.changeMaps.push({\n                column: column,\n                value: entityValue,\n            });\n        });\n    }\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    computeDiffRelationalColumns(allSubjects, subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.relationsWithJoinColumns.forEach((relation) => {\n            // get the related entity from the persisted entity\n            let relatedEntity = relation.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (relatedEntity === undefined)\n                return;\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // here we cover two scenarios:\n                // 1. related entity can be another entity which is natural way\n                // 2. related entity can be just an entity id\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we create an id map from it to make a proper comparision\n                let relatedEntityRelationIdMap = relatedEntity;\n                if (relatedEntityRelationIdMap !== null &&\n                    ObjectUtils.isObject(relatedEntityRelationIdMap))\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap);\n                // get database related entity. Since loadRelationIds are used on databaseEntity\n                // related entity will contain only its relation ids\n                const databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\n                // if relation ids are equal then we don't need to update anything\n                const areRelatedIdsEqual = OrmUtils.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\n                if (areRelatedIdsEqual) {\n                    return;\n                }\n                else {\n                    subject.diffRelations.push(relation);\n                }\n            }\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\n            const valueSubject = allSubjects.find((subject) => subject.mustBeInserted && subject.entity === relatedEntity);\n            if (valueSubject)\n                relatedEntity = valueSubject;\n            // find if there is already a relation to be changed\n            const changeMap = subject.changeMaps.find((changeMap) => changeMap.relation === relation);\n            if (changeMap) {\n                // and update its value if it was found\n                changeMap.value = relatedEntity;\n            }\n            else {\n                // if it wasn't found add a new relation for change\n                subject.changeMaps.push({\n                    relation: relation,\n                    value: relatedEntity,\n                });\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=SubjectChangedColumnsComputer.js.map\n","import { TypeORMError } from \"./TypeORMError\";\nexport class NestedSetMultipleRootError extends TypeORMError {\n    constructor() {\n        super(`Nested sets do not support multiple root entities.`);\n    }\n}\n\n//# sourceMappingURL=NestedSetMultipleRootError.js.map\n","import { OrmUtils } from \"../../util/OrmUtils\";\nimport { NestedSetMultipleRootError } from \"../../error/NestedSetMultipleRootError\";\nclass NestedSetIds {\n}\n/**\n * Executes subject operations for nested set tree entities.\n */\nexport class NestedSetSubjectExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject) {\n        const escape = (alias) => this.queryRunner.connection.driver.escape(alias);\n        const tableName = this.getTableName(subject.metadata.tablePath);\n        const leftColumnName = escape(subject.metadata.nestedSetLeftColumn.databaseName);\n        const rightColumnName = escape(subject.metadata.nestedSetRightColumn.databaseName);\n        let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet\n                ? subject.parentSubject.insertedValueSet\n                : subject.parentSubject.entity;\n        const parentId = subject.metadata.getEntityIdMap(parent);\n        let parentNsRight = undefined;\n        if (parentId) {\n            parentNsRight = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(subject.metadata.targetName +\n                \".\" +\n                subject.metadata.nestedSetRightColumn.propertyPath, \"right\")\n                .from(subject.metadata.target, subject.metadata.targetName)\n                .whereInIds(parentId)\n                .getRawOne()\n                .then((result) => {\n                const value = result ? result[\"right\"] : undefined;\n                // CockroachDB returns numeric types as string\n                return typeof value === \"string\" ? parseInt(value) : value;\n            });\n        }\n        if (parentNsRight !== undefined) {\n            await this.queryRunner.query(`UPDATE ${tableName} SET ` +\n                `${leftColumnName} = CASE WHEN ${leftColumnName} > ${parentNsRight} THEN ${leftColumnName} + 2 ELSE ${leftColumnName} END,` +\n                `${rightColumnName} = ${rightColumnName} + 2 ` +\n                `WHERE ${rightColumnName} >= ${parentNsRight}`);\n            OrmUtils.mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(parentNsRight), subject.metadata.nestedSetRightColumn.createValueMap(parentNsRight + 1));\n        }\n        else {\n            const isUniqueRoot = await this.isUniqueRootEntity(subject, parent);\n            // Validate if a root entity already exits and throw an exception\n            if (!isUniqueRoot)\n                throw new NestedSetMultipleRootError();\n            OrmUtils.mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(1), subject.metadata.nestedSetRightColumn.createValueMap(2));\n        }\n    }\n    /**\n     * Executes operations when subject is being updated.\n     */\n    async update(subject) {\n        let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.entity;\n        let entity = subject.databaseEntity; // if entity was attached via parent\n        if (!entity && parent)\n            // if entity was attached via children\n            entity = subject.metadata\n                .treeChildrenRelation.getEntityValue(parent)\n                .find((child) => {\n                return Object.entries(subject.identifier).every(([key, value]) => child[key] === value);\n            });\n        // Exit if the parent or the entity where never set\n        if (entity === undefined || parent === undefined) {\n            return;\n        }\n        const oldParent = subject.metadata.treeParentRelation.getEntityValue(entity);\n        const oldParentId = subject.metadata.getEntityIdMap(oldParent);\n        const parentId = subject.metadata.getEntityIdMap(parent);\n        // Exit if the new and old parents are the same\n        if (OrmUtils.compareIds(oldParentId, parentId)) {\n            return;\n        }\n        if (parent) {\n            const escape = (alias) => this.queryRunner.connection.driver.escape(alias);\n            const tableName = this.getTableName(subject.metadata.tablePath);\n            const leftColumnName = escape(subject.metadata.nestedSetLeftColumn.databaseName);\n            const rightColumnName = escape(subject.metadata.nestedSetRightColumn.databaseName);\n            const entityId = subject.metadata.getEntityIdMap(entity);\n            let entityNs = undefined;\n            if (entityId) {\n                entityNs = (await this.getNestedSetIds(subject.metadata, entityId))[0];\n            }\n            let parentNs = undefined;\n            if (parentId) {\n                parentNs = (await this.getNestedSetIds(subject.metadata, parentId))[0];\n            }\n            if (entityNs !== undefined && parentNs !== undefined) {\n                const isMovingUp = parentNs.left > entityNs.left;\n                const treeSize = entityNs.right - entityNs.left + 1;\n                let entitySize;\n                if (isMovingUp) {\n                    entitySize = parentNs.left - entityNs.right;\n                }\n                else {\n                    entitySize = parentNs.right - entityNs.left;\n                }\n                // Moved entity logic\n                const updateLeftSide = `WHEN ${leftColumnName} >= ${entityNs.left} AND ` +\n                    `${leftColumnName} < ${entityNs.right} ` +\n                    `THEN ${leftColumnName} + ${entitySize} `;\n                const updateRightSide = `WHEN ${rightColumnName} > ${entityNs.left} AND ` +\n                    `${rightColumnName} <= ${entityNs.right} ` +\n                    `THEN ${rightColumnName} + ${entitySize} `;\n                // Update the surrounding entities\n                if (isMovingUp) {\n                    await this.queryRunner.query(`UPDATE ${tableName} ` +\n                        `SET ${leftColumnName} = CASE ` +\n                        `WHEN ${leftColumnName} > ${entityNs.right} AND ` +\n                        `${leftColumnName} <= ${parentNs.left} ` +\n                        `THEN ${leftColumnName} - ${treeSize} ` +\n                        updateLeftSide +\n                        `ELSE ${leftColumnName} ` +\n                        `END, ` +\n                        `${rightColumnName} = CASE ` +\n                        `WHEN ${rightColumnName} > ${entityNs.right} AND ` +\n                        `${rightColumnName} < ${parentNs.left} ` +\n                        `THEN ${rightColumnName} - ${treeSize} ` +\n                        updateRightSide +\n                        `ELSE ${rightColumnName} ` +\n                        `END`);\n                }\n                else {\n                    await this.queryRunner.query(`UPDATE ${tableName} ` +\n                        `SET ${leftColumnName} = CASE ` +\n                        `WHEN ${leftColumnName} < ${entityNs.left} AND ` +\n                        `${leftColumnName} > ${parentNs.right} ` +\n                        `THEN ${leftColumnName} + ${treeSize} ` +\n                        updateLeftSide +\n                        `ELSE ${leftColumnName} ` +\n                        `END, ` +\n                        `${rightColumnName} = CASE ` +\n                        `WHEN ${rightColumnName} < ${entityNs.left} AND ` +\n                        `${rightColumnName} >= ${parentNs.right} ` +\n                        `THEN ${rightColumnName} + ${treeSize} ` +\n                        updateRightSide +\n                        `ELSE ${rightColumnName} ` +\n                        `END`);\n                }\n            }\n        }\n        else {\n            const isUniqueRoot = await this.isUniqueRootEntity(subject, parent);\n            // Validate if a root entity already exits and throw an exception\n            if (!isUniqueRoot)\n                throw new NestedSetMultipleRootError();\n        }\n    }\n    /**\n     * Executes operations when subject is being removed.\n     */\n    async remove(subjects) {\n        if (!Array.isArray(subjects))\n            subjects = [subjects];\n        const metadata = subjects[0].metadata;\n        const escape = (alias) => this.queryRunner.connection.driver.escape(alias);\n        const tableName = this.getTableName(metadata.tablePath);\n        const leftColumnName = escape(metadata.nestedSetLeftColumn.databaseName);\n        const rightColumnName = escape(metadata.nestedSetRightColumn.databaseName);\n        let entitiesIds = [];\n        for (const subject of subjects) {\n            const entityId = metadata.getEntityIdMap(subject.entity);\n            if (entityId) {\n                entitiesIds.push(entityId);\n            }\n        }\n        let entitiesNs = await this.getNestedSetIds(metadata, entitiesIds);\n        for (const entity of entitiesNs) {\n            const treeSize = entity.right - entity.left + 1;\n            await this.queryRunner.query(`UPDATE ${tableName} ` +\n                `SET ${leftColumnName} = CASE ` +\n                `WHEN ${leftColumnName} > ${entity.left} THEN ${leftColumnName} - ${treeSize} ` +\n                `ELSE ${leftColumnName} ` +\n                `END, ` +\n                `${rightColumnName} = CASE ` +\n                `WHEN ${rightColumnName} > ${entity.right} THEN ${rightColumnName} - ${treeSize} ` +\n                `ELSE ${rightColumnName} ` +\n                `END`);\n        }\n    }\n    /**\n     * Get the nested set ids for a given entity\n     */\n    getNestedSetIds(metadata, ids) {\n        const select = {\n            left: `${metadata.targetName}.${metadata.nestedSetLeftColumn.propertyPath}`,\n            right: `${metadata.targetName}.${metadata.nestedSetRightColumn.propertyPath}`,\n        };\n        const queryBuilder = this.queryRunner.manager.createQueryBuilder();\n        Object.entries(select).forEach(([key, value]) => {\n            queryBuilder.addSelect(value, key);\n        });\n        return queryBuilder\n            .from(metadata.target, metadata.targetName)\n            .whereInIds(ids)\n            .orderBy(select.right, \"DESC\")\n            .getRawMany()\n            .then((results) => {\n            const data = [];\n            for (const result of results) {\n                const entry = {};\n                for (const key of Object.keys(select)) {\n                    const value = result ? result[key] : undefined;\n                    // CockroachDB returns numeric types as string\n                    entry[key] =\n                        typeof value === \"string\" ? parseInt(value) : value;\n                }\n                data.push(entry);\n            }\n            return data;\n        });\n    }\n    async isUniqueRootEntity(subject, parent) {\n        const escape = (alias) => this.queryRunner.connection.driver.escape(alias);\n        const tableName = this.getTableName(subject.metadata.tablePath);\n        const parameters = [];\n        const whereCondition = subject.metadata\n            .treeParentRelation.joinColumns.map((column) => {\n            const columnName = escape(column.databaseName);\n            const parameter = column.getEntityValue(parent);\n            if (parameter == null) {\n                return `${columnName} IS NULL`;\n            }\n            parameters.push(parameter);\n            const parameterName = this.queryRunner.connection.driver.createParameter(\"entity_\" + column.databaseName, parameters.length - 1);\n            return `${columnName} = ${parameterName}`;\n        })\n            .join(\" AND \");\n        const countAlias = \"count\";\n        const result = await this.queryRunner.query(`SELECT COUNT(1) AS ${escape(countAlias)} FROM ${tableName} WHERE ${whereCondition}`, parameters, true);\n        return parseInt(result.records[0][countAlias]) === 0;\n    }\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    getTableName(tablePath) {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            return i === \"\"\n                ? i\n                : this.queryRunner.connection.driver.escape(i);\n        })\n            .join(\".\");\n    }\n}\n\n//# sourceMappingURL=NestedSetSubjectExecutor.js.map\n","import { CannotAttachTreeChildrenEntityError } from \"../../error/CannotAttachTreeChildrenEntityError\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Executes subject operations for closure entities.\n */\nexport class ClosureSubjectExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject) {\n        // create values to be inserted into the closure junction\n        const closureJunctionInsertMap = {};\n        subject.metadata.closureJunctionTable.ancestorColumns.forEach((column) => {\n            closureJunctionInsertMap[column.databaseName] =\n                subject.identifier;\n        });\n        subject.metadata.closureJunctionTable.descendantColumns.forEach((column) => {\n            closureJunctionInsertMap[column.databaseName] =\n                subject.identifier;\n        });\n        // insert values into the closure junction table\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .insert()\n            .into(subject.metadata.closureJunctionTable.tablePath)\n            .values(closureJunctionInsertMap)\n            .updateEntity(false)\n            .callListeners(false)\n            .execute();\n        let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet\n                ? subject.parentSubject.insertedValueSet\n                : subject.parentSubject.entity;\n        if (parent) {\n            const escape = (alias) => this.queryRunner.connection.driver.escape(alias);\n            const tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\n            const queryParams = [];\n            const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map((column) => {\n                return escape(column.databaseName);\n            });\n            const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map((column) => {\n                return escape(column.databaseName);\n            });\n            const childEntityIds1 = subject.metadata.primaryColumns.map((column) => {\n                queryParams.push(column.getEntityValue(subject.insertedValueSet\n                    ? subject.insertedValueSet\n                    : subject.entity));\n                return this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, queryParams.length - 1);\n            });\n            const whereCondition = subject.metadata.closureJunctionTable.descendantColumns.map((column) => {\n                const columnName = escape(column.databaseName);\n                const parentId = column.referencedColumn.getEntityValue(parent);\n                if (!parentId)\n                    throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                queryParams.push(parentId);\n                const parameterName = this.queryRunner.connection.driver.createParameter(\"parent_entity_\" +\n                    column.referencedColumn.databaseName, queryParams.length - 1);\n                return `${columnName} = ${parameterName}`;\n            });\n            await this.queryRunner.query(`INSERT INTO ${tableName} (${[\n                ...ancestorColumnNames,\n                ...descendantColumnNames,\n            ].join(\", \")}) ` +\n                `SELECT ${ancestorColumnNames.join(\", \")}, ${childEntityIds1.join(\", \")} FROM ${tableName} WHERE ${whereCondition.join(\" AND \")}`, queryParams);\n        }\n    }\n    /**\n     * Executes operations when subject is being updated.\n     */\n    async update(subject) {\n        let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.entity;\n        let entity = subject.databaseEntity; // if entity was attached via parent\n        if (!entity && parent)\n            // if entity was attached via children\n            entity = subject.metadata\n                .treeChildrenRelation.getEntityValue(parent)\n                .find((child) => {\n                return Object.entries(subject.identifier).every(([key, value]) => child[key] === value);\n            });\n        // Exit if the parent or the entity where never set\n        if (entity === undefined || parent === undefined) {\n            return;\n        }\n        const oldParent = subject.metadata.treeParentRelation.getEntityValue(entity);\n        const oldParentId = subject.metadata.getEntityIdMap(oldParent);\n        const parentId = subject.metadata.getEntityIdMap(parent);\n        // Exit if the new and old parents are the same\n        if (OrmUtils.compareIds(oldParentId, parentId)) {\n            return;\n        }\n        const escape = (alias) => this.queryRunner.connection.driver.escape(alias);\n        const closureTable = subject.metadata.closureJunctionTable;\n        const ancestorColumnNames = closureTable.ancestorColumns.map((column) => {\n            return escape(column.databaseName);\n        });\n        const descendantColumnNames = closureTable.descendantColumns.map((column) => {\n            return escape(column.databaseName);\n        });\n        // Delete logic\n        const createSubQuery = (qb, alias) => {\n            const subAlias = `sub${alias}`;\n            const subSelect = qb\n                .createQueryBuilder()\n                .select(descendantColumnNames.join(\", \"))\n                .from(closureTable.tablePath, subAlias);\n            // Create where conditions e.g. (WHERE \"subdescendant\".\"id_ancestor\" = :value_id)\n            for (const column of closureTable.ancestorColumns) {\n                subSelect.andWhere(`${escape(subAlias)}.${escape(column.databaseName)} = :value_${column.referencedColumn.databaseName}`);\n            }\n            return qb\n                .createQueryBuilder()\n                .select(descendantColumnNames.join(\", \"))\n                .from(`(${subSelect.getQuery()})`, alias)\n                .setParameters(subSelect.getParameters())\n                .getQuery();\n        };\n        const parameters = {};\n        for (const column of subject.metadata.primaryColumns) {\n            parameters[`value_${column.databaseName}`] =\n                entity[column.databaseName];\n        }\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .delete()\n            .from(closureTable.tablePath)\n            .where((qb) => `(${descendantColumnNames.join(\", \")}) IN (${createSubQuery(qb, \"descendant\")})`)\n            .andWhere((qb) => `(${ancestorColumnNames.join(\", \")}) NOT IN (${createSubQuery(qb, \"ancestor\")})`)\n            .setParameters(parameters)\n            .execute();\n        /**\n         * Only insert new parent if it exits\n         *\n         * This only happens if the entity doesn't become a root entity\n         */\n        if (parent) {\n            // Insert logic\n            const queryParams = [];\n            const tableName = this.getTableName(closureTable.tablePath);\n            const superAlias = escape(\"supertree\");\n            const subAlias = escape(\"subtree\");\n            const select = [\n                ...ancestorColumnNames.map((columnName) => `${superAlias}.${columnName}`),\n                ...descendantColumnNames.map((columnName) => `${subAlias}.${columnName}`),\n            ];\n            const entityWhereCondition = subject.metadata.closureJunctionTable.ancestorColumns.map((column) => {\n                const columnName = escape(column.databaseName);\n                const entityId = column.referencedColumn.getEntityValue(entity);\n                queryParams.push(entityId);\n                const parameterName = this.queryRunner.connection.driver.createParameter(\"entity_\" +\n                    column.referencedColumn.databaseName, queryParams.length - 1);\n                return `${subAlias}.${columnName} = ${parameterName}`;\n            });\n            const parentWhereCondition = subject.metadata.closureJunctionTable.descendantColumns.map((column) => {\n                const columnName = escape(column.databaseName);\n                const parentId = column.referencedColumn.getEntityValue(parent);\n                if (!parentId)\n                    throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                queryParams.push(parentId);\n                const parameterName = this.queryRunner.connection.driver.createParameter(\"parent_entity_\" +\n                    column.referencedColumn.databaseName, queryParams.length - 1);\n                return `${superAlias}.${columnName} = ${parameterName}`;\n            });\n            await this.queryRunner.query(`INSERT INTO ${tableName} (${[\n                ...ancestorColumnNames,\n                ...descendantColumnNames,\n            ].join(\", \")}) ` +\n                `SELECT ${select.join(\", \")} ` +\n                `FROM ${tableName} AS ${superAlias}, ${tableName} AS ${subAlias} ` +\n                `WHERE ${[\n                    ...entityWhereCondition,\n                    ...parentWhereCondition,\n                ].join(\" AND \")}`, queryParams);\n        }\n    }\n    /**\n     * Executes operations when subject is being removed.\n     */\n    async remove(subjects) {\n        // Only mssql need to execute deletes for the juntion table as it doesn't support multi cascade paths.\n        if (!(this.queryRunner.connection.driver.options.type === \"mssql\")) {\n            return;\n        }\n        if (!Array.isArray(subjects))\n            subjects = [subjects];\n        const escape = (alias) => this.queryRunner.connection.driver.escape(alias);\n        const identifiers = subjects.map((subject) => subject.identifier);\n        const closureTable = subjects[0].metadata.closureJunctionTable;\n        const generateWheres = (columns) => {\n            return columns\n                .map((column) => {\n                const data = identifiers.map((identifier) => identifier[column.referencedColumn.databaseName]);\n                return `${escape(column.databaseName)} IN (${data.join(\", \")})`;\n            })\n                .join(\" AND \");\n        };\n        const ancestorWhere = generateWheres(closureTable.ancestorColumns);\n        const descendantWhere = generateWheres(closureTable.descendantColumns);\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .delete()\n            .from(closureTable.tablePath)\n            .where(ancestorWhere)\n            .orWhere(descendantWhere)\n            .execute();\n    }\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    getTableName(tablePath) {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            return i === \"\"\n                ? i\n                : this.queryRunner.connection.driver.escape(i);\n        })\n            .join(\".\");\n    }\n}\n\n//# sourceMappingURL=ClosureSubjectExecutor.js.map\n","import { CannotCreateEntityIdMapError } from \"../error/CannotCreateEntityIdMapError\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { shorten } from \"../util/StringUtils\";\n/**\n * Contains all entity metadata.\n */\nexport class EntityMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"EntityMetadata\");\n        /**\n         * Children entity metadatas. Used in inheritance patterns.\n         */\n        this.childEntityMetadatas = [];\n        /**\n         * All \"inheritance tree\" from a target entity.\n         * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].\n         * It also contains child entities for single table inheritance.\n         */\n        this.inheritanceTree = [];\n        /**\n         * Table type. Tables can be closure, junction, etc.\n         */\n        this.tableType = \"regular\";\n        /**\n         * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n         */\n        this.withoutRowid = false;\n        /**\n         * Indicates if schema will be synchronized for this entity or not.\n         */\n        this.synchronize = true;\n        /**\n         * Checks if there any non-nullable column exist in this entity.\n         */\n        this.hasNonNullableRelations = false;\n        /**\n         * Indicates if this entity metadata of a junction table, or not.\n         * Junction table is a table created by many-to-many relationship.\n         *\n         * Its also possible to understand if entity is junction via tableType.\n         */\n        this.isJunction = false;\n        /**\n         * Indicates if the entity should be instantiated using the constructor\n         * or via allocating a new object via `Object.create()`.\n         */\n        this.isAlwaysUsingConstructor = true;\n        /**\n         * Checks if this table is a junction table of the closure table.\n         * This type is for tables that contain junction metadata of the closure tables.\n         */\n        this.isClosureJunction = false;\n        /**\n         * Checks if entity's table has multiple primary columns.\n         */\n        this.hasMultiplePrimaryKeys = false;\n        /**\n         * Indicates if this entity metadata has uuid generated columns.\n         */\n        this.hasUUIDGeneratedColumns = false;\n        /**\n         * Entity's column metadatas defined by user.\n         */\n        this.ownColumns = [];\n        /**\n         * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n         */\n        this.columns = [];\n        /**\n         * Ancestor columns used only in closure junction tables.\n         */\n        this.ancestorColumns = [];\n        /**\n         * Descendant columns used only in closure junction tables.\n         */\n        this.descendantColumns = [];\n        /**\n         * All columns except for virtual columns.\n         */\n        this.nonVirtualColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of owner entity.\n         */\n        this.ownerColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of inverse entity.\n         */\n        this.inverseColumns = [];\n        /**\n         * Gets the column with generated flag.\n         */\n        this.generatedColumns = [];\n        /**\n         * Gets the primary columns.\n         */\n        this.primaryColumns = [];\n        /**\n         * Entity's relation metadatas.\n         */\n        this.ownRelations = [];\n        /**\n         * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n         */\n        this.relations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.eagerRelations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.lazyRelations = [];\n        /**\n         * Gets only one-to-one relations of the entity.\n         */\n        this.oneToOneRelations = [];\n        /**\n         * Gets only owner one-to-one relations of the entity.\n         */\n        this.ownerOneToOneRelations = [];\n        /**\n         * Gets only one-to-many relations of the entity.\n         */\n        this.oneToManyRelations = [];\n        /**\n         * Gets only many-to-one relations of the entity.\n         */\n        this.manyToOneRelations = [];\n        /**\n         * Gets only many-to-many relations of the entity.\n         */\n        this.manyToManyRelations = [];\n        /**\n         * Gets only owner many-to-many relations of the entity.\n         */\n        this.ownerManyToManyRelations = [];\n        /**\n         * Gets only owner one-to-one and many-to-one relations.\n         */\n        this.relationsWithJoinColumns = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationIds = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationCounts = [];\n        /**\n         * Entity's foreign key metadatas.\n         */\n        this.foreignKeys = [];\n        /**\n         * Entity's embedded metadatas.\n         */\n        this.embeddeds = [];\n        /**\n         * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.\n         */\n        this.allEmbeddeds = [];\n        /**\n         * Entity's own indices.\n         */\n        this.ownIndices = [];\n        /**\n         * Entity's index metadatas.\n         */\n        this.indices = [];\n        /**\n         * Entity's unique metadatas.\n         */\n        this.uniques = [];\n        /**\n         * Entity's own uniques.\n         */\n        this.ownUniques = [];\n        /**\n         * Entity's check metadatas.\n         */\n        this.checks = [];\n        /**\n         * Entity's exclusion metadatas.\n         */\n        this.exclusions = [];\n        /**\n         * Entity's own listener metadatas.\n         */\n        this.ownListeners = [];\n        /**\n         * Entity listener metadatas.\n         */\n        this.listeners = [];\n        /**\n         * Listener metadatas with \"AFTER LOAD\" type.\n         */\n        this.afterLoadListeners = [];\n        /**\n         * Listener metadatas with \"BEFORE INSERT\" type.\n         */\n        this.beforeInsertListeners = [];\n        /**\n         * Listener metadatas with \"AFTER INSERT\" type.\n         */\n        this.afterInsertListeners = [];\n        /**\n         * Listener metadatas with \"BEFORE UPDATE\" type.\n         */\n        this.beforeUpdateListeners = [];\n        /**\n         * Listener metadatas with \"AFTER UPDATE\" type.\n         */\n        this.afterUpdateListeners = [];\n        /**\n         * Listener metadatas with \"BEFORE REMOVE\" type.\n         */\n        this.beforeRemoveListeners = [];\n        /**\n         * Listener metadatas with \"BEFORE SOFT REMOVE\" type.\n         */\n        this.beforeSoftRemoveListeners = [];\n        /**\n         * Listener metadatas with \"BEFORE RECOVER\" type.\n         */\n        this.beforeRecoverListeners = [];\n        /**\n         * Listener metadatas with \"AFTER REMOVE\" type.\n         */\n        this.afterRemoveListeners = [];\n        /**\n         * Listener metadatas with \"AFTER SOFT REMOVE\" type.\n         */\n        this.afterSoftRemoveListeners = [];\n        /**\n         * Listener metadatas with \"AFTER RECOVER\" type.\n         */\n        this.afterRecoverListeners = [];\n        this.connection = options.connection;\n        this.inheritanceTree = options.inheritanceTree || [];\n        this.inheritancePattern = options.inheritancePattern;\n        this.treeType = options.tableTree ? options.tableTree.type : undefined;\n        this.treeOptions = options.tableTree\n            ? options.tableTree.options\n            : undefined;\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata;\n        this.tableMetadataArgs = options.args;\n        this.target = this.tableMetadataArgs.target;\n        this.tableType = this.tableMetadataArgs.type;\n        this.expression = this.tableMetadataArgs.expression;\n        this.withoutRowid = this.tableMetadataArgs.withoutRowid;\n        this.dependsOn = this.tableMetadataArgs.dependsOn;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new entity.\n     */\n    create(queryRunner, options) {\n        const pojo = options && options.pojo === true ? true : false;\n        // if target is set to a function (e.g. class) that can be created then create it\n        let ret;\n        if (typeof this.target === \"function\" && !pojo) {\n            if (!options?.fromDeserializer || this.isAlwaysUsingConstructor) {\n                ret = new this.target();\n            }\n            else {\n                ret = Object.create(this.target.prototype);\n            }\n        }\n        else {\n            // otherwise simply return a new empty object\n            ret = {};\n        }\n        // add \"typename\" property\n        if (this.connection.options.typename) {\n            ret[this.connection.options.typename] = this.targetName;\n        }\n        this.lazyRelations.forEach((relation) => this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner));\n        return ret;\n    }\n    /**\n     * Checks if given entity has an id.\n     */\n    hasId(entity) {\n        if (!entity)\n            return false;\n        return this.primaryColumns.every((primaryColumn) => {\n            const value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined && value !== \"\";\n        });\n    }\n    /**\n     * Checks if given entity / object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    hasAllPrimaryKeys(entity) {\n        return this.primaryColumns.every((primaryColumn) => {\n            const value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined;\n        });\n    }\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureEntityIdMap(id) {\n        if (ObjectUtils.isObject(id))\n            return id;\n        if (this.hasMultiplePrimaryKeys)\n            throw new CannotCreateEntityIdMapError(this, id);\n        return this.primaryColumns[0].createValueMap(id);\n    }\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    getEntityIdMap(entity) {\n        if (!entity)\n            return undefined;\n        return EntityMetadata.getValueMap(entity, this.primaryColumns, {\n            skipNulls: true,\n        });\n    }\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    getEntityIdMixedMap(entity) {\n        if (!entity)\n            return entity;\n        const idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n        }\n        else if (idMap) {\n            return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?\n        }\n        return idMap;\n    }\n    /**\n     * Compares two different entities by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    compareEntities(firstEntity, secondEntity) {\n        const firstEntityIdMap = this.getEntityIdMap(firstEntity);\n        if (!firstEntityIdMap)\n            return false;\n        const secondEntityIdMap = this.getEntityIdMap(secondEntity);\n        if (!secondEntityIdMap)\n            return false;\n        return OrmUtils.compareIds(firstEntityIdMap, secondEntityIdMap);\n    }\n    /**\n     * Finds column with a given property name.\n     */\n    findColumnWithPropertyName(propertyName) {\n        return this.columns.find((column) => column.propertyName === propertyName);\n    }\n    /**\n     * Finds column with a given database name.\n     */\n    findColumnWithDatabaseName(databaseName) {\n        return this.columns.find((column) => column.databaseName === databaseName);\n    }\n    /**\n     * Checks if there is a column or relationship with a given property path.\n     */\n    hasColumnWithPropertyPath(propertyPath) {\n        const hasColumn = this.columns.some((column) => column.propertyPath === propertyPath);\n        return hasColumn || this.hasRelationWithPropertyPath(propertyPath);\n    }\n    /**\n     * Finds column with a given property path.\n     */\n    findColumnWithPropertyPath(propertyPath) {\n        const column = this.columns.find((column) => column.propertyPath === propertyPath);\n        if (column)\n            return column;\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.relations.find((relation) => relation.propertyPath === propertyPath);\n        if (relation && relation.joinColumns.length === 1)\n            return relation.joinColumns[0];\n        return undefined;\n    }\n    /**\n     * Finds column with a given property path.\n     * Does not search in relation unlike findColumnWithPropertyPath.\n     */\n    findColumnWithPropertyPathStrict(propertyPath) {\n        return this.columns.find((column) => column.propertyPath === propertyPath);\n    }\n    /**\n     * Finds columns with a given property path.\n     * Property path can match a relation, and relations can contain multiple columns.\n     */\n    findColumnsWithPropertyPath(propertyPath) {\n        const column = this.columns.find((column) => column.propertyPath === propertyPath);\n        if (column)\n            return [column];\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.findRelationWithPropertyPath(propertyPath);\n        if (relation && relation.joinColumns)\n            return relation.joinColumns;\n        return [];\n    }\n    /**\n     * Checks if there is a relation with the given property path.\n     */\n    hasRelationWithPropertyPath(propertyPath) {\n        return this.relations.some((relation) => relation.propertyPath === propertyPath);\n    }\n    /**\n     * Finds relation with the given property path.\n     */\n    findRelationWithPropertyPath(propertyPath) {\n        return this.relations.find((relation) => relation.propertyPath === propertyPath);\n    }\n    /**\n     * Checks if there is an embedded with a given property path.\n     */\n    hasEmbeddedWithPropertyPath(propertyPath) {\n        return this.allEmbeddeds.some((embedded) => embedded.propertyPath === propertyPath);\n    }\n    /**\n     * Finds embedded with a given property path.\n     */\n    findEmbeddedWithPropertyPath(propertyPath) {\n        return this.allEmbeddeds.find((embedded) => embedded.propertyPath === propertyPath);\n    }\n    /**\n     * Returns an array of databaseNames mapped from provided propertyPaths\n     */\n    mapPropertyPathsToColumns(propertyPaths) {\n        return propertyPaths.map((propertyPath) => {\n            const column = this.findColumnWithPropertyPath(propertyPath);\n            if (column == null) {\n                throw new EntityPropertyNotFoundError(propertyPath, this);\n            }\n            return column;\n        });\n    }\n    /**\n     * Iterates through entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    extractRelationValuesFromEntity(entity, relations) {\n        const relationsAndValues = [];\n        relations.forEach((relation) => {\n            const value = relation.getEntityValue(entity);\n            if (Array.isArray(value)) {\n                value.forEach((subValue) => relationsAndValues.push([\n                    relation,\n                    subValue,\n                    EntityMetadata.getInverseEntityMetadata(subValue, relation),\n                ]));\n            }\n            else if (value) {\n                relationsAndValues.push([\n                    relation,\n                    value,\n                    EntityMetadata.getInverseEntityMetadata(value, relation),\n                ]);\n            }\n        });\n        return relationsAndValues;\n    }\n    /**\n     * In the case of SingleTableInheritance, find the correct metadata\n     * for a given value.\n     *\n     * @param value The value to find the metadata for.\n     * @returns The found metadata for the entity or the base metadata if no matching metadata\n     *          was found in the whole inheritance tree.\n     */\n    findInheritanceMetadata(value) {\n        // Check for single table inheritance and find the correct metadata in that case.\n        // Goal is to use the correct discriminator as we could have a repository\n        // for an (abstract) base class and thus the target would not match.\n        if (this.inheritancePattern === \"STI\" &&\n            this.childEntityMetadatas.length > 0) {\n            // There could be a column on the base class that can manually be set to override the type.\n            let manuallySetDiscriminatorValue;\n            if (this.discriminatorColumn) {\n                manuallySetDiscriminatorValue =\n                    value[this.discriminatorColumn.propertyName];\n            }\n            return (this.childEntityMetadatas.find((meta) => manuallySetDiscriminatorValue ===\n                meta.discriminatorValue ||\n                value.constructor === meta.target) || this);\n        }\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n    static getInverseEntityMetadata(value, relation) {\n        return relation.inverseEntityMetadata.findInheritanceMetadata(value);\n    }\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a property paths for a given entity.\n     *\n     * @deprecated\n     */\n    static createPropertyPath(metadata, entity, prefix = \"\") {\n        const paths = [];\n        Object.keys(entity).forEach((key) => {\n            // check for function is needed in the cases when createPropertyPath used on values contain a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            const parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                const subPaths = this.createPropertyPath(metadata, entity[key], parentPath);\n                paths.push(...subPaths);\n            }\n            else {\n                const path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    }\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    static difference(firstIdMaps, secondIdMaps) {\n        return firstIdMaps.filter((firstIdMap) => {\n            return !secondIdMaps.find((secondIdMap) => OrmUtils.compareIds(firstIdMap, secondIdMap));\n        });\n    }\n    /**\n     * Creates value map from the given values and columns.\n     * Examples of usages are primary columns map and join columns map.\n     */\n    static getValueMap(entity, columns, options) {\n        return columns.reduce((map, column) => {\n            const value = column.getEntityValueMap(entity, options);\n            // make sure that none of the values of the columns are not missing\n            if (map === undefined || value === null || value === undefined)\n                return undefined;\n            return OrmUtils.mergeDeep(map, value);\n        }, {});\n    }\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    build() {\n        const namingStrategy = this.connection.namingStrategy;\n        const entityPrefix = this.connection.options.entityPrefix;\n        const entitySkipConstructor = this.connection.options.entitySkipConstructor;\n        this.engine = this.tableMetadataArgs.engine;\n        this.database =\n            this.tableMetadataArgs.type === \"entity-child\" &&\n                this.parentEntityMetadata\n                ? this.parentEntityMetadata.database\n                : this.tableMetadataArgs.database;\n        if (this.tableMetadataArgs.schema) {\n            this.schema = this.tableMetadataArgs.schema;\n        }\n        else if (this.tableMetadataArgs.type === \"entity-child\" &&\n            this.parentEntityMetadata) {\n            this.schema = this.parentEntityMetadata.schema;\n        }\n        else if (this.connection.options?.hasOwnProperty(\"schema\")) {\n            this.schema = this.connection.options.schema;\n        }\n        this.givenTableName =\n            this.tableMetadataArgs.type === \"entity-child\" &&\n                this.parentEntityMetadata\n                ? this.parentEntityMetadata.givenTableName\n                : this.tableMetadataArgs.name;\n        this.synchronize =\n            this.tableMetadataArgs.synchronize === false ? false : true;\n        this.targetName =\n            typeof this.tableMetadataArgs.target === \"function\"\n                ? this.tableMetadataArgs.target.name\n                : this.tableMetadataArgs.target;\n        if (this.tableMetadataArgs.type === \"closure-junction\") {\n            this.tableNameWithoutPrefix =\n                namingStrategy.closureJunctionTableName(this.givenTableName);\n        }\n        else if (this.tableMetadataArgs.type === \"entity-child\" &&\n            this.parentEntityMetadata) {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);\n        }\n        else {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);\n            if (this.tableMetadataArgs.type === \"junction\" &&\n                this.connection.driver.maxAliasLength &&\n                this.connection.driver.maxAliasLength > 0 &&\n                this.tableNameWithoutPrefix.length >\n                    this.connection.driver.maxAliasLength) {\n                // note: we are not using DriverUtils.buildAlias here because we would like to avoid\n                // hashed table names. However, current algorithm also isn't perfect, but we cannot\n                // change it, since it's a big breaking change. Planned to 0.4.0\n                this.tableNameWithoutPrefix = shorten(this.tableNameWithoutPrefix, { separator: \"_\", segmentLength: 3 });\n            }\n        }\n        this.tableName = entityPrefix\n            ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix)\n            : this.tableNameWithoutPrefix;\n        this.target = this.target ? this.target : this.tableName;\n        this.name = this.targetName ? this.targetName : this.tableName;\n        this.expression = this.tableMetadataArgs.expression;\n        this.withoutRowid =\n            this.tableMetadataArgs.withoutRowid === true ? true : false;\n        this.tablePath = this.connection.driver.buildTableName(this.tableName, this.schema, this.database);\n        this.orderBy =\n            typeof this.tableMetadataArgs.orderBy === \"function\"\n                ? this.tableMetadataArgs.orderBy(this.propertiesMap)\n                : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not\n        if (entitySkipConstructor !== undefined) {\n            this.isAlwaysUsingConstructor = !entitySkipConstructor;\n        }\n        this.isJunction =\n            this.tableMetadataArgs.type === \"closure-junction\" ||\n                this.tableMetadataArgs.type === \"junction\";\n        this.isClosureJunction =\n            this.tableMetadataArgs.type === \"closure-junction\";\n        this.comment = this.tableMetadataArgs.comment;\n    }\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    registerColumn(column) {\n        if (this.ownColumns.indexOf(column) !== -1)\n            return;\n        this.ownColumns.push(column);\n        this.columns = this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), this.ownColumns);\n        this.primaryColumns = this.columns.filter((column) => column.isPrimary);\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\n        this.hasUUIDGeneratedColumns =\n            this.columns.filter((column) => column.isGenerated || column.generationStrategy === \"uuid\").length > 0;\n        this.propertiesMap = this.createPropertiesMap();\n        if (this.childEntityMetadatas)\n            this.childEntityMetadatas.forEach((entityMetadata) => entityMetadata.registerColumn(column));\n    }\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    createPropertiesMap() {\n        const map = {};\n        this.columns.forEach((column) => OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)));\n        this.relations.forEach((relation) => OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)));\n        return map;\n    }\n    /**\n     * Checks if entity has any column which rely on returning data,\n     * e.g. columns with auto generated value, DEFAULT values considered as dependant of returning data.\n     * For example, if we need to have RETURNING after INSERT (or we need returned id for DBs not supporting RETURNING),\n     * it means we cannot execute bulk inserts in some cases.\n     */\n    getInsertionReturningColumns() {\n        return this.columns.filter((column) => {\n            return (column.default !== undefined ||\n                column.asExpression !== undefined ||\n                column.isGenerated ||\n                column.isCreateDate ||\n                column.isUpdateDate ||\n                column.isDeleteDate ||\n                column.isVersion);\n        });\n    }\n}\n\n//# sourceMappingURL=EntityMetadata.js.map\n","import { OrmUtils } from \"../../util/OrmUtils\";\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\";\nimport { Brackets } from \"../../query-builder/Brackets\";\n/**\n * Executes subject operations for materialized-path tree entities.\n */\nexport class MaterializedPathSubjectExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject) {\n        let parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet\n                ? subject.parentSubject.insertedValueSet\n                : subject.parentSubject.entity;\n        const parentId = subject.metadata.getEntityIdMap(parent);\n        let parentPath = \"\";\n        if (parentId) {\n            parentPath = await this.getEntityPath(subject, parentId);\n        }\n        const insertedEntityId = subject.metadata\n            .treeParentRelation.joinColumns.map((joinColumn) => {\n            return joinColumn.referencedColumn.getEntityValue(subject.insertedValueSet);\n        })\n            .join(\"_\");\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .update(subject.metadata.target)\n            .set({\n            [subject.metadata.materializedPathColumn.propertyPath]: parentPath + insertedEntityId + \".\",\n        })\n            .where(subject.identifier)\n            .execute();\n    }\n    /**\n     * Executes operations when subject is being updated.\n     */\n    async update(subject) {\n        let newParent = subject.metadata.treeParentRelation.getEntityValue(subject.entity); // if entity was attached via parent\n        if (!newParent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            newParent = subject.parentSubject.entity;\n        let entity = subject.databaseEntity; // if entity was attached via parent\n        if (!entity && newParent)\n            // if entity was attached via children\n            entity = subject.metadata\n                .treeChildrenRelation.getEntityValue(newParent)\n                .find((child) => {\n                return Object.entries(subject.identifier).every(([key, value]) => child[key] === value);\n            });\n        const oldParent = subject.metadata.treeParentRelation.getEntityValue(entity);\n        const oldParentId = this.getEntityParentReferencedColumnMap(subject, oldParent);\n        const newParentId = this.getEntityParentReferencedColumnMap(subject, newParent);\n        // Exit if the new and old parents are the same\n        if (OrmUtils.compareIds(oldParentId, newParentId)) {\n            return;\n        }\n        let newParentPath = \"\";\n        if (newParentId) {\n            newParentPath = await this.getEntityPath(subject, newParentId);\n        }\n        let oldParentPath = \"\";\n        if (oldParentId) {\n            oldParentPath =\n                (await this.getEntityPath(subject, oldParentId)) || \"\";\n        }\n        const entityPath = subject.metadata\n            .treeParentRelation.joinColumns.map((joinColumn) => {\n            return joinColumn.referencedColumn.getEntityValue(entity);\n        })\n            .join(\"_\");\n        const propertyPath = subject.metadata.materializedPathColumn.propertyPath;\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .update(subject.metadata.target)\n            .set({\n            [propertyPath]: () => `REPLACE(${this.queryRunner.connection.driver.escape(propertyPath)}, '${oldParentPath}${entityPath}.', '${newParentPath}${entityPath}.')`,\n        })\n            .where(`${propertyPath} LIKE :path`, {\n            path: `${oldParentPath}${entityPath}.%`,\n        })\n            .execute();\n    }\n    getEntityParentReferencedColumnMap(subject, entity) {\n        if (!entity)\n            return undefined;\n        return EntityMetadata.getValueMap(entity, subject.metadata\n            .treeParentRelation.joinColumns.map((column) => column.referencedColumn)\n            .filter((v) => v != null), { skipNulls: true });\n    }\n    getEntityPath(subject, id) {\n        const metadata = subject.metadata;\n        const normalized = (Array.isArray(id) ? id : [id]).map((id) => metadata.ensureEntityIdMap(id));\n        return this.queryRunner.manager\n            .createQueryBuilder()\n            .select(subject.metadata.targetName +\n            \".\" +\n            subject.metadata.materializedPathColumn.propertyPath, \"path\")\n            .from(subject.metadata.target, subject.metadata.targetName)\n            .where(new Brackets((qb) => {\n            for (const data of normalized) {\n                qb.orWhere(new Brackets((qb) => qb.where(data)));\n            }\n        }))\n            .getRawOne()\n            .then((result) => (result ? result[\"path\"] : \"\"));\n    }\n}\n\n//# sourceMappingURL=MaterializedPathSubjectExecutor.js.map\n","import { SubjectTopoligicalSorter } from \"./SubjectTopoligicalSorter\";\nimport { SubjectChangedColumnsComputer } from \"./SubjectChangedColumnsComputer\";\nimport { SubjectWithoutIdentifierError } from \"../error/SubjectWithoutIdentifierError\";\nimport { SubjectRemovedAndUpdatedError } from \"../error/SubjectRemovedAndUpdatedError\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { NestedSetSubjectExecutor } from \"./tree/NestedSetSubjectExecutor\";\nimport { ClosureSubjectExecutor } from \"./tree/ClosureSubjectExecutor\";\nimport { MaterializedPathSubjectExecutor } from \"./tree/MaterializedPathSubjectExecutor\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nexport class SubjectExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryRunner, subjects, options) {\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).\n         */\n        this.hasExecutableOperations = false;\n        /**\n         * Subjects that must be inserted.\n         */\n        this.insertSubjects = [];\n        /**\n         * Subjects that must be updated.\n         */\n        this.updateSubjects = [];\n        /**\n         * Subjects that must be removed.\n         */\n        this.removeSubjects = [];\n        /**\n         * Subjects that must be soft-removed.\n         */\n        this.softRemoveSubjects = [];\n        /**\n         * Subjects that must be recovered.\n         */\n        this.recoverSubjects = [];\n        this.queryRunner = queryRunner;\n        this.allSubjects = subjects;\n        this.options = options;\n        this.validate();\n        this.recompute();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    async execute() {\n        // console.time(\"SubjectExecutor.execute\");\n        // broadcast \"before\" events before we start insert / update / remove operations\n        let broadcasterResult = undefined;\n        if (!this.options || this.options.listeners !== false) {\n            // console.time(\".broadcastBeforeEventsForAll\");\n            broadcasterResult = this.broadcastBeforeEventsForAll();\n            if (broadcasterResult.promises.length > 0)\n                await Promise.all(broadcasterResult.promises);\n            // console.timeEnd(\".broadcastBeforeEventsForAll\");\n        }\n        // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects\n        // recompute only in the case if any listener or subscriber was really executed\n        if (broadcasterResult && broadcasterResult.count > 0) {\n            // console.time(\".recompute\");\n            this.insertSubjects.forEach((subject) => subject.recompute());\n            this.updateSubjects.forEach((subject) => subject.recompute());\n            this.removeSubjects.forEach((subject) => subject.recompute());\n            this.softRemoveSubjects.forEach((subject) => subject.recompute());\n            this.recoverSubjects.forEach((subject) => subject.recompute());\n            this.recompute();\n            // console.timeEnd(\".recompute\");\n        }\n        // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly\n        // console.timeEnd(\"prepare\");\n        // execute all insert operations\n        // console.time(\".insertion\");\n        this.insertSubjects = new SubjectTopoligicalSorter(this.insertSubjects).sort(\"insert\");\n        await this.executeInsertOperations();\n        // console.timeEnd(\".insertion\");\n        // recompute update operations since insertion can create updation operations for the\n        // properties it wasn't able to handle on its own (referenced columns)\n        this.updateSubjects = this.allSubjects.filter((subject) => subject.mustBeUpdated);\n        // execute update operations\n        // console.time(\".updation\");\n        await this.executeUpdateOperations();\n        // console.timeEnd(\".updation\");\n        // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal\n        // console.time(\".removal\");\n        this.removeSubjects = new SubjectTopoligicalSorter(this.removeSubjects).sort(\"delete\");\n        await this.executeRemoveOperations();\n        // console.timeEnd(\".removal\");\n        // recompute soft-remove operations\n        this.softRemoveSubjects = this.allSubjects.filter((subject) => subject.mustBeSoftRemoved);\n        // execute soft-remove operations\n        await this.executeSoftRemoveOperations();\n        // recompute recover operations\n        this.recoverSubjects = this.allSubjects.filter((subject) => subject.mustBeRecovered);\n        // execute recover operations\n        await this.executeRecoverOperations();\n        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n        this.updateSpecialColumnsInPersistedEntities();\n        // console.timeEnd(\".updateSpecialColumnsInPersistedEntities\");\n        // finally broadcast \"after\" events after we finish insert / update / remove operations\n        if (!this.options || this.options.listeners !== false) {\n            // console.time(\".broadcastAfterEventsForAll\");\n            broadcasterResult = this.broadcastAfterEventsForAll();\n            if (broadcasterResult.promises.length > 0)\n                await Promise.all(broadcasterResult.promises);\n            // console.timeEnd(\".broadcastAfterEventsForAll\");\n        }\n        // console.timeEnd(\"SubjectExecutor.execute\");\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given subjects.\n     */\n    validate() {\n        this.allSubjects.forEach((subject) => {\n            if (subject.mustBeUpdated && subject.mustBeRemoved)\n                throw new SubjectRemovedAndUpdatedError(subject);\n        });\n    }\n    /**\n     * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.\n     */\n    recompute() {\n        new SubjectChangedColumnsComputer().compute(this.allSubjects);\n        this.insertSubjects = this.allSubjects.filter((subject) => subject.mustBeInserted);\n        this.updateSubjects = this.allSubjects.filter((subject) => subject.mustBeUpdated);\n        this.removeSubjects = this.allSubjects.filter((subject) => subject.mustBeRemoved);\n        this.softRemoveSubjects = this.allSubjects.filter((subject) => subject.mustBeSoftRemoved);\n        this.recoverSubjects = this.allSubjects.filter((subject) => subject.mustBeRecovered);\n        this.hasExecutableOperations =\n            this.insertSubjects.length > 0 ||\n                this.updateSubjects.length > 0 ||\n                this.removeSubjects.length > 0 ||\n                this.softRemoveSubjects.length > 0 ||\n                this.recoverSubjects.length > 0;\n    }\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\", \"BEFORE_SOFT_REMOVE\", \"BEFORE_RECOVER\" events for all given subjects.\n     */\n    broadcastBeforeEventsForAll() {\n        const result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity));\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.identifier));\n        if (this.softRemoveSubjects.length)\n            this.softRemoveSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastBeforeSoftRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.identifier));\n        if (this.recoverSubjects.length)\n            this.recoverSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastBeforeRecoverEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.identifier));\n        return result;\n    }\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\", \"AFTER_SOFT_REMOVE\", \"AFTER_RECOVER\" events for all given subjects.\n     * Returns void if there wasn't any listener or subscriber executed.\n     * Note: this method has a performance-optimized code organization.\n     */\n    broadcastAfterEventsForAll() {\n        const result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity, subject.identifier));\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations));\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.identifier));\n        if (this.softRemoveSubjects.length)\n            this.softRemoveSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastAfterSoftRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.identifier));\n        if (this.recoverSubjects.length)\n            this.recoverSubjects.forEach((subject) => this.queryRunner.broadcaster.broadcastAfterRecoverEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.identifier));\n        return result;\n    }\n    /**\n     * Executes insert operations.\n     */\n    async executeInsertOperations() {\n        // group insertion subjects to make bulk insertions\n        const [groupedInsertSubjects, groupedInsertSubjectKeys] = this.groupBulkSubjects(this.insertSubjects, \"insert\");\n        // then we run insertion in the sequential order which is important since we have an ordered subjects\n        for (const groupName of groupedInsertSubjectKeys) {\n            const subjects = groupedInsertSubjects[groupName];\n            // we must separately insert entities which does not have any values to insert\n            // because its not possible to insert multiple entities with only default values in bulk\n            const bulkInsertMaps = [];\n            const bulkInsertSubjects = [];\n            const singleInsertSubjects = [];\n            if (this.queryRunner.connection.driver.options.type === \"mongodb\") {\n                subjects.forEach((subject) => {\n                    if (subject.metadata.createDateColumn && subject.entity) {\n                        subject.entity[subject.metadata.createDateColumn.databaseName] = new Date();\n                    }\n                    if (subject.metadata.updateDateColumn && subject.entity) {\n                        subject.entity[subject.metadata.updateDateColumn.databaseName] = new Date();\n                    }\n                    subject.createValueSetAndPopChangeMap();\n                    bulkInsertSubjects.push(subject);\n                    bulkInsertMaps.push(subject.entity);\n                });\n            }\n            else if (this.queryRunner.connection.driver.options.type === \"oracle\") {\n                subjects.forEach((subject) => {\n                    singleInsertSubjects.push(subject);\n                });\n            }\n            else {\n                subjects.forEach((subject) => {\n                    // we do not insert in bulk in following cases:\n                    // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows\n                    // - when entity is a tree table, since tree tables require extra operation per each inserted row\n                    // - when oracle is used, since oracle's bulk insertion is very bad\n                    if (subject.changeMaps.length === 0 ||\n                        subject.metadata.treeType ||\n                        this.queryRunner.connection.driver.options.type ===\n                            \"oracle\" ||\n                        this.queryRunner.connection.driver.options.type ===\n                            \"sap\") {\n                        singleInsertSubjects.push(subject);\n                    }\n                    else {\n                        bulkInsertSubjects.push(subject);\n                        bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());\n                    }\n                });\n            }\n            // for mongodb we have a bit different insertion logic\n            if (InstanceChecker.isMongoEntityManager(this.queryRunner.manager)) {\n                const insertResult = await this.queryRunner.manager.insert(subjects[0].metadata.target, bulkInsertMaps);\n                subjects.forEach((subject, index) => {\n                    subject.identifier = insertResult.identifiers[index];\n                    subject.generatedMap = insertResult.generatedMaps[index];\n                    subject.insertedValueSet = bulkInsertMaps[index];\n                });\n            }\n            else {\n                // here we execute our insertion query\n                // we need to enable entity updation because we DO need to have updated insertedMap\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                if (bulkInsertMaps.length > 0) {\n                    const insertResult = await this.queryRunner.manager\n                        .createQueryBuilder()\n                        .insert()\n                        .into(subjects[0].metadata.target)\n                        .values(bulkInsertMaps)\n                        .updateEntity(this.options && this.options.reload === false\n                        ? false\n                        : true)\n                        .callListeners(false)\n                        .execute();\n                    bulkInsertSubjects.forEach((subject, index) => {\n                        subject.identifier = insertResult.identifiers[index];\n                        subject.generatedMap = insertResult.generatedMaps[index];\n                        subject.insertedValueSet = bulkInsertMaps[index];\n                    });\n                }\n                // insert subjects which must be inserted in separate requests (all default values)\n                if (singleInsertSubjects.length > 0) {\n                    for (const subject of singleInsertSubjects) {\n                        subject.insertedValueSet =\n                            subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it\n                        // for nested set we execute additional queries\n                        if (subject.metadata.treeType === \"nested-set\")\n                            await new NestedSetSubjectExecutor(this.queryRunner).insert(subject);\n                        await this.queryRunner.manager\n                            .createQueryBuilder()\n                            .insert()\n                            .into(subject.metadata.target)\n                            .values(subject.insertedValueSet)\n                            .updateEntity(this.options && this.options.reload === false\n                            ? false\n                            : true)\n                            .callListeners(false)\n                            .execute()\n                            .then((insertResult) => {\n                            subject.identifier = insertResult.identifiers[0];\n                            subject.generatedMap =\n                                insertResult.generatedMaps[0];\n                        });\n                        // for tree tables we execute additional queries\n                        if (subject.metadata.treeType === \"closure-table\") {\n                            await new ClosureSubjectExecutor(this.queryRunner).insert(subject);\n                        }\n                        else if (subject.metadata.treeType === \"materialized-path\") {\n                            await new MaterializedPathSubjectExecutor(this.queryRunner).insert(subject);\n                        }\n                    }\n                }\n            }\n            subjects.forEach((subject) => {\n                if (subject.generatedMap) {\n                    subject.metadata.columns.forEach((column) => {\n                        const value = column.getEntityValue(subject.generatedMap);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(subject.generatedMap, preparedValue);\n                        }\n                    });\n                }\n            });\n        }\n    }\n    /**\n     * Updates all given subjects in the database.\n     */\n    async executeUpdateOperations() {\n        const updateSubject = async (subject) => {\n            if (!subject.identifier)\n                throw new SubjectWithoutIdentifierError(subject);\n            // for mongodb we have a bit different updation logic\n            if (InstanceChecker.isMongoEntityManager(this.queryRunner.manager)) {\n                const partialEntity = this.cloneMongoSubjectEntity(subject);\n                if (subject.metadata.objectIdColumn &&\n                    subject.metadata.objectIdColumn.propertyName) {\n                    delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                }\n                if (subject.metadata.createDateColumn &&\n                    subject.metadata.createDateColumn.propertyName) {\n                    delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                }\n                if (subject.metadata.updateDateColumn &&\n                    subject.metadata.updateDateColumn.propertyName) {\n                    partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                }\n                const manager = this.queryRunner.manager;\n                await manager.update(subject.metadata.target, subject.identifier, partialEntity);\n            }\n            else {\n                const updateMap = subject.createValueSetAndPopChangeMap();\n                // for tree tables we execute additional queries\n                switch (subject.metadata.treeType) {\n                    case \"nested-set\":\n                        await new NestedSetSubjectExecutor(this.queryRunner).update(subject);\n                        break;\n                    case \"closure-table\":\n                        await new ClosureSubjectExecutor(this.queryRunner).update(subject);\n                        break;\n                    case \"materialized-path\":\n                        await new MaterializedPathSubjectExecutor(this.queryRunner).update(subject);\n                        break;\n                }\n                // here we execute our updation query\n                // we need to enable entity updation because we update a subject identifier\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                const updateQueryBuilder = this.queryRunner.manager\n                    .createQueryBuilder()\n                    .update(subject.metadata.target)\n                    .set(updateMap)\n                    .updateEntity(this.options && this.options.reload === false\n                    ? false\n                    : true)\n                    .callListeners(false);\n                if (subject.entity) {\n                    updateQueryBuilder.whereEntity(subject.identifier);\n                }\n                else {\n                    // in this case identifier is just conditions object to update by\n                    updateQueryBuilder.where(subject.identifier);\n                }\n                const updateResult = await updateQueryBuilder.execute();\n                let updateGeneratedMap = updateResult.generatedMaps[0];\n                if (updateGeneratedMap) {\n                    subject.metadata.columns.forEach((column) => {\n                        const value = column.getEntityValue(updateGeneratedMap);\n                        if (value !== undefined && value !== null) {\n                            const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                            column.setEntityValue(updateGeneratedMap, preparedValue);\n                        }\n                    });\n                    if (!subject.generatedMap) {\n                        subject.generatedMap = {};\n                    }\n                    Object.assign(subject.generatedMap, updateGeneratedMap);\n                }\n            }\n        };\n        // Nested sets need to be updated one by one\n        // Split array in two, one with nested set subjects and the other with the remaining subjects\n        const nestedSetSubjects = [];\n        const remainingSubjects = [];\n        for (const subject of this.updateSubjects) {\n            if (subject.metadata.treeType === \"nested-set\") {\n                nestedSetSubjects.push(subject);\n            }\n            else {\n                remainingSubjects.push(subject);\n            }\n        }\n        // Run nested set updates one by one\n        const nestedSetPromise = new Promise(async (ok, fail) => {\n            for (const subject of nestedSetSubjects) {\n                try {\n                    await updateSubject(subject);\n                }\n                catch (error) {\n                    fail(error);\n                }\n            }\n            ok();\n        });\n        // Run all remaining subjects in parallel\n        await Promise.all([\n            ...remainingSubjects.map(updateSubject),\n            nestedSetPromise,\n        ]);\n    }\n    /**\n     * Removes all given subjects from the database.\n     *\n     * todo: we need to apply topological sort here as well\n     */\n    async executeRemoveOperations() {\n        // group insertion subjects to make bulk insertions\n        const [groupedRemoveSubjects, groupedRemoveSubjectKeys] = this.groupBulkSubjects(this.removeSubjects, \"delete\");\n        for (const groupName of groupedRemoveSubjectKeys) {\n            const subjects = groupedRemoveSubjects[groupName];\n            const deleteMaps = subjects.map((subject) => {\n                if (!subject.identifier)\n                    throw new SubjectWithoutIdentifierError(subject);\n                return subject.identifier;\n            });\n            // for mongodb we have a bit different updation logic\n            if (InstanceChecker.isMongoEntityManager(this.queryRunner.manager)) {\n                const manager = this.queryRunner.manager;\n                await manager.delete(subjects[0].metadata.target, deleteMaps);\n            }\n            else {\n                // for tree tables we execute additional queries\n                switch (subjects[0].metadata.treeType) {\n                    case \"nested-set\":\n                        await new NestedSetSubjectExecutor(this.queryRunner).remove(subjects);\n                        break;\n                    case \"closure-table\":\n                        await new ClosureSubjectExecutor(this.queryRunner).remove(subjects);\n                        break;\n                }\n                // here we execute our deletion query\n                // we don't need to specify entities and set update entity to true since the only thing query builder\n                // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                // also, we disable listeners because we call them on our own in persistence layer\n                await this.queryRunner.manager\n                    .createQueryBuilder()\n                    .delete()\n                    .from(subjects[0].metadata.target)\n                    .where(deleteMaps)\n                    .callListeners(false)\n                    .execute();\n            }\n        }\n    }\n    cloneMongoSubjectEntity(subject) {\n        const target = {};\n        if (subject.entity) {\n            for (const column of subject.metadata.columns) {\n                OrmUtils.mergeDeep(target, column.getEntityValueMap(subject.entity));\n            }\n        }\n        return target;\n    }\n    /**\n     * Soft-removes all given subjects in the database.\n     */\n    async executeSoftRemoveOperations() {\n        await Promise.all(this.softRemoveSubjects.map(async (subject) => {\n            if (!subject.identifier)\n                throw new SubjectWithoutIdentifierError(subject);\n            let updateResult;\n            // for mongodb we have a bit different updation logic\n            if (InstanceChecker.isMongoEntityManager(this.queryRunner.manager)) {\n                const partialEntity = this.cloneMongoSubjectEntity(subject);\n                if (subject.metadata.objectIdColumn &&\n                    subject.metadata.objectIdColumn.propertyName) {\n                    delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                }\n                if (subject.metadata.createDateColumn &&\n                    subject.metadata.createDateColumn.propertyName) {\n                    delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                }\n                if (subject.metadata.updateDateColumn &&\n                    subject.metadata.updateDateColumn.propertyName) {\n                    partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                }\n                if (subject.metadata.deleteDateColumn &&\n                    subject.metadata.deleteDateColumn.propertyName) {\n                    partialEntity[subject.metadata.deleteDateColumn.propertyName] = new Date();\n                }\n                const manager = this.queryRunner\n                    .manager;\n                updateResult = await manager.update(subject.metadata.target, subject.identifier, partialEntity);\n            }\n            else {\n                // here we execute our soft-deletion query\n                // we need to enable entity soft-deletion because we update a subject identifier\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                const softDeleteQueryBuilder = this.queryRunner.manager\n                    .createQueryBuilder()\n                    .softDelete()\n                    .from(subject.metadata.target)\n                    .updateEntity(this.options && this.options.reload === false\n                    ? false\n                    : true)\n                    .callListeners(false);\n                if (subject.entity) {\n                    softDeleteQueryBuilder.whereEntity(subject.identifier);\n                }\n                else {\n                    // in this case identifier is just conditions object to update by\n                    softDeleteQueryBuilder.where(subject.identifier);\n                }\n                updateResult = await softDeleteQueryBuilder.execute();\n            }\n            subject.generatedMap = updateResult.generatedMaps[0];\n            if (subject.generatedMap) {\n                subject.metadata.columns.forEach((column) => {\n                    const value = column.getEntityValue(subject.generatedMap);\n                    if (value !== undefined && value !== null) {\n                        const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                        column.setEntityValue(subject.generatedMap, preparedValue);\n                    }\n                });\n            }\n            // experiments, remove probably, need to implement tree tables children removal\n            // if (subject.updatedRelationMaps.length > 0) {\n            //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\n            //         if (!updatedRelation.relation.isTreeParent) return;\n            //         if (!updatedRelation.value !== null) return;\n            //\n            //         if (subject.metadata.treeType === \"closure-table\") {\n            //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\n            //         }\n            //     }));\n            // }\n        }));\n    }\n    /**\n     * Recovers all given subjects in the database.\n     */\n    async executeRecoverOperations() {\n        await Promise.all(this.recoverSubjects.map(async (subject) => {\n            if (!subject.identifier)\n                throw new SubjectWithoutIdentifierError(subject);\n            let updateResult;\n            // for mongodb we have a bit different updation logic\n            if (InstanceChecker.isMongoEntityManager(this.queryRunner.manager)) {\n                const partialEntity = this.cloneMongoSubjectEntity(subject);\n                if (subject.metadata.objectIdColumn &&\n                    subject.metadata.objectIdColumn.propertyName) {\n                    delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                }\n                if (subject.metadata.createDateColumn &&\n                    subject.metadata.createDateColumn.propertyName) {\n                    delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                }\n                if (subject.metadata.updateDateColumn &&\n                    subject.metadata.updateDateColumn.propertyName) {\n                    partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                }\n                if (subject.metadata.deleteDateColumn &&\n                    subject.metadata.deleteDateColumn.propertyName) {\n                    partialEntity[subject.metadata.deleteDateColumn.propertyName] = null;\n                }\n                const manager = this.queryRunner\n                    .manager;\n                updateResult = await manager.update(subject.metadata.target, subject.identifier, partialEntity);\n            }\n            else {\n                // here we execute our restory query\n                // we need to enable entity restory because we update a subject identifier\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\n                // also, we disable listeners because we call them on our own in persistence layer\n                const softDeleteQueryBuilder = this.queryRunner.manager\n                    .createQueryBuilder()\n                    .restore()\n                    .from(subject.metadata.target)\n                    .updateEntity(this.options && this.options.reload === false\n                    ? false\n                    : true)\n                    .callListeners(false);\n                if (subject.entity) {\n                    softDeleteQueryBuilder.whereEntity(subject.identifier);\n                }\n                else {\n                    // in this case identifier is just conditions object to update by\n                    softDeleteQueryBuilder.where(subject.identifier);\n                }\n                updateResult = await softDeleteQueryBuilder.execute();\n            }\n            subject.generatedMap = updateResult.generatedMaps[0];\n            if (subject.generatedMap) {\n                subject.metadata.columns.forEach((column) => {\n                    const value = column.getEntityValue(subject.generatedMap);\n                    if (value !== undefined && value !== null) {\n                        const preparedValue = this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                        column.setEntityValue(subject.generatedMap, preparedValue);\n                    }\n                });\n            }\n            // experiments, remove probably, need to implement tree tables children removal\n            // if (subject.updatedRelationMaps.length > 0) {\n            //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\n            //         if (!updatedRelation.relation.isTreeParent) return;\n            //         if (!updatedRelation.value !== null) return;\n            //\n            //         if (subject.metadata.treeType === \"closure-table\") {\n            //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\n            //         }\n            //     }));\n            // }\n        }));\n    }\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    updateSpecialColumnsInPersistedEntities() {\n        // update inserted entity properties\n        if (this.insertSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects);\n        // update updated entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects);\n        // update soft-removed entity properties\n        if (this.softRemoveSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.softRemoveSubjects);\n        // update recovered entity properties\n        if (this.recoverSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.recoverSubjects);\n        // remove ids from the entities that were removed\n        if (this.removeSubjects.length) {\n            this.removeSubjects.forEach((subject) => {\n                if (!subject.entity)\n                    return;\n                subject.metadata.primaryColumns.forEach((primaryColumn) => {\n                    primaryColumn.setEntityValue(subject.entity, undefined);\n                });\n            });\n        }\n        // other post-persist updations\n        this.allSubjects.forEach((subject) => {\n            if (!subject.entity)\n                return;\n            subject.metadata.relationIds.forEach((relationId) => {\n                relationId.setValue(subject.entity);\n            });\n            // mongo _id remove\n            if (InstanceChecker.isMongoEntityManager(this.queryRunner.manager)) {\n                if (subject.metadata.objectIdColumn &&\n                    subject.metadata.objectIdColumn.databaseName &&\n                    subject.metadata.objectIdColumn.databaseName !==\n                        subject.metadata.objectIdColumn.propertyName) {\n                    delete subject.entity[subject.metadata.objectIdColumn.databaseName];\n                }\n            }\n        });\n    }\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    updateSpecialColumnsInInsertedAndUpdatedEntities(subjects) {\n        subjects.forEach((subject) => {\n            if (!subject.entity)\n                return;\n            // set values to \"null\" for nullable columns that did not have values\n            subject.metadata.columns.forEach((column) => {\n                // if table inheritance is used make sure this column is not child's column\n                if (subject.metadata.childEntityMetadatas.length > 0 &&\n                    subject.metadata.childEntityMetadatas\n                        .map((metadata) => metadata.target)\n                        .indexOf(column.target) !== -1)\n                    return;\n                // entities does not have virtual columns\n                if (column.isVirtual)\n                    return;\n                // if column is deletedAt\n                if (column.isDeleteDate)\n                    return;\n                // update nullable columns\n                if (column.isNullable) {\n                    const columnValue = column.getEntityValue(subject.entity);\n                    if (columnValue === undefined)\n                        column.setEntityValue(subject.entity, null);\n                }\n                // update relational columns\n                if (subject.updatedRelationMaps.length > 0) {\n                    subject.updatedRelationMaps.forEach((updatedRelationMap) => {\n                        updatedRelationMap.relation.joinColumns.forEach((column) => {\n                            if (column.isVirtual === true)\n                                return;\n                            column.setEntityValue(subject.entity, ObjectUtils.isObject(updatedRelationMap.value)\n                                ? column.referencedColumn.getEntityValue(updatedRelationMap.value)\n                                : updatedRelationMap.value);\n                        });\n                    });\n                }\n            });\n            // merge into entity all generated values returned by a database\n            if (subject.generatedMap)\n                this.queryRunner.manager.merge(subject.metadata.target, subject.entity, subject.generatedMap);\n        });\n    }\n    /**\n     * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.\n     * However there are some limitations with bulk insertions of data into tables with generated (increment) columns\n     * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns\n     * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,\n     * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.\n     * That's why we only support bulking in junction tables for those drivers.\n     *\n     * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated\n     * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.\n     */\n    groupBulkSubjects(subjects, type) {\n        const group = {};\n        const keys = [];\n        const hasReturningDependColumns = subjects.some((subject) => {\n            return subject.metadata.getInsertionReturningColumns().length > 0;\n        });\n        const groupingAllowed = type === \"delete\" ||\n            this.queryRunner.connection.driver.isReturningSqlSupported(\"insert\") ||\n            hasReturningDependColumns === false;\n        subjects.forEach((subject, index) => {\n            const key = groupingAllowed || subject.metadata.isJunction\n                ? subject.metadata.name\n                : subject.metadata.name + \"_\" + index;\n            if (!group[key]) {\n                group[key] = [subject];\n                keys.push(key);\n            }\n            else {\n                group[key].push(subject);\n            }\n        });\n        return [group, keys];\n    }\n}\n\n//# sourceMappingURL=SubjectExecutor.js.map\n","import { OrmUtils } from \"../util/OrmUtils\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"Subject\");\n        /**\n         * Subject identifier.\n         * This identifier is not limited to table entity primary columns.\n         * This can be entity id or ids as well as some unique entity properties, like name or title.\n         * Insert / Update / Remove operation will be executed by a given identifier.\n         */\n        this.identifier = undefined;\n        /**\n         * Copy of entity but with relational ids fulfilled.\n         */\n        this.entityWithFulfilledIds = undefined;\n        /**\n         * Indicates if database entity was loaded.\n         * No matter if it was found or not, it indicates the fact of loading.\n         */\n        this.databaseEntityLoaded = false;\n        /**\n         * Changes needs to be applied in the database for the given subject.\n         */\n        this.changeMaps = [];\n        /**\n         * Indicates if this subject can be inserted into the database.\n         * This means that this subject either is newly persisted, either can be inserted by cascades.\n         */\n        this.canBeInserted = false;\n        /**\n         * Indicates if this subject can be updated in the database.\n         * This means that this subject either was persisted, either can be updated by cascades.\n         */\n        this.canBeUpdated = false;\n        /**\n         * Indicates if this subject MUST be removed from the database.\n         * This means that this subject either was removed, either was removed by cascades.\n         */\n        this.mustBeRemoved = false;\n        /**\n         * Indicates if this subject can be soft-removed from the database.\n         * This means that this subject either was soft-removed, either was soft-removed by cascades.\n         */\n        this.canBeSoftRemoved = false;\n        /**\n         * Indicates if this subject can be recovered from the database.\n         * This means that this subject either was recovered, either was recovered by cascades.\n         */\n        this.canBeRecovered = false;\n        /**\n         * Relations updated by the change maps.\n         */\n        this.updatedRelationMaps = [];\n        /**\n         * List of updated columns\n         */\n        this.diffColumns = [];\n        /**\n         * List of updated relations\n         */\n        this.diffRelations = [];\n        this.metadata = options.metadata;\n        this.entity = options.entity;\n        this.parentSubject = options.parentSubject;\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted;\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated;\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved;\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved;\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered;\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier;\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps);\n        this.recompute();\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity;\n    }\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return (this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            // ensure there are one or more changes for updatable columns\n            this.changeMaps.some((change) => !change.column || change.column.isUpdate));\n    }\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return (this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)));\n    }\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return (this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)));\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap() {\n        const changeMapsWithoutValues = [];\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value;\n            if (InstanceChecker.isSubject(value)) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet\n                    ? value.insertedValueSet\n                    : value.entity;\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n            let valueMap;\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn.getEntityValue(value));\n            }\n            else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value);\n            }\n            else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId = changeMap.relation.getRelationIdMap(value);\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap);\n                        this.canBeUpdated = true;\n                        return updateMap;\n                    }\n                    valueMap = changeMap.relation.createValueMap(relationId);\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: relationId,\n                    });\n                }\n                else {\n                    // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation.createValueMap(value);\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: value,\n                    });\n                }\n            }\n            OrmUtils.mergeDeep(updateMap, valueMap);\n            return updateMap;\n        }, {});\n        this.changeMaps = changeMapsWithoutValues;\n        return changeSet;\n    }\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute() {\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity);\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\n                    if (primaryColumn.relationMetadata &&\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\n                            this.parentSubject.metadata) {\n                        const value = primaryColumn.referencedColumn.getEntityValue(this.parentSubject.entity);\n                        primaryColumn.setEntityValue(this.entityWithFulfilledIds, value);\n                    }\n                });\n            }\n            this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\n        }\n        else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\n        }\n    }\n}\n\n//# sourceMappingURL=Subject.js.map\n","import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\";\n/**\n * Builds operations needs to be executed for one-to-many relations of the given subjects.\n *\n * by example: post contains one-to-many relation with category in the property called \"categories\", e.g.\n *             @OneToMany(type => Category, category => category.post) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToOneInverseSideOperationBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nexport class OneToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds all required operations.\n     */\n    build() {\n        this.subjects.forEach((subject) => {\n            subject.metadata.oneToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    buildForSubjectRelation(subject, relation) {\n        // prepare objects (relation id maps) for the database entity\n        // by example: since subject is a post, we are expecting to get all post's categories saved in the database here,\n        //             particularly their relation ids, e.g. category ids stored in the database\n        // in most cases relatedEntityDatabaseValues will contain only the entity key properties.\n        // this is because subject.databaseEntity contains relations with loaded relation ids only.\n        // however if the entity uses the afterLoad hook to calculate any properties, the fetched \"key object\" might include ADDITIONAL properties.\n        // to handle such situations, we pass the data to relation.inverseEntityMetadata.getEntityIdMap to extract the key without any other properties.\n        let relatedEntityDatabaseRelationIds = [];\n        if (subject.databaseEntity) {\n            // related entities in the database can exist only if this entity (post) is saved\n            const relatedEntityDatabaseRelation = relation.getEntityValue(subject.databaseEntity);\n            if (relatedEntityDatabaseRelation) {\n                relatedEntityDatabaseRelationIds =\n                    relatedEntityDatabaseRelation.map((entity) => relation.inverseEntityMetadata.getEntityIdMap(entity));\n            }\n        }\n        // get related entities of persisted entity\n        // by example: get categories from the passed to persist post entity\n        let relatedEntities = relation.getEntityValue(subject.entity);\n        if (relatedEntities === null)\n            // we treat relations set to null as removed, so we don't skip it\n            relatedEntities = [];\n        if (relatedEntities === undefined)\n            // if relation is undefined then nothing to update\n            return;\n        // extract only relation ids from the related entities, since we only need them for comparison\n        // by example: extract from categories only relation ids (category id, or let's say category title, depend on join column options)\n        const relatedPersistedEntityRelationIds = [];\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is a category here\n            let relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            let relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relationIdMap = relatedEntitySubject.identifier;\n            // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n            // by example: if post contains categories which does not have ids yet (because they are new)\n            //             it means they are always newly inserted and relation update operation always must be created for them\n            //             it does not make sense to perform difference operation for them for both add and remove actions\n            if (!relationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`One-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n                // okay, so related subject exist and its marked for insertion, then add a new change map\n                // by example: this will tell category to insert into its post relation our post we are working with\n                //             relatedEntitySubject is newly inserted CategorySubject\n                //             relation.inverseRelation is ManyToOne relation inside Category\n                //             subject is Post needs to be inserted into Category\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation,\n                    value: subject,\n                });\n                return;\n            }\n            // check if this binding really exist in the database\n            // by example: find our category if its already bind in the database\n            const relationIdInDatabaseSubjectRelation = relatedEntityDatabaseRelationIds.find((relatedDatabaseEntityRelationId) => {\n                return OrmUtils.compareIds(relationIdMap, relatedDatabaseEntityRelationId);\n            });\n            // if relationIdMap DOES NOT exist in the subject's relation in the database it means its a new relation and we need to \"bind\" them\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is ManyToOne relation inside Category\n            //             subject is Post needs to be inserted into Category\n            if (!relationIdInDatabaseSubjectRelation) {\n                // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n                // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n                // we create a new subject here:\n                if (!relatedEntitySubject) {\n                    relatedEntitySubject = new Subject({\n                        metadata: relation.inverseEntityMetadata,\n                        parentSubject: subject,\n                        canBeUpdated: true,\n                        identifier: relationIdMap,\n                    });\n                    this.subjects.push(relatedEntitySubject);\n                }\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation,\n                    value: subject,\n                });\n            }\n            // if related entity has relation id then we add it to the list of relation ids\n            // this list will be used later to compare with database relation ids to find a difference\n            // what exist in this array and does not exist in the database are newly inserted relations\n            // what does not exist in this array, but exist in the database are removed relations\n            // removed relations are set to null from inverse side of relation\n            relatedPersistedEntityRelationIds.push(relationIdMap);\n        });\n        // find what related entities were added and what were removed based on difference between what we save and what database has\n        if (relation.inverseRelation?.orphanedRowAction !== \"disable\") {\n            EntityMetadata.difference(relatedEntityDatabaseRelationIds, relatedPersistedEntityRelationIds).forEach((removedRelatedEntityRelationId) => {\n                // by example: removedRelatedEntityRelationId is category that was bind in the database before, but now its unbind\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n                const removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    identifier: removedRelatedEntityRelationId,\n                });\n                if (!relation.inverseRelation ||\n                    relation.inverseRelation.orphanedRowAction === \"nullify\") {\n                    removedRelatedEntitySubject.canBeUpdated = true;\n                    removedRelatedEntitySubject.changeMaps = [\n                        {\n                            relation: relation.inverseRelation,\n                            value: null,\n                        },\n                    ];\n                }\n                else if (relation.inverseRelation.orphanedRowAction === \"delete\") {\n                    removedRelatedEntitySubject.mustBeRemoved = true;\n                }\n                else if (relation.inverseRelation.orphanedRowAction === \"soft-delete\") {\n                    removedRelatedEntitySubject.canBeSoftRemoved = true;\n                }\n                this.subjects.push(removedRelatedEntitySubject);\n            });\n        }\n    }\n}\n\n//# sourceMappingURL=OneToManySubjectBuilder.js.map\n","import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nexport class OneToOneInverseSideSubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds all required operations.\n     */\n    build() {\n        this.subjects.forEach((subject) => {\n            subject.metadata.oneToOneRelations.forEach((relation) => {\n                // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n                // skip relations for which persistence is disabled\n                if (relation.isOwning || relation.persistenceEnabled === false)\n                    return;\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n     */\n    buildForSubjectRelation(subject, relation) {\n        // prepare objects (relation id map) for the database entity\n        // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n        // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n        //             particularly its relation id, e.g. category id stored in the database\n        let relatedEntityDatabaseRelationId = undefined;\n        if (subject.databaseEntity)\n            // related entity in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity);\n        // get related entities of persisted entity\n        // by example: get category from the passed to persist post entity\n        let relatedEntity = relation.getEntityValue(subject.entity); // by example: relatedEntity is a category here\n        if (relatedEntity === undefined)\n            // if relation is undefined then nothing to update\n            return;\n        // if related entity is null then we need to check if there a bind in the database and unset it\n        // if there is no bind in the entity then we don't need to do anything\n        // by example: if post.category = null and category has this post in the database then we unset it\n        if (relatedEntity === null) {\n            // it makes sense to update database only there is a previously set value in the database\n            if (relatedEntityDatabaseRelationId) {\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n                const removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: relatedEntityDatabaseRelationId,\n                    changeMaps: [\n                        {\n                            relation: relation.inverseRelation,\n                            value: null,\n                        },\n                    ],\n                });\n                this.subjects.push(removedRelatedEntitySubject);\n            }\n            return;\n        } // else means entity is bind in the database\n        // extract only relation id from the related entities, since we only need it for comparison\n        // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n        let relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n        // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n        let relatedEntitySubject = this.subjects.find((operateSubject) => {\n            return (!!operateSubject.entity &&\n                operateSubject.entity === relatedEntity);\n        });\n        // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n        if (relatedEntitySubject)\n            relationIdMap = relatedEntitySubject.identifier;\n        // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n        // by example: if post contains category which does not have id(s) yet (because its a new category)\n        //             it means its always newly inserted and relation update operation always must be created for it\n        //             it does not make sense to perform difference operation for it for both add and remove actions\n        if (!relationIdMap) {\n            // we decided to remove this error because it brings complications when saving object with non-saved entities\n            // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n            // in this persistence because he didn't pass this entity for save or he did not set cascades\n            // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n            // if (!relatedEntitySubject)\n            //     throw new TypeORMError(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n            //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n            //         `Please setup cascade insertion or save entity before binding it.`);\n            if (!relatedEntitySubject)\n                return;\n            // okay, so related subject exist and its marked for insertion, then add a new change map\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is OneToOne owner relation inside Category\n            //             subject is Post needs to be inserted into Category\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject,\n            });\n        }\n        // check if this binding really exist in the database\n        // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n        const areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId &&\n            OrmUtils.compareIds(relationIdMap, relatedEntityDatabaseRelationId);\n        // if they aren't equal it means its a new relation and we need to \"bind\" them\n        // by example: this will tell category to insert into its post relation our post we are working with\n        //             relatedEntitySubject is newly inserted CategorySubject\n        //             relation.inverseRelation is ManyToOne relation inside Category\n        //             subject is Post needs to be inserted into Category\n        if (!areRelatedIdEqualWithDatabase) {\n            // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n            // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n            // we create a new subject here:\n            if (!relatedEntitySubject) {\n                relatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    canBeUpdated: true,\n                    identifier: relationIdMap,\n                });\n                this.subjects.push(relatedEntitySubject);\n            }\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject,\n            });\n        }\n    }\n}\n\n//# sourceMappingURL=OneToOneInverseSideSubjectBuilder.js.map\n","import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build() {\n        this.subjects.forEach((subject) => {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity)\n                return;\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject) {\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity)\n            return;\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach((relation) => {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false)\n                return;\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity);\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach((relationId) => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(subject, relation, relationId),\n                });\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject);\n            });\n        });\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    buildForSubjectRelation(subject, relation) {\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds = [];\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity) {\n            const databaseRelatedEntityValue = relation.getEntityValue(subject.databaseEntity);\n            if (databaseRelatedEntityValue) {\n                databaseRelatedEntityIds = databaseRelatedEntityValue.map((e) => relation.inverseEntityMetadata.getEntityIdMap(e));\n            }\n        }\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities = relation.getEntityValue(subject.entity);\n        if (relatedEntities === null)\n            // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = [];\n        if (!Array.isArray(relatedEntities))\n            return;\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is category from categories saved with post\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n            // extract only relation id from the related entities, since we only need it for comparison\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n            }\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find((databaseRelatedEntityRelationId) => {\n                return OrmUtils.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n            });\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase)\n                return;\n            const ownerValue = relation.isOwning\n                ? subject\n                : relatedEntitySubject || relatedEntity; // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning\n                ? relatedEntitySubject || relatedEntity\n                : subject; // by example: inverseEntityMap is category from categories array here\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                canBeInserted: true,\n            });\n            this.subjects.push(junctionSubject);\n            relation.junctionEntityMetadata.ownerColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                });\n            });\n            relation.junctionEntityMetadata.inverseColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: inverseValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                });\n            });\n        });\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds = [];\n        relatedEntities.forEach((relatedEntity) => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            if (relatedEntityRelationIdMap !== undefined &&\n                relatedEntityRelationIdMap !== null)\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n        });\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter((existRelationId) => {\n            return !changedInverseEntityRelationIds.find((changedRelationId) => {\n                return OrmUtils.compareIds(changedRelationId, existRelationId);\n            });\n        });\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach((removedEntityRelationId) => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(subject, relation, removedEntityRelationId),\n            });\n            this.subjects.push(junctionSubject);\n        });\n    }\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    buildJunctionIdentifier(subject, relation, relationId) {\n        const ownerEntityMap = relation.isOwning ? subject.entity : relationId;\n        const inverseEntityMap = relation.isOwning\n            ? relationId\n            : subject.entity;\n        const identifier = {};\n        relation.junctionEntityMetadata.ownerColumns.forEach((column) => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));\n        });\n        relation.junctionEntityMetadata.inverseColumns.forEach((column) => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));\n        });\n        return identifier;\n    }\n}\n\n//# sourceMappingURL=ManyToManySubjectBuilder.js.map\n","/**\n * Loads database entities for all operate subjects which do not have database entity set.\n * All entities that we load database entities for are marked as updated or inserted.\n * To understand which of them really needs to be inserted or updated we need to load\n * their original representations from the database.\n */\nexport class SubjectDatabaseEntityLoader {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(queryRunner, subjects) {\n        this.queryRunner = queryRunner;\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Loads database entities for all subjects.\n     *\n     * loadAllRelations flag is used to load all relation ids of the object, no matter if they present in subject entity or not.\n     * This option is used for deletion.\n     */\n    async load(operationType) {\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\n        // go through the groups and perform loading of database entities of each subject in the group\n        const promises = this.groupByEntityTargets().map(async (subjectGroup) => {\n            // prepare entity ids of the subjects we need to load\n            const allIds = [];\n            const allSubjects = [];\n            subjectGroup.subjects.forEach((subject) => {\n                // we don't load if subject already has a database entity loaded\n                if (subject.databaseEntity || !subject.identifier)\n                    return;\n                allIds.push(subject.identifier);\n                allSubjects.push(subject);\n            });\n            // if there no ids found (means all entities are new and have generated ids) - then nothing to load there\n            if (!allIds.length)\n                return;\n            const loadRelationPropertyPaths = [];\n            // for the save, soft-remove and recover operation\n            // extract all property paths of the relations we need to load relation ids for\n            // this is for optimization purpose - this way we don't load relation ids for entities\n            // whose relations are undefined, and since they are undefined its really pointless to\n            // load something for them, since undefined properties are skipped by the orm\n            if (operationType === \"save\" ||\n                operationType === \"soft-remove\" ||\n                operationType === \"recover\") {\n                subjectGroup.subjects.forEach((subject) => {\n                    // gets all relation property paths that exist in the persisted entity.\n                    subject.metadata.relations.forEach((relation) => {\n                        const value = relation.getEntityValue(subject.entityWithFulfilledIds);\n                        if (value === undefined)\n                            return;\n                        if (loadRelationPropertyPaths.indexOf(relation.propertyPath) === -1)\n                            loadRelationPropertyPaths.push(relation.propertyPath);\n                    });\n                });\n            }\n            else {\n                // remove\n                // for remove operation\n                // we only need to load junction relation ids since only they are removed by cascades\n                loadRelationPropertyPaths.push(...subjectGroup.subjects[0].metadata.manyToManyRelations.map((relation) => relation.propertyPath));\n            }\n            const findOptions = {\n                loadEagerRelations: false,\n                loadRelationIds: {\n                    relations: loadRelationPropertyPaths,\n                    disableMixedMap: true,\n                },\n                // the soft-deleted entities should be included in the loaded entities for recover operation\n                withDeleted: true,\n            };\n            // load database entities for all given ids\n            let entities = [];\n            if (this.queryRunner.connection.driver.options.type ===\n                \"mongodb\") {\n                const mongoRepo = this.queryRunner.manager.getRepository(subjectGroup.target);\n                entities = await mongoRepo.findByIds(allIds, findOptions);\n            }\n            else {\n                entities = await this.queryRunner.manager\n                    .getRepository(subjectGroup.target)\n                    .createQueryBuilder()\n                    .setFindOptions(findOptions)\n                    .whereInIds(allIds)\n                    .getMany();\n            }\n            // now when we have entities we need to find subject of each entity\n            // and insert that entity into database entity of the found subjects\n            entities.forEach((entity) => {\n                const subjects = this.findByPersistEntityLike(subjectGroup.target, entity);\n                subjects.forEach((subject) => {\n                    subject.databaseEntity = entity;\n                    if (!subject.identifier)\n                        subject.identifier =\n                            subject.metadata.hasAllPrimaryKeys(entity)\n                                ? subject.metadata.getEntityIdMap(entity)\n                                : undefined;\n                });\n            });\n            // this way we tell what subjects we tried to load database entities of\n            for (let subject of allSubjects) {\n                subject.databaseEntityLoaded = true;\n            }\n        });\n        await Promise.all(promises);\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Finds subjects where entity like given subject's entity.\n     * Comparison made by entity id.\n     * Multiple subjects may be returned if duplicates are present in the subject array.\n     * This will likely result in the same row being updated multiple times during a transaction.\n     */\n    findByPersistEntityLike(entityTarget, entity) {\n        return this.subjects.filter((subject) => {\n            if (!subject.entity)\n                return false;\n            if (subject.entity === entity)\n                return true;\n            return (subject.metadata.target === entityTarget &&\n                subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity));\n        });\n    }\n    /**\n     * Groups given Subject objects into groups separated by entity targets.\n     */\n    groupByEntityTargets() {\n        return this.subjects.reduce((groups, operatedEntity) => {\n            let group = groups.find((group) => group.target === operatedEntity.metadata.target);\n            if (!group) {\n                group = { target: operatedEntity.metadata.target, subjects: [] };\n                groups.push(group);\n            }\n            group.subjects.push(operatedEntity);\n            return groups;\n        }, []);\n    }\n}\n\n//# sourceMappingURL=SubjectDatabaseEntityLoader.js.map\n","import { Subject } from \"../Subject\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nexport class CascadesSubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(allSubjects) {\n        this.allSubjects = allSubjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    build(subject, operationType) {\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(([relation, relationEntity, relationEntityMetadata]) => {\n            // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set\n            if (relationEntity === undefined ||\n                relationEntity === null ||\n                (!relation.isCascadeInsert &&\n                    !relation.isCascadeUpdate &&\n                    !relation.isCascadeSoftRemove &&\n                    !relation.isCascadeRecover))\n                return;\n            // if relation entity is just a relation id set (for example post.tag = 1)\n            // then we don't really need to check cascades since there is no object to insert or update\n            if (!ObjectUtils.isObject(relationEntity))\n                return;\n            // if we already has this entity in list of operated subjects then skip it to avoid recursion\n            const alreadyExistRelationEntitySubject = this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n            if (alreadyExistRelationEntitySubject) {\n                if (alreadyExistRelationEntitySubject.canBeInserted ===\n                    false)\n                    // if its not marked for insertion yet\n                    alreadyExistRelationEntitySubject.canBeInserted =\n                        relation.isCascadeInsert === true &&\n                            operationType === \"save\";\n                if (alreadyExistRelationEntitySubject.canBeUpdated === false)\n                    // if its not marked for update yet\n                    alreadyExistRelationEntitySubject.canBeUpdated =\n                        relation.isCascadeUpdate === true &&\n                            operationType === \"save\";\n                if (alreadyExistRelationEntitySubject.canBeSoftRemoved ===\n                    false)\n                    // if its not marked for removal yet\n                    alreadyExistRelationEntitySubject.canBeSoftRemoved =\n                        relation.isCascadeSoftRemove === true &&\n                            operationType === \"soft-remove\";\n                if (alreadyExistRelationEntitySubject.canBeRecovered ===\n                    false)\n                    // if its not marked for recovery yet\n                    alreadyExistRelationEntitySubject.canBeRecovered =\n                        relation.isCascadeRecover === true &&\n                            operationType === \"recover\";\n                return;\n            }\n            // mark subject with what we can do with it\n            // and add to the array of subjects to load only if there is no same entity there already\n            const relationEntitySubject = new Subject({\n                metadata: relationEntityMetadata,\n                parentSubject: subject,\n                entity: relationEntity,\n                canBeInserted: relation.isCascadeInsert === true &&\n                    operationType === \"save\",\n                canBeUpdated: relation.isCascadeUpdate === true &&\n                    operationType === \"save\",\n                canBeSoftRemoved: relation.isCascadeSoftRemove === true &&\n                    operationType === \"soft-remove\",\n                canBeRecovered: relation.isCascadeRecover === true &&\n                    operationType === \"recover\",\n            });\n            this.allSubjects.push(relationEntitySubject);\n            // go recursively and find other entities we need to insert/update\n            this.build(relationEntitySubject, operationType);\n        });\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparison made by entity id.\n     */\n    findByPersistEntityLike(entityTarget, entity) {\n        return this.allSubjects.find((subject) => {\n            if (!subject.entity)\n                return false;\n            if (subject.entity === entity)\n                return true;\n            return (subject.metadata.target === entityTarget &&\n                subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity));\n        });\n    }\n}\n\n//# sourceMappingURL=CascadesSubjectBuilder.js.map\n","import { MustBeEntityError } from \"../error/MustBeEntityError\";\nimport { SubjectExecutor } from \"./SubjectExecutor\";\nimport { CannotDetermineEntityError } from \"../error/CannotDetermineEntityError\";\nimport { Subject } from \"./Subject\";\nimport { OneToManySubjectBuilder } from \"./subject-builder/OneToManySubjectBuilder\";\nimport { OneToOneInverseSideSubjectBuilder } from \"./subject-builder/OneToOneInverseSideSubjectBuilder\";\nimport { ManyToManySubjectBuilder } from \"./subject-builder/ManyToManySubjectBuilder\";\nimport { SubjectDatabaseEntityLoader } from \"./SubjectDatabaseEntityLoader\";\nimport { CascadesSubjectBuilder } from \"./subject-builder/CascadesSubjectBuilder\";\nimport { OrmUtils } from \"../util/OrmUtils\";\n/**\n * Persists a single entity or multiple entities - saves or removes them.\n */\nexport class EntityPersistExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryRunner, mode, target, entity, options) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.mode = mode;\n        this.target = target;\n        this.entity = entity;\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes persistence operation ob given entity or entities.\n     */\n    async execute() {\n        // check if entity we are going to save is valid and is an object\n        if (!this.entity || typeof this.entity !== \"object\")\n            return Promise.reject(new MustBeEntityError(this.mode, this.entity));\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\n        await Promise.resolve();\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        // save data in the query runner - this is useful functionality to share data from outside of the world\n        // with third classes - like subscribers and listener methods\n        let oldQueryRunnerData = queryRunner.data;\n        if (this.options && this.options.data) {\n            queryRunner.data = this.options.data;\n        }\n        try {\n            // collect all operate subjects\n            const entities = Array.isArray(this.entity)\n                ? this.entity\n                : [this.entity];\n            const entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0\n                ? OrmUtils.chunk(entities, this.options.chunk)\n                : [entities];\n            // console.time(\"building subject executors...\");\n            const executors = await Promise.all(entitiesInChunks.map(async (entities) => {\n                const subjects = [];\n                // create subjects for all entities we received for the persistence\n                entities.forEach((entity) => {\n                    const entityTarget = this.target\n                        ? this.target\n                        : entity.constructor;\n                    if (entityTarget === Object)\n                        throw new CannotDetermineEntityError(this.mode);\n                    let metadata = this.connection\n                        .getMetadata(entityTarget)\n                        .findInheritanceMetadata(entity);\n                    subjects.push(new Subject({\n                        metadata,\n                        entity: entity,\n                        canBeInserted: this.mode === \"save\",\n                        canBeUpdated: this.mode === \"save\",\n                        mustBeRemoved: this.mode === \"remove\",\n                        canBeSoftRemoved: this.mode === \"soft-remove\",\n                        canBeRecovered: this.mode === \"recover\",\n                    }));\n                });\n                // console.time(\"building cascades...\");\n                // go through each entity with metadata and create subjects and subjects by cascades for them\n                const cascadesSubjectBuilder = new CascadesSubjectBuilder(subjects);\n                subjects.forEach((subject) => {\n                    // next step we build list of subjects we will operate with\n                    // these subjects are subjects that we need to insert or update alongside with main persisted entity\n                    cascadesSubjectBuilder.build(subject, this.mode);\n                });\n                // console.timeEnd(\"building cascades...\");\n                // load database entities for all subjects we have\n                // next step is to load database entities for all operate subjects\n                // console.time(\"loading...\");\n                await new SubjectDatabaseEntityLoader(queryRunner, subjects).load(this.mode);\n                // console.timeEnd(\"loading...\");\n                // console.time(\"other subjects...\");\n                // build all related subjects and change maps\n                if (this.mode === \"save\" ||\n                    this.mode === \"soft-remove\" ||\n                    this.mode === \"recover\") {\n                    new OneToManySubjectBuilder(subjects).build();\n                    new OneToOneInverseSideSubjectBuilder(subjects).build();\n                    new ManyToManySubjectBuilder(subjects).build();\n                }\n                else {\n                    subjects.forEach((subject) => {\n                        if (subject.mustBeRemoved) {\n                            new ManyToManySubjectBuilder(subjects).buildForAllRemoval(subject);\n                        }\n                    });\n                }\n                // console.timeEnd(\"other subjects...\");\n                // console.timeEnd(\"building subjects...\");\n                // console.log(\"subjects\", subjects);\n                // create a subject executor\n                return new SubjectExecutor(queryRunner, subjects, this.options);\n            }));\n            // console.timeEnd(\"building subject executors...\");\n            // make sure we have at least one executable operation before we create a transaction and proceed\n            // if we don't have operations it means we don't really need to update or remove something\n            const executorsWithExecutableOperations = executors.filter((executor) => executor.hasExecutableOperations);\n            if (executorsWithExecutableOperations.length === 0)\n                return;\n            // start execute queries in a transaction\n            // if transaction is already opened in this query runner then we don't touch it\n            // if its not opened yet then we open it here, and once we finish - we close it\n            let isTransactionStartedByUs = false;\n            try {\n                // open transaction if its not opened yet\n                if (!queryRunner.isTransactionActive) {\n                    if (this.connection.driver.transactionSupport !== \"none\" &&\n                        (!this.options || this.options.transaction !== false)) {\n                        // start transaction until it was not explicitly disabled\n                        isTransactionStartedByUs = true;\n                        await queryRunner.startTransaction();\n                    }\n                }\n                // execute all persistence operations for all entities we have\n                // console.time(\"executing subject executors...\");\n                for (const executor of executorsWithExecutableOperations) {\n                    await executor.execute();\n                }\n                // console.timeEnd(\"executing subject executors...\");\n                // commit transaction if it was started by us\n                // console.time(\"commit\");\n                if (isTransactionStartedByUs === true)\n                    await queryRunner.commitTransaction();\n                // console.timeEnd(\"commit\");\n            }\n            catch (error) {\n                // rollback transaction if it was started by us\n                if (isTransactionStartedByUs) {\n                    try {\n                        await queryRunner.rollbackTransaction();\n                    }\n                    catch (rollbackError) { }\n                }\n                throw error;\n            }\n        }\n        finally {\n            queryRunner.data = oldQueryRunnerData;\n            // release query runner only if its created by us\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n}\n\n//# sourceMappingURL=EntityPersistExecutor.js.map\n","import { EntityNotFoundError } from \"../error/EntityNotFoundError\";\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\";\nimport { MongoRepository } from \"../repository/MongoRepository\";\nimport { TreeRepository } from \"../repository/TreeRepository\";\nimport { Repository } from \"../repository/Repository\";\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport { CustomRepositoryCannotInheritRepositoryError, CustomRepositoryNotFoundError, TreeRepositoryNotSupportedError, TypeORMError, } from \"../error\";\nimport { AbstractRepository } from \"../repository/AbstractRepository\";\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { getMetadataArgsStorage } from \"../globals\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryRunner) {\n        this[\"@instanceof\"] = Symbol.for(\"EntityManager\");\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Once created and then reused by repositories.\n         * Created as a future replacement for the #repositories to provide a bit more perf optimization.\n         */\n        this.repositories = new Map();\n        /**\n         * Once created and then reused by repositories.\n         */\n        this.treeRepositories = [];\n        /**\n         * Plain to object transformer used in create and merge operations.\n         */\n        this.plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n        this.connection = connection;\n        if (queryRunner) {\n            this.queryRunner = queryRunner;\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this });\n        }\n    }\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction(isolationOrRunInTransaction, runInTransactionParam) {\n        const isolation = typeof isolationOrRunInTransaction === \"string\"\n            ? isolationOrRunInTransaction\n            : undefined;\n        const runInTransaction = typeof isolationOrRunInTransaction === \"function\"\n            ? isolationOrRunInTransaction\n            : runInTransactionParam;\n        if (!runInTransaction) {\n            throw new TypeORMError(`Transaction method requires callback in second parameter if isolation level is supplied.`);\n        }\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            await queryRunner.startTransaction(isolation);\n            const result = await runInTransaction(queryRunner.manager);\n            await queryRunner.commitTransaction();\n            return result;\n        }\n        catch (err) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction();\n            }\n            catch (rollbackError) { }\n            throw err;\n        }\n        finally {\n            if (!this.queryRunner)\n                // if we used a new query runner provider then release it\n                await queryRunner.release();\n        }\n    }\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query, parameters) {\n        return this.connection.query(query, parameters, this.queryRunner);\n    }\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(entityClass, alias, queryRunner) {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);\n        }\n        else {\n            return this.connection.createQueryBuilder(entityClass ||\n                queryRunner ||\n                this.queryRunner);\n        }\n    }\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity, maybeEntity) {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    }\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity, maybeEntity) {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    }\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(entityClass, plainObjectOrObjects) {\n        const metadata = this.connection.getMetadata(entityClass);\n        if (!plainObjectOrObjects)\n            return metadata.create(this.queryRunner);\n        if (Array.isArray(plainObjectOrObjects))\n            return plainObjectOrObjects.map((plainEntityLike) => this.create(entityClass, plainEntityLike));\n        const mergeIntoEntity = metadata.create(this.queryRunner);\n        this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\n        return mergeIntoEntity;\n    }\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge(entityClass, mergeIntoEntity, ...entityLikes) {\n        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass);\n        entityLikes.forEach((object) => this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\n        return mergeIntoEntity;\n    }\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload(entityClass, entityLike) {\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity)\n            return this.merge(entityClass, transformedEntity, entityLike);\n        return undefined;\n    }\n    /**\n     * Saves a given entity in the database.\n     */\n    save(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        let target = arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n            ? targetOrEntity\n            : undefined;\n        const entity = target\n            ? maybeEntityOrOptions\n            : targetOrEntity;\n        const options = target\n            ? maybeOptions\n            : maybeEntityOrOptions;\n        if (InstanceChecker.isEntitySchema(target))\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        const target = arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n            ? targetOrEntity\n            : undefined;\n        const entity = target\n            ? maybeEntityOrOptions\n            : targetOrEntity;\n        const options = target\n            ? maybeOptions\n            : maybeEntityOrOptions;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        let target = arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n            ? targetOrEntity\n            : undefined;\n        const entity = target\n            ? maybeEntityOrOptions\n            : targetOrEntity;\n        const options = target\n            ? maybeOptions\n            : maybeEntityOrOptions;\n        if (InstanceChecker.isEntitySchema(target))\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute soft-remove operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"soft-remove\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n    /**\n     * Recovers one or many given entities.\n     */\n    recover(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        let target = arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n            ? targetOrEntity\n            : undefined;\n        const entity = target\n            ? maybeEntityOrOptions\n            : targetOrEntity;\n        const options = target\n            ? maybeOptions\n            : maybeEntityOrOptions;\n        if (InstanceChecker.isEntitySchema(target))\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute recover operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"recover\", target, entity, options)\n            .execute()\n            .then(() => entity);\n    }\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert(target, entity) {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute();\n    }\n    async upsert(target, entityOrEntities, conflictPathsOrOptions) {\n        const metadata = this.connection.getMetadata(target);\n        let options;\n        if (Array.isArray(conflictPathsOrOptions)) {\n            options = {\n                conflictPaths: conflictPathsOrOptions,\n            };\n        }\n        else {\n            options = conflictPathsOrOptions;\n        }\n        let entities;\n        if (!Array.isArray(entityOrEntities)) {\n            entities = [entityOrEntities];\n        }\n        else {\n            entities = entityOrEntities;\n        }\n        const conflictColumns = metadata.mapPropertyPathsToColumns(Array.isArray(options.conflictPaths)\n            ? options.conflictPaths\n            : Object.keys(options.conflictPaths));\n        const overwriteColumns = metadata.columns.filter((col) => !conflictColumns.includes(col) &&\n            entities.some((entity) => typeof col.getEntityValue(entity) !== \"undefined\"));\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entities)\n            .orUpdate([...conflictColumns, ...overwriteColumns].map((col) => col.databaseName), conflictColumns.map((col) => col.databaseName), {\n            skipUpdateIfNoValuesChanged: options.skipUpdateIfNoValuesChanged,\n            indexPredicate: options.indexPredicate,\n            upsertType: options.upsertType ||\n                this.connection.driver.supportedUpsertTypes[0],\n        })\n            .execute();\n    }\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update(target, criteria, partialEntity) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the update method.`));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete(targetOrEntity, criteria) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the delete method.`));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete(targetOrEntity, criteria) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the delete method.`));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore(targetOrEntity, criteria) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the delete method.`));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    }\n    /**\n     * Checks whether any entity exists with the given options.\n     */\n    exists(entityClass, options) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n            metadata.name)\n            .setFindOptions(options || {})\n            .getExists();\n    }\n    /**\n     * Checks whether any entity exists with the given conditions.\n     */\n    async existsBy(entityClass, where) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getExists();\n    }\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count(entityClass, options) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n            metadata.name)\n            .setFindOptions(options || {})\n            .getCount();\n    }\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy(entityClass, where) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getCount();\n    }\n    /**\n     * Return the SUM of a column\n     */\n    sum(entityClass, columnName, where) {\n        return this.callAggregateFun(entityClass, \"SUM\", columnName, where);\n    }\n    /**\n     * Return the AVG of a column\n     */\n    average(entityClass, columnName, where) {\n        return this.callAggregateFun(entityClass, \"AVG\", columnName, where);\n    }\n    /**\n     * Return the MIN of a column\n     */\n    minimum(entityClass, columnName, where) {\n        return this.callAggregateFun(entityClass, \"MIN\", columnName, where);\n    }\n    /**\n     * Return the MAX of a column\n     */\n    maximum(entityClass, columnName, where) {\n        return this.callAggregateFun(entityClass, \"MAX\", columnName, where);\n    }\n    async callAggregateFun(entityClass, fnName, columnName, where = {}) {\n        const metadata = this.connection.getMetadata(entityClass);\n        const column = metadata.columns.find((item) => item.propertyPath === columnName);\n        if (!column) {\n            throw new TypeORMError(`Column \"${columnName}\" was not found in table \"${metadata.name}\"`);\n        }\n        const result = await this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .select(`${fnName}(${this.connection.driver.escape(column.databaseName)})`, fnName)\n            .getRawOne();\n        return result[fnName] === null ? null : parseFloat(result[fnName]);\n    }\n    /**\n     * Finds entities that match given find options.\n     */\n    async find(entityClass, options) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n            metadata.name)\n            .setFindOptions(options || {})\n            .getMany();\n    }\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy(entityClass, where) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where: where })\n            .getMany();\n    }\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(entityClass, options) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n            metadata.name)\n            .setFindOptions(options || {})\n            .getManyAndCount();\n    }\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(entityClass, where) {\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getManyAndCount();\n    }\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds(entityClass, ids) {\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length)\n            return Promise.resolve([]);\n        const metadata = this.connection.getMetadata(entityClass);\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .andWhereInIds(ids)\n            .getMany();\n    }\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne(entityClass, options) {\n        const metadata = this.connection.getMetadata(entityClass);\n        // prepare alias for built query\n        let alias = metadata.name;\n        if (options && options.join) {\n            alias = options.join.alias;\n        }\n        if (!options.where) {\n            throw new Error(`You must provide selection conditions in order to find a single row.`);\n        }\n        // create query builder and apply find options\n        return this.createQueryBuilder(entityClass, alias)\n            .setFindOptions({\n            ...options,\n            take: 1,\n        })\n            .getOne();\n    }\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy(entityClass, where) {\n        const metadata = this.connection.getMetadata(entityClass);\n        // create query builder and apply find options\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({\n            where,\n            take: 1,\n        })\n            .getOne();\n    }\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(entityClass, id) {\n        const metadata = this.connection.getMetadata(entityClass);\n        // create query builder and apply find options\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({\n            take: 1,\n        })\n            .whereInIds(metadata.ensureEntityIdMap(id))\n            .getOne();\n    }\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(entityClass, options) {\n        return this.findOne(entityClass, options).then((value) => {\n            if (value === null) {\n                return Promise.reject(new EntityNotFoundError(entityClass, options));\n            }\n            return Promise.resolve(value);\n        });\n    }\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(entityClass, where) {\n        return this.findOneBy(entityClass, where).then((value) => {\n            if (value === null) {\n                return Promise.reject(new EntityNotFoundError(entityClass, where));\n            }\n            return Promise.resolve(value);\n        });\n    }\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear(entityClass) {\n        const metadata = this.connection.getMetadata(entityClass);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n        try {\n            return await queryRunner.clearTable(metadata.tablePath); // await is needed here because we are using finally\n        }\n        finally {\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment(entityClass, conditions, propertyPath, value) {\n        const metadata = this.connection.getMetadata(entityClass);\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\n        if (!column)\n            throw new TypeORMError(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`);\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values = propertyPath\n            .split(\".\")\n            .reduceRight((value, key) => ({ [key]: value }), () => this.connection.driver.escape(column.databaseName) +\n            \" + \" +\n            value);\n        return this.createQueryBuilder(entityClass, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute();\n    }\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement(entityClass, conditions, propertyPath, value) {\n        const metadata = this.connection.getMetadata(entityClass);\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\n        if (!column)\n            throw new TypeORMError(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`);\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values = propertyPath\n            .split(\".\")\n            .reduceRight((value, key) => ({ [key]: value }), () => this.connection.driver.escape(column.databaseName) +\n            \" - \" +\n            value);\n        return this.createQueryBuilder(entityClass, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute();\n    }\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository(target) {\n        // find already created repository instance and return it if found\n        const repoFromMap = this.repositories.get(target);\n        if (repoFromMap)\n            return repoFromMap;\n        // if repository was not found then create it, store its instance and return it\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const newRepository = new MongoRepository(target, this, this.queryRunner);\n            this.repositories.set(target, newRepository);\n            return newRepository;\n        }\n        else {\n            const newRepository = new Repository(target, this, this.queryRunner);\n            this.repositories.set(target, newRepository);\n            return newRepository;\n        }\n    }\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository(target) {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver);\n        // find already created repository instance and return it if found\n        const repository = this.treeRepositories.find((repository) => repository.target === target);\n        if (repository)\n            return repository;\n        // check if repository is real tree repository\n        const newRepository = new TreeRepository(target, this, this.queryRunner);\n        this.treeRepositories.push(newRepository);\n        return newRepository;\n    }\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository(target) {\n        return this.connection.getMongoRepository(target);\n    }\n    /**\n     * Creates a new repository instance out of a given Repository and\n     * sets current EntityManager instance to it. Used to work with custom repositories\n     * in transactions.\n     */\n    withRepository(repository) {\n        const repositoryConstructor = repository.constructor;\n        const { target, manager, queryRunner, ...otherRepositoryProperties } = repository;\n        return Object.assign(new repositoryConstructor(repository.target, this), {\n            ...otherRepositoryProperties,\n        });\n    }\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend to create custom repositories\n     */\n    getCustomRepository(customRepository) {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find((repository) => {\n            return (repository.target ===\n                (typeof customRepository === \"function\"\n                    ? customRepository\n                    : customRepository.constructor));\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n        const entityMetadata = entityRepositoryMetadataArgs.entity\n            ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity)\n            : undefined;\n        const entityRepositoryInstance = new entityRepositoryMetadataArgs.target(this, entityMetadata);\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!entityRepositoryInstance[\"manager\"])\n                entityRepositoryInstance[\"manager\"] = this;\n        }\n        else {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n            entityRepositoryInstance[\"manager\"] = this;\n            entityRepositoryInstance[\"metadata\"] = entityMetadata;\n        }\n        return entityRepositoryInstance;\n    }\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release() {\n        if (!this.queryRunner)\n            throw new NoNeedToReleaseEntityManagerError();\n        return this.queryRunner.release();\n    }\n}\n\n//# sourceMappingURL=EntityManager.js.map\n","import { EntityManager } from \"./EntityManager\";\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\nexport class SqljsEntityManager extends EntityManager {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, queryRunner) {\n        super(connection, queryRunner);\n        this[\"@instanceof\"] = Symbol.for(\"SqljsEntityManager\");\n        this.driver = connection.driver;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\n     * or uses the given definition to open a new database.\n     */\n    async loadDatabase(fileNameOrLocalStorageOrData) {\n        await this.driver.load(fileNameOrLocalStorageOrData);\n    }\n    /**\n     * Saves the current database to a file (Node.js) or localstorage (browser)\n     * if fileNameOrLocalStorage is not set options.location is used.\n     */\n    async saveDatabase(fileNameOrLocalStorage) {\n        await this.driver.save(fileNameOrLocalStorage);\n    }\n    /**\n     * Returns the current database definition.\n     */\n    exportDatabase() {\n        return this.driver.export();\n    }\n}\n\n//# sourceMappingURL=SqljsEntityManager.js.map\n","import { EntityManager } from \"./EntityManager\";\nimport { MongoEntityManager } from \"./MongoEntityManager\";\nimport { SqljsEntityManager } from \"./SqljsEntityManager\";\n/**\n * Helps to create entity managers.\n */\nexport class EntityManagerFactory {\n    /**\n     * Creates a new entity manager depend on a given connection's driver.\n     */\n    create(connection, queryRunner) {\n        if (connection.driver.options.type === \"mongodb\")\n            return new MongoEntityManager(connection);\n        if (connection.driver.options.type === \"sqljs\")\n            return new SqljsEntityManager(connection, queryRunner);\n        return new EntityManager(connection, queryRunner);\n    }\n}\n\n//# sourceMappingURL=EntityManagerFactory.js.map\n","/**\n * View in the database represented in this class.\n */\nexport class View {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"View\");\n        this.indices = [];\n        if (options) {\n            this.database = options.database;\n            this.schema = options.schema;\n            this.name = options.name;\n            this.expression = options.expression;\n            this.materialized = !!options.materialized;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone() {\n        return new View({\n            database: this.database,\n            schema: this.schema,\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        });\n    }\n    /**\n     * Add index\n     */\n    addIndex(index) {\n        this.indices.push(index);\n    }\n    /**\n     * Remove index\n     */\n    removeIndex(viewIndex) {\n        const index = this.indices.find((index) => index.name === viewIndex.name);\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata, driver) {\n        const options = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            expression: entityMetadata.expression,\n            materialized: entityMetadata.tableMetadataArgs.materialized,\n        };\n        return new View(options);\n    }\n}\n\n//# sourceMappingURL=View.js.map\n","export class ViewUtils {\n    /**\n     * Comparator for .sort() that will order views bases on dependencies in creation order\n     */\n    static viewMetadataCmp(metadataA, metadataB) {\n        if (!metadataA || !metadataB) {\n            return 0;\n        }\n        if (metadataA.dependsOn &&\n            (metadataA.dependsOn.has(metadataB.target) ||\n                metadataA.dependsOn.has(metadataB.name))) {\n            return 1;\n        }\n        if (metadataB.dependsOn &&\n            (metadataB.dependsOn.has(metadataA.target) ||\n                metadataB.dependsOn.has(metadataA.name))) {\n            return -1;\n        }\n        return 0;\n    }\n}\n\n//# sourceMappingURL=ViewUtils.js.map\n","import { Table } from \"./table/Table\";\nimport { TableColumn } from \"./table/TableColumn\";\nimport { TableForeignKey } from \"./table/TableForeignKey\";\nimport { TableIndex } from \"./table/TableIndex\";\nimport { TableUtils } from \"./util/TableUtils\";\nimport { TableUnique } from \"./table/TableUnique\";\nimport { TableCheck } from \"./table/TableCheck\";\nimport { TableExclusion } from \"./table/TableExclusion\";\nimport { View } from \"./view/View\";\nimport { ViewUtils } from \"./util/ViewUtils\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n        this[\"@instanceof\"] = Symbol.for(\"RdbmsSchemaBuilder\");\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build() {\n        this.queryRunner = this.connection.createQueryRunner();\n        // this.connection.driver.database || this.currentDatabase;\n        this.currentDatabase = this.connection.driver.database;\n        this.currentSchema = this.connection.driver.schema;\n        // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.\n        // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.\n        // In Spanner queries against the INFORMATION_SCHEMA can be used in a read-only transaction,\n        // but not in a read-write transaction.\n        const isUsingTransactions = !(this.connection.driver.options.type === \"cockroachdb\") &&\n            !(this.connection.driver.options.type === \"spanner\") &&\n            this.connection.options.migrationsTransactionMode !== \"none\";\n        await this.queryRunner.beforeMigration();\n        if (isUsingTransactions) {\n            await this.queryRunner.startTransaction();\n        }\n        try {\n            await this.createMetadataTableIfNecessary(this.queryRunner);\n            // Flush the queryrunner table & view cache\n            const tablePaths = this.entityToSyncMetadatas.map((metadata) => this.getTablePath(metadata));\n            const viewPaths = this.viewEntityToSyncMetadatas.map((metadata) => this.getTablePath(metadata));\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews(viewPaths);\n            await this.executeSchemaSyncOperationsInProperOrder();\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n            if (isUsingTransactions) {\n                await this.queryRunner.commitTransaction();\n            }\n        }\n        catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (isUsingTransactions) {\n                    await this.queryRunner.rollbackTransaction();\n                }\n            }\n            catch (rollbackError) { }\n            throw error;\n        }\n        finally {\n            await this.queryRunner.afterMigration();\n            await this.queryRunner.release();\n        }\n    }\n    /**\n     * Create the typeorm_metadata table if necessary.\n     */\n    async createMetadataTableIfNecessary(queryRunner) {\n        if (this.viewEntityToSyncMetadatas.length > 0 ||\n            this.hasGeneratedColumns()) {\n            await this.createTypeormMetadataTable(queryRunner);\n        }\n    }\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log() {\n        this.queryRunner = this.connection.createQueryRunner();\n        try {\n            // Flush the queryrunner table & view cache\n            const tablePaths = this.entityToSyncMetadatas.map((metadata) => this.getTablePath(metadata));\n            const viewPaths = this.viewEntityToSyncMetadatas.map((metadata) => this.getTablePath(metadata));\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews(viewPaths);\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n            return this.queryRunner.getMemorySql();\n        }\n        finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    get entityToSyncMetadatas() {\n        return this.connection.entityMetadatas.filter((metadata) => metadata.synchronize &&\n            metadata.tableType !== \"entity-child\" &&\n            metadata.tableType !== \"view\");\n    }\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    get viewEntityToSyncMetadatas() {\n        return (this.connection.entityMetadatas\n            .filter((metadata) => metadata.tableType === \"view\" && metadata.synchronize)\n            // sort views in creation order by dependencies\n            .sort(ViewUtils.viewMetadataCmp));\n    }\n    /**\n     * Checks if there are at least one generated column.\n     */\n    hasGeneratedColumns() {\n        return this.connection.entityMetadatas.some((entityMetadata) => {\n            return entityMetadata.columns.some((column) => column.generatedType);\n        });\n    }\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    async executeSchemaSyncOperationsInProperOrder() {\n        await this.dropOldViews();\n        await this.dropOldForeignKeys();\n        await this.dropOldIndices();\n        await this.dropOldChecks();\n        await this.dropOldExclusions();\n        await this.dropCompositeUniqueConstraints();\n        // await this.renameTables();\n        await this.renameColumns();\n        await this.changeTableComment();\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updatePrimaryKeys();\n        await this.updateExistColumns();\n        await this.createNewIndices();\n        await this.createNewChecks();\n        await this.createNewExclusions();\n        await this.createCompositeUniqueConstraints();\n        await this.createForeignKeys();\n        await this.createViews();\n        await this.createNewViewIndices();\n    }\n    getTablePath(target) {\n        const parsed = this.connection.driver.parseTableName(target);\n        return this.connection.driver.buildTableName(parsed.tableName, parsed.schema || this.currentSchema, parsed.database || this.currentDatabase);\n    }\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    async dropOldForeignKeys() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const tableForeignKeysToDrop = table.foreignKeys.filter((tableForeignKey) => {\n                const metadataFK = metadata.foreignKeys.find((metadataForeignKey) => tableForeignKey.name === metadataForeignKey.name &&\n                    this.getTablePath(tableForeignKey) ===\n                        this.getTablePath(metadataForeignKey.referencedEntityMetadata));\n                return (!metadataFK ||\n                    (metadataFK.onDelete &&\n                        metadataFK.onDelete !== tableForeignKey.onDelete) ||\n                    (metadataFK.onUpdate &&\n                        metadataFK.onUpdate !== tableForeignKey.onUpdate));\n            });\n            if (tableForeignKeysToDrop.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop\n                .map((dbForeignKey) => dbForeignKey.name)\n                .join(\", \")}`);\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);\n        }\n    }\n    /**\n     * Rename tables\n     */\n    async renameTables() {\n        // for (const metadata of this.entityToSyncMetadatas) {\n        //     const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n        // }\n    }\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    async renameColumns() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            if (metadata.columns.length !== table.columns.length)\n                continue;\n            const renamedMetadataColumns = metadata.columns\n                .filter((c) => !c.isVirtualProperty)\n                .filter((column) => {\n                return !table.columns.find((tableColumn) => {\n                    return (tableColumn.name === column.databaseName &&\n                        tableColumn.type ===\n                            this.connection.driver.normalizeType(column) &&\n                        tableColumn.isNullable === column.isNullable &&\n                        tableColumn.isUnique ===\n                            this.connection.driver.normalizeIsUnique(column));\n                });\n            });\n            if (renamedMetadataColumns.length === 0 ||\n                renamedMetadataColumns.length > 1)\n                continue;\n            const renamedTableColumns = table.columns.filter((tableColumn) => {\n                return !metadata.columns.find((column) => {\n                    return (!column.isVirtualProperty &&\n                        column.databaseName === tableColumn.name &&\n                        this.connection.driver.normalizeType(column) ===\n                            tableColumn.type &&\n                        column.isNullable === tableColumn.isNullable &&\n                        this.connection.driver.normalizeIsUnique(column) ===\n                            tableColumn.isUnique);\n                });\n            });\n            if (renamedTableColumns.length === 0 ||\n                renamedTableColumns.length > 1)\n                continue;\n            const renamedColumn = renamedTableColumns[0].clone();\n            renamedColumn.name = renamedMetadataColumns[0].databaseName;\n            this.connection.logger.logSchemaBuild(`renaming column \"${renamedTableColumns[0].name}\" in \"${table.name}\" to \"${renamedColumn.name}\"`);\n            await this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn);\n        }\n    }\n    async dropOldIndices() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const dropQueries = table.indices\n                .filter((tableIndex) => {\n                const indexMetadata = metadata.indices.find((index) => index.name === tableIndex.name);\n                if (indexMetadata) {\n                    if (indexMetadata.synchronize === false)\n                        return false;\n                    if (indexMetadata.isUnique !== tableIndex.isUnique)\n                        return true;\n                    if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                        return true;\n                    if (this.connection.driver.isFullTextColumnTypeSupported() &&\n                        indexMetadata.isFulltext !== tableIndex.isFulltext)\n                        return true;\n                    if (indexMetadata.columns.length !==\n                        tableIndex.columnNames.length)\n                        return true;\n                    return !indexMetadata.columns.every((column) => tableIndex.columnNames.indexOf(column.databaseName) !== -1);\n                }\n                return true;\n            })\n                .map(async (tableIndex) => {\n                this.connection.logger.logSchemaBuild(`dropping an index: \"${tableIndex.name}\" from table ${table.name}`);\n                await this.queryRunner.dropIndex(table, tableIndex);\n            });\n            await Promise.all(dropQueries);\n        }\n        if (this.connection.options.type === \"postgres\") {\n            const postgresQueryRunner = this.queryRunner;\n            for (const metadata of this.viewEntityToSyncMetadatas) {\n                const view = this.queryRunner.loadedViews.find((view) => this.getTablePath(view) === this.getTablePath(metadata));\n                if (!view)\n                    continue;\n                const dropQueries = view.indices\n                    .filter((tableIndex) => {\n                    const indexMetadata = metadata.indices.find((index) => index.name === tableIndex.name);\n                    if (indexMetadata) {\n                        if (indexMetadata.synchronize === false)\n                            return false;\n                        if (indexMetadata.isUnique !== tableIndex.isUnique)\n                            return true;\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                            return true;\n                        if (this.connection.driver.isFullTextColumnTypeSupported() &&\n                            indexMetadata.isFulltext !==\n                                tableIndex.isFulltext)\n                            return true;\n                        if (indexMetadata.columns.length !==\n                            tableIndex.columnNames.length)\n                            return true;\n                        return !indexMetadata.columns.every((column) => tableIndex.columnNames.indexOf(column.databaseName) !== -1);\n                    }\n                    return true;\n                })\n                    .map(async (tableIndex) => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: \"${tableIndex.name}\" from view ${view.name}`);\n                    await postgresQueryRunner.dropViewIndex(view, tableIndex);\n                });\n                await Promise.all(dropQueries);\n            }\n        }\n    }\n    async dropOldChecks() {\n        // Mysql does not support check constraints\n        if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\")\n            return;\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const oldChecks = table.checks.filter((tableCheck) => {\n                return !metadata.checks.find((checkMetadata) => checkMetadata.name === tableCheck.name);\n            });\n            if (oldChecks.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`dropping old check constraint: ${oldChecks\n                .map((check) => `\"${check.name}\"`)\n                .join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropCheckConstraints(table, oldChecks);\n        }\n    }\n    async dropCompositeUniqueConstraints() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const compositeUniques = table.uniques.filter((tableUnique) => {\n                return (tableUnique.columnNames.length > 1 &&\n                    !metadata.uniques.find((uniqueMetadata) => uniqueMetadata.name === tableUnique.name));\n            });\n            if (compositeUniques.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`dropping old unique constraint: ${compositeUniques\n                .map((unique) => `\"${unique.name}\"`)\n                .join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropUniqueConstraints(table, compositeUniques);\n        }\n    }\n    async dropOldExclusions() {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver.options.type === \"postgres\"))\n            return;\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const oldExclusions = table.exclusions.filter((tableExclusion) => {\n                return !metadata.exclusions.find((exclusionMetadata) => exclusionMetadata.name === tableExclusion.name);\n            });\n            if (oldExclusions.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`dropping old exclusion constraint: ${oldExclusions\n                .map((exclusion) => `\"${exclusion.name}\"`)\n                .join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropExclusionConstraints(table, oldExclusions);\n        }\n    }\n    /**\n     * change table comment\n     */\n    async changeTableComment() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                this.connection.driver.options.type === 'postgres') {\n                const newComment = metadata.comment;\n                await this.queryRunner.changeTableComment(table, newComment);\n            }\n        }\n    }\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    async createNewTables() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            // check if table does not exist yet\n            const existTable = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (existTable)\n                continue;\n            this.connection.logger.logSchemaBuild(`creating a new table: ${this.getTablePath(metadata)}`);\n            // create a new table and sync it in the database\n            const table = Table.create(metadata, this.connection.driver);\n            await this.queryRunner.createTable(table, false, false);\n            this.queryRunner.loadedTables.push(table);\n        }\n    }\n    async createViews() {\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const existView = this.queryRunner.loadedViews.find((view) => {\n                const viewExpression = typeof view.expression === \"string\"\n                    ? view.expression.trim()\n                    : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\"\n                    ? metadata.expression.trim()\n                    : metadata.expression(this.connection).getQuery();\n                return (this.getTablePath(view) === this.getTablePath(metadata) &&\n                    viewExpression === metadataExpression);\n            });\n            if (existView)\n                continue;\n            this.connection.logger.logSchemaBuild(`creating a new view: ${this.getTablePath(metadata)}`);\n            // create a new view and sync it in the database\n            const view = View.create(metadata, this.connection.driver);\n            await this.queryRunner.createView(view, true);\n            this.queryRunner.loadedViews.push(view);\n        }\n    }\n    async dropOldViews() {\n        const droppedViews = [];\n        const viewEntityToSyncMetadatas = this.viewEntityToSyncMetadatas;\n        // BuIld lookup cache for finding views metadata\n        const viewToMetadata = new Map();\n        for (const view of this.queryRunner.loadedViews) {\n            const viewMetadata = viewEntityToSyncMetadatas.find((metadata) => {\n                return this.getTablePath(view) === this.getTablePath(metadata);\n            });\n            if (viewMetadata) {\n                viewToMetadata.set(view, viewMetadata);\n            }\n        }\n        // Gather all changed view, that need a drop\n        for (const view of this.queryRunner.loadedViews) {\n            const viewMetadata = viewToMetadata.get(view);\n            if (!viewMetadata) {\n                continue;\n            }\n            const viewExpression = typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery();\n            const metadataExpression = typeof viewMetadata.expression === \"string\"\n                ? viewMetadata.expression.trim()\n                : viewMetadata.expression(this.connection).getQuery();\n            if (viewExpression === metadataExpression)\n                continue;\n            this.connection.logger.logSchemaBuild(`dropping an old view: ${view.name}`);\n            // Collect view to be dropped\n            droppedViews.push(view);\n        }\n        // Helper function that for a given view, will recursively return list of the view and all views that depend on it\n        const viewDependencyChain = (view) => {\n            // Get the view metadata\n            const viewMetadata = viewToMetadata.get(view);\n            let viewWithDependencies = [view];\n            // If no metadata is known for the view, simply return the view itself\n            if (!viewMetadata) {\n                return viewWithDependencies;\n            }\n            // Iterate over all known views\n            for (const [currentView, currentMetadata,] of viewToMetadata.entries()) {\n                // Ignore self reference\n                if (currentView === view) {\n                    continue;\n                }\n                // If the currently iterated view depends on the passed in view\n                if (currentMetadata.dependsOn &&\n                    (currentMetadata.dependsOn.has(viewMetadata.target) ||\n                        currentMetadata.dependsOn.has(viewMetadata.name))) {\n                    // Recursively add currently iterate view and its dependents\n                    viewWithDependencies = viewWithDependencies.concat(viewDependencyChain(currentView));\n                }\n            }\n            // Return all collected views\n            return viewWithDependencies;\n        };\n        // Collect final list of views to be dropped in a Set so there are no duplicates\n        const droppedViewsWithDependencies = new Set(\n        // Collect all dropped views, and their dependencies\n        droppedViews\n            .map((view) => viewDependencyChain(view))\n            // Flattened to single Array ( can be replaced with flatMap, once supported)\n            .reduce((all, segment) => {\n            return all.concat(segment);\n        }, [])\n            // Sort the views to be dropped in creation order\n            .sort((a, b) => {\n            return ViewUtils.viewMetadataCmp(viewToMetadata.get(a), viewToMetadata.get(b));\n        })\n            // reverse order to get drop order\n            .reverse());\n        // Finally emit all drop views\n        for (const view of droppedViewsWithDependencies) {\n            await this.queryRunner.dropView(view);\n        }\n        this.queryRunner.loadedViews = this.queryRunner.loadedViews.filter((view) => !droppedViewsWithDependencies.has(view));\n    }\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    async dropRemovedColumns() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedTableColumns = table.columns.filter((tableColumn) => {\n                return !metadata.columns.find((columnMetadata) => columnMetadata.isVirtualProperty ||\n                    columnMetadata.databaseName === tableColumn.name);\n            });\n            if (droppedTableColumns.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` +\n                droppedTableColumns.map((column) => column.name).join(\", \"));\n            // drop columns from the database\n            await this.queryRunner.dropColumns(table, droppedTableColumns);\n        }\n    }\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    async addNewColumns() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter((columnMetadata) => {\n                return (!columnMetadata.isVirtualProperty &&\n                    !table.columns.find((tableColumn) => tableColumn.name ===\n                        columnMetadata.databaseName));\n            });\n            if (newColumnMetadatas.length === 0)\n                continue;\n            // create columns in the database\n            const newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n            const newTableColumns = newTableColumnOptions.map((option) => new TableColumn(option));\n            if (newTableColumns.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`new columns added: ` +\n                newColumnMetadatas\n                    .map((column) => column.databaseName)\n                    .join(\", \"));\n            await this.queryRunner.addColumns(table, newTableColumns);\n        }\n    }\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const primaryMetadataColumns = metadata.columns.filter((column) => column.isPrimary);\n            const primaryTableColumns = table.columns.filter((column) => column.isPrimary);\n            if (primaryTableColumns.length !== primaryMetadataColumns.length &&\n                primaryMetadataColumns.length > 1) {\n                const changedPrimaryColumns = primaryMetadataColumns.map((primaryMetadataColumn) => {\n                    return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, this.connection.driver));\n                });\n                await this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns);\n            }\n        }\n    }\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    async updateExistColumns() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n            if (changedColumns.length === 0)\n                continue;\n            // drop all foreign keys that point to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnReferencedForeignKeys(this.getTablePath(metadata), changedColumn.databaseName);\n            }\n            // drop all composite indices related to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnCompositeIndices(this.getTablePath(metadata), changedColumn.databaseName);\n            }\n            // drop all composite uniques related to this column\n            // Mysql does not support unique constraints.\n            if (!(DriverUtils.isMySQLFamily(this.connection.driver) ||\n                this.connection.driver.options.type === \"aurora-mysql\" ||\n                this.connection.driver.options.type === \"spanner\")) {\n                for (const changedColumn of changedColumns) {\n                    await this.dropColumnCompositeUniques(this.getTablePath(metadata), changedColumn.databaseName);\n                }\n            }\n            // generate a map of new/old columns\n            const newAndOldTableColumns = changedColumns.map((changedColumn) => {\n                const oldTableColumn = table.columns.find((column) => column.name === changedColumn.databaseName);\n                const newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, this.connection.driver);\n                const newTableColumn = new TableColumn(newTableColumnOptions);\n                return {\n                    oldColumn: oldTableColumn,\n                    newColumn: newTableColumn,\n                };\n            });\n            if (newAndOldTableColumns.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`columns changed in \"${table.name}\". updating: ` +\n                changedColumns\n                    .map((column) => column.databaseName)\n                    .join(\", \"));\n            await this.queryRunner.changeColumns(table, newAndOldTableColumns);\n        }\n    }\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    async createNewIndices() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const newIndices = metadata.indices\n                .filter((indexMetadata) => !table.indices.find((tableIndex) => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)\n                .map((indexMetadata) => TableIndex.create(indexMetadata));\n            if (newIndices.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`adding new indices ${newIndices\n                .map((index) => `\"${index.name}\"`)\n                .join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createIndices(table, newIndices);\n        }\n    }\n    /**\n     * Creates indices for materialized views.\n     */\n    async createNewViewIndices() {\n        // Only PostgreSQL supports indices for materialized views.\n        if (this.connection.options.type !== \"postgres\" ||\n            !DriverUtils.isPostgresFamily(this.connection.driver)) {\n            return;\n        }\n        const postgresQueryRunner = (this.queryRunner);\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const view = this.queryRunner.loadedViews.find((view) => {\n                const viewExpression = typeof view.expression === \"string\"\n                    ? view.expression.trim()\n                    : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\"\n                    ? metadata.expression.trim()\n                    : metadata.expression(this.connection).getQuery();\n                return (this.getTablePath(view) === this.getTablePath(metadata) &&\n                    viewExpression === metadataExpression);\n            });\n            if (!view || !view.materialized)\n                continue;\n            const newIndices = metadata.indices\n                .filter((indexMetadata) => !view.indices.find((tableIndex) => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)\n                .map((indexMetadata) => TableIndex.create(indexMetadata));\n            if (newIndices.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`adding new indices ${newIndices\n                .map((index) => `\"${index.name}\"`)\n                .join(\", \")} in view \"${view.name}\"`);\n            await postgresQueryRunner.createViewIndices(view, newIndices);\n        }\n    }\n    async createNewChecks() {\n        // Mysql does not support check constraints\n        if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\")\n            return;\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const newChecks = metadata.checks\n                .filter((checkMetadata) => !table.checks.find((tableCheck) => tableCheck.name === checkMetadata.name))\n                .map((checkMetadata) => TableCheck.create(checkMetadata));\n            if (newChecks.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`adding new check constraints: ${newChecks\n                .map((index) => `\"${index.name}\"`)\n                .join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createCheckConstraints(table, newChecks);\n        }\n    }\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    async createCompositeUniqueConstraints() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const compositeUniques = metadata.uniques\n                .filter((uniqueMetadata) => uniqueMetadata.columns.length > 1 &&\n                !table.uniques.find((tableUnique) => tableUnique.name === uniqueMetadata.name))\n                .map((uniqueMetadata) => TableUnique.create(uniqueMetadata));\n            if (compositeUniques.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`adding new unique constraints: ${compositeUniques\n                .map((unique) => `\"${unique.name}\"`)\n                .join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createUniqueConstraints(table, compositeUniques);\n        }\n    }\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    async createNewExclusions() {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver.options.type === \"postgres\"))\n            return;\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const newExclusions = metadata.exclusions\n                .filter((exclusionMetadata) => !table.exclusions.find((tableExclusion) => tableExclusion.name === exclusionMetadata.name))\n                .map((exclusionMetadata) => TableExclusion.create(exclusionMetadata));\n            if (newExclusions.length === 0)\n                continue;\n            this.connection.logger.logSchemaBuild(`adding new exclusion constraints: ${newExclusions\n                .map((exclusion) => `\"${exclusion.name}\"`)\n                .join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createExclusionConstraints(table, newExclusions);\n        }\n    }\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    async createForeignKeys() {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === this.getTablePath(metadata));\n            if (!table)\n                continue;\n            const newKeys = metadata.foreignKeys.filter((foreignKey) => {\n                return !table.foreignKeys.find((dbForeignKey) => dbForeignKey.name === foreignKey.name &&\n                    this.getTablePath(dbForeignKey) ===\n                        this.getTablePath(foreignKey.referencedEntityMetadata));\n            });\n            if (newKeys.length === 0)\n                continue;\n            const dbForeignKeys = newKeys.map((foreignKeyMetadata) => TableForeignKey.create(foreignKeyMetadata, this.connection.driver));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys\n                .map((key) => key.name)\n                .join(\", \")} on table \"${table.name}\"`);\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys);\n        }\n    }\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    async dropColumnReferencedForeignKeys(tablePath, columnName) {\n        const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === tablePath);\n        if (!table)\n            return;\n        const tablesWithFK = [];\n        const columnForeignKey = table.foreignKeys.find((foreignKey) => foreignKey.columnNames.indexOf(columnName) !== -1);\n        if (columnForeignKey) {\n            const clonedTable = table.clone();\n            clonedTable.foreignKeys = [columnForeignKey];\n            tablesWithFK.push(clonedTable);\n            table.removeForeignKey(columnForeignKey);\n        }\n        for (const loadedTable of this.queryRunner.loadedTables) {\n            const dependForeignKeys = loadedTable.foreignKeys.filter((foreignKey) => {\n                return (this.getTablePath(foreignKey) === tablePath &&\n                    foreignKey.referencedColumnNames.indexOf(columnName) !==\n                        -1);\n            });\n            if (dependForeignKeys.length > 0) {\n                const clonedTable = loadedTable.clone();\n                clonedTable.foreignKeys = dependForeignKeys;\n                tablesWithFK.push(clonedTable);\n                dependForeignKeys.forEach((dependForeignKey) => loadedTable.removeForeignKey(dependForeignKey));\n            }\n        }\n        if (tablesWithFK.length > 0) {\n            for (const tableWithFK of tablesWithFK) {\n                this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableWithFK.name}: ${tableWithFK.foreignKeys\n                    .map((foreignKey) => foreignKey.name)\n                    .join(\", \")}`);\n                await this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n            }\n        }\n    }\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    async dropColumnCompositeIndices(tablePath, columnName) {\n        const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === tablePath);\n        if (!table)\n            return;\n        const relatedIndices = table.indices.filter((index) => index.columnNames.length > 1 &&\n            index.columnNames.indexOf(columnName) !== -1);\n        if (relatedIndices.length === 0)\n            return;\n        this.connection.logger.logSchemaBuild(`dropping related indices of \"${tablePath}\".\"${columnName}\": ${relatedIndices\n            .map((index) => index.name)\n            .join(\", \")}`);\n        await this.queryRunner.dropIndices(table, relatedIndices);\n    }\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    async dropColumnCompositeUniques(tablePath, columnName) {\n        const table = this.queryRunner.loadedTables.find((table) => this.getTablePath(table) === tablePath);\n        if (!table)\n            return;\n        const relatedUniques = table.uniques.filter((unique) => unique.columnNames.length > 1 &&\n            unique.columnNames.indexOf(columnName) !== -1);\n        if (relatedUniques.length === 0)\n            return;\n        this.connection.logger.logSchemaBuild(`dropping related unique constraints of \"${tablePath}\".\"${columnName}\": ${relatedUniques\n            .map((unique) => unique.name)\n            .join(\", \")}`);\n        await this.queryRunner.dropUniqueConstraints(table, relatedUniques);\n    }\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    metadataColumnsToTableColumnOptions(columns) {\n        return columns.map((columnMetadata) => TableUtils.createTableColumnOptions(columnMetadata, this.connection.driver));\n    }\n    /**\n     * Creates typeorm service table for storing user defined Views and generate columns.\n     */\n    async createTypeormMetadataTable(queryRunner) {\n        const schema = this.currentSchema;\n        const database = this.currentDatabase;\n        const typeormMetadataTable = this.connection.driver.buildTableName(this.connection.metadataTableName, schema, database);\n        // Spanner requires at least one primary key in a table.\n        // Since we don't have unique column in \"typeorm_metadata\" table\n        // and we should avoid breaking changes, we mark all columns as primary for Spanner driver.\n        const isPrimary = this.connection.driver.options.type === \"spanner\";\n        await queryRunner.createTable(new Table({\n            database: database,\n            schema: schema,\n            name: typeormMetadataTable,\n            columns: [\n                {\n                    name: \"type\",\n                    type: this.connection.driver.normalizeType({\n                        type: this.connection.driver.mappedDataTypes\n                            .metadataType,\n                    }),\n                    isNullable: false,\n                    isPrimary,\n                },\n                {\n                    name: \"database\",\n                    type: this.connection.driver.normalizeType({\n                        type: this.connection.driver.mappedDataTypes\n                            .metadataDatabase,\n                    }),\n                    isNullable: true,\n                    isPrimary,\n                },\n                {\n                    name: \"schema\",\n                    type: this.connection.driver.normalizeType({\n                        type: this.connection.driver.mappedDataTypes\n                            .metadataSchema,\n                    }),\n                    isNullable: true,\n                    isPrimary,\n                },\n                {\n                    name: \"table\",\n                    type: this.connection.driver.normalizeType({\n                        type: this.connection.driver.mappedDataTypes\n                            .metadataTable,\n                    }),\n                    isNullable: true,\n                    isPrimary,\n                },\n                {\n                    name: \"name\",\n                    type: this.connection.driver.normalizeType({\n                        type: this.connection.driver.mappedDataTypes\n                            .metadataName,\n                    }),\n                    isNullable: true,\n                    isPrimary,\n                },\n                {\n                    name: \"value\",\n                    type: this.connection.driver.normalizeType({\n                        type: this.connection.driver.mappedDataTypes\n                            .metadataValue,\n                    }),\n                    isNullable: true,\n                    isPrimary,\n                },\n            ],\n        }), true);\n    }\n}\n\n//# sourceMappingURL=RdbmsSchemaBuilder.js.map\n","import { DateUtils } from \"../../util/DateUtils\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DriverUtils } from \"../DriverUtils\";\nimport { TypeORMError } from \"../../error\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"nested\";\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n         * @see https://sqlite.org/datatype3.html\n         */\n        this.supportedDataTypes = [\n            \"int\",\n            \"integer\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"bigint\",\n            \"unsigned big int\",\n            \"int2\",\n            \"int8\",\n            \"integer\",\n            \"character\",\n            \"varchar\",\n            \"varying character\",\n            \"nchar\",\n            \"native character\",\n            \"nvarchar\",\n            \"text\",\n            \"clob\",\n            \"text\",\n            \"blob\",\n            \"real\",\n            \"double\",\n            \"double precision\",\n            \"float\",\n            \"real\",\n            \"numeric\",\n            \"decimal\",\n            \"boolean\",\n            \"date\",\n            \"time\",\n            \"datetime\",\n            \"json\",\n        ];\n        /**\n         * Returns type of upsert supported by driver if any\n         */\n        this.supportedUpsertTypes = [\"on-conflict-do-update\"];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"character\",\n            \"varchar\",\n            \"varying character\",\n            \"nchar\",\n            \"native character\",\n            \"nvarchar\",\n            \"text\",\n            \"blob\",\n            \"clob\",\n        ];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"real\",\n            \"double\",\n            \"double precision\",\n            \"float\",\n            \"real\",\n            \"numeric\",\n            \"decimal\",\n            \"date\",\n            \"time\",\n            \"datetime\",\n        ];\n        /**\n         * Gets list of column data types that support scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"real\",\n            \"double\",\n            \"double precision\",\n            \"float\",\n            \"real\",\n            \"numeric\",\n            \"decimal\",\n        ];\n        /**\n         * Orm has special columns and we need to know what database column types should be for those types.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"datetime\",\n            createDateDefault: \"datetime('now')\",\n            updateDate: \"datetime\",\n            updateDateDefault: \"datetime('now')\",\n            deleteDate: \"datetime\",\n            deleteDateNullable: true,\n            version: \"integer\",\n            treeLevel: \"integer\",\n            migrationId: \"integer\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"bigint\",\n            cacheId: \"int\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"bigint\",\n            cacheDuration: \"int\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"text\",\n        };\n        this.cteCapabilities = {\n            enabled: true,\n            requiresRecursiveHint: true,\n        };\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Any attached databases (excepting default 'main')\n         */\n        this.attachedDatabases = {};\n        this.connection = connection;\n        this.options = connection.options;\n        this.database = DriverUtils.buildDriverOptions(this.options).database;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect() {\n        return Promise.resolve();\n    }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close((err) => err ? fail(err) : ok());\n        });\n    }\n    hasAttachedDatabases() {\n        return !!Object.keys(this.attachedDatabases).length;\n    }\n    getAttachedDatabaseHandleByRelativePath(path) {\n        return this.attachedDatabases?.[path]?.attachHandle;\n    }\n    getAttachedDatabasePathRelativeByHandle(handle) {\n        return Object.values(this.attachedDatabases).find(({ attachHandle }) => handle === attachHandle)?.attachFilepathRelative;\n    }\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\") {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\n            // TODO: think about `toUTC` conversion\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n        }\n        else if (columnMetadata.type === \"json\" ||\n            columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n        }\n        return value;\n    }\n    /**\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value)\n                : value;\n        if (columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            /**\n             * Fix date conversion issue\n             *\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\n             *\n             * ISO 8601\n             * https://www.w3.org/TR/NOTE-datetime\n             */\n            if (value && typeof value === \"string\") {\n                // There are various valid time string formats a sqlite time string might have:\n                // https://www.sqlite.org/lang_datefunc.html\n                // There are two separate fixes we may need to do:\n                //   1) Add 'T' separator if space is used instead\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\n                    value = value.replace(\" \", \"T\");\n                }\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(value)) {\n                    value += \"Z\";\n                }\n            }\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"json\" ||\n            columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n        }\n        else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value;\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    }\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql, parameters, nativeParameters) {\n        const escapedParameters = Object.keys(nativeParameters).map((key) => {\n            // Mapping boolean values to their numeric representation\n            if (typeof nativeParameters[key] === \"boolean\") {\n                return nativeParameters[key] === true ? 1 : 0;\n            }\n            if (nativeParameters[key] instanceof Date) {\n                return DateUtils.mixedDateToUtcDatetimeString(nativeParameters[key]);\n            }\n            return nativeParameters[key];\n        });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n        sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray, key) => {\n            if (!parameters.hasOwnProperty(key)) {\n                return full;\n            }\n            let value = parameters[key];\n            if (isArray) {\n                return value\n                    .map((v) => {\n                    escapedParameters.push(v);\n                    return this.createParameter(key, escapedParameters.length - 1);\n                })\n                    .join(\", \");\n            }\n            if (typeof value === \"function\") {\n                return value();\n            }\n            else if (typeof value === \"number\") {\n                return String(value);\n            }\n            // Sqlite does not have a boolean data type so we have to transform\n            // it to 1 or 0\n            if (typeof value === \"boolean\") {\n                escapedParameters.push(+value);\n                return this.createParameter(key, escapedParameters.length - 1);\n            }\n            if (value instanceof Date) {\n                escapedParameters.push(DateUtils.mixedDateToUtcDatetimeString(value));\n                return this.createParameter(key, escapedParameters.length - 1);\n            }\n            escapedParameters.push(value);\n            return this.createParameter(key, escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName) {\n        return '\"' + columnName + '\"';\n    }\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     *\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\n     */\n    buildTableName(tableName, schema, database) {\n        return tableName;\n    }\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(target) {\n        const driverDatabase = this.database;\n        const driverSchema = undefined;\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.schema\n                ? `\"${target.schema}\".\"${target.name}\"`\n                : target.name);\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName);\n            return {\n                database: target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema: target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            };\n        }\n        const parts = target.split(\".\");\n        if (parts.length === 3) {\n            return {\n                database: parts[0] || driverDatabase,\n                schema: parts[1] || driverSchema,\n                tableName: parts[2],\n            };\n        }\n        else if (parts.length === 2) {\n            const database = this.getAttachedDatabasePathRelativeByHandle(parts[0]) ??\n                driverDatabase;\n            return {\n                database: database,\n                schema: parts[0],\n                tableName: parts[1],\n            };\n        }\n        else {\n            return {\n                database: driverDatabase,\n                schema: driverSchema,\n                tableName: target,\n            };\n        }\n    }\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column) {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\";\n        }\n        else if (column.type === String) {\n            return \"varchar\";\n        }\n        else if (column.type === Date) {\n            return \"datetime\";\n        }\n        else if (column.type === Boolean) {\n            return \"boolean\";\n        }\n        else if (column.type === \"uuid\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"simple-array\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-enum\") {\n            return \"varchar\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata) {\n        const defaultValue = columnMetadata.default;\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        }\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\";\n        }\n        if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n        }\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined;\n        }\n        return `${defaultValue}`;\n    }\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column) {\n        return column.entityMetadata.uniques.some((uq) => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column) {\n        return column.length ? column.length.toString() : \"\";\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    createFullType(column) {\n        let type = column.type;\n        if (column.enum) {\n            return \"varchar\";\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    }\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection() {\n        return Promise.resolve();\n    }\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection() {\n        return Promise.resolve();\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata, insertResult, entityIndex, entityNum) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value;\n            if (generatedColumn.generationStrategy === \"increment\" &&\n                insertResult) {\n                // NOTE: When INSERT statement is successfully completed, the last inserted row ID is returned.\n                // see also: SqliteQueryRunner.query()\n                value = insertResult - entityNum + entityIndex + 1;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     value = insertValue[generatedColumn.databaseName];\n            }\n            if (!value)\n                return map;\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns, columnMetadatas) {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find((c) => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            const isColumnChanged = tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadata.length ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                this.normalizeDefault(columnMetadata) !== tableColumn.default ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map((val) => val + \"\"))) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated);\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         columnMetadata.length,\n            //     )\n            //     console.log(\n            //         \"precision:\",\n            //         tableColumn.precision,\n            //         columnMetadata.precision,\n            //     )\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\n            //     console.log(\n            //         \"default:\",\n            //         this.normalizeDefault(columnMetadata),\n            //         columnMetadata.default,\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"enum:\",\n            //         tableColumn.enum &&\n            //             columnMetadata.enum &&\n            //             !OrmUtils.isArraysEqual(\n            //                 tableColumn.enum,\n            //                 columnMetadata.enum.map((val) => val + \"\"),\n            //             ),\n            //     )\n            //     console.log(\n            //         \"isGenerated:\",\n            //         tableColumn.isGenerated,\n            //         columnMetadata.isGenerated,\n            //     )\n            // }\n            return isColumnChanged;\n        });\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported() {\n        return false;\n    }\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName, index) {\n        // return \"$\" + (index + 1);\n        return \"?\";\n        // return \"$\" + parameterName;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    createDatabaseConnection() {\n        throw new TypeORMError(\"Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers\");\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        // dependencies have to be loaded in the specific driver\n    }\n}\n\n//# sourceMappingURL=AbstractSqliteDriver.js.map\n","/**\n * This class stores query and its parameters\n */\nexport class Query {\n    constructor(query, parameters) {\n        this.query = query;\n        this.parameters = parameters;\n        this[\"@instanceof\"] = Symbol.for(\"Query\");\n    }\n}\n\n//# sourceMappingURL=Query.js.map\n","/**\n * This class stores up and down queries needed for migrations functionality.\n */\nexport class SqlInMemory {\n    constructor() {\n        this.upQueries = [];\n        this.downQueries = [];\n    }\n}\n\n//# sourceMappingURL=SqlInMemory.js.map\n","import { Query } from \"../driver/Query\";\nimport { SqlInMemory } from \"../driver/SqlInMemory\";\nimport { TypeORMError } from \"../error/TypeORMError\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nexport class BaseQueryRunner {\n    constructor() {\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if connection for this query runner is released.\n         * Once its released, query runner cannot run queries anymore.\n         */\n        this.isReleased = false;\n        /**\n         * Indicates if transaction is in progress.\n         */\n        this.isTransactionActive = false;\n        /**\n         * Stores temporarily user data.\n         * Useful for sharing data with subscribers.\n         */\n        this.data = {};\n        /**\n         * All synchronized tables in the database.\n         */\n        this.loadedTables = [];\n        /**\n         * All synchronized views in the database.\n         */\n        this.loadedViews = [];\n        /**\n         * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n         */\n        this.sqlMemoryMode = false;\n        /**\n         * Sql-s stored if \"sql in memory\" mode is enabled.\n         */\n        this.sqlInMemory = new SqlInMemory();\n        /**\n         * current depth of transaction.\n         * for transactionDepth > 0 will use SAVEPOINT to start and commit/rollback transaction blocks\n         */\n        this.transactionDepth = 0;\n        this.cachedTablePaths = {};\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        // Do nothing\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        // Do nothing\n    }\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(tablePath) {\n        this.loadedTables = await this.loadTables([tablePath]);\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;\n    }\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    async getTables(tableNames) {\n        if (!tableNames) {\n            // Don't cache in this case.\n            // This is the new case & isn't used anywhere else anyway.\n            return await this.loadTables(tableNames);\n        }\n        this.loadedTables = await this.loadTables(tableNames);\n        return this.loadedTables;\n    }\n    /**\n     * Loads given view's data from the database.\n     */\n    async getView(viewPath) {\n        this.loadedViews = await this.loadViews([viewPath]);\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;\n    }\n    /**\n     * Loads given view's data from the database.\n     */\n    async getViews(viewPaths) {\n        this.loadedViews = await this.loadViews(viewPaths);\n        return this.loadedViews;\n    }\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory() {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = true;\n    }\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory() {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = false;\n    }\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory() {\n        this.sqlInMemory = new SqlInMemory();\n    }\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql() {\n        return this.sqlInMemory;\n    }\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql() {\n        for (const { query, parameters } of this.sqlInMemory.upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql() {\n        for (const { query, parameters, } of this.sqlInMemory.downQueries.reverse()) {\n            await this.query(query, parameters);\n        }\n    }\n    getReplicationMode() {\n        return this.mode;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    async getCachedView(viewName) {\n        const view = this.loadedViews.find((view) => view.name === viewName);\n        if (view)\n            return view;\n        const foundViews = await this.loadViews([viewName]);\n        if (foundViews.length > 0) {\n            this.loadedViews.push(foundViews[0]);\n            return foundViews[0];\n        }\n        else {\n            throw new TypeORMError(`View \"${viewName}\" does not exist.`);\n        }\n    }\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    async getCachedTable(tableName) {\n        if (tableName in this.cachedTablePaths) {\n            const tablePath = this.cachedTablePaths[tableName];\n            const table = this.loadedTables.find((table) => this.getTablePath(table) === tablePath);\n            if (table) {\n                return table;\n            }\n        }\n        const foundTables = await this.loadTables([tableName]);\n        if (foundTables.length > 0) {\n            const foundTablePath = this.getTablePath(foundTables[0]);\n            const cachedTable = this.loadedTables.find((table) => this.getTablePath(table) === foundTablePath);\n            if (!cachedTable) {\n                this.cachedTablePaths[tableName] = this.getTablePath(foundTables[0]);\n                this.loadedTables.push(foundTables[0]);\n                return foundTables[0];\n            }\n            else {\n                return cachedTable;\n            }\n        }\n        else {\n            throw new TypeORMError(`Table \"${tableName}\" does not exist.`);\n        }\n    }\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    replaceCachedTable(table, changedTable) {\n        const oldTablePath = this.getTablePath(table);\n        const foundTable = this.loadedTables.find((loadedTable) => this.getTablePath(loadedTable) === oldTablePath);\n        // Clean up the lookup cache..\n        for (const [key, cachedPath] of Object.entries(this.cachedTablePaths)) {\n            if (cachedPath === oldTablePath) {\n                this.cachedTablePaths[key] = this.getTablePath(changedTable);\n            }\n        }\n        if (foundTable) {\n            foundTable.database = changedTable.database;\n            foundTable.schema = changedTable.schema;\n            foundTable.name = changedTable.name;\n            foundTable.columns = changedTable.columns;\n            foundTable.indices = changedTable.indices;\n            foundTable.foreignKeys = changedTable.foreignKeys;\n            foundTable.uniques = changedTable.uniques;\n            foundTable.checks = changedTable.checks;\n            foundTable.justCreated = changedTable.justCreated;\n            foundTable.engine = changedTable.engine;\n            foundTable.comment = changedTable.comment;\n        }\n    }\n    getTablePath(target) {\n        const parsed = this.connection.driver.parseTableName(target);\n        return this.connection.driver.buildTableName(parsed.tableName, parsed.schema, parsed.database);\n    }\n    getTypeormMetadataTableName() {\n        const options = this.connection.driver.options;\n        return this.connection.driver.buildTableName(this.connection.metadataTableName, options.schema, options.database);\n    }\n    /**\n     * Generates SQL query to select record from typeorm metadata table.\n     */\n    selectTypeormMetadataSql({ database, schema, table, type, name, }) {\n        const qb = this.connection.createQueryBuilder();\n        const selectQb = qb\n            .select()\n            .from(this.getTypeormMetadataTableName(), \"t\")\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name });\n        if (database) {\n            selectQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n                database,\n            });\n        }\n        if (schema) {\n            selectQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema });\n        }\n        if (table) {\n            selectQb.andWhere(`${qb.escape(\"table\")} = :table`, { table });\n        }\n        const [query, parameters] = selectQb.getQueryAndParameters();\n        return new Query(query, parameters);\n    }\n    /**\n     * Generates SQL query to insert a record into typeorm metadata table.\n     */\n    insertTypeormMetadataSql({ database, schema, table, type, name, value, }) {\n        const [query, parameters] = this.connection\n            .createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({\n            database: database,\n            schema: schema,\n            table: table,\n            type: type,\n            name: name,\n            value: value,\n        })\n            .getQueryAndParameters();\n        return new Query(query, parameters);\n    }\n    /**\n     * Generates SQL query to delete a record from typeorm metadata table.\n     */\n    deleteTypeormMetadataSql({ database, schema, table, type, name, }) {\n        const qb = this.connection.createQueryBuilder();\n        const deleteQb = qb\n            .delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name });\n        if (database) {\n            deleteQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n                database,\n            });\n        }\n        if (schema) {\n            deleteQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema });\n        }\n        if (table) {\n            deleteQb.andWhere(`${qb.escape(\"table\")} = :table`, { table });\n        }\n        const [query, parameters] = deleteQb.getQueryAndParameters();\n        return new Query(query, parameters);\n    }\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    isColumnChanged(oldColumn, newColumn, checkDefault, checkComment, checkEnum = true) {\n        // this logs need to debug issues in column change detection. Do not delete it!\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(!OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []));\n        // console.log(oldColumn.enum, newColumn.enum);\n        return (oldColumn.charset !== newColumn.charset ||\n            oldColumn.collation !== newColumn.collation ||\n            oldColumn.precision !== newColumn.precision ||\n            oldColumn.scale !== newColumn.scale ||\n            oldColumn.width !== newColumn.width || // MySQL only\n            oldColumn.zerofill !== newColumn.zerofill || // MySQL only\n            oldColumn.unsigned !== newColumn.unsigned || // MySQL only\n            oldColumn.asExpression !== newColumn.asExpression ||\n            (checkDefault && oldColumn.default !== newColumn.default) ||\n            oldColumn.onUpdate !== newColumn.onUpdate || // MySQL only\n            oldColumn.isNullable !== newColumn.isNullable ||\n            (checkComment && oldColumn.comment !== newColumn.comment) ||\n            (checkEnum && this.isEnumChanged(oldColumn, newColumn)));\n    }\n    isEnumChanged(oldColumn, newColumn) {\n        return !OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []);\n    }\n    /**\n     * Checks if column length is by default.\n     */\n    isDefaultColumnLength(table, column, length) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata) {\n                const columnMetadataLength = this.connection.driver.getColumnLength(columnMetadata);\n                if (columnMetadataLength)\n                    return false;\n            }\n        }\n        if (this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].length) {\n            return (this.connection.driver.dataTypeDefaults[column.type].length.toString() === length.toString());\n        }\n        return false;\n    }\n    /**\n     * Checks if column precision is by default.\n     */\n    isDefaultColumnPrecision(table, column, precision) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata &&\n                columnMetadata.precision !== null &&\n                columnMetadata.precision !== undefined)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\n                null &&\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\n                undefined)\n            return (this.connection.driver.dataTypeDefaults[column.type]\n                .precision === precision);\n        return false;\n    }\n    /**\n     * Checks if column scale is by default.\n     */\n    isDefaultColumnScale(table, column, scale) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata &&\n                columnMetadata.scale !== null &&\n                columnMetadata.scale !== undefined)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\n                null &&\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\n                undefined)\n            return (this.connection.driver.dataTypeDefaults[column.type].scale ===\n                scale);\n        return false;\n    }\n    /**\n     * Executes sql used special for schema build.\n     */\n    async executeQueries(upQueries, downQueries) {\n        if (InstanceChecker.isQuery(upQueries))\n            upQueries = [upQueries];\n        if (InstanceChecker.isQuery(downQueries))\n            downQueries = [downQueries];\n        this.sqlInMemory.upQueries.push(...upQueries);\n        this.sqlInMemory.downQueries.push(...downQueries);\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve();\n        for (const { query, parameters } of upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n    /**\n     * Generated an index name for a table and index\n     */\n    generateIndexName(table, index) {\n        // new index may be passed without name. In this case we generate index name manually.\n        return this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n    }\n}\n\n//# sourceMappingURL=BaseQueryRunner.js.map\n","export var MetadataTableType;\n(function (MetadataTableType) {\n    MetadataTableType[\"VIEW\"] = \"VIEW\";\n    MetadataTableType[\"MATERIALIZED_VIEW\"] = \"MATERIALIZED_VIEW\";\n    MetadataTableType[\"GENERATED_COLUMN\"] = \"GENERATED_COLUMN\";\n})(MetadataTableType || (MetadataTableType = {}));\n\n//# sourceMappingURL=MetadataTableType.js.map\n","import { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { TransactionAlreadyStartedError, TypeORMError } from \"../../error\";\nimport { MetadataTableType } from \"../types/MetadataTableType\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class AbstractSqliteQueryRunner extends BaseQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor() {\n        super();\n        this.transactionPromise = null;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect() {\n        return Promise.resolve(this.driver.databaseConnection);\n    }\n    /**\n     * Releases used database connection.\n     * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.\n     */\n    release() {\n        this.loadedTables = [];\n        this.clearSqlMemory();\n        return Promise.resolve();\n    }\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel) {\n        if (this.driver.transactionSupport === \"none\")\n            throw new TypeORMError(`Transactions aren't supported by ${this.connection.driver.options.type}.`);\n        if (this.isTransactionActive &&\n            this.driver.transactionSupport === \"simple\")\n            throw new TransactionAlreadyStartedError();\n        if (isolationLevel &&\n            isolationLevel !== \"READ UNCOMMITTED\" &&\n            isolationLevel !== \"SERIALIZABLE\")\n            throw new TypeORMError(`SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation`);\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        if (this.transactionDepth === 0) {\n            this.transactionDepth += 1;\n            if (isolationLevel) {\n                if (isolationLevel === \"READ UNCOMMITTED\") {\n                    await this.query(\"PRAGMA read_uncommitted = true\");\n                }\n                else {\n                    await this.query(\"PRAGMA read_uncommitted = false\");\n                }\n            }\n            await this.query(\"BEGIN TRANSACTION\");\n        }\n        else {\n            this.transactionDepth += 1;\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth - 1}`);\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.query(\"COMMIT\");\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.query(\"ROLLBACK\");\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Returns raw data stream.\n     */\n    stream(query, parameters, onEnd, onError) {\n        throw new TypeORMError(`Stream is not supported by sqlite driver.`);\n    }\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases() {\n        return Promise.resolve([]);\n    }\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database) {\n        return Promise.resolve([]);\n    }\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database) {\n        return Promise.resolve(false);\n    }\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema) {\n        throw new TypeORMError(`This driver does not support table schemas`);\n    }\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName) {\n        const tableName = InstanceChecker.isTable(tableOrName)\n            ? tableOrName.name\n            : tableOrName;\n        const sql = `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName, columnName) {\n        const tableName = InstanceChecker.isTable(tableOrName)\n            ? tableOrName.name\n            : tableOrName;\n        const sql = `PRAGMA table_xinfo(${this.escapePath(tableName)})`;\n        const columns = await this.query(sql);\n        return !!columns.find((column) => column[\"name\"] === columnName);\n    }\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database, ifNotExist) {\n        return Promise.resolve();\n    }\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database, ifExist) {\n        return Promise.resolve();\n    }\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemaPath, ifNotExist) {\n        return Promise.resolve();\n    }\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath, ifExist) {\n        return Promise.resolve();\n    }\n    /**\n     * Creates a new table.\n     */\n    async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {\n        const upQueries = [];\n        const downQueries = [];\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist)\n                return Promise.resolve();\n        }\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(index));\n            });\n        }\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter((column) => column.generatedType && column.asExpression);\n        for (const column of generatedColumns) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            upQueries.push(insertQuery);\n            downQueries.push(deleteQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName, ifExist, dropForeignKeys = true, dropIndices = true) {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist)\n                return Promise.resolve();\n        }\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys = dropForeignKeys;\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const upQueries = [];\n        const downQueries = [];\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n        upQueries.push(this.dropTableSql(table, ifExist));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter((column) => column.generatedType && column.asExpression);\n        for (const column of generatedColumns) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            upQueries.push(deleteQuery);\n            downQueries.push(insertQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Creates a new view.\n     */\n    async createView(view, syncWithMetadata = false) {\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createViewSql(view));\n        if (syncWithMetadata)\n            upQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        if (syncWithMetadata)\n            downQueries.push(this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the view.\n     */\n    async dropView(target) {\n        const viewName = InstanceChecker.isView(target) ? target.name : target;\n        const view = await this.getCachedView(viewName);\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName, newTableName) {\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        newTable.name = newTableName;\n        // rename table\n        const up = new Query(`ALTER TABLE ${this.escapePath(oldTable.name)} RENAME TO ${this.escapePath(newTableName)}`);\n        const down = new Query(`ALTER TABLE ${this.escapePath(newTableName)} RENAME TO ${this.escapePath(oldTable.name)}`);\n        await this.executeQueries(up, down);\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName = this.connection.namingStrategy.uniqueConstraintName(oldTable, unique.columnNames);\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName)\n                return;\n            unique.name = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n        });\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName = this.connection.namingStrategy.foreignKeyName(oldTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName)\n                return;\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n        });\n        // rename indices\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(oldTable, index.columnNames, index.where);\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName)\n                return;\n            index.name = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n        });\n        // rename old table;\n        oldTable.name = newTable.name;\n        // recreate table with new constraint names\n        await this.recreateTable(newTable, oldTable);\n    }\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName, column) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        return this.addColumns(table, [column]);\n    }\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName, columns) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const changedTable = table.clone();\n        columns.forEach((column) => changedTable.addColumn(column));\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        let newColumn = undefined;\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName;\n        }\n        else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        await this.changeColumns(table, [{ oldColumn, newColumn }]);\n    }\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableOrName, changedColumns) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const changedTable = table.clone();\n        changedColumns.forEach((changedColumnSet) => {\n            if (changedColumnSet.newColumn.name !==\n                changedColumnSet.oldColumn.name) {\n                changedTable\n                    .findColumnUniques(changedColumnSet.oldColumn)\n                    .forEach((unique) => {\n                    const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table, unique.columnNames);\n                    unique.columnNames.splice(unique.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    unique.columnNames.push(changedColumnSet.newColumn.name);\n                    // rename Unique only if it has default constraint name\n                    if (unique.name === uniqueName) {\n                        unique.name =\n                            this.connection.namingStrategy.uniqueConstraintName(changedTable, unique.columnNames);\n                    }\n                });\n                changedTable\n                    .findColumnForeignKeys(changedColumnSet.oldColumn)\n                    .forEach((foreignKey) => {\n                    const foreignKeyName = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    foreignKey.columnNames.push(changedColumnSet.newColumn.name);\n                    // rename FK only if it has default constraint name\n                    if (foreignKey.name === foreignKeyName) {\n                        foreignKey.name =\n                            this.connection.namingStrategy.foreignKeyName(changedTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n                    }\n                });\n                changedTable\n                    .findColumnIndices(changedColumnSet.oldColumn)\n                    .forEach((index) => {\n                    const indexName = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n                    index.columnNames.splice(index.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                    index.columnNames.push(changedColumnSet.newColumn.name);\n                    // rename Index only if it has default constraint name\n                    if (index.name === indexName) {\n                        index.name =\n                            this.connection.namingStrategy.indexName(changedTable, index.columnNames, index.where);\n                    }\n                });\n            }\n            const originalColumn = changedTable.columns.find((column) => column.name === changedColumnSet.oldColumn.name);\n            if (originalColumn)\n                changedTable.columns[changedTable.columns.indexOf(originalColumn)] = changedColumnSet.newColumn;\n        });\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName, columnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n        await this.dropColumns(table, [column]);\n    }\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName, columns) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and remove column and its constraints from cloned table\n        const changedTable = table.clone();\n        columns.forEach((column) => {\n            const columnInstance = InstanceChecker.isTableColumn(column)\n                ? column\n                : table.findColumnByName(column);\n            if (!columnInstance)\n                throw new Error(`Column \"${column}\" was not found in table \"${table.name}\"`);\n            changedTable.removeColumn(columnInstance);\n            changedTable\n                .findColumnUniques(columnInstance)\n                .forEach((unique) => changedTable.removeUniqueConstraint(unique));\n            changedTable\n                .findColumnIndices(columnInstance)\n                .forEach((index) => changedTable.removeIndex(index));\n            changedTable\n                .findColumnForeignKeys(columnInstance)\n                .forEach((fk) => changedTable.removeForeignKey(fk));\n        });\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName, columnNames) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and mark columns as primary\n        const changedTable = table.clone();\n        changedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true;\n        });\n        await this.recreateTable(changedTable, table);\n        // mark columns as primary in original table\n        table.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true;\n        });\n    }\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName, columns) {\n        await Promise.resolve();\n    }\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and mark primary columns as non-primary\n        const changedTable = table.clone();\n        changedTable.primaryColumns.forEach((column) => {\n            column.isPrimary = false;\n        });\n        await this.recreateTable(changedTable, table);\n        // mark primary columns as non-primary in original table\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false;\n        });\n    }\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName, uniqueConstraint) {\n        await this.createUniqueConstraints(tableOrName, [uniqueConstraint]);\n    }\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName, uniqueConstraints) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and add unique constraints in to cloned table\n        const changedTable = table.clone();\n        uniqueConstraints.forEach((uniqueConstraint) => changedTable.addUniqueConstraint(uniqueConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName, uniqueOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new TypeORMError(`Supplied unique constraint was not found in table ${table.name}`);\n        await this.dropUniqueConstraints(table, [uniqueConstraint]);\n    }\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName, uniqueConstraints) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and remove unique constraints from cloned table\n        const changedTable = table.clone();\n        uniqueConstraints.forEach((uniqueConstraint) => changedTable.removeUniqueConstraint(uniqueConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName, checkConstraint) {\n        await this.createCheckConstraints(tableOrName, [checkConstraint]);\n    }\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName, checkConstraints) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and add check constraints in to cloned table\n        const changedTable = table.clone();\n        checkConstraints.forEach((checkConstraint) => changedTable.addCheckConstraint(checkConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName, checkOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new TypeORMError(`Supplied check constraint was not found in table ${table.name}`);\n        await this.dropCheckConstraints(table, [checkConstraint]);\n    }\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName, checkConstraints) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and remove check constraints from cloned table\n        const changedTable = table.clone();\n        checkConstraints.forEach((checkConstraint) => changedTable.removeCheckConstraint(checkConstraint));\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName, exclusionConstraint) {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`);\n    }\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName, exclusionOrName) {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`);\n    }\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName, foreignKey) {\n        await this.createForeignKeys(tableOrName, [foreignKey]);\n    }\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName, foreignKeys) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and add foreign keys in to cloned table\n        const changedTable = table.clone();\n        foreignKeys.forEach((foreignKey) => changedTable.addForeignKey(foreignKey));\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName, foreignKeyOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\n        await this.dropForeignKeys(tableOrName, [foreignKey]);\n    }\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName, foreignKeys) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // clone original table and remove foreign keys from cloned table\n        const changedTable = table.clone();\n        foreignKeys.forEach((foreignKey) => changedTable.removeForeignKey(foreignKey));\n        await this.recreateTable(changedTable, table);\n    }\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName, index) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName, indices) {\n        const promises = indices.map((index) => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName, indexOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName);\n        if (!index)\n            throw new TypeORMError(`Supplied index ${indexOrName} was not found in table ${table.name}`);\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.dropIndexSql(index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName, indices) {\n        const promises = indices.map((index) => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName) {\n        await this.query(`DELETE FROM ${this.escapePath(tableName)}`);\n    }\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database) {\n        let dbPath = undefined;\n        if (database &&\n            this.driver.getAttachedDatabaseHandleByRelativePath(database)) {\n            dbPath =\n                this.driver.getAttachedDatabaseHandleByRelativePath(database);\n        }\n        await this.query(`PRAGMA foreign_keys = OFF`);\n        const isAnotherTransactionActive = this.isTransactionActive;\n        if (!isAnotherTransactionActive)\n            await this.startTransaction();\n        try {\n            const selectViewDropsQuery = dbPath\n                ? `SELECT 'DROP VIEW \"${dbPath}\".\"' || name || '\";' as query FROM \"${dbPath}\".\"sqlite_master\" WHERE \"type\" = 'view'`\n                : `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`;\n            const dropViewQueries = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map((q) => this.query(q[\"query\"])));\n            const selectTableDropsQuery = dbPath\n                ? `SELECT 'DROP TABLE \"${dbPath}\".\"' || name || '\";' as query FROM \"${dbPath}\".\"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`\n                : `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`;\n            const dropTableQueries = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map((q) => this.query(q[\"query\"])));\n            if (!isAnotherTransactionActive)\n                await this.commitTransaction();\n        }\n        catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction();\n            }\n            catch (rollbackError) { }\n            throw error;\n        }\n        finally {\n            await this.query(`PRAGMA foreign_keys = ON`);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    async loadViews(viewNames) {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable) {\n            return [];\n        }\n        if (!viewNames) {\n            viewNames = [];\n        }\n        const viewNamesString = viewNames\n            .map((name) => \"'\" + name + \"'\")\n            .join(\", \");\n        let query = `SELECT \"t\".* FROM \"${this.getTypeormMetadataTableName()}\" \"t\" INNER JOIN \"sqlite_master\" s ON \"s\".\"name\" = \"t\".\"name\" AND \"s\".\"type\" = 'view' WHERE \"t\".\"type\" = '${MetadataTableType.VIEW}'`;\n        if (viewNamesString.length > 0)\n            query += ` AND \"t\".\"name\" IN (${viewNamesString})`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView) => {\n            const view = new View();\n            view.name = dbView[\"name\"];\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n    async loadTableRecords(tablePath, tableOrIndex) {\n        let database = undefined;\n        const [schema, tableName] = this.splitTablePath(tablePath);\n        if (schema &&\n            this.driver.getAttachedDatabasePathRelativeByHandle(schema)) {\n            database =\n                this.driver.getAttachedDatabasePathRelativeByHandle(schema);\n        }\n        return this.query(`SELECT ${database ? `'${database}'` : null} as database, ${schema ? `'${schema}'` : null} as schema, * FROM ${schema ? `\"${schema}\".` : \"\"}${this.escapePath(`sqlite_master`)} WHERE \"type\" = '${tableOrIndex}' AND \"${tableOrIndex === \"table\" ? \"name\" : \"tbl_name\"}\" IN ('${tableName}')`);\n    }\n    async loadPragmaRecords(tablePath, pragma) {\n        const [, tableName] = this.splitTablePath(tablePath);\n        return this.query(`PRAGMA ${pragma}(\"${tableName}\")`);\n    }\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    async loadTables(tableNames) {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return [];\n        }\n        let dbTables = [];\n        let dbIndicesDef;\n        if (!tableNames) {\n            const tablesSql = `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table'`;\n            dbTables.push(...(await this.query(tablesSql)));\n            const tableNamesString = dbTables\n                .map(({ name }) => `'${name}'`)\n                .join(\", \");\n            dbIndicesDef = await this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (${tableNamesString})`);\n        }\n        else {\n            const tableNamesWithoutDot = tableNames\n                .filter((tableName) => {\n                return tableName.split(\".\").length === 1;\n            })\n                .map((tableName) => `'${tableName}'`);\n            const tableNamesWithDot = tableNames.filter((tableName) => {\n                return tableName.split(\".\").length > 1;\n            });\n            const queryPromises = (type) => {\n                const promises = [\n                    ...tableNamesWithDot.map((tableName) => this.loadTableRecords(tableName, type)),\n                ];\n                if (tableNamesWithoutDot.length) {\n                    promises.push(this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = '${type}' AND \"${type === \"table\" ? \"name\" : \"tbl_name\"}\" IN (${tableNamesWithoutDot})`));\n                }\n                return promises;\n            };\n            dbTables = (await Promise.all(queryPromises(\"table\")))\n                .reduce((acc, res) => [...acc, ...res], [])\n                .filter(Boolean);\n            dbIndicesDef = (await Promise.all(queryPromises(\"index\")))\n                .reduce((acc, res) => [...acc, ...res], [])\n                .filter(Boolean);\n        }\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return [];\n        }\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async (dbTable) => {\n            const tablePath = dbTable[\"database\"] &&\n                this.driver.getAttachedDatabaseHandleByRelativePath(dbTable[\"database\"])\n                ? `${this.driver.getAttachedDatabaseHandleByRelativePath(dbTable[\"database\"])}.${dbTable[\"name\"]}`\n                : dbTable[\"name\"];\n            const sql = dbTable[\"sql\"];\n            const withoutRowid = sql.includes(\"WITHOUT ROWID\");\n            const table = new Table({ name: tablePath, withoutRowid });\n            // load columns and indices\n            const [dbColumns, dbIndices, dbForeignKeys] = await Promise.all([\n                this.loadPragmaRecords(tablePath, `table_xinfo`),\n                this.loadPragmaRecords(tablePath, `index_list`),\n                this.loadPragmaRecords(tablePath, `foreign_key_list`),\n            ]);\n            // find column name with auto increment\n            let autoIncrementColumnName = undefined;\n            const tableSql = dbTable[\"sql\"];\n            let autoIncrementIndex = tableSql\n                .toUpperCase()\n                .indexOf(\"AUTOINCREMENT\");\n            if (autoIncrementIndex !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, autoIncrementIndex);\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName =\n                        autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName =\n                        autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf('\"'));\n                    autoIncrementColumnName =\n                        autoIncrementColumnName.substr(autoIncrementColumnName.indexOf('\"') + 1);\n                }\n                else if (bracket !== -1) {\n                    autoIncrementColumnName =\n                        autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName =\n                        autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf('\"'));\n                    autoIncrementColumnName =\n                        autoIncrementColumnName.substr(autoIncrementColumnName.indexOf('\"') + 1);\n                }\n            }\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns.map(async (dbColumn) => {\n                const tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"name\"];\n                tableColumn.type = dbColumn[\"type\"].toLowerCase();\n                tableColumn.default =\n                    dbColumn[\"dflt_value\"] !== null &&\n                        dbColumn[\"dflt_value\"] !== undefined\n                        ? dbColumn[\"dflt_value\"]\n                        : undefined;\n                tableColumn.isNullable = dbColumn[\"notnull\"] === 0;\n                // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0\n                tableColumn.isPrimary = dbColumn[\"pk\"] > 0;\n                tableColumn.comment = \"\"; // SQLite does not support column comments\n                tableColumn.isGenerated =\n                    autoIncrementColumnName === dbColumn[\"name\"];\n                if (tableColumn.isGenerated) {\n                    tableColumn.generationStrategy = \"increment\";\n                }\n                if (dbColumn[\"hidden\"] === 2 ||\n                    dbColumn[\"hidden\"] === 3) {\n                    tableColumn.generatedType =\n                        dbColumn[\"hidden\"] === 2 ? \"VIRTUAL\" : \"STORED\";\n                    const asExpressionQuery = this.selectTypeormMetadataSql({\n                        table: table.name,\n                        type: MetadataTableType.GENERATED_COLUMN,\n                        name: tableColumn.name,\n                    });\n                    const results = await this.query(asExpressionQuery.query, asExpressionQuery.parameters);\n                    if (results[0] && results[0].value) {\n                        tableColumn.asExpression = results[0].value;\n                    }\n                    else {\n                        tableColumn.asExpression = \"\";\n                    }\n                }\n                if (tableColumn.type === \"varchar\") {\n                    tableColumn.enum = OrmUtils.parseSqlCheckExpression(sql, tableColumn.name);\n                }\n                // parse datatype and attempt to retrieve length, precision and scale\n                let pos = tableColumn.type.indexOf(\"(\");\n                if (pos !== -1) {\n                    const fullType = tableColumn.type;\n                    let dataType = fullType.substr(0, pos);\n                    if (this.driver.withLengthColumnTypes.find((col) => col === dataType)) {\n                        let len = parseInt(fullType.substring(pos + 1, fullType.length - 1));\n                        if (len) {\n                            tableColumn.length = len.toString();\n                            tableColumn.type = dataType; // remove the length part from the datatype\n                        }\n                    }\n                    if (this.driver.withPrecisionColumnTypes.find((col) => col === dataType)) {\n                        const re = new RegExp(`^${dataType}\\\\((\\\\d+),?\\\\s?(\\\\d+)?\\\\)`);\n                        const matches = fullType.match(re);\n                        if (matches && matches[1]) {\n                            tableColumn.precision = +matches[1];\n                        }\n                        if (this.driver.withScaleColumnTypes.find((col) => col === dataType)) {\n                            if (matches && matches[2]) {\n                                tableColumn.scale = +matches[2];\n                            }\n                        }\n                        tableColumn.type = dataType; // remove the precision/scale part from the datatype\n                    }\n                }\n                return tableColumn;\n            }));\n            // find foreign key constraints from CREATE TABLE sql\n            let fkResult;\n            const fkMappings = [];\n            const fkRegex = /CONSTRAINT \"([^\"]*)\" FOREIGN KEY ?\\((.*?)\\) REFERENCES \"([^\"]*)\"/g;\n            while ((fkResult = fkRegex.exec(sql)) !== null) {\n                fkMappings.push({\n                    name: fkResult[1],\n                    columns: fkResult[2]\n                        .substr(1, fkResult[2].length - 2)\n                        .split(`\", \"`),\n                    referencedTableName: fkResult[3],\n                });\n            }\n            // build foreign keys\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys, (dbForeignKey) => dbForeignKey[\"id\"]);\n            table.foreignKeys = tableForeignKeyConstraints.map((foreignKey) => {\n                const ownForeignKeys = dbForeignKeys.filter((dbForeignKey) => dbForeignKey[\"id\"] === foreignKey[\"id\"] &&\n                    dbForeignKey[\"table\"] === foreignKey[\"table\"]);\n                const columnNames = ownForeignKeys.map((dbForeignKey) => dbForeignKey[\"from\"]);\n                const referencedColumnNames = ownForeignKeys.map((dbForeignKey) => dbForeignKey[\"to\"]);\n                // find related foreign key mapping\n                const fkMapping = fkMappings.find((it) => it.referencedTableName ===\n                    foreignKey[\"table\"] &&\n                    it.columns.every((column) => columnNames.indexOf(column) !== -1));\n                return new TableForeignKey({\n                    name: fkMapping?.name,\n                    columnNames: columnNames,\n                    referencedTableName: foreignKey[\"table\"],\n                    referencedColumnNames: referencedColumnNames,\n                    onDelete: foreignKey[\"on_delete\"],\n                    onUpdate: foreignKey[\"on_update\"],\n                });\n            });\n            // find unique constraints from CREATE TABLE sql\n            let uniqueRegexResult;\n            const uniqueMappings = [];\n            const uniqueRegex = /CONSTRAINT \"([^\"]*)\" UNIQUE ?\\((.*?)\\)/g;\n            while ((uniqueRegexResult = uniqueRegex.exec(sql)) !== null) {\n                uniqueMappings.push({\n                    name: uniqueRegexResult[1],\n                    columns: uniqueRegexResult[2]\n                        .substr(1, uniqueRegexResult[2].length - 2)\n                        .split(`\", \"`),\n                });\n            }\n            // build unique constraints\n            const tableUniquePromises = dbIndices\n                .filter((dbIndex) => dbIndex[\"origin\"] === \"u\")\n                .map((dbIndex) => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index)\n                .map(async (dbIndexName) => {\n                const dbIndex = dbIndices.find((dbIndex) => dbIndex[\"name\"] === dbIndexName);\n                const indexInfos = await this.query(`PRAGMA index_info(\"${dbIndex[\"name\"]}\")`);\n                const indexColumns = indexInfos\n                    .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) -\n                    parseInt(indexInfo2[\"seqno\"]))\n                    .map((indexInfo) => indexInfo[\"name\"]);\n                if (indexColumns.length === 1) {\n                    const column = table.columns.find((column) => {\n                        return !!indexColumns.find((indexColumn) => indexColumn === column.name);\n                    });\n                    if (column)\n                        column.isUnique = true;\n                }\n                // find existent mapping by a column names\n                const foundMapping = uniqueMappings.find((mapping) => {\n                    return mapping.columns.every((column) => indexColumns.indexOf(column) !== -1);\n                });\n                return new TableUnique({\n                    name: foundMapping\n                        ? foundMapping.name\n                        : this.connection.namingStrategy.uniqueConstraintName(table, indexColumns),\n                    columnNames: indexColumns,\n                });\n            });\n            table.uniques = (await Promise.all(tableUniquePromises));\n            // build checks\n            let result;\n            const regexp = /CONSTRAINT \"([^\"]*)\" CHECK ?(\\(.*?\\))([,]|[)]$)/g;\n            while ((result = regexp.exec(sql)) !== null) {\n                table.checks.push(new TableCheck({\n                    name: result[1],\n                    expression: result[2],\n                }));\n            }\n            // build indices\n            const indicesPromises = dbIndices\n                .filter((dbIndex) => dbIndex[\"origin\"] === \"c\")\n                .map((dbIndex) => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async (dbIndexName) => {\n                const indexDef = dbIndicesDef.find((dbIndexDef) => dbIndexDef[\"name\"] === dbIndexName);\n                const condition = /WHERE (.*)/.exec(indexDef[\"sql\"]);\n                const dbIndex = dbIndices.find((dbIndex) => dbIndex[\"name\"] === dbIndexName);\n                const indexInfos = await this.query(`PRAGMA index_info(\"${dbIndex[\"name\"]}\")`);\n                const indexColumns = indexInfos\n                    .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) -\n                    parseInt(indexInfo2[\"seqno\"]))\n                    .map((indexInfo) => indexInfo[\"name\"]);\n                const dbIndexPath = `${dbTable[\"database\"] ? `${dbTable[\"database\"]}.` : \"\"}${dbIndex[\"name\"]}`;\n                const isUnique = dbIndex[\"unique\"] === \"1\" ||\n                    dbIndex[\"unique\"] === 1;\n                return new TableIndex({\n                    table: table,\n                    name: dbIndexPath,\n                    columnNames: indexColumns,\n                    isUnique: isUnique,\n                    where: condition ? condition[1] : undefined,\n                });\n            });\n            const indices = await Promise.all(indicesPromises);\n            table.indices = indices.filter((index) => !!index);\n            return table;\n        }));\n    }\n    /**\n     * Builds create table sql.\n     */\n    createTableSql(table, createForeignKeys, temporaryTable) {\n        const primaryColumns = table.columns.filter((column) => column.isPrimary);\n        const hasAutoIncrement = primaryColumns.find((column) => column.isGenerated && column.generationStrategy === \"increment\");\n        const skipPrimary = primaryColumns.length > 1;\n        if (skipPrimary && hasAutoIncrement)\n            throw new TypeORMError(`Sqlite does not support AUTOINCREMENT on composite primary key`);\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column, skipPrimary))\n            .join(\", \");\n        const [database] = this.splitTablePath(table.name);\n        let sql = `CREATE TABLE ${this.escapePath(table.name)} (${columnDefinitions}`;\n        let [databaseNew, tableName] = this.splitTablePath(table.name);\n        const newTableName = temporaryTable\n            ? `${databaseNew ? `${databaseNew}.` : \"\"}${tableName.replace(/^temporary_/, \"\")}`\n            : table.name;\n        // need for `addColumn()` method, because it recreates table.\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n            const isUniqueExist = table.uniques.some((unique) => unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name);\n            if (!isUniqueExist)\n                table.uniques.push(new TableUnique({\n                    name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n                    columnNames: [column.name],\n                }));\n        });\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                const uniqueName = unique.name\n                    ? unique.name\n                    : this.connection.namingStrategy.uniqueConstraintName(newTableName, unique.columnNames);\n                const columnNames = unique.columnNames\n                    .map((columnName) => `\"${columnName}\"`)\n                    .join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            })\n                .join(\", \");\n            sql += `, ${uniquesSql}`;\n        }\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                const checkName = check.name\n                    ? check.name\n                    : this.connection.namingStrategy.checkConstraintName(newTableName, check.expression);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            })\n                .join(\", \");\n            sql += `, ${checksSql}`;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .filter((fk) => {\n                const [referencedDatabase] = this.splitTablePath(fk.referencedTableName);\n                if (referencedDatabase !== database) {\n                    return false;\n                }\n                return true;\n            })\n                .map((fk) => {\n                const [, referencedTable] = this.splitTablePath(fk.referencedTableName);\n                const columnNames = fk.columnNames\n                    .map((columnName) => `\"${columnName}\"`)\n                    .join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(newTableName, fk.columnNames, this.getTablePath(fk), fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames\n                    .map((columnName) => `\"${columnName}\"`)\n                    .join(\", \");\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${referencedTable}\" (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n                if (fk.deferrable)\n                    constraint += ` DEFERRABLE ${fk.deferrable}`;\n                return constraint;\n            })\n                .join(\", \");\n            sql += `, ${foreignKeysSql}`;\n        }\n        if (primaryColumns.length > 1) {\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \");\n            sql += `, PRIMARY KEY (${columnNames})`;\n        }\n        sql += `)`;\n        if (table.withoutRowid) {\n            sql += \" WITHOUT ROWID\";\n        }\n        return new Query(sql);\n    }\n    /**\n     * Builds drop table sql.\n     */\n    dropTableSql(tableOrName, ifExist) {\n        const tableName = InstanceChecker.isTable(tableOrName)\n            ? tableOrName.name\n            : tableOrName;\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableName)}`\n            : `DROP TABLE ${this.escapePath(tableName)}`;\n        return new Query(query);\n    }\n    createViewSql(view) {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression}`);\n        }\n        else {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view\n                .expression(this.connection)\n                .getQuery()}`);\n        }\n    }\n    insertViewDefinitionSql(view) {\n        const expression = typeof view.expression === \"string\"\n            ? view.expression.trim()\n            : view.expression(this.connection).getQuery();\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            name: view.name,\n            value: expression,\n        });\n    }\n    /**\n     * Builds drop view sql.\n     */\n    dropViewSql(viewOrPath) {\n        const viewName = InstanceChecker.isView(viewOrPath)\n            ? viewOrPath.name\n            : viewOrPath;\n        return new Query(`DROP VIEW \"${viewName}\"`);\n    }\n    /**\n     * Builds remove view sql.\n     */\n    deleteViewDefinitionSql(viewOrPath) {\n        const viewName = InstanceChecker.isView(viewOrPath)\n            ? viewOrPath.name\n            : viewOrPath;\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            name: viewName,\n        });\n    }\n    /**\n     * Builds create index sql.\n     */\n    createIndexSql(table, index) {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        const [database, tableName] = this.splitTablePath(table.name);\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX ${database ? `\"${database}\".` : \"\"}${this.escapePath(index.name)} ON \"${tableName}\" (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n    /**\n     * Builds drop index sql.\n     */\n    dropIndexSql(indexOrName) {\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName;\n        return new Query(`DROP INDEX ${this.escapePath(indexName)}`);\n    }\n    /**\n     * Builds a query for create column.\n     */\n    buildCreateColumnSql(column, skipPrimary) {\n        let c = '\"' + column.name + '\"';\n        if (InstanceChecker.isColumnMetadata(column)) {\n            c += \" \" + this.driver.normalizeType(column);\n        }\n        else {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n        if (column.enum)\n            c +=\n                ' CHECK( \"' +\n                    column.name +\n                    '\" IN (' +\n                    column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\n                    \") )\";\n        if (column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated === true &&\n            column.generationStrategy === \"increment\")\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTOINCREMENT\";\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.asExpression) {\n            c += ` AS (${column.asExpression}) ${column.generatedType ? column.generatedType : \"VIRTUAL\"}`;\n        }\n        else {\n            if (column.default !== undefined && column.default !== null)\n                c += \" DEFAULT (\" + column.default + \")\";\n        }\n        return c;\n    }\n    async recreateTable(newTable, oldTable, migrateData = true) {\n        const upQueries = [];\n        const downQueries = [];\n        // drop old table indices\n        oldTable.indices.forEach((index) => {\n            upQueries.push(this.dropIndexSql(index));\n            downQueries.push(this.createIndexSql(oldTable, index));\n        });\n        // change table name into 'temporary_table'\n        let [databaseNew, tableNameNew] = this.splitTablePath(newTable.name);\n        let [, tableNameOld] = this.splitTablePath(oldTable.name);\n        newTable.name = tableNameNew = `${databaseNew ? `${databaseNew}.` : \"\"}temporary_${tableNameNew}`;\n        // create new table\n        upQueries.push(this.createTableSql(newTable, true, true));\n        downQueries.push(this.dropTableSql(newTable));\n        // migrate all data from the old table into new table\n        if (migrateData) {\n            let newColumnNames = newTable.columns\n                .filter((column) => !column.generatedType)\n                .map((column) => `\"${column.name}\"`);\n            let oldColumnNames = oldTable.columns\n                .filter((column) => !column.generatedType)\n                .map((column) => `\"${column.name}\"`);\n            if (oldColumnNames.length < newColumnNames.length) {\n                newColumnNames = newTable.columns\n                    .filter((column) => {\n                    const oldColumn = oldTable.columns.find((c) => c.name === column.name);\n                    if (oldColumn && oldColumn.generatedType)\n                        return false;\n                    return !column.generatedType && oldColumn;\n                })\n                    .map((column) => `\"${column.name}\"`);\n            }\n            else if (oldColumnNames.length > newColumnNames.length) {\n                oldColumnNames = oldTable.columns\n                    .filter((column) => {\n                    return (!column.generatedType &&\n                        newTable.columns.find((c) => c.name === column.name));\n                })\n                    .map((column) => `\"${column.name}\"`);\n            }\n            upQueries.push(new Query(`INSERT INTO ${this.escapePath(newTable.name)}(${newColumnNames.join(\", \")}) SELECT ${oldColumnNames.join(\", \")} FROM ${this.escapePath(oldTable.name)}`));\n            downQueries.push(new Query(`INSERT INTO ${this.escapePath(oldTable.name)}(${oldColumnNames.join(\", \")}) SELECT ${newColumnNames.join(\", \")} FROM ${this.escapePath(newTable.name)}`));\n        }\n        // drop old table\n        upQueries.push(this.dropTableSql(oldTable));\n        downQueries.push(this.createTableSql(oldTable, true));\n        // rename old table\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable.name)} RENAME TO ${this.escapePath(tableNameOld)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(oldTable.name)} RENAME TO ${this.escapePath(tableNameNew)}`));\n        newTable.name = oldTable.name;\n        // recreate table indices\n        newTable.indices.forEach((index) => {\n            // new index may be passed without name. In this case we generate index name manually.\n            if (!index.name)\n                index.name = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n            upQueries.push(this.createIndexSql(newTable, index));\n            downQueries.push(this.dropIndexSql(index));\n        });\n        // update generated columns in \"typeorm_metadata\" table\n        // Step 1: clear data for removed generated columns\n        oldTable.columns\n            .filter((column) => {\n            const newTableColumn = newTable.columns.find((c) => c.name === column.name);\n            // we should delete record from \"typeorm_metadata\" if generated column was removed\n            // or it was changed to non-generated\n            return (column.generatedType &&\n                column.asExpression &&\n                (!newTableColumn ||\n                    (!newTableColumn.generatedType &&\n                        !newTableColumn.asExpression)));\n        })\n            .forEach((column) => {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: oldTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: oldTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            upQueries.push(deleteQuery);\n            downQueries.push(insertQuery);\n        });\n        // Step 2: add data for new generated columns\n        newTable.columns\n            .filter((column) => column.generatedType &&\n            column.asExpression &&\n            !oldTable.columns.some((c) => c.name === column.name))\n            .forEach((column) => {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: newTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: newTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            upQueries.push(insertQuery);\n            downQueries.push(deleteQuery);\n        });\n        // Step 3: update changed expressions\n        newTable.columns\n            .filter((column) => column.generatedType && column.asExpression)\n            .forEach((column) => {\n            const oldColumn = oldTable.columns.find((c) => c.name === column.name &&\n                c.generatedType &&\n                column.generatedType &&\n                c.asExpression !== column.asExpression);\n            if (!oldColumn)\n                return;\n            // update expression\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: oldTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: oldColumn.name,\n            });\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: newTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            upQueries.push(deleteQuery);\n            upQueries.push(insertQuery);\n            // revert update\n            const revertInsertQuery = this.insertTypeormMetadataSql({\n                table: newTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: oldColumn.name,\n                value: oldColumn.asExpression,\n            });\n            const revertDeleteQuery = this.deleteTypeormMetadataSql({\n                table: oldTable.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            downQueries.push(revertInsertQuery);\n            downQueries.push(revertDeleteQuery);\n        });\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(oldTable, newTable);\n    }\n    /**\n     * tablePath e.g. \"myDB.myTable\", \"myTable\"\n     */\n    splitTablePath(tablePath) {\n        return (tablePath.indexOf(\".\") !== -1\n            ? tablePath.split(\".\")\n            : [undefined, tablePath]);\n    }\n    /**\n     * Escapes given table or view path. Tolerates leading/trailing dots\n     */\n    escapePath(target, disableEscape) {\n        const tableName = InstanceChecker.isTable(target) || InstanceChecker.isView(target)\n            ? target.name\n            : target;\n        return tableName\n            .replace(/^\\.+|\\.+$/g, \"\")\n            .split(\".\")\n            .map((i) => (disableEscape ? i : `\"${i}\"`))\n            .join(\".\");\n    }\n    /**\n     * Change table comment.\n     */\n    changeTableComment(tableOrName, comment) {\n        throw new TypeORMError(`sqlit driver does not support change comment.`);\n    }\n}\n\n//# sourceMappingURL=AbstractSqliteQueryRunner.js.map\n","import { BroadcasterResult } from \"./BroadcasterResult\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\n */\nexport class Broadcaster {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    async broadcast(event, ...args) {\n        const result = new BroadcasterResult();\n        const broadcastFunction = this[`broadcast${event}Event`];\n        if (typeof broadcastFunction === \"function\") {\n            ;\n            broadcastFunction.call(this, result, ...args);\n        }\n        await result.wait();\n    }\n    /**\n     * Broadcasts \"BEFORE_INSERT\" event.\n     * Before insert event is executed before entity is being inserted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeInsertEvent(result, metadata, entity) {\n        if (entity && metadata.beforeInsertListeners.length) {\n            metadata.beforeInsertListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeInsert) {\n                    const executionResult = subscriber.beforeInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_UPDATE\" event.\n     * Before update event is executed before entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeUpdateEvent(result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {\n        // todo: send relations too?\n        if (entity && metadata.beforeUpdateListeners.length) {\n            metadata.beforeUpdateListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeUpdate) {\n                    const executionResult = subscriber.beforeUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || [],\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_REMOVE\" event.\n     * Before remove event is executed before entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeRemoveEvent(result, metadata, entity, databaseEntity, identifier) {\n        if (entity && metadata.beforeRemoveListeners.length) {\n            metadata.beforeRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeRemove) {\n                    const executionResult = subscriber.beforeRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity ?? identifier),\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_SOFT_REMOVE\" event.\n     * Before soft remove event is executed before entity is being soft removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeSoftRemoveEvent(result, metadata, entity, databaseEntity, identifier) {\n        if (entity && metadata.beforeSoftRemoveListeners.length) {\n            metadata.beforeSoftRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeSoftRemove) {\n                    const executionResult = subscriber.beforeSoftRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity ?? identifier),\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_RECOVER\" event.\n     * Before recover event is executed before entity is being recovered in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeRecoverEvent(result, metadata, entity, databaseEntity, identifier) {\n        if (entity && metadata.beforeRecoverListeners.length) {\n            metadata.beforeRecoverListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeRecover) {\n                    const executionResult = subscriber.beforeRecover({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity ?? identifier),\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_INSERT\" event.\n     * After insert event is executed after entity is being persisted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterInsertEvent(result, metadata, entity, identifier) {\n        if (entity && metadata.afterInsertListeners.length) {\n            metadata.afterInsertListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterInsert) {\n                    const executionResult = subscriber.afterInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        entityId: metadata.getEntityIdMixedMap(identifier),\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_QUERY\" event.\n     */\n    broadcastBeforeQueryEvent(result, query, parameters) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeQuery) {\n                    const executionResult = subscriber.beforeQuery({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        query: query,\n                        parameters: parameters,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_QUERY\" event.\n     */\n    broadcastAfterQueryEvent(result, query, parameters, success, executionTime, rawResults, error) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterQuery) {\n                    const executionResult = subscriber.afterQuery({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        query: query,\n                        parameters: parameters,\n                        success: success,\n                        executionTime: executionTime,\n                        rawResults: rawResults,\n                        error: error,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_START\" event.\n     */\n    broadcastBeforeTransactionStartEvent(result) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeTransactionStart) {\n                    const executionResult = subscriber.beforeTransactionStart({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_START\" event.\n     */\n    broadcastAfterTransactionStartEvent(result) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterTransactionStart) {\n                    const executionResult = subscriber.afterTransactionStart({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_COMMIT\" event.\n     */\n    broadcastBeforeTransactionCommitEvent(result) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeTransactionCommit) {\n                    const executionResult = subscriber.beforeTransactionCommit({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_COMMIT\" event.\n     */\n    broadcastAfterTransactionCommitEvent(result) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterTransactionCommit) {\n                    const executionResult = subscriber.afterTransactionCommit({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_ROLLBACK\" event.\n     */\n    broadcastBeforeTransactionRollbackEvent(result) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeTransactionRollback) {\n                    const executionResult = subscriber.beforeTransactionRollback({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_ROLLBACK\" event.\n     */\n    broadcastAfterTransactionRollbackEvent(result) {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterTransactionRollback) {\n                    const executionResult = subscriber.afterTransactionRollback({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_UPDATE\" event.\n     * After update event is executed after entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterUpdateEvent(result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {\n        if (entity && metadata.afterUpdateListeners.length) {\n            metadata.afterUpdateListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterUpdate) {\n                    const executionResult = subscriber.afterUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || [],\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_REMOVE\" event.\n     * After remove event is executed after entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterRemoveEvent(result, metadata, entity, databaseEntity, identifier) {\n        if (entity && metadata.afterRemoveListeners.length) {\n            metadata.afterRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterRemove) {\n                    const executionResult = subscriber.afterRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity ?? identifier),\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_SOFT_REMOVE\" event.\n     * After soft remove event is executed after entity is being soft removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterSoftRemoveEvent(result, metadata, entity, databaseEntity, identifier) {\n        if (entity && metadata.afterSoftRemoveListeners.length) {\n            metadata.afterSoftRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterSoftRemove) {\n                    const executionResult = subscriber.afterSoftRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity ?? identifier),\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * Broadcasts \"AFTER_RECOVER\" event.\n     * After recover event is executed after entity is being recovered in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterRecoverEvent(result, metadata, entity, databaseEntity, identifier) {\n        if (entity && metadata.afterRecoverListeners.length) {\n            metadata.afterRecoverListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterRecover) {\n                    const executionResult = subscriber.afterRecover({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity ?? identifier),\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    }\n    /**\n     * @deprecated Use `broadcastLoadForAllEvent`\n     */\n    broadcastLoadEventsForAll(result, metadata, entities) {\n        return this.broadcastLoadEvent(result, metadata, entities);\n    }\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastLoadEvent(result, metadata, entities) {\n        // Calculate which subscribers are fitting for the given entity type\n        const fittingSubscribers = this.queryRunner.connection.subscribers.filter((subscriber) => this.isAllowedSubscriber(subscriber, metadata.target) &&\n            subscriber.afterLoad);\n        if (metadata.relations.length ||\n            metadata.afterLoadListeners.length ||\n            fittingSubscribers.length) {\n            // todo: check why need this?\n            const nonPromiseEntities = entities.filter((entity) => !(entity instanceof Promise));\n            // collect load events for all children entities that were loaded with the main entity\n            if (metadata.relations.length) {\n                metadata.relations.forEach((relation) => {\n                    nonPromiseEntities.forEach((entity) => {\n                        // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query\n                        if (relation.isLazy &&\n                            !entity.hasOwnProperty(relation.propertyName))\n                            return;\n                        const value = relation.getEntityValue(entity);\n                        if (ObjectUtils.isObject(value))\n                            this.broadcastLoadEvent(result, relation.inverseEntityMetadata, Array.isArray(value) ? value : [value]);\n                    });\n                });\n            }\n            if (metadata.afterLoadListeners.length) {\n                metadata.afterLoadListeners.forEach((listener) => {\n                    nonPromiseEntities.forEach((entity) => {\n                        if (listener.isAllowed(entity)) {\n                            const executionResult = listener.execute(entity);\n                            if (executionResult instanceof Promise)\n                                result.promises.push(executionResult);\n                            result.count++;\n                        }\n                    });\n                });\n            }\n            fittingSubscribers.forEach((subscriber) => {\n                nonPromiseEntities.forEach((entity) => {\n                    const executionResult = subscriber.afterLoad(entity, {\n                        entity,\n                        metadata,\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                });\n            });\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\n     * or listens our entity.\n     */\n    isAllowedSubscriber(subscriber, target) {\n        return (!subscriber.listenTo ||\n            !subscriber.listenTo() ||\n            subscriber.listenTo() === Object ||\n            subscriber.listenTo() === target ||\n            subscriber.listenTo().isPrototypeOf(target));\n    }\n}\n\n//# sourceMappingURL=Broadcaster.js.map\n","/**\n * Result object returned by UpdateQueryBuilder execution.\n */\nexport class QueryResult {\n    constructor() {\n        /**\n         * Rows\n         */\n        this.records = [];\n    }\n}\n\n//# sourceMappingURL=QueryResult.js.map\n","import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { TypeORMError } from \"../../error\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        const broadcasterResult = new BroadcasterResult();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        this.broadcaster.broadcastBeforeQueryEvent(broadcasterResult, query, parameters);\n        const queryStartTime = +new Date();\n        try {\n            const raw = await new Promise(async (ok, fail) => {\n                databaseConnection.executeSql(query, parameters, (raw) => ok(raw), (err) => fail(err));\n            });\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, true, queryExecutionTime, raw, undefined);\n            if (maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime) {\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            }\n            const result = new QueryResult();\n            if (query.substr(0, 11) === \"INSERT INTO\") {\n                result.raw = raw.insertId;\n            }\n            else {\n                let resultSet = [];\n                for (let i = 0; i < raw.rows.length; i++) {\n                    resultSet.push(raw.rows.item(i));\n                }\n                result.records = resultSet;\n                result.raw = resultSet;\n            }\n            if (useStructuredResult) {\n                return result;\n            }\n            else {\n                return result.raw;\n            }\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, false, undefined, undefined, err);\n            throw new QueryFailedError(query, parameters, err);\n        }\n        finally {\n            await broadcasterResult.wait();\n        }\n    }\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     // todo: implement new syntax\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<InsertResult>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n            const __this = this;\n            const databaseConnection = await this.connect();\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\n                    if (!value) return map;\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n                }, {} as ObjectLiteral);\n\n                ok({\n                    result: undefined,\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n                });\n            }, (err: any) => {\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\n                fail(err);\n            });\n        });\n    }*/\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async startTransaction() {\n        throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    }\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async commitTransaction() {\n        throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    }\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async rollbackTransaction() {\n        throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    }\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`;\n            const dropViewQueries = await this.query(selectViewDropsQuery);\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`;\n            const dropTableQueries = await this.query(selectTableDropsQuery);\n            await Promise.all(dropViewQueries.map((q) => this.query(q[\"query\"])));\n            await Promise.all(dropTableQueries.map((q) => this.query(q[\"query\"])));\n        }\n        finally {\n            await this.query(`PRAGMA foreign_keys = ON`);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral, startIndex = 0) {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}\n\n//# sourceMappingURL=CordovaQueryRunner.js.map\n","import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nexport class CordovaDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        this.transactionSupport = \"none\";\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database;\n        // load sqlite package\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        this.queryRunner = undefined;\n        return new Promise((ok, fail) => {\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new CordovaQueryRunner(this);\n        return this.queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    async createDatabaseConnection() {\n        const options = Object.assign({}, {\n            name: this.options.database,\n            location: this.options.location,\n        }, this.options.extra || {});\n        const connection = await new Promise((resolve, fail) => {\n            this.sqlite.openDatabase(options, (db) => resolve(db), (err) => fail(err));\n        });\n        await new Promise((ok, fail) => {\n            // we need to enable foreign keys in sqlite to make sure all foreign key related features\n            // working properly. this also makes onDelete to work with sqlite.\n            connection.executeSql(`PRAGMA foreign_keys = ON`, [], () => ok(), (err) => fail(err));\n        });\n        return connection;\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        try {\n            const sqlite = this.options.driver || window.sqlitePlugin;\n            this.sqlite = sqlite;\n        }\n        catch (e) {\n            throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n        }\n    }\n}\n\n//# sourceMappingURL=CordovaDriver.js.map\n","import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            const broadcasterResult = new BroadcasterResult();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            this.broadcaster.broadcastBeforeQueryEvent(broadcasterResult, query, parameters);\n            const queryStartTime = +new Date();\n            databaseConnection.executeSql(query, parameters, async (raw) => {\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, true, queryExecutionTime, raw, undefined);\n                if (maxQueryExecutionTime &&\n                    queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                if (broadcasterResult.promises.length > 0)\n                    await Promise.all(broadcasterResult.promises);\n                const result = new QueryResult();\n                if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                    result.affected = raw.rowsAffected;\n                }\n                if (raw?.hasOwnProperty(\"rows\")) {\n                    let records = [];\n                    for (let i = 0; i < raw.rows.length; i++) {\n                        records.push(raw.rows.item(i));\n                    }\n                    result.raw = records;\n                    result.records = records;\n                }\n                // return id of inserted row, if query was insert statement.\n                if (query.substr(0, 11) === \"INSERT INTO\") {\n                    result.raw = raw.insertId;\n                }\n                if (useStructuredResult) {\n                    ok(result);\n                }\n                else {\n                    ok(result.raw);\n                }\n            }, async (err) => {\n                this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, false, undefined, undefined, err);\n                await broadcasterResult.wait();\n                fail(new QueryFailedError(query, parameters, err));\n            });\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral, startIndex = 0) {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}\n\n//# sourceMappingURL=ReactNativeQueryRunner.js.map\n","import { DateUtils } from \"../../util/DateUtils\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DriverPackageNotInstalledError } from \"../../error\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\nimport { ReactNativeQueryRunner } from \"./ReactNativeQueryRunner\";\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class ReactNativeDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"nested\";\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n         * @see https://sqlite.org/datatype3.html\n         */\n        this.supportedDataTypes = [\n            \"int\",\n            \"integer\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"bigint\",\n            \"unsigned big int\",\n            \"int2\",\n            \"int8\",\n            \"integer\",\n            \"character\",\n            \"varchar\",\n            \"varying character\",\n            \"nchar\",\n            \"native character\",\n            \"nvarchar\",\n            \"text\",\n            \"clob\",\n            \"text\",\n            \"blob\",\n            \"real\",\n            \"double\",\n            \"double precision\",\n            \"float\",\n            \"real\",\n            \"numeric\",\n            \"decimal\",\n            \"boolean\",\n            \"date\",\n            \"time\",\n            \"datetime\",\n        ];\n        /**\n         * Returns type of upsert supported by driver if any\n         */\n        this.supportedUpsertTypes = [\"on-conflict-do-update\"];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"character\",\n            \"varchar\",\n            \"varying character\",\n            \"nchar\",\n            \"native character\",\n            \"nvarchar\",\n            \"text\",\n            \"blob\",\n            \"clob\",\n        ];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"real\",\n            \"double\",\n            \"double precision\",\n            \"float\",\n            \"real\",\n            \"numeric\",\n            \"decimal\",\n            \"date\",\n            \"time\",\n            \"datetime\",\n        ];\n        /**\n         * Gets list of column data types that support scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"real\",\n            \"double\",\n            \"double precision\",\n            \"float\",\n            \"real\",\n            \"numeric\",\n            \"decimal\",\n        ];\n        /**\n         * Orm has special columns and we need to know what database column types should be for those types.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"datetime\",\n            createDateDefault: \"datetime('now')\",\n            updateDate: \"datetime\",\n            updateDateDefault: \"datetime('now')\",\n            deleteDate: \"datetime\",\n            deleteDateNullable: true,\n            version: \"integer\",\n            treeLevel: \"integer\",\n            migrationId: \"integer\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"bigint\",\n            cacheId: \"int\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"bigint\",\n            cacheDuration: \"int\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"text\",\n        };\n        this.cteCapabilities = {\n            enabled: true,\n            requiresRecursiveHint: true,\n        };\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Any attached databases (excepting default 'main')\n         */\n        this.attachedDatabases = {};\n        this.connection = connection;\n        this.options = connection.options;\n        // this.database = DriverUtils.buildDriverOptions(this.options).database\n        this.database = this.options.database;\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Abstract\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new ReactNativeQueryRunner(this);\n        return this.queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect() {\n        return Promise.resolve();\n    }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n    hasAttachedDatabases() {\n        return !!Object.keys(this.attachedDatabases).length;\n    }\n    getAttachedDatabaseHandleByRelativePath(path) {\n        return this.attachedDatabases?.[path]?.attachHandle;\n    }\n    getAttachedDatabasePathRelativeByHandle(handle) {\n        return Object.values(this.attachedDatabases).find(({ attachHandle }) => handle === attachHandle)?.attachFilepathRelative;\n    }\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\") {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\n            // TODO: think about `toUTC` conversion\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n        }\n        return value;\n    }\n    /**\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value)\n                : value;\n        if (columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            /**\n             * Fix date conversion issue\n             *\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\n             *\n             * ISO 8601\n             * https://www.w3.org/TR/NOTE-datetime\n             */\n            if (value && typeof value === \"string\") {\n                // There are various valid time string formats a sqlite time string might have:\n                // https://www.sqlite.org/lang_datefunc.html\n                // There are two separate fixes we may need to do:\n                //   1) Add 'T' separator if space is used instead\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\n                    value = value.replace(\" \", \"T\");\n                }\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(value)) {\n                    value += \"Z\";\n                }\n            }\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n        }\n        else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value;\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    }\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql, parameters, nativeParameters) {\n        const escapedParameters = Object.keys(nativeParameters).map((key) => {\n            // Mapping boolean values to their numeric representation\n            if (typeof nativeParameters[key] === \"boolean\") {\n                return nativeParameters[key] === true ? 1 : 0;\n            }\n            if (nativeParameters[key] instanceof Date) {\n                return DateUtils.mixedDateToUtcDatetimeString(nativeParameters[key]);\n            }\n            return nativeParameters[key];\n        });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n        sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray, key) => {\n            if (!parameters.hasOwnProperty(key)) {\n                return full;\n            }\n            let value = parameters[key];\n            if (isArray) {\n                return value\n                    .map((v) => {\n                    escapedParameters.push(v);\n                    return this.createParameter(key, escapedParameters.length - 1);\n                })\n                    .join(\", \");\n            }\n            if (typeof value === \"function\") {\n                return value();\n            }\n            else if (typeof value === \"number\") {\n                return String(value);\n            }\n            // Sqlite does not have a boolean data type so we have to transform\n            // it to 1 or 0\n            if (typeof value === \"boolean\") {\n                escapedParameters.push(+value);\n                return this.createParameter(key, escapedParameters.length - 1);\n            }\n            if (value instanceof Date) {\n                escapedParameters.push(DateUtils.mixedDateToUtcDatetimeString(value));\n                return this.createParameter(key, escapedParameters.length - 1);\n            }\n            escapedParameters.push(value);\n            return this.createParameter(key, escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName) {\n        return '\"' + columnName + '\"';\n    }\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     *\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\n     */\n    buildTableName(tableName, schema, database) {\n        return tableName;\n    }\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(target) {\n        const driverDatabase = this.database;\n        const driverSchema = undefined;\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.schema\n                ? `\"${target.schema}\".\"${target.name}\"`\n                : target.name);\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName);\n            return {\n                database: target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema: target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            };\n        }\n        const parts = target.split(\".\");\n        if (parts.length === 3) {\n            return {\n                database: parts[0] || driverDatabase,\n                schema: parts[1] || driverSchema,\n                tableName: parts[2],\n            };\n        }\n        else if (parts.length === 2) {\n            const database = this.getAttachedDatabasePathRelativeByHandle(parts[0]) ??\n                driverDatabase;\n            return {\n                database: database,\n                schema: parts[0],\n                tableName: parts[1],\n            };\n        }\n        else {\n            return {\n                database: driverDatabase,\n                schema: driverSchema,\n                tableName: target,\n            };\n        }\n    }\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column) {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\";\n        }\n        else if (column.type === String) {\n            return \"varchar\";\n        }\n        else if (column.type === Date) {\n            return \"datetime\";\n        }\n        else if (column.type === Boolean) {\n            return \"boolean\";\n        }\n        else if (column.type === \"uuid\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"simple-array\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-enum\") {\n            return \"varchar\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata) {\n        const defaultValue = columnMetadata.default;\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        }\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\";\n        }\n        if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n        }\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined;\n        }\n        return `${defaultValue}`;\n    }\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column) {\n        return column.entityMetadata.uniques.some((uq) => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column) {\n        return column.length ? column.length.toString() : \"\";\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    createFullType(column) {\n        let type = column.type;\n        if (column.enum) {\n            return \"varchar\";\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    }\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection() {\n        return Promise.resolve();\n    }\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection() {\n        return Promise.resolve();\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata, insertResult, entityIndex, entityNum) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value;\n            if (generatedColumn.generationStrategy === \"increment\" &&\n                insertResult) {\n                // NOTE: When INSERT statement is successfully completed, the last inserted row ID is returned.\n                // see also: SqliteQueryRunner.query()\n                value = insertResult - entityNum + entityIndex + 1;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     value = insertValue[generatedColumn.databaseName];\n            }\n            if (!value)\n                return map;\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns, columnMetadatas) {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find((c) => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            const isColumnChanged = tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadata.length ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                this.normalizeDefault(columnMetadata) !== tableColumn.default ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map((val) => val + \"\"))) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated);\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         columnMetadata.length,\n            //     )\n            //     console.log(\n            //         \"precision:\",\n            //         tableColumn.precision,\n            //         columnMetadata.precision,\n            //     )\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\n            //     console.log(\n            //         \"default:\",\n            //         this.normalizeDefault(columnMetadata),\n            //         columnMetadata.default,\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"enum:\",\n            //         tableColumn.enum &&\n            //             columnMetadata.enum &&\n            //             !OrmUtils.isArraysEqual(\n            //                 tableColumn.enum,\n            //                 columnMetadata.enum.map((val) => val + \"\"),\n            //             ),\n            //     )\n            //     console.log(\n            //         \"isGenerated:\",\n            //         tableColumn.isGenerated,\n            //         columnMetadata.isGenerated,\n            //     )\n            // }\n            return isColumnChanged;\n        });\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported() {\n        return false;\n    }\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName, index) {\n        // return \"$\" + (index + 1);\n        return \"?\";\n        // return \"$\" + parameterName;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    createDatabaseConnection() {\n        return new Promise((ok, fail) => {\n            const options = Object.assign({}, {\n                name: this.options.database,\n                location: this.options.location,\n            }, this.options.extra || {});\n            this.sqlite.openDatabase(options, (db) => {\n                const databaseConnection = db;\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                databaseConnection.executeSql(`PRAGMA foreign_keys = ON`, [], (result) => {\n                    ok(databaseConnection);\n                }, (error) => {\n                    fail(error);\n                });\n            }, (error) => {\n                fail(error);\n            });\n        });\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        try {\n            const sqlite = this.options.driver || require(\"react-native-sqlite-storage\");\n            this.sqlite = sqlite;\n        }\n        catch (e) {\n            throw new DriverPackageNotInstalledError(\"React-Native\", \"react-native-sqlite-storage\");\n        }\n    }\n}\n\n//# sourceMappingURL=ReactNativeDriver.js.map\n","import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased) {\n            throw new QueryRunnerAlreadyReleasedError();\n        }\n        const connection = this.driver.connection;\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n            connection.logger.logQuery(query, parameters, this);\n            const handler = (err, raw) => {\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime &&\n                    queryExecutionTime > maxQueryExecutionTime) {\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                }\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                }\n                const result = new QueryResult();\n                result.raw = raw;\n                if (!isInsertQuery && Array.isArray(raw)) {\n                    result.records = raw;\n                }\n                if (useStructuredResult) {\n                    ok(result);\n                }\n                else {\n                    ok(result.raw);\n                }\n            };\n            const queryStartTime = +new Date();\n            if (isInsertQuery) {\n                databaseConnection.execSQL(query, parameters, handler);\n            }\n            else {\n                databaseConnection.all(query, parameters, handler);\n            }\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral, startIndex = 0) {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}\n\n//# sourceMappingURL=NativescriptQueryRunner.js.map\n","import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        this.connection = connection;\n        this.options = connection.options;\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n        // load sqlite package\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close().then(ok).catch(fail);\n        });\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this);\n        }\n        return this.queryRunner;\n    }\n    normalizeType(column) {\n        if (column.type === Buffer) {\n            return \"blob\";\n        }\n        return super.normalizeType(column);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    createDatabaseConnection() {\n        return new Promise((ok, fail) => {\n            const options = Object.assign({}, {\n                readOnly: this.options.readOnly,\n                key: this.options.key,\n                multithreading: this.options.multithreading,\n                migrate: this.options.migrate,\n                iosFlags: this.options.iosFlags,\n                androidFlags: this.options.androidFlags,\n            }, this.options.extra || {});\n            new this.sqlite(this.options.database, options, (err, db) => {\n                if (err)\n                    return fail(err);\n                // use object mode to work with TypeORM\n                db.resultType(this.sqlite.RESULTSASOBJECT);\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                db.execSQL(`PRAGMA foreign_keys = ON`, [], (err, result) => {\n                    if (err)\n                        return fail(err);\n                    // We are all set\n                    ok(db);\n                });\n            });\n        });\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n        }\n    }\n}\n\n//# sourceMappingURL=NativescriptDriver.js.map\n","import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        /**\n         * Flag to determine if a modification has happened since the last time this query runner has requested a save.\n         */\n        this.isDirty = false;\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    async flush() {\n        if (this.isDirty) {\n            await this.driver.autoSave();\n            this.isDirty = false;\n        }\n    }\n    async release() {\n        await this.flush();\n        return super.release();\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        await super.commitTransaction();\n        if (!this.isTransactionActive) {\n            await this.flush();\n        }\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters = [], useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const command = query.trim().split(\" \", 1)[0];\n        const databaseConnection = this.driver.databaseConnection;\n        const broadcasterResult = new BroadcasterResult();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        this.broadcaster.broadcastBeforeQueryEvent(broadcasterResult, query, parameters);\n        const queryStartTime = +new Date();\n        let statement;\n        try {\n            statement = databaseConnection.prepare(query);\n            if (parameters) {\n                parameters = parameters.map((p) => typeof p !== \"undefined\" ? p : null);\n                statement.bind(parameters);\n            }\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime)\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            const records = [];\n            while (statement.step()) {\n                records.push(statement.getAsObject());\n            }\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, true, queryExecutionTime, records, undefined);\n            const result = new QueryResult();\n            result.affected = databaseConnection.getRowsModified();\n            result.records = records;\n            result.raw = records;\n            statement.free();\n            if (command !== \"SELECT\") {\n                this.isDirty = true;\n            }\n            if (useStructuredResult) {\n                return result;\n            }\n            else {\n                return result.raw;\n            }\n        }\n        catch (err) {\n            if (statement) {\n                statement.free();\n            }\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, false, undefined, undefined, err);\n            throw new QueryFailedError(query, parameters, err);\n        }\n        finally {\n            await broadcasterResult.wait();\n        }\n    }\n}\n\n//# sourceMappingURL=SqljsQueryRunner.js.map\n","import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TypeORMError } from \"../../error\";\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (this.options.autoSave &&\n            !this.options.location &&\n            !this.options.autoSaveCallback) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n        }\n        // load sql.js package\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        this.queryRunner = undefined;\n        this.databaseConnection.close();\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new SqljsQueryRunner(this);\n        return this.queryRunner;\n    }\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists = true) {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n                    return this.createDatabaseConnectionWithImport(database);\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n            else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null;\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);\n                    }\n                    else {\n                        throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n                    }\n                }\n                else {\n                    localStorageContent =\n                        PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n                }\n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n        }\n        else {\n            return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n        }\n    }\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location) {\n        if (!location && !this.options.location) {\n            throw new TypeORMError(`No location is set, specify a location parameter or add the location option to your configuration`);\n        }\n        let path = \"\";\n        if (location) {\n            path = location;\n        }\n        else if (this.options.location) {\n            path = this.options.location;\n        }\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = Buffer.from(this.databaseConnection.export());\n                await PlatformTools.writeFile(path, content);\n            }\n            catch (e) {\n                throw new TypeORMError(`Could not save database, error: ${e}`);\n            }\n        }\n        else {\n            const database = this.databaseConnection.export();\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database);\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(path, JSON.stringify(databaseArray));\n                }\n                else {\n                    throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n                }\n            }\n            else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n            }\n        }\n    }\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     * Don't auto-save when in transaction as the call to export will end the current transaction\n     */\n    async autoSave() {\n        if (this.options.autoSave && !this.queryRunner?.isTransactionActive) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export());\n            }\n            else {\n                await this.save();\n            }\n        }\n    }\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export() {\n        return this.databaseConnection.export();\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata, insertResult) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n            if (generatedColumn.isPrimary &&\n                generatedColumn.generationStrategy === \"increment\") {\n                const query = \"SELECT last_insert_rowid()\";\n                try {\n                    let result = this.databaseConnection.exec(query);\n                    this.connection.logger.logQuery(query);\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n                }\n                catch (e) {\n                    this.connection.logger.logQueryError(e, query, []);\n                }\n            }\n            return map;\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    createDatabaseConnection() {\n        if (this.options.location) {\n            return this.load(this.options.location, false);\n        }\n        return this.createDatabaseConnectionWithImport(this.options.database);\n    }\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    async createDatabaseConnectionWithImport(database) {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\";\n        const sqlite = isLegacyVersion\n            ? this.sqlite\n            : await this.sqlite(this.options.sqlJsConfig);\n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database);\n        }\n        else {\n            this.databaseConnection = new sqlite.Database();\n        }\n        this.databaseConnection.exec(`PRAGMA foreign_keys = ON`);\n        return this.databaseConnection;\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        if (PlatformTools.type === \"browser\") {\n            const sqlite = this.options.driver || window.SQL;\n            this.sqlite = sqlite;\n        }\n        else {\n            try {\n                const sqlite = this.options.driver || PlatformTools.load(\"sql.js\");\n                this.sqlite = sqlite;\n            }\n            catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=SqljsDriver.js.map\n","import { TypeORMError } from \"../../error\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { VersionUtils } from \"../../util/VersionUtils\";\nimport { Query } from \"../Query\";\nimport { MetadataTableType } from \"../types/MetadataTableType\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class PostgresQueryRunner extends BaseQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver, mode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.mode = mode;\n        this.broadcaster = new Broadcaster(this);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect() {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver\n                .obtainSlaveConnection()\n                .then(([connection, release]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                const onErrorCallback = (err) => this.releasePostgresConnection(err);\n                this.releaseCallback = (err) => {\n                    this.databaseConnection.removeListener(\"error\", onErrorCallback);\n                    release(err);\n                };\n                this.databaseConnection.on(\"error\", onErrorCallback);\n                return this.databaseConnection;\n            });\n        }\n        else {\n            // master\n            this.databaseConnectionPromise = this.driver\n                .obtainMasterConnection()\n                .then(([connection, release]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                const onErrorCallback = (err) => this.releasePostgresConnection(err);\n                this.releaseCallback = (err) => {\n                    this.databaseConnection.removeListener(\"error\", onErrorCallback);\n                    release(err);\n                };\n                this.databaseConnection.on(\"error\", onErrorCallback);\n                return this.databaseConnection;\n            });\n        }\n        return this.databaseConnectionPromise;\n    }\n    /**\n     * Release a connection back to the pool, optionally specifying an Error to release with.\n     * Per pg-pool documentation this will prevent the pool from re-using the broken connection.\n     */\n    async releasePostgresConnection(err) {\n        if (this.isReleased) {\n            return;\n        }\n        this.isReleased = true;\n        if (this.releaseCallback) {\n            this.releaseCallback(err);\n            this.releaseCallback = undefined;\n        }\n        const index = this.driver.connectedQueryRunners.indexOf(this);\n        if (index !== -1) {\n            this.driver.connectedQueryRunners.splice(index, 1);\n        }\n    }\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release() {\n        return this.releasePostgresConnection();\n    }\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel) {\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        if (this.transactionDepth === 0) {\n            this.transactionDepth += 1;\n            await this.query(\"START TRANSACTION\");\n            if (isolationLevel) {\n                await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n            }\n        }\n        else {\n            this.transactionDepth += 1;\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth - 1}`);\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.query(\"COMMIT\");\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.query(\"ROLLBACK\");\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        const broadcasterResult = new BroadcasterResult();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        this.broadcaster.broadcastBeforeQueryEvent(broadcasterResult, query, parameters);\n        try {\n            const queryStartTime = +new Date();\n            const raw = await databaseConnection.query(query, parameters);\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, true, queryExecutionTime, raw, undefined);\n            if (maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime)\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            const result = new QueryResult();\n            if (raw) {\n                if (raw.hasOwnProperty(\"rows\")) {\n                    result.records = raw.rows;\n                }\n                if (raw.hasOwnProperty(\"rowCount\")) {\n                    result.affected = raw.rowCount;\n                }\n                switch (raw.command) {\n                    case \"DELETE\":\n                    case \"UPDATE\":\n                        // for UPDATE and DELETE query additionally return number of affected rows\n                        result.raw = [raw.rows, raw.rowCount];\n                        break;\n                    default:\n                        result.raw = raw.rows;\n                }\n                if (!useStructuredResult) {\n                    return result.raw;\n                }\n            }\n            return result;\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, false, undefined, undefined, err);\n            throw new QueryFailedError(query, parameters, err);\n        }\n        finally {\n            await broadcasterResult.wait();\n        }\n    }\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query, parameters, onEnd, onError) {\n        const QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        const stream = databaseConnection.query(new QueryStream(query, parameters));\n        if (onEnd)\n            stream.on(\"end\", onEnd);\n        if (onError)\n            stream.on(\"error\", onError);\n        return stream;\n    }\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases() {\n        return Promise.resolve([]);\n    }\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database) {\n        return Promise.resolve([]);\n    }\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database) {\n        const result = await this.query(`SELECT * FROM pg_database WHERE datname='${database}';`);\n        return result.length ? true : false;\n    }\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase() {\n        const query = await this.query(`SELECT * FROM current_database()`);\n        return query[0][\"current_database\"];\n    }\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema) {\n        const result = await this.query(`SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`);\n        return result.length ? true : false;\n    }\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema() {\n        const query = await this.query(`SELECT * FROM current_schema()`);\n        return query[0][\"current_schema\"];\n    }\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName) {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n        const sql = `SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = '${parsedTableName.schema}' AND \"table_name\" = '${parsedTableName.tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName, columnName) {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema();\n        }\n        const sql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '${parsedTableName.schema}' AND \"table_name\" = '${parsedTableName.tableName}' AND \"column_name\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Creates a new database.\n     * Note: Postgres does not support database creation inside a transaction block.\n     */\n    async createDatabase(database, ifNotExist) {\n        if (ifNotExist) {\n            const databaseAlreadyExists = await this.hasDatabase(database);\n            if (databaseAlreadyExists)\n                return Promise.resolve();\n        }\n        const up = `CREATE DATABASE \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Drops database.\n     * Note: Postgres does not support database dropping inside a transaction block.\n     */\n    async dropDatabase(database, ifExist) {\n        const up = ifExist\n            ? `DROP DATABASE IF EXISTS \"${database}\"`\n            : `DROP DATABASE \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemaPath, ifNotExist) {\n        const schema = schemaPath.indexOf(\".\") === -1\n            ? schemaPath\n            : schemaPath.split(\".\")[1];\n        const up = ifNotExist\n            ? `CREATE SCHEMA IF NOT EXISTS \"${schema}\"`\n            : `CREATE SCHEMA \"${schema}\"`;\n        const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath, ifExist, isCascade) {\n        const schema = schemaPath.indexOf(\".\") === -1\n            ? schemaPath\n            : schemaPath.split(\".\")[1];\n        const up = ifExist\n            ? `DROP SCHEMA IF EXISTS \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`\n            : `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n        const down = `CREATE SCHEMA \"${schema}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Creates a new table.\n     */\n    async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist)\n                return Promise.resolve();\n        }\n        const upQueries = [];\n        const downQueries = [];\n        // if table have column with ENUM type, we must create this type in postgres.\n        const enumColumns = table.columns.filter((column) => column.type === \"enum\" || column.type === \"simple-enum\");\n        const createdEnumTypes = [];\n        for (const column of enumColumns) {\n            // TODO: Should also check if values of existing type matches expected ones\n            const hasEnum = await this.hasEnumType(table, column);\n            const enumName = this.buildEnumName(table, column);\n            // if enum with the same \"enumName\" is defined more then once, me must prevent double creation\n            if (!hasEnum && createdEnumTypes.indexOf(enumName) === -1) {\n                createdEnumTypes.push(enumName);\n                upQueries.push(this.createEnumTypeSql(table, column, enumName));\n                downQueries.push(this.dropEnumTypeSql(table, column, enumName));\n            }\n        }\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter((column) => column.generatedType === \"STORED\" && column.asExpression);\n        for (const column of generatedColumns) {\n            const tableNameWithSchema = (await this.getTableNameWithSchema(table.name)).split(\".\");\n            const tableName = tableNameWithSchema[1];\n            const schema = tableNameWithSchema[0];\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            upQueries.push(insertQuery);\n            downQueries.push(deleteQuery);\n        }\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n        if (table.comment) {\n            upQueries.push(new Query(\"COMMENT ON TABLE \" + this.escapePath(table) + \" IS '\" + table.comment + \"'\"));\n            downQueries.push(new Query(\"COMMENT ON TABLE \" + this.escapePath(table) + \" IS NULL\"));\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the table.\n     */\n    async dropTable(target, ifExist, dropForeignKeys = true, dropIndices = true) {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target);\n            if (!isTableExist)\n                return Promise.resolve();\n        }\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys = dropForeignKeys;\n        const tablePath = this.getTablePath(target);\n        const table = await this.getCachedTable(tablePath);\n        const upQueries = [];\n        const downQueries = [];\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter((column) => column.generatedType && column.asExpression);\n        for (const column of generatedColumns) {\n            const tableNameWithSchema = (await this.getTableNameWithSchema(table.name)).split(\".\");\n            const tableName = tableNameWithSchema[1];\n            const schema = tableNameWithSchema[0];\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            upQueries.push(deleteQuery);\n            downQueries.push(insertQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Creates a new view.\n     */\n    async createView(view, syncWithMetadata = false) {\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createViewSql(view));\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the view.\n     */\n    async dropView(target) {\n        const viewName = InstanceChecker.isView(target) ? target.name : target;\n        const view = await this.getCachedView(viewName);\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName, newTableName) {\n        const upQueries = [];\n        const downQueries = [];\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const { schema: schemaName, tableName: oldTableName } = this.driver.parseTableName(oldTable);\n        newTable.name = schemaName\n            ? `${schemaName}.${newTableName}`\n            : newTableName;\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(oldTable)} RENAME TO \"${newTableName}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME TO \"${oldTableName}\"`));\n        // rename column primary key constraint if it has default constraint name\n        if (newTable.primaryColumns.length > 0 &&\n            !newTable.primaryColumns[0].primaryKeyConstraintName) {\n            const columnNames = newTable.primaryColumns.map((column) => column.name);\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n        }\n        // rename sequences\n        newTable.columns.map((col) => {\n            if (col.isGenerated && col.generationStrategy === \"increment\") {\n                const sequencePath = this.buildSequencePath(oldTable, col.name);\n                const sequenceName = this.buildSequenceName(oldTable, col.name);\n                const newSequencePath = this.buildSequencePath(newTable, col.name);\n                const newSequenceName = this.buildSequenceName(newTable, col.name);\n                const up = `ALTER SEQUENCE ${this.escapePath(sequencePath)} RENAME TO \"${newSequenceName}\"`;\n                const down = `ALTER SEQUENCE ${this.escapePath(newSequencePath)} RENAME TO \"${sequenceName}\"`;\n                upQueries.push(new Query(up));\n                downQueries.push(new Query(down));\n            }\n        });\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName = this.connection.namingStrategy.uniqueConstraintName(oldTable, unique.columnNames);\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName)\n                return;\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(oldTable, index.columnNames, index.where);\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName)\n                return;\n            // build new constraint name\n            const { schema } = this.driver.parseTableName(newTable);\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n            // build queries\n            const up = schema\n                ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"`\n                : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n            const down = schema\n                ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"`\n                : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n            upQueries.push(new Query(up));\n            downQueries.push(new Query(down));\n            // replace constraint name\n            index.name = newIndexName;\n        });\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName = this.connection.namingStrategy.foreignKeyName(oldTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName)\n                return;\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n        // rename ENUM types\n        const enumColumns = newTable.columns.filter((column) => column.type === \"enum\" || column.type === \"simple-enum\");\n        for (let column of enumColumns) {\n            // skip renaming for user-defined enum name\n            if (column.enumName)\n                continue;\n            const oldEnumType = await this.getUserDefinedTypeName(oldTable, column);\n            upQueries.push(new Query(`ALTER TYPE \"${oldEnumType.schema}\".\"${oldEnumType.name}\" RENAME TO ${this.buildEnumName(newTable, column, false)}`));\n            downQueries.push(new Query(`ALTER TYPE ${this.buildEnumName(newTable, column)} RENAME TO \"${oldEnumType.name}\"`));\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName, column) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            const hasEnum = await this.hasEnumType(table, column);\n            if (!hasEnum) {\n                upQueries.push(this.createEnumTypeSql(table, column));\n                downQueries.push(this.dropEnumTypeSql(table, column));\n            }\n        }\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = primaryColumns[0].primaryKeyConstraintName\n                    ? primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map((column) => column.name));\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n            primaryColumns.push(column);\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map((column) => column.name));\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n        // create column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n                columnNames: [column.name],\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n        if (column.generatedType === \"STORED\" && column.asExpression) {\n            const tableNameWithSchema = (await this.getTableNameWithSchema(table.name)).split(\".\");\n            const tableName = tableNameWithSchema[1];\n            const schema = tableNameWithSchema[0];\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            upQueries.push(insertQuery);\n            downQueries.push(deleteQuery);\n        }\n        // create column's comment\n        if (column.comment) {\n            upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${column.name}\" IS ${this.escapeComment(column.comment)}`));\n            downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${column.name}\" IS ${this.escapeComment(column.comment)}`));\n        }\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        let newColumn;\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName;\n        }\n        else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        let defaultValueChanged = false;\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((column) => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        if (oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length ||\n            newColumn.isArray !== oldColumn.isArray ||\n            (!oldColumn.generatedType &&\n                newColumn.generatedType === \"STORED\") ||\n            (oldColumn.asExpression !== newColumn.asExpression &&\n                newColumn.generatedType === \"STORED\")) {\n            // To avoid data conversion, we just recreate column\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n            // update cloned table\n            clonedTable = table.clone();\n        }\n        else {\n            if (oldColumn.name !== newColumn.name) {\n                // rename column\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n                // rename ENUM type\n                if (oldColumn.type === \"enum\" ||\n                    oldColumn.type === \"simple-enum\") {\n                    const oldEnumType = await this.getUserDefinedTypeName(table, oldColumn);\n                    upQueries.push(new Query(`ALTER TYPE \"${oldEnumType.schema}\".\"${oldEnumType.name}\" RENAME TO ${this.buildEnumName(table, newColumn, false)}`));\n                    downQueries.push(new Query(`ALTER TYPE ${this.buildEnumName(table, newColumn)} RENAME TO \"${oldEnumType.name}\"`));\n                }\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true &&\n                    !oldColumn.primaryKeyConstraintName) {\n                    const primaryColumns = clonedTable.primaryColumns;\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map((column) => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n                }\n                // rename column sequence\n                if (oldColumn.isGenerated === true &&\n                    newColumn.generationStrategy === \"increment\") {\n                    const sequencePath = this.buildSequencePath(table, oldColumn.name);\n                    const sequenceName = this.buildSequenceName(table, oldColumn.name);\n                    const newSequencePath = this.buildSequencePath(table, newColumn.name);\n                    const newSequenceName = this.buildSequenceName(table, newColumn.name);\n                    const up = `ALTER SEQUENCE ${this.escapePath(sequencePath)} RENAME TO \"${newSequenceName}\"`;\n                    const down = `ALTER SEQUENCE ${this.escapePath(newSequencePath)} RENAME TO \"${sequenceName}\"`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n                }\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    const oldUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n                    // Skip renaming if Unique has user defined constraint name\n                    if (unique.name !== oldUniqueName)\n                        return;\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    const oldIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                    // Skip renaming if Index has user defined constraint name\n                    if (index.name !== oldIndexName)\n                        return;\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const { schema } = this.driver.parseTableName(table);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                    // build queries\n                    const up = schema\n                        ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"`\n                        : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n                    const down = schema\n                        ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"`\n                        : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                    const foreignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n                    // Skip renaming if foreign key has user defined constraint name\n                    if (foreignKey.name !== foreignKeyName)\n                        return;\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find((column) => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n            if (newColumn.precision !== oldColumn.precision ||\n                newColumn.scale !== oldColumn.scale) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n            if ((newColumn.type === \"enum\" ||\n                newColumn.type === \"simple-enum\") &&\n                (oldColumn.type === \"enum\" ||\n                    oldColumn.type === \"simple-enum\") &&\n                (!OrmUtils.isArraysEqual(newColumn.enum, oldColumn.enum) ||\n                    newColumn.enumName !== oldColumn.enumName)) {\n                const arraySuffix = newColumn.isArray ? \"[]\" : \"\";\n                // \"public\".\"new_enum\"\n                const newEnumName = this.buildEnumName(table, newColumn);\n                // \"public\".\"old_enum\"\n                const oldEnumName = this.buildEnumName(table, oldColumn);\n                // \"old_enum\"\n                const oldEnumNameWithoutSchema = this.buildEnumName(table, oldColumn, false);\n                //\"public\".\"old_enum_old\"\n                const oldEnumNameWithSchema_old = this.buildEnumName(table, oldColumn, true, false, true);\n                //\"old_enum_old\"\n                const oldEnumNameWithoutSchema_old = this.buildEnumName(table, oldColumn, false, false, true);\n                // rename old ENUM\n                upQueries.push(new Query(`ALTER TYPE ${oldEnumName} RENAME TO ${oldEnumNameWithoutSchema_old}`));\n                downQueries.push(new Query(`ALTER TYPE ${oldEnumNameWithSchema_old} RENAME TO ${oldEnumNameWithoutSchema}`));\n                // create new ENUM\n                upQueries.push(this.createEnumTypeSql(table, newColumn, newEnumName));\n                downQueries.push(this.dropEnumTypeSql(table, newColumn, newEnumName));\n                // if column have default value, we must drop it to avoid issues with type casting\n                if (oldColumn.default !== null &&\n                    oldColumn.default !== undefined) {\n                    // mark default as changed to prevent double update\n                    defaultValueChanged = true;\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                }\n                // build column types\n                const upType = `${newEnumName}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${newEnumName}${arraySuffix}`;\n                const downType = `${oldEnumNameWithSchema_old}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${oldEnumNameWithSchema_old}${arraySuffix}`;\n                // update column to use new type\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${upType}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${downType}`));\n                // restore column default or create new one\n                if (newColumn.default !== null &&\n                    newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                }\n                // remove old ENUM\n                upQueries.push(this.dropEnumTypeSql(table, oldColumn, oldEnumNameWithSchema_old));\n                downQueries.push(this.createEnumTypeSql(table, oldColumn, oldEnumNameWithSchema_old));\n            }\n            if (oldColumn.isNullable !== newColumn.isNullable) {\n                if (newColumn.isNullable) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                }\n                else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                }\n            }\n            if (oldColumn.comment !== newColumn.comment) {\n                upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" IS ${this.escapeComment(newColumn.comment)}`));\n                downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" IS ${this.escapeComment(oldColumn.comment)}`));\n            }\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map((column) => column.name));\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find((column) => column.name === newColumn.name);\n                    column.isPrimary = true;\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map((column) => column.name));\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                }\n                else {\n                    const primaryColumn = primaryColumns.find((c) => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                    // update column in table\n                    const column = clonedTable.columns.find((column) => column.name === newColumn.name);\n                    column.isPrimary = false;\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = primaryColumns[0]\n                            .primaryKeyConstraintName\n                            ? primaryColumns[0].primaryKeyConstraintName\n                            : this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map((column) => column.name));\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table, [newColumn.name]),\n                        columnNames: [newColumn.name],\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n                }\n                else {\n                    const uniqueConstraint = clonedTable.uniques.find((unique) => {\n                        return (unique.columnNames.length === 1 &&\n                            !!unique.columnNames.find((columnName) => columnName === newColumn.name));\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n            if (oldColumn.isGenerated !== newColumn.isGenerated) {\n                // if old column was \"generated\", we should clear defaults\n                if (oldColumn.isGenerated) {\n                    if (oldColumn.generationStrategy === \"uuid\") {\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT ${this.driver.uuidGenerator}`));\n                    }\n                    else if (oldColumn.generationStrategy === \"increment\") {\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT nextval('${this.escapePath(this.buildSequencePath(table, newColumn))}')`));\n                        upQueries.push(new Query(`DROP SEQUENCE ${this.escapePath(this.buildSequencePath(table, newColumn))}`));\n                        downQueries.push(new Query(`CREATE SEQUENCE IF NOT EXISTS ${this.escapePath(this.buildSequencePath(table, newColumn))} OWNED BY ${this.escapePath(table)}.\"${newColumn.name}\"`));\n                    }\n                }\n                if (newColumn.generationStrategy === \"uuid\") {\n                    if (newColumn.isGenerated === true) {\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${this.driver.uuidGenerator}`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    }\n                    else {\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${this.driver.uuidGenerator}`));\n                    }\n                }\n                else if (newColumn.generationStrategy === \"increment\") {\n                    if (newColumn.isGenerated === true) {\n                        upQueries.push(new Query(`CREATE SEQUENCE IF NOT EXISTS ${this.escapePath(this.buildSequencePath(table, newColumn))} OWNED BY ${this.escapePath(table)}.\"${newColumn.name}\"`));\n                        downQueries.push(new Query(`DROP SEQUENCE ${this.escapePath(this.buildSequencePath(table, newColumn))}`));\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT nextval('${this.escapePath(this.buildSequencePath(table, newColumn))}')`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    }\n                    else {\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT nextval('${this.escapePath(this.buildSequencePath(table, newColumn))}')`));\n                        upQueries.push(new Query(`DROP SEQUENCE ${this.escapePath(this.buildSequencePath(table, newColumn))}`));\n                        downQueries.push(new Query(`CREATE SEQUENCE IF NOT EXISTS ${this.escapePath(this.buildSequencePath(table, newColumn))} OWNED BY ${this.escapePath(table)}.\"${newColumn.name}\"`));\n                    }\n                }\n            }\n            // the default might have changed when the enum changed\n            if (newColumn.default !== oldColumn.default &&\n                !defaultValueChanged) {\n                if (newColumn.default !== null &&\n                    newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n                    if (oldColumn.default !== null &&\n                        oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                    }\n                    else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    }\n                }\n                else if (oldColumn.default !== null &&\n                    oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                }\n            }\n            if ((newColumn.spatialFeatureType || \"\").toLowerCase() !==\n                (oldColumn.spatialFeatureType || \"\").toLowerCase() ||\n                newColumn.srid !== oldColumn.srid) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n            if (newColumn.generatedType !== oldColumn.generatedType) {\n                // Convert generated column data to normal column\n                if (!newColumn.generatedType ||\n                    newColumn.generatedType === \"VIRTUAL\") {\n                    // We can copy the generated data to the new column\n                    const tableNameWithSchema = (await this.getTableNameWithSchema(table.name)).split(\".\");\n                    const tableName = tableNameWithSchema[1];\n                    const schema = tableNameWithSchema[0];\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${oldColumn.name}\" TO \"TEMP_OLD_${oldColumn.name}\"`));\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, newColumn)}`));\n                    upQueries.push(new Query(`UPDATE ${this.escapePath(table)} SET \"${newColumn.name}\" = \"TEMP_OLD_${oldColumn.name}\"`));\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"TEMP_OLD_${oldColumn.name}\"`));\n                    upQueries.push(this.deleteTypeormMetadataSql({\n                        database: this.driver.database,\n                        schema,\n                        table: tableName,\n                        type: MetadataTableType.GENERATED_COLUMN,\n                        name: oldColumn.name,\n                    }));\n                    // However, we can't copy it back on downgrade. It needs to regenerate.\n                    downQueries.push(this.insertTypeormMetadataSql({\n                        database: this.driver.database,\n                        schema,\n                        table: tableName,\n                        type: MetadataTableType.GENERATED_COLUMN,\n                        name: oldColumn.name,\n                        value: oldColumn.asExpression,\n                    }));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, oldColumn)}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${newColumn.name}\"`));\n                    // downQueries.push(\n                    //     this.deleteTypeormMetadataSql({\n                    //         database: this.driver.database,\n                    //         schema,\n                    //         table: tableName,\n                    //         type: MetadataTableType.GENERATED_COLUMN,\n                    //         name: newColumn.name,\n                    //     }),\n                    // )\n                }\n            }\n        }\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName, changedColumns) {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName, columnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = column.primaryKeyConstraintName\n                ? column.primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(clonedTable, clonedTable.primaryColumns.map((column) => column.name));\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn.isPrimary = false;\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = clonedTable.primaryColumns[0]\n                    .primaryKeyConstraintName\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(clonedTable, clonedTable.primaryColumns.map((column) => column.name));\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n        // drop column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n        // drop column check\n        const columnCheck = clonedTable.checks.find((check) => !!check.columnNames &&\n            check.columnNames.length === 1 &&\n            check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find((unique) => unique.columnNames.length === 1 &&\n            unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n        // drop enum type\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            const hasEnum = await this.hasEnumType(table, column);\n            if (hasEnum) {\n                const enumType = await this.getUserDefinedTypeName(table, column);\n                const escapedEnumName = `\"${enumType.schema}\".\"${enumType.name}\"`;\n                upQueries.push(this.dropEnumTypeSql(table, column, escapedEnumName));\n                downQueries.push(this.createEnumTypeSql(table, column, escapedEnumName));\n            }\n        }\n        if (column.generatedType === \"STORED\") {\n            const tableNameWithSchema = (await this.getTableNameWithSchema(table.name)).split(\".\");\n            const tableName = tableNameWithSchema[1];\n            const schema = tableNameWithSchema[0];\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: this.driver.database,\n                schema,\n                table: tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            upQueries.push(deleteQuery);\n            downQueries.push(insertQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName, columnNames, constraintName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName);\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName, columns) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map((column) => column.name);\n        const upQueries = [];\n        const downQueries = [];\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(clonedTable, primaryColumns.map((column) => column.name));\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true));\n        const pkName = primaryColumns[0]?.primaryKeyConstraintName\n            ? primaryColumns[0].primaryKeyConstraintName\n            : this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName, constraintName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map((column) => column.name), constraintName);\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false;\n        });\n    }\n    /**\n     * Creates new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName, uniqueConstraint) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name =\n                this.connection.namingStrategy.uniqueConstraintName(table, uniqueConstraint.columnNames);\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n    /**\n     * Creates new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName, uniqueConstraints) {\n        for (const uniqueConstraint of uniqueConstraints) {\n            await this.createUniqueConstraint(tableOrName, uniqueConstraint);\n        }\n    }\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName, uniqueOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new TypeORMError(`Supplied unique constraint was not found in table ${table.name}`);\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n    /**\n     * Drops unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName, uniqueConstraints) {\n        for (const uniqueConstraint of uniqueConstraints) {\n            await this.dropUniqueConstraint(tableOrName, uniqueConstraint);\n        }\n    }\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName, checkConstraint) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(table, checkConstraint.expression);\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName, checkConstraints) {\n        const promises = checkConstraints.map((checkConstraint) => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName, checkOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new TypeORMError(`Supplied check constraint was not found in table ${table.name}`);\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName, checkConstraints) {\n        const promises = checkConstraints.map((checkConstraint) => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n    /**\n     * Creates new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName, exclusionConstraint) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!exclusionConstraint.name)\n            exclusionConstraint.name =\n                this.connection.namingStrategy.exclusionConstraintName(table, exclusionConstraint.expression);\n        const up = this.createExclusionConstraintSql(table, exclusionConstraint);\n        const down = this.dropExclusionConstraintSql(table, exclusionConstraint);\n        await this.executeQueries(up, down);\n        table.addExclusionConstraint(exclusionConstraint);\n    }\n    /**\n     * Creates new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName, exclusionConstraints) {\n        const promises = exclusionConstraints.map((exclusionConstraint) => this.createExclusionConstraint(tableOrName, exclusionConstraint));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName, exclusionOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const exclusionConstraint = InstanceChecker.isTableExclusion(exclusionOrName)\n            ? exclusionOrName\n            : table.exclusions.find((c) => c.name === exclusionOrName);\n        if (!exclusionConstraint)\n            throw new TypeORMError(`Supplied exclusion constraint was not found in table ${table.name}`);\n        const up = this.dropExclusionConstraintSql(table, exclusionConstraint);\n        const down = this.createExclusionConstraintSql(table, exclusionConstraint);\n        await this.executeQueries(up, down);\n        table.removeExclusionConstraint(exclusionConstraint);\n    }\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName, exclusionConstraints) {\n        const promises = exclusionConstraints.map((exclusionConstraint) => this.dropExclusionConstraint(tableOrName, exclusionConstraint));\n        await Promise.all(promises);\n    }\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName, foreignKey) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName, foreignKeys) {\n        for (const foreignKey of foreignKeys) {\n            await this.createForeignKey(tableOrName, foreignKey);\n        }\n    }\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName, foreignKeyOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\n        if (!foreignKey.name) {\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n        }\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName, foreignKeys) {\n        for (const foreignKey of foreignKeys) {\n            await this.dropForeignKey(tableOrName, foreignKey);\n        }\n    }\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName, index) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n    /**\n     * Create a new view index.\n     */\n    async createViewIndex(viewOrName, index) {\n        const view = InstanceChecker.isView(viewOrName)\n            ? viewOrName\n            : await this.getCachedView(viewOrName);\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(view, index);\n        const up = this.createViewIndexSql(view, index);\n        const down = this.dropIndexSql(view, index);\n        await this.executeQueries(up, down);\n        view.addIndex(index);\n    }\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName, indices) {\n        for (const index of indices) {\n            await this.createIndex(tableOrName, index);\n        }\n    }\n    /**\n     * Creates new view indices\n     */\n    async createViewIndices(viewOrName, indices) {\n        for (const index of indices) {\n            await this.createViewIndex(viewOrName, index);\n        }\n    }\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName, indexOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName);\n        if (!index)\n            throw new TypeORMError(`Supplied index ${indexOrName} was not found in table ${table.name}`);\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n    /**\n     * Drops an index from a view.\n     */\n    async dropViewIndex(viewOrName, indexOrName) {\n        const view = InstanceChecker.isView(viewOrName)\n            ? viewOrName\n            : await this.getCachedView(viewOrName);\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : view.indices.find((i) => i.name === indexOrName);\n        if (!index)\n            throw new TypeORMError(`Supplied index ${indexOrName} was not found in view ${view.name}`);\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(view, index);\n        const up = this.dropIndexSql(view, index);\n        const down = this.createViewIndexSql(view, index);\n        await this.executeQueries(up, down);\n        view.removeIndex(index);\n    }\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName, indices) {\n        for (const index of indices) {\n            await this.dropIndex(tableOrName, index);\n        }\n    }\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName) {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`);\n    }\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase() {\n        const schemas = [];\n        this.connection.entityMetadatas\n            .filter((metadata) => metadata.schema)\n            .forEach((metadata) => {\n            const isSchemaExist = !!schemas.find((schema) => schema === metadata.schema);\n            if (!isSchemaExist)\n                schemas.push(metadata.schema);\n        });\n        schemas.push(this.driver.options.schema || \"current_schema()\");\n        const schemaNamesString = schemas\n            .map((name) => {\n            return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\n        })\n            .join(\", \");\n        const isAnotherTransactionActive = this.isTransactionActive;\n        if (!isAnotherTransactionActive)\n            await this.startTransaction();\n        try {\n            const version = await this.getVersion();\n            // drop views\n            const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n                `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;\n            const dropViewQueries = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map((q) => this.query(q[\"query\"])));\n            // drop materialized views\n            // Note: materialized views introduced in Postgres 9.3\n            if (VersionUtils.isGreaterOrEqual(version, \"9.3\")) {\n                const selectMatViewDropsQuery = `SELECT 'DROP MATERIALIZED VIEW IF EXISTS \"' || schemaname || '\".\"' || matviewname || '\" CASCADE;' as \"query\" ` +\n                    `FROM \"pg_matviews\" WHERE \"schemaname\" IN (${schemaNamesString})`;\n                const dropMatViewQueries = await this.query(selectMatViewDropsQuery);\n                await Promise.all(dropMatViewQueries.map((q) => this.query(q[\"query\"])));\n            }\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\n            // TODO generalize this as this.driver.ignoreTables\n            // drop tables\n            const selectTableDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as \"query\" FROM \"pg_tables\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"tablename\" NOT IN ('spatial_ref_sys')`;\n            const dropTableQueries = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map((q) => this.query(q[\"query\"])));\n            // drop enum types\n            await this.dropEnumTypes(schemaNamesString);\n            if (!isAnotherTransactionActive) {\n                await this.commitTransaction();\n            }\n        }\n        catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive) {\n                    await this.rollbackTransaction();\n                }\n            }\n            catch (rollbackError) { }\n            throw error;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    async loadViews(viewNames) {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return [];\n        if (!viewNames) {\n            viewNames = [];\n        }\n        const currentDatabase = await this.getCurrentDatabase();\n        const currentSchema = await this.getCurrentSchema();\n        const viewsCondition = viewNames.length === 0\n            ? \"1=1\"\n            : viewNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .map(({ schema, tableName }) => {\n                if (!schema) {\n                    schema =\n                        this.driver.options.schema || currentSchema;\n                }\n                return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${tableName}')`;\n            })\n                .join(\" OR \");\n        const constraintsCondition = viewNames.length === 0\n            ? \"1=1\"\n            : viewNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .map(({ schema, tableName }) => {\n                if (!schema) {\n                    schema =\n                        this.driver.options.schema || currentSchema;\n                }\n                return `(\"ns\".\"nspname\" = '${schema}' AND \"t\".\"relname\" = '${tableName}')`;\n            })\n                .join(\" OR \");\n        const indicesSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\n            `\"types\".\"typname\" AS \"type_name\" ` +\n            `FROM \"pg_class\" \"t\" ` +\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\n            `WHERE \"t\".\"relkind\" IN ('m') AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`;\n        const query = `SELECT \"t\".* FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n            `INNER JOIN \"pg_catalog\".\"pg_class\" \"c\" ON \"c\".\"relname\" = \"t\".\"name\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"c\".\"relnamespace\" AND \"n\".\"nspname\" = \"t\".\"schema\" ` +\n            `WHERE \"t\".\"type\" IN ('${MetadataTableType.VIEW}', '${MetadataTableType.MATERIALIZED_VIEW}') ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        const dbIndices = await this.query(indicesSql);\n        return dbViews.map((dbView) => {\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter((dbIndex) => {\n                return (dbIndex[\"table_name\"] === dbView[\"name\"] &&\n                    dbIndex[\"table_schema\"] === dbView[\"schema\"]);\n            }), (dbIndex) => dbIndex[\"constraint_name\"]);\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema &&\n                !this.driver.options.schema\n                ? undefined\n                : dbView[\"schema\"];\n            view.database = currentDatabase;\n            view.schema = dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            view.materialized =\n                dbView[\"type\"] === MetadataTableType.MATERIALIZED_VIEW;\n            view.indices = tableIndexConstraints.map((constraint) => {\n                const indices = dbIndices.filter((index) => {\n                    return (index[\"table_schema\"] === constraint[\"table_schema\"] &&\n                        index[\"table_name\"] === constraint[\"table_name\"] &&\n                        index[\"constraint_name\"] ===\n                            constraint[\"constraint_name\"]);\n                });\n                return new TableIndex({\n                    view: view,\n                    name: constraint[\"constraint_name\"],\n                    columnNames: indices.map((i) => i[\"column_name\"]),\n                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\n                    where: constraint[\"condition\"],\n                    isFulltext: false,\n                });\n            });\n            return view;\n        });\n    }\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    async loadTables(tableNames) {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return [];\n        }\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n        const dbTables = [];\n        if (!tableNames) {\n            const tablesSql = `SELECT \"table_schema\", \"table_name\", obj_description(('\"' || \"table_schema\" || '\".\"' || \"table_name\" || '\"')::regclass, 'pg_class') AS table_comment FROM \"information_schema\".\"tables\"`;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        else {\n            const tablesCondition = tableNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .map(({ schema, tableName }) => {\n                return `(\"table_schema\" = '${schema || currentSchema}' AND \"table_name\" = '${tableName}')`;\n            })\n                .join(\" OR \");\n            const tablesSql = `SELECT \"table_schema\", \"table_name\", obj_description(('\"' || \"table_schema\" || '\".\"' || \"table_name\" || '\"')::regclass, 'pg_class') AS table_comment FROM \"information_schema\".\"tables\" WHERE ` +\n                tablesCondition;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return [];\n        }\n        /**\n         * Uses standard SQL information_schema.columns table and postgres-specific\n         * pg_catalog.pg_attribute table to get column information.\n         * @see https://stackoverflow.com/a/19541865\n         */\n        const columnsCondition = dbTables\n            .map(({ table_schema, table_name }) => {\n            return `(\"table_schema\" = '${table_schema}' AND \"table_name\" = '${table_name}')`;\n        })\n            .join(\" OR \");\n        const columnsSql = `SELECT columns.*, pg_catalog.col_description(('\"' || table_catalog || '\".\"' || table_schema || '\".\"' || table_name || '\"')::regclass::oid, ordinal_position) AS description, ` +\n            `('\"' || \"udt_schema\" || '\".\"' || \"udt_name\" || '\"')::\"regtype\" AS \"regtype\", pg_catalog.format_type(\"col_attr\".\"atttypid\", \"col_attr\".\"atttypmod\") AS \"format_type\" ` +\n            `FROM \"information_schema\".\"columns\" ` +\n            `LEFT JOIN \"pg_catalog\".\"pg_attribute\" AS \"col_attr\" ON \"col_attr\".\"attname\" = \"columns\".\"column_name\" ` +\n            `AND \"col_attr\".\"attrelid\" = ( ` +\n            `SELECT \"cls\".\"oid\" FROM \"pg_catalog\".\"pg_class\" AS \"cls\" ` +\n            `LEFT JOIN \"pg_catalog\".\"pg_namespace\" AS \"ns\" ON \"ns\".\"oid\" = \"cls\".\"relnamespace\" ` +\n            `WHERE \"cls\".\"relname\" = \"columns\".\"table_name\" ` +\n            `AND \"ns\".\"nspname\" = \"columns\".\"table_schema\" ` +\n            `) ` +\n            `WHERE ` +\n            columnsCondition;\n        const constraintsCondition = dbTables\n            .map(({ table_schema, table_name }) => {\n            return `(\"ns\".\"nspname\" = '${table_schema}' AND \"t\".\"relname\" = '${table_name}')`;\n        })\n            .join(\" OR \");\n        const constraintsSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", ` +\n            `pg_get_constraintdef(\"cnst\".\"oid\") AS \"expression\", ` +\n            `CASE \"cnst\".\"contype\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \"constraint_type\", \"a\".\"attname\" AS \"column_name\" ` +\n            `FROM \"pg_constraint\" \"cnst\" ` +\n            `INNER JOIN \"pg_class\" \"t\" ON \"t\".\"oid\" = \"cnst\".\"conrelid\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"cnst\".\"connamespace\" ` +\n            `LEFT JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"cnst\".\"conrelid\" AND \"a\".\"attnum\" = ANY (\"cnst\".\"conkey\") ` +\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND (${constraintsCondition})`;\n        const indicesSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\n            `\"types\".\"typname\" AS \"type_name\", \"am\".\"amname\" AS \"index_type\" ` +\n            `FROM \"pg_class\" \"t\" ` +\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\n            `INNER JOIN \"pg_am\" \"am\" ON \"i\".\"relam\" = \"am\".\"oid\" ` +\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`;\n        const foreignKeysCondition = dbTables\n            .map(({ table_schema, table_name }) => {\n            return `(\"ns\".\"nspname\" = '${table_schema}' AND \"cl\".\"relname\" = '${table_name}')`;\n        })\n            .join(\" OR \");\n        const hasRelispartitionColumn = await this.hasSupportForPartitionedTables();\n        const isPartitionCondition = hasRelispartitionColumn\n            ? ` AND \"cl\".\"relispartition\" = 'f'`\n            : \"\";\n        const foreignKeysSql = `SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", ` +\n            `\"ns\".\"nspname\" AS \"referenced_table_schema\", \"cl\".\"relname\" AS \"referenced_table_name\", \"att\".\"attname\" AS \"referenced_column_name\", \"con\".\"confdeltype\" AS \"on_delete\", ` +\n            `\"con\".\"confupdtype\" AS \"on_update\", \"con\".\"condeferrable\" AS \"deferrable\", \"con\".\"condeferred\" AS \"deferred\" ` +\n            `FROM ( ` +\n            `SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", ` +\n            `\"cl\".\"relname\", \"con1\".\"condeferrable\", ` +\n            `CASE WHEN \"con1\".\"condeferred\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, ` +\n            `CASE \"con1\".\"confdeltype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confdeltype\", ` +\n            `CASE \"con1\".\"confupdtype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confupdtype\" ` +\n            `FROM \"pg_class\" \"cl\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_constraint\" \"con1\" ON \"con1\".\"conrelid\" = \"cl\".\"oid\" ` +\n            `WHERE \"con1\".\"contype\" = 'f' AND (${foreignKeysCondition}) ` +\n            `) \"con\" ` +\n            `INNER JOIN \"pg_attribute\" \"att\" ON \"att\".\"attrelid\" = \"con\".\"confrelid\" AND \"att\".\"attnum\" = \"con\".\"child\" ` +\n            `INNER JOIN \"pg_class\" \"cl\" ON \"cl\".\"oid\" = \"con\".\"confrelid\" ${isPartitionCondition}` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"att2\" ON \"att2\".\"attrelid\" = \"con\".\"conrelid\" AND \"att2\".\"attnum\" = \"con\".\"parent\"`;\n        const [dbColumns, dbConstraints, dbIndices, dbForeignKeys,] = await Promise.all([\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async (dbTable) => {\n            const table = new Table();\n            const getSchemaFromKey = (dbObject, key) => {\n                return dbObject[key] === currentSchema &&\n                    (!this.driver.options.schema ||\n                        this.driver.options.schema === currentSchema)\n                    ? undefined\n                    : dbObject[key];\n            };\n            // We do not need to join schema name, when database is by default.\n            const schema = getSchemaFromKey(dbTable, \"table_schema\");\n            table.database = currentDatabase;\n            table.schema = dbTable[\"table_schema\"];\n            table.comment = dbTable[\"table_comment\"];\n            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter((dbColumn) => dbColumn[\"table_name\"] ===\n                dbTable[\"table_name\"] &&\n                dbColumn[\"table_schema\"] ===\n                    dbTable[\"table_schema\"])\n                .map(async (dbColumn) => {\n                const columnConstraints = dbConstraints.filter((dbConstraint) => {\n                    return (dbConstraint[\"table_name\"] ===\n                        dbColumn[\"table_name\"] &&\n                        dbConstraint[\"table_schema\"] ===\n                            dbColumn[\"table_schema\"] &&\n                        dbConstraint[\"column_name\"] ===\n                            dbColumn[\"column_name\"]);\n                });\n                const tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"column_name\"];\n                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n                if (tableColumn.type === \"numeric\" ||\n                    tableColumn.type === \"numeric[]\" ||\n                    tableColumn.type === \"decimal\" ||\n                    tableColumn.type === \"float\") {\n                    let numericPrecision = dbColumn[\"numeric_precision\"];\n                    let numericScale = dbColumn[\"numeric_scale\"];\n                    if (dbColumn[\"data_type\"] === \"ARRAY\") {\n                        const numericSize = dbColumn[\"format_type\"].match(/^numeric\\(([0-9]+),([0-9]+)\\)\\[\\]$/);\n                        if (numericSize) {\n                            numericPrecision = +numericSize[1];\n                            numericScale = +numericSize[2];\n                        }\n                    }\n                    // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                    // we set 'undefined' in to unspecified property to avoid changing column on sync\n                    if (numericPrecision !== null &&\n                        !this.isDefaultColumnPrecision(table, tableColumn, numericPrecision)) {\n                        tableColumn.precision = numericPrecision;\n                    }\n                    else if (numericScale !== null &&\n                        !this.isDefaultColumnScale(table, tableColumn, numericScale)) {\n                        tableColumn.precision = undefined;\n                    }\n                    if (numericScale !== null &&\n                        !this.isDefaultColumnScale(table, tableColumn, numericScale)) {\n                        tableColumn.scale = numericScale;\n                    }\n                    else if (numericPrecision !== null &&\n                        !this.isDefaultColumnPrecision(table, tableColumn, numericPrecision)) {\n                        tableColumn.scale = undefined;\n                    }\n                }\n                if (tableColumn.type === \"interval\" ||\n                    tableColumn.type === \"time without time zone\" ||\n                    tableColumn.type === \"time with time zone\" ||\n                    tableColumn.type ===\n                        \"timestamp without time zone\" ||\n                    tableColumn.type === \"timestamp with time zone\") {\n                    tableColumn.precision =\n                        !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"])\n                            ? dbColumn[\"datetime_precision\"]\n                            : undefined;\n                }\n                // check if column has user-defined data type.\n                // NOTE: if ENUM type defined with \"array:true\" it comes with ARRAY type instead of USER-DEFINED\n                if (dbColumn[\"data_type\"] === \"USER-DEFINED\" ||\n                    dbColumn[\"data_type\"] === \"ARRAY\") {\n                    const { name } = await this.getUserDefinedTypeName(table, tableColumn);\n                    // check if `enumName` is specified by user\n                    const builtEnumName = this.buildEnumName(table, tableColumn, false, true);\n                    const enumName = builtEnumName !== name ? name : undefined;\n                    // check if type is ENUM\n                    const sql = `SELECT \"e\".\"enumlabel\" AS \"value\" FROM \"pg_enum\" \"e\" ` +\n                        `INNER JOIN \"pg_type\" \"t\" ON \"t\".\"oid\" = \"e\".\"enumtypid\" ` +\n                        `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n                        `WHERE \"n\".\"nspname\" = '${dbTable[\"table_schema\"]}' AND \"t\".\"typname\" = '${enumName || name}'`;\n                    const results = await this.query(sql);\n                    if (results.length) {\n                        tableColumn.type = \"enum\";\n                        tableColumn.enum = results.map((result) => result[\"value\"]);\n                        tableColumn.enumName = enumName;\n                    }\n                    if (dbColumn[\"data_type\"] === \"ARRAY\") {\n                        tableColumn.isArray = true;\n                        const type = tableColumn.type.replace(\"[]\", \"\");\n                        tableColumn.type =\n                            this.connection.driver.normalizeType({\n                                type: type,\n                            });\n                    }\n                }\n                if (tableColumn.type === \"geometry\" ||\n                    tableColumn.type === \"geography\") {\n                    const sql = `SELECT * FROM (` +\n                        `SELECT \"f_table_schema\" \"table_schema\", \"f_table_name\" \"table_name\", ` +\n                        `\"f_${tableColumn.type}_column\" \"column_name\", \"srid\", \"type\" ` +\n                        `FROM \"${tableColumn.type}_columns\"` +\n                        `) AS _ ` +\n                        `WHERE \"column_name\" = '${dbColumn[\"column_name\"]}' AND ` +\n                        `\"table_schema\" = '${dbColumn[\"table_schema\"]}' AND ` +\n                        `\"table_name\" = '${dbColumn[\"table_name\"]}'`;\n                    const results = await this.query(sql);\n                    if (results.length > 0) {\n                        tableColumn.spatialFeatureType =\n                            results[0].type;\n                        tableColumn.srid = results[0].srid;\n                    }\n                }\n                // check only columns that have length property\n                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1) {\n                    let length;\n                    if (tableColumn.isArray) {\n                        const match = /\\((\\d+)\\)/.exec(dbColumn[\"format_type\"]);\n                        length = match ? match[1] : undefined;\n                    }\n                    else if (dbColumn[\"character_maximum_length\"]) {\n                        length =\n                            dbColumn[\"character_maximum_length\"].toString();\n                    }\n                    if (length) {\n                        tableColumn.length =\n                            !this.isDefaultColumnLength(table, tableColumn, length)\n                                ? length\n                                : \"\";\n                    }\n                }\n                tableColumn.isNullable =\n                    dbColumn[\"is_nullable\"] === \"YES\";\n                const primaryConstraint = columnConstraints.find((constraint) => constraint[\"constraint_type\"] === \"PRIMARY\");\n                if (primaryConstraint) {\n                    tableColumn.isPrimary = true;\n                    // find another columns involved in primary key constraint\n                    const anotherPrimaryConstraints = dbConstraints.filter((constraint) => constraint[\"table_name\"] ===\n                        dbColumn[\"table_name\"] &&\n                        constraint[\"table_schema\"] ===\n                            dbColumn[\"table_schema\"] &&\n                        constraint[\"column_name\"] !==\n                            dbColumn[\"column_name\"] &&\n                        constraint[\"constraint_type\"] ===\n                            \"PRIMARY\");\n                    // collect all column names\n                    const columnNames = anotherPrimaryConstraints.map((constraint) => constraint[\"column_name\"]);\n                    columnNames.push(dbColumn[\"column_name\"]);\n                    // build default primary key constraint name\n                    const pkName = this.connection.namingStrategy.primaryKeyName(table, columnNames);\n                    // if primary key has user-defined constraint name, write it in table column\n                    if (primaryConstraint[\"constraint_name\"] !==\n                        pkName) {\n                        tableColumn.primaryKeyConstraintName =\n                            primaryConstraint[\"constraint_name\"];\n                    }\n                }\n                const uniqueConstraints = columnConstraints.filter((constraint) => constraint[\"constraint_type\"] === \"UNIQUE\");\n                const isConstraintComposite = uniqueConstraints.every((uniqueConstraint) => {\n                    return dbConstraints.some((dbConstraint) => dbConstraint[\"constraint_type\"] ===\n                        \"UNIQUE\" &&\n                        dbConstraint[\"constraint_name\"] ===\n                            uniqueConstraint[\"constraint_name\"] &&\n                        dbConstraint[\"column_name\"] !==\n                            dbColumn[\"column_name\"]);\n                });\n                tableColumn.isUnique =\n                    uniqueConstraints.length > 0 &&\n                        !isConstraintComposite;\n                if (dbColumn.is_identity === \"YES\") {\n                    // Postgres 10+ Identity column\n                    tableColumn.isGenerated = true;\n                    tableColumn.generationStrategy = \"identity\";\n                    tableColumn.generatedIdentity =\n                        dbColumn.identity_generation;\n                }\n                else if (dbColumn[\"column_default\"] !== null &&\n                    dbColumn[\"column_default\"] !== undefined) {\n                    const serialDefaultName = `nextval('${this.buildSequenceName(table, dbColumn[\"column_name\"])}'::regclass)`;\n                    const serialDefaultPath = `nextval('${this.buildSequencePath(table, dbColumn[\"column_name\"])}'::regclass)`;\n                    const defaultWithoutQuotes = dbColumn[\"column_default\"].replace(/\"/g, \"\");\n                    if (defaultWithoutQuotes ===\n                        serialDefaultName ||\n                        defaultWithoutQuotes === serialDefaultPath) {\n                        tableColumn.isGenerated = true;\n                        tableColumn.generationStrategy = \"increment\";\n                    }\n                    else if (dbColumn[\"column_default\"] ===\n                        \"gen_random_uuid()\" ||\n                        /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                        if (tableColumn.type === \"uuid\") {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"uuid\";\n                        }\n                        else {\n                            tableColumn.default =\n                                dbColumn[\"column_default\"];\n                        }\n                    }\n                    else if (dbColumn[\"column_default\"] === \"now()\" ||\n                        dbColumn[\"column_default\"].indexOf(\"'now'::text\") !== -1) {\n                        tableColumn.default =\n                            dbColumn[\"column_default\"];\n                    }\n                    else {\n                        tableColumn.default = dbColumn[\"column_default\"].replace(/::[\\w\\s.[\\]\\-\"]+/g, \"\");\n                        tableColumn.default =\n                            tableColumn.default.replace(/^(-?\\d+)$/, \"'$1'\");\n                    }\n                }\n                if (dbColumn[\"is_generated\"] === \"ALWAYS\" &&\n                    dbColumn[\"generation_expression\"]) {\n                    // In postgres there is no VIRTUAL generated column type\n                    tableColumn.generatedType = \"STORED\";\n                    // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                    const asExpressionQuery = this.selectTypeormMetadataSql({\n                        database: currentDatabase,\n                        schema: dbTable[\"table_schema\"],\n                        table: dbTable[\"table_name\"],\n                        type: MetadataTableType.GENERATED_COLUMN,\n                        name: tableColumn.name,\n                    });\n                    const results = await this.query(asExpressionQuery.query, asExpressionQuery.parameters);\n                    if (results[0] && results[0].value) {\n                        tableColumn.asExpression = results[0].value;\n                    }\n                    else {\n                        tableColumn.asExpression = \"\";\n                    }\n                }\n                tableColumn.comment = dbColumn[\"description\"]\n                    ? dbColumn[\"description\"]\n                    : undefined;\n                if (dbColumn[\"character_set_name\"])\n                    tableColumn.charset =\n                        dbColumn[\"character_set_name\"];\n                if (dbColumn[\"collation_name\"])\n                    tableColumn.collation =\n                        dbColumn[\"collation_name\"];\n                return tableColumn;\n            }));\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter((dbConstraint) => {\n                return (dbConstraint[\"table_name\"] ===\n                    dbTable[\"table_name\"] &&\n                    dbConstraint[\"table_schema\"] ===\n                        dbTable[\"table_schema\"] &&\n                    dbConstraint[\"constraint_type\"] === \"UNIQUE\");\n            }), (dbConstraint) => dbConstraint[\"constraint_name\"]);\n            table.uniques = tableUniqueConstraints.map((constraint) => {\n                const uniques = dbConstraints.filter((dbC) => dbC[\"constraint_name\"] ===\n                    constraint[\"constraint_name\"]);\n                return new TableUnique({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: uniques.map((u) => u[\"column_name\"]),\n                    deferrable: constraint[\"deferrable\"]\n                        ? constraint[\"deferred\"]\n                        : undefined,\n                });\n            });\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter((dbConstraint) => {\n                return (dbConstraint[\"table_name\"] ===\n                    dbTable[\"table_name\"] &&\n                    dbConstraint[\"table_schema\"] ===\n                        dbTable[\"table_schema\"] &&\n                    dbConstraint[\"constraint_type\"] === \"CHECK\");\n            }), (dbConstraint) => dbConstraint[\"constraint_name\"]);\n            table.checks = tableCheckConstraints.map((constraint) => {\n                const checks = dbConstraints.filter((dbC) => dbC[\"constraint_name\"] ===\n                    constraint[\"constraint_name\"]);\n                return new TableCheck({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: checks.map((c) => c[\"column_name\"]),\n                    expression: constraint[\"expression\"].replace(/^\\s*CHECK\\s*\\((.*)\\)\\s*$/i, \"$1\"),\n                });\n            });\n            // find exclusion constraints of table, group them by constraint name and build TableExclusion.\n            const tableExclusionConstraints = OrmUtils.uniq(dbConstraints.filter((dbConstraint) => {\n                return (dbConstraint[\"table_name\"] ===\n                    dbTable[\"table_name\"] &&\n                    dbConstraint[\"table_schema\"] ===\n                        dbTable[\"table_schema\"] &&\n                    dbConstraint[\"constraint_type\"] === \"EXCLUDE\");\n            }), (dbConstraint) => dbConstraint[\"constraint_name\"]);\n            table.exclusions = tableExclusionConstraints.map((constraint) => {\n                return new TableExclusion({\n                    name: constraint[\"constraint_name\"],\n                    expression: constraint[\"expression\"].substring(8), // trim EXCLUDE from start of expression\n                });\n            });\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter((dbForeignKey) => {\n                return (dbForeignKey[\"table_name\"] ===\n                    dbTable[\"table_name\"] &&\n                    dbForeignKey[\"table_schema\"] ===\n                        dbTable[\"table_schema\"]);\n            }), (dbForeignKey) => dbForeignKey[\"constraint_name\"]);\n            table.foreignKeys = tableForeignKeyConstraints.map((dbForeignKey) => {\n                const foreignKeys = dbForeignKeys.filter((dbFk) => dbFk[\"constraint_name\"] ===\n                    dbForeignKey[\"constraint_name\"]);\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = getSchemaFromKey(dbForeignKey, \"referenced_table_schema\");\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"referenced_table_name\"], schema);\n                return new TableForeignKey({\n                    name: dbForeignKey[\"constraint_name\"],\n                    columnNames: foreignKeys.map((dbFk) => dbFk[\"column_name\"]),\n                    referencedSchema: dbForeignKey[\"referenced_table_schema\"],\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map((dbFk) => dbFk[\"referenced_column_name\"]),\n                    onDelete: dbForeignKey[\"on_delete\"],\n                    onUpdate: dbForeignKey[\"on_update\"],\n                    deferrable: dbForeignKey[\"deferrable\"]\n                        ? dbForeignKey[\"deferred\"]\n                        : undefined,\n                });\n            });\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter((dbIndex) => {\n                return (dbIndex[\"table_name\"] === dbTable[\"table_name\"] &&\n                    dbIndex[\"table_schema\"] === dbTable[\"table_schema\"]);\n            }), (dbIndex) => dbIndex[\"constraint_name\"]);\n            table.indices = tableIndexConstraints.map((constraint) => {\n                const indices = dbIndices.filter((index) => {\n                    return (index[\"table_schema\"] ===\n                        constraint[\"table_schema\"] &&\n                        index[\"table_name\"] === constraint[\"table_name\"] &&\n                        index[\"constraint_name\"] ===\n                            constraint[\"constraint_name\"]);\n                });\n                return new TableIndex({\n                    table: table,\n                    name: constraint[\"constraint_name\"],\n                    columnNames: indices.map((i) => i[\"column_name\"]),\n                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\n                    where: constraint[\"condition\"],\n                    isSpatial: constraint[\"index_type\"] === \"gist\",\n                    isFulltext: false,\n                });\n            });\n            return table;\n        }));\n    }\n    /**\n     * Builds create table sql.\n     */\n    createTableSql(table, createForeignKeys) {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(table, column))\n            .join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n            const isUniqueExist = table.uniques.some((unique) => unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name);\n            if (!isUniqueExist)\n                table.uniques.push(new TableUnique({\n                    name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n                    columnNames: [column.name],\n                }));\n        });\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                const uniqueName = unique.name\n                    ? unique.name\n                    : this.connection.namingStrategy.uniqueConstraintName(table, unique.columnNames);\n                const columnNames = unique.columnNames\n                    .map((columnName) => `\"${columnName}\"`)\n                    .join(\", \");\n                let constraint = `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n                if (unique.deferrable)\n                    constraint += ` DEFERRABLE ${unique.deferrable}`;\n                return constraint;\n            })\n                .join(\", \");\n            sql += `, ${uniquesSql}`;\n        }\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                const checkName = check.name\n                    ? check.name\n                    : this.connection.namingStrategy.checkConstraintName(table, check.expression);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            })\n                .join(\", \");\n            sql += `, ${checksSql}`;\n        }\n        if (table.exclusions.length > 0) {\n            const exclusionsSql = table.exclusions\n                .map((exclusion) => {\n                const exclusionName = exclusion.name\n                    ? exclusion.name\n                    : this.connection.namingStrategy.exclusionConstraintName(table, exclusion.expression);\n                return `CONSTRAINT \"${exclusionName}\" EXCLUDE ${exclusion.expression}`;\n            })\n                .join(\", \");\n            sql += `, ${exclusionsSql}`;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                const columnNames = fk.columnNames\n                    .map((columnName) => `\"${columnName}\"`)\n                    .join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table, fk.columnNames, this.getTablePath(fk), fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames\n                    .map((columnName) => `\"${columnName}\"`)\n                    .join(\", \");\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(this.getTablePath(fk))} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n                if (fk.deferrable)\n                    constraint += ` DEFERRABLE ${fk.deferrable}`;\n                return constraint;\n            })\n                .join(\", \");\n            sql += `, ${foreignKeysSql}`;\n        }\n        const primaryColumns = table.columns.filter((column) => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(table, primaryColumns.map((column) => column.name));\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n        sql += `)`;\n        table.columns\n            .filter((it) => it.comment)\n            .forEach((it) => (sql += `; COMMENT ON COLUMN ${this.escapePath(table)}.\"${it.name}\" IS ${this.escapeComment(it.comment)}`));\n        return new Query(sql);\n    }\n    /**\n     * Loads Postgres version.\n     */\n    async getVersion() {\n        const result = await this.query(`SELECT version()`);\n        return result[0][\"version\"].replace(/^PostgreSQL ([\\d.]+) .*$/, \"$1\");\n    }\n    /**\n     * Builds drop table sql.\n     */\n    dropTableSql(tableOrPath) {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);\n    }\n    createViewSql(view) {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        const viewName = this.escapePath(view);\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression}`);\n        }\n        else {\n            return new Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view\n                .expression(this.connection)\n                .getQuery()}`);\n        }\n    }\n    async insertViewDefinitionSql(view) {\n        const currentSchema = await this.getCurrentSchema();\n        let { schema, tableName: name } = this.driver.parseTableName(view);\n        if (!schema) {\n            schema = currentSchema;\n        }\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW;\n        const expression = typeof view.expression === \"string\"\n            ? view.expression.trim()\n            : view.expression(this.connection).getQuery();\n        return this.insertTypeormMetadataSql({\n            type,\n            schema,\n            name,\n            value: expression,\n        });\n    }\n    /**\n     * Builds drop view sql.\n     */\n    dropViewSql(view) {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        return new Query(`DROP ${materializedClause}VIEW ${this.escapePath(view)}`);\n    }\n    /**\n     * Builds remove view sql.\n     */\n    async deleteViewDefinitionSql(view) {\n        const currentSchema = await this.getCurrentSchema();\n        let { schema, tableName: name } = this.driver.parseTableName(view);\n        if (!schema) {\n            schema = currentSchema;\n        }\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW;\n        return this.deleteTypeormMetadataSql({ type, schema, name });\n    }\n    /**\n     * Drops ENUM type from given schemas.\n     */\n    async dropEnumTypes(schemaNames) {\n        const selectDropsQuery = `SELECT 'DROP TYPE IF EXISTS \"' || n.nspname || '\".\"' || t.typname || '\" CASCADE;' as \"query\" FROM \"pg_type\" \"t\" ` +\n            `INNER JOIN \"pg_enum\" \"e\" ON \"e\".\"enumtypid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n            `WHERE \"n\".\"nspname\" IN (${schemaNames}) GROUP BY \"n\".\"nspname\", \"t\".\"typname\"`;\n        const dropQueries = await this.query(selectDropsQuery);\n        await Promise.all(dropQueries.map((q) => this.query(q[\"query\"])));\n    }\n    /**\n     * Checks if enum with the given name exist in the database.\n     */\n    async hasEnumType(table, column) {\n        let { schema } = this.driver.parseTableName(table);\n        if (!schema) {\n            schema = await this.getCurrentSchema();\n        }\n        const enumName = this.buildEnumName(table, column, false, true);\n        const sql = `SELECT \"n\".\"nspname\", \"t\".\"typname\" FROM \"pg_type\" \"t\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n            `WHERE \"n\".\"nspname\" = '${schema}' AND \"t\".\"typname\" = '${enumName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Builds create ENUM type sql.\n     */\n    createEnumTypeSql(table, column, enumName) {\n        if (!enumName)\n            enumName = this.buildEnumName(table, column);\n        const enumValues = column\n            .enum.map((value) => `'${value.replace(\"'\", \"''\")}'`)\n            .join(\", \");\n        return new Query(`CREATE TYPE ${enumName} AS ENUM(${enumValues})`);\n    }\n    /**\n     * Builds create ENUM type sql.\n     */\n    dropEnumTypeSql(table, column, enumName) {\n        if (!enumName)\n            enumName = this.buildEnumName(table, column);\n        return new Query(`DROP TYPE ${enumName}`);\n    }\n    /**\n     * Builds create index sql.\n     */\n    createIndexSql(table, index) {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX${index.isConcurrent ? \" CONCURRENTLY\" : \"\"} \"${index.name}\" ON ${this.escapePath(table)} ${index.isSpatial ? \"USING GiST \" : \"\"}(${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n    /**\n     * Builds create view index sql.\n     */\n    createViewIndexSql(view, index) {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(view)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n    /**\n     * Builds drop index sql.\n     */\n    dropIndexSql(table, indexOrName) {\n        const indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName;\n        const concurrent = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.isConcurrent\n            : false;\n        const { schema } = this.driver.parseTableName(table);\n        return schema\n            ? new Query(`DROP INDEX ${concurrent ? \"CONCURRENTLY \" : \"\"}\"${schema}\".\"${indexName}\"`)\n            : new Query(`DROP INDEX ${concurrent ? \"CONCURRENTLY \" : \"\"}\"${indexName}\"`);\n    }\n    /**\n     * Builds create primary key sql.\n     */\n    createPrimaryKeySql(table, columnNames, constraintName) {\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames);\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n    /**\n     * Builds drop primary key sql.\n     */\n    dropPrimaryKeySql(table) {\n        if (!table.primaryColumns.length)\n            throw new TypeORMError(`Table ${table} has no primary keys.`);\n        const columnNames = table.primaryColumns.map((column) => column.name);\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName;\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n    /**\n     * Builds create unique constraint sql.\n     */\n    createUniqueConstraintSql(table, uniqueConstraint) {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`;\n        if (uniqueConstraint.deferrable)\n            sql += ` DEFERRABLE ${uniqueConstraint.deferrable}`;\n        return new Query(sql);\n    }\n    /**\n     * Builds drop unique constraint sql.\n     */\n    dropUniqueConstraintSql(table, uniqueOrName) {\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName.name\n            : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n    /**\n     * Builds create check constraint sql.\n     */\n    createCheckConstraintSql(table, checkConstraint) {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n    /**\n     * Builds drop check constraint sql.\n     */\n    dropCheckConstraintSql(table, checkOrName) {\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName.name\n            : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n    /**\n     * Builds create exclusion constraint sql.\n     */\n    createExclusionConstraintSql(table, exclusionConstraint) {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${exclusionConstraint.name}\" EXCLUDE ${exclusionConstraint.expression}`);\n    }\n    /**\n     * Builds drop exclusion constraint sql.\n     */\n    dropExclusionConstraintSql(table, exclusionOrName) {\n        const exclusionName = InstanceChecker.isTableExclusion(exclusionOrName)\n            ? exclusionOrName.name\n            : exclusionOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${exclusionName}\"`);\n    }\n    /**\n     * Builds create foreign key sql.\n     */\n    createForeignKeySql(table, foreignKey) {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n        if (foreignKey.deferrable)\n            sql += ` DEFERRABLE ${foreignKey.deferrable}`;\n        return new Query(sql);\n    }\n    /**\n     * Builds drop foreign key sql.\n     */\n    dropForeignKeySql(table, foreignKeyOrName) {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName.name\n            : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n    /**\n     * Builds sequence name from given table and column.\n     */\n    buildSequenceName(table, columnOrName) {\n        const { tableName } = this.driver.parseTableName(table);\n        const columnName = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName.name\n            : columnOrName;\n        let seqName = `${tableName}_${columnName}_seq`;\n        if (seqName.length > this.connection.driver.maxAliasLength) {\n            // note doesn't yet handle corner cases where .length differs from number of UTF-8 bytes\n            seqName = `${tableName.substring(0, 29)}_${columnName.substring(0, Math.max(29, 63 - table.name.length - 5))}_seq`;\n        }\n        return seqName;\n    }\n    buildSequencePath(table, columnOrName) {\n        const { schema } = this.driver.parseTableName(table);\n        return schema\n            ? `${schema}.${this.buildSequenceName(table, columnOrName)}`\n            : this.buildSequenceName(table, columnOrName);\n    }\n    /**\n     * Builds ENUM type name from given table and column.\n     */\n    buildEnumName(table, column, withSchema = true, disableEscape, toOld) {\n        const { schema, tableName } = this.driver.parseTableName(table);\n        let enumName = column.enumName\n            ? column.enumName\n            : `${tableName}_${column.name.toLowerCase()}_enum`;\n        if (schema && withSchema)\n            enumName = `${schema}.${enumName}`;\n        if (toOld)\n            enumName = enumName + \"_old\";\n        return enumName\n            .split(\".\")\n            .map((i) => {\n            return disableEscape ? i : `\"${i}\"`;\n        })\n            .join(\".\");\n    }\n    async getUserDefinedTypeName(table, column) {\n        let { schema, tableName: name } = this.driver.parseTableName(table);\n        if (!schema) {\n            schema = await this.getCurrentSchema();\n        }\n        const result = await this.query(`SELECT \"udt_schema\", \"udt_name\" ` +\n            `FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '${schema}' AND \"table_name\" = '${name}' AND \"column_name\"='${column.name}'`);\n        // docs: https://www.postgresql.org/docs/current/xtypes.html\n        // When you define a new base type, PostgreSQL automatically provides support for arrays of that type.\n        // The array type typically has the same name as the base type with the underscore character (_) prepended.\n        // ----\n        // so, we must remove this underscore character from enum type name\n        let udtName = result[0][\"udt_name\"];\n        if (udtName.indexOf(\"_\") === 0) {\n            udtName = udtName.substr(1, udtName.length);\n        }\n        return {\n            schema: result[0][\"udt_schema\"],\n            name: udtName,\n        };\n    }\n    /**\n     * Escapes a given comment so it's safe to include in a query.\n     */\n    escapeComment(comment) {\n        if (!comment || comment.length === 0) {\n            return \"NULL\";\n        }\n        comment = comment.replace(/'/g, \"''\").replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n        return `'${comment}'`;\n    }\n    /**\n     * Escapes given table or view path.\n     */\n    escapePath(target) {\n        const { schema, tableName } = this.driver.parseTableName(target);\n        if (schema && schema !== this.driver.searchSchema) {\n            return `\"${schema}\".\"${tableName}\"`;\n        }\n        return `\"${tableName}\"`;\n    }\n    /**\n     * Get the table name with table schema\n     * Note: Without ' or \"\n     */\n    async getTableNameWithSchema(target) {\n        const tableName = InstanceChecker.isTable(target) ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            const schemaResult = await this.query(`SELECT current_schema()`);\n            const schema = schemaResult[0][\"current_schema\"];\n            return `${schema}.${tableName}`;\n        }\n        else {\n            return `${tableName.split(\".\")[0]}.${tableName.split(\".\")[1]}`;\n        }\n    }\n    /**\n     * Builds a query for create column.\n     */\n    buildCreateColumnSql(table, column) {\n        let c = '\"' + column.name + '\"';\n        if (column.isGenerated === true &&\n            column.generationStrategy !== \"uuid\") {\n            if (column.generationStrategy === \"identity\") {\n                // Postgres 10+ Identity generated column\n                const generatedIdentityOrDefault = column.generatedIdentity || \"BY DEFAULT\";\n                c += ` ${column.type} GENERATED ${generatedIdentityOrDefault} AS IDENTITY`;\n            }\n            else {\n                // classic SERIAL primary column\n                if (column.type === \"integer\" ||\n                    column.type === \"int\" ||\n                    column.type === \"int4\")\n                    c += \" SERIAL\";\n                if (column.type === \"smallint\" || column.type === \"int2\")\n                    c += \" SMALLSERIAL\";\n                if (column.type === \"bigint\" || column.type === \"int8\")\n                    c += \" BIGSERIAL\";\n            }\n        }\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            c += \" \" + this.buildEnumName(table, column);\n            if (column.isArray)\n                c += \" array\";\n        }\n        else if (!column.isGenerated || column.type === \"uuid\") {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n        // Postgres only supports the stored generated column type\n        if (column.generatedType === \"STORED\" && column.asExpression) {\n            c += ` GENERATED ALWAYS AS (${column.asExpression}) STORED`;\n        }\n        if (column.charset)\n            c += ' CHARACTER SET \"' + column.charset + '\"';\n        if (column.collation)\n            c += ' COLLATE \"' + column.collation + '\"';\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n        if (column.isGenerated &&\n            column.generationStrategy === \"uuid\" &&\n            !column.default)\n            c += ` DEFAULT ${this.driver.uuidGenerator}`;\n        return c;\n    }\n    /**\n     * Checks if the PostgreSQL server has support for partitioned tables\n     */\n    async hasSupportForPartitionedTables() {\n        const result = await this.query(`SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'`);\n        return result.length ? true : false;\n    }\n    /**\n     * Change table comment.\n     */\n    async changeTableComment(tableOrName, newComment) {\n        const upQueries = [];\n        const downQueries = [];\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        newComment = this.escapeComment(newComment);\n        const comment = this.escapeComment(table.comment);\n        if (newComment === comment) {\n            return;\n        }\n        const newTable = table.clone();\n        upQueries.push(new Query(`COMMENT ON TABLE ${this.escapePath(newTable)} IS ${newComment}`));\n        downQueries.push(new Query(`COMMENT ON TABLE ${this.escapePath(table)} IS ${comment}`));\n        await this.executeQueries(upQueries, downQueries);\n        table.comment = newTable.comment;\n        this.replaceCachedTable(table, newTable);\n    }\n}\n\n//# sourceMappingURL=PostgresQueryRunner.js.map\n","import { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { VersionUtils } from \"../../util/VersionUtils\";\nimport { PostgresQueryRunner } from \"./PostgresQueryRunner\";\nimport { DriverUtils } from \"../DriverUtils\";\nimport { TypeORMError } from \"../../error\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Organizes communication with PostgreSQL DBMS.\n */\nexport class PostgresDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        /**\n         * Pool for slave databases.\n         * Used in replication.\n         */\n        this.slaves = [];\n        /**\n         * We store all created query runners because we need to release them.\n         */\n        this.connectedQueryRunners = [];\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"nested\";\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/postgresql/postgresql_data_types.htm\n         * @see https://www.postgresql.org/docs/9.2/static/datatype.html\n         */\n        this.supportedDataTypes = [\n            \"int\",\n            \"int2\",\n            \"int4\",\n            \"int8\",\n            \"smallint\",\n            \"integer\",\n            \"bigint\",\n            \"decimal\",\n            \"numeric\",\n            \"real\",\n            \"float\",\n            \"float4\",\n            \"float8\",\n            \"double precision\",\n            \"money\",\n            \"character varying\",\n            \"varchar\",\n            \"character\",\n            \"char\",\n            \"text\",\n            \"citext\",\n            \"hstore\",\n            \"bytea\",\n            \"bit\",\n            \"varbit\",\n            \"bit varying\",\n            \"timetz\",\n            \"timestamptz\",\n            \"timestamp\",\n            \"timestamp without time zone\",\n            \"timestamp with time zone\",\n            \"date\",\n            \"time\",\n            \"time without time zone\",\n            \"time with time zone\",\n            \"interval\",\n            \"bool\",\n            \"boolean\",\n            \"enum\",\n            \"point\",\n            \"line\",\n            \"lseg\",\n            \"box\",\n            \"path\",\n            \"polygon\",\n            \"circle\",\n            \"cidr\",\n            \"inet\",\n            \"macaddr\",\n            \"tsvector\",\n            \"tsquery\",\n            \"uuid\",\n            \"xml\",\n            \"json\",\n            \"jsonb\",\n            \"int4range\",\n            \"int8range\",\n            \"numrange\",\n            \"tsrange\",\n            \"tstzrange\",\n            \"daterange\",\n            \"int4multirange\",\n            \"int8multirange\",\n            \"nummultirange\",\n            \"tsmultirange\",\n            \"tstzmultirange\",\n            \"datemultirange\",\n            \"geometry\",\n            \"geography\",\n            \"cube\",\n            \"ltree\",\n        ];\n        /**\n         * Returns type of upsert supported by driver if any\n         */\n        this.supportedUpsertTypes = [\"on-conflict-do-update\"];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [\"geometry\", \"geography\"];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"character varying\",\n            \"varchar\",\n            \"character\",\n            \"char\",\n            \"bit\",\n            \"varbit\",\n            \"bit varying\",\n        ];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"numeric\",\n            \"decimal\",\n            \"interval\",\n            \"time without time zone\",\n            \"time with time zone\",\n            \"timestamp without time zone\",\n            \"timestamp with time zone\",\n        ];\n        /**\n         * Gets list of column data types that support scale by a driver.\n         */\n        this.withScaleColumnTypes = [\"numeric\", \"decimal\"];\n        /**\n         * Orm has special columns and we need to know what database column types should be for those types.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"timestamp\",\n            createDateDefault: \"now()\",\n            updateDate: \"timestamp\",\n            updateDateDefault: \"now()\",\n            deleteDate: \"timestamp\",\n            deleteDateNullable: true,\n            version: \"int4\",\n            treeLevel: \"int4\",\n            migrationId: \"int4\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"int8\",\n            cacheId: \"int4\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"int8\",\n            cacheDuration: \"int4\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"text\",\n        };\n        /**\n         * The prefix used for the parameters\n         */\n        this.parametersPrefix = \"$\";\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {\n            character: { length: 1 },\n            bit: { length: 1 },\n            interval: { precision: 6 },\n            \"time without time zone\": { precision: 6 },\n            \"time with time zone\": { precision: 6 },\n            \"timestamp without time zone\": { precision: 6 },\n            \"timestamp with time zone\": { precision: 6 },\n        };\n        /**\n         * Max length allowed by Postgres for aliases.\n         * @see https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS\n         */\n        this.maxAliasLength = 63;\n        this.isGeneratedColumnsSupported = false;\n        this.cteCapabilities = {\n            enabled: true,\n            writable: true,\n            requiresRecursiveHint: true,\n            materializedHint: true,\n        };\n        if (!connection) {\n            return;\n        }\n        this.connection = connection;\n        this.options = connection.options;\n        this.isReplicated = this.options.replication ? true : false;\n        if (this.options.useUTC) {\n            process.env.PGTZ = \"UTC\";\n        }\n        // load postgres package\n        this.loadDependencies();\n        this.database = DriverUtils.buildDriverOptions(this.options.replication\n            ? this.options.replication.master\n            : this.options).database;\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema;\n        // ObjectUtils.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect() {\n        if (this.options.replication) {\n            this.slaves = await Promise.all(this.options.replication.slaves.map((slave) => {\n                return this.createPool(this.options, slave);\n            }));\n            this.master = await this.createPool(this.options, this.options.replication.master);\n        }\n        else {\n            this.master = await this.createPool(this.options, this.options);\n        }\n        if (!this.database || !this.searchSchema) {\n            const queryRunner = await this.createQueryRunner(\"master\");\n            if (!this.database) {\n                this.database = await queryRunner.getCurrentDatabase();\n            }\n            if (!this.searchSchema) {\n                this.searchSchema = await queryRunner.getCurrentSchema();\n            }\n            await queryRunner.release();\n        }\n        if (!this.schema) {\n            this.schema = this.searchSchema;\n        }\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect() {\n        const extensionsMetadata = await this.checkMetadataForExtensions();\n        const [connection, release] = await this.obtainMasterConnection();\n        const installExtensions = this.options.installExtensions === undefined ||\n            this.options.installExtensions;\n        if (installExtensions && extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, connection);\n        }\n        const results = (await this.executeQuery(connection, \"SELECT version();\"));\n        const versionString = results.rows[0].version.replace(/^PostgreSQL ([\\d.]+) .*$/, \"$1\");\n        this.version = versionString;\n        this.isGeneratedColumnsSupported = VersionUtils.isGreaterOrEqual(versionString, \"12.0\");\n        await release();\n    }\n    async enableExtensions(extensionsMetadata, connection) {\n        const { logger } = this.connection;\n        const { hasUuidColumns, hasCitextColumns, hasHstoreColumns, hasCubeColumns, hasGeometryColumns, hasLtreeColumns, hasExclusionConstraints, } = extensionsMetadata;\n        if (hasUuidColumns)\n            try {\n                await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS \"${this.options.uuidExtension || \"uuid-ossp\"}\"`);\n            }\n            catch (_) {\n                logger.log(\"warn\", `At least one of the entities has uuid column, but the '${this.options.uuidExtension || \"uuid-ossp\"}' extension cannot be installed automatically. Please install it manually using superuser rights, or select another uuid extension.`);\n            }\n        if (hasCitextColumns)\n            try {\n                await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS \"citext\"`);\n            }\n            catch (_) {\n                logger.log(\"warn\", \"At least one of the entities has citext column, but the 'citext' extension cannot be installed automatically. Please install it manually using superuser rights\");\n            }\n        if (hasHstoreColumns)\n            try {\n                await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS \"hstore\"`);\n            }\n            catch (_) {\n                logger.log(\"warn\", \"At least one of the entities has hstore column, but the 'hstore' extension cannot be installed automatically. Please install it manually using superuser rights\");\n            }\n        if (hasGeometryColumns)\n            try {\n                await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS \"postgis\"`);\n            }\n            catch (_) {\n                logger.log(\"warn\", \"At least one of the entities has a geometry column, but the 'postgis' extension cannot be installed automatically. Please install it manually using superuser rights\");\n            }\n        if (hasCubeColumns)\n            try {\n                await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS \"cube\"`);\n            }\n            catch (_) {\n                logger.log(\"warn\", \"At least one of the entities has a cube column, but the 'cube' extension cannot be installed automatically. Please install it manually using superuser rights\");\n            }\n        if (hasLtreeColumns)\n            try {\n                await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS \"ltree\"`);\n            }\n            catch (_) {\n                logger.log(\"warn\", \"At least one of the entities has a ltree column, but the 'ltree' extension cannot be installed automatically. Please install it manually using superuser rights\");\n            }\n        if (hasExclusionConstraints)\n            try {\n                // The btree_gist extension provides operator support in PostgreSQL exclusion constraints\n                await this.executeQuery(connection, `CREATE EXTENSION IF NOT EXISTS \"btree_gist\"`);\n            }\n            catch (_) {\n                logger.log(\"warn\", \"At least one of the entities has an exclusion constraint, but the 'btree_gist' extension cannot be installed automatically. Please install it manually using superuser rights\");\n            }\n    }\n    async checkMetadataForExtensions() {\n        const hasUuidColumns = this.connection.entityMetadatas.some((metadata) => {\n            return (metadata.generatedColumns.filter((column) => column.generationStrategy === \"uuid\").length > 0);\n        });\n        const hasCitextColumns = this.connection.entityMetadatas.some((metadata) => {\n            return (metadata.columns.filter((column) => column.type === \"citext\").length > 0);\n        });\n        const hasHstoreColumns = this.connection.entityMetadatas.some((metadata) => {\n            return (metadata.columns.filter((column) => column.type === \"hstore\").length > 0);\n        });\n        const hasCubeColumns = this.connection.entityMetadatas.some((metadata) => {\n            return (metadata.columns.filter((column) => column.type === \"cube\")\n                .length > 0);\n        });\n        const hasGeometryColumns = this.connection.entityMetadatas.some((metadata) => {\n            return (metadata.columns.filter((column) => this.spatialTypes.indexOf(column.type) >= 0).length > 0);\n        });\n        const hasLtreeColumns = this.connection.entityMetadatas.some((metadata) => {\n            return (metadata.columns.filter((column) => column.type === \"ltree\")\n                .length > 0);\n        });\n        const hasExclusionConstraints = this.connection.entityMetadatas.some((metadata) => {\n            return metadata.exclusions.length > 0;\n        });\n        return {\n            hasUuidColumns,\n            hasCitextColumns,\n            hasHstoreColumns,\n            hasCubeColumns,\n            hasGeometryColumns,\n            hasLtreeColumns,\n            hasExclusionConstraints,\n            hasExtensions: hasUuidColumns ||\n                hasCitextColumns ||\n                hasHstoreColumns ||\n                hasGeometryColumns ||\n                hasCubeColumns ||\n                hasLtreeColumns ||\n                hasExclusionConstraints,\n        };\n    }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"postgres\"));\n        await this.closePool(this.master);\n        await Promise.all(this.slaves.map((slave) => this.closePool(slave)));\n        this.master = undefined;\n        this.slaves = [];\n    }\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        return new PostgresQueryRunner(this, mode);\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date ||\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"timestamp with time zone\" ||\n            columnMetadata.type === \"timestamp without time zone\") {\n            return DateUtils.mixedDateToDate(value);\n        }\n        else if ([\"json\", \"jsonb\", ...this.spatialTypes].indexOf(columnMetadata.type) >= 0) {\n            return JSON.stringify(value);\n        }\n        else if (columnMetadata.type === \"hstore\") {\n            if (typeof value === \"string\") {\n                return value;\n            }\n            else {\n                // https://www.postgresql.org/docs/9.0/hstore.html\n                const quoteString = (value) => {\n                    // If a string to be quoted is `null` or `undefined`, we return a literal unquoted NULL.\n                    // This way, NULL values can be stored in the hstore object.\n                    if (value === null || typeof value === \"undefined\") {\n                        return \"NULL\";\n                    }\n                    // Convert non-null values to string since HStore only stores strings anyway.\n                    // To include a double quote or a backslash in a key or value, escape it with a backslash.\n                    return `\"${`${value}`.replace(/(?=[\"\\\\])/g, \"\\\\\")}\"`;\n                };\n                return Object.keys(value)\n                    .map((key) => quoteString(key) + \"=>\" + quoteString(value[key]))\n                    .join(\",\");\n            }\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        else if (columnMetadata.type === \"cube\") {\n            if (columnMetadata.isArray) {\n                return `{${value\n                    .map((cube) => `\"(${cube.join(\",\")})\"`)\n                    .join(\",\")}}`;\n            }\n            return `(${value.join(\",\")})`;\n        }\n        else if (columnMetadata.type === \"ltree\") {\n            return value\n                .split(\".\")\n                .filter(Boolean)\n                .join(\".\")\n                .replace(/[\\s]+/g, \"_\");\n        }\n        else if ((columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") &&\n            !columnMetadata.isArray) {\n            return \"\" + value;\n        }\n        return value;\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value)\n                : value;\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date ||\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"timestamp with time zone\" ||\n            columnMetadata.type === \"timestamp without time zone\") {\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"hstore\") {\n            if (columnMetadata.hstoreType === \"object\") {\n                const unescapeString = (str) => str.replace(/\\\\./g, (m) => m[1]);\n                const regexp = /\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"=>(?:(NULL)|\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")(?:,|$)/g;\n                const object = {};\n                `${value}`.replace(regexp, (_, key, nullValue, stringValue) => {\n                    object[unescapeString(key)] = nullValue\n                        ? null\n                        : unescapeString(stringValue);\n                    return \"\";\n                });\n                value = object;\n            }\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        else if (columnMetadata.type === \"cube\") {\n            value = value.replace(/[()\\s]+/g, \"\"); // remove whitespace\n            if (columnMetadata.isArray) {\n                /**\n                 * Strips these groups from `{\"1,2,3\",\"\",NULL}`:\n                 * 1. [\"1,2,3\", undefined]  <- cube of arity 3\n                 * 2. [\"\", undefined]         <- cube of arity 0\n                 * 3. [undefined, \"NULL\"]     <- NULL\n                 */\n                const regexp = /(?:\"((?:[\\d\\s.,])*)\")|(?:(NULL))/g;\n                const unparsedArrayString = value;\n                value = [];\n                let cube = null;\n                // Iterate through all regexp matches for cubes/null in array\n                while ((cube = regexp.exec(unparsedArrayString)) !== null) {\n                    if (cube[1] !== undefined) {\n                        value.push(cube[1].split(\",\").filter(Boolean).map(Number));\n                    }\n                    else {\n                        value.push(undefined);\n                    }\n                }\n            }\n            else {\n                value = value.split(\",\").filter(Boolean).map(Number);\n            }\n        }\n        else if (columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") {\n            if (columnMetadata.isArray) {\n                if (value === \"{}\")\n                    return [];\n                // manually convert enum array to array of values (pg does not support, see https://github.com/brianc/node-pg-types/issues/56)\n                value = value\n                    .substr(1, value.length - 2)\n                    .split(\",\")\n                    .map((val) => {\n                    // replace double quotes from the beginning and from the end\n                    if (val.startsWith(`\"`) && val.endsWith(`\"`))\n                        val = val.slice(1, -1);\n                    // replace double escaped backslash to single escaped e.g. \\\\\\\\ -> \\\\\n                    val = val.replace(/(\\\\\\\\)/g, \"\\\\\");\n                    // replace escaped double quotes to non-escaped e.g. \\\"asd\\\" -> \"asd\"\n                    return val.replace(/(\\\\\")/g, '\"');\n                });\n                // convert to number if that exists in possible enum options\n                value = value.map((val) => {\n                    return !isNaN(+val) &&\n                        columnMetadata.enum.indexOf(parseInt(val)) >= 0\n                        ? parseInt(val)\n                        : val;\n                });\n            }\n            else {\n                // convert to number if that exists in possible enum options\n                value =\n                    !isNaN(+value) &&\n                        columnMetadata.enum.indexOf(parseInt(value)) >= 0\n                        ? parseInt(value)\n                        : value;\n            }\n        }\n        else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value;\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    }\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql, parameters, nativeParameters) {\n        const escapedParameters = Object.keys(nativeParameters).map((key) => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n        const parameterIndexMap = new Map();\n        sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray, key) => {\n            if (!parameters.hasOwnProperty(key)) {\n                return full;\n            }\n            if (parameterIndexMap.has(key)) {\n                return this.parametersPrefix + parameterIndexMap.get(key);\n            }\n            let value = parameters[key];\n            if (isArray) {\n                return value\n                    .map((v) => {\n                    escapedParameters.push(v);\n                    return this.createParameter(key, escapedParameters.length - 1);\n                })\n                    .join(\", \");\n            }\n            if (typeof value === \"function\") {\n                return value();\n            }\n            escapedParameters.push(value);\n            parameterIndexMap.set(key, escapedParameters.length);\n            return this.createParameter(key, escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName) {\n        return '\"' + columnName + '\"';\n    }\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName, schema) {\n        let tablePath = [tableName];\n        if (schema) {\n            tablePath.unshift(schema);\n        }\n        return tablePath.join(\".\");\n    }\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(target) {\n        const driverDatabase = this.database;\n        const driverSchema = this.schema;\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name);\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName);\n            return {\n                database: target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema: target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            };\n        }\n        const parts = target.split(\".\");\n        return {\n            database: driverDatabase,\n            schema: (parts.length > 1 ? parts[0] : undefined) || driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        };\n    }\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column) {\n        if (column.type === Number ||\n            column.type === \"int\" ||\n            column.type === \"int4\") {\n            return \"integer\";\n        }\n        else if (column.type === String || column.type === \"varchar\") {\n            return \"character varying\";\n        }\n        else if (column.type === Date || column.type === \"timestamp\") {\n            return \"timestamp without time zone\";\n        }\n        else if (column.type === \"timestamptz\") {\n            return \"timestamp with time zone\";\n        }\n        else if (column.type === \"time\") {\n            return \"time without time zone\";\n        }\n        else if (column.type === \"timetz\") {\n            return \"time with time zone\";\n        }\n        else if (column.type === Boolean || column.type === \"bool\") {\n            return \"boolean\";\n        }\n        else if (column.type === \"simple-array\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-enum\") {\n            return \"enum\";\n        }\n        else if (column.type === \"int2\") {\n            return \"smallint\";\n        }\n        else if (column.type === \"int8\") {\n            return \"bigint\";\n        }\n        else if (column.type === \"decimal\") {\n            return \"numeric\";\n        }\n        else if (column.type === \"float8\" || column.type === \"float\") {\n            return \"double precision\";\n        }\n        else if (column.type === \"float4\") {\n            return \"real\";\n        }\n        else if (column.type === \"char\") {\n            return \"character\";\n        }\n        else if (column.type === \"varbit\") {\n            return \"bit varying\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata) {\n        const defaultValue = columnMetadata.default;\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined;\n        }\n        if (columnMetadata.isArray && Array.isArray(defaultValue)) {\n            return `'{${defaultValue\n                .map((val) => `${val}`)\n                .join(\",\")}}'`;\n        }\n        if ((columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\" ||\n            typeof defaultValue === \"number\" ||\n            typeof defaultValue === \"string\") &&\n            defaultValue !== undefined) {\n            return `'${defaultValue}'`;\n        }\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"true\" : \"false\";\n        }\n        if (typeof defaultValue === \"function\") {\n            const value = defaultValue();\n            return this.normalizeDatetimeFunction(value);\n        }\n        if (typeof defaultValue === \"object\") {\n            return `'${JSON.stringify(defaultValue)}'`;\n        }\n        return `${defaultValue}`;\n    }\n    /**\n     * Compares \"default\" value of the column.\n     * Postgres sorts json values before it is saved, so in that case a deep comparison has to be performed to see if has changed.\n     */\n    defaultEqual(columnMetadata, tableColumn) {\n        if ([\"json\", \"jsonb\"].includes(columnMetadata.type) &&\n            ![\"function\", \"undefined\"].includes(typeof columnMetadata.default)) {\n            const tableColumnDefault = typeof tableColumn.default === \"string\"\n                ? JSON.parse(tableColumn.default.substring(1, tableColumn.default.length - 1))\n                : tableColumn.default;\n            return OrmUtils.deepCompare(columnMetadata.default, tableColumnDefault);\n        }\n        const columnDefault = this.lowerDefaultValueIfNecessary(this.normalizeDefault(columnMetadata));\n        return columnDefault === tableColumn.default;\n    }\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column) {\n        return column.entityMetadata.uniques.some((uq) => uq.columns.length === 1 && uq.columns[0] === column);\n    }\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column) {\n        return column.length ? column.length.toString() : \"\";\n    }\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column) {\n        let type = column.type;\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.type === \"time without time zone\") {\n            type =\n                \"TIME\" +\n                    (column.precision !== null && column.precision !== undefined\n                        ? \"(\" + column.precision + \")\"\n                        : \"\");\n        }\n        else if (column.type === \"time with time zone\") {\n            type =\n                \"TIME\" +\n                    (column.precision !== null && column.precision !== undefined\n                        ? \"(\" + column.precision + \")\"\n                        : \"\") +\n                    \" WITH TIME ZONE\";\n        }\n        else if (column.type === \"timestamp without time zone\") {\n            type =\n                \"TIMESTAMP\" +\n                    (column.precision !== null && column.precision !== undefined\n                        ? \"(\" + column.precision + \")\"\n                        : \"\");\n        }\n        else if (column.type === \"timestamp with time zone\") {\n            type =\n                \"TIMESTAMP\" +\n                    (column.precision !== null && column.precision !== undefined\n                        ? \"(\" + column.precision + \")\"\n                        : \"\") +\n                    \" WITH TIME ZONE\";\n        }\n        else if (this.spatialTypes.indexOf(column.type) >= 0) {\n            if (column.spatialFeatureType != null && column.srid != null) {\n                type = `${column.type}(${column.spatialFeatureType},${column.srid})`;\n            }\n            else if (column.spatialFeatureType != null) {\n                type = `${column.type}(${column.spatialFeatureType})`;\n            }\n            else {\n                type = column.type;\n            }\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    }\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    async obtainMasterConnection() {\n        if (!this.master) {\n            throw new TypeORMError(\"Driver not Connected\");\n        }\n        return new Promise((ok, fail) => {\n            this.master.connect((err, connection, release) => {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    }\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    async obtainSlaveConnection() {\n        if (!this.slaves.length) {\n            return this.obtainMasterConnection();\n        }\n        const random = Math.floor(Math.random() * this.slaves.length);\n        return new Promise((ok, fail) => {\n            this.slaves[random].connect((err, connection, release) => {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     *\n     * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts\n     */\n    createGeneratedMap(metadata, insertResult) {\n        if (!insertResult)\n            return undefined;\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(map, column.createValueMap(insertResult[key]));\n                // OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column))); // TODO: probably should be like there, but fails on enums, fix later\n            }\n            return map;\n        }, {});\n    }\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns, columnMetadatas) {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find((c) => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            const isColumnChanged = tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadata.length ||\n                tableColumn.isArray !== columnMetadata.isArray ||\n                tableColumn.precision !== columnMetadata.precision ||\n                (columnMetadata.scale !== undefined &&\n                    tableColumn.scale !== columnMetadata.scale) ||\n                tableColumn.comment !==\n                    this.escapeComment(columnMetadata.comment) ||\n                (!tableColumn.isGenerated &&\n                    !this.defaultEqual(columnMetadata, tableColumn)) || // we included check for generated here, because generated columns already can have default values\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                tableColumn.enumName !== columnMetadata.enumName ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map((val) => val + \"\"))) || // enums in postgres are always strings\n                tableColumn.isGenerated !== columnMetadata.isGenerated ||\n                (tableColumn.spatialFeatureType || \"\").toLowerCase() !==\n                    (columnMetadata.spatialFeatureType || \"\").toLowerCase() ||\n                tableColumn.srid !== columnMetadata.srid ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                (tableColumn.asExpression || \"\").trim() !==\n                    (columnMetadata.asExpression || \"\").trim();\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         columnMetadata.length,\n            //     )\n            //     console.log(\n            //         \"isArray:\",\n            //         tableColumn.isArray,\n            //         columnMetadata.isArray,\n            //     )\n            //     console.log(\n            //         \"precision:\",\n            //         tableColumn.precision,\n            //         columnMetadata.precision,\n            //     )\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\n            //     console.log(\n            //         \"comment:\",\n            //         tableColumn.comment,\n            //         this.escapeComment(columnMetadata.comment),\n            //     )\n            //     console.log(\n            //         \"enumName:\",\n            //         tableColumn.enumName,\n            //         columnMetadata.enumName,\n            //     )\n            //     console.log(\n            //         \"enum:\",\n            //         tableColumn.enum &&\n            //             columnMetadata.enum &&\n            //             !OrmUtils.isArraysEqual(\n            //                 tableColumn.enum,\n            //                 columnMetadata.enum.map((val) => val + \"\"),\n            //             ),\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"isGenerated:\",\n            //         tableColumn.isGenerated,\n            //         columnMetadata.isGenerated,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         (tableColumn.asExpression || \"\").trim(),\n            //         (columnMetadata.asExpression || \"\").trim(),\n            //     )\n            //     console.log(\n            //         \"collation:\",\n            //         tableColumn.collation,\n            //         columnMetadata.collation,\n            //     )\n            //     console.log(\n            //         \"isGenerated 2:\",\n            //         !tableColumn.isGenerated &&\n            //             this.lowerDefaultValueIfNecessary(\n            //                 this.normalizeDefault(columnMetadata),\n            //             ) !== tableColumn.default,\n            //     )\n            //     console.log(\n            //         \"spatialFeatureType:\",\n            //         (tableColumn.spatialFeatureType || \"\").toLowerCase(),\n            //         (columnMetadata.spatialFeatureType || \"\").toLowerCase(),\n            //     )\n            //     console.log(\"srid\", tableColumn.srid, columnMetadata.srid)\n            //     console.log(\"==========================================\")\n            // }\n            return isColumnChanged;\n        });\n    }\n    lowerDefaultValueIfNecessary(value) {\n        // Postgres saves function calls in default value as lowercase #2733\n        if (!value) {\n            return value;\n        }\n        return value\n            .split(`'`)\n            .map((v, i) => {\n            return i % 2 === 1 ? v : v.toLowerCase();\n        })\n            .join(`'`);\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported() {\n        return true;\n    }\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported() {\n        return true;\n    }\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported() {\n        return false;\n    }\n    get uuidGenerator() {\n        return this.options.uuidExtension === \"pgcrypto\"\n            ? \"gen_random_uuid()\"\n            : \"uuid_generate_v4()\";\n    }\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName, index) {\n        return this.parametersPrefix + (index + 1);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads postgres query stream package.\n     */\n    loadStreamDependency() {\n        try {\n            return PlatformTools.load(\"pg-query-stream\");\n        }\n        catch (e) {\n            // todo: better error for browser env\n            throw new TypeORMError(`To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.`);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        try {\n            const postgres = this.options.driver || PlatformTools.load(\"pg\");\n            this.postgres = postgres;\n            try {\n                const pgNative = this.options.nativeDriver || PlatformTools.load(\"pg-native\");\n                if (pgNative && this.postgres.native)\n                    this.postgres = this.postgres.native;\n            }\n            catch (e) { }\n        }\n        catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    }\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    async createPool(options, credentials) {\n        const { logger } = this.connection;\n        credentials = Object.assign({}, credentials);\n        // build connection options for the driver\n        // See: https://github.com/brianc/node-postgres/tree/master/packages/pg-pool#create\n        const connectionOptions = Object.assign({}, {\n            connectionString: credentials.url,\n            host: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            ssl: credentials.ssl,\n            connectionTimeoutMillis: options.connectTimeoutMS,\n            application_name: options.applicationName ?? credentials.applicationName,\n            max: options.poolSize,\n        }, options.extra || {});\n        if (options.parseInt8 !== undefined) {\n            if (this.postgres.defaults &&\n                Object.getOwnPropertyDescriptor(this.postgres.defaults, \"parseInt8\")?.set) {\n                this.postgres.defaults.parseInt8 = options.parseInt8;\n            }\n            else {\n                logger.log(\"warn\", \"Attempted to set parseInt8 option, but the postgres driver does not support setting defaults.parseInt8. This option will be ignored.\");\n            }\n        }\n        // create a connection pool\n        const pool = new this.postgres.Pool(connectionOptions);\n        const poolErrorHandler = options.poolErrorHandler ||\n            ((error) => logger.log(\"warn\", `Postgres pool raised an error. ${error}`));\n        /*\n          Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n          cause the hosting app to crash.\n         */\n        pool.on(\"error\", poolErrorHandler);\n        return new Promise((ok, fail) => {\n            pool.connect((err, connection, release) => {\n                if (err)\n                    return fail(err);\n                if (options.logNotifications) {\n                    connection.on(\"notice\", (msg) => {\n                        msg && this.connection.logger.log(\"info\", msg.message);\n                    });\n                    connection.on(\"notification\", (msg) => {\n                        msg &&\n                            this.connection.logger.log(\"info\", `Received NOTIFY on channel ${msg.channel}: ${msg.payload}.`);\n                    });\n                }\n                release();\n                ok(pool);\n            });\n        });\n    }\n    /**\n     * Closes connection pool.\n     */\n    async closePool(pool) {\n        while (this.connectedQueryRunners.length) {\n            await this.connectedQueryRunners[0].release();\n        }\n        return new Promise((ok, fail) => {\n            pool.end((err) => (err ? fail(err) : ok()));\n        });\n    }\n    /**\n     * Executes given query.\n     */\n    executeQuery(connection, query) {\n        this.connection.logger.logQuery(query);\n        return new Promise((ok, fail) => {\n            connection.query(query, (err, result) => err ? fail(err) : ok(result));\n        });\n    }\n    /**\n     * If parameter is a datetime function, e.g. \"CURRENT_TIMESTAMP\", normalizes it.\n     * Otherwise returns original input.\n     */\n    normalizeDatetimeFunction(value) {\n        // check if input is datetime function\n        const upperCaseValue = value.toUpperCase();\n        const isDatetimeFunction = upperCaseValue.indexOf(\"CURRENT_TIMESTAMP\") !== -1 ||\n            upperCaseValue.indexOf(\"CURRENT_DATE\") !== -1 ||\n            upperCaseValue.indexOf(\"CURRENT_TIME\") !== -1 ||\n            upperCaseValue.indexOf(\"LOCALTIMESTAMP\") !== -1 ||\n            upperCaseValue.indexOf(\"LOCALTIME\") !== -1;\n        if (isDatetimeFunction) {\n            // extract precision, e.g. \"(3)\"\n            const precision = value.match(/\\(\\d+\\)/);\n            if (upperCaseValue.indexOf(\"CURRENT_TIMESTAMP\") !== -1) {\n                return precision\n                    ? `('now'::text)::timestamp${precision[0]} with time zone`\n                    : \"now()\";\n            }\n            else if (upperCaseValue === \"CURRENT_DATE\") {\n                return \"('now'::text)::date\";\n            }\n            else if (upperCaseValue.indexOf(\"CURRENT_TIME\") !== -1) {\n                return precision\n                    ? `('now'::text)::time${precision[0]} with time zone`\n                    : \"('now'::text)::time with time zone\";\n            }\n            else if (upperCaseValue.indexOf(\"LOCALTIMESTAMP\") !== -1) {\n                return precision\n                    ? `('now'::text)::timestamp${precision[0]} without time zone`\n                    : \"('now'::text)::timestamp without time zone\";\n            }\n            else if (upperCaseValue.indexOf(\"LOCALTIME\") !== -1) {\n                return precision\n                    ? `('now'::text)::time${precision[0]} without time zone`\n                    : \"('now'::text)::time without time zone\";\n            }\n        }\n        return value;\n    }\n    /**\n     * Escapes a given comment.\n     */\n    escapeComment(comment) {\n        if (!comment)\n            return comment;\n        comment = comment.replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n        return comment;\n    }\n}\n\n//# sourceMappingURL=PostgresDriver.js.map\n","import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ExpoQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Starts transaction. Within Expo, all database operations happen in a\n     * transaction context, so issuing a `BEGIN TRANSACTION` command is\n     * redundant and will result in the following error:\n     *\n     * `Error: Error code 1: cannot start a transaction within a transaction`\n     *\n     * Instead, we keep track of a `Transaction` object in `this.transaction`\n     * and continue using the same object until we wish to commit the\n     * transaction.\n     */\n    async startTransaction() {\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        this.transactionDepth += 1;\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     * Since Expo will automatically commit the transaction once all the\n     * callbacks of the transaction object have been completed, \"committing\" a\n     * transaction in this driver's context means that we delete the transaction\n     * object and set the stage for the next transaction.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive &&\n            typeof this.transaction === \"undefined\")\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        this.transaction = undefined;\n        this.isTransactionActive = false;\n        this.transactionDepth -= 1;\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     * This method's functionality is identical to `commitTransaction()` because\n     * the transaction lifecycle is handled within the Expo transaction object.\n     * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive &&\n            typeof this.transaction === \"undefined\")\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        this.transaction = undefined;\n        this.isTransactionActive = false;\n        this.transactionDepth -= 1;\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        const databaseConnection = await this.connect();\n        return new Promise((ok, fail) => {\n            databaseConnection.exec([{ sql: \"PRAGMA foreign_keys = OFF\", args: [] }], false, (err) => (err ? fail(err) : ok()));\n        });\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        const databaseConnection = await this.connect();\n        return new Promise((ok, fail) => {\n            databaseConnection.exec([{ sql: \"PRAGMA foreign_keys = ON\", args: [] }], false, (err) => (err ? fail(err) : ok()));\n        });\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            const broadcasterResult = new BroadcasterResult();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            this.broadcaster.broadcastBeforeQueryEvent(broadcasterResult, query, parameters);\n            const queryStartTime = +new Date();\n            // All Expo SQL queries are executed in a transaction context\n            databaseConnection.transaction(async (transaction) => {\n                if (typeof this.transaction === \"undefined\") {\n                    await this.startTransaction();\n                    this.transaction = transaction;\n                }\n                this.transaction.executeSql(query, parameters, async (t, raw) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, true, queryExecutionTime, raw, undefined);\n                    await broadcasterResult.wait();\n                    if (maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime) {\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                    }\n                    const result = new QueryResult();\n                    if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                        result.affected = raw.rowsAffected;\n                    }\n                    if (raw?.hasOwnProperty(\"rows\")) {\n                        let resultSet = [];\n                        for (let i = 0; i < raw.rows.length; i++) {\n                            resultSet.push(raw.rows.item(i));\n                        }\n                        result.raw = resultSet;\n                        result.records = resultSet;\n                    }\n                    // return id of inserted row, if query was insert statement.\n                    if (query.startsWith(\"INSERT INTO\")) {\n                        result.raw = raw.insertId;\n                    }\n                    if (useStructuredResult) {\n                        ok(result);\n                    }\n                    else {\n                        ok(result.raw);\n                    }\n                }, async (t, err) => {\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                    this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, false, undefined, undefined, err);\n                    await broadcasterResult.wait();\n                    fail(new QueryFailedError(query, parameters, err));\n                });\n            }, async (err) => {\n                await this.rollbackTransaction();\n                fail(err);\n            }, () => {\n                this.isTransactionActive = false;\n                this.transaction = undefined;\n            });\n        });\n    }\n}\n\n//# sourceMappingURL=ExpoQueryRunner.js.map\n","import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\";\nexport class ExpoDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        this.database = this.options.database;\n        // load sqlite package\n        this.sqlite = this.options.driver;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection._db.close();\n                this.databaseConnection = undefined;\n                ok();\n            }\n            catch (error) {\n                fail(error);\n            }\n        });\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new ExpoQueryRunner(this);\n        return this.queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    createDatabaseConnection() {\n        return new Promise((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(this.options.database);\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction((tsx) => {\n                    tsx.executeSql(`PRAGMA foreign_keys = ON`, [], (t, result) => {\n                        ok(databaseConnection);\n                    }, (t, err) => {\n                        fail({ transaction: t, error: err });\n                    });\n                }, (err) => {\n                    fail(err);\n                });\n            }\n            catch (error) {\n                fail(error);\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=ExpoDriver.js.map\n","import { QueryResult } from \"../../query-runner/QueryResult\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { TypeORMError } from \"../../error\";\nimport { MetadataTableType } from \"../types/MetadataTableType\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class AuroraMysqlQueryRunner extends BaseQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver, client) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.client = client;\n        this.broadcaster = new Broadcaster(this);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect() {\n        return {};\n    }\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release() {\n        this.isReleased = true;\n        if (this.databaseConnection)\n            this.databaseConnection.release();\n        return Promise.resolve();\n    }\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel) {\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        if (this.transactionDepth === 0) {\n            this.transactionDepth += 1;\n            await this.client.startTransaction();\n        }\n        else {\n            this.transactionDepth += 1;\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth - 1}`);\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.client.commitTransaction();\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.client.rollbackTransaction();\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Executes a raw SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const raw = await this.client.query(query, parameters);\n        const result = new QueryResult();\n        result.raw = raw;\n        if (raw?.hasOwnProperty(\"records\") && Array.isArray(raw.records)) {\n            result.records = raw.records;\n        }\n        if (raw?.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n            result.affected = raw.numberOfRecordsUpdated;\n        }\n        if (!useStructuredResult) {\n            return result.raw;\n        }\n        return result;\n    }\n    /**\n     * Returns raw data stream.\n     */\n    stream(query, parameters, onEnd, onError) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                const stream = databaseConnection.query(query, parameters);\n                if (onEnd)\n                    stream.on(\"end\", onEnd);\n                if (onError)\n                    stream.on(\"error\", onError);\n                ok(stream);\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    }\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases() {\n        return Promise.resolve([]);\n    }\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database) {\n        throw new TypeORMError(`MySql driver does not support table schemas`);\n    }\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database) {\n        const result = await this.query(`SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\` WHERE \\`SCHEMA_NAME\\` = '${database}'`);\n        return result.length ? true : false;\n    }\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase() {\n        const query = await this.query(`SELECT DATABASE() AS \\`db_name\\``);\n        return query[0][\"db_name\"];\n    }\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema) {\n        throw new TypeORMError(`MySql driver does not support table schemas`);\n    }\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema() {\n        const query = await this.query(`SELECT SCHEMA() AS \\`schema_name\\``);\n        return query[0][\"schema_name\"];\n    }\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName) {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName, column) {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n        const columnName = InstanceChecker.isTableColumn(column)\n            ? column.name\n            : column;\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database, ifNotExist) {\n        const up = ifNotExist\n            ? `CREATE DATABASE IF NOT EXISTS \\`${database}\\``\n            : `CREATE DATABASE \\`${database}\\``;\n        const down = `DROP DATABASE \\`${database}\\``;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database, ifExist) {\n        const up = ifExist\n            ? `DROP DATABASE IF EXISTS \\`${database}\\``\n            : `DROP DATABASE \\`${database}\\``;\n        const down = `CREATE DATABASE \\`${database}\\``;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemaPath, ifNotExist) {\n        throw new TypeORMError(`Schema create queries are not supported by MySql driver.`);\n    }\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath, ifExist) {\n        throw new TypeORMError(`Schema drop queries are not supported by MySql driver.`);\n    }\n    /**\n     * Creates a new table.\n     */\n    async createTable(table, ifNotExist = false, createForeignKeys = true) {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist)\n                return Promise.resolve();\n        }\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n        // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order\n        // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index\n        // if it related to the foreign key.\n        // createTable does not need separate method to create indices, because it create indices in the same query with table creation.\n        table.indices.forEach((index) => downQueries.push(this.dropIndexSql(table, index)));\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        return this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drop the table.\n     */\n    async dropTable(target, ifExist, dropForeignKeys = true) {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target);\n            if (!isTableExist)\n                return Promise.resolve();\n        }\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys = dropForeignKeys;\n        const tablePath = this.getTablePath(target);\n        const table = await this.getCachedTable(tablePath);\n        const upQueries = [];\n        const downQueries = [];\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        table.indices.forEach((index) => upQueries.push(this.dropIndexSql(table, index)));\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Creates a new view.\n     */\n    async createView(view, syncWithMetadata = false) {\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createViewSql(view));\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the view.\n     */\n    async dropView(target) {\n        const viewName = InstanceChecker.isView(target) ? target.name : target;\n        const view = await this.getCachedView(viewName);\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName, newTableName) {\n        const upQueries = [];\n        const downQueries = [];\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const { database } = this.driver.parseTableName(oldTable);\n        newTable.name = database ? `${database}.${newTableName}` : newTableName;\n        // rename table\n        upQueries.push(new Query(`RENAME TABLE ${this.escapePath(oldTable)} TO ${this.escapePath(newTable)}`));\n        downQueries.push(new Query(`RENAME TABLE ${this.escapePath(newTable)} TO ${this.escapePath(oldTable)}`));\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            // build new constraint name\n            const columnNames = index.columnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\", \");\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n            // build queries\n            let indexType = \"\";\n            if (index.isUnique)\n                indexType += \"UNIQUE \";\n            if (index.isSpatial)\n                indexType += \"SPATIAL \";\n            if (index.isFulltext)\n                indexType += \"FULLTEXT \";\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`));\n            // replace constraint name\n            index.name = newIndexName;\n        });\n        // rename foreign key constraint\n        newTable.foreignKeys.forEach((foreignKey) => {\n            // build new constraint name\n            const columnNames = foreignKey.columnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\",\");\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n            // build queries\n            let up = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\n                `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n            if (foreignKey.onDelete)\n                up += ` ON DELETE ${foreignKey.onDelete}`;\n            if (foreignKey.onUpdate)\n                up += ` ON UPDATE ${foreignKey.onUpdate}`;\n            let down = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\n                `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n            if (foreignKey.onDelete)\n                down += ` ON DELETE ${foreignKey.onDelete}`;\n            if (foreignKey.onUpdate)\n                down += ` ON UPDATE ${foreignKey.onUpdate}`;\n            upQueries.push(new Query(up));\n            downQueries.push(new Query(down));\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n        await this.executeQueries(upQueries, downQueries);\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName, column) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        const skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, skipColumnLevelPrimary, false)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \\`${column.name}\\``));\n        // create or update primary key constraint\n        if (column.isPrimary && skipColumnLevelPrimary) {\n            // if we already have generated column, we must temporary drop AUTO_INCREMENT property.\n            const generatedColumn = clonedTable.columns.find((column) => column.isGenerated &&\n                column.generationStrategy === \"increment\");\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${column.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(column, true)}`));\n            }\n            const primaryColumns = clonedTable.primaryColumns;\n            let columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n            primaryColumns.push(column);\n            columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n            // if we previously dropped AUTO_INCREMENT property, we must bring it back\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(column, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${column.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            }\n        }\n        // create column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n        else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table, [\n                    column.name,\n                ]),\n                columnNames: [column.name],\n                isUnique: true,\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames,\n            }));\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${column.name}\\`)`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n        }\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        let newColumn = undefined;\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName;\n        }\n        else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName, oldColumnOrName, newColumn) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        const oldColumn = InstanceChecker.isTableColumn(oldColumnOrName)\n            ? oldColumnOrName\n            : table.columns.find((column) => column.name === oldColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        if ((newColumn.isGenerated !== oldColumn.isGenerated &&\n            newColumn.generationStrategy !== \"uuid\") ||\n            oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length ||\n            oldColumn.generatedType !== newColumn.generatedType) {\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n            // update cloned table\n            clonedTable = table.clone();\n        }\n        else {\n            if (newColumn.name !== oldColumn.name) {\n                // We don't change any column properties, just rename it.\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${oldColumn.name}\\` \\`${newColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${newColumn.name}\\` \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const columnNames = index.columnNames\n                        .map((column) => `\\`${column}\\``)\n                        .join(\", \");\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                    // build queries\n                    let indexType = \"\";\n                    if (index.isUnique)\n                        indexType += \"UNIQUE \";\n                    if (index.isSpatial)\n                        indexType += \"SPATIAL \";\n                    if (index.isFulltext)\n                        indexType += \"FULLTEXT \";\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`));\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const columnNames = foreignKey.columnNames\n                        .map((column) => `\\`${column}\\``)\n                        .join(\", \");\n                    const referencedColumnNames = foreignKey.referencedColumnNames\n                        .map((column) => `\\`${column}\\``)\n                        .join(\",\");\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n                    // build queries\n                    let up = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\n                        `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n                    if (foreignKey.onDelete)\n                        up += ` ON DELETE ${foreignKey.onDelete}`;\n                    if (foreignKey.onUpdate)\n                        up += ` ON UPDATE ${foreignKey.onUpdate}`;\n                    let down = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\n                        `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n                    if (foreignKey.onDelete)\n                        down += ` ON DELETE ${foreignKey.onDelete}`;\n                    if (foreignKey.onUpdate)\n                        down += ` ON UPDATE ${foreignKey.onUpdate}`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find((column) => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${newColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true)}`));\n            }\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n                const generatedColumn = clonedTable.columns.find((column) => column.isGenerated &&\n                    column.generationStrategy === \"increment\");\n                if (generatedColumn) {\n                    const nonGeneratedColumn = generatedColumn.clone();\n                    nonGeneratedColumn.isGenerated = false;\n                    nonGeneratedColumn.generationStrategy = undefined;\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n                }\n                const primaryColumns = clonedTable.primaryColumns;\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const columnNames = primaryColumns\n                        .map((column) => `\\`${column.name}\\``)\n                        .join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n                }\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find((column) => column.name === newColumn.name);\n                    column.isPrimary = true;\n                    const columnNames = primaryColumns\n                        .map((column) => `\\`${column.name}\\``)\n                        .join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n                }\n                else {\n                    const primaryColumn = primaryColumns.find((c) => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                    // update column in table\n                    const column = clonedTable.columns.find((column) => column.name === newColumn.name);\n                    column.isPrimary = false;\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const columnNames = primaryColumns\n                            .map((column) => `\\`${column.name}\\``)\n                            .join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n                    }\n                }\n                // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back\n                if (generatedColumn) {\n                    const nonGeneratedColumn = generatedColumn.clone();\n                    nonGeneratedColumn.isGenerated = false;\n                    nonGeneratedColumn.generationStrategy = undefined;\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                }\n            }\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table, [\n                            newColumn.name,\n                        ]),\n                        columnNames: [newColumn.name],\n                        isUnique: true,\n                    });\n                    clonedTable.indices.push(uniqueIndex);\n                    clonedTable.uniques.push(new TableUnique({\n                        name: uniqueIndex.name,\n                        columnNames: uniqueIndex.columnNames,\n                    }));\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${newColumn.name}\\`)`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n                }\n                else {\n                    const uniqueIndex = clonedTable.indices.find((index) => {\n                        return (index.columnNames.length === 1 &&\n                            index.isUnique === true &&\n                            !!index.columnNames.find((columnName) => columnName === newColumn.name));\n                    });\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex), 1);\n                    const tableUnique = clonedTable.uniques.find((unique) => unique.name === uniqueIndex.name);\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${newColumn.name}\\`)`));\n                }\n            }\n        }\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName, changedColumns) {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName, columnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        // drop primary key constraint\n        if (column.isPrimary) {\n            // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n            const generatedColumn = clonedTable.columns.find((column) => column.isGenerated &&\n                column.generationStrategy === \"increment\");\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n            }\n            // dropping primary key constraint\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\\`${primaryColumn.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn.isPrimary = false;\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\\`${primaryColumn.name}\\``)\n                    .join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));\n            }\n            // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back\n            if (generatedColumn && generatedColumn.name !== column.name) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            }\n        }\n        // drop column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n        else if (column.isUnique) {\n            // we splice constraints both from table uniques and indices.\n            const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table, [\n                column.name,\n            ]);\n            const foundUnique = clonedTable.uniques.find((unique) => unique.name === uniqueName);\n            if (foundUnique)\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n            const indexName = this.connection.namingStrategy.indexName(table, [\n                column.name,\n            ]);\n            const foundIndex = clonedTable.indices.find((index) => index.name === indexName);\n            if (foundIndex)\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${indexName}\\``));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${indexName}\\` (\\`${column.name}\\`)`));\n        }\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \\`${column.name}\\``));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, true)}`));\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName, columnNames) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const up = this.createPrimaryKeySql(table, columnNames);\n        const down = this.dropPrimaryKeySql(table);\n        await this.executeQueries(up, down);\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true;\n        });\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName, columns) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map((column) => column.name);\n        const upQueries = [];\n        const downQueries = [];\n        // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n        const generatedColumn = clonedTable.columns.find((column) => column.isGenerated && column.generationStrategy === \"increment\");\n        if (generatedColumn) {\n            const nonGeneratedColumn = generatedColumn.clone();\n            nonGeneratedColumn.isGenerated = false;\n            nonGeneratedColumn.generationStrategy = undefined;\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n        }\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n        }\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true));\n        const columnNamesString = columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n        // if we already have generated column or column is changed to generated, and we dropped AUTO_INCREMENT property before, we must bring it back\n        const newOrExistGeneratedColumn = generatedColumn\n            ? generatedColumn\n            : columns.find((column) => column.isGenerated &&\n                column.generationStrategy === \"increment\");\n        if (newOrExistGeneratedColumn) {\n            const nonGeneratedColumn = newOrExistGeneratedColumn.clone();\n            nonGeneratedColumn.isGenerated = false;\n            nonGeneratedColumn.generationStrategy = undefined;\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(newOrExistGeneratedColumn, true)}`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${newOrExistGeneratedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            // if column changed to generated, we must update it in table\n            const changedGeneratedColumn = clonedTable.columns.find((column) => column.name === newOrExistGeneratedColumn.name);\n            changedGeneratedColumn.isGenerated = true;\n            changedGeneratedColumn.generationStrategy = \"increment\";\n        }\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map((column) => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false;\n        });\n    }\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName, uniqueConstraint) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName, uniqueConstraints) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName, uniqueOrName) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName, uniqueConstraints) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName, checkConstraint) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName, checkConstraints) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName, checkOrName) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName, checkConstraints) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName, exclusionConstraint) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName, exclusionOrName) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName, foreignKey) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames);\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName, foreignKeys) {\n        const promises = foreignKeys.map((foreignKey) => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops a foreign key.\n     */\n    async dropForeignKey(tableOrName, foreignKeyOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName, foreignKeys) {\n        const promises = foreignKeys.map((foreignKey) => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName, index) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index, true);\n    }\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName, indices) {\n        const promises = indices.map((index) => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName, indexOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName);\n        if (!index)\n            throw new TypeORMError(`Supplied index ${indexOrName} was not found in table ${table.name}`);\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index, true);\n    }\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName, indices) {\n        const promises = indices.map((index) => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableOrName) {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableOrName)}`);\n    }\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(database) {\n        const dbName = database ? database : this.driver.database;\n        if (dbName) {\n            const isDatabaseExist = await this.hasDatabase(dbName);\n            if (!isDatabaseExist)\n                return Promise.resolve();\n        }\n        else {\n            throw new TypeORMError(`Can not clear database. No database is specified`);\n        }\n        const isAnotherTransactionActive = this.isTransactionActive;\n        if (!isAnotherTransactionActive)\n            await this.startTransaction();\n        try {\n            const selectViewDropsQuery = `SELECT concat('DROP VIEW IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`;\n            const dropViewQueries = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map((q) => this.query(q[\"query\"])));\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map((query) => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n            if (!isAnotherTransactionActive) {\n                await this.commitTransaction();\n            }\n        }\n        catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive) {\n                    await this.rollbackTransaction();\n                }\n            }\n            catch (rollbackError) { }\n            throw error;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    async loadViews(viewNames) {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable) {\n            return [];\n        }\n        if (!viewNames) {\n            viewNames = [];\n        }\n        const currentDatabase = await this.getCurrentDatabase();\n        const viewsCondition = viewNames\n            .map((tableName) => {\n            let { database, tableName: name } = this.driver.parseTableName(tableName);\n            if (!database) {\n                database = currentDatabase;\n            }\n            return `(\\`t\\`.\\`schema\\` = '${database}' AND \\`t\\`.\\`name\\` = '${name}')`;\n        })\n            .join(\" OR \");\n        const query = `SELECT \\`t\\`.*, \\`v\\`.\\`check_option\\` FROM ${this.escapePath(this.getTypeormMetadataTableName())} \\`t\\` ` +\n            `INNER JOIN \\`information_schema\\`.\\`views\\` \\`v\\` ON \\`v\\`.\\`table_schema\\` = \\`t\\`.\\`schema\\` AND \\`v\\`.\\`table_name\\` = \\`t\\`.\\`name\\` WHERE \\`t\\`.\\`type\\` = '${MetadataTableType.VIEW}' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView) => {\n            const view = new View();\n            const db = dbView[\"schema\"] === currentDatabase\n                ? undefined\n                : dbView[\"schema\"];\n            view.database = dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], undefined, db);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    async loadTables(tableNames) {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return [];\n        }\n        const dbTables = [];\n        const currentDatabase = await this.getCurrentDatabase();\n        if (!tableNames) {\n            const tablesSql = `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\``;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        else {\n            const tablesCondition = tableNames\n                .map((tableName) => {\n                let [database, name] = tableName.split(\".\");\n                if (!name) {\n                    name = database;\n                    database = this.driver.database || currentDatabase;\n                }\n                return `(\\`TABLE_SCHEMA\\` = '${database}' AND \\`TABLE_NAME\\` = '${name}')`;\n            })\n                .join(\" OR \");\n            const tablesSql = `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE ` +\n                tablesCondition;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        if (dbTables.length === 0) {\n            return [];\n        }\n        const columnsCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n            return `(\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n        })\n            .join(\" OR \");\n        const columnsSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE ` +\n            columnsCondition;\n        const primaryKeySql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` WHERE \\`CONSTRAINT_NAME\\` = 'PRIMARY' AND (${columnsCondition})`;\n        const collationsSql = `SELECT \\`SCHEMA_NAME\\`, \\`DEFAULT_CHARACTER_SET_NAME\\` as \\`CHARSET\\`, \\`DEFAULT_COLLATION_NAME\\` AS \\`COLLATION\\` FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\``;\n        const indicesCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n            return `(\\`s\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`s\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n        })\n            .join(\" OR \");\n        const indicesSql = `SELECT \\`s\\`.* FROM \\`INFORMATION_SCHEMA\\`.\\`STATISTICS\\` \\`s\\` ` +\n            `LEFT JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`s\\`.\\`INDEX_NAME\\` = \\`rc\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE (${indicesCondition}) AND \\`s\\`.\\`INDEX_NAME\\` != 'PRIMARY' AND \\`rc\\`.\\`CONSTRAINT_NAME\\` IS NULL`;\n        const foreignKeysCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n            return `(\\`kcu\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`kcu\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n        })\n            .join(\" OR \");\n        const foreignKeysSql = `SELECT \\`kcu\\`.\\`TABLE_SCHEMA\\`, \\`kcu\\`.\\`TABLE_NAME\\`, \\`kcu\\`.\\`CONSTRAINT_NAME\\`, \\`kcu\\`.\\`COLUMN_NAME\\`, \\`kcu\\`.\\`REFERENCED_TABLE_SCHEMA\\`, ` +\n            `\\`kcu\\`.\\`REFERENCED_TABLE_NAME\\`, \\`kcu\\`.\\`REFERENCED_COLUMN_NAME\\`, \\`rc\\`.\\`DELETE_RULE\\` \\`ON_DELETE\\`, \\`rc\\`.\\`UPDATE_RULE\\` \\`ON_UPDATE\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`kcu\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`rc\\`.\\`constraint_name\\` = \\`kcu\\`.\\`constraint_name\\` ` +\n            `WHERE ` +\n            foreignKeysCondition;\n        const [dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys,] = await Promise.all([\n            this.query(columnsSql),\n            this.query(primaryKeySql),\n            this.query(collationsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async (dbTable) => {\n            const table = new Table();\n            const dbCollation = dbCollations.find((coll) => coll[\"SCHEMA_NAME\"] === dbTable[\"TABLE_SCHEMA\"]);\n            const defaultCollation = dbCollation[\"COLLATION\"];\n            const defaultCharset = dbCollation[\"CHARSET\"];\n            // We do not need to join database name, when database is by default.\n            const db = dbTable[\"TABLE_SCHEMA\"] === currentDatabase\n                ? undefined\n                : dbTable[\"TABLE_SCHEMA\"];\n            table.database = dbTable[\"TABLE_SCHEMA\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], undefined, db);\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter((dbColumn) => dbColumn[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                dbColumn[\"TABLE_SCHEMA\"] ===\n                    dbTable[\"TABLE_SCHEMA\"])\n                .map((dbColumn) => {\n                const columnUniqueIndices = dbIndices.filter((dbIndex) => {\n                    return (dbIndex[\"TABLE_NAME\"] ===\n                        dbTable[\"TABLE_NAME\"] &&\n                        dbIndex[\"TABLE_SCHEMA\"] ===\n                            dbTable[\"TABLE_SCHEMA\"] &&\n                        dbIndex[\"COLUMN_NAME\"] ===\n                            dbColumn[\"COLUMN_NAME\"] &&\n                        parseInt(dbIndex[\"NON_UNIQUE\"], 10) === 0);\n                });\n                const tableMetadata = this.connection.entityMetadatas.find((metadata) => this.getTablePath(table) ===\n                    this.getTablePath(metadata));\n                const hasIgnoredIndex = columnUniqueIndices.length > 0 &&\n                    tableMetadata &&\n                    tableMetadata.indices.some((index) => {\n                        return columnUniqueIndices.some((uniqueIndex) => {\n                            return (index.name ===\n                                uniqueIndex[\"INDEX_NAME\"] &&\n                                index.synchronize === false);\n                        });\n                    });\n                const isConstraintComposite = columnUniqueIndices.every((uniqueIndex) => {\n                    return dbIndices.some((dbIndex) => dbIndex[\"INDEX_NAME\"] ===\n                        uniqueIndex[\"INDEX_NAME\"] &&\n                        dbIndex[\"COLUMN_NAME\"] !==\n                            dbColumn[\"COLUMN_NAME\"]);\n                });\n                const tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                // Unsigned columns are handled differently when it comes to width.\n                // Hence, we need to set the unsigned attribute before we check the width.\n                tableColumn.unsigned = tableColumn.zerofill\n                    ? true\n                    : dbColumn[\"COLUMN_TYPE\"].indexOf(\"unsigned\") !== -1;\n                if (this.driver.withWidthColumnTypes.indexOf(tableColumn.type) !== -1) {\n                    const width = dbColumn[\"COLUMN_TYPE\"].substring(dbColumn[\"COLUMN_TYPE\"].indexOf(\"(\") + 1, dbColumn[\"COLUMN_TYPE\"].indexOf(\")\"));\n                    tableColumn.width =\n                        width &&\n                            !this.isDefaultColumnWidth(table, tableColumn, parseInt(width))\n                            ? parseInt(width)\n                            : undefined;\n                }\n                if (dbColumn[\"COLUMN_DEFAULT\"] === null ||\n                    dbColumn[\"COLUMN_DEFAULT\"] === undefined) {\n                    tableColumn.default = undefined;\n                }\n                else {\n                    tableColumn.default =\n                        dbColumn[\"COLUMN_DEFAULT\"] ===\n                            \"CURRENT_TIMESTAMP\"\n                            ? dbColumn[\"COLUMN_DEFAULT\"]\n                            : `'${dbColumn[\"COLUMN_DEFAULT\"]}'`;\n                }\n                if (dbColumn[\"EXTRA\"].indexOf(\"on update\") !== -1) {\n                    tableColumn.onUpdate = dbColumn[\"EXTRA\"].substring(dbColumn[\"EXTRA\"].indexOf(\"on update\") + 10);\n                }\n                if (dbColumn[\"GENERATION_EXPRESSION\"]) {\n                    tableColumn.asExpression =\n                        dbColumn[\"GENERATION_EXPRESSION\"];\n                    tableColumn.generatedType =\n                        dbColumn[\"EXTRA\"].indexOf(\"VIRTUAL\") !== -1\n                            ? \"VIRTUAL\"\n                            : \"STORED\";\n                }\n                tableColumn.isUnique =\n                    columnUniqueIndices.length > 0 &&\n                        !hasIgnoredIndex &&\n                        !isConstraintComposite;\n                tableColumn.isNullable =\n                    dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                tableColumn.isPrimary = dbPrimaryKeys.some((dbPrimaryKey) => {\n                    return (dbPrimaryKey[\"TABLE_NAME\"] ===\n                        dbColumn[\"TABLE_NAME\"] &&\n                        dbPrimaryKey[\"TABLE_SCHEMA\"] ===\n                            dbColumn[\"TABLE_SCHEMA\"] &&\n                        dbPrimaryKey[\"COLUMN_NAME\"] ===\n                            dbColumn[\"COLUMN_NAME\"]);\n                });\n                tableColumn.zerofill =\n                    dbColumn[\"COLUMN_TYPE\"].indexOf(\"zerofill\") !== -1;\n                tableColumn.isGenerated =\n                    dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\n                if (tableColumn.isGenerated)\n                    tableColumn.generationStrategy = \"increment\";\n                tableColumn.comment =\n                    typeof dbColumn[\"COLUMN_COMMENT\"] === \"string\" &&\n                        dbColumn[\"COLUMN_COMMENT\"].length === 0\n                        ? undefined\n                        : dbColumn[\"COLUMN_COMMENT\"];\n                if (dbColumn[\"CHARACTER_SET_NAME\"])\n                    tableColumn.charset =\n                        dbColumn[\"CHARACTER_SET_NAME\"] ===\n                            defaultCharset\n                            ? undefined\n                            : dbColumn[\"CHARACTER_SET_NAME\"];\n                if (dbColumn[\"COLLATION_NAME\"])\n                    tableColumn.collation =\n                        dbColumn[\"COLLATION_NAME\"] === defaultCollation\n                            ? undefined\n                            : dbColumn[\"COLLATION_NAME\"];\n                // check only columns that have length property\n                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 &&\n                    dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                    const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                    tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length)\n                        ? length\n                        : \"\";\n                }\n                if (tableColumn.type === \"decimal\" ||\n                    tableColumn.type === \"double\" ||\n                    tableColumn.type === \"float\") {\n                    if (dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                        !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                        tableColumn.precision = parseInt(dbColumn[\"NUMERIC_PRECISION\"]);\n                    if (dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                        !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                        tableColumn.scale = parseInt(dbColumn[\"NUMERIC_SCALE\"]);\n                }\n                if (tableColumn.type === \"enum\" ||\n                    tableColumn.type === \"simple-enum\" ||\n                    tableColumn.type === \"set\") {\n                    const colType = dbColumn[\"COLUMN_TYPE\"];\n                    const items = colType\n                        .substring(colType.indexOf(\"(\") + 1, colType.lastIndexOf(\")\"))\n                        .split(\",\");\n                    tableColumn.enum = items.map((item) => {\n                        return item.substring(1, item.length - 1);\n                    });\n                    tableColumn.length = \"\";\n                }\n                if ((tableColumn.type === \"datetime\" ||\n                    tableColumn.type === \"time\" ||\n                    tableColumn.type === \"timestamp\") &&\n                    dbColumn[\"DATETIME_PRECISION\"] !== null &&\n                    dbColumn[\"DATETIME_PRECISION\"] !== undefined &&\n                    !this.isDefaultColumnPrecision(table, tableColumn, parseInt(dbColumn[\"DATETIME_PRECISION\"]))) {\n                    tableColumn.precision = parseInt(dbColumn[\"DATETIME_PRECISION\"]);\n                }\n                return tableColumn;\n            });\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter((dbForeignKey) => {\n                return (dbForeignKey[\"TABLE_NAME\"] ===\n                    dbTable[\"TABLE_NAME\"] &&\n                    dbForeignKey[\"TABLE_SCHEMA\"] ===\n                        dbTable[\"TABLE_SCHEMA\"]);\n            }), (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"]);\n            table.foreignKeys = tableForeignKeyConstraints.map((dbForeignKey) => {\n                const foreignKeys = dbForeignKeys.filter((dbFk) => dbFk[\"CONSTRAINT_NAME\"] ===\n                    dbForeignKey[\"CONSTRAINT_NAME\"]);\n                // if referenced table located in currently used db, we don't need to concat db name to table name.\n                const database = dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"] ===\n                    currentDatabase\n                    ? undefined\n                    : dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], undefined, database);\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map((dbFk) => dbFk[\"COLUMN_NAME\"]),\n                    referencedDatabase: dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"],\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map((dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"],\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"],\n                });\n            });\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter((dbIndex) => {\n                return (dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                    dbIndex[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"]);\n            }), (dbIndex) => dbIndex[\"INDEX_NAME\"]);\n            table.indices = tableIndexConstraints.map((constraint) => {\n                const indices = dbIndices.filter((index) => {\n                    return (index[\"TABLE_SCHEMA\"] ===\n                        constraint[\"TABLE_SCHEMA\"] &&\n                        index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                        index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]);\n                });\n                const nonUnique = parseInt(constraint[\"NON_UNIQUE\"], 10);\n                return new TableIndex({\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                    isUnique: nonUnique === 0,\n                    isSpatial: constraint[\"INDEX_TYPE\"] === \"SPATIAL\",\n                    isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\",\n                });\n            });\n            return table;\n        }));\n    }\n    /**\n     * Builds create table sql\n     */\n    createTableSql(table, createForeignKeys) {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column, true))\n            .join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n        // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n            const isUniqueIndexExist = table.indices.some((index) => {\n                return (index.columnNames.length === 1 &&\n                    !!index.isUnique &&\n                    index.columnNames.indexOf(column.name) !== -1);\n            });\n            const isUniqueConstraintExist = table.uniques.some((unique) => {\n                return (unique.columnNames.length === 1 &&\n                    unique.columnNames.indexOf(column.name) !== -1);\n            });\n            if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                table.indices.push(new TableIndex({\n                    name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n                    columnNames: [column.name],\n                    isUnique: true,\n                }));\n        });\n        // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach((unique) => {\n                const uniqueExist = table.indices.some((index) => index.name === unique.name);\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true,\n                    }));\n                }\n            });\n        }\n        if (table.indices.length > 0) {\n            const indicesSql = table.indices\n                .map((index) => {\n                const columnNames = index.columnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n                let indexType = \"\";\n                if (index.isUnique)\n                    indexType += \"UNIQUE \";\n                if (index.isSpatial)\n                    indexType += \"SPATIAL \";\n                if (index.isFulltext)\n                    indexType += \"FULLTEXT \";\n                return `${indexType}INDEX \\`${index.name}\\` (${columnNames})`;\n            })\n                .join(\", \");\n            sql += `, ${indicesSql}`;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                const columnNames = fk.columnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table, fk.columnNames);\n                const referencedColumnNames = fk.referencedColumnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                let constraint = `CONSTRAINT \\`${fk.name}\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(this.getTablePath(fk))} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n                return constraint;\n            })\n                .join(\", \");\n            sql += `, ${foreignKeysSql}`;\n        }\n        if (table.primaryColumns.length > 0) {\n            const columnNames = table.primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            sql += `, PRIMARY KEY (${columnNames})`;\n        }\n        sql += `) ENGINE=${table.engine || \"InnoDB\"}`;\n        return new Query(sql);\n    }\n    /**\n     * Builds drop table sql\n     */\n    dropTableSql(tableOrName) {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrName)}`);\n    }\n    createViewSql(view) {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        }\n        else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view\n                .expression(this.connection)\n                .getQuery()}`);\n        }\n    }\n    async insertViewDefinitionSql(view) {\n        const currentDatabase = await this.getCurrentDatabase();\n        const expression = typeof view.expression === \"string\"\n            ? view.expression.trim()\n            : view.expression(this.connection).getQuery();\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            schema: currentDatabase,\n            name: view.name,\n            value: expression,\n        });\n    }\n    /**\n     * Builds drop view sql.\n     */\n    dropViewSql(viewOrPath) {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n    /**\n     * Builds remove view sql.\n     */\n    async deleteViewDefinitionSql(viewOrPath) {\n        const currentDatabase = await this.getCurrentDatabase();\n        const viewName = InstanceChecker.isView(viewOrPath)\n            ? viewOrPath.name\n            : viewOrPath;\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            schema: currentDatabase,\n            name: viewName,\n        });\n    }\n    /**\n     * Builds create index sql.\n     */\n    createIndexSql(table, index) {\n        const columns = index.columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \");\n        let indexType = \"\";\n        if (index.isUnique)\n            indexType += \"UNIQUE \";\n        if (index.isSpatial)\n            indexType += \"SPATIAL \";\n        if (index.isFulltext)\n            indexType += \"FULLTEXT \";\n        return new Query(`CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapePath(table)} (${columns})`);\n    }\n    /**\n     * Builds drop index sql.\n     */\n    dropIndexSql(table, indexOrName) {\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName;\n        return new Query(`DROP INDEX \\`${indexName}\\` ON ${this.escapePath(table)}`);\n    }\n    /**\n     * Builds create primary key sql.\n     */\n    createPrimaryKeySql(table, columnNames) {\n        const columnNamesString = columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`);\n    }\n    /**\n     * Builds drop primary key sql.\n     */\n    dropPrimaryKeySql(table) {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`);\n    }\n    /**\n     * Builds create foreign key sql.\n     */\n    createForeignKeySql(table, foreignKey) {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\\`${column}\\``)\n            .join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\\`${column}\\``)\n            .join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n        return new Query(sql);\n    }\n    /**\n     * Builds drop foreign key sql.\n     */\n    dropForeignKeySql(table, foreignKeyOrName) {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName.name\n            : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \\`${foreignKeyName}\\``);\n    }\n    /**\n     * Escapes a given comment so it's safe to include in a query.\n     */\n    escapeComment(comment) {\n        if (!comment || comment.length === 0) {\n            return `''`;\n        }\n        comment = comment\n            .replace(/\\\\/g, \"\\\\\\\\\") // MySQL allows escaping characters via backslashes\n            .replace(/'/g, \"''\")\n            .replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n        return `'${comment}'`;\n    }\n    /**\n     * Escapes given table or view path.\n     */\n    escapePath(target) {\n        const { database, tableName } = this.driver.parseTableName(target);\n        if (database && database !== this.driver.database) {\n            return `\\`${database}\\`.\\`${tableName}\\``;\n        }\n        return `\\`${tableName}\\``;\n    }\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    buildCreateColumnSql(column, skipPrimary, skipName = false) {\n        let c = \"\";\n        if (skipName) {\n            c = this.connection.driver.createFullType(column);\n        }\n        else {\n            c = `\\`${column.name}\\` ${this.connection.driver.createFullType(column)}`;\n        }\n        if (column.asExpression)\n            c += ` AS (${column.asExpression}) ${column.generatedType ? column.generatedType : \"VIRTUAL\"}`;\n        // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.\n        if (column.zerofill) {\n            c += \" ZEROFILL\";\n        }\n        else if (column.unsigned) {\n            c += \" UNSIGNED\";\n        }\n        if (column.enum)\n            c += ` (${column.enum\n                .map((value) => \"'\" + value + \"'\")\n                .join(\", \")})`;\n        if (column.charset)\n            c += ` CHARACTER SET \"${column.charset}\"`;\n        if (column.collation)\n            c += ` COLLATE \"${column.collation}\"`;\n        if (!column.isNullable)\n            c += \" NOT NULL\";\n        if (column.isNullable)\n            c += \" NULL\";\n        if (column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated && column.generationStrategy === \"increment\")\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTO_INCREMENT\";\n        if (column.comment)\n            c += ` COMMENT ${this.escapeComment(column.comment)}`;\n        if (column.default !== undefined && column.default !== null)\n            c += ` DEFAULT ${column.default}`;\n        if (column.onUpdate)\n            c += ` ON UPDATE ${column.onUpdate}`;\n        return c;\n    }\n    /**\n     * Checks if column display width is by default.\n     */\n    isDefaultColumnWidth(table, column, width) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.width)\n                return false;\n        }\n        const defaultWidthForType = this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].width;\n        if (defaultWidthForType) {\n            // In MariaDB & MySQL 5.7, the default widths of certain numeric types are 1 less than\n            // the usual defaults when the column is unsigned.\n            // This also applies to Aurora MySQL.\n            const typesWithReducedUnsignedDefault = [\n                \"int\",\n                \"tinyint\",\n                \"smallint\",\n                \"mediumint\",\n            ];\n            const needsAdjustment = typesWithReducedUnsignedDefault.indexOf(column.type) !== -1;\n            if (column.unsigned && needsAdjustment) {\n                return defaultWidthForType - 1 === width;\n            }\n            else {\n                return defaultWidthForType === width;\n            }\n        }\n        return false;\n    }\n    /**\n     * Change table comment.\n     */\n    changeTableComment(tableOrName, comment) {\n        throw new TypeORMError(`aurora-mysql driver does not support change table comment.`);\n    }\n}\n\n//# sourceMappingURL=AuroraMysqlQueryRunner.js.map\n","import { DriverUtils } from \"../DriverUtils\";\nimport { AuroraMysqlQueryRunner } from \"./AuroraMysqlQueryRunner\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { TypeORMError } from \"../../error\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class AuroraMysqlDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"nested\";\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n         * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n         */\n        this.supportedDataTypes = [\n            // numeric types\n            \"bit\",\n            \"int\",\n            \"integer\", // synonym for int\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"bigint\",\n            \"float\",\n            \"double\",\n            \"double precision\", // synonym for double\n            \"real\", // synonym for double\n            \"decimal\",\n            \"dec\", // synonym for decimal\n            \"numeric\", // synonym for decimal\n            \"fixed\", // synonym for decimal\n            \"bool\", // synonym for tinyint\n            \"boolean\", // synonym for tinyint\n            // date and time types\n            \"date\",\n            \"datetime\",\n            \"timestamp\",\n            \"time\",\n            \"year\",\n            // string types\n            \"char\",\n            \"nchar\", // synonym for national char\n            \"national char\",\n            \"varchar\",\n            \"nvarchar\", // synonym for national varchar\n            \"national varchar\",\n            \"blob\",\n            \"text\",\n            \"tinyblob\",\n            \"tinytext\",\n            \"mediumblob\",\n            \"mediumtext\",\n            \"longblob\",\n            \"longtext\",\n            \"enum\",\n            \"set\",\n            \"binary\",\n            \"varbinary\",\n            // json data type\n            \"json\",\n            // spatial data types\n            \"geometry\",\n            \"point\",\n            \"linestring\",\n            \"polygon\",\n            \"multipoint\",\n            \"multilinestring\",\n            \"multipolygon\",\n            \"geometrycollection\",\n        ];\n        /**\n         * Returns type of upsert supported by driver if any\n         */\n        this.supportedUpsertTypes = [\"on-duplicate-key-update\"];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [\n            \"geometry\",\n            \"point\",\n            \"linestring\",\n            \"polygon\",\n            \"multipoint\",\n            \"multilinestring\",\n            \"multipolygon\",\n            \"geometrycollection\",\n        ];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"char\",\n            \"varchar\",\n            \"nvarchar\",\n            \"binary\",\n            \"varbinary\",\n        ];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withWidthColumnTypes = [\n            \"bit\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"int\",\n            \"integer\",\n            \"bigint\",\n        ];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n            \"time\",\n            \"datetime\",\n            \"timestamp\",\n        ];\n        /**\n         * Gets list of column data types that supports scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n        ];\n        /**\n         * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n         */\n        this.unsignedAndZerofillTypes = [\n            \"int\",\n            \"integer\",\n            \"smallint\",\n            \"tinyint\",\n            \"mediumint\",\n            \"bigint\",\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n        ];\n        /**\n         * ORM has special columns and we need to know what database column types should be for those columns.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"datetime\",\n            createDatePrecision: 6,\n            createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n            updateDate: \"datetime\",\n            updateDatePrecision: 6,\n            updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n            deleteDate: \"datetime\",\n            deleteDatePrecision: 6,\n            deleteDateNullable: true,\n            version: \"int\",\n            treeLevel: \"int\",\n            migrationId: \"int\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"bigint\",\n            cacheId: \"int\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"bigint\",\n            cacheDuration: \"int\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"text\",\n        };\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {\n            varchar: { length: 255 },\n            nvarchar: { length: 255 },\n            \"national varchar\": { length: 255 },\n            char: { length: 1 },\n            binary: { length: 1 },\n            varbinary: { length: 255 },\n            decimal: { precision: 10, scale: 0 },\n            dec: { precision: 10, scale: 0 },\n            numeric: { precision: 10, scale: 0 },\n            fixed: { precision: 10, scale: 0 },\n            float: { precision: 12 },\n            double: { precision: 22 },\n            time: { precision: 0 },\n            datetime: { precision: 0 },\n            timestamp: { precision: 0 },\n            bit: { width: 1 },\n            int: { width: 11 },\n            integer: { width: 11 },\n            tinyint: { width: 4 },\n            smallint: { width: 6 },\n            mediumint: { width: 9 },\n            bigint: { width: 20 },\n        };\n        /**\n         * Max length allowed by MySQL for aliases.\n         * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n         */\n        this.maxAliasLength = 63;\n        this.cteCapabilities = {\n            enabled: false,\n        };\n        this.connection = connection;\n        this.options = connection.options;\n        // load mysql package\n        this.loadDependencies();\n        this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n        this.database = DriverUtils.buildDriverOptions(this.options).database;\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\n        // todo: provide options to auto-create a database if it does not exist yet\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        if (!this.database) {\n            const queryRunner = await this.createQueryRunner(\"master\");\n            this.database = await queryRunner.getCurrentDatabase();\n            await queryRunner.release();\n        }\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect() {\n        return Promise.resolve();\n    }\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect() { }\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        return new AuroraMysqlQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions));\n    }\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql, parameters, nativeParameters) {\n        const escapedParameters = Object.keys(nativeParameters).map((key) => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n        sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray, key) => {\n            if (!parameters.hasOwnProperty(key)) {\n                return full;\n            }\n            let value = parameters[key];\n            if (isArray) {\n                return value\n                    .map((v) => {\n                    escapedParameters.push(v);\n                    return this.createParameter(key, escapedParameters.length - 1);\n                })\n                    .join(\", \");\n            }\n            if (typeof value === \"function\") {\n                return value();\n            }\n            escapedParameters.push(value);\n            return this.createParameter(key, escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName) {\n        return \"`\" + columnName + \"`\";\n    }\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName, schema, database) {\n        let tablePath = [tableName];\n        if (database) {\n            tablePath.unshift(database);\n        }\n        return tablePath.join(\".\");\n    }\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(target) {\n        const driverDatabase = this.database;\n        const driverSchema = undefined;\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name);\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName);\n            return {\n                database: target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema: target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            };\n        }\n        const parts = target.split(\".\");\n        return {\n            database: (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\n            schema: driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        };\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (!this.options.formatOptions ||\n            this.options.formatOptions.castParameters !== false) {\n            return this.client.preparePersistentValue(value, columnMetadata);\n        }\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n        }\n        else if (columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value);\n        }\n        else if (columnMetadata.type === \"simple-array\" ||\n            columnMetadata.type === \"set\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        else if (columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") {\n            return \"\" + value;\n        }\n        return value;\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value)\n                : value;\n        if (!this.options.formatOptions ||\n            this.options.formatOptions.castParameters !== false) {\n            return this.client.prepareHydratedValue(value, columnMetadata);\n        }\n        if (columnMetadata.type === Boolean ||\n            columnMetadata.type === \"bool\" ||\n            columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\" ||\n            columnMetadata.type === \"set\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        else if ((columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") &&\n            columnMetadata.enum &&\n            !isNaN(value) &&\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n            // convert to number if that exists in possible enum options\n            value = parseInt(value);\n        }\n        else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value;\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    }\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column) {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\";\n        }\n        else if (column.type === String) {\n            return \"varchar\";\n        }\n        else if (column.type === Date) {\n            return \"datetime\";\n        }\n        else if (column.type === Buffer) {\n            return \"blob\";\n        }\n        else if (column.type === Boolean) {\n            return \"tinyint\";\n        }\n        else if (column.type === \"uuid\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"simple-array\" ||\n            column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-enum\") {\n            return \"enum\";\n        }\n        else if (column.type === \"double precision\" ||\n            column.type === \"real\") {\n            return \"double\";\n        }\n        else if (column.type === \"dec\" ||\n            column.type === \"numeric\" ||\n            column.type === \"fixed\") {\n            return \"decimal\";\n        }\n        else if (column.type === \"bool\" || column.type === \"boolean\") {\n            return \"tinyint\";\n        }\n        else if (column.type === \"nvarchar\" ||\n            column.type === \"national varchar\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"nchar\" || column.type === \"national char\") {\n            return \"char\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata) {\n        const defaultValue = columnMetadata.default;\n        if (defaultValue === null) {\n            return undefined;\n        }\n        if ((columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") &&\n            defaultValue !== undefined) {\n            return `'${defaultValue}'`;\n        }\n        if (columnMetadata.type === \"set\" && defaultValue !== undefined) {\n            return `'${DateUtils.simpleArrayToString(defaultValue)}'`;\n        }\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`;\n        }\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\";\n        }\n        if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n        }\n        if (defaultValue === undefined) {\n            return undefined;\n        }\n        return `${defaultValue}`;\n    }\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column) {\n        return column.entityMetadata.indices.some((idx) => idx.isUnique &&\n            idx.columns.length === 1 &&\n            idx.columns[0] === column);\n    }\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column) {\n        if (column.length)\n            return column.length.toString();\n        /**\n         * fix https://github.com/typeorm/typeorm/issues/1139\n         */\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"national varchar\":\n                return \"255\";\n            case \"varbinary\":\n                return \"255\";\n            default:\n                return \"\";\n        }\n    }\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column) {\n        let type = column.type;\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n        }\n        else if (column.width) {\n            type += `(${column.width})`;\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined) {\n            type += `(${column.precision})`;\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    }\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection() {\n        return new Promise((ok, fail) => {\n            if (this.poolCluster) {\n                this.poolCluster.getConnection(\"MASTER\", (err, dbConnection) => {\n                    err\n                        ? fail(err)\n                        : ok(this.prepareDbConnection(dbConnection));\n                });\n            }\n            else if (this.pool) {\n                this.pool.getConnection((err, dbConnection) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n                });\n            }\n            else {\n                fail(new TypeORMError(`Connection is not established with mysql database`));\n            }\n        });\n    }\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection() {\n        if (!this.poolCluster)\n            return this.obtainMasterConnection();\n        return new Promise((ok, fail) => {\n            this.poolCluster.getConnection(\"SLAVE*\", (err, dbConnection) => {\n                err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n            });\n        });\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata, insertResult, entityIndex) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value;\n            if (generatedColumn.generationStrategy === \"increment\" &&\n                insertResult.insertId) {\n                // NOTE: When multiple rows is inserted by a single INSERT statement,\n                // `insertId` is the value generated for the first inserted row only.\n                value = insertResult.insertId + entityIndex;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns, columnMetadatas) {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find((c) => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n            // console.log(\"comment:\", tableColumn.comment, this.escapeComment(columnMetadata.comment));\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n            let columnMetadataLength = columnMetadata.length;\n            if (!columnMetadataLength &&\n                columnMetadata.generationStrategy === \"uuid\") {\n                // fixing #3374\n                columnMetadataLength = this.getColumnLength(columnMetadata);\n            }\n            return (tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadataLength ||\n                tableColumn.width !== columnMetadata.width ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                tableColumn.zerofill !== columnMetadata.zerofill ||\n                tableColumn.unsigned !== columnMetadata.unsigned ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.comment !==\n                    this.escapeComment(columnMetadata.comment) ||\n                !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map((val) => val + \"\"))) ||\n                tableColumn.onUpdate !== columnMetadata.onUpdate ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated));\n        });\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported() {\n        return true;\n    }\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName, index) {\n        return \"?\";\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads all driver dependencies.\n     */\n    loadDependencies() {\n        const DataApiDriver = this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n        this.DataApiDriver = DataApiDriver;\n        // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack\n        // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787\n        this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver;\n    }\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    createConnectionOptions(options, credentials) {\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n        // build connection options for the driver\n        return Object.assign({}, {\n            resourceArn: options.resourceArn,\n            secretArn: options.secretArn,\n            database: options.database,\n            region: options.region,\n            type: options.type,\n        }, {\n            host: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            ssl: options.ssl,\n        }, options.extra || {});\n    }\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    async createPool(connectionOptions) {\n        return {};\n    }\n    /**\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\n     */\n    prepareDbConnection(connection) {\n        const { logger } = this.connection;\n        /**\n         * Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\n         * cause the hosting app to crash.\n         */\n        if (connection.listeners(\"error\").length === 0) {\n            connection.on(\"error\", (error) => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\n        }\n        return connection;\n    }\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    compareDefaultValues(columnMetadataValue, databaseValue) {\n        if (typeof columnMetadataValue === \"string\" &&\n            typeof databaseValue === \"string\") {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n        return columnMetadataValue === databaseValue;\n    }\n    /**\n     * Escapes a given comment.\n     */\n    escapeComment(comment) {\n        if (!comment)\n            return comment;\n        comment = comment.replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n        return comment;\n    }\n}\n\n//# sourceMappingURL=AuroraMysqlDriver.js.map\n","import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { TypeORMError } from \"../../error\";\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n    constructor(driver, mode) {\n        super(driver, mode);\n    }\n}\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraPostgresQueryRunner extends PostgresQueryRunnerWrapper {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver, client, mode) {\n        super(driver, mode);\n        this.client = client;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect() {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver\n                .obtainSlaveConnection()\n                .then(([connection, release]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n        }\n        else {\n            // master\n            this.databaseConnectionPromise = this.driver\n                .obtainMasterConnection()\n                .then(([connection, release]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n        }\n        return this.databaseConnectionPromise;\n    }\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel) {\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        if (this.transactionDepth === 0) {\n            this.transactionDepth += 1;\n            await this.client.startTransaction();\n        }\n        else {\n            this.transactionDepth += 1;\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth} - 1`);\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.client.commitTransaction();\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1;\n            await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        else {\n            this.transactionDepth -= 1;\n            await this.client.rollbackTransaction();\n            this.isTransactionActive = false;\n        }\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const raw = await this.client.query(query, parameters);\n        const result = new QueryResult();\n        result.raw = raw;\n        if (raw?.hasOwnProperty(\"records\") && Array.isArray(raw.records)) {\n            result.records = raw.records;\n        }\n        if (raw?.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n            result.affected = raw.numberOfRecordsUpdated;\n        }\n        if (!useStructuredResult) {\n            return result.raw;\n        }\n        return result;\n    }\n    /**\n     * Change table comment.\n     */\n    changeTableComment(tableOrName, comment) {\n        throw new TypeORMError(`aurora-postgres driver does not support change comment.`);\n    }\n}\n\n//# sourceMappingURL=AuroraPostgresQueryRunner.js.map\n","import { PostgresDriver } from \"../postgres/PostgresDriver\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DriverUtils } from \"../DriverUtils\";\nclass PostgresWrapper extends PostgresDriver {\n}\nexport class AuroraPostgresDriver extends PostgresWrapper {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super();\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"nested\";\n        this.connection = connection;\n        this.options = connection.options;\n        this.isReplicated = false;\n        // load data-api package\n        this.loadDependencies();\n        this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n        this.database = DriverUtils.buildDriverOptions(this.options).database;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect() { }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() { }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        return new AuroraPostgresQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions), mode);\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false) {\n            return super.preparePersistentValue(value, columnMetadata);\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        return this.client.preparePersistentValue(value, columnMetadata);\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false) {\n            return super.prepareHydratedValue(value, columnMetadata);\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return this.client.prepareHydratedValue(value, columnMetadata);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        const driver = this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n        const { pg } = driver;\n        this.DataApiDriver = pg;\n    }\n    /**\n     * Executes given query.\n     */\n    executeQuery(connection, query) {\n        return this.connection.query(query);\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect() {\n        const extensionsMetadata = await this.checkMetadataForExtensions();\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection);\n        }\n        return Promise.resolve();\n    }\n}\n\n//# sourceMappingURL=AuroraPostgresDriver.js.map\n","import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    async executeSet(set) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        return databaseConnection.executeSet(set, false);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        const command = query.substring(0, query.indexOf(\" \") !== -1 ? query.indexOf(\" \") : undefined);\n        try {\n            let raw;\n            if ([\n                \"BEGIN\",\n                \"ROLLBACK\",\n                \"COMMIT\",\n                \"CREATE\",\n                \"ALTER\",\n                \"DROP\",\n            ].indexOf(command) !== -1) {\n                raw = await databaseConnection.execute(query, false);\n            }\n            else if ([\"INSERT\", \"UPDATE\", \"DELETE\", \"PRAGMA\"].indexOf(command) !== -1) {\n                raw = await databaseConnection.run(query, parameters, false);\n            }\n            else {\n                raw = await databaseConnection.query(query, parameters || []);\n            }\n            const result = new QueryResult();\n            if (raw?.hasOwnProperty(\"values\")) {\n                result.raw = raw.values;\n                result.records = raw.values;\n            }\n            if (raw?.hasOwnProperty(\"changes\")) {\n                result.affected = raw.changes.changes;\n                result.raw = raw.changes.lastId || raw.changes.changes;\n            }\n            if (!useStructuredResult) {\n                return result.raw;\n            }\n            return result;\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral) {\n        return Object.keys(objectLiteral).map((key) => `\"${key}\"` + \"=?\");\n    }\n}\n\n//# sourceMappingURL=CapacitorQueryRunner.js.map\n","import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error\";\nexport class CapacitorDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n        // load sqlite package\n        this.sqlite = this.options.driver;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        this.databaseConnection = this.createDatabaseConnection();\n        await this.databaseConnection;\n    }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        this.queryRunner = undefined;\n        const databaseConnection = await this.databaseConnection;\n        return databaseConnection.close().then(() => {\n            this.databaseConnection = undefined;\n        });\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new CapacitorQueryRunner(this);\n        return this.queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    async createDatabaseConnection() {\n        const databaseMode = this.options.mode || \"no-encryption\";\n        const isDatabaseEncryted = databaseMode !== \"no-encryption\";\n        const databaseVersion = typeof this.options.version === \"undefined\"\n            ? 1\n            : this.options.version;\n        const connection = await this.sqlite.createConnection(this.options.database, isDatabaseEncryted, databaseMode, databaseVersion);\n        await connection.open();\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await connection.run(`PRAGMA foreign_keys = ON`);\n        if (this.options.journalMode &&\n            [\"DELETE\", \"TRUNCATE\", \"PERSIST\", \"MEMORY\", \"WAL\", \"OFF\"].indexOf(this.options.journalMode) !== -1) {\n            await connection.run(`PRAGMA journal_mode = ${this.options.journalMode}`);\n        }\n        return connection;\n    }\n    loadDependencies() {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\"Capacitor\", \"@capacitor-community/sqlite\");\n        }\n    }\n}\n\n//# sourceMappingURL=CapacitorDriver.js.map\n","import { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { Query } from \"../Query\";\nimport { TypeORMError } from \"../../error\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { MetadataTableType } from \"../types/MetadataTableType\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class SpannerQueryRunner extends BaseQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver, mode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.mode = mode;\n        this.broadcaster = new Broadcaster(this);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect() {\n        if (this.session) {\n            return Promise.resolve(this.session);\n        }\n        const [session] = await this.driver.instanceDatabase.createSession({});\n        this.session = session;\n        this.sessionTransaction = await session.transaction();\n        return this.session;\n    }\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    async release() {\n        this.isReleased = true;\n        if (this.session) {\n            await this.session.delete();\n        }\n        this.session = undefined;\n        return Promise.resolve();\n    }\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel) {\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        await this.connect();\n        await this.sessionTransaction.begin();\n        this.connection.logger.logQuery(\"START TRANSACTION\");\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive || !this.sessionTransaction)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        await this.sessionTransaction.commit();\n        this.connection.logger.logQuery(\"COMMIT\");\n        this.isTransactionActive = false;\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive || !this.sessionTransaction)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        await this.sessionTransaction.rollback();\n        this.connection.logger.logQuery(\"ROLLBACK\");\n        this.isTransactionActive = false;\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const broadcasterResult = new BroadcasterResult();\n        try {\n            const queryStartTime = +new Date();\n            await this.connect();\n            let rawResult = undefined;\n            const isSelect = query.startsWith(\"SELECT\");\n            const executor = isSelect && !this.isTransactionActive\n                ? this.driver.instanceDatabase\n                : this.sessionTransaction;\n            if (!this.isTransactionActive && !isSelect) {\n                await this.sessionTransaction.begin();\n            }\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                this.broadcaster.broadcastBeforeQueryEvent(broadcasterResult, query, parameters);\n                rawResult = await executor.run({\n                    sql: query,\n                    params: parameters\n                        ? parameters.reduce((params, value, index) => {\n                            params[\"param\" + index] = value;\n                            return params;\n                        }, {})\n                        : undefined,\n                    json: true,\n                });\n                if (!this.isTransactionActive && !isSelect) {\n                    await this.sessionTransaction.commit();\n                }\n            }\n            catch (error) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    if (!this.isTransactionActive && !isSelect)\n                        await this.sessionTransaction.rollback();\n                }\n                catch (rollbackError) { }\n                throw error;\n            }\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, true, queryExecutionTime, rawResult, undefined);\n            if (maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime)\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            const result = new QueryResult();\n            result.raw = rawResult;\n            result.records = rawResult ? rawResult[0] : [];\n            if (rawResult && rawResult[1] && rawResult[1].rowCountExact) {\n                result.affected = parseInt(rawResult[1].rowCountExact);\n            }\n            if (!useStructuredResult) {\n                return result.records;\n            }\n            return result;\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            this.broadcaster.broadcastAfterQueryEvent(broadcasterResult, query, parameters, false, undefined, undefined, err);\n            throw new QueryFailedError(query, parameters, err);\n        }\n        finally {\n            await broadcasterResult.wait();\n        }\n    }\n    /**\n     * Update database schema.\n     * Used for creating/altering/dropping tables, columns, indexes, etc.\n     *\n     * DDL changing queries should be executed by `updateSchema()` method.\n     */\n    async updateDDL(query, parameters) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        try {\n            const queryStartTime = +new Date();\n            const [operation] = await this.driver.instanceDatabase.updateSchema(query);\n            await operation.promise();\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime)\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query, parameters, onEnd, onError) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        try {\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const request = {\n                sql: query,\n                params: parameters\n                    ? parameters.reduce((params, value, index) => {\n                        params[\"param\" + index] = value;\n                        return params;\n                    }, {})\n                    : undefined,\n                json: true,\n            };\n            const stream = this.driver.instanceDatabase.runStream(request);\n            if (onEnd) {\n                stream.on(\"end\", onEnd);\n            }\n            if (onError) {\n                stream.on(\"error\", onError);\n            }\n            return stream;\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases() {\n        return Promise.resolve([]);\n    }\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database) {\n        return Promise.resolve([]);\n    }\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database) {\n        throw new TypeORMError(`Check database queries are not supported by Spanner driver.`);\n    }\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase() {\n        throw new TypeORMError(`Check database queries are not supported by Spanner driver.`);\n    }\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema) {\n        const result = await this.query(`SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`);\n        return result.length ? true : false;\n    }\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema() {\n        throw new TypeORMError(`Check schema queries are not supported by Spanner driver.`);\n    }\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName) {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE' ` +\n            `AND \\`TABLE_NAME\\` = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName, columnName) {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' ` +\n            `AND \\`TABLE_NAME\\` = '${tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Creates a new database.\n     * Note: Spanner does not support database creation inside a transaction block.\n     */\n    async createDatabase(database, ifNotExist) {\n        if (ifNotExist) {\n            const databaseAlreadyExists = await this.hasDatabase(database);\n            if (databaseAlreadyExists)\n                return Promise.resolve();\n        }\n        const up = `CREATE DATABASE \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Drops database.\n     * Note: Spanner does not support database dropping inside a transaction block.\n     */\n    async dropDatabase(database, ifExist) {\n        const up = ifExist\n            ? `DROP DATABASE IF EXISTS \"${database}\"`\n            : `DROP DATABASE \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemaPath, ifNotExist) {\n        return Promise.resolve();\n    }\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath, ifExist, isCascade) {\n        return Promise.resolve();\n    }\n    /**\n     * Creates a new table.\n     */\n    async createTable(table, ifNotExist = false, createForeignKeys = true, createIndices = true) {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist)\n                return Promise.resolve();\n        }\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n        // if table has column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter((column) => column.generatedType && column.asExpression);\n        for (const column of generatedColumns) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            upQueries.push(insertQuery);\n            downQueries.push(deleteQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the table.\n     */\n    async dropTable(target, ifExist, dropForeignKeys = true, dropIndices = true) {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target);\n            if (!isTableExist)\n                return Promise.resolve();\n        }\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys = dropForeignKeys;\n        const tablePath = this.getTablePath(target);\n        const table = await this.getCachedTable(tablePath);\n        const upQueries = [];\n        const downQueries = [];\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter((column) => column.generatedType && column.asExpression);\n        for (const column of generatedColumns) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            upQueries.push(deleteQuery);\n            downQueries.push(insertQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Creates a new view.\n     */\n    async createView(view) {\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the view.\n     */\n    async dropView(target) {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName, newTableName) {\n        throw new TypeORMError(`Rename table queries are not supported by Spanner driver.`);\n    }\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName, column) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN ${this.driver.escape(column.name)}`));\n        // create column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n        else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table, [\n                    column.name,\n                ]),\n                columnNames: [column.name],\n                isUnique: true,\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames,\n            }));\n            upQueries.push(this.createIndexSql(table, uniqueIndex));\n            downQueries.push(this.dropIndexSql(table, uniqueIndex));\n        }\n        if (column.generatedType && column.asExpression) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            upQueries.push(insertQuery);\n            downQueries.push(deleteQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        let newColumn;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        }\n        else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName, oldTableColumnOrName, newColumn) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find((column) => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        if (oldColumn.name !== newColumn.name ||\n            oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length ||\n            oldColumn.isArray !== newColumn.isArray ||\n            oldColumn.generatedType !== newColumn.generatedType ||\n            oldColumn.asExpression !== newColumn.asExpression) {\n            // To avoid data conversion, we just recreate column\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n            // update cloned table\n            clonedTable = table.clone();\n        }\n        else {\n            if (newColumn.precision !== oldColumn.precision ||\n                newColumn.scale !== oldColumn.scale) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n            if (oldColumn.isNullable !== newColumn.isNullable) {\n                if (newColumn.isNullable) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                }\n                else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                }\n            }\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table, [\n                            newColumn.name,\n                        ]),\n                        columnNames: [newColumn.name],\n                        isUnique: true,\n                    });\n                    clonedTable.indices.push(uniqueIndex);\n                    clonedTable.uniques.push(new TableUnique({\n                        name: uniqueIndex.name,\n                        columnNames: uniqueIndex.columnNames,\n                    }));\n                    upQueries.push(this.createIndexSql(table, uniqueIndex));\n                    downQueries.push(this.dropIndexSql(table, uniqueIndex));\n                }\n                else {\n                    const uniqueIndex = clonedTable.indices.find((index) => {\n                        return (index.columnNames.length === 1 &&\n                            index.isUnique === true &&\n                            !!index.columnNames.find((columnName) => columnName === newColumn.name));\n                    });\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex), 1);\n                    const tableUnique = clonedTable.uniques.find((unique) => unique.name === uniqueIndex.name);\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);\n                    upQueries.push(this.dropIndexSql(table, uniqueIndex));\n                    downQueries.push(this.createIndexSql(table, uniqueIndex));\n                }\n            }\n        }\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName, changedColumns) {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName, columnOrName) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn\n            ? columnOrName\n            : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        // drop column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n        // drop column check\n        const columnCheck = clonedTable.checks.find((check) => !!check.columnNames &&\n            check.columnNames.length === 1 &&\n            check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN ${this.driver.escape(column.name)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column)}`));\n        if (column.generatedType && column.asExpression) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            });\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            });\n            upQueries.push(deleteQuery);\n            downQueries.push(insertQuery);\n        }\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Creates a new primary key.\n     *\n     * Not supported in Spanner.\n     * @see https://cloud.google.com/spanner/docs/schema-and-data-model#notes_about_key_columns\n     */\n    async createPrimaryKey(tableOrName, columnNames) {\n        throw new Error(\"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\");\n    }\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName, columns) {\n        throw new Error(\"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\");\n    }\n    /**\n     * Creates a new primary key.\n     *\n     * Not supported in Spanner.\n     * @see https://cloud.google.com/spanner/docs/schema-and-data-model#notes_about_key_columns\n     */\n    async dropPrimaryKey(tableOrName) {\n        throw new Error(\"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\");\n    }\n    /**\n     * Creates new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName, uniqueConstraint) {\n        throw new TypeORMError(`Spanner does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Creates new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName, uniqueConstraints) {\n        throw new TypeORMError(`Spanner does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName, uniqueOrName) {\n        throw new TypeORMError(`Spanner does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Drops unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName, uniqueConstraints) {\n        throw new TypeORMError(`Spanner does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName, checkConstraint) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new check constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(table, checkConstraint.expression);\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName, checkConstraints) {\n        const promises = checkConstraints.map((checkConstraint) => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName, checkOrName) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new TypeORMError(`Supplied check constraint was not found in table ${table.name}`);\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName, checkConstraints) {\n        const promises = checkConstraints.map((checkConstraint) => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n    /**\n     * Creates new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName, exclusionConstraint) {\n        throw new TypeORMError(`Spanner does not support exclusion constraints.`);\n    }\n    /**\n     * Creates new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`Spanner does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName, exclusionOrName) {\n        throw new TypeORMError(`Spanner does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`Spanner does not support exclusion constraints.`);\n    }\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName, foreignKey) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames, this.getTablePath(foreignKey), foreignKey.referencedColumnNames);\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName, foreignKeys) {\n        for (const foreignKey of foreignKeys) {\n            await this.createForeignKey(tableOrName, foreignKey);\n        }\n    }\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName, foreignKeyOrName) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName, foreignKeys) {\n        for (const foreignKey of foreignKeys) {\n            await this.dropForeignKey(tableOrName, foreignKey);\n        }\n    }\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName, index) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName, indices) {\n        for (const index of indices) {\n            await this.createIndex(tableOrName, index);\n        }\n    }\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName, indexOrName) {\n        const table = tableOrName instanceof Table\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName);\n        if (!index)\n            throw new TypeORMError(`Supplied index ${indexOrName} was not found in table ${table.name}`);\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName, indices) {\n        for (const index of indices) {\n            await this.dropIndex(tableOrName, index);\n        }\n    }\n    /**\n     * Clears all table contents.\n     * Spanner does not support TRUNCATE TABLE statement, so we use DELETE FROM.\n     */\n    async clearTable(tableName) {\n        await this.query(`DELETE FROM ${this.escapePath(tableName)} WHERE true`);\n    }\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase() {\n        // drop index queries\n        const selectIndexDropsQuery = `SELECT concat('DROP INDEX \\`', INDEX_NAME, '\\`') AS \\`query\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`INDEXES\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`INDEX_TYPE\\` = 'INDEX' AND \\`SPANNER_IS_MANAGED\\` = false`;\n        const dropIndexQueries = await this.query(selectIndexDropsQuery);\n        // drop foreign key queries\n        const selectFKDropsQuery = `SELECT concat('ALTER TABLE \\`', TABLE_NAME, '\\`', ' DROP CONSTRAINT \\`', CONSTRAINT_NAME, '\\`') AS \\`query\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`CONSTRAINT_TYPE\\` = 'FOREIGN KEY'`;\n        const dropFKQueries = await this.query(selectFKDropsQuery);\n        // drop view queries\n        // const selectViewDropsQuery = `SELECT concat('DROP VIEW \\`', TABLE_NAME, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\``\n        // const dropViewQueries: ObjectLiteral[] = await this.query(\n        //     selectViewDropsQuery,\n        // )\n        // drop table queries\n        const dropTablesQuery = `SELECT concat('DROP TABLE \\`', TABLE_NAME, '\\`') AS \\`query\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE'`;\n        const dropTableQueries = await this.query(dropTablesQuery);\n        if (!dropIndexQueries.length &&\n            !dropFKQueries.length &&\n            // !dropViewQueries.length &&\n            !dropTableQueries.length)\n            return;\n        const isAnotherTransactionActive = this.isTransactionActive;\n        if (!isAnotherTransactionActive)\n            await this.startTransaction();\n        try {\n            for (let query of dropIndexQueries) {\n                await this.updateDDL(query[\"query\"]);\n            }\n            for (let query of dropFKQueries) {\n                await this.updateDDL(query[\"query\"]);\n            }\n            // for (let query of dropViewQueries) {\n            //     await this.updateDDL(query[\"query\"])\n            // }\n            for (let query of dropTableQueries) {\n                await this.updateDDL(query[\"query\"]);\n            }\n            await this.commitTransaction();\n        }\n        catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction();\n            }\n            catch (rollbackError) { }\n            throw error;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Override Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql() {\n        for (const { query, parameters } of this.sqlInMemory.upQueries) {\n            if (this.isDMLQuery(query)) {\n                await this.query(query, parameters);\n            }\n            else {\n                await this.updateDDL(query, parameters);\n            }\n        }\n    }\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql() {\n        for (const { query, parameters, } of this.sqlInMemory.downQueries.reverse()) {\n            if (this.isDMLQuery(query)) {\n                await this.query(query, parameters);\n            }\n            else {\n                await this.updateDDL(query, parameters);\n            }\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    async loadViews(viewNames) {\n        // const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        // if (!hasTable) {\n        //     return []\n        // }\n        //\n        // if (!viewNames) {\n        //     viewNames = []\n        // }\n        //\n        // const escapedViewNames = viewNames\n        //     .map((viewName) => `'${viewName}'`)\n        //     .join(\", \")\n        //\n        // const query =\n        //     `SELECT \\`T\\`.*, \\`V\\`.\\`VIEW_DEFINITION\\` FROM ${this.escapePath(\n        //         this.getTypeormMetadataTableName(),\n        //     )} \\`T\\` ` +\n        //     `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\` \\`V\\` ON \\`V\\`.\\`TABLE_NAME\\` = \\`T\\`.\\`NAME\\` ` +\n        //     `WHERE \\`T\\`.\\`TYPE\\` = '${MetadataTableType.VIEW}' ${\n        //         viewNames.length\n        //             ? ` AND \\`T\\`.\\`NAME\\` IN (${escapedViewNames})`\n        //             : \"\"\n        //     }`\n        // const dbViews = await this.query(query)\n        // return dbViews.map((dbView: any) => {\n        //     const view = new View()\n        //     view.database = dbView[\"NAME\"]\n        //     view.name = this.driver.buildTableName(dbView[\"NAME\"])\n        //     view.expression = dbView[\"NAME\"]\n        //     return view\n        // })\n        return Promise.resolve([]);\n    }\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    async loadTables(tableNames) {\n        if (tableNames && tableNames.length === 0) {\n            return [];\n        }\n        const dbTables = [];\n        if (!tableNames || !tableNames.length) {\n            // Since we don't have any of this data we have to do a scan\n            const tablesSql = `SELECT \\`TABLE_NAME\\` ` +\n                `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n                `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE'`;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        else {\n            const tablesSql = `SELECT \\`TABLE_NAME\\` ` +\n                `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n                `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE' ` +\n                `AND \\`TABLE_NAME\\` IN (${tableNames\n                    .map((tableName) => `'${tableName}'`)\n                    .join(\", \")})`;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n        const loadedTableNames = dbTables\n            .map((dbTable) => `'${dbTable.TABLE_NAME}'`)\n            .join(\", \");\n        const columnsSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_NAME\\` IN (${loadedTableNames})`;\n        const primaryKeySql = `SELECT \\`KCU\\`.\\`TABLE_NAME\\`, \\`KCU\\`.\\`COLUMN_NAME\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`KCU\\` ON \\`KCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'PRIMARY KEY' ` +\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames})`;\n        const indicesSql = `SELECT \\`I\\`.\\`TABLE_NAME\\`, \\`I\\`.\\`INDEX_NAME\\`, \\`I\\`.\\`IS_UNIQUE\\`, \\`I\\`.\\`IS_NULL_FILTERED\\`, \\`IC\\`.\\`COLUMN_NAME\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`INDEXES\\` \\`I\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`INDEX_COLUMNS\\` \\`IC\\` ON \\`IC\\`.\\`INDEX_NAME\\` = \\`I\\`.\\`INDEX_NAME\\` ` +\n            `AND \\`IC\\`.\\`TABLE_NAME\\` = \\`I\\`.\\`TABLE_NAME\\` ` +\n            `WHERE \\`I\\`.\\`TABLE_CATALOG\\` = '' AND \\`I\\`.\\`TABLE_SCHEMA\\` = '' AND \\`I\\`.\\`TABLE_NAME\\` IN (${loadedTableNames}) ` +\n            `AND \\`I\\`.\\`INDEX_TYPE\\` = 'INDEX' AND \\`I\\`.\\`SPANNER_IS_MANAGED\\` = false`;\n        const checksSql = `SELECT \\`TC\\`.\\`TABLE_NAME\\`, \\`TC\\`.\\`CONSTRAINT_NAME\\`, \\`CC\\`.\\`CHECK_CLAUSE\\`, \\`CCU\\`.\\`COLUMN_NAME\\`` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_COLUMN_USAGE\\` \\`CCU\\` ON \\`CCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CHECK_CONSTRAINTS\\` \\`CC\\` ON \\`CC\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'CHECK' ` +\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames}) AND \\`TC\\`.\\`CONSTRAINT_NAME\\` NOT LIKE 'CK_IS_NOT_NULL%'`;\n        const foreignKeysSql = `SELECT \\`TC\\`.\\`TABLE_NAME\\`, \\`TC\\`.\\`CONSTRAINT_NAME\\`, \\`KCU\\`.\\`COLUMN_NAME\\`, ` +\n            `\\`CTU\\`.\\`TABLE_NAME\\` AS \\`REFERENCED_TABLE_NAME\\`, \\`CCU\\`.\\`COLUMN_NAME\\` AS \\`REFERENCED_COLUMN_NAME\\`, ` +\n            `\\`RC\\`.\\`UPDATE_RULE\\`, \\`RC\\`.\\`DELETE_RULE\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`KCU\\` ON \\`KCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_TABLE_USAGE\\` \\`CTU\\` ON \\`CTU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`RC\\` ON \\`RC\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_COLUMN_USAGE\\` \\`CCU\\` ON \\`CCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'FOREIGN KEY' ` +\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames})`;\n        const [dbColumns, dbPrimaryKeys, dbIndices, dbChecks, dbForeignKeys,] = await Promise.all([\n            this.query(columnsSql),\n            this.query(primaryKeySql),\n            this.query(indicesSql),\n            this.query(checksSql),\n            this.query(foreignKeysSql),\n        ]);\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async (dbTable) => {\n            const table = new Table();\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"]);\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter((dbColumn) => dbColumn[\"TABLE_NAME\"] ===\n                dbTable[\"TABLE_NAME\"])\n                .map(async (dbColumn) => {\n                const columnUniqueIndices = dbIndices.filter((dbIndex) => {\n                    return (dbIndex[\"TABLE_NAME\"] ===\n                        dbTable[\"TABLE_NAME\"] &&\n                        dbIndex[\"COLUMN_NAME\"] ===\n                            dbColumn[\"COLUMN_NAME\"] &&\n                        dbIndex[\"IS_UNIQUE\"] === true);\n                });\n                const tableMetadata = this.connection.entityMetadatas.find((metadata) => this.getTablePath(table) ===\n                    this.getTablePath(metadata));\n                const hasIgnoredIndex = columnUniqueIndices.length > 0 &&\n                    tableMetadata &&\n                    tableMetadata.indices.some((index) => {\n                        return columnUniqueIndices.some((uniqueIndex) => {\n                            return (index.name ===\n                                uniqueIndex[\"INDEX_NAME\"] &&\n                                index.synchronize === false);\n                        });\n                    });\n                const isConstraintComposite = columnUniqueIndices.every((uniqueIndex) => {\n                    return dbIndices.some((dbIndex) => dbIndex[\"INDEX_NAME\"] ===\n                        uniqueIndex[\"INDEX_NAME\"] &&\n                        dbIndex[\"COLUMN_NAME\"] !==\n                            dbColumn[\"COLUMN_NAME\"]);\n                });\n                const tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                let fullType = dbColumn[\"SPANNER_TYPE\"].toLowerCase();\n                if (fullType.indexOf(\"array\") !== -1) {\n                    tableColumn.isArray = true;\n                    fullType = fullType.substring(fullType.indexOf(\"<\") + 1, fullType.indexOf(\">\"));\n                }\n                if (fullType.indexOf(\"(\") !== -1) {\n                    tableColumn.type = fullType.substring(0, fullType.indexOf(\"(\"));\n                }\n                else {\n                    tableColumn.type = fullType;\n                }\n                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1) {\n                    tableColumn.length = fullType.substring(fullType.indexOf(\"(\") + 1, fullType.indexOf(\")\"));\n                }\n                if (dbColumn[\"IS_GENERATED\"] === \"ALWAYS\") {\n                    tableColumn.asExpression =\n                        dbColumn[\"GENERATION_EXPRESSION\"];\n                    tableColumn.generatedType = \"STORED\";\n                    // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                    const asExpressionQuery = this.selectTypeormMetadataSql({\n                        table: dbTable[\"TABLE_NAME\"],\n                        type: MetadataTableType.GENERATED_COLUMN,\n                        name: tableColumn.name,\n                    });\n                    const results = await this.query(asExpressionQuery.query, asExpressionQuery.parameters);\n                    if (results[0] && results[0].value) {\n                        tableColumn.asExpression = results[0].value;\n                    }\n                    else {\n                        tableColumn.asExpression = \"\";\n                    }\n                }\n                tableColumn.isUnique =\n                    columnUniqueIndices.length > 0 &&\n                        !hasIgnoredIndex &&\n                        !isConstraintComposite;\n                tableColumn.isNullable =\n                    dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                tableColumn.isPrimary = dbPrimaryKeys.some((dbPrimaryKey) => {\n                    return (dbPrimaryKey[\"TABLE_NAME\"] ===\n                        dbColumn[\"TABLE_NAME\"] &&\n                        dbPrimaryKey[\"COLUMN_NAME\"] ===\n                            dbColumn[\"COLUMN_NAME\"]);\n                });\n                return tableColumn;\n            }));\n            const tableForeignKeys = dbForeignKeys.filter((dbForeignKey) => {\n                return (dbForeignKey[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"]);\n            });\n            table.foreignKeys = OrmUtils.uniq(tableForeignKeys, (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"]).map((dbForeignKey) => {\n                const foreignKeys = tableForeignKeys.filter((dbFk) => dbFk[\"CONSTRAINT_NAME\"] ===\n                    dbForeignKey[\"CONSTRAINT_NAME\"]);\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: OrmUtils.uniq(foreignKeys.map((dbFk) => dbFk[\"COLUMN_NAME\"])),\n                    referencedDatabase: dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"],\n                    referencedTableName: dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                    referencedColumnNames: OrmUtils.uniq(foreignKeys.map((dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"])),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n            const tableIndices = dbIndices.filter((dbIndex) => dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"]);\n            table.indices = OrmUtils.uniq(tableIndices, (dbIndex) => dbIndex[\"INDEX_NAME\"]).map((constraint) => {\n                const indices = tableIndices.filter((index) => {\n                    return index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex({\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"IS_UNIQUE\"],\n                    isNullFiltered: constraint[\"IS_NULL_FILTERED\"],\n                });\n            });\n            const tableChecks = dbChecks.filter((dbCheck) => dbCheck[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"]);\n            table.checks = OrmUtils.uniq(tableChecks, (dbIndex) => dbIndex[\"CONSTRAINT_NAME\"]).map((constraint) => {\n                const checks = tableChecks.filter((dbC) => dbC[\"CONSTRAINT_NAME\"] ===\n                    constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"CHECK_CLAUSE\"],\n                });\n            });\n            return table;\n        }));\n    }\n    /**\n     * Builds create table sql.\n     */\n    createTableSql(table, createForeignKeys) {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column))\n            .join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n        // we create unique indexes instead of unique constraints, because Spanner does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n            const isUniqueIndexExist = table.indices.some((index) => {\n                return (index.columnNames.length === 1 &&\n                    !!index.isUnique &&\n                    index.columnNames.indexOf(column.name) !== -1);\n            });\n            const isUniqueConstraintExist = table.uniques.some((unique) => {\n                return (unique.columnNames.length === 1 &&\n                    unique.columnNames.indexOf(column.name) !== -1);\n            });\n            if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                table.indices.push(new TableIndex({\n                    name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n                    columnNames: [column.name],\n                    isUnique: true,\n                }));\n        });\n        // as Spanner does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach((unique) => {\n                const uniqueExist = table.indices.some((index) => index.name === unique.name);\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true,\n                    }));\n                }\n            });\n        }\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                const checkName = check.name\n                    ? check.name\n                    : this.connection.namingStrategy.checkConstraintName(table, check.expression);\n                return `CONSTRAINT \\`${checkName}\\` CHECK (${check.expression})`;\n            })\n                .join(\", \");\n            sql += `, ${checksSql}`;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                const columnNames = fk.columnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table, fk.columnNames, this.getTablePath(fk), fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                return `CONSTRAINT \\`${fk.name}\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(this.getTablePath(fk))} (${referencedColumnNames})`;\n            })\n                .join(\", \");\n            sql += `, ${foreignKeysSql}`;\n        }\n        sql += `)`;\n        const primaryColumns = table.columns.filter((column) => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const columnNames = primaryColumns\n                .map((column) => this.driver.escape(column.name))\n                .join(\", \");\n            sql += ` PRIMARY KEY (${columnNames})`;\n        }\n        return new Query(sql);\n    }\n    /**\n     * Builds drop table sql.\n     */\n    dropTableSql(tableOrPath) {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);\n    }\n    createViewSql(view) {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        const viewName = this.escapePath(view);\n        const expression = typeof view.expression === \"string\"\n            ? view.expression\n            : view.expression(this.connection).getQuery();\n        return new Query(`CREATE ${materializedClause}VIEW ${viewName} SQL SECURITY INVOKER AS ${expression}`);\n    }\n    async insertViewDefinitionSql(view) {\n        let { schema, tableName: name } = this.driver.parseTableName(view);\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW;\n        const expression = typeof view.expression === \"string\"\n            ? view.expression.trim()\n            : view.expression(this.connection).getQuery();\n        return this.insertTypeormMetadataSql({\n            type,\n            schema,\n            name,\n            value: expression,\n        });\n    }\n    /**\n     * Builds drop view sql.\n     */\n    dropViewSql(view) {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        return new Query(`DROP ${materializedClause}VIEW ${this.escapePath(view)}`);\n    }\n    /**\n     * Builds remove view sql.\n     */\n    async deleteViewDefinitionSql(view) {\n        let { schema, tableName: name } = this.driver.parseTableName(view);\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW;\n        return this.deleteTypeormMetadataSql({ type, schema, name });\n    }\n    /**\n     * Builds create index sql.\n     */\n    createIndexSql(table, index) {\n        const columns = index.columnNames\n            .map((columnName) => this.driver.escape(columnName))\n            .join(\", \");\n        let indexType = \"\";\n        if (index.isUnique)\n            indexType += \"UNIQUE \";\n        if (index.isNullFiltered)\n            indexType += \"NULL_FILTERED \";\n        return new Query(`CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapePath(table)} (${columns})`);\n    }\n    /**\n     * Builds drop index sql.\n     */\n    dropIndexSql(table, indexOrName) {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \\`${indexName}\\``);\n    }\n    /**\n     * Builds create check constraint sql.\n     */\n    createCheckConstraintSql(table, checkConstraint) {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${checkConstraint.name}\\` CHECK (${checkConstraint.expression})`);\n    }\n    /**\n     * Builds drop check constraint sql.\n     */\n    dropCheckConstraintSql(table, checkOrName) {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \\`${checkName}\\``);\n    }\n    /**\n     * Builds create foreign key sql.\n     */\n    createForeignKeySql(table, foreignKey) {\n        const columnNames = foreignKey.columnNames\n            .map((column) => this.driver.escape(column))\n            .join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => this.driver.escape(column))\n            .join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))} (${referencedColumnNames})`;\n        return new Query(sql);\n    }\n    /**\n     * Builds drop foreign key sql.\n     */\n    dropForeignKeySql(table, foreignKeyOrName) {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey\n            ? foreignKeyOrName.name\n            : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \\`${foreignKeyName}\\``);\n    }\n    /**\n     * Escapes given table or view path.\n     */\n    escapePath(target) {\n        const { tableName } = this.driver.parseTableName(target);\n        return `\\`${tableName}\\``;\n    }\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    buildCreateColumnSql(column) {\n        let c = `${this.driver.escape(column.name)} ${this.connection.driver.createFullType(column)}`;\n        // Spanner supports only STORED generated column type\n        if (column.generatedType === \"STORED\" && column.asExpression) {\n            c += ` AS (${column.asExpression}) STORED`;\n        }\n        else {\n            if (!column.isNullable)\n                c += \" NOT NULL\";\n        }\n        return c;\n    }\n    /**\n     * Executes sql used special for schema build.\n     */\n    async executeQueries(upQueries, downQueries) {\n        if (upQueries instanceof Query)\n            upQueries = [upQueries];\n        if (downQueries instanceof Query)\n            downQueries = [downQueries];\n        this.sqlInMemory.upQueries.push(...upQueries);\n        this.sqlInMemory.downQueries.push(...downQueries);\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve();\n        for (const { query, parameters } of upQueries) {\n            if (this.isDMLQuery(query)) {\n                await this.query(query, parameters);\n            }\n            else {\n                await this.updateDDL(query, parameters);\n            }\n        }\n    }\n    isDMLQuery(query) {\n        return (query.startsWith(\"INSERT\") ||\n            query.startsWith(\"UPDATE\") ||\n            query.startsWith(\"DELETE\"));\n    }\n    /**\n     * Change table comment.\n     */\n    changeTableComment(tableOrName, comment) {\n        throw new TypeORMError(`spanner driver does not support change table comment.`);\n    }\n}\n\n//# sourceMappingURL=SpannerQueryRunner.js.map\n","import { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { SpannerQueryRunner } from \"./SpannerQueryRunner\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\n/**\n * Organizes communication with Spanner DBMS.\n */\nexport class SpannerDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"none\";\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://cloud.google.com/spanner/docs/reference/standard-sql/data-types\n         */\n        this.supportedDataTypes = [\n            \"bool\",\n            \"int64\",\n            \"float64\",\n            \"numeric\",\n            \"string\",\n            \"json\",\n            \"bytes\",\n            \"date\",\n            \"timestamp\",\n            \"array\",\n        ];\n        /**\n         * Returns type of upsert supported by driver if any\n         */\n        this.supportedUpsertTypes = [];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\"string\", \"bytes\"];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withWidthColumnTypes = [];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [];\n        /**\n         * Gets list of column data types that supports scale by a driver.\n         */\n        this.withScaleColumnTypes = [];\n        /**\n         * ORM has special columns and we need to know what database column types should be for those columns.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"timestamp\",\n            createDateDefault: \"\",\n            updateDate: \"timestamp\",\n            updateDateDefault: \"\",\n            deleteDate: \"timestamp\",\n            deleteDateNullable: true,\n            version: \"int64\",\n            treeLevel: \"int64\",\n            migrationId: \"int64\",\n            migrationName: \"string\",\n            migrationTimestamp: \"int64\",\n            cacheId: \"string\",\n            cacheIdentifier: \"string\",\n            cacheTime: \"int64\",\n            cacheDuration: \"int64\",\n            cacheQuery: \"string\",\n            cacheResult: \"string\",\n            metadataType: \"string\",\n            metadataDatabase: \"string\",\n            metadataSchema: \"string\",\n            metadataTable: \"string\",\n            metadataName: \"string\",\n            metadataValue: \"string\",\n        };\n        /**\n         * The prefix used for the parameters\n         */\n        this.parametersPrefix = \"@param\";\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {};\n        /**\n         * Max length allowed by MySQL for aliases.\n         * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n         */\n        this.maxAliasLength = 63;\n        this.cteCapabilities = {\n            enabled: true,\n        };\n        /**\n         * Supported returning types\n         */\n        this._isReturningSqlSupported = {\n            delete: false,\n            insert: false,\n            update: false,\n        };\n        this.connection = connection;\n        this.options = connection.options;\n        this.isReplicated = this.options.replication ? true : false;\n        // load mysql package\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        this.instance = this.spanner.instance(this.options.instanceId);\n        this.instanceDatabase = this.instance.database(this.options.databaseId);\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect() {\n        return Promise.resolve();\n    }\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect() {\n        this.instanceDatabase.close();\n    }\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        return new SpannerQueryRunner(this, mode);\n    }\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql, parameters, nativeParameters) {\n        const escapedParameters = Object.keys(nativeParameters).map((key) => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n        const parameterIndexMap = new Map();\n        sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray, key) => {\n            if (!parameters.hasOwnProperty(key)) {\n                return full;\n            }\n            if (parameterIndexMap.has(key)) {\n                return this.parametersPrefix + parameterIndexMap.get(key);\n            }\n            let value = parameters[key];\n            if (value === null) {\n                return full;\n            }\n            if (isArray) {\n                return value\n                    .map((v) => {\n                    escapedParameters.push(v);\n                    return this.createParameter(key, escapedParameters.length - 1);\n                })\n                    .join(\", \");\n            }\n            if (value instanceof Function) {\n                return value();\n            }\n            escapedParameters.push(value);\n            parameterIndexMap.set(key, escapedParameters.length - 1);\n            return this.createParameter(key, escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        sql = sql.replace(/([ ]+)?=([ ]+)?:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, emptySpaceBefore, emptySpaceAfter, isArray, key) => {\n            if (!parameters.hasOwnProperty(key)) {\n                return full;\n            }\n            let value = parameters[key];\n            if (value === null) {\n                return \" IS NULL\";\n            }\n            return full;\n        });\n        return [sql, escapedParameters];\n    }\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName) {\n        return `\\`${columnName}\\``;\n    }\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName, schema, database) {\n        let tablePath = [tableName];\n        if (database) {\n            tablePath.unshift(database);\n        }\n        return tablePath.join(\".\");\n    }\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(target) {\n        const driverDatabase = this.database;\n        const driverSchema = undefined;\n        if (target instanceof Table || target instanceof View) {\n            const parsed = this.parseTableName(target.name);\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (target instanceof TableForeignKey) {\n            const parsed = this.parseTableName(target.referencedTableName);\n            return {\n                database: target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema: target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (target instanceof EntityMetadata) {\n            // EntityMetadata tableName is never a path\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            };\n        }\n        const parts = target.split(\".\");\n        return {\n            database: (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\n            schema: driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        };\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === \"numeric\") {\n            const lib = this.options.driver || PlatformTools.load(\"spanner\");\n            return lib.Spanner.numeric(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            return value;\n        }\n        else if (columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value);\n        }\n        return value;\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value)\n                : value;\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\") {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date) {\n            value = new Date(value);\n        }\n        else if (columnMetadata.type === \"numeric\") {\n            value = value.value;\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\n        }\n        else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value;\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    }\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column) {\n        if (column.type === Number) {\n            return \"int64\";\n        }\n        else if (column.type === String || column.type === \"uuid\") {\n            return \"string\";\n        }\n        else if (column.type === Date) {\n            return \"timestamp\";\n        }\n        else if (column.type === Buffer) {\n            return \"bytes\";\n        }\n        else if (column.type === Boolean) {\n            return \"bool\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     *\n     * Spanner does not support default values.\n     */\n    normalizeDefault(columnMetadata) {\n        return columnMetadata.default === \"\"\n            ? `\"${columnMetadata.default}\"`\n            : `${columnMetadata.default}`;\n    }\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column) {\n        return column.entityMetadata.indices.some((idx) => idx.isUnique &&\n            idx.columns.length === 1 &&\n            idx.columns[0] === column);\n    }\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column) {\n        if (column.length)\n            return column.length.toString();\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n        switch (column.type) {\n            case String:\n            case \"string\":\n            case \"bytes\":\n                return \"max\";\n            default:\n                return \"\";\n        }\n    }\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column) {\n        let type = column.type;\n        // used 'getColumnLength()' method, because Spanner requires column length for `string` and `bytes` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n        }\n        else if (column.width) {\n            type += `(${column.width})`;\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined) {\n            type += `(${column.precision})`;\n        }\n        if (column.isArray)\n            type = `array<${type}>`;\n        return type;\n    }\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection() {\n        return this.instanceDatabase;\n    }\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection() {\n        return this.instanceDatabase;\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata, insertResult, entityIndex) {\n        if (!insertResult) {\n            return undefined;\n        }\n        if (insertResult.insertId === undefined) {\n            return Object.keys(insertResult).reduce((map, key) => {\n                const column = metadata.findColumnWithDatabaseName(key);\n                if (column) {\n                    OrmUtils.mergeDeep(map, column.createValueMap(insertResult[key]));\n                    // OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column))); // TODO: probably should be like there, but fails on enums, fix later\n                }\n                return map;\n            }, {});\n        }\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value;\n            if (generatedColumn.generationStrategy === \"increment\" &&\n                insertResult.insertId) {\n                // NOTE: When multiple rows is inserted by a single INSERT statement,\n                // `insertId` is the value generated for the first inserted row only.\n                value = insertResult.insertId + entityIndex;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns, columnMetadatas) {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find((c) => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            const isColumnChanged = tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== this.getColumnLength(columnMetadata) ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                !this.compareNullableValues(columnMetadata, tableColumn) ||\n                tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata);\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         this.getColumnLength(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\"==========================================\")\n            // }\n            return isColumnChanged;\n        });\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(returningType) {\n        return this._isReturningSqlSupported[returningType];\n    }\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported() {\n        return false;\n    }\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName, index) {\n        return this.parametersPrefix + index;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads all driver dependencies.\n     */\n    loadDependencies() {\n        try {\n            const lib = this.options.driver || PlatformTools.load(\"spanner\");\n            this.spanner = new lib.Spanner({\n                projectId: this.options.projectId,\n            });\n        }\n        catch (e) {\n            console.error(e);\n            throw new DriverPackageNotInstalledError(\"Spanner\", \"@google-cloud/spanner\");\n        }\n    }\n    compareNullableValues(columnMetadata, tableColumn) {\n        // Spanner does not support NULL/NOT NULL expressions for generated columns\n        if (columnMetadata.generatedType) {\n            return true;\n        }\n        return columnMetadata.isNullable === tableColumn.isNullable;\n    }\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    compareDefaultValues(columnMetadataValue, databaseValue) {\n        if (typeof columnMetadataValue === \"string\" &&\n            typeof databaseValue === \"string\") {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n        return columnMetadataValue === databaseValue;\n    }\n    /**\n     * If parameter is a datetime function, e.g. \"CURRENT_TIMESTAMP\", normalizes it.\n     * Otherwise returns original input.\n     */\n    normalizeDatetimeFunction(value) {\n        if (!value)\n            return value;\n        // check if input is datetime function\n        const isDatetimeFunction = value.toUpperCase().indexOf(\"CURRENT_TIMESTAMP\") !== -1 ||\n            value.toUpperCase().indexOf(\"NOW\") !== -1;\n        if (isDatetimeFunction) {\n            // extract precision, e.g. \"(3)\"\n            const precision = value.match(/\\(\\d+\\)/);\n            return precision\n                ? `CURRENT_TIMESTAMP${precision[0]}`\n                : \"CURRENT_TIMESTAMP\";\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Escapes a given comment.\n     */\n    escapeComment(comment) {\n        if (!comment)\n            return comment;\n        comment = comment.replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n        return comment;\n    }\n}\n\n//# sourceMappingURL=SpannerDriver.js.map\n","import { MissingDriverError } from \"../error/MissingDriverError\";\nimport { CockroachDriver } from \"./cockroachdb/CockroachDriver\";\nimport { MongoDriver } from \"./mongodb/MongoDriver\";\nimport { SqlServerDriver } from \"./sqlserver/SqlServerDriver\";\nimport { OracleDriver } from \"./oracle/OracleDriver\";\nimport { SqliteDriver } from \"./sqlite/SqliteDriver\";\nimport { CordovaDriver } from \"./cordova/CordovaDriver\";\nimport { ReactNativeDriver } from \"./react-native/ReactNativeDriver\";\nimport { NativescriptDriver } from \"./nativescript/NativescriptDriver\";\nimport { SqljsDriver } from \"./sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"./mysql/MysqlDriver\";\nimport { PostgresDriver } from \"./postgres/PostgresDriver\";\nimport { ExpoDriver } from \"./expo/ExpoDriver\";\nimport { AuroraMysqlDriver } from \"./aurora-mysql/AuroraMysqlDriver\";\nimport { AuroraPostgresDriver } from \"./aurora-postgres/AuroraPostgresDriver\";\nimport { SapDriver } from \"./sap/SapDriver\";\nimport { BetterSqlite3Driver } from \"./better-sqlite3/BetterSqlite3Driver\";\nimport { CapacitorDriver } from \"./capacitor/CapacitorDriver\";\nimport { SpannerDriver } from \"./spanner/SpannerDriver\";\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection) {\n        const { type } = connection.options;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"cockroachdb\":\n                return new CockroachDriver(connection);\n            case \"sap\":\n                return new SapDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"better-sqlite3\":\n                return new BetterSqlite3Driver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"nativescript\":\n                return new NativescriptDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            case \"expo\":\n                return new ExpoDriver(connection);\n            case \"aurora-mysql\":\n                return new AuroraMysqlDriver(connection);\n            case \"aurora-postgres\":\n                return new AuroraPostgresDriver(connection);\n            case \"capacitor\":\n                return new CapacitorDriver(connection);\n            case \"spanner\":\n                return new SpannerDriver(connection);\n            default:\n                throw new MissingDriverError(type, [\n                    \"aurora-mysql\",\n                    \"aurora-postgres\",\n                    \"better-sqlite3\",\n                    \"capacitor\",\n                    \"cockroachdb\",\n                    \"cordova\",\n                    \"expo\",\n                    \"mariadb\",\n                    \"mongodb\",\n                    \"mssql\",\n                    \"mysql\",\n                    \"nativescript\",\n                    \"oracle\",\n                    \"postgres\",\n                    \"react-native\",\n                    \"sap\",\n                    \"sqlite\",\n                    \"sqljs\",\n                    \"spanner\",\n                ]);\n        }\n    }\n}\n\n//# sourceMappingURL=DriverFactory.js.map\n","/**\n * Dummy functions for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\n/**\n * Loads all exported classes from the given directory.\n */\nexport function importClassesFromDirectories(logger, directories, formats = [\".js\", \".cjs\", \".ts\"]) {\n    return [];\n}\n/**\n * Loads all json files from the given directory.\n */\nexport function importJsonsFromDirectories(directories, format = \".json\") {\n    return [];\n}\n\n//# sourceMappingURL=BrowserDirectoryExportedClassesLoader.js.map\n","/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n *\n * @deprecated\n */\nconst defaultContainer = new (class {\n    constructor() {\n        this.instances = [];\n    }\n    get(someClass) {\n        let instance = this.instances.find((i) => i.type === someClass);\n        if (!instance) {\n            instance = {\n                type: someClass,\n                object: new someClass(),\n            };\n            this.instances.push(instance);\n        }\n        return instance.object;\n    }\n})();\nlet userContainer;\nlet userContainerOptions;\n/**\n * Sets container to be used by this library.\n *\n * @deprecated\n */\nexport function useContainer(iocContainer, options) {\n    userContainer = iocContainer;\n    userContainerOptions = options;\n}\n/**\n * Gets the IOC container used by this library.\n *\n * @deprecated\n */\nexport function getFromContainer(someClass) {\n    if (userContainer) {\n        try {\n            const instance = userContainer.get(someClass);\n            if (instance)\n                return instance;\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance;\n        }\n        catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error;\n        }\n    }\n    return defaultContainer.get(someClass);\n}\n\n//# sourceMappingURL=container.js.map\n","import { OrmUtils } from \"../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * This metadata contains all information about entity's column.\n */\nexport class ColumnMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"ColumnMetadata\");\n        /**\n         * Type's length in the database.\n         */\n        this.length = \"\";\n        /**\n         * Indicates if this column is a primary key.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this column is generated (auto increment or generated other way).\n         */\n        this.isGenerated = false;\n        /**\n         * Indicates if column can contain nulls or not.\n         */\n        this.isNullable = false;\n        /**\n         * Indicates if column is selected by query builder or not.\n         */\n        this.isSelect = true;\n        /**\n         * Indicates if column is inserted by default or not.\n         */\n        this.isInsert = true;\n        /**\n         * Indicates if column allows updates or not.\n         */\n        this.isUpdate = true;\n        /**\n         * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n         * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n         */\n        this.zerofill = false;\n        /**\n         * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n         */\n        this.unsigned = false;\n        /**\n         * Indicates if this column is an array.\n         */\n        this.isArray = false;\n        /**\n         * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n         */\n        this.isVirtual = false;\n        /**\n         * Indicates if column is a virtual property. Virtual properties are not mapped to the entity.\n         * This property is used in tandem the virtual column decorator.\n         * @See https://typeorm.io/decorator-reference#virtualcolumn for more details.\n         */\n        this.isVirtualProperty = false;\n        /**\n         * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n         */\n        this.isDiscriminator = false;\n        /**\n         * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n         */\n        this.isTreeLevel = false;\n        /**\n         * Indicates if this column contains an entity creation date.\n         */\n        this.isCreateDate = false;\n        /**\n         * Indicates if this column contains an entity update date.\n         */\n        this.isUpdateDate = false;\n        /**\n         * Indicates if this column contains an entity delete date.\n         */\n        this.isDeleteDate = false;\n        /**\n         * Indicates if this column contains an entity version.\n         */\n        this.isVersion = false;\n        /**\n         * Indicates if this column contains an object id.\n         */\n        this.isObjectId = false;\n        /**\n         * Indicates if this column is nested set's left column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetLeft = false;\n        /**\n         * Indicates if this column is nested set's right column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetRight = false;\n        /**\n         * Indicates if this column is materialized path's path column.\n         * Used only in tree entities with materialized path type.\n         */\n        this.isMaterializedPath = false;\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.referencedColumn = options.referencedColumn;\n        if (options.args.target)\n            this.target = options.args.target;\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName;\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name;\n        if (options.args.options.type)\n            this.type = options.args.options.type;\n        if (options.args.options.length)\n            this.length = options.args.options.length\n                ? options.args.options.length.toString()\n                : \"\";\n        if (options.args.options.width)\n            this.width = options.args.options.width;\n        if (options.args.options.charset)\n            this.charset = options.args.options.charset;\n        if (options.args.options.collation)\n            this.collation = options.args.options.collation;\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary;\n        if (options.args.options.default === null)\n            // to make sure default: null is the same as nullable: true\n            this.isNullable = true;\n        if (options.args.options.nullable !== undefined)\n            this.isNullable = options.args.options.nullable;\n        if (options.args.options.select !== undefined)\n            this.isSelect = options.args.options.select;\n        if (options.args.options.insert !== undefined)\n            this.isInsert = options.args.options.insert;\n        if (options.args.options.update !== undefined)\n            this.isUpdate = options.args.options.update;\n        if (options.args.options.readonly !== undefined)\n            this.isUpdate = !options.args.options.readonly;\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment;\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default;\n        if (options.args.options.onUpdate)\n            this.onUpdate = options.args.options.onUpdate;\n        if (options.args.options.generatedIdentity)\n            this.generatedIdentity = options.args.options.generatedIdentity;\n        if (options.args.options.scale !== null &&\n            options.args.options.scale !== undefined)\n            this.scale = options.args.options.scale;\n        if (options.args.options.zerofill) {\n            this.zerofill = options.args.options.zerofill;\n            this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n        }\n        if (options.args.options.unsigned)\n            this.unsigned = options.args.options.unsigned;\n        if (options.args.options.precision !== null)\n            this.precision = options.args.options.precision;\n        if (options.args.options.enum) {\n            if (ObjectUtils.isObject(options.args.options.enum) &&\n                !Array.isArray(options.args.options.enum)) {\n                this.enum = Object.keys(options.args.options.enum)\n                    // remove numeric keys - typescript numeric enum types generate them\n                    // From the documentation: “declaration merging” means that the compiler merges two separate declarations\n                    // declared with the same name into a single definition. This concept is often used to merge enum with namespace\n                    // where in namespace we define e.g. utility methods for creating enum. This is well known in other languages\n                    // like Java (enum methods). Here in case if enum have function, we need to remove it from metadata, otherwise\n                    // generated SQL statements contains string representation of that function which leads into syntax error\n                    // at database side.\n                    .filter((key) => isNaN(+key) &&\n                    typeof options.args.options.enum[key] !== \"function\")\n                    .map((key) => options.args.options.enum[key]);\n            }\n            else {\n                this.enum = options.args.options.enum;\n            }\n        }\n        if (options.args.options.enumName) {\n            this.enumName = options.args.options.enumName;\n        }\n        if (options.args.options.primaryKeyConstraintName) {\n            this.primaryKeyConstraintName =\n                options.args.options.primaryKeyConstraintName;\n        }\n        if (options.args.options.foreignKeyConstraintName) {\n            this.foreignKeyConstraintName =\n                options.args.options.foreignKeyConstraintName;\n        }\n        if (options.args.options.asExpression) {\n            this.asExpression = options.args.options.asExpression;\n            this.generatedType = options.args.options.generatedType\n                ? options.args.options.generatedType\n                : \"VIRTUAL\";\n        }\n        if (options.args.options.hstoreType)\n            this.hstoreType = options.args.options.hstoreType;\n        if (options.args.options.array)\n            this.isArray = options.args.options.array;\n        if (options.args.mode) {\n            this.isVirtualProperty = options.args.mode === \"virtual-property\";\n            this.isVirtual = options.args.mode === \"virtual\";\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\n            this.isCreateDate = options.args.mode === \"createDate\";\n            this.isUpdateDate = options.args.mode === \"updateDate\";\n            this.isDeleteDate = options.args.mode === \"deleteDate\";\n            this.isVersion = options.args.mode === \"version\";\n            this.isObjectId = options.args.mode === \"objectId\";\n        }\n        if (this.isVirtualProperty) {\n            this.isInsert = false;\n            this.isUpdate = false;\n        }\n        if (options.args.options.transformer)\n            this.transformer = options.args.options.transformer;\n        if (options.args.options.spatialFeatureType)\n            this.spatialFeatureType = options.args.options.spatialFeatureType;\n        if (options.args.options.srid !== undefined)\n            this.srid = options.args.options.srid;\n        if (options.args.options.query)\n            this.query = options.args.options.query;\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\n        if (this.isCreateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.createDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.createDateDefault;\n            // skip precision if it was explicitly set to \"null\" in column options. Otherwise use default precision if it exist.\n            if (this.precision === undefined &&\n                options.args.options.precision === undefined &&\n                options.connection.driver.mappedDataTypes.createDatePrecision)\n                this.precision =\n                    options.connection.driver.mappedDataTypes.createDatePrecision;\n        }\n        if (this.isUpdateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.updateDate;\n            if (!this.default)\n                this.default = () => options.connection.driver.mappedDataTypes.updateDateDefault;\n            if (!this.onUpdate)\n                this.onUpdate =\n                    options.connection.driver.mappedDataTypes.updateDateDefault;\n            // skip precision if it was explicitly set to \"null\" in column options. Otherwise use default precision if it exist.\n            if (this.precision === undefined &&\n                options.args.options.precision === undefined &&\n                options.connection.driver.mappedDataTypes.updateDatePrecision)\n                this.precision =\n                    options.connection.driver.mappedDataTypes.updateDatePrecision;\n        }\n        if (this.isDeleteDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.deleteDate;\n            if (!this.isNullable)\n                this.isNullable =\n                    options.connection.driver.mappedDataTypes.deleteDateNullable;\n            // skip precision if it was explicitly set to \"null\" in column options. Otherwise use default precision if it exist.\n            if (this.precision === undefined &&\n                options.args.options.precision === undefined &&\n                options.connection.driver.mappedDataTypes.deleteDatePrecision)\n                this.precision =\n                    options.connection.driver.mappedDataTypes.deleteDatePrecision;\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version;\n        if (options.closureType)\n            this.closureType = options.closureType;\n        if (options.nestedSetLeft)\n            this.isNestedSetLeft = options.nestedSetLeft;\n        if (options.nestedSetRight)\n            this.isNestedSetRight = options.nestedSetRight;\n        if (options.materializedPath)\n            this.isMaterializedPath = options.materializedPath;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value, useDatabaseName = false) {\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames, map) => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n                if ((this.generationStrategy === \"increment\" ||\n                    this.generationStrategy === \"rowid\") &&\n                    this.type === \"bigint\" &&\n                    value !== null)\n                    value = String(value);\n                map[useDatabaseName ? this.databaseName : this.propertyName] =\n                    value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n        }\n        else {\n            // no embeds - no problems. Simply return column property name and its value of the entity\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n            if ((this.generationStrategy === \"increment\" ||\n                this.generationStrategy === \"rowid\") &&\n                this.type === \"bigint\" &&\n                value !== null)\n                value = String(value);\n            return {\n                [useDatabaseName ? this.databaseName : this.propertyName]: value,\n            };\n        }\n    }\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    getEntityValueMap(entity, options) {\n        const returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n            const isEmbeddedArray = this.embeddedMetadata.isArray;\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames, value) => {\n                if (value === undefined) {\n                    return {};\n                }\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    const submap = extractEmbeddedColumnValue(propertyNames, value[propertyName]);\n                    if (Object.keys(submap).length > 0) {\n                        return { [propertyName]: submap };\n                    }\n                    return {};\n                }\n                if (isEmbeddedArray && Array.isArray(value)) {\n                    return value.map((v) => ({\n                        [this.propertyName]: v[this.propertyName],\n                    }));\n                }\n                if (value[this.propertyName] !== undefined &&\n                    (returnNulls === false || value[this.propertyName] !== null)) {\n                    return { [this.propertyName]: value[this.propertyName] };\n                }\n                return {};\n            };\n            const map = extractEmbeddedColumnValue(propertyNames, entity);\n            return Object.keys(map).length > 0 ? map : undefined;\n        }\n        else {\n            // no embeds - no problems. Simply return column property name and its value of the entity\n            /**\n             * Object.getOwnPropertyDescriptor checks if the relation is lazy, in which case value is a Promise\n             * DO NOT use `entity[\n                this.relationMetadata.propertyName] instanceof Promise`, which will invoke property getter and make unwanted DB request\n             * refer: https://github.com/typeorm/typeorm/pull/8676#issuecomment-1049906331\n             */\n            if (this.relationMetadata &&\n                !Object.getOwnPropertyDescriptor(entity, this.relationMetadata.propertyName)?.get &&\n                entity[this.relationMetadata.propertyName] &&\n                ObjectUtils.isObject(entity[this.relationMetadata.propertyName])) {\n                const map = this.relationMetadata.joinColumns.reduce((map, joinColumn) => {\n                    const value = joinColumn.referencedColumn.getEntityValueMap(entity[this.relationMetadata.propertyName]);\n                    if (value === undefined)\n                        return map;\n                    return OrmUtils.mergeDeep(map, value);\n                }, {});\n                if (Object.keys(map).length > 0)\n                    return { [this.propertyName]: map };\n                return undefined;\n            }\n            else {\n                if (entity[this.propertyName] !== undefined &&\n                    (returnNulls === false ||\n                        entity[this.propertyName] !== null))\n                    return { [this.propertyName]: entity[this.propertyName] };\n                return undefined;\n            }\n        }\n    }\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity, transform = false) {\n        if (entity === undefined || entity === null)\n            return undefined;\n        // extract column value from embeddeds of entity if column is in embedded\n        let value = undefined;\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n            const isEmbeddedArray = this.embeddedMetadata.isArray;\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames, value) => {\n                const propertyName = propertyNames.shift();\n                return propertyName && value\n                    ? extractEmbeddedColumnValue(propertyNames, value[propertyName])\n                    : value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn) {\n                    const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\n                    if (relatedEntity &&\n                        ObjectUtils.isObject(relatedEntity) &&\n                        !InstanceChecker.isFindOperator(relatedEntity) &&\n                        !Buffer.isBuffer(relatedEntity)) {\n                        value =\n                            this.referencedColumn.getEntityValue(relatedEntity);\n                    }\n                    else if (embeddedObject[this.propertyName] &&\n                        ObjectUtils.isObject(embeddedObject[this.propertyName]) &&\n                        !InstanceChecker.isFindOperator(embeddedObject[this.propertyName]) &&\n                        !Buffer.isBuffer(embeddedObject[this.propertyName]) &&\n                        !(embeddedObject[this.propertyName] instanceof Date)) {\n                        value = this.referencedColumn.getEntityValue(embeddedObject[this.propertyName]);\n                    }\n                    else {\n                        value = embeddedObject[this.propertyName];\n                    }\n                }\n                else if (this.referencedColumn) {\n                    value = this.referencedColumn.getEntityValue(embeddedObject[this.propertyName]);\n                }\n                else if (isEmbeddedArray && Array.isArray(embeddedObject)) {\n                    value = embeddedObject.map((o) => o[this.propertyName]);\n                }\n                else {\n                    value = embeddedObject[this.propertyName];\n                }\n            }\n        }\n        else {\n            // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn) {\n                const relatedEntity = this.relationMetadata.getEntityValue(entity);\n                if (relatedEntity &&\n                    ObjectUtils.isObject(relatedEntity) &&\n                    !InstanceChecker.isFindOperator(relatedEntity) &&\n                    !(typeof relatedEntity === \"function\") &&\n                    !Buffer.isBuffer(relatedEntity)) {\n                    value = this.referencedColumn.getEntityValue(relatedEntity);\n                }\n                else if (entity[this.propertyName] &&\n                    ObjectUtils.isObject(entity[this.propertyName]) &&\n                    !InstanceChecker.isFindOperator(entity[this.propertyName]) &&\n                    !(typeof entity[this.propertyName] === \"function\") &&\n                    !Buffer.isBuffer(entity[this.propertyName]) &&\n                    !(entity[this.propertyName] instanceof Date)) {\n                    value = this.referencedColumn.getEntityValue(entity[this.propertyName]);\n                }\n                else {\n                    value = entity[this.propertyName];\n                }\n            }\n            else if (this.referencedColumn) {\n                value = this.referencedColumn.getEntityValue(entity[this.propertyName]);\n            }\n            else {\n                value = entity[this.propertyName];\n            }\n        }\n        if (transform && this.transformer)\n            value = ApplyValueTransformers.transformTo(this.transformer, value);\n        return value;\n    }\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    setEntityValue(entity, value) {\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas, map) => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] =\n                            embeddedMetadata.create();\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n        }\n        else {\n            // we write a deep object in this entity only if the column is virtual\n            // because if its not virtual it means the user defined a real column for this relation\n            // also we don't do it if column is inside a junction table\n            if (!this.entityMetadata.isJunction &&\n                this.isVirtual &&\n                this.referencedColumn &&\n                this.referencedColumn.propertyName !== this.propertyName) {\n                if (!(this.propertyName in entity)) {\n                    entity[this.propertyName] = {};\n                }\n                entity[this.propertyName][this.referencedColumn.propertyName] =\n                    value;\n            }\n            else {\n                entity[this.propertyName] = value;\n            }\n        }\n    }\n    /**\n     * Compares given entity's column value with a given value.\n     */\n    compareEntityValue(entity, valueToCompareWith) {\n        const columnValue = this.getEntityValue(entity);\n        if (ObjectUtils.isObject(columnValue)) {\n            return columnValue.equals(valueToCompareWith);\n        }\n        return columnValue === valueToCompareWith;\n    }\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    build(connection) {\n        this.propertyPath = this.buildPropertyPath();\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\");\n        this.databaseName = this.buildDatabaseName(connection);\n        this.databasePath = this.buildDatabasePath();\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\n        return this;\n    }\n    buildPropertyPath() {\n        let path = \"\";\n        if (this.embeddedMetadata &&\n            this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.propertyName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction &&\n            this.isVirtual &&\n            this.referencedColumn &&\n            this.referencedColumn.propertyName !== this.propertyName)\n            path += \".\" + this.referencedColumn.propertyName;\n        return path;\n    }\n    buildDatabasePath() {\n        let path = \"\";\n        if (this.embeddedMetadata &&\n            this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.databaseName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction &&\n            this.isVirtual &&\n            this.referencedColumn &&\n            this.referencedColumn.databaseName !== this.databaseName)\n            path += \".\" + this.referencedColumn.databaseName;\n        return path;\n    }\n    buildDatabaseName(connection) {\n        let propertyNames = this.embeddedMetadata\n            ? this.embeddedMetadata.parentPrefixes\n            : [];\n        if (connection.driver.options.type === \"mongodb\")\n            // we don't need to include embedded name for the mongodb column names\n            propertyNames = [];\n        return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\n    }\n}\n\n//# sourceMappingURL=ColumnMetadata.js.map\n","import { TypeORMError } from \"../error\";\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Indicates if this index must be unique.\n         */\n        this.isUnique = false;\n        /**\n         * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n         * Works only in MySQL.\n         */\n        this.isSpatial = false;\n        /**\n         * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n         * Works only in MySQL.\n         */\n        this.isFulltext = false;\n        /**\n         * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n         * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n         * a normal index that includes NULL values.\n         *\n         * Works only in Spanner.\n         */\n        this.isNullFiltered = false;\n        /**\n         * Indicates if this index must synchronize with database index.\n         */\n        this.synchronize = true;\n        /**\n         * Indexed columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null &&\n                options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.isNullFiltered = !!options.args.nullFiltered;\n            this.parser = options.args.parser;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.isBackground = options.args.background;\n            this.isConcurrent = options.args.concurrent;\n            this.expireAfterSeconds = options.args.expireAfterSeconds;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy) {\n        if (this.synchronize === false) {\n            this.name = this.givenName;\n            return this;\n        }\n        const map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map((columnName) => {\n                    if (this.embeddedMetadata)\n                        return (this.embeddedMetadata.propertyPath +\n                            \".\" +\n                            columnName);\n                    return columnName.trim();\n                });\n                columnPropertyPaths.forEach((propertyPath) => (map[propertyPath] = 1));\n            }\n            else {\n                // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i) => String(i));\n                    columnPropertyPaths.forEach((name) => (map[name] = 1));\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i) => String(i));\n                    Object.keys(columnsFnResult).forEach((columnName) => (map[columnName] = columnsFnResult[columnName]));\n                }\n            }\n            this.columns = columnPropertyPaths\n                .map((propertyPath) => {\n                const columnWithSameName = this.entityMetadata.columns.find((column) => column.propertyPath === propertyPath);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find((relation) => relation.isWithJoinColumn &&\n                    relation.propertyName === propertyPath);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName\n                    ? '\"' + this.givenName + '\" '\n                    : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new TypeORMError(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                    propertyPath);\n            })\n                .reduce((a, b) => a.concat(b));\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find((column) => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.indexName(this.entityMetadata.tableName, this.columns.map((column) => column.databaseName), this.where);\n        return this;\n    }\n}\n\n//# sourceMappingURL=IndexMetadata.js.map\n","import { EntityMetadata } from \"./EntityMetadata\";\nimport { TypeORMError } from \"../error\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Contains all information about some entity's relation.\n */\nexport class RelationMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n         */\n        this.isTreeParent = false;\n        /**\n         * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n         */\n        this.isTreeChildren = false;\n        /**\n         * Indicates if this relation's column is a primary key.\n         * Can be used only for many-to-one and owner one-to-one relations.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this relation is lazily loaded.\n         */\n        this.isLazy = false;\n        /**\n         * Indicates if this relation is eagerly loaded.\n         */\n        this.isEager = false;\n        /**\n         * Indicates if persistence is enabled for the relation.\n         * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n         * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n         * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n         */\n        this.persistenceEnabled = true;\n        /**\n         * If set to true then related objects are allowed to be inserted to the database.\n         */\n        this.isCascadeInsert = false;\n        /**\n         * If set to true then related objects are allowed to be updated in the database.\n         */\n        this.isCascadeUpdate = false;\n        /**\n         * If set to true then related objects are allowed to be remove from the database.\n         */\n        this.isCascadeRemove = false;\n        /**\n         * If set to true then related objects are allowed to be soft-removed from the database.\n         */\n        this.isCascadeSoftRemove = false;\n        /**\n         * If set to true then related objects are allowed to be recovered from the database.\n         */\n        this.isCascadeRecover = false;\n        /**\n         * Indicates if relation column value can be nullable or not.\n         */\n        this.isNullable = true;\n        /**\n         * Indicates whether foreign key constraints will be created for join columns.\n         * Can be used only for many-to-one and owner one-to-one relations.\n         * Defaults to true.\n         */\n        this.createForeignKeyConstraints = true;\n        /**\n         * Indicates if this side is an owner of this relation.\n         */\n        this.isOwning = false;\n        /**\n         * Checks if this relation's type is \"one-to-one\".\n         */\n        this.isOneToOne = false;\n        /**\n         * Checks if this relation is owner side of the \"one-to-one\" relation.\n         * Owner side means this side of relation has a join column in the table.\n         */\n        this.isOneToOneOwner = false;\n        /**\n         * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n         */\n        this.isWithJoinColumn = false;\n        /**\n         * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n         * NOT owner side means this side of relation does not have a join column in the table.\n         */\n        this.isOneToOneNotOwner = false;\n        /**\n         * Checks if this relation's type is \"one-to-many\".\n         */\n        this.isOneToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-one\".\n         */\n        this.isManyToOne = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\".\n         */\n        this.isManyToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n         * Owner side means this side of relation has a join table.\n         */\n        this.isManyToManyOwner = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n         * Not owner side means this side of relation does not have a join table.\n         */\n        this.isManyToManyNotOwner = false;\n        /**\n         * Foreign keys created for this relation.\n         */\n        this.foreignKeys = [];\n        /**\n         * Join table columns.\n         * Join columns can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be empty.\n         * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n         * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n         */\n        this.joinColumns = [];\n        /**\n         * Inverse join table columns.\n         * Inverse join columns are supported only for many-to-many relations\n         * and can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be undefined.\n         */\n        this.inverseJoinColumns = [];\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        const args = options.args;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\n        this.isLazy = args.isLazy || false;\n        // this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\n        // this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\n        // this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\n        // this.isCascadeSoftRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"soft-remove\") !== -1);\n        // this.isCascadeRecover = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"recover\") !== -1);\n        this.isCascadeInsert =\n            args.options.cascade === true ||\n                (Array.isArray(args.options.cascade) &&\n                    args.options.cascade.indexOf(\"insert\") !== -1);\n        this.isCascadeUpdate =\n            args.options.cascade === true ||\n                (Array.isArray(args.options.cascade) &&\n                    args.options.cascade.indexOf(\"update\") !== -1);\n        this.isCascadeRemove =\n            args.options.cascade === true ||\n                (Array.isArray(args.options.cascade) &&\n                    args.options.cascade.indexOf(\"remove\") !== -1);\n        this.isCascadeSoftRemove =\n            args.options.cascade === true ||\n                (Array.isArray(args.options.cascade) &&\n                    args.options.cascade.indexOf(\"soft-remove\") !== -1);\n        this.isCascadeRecover =\n            args.options.cascade === true ||\n                (Array.isArray(args.options.cascade) &&\n                    args.options.cascade.indexOf(\"recover\") !== -1);\n        // this.isPrimary = args.options.primary || false;\n        this.isNullable =\n            args.options.nullable === false || this.isPrimary ? false : true;\n        this.onDelete = args.options.onDelete;\n        this.onUpdate = args.options.onUpdate;\n        this.deferrable = args.options.deferrable;\n        this.createForeignKeyConstraints =\n            args.options.createForeignKeyConstraints === false ? false : true;\n        this.isEager = args.options.eager || false;\n        this.persistenceEnabled =\n            args.options.persistence === false ? false : true;\n        this.orphanedRowAction = args.options.orphanedRowAction || \"nullify\";\n        this.isTreeParent = args.isTreeParent || false;\n        this.isTreeChildren = args.isTreeChildren || false;\n        if (typeof args.type === \"function\") {\n            this.type =\n                typeof args.type === \"function\"\n                    ? args.type()\n                    : args.type;\n        }\n        else if (InstanceChecker.isEntitySchema(args.type)) {\n            this.type = args.type.options.name;\n        }\n        else if (ObjectUtils.isObject(args.type) &&\n            typeof args.type.name === \"string\") {\n            this.type = args.type.name;\n        }\n        else {\n            this.type = args.type;\n        }\n        this.isOneToOne = this.relationType === \"one-to-one\";\n        this.isOneToMany = this.relationType === \"one-to-many\";\n        this.isManyToOne = this.relationType === \"many-to-one\";\n        this.isManyToMany = this.relationType === \"many-to-many\";\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates join column ids map from the given related entity ids array.\n     */\n    getRelationIdMap(entity) {\n        const joinColumns = this.isOwning\n            ? this.joinColumns\n            : this.inverseRelation.joinColumns;\n        const referencedColumns = joinColumns.map((joinColumn) => joinColumn.referencedColumn);\n        // console.log(\"entity\", entity);\n        // console.log(\"referencedColumns\", referencedColumns);\n        return EntityMetadata.getValueMap(entity, referencedColumns);\n    }\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureRelationIdMap(id) {\n        if (ObjectUtils.isObject(id))\n            return id;\n        const joinColumns = this.isOwning\n            ? this.joinColumns\n            : this.inverseRelation.joinColumns;\n        const referencedColumns = joinColumns.map((joinColumn) => joinColumn.referencedColumn);\n        if (referencedColumns.length > 1)\n            throw new TypeORMError(`Cannot create relation id map for a single value because relation contains multiple referenced columns.`);\n        return referencedColumns[0].createValueMap(id);\n    }\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(entity, getLazyRelationsPromiseValue = false) {\n        if (entity === null || entity === undefined)\n            return undefined;\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (propertyNames, value) => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    if (value[propertyName]) {\n                        return extractEmbeddedColumnValue(propertyNames, value[propertyName]);\n                    }\n                    return undefined;\n                }\n                return value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\n            if (this.isLazy) {\n                if (embeddedObject[\"__\" + this.propertyName + \"__\"] !==\n                    undefined)\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return embeddedObject[this.propertyName];\n                return undefined;\n            }\n            return embeddedObject\n                ? embeddedObject[this.isLazy\n                    ? \"__\" + this.propertyName + \"__\"\n                    : this.propertyName]\n                : undefined;\n        }\n        else {\n            // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.isLazy) {\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return entity[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return entity[this.propertyName];\n                return undefined;\n            }\n            return entity[this.propertyName];\n        }\n    }\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     *\n     * If merge is set to true, it merges given value into currently\n     */\n    setEntityValue(entity, value) {\n        const propertyName = this.isLazy\n            ? \"__\" + this.propertyName + \"__\"\n            : this.propertyName;\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (embeddedMetadatas, map) => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                const embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] =\n                            embeddedMetadata.create();\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\n        }\n        else {\n            entity[propertyName] = value;\n        }\n    }\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value) {\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (propertyNames, map) => {\n                const propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue(propertyNames, {});\n        }\n        else {\n            // no embeds - no problems. Simply return column property name and its value of the entity\n            return { [this.propertyName]: value };\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    build() {\n        this.propertyPath = this.buildPropertyPath();\n    }\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    registerForeignKeys(...foreignKeys) {\n        this.foreignKeys.push(...foreignKeys);\n    }\n    /**\n     * Registers given join columns in the relation.\n     * This builder method should be used to register join column in the relation.\n     */\n    registerJoinColumns(joinColumns = [], inverseJoinColumns = []) {\n        this.joinColumns = joinColumns;\n        this.inverseJoinColumns = inverseJoinColumns;\n        this.isOwning =\n            this.isManyToOne ||\n                ((this.isManyToMany || this.isOneToOne) &&\n                    this.joinColumns.length > 0);\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\n    }\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    registerJunctionEntityMetadata(junctionEntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata;\n        this.joinTableName = junctionEntityMetadata.tableName;\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n            this.joinTableName = junctionEntityMetadata.tableName;\n        }\n    }\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    buildInverseSidePropertyPath() {\n        if (this.givenInverseSidePropertyFactory) {\n            const ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory;\n        }\n        else if (this.isTreeParent &&\n            this.entityMetadata.treeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n        }\n        else if (this.isTreeChildren &&\n            this.entityMetadata.treeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n        }\n        return \"\";\n    }\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    buildPropertyPath() {\n        if (!this.embeddedMetadata ||\n            !this.embeddedMetadata.parentPropertyNames.length)\n            return this.propertyName;\n        return (this.embeddedMetadata.parentPropertyNames.join(\".\") +\n            \".\" +\n            this.propertyName);\n    }\n}\n\n//# sourceMappingURL=RelationMetadata.js.map\n","import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Columns inside this embed.\n         */\n        this.columns = [];\n        /**\n         * Relations inside this embed.\n         */\n        this.relations = [];\n        /**\n         * Entity listeners inside this embed.\n         */\n        this.listeners = [];\n        /**\n         * Indices applied to the embed columns.\n         */\n        this.indices = [];\n        /**\n         * Uniques applied to the embed columns.\n         */\n        this.uniques = [];\n        /**\n         * Relation ids inside this embed.\n         */\n        this.relationIds = [];\n        /**\n         * Relation counts inside this embed.\n         */\n        this.relationCounts = [];\n        /**\n         * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n         */\n        this.embeddeds = [];\n        /**\n         * Indicates if the entity should be instantiated using the constructor\n         * or via allocating a new object via `Object.create()`.\n         */\n        this.isAlwaysUsingConstructor = true;\n        /**\n         * Indicates if this embedded is in array mode.\n         *\n         * This option works only in mongodb.\n         */\n        this.isArray = false;\n        /**\n         * Returns array of property names of current embed and all its parent embeds.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * we need to get value of \"id\" column from the post real entity object.\n         * this method will return [\"data\", \"information\", \"counters\"]\n         */\n        this.parentPropertyNames = [];\n        /**\n         * Returns array of prefixes of current embed and all its parent embeds.\n         */\n        this.parentPrefixes = [];\n        /**\n         * Returns embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.embeddedMetadataTree = [];\n        /**\n         * Embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.columnsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.relationsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.listenersFromTree = [];\n        /**\n         * Indices of this embed and all indices from its child embeds.\n         */\n        this.indicesFromTree = [];\n        /**\n         * Uniques of this embed and all uniques from its child embeds.\n         */\n        this.uniquesFromTree = [];\n        /**\n         * Relation ids of this embed and all relation ids from its child embeds.\n         */\n        this.relationIdsFromTree = [];\n        /**\n         * Relation counts of this embed and all relation counts from its child embeds.\n         */\n        this.relationCountsFromTree = [];\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates a new embedded object.\n     */\n    create(options) {\n        if (!(typeof this.type === \"function\")) {\n            return {};\n        }\n        if (options?.fromDeserializer || !this.isAlwaysUsingConstructor) {\n            return Object.create(this.type.prototype);\n        }\n        else {\n            return new this.type();\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    build(connection) {\n        this.embeddeds.forEach((embedded) => embedded.build(connection));\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.uniquesFromTree = this.buildUniquesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        if (connection.options.entitySkipConstructor) {\n            this.isAlwaysUsingConstructor =\n                !connection.options.entitySkipConstructor;\n        }\n        return this;\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    buildPartialPrefix() {\n        // if prefix option was not set or explicitly set to true - default prefix\n        if (this.customPrefix === undefined || this.customPrefix === true) {\n            return [this.propertyName];\n        }\n        // if prefix option was set to empty string or explicity set to false - disable prefix\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\n            return [];\n        }\n        // use custom prefix\n        if (typeof this.customPrefix === \"string\") {\n            return [this.customPrefix];\n        }\n        throw new TypeORMError(`Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`);\n    }\n    buildPrefix(connection) {\n        if (connection.driver.options.type === \"mongodb\")\n            return this.propertyName;\n        let prefixes = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n        prefixes.push(...this.buildPartialPrefix());\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    }\n    buildParentPropertyNames() {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                .buildParentPropertyNames()\n                .concat(this.propertyName)\n            : [this.propertyName];\n    }\n    buildParentPrefixes() {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                .buildParentPrefixes()\n                .concat(this.buildPartialPrefix())\n            : this.buildPartialPrefix();\n    }\n    buildEmbeddedMetadataTree() {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                .buildEmbeddedMetadataTree()\n                .concat(this)\n            : [this];\n    }\n    buildColumnsFromTree() {\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\n    }\n    buildRelationsFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\n    }\n    buildListenersFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);\n    }\n    buildIndicesFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);\n    }\n    buildUniquesFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildUniquesFromTree()), this.uniques);\n    }\n    buildRelationIdsFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);\n    }\n    buildRelationCountsFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);\n    }\n}\n\n//# sourceMappingURL=EmbeddedMetadata.js.map\n","import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Sets relation id value from the given entity.\n     *\n     * todo: make it to work in embeds as well.\n     */\n    setValue(entity) {\n        const inverseEntity = this.relation.getEntityValue(entity);\n        if (Array.isArray(inverseEntity)) {\n            entity[this.propertyName] = inverseEntity\n                .map((item) => {\n                return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\n            })\n                .filter((item) => item !== null && item !== undefined);\n        }\n        else {\n            const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\n            if (value !== undefined)\n                entity[this.propertyName] = value;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = typeof this.relationNameOrFactory === \"function\"\n            ? this.relationNameOrFactory(this.entityMetadata.propertiesMap)\n            : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new TypeORMError(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\n        this.relation = relation;\n    }\n}\n\n//# sourceMappingURL=RelationIdMetadata.js.map\n","import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation count metadata properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = typeof this.relationNameOrFactory === \"function\"\n            ? this.relationNameOrFactory(this.entityMetadata.propertiesMap)\n            : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new TypeORMError(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`);\n        this.relation = relation;\n    }\n}\n\n//# sourceMappingURL=RelationCountMetadata.js.map\n","/**\n * Provides a constants for each entity listener type.\n */\nexport class EventListenerTypes {\n}\nEventListenerTypes.AFTER_LOAD = \"after-load\";\nEventListenerTypes.BEFORE_INSERT = \"before-insert\";\nEventListenerTypes.AFTER_INSERT = \"after-insert\";\nEventListenerTypes.BEFORE_UPDATE = \"before-update\";\nEventListenerTypes.AFTER_UPDATE = \"after-update\";\nEventListenerTypes.BEFORE_REMOVE = \"before-remove\";\nEventListenerTypes.AFTER_REMOVE = \"after-remove\";\nEventListenerTypes.BEFORE_SOFT_REMOVE = \"before-soft-remove\";\nEventListenerTypes.AFTER_SOFT_REMOVE = \"after-soft-remove\";\nEventListenerTypes.BEFORE_RECOVER = \"before-recover\";\nEventListenerTypes.AFTER_RECOVER = \"after-recover\";\n\n//# sourceMappingURL=EventListenerTypes.js.map\n","/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Array of columns of this foreign key.\n         */\n        this.columns = [];\n        /**\n         * Array of referenced columns.\n         */\n        this.referencedColumns = [];\n        /**\n         * Gets array of column names.\n         */\n        this.columnNames = [];\n        /**\n         * Gets array of referenced column names.\n         */\n        this.referencedColumnNames = [];\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete || \"NO ACTION\";\n        this.onUpdate = options.onUpdate || \"NO ACTION\";\n        this.deferrable = options.deferrable;\n        this.givenName = options.name;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy) {\n        this.columnNames = this.columns.map((column) => column.databaseName);\n        this.referencedColumnNames = this.referencedColumns.map((column) => column.databaseName);\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.foreignKeyName(this.entityMetadata.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\n    }\n}\n\n//# sourceMappingURL=ForeignKeyMetadata.js.map\n","import { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Creates EntityMetadata for junction tables.\n * Junction tables are tables generated by many-to-many relations.\n */\nexport class JunctionEntityMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\n     */\n    build(relation, joinTable) {\n        const referencedColumns = this.collectReferencedColumns(relation, joinTable);\n        const inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);\n        const joinTableName = joinTable.name ||\n            this.connection.namingStrategy.joinTableName(relation.entityMetadata.tableNameWithoutPrefix, relation.inverseEntityMetadata.tableNameWithoutPrefix, relation.propertyPath, relation.inverseRelation\n                ? relation.inverseRelation.propertyName\n                : \"\");\n        const entityMetadata = new EntityMetadata({\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: joinTableName,\n                type: \"junction\",\n                database: joinTable.database || relation.entityMetadata.database,\n                schema: joinTable.schema || relation.entityMetadata.schema,\n                synchronize: joinTable.synchronize,\n            },\n        });\n        entityMetadata.build();\n        // create original side junction columns\n        const junctionColumns = referencedColumns.map((referencedColumn) => {\n            const joinColumn = joinTable.joinColumns\n                ? joinTable.joinColumns.find((joinColumnArgs) => {\n                    return ((!joinColumnArgs.referencedColumnName ||\n                        joinColumnArgs.referencedColumnName ===\n                            referencedColumn.propertyName) &&\n                        !!joinColumnArgs.name);\n                })\n                : undefined;\n            const columnName = joinColumn && joinColumn.name\n                ? joinColumn.name\n                : this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: referencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        name: columnName,\n                        length: !referencedColumn.length &&\n                            (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                                this.connection.driver.options.type ===\n                                    \"aurora-mysql\") &&\n                            // some versions of mariadb support the column type and should not try to provide the length property\n                            this.connection.driver.normalizeType(referencedColumn) !== \"uuid\" &&\n                            (referencedColumn.generationStrategy === \"uuid\" ||\n                                referencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                        width: referencedColumn.width,\n                        type: referencedColumn.type,\n                        precision: referencedColumn.precision,\n                        scale: referencedColumn.scale,\n                        charset: referencedColumn.charset,\n                        collation: referencedColumn.collation,\n                        zerofill: referencedColumn.zerofill,\n                        unsigned: referencedColumn.zerofill\n                            ? true\n                            : referencedColumn.unsigned,\n                        enum: referencedColumn.enum,\n                        enumName: referencedColumn.enumName,\n                        foreignKeyConstraintName: joinColumn?.foreignKeyConstraintName,\n                        nullable: false,\n                        primary: true,\n                    },\n                },\n            });\n        });\n        // create inverse side junction columns\n        const inverseJunctionColumns = inverseReferencedColumns.map((inverseReferencedColumn) => {\n            const joinColumn = joinTable.inverseJoinColumns\n                ? joinTable.inverseJoinColumns.find((joinColumnArgs) => {\n                    return ((!joinColumnArgs.referencedColumnName ||\n                        joinColumnArgs.referencedColumnName ===\n                            inverseReferencedColumn.propertyName) &&\n                        !!joinColumnArgs.name);\n                })\n                : undefined;\n            const columnName = joinColumn && joinColumn.name\n                ? joinColumn.name\n                : this.connection.namingStrategy.joinTableInverseColumnName(relation.inverseEntityMetadata\n                    .tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: inverseReferencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        length: !inverseReferencedColumn.length &&\n                            (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                                this.connection.driver.options.type ===\n                                    \"aurora-mysql\") &&\n                            // some versions of mariadb support the column type and should not try to provide the length property\n                            this.connection.driver.normalizeType(inverseReferencedColumn) !== \"uuid\" &&\n                            (inverseReferencedColumn.generationStrategy ===\n                                \"uuid\" ||\n                                inverseReferencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : inverseReferencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                        width: inverseReferencedColumn.width, // fix https://github.com/typeorm/typeorm/issues/6442\n                        type: inverseReferencedColumn.type,\n                        precision: inverseReferencedColumn.precision,\n                        scale: inverseReferencedColumn.scale,\n                        charset: inverseReferencedColumn.charset,\n                        collation: inverseReferencedColumn.collation,\n                        zerofill: inverseReferencedColumn.zerofill,\n                        unsigned: inverseReferencedColumn.zerofill\n                            ? true\n                            : inverseReferencedColumn.unsigned,\n                        enum: inverseReferencedColumn.enum,\n                        enumName: inverseReferencedColumn.enumName,\n                        foreignKeyConstraintName: joinColumn?.foreignKeyConstraintName,\n                        name: columnName,\n                        nullable: false,\n                        primary: true,\n                    },\n                },\n            });\n        });\n        this.changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns);\n        // set junction table columns\n        entityMetadata.ownerColumns = junctionColumns;\n        entityMetadata.inverseColumns = inverseJunctionColumns;\n        entityMetadata.ownColumns = [\n            ...junctionColumns,\n            ...inverseJunctionColumns,\n        ];\n        entityMetadata.ownColumns.forEach((column) => (column.relationMetadata = relation));\n        // create junction table foreign keys\n        // Note: UPDATE CASCADE clause is not supported in Oracle.\n        // Note: UPDATE/DELETE CASCADE clauses are not supported in Spanner.\n        entityMetadata.foreignKeys = relation.createForeignKeyConstraints\n            ? [\n                new ForeignKeyMetadata({\n                    entityMetadata: entityMetadata,\n                    referencedEntityMetadata: relation.entityMetadata,\n                    columns: junctionColumns,\n                    referencedColumns: referencedColumns,\n                    name: junctionColumns[0]?.foreignKeyConstraintName,\n                    onDelete: this.connection.driver.options.type === \"spanner\"\n                        ? \"NO ACTION\"\n                        : relation.onDelete || \"CASCADE\",\n                    onUpdate: this.connection.driver.options.type === \"oracle\" ||\n                        this.connection.driver.options.type === \"spanner\"\n                        ? \"NO ACTION\"\n                        : relation.onUpdate || \"CASCADE\",\n                }),\n                new ForeignKeyMetadata({\n                    entityMetadata: entityMetadata,\n                    referencedEntityMetadata: relation.inverseEntityMetadata,\n                    columns: inverseJunctionColumns,\n                    referencedColumns: inverseReferencedColumns,\n                    name: inverseJunctionColumns[0]?.foreignKeyConstraintName,\n                    onDelete: this.connection.driver.options.type === \"spanner\"\n                        ? \"NO ACTION\"\n                        : relation.inverseRelation\n                            ? relation.inverseRelation.onDelete\n                            : \"CASCADE\",\n                    onUpdate: this.connection.driver.options.type === \"oracle\" ||\n                        this.connection.driver.options.type === \"spanner\"\n                        ? \"NO ACTION\"\n                        : relation.inverseRelation\n                            ? relation.inverseRelation.onUpdate\n                            : \"CASCADE\",\n                }),\n            ]\n            : [];\n        // create junction table indices\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: junctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: inverseJunctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n        ];\n        // finally return entity metadata\n        return entityMetadata;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    collectReferencedColumns(relation, joinTable) {\n        const hasAnyReferencedColumnName = joinTable.joinColumns\n            ? joinTable.joinColumns.find((joinColumn) => !!joinColumn.referencedColumnName)\n            : false;\n        if (!joinTable.joinColumns ||\n            (joinTable.joinColumns && !hasAnyReferencedColumnName)) {\n            return relation.entityMetadata.columns.filter((column) => column.isPrimary);\n        }\n        else {\n            return joinTable.joinColumns.map((joinColumn) => {\n                const referencedColumn = relation.entityMetadata.columns.find((column) => column.propertyName === joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new TypeORMError(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`);\n                return referencedColumn;\n            });\n        }\n    }\n    /**\n     * Collects inverse referenced columns from the given join column args.\n     */\n    collectInverseReferencedColumns(relation, joinTable) {\n        const hasInverseJoinColumns = !!joinTable.inverseJoinColumns;\n        const hasAnyInverseReferencedColumnName = hasInverseJoinColumns\n            ? joinTable.inverseJoinColumns.find((joinColumn) => !!joinColumn.referencedColumnName)\n            : false;\n        if (!hasInverseJoinColumns ||\n            (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {\n            return relation.inverseEntityMetadata.primaryColumns;\n        }\n        else {\n            return joinTable.inverseJoinColumns.map((joinColumn) => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find((column) => column.propertyName ===\n                    joinColumn.referencedColumnName);\n                if (!referencedColumn)\n                    throw new TypeORMError(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n                return referencedColumn;\n            });\n        }\n    }\n    changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns) {\n        junctionColumns.forEach((junctionColumn) => {\n            inverseJunctionColumns.forEach((inverseJunctionColumn) => {\n                if (junctionColumn.givenDatabaseName ===\n                    inverseJunctionColumn.givenDatabaseName) {\n                    const junctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(junctionColumn.propertyName, 1);\n                    junctionColumn.propertyName = junctionColumnName;\n                    junctionColumn.givenDatabaseName = junctionColumnName;\n                    const inverseJunctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(inverseJunctionColumn.propertyName, 2);\n                    inverseJunctionColumn.propertyName =\n                        inverseJunctionColumnName;\n                    inverseJunctionColumn.givenDatabaseName =\n                        inverseJunctionColumnName;\n                }\n            });\n        });\n    }\n}\n\n//# sourceMappingURL=JunctionEntityMetadataBuilder.js.map\n","import { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\nexport class ClosureJunctionEntityMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds EntityMetadata for the closure junction of the given closure entity.\n     */\n    build(parentClosureEntityMetadata) {\n        // create entity metadata itself\n        const entityMetadata = new EntityMetadata({\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: parentClosureEntityMetadata.treeOptions &&\n                    parentClosureEntityMetadata.treeOptions.closureTableName\n                    ? parentClosureEntityMetadata.treeOptions\n                        .closureTableName\n                    : parentClosureEntityMetadata.tableNameWithoutPrefix,\n                type: \"closure-junction\",\n            },\n        });\n        entityMetadata.build();\n        // create ancestor and descendant columns for new closure junction table\n        parentClosureEntityMetadata.primaryColumns.forEach((primaryColumn) => {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"ancestor\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: parentClosureEntityMetadata.treeOptions &&\n                        parentClosureEntityMetadata.treeOptions\n                            .ancestorColumnName\n                        ? parentClosureEntityMetadata.treeOptions.ancestorColumnName(primaryColumn)\n                        : primaryColumn.propertyName + \"_ancestor\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    },\n                },\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"descendant\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: parentClosureEntityMetadata.treeOptions &&\n                        parentClosureEntityMetadata.treeOptions\n                            .descendantColumnName\n                        ? parentClosureEntityMetadata.treeOptions.descendantColumnName(primaryColumn)\n                        : primaryColumn.propertyName + \"_descendant\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    },\n                },\n            }));\n        });\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n        ];\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\n        if (parentClosureEntityMetadata.treeLevelColumn) {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"level\",\n                    options: {\n                        type: this.connection.driver.mappedDataTypes\n                            .treeLevel,\n                    },\n                },\n            }));\n        }\n        // create junction table foreign keys\n        // Note: CASCADE is not applied to mssql because it does not support multi cascade paths\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                onDelete: this.connection.driver.options.type === \"mssql\"\n                    ? \"NO ACTION\"\n                    : \"CASCADE\",\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                onDelete: this.connection.driver.options.type === \"mssql\"\n                    ? \"NO ACTION\"\n                    : \"CASCADE\",\n            }),\n        ];\n        return entityMetadata;\n    }\n}\n\n//# sourceMappingURL=ClosureJunctionEntityMetadataBuilder.js.map\n","import { TypeORMError } from \"../error\";\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Unique columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n            this.deferrable = options.args.deferrable;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy) {\n        const map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map((columnName) => {\n                    if (this.embeddedMetadata)\n                        return (this.embeddedMetadata.propertyPath +\n                            \".\" +\n                            columnName);\n                    return columnName.trim();\n                });\n                columnPropertyPaths.forEach((propertyPath) => (map[propertyPath] = 1));\n            }\n            else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i) => String(i));\n                    columnPropertyPaths.forEach((name) => (map[name] = 1));\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i) => String(i));\n                    Object.keys(columnsFnResult).forEach((columnName) => (map[columnName] = columnsFnResult[columnName]));\n                }\n            }\n            this.columns = columnPropertyPaths\n                .map((propertyName) => {\n                const columnWithSameName = this.entityMetadata.columns.find((column) => column.propertyPath === propertyName);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find((relation) => relation.isWithJoinColumn &&\n                    relation.propertyName === propertyName);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName\n                    ? '\"' + this.givenName + '\" '\n                    : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new TypeORMError(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                    propertyName);\n            })\n                .reduce((a, b) => a.concat(b));\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find((column) => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.uniqueConstraintName(this.entityMetadata.tableName, this.columns.map((column) => column.databaseName));\n        return this;\n    }\n}\n\n//# sourceMappingURL=UniqueMetadata.js.map\n","import { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go through each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nexport class RelationJoinColumnBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    build(joinColumns, relation) {\n        const referencedColumns = this.collectReferencedColumns(joinColumns, relation);\n        const columns = this.collectColumns(joinColumns, relation, referencedColumns);\n        if (!referencedColumns.length || !relation.createForeignKeyConstraints)\n            return {\n                foreignKey: undefined,\n                columns,\n                uniqueConstraint: undefined,\n            }; // this case is possible for one-to-one non owning side and relations with createForeignKeyConstraints = false\n        const foreignKey = new ForeignKeyMetadata({\n            name: joinColumns[0]?.foreignKeyConstraintName,\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns,\n            referencedColumns,\n            onDelete: relation.onDelete,\n            onUpdate: relation.onUpdate,\n            deferrable: relation.deferrable,\n        });\n        // SQL requires UNIQUE/PK constraints on columns referenced by a FK\n        // Skip creating the unique constraint for the referenced columns if\n        // they are already contained in the PK of the referenced entity\n        if (columns.every((column) => column.isPrimary) ||\n            !relation.isOneToOne) {\n            return { foreignKey, columns, uniqueConstraint: undefined };\n        }\n        const uniqueConstraint = new UniqueMetadata({\n            entityMetadata: relation.entityMetadata,\n            columns: foreignKey.columns,\n            args: {\n                name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tableName, foreignKey.columns.map((column) => column.databaseName)),\n                target: relation.entityMetadata.target,\n            },\n        });\n        uniqueConstraint.build(this.connection.namingStrategy);\n        return { foreignKey, columns, uniqueConstraint };\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    collectReferencedColumns(joinColumns, relation) {\n        const hasAnyReferencedColumnName = joinColumns.find((joinColumnArgs) => !!joinColumnArgs.referencedColumnName);\n        const manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\n        const hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\n        if (manyToOneWithoutJoinColumn ||\n            hasJoinColumnWithoutAnyReferencedColumnName) {\n            // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns;\n        }\n        else {\n            // cases with referenced columns defined\n            return joinColumns.map((joinColumn) => {\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find((column) => column.propertyName ===\n                    joinColumn.referencedColumnName); // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new TypeORMError(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\n                return referencedColumn;\n            });\n        }\n    }\n    /**\n     * Collects columns from the given join column args.\n     */\n    collectColumns(joinColumns, relation, referencedColumns) {\n        return referencedColumns.map((referencedColumn) => {\n            // in the case if relation has join column with only name set we need this check\n            const joinColumnMetadataArg = joinColumns.find((joinColumn) => {\n                return ((!joinColumn.referencedColumnName ||\n                    joinColumn.referencedColumnName ===\n                        referencedColumn.propertyName) &&\n                    !!joinColumn.name);\n            });\n            const joinColumnName = joinColumnMetadataArg\n                ? joinColumnMetadataArg.name\n                : this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\n            const relationalColumns = relation.embeddedMetadata\n                ? relation.embeddedMetadata.columns\n                : relation.entityMetadata.ownColumns;\n            let relationalColumn = relationalColumns.find((column) => column.databaseNameWithoutPrefixes === joinColumnName);\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    embeddedMetadata: relation.embeddedMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            length: !referencedColumn.length &&\n                                (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                                    this.connection.driver.options.type ===\n                                        \"aurora-mysql\") &&\n                                // some versions of mariadb support the column type and should not try to provide the length property\n                                this.connection.driver.normalizeType(referencedColumn) !== \"uuid\" &&\n                                (referencedColumn.generationStrategy ===\n                                    \"uuid\" ||\n                                    referencedColumn.type === \"uuid\")\n                                ? \"36\"\n                                : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                            width: referencedColumn.width,\n                            charset: referencedColumn.charset,\n                            collation: referencedColumn.collation,\n                            precision: referencedColumn.precision,\n                            scale: referencedColumn.scale,\n                            zerofill: referencedColumn.zerofill,\n                            unsigned: referencedColumn.unsigned,\n                            comment: referencedColumn.comment,\n                            enum: referencedColumn.enum,\n                            enumName: referencedColumn.enumName,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable,\n                        },\n                    },\n                });\n                relation.entityMetadata.registerColumn(relationalColumn);\n            }\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation;\n            relationalColumn.build(this.connection);\n            return relationalColumn;\n        });\n    }\n}\n\n//# sourceMappingURL=RelationJoinColumnBuilder.js.map\n","/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.type = options.args.type;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity) {\n        // todo: create in entity metadata method like isInherited?\n        return (this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (typeof this.entityMetadata.target === \"function\" &&\n                entity.constructor.prototype instanceof\n                    this.entityMetadata.target)); // todo: also need to implement entity schema inheritance\n    }\n    /**\n     * Executes listener method of the given entity.\n     */\n    execute(entity) {\n        if (!this.embeddedMetadata)\n            return entity[this.propertyName]();\n        this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    callEntityEmbeddedMethod(entity, propertyPaths) {\n        const propertyPath = propertyPaths.shift();\n        if (!propertyPath || !entity[propertyPath])\n            return;\n        if (propertyPaths.length === 0) {\n            if (Array.isArray(entity[propertyPath])) {\n                entity[propertyPath].map((embedded) => embedded[this.propertyName]());\n            }\n            else {\n                entity[propertyPath][this.propertyName]();\n            }\n        }\n        else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n        }\n    }\n}\n\n//# sourceMappingURL=EntityListenerMetadata.js.map\n","/**\n * Check metadata contains all information about table's check constraints.\n */\nexport class CheckMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this.entityMetadata = options.entityMetadata;\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend check constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy) {\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.checkConstraintName(this.entityMetadata.tableName, this.expression);\n        return this;\n    }\n}\n\n//# sourceMappingURL=CheckMetadata.js.map\n","/**\n * Exclusion metadata contains all information about table's exclusion constraints.\n */\nexport class ExclusionMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this.entityMetadata = options.entityMetadata;\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend exclusion constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy) {\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.exclusionConstraintName(this.entityMetadata.tableName, this.expression);\n        return this;\n    }\n}\n\n//# sourceMappingURL=ExclusionMetadata.js.map\n","import { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\nimport { RelationMetadata } from \"../metadata/RelationMetadata\";\nimport { EmbeddedMetadata } from \"../metadata/EmbeddedMetadata\";\nimport { RelationIdMetadata } from \"../metadata/RelationIdMetadata\";\nimport { RelationCountMetadata } from \"../metadata/RelationCountMetadata\";\nimport { EventListenerTypes } from \"../metadata/types/EventListenerTypes\";\nimport { MetadataUtils } from \"./MetadataUtils\";\nimport { JunctionEntityMetadataBuilder } from \"./JunctionEntityMetadataBuilder\";\nimport { ClosureJunctionEntityMetadataBuilder } from \"./ClosureJunctionEntityMetadataBuilder\";\nimport { RelationJoinColumnBuilder } from \"./RelationJoinColumnBuilder\";\nimport { EntityListenerMetadata } from \"../metadata/EntityListenerMetadata\";\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\";\nimport { CheckMetadata } from \"../metadata/CheckMetadata\";\nimport { ExclusionMetadata } from \"../metadata/ExclusionMetadata\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nexport class EntityMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, metadataArgsStorage) {\n        this.connection = connection;\n        this.metadataArgsStorage = metadataArgsStorage;\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(connection);\n        this.closureJunctionEntityMetadataBuilder =\n            new ClosureJunctionEntityMetadataBuilder(connection);\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(connection);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    build(entityClasses) {\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        const allTables = entityClasses\n            ? this.metadataArgsStorage.filterTables(entityClasses)\n            : this.metadataArgsStorage.tables;\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        const realTables = allTables.filter((table) => table.type === \"regular\" ||\n            table.type === \"closure\" ||\n            table.type === \"entity-child\" ||\n            table.type === \"view\");\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        const entityMetadatas = realTables.map((tableArgs) => this.createEntityMetadata(tableArgs));\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach((entityMetadata) => this.computeParentEntityMetadata(entityMetadatas, entityMetadata));\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach((metadata) => {\n            metadata.childEntityMetadatas = entityMetadatas.filter((childMetadata) => {\n                return (typeof metadata.target === \"function\" &&\n                    typeof childMetadata.target === \"function\" &&\n                    MetadataUtils.isInherited(childMetadata.target, metadata.target));\n            });\n        });\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter((entityMetadata) => entityMetadata.tableType !== \"entity-child\")\n            .forEach((entityMetadata) => entityMetadata.build());\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter((entityMetadata) => entityMetadata.tableType === \"entity-child\")\n            .forEach((entityMetadata) => entityMetadata.build());\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter((entityMetadata) => entityMetadata.tableType !== \"entity-child\")\n            .forEach((entityMetadata) => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter((entityMetadata) => entityMetadata.tableType === \"entity-child\")\n            .forEach((entityMetadata) => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach((entityMetadata) => this.computeEntityMetadataStep2(entityMetadata));\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach((entityMetadata) => this.computeInverseProperties(entityMetadata, entityMetadatas));\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter((entityMetadata) => entityMetadata.tableType !== \"entity-child\")\n            .forEach((entityMetadata) => {\n            // create entity's relations join columns (for many-to-one and one-to-one owner)\n            entityMetadata.relations\n                .filter((relation) => relation.isOneToOne || relation.isManyToOne)\n                .forEach((relation) => {\n                const joinColumns = this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n                const { foreignKey, columns, uniqueConstraint } = this.relationJoinColumnBuilder.build(joinColumns, relation); // create a foreign key based on its metadata args\n                if (foreignKey) {\n                    relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n                    entityMetadata.foreignKeys.push(foreignKey);\n                }\n                if (columns) {\n                    relation.registerJoinColumns(columns);\n                }\n                if (uniqueConstraint) {\n                    if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                        this.connection.driver.options.type ===\n                            \"aurora-mysql\" ||\n                        this.connection.driver.options.type ===\n                            \"mssql\" ||\n                        this.connection.driver.options.type === \"sap\" ||\n                        this.connection.driver.options.type ===\n                            \"spanner\") {\n                        const index = new IndexMetadata({\n                            entityMetadata: uniqueConstraint.entityMetadata,\n                            columns: uniqueConstraint.columns,\n                            args: {\n                                target: uniqueConstraint.target,\n                                name: uniqueConstraint.name,\n                                unique: true,\n                                synchronize: true,\n                            },\n                        });\n                        if (this.connection.driver.options.type ===\n                            \"mssql\") {\n                            index.where = index.columns\n                                .map((column) => {\n                                return `${this.connection.driver.escape(column.databaseName)} IS NOT NULL`;\n                            })\n                                .join(\" AND \");\n                        }\n                        if (this.connection.driver.options.type ===\n                            \"spanner\") {\n                            index.isNullFiltered = true;\n                        }\n                        if (relation.embeddedMetadata) {\n                            relation.embeddedMetadata.indices.push(index);\n                        }\n                        else {\n                            relation.entityMetadata.ownIndices.push(index);\n                        }\n                        this.computeEntityMetadataStep2(entityMetadata);\n                    }\n                    else {\n                        if (relation.embeddedMetadata) {\n                            relation.embeddedMetadata.uniques.push(uniqueConstraint);\n                        }\n                        else {\n                            relation.entityMetadata.ownUniques.push(uniqueConstraint);\n                        }\n                        this.computeEntityMetadataStep2(entityMetadata);\n                    }\n                }\n                if (foreignKey &&\n                    this.connection.driver.options.type ===\n                        \"cockroachdb\") {\n                    const index = new IndexMetadata({\n                        entityMetadata: relation.entityMetadata,\n                        columns: foreignKey.columns,\n                        args: {\n                            target: relation.entityMetadata.target,\n                            synchronize: true,\n                        },\n                    });\n                    if (relation.embeddedMetadata) {\n                        relation.embeddedMetadata.indices.push(index);\n                    }\n                    else {\n                        relation.entityMetadata.ownIndices.push(index);\n                    }\n                    this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n            // create junction entity metadatas for entity many-to-many relations\n            entityMetadata.relations\n                .filter((relation) => relation.isManyToMany)\n                .forEach((relation) => {\n                const joinTable = this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);\n                if (!joinTable)\n                    return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n                // here we create a junction entity metadata for a new junction table of many-to-many relation\n                const junctionEntityMetadata = this.junctionEntityMetadataBuilder.build(relation, joinTable);\n                relation.registerForeignKeys(...junctionEntityMetadata.foreignKeys);\n                relation.registerJoinColumns(junctionEntityMetadata.ownIndices[0].columns, junctionEntityMetadata.ownIndices[1].columns);\n                relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n                // compute new entity metadata properties and push it to entity metadatas pool\n                this.computeEntityMetadataStep2(junctionEntityMetadata);\n                this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n                entityMetadatas.push(junctionEntityMetadata);\n            });\n        });\n        // update entity metadata depend properties\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.relationsWithJoinColumns =\n                entityMetadata.relations.filter((relation) => relation.isWithJoinColumn);\n            entityMetadata.hasNonNullableRelations =\n                entityMetadata.relationsWithJoinColumns.some((relation) => !relation.isNullable || relation.isPrimary);\n        });\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter((metadata) => metadata.treeType === \"closure-table\")\n            .forEach((entityMetadata) => {\n            const closureJunctionEntityMetadata = this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n            entityMetadata.closureJunctionTable =\n                closureJunctionEntityMetadata;\n            this.computeEntityMetadataStep2(closureJunctionEntityMetadata);\n            this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n            entityMetadatas.push(closureJunctionEntityMetadata);\n        });\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter((metadata) => metadata.inheritancePattern === \"STI\" &&\n            metadata.discriminatorColumn)\n            .forEach((entityMetadata) => this.createKeysForTableInheritance(entityMetadata));\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.indices.forEach((index) => index.build(this.connection.namingStrategy));\n        });\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.uniques.forEach((unique) => unique.build(this.connection.namingStrategy));\n        });\n        // build all check constraints\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.checks.forEach((check) => check.build(this.connection.namingStrategy));\n        });\n        // build all exclusion constraints\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.exclusions.forEach((exclusion) => exclusion.build(this.connection.namingStrategy));\n        });\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter((metadata) => typeof metadata.target === \"function\")\n            .forEach((entityMetadata) => {\n            entityMetadata.relations\n                .filter((relation) => relation.isLazy)\n                .forEach((relation) => {\n                this.connection.relationLoader.enableLazyLoad(relation, entityMetadata.target.prototype);\n            });\n        });\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.columns.forEach((column) => {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                const generated = this.metadataArgsStorage.findGenerated(column.target, column.propertyName);\n                if (generated) {\n                    column.isGenerated = true;\n                    column.generationStrategy = generated.strategy;\n                    if (generated.strategy === \"uuid\") {\n                        column.type = \"uuid\";\n                    }\n                    else if (generated.strategy === \"rowid\") {\n                        column.type = \"int\";\n                    }\n                    else {\n                        column.type = column.type || Number;\n                    }\n                    column.build(this.connection);\n                    this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n        });\n        return entityMetadatas;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    createEntityMetadata(tableArgs) {\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        const inheritanceTree = typeof tableArgs.target === \"function\"\n            ? MetadataUtils.getInheritanceTree(tableArgs.target)\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n        const tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n        const tableTree = this.metadataArgsStorage.findTree(tableArgs.target);\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        let singleTableChildrenTargets;\n        if ((tableInheritance && tableInheritance.pattern === \"STI\") ||\n            tableArgs.type === \"entity-child\") {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map((args) => args.target)\n                .filter((target) => typeof target === \"function\");\n            inheritanceTree.push(...singleTableChildrenTargets);\n        }\n        return new EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance\n                ? tableInheritance.pattern\n                : undefined,\n        });\n    }\n    computeParentEntityMetadata(allEntityMetadatas, entityMetadata) {\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find((allEntityMetadata) => {\n                return (allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target) !== -1 &&\n                    allEntityMetadata.inheritancePattern === \"STI\");\n            });\n        }\n    }\n    computeEntityMetadataStep1(allEntityMetadatas, entityMetadata) {\n        const entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);\n        const discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);\n        if (typeof discriminatorValue !== \"undefined\") {\n            entityMetadata.discriminatorValue = discriminatorValue.value;\n        }\n        else {\n            entityMetadata.discriminatorValue = entityMetadata.target.name;\n        }\n        // if single table inheritance is used, we need to mark all embedded columns as nullable\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree)).map((embedded) => {\n            if (entityMetadata.inheritancePattern === \"STI\") {\n                embedded.columns = embedded.columns.map((column) => {\n                    column.isNullable = true;\n                    return column;\n                });\n            }\n            return embedded;\n        });\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map((args) => {\n            // for single table children we reuse columns created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownColumns.find((column) => column.propertyName === args.propertyName);\n            // for multiple table inheritance we can override default column values\n            if (entityMetadata.tableType === \"regular\" &&\n                args.target !== entityMetadata.target) {\n                const childArgs = this.metadataArgsStorage.columns.find((c) => c.propertyName === args.propertyName &&\n                    c.target === entityMetadata.target);\n                if (childArgs && childArgs.options.default) {\n                    args.options.default = childArgs.options.default;\n                }\n            }\n            const column = new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata,\n                args,\n            });\n            // if single table inheritance used, we need to mark all inherit table columns as nullable\n            const columnInSingleTableInheritedChild = allEntityMetadatas.find((otherEntityMetadata) => otherEntityMetadata.tableType === \"entity-child\" &&\n                otherEntityMetadata.target === args.target);\n            if (columnInSingleTableInheritedChild)\n                column.isNullable = true;\n            return column;\n        });\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            const discriminatorColumnName = entityInheritance.column && entityInheritance.column.name\n                ? entityInheritance.column.name\n                : \"type\";\n            let discriminatorColumn = entityMetadata.ownColumns.find((column) => column.propertyName === discriminatorColumnName);\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName,\n                            type: \"varchar\",\n                            nullable: false,\n                        },\n                    },\n                });\n                discriminatorColumn.isVirtual = true;\n                discriminatorColumn.isDiscriminator = true;\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            }\n            else {\n                discriminatorColumn.isDiscriminator = true;\n            }\n        }\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            const discriminatorColumn = entityMetadata.parentEntityMetadata.ownColumns.find((column) => column.isDiscriminator);\n            if (discriminatorColumn &&\n                !entityMetadata.ownColumns.find((column) => column === discriminatorColumn)) {\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            }\n            // also copy the inheritance pattern & tree metadata\n            // this comes in handy when inheritance and trees are used together\n            entityMetadata.inheritancePattern =\n                entityMetadata.parentEntityMetadata.inheritancePattern;\n            if (!entityMetadata.treeType &&\n                !!entityMetadata.parentEntityMetadata.treeType) {\n                entityMetadata.treeType =\n                    entityMetadata.parentEntityMetadata.treeType;\n                entityMetadata.treeOptions =\n                    entityMetadata.parentEntityMetadata.treeOptions;\n                entityMetadata.treeParentRelation =\n                    entityMetadata.parentEntityMetadata.treeParentRelation;\n                entityMetadata.treeLevelColumn =\n                    entityMetadata.parentEntityMetadata.treeLevelColumn;\n            }\n        }\n        const { namingStrategy } = this.connection;\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                materializedPath: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"mpath\",\n                    options: /*tree.column || */ {\n                        name: namingStrategy.materializedPathColumnName,\n                        type: String,\n                        nullable: true,\n                        default: \"\",\n                    },\n                },\n            }));\n        }\n        else if (entityMetadata.treeType === \"nested-set\") {\n            const { left, right } = namingStrategy.nestedSetColumnNames;\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetLeft: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: left,\n                    options: /*tree.column || */ {\n                        name: left,\n                        type: Number,\n                        nullable: false,\n                        default: 1,\n                    },\n                },\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetRight: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: right,\n                    options: /*tree.column || */ {\n                        name: right,\n                        type: Number,\n                        nullable: false,\n                        default: 2,\n                    },\n                },\n            }));\n        }\n        entityMetadata.ownRelations = this.metadataArgsStorage\n            .filterRelations(entityMetadata.inheritanceTree)\n            .map((args) => {\n            // for single table children we reuse relations created for their parents\n            if (entityMetadata.tableType === \"entity-child\") {\n                const parentRelation = entityMetadata.parentEntityMetadata.ownRelations.find((relation) => relation.propertyName === args.propertyName);\n                const type = typeof args.type === \"function\"\n                    ? args.type()\n                    : args.type;\n                if (parentRelation.type !== type) {\n                    const clone = Object.create(parentRelation);\n                    clone.type = type;\n                    return clone;\n                }\n                return parentRelation;\n            }\n            return new RelationMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationIds = this.metadataArgsStorage\n            .filterRelationIds(entityMetadata.inheritanceTree)\n            .map((args) => {\n            // for single table children we reuse relation ids created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationIds.find((relationId) => relationId.propertyName === args.propertyName);\n            return new RelationIdMetadata({ entityMetadata, args });\n        });\n        entityMetadata.relationCounts = this.metadataArgsStorage\n            .filterRelationCounts(entityMetadata.inheritanceTree)\n            .map((args) => {\n            // for single table children we reuse relation counts created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationCounts.find((relationCount) => relationCount.propertyName === args.propertyName);\n            return new RelationCountMetadata({ entityMetadata, args });\n        });\n        entityMetadata.ownListeners = this.metadataArgsStorage\n            .filterListeners(entityMetadata.inheritanceTree)\n            .map((args) => {\n            return new EntityListenerMetadata({\n                entityMetadata: entityMetadata,\n                args: args,\n            });\n        });\n        entityMetadata.checks = this.metadataArgsStorage\n            .filterChecks(entityMetadata.inheritanceTree)\n            .map((args) => {\n            return new CheckMetadata({ entityMetadata, args });\n        });\n        // Only PostgreSQL supports exclusion constraints.\n        if (this.connection.driver.options.type === \"postgres\") {\n            entityMetadata.exclusions = this.metadataArgsStorage\n                .filterExclusions(entityMetadata.inheritanceTree)\n                .map((args) => {\n                return new ExclusionMetadata({ entityMetadata, args });\n            });\n        }\n        if (this.connection.driver.options.type === \"cockroachdb\") {\n            entityMetadata.ownIndices = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .filter((args) => !args.unique)\n                .map((args) => {\n                return new IndexMetadata({ entityMetadata, args });\n            });\n            const uniques = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .filter((args) => args.unique)\n                .map((args) => {\n                return new UniqueMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                    },\n                });\n            });\n            entityMetadata.ownUniques.push(...uniques);\n        }\n        else {\n            entityMetadata.ownIndices = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .map((args) => {\n                return new IndexMetadata({ entityMetadata, args });\n            });\n        }\n        // This drivers stores unique constraints as unique indices.\n        if (DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\" ||\n            this.connection.driver.options.type === \"sap\" ||\n            this.connection.driver.options.type === \"spanner\") {\n            const indices = this.metadataArgsStorage\n                .filterUniques(entityMetadata.inheritanceTree)\n                .map((args) => {\n                return new IndexMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                        unique: true,\n                        synchronize: true,\n                    },\n                });\n            });\n            entityMetadata.ownIndices.push(...indices);\n        }\n        else {\n            const uniques = this.metadataArgsStorage\n                .filterUniques(entityMetadata.inheritanceTree)\n                .map((args) => {\n                return new UniqueMetadata({ entityMetadata, args });\n            });\n            entityMetadata.ownUniques.push(...uniques);\n        }\n    }\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    createEmbeddedsRecursively(entityMetadata, embeddedArgs) {\n        return embeddedArgs.map((embeddedArgs) => {\n            const embeddedMetadata = new EmbeddedMetadata({\n                entityMetadata: entityMetadata,\n                args: embeddedArgs,\n            });\n            const targets = typeof embeddedMetadata.type === \"function\"\n                ? MetadataUtils.getInheritanceTree(embeddedMetadata.type)\n                : [embeddedMetadata.type]; // todo: implement later here inheritance for string-targets\n            embeddedMetadata.columns = this.metadataArgsStorage\n                .filterColumns(targets)\n                .map((args) => {\n                return new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata,\n                    embeddedMetadata,\n                    args,\n                });\n            });\n            embeddedMetadata.relations = this.metadataArgsStorage\n                .filterRelations(targets)\n                .map((args) => {\n                return new RelationMetadata({\n                    entityMetadata,\n                    embeddedMetadata,\n                    args,\n                });\n            });\n            embeddedMetadata.listeners = this.metadataArgsStorage\n                .filterListeners(targets)\n                .map((args) => {\n                return new EntityListenerMetadata({\n                    entityMetadata,\n                    embeddedMetadata,\n                    args,\n                });\n            });\n            embeddedMetadata.indices = this.metadataArgsStorage\n                .filterIndices(targets)\n                .map((args) => {\n                return new IndexMetadata({\n                    entityMetadata,\n                    embeddedMetadata,\n                    args,\n                });\n            });\n            embeddedMetadata.uniques = this.metadataArgsStorage\n                .filterUniques(targets)\n                .map((args) => {\n                return new UniqueMetadata({\n                    entityMetadata,\n                    embeddedMetadata,\n                    args,\n                });\n            });\n            embeddedMetadata.relationIds = this.metadataArgsStorage\n                .filterRelationIds(targets)\n                .map((args) => {\n                return new RelationIdMetadata({ entityMetadata, args });\n            });\n            embeddedMetadata.relationCounts = this.metadataArgsStorage\n                .filterRelationCounts(targets)\n                .map((args) => {\n                return new RelationCountMetadata({ entityMetadata, args });\n            });\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(targets));\n            embeddedMetadata.embeddeds.forEach((subEmbedded) => (subEmbedded.parentEmbeddedMetadata = embeddedMetadata));\n            entityMetadata.allEmbeddeds.push(embeddedMetadata);\n            return embeddedMetadata;\n        });\n    }\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    computeEntityMetadataStep2(entityMetadata) {\n        entityMetadata.embeddeds.forEach((embedded) => embedded.build(this.connection));\n        entityMetadata.embeddeds.forEach((embedded) => {\n            embedded.columnsFromTree.forEach((column) => column.build(this.connection));\n            embedded.relationsFromTree.forEach((relation) => relation.build());\n        });\n        entityMetadata.ownColumns.forEach((column) => column.build(this.connection));\n        entityMetadata.ownRelations.forEach((relation) => relation.build());\n        entityMetadata.relations = entityMetadata.embeddeds.reduce((relations, embedded) => relations.concat(embedded.relationsFromTree), entityMetadata.ownRelations);\n        entityMetadata.eagerRelations = entityMetadata.relations.filter((relation) => relation.isEager);\n        entityMetadata.lazyRelations = entityMetadata.relations.filter((relation) => relation.isLazy);\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter((relation) => relation.isOneToOne);\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter((relation) => relation.isOneToMany);\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter((relation) => relation.isManyToOne);\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter((relation) => relation.isManyToMany);\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter((relation) => relation.isOneToOneOwner);\n        entityMetadata.ownerManyToManyRelations =\n            entityMetadata.relations.filter((relation) => relation.isManyToManyOwner);\n        entityMetadata.treeParentRelation = entityMetadata.relations.find((relation) => relation.isTreeParent);\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find((relation) => relation.isTreeChildren);\n        entityMetadata.columns = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), entityMetadata.ownColumns);\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce((listeners, embedded) => listeners.concat(embedded.listenersFromTree), entityMetadata.ownListeners);\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.AFTER_LOAD);\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.AFTER_INSERT);\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.AFTER_UPDATE);\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.AFTER_REMOVE);\n        entityMetadata.afterSoftRemoveListeners =\n            entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.AFTER_SOFT_REMOVE);\n        entityMetadata.afterRecoverListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.AFTER_RECOVER);\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.BEFORE_INSERT);\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.BEFORE_UPDATE);\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.BEFORE_REMOVE);\n        entityMetadata.beforeSoftRemoveListeners =\n            entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.BEFORE_SOFT_REMOVE);\n        entityMetadata.beforeRecoverListeners = entityMetadata.listeners.filter((listener) => listener.type === EventListenerTypes.BEFORE_RECOVER);\n        entityMetadata.indices = entityMetadata.embeddeds.reduce((indices, embedded) => indices.concat(embedded.indicesFromTree), entityMetadata.ownIndices);\n        entityMetadata.uniques = entityMetadata.embeddeds.reduce((uniques, embedded) => uniques.concat(embedded.uniquesFromTree), entityMetadata.ownUniques);\n        entityMetadata.primaryColumns = entityMetadata.columns.filter((column) => column.isPrimary);\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter((column) => !column.isVirtual);\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter((column) => column.closureType === \"ancestor\");\n        entityMetadata.descendantColumns = entityMetadata.columns.filter((column) => column.closureType === \"descendant\");\n        entityMetadata.hasMultiplePrimaryKeys =\n            entityMetadata.primaryColumns.length > 1;\n        entityMetadata.generatedColumns = entityMetadata.columns.filter((column) => column.isGenerated || column.isObjectId);\n        entityMetadata.hasUUIDGeneratedColumns =\n            entityMetadata.columns.filter((column) => column.isGenerated || column.generationStrategy === \"uuid\").length > 0;\n        entityMetadata.createDateColumn = entityMetadata.columns.find((column) => column.isCreateDate);\n        entityMetadata.updateDateColumn = entityMetadata.columns.find((column) => column.isUpdateDate);\n        entityMetadata.deleteDateColumn = entityMetadata.columns.find((column) => column.isDeleteDate);\n        entityMetadata.versionColumn = entityMetadata.columns.find((column) => column.isVersion);\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find((column) => column.isDiscriminator);\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find((column) => column.isTreeLevel);\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find((column) => column.isNestedSetLeft);\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find((column) => column.isNestedSetRight);\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find((column) => column.isMaterializedPath);\n        entityMetadata.objectIdColumn = entityMetadata.columns.find((column) => column.isObjectId);\n        entityMetadata.foreignKeys.forEach((foreignKey) => foreignKey.build(this.connection.namingStrategy));\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n        entityMetadata.relationIds.forEach((relationId) => relationId.build());\n        entityMetadata.relationCounts.forEach((relationCount) => relationCount.build());\n        entityMetadata.embeddeds.forEach((embedded) => {\n            embedded.relationIdsFromTree.forEach((relationId) => relationId.build());\n            embedded.relationCountsFromTree.forEach((relationCount) => relationCount.build());\n        });\n    }\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    computeInverseProperties(entityMetadata, entityMetadatas) {\n        entityMetadata.relations.forEach((relation) => {\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            const inverseEntityMetadata = entityMetadatas.find((m) => m.target === relation.type ||\n                (typeof relation.type === \"string\" &&\n                    (m.targetName === relation.type ||\n                        m.givenTableName === relation.type)));\n            if (!inverseEntityMetadata)\n                throw new TypeORMError(\"Entity metadata for \" +\n                    entityMetadata.name +\n                    \"#\" +\n                    relation.propertyPath +\n                    \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\");\n            relation.inverseEntityMetadata = inverseEntityMetadata;\n            relation.inverseSidePropertyPath =\n                relation.buildInverseSidePropertyPath();\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find((foundRelation) => foundRelation.propertyPath ===\n                relation.inverseSidePropertyPath);\n        });\n    }\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    createKeysForTableInheritance(entityMetadata) {\n        const isDiscriminatorColumnAlreadyIndexed = entityMetadata.indices.some(({ givenColumnNames }) => !!givenColumnNames &&\n            Array.isArray(givenColumnNames) &&\n            givenColumnNames.length === 1 &&\n            givenColumnNames[0] ===\n                entityMetadata.discriminatorColumn?.databaseName);\n        // If the discriminator column is already indexed, there is no need to\n        // add another index on top of it.\n        if (isDiscriminatorColumnAlreadyIndexed) {\n            return;\n        }\n        entityMetadata.indices.push(new IndexMetadata({\n            entityMetadata: entityMetadata,\n            columns: [entityMetadata.discriminatorColumn],\n            args: {\n                target: entityMetadata.target,\n                unique: false,\n            },\n        }));\n    }\n}\n\n//# sourceMappingURL=EntityMetadataBuilder.js.map\n","import { TypeORMError } from \"../error\";\nexport class EntitySchemaEmbeddedError extends TypeORMError {\n    static createEntitySchemaIsRequiredException(field) {\n        return new EntitySchemaEmbeddedError(`EntitySchema is required for ${field} embedded field`);\n    }\n    static createTargetIsRequired(field) {\n        return new EntitySchemaEmbeddedError(`Target field is required for ${field} embedded EntitySchema`);\n    }\n    constructor(message) {\n        super(message);\n    }\n}\n\n//# sourceMappingURL=EntitySchemaEmbeddedError.js.map\n","import { MetadataArgsStorage } from \"../metadata-args/MetadataArgsStorage\";\nimport { EntitySchemaEmbeddedError } from \"./EntitySchemaEmbeddedError\";\n/**\n * Transforms entity schema into metadata args storage.\n * The result will be just like entities read from decorators.\n */\nexport class EntitySchemaTransformer {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Transforms entity schema into new metadata args storage object.\n     */\n    transform(schemas) {\n        const metadataArgsStorage = new MetadataArgsStorage();\n        schemas.forEach((entitySchema) => {\n            const options = entitySchema.options;\n            // add table metadata args from the schema\n            const tableMetadata = {\n                target: options.target || options.name,\n                name: options.tableName,\n                database: options.database,\n                schema: options.schema,\n                type: options.type || \"regular\",\n                orderBy: options.orderBy,\n                synchronize: options.synchronize,\n                withoutRowid: !!options.withoutRowid,\n                expression: options.expression,\n            };\n            metadataArgsStorage.tables.push(tableMetadata);\n            const { inheritance } = options;\n            if (inheritance) {\n                metadataArgsStorage.inheritances.push({\n                    target: options.target,\n                    pattern: inheritance.pattern ?? \"STI\",\n                    column: inheritance.column\n                        ? typeof inheritance.column === \"string\"\n                            ? { name: inheritance.column }\n                            : inheritance.column\n                        : undefined,\n                });\n            }\n            const { discriminatorValue } = options;\n            if (discriminatorValue) {\n                metadataArgsStorage.discriminatorValues.push({\n                    target: options.target || options.name,\n                    value: discriminatorValue,\n                });\n            }\n            this.transformColumnsRecursive(options, metadataArgsStorage);\n        });\n        return metadataArgsStorage;\n    }\n    transformColumnsRecursive(options, metadataArgsStorage) {\n        // add columns metadata args from the schema\n        Object.keys(options.columns).forEach((columnName) => {\n            const column = options.columns[columnName];\n            const regularColumn = column;\n            let mode = \"regular\";\n            if (regularColumn.createDate)\n                mode = \"createDate\";\n            if (regularColumn.updateDate)\n                mode = \"updateDate\";\n            if (regularColumn.deleteDate)\n                mode = \"deleteDate\";\n            if (regularColumn.version)\n                mode = \"version\";\n            if (regularColumn.treeChildrenCount)\n                mode = \"treeChildrenCount\";\n            if (regularColumn.treeLevel)\n                mode = \"treeLevel\";\n            if (regularColumn.objectId)\n                mode = \"objectId\";\n            const columnArgs = {\n                target: options.target || options.name,\n                mode: mode,\n                propertyName: columnName,\n                options: {\n                    type: regularColumn.type,\n                    name: regularColumn.objectId ? \"_id\" : regularColumn.name,\n                    primaryKeyConstraintName: regularColumn.primaryKeyConstraintName,\n                    length: regularColumn.length,\n                    width: regularColumn.width,\n                    nullable: regularColumn.nullable,\n                    readonly: regularColumn.readonly,\n                    update: regularColumn.update,\n                    select: regularColumn.select,\n                    insert: regularColumn.insert,\n                    primary: regularColumn.primary,\n                    unique: regularColumn.unique,\n                    comment: regularColumn.comment,\n                    default: regularColumn.default,\n                    onUpdate: regularColumn.onUpdate,\n                    precision: regularColumn.precision,\n                    scale: regularColumn.scale,\n                    zerofill: regularColumn.zerofill,\n                    unsigned: regularColumn.unsigned,\n                    charset: regularColumn.charset,\n                    collation: regularColumn.collation,\n                    enum: regularColumn.enum,\n                    enumName: regularColumn.enumName,\n                    asExpression: regularColumn.asExpression,\n                    generatedType: regularColumn.generatedType,\n                    hstoreType: regularColumn.hstoreType,\n                    array: regularColumn.array,\n                    transformer: regularColumn.transformer,\n                    spatialFeatureType: regularColumn.spatialFeatureType,\n                    srid: regularColumn.srid,\n                },\n            };\n            metadataArgsStorage.columns.push(columnArgs);\n            if (regularColumn.generated) {\n                const generationArgs = {\n                    target: options.target || options.name,\n                    propertyName: columnName,\n                    strategy: typeof regularColumn.generated === \"string\"\n                        ? regularColumn.generated\n                        : \"increment\",\n                };\n                metadataArgsStorage.generations.push(generationArgs);\n            }\n            if (regularColumn.unique)\n                metadataArgsStorage.uniques.push({\n                    target: options.target || options.name,\n                    columns: [columnName],\n                });\n        });\n        // add relation metadata args from the schema\n        if (options.relations) {\n            Object.keys(options.relations).forEach((relationName) => {\n                const relationSchema = options.relations[relationName];\n                const relation = {\n                    target: options.target || options.name,\n                    propertyName: relationName,\n                    relationType: relationSchema.type,\n                    isLazy: relationSchema.lazy || false,\n                    type: relationSchema.target,\n                    inverseSideProperty: relationSchema.inverseSide,\n                    isTreeParent: relationSchema.treeParent,\n                    isTreeChildren: relationSchema.treeChildren,\n                    options: {\n                        eager: relationSchema.eager || false,\n                        cascade: relationSchema.cascade,\n                        nullable: relationSchema.nullable,\n                        onDelete: relationSchema.onDelete,\n                        onUpdate: relationSchema.onUpdate,\n                        deferrable: relationSchema.deferrable,\n                        // primary: relationSchema.primary,\n                        createForeignKeyConstraints: relationSchema.createForeignKeyConstraints,\n                        persistence: relationSchema.persistence,\n                        orphanedRowAction: relationSchema.orphanedRowAction,\n                    },\n                };\n                metadataArgsStorage.relations.push(relation);\n                // add join column\n                if (relationSchema.joinColumn) {\n                    if (typeof relationSchema.joinColumn === \"boolean\") {\n                        const joinColumn = {\n                            target: options.target || options.name,\n                            propertyName: relationName,\n                        };\n                        metadataArgsStorage.joinColumns.push(joinColumn);\n                    }\n                    else {\n                        const joinColumnsOptions = Array.isArray(relationSchema.joinColumn)\n                            ? relationSchema.joinColumn\n                            : [relationSchema.joinColumn];\n                        for (const joinColumnOption of joinColumnsOptions) {\n                            const joinColumn = {\n                                target: options.target || options.name,\n                                propertyName: relationName,\n                                name: joinColumnOption.name,\n                                referencedColumnName: joinColumnOption.referencedColumnName,\n                                foreignKeyConstraintName: joinColumnOption.foreignKeyConstraintName,\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        }\n                    }\n                }\n                // add join table\n                if (relationSchema.joinTable) {\n                    if (typeof relationSchema.joinTable === \"boolean\") {\n                        const joinTable = {\n                            target: options.target || options.name,\n                            propertyName: relationName,\n                        };\n                        metadataArgsStorage.joinTables.push(joinTable);\n                    }\n                    else {\n                        const joinTable = {\n                            target: options.target || options.name,\n                            propertyName: relationName,\n                            name: relationSchema.joinTable.name,\n                            database: relationSchema.joinTable.database,\n                            schema: relationSchema.joinTable.schema,\n                            joinColumns: (relationSchema.joinTable.joinColumn\n                                ? [\n                                    relationSchema.joinTable.joinColumn,\n                                ]\n                                : relationSchema.joinTable.joinColumns),\n                            inverseJoinColumns: (relationSchema.joinTable.inverseJoinColumn\n                                ? [\n                                    relationSchema.joinTable.inverseJoinColumn,\n                                ]\n                                : relationSchema.joinTable.inverseJoinColumns),\n                        };\n                        metadataArgsStorage.joinTables.push(joinTable);\n                    }\n                }\n            });\n        }\n        // add relation id metadata args from the schema\n        if (options.relationIds) {\n            Object.keys(options.relationIds).forEach((relationIdName) => {\n                const relationIdOptions = options.relationIds[relationIdName];\n                const relationId = {\n                    propertyName: relationIdName,\n                    relation: relationIdOptions.relationName,\n                    target: options.target || options.name,\n                    alias: relationIdOptions.alias,\n                    queryBuilderFactory: relationIdOptions.queryBuilderFactory,\n                };\n                metadataArgsStorage.relationIds.push(relationId);\n            });\n        }\n        // add index metadata args from the schema\n        if (options.indices) {\n            options.indices.forEach((index) => {\n                const indexArgs = {\n                    target: options.target || options.name,\n                    name: index.name,\n                    unique: index.unique === true ? true : false,\n                    spatial: index.spatial === true ? true : false,\n                    fulltext: index.fulltext === true ? true : false,\n                    nullFiltered: index.nullFiltered === true ? true : false,\n                    parser: index.parser,\n                    synchronize: index.synchronize === false ? false : true,\n                    where: index.where,\n                    sparse: index.sparse,\n                    columns: index.columns,\n                };\n                metadataArgsStorage.indices.push(indexArgs);\n            });\n        }\n        // add unique metadata args from the schema\n        if (options.uniques) {\n            options.uniques.forEach((unique) => {\n                const uniqueArgs = {\n                    target: options.target || options.name,\n                    name: unique.name,\n                    columns: unique.columns,\n                    deferrable: unique.deferrable,\n                };\n                metadataArgsStorage.uniques.push(uniqueArgs);\n            });\n        }\n        // add check metadata args from the schema\n        if (options.checks) {\n            options.checks.forEach((check) => {\n                const checkArgs = {\n                    target: options.target || options.name,\n                    name: check.name,\n                    expression: check.expression,\n                };\n                metadataArgsStorage.checks.push(checkArgs);\n            });\n        }\n        // add exclusion metadata args from the schema\n        if (options.exclusions) {\n            options.exclusions.forEach((exclusion) => {\n                const exclusionArgs = {\n                    target: options.target || options.name,\n                    name: exclusion.name,\n                    expression: exclusion.expression,\n                };\n                metadataArgsStorage.exclusions.push(exclusionArgs);\n            });\n        }\n        if (options.embeddeds) {\n            Object.keys(options.embeddeds).forEach((columnName) => {\n                const embeddedOptions = options.embeddeds[columnName];\n                if (!embeddedOptions.schema)\n                    throw EntitySchemaEmbeddedError.createEntitySchemaIsRequiredException(columnName);\n                const embeddedSchema = embeddedOptions.schema.options;\n                metadataArgsStorage.embeddeds.push({\n                    target: options.target || options.name,\n                    propertyName: columnName,\n                    isArray: embeddedOptions.array === true,\n                    prefix: embeddedOptions.prefix !== undefined\n                        ? embeddedOptions.prefix\n                        : undefined,\n                    type: () => embeddedSchema?.target || embeddedSchema.name,\n                });\n                this.transformColumnsRecursive(embeddedSchema, metadataArgsStorage);\n            });\n        }\n    }\n}\n\n//# sourceMappingURL=EntitySchemaTransformer.js.map\n","import { importClassesFromDirectories } from \"../util/DirectoryExportedClassesLoader\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { getFromContainer } from \"../container\";\nimport { getMetadataArgsStorage } from \"../globals\";\nimport { EntityMetadataBuilder } from \"../metadata-builder/EntityMetadataBuilder\";\nimport { EntitySchemaTransformer } from \"../entity-schema/EntitySchemaTransformer\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    async buildMigrations(migrations) {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [\n            ...migrationClasses,\n            ...(await importClassesFromDirectories(this.connection.logger, migrationDirectories)),\n        ];\n        return allMigrationClasses.map((migrationClass) => getFromContainer(migrationClass));\n    }\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    async buildSubscribers(subscribers) {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [\n            ...subscriberClasses,\n            ...(await importClassesFromDirectories(this.connection.logger, subscriberDirectories)),\n        ];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map((metadata) => getFromContainer(metadata.target));\n    }\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    async buildEntityMetadatas(entities) {\n        // todo: instead we need to merge multiple metadata args storages\n        const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const entityClasses = entityClassesOrSchemas.filter((entityClass) => !InstanceChecker.isEntitySchema(entityClass));\n        const entitySchemas = entityClassesOrSchemas.filter((entityClass) => InstanceChecker.isEntitySchema(entityClass));\n        const allEntityClasses = [\n            ...entityClasses,\n            ...(await importClassesFromDirectories(this.connection.logger, entityDirectories)),\n        ];\n        allEntityClasses.forEach((entityClass) => {\n            // if we have entity schemas loaded from directories\n            if (InstanceChecker.isEntitySchema(entityClass)) {\n                entitySchemas.push(entityClass);\n            }\n        });\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n}\n\n//# sourceMappingURL=ConnectionMetadataBuilder.js.map\n","import { PlatformTools } from \"../platform/PlatformTools\";\nexport class AbstractLogger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query, parameters, queryRunner) {\n        if (!this.isLogEnabledFor(\"query\")) {\n            return;\n        }\n        this.writeLog(\"query\", {\n            type: \"query\",\n            prefix: \"query\",\n            message: query,\n            format: \"sql\",\n            parameters,\n        }, queryRunner);\n    }\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error, query, parameters, queryRunner) {\n        if (!this.isLogEnabledFor(\"query-error\")) {\n            return;\n        }\n        this.writeLog(\"warn\", [\n            {\n                type: \"query-error\",\n                prefix: \"query failed\",\n                message: query,\n                format: \"sql\",\n                parameters,\n            },\n            {\n                type: \"query-error\",\n                prefix: \"error\",\n                message: error,\n            },\n        ], queryRunner);\n    }\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time, query, parameters, queryRunner) {\n        if (!this.isLogEnabledFor(\"query-slow\")) {\n            return;\n        }\n        this.writeLog(\"warn\", [\n            {\n                type: \"query-slow\",\n                prefix: \"query is slow\",\n                message: query,\n                format: \"sql\",\n                parameters,\n                additionalInfo: {\n                    time,\n                },\n            },\n            {\n                type: \"query-slow\",\n                prefix: \"execution time\",\n                message: time,\n            },\n        ], queryRunner);\n    }\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message, queryRunner) {\n        if (!this.isLogEnabledFor(\"schema-build\")) {\n            return;\n        }\n        this.writeLog(\"schema\", {\n            type: \"schema-build\",\n            message,\n        }, queryRunner);\n    }\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message, queryRunner) {\n        if (!this.isLogEnabledFor(\"migration\")) {\n            return;\n        }\n        this.writeLog(\"log\", {\n            type: \"migration\",\n            message,\n        }, queryRunner);\n    }\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level, message, queryRunner) {\n        switch (level) {\n            case \"log\":\n                if (!this.isLogEnabledFor(\"log\")) {\n                    return;\n                }\n                this.writeLog(\"log\", {\n                    type: \"log\",\n                    message,\n                }, queryRunner);\n                break;\n            case \"info\":\n                if (!this.isLogEnabledFor(\"info\")) {\n                    return;\n                }\n                this.writeLog(\"info\", {\n                    type: \"info\",\n                    prefix: \"info\",\n                    message,\n                }, queryRunner);\n                break;\n            case \"warn\":\n                if (!this.isLogEnabledFor(\"warn\")) {\n                    return;\n                }\n                this.writeLog(\"warn\", {\n                    type: \"warn\",\n                    message,\n                }, queryRunner);\n                break;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Check is logging for level or message type is enabled.\n     */\n    isLogEnabledFor(type) {\n        switch (type) {\n            case \"query\":\n                return (this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"query\") !== -1));\n            case \"error\":\n            case \"query-error\":\n                return (this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"error\") !== -1));\n            case \"query-slow\":\n                return true;\n            case \"schema\":\n            case \"schema-build\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"schema\") !== -1));\n            case \"migration\":\n                return true;\n            case \"log\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"log\") !== -1));\n            case \"info\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"info\") !== -1));\n            case \"warn\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"warn\") !== -1));\n            default:\n                return false;\n        }\n    }\n    /**\n     * Prepare and format log messages\n     */\n    prepareLogMessages(logMessage, options) {\n        options = {\n            ...{\n                addColonToPrefix: true,\n                appendParameterAsComment: true,\n                highlightSql: true,\n            },\n            ...options,\n        };\n        const messages = Array.isArray(logMessage) ? logMessage : [logMessage];\n        for (let message of messages) {\n            if (typeof message !== \"object\") {\n                message = {\n                    message,\n                };\n            }\n            if (message.format === \"sql\") {\n                let sql = String(message.message);\n                if (options.appendParameterAsComment &&\n                    message.parameters &&\n                    message.parameters.length) {\n                    sql += ` -- PARAMETERS: ${this.stringifyParams(message.parameters)}`;\n                }\n                if (options.highlightSql) {\n                    sql = PlatformTools.highlightSql(sql);\n                }\n                message.message = sql;\n            }\n            if (options.addColonToPrefix && message.prefix) {\n                message.prefix += \":\";\n            }\n        }\n        return messages;\n    }\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    stringifyParams(parameters) {\n        try {\n            return JSON.stringify(parameters);\n        }\n        catch (error) {\n            // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n}\n\n//# sourceMappingURL=AbstractLogger.js.map\n","import { AbstractLogger } from \"./AbstractLogger\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nexport class SimpleConsoleLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    writeLog(level, logMessage, queryRunner) {\n        const messages = this.prepareLogMessages(logMessage, {\n            highlightSql: false,\n        });\n        for (let message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    console.log(message.message);\n                    break;\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        console.info(message.prefix, message.message);\n                    }\n                    else {\n                        console.info(message.message);\n                    }\n                    break;\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        console.warn(message.prefix, message.message);\n                    }\n                    else {\n                        console.warn(message.message);\n                    }\n                    break;\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        console.error(message.prefix, message.message);\n                    }\n                    else {\n                        console.error(message.message);\n                    }\n                    break;\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=SimpleConsoleLogger.js.map\n","import { PlatformTools } from \"../platform/PlatformTools\";\nimport { AbstractLogger } from \"./AbstractLogger\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    writeLog(level, logMessage, queryRunner) {\n        const messages = this.prepareLogMessages(logMessage);\n        for (let message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    PlatformTools.log(String(message.message));\n                    break;\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        PlatformTools.logInfo(message.prefix, message.message);\n                    }\n                    else {\n                        PlatformTools.log(String(message.message));\n                    }\n                    break;\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        PlatformTools.logWarn(message.prefix, message.message);\n                    }\n                    else {\n                        console.warn(PlatformTools.warn(String(message.message)));\n                    }\n                    break;\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        PlatformTools.logError(message.prefix, String(message.message));\n                    }\n                    else {\n                        console.error(PlatformTools.error(String(message.message)));\n                    }\n                    break;\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=AdvancedConsoleLogger.js.map\n","/**\n * Performs logging of the events in TypeORM.\n * This version of logger logs everything into ormlogs.log file.\n */\nexport class DummyLogger {\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n}\nexport class FileLogger extends DummyLogger {\n}\n\n//# sourceMappingURL=BrowserFileLoggerDummy.js.map\n","function getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar browser = {exports: {}};\n\n// shim for using process in browser\nvar process = browser.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ());\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] };\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\nvar browserExports = browser.exports;\nconst process$1 = /*@__PURE__*/getDefaultExportFromCjs(browserExports);\n\nexport { process$1 as default, process$1 as process };\n//# sourceMappingURL=index.js.map\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","import { AbstractLogger } from \"./AbstractLogger\";\nimport { debug } from \"debug\";\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\nexport class DebugLogger extends AbstractLogger {\n    constructor() {\n        super(...arguments);\n        /**\n         * Object with all debug logger.\n         */\n        this.logger = {\n            log: debug(\"typeorm:log\"),\n            info: debug(\"typeorm:info\"),\n            warn: debug(\"typeorm:warn\"),\n            error: debug(\"typeorm:error\"),\n            query: debug(\"typeorm:query:log\"),\n            \"query-error\": debug(\"typeorm:query:error\"),\n            \"query-slow\": debug(\"typeorm:query:slow\"),\n            \"schema-build\": debug(\"typeorm:schema\"),\n            migration: debug(\"typeorm:migration\"),\n        };\n    }\n    /**\n     * Check is logging for level or message type is enabled.\n     */\n    isLogEnabledFor(type) {\n        switch (type) {\n            case \"query\":\n                return this.logger[\"query\"].enabled;\n            case \"query-error\":\n                return this.logger[\"query-error\"].enabled;\n            case \"query-slow\":\n                return true;\n            case \"schema\":\n            case \"schema-build\":\n                return this.logger[\"schema-build\"].enabled;\n            case \"migration\":\n                return this.logger[\"migration\"].enabled;\n            case \"log\":\n                return this.logger[\"log\"].enabled;\n            case \"info\":\n                return this.logger[\"info\"].enabled;\n            case \"warn\":\n                return this.logger[\"warn\"].enabled;\n            default:\n                return false;\n        }\n    }\n    /**\n     * Write log to specific output.\n     */\n    writeLog(level, logMessage, queryRunner) {\n        const messages = this.prepareLogMessages(logMessage, {\n            appendParameterAsComment: false,\n        });\n        for (let message of messages) {\n            const messageTypeOrLevel = message.type ?? level;\n            if (messageTypeOrLevel in this.logger) {\n                if (message.prefix) {\n                    this.logger[messageTypeOrLevel](message.prefix, message.message);\n                }\n                else {\n                    this.logger[messageTypeOrLevel](message.message);\n                }\n                if (message.parameters && message.parameters.length) {\n                    this.logger[messageTypeOrLevel](\"parameters:\", message.parameters);\n                }\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=DebugLogger.js.map\n","import { SimpleConsoleLogger } from \"./SimpleConsoleLogger\";\nimport { AdvancedConsoleLogger } from \"./AdvancedConsoleLogger\";\nimport { FileLogger } from \"./FileLogger\";\nimport { DebugLogger } from \"./DebugLogger\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Helps to create logger instances.\n */\nexport class LoggerFactory {\n    /**\n     * Creates a new logger depend on a given connection's driver.\n     */\n    create(logger, options) {\n        if (ObjectUtils.isObject(logger))\n            return logger;\n        if (logger) {\n            switch (logger) {\n                case \"simple-console\":\n                    return new SimpleConsoleLogger(options);\n                case \"file\":\n                    return new FileLogger(options);\n                case \"advanced-console\":\n                    return new AdvancedConsoleLogger(options);\n                case \"debug\":\n                    return new DebugLogger();\n            }\n        }\n        return new AdvancedConsoleLogger(options);\n    }\n}\n\n//# sourceMappingURL=LoggerFactory.js.map\n","import { PlatformTools } from \"../platform/PlatformTools\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\nexport class RedisQueryResultCache {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, clientType) {\n        this.connection = connection;\n        this.clientType = clientType;\n        this.redis = this.loadRedis();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect() {\n        const cacheOptions = this.connection.options.cache;\n        if (this.clientType === \"redis\") {\n            this.client = this.redis.createClient({\n                ...cacheOptions?.options,\n                legacyMode: true,\n            });\n            if (typeof this.connection.options.cache === \"object\" &&\n                this.connection.options.cache.ignoreErrors) {\n                this.client.on(\"error\", (err) => {\n                    this.connection.logger.log(\"warn\", err);\n                });\n            }\n            if (\"connect\" in this.client) {\n                await this.client.connect();\n            }\n        }\n        else if (this.clientType === \"ioredis\") {\n            if (cacheOptions && cacheOptions.port) {\n                if (cacheOptions.options) {\n                    this.client = new this.redis(cacheOptions.port, cacheOptions.options);\n                }\n                else {\n                    this.client = new this.redis(cacheOptions.port);\n                }\n            }\n            else if (cacheOptions && cacheOptions.options) {\n                this.client = new this.redis(cacheOptions.options);\n            }\n            else {\n                this.client = new this.redis();\n            }\n        }\n        else if (this.clientType === \"ioredis/cluster\") {\n            if (cacheOptions &&\n                cacheOptions.options &&\n                Array.isArray(cacheOptions.options)) {\n                this.client = new this.redis.Cluster(cacheOptions.options);\n            }\n            else if (cacheOptions &&\n                cacheOptions.options &&\n                cacheOptions.options.startupNodes) {\n                this.client = new this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);\n            }\n            else {\n                throw new TypeORMError(`options.startupNodes required for ${this.clientType}.`);\n            }\n        }\n    }\n    /**\n     * Disconnects the connection\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            this.client.quit((err, result) => {\n                if (err)\n                    return fail(err);\n                ok();\n                this.client = undefined;\n            });\n        });\n    }\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner) { }\n    /**\n     * Get data from cache.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options, queryRunner) {\n        return new Promise((ok, fail) => {\n            if (options.identifier) {\n                this.client.get(options.identifier, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok(JSON.parse(result));\n                });\n            }\n            else if (options.query) {\n                this.client.get(options.query, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok(JSON.parse(result));\n                });\n            }\n            else {\n                ok(undefined);\n            }\n        });\n    }\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache) {\n        return savedCache.time + savedCache.duration < new Date().getTime();\n    }\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options, savedCache, queryRunner) {\n        return new Promise((ok, fail) => {\n            if (options.identifier) {\n                this.client.set(options.identifier, JSON.stringify(options), \"PX\", options.duration, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok();\n                });\n            }\n            else if (options.query) {\n                this.client.set(options.query, JSON.stringify(options), \"PX\", options.duration, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok();\n                });\n            }\n        });\n    }\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner) {\n        return new Promise((ok, fail) => {\n            this.client.flushdb((err, result) => {\n                if (err)\n                    return fail(err);\n                ok();\n            });\n        });\n    }\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers, queryRunner) {\n        await Promise.all(identifiers.map((identifier) => {\n            return this.deleteKey(identifier);\n        }));\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes a single key from redis database.\n     */\n    deleteKey(key) {\n        return new Promise((ok, fail) => {\n            this.client.del(key, (err, result) => {\n                if (err)\n                    return fail(err);\n                ok();\n            });\n        });\n    }\n    /**\n     * Loads redis dependency.\n     */\n    loadRedis() {\n        try {\n            if (this.clientType === \"ioredis/cluster\") {\n                return PlatformTools.load(\"ioredis\");\n            }\n            else {\n                return PlatformTools.load(this.clientType);\n            }\n        }\n        catch (e) {\n            throw new TypeORMError(`Cannot use cache because ${this.clientType} is not installed. Please run \"npm i ${this.clientType} --save\".`);\n        }\n    }\n}\n\n//# sourceMappingURL=RedisQueryResultCache.js.map\n","import { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\";\nimport { Table } from \"../schema-builder/table/Table\";\nimport { v4 as uuidv4 } from \"uuid\";\n/**\n * Caches query result into current database, into separate table called \"query-result-cache\".\n */\nexport class DbQueryResultCache {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n        const { schema } = this.connection.driver.options;\n        const database = this.connection.driver.database;\n        const cacheOptions = typeof this.connection.options.cache === \"object\"\n            ? this.connection.options.cache\n            : {};\n        const cacheTableName = cacheOptions.tableName || \"query-result-cache\";\n        this.queryResultCacheDatabase = database;\n        this.queryResultCacheSchema = schema;\n        this.queryResultCacheTable = this.connection.driver.buildTableName(cacheTableName, schema, database);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect() { }\n    /**\n     * Disconnects with given cache provider.\n     */\n    async disconnect() { }\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner) {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const driver = this.connection.driver;\n        const tableExist = await queryRunner.hasTable(this.queryResultCacheTable); // todo: table name should be configurable\n        if (tableExist)\n            return;\n        await queryRunner.createTable(new Table({\n            database: this.queryResultCacheDatabase,\n            schema: this.queryResultCacheSchema,\n            name: this.queryResultCacheTable,\n            columns: [\n                {\n                    name: \"id\",\n                    isPrimary: true,\n                    isNullable: false,\n                    type: driver.normalizeType({\n                        type: driver.mappedDataTypes.cacheId,\n                    }),\n                    generationStrategy: driver.options.type === \"spanner\"\n                        ? \"uuid\"\n                        : \"increment\",\n                    isGenerated: true,\n                },\n                {\n                    name: \"identifier\",\n                    type: driver.normalizeType({\n                        type: driver.mappedDataTypes.cacheIdentifier,\n                    }),\n                    isNullable: true,\n                },\n                {\n                    name: \"time\",\n                    type: driver.normalizeType({\n                        type: driver.mappedDataTypes.cacheTime,\n                    }),\n                    isPrimary: false,\n                    isNullable: false,\n                },\n                {\n                    name: \"duration\",\n                    type: driver.normalizeType({\n                        type: driver.mappedDataTypes.cacheDuration,\n                    }),\n                    isPrimary: false,\n                    isNullable: false,\n                },\n                {\n                    name: \"query\",\n                    type: driver.normalizeType({\n                        type: driver.mappedDataTypes.cacheQuery,\n                    }),\n                    isPrimary: false,\n                    isNullable: false,\n                },\n                {\n                    name: \"result\",\n                    type: driver.normalizeType({\n                        type: driver.mappedDataTypes.cacheResult,\n                    }),\n                    isNullable: false,\n                },\n            ],\n        }));\n    }\n    /**\n     * Get data from cache.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options, queryRunner) {\n        queryRunner = this.getQueryRunner(queryRunner);\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.queryResultCacheTable, \"cache\");\n        if (options.identifier) {\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"identifier\")} = :identifier`)\n                .setParameters({\n                identifier: this.connection.driver.options.type === \"mssql\"\n                    ? new MssqlParameter(options.identifier, \"nvarchar\")\n                    : options.identifier,\n            })\n                .cache(false) // disable cache to avoid infinite loops when cache is alwaysEnable\n                .getRawOne();\n        }\n        else if (options.query) {\n            if (this.connection.driver.options.type === \"oracle\") {\n                return qb\n                    .where(`dbms_lob.compare(${qb.escape(\"cache\")}.${qb.escape(\"query\")}, :query) = 0`, { query: options.query })\n                    .cache(false) // disable cache to avoid infinite loops when cache is alwaysEnable\n                    .getRawOne();\n            }\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"query\")} = :query`)\n                .setParameters({\n                query: this.connection.driver.options.type === \"mssql\"\n                    ? new MssqlParameter(options.query, \"nvarchar\")\n                    : options.query,\n            })\n                .cache(false) // disable cache to avoid infinite loops when cache is alwaysEnable\n                .getRawOne();\n        }\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache) {\n        const duration = typeof savedCache.duration === \"string\"\n            ? parseInt(savedCache.duration)\n            : savedCache.duration;\n        return ((typeof savedCache.time === \"string\"\n            ? parseInt(savedCache.time)\n            : savedCache.time) +\n            duration <\n            new Date().getTime());\n    }\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options, savedCache, queryRunner) {\n        const shouldCreateQueryRunner = queryRunner === undefined ||\n            queryRunner?.getReplicationMode() === \"slave\";\n        if (queryRunner === undefined || shouldCreateQueryRunner) {\n            queryRunner = this.connection.createQueryRunner(\"master\");\n        }\n        let insertedValues = options;\n        if (this.connection.driver.options.type === \"mssql\") {\n            // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\n            insertedValues = {\n                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\n                time: new MssqlParameter(options.time, \"bigint\"),\n                duration: new MssqlParameter(options.duration, \"int\"),\n                query: new MssqlParameter(options.query, \"nvarchar\"),\n                result: new MssqlParameter(options.result, \"nvarchar\"),\n            };\n        }\n        if (savedCache && savedCache.identifier) {\n            // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n            qb.where(`${qb.escape(\"identifier\")} = :condition`, {\n                condition: insertedValues.identifier,\n            });\n            await qb.execute();\n        }\n        else if (savedCache && savedCache.query) {\n            // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues);\n            if (this.connection.driver.options.type === \"oracle\") {\n                qb.where(`dbms_lob.compare(\"query\", :condition) = 0`, {\n                    condition: insertedValues.query,\n                });\n            }\n            else {\n                qb.where(`${qb.escape(\"query\")} = :condition`, {\n                    condition: insertedValues.query,\n                });\n            }\n            await qb.execute();\n        }\n        else {\n            // Spanner does not support auto-generated columns\n            if (this.connection.driver.options.type === \"spanner\" &&\n                !insertedValues.id) {\n                insertedValues.id = uuidv4();\n            }\n            // otherwise insert\n            await queryRunner.manager\n                .createQueryBuilder()\n                .insert()\n                .into(this.queryResultCacheTable)\n                .values(insertedValues)\n                .execute();\n        }\n        if (shouldCreateQueryRunner) {\n            await queryRunner.release();\n        }\n    }\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner) {\n        return this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable);\n    }\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers, queryRunner) {\n        let _queryRunner = queryRunner || this.getQueryRunner();\n        await Promise.all(identifiers.map((identifier) => {\n            const qb = _queryRunner.manager.createQueryBuilder();\n            return qb\n                .delete()\n                .from(this.queryResultCacheTable)\n                .where(`${qb.escape(\"identifier\")} = :identifier`, {\n                identifier,\n            })\n                .execute();\n        }));\n        if (!queryRunner) {\n            await _queryRunner.release();\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets a query runner to work with.\n     */\n    getQueryRunner(queryRunner) {\n        if (queryRunner)\n            return queryRunner;\n        return this.connection.createQueryRunner();\n    }\n}\n\n//# sourceMappingURL=DbQueryResultCache.js.map\n","import { RedisQueryResultCache } from \"./RedisQueryResultCache\";\nimport { DbQueryResultCache } from \"./DbQueryResultCache\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create() {\n        if (!this.connection.options.cache)\n            throw new TypeORMError(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n        const cache = this.connection.options.cache;\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection);\n        }\n        if (cache.type === \"redis\" ||\n            cache.type === \"ioredis\" ||\n            cache.type === \"ioredis/cluster\") {\n            return new RedisQueryResultCache(this.connection, cache.type);\n        }\n        else {\n            return new DbQueryResultCache(this.connection);\n        }\n    }\n}\n\n//# sourceMappingURL=QueryResultCacheFactory.js.map\n","import { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\n/**\n * Wraps entities and creates getters/setters for their relations\n * to be able to lazily load relations when accessing these relations.\n */\nexport class RelationLoader {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads relation data for the given entity and its relation.\n     */\n    load(relation, entityOrEntities, queryRunner, queryBuilder) {\n        // todo: check all places where it uses non array\n        if (queryRunner && queryRunner.isReleased)\n            queryRunner = undefined; // get new one if already closed\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner, queryBuilder);\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner, queryBuilder);\n        }\n        else if (relation.isManyToManyOwner) {\n            return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner, queryBuilder);\n        }\n        else {\n            // many-to-many non owner\n            return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner, queryBuilder);\n        }\n    }\n    /**\n     * Loads data for many-to-one and one-to-one owner relations.\n     *\n     * (ow) post.category<=>category.post\n     * loaded: category from post\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\n     */\n    loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner, queryBuilder) {\n        const entities = Array.isArray(entityOrEntities)\n            ? entityOrEntities\n            : [entityOrEntities];\n        const joinAliasName = relation.entityMetadata.name;\n        const qb = queryBuilder\n            ? queryBuilder\n            : this.connection\n                .createQueryBuilder(queryRunner)\n                .select(relation.propertyName) // category\n                .from(relation.type, relation.propertyName);\n        const mainAlias = qb.expressionMap.mainAlias.name;\n        const columns = relation.entityMetadata.primaryColumns;\n        const joinColumns = relation.isOwning\n            ? relation.joinColumns\n            : relation.inverseRelation.joinColumns;\n        const conditions = joinColumns\n            .map((joinColumn) => {\n            return `${relation.entityMetadata.name}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn.propertyName}`;\n        })\n            .join(\" AND \");\n        qb.innerJoin(relation.entityMetadata.target, joinAliasName, conditions);\n        if (columns.length === 1) {\n            qb.where(`${joinAliasName}.${columns[0].propertyPath} IN (:...${joinAliasName + \"_\" + columns[0].propertyName})`);\n            qb.setParameter(joinAliasName + \"_\" + columns[0].propertyName, entities.map((entity) => columns[0].getEntityValue(entity, true)));\n        }\n        else {\n            const condition = entities\n                .map((entity, entityIndex) => {\n                return columns\n                    .map((column, columnIndex) => {\n                    const paramName = joinAliasName +\n                        \"_entity_\" +\n                        entityIndex +\n                        \"_\" +\n                        columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity, true));\n                    return (joinAliasName +\n                        \".\" +\n                        column.propertyPath +\n                        \" = :\" +\n                        paramName);\n                })\n                    .join(\" AND \");\n            })\n                .map((condition) => \"(\" + condition + \")\")\n                .join(\" OR \");\n            qb.where(condition);\n        }\n        FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);\n        return qb.getMany();\n        // return qb.getOne(); todo: fix all usages\n    }\n    /**\n     * Loads data for one-to-many and one-to-one not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\n     */\n    loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner, queryBuilder) {\n        const entities = Array.isArray(entityOrEntities)\n            ? entityOrEntities\n            : [entityOrEntities];\n        const columns = relation.inverseRelation.joinColumns;\n        const qb = queryBuilder\n            ? queryBuilder\n            : this.connection\n                .createQueryBuilder(queryRunner)\n                .select(relation.propertyName)\n                .from(relation.inverseRelation.entityMetadata.target, relation.propertyName);\n        const aliasName = qb.expressionMap.mainAlias.name;\n        if (columns.length === 1) {\n            qb.where(`${aliasName}.${columns[0].propertyPath} IN (:...${aliasName + \"_\" + columns[0].propertyName})`);\n            qb.setParameter(aliasName + \"_\" + columns[0].propertyName, entities.map((entity) => columns[0].referencedColumn.getEntityValue(entity, true)));\n        }\n        else {\n            const condition = entities\n                .map((entity, entityIndex) => {\n                return columns\n                    .map((column, columnIndex) => {\n                    const paramName = aliasName +\n                        \"_entity_\" +\n                        entityIndex +\n                        \"_\" +\n                        columnIndex;\n                    qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity, true));\n                    return (aliasName +\n                        \".\" +\n                        column.propertyPath +\n                        \" = :\" +\n                        paramName);\n                })\n                    .join(\" AND \");\n            })\n                .map((condition) => \"(\" + condition + \")\")\n                .join(\" OR \");\n            qb.where(condition);\n        }\n        FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);\n        return qb.getMany();\n        // return relation.isOneToMany ? qb.getMany() : qb.getOne(); todo: fix all usages\n    }\n    /**\n     * Loads data for many-to-many owner relations.\n     *\n     * SELECT category\n     * FROM category category\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = :postId\n     * AND post_categories.categoryId = category.id\n     */\n    loadManyToManyOwner(relation, entityOrEntities, queryRunner, queryBuilder) {\n        const entities = Array.isArray(entityOrEntities)\n            ? entityOrEntities\n            : [entityOrEntities];\n        const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = entities.map((entity) => joinColumn.referencedColumn.getEntityValue(entity, true));\n            return parameters;\n        }, {});\n        const qb = queryBuilder\n            ? queryBuilder\n            : this.connection\n                .createQueryBuilder(queryRunner)\n                .select(relation.propertyName)\n                .from(relation.type, relation.propertyName);\n        const mainAlias = qb.expressionMap.mainAlias.name;\n        const joinAlias = relation.junctionEntityMetadata.tableName;\n        const joinColumnConditions = relation.joinColumns.map((joinColumn) => {\n            return `${joinAlias}.${joinColumn.propertyName} IN (:...${joinColumn.propertyName})`;\n        });\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map((inverseJoinColumn) => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn.propertyName}`;\n        });\n        qb.innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \")).setParameters(parameters);\n        FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);\n        return qb.getMany();\n    }\n    /**\n     * Loads data for many-to-many not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = post.id\n     * AND post_categories.categoryId = post_categories.categoryId\n     */\n    loadManyToManyNotOwner(relation, entityOrEntities, queryRunner, queryBuilder) {\n        const entities = Array.isArray(entityOrEntities)\n            ? entityOrEntities\n            : [entityOrEntities];\n        const qb = queryBuilder\n            ? queryBuilder\n            : this.connection\n                .createQueryBuilder(queryRunner)\n                .select(relation.propertyName)\n                .from(relation.type, relation.propertyName);\n        const mainAlias = qb.expressionMap.mainAlias.name;\n        const joinAlias = relation.junctionEntityMetadata.tableName;\n        const joinColumnConditions = relation.inverseRelation.joinColumns.map((joinColumn) => {\n            return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn.propertyName}`;\n        });\n        const inverseJoinColumnConditions = relation.inverseRelation.inverseJoinColumns.map((inverseJoinColumn) => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName} IN (:...${inverseJoinColumn.propertyName})`;\n        });\n        const parameters = relation.inverseRelation.inverseJoinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = entities.map((entity) => joinColumn.referencedColumn.getEntityValue(entity, true));\n            return parameters;\n        }, {});\n        qb.innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \")).setParameters(parameters);\n        FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);\n        return qb.getMany();\n    }\n    /**\n     * Wraps given entity and creates getters/setters for its given relation\n     * to be able to lazily load data when accessing this relation.\n     */\n    enableLazyLoad(relation, entity, queryRunner) {\n        const relationLoader = this;\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty\n        const setData = (entity, value) => {\n            entity[dataIndex] = value;\n            entity[resolveIndex] = true;\n            delete entity[promiseIndex];\n            return value;\n        };\n        const setPromise = (entity, value) => {\n            delete entity[resolveIndex];\n            delete entity[dataIndex];\n            entity[promiseIndex] = value;\n            value.then(\n            // ensure different value is not assigned yet\n            (result) => entity[promiseIndex] === value\n                ? setData(entity, result)\n                : result);\n            return value;\n        };\n        Object.defineProperty(entity, relation.propertyName, {\n            get: function () {\n                if (this[resolveIndex] === true ||\n                    this[dataIndex] !== undefined)\n                    // if related data already was loaded then simply return it\n                    return Promise.resolve(this[dataIndex]);\n                if (this[promiseIndex])\n                    // if related data is loading then return a promise relationLoader loads it\n                    return this[promiseIndex];\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\n                const loader = relationLoader\n                    .load(relation, this, queryRunner)\n                    .then((result) => relation.isOneToOne || relation.isManyToOne\n                    ? result.length === 0\n                        ? null\n                        : result[0]\n                    : result);\n                return setPromise(this, loader);\n            },\n            set: function (value) {\n                if (value instanceof Promise) {\n                    // if set data is a promise then wait for its resolve and save in the object\n                    setPromise(this, value);\n                }\n                else {\n                    // if its direct data set (non promise, probably not safe-typed)\n                    setData(this, value);\n                }\n            },\n            configurable: true,\n            enumerable: false,\n        });\n    }\n}\n\n//# sourceMappingURL=RelationLoader.js.map\n","import { registerQueryBuilders } from \"../query-builder\";\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\";\nimport { CannotConnectAlreadyConnectedError, CannotExecuteNotConnectedError, EntityMetadataNotFoundError, QueryRunnerProviderAlreadyReleasedError, TypeORMError, } from \"../error\";\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\";\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\";\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\";\nimport { DriverFactory } from \"../driver/DriverFactory\";\nimport { ConnectionMetadataBuilder } from \"../connection/ConnectionMetadataBuilder\";\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\";\nimport { LoggerFactory } from \"../logger/LoggerFactory\";\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\";\nimport { RelationLoader } from \"../query-builder/RelationLoader\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nregisterQueryBuilders();\n/**\n * DataSource is a pre-defined connection configuration to a specific database.\n * You can have multiple data sources connected (with multiple connections in it),\n * connected to multiple databases in your application.\n *\n * Before, it was called `Connection`, but now `Connection` is deprecated\n * because `Connection` isn't the best name for what it's actually is.\n */\nexport class DataSource {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"DataSource\");\n        /**\n         * Migration instances that are registered for this connection.\n         */\n        this.migrations = [];\n        /**\n         * Entity subscriber instances that are registered for this connection.\n         */\n        this.subscribers = [];\n        /**\n         * All entity metadatas that are registered for this connection.\n         */\n        this.entityMetadatas = [];\n        /**\n         * All entity metadatas that are registered for this connection.\n         * This is a copy of #.entityMetadatas property -> used for more performant searches.\n         */\n        this.entityMetadatasMap = new Map();\n        registerQueryBuilders();\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\n        this.driver = new DriverFactory().create(this);\n        this.manager = this.createEntityManager();\n        this.namingStrategy =\n            options.namingStrategy || new DefaultNamingStrategy();\n        this.metadataTableName = options.metadataTableName || \"typeorm_metadata\";\n        this.queryResultCache = options.cache\n            ? new QueryResultCacheFactory(this).create()\n            : undefined;\n        this.relationLoader = new RelationLoader(this);\n        this.relationIdLoader = new RelationIdLoader(this);\n        this.isInitialized = false;\n    }\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n    /**\n     Indicates if DataSource is initialized or not.\n     *\n     * @deprecated use .isInitialized instead\n     */\n    get isConnected() {\n        return this.isInitialized;\n    }\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager() {\n        if (!InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`MongoEntityManager is only available for MongoDB databases.`);\n        return this.manager;\n    }\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager() {\n        if (!InstanceChecker.isSqljsEntityManager(this.manager))\n            throw new TypeORMError(`SqljsEntityManager is only available for Sqljs databases.`);\n        return this.manager;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates current connection options with provided options.\n     */\n    setOptions(options) {\n        Object.assign(this.options, options);\n        if (options.logger || options.logging) {\n            this.logger = new LoggerFactory().create(options.logger || this.options.logger, options.logging || this.options.logging);\n        }\n        if (options.namingStrategy) {\n            this.namingStrategy = options.namingStrategy;\n        }\n        if (options.cache) {\n            this.queryResultCache = new QueryResultCacheFactory(this).create();\n        }\n        // todo: we must update the database in the driver as well, if it was set by setOptions method\n        //  in the future we need to refactor the code and remove \"database\" from the driver, and instead\n        //  use database (and options) from a single place - data source.\n        if (options.database) {\n            this.driver.database = DriverUtils.buildDriverOptions(this.options).database;\n        }\n        // todo: need to take a look if we need to update schema and other \"poor\" properties\n        return this;\n    }\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async initialize() {\n        if (this.isInitialized)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n        // connect to the database via its driver\n        await this.driver.connect();\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.connect();\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isInitialized: true });\n        try {\n            // build all metadatas registered in the current connection\n            await this.buildMetadatas();\n            await this.driver.afterConnect();\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema)\n                await this.dropDatabase();\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({\n                    transaction: this.options.migrationsTransactionMode,\n                });\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize)\n                await this.synchronize();\n        }\n        catch (error) {\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.destroy();\n            throw error;\n        }\n        return this;\n    }\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     *\n     * @deprecated use .initialize method instead\n     */\n    async connect() {\n        return this.initialize();\n    }\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async destroy() {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name);\n        await this.driver.disconnect();\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.disconnect();\n        ObjectUtils.assign(this, { isInitialized: false });\n    }\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     *\n     * @deprecated use .destroy method instead\n     */\n    async close() {\n        return this.destroy();\n    }\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync = false) {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name);\n        if (dropBeforeSync)\n            await this.dropDatabase();\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        await schemaBuilder.build();\n    }\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase() {\n        const queryRunner = this.createQueryRunner();\n        try {\n            if (this.driver.options.type === \"mssql\" ||\n                DriverUtils.isMySQLFamily(this.driver) ||\n                this.driver.options.type === \"aurora-mysql\" ||\n                DriverUtils.isSQLiteFamily(this.driver)) {\n                const databases = [];\n                this.entityMetadatas.forEach((metadata) => {\n                    if (metadata.database &&\n                        databases.indexOf(metadata.database) === -1)\n                        databases.push(metadata.database);\n                });\n                if (databases.length === 0 && this.driver.database) {\n                    databases.push(this.driver.database);\n                }\n                if (databases.length === 0) {\n                    await queryRunner.clearDatabase();\n                }\n                else {\n                    for (const database of databases) {\n                        await queryRunner.clearDatabase(database);\n                    }\n                }\n            }\n            else {\n                await queryRunner.clearDatabase();\n            }\n        }\n        finally {\n            await queryRunner.release();\n        }\n    }\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options) {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name);\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction =\n            options?.transaction ||\n                this.options?.migrationsTransactionMode ||\n                \"all\";\n        migrationExecutor.fake = (options && options.fake) || false;\n        const successMigrations = await migrationExecutor.executePendingMigrations();\n        return successMigrations;\n    }\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options) {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name);\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\";\n        migrationExecutor.fake = (options && options.fake) || false;\n        await migrationExecutor.undoLastMigration();\n    }\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations() {\n        if (!this.isInitialized) {\n            throw new CannotExecuteNotConnectedError(this.name);\n        }\n        const migrationExecutor = new MigrationExecutor(this);\n        return await migrationExecutor.showMigrations();\n    }\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target) {\n        return !!this.findMetadata(target);\n    }\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target) {\n        const metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFoundError(target);\n        return metadata;\n    }\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository(target) {\n        return this.manager.getRepository(target);\n    }\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository(target) {\n        return this.manager.getTreeRepository(target);\n    }\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository(target) {\n        if (!(this.driver.options.type === \"mongodb\"))\n            throw new TypeORMError(`You can use getMongoRepository only for MongoDB connections.`);\n        return this.manager.getRepository(target);\n    }\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend function to create a custom repository\n     */\n    getCustomRepository(customRepository) {\n        return this.manager.getCustomRepository(customRepository);\n    }\n    async transaction(isolationOrRunInTransaction, runInTransactionParam) {\n        return this.manager.transaction(isolationOrRunInTransaction, runInTransactionParam);\n    }\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query, parameters, queryRunner) {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`);\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n        try {\n            return await usedQueryRunner.query(query, parameters); // await is needed here because we are using finally\n        }\n        finally {\n            if (!queryRunner)\n                await usedQueryRunner.release();\n        }\n    }\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(entityOrRunner, alias, queryRunner) {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Query Builder is not supported by MongoDB.`);\n        if (alias) {\n            alias = DriverUtils.buildAlias(this.driver, undefined, alias);\n            const metadata = this.getMetadata(entityOrRunner);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n        }\n        else {\n            return new SelectQueryBuilder(this, entityOrRunner);\n        }\n    }\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode = \"master\") {\n        const queryRunner = this.driver.createQueryRunner(mode);\n        const manager = this.createEntityManager(queryRunner);\n        Object.assign(queryRunner, { manager: manager });\n        return queryRunner;\n    }\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(entityTarget, relationPropertyPath) {\n        const relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\n        if (!relationMetadata)\n            throw new TypeORMError(`Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`);\n        if (!relationMetadata.isManyToMany)\n            throw new TypeORMError(`Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                `You can use this method only on many-to-many relations.`);\n        return relationMetadata.junctionEntityMetadata;\n    }\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner) {\n        return new EntityManagerFactory().create(this, queryRunner);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    findMetadata(target) {\n        const metadataFromMap = this.entityMetadatasMap.get(target);\n        if (metadataFromMap)\n            return metadataFromMap;\n        for (let [_, metadata] of this.entityMetadatasMap) {\n            if (InstanceChecker.isEntitySchema(target) &&\n                metadata.name === target.options.name) {\n                return metadata;\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target) {\n                        return metadata;\n                    }\n                }\n                else {\n                    if (metadata.name === target ||\n                        metadata.tableName === target) {\n                        return metadata;\n                    }\n                }\n            }\n            if (ObjectUtils.isObjectWithName(target) &&\n                typeof target.name === \"string\") {\n                if (target.name.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target.name) {\n                        return metadata;\n                    }\n                }\n                else {\n                    if (metadata.name === target.name ||\n                        metadata.tableName === target.name) {\n                        return metadata;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    async buildMetadatas() {\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        const entityMetadataValidator = new EntityMetadataValidator();\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const flattenedSubscribers = ObjectUtils.mixedListToArray(this.options.subscribers || []);\n        const subscribers = await connectionMetadataBuilder.buildSubscribers(flattenedSubscribers);\n        ObjectUtils.assign(this, { subscribers: subscribers });\n        // build entity metadatas\n        const flattenedEntities = ObjectUtils.mixedListToArray(this.options.entities || []);\n        const entityMetadatas = await connectionMetadataBuilder.buildEntityMetadatas(flattenedEntities);\n        ObjectUtils.assign(this, {\n            entityMetadatas: entityMetadatas,\n            entityMetadatasMap: new Map(entityMetadatas.map((metadata) => [metadata.target, metadata])),\n        });\n        // create migration instances\n        const flattenedMigrations = ObjectUtils.mixedListToArray(this.options.migrations || []);\n        const migrations = await connectionMetadataBuilder.buildMigrations(flattenedMigrations);\n        ObjectUtils.assign(this, { migrations: migrations });\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas.filter((metadata) => metadata.tableType !== \"view\"), this.driver);\n        // set current data source to the entities\n        for (let entityMetadata of entityMetadatas) {\n            if (InstanceChecker.isBaseEntityConstructor(entityMetadata.target)) {\n                entityMetadata.target.useDataSource(this);\n            }\n        }\n    }\n    /**\n     * Get the replication mode SELECT queries should use for this datasource by default\n     */\n    defaultReplicationModeForReads() {\n        if (\"replication\" in this.driver.options) {\n            const value = this.driver.options.replication.defaultMode;\n            if (value) {\n                return value;\n            }\n        }\n        return \"slave\";\n    }\n}\n\n//# sourceMappingURL=DataSource.js.map\n","import { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\";\nimport { PlatformTools } from \"./platform/PlatformTools\";\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\";\nimport { ConnectionManager } from \"./connection/ConnectionManager\";\nimport { getFromContainer } from \"./container\";\nimport { ObjectUtils } from \"./util/ObjectUtils\";\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage() {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n    return globalScope.typeormMetadataArgsStorage;\n}\n/**\n * Reads connection options stored in ormconfig configuration file.\n *\n * @deprecated\n */\nexport async function getConnectionOptions(connectionName = \"default\") {\n    return new ConnectionOptionsReader().get(connectionName);\n}\n/**\n * Gets a ConnectionManager which creates connections.\n *\n * @deprecated\n */\nexport function getConnectionManager() {\n    return getFromContainer(ConnectionManager);\n}\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n *\n * @deprecated\n */\nexport async function createConnection(optionsOrName) {\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n    const options = ObjectUtils.isObject(optionsOrName)\n        ? optionsOrName\n        : await getConnectionOptions(connectionName);\n    return getConnectionManager().create(options).connect();\n}\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * All connections from the ormconfig will be created.\n *\n * @deprecated\n */\nexport async function createConnections(options) {\n    if (!options)\n        options = await new ConnectionOptionsReader().all();\n    const connections = options.map((options) => getConnectionManager().create(options));\n    // Do not use Promise.all or test 8522 will produce a dangling sqlite connection\n    for (const connection of connections) {\n        await connection.connect();\n    }\n    return connections;\n}\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getConnection(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName);\n}\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getManager(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getMongoManager(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName)\n        .manager;\n}\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n *\n * @deprecated\n */\nexport function getSqljsManager(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName)\n        .manager;\n}\n/**\n * Gets repository for the given entity class.\n *\n * @deprecated\n */\nexport function getRepository(entityClass, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getTreeRepository(entityClass, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getTreeRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getCustomRepository(customRepository, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getCustomRepository(customRepository);\n}\n/**\n * Gets mongodb repository for the given entity class or name.\n *\n * @deprecated\n */\nexport function getMongoRepository(entityClass, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getMongoRepository(entityClass);\n}\n/**\n * Creates a new query builder.\n *\n * @deprecated\n */\nexport function createQueryBuilder(entityClass, alias, connectionName = \"default\") {\n    if (entityClass) {\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n    }\n    return getConnection(connectionName).createQueryBuilder();\n}\n\n//# sourceMappingURL=globals.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\nimport { ColumnTypeUndefinedError } from \"../../error/ColumnTypeUndefinedError\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions, options) {\n    return function (object, propertyName) {\n        // normalize parameters\n        let type;\n        if (typeof typeOrOptions === \"string\" ||\n            typeof typeOrOptions === \"function\") {\n            type = typeOrOptions;\n        }\n        else if (typeOrOptions) {\n            options = typeOrOptions;\n            type = typeOrOptions.type;\n        }\n        if (!options)\n            options = {};\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType = Reflect && Reflect.getMetadata\n            ? Reflect.getMetadata(\"design:type\", object, propertyName)\n            : undefined;\n        if (!type && reflectMetadataType)\n            // if type is not given explicitly then try to guess it\n            type = reflectMetadataType;\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options.type = type;\n        // specify HSTORE type if column is HSTORE\n        if (options.type === \"hstore\" && !options.hstoreType)\n            options.hstoreType =\n                reflectMetadataType === Object ? \"object\" : \"string\";\n        if (typeof typeOrOptions === \"function\") {\n            // register an embedded\n            getMetadataArgsStorage().embeddeds.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                isArray: reflectMetadataType === Array || options.array === true,\n                prefix: options.prefix !== undefined ? options.prefix : undefined,\n                type: typeOrOptions,\n            });\n        }\n        else {\n            // register a regular column\n            // if we still don't have a type then we need to give error to user that type is required\n            if (!options.type)\n                throw new ColumnTypeUndefinedError(object, propertyName);\n            // create unique\n            if (options.unique === true)\n                getMetadataArgsStorage().uniques.push({\n                    target: object.constructor,\n                    columns: [propertyName],\n                });\n            getMetadataArgsStorage().columns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                mode: \"regular\",\n                options: options,\n            });\n            if (options.generated) {\n                getMetadataArgsStorage().generations.push({\n                    target: object.constructor,\n                    propertyName: propertyName,\n                    strategy: typeof options.generated === \"string\"\n                        ? options.generated\n                        : \"increment\",\n                });\n            }\n        }\n    };\n}\n\n//# sourceMappingURL=Column.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * This column will store a creation date of the inserted object.\n * Creation date is generated and inserted only once,\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\n */\nexport function CreateDateColumn(options) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"createDate\",\n            options: options || {},\n        });\n    };\n}\n\n//# sourceMappingURL=CreateDateColumn.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {\n    // normalize parameters\n    const options = {};\n    let strategy;\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions;\n        if (ObjectUtils.isObject(strategyOrOptions)) {\n            strategy = \"increment\";\n            Object.assign(options, strategyOrOptions);\n        }\n    }\n    else {\n        strategy = \"increment\";\n    }\n    if (ObjectUtils.isObject(maybeOptions))\n        Object.assign(options, maybeOptions);\n    return function (object, propertyName) {\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\" || strategy === \"identity\") {\n                options.type = Number;\n            }\n            else if (strategy === \"uuid\") {\n                options.type = \"uuid\";\n            }\n            else if (strategy === \"rowid\") {\n                options.type = \"int\";\n            }\n        }\n        // explicitly set a primary and generated to column options\n        options.primary = true;\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options,\n        });\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy,\n        });\n    };\n}\n\n//# sourceMappingURL=PrimaryGeneratedColumn.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * This column will store an update date of the updated object.\n * This date is being updated each time you persist the object.\n */\nexport function UpdateDateColumn(options) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"updateDate\",\n            options: options ? options : {},\n        });\n    };\n}\n\n//# sourceMappingURL=UpdateDateColumn.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(optionsOrOptionsArray) {\n    return function (object, propertyName) {\n        const options = Array.isArray(optionsOrOptionsArray)\n            ? optionsOrOptionsArray\n            : [optionsOrOptionsArray || {}];\n        options.forEach((options) => {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName,\n                foreignKeyConstraintName: options.foreignKeyConstraintName,\n            });\n        });\n    };\n}\n\n//# sourceMappingURL=JoinColumn.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\nexport function ManyToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {\n    // Normalize parameters.\n    let inverseSideProperty;\n    if (ObjectUtils.isObject(inverseSideOrOptions)) {\n        options = inverseSideOrOptions;\n    }\n    else {\n        inverseSideProperty = inverseSideOrOptions;\n    }\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // Now try to determine if it is a lazy relation.\n        let isLazy = options && options.lazy === true;\n        if (!isLazy && Reflect && Reflect.getMetadata) {\n            // automatic determination\n            const reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-one\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options,\n        });\n    };\n}\n\n//# sourceMappingURL=ManyToOne.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,\n * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its\n * side of the relation.\n */\nexport function OneToMany(typeFunctionOrTarget, inverseSide, options) {\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // Now try to determine if it is a lazy relation.\n        let isLazy = options && options.lazy === true;\n        if (!isLazy && Reflect && Reflect.getMetadata) {\n            // automatic determination\n            const reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSide,\n            options: options,\n        });\n    };\n}\n\n//# sourceMappingURL=OneToMany.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {\n    // normalize parameters\n    let inverseSideProperty;\n    if (ObjectUtils.isObject(inverseSideOrOptions)) {\n        options = inverseSideOrOptions;\n    }\n    else {\n        inverseSideProperty = inverseSideOrOptions;\n    }\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && Reflect.getMetadata) {\n            // automatic determination\n            const reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-one\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options,\n        });\n    };\n}\n\n//# sourceMappingURL=OneToOne.js.map\n","import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions, maybeOptions) {\n    const options = (ObjectUtils.isObject(nameOrOptions)\n        ? nameOrOptions\n        : maybeOptions) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize,\n            withoutRowid: options.withoutRowid,\n            comment: options.comment ? options.comment : undefined,\n        });\n    };\n}\n\n//# sourceMappingURL=Entity.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Any([...]) }\n */\nexport function Any(value) {\n    return new FindOperator(\"any\", value);\n}\n\n//# sourceMappingURL=Any.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * FindOptions Operator.\n * Example: { someField: ArrayContainedBy([...]) }\n */\nexport function ArrayContainedBy(value) {\n    return new FindOperator(\"arrayContainedBy\", value);\n}\n\n//# sourceMappingURL=ArrayContainedBy.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * FindOptions Operator.\n * Example: { someField: ArrayContains([...]) }\n */\nexport function ArrayContains(value) {\n    return new FindOperator(\"arrayContains\", value);\n}\n\n//# sourceMappingURL=ArrayContains.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * FindOptions Operator.\n * Example: { someField: ArrayOverlap([...]) }\n */\nexport function ArrayOverlap(value) {\n    return new FindOperator(\"arrayOverlap\", value);\n}\n\n//# sourceMappingURL=ArrayOverlap.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Between(x, y) }\n */\nexport function Between(from, to) {\n    return new FindOperator(\"between\", [from, to], true, true);\n}\n\n//# sourceMappingURL=Between.js.map\n","import { FindOperator } from \"./FindOperator\";\nexport class EqualOperator extends FindOperator {\n    constructor(value) {\n        super(\"equal\", value);\n        this[\"@instanceof\"] = Symbol.for(\"EqualOperator\");\n    }\n}\n\n//# sourceMappingURL=EqualOperator.js.map\n","import { EqualOperator } from \"../EqualOperator\";\n/**\n * Find Options Operator.\n * This operator is handy to provide object value for non-relational properties of the Entity.\n *\n * Examples:\n *      { someField: Equal(\"value\") }\n *      { uuid: Equal(new UUID()) }\n */\nexport function Equal(value) {\n    return new EqualOperator(value);\n}\n\n//# sourceMappingURL=Equal.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: IsNull() }\n */\nexport function IsNull() {\n    return new FindOperator(\"isNull\", undefined, false);\n}\n\n//# sourceMappingURL=IsNull.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: LessThan(10) }\n */\nexport function LessThan(value) {\n    return new FindOperator(\"lessThan\", value);\n}\n\n//# sourceMappingURL=LessThan.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: LessThanOrEqual(10) }\n */\nexport function LessThanOrEqual(value) {\n    return new FindOperator(\"lessThanOrEqual\", value);\n}\n\n//# sourceMappingURL=LessThanOrEqual.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Like(\"%some string%\") }\n */\nexport function Like(value) {\n    return new FindOperator(\"like\", value);\n}\n\n//# sourceMappingURL=Like.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: MoreThan(10) }\n */\nexport function MoreThan(value) {\n    return new FindOperator(\"moreThan\", value);\n}\n\n//# sourceMappingURL=MoreThan.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: MoreThanOrEqual(10) }\n */\nexport function MoreThanOrEqual(value) {\n    return new FindOperator(\"moreThanOrEqual\", value);\n}\n\n//# sourceMappingURL=MoreThanOrEqual.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Used to negate expression.\n * Example: { title: not(\"hello\") } will return entities where title not equal to \"hello\".\n */\nexport function Not(value) {\n    return new FindOperator(\"not\", value);\n}\n\n//# sourceMappingURL=Not.js.map\n","import { FindOperator } from \"../FindOperator\";\nexport function Raw(valueOrSqlGenerator, sqlGeneratorParameters) {\n    if (typeof valueOrSqlGenerator !== \"function\") {\n        return new FindOperator(\"raw\", valueOrSqlGenerator, false);\n    }\n    return new FindOperator(\"raw\", [], true, true, valueOrSqlGenerator, sqlGeneratorParameters);\n}\n\n//# sourceMappingURL=Raw.js.map\n","var p=Object.create;var i=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,s=Object.prototype.hasOwnProperty;var a=t=>{throw TypeError(t)};var _=(t,e)=>()=>(t&&(e=t(t=0)),e);var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),D=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},d=(t,e,o,m)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of f(e))!s.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(m=c(e,r))||m.enumerable});return t};var F=(t,e,o)=>(o=t!=null?p(l(t)):{},d(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t));var n=(t,e,o)=>e.has(t)||a(\"Cannot \"+o);var g=(t,e,o)=>(n(t,e,\"read from private field\"),o?o.call(t):e.get(t)),L=(t,e,o)=>e.has(t)?a(\"Cannot add the same private member more than once\"):e instanceof WeakSet?e.add(t):e.set(t,o),h=(t,e,o,m)=>(n(t,e,\"write to private field\"),m?m.call(t,o):e.set(t,o),o),P=(t,e,o)=>(n(t,e,\"access private method\"),o);var R=(t,e,o,m)=>({set _(r){h(t,e,r,o)},get _(){return g(t,e,m)}});var x=_(()=>{\"use strict\"});export{u as a,D as b,F as c,g as d,L as e,h as f,P as g,R as h,x as i};\n//# sourceMappingURL=chunk-MPW3RCU6.js.map","import{i as e}from\"../chunk-MPW3RCU6.js\";e();var t=async(s,n)=>({bundlePath:new URL(\"../uuid-ossp.tar.gz\",import.meta.url)}),o={name:\"uuid-ossp\",setup:t};export{o as uuid_ossp};\n//# sourceMappingURL=uuid_ossp.js.map","// PRODUCTION DEBUG: open console and run `localStorage.setItem('__DEBUG__', 'true')`\nexport const isDev = (() => {\n  if (typeof import.meta.env !== 'undefined' && import.meta.env.DEV) {\n    return true\n  }\n  if (typeof window !== 'undefined' && typeof window.localStorage !== 'undefined') {\n    return window.localStorage.getItem('__DEBUG__') === 'true'\n  }\n  return false\n})()\n\nexport const DATABASE_LOG_CONFIG = isDev\n  ? {\n      logging: ['query', 'error', 'warn', 'error', 'migration', 'info'] as const,\n      logger: 'advanced-console' as const,\n    }\n  : {\n      logging: ['error', 'migration'] as const,\n      logger: 'debug' as const,\n    }\n","const ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi16 = (offset = 0) => code => `\\u001B[${code + offset}m`;\n\nconst wrapAnsi256 = (offset = 0) => code => `\\u001B[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m = (offset = 0) => (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n\nconst styles = {\n\tmodifier: {\n\t\treset: [0, 0],\n\t\t// 21 isn't widely supported and 22 does the same thing\n\t\tbold: [1, 22],\n\t\tdim: [2, 22],\n\t\titalic: [3, 23],\n\t\tunderline: [4, 24],\n\t\toverline: [53, 55],\n\t\tinverse: [7, 27],\n\t\thidden: [8, 28],\n\t\tstrikethrough: [9, 29],\n\t},\n\tcolor: {\n\t\tblack: [30, 39],\n\t\tred: [31, 39],\n\t\tgreen: [32, 39],\n\t\tyellow: [33, 39],\n\t\tblue: [34, 39],\n\t\tmagenta: [35, 39],\n\t\tcyan: [36, 39],\n\t\twhite: [37, 39],\n\n\t\t// Bright color\n\t\tblackBright: [90, 39],\n\t\tgray: [90, 39], // Alias of `blackBright`\n\t\tgrey: [90, 39], // Alias of `blackBright`\n\t\tredBright: [91, 39],\n\t\tgreenBright: [92, 39],\n\t\tyellowBright: [93, 39],\n\t\tblueBright: [94, 39],\n\t\tmagentaBright: [95, 39],\n\t\tcyanBright: [96, 39],\n\t\twhiteBright: [97, 39],\n\t},\n\tbgColor: {\n\t\tbgBlack: [40, 49],\n\t\tbgRed: [41, 49],\n\t\tbgGreen: [42, 49],\n\t\tbgYellow: [43, 49],\n\t\tbgBlue: [44, 49],\n\t\tbgMagenta: [45, 49],\n\t\tbgCyan: [46, 49],\n\t\tbgWhite: [47, 49],\n\n\t\t// Bright color\n\t\tbgBlackBright: [100, 49],\n\t\tbgGray: [100, 49], // Alias of `bgBlackBright`\n\t\tbgGrey: [100, 49], // Alias of `bgBlackBright`\n\t\tbgRedBright: [101, 49],\n\t\tbgGreenBright: [102, 49],\n\t\tbgYellowBright: [103, 49],\n\t\tbgBlueBright: [104, 49],\n\t\tbgMagentaBright: [105, 49],\n\t\tbgCyanBright: [106, 49],\n\t\tbgWhiteBright: [107, 49],\n\t},\n};\n\nexport const modifierNames = Object.keys(styles.modifier);\nexport const foregroundColorNames = Object.keys(styles.color);\nexport const backgroundColorNames = Object.keys(styles.bgColor);\nexport const colorNames = [...foregroundColorNames, ...backgroundColorNames];\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`,\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false,\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false,\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = wrapAnsi16();\n\tstyles.color.ansi256 = wrapAnsi256();\n\tstyles.color.ansi16m = wrapAnsi16m();\n\tstyles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n\t// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\tObject.defineProperties(styles, {\n\t\trgbToAnsi256: {\n\t\t\tvalue(red, green, blue) {\n\t\t\t\t// We use the extended greyscale palette here, with the exception of\n\t\t\t\t// black and white. normal palette only has 4 greyscale shades.\n\t\t\t\tif (red === green && green === blue) {\n\t\t\t\t\tif (red < 8) {\n\t\t\t\t\t\treturn 16;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (red > 248) {\n\t\t\t\t\t\treturn 231;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Math.round(((red - 8) / 247) * 24) + 232;\n\t\t\t\t}\n\n\t\t\t\treturn 16\n\t\t\t\t\t+ (36 * Math.round(red / 255 * 5))\n\t\t\t\t\t+ (6 * Math.round(green / 255 * 5))\n\t\t\t\t\t+ Math.round(blue / 255 * 5);\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToRgb: {\n\t\t\tvalue(hex) {\n\t\t\t\tconst matches = /[a-f\\d]{6}|[a-f\\d]{3}/i.exec(hex.toString(16));\n\t\t\t\tif (!matches) {\n\t\t\t\t\treturn [0, 0, 0];\n\t\t\t\t}\n\n\t\t\t\tlet [colorString] = matches;\n\n\t\t\t\tif (colorString.length === 3) {\n\t\t\t\t\tcolorString = [...colorString].map(character => character + character).join('');\n\t\t\t\t}\n\n\t\t\t\tconst integer = Number.parseInt(colorString, 16);\n\n\t\t\t\treturn [\n\t\t\t\t\t/* eslint-disable no-bitwise */\n\t\t\t\t\t(integer >> 16) & 0xFF,\n\t\t\t\t\t(integer >> 8) & 0xFF,\n\t\t\t\t\tinteger & 0xFF,\n\t\t\t\t\t/* eslint-enable no-bitwise */\n\t\t\t\t];\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi256: {\n\t\t\tvalue: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t\tansi256ToAnsi: {\n\t\t\tvalue(code) {\n\t\t\t\tif (code < 8) {\n\t\t\t\t\treturn 30 + code;\n\t\t\t\t}\n\n\t\t\t\tif (code < 16) {\n\t\t\t\t\treturn 90 + (code - 8);\n\t\t\t\t}\n\n\t\t\t\tlet red;\n\t\t\t\tlet green;\n\t\t\t\tlet blue;\n\n\t\t\t\tif (code >= 232) {\n\t\t\t\t\tred = (((code - 232) * 10) + 8) / 255;\n\t\t\t\t\tgreen = red;\n\t\t\t\t\tblue = red;\n\t\t\t\t} else {\n\t\t\t\t\tcode -= 16;\n\n\t\t\t\t\tconst remainder = code % 36;\n\n\t\t\t\t\tred = Math.floor(code / 36) / 5;\n\t\t\t\t\tgreen = Math.floor(remainder / 6) / 5;\n\t\t\t\t\tblue = (remainder % 6) / 5;\n\t\t\t\t}\n\n\t\t\t\tconst value = Math.max(red, green, blue) * 2;\n\n\t\t\t\tif (value === 0) {\n\t\t\t\t\treturn 30;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tlet result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));\n\n\t\t\t\tif (value === 2) {\n\t\t\t\t\tresult += 60;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\trgbToAnsi: {\n\t\t\tvalue: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi: {\n\t\t\tvalue: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t});\n\n\treturn styles;\n}\n\nconst ansiStyles = assembleStyles();\n\nexport default ansiStyles;\n","/* eslint-env browser */\n\nconst level = (() => {\n\tif (navigator.userAgentData) {\n\t\tconst brand = navigator.userAgentData.brands.find(({brand}) => brand === 'Chromium');\n\t\tif (brand && brand.version > 93) {\n\t\t\treturn 3;\n\t\t}\n\t}\n\n\tif (/\\b(Chrome|Chromium)\\//.test(navigator.userAgent)) {\n\t\treturn 1;\n\t}\n\n\treturn 0;\n})();\n\nconst colorSupport = level !== 0 && {\n\tlevel,\n\thasBasic: true,\n\thas256: level >= 2,\n\thas16m: level >= 3,\n};\n\nconst supportsColor = {\n\tstdout: colorSupport,\n\tstderr: colorSupport,\n};\n\nexport default supportsColor;\n","// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.\nexport function stringReplaceAll(string, substring, replacer) {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.slice(endIndex, index) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n\nexport function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.slice(endIndex, (gotCR ? index - 1 : index)) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n","import ansiStyles from '#ansi-styles';\nimport supportsColor from '#supports-color';\nimport { // eslint-disable-line import/order\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex,\n} from './utilities.js';\n\nconst {stdout: stdoutColor, stderr: stderrColor} = supportsColor;\n\nconst GENERATOR = Symbol('GENERATOR');\nconst STYLER = Symbol('STYLER');\nconst IS_EMPTY = Symbol('IS_EMPTY');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m',\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nexport class Chalk {\n\tconstructor(options) {\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = (...strings) => strings.join(' ');\n\tapplyOptions(chalk, options);\n\n\tObject.setPrototypeOf(chalk, createChalk.prototype);\n\n\treturn chalk;\n};\n\nfunction createChalk(options) {\n\treturn chalkFactory(options);\n}\n\nObject.setPrototypeOf(createChalk.prototype, Function.prototype);\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t},\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this[STYLER], true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t},\n};\n\nconst getModelAnsi = (model, level, type, ...arguments_) => {\n\tif (model === 'rgb') {\n\t\tif (level === 'ansi16m') {\n\t\t\treturn ansiStyles[type].ansi16m(...arguments_);\n\t\t}\n\n\t\tif (level === 'ansi256') {\n\t\t\treturn ansiStyles[type].ansi256(ansiStyles.rgbToAnsi256(...arguments_));\n\t\t}\n\n\t\treturn ansiStyles[type].ansi(ansiStyles.rgbToAnsi(...arguments_));\n\t}\n\n\tif (model === 'hex') {\n\t\treturn getModelAnsi('rgb', level, type, ...ansiStyles.hexToRgb(...arguments_));\n\t}\n\n\treturn ansiStyles[type][model](...arguments_);\n};\n\nconst usedModels = ['rgb', 'hex', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansiStyles.color.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansiStyles.bgColor.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this[GENERATOR].level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis[GENERATOR].level = level;\n\t\t},\n\t},\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent,\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\t// Single argument is hot path, implicit coercion is faster than anything\n\t// eslint-disable-next-line no-implicit-coercion\n\tconst builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\n\t// We alter the prototype because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tObject.setPrototypeOf(builder, proto);\n\n\tbuilder[GENERATOR] = self;\n\tbuilder[STYLER] = _styler;\n\tbuilder[IS_EMPTY] = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self[IS_EMPTY] ? '' : string;\n\t}\n\n\tlet styler = self[STYLER];\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.includes('\\u001B')) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nObject.defineProperties(createChalk.prototype, styles);\n\nconst chalk = createChalk();\nexport const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});\n\nexport {\n\tmodifierNames,\n\tforegroundColorNames,\n\tbackgroundColorNames,\n\tcolorNames,\n\n\t// TODO: Remove these aliases in the next major version\n\tmodifierNames as modifiers,\n\tforegroundColorNames as foregroundColors,\n\tbackgroundColorNames as backgroundColors,\n\tcolorNames as colors,\n} from './vendor/ansi-styles/index.js';\n\nexport {\n\tstdoutColor as supportsColor,\n\tstderrColor as supportsColorStderr,\n};\n\nexport default chalk;\n","import chalk from 'chalk'\nimport dayjs from 'dayjs'\nimport { isDev } from 'src/constants/dev'\n\nconst log = isDev ? console.log : undefined\nconst debug = isDev ? console.debug : undefined\nconst warn = console.warn\nconst error = console.error\n\nconst group = console.group\nconst groupEnd = console.groupEnd\n\nexport const logInfo = (key: string, ...args: unknown[]) => {\n  group(chalk.blueBright(`🔵 INFO: ${key} [${dayjs().format('DD-MM-YYYY HH:mm:ss')}]`))\n  log?.(...args)\n  groupEnd()\n}\n\nexport const logError = (key: string, ...args: unknown[]) => {\n  group(chalk.redBright(`🔴 ERROR: ${key} [${dayjs().format('DD-MM-YYYY HH:mm:ss')}]`))\n  error?.(...args)\n  groupEnd()\n}\n\nexport const logWarn = (key: string, ...args: unknown[]) => {\n  group(chalk.yellowBright(`🔶 WARN: ${key} [${dayjs().format('DD-MM-YYYY HH:mm:ss')}]`))\n  warn?.(...args)\n  groupEnd()\n}\n\nexport const logDebug = (key: string, ...args: unknown[]) => {\n  group(chalk.greenBright(`⚪ DEBUG: ${key} [${dayjs().format('DD-MM-YYYY HH:mm:ss')}]`))\n  debug?.(...args)\n  groupEnd()\n}\n\nexport const logSilent = (key: string, ...args: unknown[]) => {\n  group(chalk.whiteBright(`⚫ SILENT: ${key} [${dayjs().format('DD:MM HH:mm:ss')}]`))\n  log?.(...args)\n  groupEnd()\n}\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import{b as oe,d as s,e as h,f as d,g as p,h as ue,i as y}from\"./chunk-MPW3RCU6.js\";var gn={};oe(gn,{ABSTIME:()=>Pt,ACLITEM:()=>Gt,BIT:()=>_t,BOOL:()=>ge,BPCHAR:()=>ze,BYTEA:()=>we,CHAR:()=>At,CID:()=>xt,CIDR:()=>Ct,CIRCLE:()=>Lt,DATE:()=>qe,FLOAT4:()=>_e,FLOAT8:()=>je,GTSVECTOR:()=>an,INET:()=>Ft,INT2:()=>ve,INT4:()=>Qe,INT8:()=>Ae,INTERVAL:()=>Qt,JSON:()=>Se,JSONB:()=>Ye,MACADDR:()=>Vt,MACADDR8:()=>Ot,MONEY:()=>kt,NUMERIC:()=>zt,OID:()=>We,PATH:()=>Rt,PG_DEPENDENCIES:()=>nn,PG_LSN:()=>en,PG_NDISTINCT:()=>tn,PG_NODE_TREE:()=>Mt,POLYGON:()=>Et,REFCURSOR:()=>Ht,REGCLASS:()=>Kt,REGCONFIG:()=>on,REGDICTIONARY:()=>un,REGNAMESPACE:()=>ln,REGOPER:()=>$t,REGOPERATOR:()=>Yt,REGPROC:()=>St,REGPROCEDURE:()=>qt,REGROLE:()=>cn,REGTYPE:()=>Jt,RELTIME:()=>Ut,SMGR:()=>Tt,TEXT:()=>G,TID:()=>Dt,TIME:()=>vt,TIMESTAMP:()=>$e,TIMESTAMPTZ:()=>De,TIMETZ:()=>Wt,TINTERVAL:()=>Nt,TSQUERY:()=>sn,TSVECTOR:()=>rn,TXID_SNAPSHOT:()=>Zt,UUID:()=>Xt,VARBIT:()=>jt,VARCHAR:()=>He,XID:()=>Bt,XML:()=>It,arrayParser:()=>bn,arraySerializer:()=>Je,parseType:()=>le,parsers:()=>pn,serializers:()=>dn,types:()=>Ke});y();var gt=globalThis.JSON.parse,wt=globalThis.JSON.stringify,ge=16,we=17,At=18,Ae=20,ve=21,Qe=23,St=24,G=25,We=26,Dt=27,Bt=28,xt=29,Se=114,It=142,Mt=194,Tt=210,Rt=602,Et=604,Ct=650,_e=700,je=701,Pt=702,Ut=703,Nt=704,Lt=718,Ot=774,kt=790,Vt=829,Ft=869,Gt=1033,ze=1042,He=1043,qe=1082,vt=1083,$e=1114,De=1184,Qt=1186,Wt=1266,_t=1560,jt=1562,zt=1700,Ht=1790,qt=2202,$t=2203,Yt=2204,Kt=2205,Jt=2206,Xt=2950,Zt=2970,en=3220,tn=3361,nn=3402,rn=3614,sn=3615,an=3642,on=3734,un=3769,Ye=3802,ln=4089,cn=4096,Ke={string:{to:G,from:[G,He,ze],serialize:e=>{if(typeof e==\"string\")return e;if(typeof e==\"number\")return e.toString();throw new Error(\"Invalid input for string type\")},parse:e=>e},number:{to:0,from:[ve,Qe,We,_e,je],serialize:e=>e.toString(),parse:e=>+e},bigint:{to:Ae,from:[Ae],serialize:e=>e.toString(),parse:e=>{let t=BigInt(e);return t<Number.MIN_SAFE_INTEGER||t>Number.MAX_SAFE_INTEGER?t:Number(t)}},json:{to:Se,from:[Se,Ye],serialize:e=>typeof e==\"string\"?e:wt(e),parse:e=>gt(e)},boolean:{to:ge,from:[ge],serialize:e=>{if(typeof e!=\"boolean\")throw new Error(\"Invalid input for boolean type\");return e?\"t\":\"f\"},parse:e=>e===\"t\"},date:{to:De,from:[qe,$e,De],serialize:e=>{if(typeof e==\"string\")return e;if(typeof e==\"number\")return new Date(e).toISOString();if(e instanceof Date)return e.toISOString();throw new Error(\"Invalid input for date type\")},parse:e=>new Date(e)},bytea:{to:we,from:[we],serialize:e=>{if(!(e instanceof Uint8Array))throw new Error(\"Invalid input for bytea type\");return\"\\\\x\"+Array.from(e).map(t=>t.toString(16).padStart(2,\"0\")).join(\"\")},parse:e=>{let t=e.slice(2);return Uint8Array.from({length:t.length/2},(n,r)=>parseInt(t.substring(r*2,(r+1)*2),16))}}},Be=fn(Ke),pn=Be.parsers,dn=Be.serializers;function le(e,t,n){if(e===null)return null;let r=n?.[t]??Be.parsers[t];return r?r(e,t):e}function fn(e){return Object.keys(e).reduce(({parsers:t,serializers:n},r)=>{let{to:i,from:a,serialize:u,parse:f}=e[r];return n[i]=u,n[r]=u,t[r]=f,Array.isArray(a)?a.forEach(c=>{t[c]=f,n[c]=u}):(t[a]=f,n[a]=u),{parsers:t,serializers:n}},{parsers:{},serializers:{}})}var mn=/\\\\/g,yn=/\"/g;function hn(e){return e.replace(mn,\"\\\\\\\\\").replace(yn,'\\\\\"')}function Je(e,t,n){if(Array.isArray(e)===!1)return e;if(!e.length)return\"{}\";let r=e[0],i=n===1020?\";\":\",\";return Array.isArray(r)?`{${e.map(a=>Je(a,t,n)).join(i)}}`:`{${e.map(a=>(a===void 0&&(a=null),a===null?\"null\":'\"'+hn(t?t(a):a.toString())+'\"')).join(i)}}`}var be={i:0,char:null,str:\"\",quoted:!1,last:0,p:null};function bn(e,t,n){return be.i=be.last=0,Xe(be,e,t,n)[0]}function Xe(e,t,n,r){let i=[],a=r===1020?\";\":\",\";for(;e.i<t.length;e.i++){if(e.char=t[e.i],e.quoted)e.char===\"\\\\\"?e.str+=t[++e.i]:e.char==='\"'?(i.push(n?n(e.str):e.str),e.str=\"\",e.quoted=t[e.i+1]==='\"',e.last=e.i+2):e.str+=e.char;else if(e.char==='\"')e.quoted=!0;else if(e.char===\"{\")e.last=++e.i,i.push(Xe(e,t,n,r));else if(e.char===\"}\"){e.quoted=!1,e.last<e.i&&i.push(n?n(t.slice(e.last,e.i)):t.slice(e.last,e.i)),e.last=e.i+1;break}else e.char===a&&e.p!==\"}\"&&e.p!=='\"'&&(i.push(n?n(t.slice(e.last,e.i)):t.slice(e.last,e.i)),e.last=e.i+1);e.p=e.char}return e.last<e.i&&i.push(n?n(t.slice(e.last,e.i+1)):t.slice(e.last,e.i+1)),i}var Sn={};oe(Sn,{parseDescribeStatementResults:()=>xe,parseResults:()=>wn});y();function wn(e,t,n,r){let i=[],a={rows:[],fields:[]},u=0,f={...t,...n?.parsers},c=e.filter(x=>x.name===\"rowDescription\"||x.name===\"dataRow\"||x.name===\"commandComplete\");return c.forEach((x,bt)=>{if(x.name===\"rowDescription\"){let F=x;a.fields=F.fields.map(E=>({name:E.name,dataTypeID:E.dataTypeID}))}else if(x.name===\"dataRow\"&&a){let F=x;n?.rowMode===\"array\"?a.rows.push(F.fields.map((E,ae)=>le(E,a.fields[ae].dataTypeID,f))):a.rows.push(Object.fromEntries(F.fields.map((E,ae)=>[a.fields[ae].name,le(E,a.fields[ae].dataTypeID,f)])))}else x.name===\"commandComplete\"&&(u+=An(x),bt===c.length-1?i.push({...a,affectedRows:u,...r?{blob:r}:{}}):i.push(a),a={rows:[],fields:[]})}),i.length===0&&i.push({rows:[],fields:[]}),i}function An(e){let t=e.text.split(\" \");switch(t[0]){case\"INSERT\":return parseInt(t[2],10);case\"UPDATE\":case\"DELETE\":return parseInt(t[1],10);default:return 0}}function xe(e){let t=e.find(n=>n.name===\"parameterDescription\");return t?t.dataTypeIDs:[]}var Ne={};oe(Ne,{AuthenticationCleartextPassword:()=>Q,AuthenticationMD5Password:()=>W,AuthenticationOk:()=>v,AuthenticationSASL:()=>_,AuthenticationSASLContinue:()=>j,AuthenticationSASLFinal:()=>z,BackendKeyDataMessage:()=>X,CommandCompleteMessage:()=>te,CopyDataMessage:()=>H,CopyResponse:()=>q,DataRowMessage:()=>ne,DatabaseError:()=>C,Field:()=>$,NoticeMessage:()=>re,NotificationResponseMessage:()=>Z,ParameterDescriptionMessage:()=>K,ParameterStatusMessage:()=>J,ReadyForQueryMessage:()=>ee,RowDescriptionMessage:()=>Y,bindComplete:()=>Me,closeComplete:()=>Te,copyDone:()=>Ue,emptyQuery:()=>Pe,noData:()=>Re,parseComplete:()=>Ie,portalSuspended:()=>Ee,replicationStart:()=>Ce});y();var Ie={name:\"parseComplete\",length:5},Me={name:\"bindComplete\",length:5},Te={name:\"closeComplete\",length:5},Re={name:\"noData\",length:5},Ee={name:\"portalSuspended\",length:5},Ce={name:\"replicationStart\",length:4},Pe={name:\"emptyQuery\",length:4},Ue={name:\"copyDone\",length:4},v=class{constructor(t){this.length=t;this.name=\"authenticationOk\"}},Q=class{constructor(t){this.length=t;this.name=\"authenticationCleartextPassword\"}},W=class{constructor(t,n){this.length=t;this.salt=n;this.name=\"authenticationMD5Password\"}},_=class{constructor(t,n){this.length=t;this.mechanisms=n;this.name=\"authenticationSASL\"}},j=class{constructor(t,n){this.length=t;this.data=n;this.name=\"authenticationSASLContinue\"}},z=class{constructor(t,n){this.length=t;this.data=n;this.name=\"authenticationSASLFinal\"}},C=class extends Error{constructor(n,r,i){super(n);this.length=r;this.name=i}},H=class{constructor(t,n){this.length=t;this.chunk=n;this.name=\"copyData\"}},q=class{constructor(t,n,r,i){this.length=t;this.name=n;this.binary=r;this.columnTypes=new Array(i)}},$=class{constructor(t,n,r,i,a,u,f){this.name=t;this.tableID=n;this.columnID=r;this.dataTypeID=i;this.dataTypeSize=a;this.dataTypeModifier=u;this.format=f}},Y=class{constructor(t,n){this.length=t;this.fieldCount=n;this.name=\"rowDescription\";this.fields=new Array(this.fieldCount)}},K=class{constructor(t,n){this.length=t;this.parameterCount=n;this.name=\"parameterDescription\";this.dataTypeIDs=new Array(this.parameterCount)}},J=class{constructor(t,n,r){this.length=t;this.parameterName=n;this.parameterValue=r;this.name=\"parameterStatus\"}},X=class{constructor(t,n,r){this.length=t;this.processID=n;this.secretKey=r;this.name=\"backendKeyData\"}},Z=class{constructor(t,n,r,i){this.length=t;this.processId=n;this.channel=r;this.payload=i;this.name=\"notification\"}},ee=class{constructor(t,n){this.length=t;this.status=n;this.name=\"readyForQuery\"}},te=class{constructor(t,n){this.length=t;this.text=n;this.name=\"commandComplete\"}},ne=class{constructor(t,n){this.length=t;this.fields=n;this.name=\"dataRow\";this.fieldCount=n.length}},re=class{constructor(t,n){this.length=t;this.message=n;this.name=\"notice\"}};var qn={};oe(qn,{Parser:()=>he,messages:()=>Ne,serialize:()=>k});y();y();y();y();function P(e){let t=e.length;for(let n=e.length-1;n>=0;n--){let r=e.charCodeAt(n);r>127&&r<=2047?t++:r>2047&&r<=65535&&(t+=2),r>=56320&&r<=57343&&n--}return t}var b,g,N,pe,L,S,ce,U,Ze,R=class{constructor(t=256){this.size=t;h(this,S);h(this,b);h(this,g,5);h(this,N,!1);h(this,pe,new TextEncoder);h(this,L,0);d(this,b,p(this,S,ce).call(this,t))}addInt32(t){return p(this,S,U).call(this,4),s(this,b).setInt32(s(this,g),t,s(this,N)),d(this,g,s(this,g)+4),this}addInt16(t){return p(this,S,U).call(this,2),s(this,b).setInt16(s(this,g),t,s(this,N)),d(this,g,s(this,g)+2),this}addCString(t){return t&&this.addString(t),p(this,S,U).call(this,1),s(this,b).setUint8(s(this,g),0),ue(this,g)._++,this}addString(t=\"\"){let n=P(t);return p(this,S,U).call(this,n),s(this,pe).encodeInto(t,new Uint8Array(s(this,b).buffer,s(this,g))),d(this,g,s(this,g)+n),this}add(t){return p(this,S,U).call(this,t.byteLength),new Uint8Array(s(this,b).buffer).set(new Uint8Array(t),s(this,g)),d(this,g,s(this,g)+t.byteLength),this}flush(t){let n=p(this,S,Ze).call(this,t);return d(this,g,5),d(this,b,p(this,S,ce).call(this,this.size)),new Uint8Array(n)}};b=new WeakMap,g=new WeakMap,N=new WeakMap,pe=new WeakMap,L=new WeakMap,S=new WeakSet,ce=function(t){return new DataView(new ArrayBuffer(t))},U=function(t){if(s(this,b).byteLength-s(this,g)<t){let r=s(this,b).buffer,i=r.byteLength+(r.byteLength>>1)+t;d(this,b,p(this,S,ce).call(this,i)),new Uint8Array(s(this,b).buffer).set(new Uint8Array(r))}},Ze=function(t){if(t){s(this,b).setUint8(s(this,L),t);let n=s(this,g)-(s(this,L)+1);s(this,b).setInt32(s(this,L)+1,n,s(this,N))}return s(this,b).buffer.slice(t?0:5,s(this,g))};var m=new R,Dn=e=>{m.addInt16(3).addInt16(0);for(let r of Object.keys(e))m.addCString(r).addCString(e[r]);m.addCString(\"client_encoding\").addCString(\"UTF8\");let t=m.addCString(\"\").flush(),n=t.byteLength+4;return new R().addInt32(n).add(t).flush()},Bn=()=>{let e=new DataView(new ArrayBuffer(8));return e.setInt32(0,8,!1),e.setInt32(4,80877103,!1),new Uint8Array(e.buffer)},xn=e=>m.addCString(e).flush(112),In=(e,t)=>(m.addCString(e).addInt32(P(t)).addString(t),m.flush(112)),Mn=e=>m.addString(e).flush(112),Tn=e=>m.addCString(e).flush(81),Rn=[],En=e=>{let t=e.name??\"\";t.length>63&&(console.error(\"Warning! Postgres only supports 63 characters for query names.\"),console.error(\"You supplied %s (%s)\",t,t.length),console.error(\"This can cause conflicts and silent errors executing queries\"));let n=m.addCString(t).addCString(e.text).addInt16(e.types?.length??0);return e.types?.forEach(r=>n.addInt32(r)),m.flush(80)},O=new R;var Cn=(e,t)=>{for(let n=0;n<e.length;n++){let r=t?t(e[n],n):e[n];if(r===null)m.addInt16(0),O.addInt32(-1);else if(r instanceof ArrayBuffer||ArrayBuffer.isView(r)){let i=ArrayBuffer.isView(r)?r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength):r;m.addInt16(1),O.addInt32(i.byteLength),O.add(i)}else m.addInt16(0),O.addInt32(P(r)),O.addString(r)}},Pn=(e={})=>{let t=e.portal??\"\",n=e.statement??\"\",r=e.binary??!1,i=e.values??Rn,a=i.length;return m.addCString(t).addCString(n),m.addInt16(a),Cn(i,e.valueMapper),m.addInt16(a),m.add(O.flush()),m.addInt16(r?1:0),m.flush(66)},Un=new Uint8Array([69,0,0,0,9,0,0,0,0,0]),Nn=e=>{if(!e||!e.portal&&!e.rows)return Un;let t=e.portal??\"\",n=e.rows??0,r=P(t),i=4+r+1+4,a=new DataView(new ArrayBuffer(1+i));return a.setUint8(0,69),a.setInt32(1,i,!1),new TextEncoder().encodeInto(t,new Uint8Array(a.buffer,5)),a.setUint8(r+5,0),a.setUint32(a.byteLength-4,n,!1),new Uint8Array(a.buffer)},Ln=(e,t)=>{let n=new DataView(new ArrayBuffer(16));return n.setInt32(0,16,!1),n.setInt16(4,1234,!1),n.setInt16(6,5678,!1),n.setInt32(8,e,!1),n.setInt32(12,t,!1),new Uint8Array(n.buffer)},Le=(e,t)=>{let n=new R;return n.addCString(t),n.flush(e)},On=m.addCString(\"P\").flush(68),kn=m.addCString(\"S\").flush(68),Vn=e=>e.name?Le(68,`${e.type}${e.name??\"\"}`):e.type===\"P\"?On:kn,Fn=e=>{let t=`${e.type}${e.name??\"\"}`;return Le(67,t)},Gn=e=>m.add(e).flush(100),vn=e=>Le(102,e),de=e=>new Uint8Array([e,0,0,0,4]),Qn=de(72),Wn=de(83),_n=de(88),jn=de(99),k={startup:Dn,password:xn,requestSsl:Bn,sendSASLInitialResponseMessage:In,sendSCRAMClientFinalMessage:Mn,query:Tn,parse:En,bind:Pn,execute:Nn,describe:Vn,close:Fn,flush:()=>Qn,sync:()=>Wn,end:()=>_n,copyData:Gn,copyDone:()=>jn,copyFail:vn,cancel:Ln};y();y();var Oe={text:0,binary:1};y();var zn=new ArrayBuffer(0),T,w,me,ye,se,fe=class{constructor(t=0){h(this,T,new DataView(zn));h(this,w);h(this,me,\"utf-8\");h(this,ye,new TextDecoder(s(this,me)));h(this,se,!1);d(this,w,t)}setBuffer(t,n){d(this,w,t),d(this,T,new DataView(n))}int16(){let t=s(this,T).getInt16(s(this,w),s(this,se));return d(this,w,s(this,w)+2),t}byte(){let t=s(this,T).getUint8(s(this,w));return ue(this,w)._++,t}int32(){let t=s(this,T).getInt32(s(this,w),s(this,se));return d(this,w,s(this,w)+4),t}string(t){return s(this,ye).decode(this.bytes(t))}cstring(){let t=s(this,w),n=t;for(;s(this,T).getUint8(n++)!==0;);let r=this.string(n-t-1);return d(this,w,n),r}bytes(t){let n=s(this,T).buffer.slice(s(this,w),s(this,w)+t);return d(this,w,s(this,w)+t),new Uint8Array(n)}};T=new WeakMap,w=new WeakMap,me=new WeakMap,ye=new WeakMap,se=new WeakMap;var ke=1,Hn=4,et=ke+Hn,tt=new ArrayBuffer(0);var A,D,B,o,l,nt,rt,st,it,at,ot,ut,Ve,lt,ct,pt,dt,ft,mt,yt,ht,Fe,he=class{constructor(){h(this,l);h(this,A,new DataView(tt));h(this,D,0);h(this,B,0);h(this,o,new fe)}parse(t,n){p(this,l,nt).call(this,ArrayBuffer.isView(t)?t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength):t);let r=s(this,B)+s(this,D),i=s(this,B);for(;i+et<=r;){let a=s(this,A).getUint8(i),u=s(this,A).getUint32(i+ke,!1),f=ke+u;if(f+i<=r){let c=p(this,l,rt).call(this,i+et,a,u,s(this,A).buffer);n(c),i+=f}else break}i===r?(d(this,A,new DataView(tt)),d(this,D,0),d(this,B,0)):(d(this,D,r-i),d(this,B,i))}};A=new WeakMap,D=new WeakMap,B=new WeakMap,o=new WeakMap,l=new WeakSet,nt=function(t){if(s(this,D)>0){let n=s(this,D)+t.byteLength;if(n+s(this,B)>s(this,A).byteLength){let i;if(n<=s(this,A).byteLength&&s(this,B)>=s(this,D))i=s(this,A).buffer;else{let a=s(this,A).byteLength*2;for(;n>=a;)a*=2;i=new ArrayBuffer(a)}new Uint8Array(i).set(new Uint8Array(s(this,A).buffer,s(this,B),s(this,D))),d(this,A,new DataView(i)),d(this,B,0)}new Uint8Array(s(this,A).buffer).set(new Uint8Array(t),s(this,B)+s(this,D)),d(this,D,n)}else d(this,A,new DataView(t)),d(this,B,0),d(this,D,t.byteLength)},rt=function(t,n,r,i){switch(n){case 50:return Me;case 49:return Ie;case 51:return Te;case 110:return Re;case 115:return Ee;case 99:return Ue;case 87:return Ce;case 73:return Pe;case 68:return p(this,l,ft).call(this,t,r,i);case 67:return p(this,l,it).call(this,t,r,i);case 90:return p(this,l,st).call(this,t,r,i);case 65:return p(this,l,lt).call(this,t,r,i);case 82:return p(this,l,ht).call(this,t,r,i);case 83:return p(this,l,mt).call(this,t,r,i);case 75:return p(this,l,yt).call(this,t,r,i);case 69:return p(this,l,Fe).call(this,t,r,i,\"error\");case 78:return p(this,l,Fe).call(this,t,r,i,\"notice\");case 84:return p(this,l,ct).call(this,t,r,i);case 116:return p(this,l,dt).call(this,t,r,i);case 71:return p(this,l,ot).call(this,t,r,i);case 72:return p(this,l,ut).call(this,t,r,i);case 100:return p(this,l,at).call(this,t,r,i);default:return new C(\"received invalid response: \"+n.toString(16),r,\"error\")}},st=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).string(1);return new ee(n,i)},it=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).cstring();return new te(n,i)},at=function(t,n,r){let i=r.slice(t,t+(n-4));return new H(n,new Uint8Array(i))},ot=function(t,n,r){return p(this,l,Ve).call(this,t,n,r,\"copyInResponse\")},ut=function(t,n,r){return p(this,l,Ve).call(this,t,n,r,\"copyOutResponse\")},Ve=function(t,n,r,i){s(this,o).setBuffer(t,r);let a=s(this,o).byte()!==0,u=s(this,o).int16(),f=new q(n,i,a,u);for(let c=0;c<u;c++)f.columnTypes[c]=s(this,o).int16();return f},lt=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).int32(),a=s(this,o).cstring(),u=s(this,o).cstring();return new Z(n,i,a,u)},ct=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).int16(),a=new Y(n,i);for(let u=0;u<i;u++)a.fields[u]=p(this,l,pt).call(this);return a},pt=function(){let t=s(this,o).cstring(),n=s(this,o).int32(),r=s(this,o).int16(),i=s(this,o).int32(),a=s(this,o).int16(),u=s(this,o).int32(),f=s(this,o).int16()===0?Oe.text:Oe.binary;return new $(t,n,r,i,a,u,f)},dt=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).int16(),a=new K(n,i);for(let u=0;u<i;u++)a.dataTypeIDs[u]=s(this,o).int32();return a},ft=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).int16(),a=new Array(i);for(let u=0;u<i;u++){let f=s(this,o).int32();a[u]=f===-1?null:s(this,o).string(f)}return new ne(n,a)},mt=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).cstring(),a=s(this,o).cstring();return new J(n,i,a)},yt=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).int32(),a=s(this,o).int32();return new X(n,i,a)},ht=function(t,n,r){s(this,o).setBuffer(t,r);let i=s(this,o).int32();switch(i){case 0:return new v(n);case 3:return new Q(n);case 5:return new W(n,s(this,o).bytes(4));case 10:{let a=[];for(;;){let u=s(this,o).cstring();if(u.length===0)return new _(n,a);a.push(u)}}case 11:return new j(n,s(this,o).string(n-8));case 12:return new z(n,s(this,o).string(n-8));default:throw new Error(\"Unknown authenticationOk message type \"+i)}},Fe=function(t,n,r,i){s(this,o).setBuffer(t,r);let a={},u=s(this,o).string(1);for(;u!==\"\\0\";)a[u]=s(this,o).cstring(),u=s(this,o).string(1);let f=a.M,c=i===\"notice\"?new re(n,f):new C(f,n,i);return c.severity=a.S,c.code=a.C,c.detail=a.D,c.hint=a.H,c.position=a.P,c.internalPosition=a.p,c.internalQuery=a.q,c.where=a.W,c.schema=a.s,c.table=a.t,c.column=a.c,c.dataType=a.d,c.constraint=a.n,c.file=a.F,c.line=a.L,c.routine=a.R,c};y();var Ge=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\",ie;async function Er(){if(Ge||ie)return;let e=new URL(\"./postgres.wasm\",import.meta.url);ie=fetch(e)}var V;async function Cr(e,t){if(t||V)return WebAssembly.instantiate(t||V,e),{instance:await WebAssembly.instantiate(t||V,e),module:t||V};let n=new URL(\"./postgres.wasm\",import.meta.url);if(Ge){let i=await(await import(\"fs/promises\")).readFile(n),{module:a,instance:u}=await WebAssembly.instantiate(i,e);return V=a,{instance:u,module:a}}else{ie||(ie=fetch(n));let r=await ie,{module:i,instance:a}=await WebAssembly.instantiateStreaming(r,e);return V=i,{instance:a,module:i}}}async function Pr(){let e=new URL(\"./postgres.data\",import.meta.url);return Ge?(await(await import(\"fs/promises\")).readFile(e)).buffer:(await fetch(e)).arrayBuffer()}var Ur=()=>{if(globalThis.crypto?.randomUUID)return globalThis.crypto.randomUUID();let e=new Uint8Array(16);if(globalThis.crypto?.getRandomValues)globalThis.crypto.getRandomValues(e);else for(let n=0;n<e.length;n++)e[n]=Math.floor(Math.random()*256);e[6]=e[6]&15|64,e[8]=e[8]&63|128;let t=[];return e.forEach(n=>{t.push(n.toString(16).padStart(2,\"0\"))}),t.slice(0,4).join(\"\")+\"-\"+t.slice(4,6).join(\"\")+\"-\"+t.slice(6,8).join(\"\")+\"-\"+t.slice(8,10).join(\"\")+\"-\"+t.slice(10).join(\"\")};async function Nr(e,t,n,r){if(!n||n.length===0)return t;r=r??e;let i;try{await e.execProtocol(k.parse({text:t}),{syncToFs:!1}),i=xe((await e.execProtocol(k.describe({type:\"S\"}),{syncToFs:!1})).messages)}finally{await e.execProtocol(k.sync(),{syncToFs:!1})}let a=t.replace(/\\$([0-9]+)/g,(f,c)=>\"%\"+c+\"L\");return(await r.query(`SELECT format($1, ${n.map((f,c)=>`$${c+2}`).join(\", \")}) as query`,[a,...n],{paramTypes:[G,...i]})).rows[0].query}export{pn as a,dn as b,Je as c,bn as d,gn as e,wn as f,xe as g,Sn as h,k as i,C as j,Z as k,te as l,re as m,Ne as n,he as o,qn as p,Ge as q,Er as r,Cr as s,Pr as t,Ur as u,Nr as v};\n//# sourceMappingURL=chunk-JSQ47LU7.js.map","import{i as l}from\"./chunk-MPW3RCU6.js\";l();var o={part:\"part\",container:\"container\"};function s(t,r,...e){let a=t.length-1,p=e.length-1;if(p!==-1){if(p===0){t[a]=t[a]+e[0]+r;return}t[a]=t[a]+e[0],t.push(...e.slice(1,p)),t.push(e[p]+r)}}function y(t,...r){let e=[t[0]];e.raw=[t.raw[0]];let a=[];for(let p=0;p<r.length;p++){let n=r[p],i=p+1;if(n?._templateType===o.part){s(e,t[i],n.str),s(e.raw,t.raw[i],n.str);continue}if(n?._templateType===o.container){s(e,t[i],...n.strings),s(e.raw,t.raw[i],...n.strings.raw),a.push(...n.values);continue}e.push(t[i]),e.raw.push(t.raw[i]),a.push(n)}return{_templateType:\"container\",strings:e,values:a}}function c(t,...r){return{_templateType:\"part\",str:`\"${String.raw(t,...r)}\"`}}function m(t,...r){return{_templateType:\"part\",str:String.raw(t,...r)}}function g(t,...r){let{strings:e,values:a}=y(t,...r);return{query:[e[0],...a.flatMap((p,n)=>[`$${n+1}`,e[n+1]])].join(\"\"),params:a}}export{y as a,c as b,m as c,g as d};\n//# sourceMappingURL=chunk-PZ27VTCT.js.map","import{a as O,b as D,c as Q,d as z,f as R,g as B,i as c}from\"./chunk-JSQ47LU7.js\";import{d as g}from\"./chunk-PZ27VTCT.js\";import{d as w,e as P,f as p,g as t,i as E}from\"./chunk-MPW3RCU6.js\";E();var b,u,r,o,d,h,f,v=class{constructor(){P(this,r);this.serializers={...D};this.parsers={...O};P(this,b,!1);P(this,u,!1)}async _initArrayTypes(){if(w(this,b))return;p(this,b,!0);let a=await this.query(`\n      SELECT b.oid, b.typarray\n      FROM pg_catalog.pg_type a\n      LEFT JOIN pg_catalog.pg_type b ON b.oid = a.typelem\n      WHERE a.typcategory = 'A'\n      GROUP BY b.oid, b.typarray\n      ORDER BY b.oid\n    `);for(let s of a.rows)this.serializers[s.typarray]=e=>Q(e,this.serializers[s.oid],s.typarray),this.parsers[s.typarray]=e=>z(e,this.parsers[s.oid],s.typarray)}async query(a,s,e){return await this._checkReady(),await this._runExclusiveTransaction(async()=>await t(this,r,d).call(this,a,s,e))}async sql(a,...s){let{query:e,params:l}=g(a,...s);return await this.query(e,l)}async exec(a,s){return await this._checkReady(),await this._runExclusiveTransaction(async()=>await t(this,r,h).call(this,a,s))}async describeQuery(a,s){try{await t(this,r,o).call(this,c.parse({text:a,types:s?.paramTypes}),s);let e=await t(this,r,o).call(this,c.describe({type:\"S\"}),s),l=e.messages.find(i=>i.name===\"parameterDescription\"),n=e.messages.find(i=>i.name===\"rowDescription\"),y=l?.dataTypeIDs.map(i=>({dataTypeID:i,serializer:this.serializers[i]}))??[],m=n?.fields.map(i=>({name:i.name,dataTypeID:i.dataTypeID,parser:this.parsers[i.dataTypeID]}))??[];return{queryParams:y,resultFields:m}}finally{await t(this,r,o).call(this,c.sync(),s)}}async transaction(a){return await this._checkReady(),await this._runExclusiveTransaction(async()=>{await t(this,r,h).call(this,\"BEGIN\"),p(this,u,!0);let s=!1,e=()=>{if(s)throw new Error(\"Transaction is closed\")},l={query:async(n,y,m)=>(e(),await t(this,r,d).call(this,n,y,m)),sql:async(n,...y)=>{let{query:m,params:i}=g(n,...y);return await t(this,r,d).call(this,m,i)},exec:async(n,y)=>(e(),await t(this,r,h).call(this,n,y)),rollback:async()=>{e(),await t(this,r,h).call(this,\"ROLLBACK\"),s=!0},get closed(){return s}};try{let n=await a(l);return s||(s=!0,await t(this,r,h).call(this,\"COMMIT\")),p(this,u,!1),n}catch(n){throw s||await t(this,r,h).call(this,\"ROLLBACK\"),p(this,u,!1),n}})}};b=new WeakMap,u=new WeakMap,r=new WeakSet,o=async function(a,s={}){return await this.execProtocol(a,{...s,syncToFs:!1})},d=async function(a,s=[],e){return await this._runExclusiveQuery(async()=>{t(this,r,f).call(this,\"runQuery\",a,s,e),await this._handleBlob(e?.blob);let l;try{let{messages:y}=await t(this,r,o).call(this,c.parse({text:a,types:e?.paramTypes}),e),m=B((await t(this,r,o).call(this,c.describe({type:\"S\"}),e)).messages),i=s.map((T,A)=>{let x=m[A];if(T==null)return null;let _=e?.serializers?.[x]??this.serializers[x];return _?_(T):T.toString()});l=[...y,...(await t(this,r,o).call(this,c.bind({values:i}),e)).messages,...(await t(this,r,o).call(this,c.describe({type:\"P\"}),e)).messages,...(await t(this,r,o).call(this,c.execute({}),e)).messages]}finally{await t(this,r,o).call(this,c.sync(),e)}await this._cleanupBlob(),w(this,u)||await this.syncToFs();let n=await this._getWrittenBlob();return R(l,this.parsers,e,n)[0]})},h=async function(a,s){return await this._runExclusiveQuery(async()=>{t(this,r,f).call(this,\"runExec\",a,s),await this._handleBlob(s?.blob);let e;try{e=(await t(this,r,o).call(this,c.query(a),s)).messages}finally{await t(this,r,o).call(this,c.sync(),s)}this._cleanupBlob(),w(this,u)||await this.syncToFs();let l=await this._getWrittenBlob();return R(e,this.parsers,s,l)})},f=function(...a){this.debug>0&&console.log(...a)};export{v as a};\n//# sourceMappingURL=chunk-4ZP5PNUC.js.map","import{a as E,c as pr,i as d}from\"./chunk-MPW3RCU6.js\";var w=E(($r,l)=>{\"use strict\";d();var j=9007199254740991,B=function(r){return r}();function dr(r){return r===B}function q(r){return typeof r==\"string\"||Object.prototype.toString.call(r)==\"[object String]\"}function mr(r){return Object.prototype.toString.call(r)==\"[object Date]\"}function N(r){return r!==null&&typeof r==\"object\"}function U(r){return typeof r==\"function\"}function lr(r){return typeof r==\"number\"&&r>-1&&r%1==0&&r<=j}function fr(r){return Object.prototype.toString.call(r)==\"[object Array]\"}function Y(r){return N(r)&&!U(r)&&lr(r.length)}function D(r){return Object.prototype.toString.call(r)==\"[object ArrayBuffer]\"}function yr(r,e){return Array.prototype.map.call(r,e)}function gr(r,e){var t=B;return U(e)&&Array.prototype.every.call(r,function(s,o,n){var a=e(s,o,n);return a&&(t=s),!a}),t}function hr(r){return Object.assign.apply(null,arguments)}function W(r){var e,t,s;if(q(r)){for(t=r.length,s=new Uint8Array(t),e=0;e<t;e++)s[e]=r.charCodeAt(e)&255;return s}return D(r)?new Uint8Array(r):N(r)&&D(r.buffer)?new Uint8Array(r.buffer):Y(r)?new Uint8Array(r):N(r)&&U(r.toString)?W(r.toString()):new Uint8Array}l.exports.MAX_SAFE_INTEGER=j;l.exports.isUndefined=dr;l.exports.isString=q;l.exports.isObject=N;l.exports.isDateTime=mr;l.exports.isFunction=U;l.exports.isArray=fr;l.exports.isArrayLike=Y;l.exports.isArrayBuffer=D;l.exports.map=yr;l.exports.find=gr;l.exports.extend=hr;l.exports.toUint8Array=W});var x=E((Qr,X)=>{\"use strict\";d();var M=\"\\0\";X.exports={NULL_CHAR:M,TMAGIC:\"ustar\"+M+\"00\",OLDGNU_MAGIC:\"ustar  \"+M,REGTYPE:0,LNKTYPE:1,SYMTYPE:2,CHRTYPE:3,BLKTYPE:4,DIRTYPE:5,FIFOTYPE:6,CONTTYPE:7,TSUID:parseInt(\"4000\",8),TSGID:parseInt(\"2000\",8),TSVTX:parseInt(\"1000\",8),TUREAD:parseInt(\"0400\",8),TUWRITE:parseInt(\"0200\",8),TUEXEC:parseInt(\"0100\",8),TGREAD:parseInt(\"0040\",8),TGWRITE:parseInt(\"0020\",8),TGEXEC:parseInt(\"0010\",8),TOREAD:parseInt(\"0004\",8),TOWRITE:parseInt(\"0002\",8),TOEXEC:parseInt(\"0001\",8),TPERMALL:parseInt(\"0777\",8),TPERMMASK:parseInt(\"0777\",8)}});var L=E((ee,f)=>{\"use strict\";d();var K=w(),p=x(),Sr=512,I=p.TPERMALL,V=0,Z=0,_=[[\"name\",100,0,function(r,e){return v(r[e[0]],e[1])},function(r,e,t){return A(r.slice(e,e+t[1]))}],[\"mode\",8,100,function(r,e){var t=r[e[0]]||I;return t=t&p.TPERMMASK,P(t,e[1],I)},function(r,e,t){var s=S(r.slice(e,e+t[1]));return s&=p.TPERMMASK,s}],[\"uid\",8,108,function(r,e){return P(r[e[0]],e[1],V)},function(r,e,t){return S(r.slice(e,e+t[1]))}],[\"gid\",8,116,function(r,e){return P(r[e[0]],e[1],Z)},function(r,e,t){return S(r.slice(e,e+t[1]))}],[\"size\",12,124,function(r,e){return P(r.data.length,e[1])},function(r,e,t){return S(r.slice(e,e+t[1]))}],[\"modifyTime\",12,136,function(r,e){return k(r[e[0]],e[1])},function(r,e,t){return z(r.slice(e,e+t[1]))}],[\"checksum\",8,148,function(r,e){return\"        \"},function(r,e,t){return S(r.slice(e,e+t[1]))}],[\"type\",1,156,function(r,e){return\"\"+(parseInt(r[e[0]],10)||0)%8},function(r,e,t){return(parseInt(String.fromCharCode(r[e]),10)||0)%8}],[\"linkName\",100,157,function(r,e){return\"\"},function(r,e,t){return A(r.slice(e,e+t[1]))}],[\"ustar\",8,257,function(r,e){return p.TMAGIC},function(r,e,t){return Fr(A(r.slice(e,e+t[1]),!0))},function(r,e){return r[e[0]]==p.TMAGIC||r[e[0]]==p.OLDGNU_MAGIC}],[\"owner\",32,265,function(r,e){return v(r[e[0]],e[1])},function(r,e,t){return A(r.slice(e,e+t[1]))}],[\"group\",32,297,function(r,e){return v(r[e[0]],e[1])},function(r,e,t){return A(r.slice(e,e+t[1]))}],[\"majorNumber\",8,329,function(r,e){return\"\"},function(r,e,t){return S(r.slice(e,e+t[1]))}],[\"minorNumber\",8,337,function(r,e){return\"\"},function(r,e,t){return S(r.slice(e,e+t[1]))}],[\"prefix\",131,345,function(r,e){return v(r[e[0]],e[1])},function(r,e,t){return A(r.slice(e,e+t[1]))}],[\"accessTime\",12,476,function(r,e){return k(r[e[0]],e[1])},function(r,e,t){return z(r.slice(e,e+t[1]))}],[\"createTime\",12,488,function(r,e){return k(r[e[0]],e[1])},function(r,e,t){return z(r.slice(e,e+t[1]))}]],$=function(r){var e=r[r.length-1];return e[2]+e[1]}(_);function Fr(r){if(r.length==8){var e=r.split(\"\");if(e[5]==p.NULL_CHAR)return(e[6]==\" \"||e[6]==p.NULL_CHAR)&&(e[6]=\"0\"),(e[7]==\" \"||e[7]==p.NULL_CHAR)&&(e[7]=\"0\"),e=e.join(\"\"),e==p.TMAGIC?e:r;if(e[7]==p.NULL_CHAR)return e[5]==p.NULL_CHAR&&(e[5]=\" \"),e[6]==p.NULL_CHAR&&(e[6]=\" \"),e==p.OLDGNU_MAGIC?e:r}return r}function v(r,e){return e-=1,K.isUndefined(r)&&(r=\"\"),r=(\"\"+r).substr(0,e),r+p.NULL_CHAR}function P(r,e,t){for(t=parseInt(t)||0,e-=1,r=(parseInt(r)||t).toString(8).substr(-e,e);r.length<e;)r=\"0\"+r;return r+p.NULL_CHAR}function k(r,e){if(K.isDateTime(r))r=Math.floor(1*r/1e3);else if(r=parseInt(r,10),isFinite(r)){if(r<=0)return\"\"}else r=Math.floor(1*new Date/1e3);return P(r,e,0)}function A(r,e){var t=String.fromCharCode.apply(null,r);if(e)return t;var s=t.indexOf(p.NULL_CHAR);return s>=0?t.substr(0,s):t}function S(r){var e=String.fromCharCode.apply(null,r);return parseInt(e.replace(/^0+$/g,\"\"),8)||0}function z(r){return r.length==0||r[0]==0?null:new Date(1e3*S(r))}function br(r,e,t){var s=parseInt(e,10)||0,o=Math.min(s+$,r.length),n=0,a=0,i=0;t&&_.every(function(y){return y[0]==\"checksum\"?(a=s+y[2],i=a+y[1],!1):!0});for(var u=32,c=s;c<o;c++){var m=c>=a&&c<i?u:r[c];n=(n+m)%262144}return n}f.exports.recordSize=Sr;f.exports.defaultFileMode=I;f.exports.defaultUid=V;f.exports.defaultGid=Z;f.exports.posixHeader=_;f.exports.effectiveHeaderSize=$;f.exports.calculateChecksum=br;f.exports.formatTarString=v;f.exports.formatTarNumber=P;f.exports.formatTarDateTime=k;f.exports.parseTarString=A;f.exports.parseTarNumber=S;f.exports.parseTarDateTime=z});var er=E((ne,rr)=>{\"use strict\";d();var Tr=x(),O=w(),F=L();function J(r){return F.recordSize}function Q(r){return Math.ceil(r.data.length/F.recordSize)*F.recordSize}function Ar(r){var e=0;return r.forEach(function(t){e+=J(t)+Q(t)}),e+=F.recordSize*2,new Uint8Array(e)}function Er(r,e,t){t=parseInt(t)||0;var s=t;F.posixHeader.forEach(function(u){for(var c=u[3](e,u),m=c.length,y=0;y<m;y+=1)r[s+y]=c.charCodeAt(y)&255;s+=u[1]});var o=O.find(F.posixHeader,function(u){return u[0]==\"checksum\"});if(o){var n=F.calculateChecksum(r,t,!0),a=F.formatTarNumber(n,o[1]-2)+Tr.NULL_CHAR+\" \";s=t+o[2];for(var i=0;i<a.length;i+=1)r[s]=a.charCodeAt(i)&255,s++}return t+J(e)}function Pr(r,e,t){return t=parseInt(t,10)||0,r.set(e.data,t),t+Q(e)}function wr(r){r=O.map(r,function(s){return O.extend({},s,{data:O.toUint8Array(s.data)})});var e=Ar(r),t=0;return r.forEach(function(s){t=Er(e,s,t),t=Pr(e,s,t)}),e}rr.exports.tar=wr});var nr=E((oe,tr)=>{\"use strict\";d();var xr=x(),G=w(),g=L(),vr={extractData:!0,checkHeader:!0,checkChecksum:!0,checkFileSize:!0},Nr={size:!0,checksum:!0,ustar:!0},R={unexpectedEndOfFile:\"Unexpected end of file.\",fileCorrupted:\"File is corrupted.\",checksumCheckFailed:\"Checksum check failed.\"};function Ur(r){return g.recordSize}function kr(r){return Math.ceil(r/g.recordSize)*g.recordSize}function zr(r,e){for(var t=e,s=Math.min(r.length,e+g.recordSize*2),o=t;o<s;o++)if(r[o]!=0)return!1;return!0}function Or(r,e,t){if(r.length-e<g.recordSize){if(t.checkFileSize)throw new Error(R.unexpectedEndOfFile);return null}e=parseInt(e)||0;var s={},o=e;if(g.posixHeader.forEach(function(i){s[i[0]]=i[4](r,o,i),o+=i[1]}),s.type!=0&&(s.size=0),t.checkHeader&&g.posixHeader.forEach(function(i){if(G.isFunction(i[5])&&!i[5](s,i)){var u=new Error(R.fileCorrupted);throw u.data={offset:e+i[2],field:i[0]},u}}),t.checkChecksum){var n=g.calculateChecksum(r,e,!0);if(n!=s.checksum){var a=new Error(R.checksumCheckFailed);throw a.data={offset:e,header:s,checksum:n},a}}return s}function Cr(r,e,t,s){return s.extractData?t.size<=0?new Uint8Array:r.slice(e,e+t.size):null}function Dr(r,e){var t={};return g.posixHeader.forEach(function(s){var o=s[0];Nr[o]||(t[o]=r[o])}),t.isOldGNUFormat=r.ustar==xr.OLDGNU_MAGIC,e&&(t.data=e),t}function Mr(r,e){e=G.extend({},vr,e);for(var t=[],s=0,o=r.length;o-s>=g.recordSize;){r=G.toUint8Array(r);var n=Or(r,s,e);if(!n)break;s+=Ur(n);var a=Cr(r,s,n,e);if(t.push(Dr(n,a)),s+=kr(n.size),zr(r,s))break}return t}tr.exports.untar=Mr});var or=E((se,ir)=>{\"use strict\";d();var Ir=w(),_r=x(),Lr=er(),Rr=nr();Ir.extend(ir.exports,Lr,Rr,_r)});d();d();var h=pr(or(),1);async function H(r,e,t=\"pgdata\",s=\"auto\"){let o=jr(r,e),[n,a]=await Br(o,s),i=t+(a?\".tar.gz\":\".tar\"),u=a?\"application/x-gzip\":\"application/x-tar\";return typeof File<\"u\"?new File([n],i,{type:u}):new Blob([n],{type:u})}var Gr=[\"application/x-gtar\",\"application/x-tar+gzip\",\"application/x-gzip\",\"application/gzip\"];async function ce(r,e,t){let s=new Uint8Array(await e.arrayBuffer()),o=typeof File<\"u\"&&e instanceof File?e.name:void 0;(Gr.includes(e.type)||o?.endsWith(\".tgz\")||o?.endsWith(\".tar.gz\"))&&(s=await Wr(s));let a=(0,h.untar)(s);for(let i of a){let u=t+i.name,c=u.split(\"/\").slice(0,-1);for(let m=1;m<=c.length;m++){let y=c.slice(0,m).join(\"/\");r.analyzePath(y).exists||r.mkdir(y)}i.type===h.REGTYPE?(r.writeFile(u,i.data),r.utime(u,ar(i.modifyTime),ar(i.modifyTime))):i.type===h.DIRTYPE&&r.mkdir(u)}}function Hr(r,e){let t=[],s=o=>{r.readdir(o).forEach(a=>{if(a===\".\"||a===\"..\")return;let i=o+\"/\"+a,u=r.stat(i),c=r.isFile(u.mode)?r.readFile(i,{encoding:\"binary\"}):new Uint8Array(0);t.push({name:i.substring(e.length),mode:u.mode,size:u.size,type:r.isFile(u.mode)?h.REGTYPE:h.DIRTYPE,modifyTime:u.mtime,data:c}),r.isDir(u.mode)&&s(i)})};return s(e),t}function jr(r,e){let t=Hr(r,e);return(0,h.tar)(t)}async function Br(r,e=\"auto\"){if(e===\"none\")return[r,!1];if(typeof CompressionStream<\"u\")return[await qr(r),!0];if(typeof process<\"u\"&&process.versions&&process.versions.node)return[await Yr(r),!0];if(e===\"auto\")return[r,!1];throw new Error(\"Compression not supported in this environment\")}async function qr(r){let e=new CompressionStream(\"gzip\"),t=e.writable.getWriter(),s=e.readable.getReader();t.write(r),t.close();let o=[];for(;;){let{value:i,done:u}=await s.read();if(u)break;i&&o.push(i)}let n=new Uint8Array(o.reduce((i,u)=>i+u.length,0)),a=0;return o.forEach(i=>{n.set(i,a),a+=i.length}),n}async function Yr(r){let{promisify:e}=await import(\"util\"),{gzip:t}=await import(\"zlib\");return await e(t)(r)}async function Wr(r){if(typeof CompressionStream<\"u\")return await Xr(r);if(typeof process<\"u\"&&process.versions&&process.versions.node)return await Kr(r);throw new Error(\"Unsupported environment for decompression\")}async function Xr(r){let e=new DecompressionStream(\"gzip\"),t=e.writable.getWriter(),s=e.readable.getReader();t.write(r),t.close();let o=[];for(;;){let{value:i,done:u}=await s.read();if(u)break;i&&o.push(i)}let n=new Uint8Array(o.reduce((i,u)=>i+u.length,0)),a=0;return o.forEach(i=>{n.set(i,a),a+=i.length}),n}async function Kr(r){let{promisify:e}=await import(\"util\"),{gunzip:t}=await import(\"zlib\");return await e(t)(r)}function ar(r){return r?typeof r==\"number\"?r:Math.floor(r.getTime()/1e3):Math.floor(Date.now()/1e3)}var Vr=\"/tmp/pglite\",C=Vr+\"/base\",sr=class{constructor(e){this.dataDir=e}async init(e,t){return this.pg=e,{emscriptenOpts:t}}async syncToFs(e){}async initialSyncFs(){}async closeFs(){}async dumpTar(e,t){return H(this.pg.Module.FS,C,e,t)}},ur=class{constructor(e,{debug:t=!1}={}){this.dataDir=e,this.debug=t}async syncToFs(e){}async initialSyncFs(){}async closeFs(){}async dumpTar(e,t){return H(this.pg.Module.FS,C,e,t)}async init(e,t){return this.pg=e,{emscriptenOpts:{...t,preRun:[...t.preRun||[],o=>{let n=Zr(o,this);o.FS.mkdir(C),o.FS.mount(n,{},C)}]}}}},cr={EBADF:8,EBADFD:127,EEXIST:20,EINVAL:28,EISDIR:31,ENODEV:43,ENOENT:44,ENOTDIR:54,ENOTEMPTY:55},Zr=(r,e)=>{let t=r.FS,s=e.debug?console.log:null,o={tryFSOperation(n){try{return n()}catch(a){throw a.code?a.code===\"UNKNOWN\"?new t.ErrnoError(cr.EINVAL):new t.ErrnoError(a.code):a}},mount(n){return o.createNode(null,\"/\",16895,0)},syncfs(n,a,i){},createNode(n,a,i,u){if(!t.isDir(i)&&!t.isFile(i))throw new t.ErrnoError(28);let c=t.createNode(n,a,i);return c.node_ops=o.node_ops,c.stream_ops=o.stream_ops,c},getMode:function(n){return s?.(\"getMode\",n),o.tryFSOperation(()=>e.lstat(n).mode)},realPath:function(n){let a=[];for(;n.parent!==n;)a.push(n.name),n=n.parent;return a.push(n.mount.opts.root),a.reverse(),a.join(\"/\")},node_ops:{getattr(n){s?.(\"getattr\",o.realPath(n));let a=o.realPath(n);return o.tryFSOperation(()=>{let i=e.lstat(a);return{...i,dev:0,ino:n.id,nlink:1,rdev:n.rdev,atime:new Date(i.atime),mtime:new Date(i.mtime),ctime:new Date(i.ctime)}})},setattr(n,a){s?.(\"setattr\",o.realPath(n),a);let i=o.realPath(n);o.tryFSOperation(()=>{a.mode!==void 0&&e.chmod(i,a.mode),a.size!==void 0&&e.truncate(i,a.size),a.timestamp!==void 0&&e.utimes(i,a.timestamp,a.timestamp),a.size!==void 0&&e.truncate(i,a.size)})},lookup(n,a){s?.(\"lookup\",o.realPath(n),a);let i=[o.realPath(n),a].join(\"/\"),u=o.getMode(i);return o.createNode(n,a,u)},mknod(n,a,i,u){s?.(\"mknod\",o.realPath(n),a,i,u);let c=o.createNode(n,a,i,u),m=o.realPath(c);return o.tryFSOperation(()=>(t.isDir(c.mode)?e.mkdir(m,{mode:i}):e.writeFile(m,\"\",{mode:i}),c))},rename(n,a,i){s?.(\"rename\",o.realPath(n),o.realPath(a),i);let u=o.realPath(n),c=[o.realPath(a),i].join(\"/\");o.tryFSOperation(()=>{e.rename(u,c)}),n.name=i},unlink(n,a){s?.(\"unlink\",o.realPath(n),a);let i=[o.realPath(n),a].join(\"/\");try{e.unlink(i)}catch{}},rmdir(n,a){s?.(\"rmdir\",o.realPath(n),a);let i=[o.realPath(n),a].join(\"/\");return o.tryFSOperation(()=>{e.rmdir(i)})},readdir(n){s?.(\"readdir\",o.realPath(n));let a=o.realPath(n);return o.tryFSOperation(()=>e.readdir(a))},symlink(n,a,i){throw s?.(\"symlink\",o.realPath(n),a,i),new t.ErrnoError(63)},readlink(n){throw s?.(\"readlink\",o.realPath(n)),new t.ErrnoError(63)}},stream_ops:{open(n){s?.(\"open stream\",o.realPath(n.node));let a=o.realPath(n.node);return o.tryFSOperation(()=>{t.isFile(n.node.mode)&&(n.shared.refcount=1,n.nfd=e.open(a))})},close(n){return s?.(\"close stream\",o.realPath(n.node)),o.tryFSOperation(()=>{t.isFile(n.node.mode)&&n.nfd&&--n.shared.refcount===0&&e.close(n.nfd)})},dup(n){s?.(\"dup stream\",o.realPath(n.node)),n.shared.refcount++},read(n,a,i,u,c){return s?.(\"read stream\",o.realPath(n.node),i,u,c),u===0?0:o.tryFSOperation(()=>e.read(n.nfd,a,i,u,c))},write(n,a,i,u,c){return s?.(\"write stream\",o.realPath(n.node),i,u,c),o.tryFSOperation(()=>e.write(n.nfd,a.buffer,i,u,c))},llseek(n,a,i){s?.(\"llseek stream\",o.realPath(n.node),a,i);let u=a;if(i===1?u+=n.position:i===2&&t.isFile(n.node.mode)&&o.tryFSOperation(()=>{let c=e.fstat(n.nfd);u+=c.size}),u<0)throw new t.ErrnoError(28);return u},mmap(n,a,i,u,c){if(s?.(\"mmap stream\",o.realPath(n.node),a,i,u,c),!t.isFile(n.node.mode))throw new t.ErrnoError(cr.ENODEV);let m=r.mmapAlloc(a);return o.stream_ops.read(n,r.HEAP8,m,a,i),{ptr:m,allocated:!0}},msync(n,a,i,u,c){return s?.(\"msync stream\",o.realPath(n.node),i,u,c),o.stream_ops.write(n,a,0,u,i),0}}};return o};export{or as a,ce as b,Vr as c,C as d,sr as e,ur as f,cr as g};\n//# sourceMappingURL=chunk-GMYUOGPV.js.map","\nvar Module = (() => {\n  var _scriptName = import.meta.url;\n  \n  return (\nasync function(moduleArg = {}) {\n  var moduleRtn;\n\n// include: shell.js\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(moduleArg) => Promise<Module>\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = moduleArg;\n\n// Set up the promise that indicates the Module is initialized\nvar readyPromiseResolve, readyPromiseReject;\nvar readyPromise = new Promise((resolve, reject) => {\n  readyPromiseResolve = resolve;\n  readyPromiseReject = reject;\n});\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n\n// Attempt to auto-detect the environment\nvar ENVIRONMENT_IS_WEB = typeof window == 'object';\nvar ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';\n// N.b. Electron.js environment is simultaneously a NODE-environment, but\n// also a web environment.\nvar ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string' && process.type != 'renderer';\nvar ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nif (ENVIRONMENT_IS_NODE) {\n  // `require()` is no-op in an ESM module, use `createRequire()` to construct\n  // the require()` function.  This is only necessary for multi-environment\n  // builds, `-sENVIRONMENT=node` emits a static import declaration instead.\n  // TODO: Swap all `require()`'s with `import()`'s?\n  const { createRequire } = await import('module');\n  let dirname = import.meta.url;\n  if (dirname.startsWith(\"data:\")) {\n    dirname = '/';\n  }\n  /** @suppress{duplicate} */\n  var require = createRequire(dirname);\n\n}\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n// include: /tmp/tmp81o060fh.js\n\n  if (!Module['expectedDataFileDownloads']) {\n    Module['expectedDataFileDownloads'] = 0;\n  }\n\n  Module['expectedDataFileDownloads']++;\n  (() => {\n    // Do not attempt to redownload the virtual filesystem data when in a pthread or a Wasm Worker context.\n    var isPthread = typeof ENVIRONMENT_IS_PTHREAD != 'undefined' && ENVIRONMENT_IS_PTHREAD;\n    var isWasmWorker = typeof ENVIRONMENT_IS_WASM_WORKER != 'undefined' && ENVIRONMENT_IS_WASM_WORKER;\n    if (isPthread || isWasmWorker) return;\n    function loadPackage(metadata) {\n\n      var PACKAGE_PATH = '';\n      if (typeof window === 'object') {\n        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');\n      } else if (typeof process === 'undefined' && typeof location !== 'undefined') {\n        // web worker\n        PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');\n      }\n      var PACKAGE_NAME = 'postgres.data';\n      var REMOTE_PACKAGE_BASE = 'postgres.data';\n      if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {\n        Module['locateFile'] = Module['locateFilePackage'];\n        err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');\n      }\n      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;\nvar REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];\n\n      function fetchRemotePackage(packageName, packageSize, callback, errback) {\n        if (typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string') {\n          require('fs').readFile(packageName, (err, contents) => {\n            if (err) {\n              errback(err);\n            } else {\n              callback(contents.buffer);\n            }\n          });\n          return;\n        }\n        Module['dataFileDownloads'] ??= {};\n        fetch(packageName)\n          .catch((cause) => Promise.reject(new Error(`Network Error: ${packageName}`, {cause}))) // If fetch fails, rewrite the error to include the failing URL & the cause.\n          .then((response) => {\n            if (!response.ok) {\n              return Promise.reject(new Error(`${response.status}: ${response.url}`));\n            }\n\n            if (!response.body && response.arrayBuffer) { // If we're using the polyfill, readers won't be available...\n              return response.arrayBuffer().then(callback);\n            }\n\n            const reader = response.body.getReader();\n            const iterate = () => reader.read().then(handleChunk).catch((cause) => {\n              return Promise.reject(new Error(`Unexpected error while handling : ${response.url} ${cause}`, {cause}));\n            });\n\n            const chunks = [];\n            const headers = response.headers;\n            const total = Number(headers.get('Content-Length') ?? packageSize);\n            let loaded = 0;\n\n            const handleChunk = ({done, value}) => {\n              if (!done) {\n                chunks.push(value);\n                loaded += value.length;\n                Module['dataFileDownloads'][packageName] = {loaded, total};\n\n                let totalLoaded = 0;\n                let totalSize = 0;\n\n                for (const download of Object.values(Module['dataFileDownloads'])) {\n                  totalLoaded += download.loaded;\n                  totalSize += download.total;\n                }\n\n                Module['setStatus']?.(`Downloading data... (${totalLoaded}/${totalSize})`);\n                return iterate();\n              } else {\n                const packageData = new Uint8Array(chunks.map((c) => c.length).reduce((a, b) => a + b, 0));\n                let offset = 0;\n                for (const chunk of chunks) {\n                  packageData.set(chunk, offset);\n                  offset += chunk.length;\n                }\n                callback(packageData.buffer);\n              }\n            };\n\n            Module['setStatus']?.('Downloading data...');\n            return iterate();\n          });\n      };\n\n      function handleError(error) {\n        console.error('package error:', error);\n      };\n\n      var fetchedCallback = null;\n      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;\n\n      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, (data) => {\n        if (fetchedCallback) {\n          fetchedCallback(data);\n          fetchedCallback = null;\n        } else {\n          fetched = data;\n        }\n      }, handleError);\n\n    function runWithFS(Module) {\n\n      function assert(check, msg) {\n        if (!check) throw msg + new Error().stack;\n      }\nModule['FS_createPath'](\"/\", \"home\", true, true);\nModule['FS_createPath'](\"/home\", \"web_user\", true, true);\nModule['FS_createPath'](\"/\", \"tmp\", true, true);\nModule['FS_createPath'](\"/tmp\", \"pglite\", true, true);\nModule['FS_createPath'](\"/tmp/pglite\", \"bin\", true, true);\nModule['FS_createPath'](\"/tmp/pglite\", \"lib\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib\", \"postgresql\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib/postgresql\", \"pgxs\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib/postgresql/pgxs\", \"config\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib/postgresql/pgxs\", \"src\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib/postgresql/pgxs/src\", \"makefiles\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib/postgresql/pgxs/src\", \"test\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib/postgresql/pgxs/src/test\", \"isolation\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/lib/postgresql/pgxs/src/test\", \"regress\", true, true);\nModule['FS_createPath'](\"/tmp/pglite\", \"share\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share\", \"postgresql\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql\", \"extension\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql\", \"timezone\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Africa\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"America\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone/America\", \"Argentina\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone/America\", \"Indiana\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone/America\", \"Kentucky\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone/America\", \"North_Dakota\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Antarctica\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Arctic\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Asia\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Atlantic\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Australia\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Brazil\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Canada\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Chile\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Etc\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Europe\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Indian\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Mexico\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"Pacific\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql/timezone\", \"US\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql\", \"timezonesets\", true, true);\nModule['FS_createPath'](\"/tmp/pglite/share/postgresql\", \"tsearch_data\", true, true);\n\n      /** @constructor */\n      function DataRequest(start, end, audio) {\n        this.start = start;\n        this.end = end;\n        this.audio = audio;\n      }\n      DataRequest.prototype = {\n        requests: {},\n        open: function(mode, name) {\n          this.name = name;\n          this.requests[name] = this;\n          Module['addRunDependency'](`fp ${this.name}`);\n        },\n        send: function() {},\n        onload: function() {\n          var byteArray = this.byteArray.subarray(this.start, this.end);\n          this.finish(byteArray);\n        },\n        finish: function(byteArray) {\n          var that = this;\n          // canOwn this data in the filesystem, it is a slide into the heap that will never change\n          Module['FS_createDataFile'](this.name, null, byteArray, true, true, true);\n          Module['removeRunDependency'](`fp ${that.name}`);\n          this.requests[this.name] = null;\n        }\n      };\n\n      var files = metadata['files'];\n      for (var i = 0; i < files.length; ++i) {\n        new DataRequest(files[i]['start'], files[i]['end'], files[i]['audio'] || 0).open('GET', files[i]['filename']);\n      }\n\n      function processPackageData(arrayBuffer) {\n        assert(arrayBuffer, 'Loading data file failed.');\n        assert(arrayBuffer.constructor.name === ArrayBuffer.name, 'bad input to processPackageData');\n        var byteArray = new Uint8Array(arrayBuffer);\n        var curr;\n        // Reuse the bytearray from the XHR as the source for file reads.\n          DataRequest.prototype.byteArray = byteArray;\n          var files = metadata['files'];\n          for (var i = 0; i < files.length; ++i) {\n            DataRequest.prototype.requests[files[i].filename].onload();\n          }          Module['removeRunDependency']('datafile_postgres.data');\n\n      };\n      Module['addRunDependency']('datafile_postgres.data');\n\n      if (!Module['preloadResults']) Module['preloadResults'] = {};\n\n      Module['preloadResults'][PACKAGE_NAME] = {fromCache: false};\n      if (fetched) {\n        processPackageData(fetched);\n        fetched = null;\n      } else {\n        fetchedCallback = processPackageData;\n      }\n\n    }\n    if (Module['calledRun']) {\n      runWithFS(Module);\n    } else {\n      if (!Module['preRun']) Module['preRun'] = [];\n      Module[\"preRun\"].push(runWithFS); // FS is not initialized yet, wait for it\n    }\n\n    }\n    loadPackage({\"files\": [{\"filename\": \"/home/web_user/.pgpass\", \"start\": 0, \"end\": 135}, {\"filename\": \"/tmp/pglite/bin/initdb\", \"start\": 135, \"end\": 147}, {\"filename\": \"/tmp/pglite/bin/postgres\", \"start\": 147, \"end\": 159}, {\"filename\": \"/tmp/pglite/lib/postgresql/cyrillic_and_mic.so\", \"start\": 159, \"end\": 5738}, {\"filename\": \"/tmp/pglite/lib/postgresql/dict_snowball.so\", \"start\": 5738, \"end\": 580838}, {\"filename\": \"/tmp/pglite/lib/postgresql/euc2004_sjis2004.so\", \"start\": 580838, \"end\": 583216}, {\"filename\": \"/tmp/pglite/lib/postgresql/euc_cn_and_mic.so\", \"start\": 583216, \"end\": 584483}, {\"filename\": \"/tmp/pglite/lib/postgresql/euc_jp_and_sjis.so\", \"start\": 584483, \"end\": 592223}, {\"filename\": \"/tmp/pglite/lib/postgresql/euc_kr_and_mic.so\", \"start\": 592223, \"end\": 593530}, {\"filename\": \"/tmp/pglite/lib/postgresql/euc_tw_and_big5.so\", \"start\": 593530, \"end\": 598650}, {\"filename\": \"/tmp/pglite/lib/postgresql/latin2_and_win1250.so\", \"start\": 598650, \"end\": 600595}, {\"filename\": \"/tmp/pglite/lib/postgresql/latin_and_mic.so\", \"start\": 600595, \"end\": 602068}, {\"filename\": \"/tmp/pglite/lib/postgresql/libpqwalreceiver.so\", \"start\": 602068, \"end\": 725255}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgoutput.so\", \"start\": 725255, \"end\": 741345}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/config/install-sh\", \"start\": 741345, \"end\": 755342}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/config/missing\", \"start\": 755342, \"end\": 756690}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/Makefile.global\", \"start\": 756690, \"end\": 792812}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/Makefile.port\", \"start\": 792812, \"end\": 793088}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/Makefile.shlib\", \"start\": 793088, \"end\": 809126}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/makefiles/pgxs.mk\", \"start\": 809126, \"end\": 824054}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/nls-global.mk\", \"start\": 824054, \"end\": 830939}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/test/isolation/isolationtester.cjs\", \"start\": 830939, \"end\": 927086}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/test/isolation/pg_isolation_regress.cjs\", \"start\": 927086, \"end\": 1003500}, {\"filename\": \"/tmp/pglite/lib/postgresql/pgxs/src/test/regress/pg_regress.cjs\", \"start\": 1003500, \"end\": 1079904}, {\"filename\": \"/tmp/pglite/lib/postgresql/plpgsql.so\", \"start\": 1079904, \"end\": 1239297}, {\"filename\": \"/tmp/pglite/password\", \"start\": 1239297, \"end\": 1239306}, {\"filename\": \"/tmp/pglite/share/postgresql/errcodes.txt\", \"start\": 1239306, \"end\": 1272764}, {\"filename\": \"/tmp/pglite/share/postgresql/extension/plpgsql--1.0.sql\", \"start\": 1272764, \"end\": 1273422}, {\"filename\": \"/tmp/pglite/share/postgresql/extension/plpgsql.control\", \"start\": 1273422, \"end\": 1273615}, {\"filename\": \"/tmp/pglite/share/postgresql/fix-CVE-2024-4317.sql\", \"start\": 1273615, \"end\": 1279380}, {\"filename\": \"/tmp/pglite/share/postgresql/information_schema.sql\", \"start\": 1279380, \"end\": 1394355}, {\"filename\": \"/tmp/pglite/share/postgresql/pg_hba.conf.sample\", \"start\": 1394355, \"end\": 1399980}, {\"filename\": \"/tmp/pglite/share/postgresql/pg_ident.conf.sample\", \"start\": 1399980, \"end\": 1402620}, {\"filename\": \"/tmp/pglite/share/postgresql/pg_service.conf.sample\", \"start\": 1402620, \"end\": 1403224}, {\"filename\": \"/tmp/pglite/share/postgresql/postgres.bki\", \"start\": 1403224, \"end\": 2347328}, {\"filename\": \"/tmp/pglite/share/postgresql/postgresql.conf.sample\", \"start\": 2347328, \"end\": 2376975}, {\"filename\": \"/tmp/pglite/share/postgresql/psqlrc.sample\", \"start\": 2376975, \"end\": 2377253}, {\"filename\": \"/tmp/pglite/share/postgresql/snowball_create.sql\", \"start\": 2377253, \"end\": 2421429}, {\"filename\": \"/tmp/pglite/share/postgresql/sql_features.txt\", \"start\": 2421429, \"end\": 2457110}, {\"filename\": \"/tmp/pglite/share/postgresql/system_constraints.sql\", \"start\": 2457110, \"end\": 2466005}, {\"filename\": \"/tmp/pglite/share/postgresql/system_functions.sql\", \"start\": 2466005, \"end\": 2489320}, {\"filename\": \"/tmp/pglite/share/postgresql/system_views.sql\", \"start\": 2489320, \"end\": 2539593}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Abidjan\", \"start\": 2539593, \"end\": 2539723}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Accra\", \"start\": 2539723, \"end\": 2539853}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Addis_Ababa\", \"start\": 2539853, \"end\": 2540044}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Algiers\", \"start\": 2540044, \"end\": 2540514}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Asmara\", \"start\": 2540514, \"end\": 2540705}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Asmera\", \"start\": 2540705, \"end\": 2540896}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Bamako\", \"start\": 2540896, \"end\": 2541026}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Bangui\", \"start\": 2541026, \"end\": 2541206}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Banjul\", \"start\": 2541206, \"end\": 2541336}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Bissau\", \"start\": 2541336, \"end\": 2541485}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Blantyre\", \"start\": 2541485, \"end\": 2541616}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Brazzaville\", \"start\": 2541616, \"end\": 2541796}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Bujumbura\", \"start\": 2541796, \"end\": 2541927}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Cairo\", \"start\": 2541927, \"end\": 2543236}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Casablanca\", \"start\": 2543236, \"end\": 2545155}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Ceuta\", \"start\": 2545155, \"end\": 2545717}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Conakry\", \"start\": 2545717, \"end\": 2545847}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Dakar\", \"start\": 2545847, \"end\": 2545977}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Dar_es_Salaam\", \"start\": 2545977, \"end\": 2546168}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Djibouti\", \"start\": 2546168, \"end\": 2546359}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Douala\", \"start\": 2546359, \"end\": 2546539}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/El_Aaiun\", \"start\": 2546539, \"end\": 2548369}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Freetown\", \"start\": 2548369, \"end\": 2548499}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Gaborone\", \"start\": 2548499, \"end\": 2548630}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Harare\", \"start\": 2548630, \"end\": 2548761}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Johannesburg\", \"start\": 2548761, \"end\": 2548951}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Juba\", \"start\": 2548951, \"end\": 2549409}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Kampala\", \"start\": 2549409, \"end\": 2549600}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Khartoum\", \"start\": 2549600, \"end\": 2550058}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Kigali\", \"start\": 2550058, \"end\": 2550189}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Kinshasa\", \"start\": 2550189, \"end\": 2550369}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Lagos\", \"start\": 2550369, \"end\": 2550549}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Libreville\", \"start\": 2550549, \"end\": 2550729}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Lome\", \"start\": 2550729, \"end\": 2550859}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Luanda\", \"start\": 2550859, \"end\": 2551039}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Lubumbashi\", \"start\": 2551039, \"end\": 2551170}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Lusaka\", \"start\": 2551170, \"end\": 2551301}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Malabo\", \"start\": 2551301, \"end\": 2551481}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Maputo\", \"start\": 2551481, \"end\": 2551612}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Maseru\", \"start\": 2551612, \"end\": 2551802}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Mbabane\", \"start\": 2551802, \"end\": 2551992}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Mogadishu\", \"start\": 2551992, \"end\": 2552183}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Monrovia\", \"start\": 2552183, \"end\": 2552347}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Nairobi\", \"start\": 2552347, \"end\": 2552538}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Ndjamena\", \"start\": 2552538, \"end\": 2552698}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Niamey\", \"start\": 2552698, \"end\": 2552878}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Nouakchott\", \"start\": 2552878, \"end\": 2553008}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Ouagadougou\", \"start\": 2553008, \"end\": 2553138}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Porto-Novo\", \"start\": 2553138, \"end\": 2553318}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Sao_Tome\", \"start\": 2553318, \"end\": 2553491}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Timbuktu\", \"start\": 2553491, \"end\": 2553621}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Tripoli\", \"start\": 2553621, \"end\": 2554052}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Tunis\", \"start\": 2554052, \"end\": 2554501}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Africa/Windhoek\", \"start\": 2554501, \"end\": 2555139}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Adak\", \"start\": 2555139, \"end\": 2556108}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Anchorage\", \"start\": 2556108, \"end\": 2557085}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Anguilla\", \"start\": 2557085, \"end\": 2557262}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Antigua\", \"start\": 2557262, \"end\": 2557439}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Araguaina\", \"start\": 2557439, \"end\": 2558031}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Buenos_Aires\", \"start\": 2558031, \"end\": 2558739}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Catamarca\", \"start\": 2558739, \"end\": 2559447}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/ComodRivadavia\", \"start\": 2559447, \"end\": 2560155}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Cordoba\", \"start\": 2560155, \"end\": 2560863}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Jujuy\", \"start\": 2560863, \"end\": 2561553}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/La_Rioja\", \"start\": 2561553, \"end\": 2562270}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Mendoza\", \"start\": 2562270, \"end\": 2562978}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Rio_Gallegos\", \"start\": 2562978, \"end\": 2563686}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Salta\", \"start\": 2563686, \"end\": 2564376}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/San_Juan\", \"start\": 2564376, \"end\": 2565093}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/San_Luis\", \"start\": 2565093, \"end\": 2565810}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Tucuman\", \"start\": 2565810, \"end\": 2566536}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Argentina/Ushuaia\", \"start\": 2566536, \"end\": 2567244}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Aruba\", \"start\": 2567244, \"end\": 2567421}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Asuncion\", \"start\": 2567421, \"end\": 2568305}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Atikokan\", \"start\": 2568305, \"end\": 2568454}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Atka\", \"start\": 2568454, \"end\": 2569423}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Bahia\", \"start\": 2569423, \"end\": 2570105}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Bahia_Banderas\", \"start\": 2570105, \"end\": 2570833}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Barbados\", \"start\": 2570833, \"end\": 2571111}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Belem\", \"start\": 2571111, \"end\": 2571505}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Belize\", \"start\": 2571505, \"end\": 2572550}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Blanc-Sablon\", \"start\": 2572550, \"end\": 2572727}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Boa_Vista\", \"start\": 2572727, \"end\": 2573157}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Bogota\", \"start\": 2573157, \"end\": 2573336}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Boise\", \"start\": 2573336, \"end\": 2574335}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Buenos_Aires\", \"start\": 2574335, \"end\": 2575043}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Cambridge_Bay\", \"start\": 2575043, \"end\": 2575926}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Campo_Grande\", \"start\": 2575926, \"end\": 2576878}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Cancun\", \"start\": 2576878, \"end\": 2577407}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Caracas\", \"start\": 2577407, \"end\": 2577597}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Catamarca\", \"start\": 2577597, \"end\": 2578305}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Cayenne\", \"start\": 2578305, \"end\": 2578456}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Cayman\", \"start\": 2578456, \"end\": 2578605}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Chicago\", \"start\": 2578605, \"end\": 2580359}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Chihuahua\", \"start\": 2580359, \"end\": 2581050}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Ciudad_Juarez\", \"start\": 2581050, \"end\": 2581768}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Coral_Harbour\", \"start\": 2581768, \"end\": 2581917}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Cordoba\", \"start\": 2581917, \"end\": 2582625}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Costa_Rica\", \"start\": 2582625, \"end\": 2582857}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Creston\", \"start\": 2582857, \"end\": 2583097}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Cuiaba\", \"start\": 2583097, \"end\": 2584031}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Curacao\", \"start\": 2584031, \"end\": 2584208}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Danmarkshavn\", \"start\": 2584208, \"end\": 2584655}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Dawson\", \"start\": 2584655, \"end\": 2585684}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Dawson_Creek\", \"start\": 2585684, \"end\": 2586367}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Denver\", \"start\": 2586367, \"end\": 2587409}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Detroit\", \"start\": 2587409, \"end\": 2588308}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Dominica\", \"start\": 2588308, \"end\": 2588485}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Edmonton\", \"start\": 2588485, \"end\": 2589455}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Eirunepe\", \"start\": 2589455, \"end\": 2589891}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/El_Salvador\", \"start\": 2589891, \"end\": 2590067}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Ensenada\", \"start\": 2590067, \"end\": 2591092}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Fort_Nelson\", \"start\": 2591092, \"end\": 2592540}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Fort_Wayne\", \"start\": 2592540, \"end\": 2593071}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Fortaleza\", \"start\": 2593071, \"end\": 2593555}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Glace_Bay\", \"start\": 2593555, \"end\": 2594435}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Godthab\", \"start\": 2594435, \"end\": 2595400}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Goose_Bay\", \"start\": 2595400, \"end\": 2596980}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Grand_Turk\", \"start\": 2596980, \"end\": 2597833}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Grenada\", \"start\": 2597833, \"end\": 2598010}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Guadeloupe\", \"start\": 2598010, \"end\": 2598187}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Guatemala\", \"start\": 2598187, \"end\": 2598399}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Guayaquil\", \"start\": 2598399, \"end\": 2598578}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Guyana\", \"start\": 2598578, \"end\": 2598759}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Halifax\", \"start\": 2598759, \"end\": 2600431}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Havana\", \"start\": 2600431, \"end\": 2601548}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Hermosillo\", \"start\": 2601548, \"end\": 2601834}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Indianapolis\", \"start\": 2601834, \"end\": 2602365}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Knox\", \"start\": 2602365, \"end\": 2603381}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Marengo\", \"start\": 2603381, \"end\": 2603948}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Petersburg\", \"start\": 2603948, \"end\": 2604631}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Tell_City\", \"start\": 2604631, \"end\": 2605153}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Vevay\", \"start\": 2605153, \"end\": 2605522}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Vincennes\", \"start\": 2605522, \"end\": 2606080}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indiana/Winamac\", \"start\": 2606080, \"end\": 2606692}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Indianapolis\", \"start\": 2606692, \"end\": 2607223}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Inuvik\", \"start\": 2607223, \"end\": 2608040}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Iqaluit\", \"start\": 2608040, \"end\": 2608895}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Jamaica\", \"start\": 2608895, \"end\": 2609234}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Jujuy\", \"start\": 2609234, \"end\": 2609924}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Juneau\", \"start\": 2609924, \"end\": 2610890}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Kentucky/Louisville\", \"start\": 2610890, \"end\": 2612132}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Kentucky/Monticello\", \"start\": 2612132, \"end\": 2613104}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Knox_IN\", \"start\": 2613104, \"end\": 2614120}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Kralendijk\", \"start\": 2614120, \"end\": 2614297}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/La_Paz\", \"start\": 2614297, \"end\": 2614467}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Lima\", \"start\": 2614467, \"end\": 2614750}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Los_Angeles\", \"start\": 2614750, \"end\": 2616044}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Louisville\", \"start\": 2616044, \"end\": 2617286}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Lower_Princes\", \"start\": 2617286, \"end\": 2617463}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Maceio\", \"start\": 2617463, \"end\": 2617965}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Managua\", \"start\": 2617965, \"end\": 2618260}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Manaus\", \"start\": 2618260, \"end\": 2618672}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Marigot\", \"start\": 2618672, \"end\": 2618849}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Martinique\", \"start\": 2618849, \"end\": 2619027}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Matamoros\", \"start\": 2619027, \"end\": 2619464}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Mazatlan\", \"start\": 2619464, \"end\": 2620182}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Mendoza\", \"start\": 2620182, \"end\": 2620890}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Menominee\", \"start\": 2620890, \"end\": 2621807}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Merida\", \"start\": 2621807, \"end\": 2622461}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Metlakatla\", \"start\": 2622461, \"end\": 2623056}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Mexico_City\", \"start\": 2623056, \"end\": 2623829}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Miquelon\", \"start\": 2623829, \"end\": 2624379}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Moncton\", \"start\": 2624379, \"end\": 2625872}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Monterrey\", \"start\": 2625872, \"end\": 2626516}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Montevideo\", \"start\": 2626516, \"end\": 2627485}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Montreal\", \"start\": 2627485, \"end\": 2629202}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Montserrat\", \"start\": 2629202, \"end\": 2629379}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Nassau\", \"start\": 2629379, \"end\": 2631096}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/New_York\", \"start\": 2631096, \"end\": 2632840}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Nipigon\", \"start\": 2632840, \"end\": 2634557}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Nome\", \"start\": 2634557, \"end\": 2635532}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Noronha\", \"start\": 2635532, \"end\": 2636016}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/North_Dakota/Beulah\", \"start\": 2636016, \"end\": 2637059}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/North_Dakota/Center\", \"start\": 2637059, \"end\": 2638049}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/North_Dakota/New_Salem\", \"start\": 2638049, \"end\": 2639039}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Nuuk\", \"start\": 2639039, \"end\": 2640004}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Ojinaga\", \"start\": 2640004, \"end\": 2640713}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Panama\", \"start\": 2640713, \"end\": 2640862}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Pangnirtung\", \"start\": 2640862, \"end\": 2641717}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Paramaribo\", \"start\": 2641717, \"end\": 2641904}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Phoenix\", \"start\": 2641904, \"end\": 2642144}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Port-au-Prince\", \"start\": 2642144, \"end\": 2642709}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Port_of_Spain\", \"start\": 2642709, \"end\": 2642886}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Porto_Acre\", \"start\": 2642886, \"end\": 2643304}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Porto_Velho\", \"start\": 2643304, \"end\": 2643698}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Puerto_Rico\", \"start\": 2643698, \"end\": 2643875}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Punta_Arenas\", \"start\": 2643875, \"end\": 2645093}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Rainy_River\", \"start\": 2645093, \"end\": 2646387}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Rankin_Inlet\", \"start\": 2646387, \"end\": 2647194}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Recife\", \"start\": 2647194, \"end\": 2647678}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Regina\", \"start\": 2647678, \"end\": 2648316}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Resolute\", \"start\": 2648316, \"end\": 2649123}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Rio_Branco\", \"start\": 2649123, \"end\": 2649541}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Rosario\", \"start\": 2649541, \"end\": 2650249}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Santa_Isabel\", \"start\": 2650249, \"end\": 2651274}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Santarem\", \"start\": 2651274, \"end\": 2651683}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Santiago\", \"start\": 2651683, \"end\": 2653037}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Santo_Domingo\", \"start\": 2653037, \"end\": 2653354}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Sao_Paulo\", \"start\": 2653354, \"end\": 2654306}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Scoresbysund\", \"start\": 2654306, \"end\": 2655290}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Shiprock\", \"start\": 2655290, \"end\": 2656332}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Sitka\", \"start\": 2656332, \"end\": 2657288}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/St_Barthelemy\", \"start\": 2657288, \"end\": 2657465}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/St_Johns\", \"start\": 2657465, \"end\": 2659343}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/St_Kitts\", \"start\": 2659343, \"end\": 2659520}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/St_Lucia\", \"start\": 2659520, \"end\": 2659697}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/St_Thomas\", \"start\": 2659697, \"end\": 2659874}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/St_Vincent\", \"start\": 2659874, \"end\": 2660051}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Swift_Current\", \"start\": 2660051, \"end\": 2660419}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Tegucigalpa\", \"start\": 2660419, \"end\": 2660613}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Thule\", \"start\": 2660613, \"end\": 2661068}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Thunder_Bay\", \"start\": 2661068, \"end\": 2662785}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Tijuana\", \"start\": 2662785, \"end\": 2663810}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Toronto\", \"start\": 2663810, \"end\": 2665527}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Tortola\", \"start\": 2665527, \"end\": 2665704}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Vancouver\", \"start\": 2665704, \"end\": 2667034}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Virgin\", \"start\": 2667034, \"end\": 2667211}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Whitehorse\", \"start\": 2667211, \"end\": 2668240}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Winnipeg\", \"start\": 2668240, \"end\": 2669534}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Yakutat\", \"start\": 2669534, \"end\": 2670480}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/America/Yellowknife\", \"start\": 2670480, \"end\": 2671450}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Casey\", \"start\": 2671450, \"end\": 2671737}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Davis\", \"start\": 2671737, \"end\": 2671934}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/DumontDUrville\", \"start\": 2671934, \"end\": 2672088}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Macquarie\", \"start\": 2672088, \"end\": 2673064}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Mawson\", \"start\": 2673064, \"end\": 2673216}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/McMurdo\", \"start\": 2673216, \"end\": 2674259}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Palmer\", \"start\": 2674259, \"end\": 2675146}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Rothera\", \"start\": 2675146, \"end\": 2675278}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/South_Pole\", \"start\": 2675278, \"end\": 2676321}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Syowa\", \"start\": 2676321, \"end\": 2676454}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Troll\", \"start\": 2676454, \"end\": 2676631}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Antarctica/Vostok\", \"start\": 2676631, \"end\": 2676801}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Arctic/Longyearbyen\", \"start\": 2676801, \"end\": 2677506}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Aden\", \"start\": 2677506, \"end\": 2677639}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Almaty\", \"start\": 2677639, \"end\": 2678257}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Amman\", \"start\": 2678257, \"end\": 2679185}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Anadyr\", \"start\": 2679185, \"end\": 2679928}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Aqtau\", \"start\": 2679928, \"end\": 2680534}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Aqtobe\", \"start\": 2680534, \"end\": 2681149}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Ashgabat\", \"start\": 2681149, \"end\": 2681524}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Ashkhabad\", \"start\": 2681524, \"end\": 2681899}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Atyrau\", \"start\": 2681899, \"end\": 2682515}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Baghdad\", \"start\": 2682515, \"end\": 2683145}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Bahrain\", \"start\": 2683145, \"end\": 2683297}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Baku\", \"start\": 2683297, \"end\": 2684041}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Bangkok\", \"start\": 2684041, \"end\": 2684193}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Barnaul\", \"start\": 2684193, \"end\": 2684946}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Beirut\", \"start\": 2684946, \"end\": 2685678}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Bishkek\", \"start\": 2685678, \"end\": 2686296}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Brunei\", \"start\": 2686296, \"end\": 2686616}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Calcutta\", \"start\": 2686616, \"end\": 2686836}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Chita\", \"start\": 2686836, \"end\": 2687586}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Choibalsan\", \"start\": 2687586, \"end\": 2688205}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Chongqing\", \"start\": 2688205, \"end\": 2688598}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Chungking\", \"start\": 2688598, \"end\": 2688991}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Colombo\", \"start\": 2688991, \"end\": 2689238}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Dacca\", \"start\": 2689238, \"end\": 2689469}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Damascus\", \"start\": 2689469, \"end\": 2690703}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Dhaka\", \"start\": 2690703, \"end\": 2690934}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Dili\", \"start\": 2690934, \"end\": 2691104}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Dubai\", \"start\": 2691104, \"end\": 2691237}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Dushanbe\", \"start\": 2691237, \"end\": 2691603}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Famagusta\", \"start\": 2691603, \"end\": 2692543}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Gaza\", \"start\": 2692543, \"end\": 2694989}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Harbin\", \"start\": 2694989, \"end\": 2695382}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Hebron\", \"start\": 2695382, \"end\": 2697846}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Ho_Chi_Minh\", \"start\": 2697846, \"end\": 2698082}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Hong_Kong\", \"start\": 2698082, \"end\": 2698857}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Hovd\", \"start\": 2698857, \"end\": 2699451}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Irkutsk\", \"start\": 2699451, \"end\": 2700211}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Istanbul\", \"start\": 2700211, \"end\": 2701411}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Jakarta\", \"start\": 2701411, \"end\": 2701659}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Jayapura\", \"start\": 2701659, \"end\": 2701830}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Jerusalem\", \"start\": 2701830, \"end\": 2702904}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kabul\", \"start\": 2702904, \"end\": 2703063}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kamchatka\", \"start\": 2703063, \"end\": 2703790}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Karachi\", \"start\": 2703790, \"end\": 2704056}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kashgar\", \"start\": 2704056, \"end\": 2704189}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kathmandu\", \"start\": 2704189, \"end\": 2704350}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Katmandu\", \"start\": 2704350, \"end\": 2704511}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Khandyga\", \"start\": 2704511, \"end\": 2705286}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kolkata\", \"start\": 2705286, \"end\": 2705506}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Krasnoyarsk\", \"start\": 2705506, \"end\": 2706247}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kuala_Lumpur\", \"start\": 2706247, \"end\": 2706503}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kuching\", \"start\": 2706503, \"end\": 2706823}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Kuwait\", \"start\": 2706823, \"end\": 2706956}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Macao\", \"start\": 2706956, \"end\": 2707747}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Macau\", \"start\": 2707747, \"end\": 2708538}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Magadan\", \"start\": 2708538, \"end\": 2709289}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Makassar\", \"start\": 2709289, \"end\": 2709479}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Manila\", \"start\": 2709479, \"end\": 2709717}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Muscat\", \"start\": 2709717, \"end\": 2709850}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Nicosia\", \"start\": 2709850, \"end\": 2710447}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Novokuznetsk\", \"start\": 2710447, \"end\": 2711173}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Novosibirsk\", \"start\": 2711173, \"end\": 2711926}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Omsk\", \"start\": 2711926, \"end\": 2712667}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Oral\", \"start\": 2712667, \"end\": 2713292}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Phnom_Penh\", \"start\": 2713292, \"end\": 2713444}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Pontianak\", \"start\": 2713444, \"end\": 2713691}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Pyongyang\", \"start\": 2713691, \"end\": 2713874}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Qatar\", \"start\": 2713874, \"end\": 2714026}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Qostanay\", \"start\": 2714026, \"end\": 2714650}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Qyzylorda\", \"start\": 2714650, \"end\": 2715274}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Rangoon\", \"start\": 2715274, \"end\": 2715461}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Riyadh\", \"start\": 2715461, \"end\": 2715594}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Saigon\", \"start\": 2715594, \"end\": 2715830}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Sakhalin\", \"start\": 2715830, \"end\": 2716585}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Samarkand\", \"start\": 2716585, \"end\": 2716951}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Seoul\", \"start\": 2716951, \"end\": 2717366}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Shanghai\", \"start\": 2717366, \"end\": 2717759}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Singapore\", \"start\": 2717759, \"end\": 2718015}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Srednekolymsk\", \"start\": 2718015, \"end\": 2718757}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Taipei\", \"start\": 2718757, \"end\": 2719268}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Tashkent\", \"start\": 2719268, \"end\": 2719634}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Tbilisi\", \"start\": 2719634, \"end\": 2720263}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Tehran\", \"start\": 2720263, \"end\": 2721075}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Tel_Aviv\", \"start\": 2721075, \"end\": 2722149}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Thimbu\", \"start\": 2722149, \"end\": 2722303}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Thimphu\", \"start\": 2722303, \"end\": 2722457}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Tokyo\", \"start\": 2722457, \"end\": 2722670}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Tomsk\", \"start\": 2722670, \"end\": 2723423}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Ujung_Pandang\", \"start\": 2723423, \"end\": 2723613}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Ulaanbaatar\", \"start\": 2723613, \"end\": 2724207}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Ulan_Bator\", \"start\": 2724207, \"end\": 2724801}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Urumqi\", \"start\": 2724801, \"end\": 2724934}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Ust-Nera\", \"start\": 2724934, \"end\": 2725705}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Vientiane\", \"start\": 2725705, \"end\": 2725857}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Vladivostok\", \"start\": 2725857, \"end\": 2726599}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Yakutsk\", \"start\": 2726599, \"end\": 2727340}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Yangon\", \"start\": 2727340, \"end\": 2727527}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Yekaterinburg\", \"start\": 2727527, \"end\": 2728287}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Asia/Yerevan\", \"start\": 2728287, \"end\": 2728995}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Azores\", \"start\": 2728995, \"end\": 2730448}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Bermuda\", \"start\": 2730448, \"end\": 2731472}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Canary\", \"start\": 2731472, \"end\": 2731950}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Cape_Verde\", \"start\": 2731950, \"end\": 2732125}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Faeroe\", \"start\": 2732125, \"end\": 2732566}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Faroe\", \"start\": 2732566, \"end\": 2733007}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Jan_Mayen\", \"start\": 2733007, \"end\": 2733712}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Madeira\", \"start\": 2733712, \"end\": 2735165}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Reykjavik\", \"start\": 2735165, \"end\": 2735295}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/South_Georgia\", \"start\": 2735295, \"end\": 2735427}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/St_Helena\", \"start\": 2735427, \"end\": 2735557}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Atlantic/Stanley\", \"start\": 2735557, \"end\": 2736346}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/ACT\", \"start\": 2736346, \"end\": 2737250}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Adelaide\", \"start\": 2737250, \"end\": 2738171}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Brisbane\", \"start\": 2738171, \"end\": 2738460}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Broken_Hill\", \"start\": 2738460, \"end\": 2739401}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Canberra\", \"start\": 2739401, \"end\": 2740305}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Currie\", \"start\": 2740305, \"end\": 2741308}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Darwin\", \"start\": 2741308, \"end\": 2741542}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Eucla\", \"start\": 2741542, \"end\": 2741856}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Hobart\", \"start\": 2741856, \"end\": 2742859}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/LHI\", \"start\": 2742859, \"end\": 2743551}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Lindeman\", \"start\": 2743551, \"end\": 2743876}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Lord_Howe\", \"start\": 2743876, \"end\": 2744568}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Melbourne\", \"start\": 2744568, \"end\": 2745472}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/NSW\", \"start\": 2745472, \"end\": 2746376}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/North\", \"start\": 2746376, \"end\": 2746610}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Perth\", \"start\": 2746610, \"end\": 2746916}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Queensland\", \"start\": 2746916, \"end\": 2747205}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/South\", \"start\": 2747205, \"end\": 2748126}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Sydney\", \"start\": 2748126, \"end\": 2749030}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Tasmania\", \"start\": 2749030, \"end\": 2750033}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Victoria\", \"start\": 2750033, \"end\": 2750937}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/West\", \"start\": 2750937, \"end\": 2751243}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Australia/Yancowinna\", \"start\": 2751243, \"end\": 2752184}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Brazil/Acre\", \"start\": 2752184, \"end\": 2752602}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Brazil/DeNoronha\", \"start\": 2752602, \"end\": 2753086}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Brazil/East\", \"start\": 2753086, \"end\": 2754038}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Brazil/West\", \"start\": 2754038, \"end\": 2754450}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/CET\", \"start\": 2754450, \"end\": 2755071}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/CST6CDT\", \"start\": 2755071, \"end\": 2756022}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Atlantic\", \"start\": 2756022, \"end\": 2757694}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Central\", \"start\": 2757694, \"end\": 2758988}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Eastern\", \"start\": 2758988, \"end\": 2760705}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Mountain\", \"start\": 2760705, \"end\": 2761675}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Newfoundland\", \"start\": 2761675, \"end\": 2763553}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Pacific\", \"start\": 2763553, \"end\": 2764883}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Saskatchewan\", \"start\": 2764883, \"end\": 2765521}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Canada/Yukon\", \"start\": 2765521, \"end\": 2766550}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Chile/Continental\", \"start\": 2766550, \"end\": 2767904}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Chile/EasterIsland\", \"start\": 2767904, \"end\": 2769078}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Cuba\", \"start\": 2769078, \"end\": 2770195}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/EET\", \"start\": 2770195, \"end\": 2770692}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/EST\", \"start\": 2770692, \"end\": 2770803}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/EST5EDT\", \"start\": 2770803, \"end\": 2771754}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Egypt\", \"start\": 2771754, \"end\": 2773063}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Eire\", \"start\": 2773063, \"end\": 2774559}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT\", \"start\": 2774559, \"end\": 2774670}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+0\", \"start\": 2774670, \"end\": 2774781}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+1\", \"start\": 2774781, \"end\": 2774894}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+10\", \"start\": 2774894, \"end\": 2775008}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+11\", \"start\": 2775008, \"end\": 2775122}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+12\", \"start\": 2775122, \"end\": 2775236}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+2\", \"start\": 2775236, \"end\": 2775349}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+3\", \"start\": 2775349, \"end\": 2775462}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+4\", \"start\": 2775462, \"end\": 2775575}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+5\", \"start\": 2775575, \"end\": 2775688}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+6\", \"start\": 2775688, \"end\": 2775801}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+7\", \"start\": 2775801, \"end\": 2775914}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+8\", \"start\": 2775914, \"end\": 2776027}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT+9\", \"start\": 2776027, \"end\": 2776140}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-0\", \"start\": 2776140, \"end\": 2776251}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-1\", \"start\": 2776251, \"end\": 2776365}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-10\", \"start\": 2776365, \"end\": 2776480}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-11\", \"start\": 2776480, \"end\": 2776595}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-12\", \"start\": 2776595, \"end\": 2776710}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-13\", \"start\": 2776710, \"end\": 2776825}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-14\", \"start\": 2776825, \"end\": 2776940}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-2\", \"start\": 2776940, \"end\": 2777054}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-3\", \"start\": 2777054, \"end\": 2777168}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-4\", \"start\": 2777168, \"end\": 2777282}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-5\", \"start\": 2777282, \"end\": 2777396}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-6\", \"start\": 2777396, \"end\": 2777510}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-7\", \"start\": 2777510, \"end\": 2777624}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-8\", \"start\": 2777624, \"end\": 2777738}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT-9\", \"start\": 2777738, \"end\": 2777852}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/GMT0\", \"start\": 2777852, \"end\": 2777963}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/Greenwich\", \"start\": 2777963, \"end\": 2778074}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/UCT\", \"start\": 2778074, \"end\": 2778185}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/UTC\", \"start\": 2778185, \"end\": 2778296}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/Universal\", \"start\": 2778296, \"end\": 2778407}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Etc/Zulu\", \"start\": 2778407, \"end\": 2778518}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Amsterdam\", \"start\": 2778518, \"end\": 2779621}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Andorra\", \"start\": 2779621, \"end\": 2780010}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Astrakhan\", \"start\": 2780010, \"end\": 2780736}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Athens\", \"start\": 2780736, \"end\": 2781418}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Belfast\", \"start\": 2781418, \"end\": 2783017}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Belgrade\", \"start\": 2783017, \"end\": 2783495}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Berlin\", \"start\": 2783495, \"end\": 2784200}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Bratislava\", \"start\": 2784200, \"end\": 2784923}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Brussels\", \"start\": 2784923, \"end\": 2786026}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Bucharest\", \"start\": 2786026, \"end\": 2786687}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Budapest\", \"start\": 2786687, \"end\": 2787453}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Busingen\", \"start\": 2787453, \"end\": 2787950}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Chisinau\", \"start\": 2787950, \"end\": 2788705}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Copenhagen\", \"start\": 2788705, \"end\": 2789410}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Dublin\", \"start\": 2789410, \"end\": 2790906}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Gibraltar\", \"start\": 2790906, \"end\": 2792126}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Guernsey\", \"start\": 2792126, \"end\": 2793725}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Helsinki\", \"start\": 2793725, \"end\": 2794206}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Isle_of_Man\", \"start\": 2794206, \"end\": 2795805}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Istanbul\", \"start\": 2795805, \"end\": 2797005}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Jersey\", \"start\": 2797005, \"end\": 2798604}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Kaliningrad\", \"start\": 2798604, \"end\": 2799508}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Kiev\", \"start\": 2799508, \"end\": 2800066}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Kirov\", \"start\": 2800066, \"end\": 2800801}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Kyiv\", \"start\": 2800801, \"end\": 2801359}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Lisbon\", \"start\": 2801359, \"end\": 2802813}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Ljubljana\", \"start\": 2802813, \"end\": 2803291}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/London\", \"start\": 2803291, \"end\": 2804890}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Luxembourg\", \"start\": 2804890, \"end\": 2805993}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Madrid\", \"start\": 2805993, \"end\": 2806890}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Malta\", \"start\": 2806890, \"end\": 2807818}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Mariehamn\", \"start\": 2807818, \"end\": 2808299}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Minsk\", \"start\": 2808299, \"end\": 2809107}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Monaco\", \"start\": 2809107, \"end\": 2810212}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Moscow\", \"start\": 2810212, \"end\": 2811120}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Nicosia\", \"start\": 2811120, \"end\": 2811717}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Oslo\", \"start\": 2811717, \"end\": 2812422}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Paris\", \"start\": 2812422, \"end\": 2813527}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Podgorica\", \"start\": 2813527, \"end\": 2814005}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Prague\", \"start\": 2814005, \"end\": 2814728}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Riga\", \"start\": 2814728, \"end\": 2815422}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Rome\", \"start\": 2815422, \"end\": 2816369}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Samara\", \"start\": 2816369, \"end\": 2817101}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/San_Marino\", \"start\": 2817101, \"end\": 2818048}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Sarajevo\", \"start\": 2818048, \"end\": 2818526}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Saratov\", \"start\": 2818526, \"end\": 2819252}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Simferopol\", \"start\": 2819252, \"end\": 2820117}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Skopje\", \"start\": 2820117, \"end\": 2820595}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Sofia\", \"start\": 2820595, \"end\": 2821187}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Stockholm\", \"start\": 2821187, \"end\": 2821892}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Tallinn\", \"start\": 2821892, \"end\": 2822567}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Tirane\", \"start\": 2822567, \"end\": 2823171}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Tiraspol\", \"start\": 2823171, \"end\": 2823926}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Ulyanovsk\", \"start\": 2823926, \"end\": 2824686}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Uzhgorod\", \"start\": 2824686, \"end\": 2825244}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Vaduz\", \"start\": 2825244, \"end\": 2825741}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Vatican\", \"start\": 2825741, \"end\": 2826688}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Vienna\", \"start\": 2826688, \"end\": 2827346}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Vilnius\", \"start\": 2827346, \"end\": 2828022}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Volgograd\", \"start\": 2828022, \"end\": 2828775}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Warsaw\", \"start\": 2828775, \"end\": 2829698}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Zagreb\", \"start\": 2829698, \"end\": 2830176}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Zaporozhye\", \"start\": 2830176, \"end\": 2830734}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Europe/Zurich\", \"start\": 2830734, \"end\": 2831231}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Factory\", \"start\": 2831231, \"end\": 2831344}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/GB\", \"start\": 2831344, \"end\": 2832943}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/GB-Eire\", \"start\": 2832943, \"end\": 2834542}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/GMT\", \"start\": 2834542, \"end\": 2834653}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/GMT+0\", \"start\": 2834653, \"end\": 2834764}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/GMT-0\", \"start\": 2834764, \"end\": 2834875}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/GMT0\", \"start\": 2834875, \"end\": 2834986}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Greenwich\", \"start\": 2834986, \"end\": 2835097}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/HST\", \"start\": 2835097, \"end\": 2835209}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Hongkong\", \"start\": 2835209, \"end\": 2835984}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Iceland\", \"start\": 2835984, \"end\": 2836114}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Antananarivo\", \"start\": 2836114, \"end\": 2836305}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Chagos\", \"start\": 2836305, \"end\": 2836457}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Christmas\", \"start\": 2836457, \"end\": 2836609}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Cocos\", \"start\": 2836609, \"end\": 2836796}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Comoro\", \"start\": 2836796, \"end\": 2836987}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Kerguelen\", \"start\": 2836987, \"end\": 2837139}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Mahe\", \"start\": 2837139, \"end\": 2837272}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Maldives\", \"start\": 2837272, \"end\": 2837424}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Mauritius\", \"start\": 2837424, \"end\": 2837603}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Mayotte\", \"start\": 2837603, \"end\": 2837794}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Indian/Reunion\", \"start\": 2837794, \"end\": 2837927}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Iran\", \"start\": 2837927, \"end\": 2838739}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Israel\", \"start\": 2838739, \"end\": 2839813}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Jamaica\", \"start\": 2839813, \"end\": 2840152}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Japan\", \"start\": 2840152, \"end\": 2840365}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Kwajalein\", \"start\": 2840365, \"end\": 2840584}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Libya\", \"start\": 2840584, \"end\": 2841015}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/MET\", \"start\": 2841015, \"end\": 2841636}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/MST\", \"start\": 2841636, \"end\": 2841747}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/MST7MDT\", \"start\": 2841747, \"end\": 2842698}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Mexico/BajaNorte\", \"start\": 2842698, \"end\": 2843723}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Mexico/BajaSur\", \"start\": 2843723, \"end\": 2844441}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Mexico/General\", \"start\": 2844441, \"end\": 2845214}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/NZ\", \"start\": 2845214, \"end\": 2846257}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/NZ-CHAT\", \"start\": 2846257, \"end\": 2847065}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Navajo\", \"start\": 2847065, \"end\": 2848107}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/PRC\", \"start\": 2848107, \"end\": 2848500}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/PST8PDT\", \"start\": 2848500, \"end\": 2849451}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Apia\", \"start\": 2849451, \"end\": 2849858}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Auckland\", \"start\": 2849858, \"end\": 2850901}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Bougainville\", \"start\": 2850901, \"end\": 2851102}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Chatham\", \"start\": 2851102, \"end\": 2851910}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Chuuk\", \"start\": 2851910, \"end\": 2852064}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Easter\", \"start\": 2852064, \"end\": 2853238}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Efate\", \"start\": 2853238, \"end\": 2853580}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Enderbury\", \"start\": 2853580, \"end\": 2853752}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Fakaofo\", \"start\": 2853752, \"end\": 2853905}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Fiji\", \"start\": 2853905, \"end\": 2854301}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Funafuti\", \"start\": 2854301, \"end\": 2854435}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Galapagos\", \"start\": 2854435, \"end\": 2854610}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Gambier\", \"start\": 2854610, \"end\": 2854742}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Guadalcanal\", \"start\": 2854742, \"end\": 2854876}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Guam\", \"start\": 2854876, \"end\": 2855226}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Honolulu\", \"start\": 2855226, \"end\": 2855447}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Johnston\", \"start\": 2855447, \"end\": 2855668}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Kanton\", \"start\": 2855668, \"end\": 2855840}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Kiritimati\", \"start\": 2855840, \"end\": 2856014}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Kosrae\", \"start\": 2856014, \"end\": 2856256}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Kwajalein\", \"start\": 2856256, \"end\": 2856475}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Majuro\", \"start\": 2856475, \"end\": 2856609}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Marquesas\", \"start\": 2856609, \"end\": 2856748}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Midway\", \"start\": 2856748, \"end\": 2856894}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Nauru\", \"start\": 2856894, \"end\": 2857077}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Niue\", \"start\": 2857077, \"end\": 2857231}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Norfolk\", \"start\": 2857231, \"end\": 2857478}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Noumea\", \"start\": 2857478, \"end\": 2857676}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Pago_Pago\", \"start\": 2857676, \"end\": 2857822}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Palau\", \"start\": 2857822, \"end\": 2857970}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Pitcairn\", \"start\": 2857970, \"end\": 2858123}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Pohnpei\", \"start\": 2858123, \"end\": 2858257}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Ponape\", \"start\": 2858257, \"end\": 2858391}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Port_Moresby\", \"start\": 2858391, \"end\": 2858545}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Rarotonga\", \"start\": 2858545, \"end\": 2858951}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Saipan\", \"start\": 2858951, \"end\": 2859301}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Samoa\", \"start\": 2859301, \"end\": 2859447}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Tahiti\", \"start\": 2859447, \"end\": 2859580}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Tarawa\", \"start\": 2859580, \"end\": 2859714}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Tongatapu\", \"start\": 2859714, \"end\": 2859951}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Truk\", \"start\": 2859951, \"end\": 2860105}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Wake\", \"start\": 2860105, \"end\": 2860239}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Wallis\", \"start\": 2860239, \"end\": 2860373}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Pacific/Yap\", \"start\": 2860373, \"end\": 2860527}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Poland\", \"start\": 2860527, \"end\": 2861450}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Portugal\", \"start\": 2861450, \"end\": 2862904}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/ROC\", \"start\": 2862904, \"end\": 2863415}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/ROK\", \"start\": 2863415, \"end\": 2863830}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Singapore\", \"start\": 2863830, \"end\": 2864086}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Turkey\", \"start\": 2864086, \"end\": 2865286}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/UCT\", \"start\": 2865286, \"end\": 2865397}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Alaska\", \"start\": 2865397, \"end\": 2866374}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Aleutian\", \"start\": 2866374, \"end\": 2867343}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Arizona\", \"start\": 2867343, \"end\": 2867583}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Central\", \"start\": 2867583, \"end\": 2869337}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/East-Indiana\", \"start\": 2869337, \"end\": 2869868}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Eastern\", \"start\": 2869868, \"end\": 2871612}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Hawaii\", \"start\": 2871612, \"end\": 2871833}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Indiana-Starke\", \"start\": 2871833, \"end\": 2872849}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Michigan\", \"start\": 2872849, \"end\": 2873748}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Mountain\", \"start\": 2873748, \"end\": 2874790}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Pacific\", \"start\": 2874790, \"end\": 2876084}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/US/Samoa\", \"start\": 2876084, \"end\": 2876230}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/UTC\", \"start\": 2876230, \"end\": 2876341}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Universal\", \"start\": 2876341, \"end\": 2876452}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/W-SU\", \"start\": 2876452, \"end\": 2877360}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/WET\", \"start\": 2877360, \"end\": 2877854}, {\"filename\": \"/tmp/pglite/share/postgresql/timezone/Zulu\", \"start\": 2877854, \"end\": 2877965}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Africa.txt\", \"start\": 2877965, \"end\": 2884938}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/America.txt\", \"start\": 2884938, \"end\": 2895945}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Antarctica.txt\", \"start\": 2895945, \"end\": 2897079}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Asia.txt\", \"start\": 2897079, \"end\": 2905390}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Atlantic.txt\", \"start\": 2905390, \"end\": 2908923}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Australia\", \"start\": 2908923, \"end\": 2910058}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Australia.txt\", \"start\": 2910058, \"end\": 2913442}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Default\", \"start\": 2913442, \"end\": 2940692}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Etc.txt\", \"start\": 2940692, \"end\": 2941942}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Europe.txt\", \"start\": 2941942, \"end\": 2950724}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/India\", \"start\": 2950724, \"end\": 2951317}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Indian.txt\", \"start\": 2951317, \"end\": 2952578}, {\"filename\": \"/tmp/pglite/share/postgresql/timezonesets/Pacific.txt\", \"start\": 2952578, \"end\": 2956346}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/danish.stop\", \"start\": 2956346, \"end\": 2956770}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/dutch.stop\", \"start\": 2956770, \"end\": 2957223}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/english.stop\", \"start\": 2957223, \"end\": 2957845}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/finnish.stop\", \"start\": 2957845, \"end\": 2959424}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/french.stop\", \"start\": 2959424, \"end\": 2960229}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/german.stop\", \"start\": 2960229, \"end\": 2961578}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/hungarian.stop\", \"start\": 2961578, \"end\": 2962805}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample.affix\", \"start\": 2962805, \"end\": 2963048}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_long.affix\", \"start\": 2963048, \"end\": 2963681}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_long.dict\", \"start\": 2963681, \"end\": 2963779}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_num.affix\", \"start\": 2963779, \"end\": 2964241}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/hunspell_sample_num.dict\", \"start\": 2964241, \"end\": 2964370}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/ispell_sample.affix\", \"start\": 2964370, \"end\": 2964835}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/ispell_sample.dict\", \"start\": 2964835, \"end\": 2964916}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/italian.stop\", \"start\": 2964916, \"end\": 2966570}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/nepali.stop\", \"start\": 2966570, \"end\": 2970831}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/norwegian.stop\", \"start\": 2970831, \"end\": 2971682}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/portuguese.stop\", \"start\": 2971682, \"end\": 2972949}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/russian.stop\", \"start\": 2972949, \"end\": 2974184}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/spanish.stop\", \"start\": 2974184, \"end\": 2976362}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/swedish.stop\", \"start\": 2976362, \"end\": 2976921}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/synonym_sample.syn\", \"start\": 2976921, \"end\": 2976994}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/thesaurus_sample.ths\", \"start\": 2976994, \"end\": 2977467}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/turkish.stop\", \"start\": 2977467, \"end\": 2977727}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/unaccent.rules\", \"start\": 2977727, \"end\": 2987666}, {\"filename\": \"/tmp/pglite/share/postgresql/tsearch_data/xsyn_sample.rules\", \"start\": 2987666, \"end\": 2987805}], \"remote_package_size\": 2987805});\n\n  })();\n\n// end include: /tmp/tmp81o060fh.js\n\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = Object.assign({}, Module);\n\nvar arguments_ = [];\nvar thisProgram = './this.program';\nvar quit_ = (status, toThrow) => {\n  throw toThrow;\n};\n\n// `/` should be present at the end if `scriptDirectory` is not empty\nvar scriptDirectory = '';\nfunction locateFile(path) {\n  if (Module['locateFile']) {\n    return Module['locateFile'](path, scriptDirectory);\n  }\n  return scriptDirectory + path;\n}\n\n// Hooks that are implemented differently in different runtime environments.\nvar readAsync, readBinary;\n\nif (ENVIRONMENT_IS_NODE) {\n\n  // These modules will usually be used on Node.js. Load them eagerly to avoid\n  // the complexity of lazy-loading.\n  var fs = require('fs');\n  var nodePath = require('path');\n\n  // EXPORT_ES6 + ENVIRONMENT_IS_NODE always requires use of import.meta.url,\n  // since there's no way getting the current absolute path of the module when\n  // support for that is not available.\n  if (!import.meta.url.startsWith('data:')) {\n    scriptDirectory = nodePath.dirname(require('url').fileURLToPath(import.meta.url)) + '/';\n  }\n\n// include: node_shell_read.js\nreadBinary = (filename) => {\n  // We need to re-wrap `file://` strings to URLs. Normalizing isn't\n  // necessary in that case, the path should already be absolute.\n  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n  var ret = fs.readFileSync(filename);\n  return ret;\n};\n\nreadAsync = (filename, binary = true) => {\n  // See the comment in the `readBinary` function.\n  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n  return new Promise((resolve, reject) => {\n    fs.readFile(filename, binary ? undefined : 'utf8', (err, data) => {\n      if (err) reject(err);\n      else resolve(binary ? data.buffer : data);\n    });\n  });\n};\n// end include: node_shell_read.js\n  if (!Module['thisProgram'] && process.argv.length > 1) {\n    thisProgram = process.argv[1].replace(/\\\\/g, '/');\n  }\n\n  arguments_ = process.argv.slice(2);\n\n  // MODULARIZE will export the module in the proper place outside, we don't need to export here\n\n  quit_ = (status, toThrow) => {\n    process.exitCode = status;\n    throw toThrow;\n  };\n\n} else\n\n// Note that this includes Node.js workers when relevant (pthreads is enabled).\n// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and\n// ENVIRONMENT_IS_NODE.\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\n    scriptDirectory = self.location.href;\n  } else if (typeof document != 'undefined' && document.currentScript) { // web\n    scriptDirectory = document.currentScript.src;\n  }\n  // When MODULARIZE, this JS may be executed later, after document.currentScript\n  // is gone, so we saved it, and we use it here instead of any other info.\n  if (_scriptName) {\n    scriptDirectory = _scriptName;\n  }\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n  // otherwise, slice off the final part of the url to find the script directory.\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n  // and scriptDirectory will correctly be replaced with an empty string.\n  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),\n  // they are removed because they could contain a slash.\n  if (scriptDirectory.startsWith('blob:')) {\n    scriptDirectory = '';\n  } else {\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);\n  }\n\n  {\n// include: web_or_worker_shell_read.js\nif (ENVIRONMENT_IS_WORKER) {\n    readBinary = (url) => {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.responseType = 'arraybuffer';\n      xhr.send(null);\n      return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));\n    };\n  }\n\n  readAsync = (url) => {\n    // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.\n    // See https://github.com/github/fetch/pull/92#issuecomment-140665932\n    // Cordova or Electron apps are typically loaded from a file:// url.\n    // So use XHR on webview if URL is a file URL.\n    if (isFileURI(url)) {\n      return new Promise((resolve, reject) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onload = () => {\n          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n            resolve(xhr.response);\n            return;\n          }\n          reject(xhr.status);\n        };\n        xhr.onerror = reject;\n        xhr.send(null);\n      });\n    }\n    return fetch(url, { credentials: 'same-origin' })\n      .then((response) => {\n        if (response.ok) {\n          return response.arrayBuffer();\n        }\n        return Promise.reject(new Error(response.status + ' : ' + response.url));\n      })\n  };\n// end include: web_or_worker_shell_read.js\n  }\n} else\n{\n}\n\nvar out = Module['print'] || console.log.bind(console);\nvar err = Module['printErr'] || console.error.bind(console);\n\n// Merge back in the overrides\nObject.assign(Module, moduleOverrides);\n// Free the object hierarchy contained in the overrides, this lets the GC\n// reclaim data used.\nmoduleOverrides = null;\n\n// Emit code to handle expected values on the Module object. This applies Module.x\n// to the proper local x. This has two benefits: first, we only emit it if it is\n// expected to arrive, and second, by using a local everywhere else that can be\n// minified.\n\nif (Module['arguments']) arguments_ = Module['arguments'];\n\nif (Module['thisProgram']) thisProgram = Module['thisProgram'];\n\n// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message\n// end include: shell.js\n\n// include: preamble.js\n// === Preamble library stuff ===\n\n// Documentation for the public APIs defined in this file must be updated in:\n//    site/source/docs/api_reference/preamble.js.rst\n// A prebuilt local version of the documentation is available at:\n//    site/build/text/docs/api_reference/preamble.js.txt\n// You can also build docs locally as HTML or other formats in site/\n// An online HTML version (which may be of a different version of Emscripten)\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n\nvar dynamicLibraries = Module['dynamicLibraries'] || [];\n\nvar wasmBinary = Module['wasmBinary'];\n\n// include: base64Utils.js\n// Converts a string of base64 into a byte array (Uint8Array).\nfunction intArrayFromBase64(s) {\n  if (typeof ENVIRONMENT_IS_NODE != 'undefined' && ENVIRONMENT_IS_NODE) {\n    var buf = Buffer.from(s, 'base64');\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n  }\n\n  var decoded = atob(s);\n  var bytes = new Uint8Array(decoded.length);\n  for (var i = 0 ; i < decoded.length ; ++i) {\n    bytes[i] = decoded.charCodeAt(i);\n  }\n  return bytes;\n}\n\n// If filename is a base64 data URI, parses and returns data (Buffer on node,\n// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.\nfunction tryParseAsDataURI(filename) {\n  if (!isDataURI(filename)) {\n    return;\n  }\n\n  return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n}\n// end include: base64Utils.js\n// Wasm globals\n\nvar wasmMemory;\n\n//========================================\n// Runtime essentials\n//========================================\n\n// whether we are quitting the application. no code should run after this.\n// set in exit() and abort()\nvar ABORT = false;\n\n// set by exit() and abort().  Passed to 'onExit' handler.\n// NOTE: This is also used as the process return code code in shell environments\n// but only when noExitRuntime is false.\nvar EXITSTATUS;\n\n// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we\n// don't define it at all in release modes.  This matches the behaviour of\n// MINIMAL_RUNTIME.\n// TODO(sbc): Make this the default even without STRICT enabled.\n/** @type {function(*, string=)} */\nfunction assert(condition, text) {\n  if (!condition) {\n    // This build was created without ASSERTIONS defined.  `assert()` should not\n    // ever be called in this configuration but in case there are callers in\n    // the wild leave this simple abort() implementation here for now.\n    abort(text);\n  }\n}\n\n// Memory management\n\nvar HEAP,\n/** @type {!Int8Array} */\n  HEAP8,\n/** @type {!Uint8Array} */\n  HEAPU8,\n/** @type {!Int16Array} */\n  HEAP16,\n/** @type {!Uint16Array} */\n  HEAPU16,\n/** @type {!Int32Array} */\n  HEAP32,\n/** @type {!Uint32Array} */\n  HEAPU32,\n/** @type {!Float32Array} */\n  HEAPF32,\n/* BigInt64Array type is not correctly defined in closure\n/** not-@type {!BigInt64Array} */\n  HEAP64,\n/* BigUint64Array type is not correctly defined in closure\n/** not-t@type {!BigUint64Array} */\n  HEAPU64,\n/** @type {!Float64Array} */\n  HEAPF64;\n\n// include: runtime_shared.js\nfunction updateMemoryViews() {\n  var b = wasmMemory.buffer;\n  Module['HEAP8'] = HEAP8 = new Int8Array(b);\n  Module['HEAP16'] = HEAP16 = new Int16Array(b);\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);\n  Module['HEAP32'] = HEAP32 = new Int32Array(b);\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);\n  Module['HEAP64'] = HEAP64 = new BigInt64Array(b);\n  Module['HEAPU64'] = HEAPU64 = new BigUint64Array(b);\n}\n\n// end include: runtime_shared.js\n// In non-standalone/normal mode, we create the memory here.\n// include: runtime_init_memory.js\n// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)\n\n// check for full engine support (use string 'subarray' to avoid closure compiler confusion)\n\n  if (Module['wasmMemory']) {\n    wasmMemory = Module['wasmMemory'];\n  } else\n  {\n    var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 134217728;\n\n    wasmMemory = new WebAssembly.Memory({\n      'initial': INITIAL_MEMORY / 65536,\n      // In theory we should not need to emit the maximum if we want \"unlimited\"\n      // or 4GB of memory, but VMs error on that atm, see\n      // https://github.com/emscripten-core/emscripten/issues/14130\n      // And in the pthreads case we definitely need to emit a maximum. So\n      // always emit one.\n      'maximum': 32768,\n    });\n  }\n\n  updateMemoryViews();\n\n// end include: runtime_init_memory.js\n\n// include: runtime_stack_check.js\n// end include: runtime_stack_check.js\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATMAIN__    = []; // functions called when main() is to be run\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\n\nvar __RELOC_FUNCS__ = [];\n\nvar runtimeInitialized = false;\n\nfunction preRun() {\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n  runtimeInitialized = true;\n\n  callRuntimeCallbacks(__RELOC_FUNCS__);\n  \nif (!Module['noFSInit'] && !FS.initialized)\n  FS.init();\nFS.ignorePermissions = false;\n\nTTY.init();\nSOCKFS.root = FS.mount(SOCKFS, {}, null);\nPIPEFS.root = FS.mount(PIPEFS, {}, null);\n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n  \n  callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction postRun() {\n\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\n\nfunction addOnPreMain(cb) {\n  __ATMAIN__.unshift(cb);\n}\n\nfunction addOnExit(cb) {\n}\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\n\n// include: runtime_math.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\n\n// end include: runtime_math.js\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// Module.preRun (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\n\nfunction getUniqueRunDependency(id) {\n  return id;\n}\n\nfunction addRunDependency(id) {\n  runDependencies++;\n\n  Module['monitorRunDependencies']?.(runDependencies);\n\n}\n\nfunction removeRunDependency(id) {\n  runDependencies--;\n\n  Module['monitorRunDependencies']?.(runDependencies);\n\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\n\n/** @param {string|number=} what */\nfunction abort(what) {\n  Module['onAbort']?.(what);\n\n  what = 'Aborted(' + what + ')';\n  // TODO(sbc): Should we remove printing and leave it up to whoever\n  // catches the exception?\n  err(what);\n\n  ABORT = true;\n\n  what += '. Build with -sASSERTIONS for more info.';\n\n  // Use a wasm runtime error, because a JS error might be seen as a foreign\n  // exception, which means we'd run destructors on it. We need the error to\n  // simply make the program stop.\n  // FIXME This approach does not work in Wasm EH because it currently does not assume\n  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from\n  // a trap or not based on a hidden field within the object. So at the moment\n  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that\n  // allows this in the wasm spec.\n\n  // Suppress closure compiler warning here. Closure compiler's builtin extern\n  // definition for WebAssembly.RuntimeError claims it takes no arguments even\n  // though it can.\n  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.\n  /** @suppress {checkTypes} */\n  var e = new WebAssembly.RuntimeError(what);\n\n  readyPromiseReject(e);\n  // Throw the error whether or not MODULARIZE is set because abort is used\n  // in code paths apart from instantiation where an exception is expected\n  // to be thrown when abort is called.\n  throw e;\n}\n\n// include: memoryprofiler.js\n// end include: memoryprofiler.js\n// include: URIUtils.js\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\n\n/**\n * Indicates whether filename is a base64 data URI.\n * @noinline\n */\nvar isDataURI = (filename) => filename.startsWith(dataURIPrefix);\n\n/**\n * Indicates whether filename is delivered via file protocol (as opposed to http/https)\n * @noinline\n */\nvar isFileURI = (filename) => filename.startsWith('file://');\n// end include: URIUtils.js\n// include: runtime_exceptions.js\n// end include: runtime_exceptions.js\nfunction findWasmBinary() {\n  if (Module['locateFile']) {\n    var f = 'postgres.wasm';\n    if (!isDataURI(f)) {\n      return locateFile(f);\n    }\n    return f;\n  }\n  // Use bundler-friendly `new URL(..., import.meta.url)` pattern; works in browsers too.\n  return new URL('postgres.wasm', import.meta.url).href;\n}\n\nvar wasmBinaryFile;\n\nfunction getBinarySync(file) {\n  if (file == wasmBinaryFile && wasmBinary) {\n    return new Uint8Array(wasmBinary);\n  }\n  if (readBinary) {\n    return readBinary(file);\n  }\n  throw 'both async and sync fetching of the wasm failed';\n}\n\nfunction getBinaryPromise(binaryFile) {\n  // If we don't have the binary yet, load it asynchronously using readAsync.\n  if (!wasmBinary\n      ) {\n    // Fetch the binary using readAsync\n    return readAsync(binaryFile).then(\n      (response) => new Uint8Array(/** @type{!ArrayBuffer} */(response)),\n      // Fall back to getBinarySync if readAsync fails\n      () => getBinarySync(binaryFile)\n    );\n  }\n\n  // Otherwise, getBinarySync should be able to get it synchronously\n  return Promise.resolve().then(() => getBinarySync(binaryFile));\n}\n\nfunction instantiateArrayBuffer(binaryFile, imports, receiver) {\n  return getBinaryPromise(binaryFile).then((binary) => {\n    return WebAssembly.instantiate(binary, imports);\n  }).then(receiver, (reason) => {\n    err(`failed to asynchronously prepare wasm: ${reason}`);\n\n    abort(reason);\n  });\n}\n\nfunction instantiateAsync(binary, binaryFile, imports, callback) {\n  if (!binary &&\n      typeof WebAssembly.instantiateStreaming == 'function' &&\n      !isDataURI(binaryFile) &&\n      // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.\n      !isFileURI(binaryFile) &&\n      // Avoid instantiateStreaming() on Node.js environment for now, as while\n      // Node.js v18.1.0 implements it, it does not have a full fetch()\n      // implementation yet.\n      //\n      // Reference:\n      //   https://github.com/emscripten-core/emscripten/pull/16917\n      !ENVIRONMENT_IS_NODE &&\n      typeof fetch == 'function') {\n    return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {\n      // Suppress closure warning here since the upstream definition for\n      // instantiateStreaming only allows Promise<Repsponse> rather than\n      // an actual Response.\n      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.\n      /** @suppress {checkTypes} */\n      var result = WebAssembly.instantiateStreaming(response, imports);\n\n      return result.then(\n        callback,\n        function(reason) {\n          // We expect the most common failure cause to be a bad MIME type for the binary,\n          // in which case falling back to ArrayBuffer instantiation should work.\n          err(`wasm streaming compile failed: ${reason}`);\n          err('falling back to ArrayBuffer instantiation');\n          return instantiateArrayBuffer(binaryFile, imports, callback);\n        });\n    });\n  }\n  return instantiateArrayBuffer(binaryFile, imports, callback);\n}\n\nfunction getWasmImports() {\n  // prepare imports\n  return {\n    'env': wasmImports,\n    'wasi_snapshot_preview1': wasmImports,\n    'GOT.mem': new Proxy(wasmImports, GOTHandler),\n    'GOT.func': new Proxy(wasmImports, GOTHandler),\n  }\n}\n\n// Create the wasm instance.\n// Receives the wasm imports, returns the exports.\nfunction createWasm() {\n  var info = getWasmImports();\n  // Load the wasm module and create an instance of using native support in the JS engine.\n  // handle a generated wasm instance, receiving its exports and\n  // performing other necessary setup\n  /** @param {WebAssembly.Module=} module*/\n  function receiveInstance(instance, module) {\n    wasmExports = instance.exports;\n\n    wasmExports = relocateExports(wasmExports, 67108864);\n\n    var metadata = getDylinkMetadata(module);\n    if (metadata.neededDynlibs) {\n      dynamicLibraries = metadata.neededDynlibs.concat(dynamicLibraries);\n    }\n    mergeLibSymbols(wasmExports, 'main')\n    LDSO.init();\n    loadDylibs();\n\n    \n\n    addOnInit(wasmExports['__wasm_call_ctors']);\n\n    __RELOC_FUNCS__.push(wasmExports['__wasm_apply_data_relocs']);\n\n    removeRunDependency('wasm-instantiate');\n    return wasmExports;\n  }\n  // wait for the pthread pool (if any)\n  addRunDependency('wasm-instantiate');\n\n  // Prefer streaming instantiation if available.\n  function receiveInstantiationResult(result) {\n    // 'result' is a ResultObject object which has both the module and instance.\n    // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n    receiveInstance(result['instance'], result['module']);\n  }\n\n  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n  // to manually instantiate the Wasm module themselves. This allows pages to\n  // run the instantiation parallel to any other async startup actions they are\n  // performing.\n  // Also pthreads and wasm workers initialize the wasm instance through this\n  // path.\n  if (Module['instantiateWasm']) {\n    try {\n      return Module['instantiateWasm'](info, receiveInstance);\n    } catch(e) {\n      err(`Module.instantiateWasm callback failed with error: ${e}`);\n        // If instantiation fails, reject the module ready promise.\n        readyPromiseReject(e);\n    }\n  }\n\n  wasmBinaryFile ??= findWasmBinary();\n\n  // If instantiation fails, reject the module ready promise.\n  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);\n  return {}; // no exports yet; we'll fill them in later\n}\n\n// include: runtime_debug.js\n// end include: runtime_debug.js\n// === Body ===\n\nvar ASM_CONSTS = {\n  69124656: ($0) => { Module.is_worker = (typeof WorkerGlobalScope !== 'undefined') && self instanceof WorkerGlobalScope; Module.FD_BUFFER_MAX = $0; Module.emscripten_copy_to = console.warn; },  \n 69124829: () => { Module['postMessage'] = function custom_postMessage(event) { console.log(\"# 1252: onCustomMessage:\",__FILE__, event); }; },  \n 69124954: () => { if (Module.is_worker) { function onCustomMessage(event) { console.log(\"onCustomMessage:\", event); }; Module['onCustomMessage'] = onCustomMessage; } else { Module['postMessage'] = function custom_postMessage(event) { switch (event.type) { case \"raw\" : { stringToUTF8( event.data, shm_rawinput, Module.FD_BUFFER_MAX); break; } case \"stdin\" : { stringToUTF8( event.data, 1, Module.FD_BUFFER_MAX); break; } case \"rcon\" : { stringToUTF8( event.data, shm_rcon, Module.FD_BUFFER_MAX); break; } default : console.warn(\"custom_postMessage?\", event); } }; }; }\n};\nfunction is_web_env() { try { if (window) return 1; } catch(x) {return 0} }\nis_web_env.sig = 'i';\nfunction peek_fd(fd) { return test_data.length; }\nfunction fnc_getfd(fd) { return fnc_stdin() }\n\n// end include: preamble.js\n\n\n  /** @constructor */\n  function ExitStatus(status) {\n      this.name = 'ExitStatus';\n      this.message = `Program terminated with exit(${status})`;\n      this.status = status;\n    }\n\n  var GOT = {\n  };\n  \n  var currentModuleWeakSymbols = new Set([]);\n  var GOTHandler = {\n  get(obj, symName) {\n        var rtn = GOT[symName];\n        if (!rtn) {\n          rtn = GOT[symName] = new WebAssembly.Global({'value': 'i32', 'mutable': true});\n        }\n        if (!currentModuleWeakSymbols.has(symName)) {\n          // Any non-weak reference to a symbol marks it as `required`, which\n          // enabled `reportUndefinedSymbols` to report undefeind symbol errors\n          // correctly.\n          rtn.required = true;\n        }\n        return rtn;\n      },\n  };\n\n  var callRuntimeCallbacks = (callbacks) => {\n      while (callbacks.length > 0) {\n        // Pass the module as the first argument.\n        callbacks.shift()(Module);\n      }\n    };\n\n  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;\n  \n    /**\n     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given\n     * array that contains uint8 values, returns a copy of that string as a\n     * Javascript String object.\n     * heapOrArray is either a regular array, or a JavaScript typed array view.\n     * @param {number} idx\n     * @param {number=} maxBytesToRead\n     * @return {string}\n     */\n  var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n      // TextDecoder needs to know the byte length in advance, it doesn't stop on\n      // null terminator by itself.  Also, use the length info to avoid running tiny\n      // strings through TextDecoder, since .subarray() allocates garbage.\n      // (As a tiny code save trick, compare endPtr against endIdx using a negation,\n      // so that undefined means Infinity)\n      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n  \n      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n      }\n      var str = '';\n      // If building with TextDecoder, we have already computed the string length\n      // above, so test loop end condition against that\n      while (idx < endPtr) {\n        // For UTF8 byte structure, see:\n        // http://en.wikipedia.org/wiki/UTF-8#Description\n        // https://www.ietf.org/rfc/rfc2279.txt\n        // https://tools.ietf.org/html/rfc3629\n        var u0 = heapOrArray[idx++];\n        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n        var u1 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n        var u2 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xF0) == 0xE0) {\n          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n        } else {\n          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n        }\n  \n        if (u0 < 0x10000) {\n          str += String.fromCharCode(u0);\n        } else {\n          var ch = u0 - 0x10000;\n          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n        }\n      }\n      return str;\n    };\n  var getDylinkMetadata = (binary) => {\n      var offset = 0;\n      var end = 0;\n  \n      function getU8() {\n        return binary[offset++];\n      }\n  \n      function getLEB() {\n        var ret = 0;\n        var mul = 1;\n        while (1) {\n          var byte = binary[offset++];\n          ret += ((byte & 0x7f) * mul);\n          mul *= 0x80;\n          if (!(byte & 0x80)) break;\n        }\n        return ret;\n      }\n  \n      function getString() {\n        var len = getLEB();\n        offset += len;\n        return UTF8ArrayToString(binary, offset - len, len);\n      }\n  \n      /** @param {string=} message */\n      function failIf(condition, message) {\n        if (condition) throw new Error(message);\n      }\n  \n      var name = 'dylink.0';\n      if (binary instanceof WebAssembly.Module) {\n        var dylinkSection = WebAssembly.Module.customSections(binary, name);\n        if (dylinkSection.length === 0) {\n          name = 'dylink'\n          dylinkSection = WebAssembly.Module.customSections(binary, name);\n        }\n        failIf(dylinkSection.length === 0, 'need dylink section');\n        binary = new Uint8Array(dylinkSection[0]);\n        end = binary.length\n      } else {\n        var int32View = new Uint32Array(new Uint8Array(binary.subarray(0, 24)).buffer);\n        var magicNumberFound = int32View[0] == 0x6d736100;\n        failIf(!magicNumberFound, 'need to see wasm magic number'); // \\0asm\n        // we should see the dylink custom section right after the magic number and wasm version\n        failIf(binary[8] !== 0, 'need the dylink section to be first')\n        offset = 9;\n        var section_size = getLEB(); //section size\n        end = offset + section_size;\n        name = getString();\n      }\n  \n      var customSection = { neededDynlibs: [], tlsExports: new Set(), weakImports: new Set() };\n      if (name == 'dylink') {\n        customSection.memorySize = getLEB();\n        customSection.memoryAlign = getLEB();\n        customSection.tableSize = getLEB();\n        customSection.tableAlign = getLEB();\n        // shared libraries this module needs. We need to load them first, so that\n        // current module could resolve its imports. (see tools/shared.py\n        // WebAssembly.make_shared_library() for \"dylink\" section extension format)\n        var neededDynlibsCount = getLEB();\n        for (var i = 0; i < neededDynlibsCount; ++i) {\n          var libname = getString();\n          customSection.neededDynlibs.push(libname);\n        }\n      } else {\n        failIf(name !== 'dylink.0');\n        var WASM_DYLINK_MEM_INFO = 0x1;\n        var WASM_DYLINK_NEEDED = 0x2;\n        var WASM_DYLINK_EXPORT_INFO = 0x3;\n        var WASM_DYLINK_IMPORT_INFO = 0x4;\n        var WASM_SYMBOL_TLS = 0x100;\n        var WASM_SYMBOL_BINDING_MASK = 0x3;\n        var WASM_SYMBOL_BINDING_WEAK = 0x1;\n        while (offset < end) {\n          var subsectionType = getU8();\n          var subsectionSize = getLEB();\n          if (subsectionType === WASM_DYLINK_MEM_INFO) {\n            customSection.memorySize = getLEB();\n            customSection.memoryAlign = getLEB();\n            customSection.tableSize = getLEB();\n            customSection.tableAlign = getLEB();\n          } else if (subsectionType === WASM_DYLINK_NEEDED) {\n            var neededDynlibsCount = getLEB();\n            for (var i = 0; i < neededDynlibsCount; ++i) {\n              libname = getString();\n              customSection.neededDynlibs.push(libname);\n            }\n          } else if (subsectionType === WASM_DYLINK_EXPORT_INFO) {\n            var count = getLEB();\n            while (count--) {\n              var symname = getString();\n              var flags = getLEB();\n              if (flags & WASM_SYMBOL_TLS) {\n                customSection.tlsExports.add(symname);\n              }\n            }\n          } else if (subsectionType === WASM_DYLINK_IMPORT_INFO) {\n            var count = getLEB();\n            while (count--) {\n              var modname = getString();\n              var symname = getString();\n              var flags = getLEB();\n              if ((flags & WASM_SYMBOL_BINDING_MASK) == WASM_SYMBOL_BINDING_WEAK) {\n                customSection.weakImports.add(symname);\n              }\n            }\n          } else {\n            // unknown subsection\n            offset += subsectionSize;\n          }\n        }\n      }\n  \n      return customSection;\n    };\n\n  \n    /**\n     * @param {number} ptr\n     * @param {string} type\n     */\n  function getValue(ptr, type = 'i8') {\n    if (type.endsWith('*')) type = '*';\n    switch (type) {\n      case 'i1': return HEAP8[ptr];\n      case 'i8': return HEAP8[ptr];\n      case 'i16': return HEAP16[((ptr)>>1)];\n      case 'i32': return HEAP32[((ptr)>>2)];\n      case 'i64': return HEAP64[((ptr)>>3)];\n      case 'float': return HEAPF32[((ptr)>>2)];\n      case 'double': return HEAPF64[((ptr)>>3)];\n      case '*': return HEAPU32[((ptr)>>2)];\n      default: abort(`invalid type for getValue: ${type}`);\n    }\n  }\n\n  var newDSO = (name, handle, syms) => {\n      var dso = {\n        refcount: Infinity,\n        name,\n        exports: syms,\n        global: true,\n      };\n      LDSO.loadedLibsByName[name] = dso;\n      if (handle != undefined) {\n        LDSO.loadedLibsByHandle[handle] = dso;\n      }\n      return dso;\n    };\n  var LDSO = {\n  loadedLibsByName:{\n  },\n  loadedLibsByHandle:{\n  },\n  init() {\n        newDSO('__main__', 0, wasmImports);\n      },\n  };\n  \n  \n  \n  var ___heap_base = 73476080;\n  \n  var alignMemory = (size, alignment) => {\n      return Math.ceil(size / alignment) * alignment;\n    };\n  \n  var getMemory = (size) => {\n      // After the runtime is initialized, we must only use sbrk() normally.\n      if (runtimeInitialized) {\n        // Currently we don't support freeing of static data when modules are\n        // unloaded via dlclose.  This function is tagged as `noleakcheck` to\n        // avoid having this reported as leak.\n        return _calloc(size, 1);\n      }\n      var ret = ___heap_base;\n      // Keep __heap_base stack aligned.\n      var end = ret + alignMemory(size, 16);\n      ___heap_base = end;\n      GOT['__heap_base'].value = end;\n      return ret;\n    };\n  \n  \n  var isInternalSym = (symName) => {\n      // TODO: find a way to mark these in the binary or avoid exporting them.\n      return [\n        '__cpp_exception',\n        '__c_longjmp',\n        '__wasm_apply_data_relocs',\n        '__dso_handle',\n        '__tls_size',\n        '__tls_align',\n        '__set_stack_limits',\n        '_emscripten_tls_init',\n        '__wasm_init_tls',\n        '__wasm_call_ctors',\n        '__start_em_asm',\n        '__stop_em_asm',\n        '__start_em_js',\n        '__stop_em_js',\n      ].includes(symName) || symName.startsWith('__em_js__')\n      ;\n    };\n  \n  var uleb128Encode = (n, target) => {\n      if (n < 128) {\n        target.push(n);\n      } else {\n        target.push((n % 128) | 128, n >> 7);\n      }\n    };\n  \n  var sigToWasmTypes = (sig) => {\n      var typeNames = {\n        'i': 'i32',\n        'j': 'i64',\n        'f': 'f32',\n        'd': 'f64',\n        'e': 'externref',\n        'p': 'i32',\n      };\n      var type = {\n        parameters: [],\n        results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]\n      };\n      for (var i = 1; i < sig.length; ++i) {\n        type.parameters.push(typeNames[sig[i]]);\n      }\n      return type;\n    };\n  \n  var generateFuncType = (sig, target) => {\n      var sigRet = sig.slice(0, 1);\n      var sigParam = sig.slice(1);\n      var typeCodes = {\n        'i': 0x7f, // i32\n        'p': 0x7f, // i32\n        'j': 0x7e, // i64\n        'f': 0x7d, // f32\n        'd': 0x7c, // f64\n        'e': 0x6f, // externref\n      };\n  \n      // Parameters, length + signatures\n      target.push(0x60 /* form: func */);\n      uleb128Encode(sigParam.length, target);\n      for (var i = 0; i < sigParam.length; ++i) {\n        target.push(typeCodes[sigParam[i]]);\n      }\n  \n      // Return values, length + signatures\n      // With no multi-return in MVP, either 0 (void) or 1 (anything else)\n      if (sigRet == 'v') {\n        target.push(0x00);\n      } else {\n        target.push(0x01, typeCodes[sigRet]);\n      }\n    };\n  var convertJsFunctionToWasm = (func, sig) => {\n  \n      // If the type reflection proposal is available, use the new\n      // \"WebAssembly.Function\" constructor.\n      // Otherwise, construct a minimal wasm module importing the JS function and\n      // re-exporting it.\n      if (typeof WebAssembly.Function == \"function\") {\n        return new WebAssembly.Function(sigToWasmTypes(sig), func);\n      }\n  \n      // The module is static, with the exception of the type section, which is\n      // generated based on the signature passed in.\n      var typeSectionBody = [\n        0x01, // count: 1\n      ];\n      generateFuncType(sig, typeSectionBody);\n  \n      // Rest of the module is static\n      var bytes = [\n        0x00, 0x61, 0x73, 0x6d, // magic (\"\\0asm\")\n        0x01, 0x00, 0x00, 0x00, // version: 1\n        0x01, // Type section code\n      ];\n      // Write the overall length of the type section followed by the body\n      uleb128Encode(typeSectionBody.length, bytes);\n      bytes.push(...typeSectionBody);\n  \n      // The rest of the module is static\n      bytes.push(\n        0x02, 0x07, // import section\n          // (import \"e\" \"f\" (func 0 (type 0)))\n          0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,\n        0x07, 0x05, // export section\n          // (export \"f\" (func 0 (type 0)))\n          0x01, 0x01, 0x66, 0x00, 0x00,\n      );\n  \n      // We can compile this wasm module synchronously because it is very small.\n      // This accepts an import (at \"e.f\"), that it reroutes to an export (at \"f\")\n      var module = new WebAssembly.Module(new Uint8Array(bytes));\n      var instance = new WebAssembly.Instance(module, { 'e': { 'f': func } });\n      var wrappedFunc = instance.exports['f'];\n      return wrappedFunc;\n    };\n  \n  var wasmTableMirror = [];\n  \n  /** @type {WebAssembly.Table} */\n  var wasmTable = new WebAssembly.Table({\n    'initial': 5358,\n    'element': 'anyfunc'\n  });\n  ;\n  var getWasmTableEntry = (funcPtr) => {\n      var func = wasmTableMirror[funcPtr];\n      if (!func) {\n        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;\n        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);\n      }\n      return func;\n    };\n  \n  var updateTableMap = (offset, count) => {\n      if (functionsInTableMap) {\n        for (var i = offset; i < offset + count; i++) {\n          var item = getWasmTableEntry(i);\n          // Ignore null values.\n          if (item) {\n            functionsInTableMap.set(item, i);\n          }\n        }\n      }\n    };\n  \n  var functionsInTableMap;\n  \n  var getFunctionAddress = (func) => {\n      // First, create the map if this is the first use.\n      if (!functionsInTableMap) {\n        functionsInTableMap = new WeakMap();\n        updateTableMap(0, wasmTable.length);\n      }\n      return functionsInTableMap.get(func) || 0;\n    };\n  \n  \n  var freeTableIndexes = [];\n  \n  var getEmptyTableSlot = () => {\n      // Reuse a free index if there is one, otherwise grow.\n      if (freeTableIndexes.length) {\n        return freeTableIndexes.pop();\n      }\n      // Grow the table\n      try {\n        wasmTable.grow(1);\n      } catch (err) {\n        if (!(err instanceof RangeError)) {\n          throw err;\n        }\n        throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';\n      }\n      return wasmTable.length - 1;\n    };\n  \n  \n  \n  var setWasmTableEntry = (idx, func) => {\n      wasmTable.set(idx, func);\n      // With ABORT_ON_WASM_EXCEPTIONS wasmTable.get is overridden to return wrapped\n      // functions so we need to call it here to retrieve the potential wrapper correctly\n      // instead of just storing 'func' directly into wasmTableMirror\n      wasmTableMirror[idx] = wasmTable.get(idx);\n    };\n  \n  /** @param {string=} sig */\n  var addFunction = (func, sig) => {\n      // Check if the function is already in the table, to ensure each function\n      // gets a unique index.\n      var rtn = getFunctionAddress(func);\n      if (rtn) {\n        return rtn;\n      }\n  \n      // It's not in the table, add it now.\n  \n      var ret = getEmptyTableSlot();\n  \n      // Set the new value.\n      try {\n        // Attempting to call this with JS function will cause of table.set() to fail\n        setWasmTableEntry(ret, func);\n      } catch (err) {\n        if (!(err instanceof TypeError)) {\n          throw err;\n        }\n        var wrapped = convertJsFunctionToWasm(func, sig);\n        setWasmTableEntry(ret, wrapped);\n      }\n  \n      functionsInTableMap.set(func, ret);\n  \n      return ret;\n    };\n  \n  var updateGOT = (exports, replace) => {\n      for (var symName in exports) {\n        if (isInternalSym(symName)) {\n          continue;\n        }\n  \n        var value = exports[symName];\n  \n        GOT[symName] ||= new WebAssembly.Global({'value': 'i32', 'mutable': true});\n        if (replace || GOT[symName].value == 0) {\n          if (typeof value == 'function') {\n            GOT[symName].value = addFunction(value);\n          } else if (typeof value == 'number') {\n            GOT[symName].value = value;\n          } else {\n            err(`unhandled export type for '${symName}': ${typeof value}`);\n          }\n        }\n      }\n    };\n  /** @param {boolean=} replace */\n  var relocateExports = (exports, memoryBase, replace) => {\n      var relocated = {};\n  \n      for (var e in exports) {\n        var value = exports[e];\n        if (typeof value == 'object') {\n          // a breaking change in the wasm spec, globals are now objects\n          // https://github.com/WebAssembly/mutable-global/issues/1\n          value = value.value;\n        }\n        if (typeof value == 'number') {\n          value += memoryBase;\n        }\n        relocated[e] = value;\n      }\n      updateGOT(relocated, replace);\n      return relocated;\n    };\n  \n  var isSymbolDefined = (symName) => {\n      // Ignore 'stub' symbols that are auto-generated as part of the original\n      // `wasmImports` used to instantiate the main module.\n      var existing = wasmImports[symName];\n      if (!existing || existing.stub) {\n        return false;\n      }\n      return true;\n    };\n  \n  var dynCall = (sig, ptr, args = []) => {\n      var rtn = getWasmTableEntry(ptr)(...args);\n      return rtn;\n    };\n  \n  \n  var stackSave = () => _emscripten_stack_get_current();\n  \n  var stackRestore = (val) => __emscripten_stack_restore(val);\n  var createInvokeFunction = (sig) => (ptr, ...args) => {\n      var sp = stackSave();\n      try {\n        return dynCall(sig, ptr, args);\n      } catch(e) {\n        stackRestore(sp);\n        // Create a try-catch guard that rethrows the Emscripten EH exception.\n        // Exceptions thrown from C++ will be a pointer (number) and longjmp\n        // will throw the number Infinity. Use the compact and fast \"e !== e+0\"\n        // test to check if e was not a Number.\n        if (e !== e+0) throw e;\n        _setThrew(1, 0);\n        // In theory this if statement could be done on\n        // creating the function, but I just added this to\n        // save wasting code space as it only happens on exception.\n        if (sig[0] == \"j\") return 0n;\n      }\n    };\n  var resolveGlobalSymbol = (symName, direct = false) => {\n      var sym;\n      if (isSymbolDefined(symName)) {\n        sym = wasmImports[symName];\n      }\n      // Asm.js-style exception handling: invoke wrapper generation\n      else if (symName.startsWith('invoke_')) {\n        // Create (and cache) new invoke_ functions on demand.\n        sym = wasmImports[symName] = createInvokeFunction(symName.split('_')[1]);\n      }\n      return {sym, name: symName};\n    };\n  \n  \n  \n  \n  \n  \n  \n  \n    /**\n     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the\n     * emscripten HEAP, returns a copy of that string as a Javascript String object.\n     *\n     * @param {number} ptr\n     * @param {number=} maxBytesToRead - An optional length that specifies the\n     *   maximum number of bytes to read. You can omit this parameter to scan the\n     *   string until the first 0 byte. If maxBytesToRead is passed, and the string\n     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the\n     *   string will cut short at that byte index (i.e. maxBytesToRead will not\n     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing\n     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw\n     *   JS JIT optimizations off, so it is worth to consider consistently using one\n     * @return {string}\n     */\n  var UTF8ToString = (ptr, maxBytesToRead) => {\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n    };\n  \n     /**\n      * @param {string=} libName\n      * @param {Object=} localScope\n      * @param {number=} handle\n      */\n  var loadWebAssemblyModule = (binary, flags, libName, localScope, handle) => {\n      var metadata = getDylinkMetadata(binary);\n      currentModuleWeakSymbols = metadata.weakImports;\n  \n      // loadModule loads the wasm module after all its dependencies have been loaded.\n      // can be called both sync/async.\n      function loadModule() {\n        // The first thread to load a given module needs to allocate the static\n        // table and memory regions.  Later threads re-use the same table region\n        // and can ignore the memory region (since memory is shared between\n        // threads already).\n        // If `handle` is specified than it is assumed that the calling thread has\n        // exclusive access to it for the duration of this function.  See the\n        // locking in `dynlink.c`.\n        var firstLoad = !handle || !HEAP8[(handle)+(8)];\n        if (firstLoad) {\n          // alignments are powers of 2\n          var memAlign = Math.pow(2, metadata.memoryAlign);\n          // prepare memory\n          var memoryBase = metadata.memorySize ? alignMemory(getMemory(metadata.memorySize + memAlign), memAlign) : 0; // TODO: add to cleanups\n          var tableBase = metadata.tableSize ? wasmTable.length : 0;\n          if (handle) {\n            HEAP8[(handle)+(8)] = 1;\n            HEAPU32[(((handle)+(12))>>2)] = memoryBase;\n            HEAP32[(((handle)+(16))>>2)] = metadata.memorySize;\n            HEAPU32[(((handle)+(20))>>2)] = tableBase;\n            HEAP32[(((handle)+(24))>>2)] = metadata.tableSize;\n          }\n        } else {\n          memoryBase = HEAPU32[(((handle)+(12))>>2)];\n          tableBase = HEAPU32[(((handle)+(20))>>2)];\n        }\n  \n        var tableGrowthNeeded = tableBase + metadata.tableSize - wasmTable.length;\n        if (tableGrowthNeeded > 0) {\n          wasmTable.grow(tableGrowthNeeded);\n        }\n  \n        // This is the export map that we ultimately return.  We declare it here\n        // so it can be used within resolveSymbol.  We resolve symbols against\n        // this local symbol map in the case there they are not present on the\n        // global Module object.  We need this fallback because Modules sometime\n        // need to import their own symbols\n        var moduleExports;\n  \n        function resolveSymbol(sym) {\n          var resolved = resolveGlobalSymbol(sym).sym;\n          if (!resolved && localScope) {\n            resolved = localScope[sym];\n          }\n          if (!resolved) {\n            resolved = moduleExports[sym];\n          }\n          return resolved;\n        }\n  \n        // TODO kill ↓↓↓ (except \"symbols local to this module\", it will likely be\n        // not needed if we require that if A wants symbols from B it has to link\n        // to B explicitly: similarly to -Wl,--no-undefined)\n        //\n        // wasm dynamic libraries are pure wasm, so they cannot assist in\n        // their own loading. When side module A wants to import something\n        // provided by a side module B that is loaded later, we need to\n        // add a layer of indirection, but worse, we can't even tell what\n        // to add the indirection for, without inspecting what A's imports\n        // are. To do that here, we use a JS proxy (another option would\n        // be to inspect the binary directly).\n        var proxyHandler = {\n          get(stubs, prop) {\n            // symbols that should be local to this module\n            switch (prop) {\n              case '__memory_base':\n                return memoryBase;\n              case '__table_base':\n                return tableBase;\n            }\n            if (prop in wasmImports && !wasmImports[prop].stub) {\n              // No stub needed, symbol already exists in symbol table\n              return wasmImports[prop];\n            }\n            // Return a stub function that will resolve the symbol\n            // when first called.\n            if (!(prop in stubs)) {\n              var resolved;\n              stubs[prop] = (...args) => {\n                resolved ||= resolveSymbol(prop);\n                return resolved(...args);\n              };\n            }\n            return stubs[prop];\n          }\n        };\n        var proxy = new Proxy({}, proxyHandler);\n        var info = {\n          'GOT.mem': new Proxy({}, GOTHandler),\n          'GOT.func': new Proxy({}, GOTHandler),\n          'env': proxy,\n          'wasi_snapshot_preview1': proxy,\n        };\n  \n        function postInstantiation(module, instance) {\n          // add new entries to functionsInTableMap\n          updateTableMap(tableBase, metadata.tableSize);\n          moduleExports = relocateExports(instance.exports, memoryBase);\n          if (!flags.allowUndefined) {\n            reportUndefinedSymbols();\n          }\n  \n          function addEmAsm(addr, body) {\n            var args = [];\n            var arity = 0;\n            for (; arity < 16; arity++) {\n              if (body.indexOf('$' + arity) != -1) {\n                args.push('$' + arity);\n              } else {\n                break;\n              }\n            }\n            args = args.join(',');\n            var func = `(${args}) => { ${body} };`;\n            ASM_CONSTS[start] = eval(func);\n          }\n  \n          // Add any EM_ASM function that exist in the side module\n          if ('__start_em_asm' in moduleExports) {\n            var start = moduleExports['__start_em_asm'];\n            var stop = moduleExports['__stop_em_asm'];\n            \n            \n            while (start < stop) {\n              var jsString = UTF8ToString(start);\n              addEmAsm(start, jsString);\n              start = HEAPU8.indexOf(0, start) + 1;\n            }\n          }\n  \n          function addEmJs(name, cSig, body) {\n            // The signature here is a C signature (e.g. \"(int foo, char* bar)\").\n            // See `create_em_js` in emcc.py` for the build-time version of this\n            // code.\n            var jsArgs = [];\n            cSig = cSig.slice(1, -1)\n            if (cSig != 'void') {\n              cSig = cSig.split(',');\n              for (var i in cSig) {\n                var jsArg = cSig[i].split(' ').pop();\n                jsArgs.push(jsArg.replaceAll('*', ''));\n              }\n            }\n            var func = `(${jsArgs}) => ${body};`;\n            moduleExports[name] = eval(func);\n          }\n  \n          for (var name in moduleExports) {\n            if (name.startsWith('__em_js__')) {\n              var start = moduleExports[name]\n              var jsString = UTF8ToString(start);\n              // EM_JS strings are stored in the data section in the form\n              // SIG<::>BODY.\n              var parts = jsString.split('<::>');\n              addEmJs(name.replace('__em_js__', ''), parts[0], parts[1]);\n              delete moduleExports[name];\n            }\n          }\n  \n          // initialize the module\n            var applyRelocs = moduleExports['__wasm_apply_data_relocs'];\n            if (applyRelocs) {\n              if (runtimeInitialized) {\n                applyRelocs();\n              } else {\n                __RELOC_FUNCS__.push(applyRelocs);\n              }\n            }\n            var init = moduleExports['__wasm_call_ctors'];\n            if (init) {\n              if (runtimeInitialized) {\n                init();\n              } else {\n                // we aren't ready to run compiled code yet\n                __ATINIT__.push(init);\n              }\n            }\n          return moduleExports;\n        }\n  \n        if (flags.loadAsync) {\n          if (binary instanceof WebAssembly.Module) {\n            var instance = new WebAssembly.Instance(binary, info);\n            return Promise.resolve(postInstantiation(binary, instance));\n          }\n          return WebAssembly.instantiate(binary, info).then(\n            (result) => postInstantiation(result.module, result.instance)\n          );\n        }\n  \n        var module = binary instanceof WebAssembly.Module ? binary : new WebAssembly.Module(binary);\n        var instance = new WebAssembly.Instance(module, info);\n        return postInstantiation(module, instance);\n      }\n  \n      // now load needed libraries and the module itself.\n      if (flags.loadAsync) {\n        return metadata.neededDynlibs\n          .reduce((chain, dynNeeded) => chain.then(() =>\n            loadDynamicLibrary(dynNeeded, flags, localScope)\n          ), Promise.resolve())\n          .then(loadModule);\n      }\n  \n      metadata.neededDynlibs.forEach((needed) => loadDynamicLibrary(needed, flags, localScope));\n      return loadModule();\n    };\n  \n  \n  var mergeLibSymbols = (exports, libName) => {\n      // add symbols into global namespace TODO: weak linking etc.\n      for (var [sym, exp] of Object.entries(exports)) {\n  \n        // When RTLD_GLOBAL is enabled, the symbols defined by this shared object\n        // will be made available for symbol resolution of subsequently loaded\n        // shared objects.\n        //\n        // We should copy the symbols (which include methods and variables) from\n        // SIDE_MODULE to MAIN_MODULE.\n        const setImport = (target) => {\n          if (!isSymbolDefined(target)) {\n            wasmImports[target] = exp;\n          }\n        }\n        setImport(sym);\n  \n        // Special case for handling of main symbol:  If a side module exports\n        // `main` that also acts a definition for `__main_argc_argv` and vice\n        // versa.\n        const main_alias = '__main_argc_argv';\n        if (sym == 'main') {\n          setImport(main_alias)\n        }\n        if (sym == main_alias) {\n          setImport('main')\n        }\n      }\n    };\n  \n  \n  /** @param {boolean=} noRunDep */\n  var asyncLoad = (url, onload, onerror, noRunDep) => {\n      var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : '';\n      readAsync(url).then(\n        (arrayBuffer) => {\n          onload(new Uint8Array(arrayBuffer));\n          if (dep) removeRunDependency(dep);\n        },\n        (err) => {\n          if (onerror) {\n            onerror();\n          } else {\n            throw `Loading data file \"${url}\" failed.`;\n          }\n        }\n      );\n      if (dep) addRunDependency(dep);\n    };\n  \n  var preloadPlugins = Module['preloadPlugins'] || [];\n  var registerWasmPlugin = () => {\n      // Use string keys here to avoid minification since the plugin consumer\n      // also uses string keys.\n      var wasmPlugin = {\n        'promiseChainEnd': Promise.resolve(),\n        'canHandle': (name) => {\n          return !Module['noWasmDecoding'] && name.endsWith('.so')\n        },\n        'handle': (byteArray, name, onload, onerror) => {\n          // loadWebAssemblyModule can not load modules out-of-order, so rather\n          // than just running the promises in parallel, this makes a chain of\n          // promises to run in series.\n          wasmPlugin['promiseChainEnd'] = wasmPlugin['promiseChainEnd'].then(\n            () => loadWebAssemblyModule(byteArray, {loadAsync: true, nodelete: true}, name, {})).then(\n              (exports) => {\n                preloadedWasm[name] = exports;\n                onload(byteArray);\n              },\n              (error) => {\n                err(`failed to instantiate wasm: ${name}: ${error}`);\n                onerror();\n              });\n        }\n      };\n      preloadPlugins.push(wasmPlugin);\n    };\n  var preloadedWasm = {\n  };\n  \n      /**\n       * @param {number=} handle\n       * @param {Object=} localScope\n       */\n  function loadDynamicLibrary(libName, flags = {global: true, nodelete: true}, localScope, handle) {\n      // when loadDynamicLibrary did not have flags, libraries were loaded\n      // globally & permanently\n  \n      var dso = LDSO.loadedLibsByName[libName];\n      if (dso) {\n        // the library is being loaded or has been loaded already.\n        if (!flags.global) {\n          if (localScope) {\n            Object.assign(localScope, dso.exports);\n          }\n        } else if (!dso.global) {\n          // The library was previously loaded only locally but not\n          // we have a request with global=true.\n          dso.global = true;\n          mergeLibSymbols(dso.exports, libName)\n        }\n        // same for \"nodelete\"\n        if (flags.nodelete && dso.refcount !== Infinity) {\n          dso.refcount = Infinity;\n        }\n        dso.refcount++\n        if (handle) {\n          LDSO.loadedLibsByHandle[handle] = dso;\n        }\n        return flags.loadAsync ? Promise.resolve(true) : true;\n      }\n  \n      // allocate new DSO\n      dso = newDSO(libName, handle, 'loading');\n      dso.refcount = flags.nodelete ? Infinity : 1;\n      dso.global = flags.global;\n  \n      // libName -> libData\n      function loadLibData() {\n  \n        // for wasm, we can use fetch for async, but for fs mode we can only imitate it\n        if (handle) {\n          var data = HEAPU32[(((handle)+(28))>>2)];\n          var dataSize = HEAPU32[(((handle)+(32))>>2)];\n          if (data && dataSize) {\n            var libData = HEAP8.slice(data, data + dataSize);\n            return flags.loadAsync ? Promise.resolve(libData) : libData;\n          }\n        }\n  \n        var libFile = locateFile(libName);\n        if (flags.loadAsync) {\n          return new Promise((resolve, reject) => asyncLoad(libFile, resolve, reject));\n        }\n  \n        // load the binary synchronously\n        if (!readBinary) {\n          throw new Error(`${libFile}: file not found, and synchronous loading of external files is not available`);\n        }\n        return readBinary(libFile);\n      }\n  \n      // libName -> exports\n      function getExports() {\n        // lookup preloaded cache first\n        var preloaded = preloadedWasm[libName];\n        if (preloaded) {\n          return flags.loadAsync ? Promise.resolve(preloaded) : preloaded;\n        }\n  \n        // module not preloaded - load lib data and create new module from it\n        if (flags.loadAsync) {\n          return loadLibData().then((libData) => loadWebAssemblyModule(libData, flags, libName, localScope, handle));\n        }\n  \n        return loadWebAssemblyModule(loadLibData(), flags, libName, localScope, handle);\n      }\n  \n      // module for lib is loaded - update the dso & global namespace\n      function moduleLoaded(exports) {\n        if (dso.global) {\n          mergeLibSymbols(exports, libName);\n        } else if (localScope) {\n          Object.assign(localScope, exports);\n        }\n        dso.exports = exports;\n      }\n  \n      if (flags.loadAsync) {\n        return getExports().then((exports) => {\n          moduleLoaded(exports);\n          return true;\n        });\n      }\n  \n      moduleLoaded(getExports());\n      return true;\n    }\n  \n  \n  var reportUndefinedSymbols = () => {\n      for (var [symName, entry] of Object.entries(GOT)) {\n        if (entry.value == 0) {\n          var value = resolveGlobalSymbol(symName, true).sym;\n          if (!value && !entry.required) {\n            // Ignore undefined symbols that are imported as weak.\n            continue;\n          }\n          if (typeof value == 'function') {\n            /** @suppress {checkTypes} */\n            entry.value = addFunction(value, value.sig);\n          } else if (typeof value == 'number') {\n            entry.value = value;\n          } else {\n            throw new Error(`bad export type for '${symName}': ${typeof value}`);\n          }\n        }\n      }\n    };\n  var loadDylibs = () => {\n      if (!dynamicLibraries.length) {\n        reportUndefinedSymbols();\n        return;\n      }\n  \n      // Load binaries asynchronously\n      addRunDependency('loadDylibs');\n      dynamicLibraries\n        .reduce((chain, lib) => chain.then(() =>\n          loadDynamicLibrary(lib, {loadAsync: true, global: true, nodelete: true, allowUndefined: true})\n        ), Promise.resolve())\n        .then(() => {\n          // we got them all, wonderful\n          reportUndefinedSymbols();\n          removeRunDependency('loadDylibs');\n        });\n    };\n\n\n  var noExitRuntime = Module['noExitRuntime'] || true;\n\n\n\n  \n    /**\n     * @param {number} ptr\n     * @param {number} value\n     * @param {string} type\n     */\n  function setValue(ptr, value, type = 'i8') {\n    if (type.endsWith('*')) type = '*';\n    switch (type) {\n      case 'i1': HEAP8[ptr] = value; break;\n      case 'i8': HEAP8[ptr] = value; break;\n      case 'i16': HEAP16[((ptr)>>1)] = value; break;\n      case 'i32': HEAP32[((ptr)>>2)] = value; break;\n      case 'i64': HEAP64[((ptr)>>3)] = BigInt(value); break;\n      case 'float': HEAPF32[((ptr)>>2)] = value; break;\n      case 'double': HEAPF64[((ptr)>>3)] = value; break;\n      case '*': HEAPU32[((ptr)>>2)] = value; break;\n      default: abort(`invalid type for setValue: ${type}`);\n    }\n  }\n\n\n\n  var ___assert_fail = (condition, filename, line, func) => {\n      abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);\n    };\n  ___assert_fail.sig = 'vppip';\n\n  var ___call_sighandler = (fp, sig) => getWasmTableEntry(fp)(sig);\n  ___call_sighandler.sig = 'vpi';\n\n\n  var ___memory_base = new WebAssembly.Global({'value': 'i32', 'mutable': false}, 67108864);\n\n  var ___stack_pointer = new WebAssembly.Global({'value': 'i32', 'mutable': true}, 73476080);\n\n  var PATH = {\n  isAbs:(path) => path.charAt(0) === '/',\n  splitPath:(filename) => {\n        var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },\n  normalizeArray:(parts, allowAboveRoot) => {\n        // if the path tries to go above the root, `up` ends up > 0\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n        // if the path is allowed to go above the root, restore leading ..s\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },\n  normalize:(path) => {\n        var isAbsolute = PATH.isAbs(path),\n            trailingSlash = path.substr(-1) === '/';\n        // Normalize the path\n        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },\n  dirname:(path) => {\n        var result = PATH.splitPath(path),\n            root = result[0],\n            dir = result[1];\n        if (!root && !dir) {\n          // No dirname whatsoever\n          return '.';\n        }\n        if (dir) {\n          // It has a dirname, strip trailing slash\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },\n  basename:(path) => {\n        // EMSCRIPTEN return '/'' for '/', not an empty string\n        if (path === '/') return '/';\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, \"\");\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash+1);\n      },\n  join:(...paths) => PATH.normalize(paths.join('/')),\n  join2:(l, r) => PATH.normalize(l + '/' + r),\n  };\n  \n  var initRandomFill = () => {\n      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {\n        // for modern web browsers\n        return (view) => crypto.getRandomValues(view);\n      } else\n      if (ENVIRONMENT_IS_NODE) {\n        // for nodejs with or without crypto support included\n        try {\n          var crypto_module = require('crypto');\n          var randomFillSync = crypto_module['randomFillSync'];\n          if (randomFillSync) {\n            // nodejs with LTS crypto support\n            return (view) => crypto_module['randomFillSync'](view);\n          }\n          // very old nodejs with the original crypto API\n          var randomBytes = crypto_module['randomBytes'];\n          return (view) => (\n            view.set(randomBytes(view.byteLength)),\n            // Return the original view to match modern native implementations.\n            view\n          );\n        } catch (e) {\n          // nodejs doesn't have crypto support\n        }\n      }\n      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096\n      abort('initRandomDevice');\n    };\n  var randomFill = (view) => {\n      // Lazily init on the first invocation.\n      return (randomFill = initRandomFill())(view);\n    };\n  \n  \n  \n  var PATH_FS = {\n  resolve:(...args) => {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = (i >= 0) ? args[i] : FS.cwd();\n          // Skip empty and invalid entries\n          if (typeof path != 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            return ''; // an invalid portion invalidates the whole thing\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');\n        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n      },\n  relative:(from, to) => {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      },\n  };\n  \n  \n  \n  var FS_stdin_getChar_buffer = [];\n  \n  var lengthBytesUTF8 = (str) => {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n        // unit, not a Unicode code point of the character! So decode\n        // UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var c = str.charCodeAt(i); // possibly a lead surrogate\n        if (c <= 0x7F) {\n          len++;\n        } else if (c <= 0x7FF) {\n          len += 2;\n        } else if (c >= 0xD800 && c <= 0xDFFF) {\n          len += 4; ++i;\n        } else {\n          len += 3;\n        }\n      }\n      return len;\n    };\n  \n  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {\n      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,\n      // undefined and false each don't write out any bytes.\n      if (!(maxBytesToWrite > 0))\n        return 0;\n  \n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n        // unit, not a Unicode code point of the character! So decode\n        // UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description\n        // and https://www.ietf.org/rfc/rfc2279.txt\n        // and https://tools.ietf.org/html/rfc3629\n        var u = str.charCodeAt(i); // possibly a lead surrogate\n        if (u >= 0xD800 && u <= 0xDFFF) {\n          var u1 = str.charCodeAt(++i);\n          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\n        }\n        if (u <= 0x7F) {\n          if (outIdx >= endIdx) break;\n          heap[outIdx++] = u;\n        } else if (u <= 0x7FF) {\n          if (outIdx + 1 >= endIdx) break;\n          heap[outIdx++] = 0xC0 | (u >> 6);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else if (u <= 0xFFFF) {\n          if (outIdx + 2 >= endIdx) break;\n          heap[outIdx++] = 0xE0 | (u >> 12);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else {\n          if (outIdx + 3 >= endIdx) break;\n          heap[outIdx++] = 0xF0 | (u >> 18);\n          heap[outIdx++] = 0x80 | ((u >> 12) & 63);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        }\n      }\n      // Null-terminate the pointer to the buffer.\n      heap[outIdx] = 0;\n      return outIdx - startIdx;\n    };\n  /** @type {function(string, boolean=, number=)} */\n  function intArrayFromString(stringy, dontAddNull, length) {\n    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\n    var u8array = new Array(len);\n    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n    if (dontAddNull) u8array.length = numBytesWritten;\n    return u8array;\n  }\n  var FS_stdin_getChar = () => {\n      if (!FS_stdin_getChar_buffer.length) {\n        var result = null;\n        if (ENVIRONMENT_IS_NODE) {\n          // we will read data by chunks of BUFSIZE\n          var BUFSIZE = 256;\n          var buf = Buffer.alloc(BUFSIZE);\n          var bytesRead = 0;\n  \n          // For some reason we must suppress a closure warning here, even though\n          // fd definitely exists on process.stdin, and is even the proper way to\n          // get the fd of stdin,\n          // https://github.com/nodejs/help/issues/2136#issuecomment-523649904\n          // This started to happen after moving this logic out of library_tty.js,\n          // so it is related to the surrounding code in some unclear manner.\n          /** @suppress {missingProperties} */\n          var fd = process.stdin.fd;\n  \n          try {\n            bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);\n          } catch(e) {\n            // Cross-platform differences: on Windows, reading EOF throws an\n            // exception, but on other OSes, reading EOF returns 0. Uniformize\n            // behavior by treating the EOF exception to return 0.\n            if (e.toString().includes('EOF')) bytesRead = 0;\n            else throw e;\n          }\n  \n          if (bytesRead > 0) {\n            result = buf.slice(0, bytesRead).toString('utf-8');\n          }\n        } else\n        if (typeof window != 'undefined' &&\n          typeof window.prompt == 'function') {\n          // Browser.\n          result = window.prompt('Input: ');  // returns null on cancel\n          if (result !== null) {\n            result += '\\n';\n          }\n        } else\n        {}\n        if (!result) {\n          return null;\n        }\n        FS_stdin_getChar_buffer = intArrayFromString(result, true);\n      }\n      return FS_stdin_getChar_buffer.shift();\n    };\n  var TTY = {\n  ttys:[],\n  init() {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY\n        //   // device, it always assumes it's a TTY device. because of this, we're forcing\n        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible\n        //   // with text files until FS.init can be refactored.\n        //   process.stdin.setEncoding('utf8');\n        // }\n      },\n  shutdown() {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?\n        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation\n        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?\n        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle\n        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call\n        //   process.stdin.pause();\n        // }\n      },\n  register(dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },\n  stream_ops:{\n  open(stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },\n  close(stream) {\n          // flush any pending line data\n          stream.tty.ops.fsync(stream.tty);\n        },\n  fsync(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n  read(stream, buffer, offset, length, pos /* ignored */) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset+i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },\n  write(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        },\n  },\n  default_tty_ops:{\n  get_char(tty) {\n          return FS_stdin_getChar();\n        },\n  put_char(tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.\n          }\n        },\n  fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        },\n  ioctl_tcgets(tty) {\n          // typical setting\n          return {\n            c_iflag: 25856,\n            c_oflag: 5,\n            c_cflag: 191,\n            c_lflag: 35387,\n            c_cc: [\n              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,\n              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            ]\n          };\n        },\n  ioctl_tcsets(tty, optional_actions, data) {\n          // currently just ignore\n          return 0;\n        },\n  ioctl_tiocgwinsz(tty) {\n          return [24, 80];\n        },\n  },\n  default_tty1_ops:{\n  put_char(tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n  fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        },\n  },\n  };\n  \n  \n  var zeroMemory = (address, size) => {\n      HEAPU8.fill(0, address, address + size);\n      return address;\n    };\n  \n  var mmapAlloc = (size) => {\n      size = alignMemory(size, 65536);\n      var ptr = _emscripten_builtin_memalign(65536, size);\n      if (!ptr) return 0;\n      return zeroMemory(ptr, size);\n    };\n  var MEMFS = {\n  ops_table:null,\n  mount(mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },\n  createNode(parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          // no supported\n          throw new FS.ErrnoError(63);\n        }\n        MEMFS.ops_table ||= {\n          dir: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              lookup: MEMFS.node_ops.lookup,\n              mknod: MEMFS.node_ops.mknod,\n              rename: MEMFS.node_ops.rename,\n              unlink: MEMFS.node_ops.unlink,\n              rmdir: MEMFS.node_ops.rmdir,\n              readdir: MEMFS.node_ops.readdir,\n              symlink: MEMFS.node_ops.symlink\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek\n            }\n          },\n          file: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek,\n              read: MEMFS.stream_ops.read,\n              write: MEMFS.stream_ops.write,\n              allocate: MEMFS.stream_ops.allocate,\n              mmap: MEMFS.stream_ops.mmap,\n              msync: MEMFS.stream_ops.msync\n            }\n          },\n          link: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              readlink: MEMFS.node_ops.readlink\n            },\n            stream: {}\n          },\n          chrdev: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr\n            },\n            stream: FS.chrdev_stream_ops\n          }\n        };\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.\n          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred\n          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size\n          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.\n          node.contents = null; \n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n        // add the new node to the parent\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },\n  getFileDataAsTypedArray(node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.\n        return new Uint8Array(node.contents);\n      },\n  expandFileStorage(node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.\n        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.\n        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to\n        // avoid overshooting the allocation cap by a very large margin.\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity); // Allocate new storage.\n        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.\n      },\n  resizeFileStorage(node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null; // Fully decommit when requesting a resize to zero.\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize); // Allocate new storage.\n          if (oldContents) {\n            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.\n          }\n          node.usedBytes = newSize;\n        }\n      },\n  node_ops:{\n  getattr(node) {\n          var attr = {};\n          // device numbers reuse inode numbers.\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),\n          //       but this is not required by the standard.\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },\n  setattr(node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },\n  lookup(parent, name) {\n          throw FS.genericErrors[44];\n        },\n  mknod(parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },\n  rename(old_node, new_dir, new_name) {\n          // if we're overwriting a directory at new_name, make sure it's empty.\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {\n            }\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n          // do the internal rewiring\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now()\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n        },\n  unlink(parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n  rmdir(parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n  readdir(node) {\n          var entries = ['.', '..'];\n          for (var key of Object.keys(node.contents)) {\n            entries.push(key);\n          }\n          return entries;\n        },\n  symlink(parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },\n  readlink(node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        },\n  },\n  stream_ops:{\n  read(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          if (size > 8 && contents.subarray) { // non-trivial, and typed array\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },\n  write(stream, buffer, offset, length, position, canOwn) {\n          // If the buffer is located in main memory (HEAP), and if\n          // memory can grow, we can't hold on to references of the\n          // memory buffer, as they may get invalidated. That means we\n          // need to do copy its contents.\n          if (buffer.buffer === HEAP8.buffer) {\n            canOwn = false;\n          }\n  \n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n  \n          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?\n            if (canOwn) {\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?\n              node.contents.set(buffer.subarray(offset, offset + length), position);\n              return length;\n            }\n          }\n  \n          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.\n          MEMFS.expandFileStorage(node, position+length);\n          if (node.contents.subarray && buffer.subarray) {\n            // Use typed array write which is available.\n            node.contents.set(buffer.subarray(offset, offset + length), position);\n          } else {\n            for (var i = 0; i < length; i++) {\n             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },\n  llseek(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },\n  allocate(stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n        },\n  mmap(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n          // Only make a new copy when MAP_PRIVATE is specified.\n          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {\n            // We can't emulate MAP_SHARED when the file is not backed by the\n            // buffer we're mapping to (e.g. the HEAP buffer).\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            if (contents) {\n              // Try to avoid unnecessary slices.\n              if (position > 0 || position + length < contents.length) {\n                if (contents.subarray) {\n                  contents = contents.subarray(position, position + length);\n                } else {\n                  contents = Array.prototype.slice.call(contents, position, position + length);\n                }\n              }\n              HEAP8.set(contents, ptr);\n            }\n          }\n          return { ptr, allocated };\n        },\n  msync(stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n          // should we check if bytesWritten and length are the same?\n          return 0;\n        },\n  },\n  };\n  \n  \n  \n  var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {\n      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);\n    };\n  \n  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {\n      // Ensure plugins are ready.\n      if (typeof Browser != 'undefined') Browser.init();\n  \n      var handled = false;\n      preloadPlugins.forEach((plugin) => {\n        if (handled) return;\n        if (plugin['canHandle'](fullname)) {\n          plugin['handle'](byteArray, fullname, finish, onerror);\n          handled = true;\n        }\n      });\n      return handled;\n    };\n  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {\n      // TODO we should allow people to just pass in a complete filename instead\n      // of parent and name being that we just join them anyways\n      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname\n      function processData(byteArray) {\n        function finish(byteArray) {\n          preFinish?.();\n          if (!dontCreateFile) {\n            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n          }\n          onload?.();\n          removeRunDependency(dep);\n        }\n        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {\n          onerror?.();\n          removeRunDependency(dep);\n        })) {\n          return;\n        }\n        finish(byteArray);\n      }\n      addRunDependency(dep);\n      if (typeof url == 'string') {\n        asyncLoad(url, processData, onerror);\n      } else {\n        processData(url);\n      }\n    };\n  \n  var FS_modeStringToFlags = (str) => {\n      var flagModes = {\n        'r': 0,\n        'r+': 2,\n        'w': 512 | 64 | 1,\n        'w+': 512 | 64 | 2,\n        'a': 1024 | 64 | 1,\n        'a+': 1024 | 64 | 2,\n      };\n      var flags = flagModes[str];\n      if (typeof flags == 'undefined') {\n        throw new Error(`Unknown file open mode: ${str}`);\n      }\n      return flags;\n    };\n  \n  var FS_getMode = (canRead, canWrite) => {\n      var mode = 0;\n      if (canRead) mode |= 292 | 73;\n      if (canWrite) mode |= 146;\n      return mode;\n    };\n  \n  \n  \n  \n  \n  \n  var IDBFS = {\n  dbs:{\n  },\n  indexedDB:() => {\n        if (typeof indexedDB != 'undefined') return indexedDB;\n        var ret = null;\n        if (typeof window == 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n        return ret;\n      },\n  DB_VERSION:21,\n  DB_STORE_NAME:\"FILE_DATA\",\n  queuePersist:(mount) => {\n        function onPersistComplete() {\n          if (mount.idbPersistState === 'again') startPersist(); // If a new sync request has appeared in between, kick off a new sync\n          else mount.idbPersistState = 0; // Otherwise reset sync state back to idle to wait for a new sync later\n        }\n        function startPersist() {\n          mount.idbPersistState = 'idb'; // Mark that we are currently running a sync operation\n          IDBFS.syncfs(mount, /*populate:*/false, onPersistComplete);\n        }\n  \n        if (!mount.idbPersistState) {\n          // Programs typically write/copy/move multiple files in the in-memory\n          // filesystem within a single app frame, so when a filesystem sync\n          // command is triggered, do not start it immediately, but only after\n          // the current frame is finished. This way all the modified files\n          // inside the main loop tick will be batched up to the same sync.\n          mount.idbPersistState = setTimeout(startPersist, 0);\n        } else if (mount.idbPersistState === 'idb') {\n          // There is an active IndexedDB sync operation in-flight, but we now\n          // have accumulated more files to sync. We should therefore queue up\n          // a new sync after the current one finishes so that all writes\n          // will be properly persisted.\n          mount.idbPersistState = 'again';\n        }\n      },\n  mount:(mount) => {\n        // reuse core MEMFS functionality\n        var mnt = MEMFS.mount(mount);\n        // If the automatic IDBFS persistence option has been selected, then automatically persist\n        // all modifications to the filesystem as they occur.\n        if (mount?.opts?.autoPersist) {\n          mnt.idbPersistState = 0; // IndexedDB sync starts in idle state\n          var memfs_node_ops = mnt.node_ops;\n          mnt.node_ops = Object.assign({}, mnt.node_ops); // Clone node_ops to inject write tracking\n          mnt.node_ops.mknod = (parent, name, mode, dev) => {\n            var node = memfs_node_ops.mknod(parent, name, mode, dev);\n            // Propagate injected node_ops to the newly created child node\n            node.node_ops = mnt.node_ops;\n            // Remember for each IDBFS node which IDBFS mount point they came from so we know which mount to persist on modification.\n            node.idbfs_mount = mnt.mount;\n            // Remember original MEMFS stream_ops for this node\n            node.memfs_stream_ops = node.stream_ops;\n            // Clone stream_ops to inject write tracking\n            node.stream_ops = Object.assign({}, node.stream_ops);\n  \n            // Track all file writes\n            node.stream_ops.write = (stream, buffer, offset, length, position, canOwn) => {\n              // This file has been modified, we must persist IndexedDB when this file closes\n              stream.node.isModified = true;\n              return node.memfs_stream_ops.write(stream, buffer, offset, length, position, canOwn);\n            };\n  \n            // Persist IndexedDB on file close\n            node.stream_ops.close = (stream) => {\n              var n = stream.node;\n              if (n.isModified) {\n                IDBFS.queuePersist(n.idbfs_mount);\n                n.isModified = false;\n              }\n              if (n.memfs_stream_ops.close) return n.memfs_stream_ops.close(stream);\n            };\n  \n            return node;\n          };\n          // Also kick off persisting the filesystem on other operations that modify the filesystem.\n          mnt.node_ops.mkdir   = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.mkdir(...args));\n          mnt.node_ops.rmdir   = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.rmdir(...args));\n          mnt.node_ops.symlink = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.symlink(...args));\n          mnt.node_ops.unlink  = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.unlink(...args));\n          mnt.node_ops.rename  = (...args) => (IDBFS.queuePersist(mnt.mount), memfs_node_ops.rename(...args));\n        }\n        return mnt;\n      },\n  syncfs:(mount, populate, callback) => {\n        IDBFS.getLocalSet(mount, (err, local) => {\n          if (err) return callback(err);\n  \n          IDBFS.getRemoteSet(mount, (err, remote) => {\n            if (err) return callback(err);\n  \n            var src = populate ? remote : local;\n            var dst = populate ? local : remote;\n  \n            IDBFS.reconcile(src, dst, callback);\n          });\n        });\n      },\n  quit:() => {\n        Object.values(IDBFS.dbs).forEach((value) => value.close());\n        IDBFS.dbs = {};\n      },\n  getDB:(name, callback) => {\n        // check the cache first\n        var db = IDBFS.dbs[name];\n        if (db) {\n          return callback(null, db);\n        }\n  \n        var req;\n        try {\n          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);\n        } catch (e) {\n          return callback(e);\n        }\n        if (!req) {\n          return callback(\"Unable to connect to IndexedDB\");\n        }\n        req.onupgradeneeded = (e) => {\n          var db = /** @type {IDBDatabase} */ (e.target.result);\n          var transaction = e.target.transaction;\n  \n          var fileStore;\n  \n          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {\n            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);\n          } else {\n            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);\n          }\n  \n          if (!fileStore.indexNames.contains('timestamp')) {\n            fileStore.createIndex('timestamp', 'timestamp', { unique: false });\n          }\n        };\n        req.onsuccess = () => {\n          db = /** @type {IDBDatabase} */ (req.result);\n  \n          // add to the cache\n          IDBFS.dbs[name] = db;\n          callback(null, db);\n        };\n        req.onerror = (e) => {\n          callback(e.target.error);\n          e.preventDefault();\n        };\n      },\n  getLocalSet:(mount, callback) => {\n        var entries = {};\n  \n        function isRealDir(p) {\n          return p !== '.' && p !== '..';\n        };\n        function toAbsolute(root) {\n          return (p) => PATH.join2(root, p);\n        };\n  \n        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));\n  \n        while (check.length) {\n          var path = check.pop();\n          var stat;\n  \n          try {\n            stat = FS.stat(path);\n          } catch (e) {\n            return callback(e);\n          }\n  \n          if (FS.isDir(stat.mode)) {\n            check.push(...FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));\n          }\n  \n          entries[path] = { 'timestamp': stat.mtime };\n        }\n  \n        return callback(null, { type: 'local', entries: entries });\n      },\n  getRemoteSet:(mount, callback) => {\n        var entries = {};\n  \n        IDBFS.getDB(mount.mountpoint, (err, db) => {\n          if (err) return callback(err);\n  \n          try {\n            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');\n            transaction.onerror = (e) => {\n              callback(e.target.error);\n              e.preventDefault();\n            };\n  \n            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n            var index = store.index('timestamp');\n  \n            index.openKeyCursor().onsuccess = (event) => {\n              var cursor = event.target.result;\n  \n              if (!cursor) {\n                return callback(null, { type: 'remote', db, entries });\n              }\n  \n              entries[cursor.primaryKey] = { 'timestamp': cursor.key };\n  \n              cursor.continue();\n            };\n          } catch (e) {\n            return callback(e);\n          }\n        });\n      },\n  loadLocalEntry:(path, callback) => {\n        var stat, node;\n  \n        try {\n          var lookup = FS.lookupPath(path);\n          node = lookup.node;\n          stat = FS.stat(path);\n        } catch (e) {\n          return callback(e);\n        }\n  \n        if (FS.isDir(stat.mode)) {\n          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode });\n        } else if (FS.isFile(stat.mode)) {\n          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.\n          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.\n          node.contents = MEMFS.getFileDataAsTypedArray(node);\n          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode, 'contents': node.contents });\n        } else {\n          return callback(new Error('node type not supported'));\n        }\n      },\n  storeLocalEntry:(path, entry, callback) => {\n        try {\n          if (FS.isDir(entry['mode'])) {\n            FS.mkdirTree(path, entry['mode']);\n          } else if (FS.isFile(entry['mode'])) {\n            FS.writeFile(path, entry['contents'], { canOwn: true });\n          } else {\n            return callback(new Error('node type not supported'));\n          }\n  \n          FS.chmod(path, entry['mode']);\n          FS.utime(path, entry['timestamp'], entry['timestamp']);\n        } catch (e) {\n          return callback(e);\n        }\n  \n        callback(null);\n      },\n  removeLocalEntry:(path, callback) => {\n        try {\n          var stat = FS.stat(path);\n  \n          if (FS.isDir(stat.mode)) {\n            FS.rmdir(path);\n          } else if (FS.isFile(stat.mode)) {\n            FS.unlink(path);\n          }\n        } catch (e) {\n          return callback(e);\n        }\n  \n        callback(null);\n      },\n  loadRemoteEntry:(store, path, callback) => {\n        var req = store.get(path);\n        req.onsuccess = (event) => callback(null, event.target.result);\n        req.onerror = (e) => {\n          callback(e.target.error);\n          e.preventDefault();\n        };\n      },\n  storeRemoteEntry:(store, path, entry, callback) => {\n        try {\n          var req = store.put(entry, path);\n        } catch (e) {\n          callback(e);\n          return;\n        }\n        req.onsuccess = (event) => callback();\n        req.onerror = (e) => {\n          callback(e.target.error);\n          e.preventDefault();\n        };\n      },\n  removeRemoteEntry:(store, path, callback) => {\n        var req = store.delete(path);\n        req.onsuccess = (event) => callback();\n        req.onerror = (e) => {\n          callback(e.target.error);\n          e.preventDefault();\n        };\n      },\n  reconcile:(src, dst, callback) => {\n        var total = 0;\n  \n        var create = [];\n        Object.keys(src.entries).forEach((key) => {\n          var e = src.entries[key];\n          var e2 = dst.entries[key];\n          if (!e2 || e['timestamp'].getTime() != e2['timestamp'].getTime()) {\n            create.push(key);\n            total++;\n          }\n        });\n  \n        var remove = [];\n        Object.keys(dst.entries).forEach((key) => {\n          if (!src.entries[key]) {\n            remove.push(key);\n            total++;\n          }\n        });\n  \n        if (!total) {\n          return callback(null);\n        }\n  \n        var errored = false;\n        var db = src.type === 'remote' ? src.db : dst.db;\n        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');\n        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n  \n        function done(err) {\n          if (err && !errored) {\n            errored = true;\n            return callback(err);\n          }\n        };\n  \n        // transaction may abort if (for example) there is a QuotaExceededError\n        transaction.onerror = transaction.onabort = (e) => {\n          done(e.target.error);\n          e.preventDefault();\n        };\n  \n        transaction.oncomplete = (e) => {\n          if (!errored) {\n            callback(null);\n          }\n        };\n  \n        // sort paths in ascending order so directory entries are created\n        // before the files inside them\n        create.sort().forEach((path) => {\n          if (dst.type === 'local') {\n            IDBFS.loadRemoteEntry(store, path, (err, entry) => {\n              if (err) return done(err);\n              IDBFS.storeLocalEntry(path, entry, done);\n            });\n          } else {\n            IDBFS.loadLocalEntry(path, (err, entry) => {\n              if (err) return done(err);\n              IDBFS.storeRemoteEntry(store, path, entry, done);\n            });\n          }\n        });\n  \n        // sort paths in descending order so files are deleted before their\n        // parent directories\n        remove.sort().reverse().forEach((path) => {\n          if (dst.type === 'local') {\n            IDBFS.removeLocalEntry(path, done);\n          } else {\n            IDBFS.removeRemoteEntry(store, path, done);\n          }\n        });\n      },\n  };\n  \n  \n  \n  var ERRNO_CODES = {\n      'EPERM': 63,\n      'ENOENT': 44,\n      'ESRCH': 71,\n      'EINTR': 27,\n      'EIO': 29,\n      'ENXIO': 60,\n      'E2BIG': 1,\n      'ENOEXEC': 45,\n      'EBADF': 8,\n      'ECHILD': 12,\n      'EAGAIN': 6,\n      'EWOULDBLOCK': 6,\n      'ENOMEM': 48,\n      'EACCES': 2,\n      'EFAULT': 21,\n      'ENOTBLK': 105,\n      'EBUSY': 10,\n      'EEXIST': 20,\n      'EXDEV': 75,\n      'ENODEV': 43,\n      'ENOTDIR': 54,\n      'EISDIR': 31,\n      'EINVAL': 28,\n      'ENFILE': 41,\n      'EMFILE': 33,\n      'ENOTTY': 59,\n      'ETXTBSY': 74,\n      'EFBIG': 22,\n      'ENOSPC': 51,\n      'ESPIPE': 70,\n      'EROFS': 69,\n      'EMLINK': 34,\n      'EPIPE': 64,\n      'EDOM': 18,\n      'ERANGE': 68,\n      'ENOMSG': 49,\n      'EIDRM': 24,\n      'ECHRNG': 106,\n      'EL2NSYNC': 156,\n      'EL3HLT': 107,\n      'EL3RST': 108,\n      'ELNRNG': 109,\n      'EUNATCH': 110,\n      'ENOCSI': 111,\n      'EL2HLT': 112,\n      'EDEADLK': 16,\n      'ENOLCK': 46,\n      'EBADE': 113,\n      'EBADR': 114,\n      'EXFULL': 115,\n      'ENOANO': 104,\n      'EBADRQC': 103,\n      'EBADSLT': 102,\n      'EDEADLOCK': 16,\n      'EBFONT': 101,\n      'ENOSTR': 100,\n      'ENODATA': 116,\n      'ETIME': 117,\n      'ENOSR': 118,\n      'ENONET': 119,\n      'ENOPKG': 120,\n      'EREMOTE': 121,\n      'ENOLINK': 47,\n      'EADV': 122,\n      'ESRMNT': 123,\n      'ECOMM': 124,\n      'EPROTO': 65,\n      'EMULTIHOP': 36,\n      'EDOTDOT': 125,\n      'EBADMSG': 9,\n      'ENOTUNIQ': 126,\n      'EBADFD': 127,\n      'EREMCHG': 128,\n      'ELIBACC': 129,\n      'ELIBBAD': 130,\n      'ELIBSCN': 131,\n      'ELIBMAX': 132,\n      'ELIBEXEC': 133,\n      'ENOSYS': 52,\n      'ENOTEMPTY': 55,\n      'ENAMETOOLONG': 37,\n      'ELOOP': 32,\n      'EOPNOTSUPP': 138,\n      'EPFNOSUPPORT': 139,\n      'ECONNRESET': 15,\n      'ENOBUFS': 42,\n      'EAFNOSUPPORT': 5,\n      'EPROTOTYPE': 67,\n      'ENOTSOCK': 57,\n      'ENOPROTOOPT': 50,\n      'ESHUTDOWN': 140,\n      'ECONNREFUSED': 14,\n      'EADDRINUSE': 3,\n      'ECONNABORTED': 13,\n      'ENETUNREACH': 40,\n      'ENETDOWN': 38,\n      'ETIMEDOUT': 73,\n      'EHOSTDOWN': 142,\n      'EHOSTUNREACH': 23,\n      'EINPROGRESS': 26,\n      'EALREADY': 7,\n      'EDESTADDRREQ': 17,\n      'EMSGSIZE': 35,\n      'EPROTONOSUPPORT': 66,\n      'ESOCKTNOSUPPORT': 137,\n      'EADDRNOTAVAIL': 4,\n      'ENETRESET': 39,\n      'EISCONN': 30,\n      'ENOTCONN': 53,\n      'ETOOMANYREFS': 141,\n      'EUSERS': 136,\n      'EDQUOT': 19,\n      'ESTALE': 72,\n      'ENOTSUP': 138,\n      'ENOMEDIUM': 148,\n      'EILSEQ': 25,\n      'EOVERFLOW': 61,\n      'ECANCELED': 11,\n      'ENOTRECOVERABLE': 56,\n      'EOWNERDEAD': 62,\n      'ESTRPIPE': 135,\n    };\n  \n  var NODEFS = {\n  isWindows:false,\n  staticInit() {\n        NODEFS.isWindows = !!process.platform.match(/^win/);\n        var flags = process.binding(\"constants\");\n        // Node.js 4 compatibility: it has no namespaces for constants\n        if (flags[\"fs\"]) {\n          flags = flags[\"fs\"];\n        }\n        NODEFS.flagsForNodeMap = {\n          \"1024\": flags[\"O_APPEND\"],\n          \"64\": flags[\"O_CREAT\"],\n          \"128\": flags[\"O_EXCL\"],\n          \"256\": flags[\"O_NOCTTY\"],\n          \"0\": flags[\"O_RDONLY\"],\n          \"2\": flags[\"O_RDWR\"],\n          \"4096\": flags[\"O_SYNC\"],\n          \"512\": flags[\"O_TRUNC\"],\n          \"1\": flags[\"O_WRONLY\"],\n          \"131072\": flags[\"O_NOFOLLOW\"],\n        };\n      },\n  convertNodeCode(e) {\n        var code = e.code;\n        return ERRNO_CODES[code];\n      },\n  tryFSOperation(f) {\n        try {\n          return f();\n        } catch (e) {\n          if (!e.code) throw e;\n          // node under windows can return code 'UNKNOWN' here:\n          // https://github.com/emscripten-core/emscripten/issues/15468\n          if (e.code === 'UNKNOWN') throw new FS.ErrnoError(28);\n          throw new FS.ErrnoError(NODEFS.convertNodeCode(e));\n        }\n      },\n  mount(mount) {\n        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);\n      },\n  createNode(parent, name, mode, dev) {\n        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var node = FS.createNode(parent, name, mode);\n        node.node_ops = NODEFS.node_ops;\n        node.stream_ops = NODEFS.stream_ops;\n        return node;\n      },\n  getMode(path) {\n        var stat;\n        return NODEFS.tryFSOperation(() => {\n          stat = fs.lstatSync(path);\n          if (NODEFS.isWindows) {\n            // Node.js on Windows never represents permission bit 'x', so\n            // propagate read bits to execute bits\n            stat.mode |= (stat.mode & 292) >> 2;\n          }\n          return stat.mode;\n        });\n      },\n  realPath(node) {\n        var parts = [];\n        while (node.parent !== node) {\n          parts.push(node.name);\n          node = node.parent;\n        }\n        parts.push(node.mount.opts.root);\n        parts.reverse();\n        return PATH.join(...parts);\n      },\n  flagsForNode(flags) {\n        flags &= ~2097152; // Ignore this flag from musl, otherwise node.js fails to open the file.\n        flags &= ~2048; // Ignore this flag from musl, otherwise node.js fails to open the file.\n        flags &= ~32768; // Ignore this flag from musl, otherwise node.js fails to open the file.\n        flags &= ~524288; // Some applications may pass it; it makes no sense for a single process.\n        flags &= ~65536; // Node.js doesn't need this passed in, it errors.\n        var newFlags = 0;\n        for (var k in NODEFS.flagsForNodeMap) {\n          if (flags & k) {\n            newFlags |= NODEFS.flagsForNodeMap[k];\n            flags ^= k;\n          }\n        }\n        if (flags) {\n          throw new FS.ErrnoError(28);\n        }\n        return newFlags;\n      },\n  node_ops:{\n  getattr(node) {\n          var path = NODEFS.realPath(node);\n          var stat;\n          NODEFS.tryFSOperation(() => stat = fs.lstatSync(path));\n          if (NODEFS.isWindows) {\n            // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake\n            // them with default blksize of 4096.\n            // See http://support.microsoft.com/kb/140365\n            if (!stat.blksize) {\n              stat.blksize = 4096;\n            }\n            if (!stat.blocks) {\n              stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;\n            }\n            // Node.js on Windows never represents permission bit 'x', so\n            // propagate read bits to execute bits.\n            stat.mode |= (stat.mode & 292) >> 2;\n          }\n          return {\n            dev: stat.dev,\n            ino: stat.ino,\n            mode: stat.mode,\n            nlink: stat.nlink,\n            uid: stat.uid,\n            gid: stat.gid,\n            rdev: stat.rdev,\n            size: stat.size,\n            atime: stat.atime,\n            mtime: stat.mtime,\n            ctime: stat.ctime,\n            blksize: stat.blksize,\n            blocks: stat.blocks\n          };\n        },\n  setattr(node, attr) {\n          var path = NODEFS.realPath(node);\n          NODEFS.tryFSOperation(() => {\n            if (attr.mode !== undefined) {\n              fs.chmodSync(path, attr.mode);\n              // update the common node structure mode as well\n              node.mode = attr.mode;\n            }\n            if (attr.timestamp !== undefined) {\n              var date = new Date(attr.timestamp);\n              fs.utimesSync(path, date, date);\n            }\n            if (attr.size !== undefined) {\n              fs.truncateSync(path, attr.size);\n            }\n          });\n        },\n  lookup(parent, name) {\n          var path = PATH.join2(NODEFS.realPath(parent), name);\n          var mode = NODEFS.getMode(path);\n          return NODEFS.createNode(parent, name, mode);\n        },\n  mknod(parent, name, mode, dev) {\n          var node = NODEFS.createNode(parent, name, mode, dev);\n          // create the backing node for this in the fs root as well\n          var path = NODEFS.realPath(node);\n          NODEFS.tryFSOperation(() => {\n            if (FS.isDir(node.mode)) {\n              fs.mkdirSync(path, node.mode);\n            } else {\n              fs.writeFileSync(path, '', { mode: node.mode });\n            }\n          });\n          return node;\n        },\n  rename(oldNode, newDir, newName) {\n          var oldPath = NODEFS.realPath(oldNode);\n          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);\n          NODEFS.tryFSOperation(() => fs.renameSync(oldPath, newPath));\n          oldNode.name = newName;\n        },\n  unlink(parent, name) {\n          var path = PATH.join2(NODEFS.realPath(parent), name);\n          NODEFS.tryFSOperation(() => fs.unlinkSync(path));\n        },\n  rmdir(parent, name) {\n          var path = PATH.join2(NODEFS.realPath(parent), name);\n          NODEFS.tryFSOperation(() => fs.rmdirSync(path));\n        },\n  readdir(node) {\n          var path = NODEFS.realPath(node);\n          return NODEFS.tryFSOperation(() => fs.readdirSync(path));\n        },\n  symlink(parent, newName, oldPath) {\n          var newPath = PATH.join2(NODEFS.realPath(parent), newName);\n          NODEFS.tryFSOperation(() => fs.symlinkSync(oldPath, newPath));\n        },\n  readlink(node) {\n          var path = NODEFS.realPath(node);\n          return NODEFS.tryFSOperation(() => fs.readlinkSync(path));\n        },\n  },\n  stream_ops:{\n  open(stream) {\n          var path = NODEFS.realPath(stream.node);\n          NODEFS.tryFSOperation(() => {\n            if (FS.isFile(stream.node.mode)) {\n              stream.shared.refcount = 1;\n              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));\n            }\n          });\n        },\n  close(stream) {\n          NODEFS.tryFSOperation(() => {\n            if (FS.isFile(stream.node.mode) && stream.nfd && --stream.shared.refcount === 0) {\n              fs.closeSync(stream.nfd);\n            }\n          });\n        },\n  dup(stream) {\n          stream.shared.refcount++;\n        },\n  read(stream, buffer, offset, length, position) {\n          // Node.js < 6 compatibility: node errors on 0 length reads\n          if (length === 0) return 0;\n          return NODEFS.tryFSOperation(() =>\n            fs.readSync(stream.nfd, new Int8Array(buffer.buffer, offset, length), 0, length, position)\n          );\n        },\n  write(stream, buffer, offset, length, position) {\n          return NODEFS.tryFSOperation(() =>\n            fs.writeSync(stream.nfd, new Int8Array(buffer.buffer, offset, length), 0, length, position)\n          );\n        },\n  llseek(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              NODEFS.tryFSOperation(() => {\n                var stat = fs.fstatSync(stream.nfd);\n                position += stat.size;\n              });\n            }\n          }\n  \n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n  \n          return position;\n        },\n  mmap(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n  \n          var ptr = mmapAlloc(length);\n  \n          NODEFS.stream_ops.read(stream, HEAP8, ptr, length, position);\n          return { ptr, allocated: true };\n        },\n  msync(stream, buffer, offset, length, mmapFlags) {\n          NODEFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n          // should we check if bytesWritten and length are the same?\n          return 0;\n        },\n  },\n  };\n  var FS = {\n  root:null,\n  mounts:[],\n  devices:{\n  },\n  streams:[],\n  nextInode:1,\n  nameTable:null,\n  currentPath:\"/\",\n  initialized:false,\n  ignorePermissions:true,\n  ErrnoError:class {\n        // We set the `name` property to be able to identify `FS.ErrnoError`\n        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.\n        // - when using PROXYFS, an error can come from an underlying FS\n        // as different FS objects have their own FS.ErrnoError each,\n        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.\n        // we'll use the reliable test `err.name == \"ErrnoError\"` instead\n        constructor(errno) {\n          // TODO(sbc): Use the inline member declaration syntax once we\n          // support it in acorn and closure.\n          this.name = 'ErrnoError';\n          this.errno = errno;\n        }\n      },\n  genericErrors:{\n  },\n  filesystems:null,\n  syncFSRequests:0,\n  readFiles:{\n  },\n  FSStream:class {\n        constructor() {\n          // TODO(https://github.com/emscripten-core/emscripten/issues/21414):\n          // Use inline field declarations.\n          this.shared = {};\n        }\n        get object() {\n          return this.node;\n        }\n        set object(val) {\n          this.node = val;\n        }\n        get isRead() {\n          return (this.flags & 2097155) !== 1;\n        }\n        get isWrite() {\n          return (this.flags & 2097155) !== 0;\n        }\n        get isAppend() {\n          return (this.flags & 1024);\n        }\n        get flags() {\n          return this.shared.flags;\n        }\n        set flags(val) {\n          this.shared.flags = val;\n        }\n        get position() {\n          return this.shared.position;\n        }\n        set position(val) {\n          this.shared.position = val;\n        }\n      },\n  FSNode:class {\n        constructor(parent, name, mode, rdev) {\n          if (!parent) {\n            parent = this;  // root node sets parent to itself\n          }\n          this.parent = parent;\n          this.mount = parent.mount;\n          this.mounted = null;\n          this.id = FS.nextInode++;\n          this.name = name;\n          this.mode = mode;\n          this.node_ops = {};\n          this.stream_ops = {};\n          this.rdev = rdev;\n          this.readMode = 292 | 73;\n          this.writeMode = 146;\n        }\n        get read() {\n          return (this.mode & this.readMode) === this.readMode;\n        }\n        set read(val) {\n          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;\n        }\n        get write() {\n          return (this.mode & this.writeMode) === this.writeMode;\n        }\n        set write(val) {\n          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;\n        }\n        get isFolder() {\n          return FS.isDir(this.mode);\n        }\n        get isDevice() {\n          return FS.isChrdev(this.mode);\n        }\n      },\n  lookupPath(path, opts = {}) {\n        path = PATH_FS.resolve(path);\n  \n        if (!path) return { path: '', node: null };\n  \n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0\n        };\n        opts = Object.assign(defaults, opts)\n  \n        if (opts.recurse_count > 8) {  // max recursive lookup of 8\n          throw new FS.ErrnoError(32);\n        }\n  \n        // split the absolute path\n        var parts = path.split('/').filter((p) => !!p);\n  \n        // start at the root\n        var current = FS.root;\n        var current_path = '/';\n  \n        for (var i = 0; i < parts.length; i++) {\n          var islast = (i === parts.length-1);\n          if (islast && opts.parent) {\n            // stop resolving\n            break;\n          }\n  \n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n  \n          // jump to the mount's root node if this is a mountpoint\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n  \n          // by default, lookupPath will not follow a symlink if it is the final path component.\n          // setting opts.follow = true will override this behavior.\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n  \n              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });\n              current = lookup.node;\n  \n              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n  \n        return { path: current_path, node: current };\n      },\n  getPath(node) {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;\n          }\n          path = path ? `${node.name}/${path}` : node.name;\n          node = node.parent;\n        }\n      },\n  hashName(parentid, name) {\n        var hash = 0;\n  \n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },\n  hashAddNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },\n  hashRemoveNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },\n  lookupNode(parent, name) {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n        // if we failed to find it in the cache, call into the VFS\n        return FS.lookup(parent, name);\n      },\n  createNode(parent, name, mode, rdev) {\n        var node = new FS.FSNode(parent, name, mode, rdev);\n  \n        FS.hashAddNode(node);\n  \n        return node;\n      },\n  destroyNode(node) {\n        FS.hashRemoveNode(node);\n      },\n  isRoot(node) {\n        return node === node.parent;\n      },\n  isMountpoint(node) {\n        return !!node.mounted;\n      },\n  isFile(mode) {\n        return (mode & 61440) === 32768;\n      },\n  isDir(mode) {\n        return (mode & 61440) === 16384;\n      },\n  isLink(mode) {\n        return (mode & 61440) === 40960;\n      },\n  isChrdev(mode) {\n        return (mode & 61440) === 8192;\n      },\n  isBlkdev(mode) {\n        return (mode & 61440) === 24576;\n      },\n  isFIFO(mode) {\n        return (mode & 61440) === 4096;\n      },\n  isSocket(mode) {\n        return (mode & 49152) === 49152;\n      },\n  flagsToPermissionString(flag) {\n        var perms = ['r', 'w', 'rw'][flag & 3];\n        if ((flag & 512)) {\n          perms += 'w';\n        }\n        return perms;\n      },\n  nodePermissions(node, perms) {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n        // return 0 if any user, group or owner bits are set.\n        if (perms.includes('r') && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes('w') && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes('x') && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },\n  mayLookup(dir) {\n        if (!FS.isDir(dir.mode)) return 54;\n        var errCode = FS.nodePermissions(dir, 'x');\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },\n  mayCreate(dir, name) {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {\n        }\n        return FS.nodePermissions(dir, 'wx');\n      },\n  mayDelete(dir, name, isdir) {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, 'wx');\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },\n  mayOpen(node, flags) {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write\n              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },\n  MAX_OPEN_FDS:4096,\n  nextfd() {\n        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },\n  getStreamChecked(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        return stream;\n      },\n  getStream:(fd) => FS.streams[fd],\n  createStream(stream, fd = -1) {\n  \n        // clone it, so we can return an instance of FSStream\n        stream = Object.assign(new FS.FSStream(), stream);\n        if (fd == -1) {\n          fd = FS.nextfd();\n        }\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },\n  closeStream(fd) {\n        FS.streams[fd] = null;\n      },\n  dupStream(origStream, fd = -1) {\n        var stream = FS.createStream(origStream, fd);\n        stream.stream_ops?.dup?.(stream);\n        return stream;\n      },\n  chrdev_stream_ops:{\n  open(stream) {\n          var device = FS.getDevice(stream.node.rdev);\n          // override node's stream ops with the device's\n          stream.stream_ops = device.stream_ops;\n          // forward the open call\n          stream.stream_ops.open?.(stream);\n        },\n  llseek() {\n          throw new FS.ErrnoError(70);\n        },\n  },\n  major:(dev) => ((dev) >> 8),\n  minor:(dev) => ((dev) & 0xff),\n  makedev:(ma, mi) => ((ma) << 8 | (mi)),\n  registerDevice(dev, ops) {\n        FS.devices[dev] = { stream_ops: ops };\n      },\n  getDevice:(dev) => FS.devices[dev],\n  getMounts(mount) {\n        var mounts = [];\n        var check = [mount];\n  \n        while (check.length) {\n          var m = check.pop();\n  \n          mounts.push(m);\n  \n          check.push(...m.mounts);\n        }\n  \n        return mounts;\n      },\n  syncfs(populate, callback) {\n        if (typeof populate == 'function') {\n          callback = populate;\n          populate = false;\n        }\n  \n        FS.syncFSRequests++;\n  \n        if (FS.syncFSRequests > 1) {\n          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);\n        }\n  \n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n  \n        function doCallback(errCode) {\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n  \n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        };\n  \n        // sync all mounts\n        mounts.forEach((mount) => {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },\n  mount(type, opts, mountpoint) {\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n  \n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n          mountpoint = lookup.path;  // use the absolute path\n          node = lookup.node;\n  \n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n  \n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n  \n        var mount = {\n          type,\n          opts,\n          mountpoint,\n          mounts: []\n        };\n  \n        // create a root node for the fs\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n  \n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          // set as a mountpoint\n          node.mounted = mount;\n  \n          // add the new mount to the current mount's children\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n  \n        return mountRoot;\n      },\n  unmount(mountpoint) {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n  \n        // destroy the nodes for this mount, and all its child mounts\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n  \n        Object.keys(FS.nameTable).forEach((hash) => {\n          var current = FS.nameTable[hash];\n  \n          while (current) {\n            var next = current.name_next;\n  \n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n  \n            current = next;\n          }\n        });\n  \n        // no longer a mountpoint\n        node.mounted = null;\n  \n        // remove this mount from the child mounts\n        var idx = node.mount.mounts.indexOf(mount);\n        node.mount.mounts.splice(idx, 1);\n      },\n  lookup(parent, name) {\n        return parent.node_ops.lookup(parent, name);\n      },\n  mknod(path, mode, dev) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === '.' || name === '..') {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },\n  create(path, mode) {\n        mode = mode !== undefined ? mode : 438 /* 0666 */;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },\n  mkdir(path, mode) {\n        mode = mode !== undefined ? mode : 511 /* 0777 */;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },\n  mkdirTree(path, mode) {\n        var dirs = path.split('/');\n        var d = '';\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += '/' + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch(e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },\n  mkdev(path, mode, dev) {\n        if (typeof dev == 'undefined') {\n          dev = mode;\n          mode = 438 /* 0666 */;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },\n  symlink(oldpath, newpath) {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },\n  rename(old_path, new_path) {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n        // parents must exist\n        var lookup, old_dir, new_dir;\n  \n        // let the errors from non existent directories percolate up\n        lookup = FS.lookupPath(old_path, { parent: true });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, { parent: true });\n        new_dir = lookup.node;\n  \n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n        // need to be part of the same mount\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n        // source must exist\n        var old_node = FS.lookupNode(old_dir, old_name);\n        // old path should not be an ancestor of the new path\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(28);\n        }\n        // new path should not be an ancestor of the old path\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(55);\n        }\n        // see if the new path already exists\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {\n          // not fatal\n        }\n        // early out if nothing needs to change\n        if (old_node === new_node) {\n          return;\n        }\n        // we'll need to delete the old entry\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        // need delete permissions if we'll be overwriting.\n        // need create permissions if new doesn't already exist.\n        errCode = new_node ?\n          FS.mayDelete(new_dir, new_name, isdir) :\n          FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {\n          throw new FS.ErrnoError(10);\n        }\n        // if we are going to change the parent, check write permissions\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, 'w');\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // remove the node from the lookup hash\n        FS.hashRemoveNode(old_node);\n        // do the underlying fs rename\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n          // update old node (we do this here to avoid each backend \n          // needing to)\n          old_node.parent = new_dir;\n        } catch (e) {\n          throw e;\n        } finally {\n          // add the node back to the hash (in case node_ops.rename\n          // changed its name)\n          FS.hashAddNode(old_node);\n        }\n      },\n  rmdir(path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },\n  readdir(path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },\n  unlink(path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          // According to POSIX, we should map EISDIR to EPERM, but\n          // we instead do what Linux does (and we must, as we use\n          // the musl linux libc).\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },\n  readlink(path) {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));\n      },\n  stat(path, dontFollow) {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },\n  lstat(path) {\n        return FS.stat(path, true);\n      },\n  chmod(path, mode, dontFollow) {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now()\n        });\n      },\n  lchmod(path, mode) {\n        FS.chmod(path, mode, true);\n      },\n  fchmod(fd, mode) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chmod(stream.node, mode);\n      },\n  chown(path, uid, gid, dontFollow) {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now()\n          // we ignore the uid / gid for now\n        });\n      },\n  lchown(path, uid, gid) {\n        FS.chown(path, uid, gid, true);\n      },\n  fchown(fd, uid, gid) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chown(stream.node, uid, gid);\n      },\n  truncate(path, len) {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, 'w');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now()\n        });\n      },\n  ftruncate(fd, len) {\n        var stream = FS.getStreamChecked(fd);\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },\n  utime(path, atime, mtime) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime)\n        });\n      },\n  open(path, flags, mode) {\n        if (path === \"\") {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;\n        if ((flags & 64)) {\n          mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path == 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072)\n            });\n            node = lookup.node;\n          } catch (e) {\n            // ignore\n          }\n        }\n        // perhaps we need to create the node\n        var created = false;\n        if ((flags & 64)) {\n          if (node) {\n            // if O_CREAT and O_EXCL are set, error out if the node already exists\n            if ((flags & 128)) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            // node doesn't exist, try to create it\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        // can't truncate a device\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n        // if asked only for a directory, then this must be one\n        if ((flags & 65536) && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        // check permissions, if this is not a file we just created now (it is ok to\n        // create and write to a file with read-only permissions; it is read-only\n        // for later use)\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // do truncation if necessary\n        if ((flags & 512) && !created) {\n          FS.truncate(node, 0);\n        }\n        // we've already handled these, don't pass down to the underlying vfs\n        flags &= ~(128 | 512 | 131072);\n  \n        // register the stream with the filesystem\n        var stream = FS.createStream({\n          node,\n          path: FS.getPath(node),  // we want the absolute path to the node\n          flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n          // used by the file family libc calls (fopen, fwrite, ferror, etc.)\n          ungotten: [],\n          error: false\n        });\n        // call the new stream's open function\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },\n  close(stream) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null; // free readdir state\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },\n  isClosed(stream) {\n        return stream.fd === null;\n      },\n  llseek(stream, offset, whence) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },\n  read(stream, buffer, offset, length, position) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },\n  write(stream, buffer, offset, length, position, canOwn) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          // seek to the end before writing in append mode\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },\n  allocate(stream, offset, length) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },\n  mmap(stream, length, position, prot, flags) {\n        // User requests writing to file (prot & PROT_WRITE != 0).\n        // Checking if we have permissions to write to the file unless\n        // MAP_PRIVATE flag is set. According to POSIX spec it is possible\n        // to write to file opened in read-only mode with MAP_PRIVATE flag,\n        // as all modifications will be visible only in the memory of\n        // the current process.\n        if ((prot & 2) !== 0\n            && (flags & 2) === 0\n            && (stream.flags & 2097155) !== 2) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!length) {\n          throw new FS.ErrnoError(28);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },\n  msync(stream, buffer, offset, length, mmapFlags) {\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);\n      },\n  ioctl(stream, cmd, arg) {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },\n  readFile(path, opts = {}) {\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error(`Invalid encoding type \"${opts.encoding}\"`);\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = UTF8ArrayToString(buf, 0);\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },\n  writeFile(path, data, opts = {}) {\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == 'string') {\n          var buf = new Uint8Array(lengthBytesUTF8(data)+1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error('Unsupported data type');\n        }\n        FS.close(stream);\n      },\n  cwd:() => FS.currentPath,\n  chdir(path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, 'x');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },\n  createDefaultDirectories() {\n        FS.mkdir('/tmp');\n        FS.mkdir('/home');\n        FS.mkdir('/home/web_user');\n      },\n  createDefaultDevices() {\n        // create /dev\n        FS.mkdir('/dev');\n        // setup /dev/null\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: () => 0,\n          write: (stream, buffer, offset, length, pos) => length,\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n        // setup /dev/tty and /dev/tty1\n        // stderr needs to print output using err() rather than out()\n        // so we register a second tty just for it.\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n        // setup /dev/[u]random\n        // use a buffer to avoid overhead of individual crypto calls per byte\n        var randomBuffer = new Uint8Array(1024), randomLeft = 0;\n        var randomByte = () => {\n          if (randomLeft === 0) {\n            randomLeft = randomFill(randomBuffer).byteLength;\n          }\n          return randomBuffer[--randomLeft];\n        };\n        FS.createDevice('/dev', 'random', randomByte);\n        FS.createDevice('/dev', 'urandom', randomByte);\n        // we're not going to emulate the actual shm device,\n        // just create the tmp dirs that reside in it commonly\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },\n  createSpecialDirectories() {\n        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the\n        // name of the stream for fd 6 (see test_unistd_ttyname)\n        FS.mkdir('/proc');\n        var proc_self = FS.mkdir('/proc/self');\n        FS.mkdir('/proc/self/fd');\n        FS.mount({\n          mount() {\n            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);\n            node.node_ops = {\n              lookup(parent, name) {\n                var fd = +name;\n                var stream = FS.getStreamChecked(fd);\n                var ret = {\n                  parent: null,\n                  mount: { mountpoint: 'fake' },\n                  node_ops: { readlink: () => stream.path },\n                };\n                ret.parent = ret; // make it look like a simple root node\n                return ret;\n              }\n            };\n            return node;\n          }\n        }, {}, '/proc/self/fd');\n      },\n  createStandardStreams(input, output, error) {\n        // TODO deprecate the old functionality of a single\n        // input / output callback and that utilizes FS.createDevice\n        // and instead require a unique set of stream ops\n  \n        // by default, we symlink the standard streams to the\n        // default tty devices. however, if the standard streams\n        // have been overwritten we create a unique device for\n        // them instead.\n        if (input) {\n          FS.createDevice('/dev', 'stdin', input);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (output) {\n          FS.createDevice('/dev', 'stdout', null, output);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (error) {\n          FS.createDevice('/dev', 'stderr', null, error);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n  \n        // open default streams for the stdin, stdout and stderr devices\n        var stdin = FS.open('/dev/stdin', 0);\n        var stdout = FS.open('/dev/stdout', 1);\n        var stderr = FS.open('/dev/stderr', 1);\n      },\n  staticInit() {\n        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)\n        [44].forEach((code) => {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n  \n        FS.nameTable = new Array(4096);\n  \n        FS.mount(MEMFS, {}, '/');\n  \n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n  \n        FS.filesystems = {\n          'MEMFS': MEMFS,\n          'IDBFS': IDBFS,\n          'NODEFS': NODEFS,\n        };\n      },\n  init(input, output, error) {\n        FS.initialized = true;\n  \n        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here\n        input ??= Module['stdin'];\n        output ??= Module['stdout'];\n        error ??= Module['stderr'];\n  \n        FS.createStandardStreams(input, output, error);\n      },\n  quit() {\n        FS.initialized = false;\n        // force-flush all streams, so we get musl std streams printed out\n        _fflush(0);\n        // close all of our streams\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },\n  findObject(path, dontResolveLastLink) {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },\n  analyzePath(path, dontResolveLastLink) {\n        // operate from within the context of the symlink's target\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {\n        }\n        var ret = {\n          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,\n          parentExists: false, parentPath: null, parentObject: null\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        };\n        return ret;\n      },\n  createPath(parent, path, canRead, canWrite) {\n        parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {\n            // ignore EEXIST\n          }\n          parent = current;\n        }\n        return current;\n      },\n  createFile(parent, name, properties, canRead, canWrite) {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS_getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },\n  createDataFile(parent, name, data, canRead, canWrite, canOwn) {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS_getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n          // make sure we can write to the file\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n      },\n  createDevice(parent, name, input, output) {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS_getMode(!!input, !!output);\n        FS.createDevice.major ??= 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n        // Create a fake device that a set of stream ops to emulate\n        // the old behavior.\n        FS.registerDevice(dev, {\n          open(stream) {\n            stream.seekable = false;\n          },\n          close(stream) {\n            // flush any pending line data\n            if (output?.buffer?.length) {\n              output(10);\n            }\n          },\n          read(stream, buffer, offset, length, pos /* ignored */) {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset+i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write(stream, buffer, offset, length, pos) {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset+i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          }\n        });\n        return FS.mkdev(path, mode, dev);\n      },\n  forceLoadFile(obj) {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n        if (typeof XMLHttpRequest != 'undefined') {\n          throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");\n        } else { // Command-line.\n          try {\n            obj.contents = readBinary(obj.url);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        }\n      },\n  createLazyFile(parent, name, url, canRead, canWrite) {\n        // Lazy chunked Uint8Array (implements get and length from Uint8Array).\n        // Actual getting is abstracted away for eventual reuse.\n        class LazyUint8Array {\n          constructor() {\n            this.lengthKnown = false;\n            this.chunks = []; // Loaded chunks. Index is the chunk number\n          }\n          get(idx) {\n            if (idx > this.length-1 || idx < 0) {\n              return undefined;\n            }\n            var chunkOffset = idx % this.chunkSize;\n            var chunkNum = (idx / this.chunkSize)|0;\n            return this.getter(chunkNum)[chunkOffset];\n          }\n          setDataGetter(getter) {\n            this.getter = getter;\n          }\n          cacheLength() {\n            // Find length\n            var xhr = new XMLHttpRequest();\n            xhr.open('HEAD', url, false);\n            xhr.send(null);\n            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n            var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n            var header;\n            var hasByteServing = (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n            var usesGzip = (header = xhr.getResponseHeader(\"Content-Encoding\")) && header === \"gzip\";\n  \n            var chunkSize = 1024*1024; // Chunk size in bytes\n  \n            if (!hasByteServing) chunkSize = datalength;\n  \n            // Function to get a range from the remote URL.\n            var doXHR = (from, to) => {\n              if (from > to) throw new Error(\"invalid range (\" + from + \", \" + to + \") or no bytes requested!\");\n              if (to > datalength-1) throw new Error(\"only \" + datalength + \" bytes available! programmer error!\");\n  \n              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.\n              var xhr = new XMLHttpRequest();\n              xhr.open('GET', url, false);\n              if (datalength !== chunkSize) xhr.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n  \n              // Some hints to the browser that we want binary data.\n              xhr.responseType = 'arraybuffer';\n              if (xhr.overrideMimeType) {\n                xhr.overrideMimeType('text/plain; charset=x-user-defined');\n              }\n  \n              xhr.send(null);\n              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n              if (xhr.response !== undefined) {\n                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));\n              }\n              return intArrayFromString(xhr.responseText || '', true);\n            };\n            var lazyArray = this;\n            lazyArray.setDataGetter((chunkNum) => {\n              var start = chunkNum * chunkSize;\n              var end = (chunkNum+1) * chunkSize - 1; // including this byte\n              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {\n                lazyArray.chunks[chunkNum] = doXHR(start, end);\n              }\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');\n              return lazyArray.chunks[chunkNum];\n            });\n  \n            if (usesGzip || !datalength) {\n              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length\n              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file\n              datalength = this.getter(0).length;\n              chunkSize = datalength;\n              out(\"LazyFiles on gzip forces download of the whole file when length is accessed\");\n            }\n  \n            this._length = datalength;\n            this._chunkSize = chunkSize;\n            this.lengthKnown = true;\n          }\n          get length() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._length;\n          }\n          get chunkSize() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._chunkSize;\n          }\n        }\n  \n        if (typeof XMLHttpRequest != 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          var lazyArray = new LazyUint8Array();\n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n  \n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n        // This is a total hack, but I want to get this lazy file code out of the\n        // core of MEMFS. If we want to keep this lazy file concept I feel it should\n        // be its own thin LAZYFS proxying calls to MEMFS.\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n        // Add a function that defers querying the file size until it is asked the first time.\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: function() { return this.contents.length; }\n          }\n        });\n        // override each stream op with one that tries to force load the lazy file first\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach((key) => {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = (...args) => {\n            FS.forceLoadFile(node);\n            return fn(...args);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length)\n            return 0;\n          var size = Math.min(contents.length - position, length);\n          if (contents.slice) { // normal array\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n        // use a custom read function\n        stream_ops.read = (stream, buffer, offset, length, position) => {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position)\n        };\n        // use a custom mmap function\n        stream_ops.mmap = (stream, length, position, prot, flags) => {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return { ptr, allocated: true };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },\n  };\n  \n  var SYSCALLS = {\n  DEFAULT_POLLMASK:5,\n  calculateAt(dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n        // relative path\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);;\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },\n  doStat(func, path, buf) {\n        var stat = func(path);\n        HEAP32[((buf)>>2)] = stat.dev;\n        HEAP32[(((buf)+(4))>>2)] = stat.mode;\n        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;\n        HEAP32[(((buf)+(12))>>2)] = stat.uid;\n        HEAP32[(((buf)+(16))>>2)] = stat.gid;\n        HEAP32[(((buf)+(20))>>2)] = stat.rdev;\n        HEAP64[(((buf)+(24))>>3)] = BigInt(stat.size);\n        HEAP32[(((buf)+(32))>>2)] = 4096;\n        HEAP32[(((buf)+(36))>>2)] = stat.blocks;\n        var atime = stat.atime.getTime();\n        var mtime = stat.mtime.getTime();\n        var ctime = stat.ctime.getTime();\n        HEAP64[(((buf)+(40))>>3)] = BigInt(Math.floor(atime / 1000));\n        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;\n        HEAP64[(((buf)+(56))>>3)] = BigInt(Math.floor(mtime / 1000));\n        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;\n        HEAP64[(((buf)+(72))>>3)] = BigInt(Math.floor(ctime / 1000));\n        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;\n        HEAP64[(((buf)+(88))>>3)] = BigInt(stat.ino);\n        return 0;\n      },\n  doMsync(addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          // MAP_PRIVATE calls need not to be synced back to underlying fs\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },\n  getStreamFromFD(fd) {\n        var stream = FS.getStreamChecked(fd);\n        return stream;\n      },\n  varargs:undefined,\n  getStr(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },\n  };\n  function ___syscall__newselect(nfds, readfds, writefds, exceptfds, timeout) {\n  try {\n  \n      // readfds are supported,\n      // writefds checks socket open status\n      // exceptfds are supported, although on web, such exceptional conditions never arise in web sockets\n      //                          and so the exceptfds list will always return empty.\n      // timeout is supported, although on SOCKFS and PIPEFS these are ignored and always treated as 0 - fully async\n  \n      var total = 0;\n  \n      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),\n          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);\n      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),\n          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);\n      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),\n          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);\n  \n      var dstReadLow = 0,\n          dstReadHigh = 0;\n      var dstWriteLow = 0,\n          dstWriteHigh = 0;\n      var dstExceptLow = 0,\n          dstExceptHigh = 0;\n  \n      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |\n                   (writefds ? HEAP32[((writefds)>>2)] : 0) |\n                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);\n      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |\n                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |\n                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);\n  \n      var check = function(fd, low, high, val) {\n        return (fd < 32 ? (low & val) : (high & val));\n      };\n  \n      for (var fd = 0; fd < nfds; fd++) {\n        var mask = 1 << (fd % 32);\n        if (!(check(fd, allLow, allHigh, mask))) {\n          continue;  // index isn't in the set\n        }\n  \n        var stream = SYSCALLS.getStreamFromFD(fd);\n  \n        var flags = SYSCALLS.DEFAULT_POLLMASK;\n  \n        if (stream.stream_ops.poll) {\n          var timeoutInMillis = -1;\n          if (timeout) {\n            // select(2) is declared to accept \"struct timeval { time_t tv_sec; suseconds_t tv_usec; }\".\n            // However, musl passes the two values to the syscall as an array of long values.\n            // Note that sizeof(time_t) != sizeof(long) in wasm32. The former is 8, while the latter is 4.\n            // This means using \"C_STRUCTS.timeval.tv_usec\" leads to a wrong offset.\n            // So, instead, we use POINTER_SIZE.\n            var tv_sec = (readfds ? HEAP32[((timeout)>>2)] : 0),\n                tv_usec = (readfds ? HEAP32[(((timeout)+(4))>>2)] : 0);\n            timeoutInMillis = (tv_sec + tv_usec / 1000000) * 1000;\n          }\n          flags = stream.stream_ops.poll(stream, timeoutInMillis);\n        }\n  \n        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {\n          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);\n          total++;\n        }\n        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {\n          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);\n          total++;\n        }\n        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {\n          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);\n          total++;\n        }\n      }\n  \n      if (readfds) {\n        HEAP32[((readfds)>>2)] = dstReadLow;\n        HEAP32[(((readfds)+(4))>>2)] = dstReadHigh;\n      }\n      if (writefds) {\n        HEAP32[((writefds)>>2)] = dstWriteLow;\n        HEAP32[(((writefds)+(4))>>2)] = dstWriteHigh;\n      }\n      if (exceptfds) {\n        HEAP32[((exceptfds)>>2)] = dstExceptLow;\n        HEAP32[(((exceptfds)+(4))>>2)] = dstExceptHigh;\n      }\n  \n      return total;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall__newselect.sig = 'iipppp';\n\n  var SOCKFS = {\n  mount(mount) {\n        // If Module['websocket'] has already been defined (e.g. for configuring\n        // the subprotocol/url) use that, if not initialise it to a new object.\n        Module['websocket'] = (Module['websocket'] &&\n                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};\n  \n        // Add the Event registration mechanism to the exported websocket configuration\n        // object so we can register network callbacks from native JavaScript too.\n        // For more documentation see system/include/emscripten/emscripten.h\n        Module['websocket']._callbacks = {};\n        Module['websocket']['on'] = /** @this{Object} */ function(event, callback) {\n          if ('function' === typeof callback) {\n            this._callbacks[event] = callback;\n          }\n          return this;\n        };\n  \n        Module['websocket'].emit = /** @this{Object} */ function(event, param) {\n          if ('function' === typeof this._callbacks[event]) {\n            this._callbacks[event].call(this, param);\n          }\n        };\n  \n        // If debug is enabled register simple default logging callbacks for each Event.\n  \n        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },\n  createSocket(family, type, protocol) {\n        type &= ~526336; // Some applications may pass it; it makes no sense for a single process.\n        var streaming = type == 1;\n        if (streaming && protocol && protocol != 6) {\n          throw new FS.ErrnoError(66); // if SOCK_STREAM, must be tcp or 0.\n        }\n  \n        // create our internal socket structure\n        var sock = {\n          family,\n          type,\n          protocol,\n          server: null,\n          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test\n          peers: {},\n          pending: [],\n          recv_queue: [],\n          sock_ops: SOCKFS.websocket_sock_ops\n        };\n  \n        // create the filesystem node to store the socket structure\n        var name = SOCKFS.nextname();\n        var node = FS.createNode(SOCKFS.root, name, 49152, 0);\n        node.sock = sock;\n  \n        // and the wrapping stream that enables library functions such\n        // as read and write to indirectly interact with the socket\n        var stream = FS.createStream({\n          path: name,\n          node,\n          flags: 2,\n          seekable: false,\n          stream_ops: SOCKFS.stream_ops\n        });\n  \n        // map the new stream to the socket structure (sockets have a 1:1\n        // relationship with a stream)\n        sock.stream = stream;\n  \n        return sock;\n      },\n  getSocket(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream || !FS.isSocket(stream.node.mode)) {\n          return null;\n        }\n        return stream.node.sock;\n      },\n  stream_ops:{\n  poll(stream) {\n          var sock = stream.node.sock;\n          return sock.sock_ops.poll(sock);\n        },\n  ioctl(stream, request, varargs) {\n          var sock = stream.node.sock;\n          return sock.sock_ops.ioctl(sock, request, varargs);\n        },\n  read(stream, buffer, offset, length, position /* ignored */) {\n          var sock = stream.node.sock;\n          var msg = sock.sock_ops.recvmsg(sock, length);\n          if (!msg) {\n            // socket is closed\n            return 0;\n          }\n          buffer.set(msg.buffer, offset);\n          return msg.buffer.length;\n        },\n  write(stream, buffer, offset, length, position /* ignored */) {\n          var sock = stream.node.sock;\n          return sock.sock_ops.sendmsg(sock, buffer, offset, length);\n        },\n  close(stream) {\n          var sock = stream.node.sock;\n          sock.sock_ops.close(sock);\n        },\n  },\n  nextname() {\n        if (!SOCKFS.nextname.current) {\n          SOCKFS.nextname.current = 0;\n        }\n        return 'socket[' + (SOCKFS.nextname.current++) + ']';\n      },\n  websocket_sock_ops:{\n  createPeer(sock, addr, port) {\n          var ws;\n  \n          if (typeof addr == 'object') {\n            ws = addr;\n            addr = null;\n            port = null;\n          }\n  \n          if (ws) {\n            // for sockets that've already connected (e.g. we're the server)\n            // we can inspect the _socket property for the address\n            if (ws._socket) {\n              addr = ws._socket.remoteAddress;\n              port = ws._socket.remotePort;\n            }\n            // if we're just now initializing a connection to the remote,\n            // inspect the url property\n            else {\n              var result = /ws[s]?:\\/\\/([^:]+):(\\d+)/.exec(ws.url);\n              if (!result) {\n                throw new Error('WebSocket URL must be in the format ws(s)://address:port');\n              }\n              addr = result[1];\n              port = parseInt(result[2], 10);\n            }\n          } else {\n            // create the actual websocket object and connect\n            try {\n              // runtimeConfig gets set to true if WebSocket runtime configuration is available.\n              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));\n  \n              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'\n              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.\n              var url = 'ws:#'.replace('#', '//');\n  \n              if (runtimeConfig) {\n                if ('string' === typeof Module['websocket']['url']) {\n                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.\n                }\n              }\n  \n              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.\n                var parts = addr.split('/');\n                url = url + parts[0] + \":\" + port + \"/\" + parts.slice(1).join('/');\n              }\n  \n              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.\n              var subProtocols = 'binary'; // The default value is 'binary'\n  \n              if (runtimeConfig) {\n                if ('string' === typeof Module['websocket']['subprotocol']) {\n                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.\n                }\n              }\n  \n              // The default WebSocket options\n              var opts = undefined;\n  \n              if (subProtocols !== 'null') {\n                // The regex trims the string (removes spaces at the beginning and end, then splits the string by\n                // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.\n                subProtocols = subProtocols.replace(/^ +| +$/g,\"\").split(/ *, */);\n  \n                opts = subProtocols;\n              }\n  \n              // some webservers (azure) does not support subprotocol header\n              if (runtimeConfig && null === Module['websocket']['subprotocol']) {\n                subProtocols = 'null';\n                opts = undefined;\n              }\n  \n              // If node we use the ws library.\n              var WebSocketConstructor;\n              if (ENVIRONMENT_IS_NODE) {\n                WebSocketConstructor = /** @type{(typeof WebSocket)} */(require('ws'));\n              } else\n              {\n                WebSocketConstructor = WebSocket;\n              }\n              ws = new WebSocketConstructor(url, opts);\n              ws.binaryType = 'arraybuffer';\n            } catch (e) {\n              throw new FS.ErrnoError(23);\n            }\n          }\n  \n          var peer = {\n            addr,\n            port,\n            socket: ws,\n            dgram_send_queue: []\n          };\n  \n          SOCKFS.websocket_sock_ops.addPeer(sock, peer);\n          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);\n  \n          // if this is a bound dgram socket, send the port number first to allow\n          // us to override the ephemeral port reported to us by remotePort on the\n          // remote end.\n          if (sock.type === 2 && typeof sock.sport != 'undefined') {\n            peer.dgram_send_queue.push(new Uint8Array([\n                255, 255, 255, 255,\n                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),\n                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)\n            ]));\n          }\n  \n          return peer;\n        },\n  getPeer(sock, addr, port) {\n          return sock.peers[addr + ':' + port];\n        },\n  addPeer(sock, peer) {\n          sock.peers[peer.addr + ':' + peer.port] = peer;\n        },\n  removePeer(sock, peer) {\n          delete sock.peers[peer.addr + ':' + peer.port];\n        },\n  handlePeerEvents(sock, peer) {\n          var first = true;\n  \n          var handleOpen = function () {\n  \n            Module['websocket'].emit('open', sock.stream.fd);\n  \n            try {\n              var queued = peer.dgram_send_queue.shift();\n              while (queued) {\n                peer.socket.send(queued);\n                queued = peer.dgram_send_queue.shift();\n              }\n            } catch (e) {\n              // not much we can do here in the way of proper error handling as we've already\n              // lied and said this data was sent. shut it down.\n              peer.socket.close();\n            }\n          };\n  \n          function handleMessage(data) {\n            if (typeof data == 'string') {\n              var encoder = new TextEncoder(); // should be utf-8\n              data = encoder.encode(data); // make a typed array from the string\n            } else {\n              assert(data.byteLength !== undefined); // must receive an ArrayBuffer\n              if (data.byteLength == 0) {\n                // An empty ArrayBuffer will emit a pseudo disconnect event\n                // as recv/recvmsg will return zero which indicates that a socket\n                // has performed a shutdown although the connection has not been disconnected yet.\n                return;\n              }\n              data = new Uint8Array(data); // make a typed array view on the array buffer\n            }\n  \n            // if this is the port message, override the peer's port with it\n            var wasfirst = first;\n            first = false;\n            if (wasfirst &&\n                data.length === 10 &&\n                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&\n                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {\n              // update the peer's port and it's key in the peer map\n              var newport = ((data[8] << 8) | data[9]);\n              SOCKFS.websocket_sock_ops.removePeer(sock, peer);\n              peer.port = newport;\n              SOCKFS.websocket_sock_ops.addPeer(sock, peer);\n              return;\n            }\n  \n            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });\n            Module['websocket'].emit('message', sock.stream.fd);\n          };\n  \n          if (ENVIRONMENT_IS_NODE) {\n            peer.socket.on('open', handleOpen);\n            peer.socket.on('message', function(data, isBinary) {\n              if (!isBinary) {\n                return;\n              }\n              handleMessage((new Uint8Array(data)).buffer); // copy from node Buffer -> ArrayBuffer\n            });\n            peer.socket.on('close', function() {\n              Module['websocket'].emit('close', sock.stream.fd);\n            });\n            peer.socket.on('error', function(error) {\n              // Although the ws library may pass errors that may be more descriptive than\n              // ECONNREFUSED they are not necessarily the expected error code e.g.\n              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED\n              // is still probably the most useful thing to do.\n              sock.error = 14; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.\n              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);\n              // don't throw\n            });\n          } else {\n            peer.socket.onopen = handleOpen;\n            peer.socket.onclose = function() {\n              Module['websocket'].emit('close', sock.stream.fd);\n            };\n            peer.socket.onmessage = function peer_socket_onmessage(event) {\n              handleMessage(event.data);\n            };\n            peer.socket.onerror = function(error) {\n              // The WebSocket spec only allows a 'simple event' to be thrown on error,\n              // so we only really know as much as ECONNREFUSED.\n              sock.error = 14; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.\n              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);\n            };\n          }\n        },\n  poll(sock) {\n          if (sock.type === 1 && sock.server) {\n            // listen sockets should only say they're available for reading\n            // if there are pending clients.\n            return sock.pending.length ? (64 | 1) : 0;\n          }\n  \n          var mask = 0;\n          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets\n            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :\n            null;\n  \n          if (sock.recv_queue.length ||\n              !dest ||  // connection-less sockets are always ready to read\n              (dest && dest.socket.readyState === dest.socket.CLOSING) ||\n              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed\n            mask |= (64 | 1);\n          }\n  \n          if (!dest ||  // connection-less sockets are always ready to write\n              (dest && dest.socket.readyState === dest.socket.OPEN)) {\n            mask |= 4;\n          }\n  \n          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||\n              (dest && dest.socket.readyState === dest.socket.CLOSED)) {\n            mask |= 16;\n          }\n  \n          return mask;\n        },\n  ioctl(sock, request, arg) {\n          switch (request) {\n            case 21531:\n              var bytes = 0;\n              if (sock.recv_queue.length) {\n                bytes = sock.recv_queue[0].data.length;\n              }\n              HEAP32[((arg)>>2)] = bytes;\n              return 0;\n            default:\n              return 28;\n          }\n        },\n  close(sock) {\n          // if we've spawned a listen server, close it\n          if (sock.server) {\n            try {\n              sock.server.close();\n            } catch (e) {\n            }\n            sock.server = null;\n          }\n          // close any peer connections\n          var peers = Object.keys(sock.peers);\n          for (var i = 0; i < peers.length; i++) {\n            var peer = sock.peers[peers[i]];\n            try {\n              peer.socket.close();\n            } catch (e) {\n            }\n            SOCKFS.websocket_sock_ops.removePeer(sock, peer);\n          }\n          return 0;\n        },\n  bind(sock, addr, port) {\n          if (typeof sock.saddr != 'undefined' || typeof sock.sport != 'undefined') {\n            throw new FS.ErrnoError(28);  // already bound\n          }\n          sock.saddr = addr;\n          sock.sport = port;\n          // in order to emulate dgram sockets, we need to launch a listen server when\n          // binding on a connection-less socket\n          // note: this is only required on the server side\n          if (sock.type === 2) {\n            // close the existing server if it exists\n            if (sock.server) {\n              sock.server.close();\n              sock.server = null;\n            }\n            // swallow error operation not supported error that occurs when binding in the\n            // browser where this isn't supported\n            try {\n              sock.sock_ops.listen(sock, 0);\n            } catch (e) {\n              if (!(e.name === 'ErrnoError')) throw e;\n              if (e.errno !== 138) throw e;\n            }\n          }\n        },\n  connect(sock, addr, port) {\n          if (sock.server) {\n            throw new FS.ErrnoError(138);\n          }\n  \n          // TODO autobind\n          // if (!sock.addr && sock.type == 2) {\n          // }\n  \n          // early out if we're already connected / in the middle of connecting\n          if (typeof sock.daddr != 'undefined' && typeof sock.dport != 'undefined') {\n            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);\n            if (dest) {\n              if (dest.socket.readyState === dest.socket.CONNECTING) {\n                throw new FS.ErrnoError(7);\n              } else {\n                throw new FS.ErrnoError(30);\n              }\n            }\n          }\n  \n          // add the socket to our peer list and set our\n          // destination address / port to match\n          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);\n          sock.daddr = peer.addr;\n          sock.dport = peer.port;\n  \n          // always \"fail\" in non-blocking mode\n          throw new FS.ErrnoError(26);\n        },\n  listen(sock, backlog) {\n          if (!ENVIRONMENT_IS_NODE) {\n            throw new FS.ErrnoError(138);\n          }\n          if (sock.server) {\n             throw new FS.ErrnoError(28);  // already listening\n          }\n          var WebSocketServer = require('ws').Server;\n          var host = sock.saddr;\n          sock.server = new WebSocketServer({\n            host,\n            port: sock.sport\n            // TODO support backlog\n          });\n          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.\n  \n          sock.server.on('connection', function(ws) {\n            if (sock.type === 1) {\n              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);\n  \n              // create a peer on the new socket\n              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);\n              newsock.daddr = peer.addr;\n              newsock.dport = peer.port;\n  \n              // push to queue for accept to pick up\n              sock.pending.push(newsock);\n              Module['websocket'].emit('connection', newsock.stream.fd);\n            } else {\n              // create a peer on the listen socket so calling sendto\n              // with the listen socket and an address will resolve\n              // to the correct client\n              SOCKFS.websocket_sock_ops.createPeer(sock, ws);\n              Module['websocket'].emit('connection', sock.stream.fd);\n            }\n          });\n          sock.server.on('close', function() {\n            Module['websocket'].emit('close', sock.stream.fd);\n            sock.server = null;\n          });\n          sock.server.on('error', function(error) {\n            // Although the ws library may pass errors that may be more descriptive than\n            // ECONNREFUSED they are not necessarily the expected error code e.g.\n            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH\n            // is still probably the most useful thing to do. This error shouldn't\n            // occur in a well written app as errors should get trapped in the compiled\n            // app's own getaddrinfo call.\n            sock.error = 23; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.\n            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);\n            // don't throw\n          });\n        },\n  accept(listensock) {\n          if (!listensock.server || !listensock.pending.length) {\n            throw new FS.ErrnoError(28);\n          }\n          var newsock = listensock.pending.shift();\n          newsock.stream.flags = listensock.stream.flags;\n          return newsock;\n        },\n  getname(sock, peer) {\n          var addr, port;\n          if (peer) {\n            if (sock.daddr === undefined || sock.dport === undefined) {\n              throw new FS.ErrnoError(53);\n            }\n            addr = sock.daddr;\n            port = sock.dport;\n          } else {\n            // TODO saddr and sport will be set for bind()'d UDP sockets, but what\n            // should we be returning for TCP sockets that've been connect()'d?\n            addr = sock.saddr || 0;\n            port = sock.sport || 0;\n          }\n          return { addr, port };\n        },\n  sendmsg(sock, buffer, offset, length, addr, port) {\n          if (sock.type === 2) {\n            // connection-less sockets will honor the message address,\n            // and otherwise fall back to the bound destination address\n            if (addr === undefined || port === undefined) {\n              addr = sock.daddr;\n              port = sock.dport;\n            }\n            // if there was no address to fall back to, error out\n            if (addr === undefined || port === undefined) {\n              throw new FS.ErrnoError(17);\n            }\n          } else {\n            // connection-based sockets will only use the bound\n            addr = sock.daddr;\n            port = sock.dport;\n          }\n  \n          // find the peer for the destination address\n          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);\n  \n          // early out if not connected with a connection-based socket\n          if (sock.type === 1) {\n            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {\n              throw new FS.ErrnoError(53);\n            } else if (dest.socket.readyState === dest.socket.CONNECTING) {\n              throw new FS.ErrnoError(6);\n            }\n          }\n  \n          // create a copy of the incoming data to send, as the WebSocket API\n          // doesn't work entirely with an ArrayBufferView, it'll just send\n          // the entire underlying buffer\n          if (ArrayBuffer.isView(buffer)) {\n            offset += buffer.byteOffset;\n            buffer = buffer.buffer;\n          }\n  \n          var data;\n            data = buffer.slice(offset, offset + length);\n  \n          // if we're emulating a connection-less dgram socket and don't have\n          // a cached connection, queue the buffer to send upon connect and\n          // lie, saying the data was sent now.\n          if (sock.type === 2) {\n            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {\n              // if we're not connected, open a new connection\n              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {\n                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);\n              }\n              dest.dgram_send_queue.push(data);\n              return length;\n            }\n          }\n  \n          try {\n            // send the actual data\n            dest.socket.send(data);\n            return length;\n          } catch (e) {\n            throw new FS.ErrnoError(28);\n          }\n        },\n  recvmsg(sock, length) {\n          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html\n          if (sock.type === 1 && sock.server) {\n            // tcp servers should not be recv()'ing on the listen socket\n            throw new FS.ErrnoError(53);\n          }\n  \n          var queued = sock.recv_queue.shift();\n          if (!queued) {\n            if (sock.type === 1) {\n              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);\n  \n              if (!dest) {\n                // if we have a destination address but are not connected, error out\n                throw new FS.ErrnoError(53);\n              }\n              if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {\n                // return null if the socket has closed\n                return null;\n              }\n              // else, our socket is in a valid state but truly has nothing available\n              throw new FS.ErrnoError(6);\n            }\n            throw new FS.ErrnoError(6);\n          }\n  \n          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's\n          // requeued TCP data it'll be an ArrayBufferView\n          var queuedLength = queued.data.byteLength || queued.data.length;\n          var queuedOffset = queued.data.byteOffset || 0;\n          var queuedBuffer = queued.data.buffer || queued.data;\n          var bytesRead = Math.min(length, queuedLength);\n          var res = {\n            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),\n            addr: queued.addr,\n            port: queued.port\n          };\n  \n          // push back any unread data for TCP connections\n          if (sock.type === 1 && bytesRead < queuedLength) {\n            var bytesRemaining = queuedLength - bytesRead;\n            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);\n            sock.recv_queue.unshift(queued);\n          }\n  \n          return res;\n        },\n  },\n  };\n  \n  var getSocketFromFD = (fd) => {\n      var socket = SOCKFS.getSocket(fd);\n      if (!socket) throw new FS.ErrnoError(8);\n      return socket;\n    };\n  \n  var Sockets = {\n  BUFFER_SIZE:10240,\n  MAX_BUFFER_SIZE:10485760,\n  nextFd:1,\n  fds:{\n  },\n  nextport:1,\n  maxport:65535,\n  peer:null,\n  connections:{\n  },\n  portmap:{\n  },\n  localAddr:4261412874,\n  addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034],\n  };\n  \n  var inetNtop4 = (addr) => {\n      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)\n    };\n  \n  \n  var inetNtop6 = (ints) => {\n      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4\n      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses\n      //  128-bits are split into eight 16-bit words\n      //  stored in network byte order (big-endian)\n      //  |                80 bits               | 16 |      32 bits        |\n      //  +-----------------------------------------------------------------+\n      //  |               10 bytes               |  2 |      4 bytes        |\n      //  +--------------------------------------+--------------------------+\n      //  +               5 words                |  1 |      2 words        |\n      //  +--------------------------------------+--------------------------+\n      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)\n      //  +--------------------------------------+----+---------------------+\n      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)\n      //  +--------------------------------------+----+---------------------+\n      var str = \"\";\n      var word = 0;\n      var longest = 0;\n      var lastzero = 0;\n      var zstart = 0;\n      var len = 0;\n      var i = 0;\n      var parts = [\n        ints[0] & 0xffff,\n        (ints[0] >> 16),\n        ints[1] & 0xffff,\n        (ints[1] >> 16),\n        ints[2] & 0xffff,\n        (ints[2] >> 16),\n        ints[3] & 0xffff,\n        (ints[3] >> 16)\n      ];\n  \n      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses\n  \n      var hasipv4 = true;\n      var v4part = \"\";\n      // check if the 10 high-order bytes are all zeros (first 5 words)\n      for (i = 0; i < 5; i++) {\n        if (parts[i] !== 0) { hasipv4 = false; break; }\n      }\n  \n      if (hasipv4) {\n        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)\n        v4part = inetNtop4(parts[6] | (parts[7] << 16));\n        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)\n        if (parts[5] === -1) {\n          str = \"::ffff:\";\n          str += v4part;\n          return str;\n        }\n        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)\n        if (parts[5] === 0) {\n          str = \"::\";\n          //special case IPv6 addresses\n          if (v4part === \"0.0.0.0\") v4part = \"\"; // any/unspecified address\n          if (v4part === \"0.0.0.1\") v4part = \"1\";// loopback address\n          str += v4part;\n          return str;\n        }\n      }\n  \n      // Handle all other IPv6 addresses\n  \n      // first run to find the longest contiguous zero words\n      for (word = 0; word < 8; word++) {\n        if (parts[word] === 0) {\n          if (word - lastzero > 1) {\n            len = 0;\n          }\n          lastzero = word;\n          len++;\n        }\n        if (len > longest) {\n          longest = len;\n          zstart = word - longest + 1;\n        }\n      }\n  \n      for (word = 0; word < 8; word++) {\n        if (longest > 1) {\n          // compress contiguous zeros - to produce \"::\"\n          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {\n            if (word === zstart) {\n              str += \":\";\n              if (zstart === 0) str += \":\"; //leading zeros case\n            }\n            continue;\n          }\n        }\n        // converts 16-bit words from big-endian to little-endian before converting to hex string\n        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);\n        str += word < 7 ? \":\" : \"\";\n      }\n      return str;\n    };\n  \n  var readSockaddr = (sa, salen) => {\n      // family / port offsets are common to both sockaddr_in and sockaddr_in6\n      var family = HEAP16[((sa)>>1)];\n      var port = _ntohs(HEAPU16[(((sa)+(2))>>1)]);\n      var addr;\n  \n      switch (family) {\n        case 2:\n          if (salen !== 16) {\n            return { errno: 28 };\n          }\n          addr = HEAP32[(((sa)+(4))>>2)];\n          addr = inetNtop4(addr);\n          break;\n        case 10:\n          if (salen !== 28) {\n            return { errno: 28 };\n          }\n          addr = [\n            HEAP32[(((sa)+(8))>>2)],\n            HEAP32[(((sa)+(12))>>2)],\n            HEAP32[(((sa)+(16))>>2)],\n            HEAP32[(((sa)+(20))>>2)]\n          ];\n          addr = inetNtop6(addr);\n          break;\n        default:\n          return { errno: 5 };\n      }\n  \n      return { family: family, addr: addr, port: port };\n    };\n  \n  \n  var inetPton4 = (str) => {\n      var b = str.split('.');\n      for (var i = 0; i < 4; i++) {\n        var tmp = Number(b[i]);\n        if (isNaN(tmp)) return null;\n        b[i] = tmp;\n      }\n      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;\n    };\n  \n  \n  /** @suppress {checkTypes} */\n  var jstoi_q = (str) => parseInt(str);\n  var inetPton6 = (str) => {\n      var words;\n      var w, offset, z, i;\n      /* http://home.deds.nl/~aeron/regex/ */\n      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i\n      var parts = [];\n      if (!valid6regx.test(str)) {\n        return null;\n      }\n      if (str === \"::\") {\n        return [0, 0, 0, 0, 0, 0, 0, 0];\n      }\n      // Z placeholder to keep track of zeros when splitting the string on \":\"\n      if (str.startsWith(\"::\")) {\n        str = str.replace(\"::\", \"Z:\"); // leading zeros case\n      } else {\n        str = str.replace(\"::\", \":Z:\");\n      }\n  \n      if (str.indexOf(\".\") > 0) {\n        // parse IPv4 embedded stress\n        str = str.replace(new RegExp('[.]', 'g'), \":\");\n        words = str.split(\":\");\n        words[words.length-4] = jstoi_q(words[words.length-4]) + jstoi_q(words[words.length-3])*256;\n        words[words.length-3] = jstoi_q(words[words.length-2]) + jstoi_q(words[words.length-1])*256;\n        words = words.slice(0, words.length-2);\n      } else {\n        words = str.split(\":\");\n      }\n  \n      offset = 0; z = 0;\n      for (w=0; w < words.length; w++) {\n        if (typeof words[w] == 'string') {\n          if (words[w] === 'Z') {\n            // compressed zeros - write appropriate number of zero words\n            for (z = 0; z < (8 - words.length+1); z++) {\n              parts[w+z] = 0;\n            }\n            offset = z-1;\n          } else {\n            // parse hex to field to 16-bit value and write it in network byte-order\n            parts[w+offset] = _htons(parseInt(words[w],16));\n          }\n        } else {\n          // parsed IPv4 words\n          parts[w+offset] = words[w];\n        }\n      }\n      return [\n        (parts[1] << 16) | parts[0],\n        (parts[3] << 16) | parts[2],\n        (parts[5] << 16) | parts[4],\n        (parts[7] << 16) | parts[6]\n      ];\n    };\n  var DNS = {\n  address_map:{\n  id:1,\n  addrs:{\n  },\n  names:{\n  },\n  },\n  lookup_name(name) {\n        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.\n        var res = inetPton4(name);\n        if (res !== null) {\n          return name;\n        }\n        res = inetPton6(name);\n        if (res !== null) {\n          return name;\n        }\n  \n        // See if this name is already mapped.\n        var addr;\n  \n        if (DNS.address_map.addrs[name]) {\n          addr = DNS.address_map.addrs[name];\n        } else {\n          var id = DNS.address_map.id++;\n          assert(id < 65535, 'exceeded max address mappings of 65535');\n  \n          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);\n  \n          DNS.address_map.names[addr] = name;\n          DNS.address_map.addrs[name] = addr;\n        }\n  \n        return addr;\n      },\n  lookup_addr(addr) {\n        if (DNS.address_map.names[addr]) {\n          return DNS.address_map.names[addr];\n        }\n  \n        return null;\n      },\n  };\n  var getSocketAddress = (addrp, addrlen) => {\n      var info = readSockaddr(addrp, addrlen);\n      if (info.errno) throw new FS.ErrnoError(info.errno);\n      info.addr = DNS.lookup_addr(info.addr) || info.addr;\n      return info;\n    };\n  function ___syscall_bind(fd, addr, addrlen, d1, d2, d3) {\n  try {\n  \n      var sock = getSocketFromFD(fd);\n      var info = getSocketAddress(addr, addrlen);\n      sock.sock_ops.bind(sock, info.addr, info.port);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_bind.sig = 'iippiii';\n\n  function ___syscall_chdir(path) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      FS.chdir(path);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_chdir.sig = 'ip';\n\n  function ___syscall_chmod(path, mode) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      FS.chmod(path, mode);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_chmod.sig = 'ipi';\n\n  \n  function ___syscall_connect(fd, addr, addrlen, d1, d2, d3) {\n  try {\n  \n      var sock = getSocketFromFD(fd);\n      var info = getSocketAddress(addr, addrlen);\n      sock.sock_ops.connect(sock, info.addr, info.port);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_connect.sig = 'iippiii';\n\n  function ___syscall_dup(fd) {\n  try {\n  \n      var old = SYSCALLS.getStreamFromFD(fd);\n      return FS.dupStream(old).fd;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_dup.sig = 'ii';\n\n  function ___syscall_dup3(fd, newfd, flags) {\n  try {\n  \n      var old = SYSCALLS.getStreamFromFD(fd);\n      if (old.fd === newfd) return -28;\n      // Check newfd is within range of valid open file descriptors.\n      if (newfd < 0 || newfd >= FS.MAX_OPEN_FDS) return -8;\n      var existing = FS.getStream(newfd);\n      if (existing) FS.close(existing);\n      return FS.dupStream(old, newfd).fd;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_dup3.sig = 'iiii';\n\n  function ___syscall_faccessat(dirfd, path, amode, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      if (amode & ~7) {\n        // need a valid mode\n        return -28;\n      }\n      var lookup = FS.lookupPath(path, { follow: true });\n      var node = lookup.node;\n      if (!node) {\n        return -44;\n      }\n      var perms = '';\n      if (amode & 4) perms += 'r';\n      if (amode & 2) perms += 'w';\n      if (amode & 1) perms += 'x';\n      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {\n        return -2;\n      }\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_faccessat.sig = 'iipii';\n\n  var ___syscall_fadvise64 = (fd, offset, len, advice) => {\n      return 0; // your advice is important to us (but we can't use it)\n    };\n  ___syscall_fadvise64.sig = 'iijji';\n\n  \n  var INT53_MAX = 9007199254740992;\n  \n  var INT53_MIN = -9007199254740992;\n  var bigintToI53Checked = (num) => (num < INT53_MIN || num > INT53_MAX) ? NaN : Number(num);\n  function ___syscall_fallocate(fd, mode, offset, len) {\n    offset = bigintToI53Checked(offset);\n    len = bigintToI53Checked(len);\n  \n    \n  try {\n  \n      if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd)\n      FS.allocate(stream, offset, len);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  ;\n  }\n  ___syscall_fallocate.sig = 'iiijj';\n\n  /** @suppress {duplicate } */\n  function syscallGetVarargI() {\n      // the `+` prepended here is necessary to convince the JSCompiler that varargs is indeed a number.\n      var ret = HEAP32[((+SYSCALLS.varargs)>>2)];\n      SYSCALLS.varargs += 4;\n      return ret;\n    }\n  var syscallGetVarargP = syscallGetVarargI;\n  \n  \n  function ___syscall_fcntl64(fd, cmd, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      switch (cmd) {\n        case 0: {\n          var arg = syscallGetVarargI();\n          if (arg < 0) {\n            return -28;\n          }\n          while (FS.streams[arg]) {\n            arg++;\n          }\n          var newStream;\n          newStream = FS.dupStream(stream, arg);\n          return newStream.fd;\n        }\n        case 1:\n        case 2:\n          return 0;  // FD_CLOEXEC makes no sense for a single process.\n        case 3:\n          return stream.flags;\n        case 4: {\n          var arg = syscallGetVarargI();\n          stream.flags |= arg;\n          return 0;\n        }\n        case 12: {\n          var arg = syscallGetVarargP();\n          var offset = 0;\n          // We're always unlocked.\n          HEAP16[(((arg)+(offset))>>1)] = 2;\n          return 0;\n        }\n        case 13:\n        case 14:\n          return 0; // Pretend that the locking is successful.\n      }\n      return -28;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_fcntl64.sig = 'iiip';\n\n  function ___syscall_fdatasync(fd) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      return 0; // we can't do anything synchronously; the in-memory FS is already synced to\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_fdatasync.sig = 'ii';\n\n  function ___syscall_fstat64(fd, buf) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      return SYSCALLS.doStat(FS.stat, stream.path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_fstat64.sig = 'iip';\n\n  function ___syscall_ftruncate64(fd, length) {\n    length = bigintToI53Checked(length);\n  \n    \n  try {\n  \n      if (isNaN(length)) return 61;\n      FS.ftruncate(fd, length);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  ;\n  }\n  ___syscall_ftruncate64.sig = 'iij';\n\n  \n  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {\n      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n    };\n  function ___syscall_getcwd(buf, size) {\n  try {\n  \n      if (size === 0) return -28;\n      var cwd = FS.cwd();\n      var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;\n      if (size < cwdLengthInBytes) return -68;\n      stringToUTF8(cwd, buf, size);\n      return cwdLengthInBytes;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_getcwd.sig = 'ipp';\n\n  \n  function ___syscall_getdents64(fd, dirp, count) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd)\n      stream.getdents ||= FS.readdir(stream.path);\n  \n      var struct_size = 280;\n      var pos = 0;\n      var off = FS.llseek(stream, 0, 1);\n  \n      var idx = Math.floor(off / struct_size);\n  \n      while (idx < stream.getdents.length && pos + struct_size <= count) {\n        var id;\n        var type;\n        var name = stream.getdents[idx];\n        if (name === '.') {\n          id = stream.node.id;\n          type = 4; // DT_DIR\n        }\n        else if (name === '..') {\n          var lookup = FS.lookupPath(stream.path, { parent: true });\n          id = lookup.node.id;\n          type = 4; // DT_DIR\n        }\n        else {\n          var child = FS.lookupNode(stream.node, name);\n          id = child.id;\n          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.\n                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.\n                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.\n                 8;                             // DT_REG, regular file.\n        }\n        HEAP64[((dirp + pos)>>3)] = BigInt(id);\n        HEAP64[(((dirp + pos)+(8))>>3)] = BigInt((idx + 1) * struct_size);\n        HEAP16[(((dirp + pos)+(16))>>1)] = 280;\n        HEAP8[(dirp + pos)+(18)] = type;\n        stringToUTF8(name, dirp + pos + 19, 256);\n        pos += struct_size;\n        idx += 1;\n      }\n      FS.llseek(stream, idx * struct_size, 0);\n      return pos;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_getdents64.sig = 'iipp';\n\n  \n  \n  \n  \n  \n  /** @param {number=} addrlen */\n  var writeSockaddr = (sa, family, addr, port, addrlen) => {\n      switch (family) {\n        case 2:\n          addr = inetPton4(addr);\n          zeroMemory(sa, 16);\n          if (addrlen) {\n            HEAP32[((addrlen)>>2)] = 16;\n          }\n          HEAP16[((sa)>>1)] = family;\n          HEAP32[(((sa)+(4))>>2)] = addr;\n          HEAP16[(((sa)+(2))>>1)] = _htons(port);\n          break;\n        case 10:\n          addr = inetPton6(addr);\n          zeroMemory(sa, 28);\n          if (addrlen) {\n            HEAP32[((addrlen)>>2)] = 28;\n          }\n          HEAP32[((sa)>>2)] = family;\n          HEAP32[(((sa)+(8))>>2)] = addr[0];\n          HEAP32[(((sa)+(12))>>2)] = addr[1];\n          HEAP32[(((sa)+(16))>>2)] = addr[2];\n          HEAP32[(((sa)+(20))>>2)] = addr[3];\n          HEAP16[(((sa)+(2))>>1)] = _htons(port);\n          break;\n        default:\n          return 5;\n      }\n      return 0;\n    };\n  \n  function ___syscall_getsockname(fd, addr, addrlen, d1, d2, d3) {\n  try {\n  \n      var sock = getSocketFromFD(fd);\n      // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname\n      var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport, addrlen);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_getsockname.sig = 'iippiii';\n\n  function ___syscall_getsockopt(fd, level, optname, optval, optlen, d1) {\n  try {\n  \n      var sock = getSocketFromFD(fd);\n      // Minimal getsockopt aimed at resolving https://github.com/emscripten-core/emscripten/issues/2211\n      // so only supports SOL_SOCKET with SO_ERROR.\n      if (level === 1) {\n        if (optname === 4) {\n          HEAP32[((optval)>>2)] = sock.error;\n          HEAP32[((optlen)>>2)] = 4;\n          sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).\n          return 0;\n        }\n      }\n      return -50; // The option is unknown at the level indicated.\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_getsockopt.sig = 'iiiippi';\n\n  \n  function ___syscall_ioctl(fd, op, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      switch (op) {\n        case 21509: {\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        case 21505: {\n          if (!stream.tty) return -59;\n          if (stream.tty.ops.ioctl_tcgets) {\n            var termios = stream.tty.ops.ioctl_tcgets(stream);\n            var argp = syscallGetVarargP();\n            HEAP32[((argp)>>2)] = termios.c_iflag || 0;\n            HEAP32[(((argp)+(4))>>2)] = termios.c_oflag || 0;\n            HEAP32[(((argp)+(8))>>2)] = termios.c_cflag || 0;\n            HEAP32[(((argp)+(12))>>2)] = termios.c_lflag || 0;\n            for (var i = 0; i < 32; i++) {\n              HEAP8[(argp + i)+(17)] = termios.c_cc[i] || 0;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        case 21510:\n        case 21511:\n        case 21512: {\n          if (!stream.tty) return -59;\n          return 0; // no-op, not actually adjusting terminal settings\n        }\n        case 21506:\n        case 21507:\n        case 21508: {\n          if (!stream.tty) return -59;\n          if (stream.tty.ops.ioctl_tcsets) {\n            var argp = syscallGetVarargP();\n            var c_iflag = HEAP32[((argp)>>2)];\n            var c_oflag = HEAP32[(((argp)+(4))>>2)];\n            var c_cflag = HEAP32[(((argp)+(8))>>2)];\n            var c_lflag = HEAP32[(((argp)+(12))>>2)];\n            var c_cc = []\n            for (var i = 0; i < 32; i++) {\n              c_cc.push(HEAP8[(argp + i)+(17)]);\n            }\n            return stream.tty.ops.ioctl_tcsets(stream.tty, op, { c_iflag, c_oflag, c_cflag, c_lflag, c_cc });\n          }\n          return 0; // no-op, not actually adjusting terminal settings\n        }\n        case 21519: {\n          if (!stream.tty) return -59;\n          var argp = syscallGetVarargP();\n          HEAP32[((argp)>>2)] = 0;\n          return 0;\n        }\n        case 21520: {\n          if (!stream.tty) return -59;\n          return -28; // not supported\n        }\n        case 21531: {\n          var argp = syscallGetVarargP();\n          return FS.ioctl(stream, op, argp);\n        }\n        case 21523: {\n          // TODO: in theory we should write to the winsize struct that gets\n          // passed in, but for now musl doesn't read anything on it\n          if (!stream.tty) return -59;\n          if (stream.tty.ops && stream.tty.ops.ioctl_tiocgwinsz) {\n            var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);\n            var argp = syscallGetVarargP();\n            HEAP16[((argp)>>1)] = winsize[0];\n            HEAP16[(((argp)+(2))>>1)] = winsize[1];\n          }\n          return 0;\n        }\n        case 21524: {\n          // TODO: technically, this ioctl call should change the window size.\n          // but, since emscripten doesn't have any concept of a terminal window\n          // yet, we'll just silently throw it away as we do TIOCGWINSZ\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        case 21515: {\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        default: return -28; // not supported\n      }\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_ioctl.sig = 'iiip';\n\n  function ___syscall_lstat64(path, buf) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      return SYSCALLS.doStat(FS.lstat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_lstat64.sig = 'ipp';\n\n  function ___syscall_mkdirat(dirfd, path, mode) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      // remove a trailing slash, if one - /a/b/ has basename of '', but\n      // we want to create b in the context of this function\n      path = PATH.normalize(path);\n      if (path[path.length-1] === '/') path = path.substr(0, path.length-1);\n      FS.mkdir(path, mode, 0);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_mkdirat.sig = 'iipi';\n\n  function ___syscall_newfstatat(dirfd, path, buf, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      var nofollow = flags & 256;\n      var allowEmpty = flags & 4096;\n      flags = flags & (~6400);\n      path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);\n      return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_newfstatat.sig = 'iippi';\n\n  \n  function ___syscall_openat(dirfd, path, flags, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      var mode = varargs ? syscallGetVarargI() : 0;\n      return FS.open(path, flags, mode).fd;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_openat.sig = 'iipip';\n\n  var PIPEFS = {\n  BUCKET_BUFFER_SIZE:8192,\n  mount(mount) {\n        // Do not pollute the real root directory or its child nodes with pipes\n        // Looks like it is OK to create another pseudo-root node not linked to the FS.root hierarchy this way\n        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },\n  createPipe() {\n        var pipe = {\n          buckets: [],\n          // refcnt 2 because pipe has a read end and a write end. We need to be\n          // able to read from the read end after write end is closed.\n          refcnt : 2,\n        };\n  \n        pipe.buckets.push({\n          buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n          offset: 0,\n          roffset: 0\n        });\n  \n        var rName = PIPEFS.nextname();\n        var wName = PIPEFS.nextname();\n        var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);\n        var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);\n  \n        rNode.pipe = pipe;\n        wNode.pipe = pipe;\n  \n        var readableStream = FS.createStream({\n          path: rName,\n          node: rNode,\n          flags: 0,\n          seekable: false,\n          stream_ops: PIPEFS.stream_ops\n        });\n        rNode.stream = readableStream;\n  \n        var writableStream = FS.createStream({\n          path: wName,\n          node: wNode,\n          flags: 1,\n          seekable: false,\n          stream_ops: PIPEFS.stream_ops\n        });\n        wNode.stream = writableStream;\n  \n        return {\n          readable_fd: readableStream.fd,\n          writable_fd: writableStream.fd\n        };\n      },\n  stream_ops:{\n  poll(stream) {\n          var pipe = stream.node.pipe;\n  \n          if ((stream.flags & 2097155) === 1) {\n            return (256 | 4);\n          }\n          if (pipe.buckets.length > 0) {\n            for (var i = 0; i < pipe.buckets.length; i++) {\n              var bucket = pipe.buckets[i];\n              if (bucket.offset - bucket.roffset > 0) {\n                return (64 | 1);\n              }\n            }\n          }\n  \n          return 0;\n        },\n  ioctl(stream, request, varargs) {\n          return 28;\n        },\n  fsync(stream) {\n          return 28;\n        },\n  read(stream, buffer, offset, length, position /* ignored */) {\n          var pipe = stream.node.pipe;\n          var currentLength = 0;\n  \n          for (var i = 0; i < pipe.buckets.length; i++) {\n            var bucket = pipe.buckets[i];\n            currentLength += bucket.offset - bucket.roffset;\n          }\n  \n          var data = buffer.subarray(offset, offset + length);\n  \n          if (length <= 0) {\n            return 0;\n          }\n          if (currentLength == 0) {\n            // Behave as if the read end is always non-blocking\n            throw new FS.ErrnoError(6);\n          }\n          var toRead = Math.min(currentLength, length);\n  \n          var totalRead = toRead;\n          var toRemove = 0;\n  \n          for (var i = 0; i < pipe.buckets.length; i++) {\n            var currBucket = pipe.buckets[i];\n            var bucketSize = currBucket.offset - currBucket.roffset;\n  \n            if (toRead <= bucketSize) {\n              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);\n              if (toRead < bucketSize) {\n                tmpSlice = tmpSlice.subarray(0, toRead);\n                currBucket.roffset += toRead;\n              } else {\n                toRemove++;\n              }\n              data.set(tmpSlice);\n              break;\n            } else {\n              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);\n              data.set(tmpSlice);\n              data = data.subarray(tmpSlice.byteLength);\n              toRead -= tmpSlice.byteLength;\n              toRemove++;\n            }\n          }\n  \n          if (toRemove && toRemove == pipe.buckets.length) {\n            // Do not generate excessive garbage in use cases such as\n            // write several bytes, read everything, write several bytes, read everything...\n            toRemove--;\n            pipe.buckets[toRemove].offset = 0;\n            pipe.buckets[toRemove].roffset = 0;\n          }\n  \n          pipe.buckets.splice(0, toRemove);\n  \n          return totalRead;\n        },\n  write(stream, buffer, offset, length, position /* ignored */) {\n          var pipe = stream.node.pipe;\n  \n          var data = buffer.subarray(offset, offset + length);\n  \n          var dataLen = data.byteLength;\n          if (dataLen <= 0) {\n            return 0;\n          }\n  \n          var currBucket = null;\n  \n          if (pipe.buckets.length == 0) {\n            currBucket = {\n              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n              offset: 0,\n              roffset: 0\n            };\n            pipe.buckets.push(currBucket);\n          } else {\n            currBucket = pipe.buckets[pipe.buckets.length - 1];\n          }\n  \n          assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);\n  \n          var freeBytesInCurrBuffer = PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;\n          if (freeBytesInCurrBuffer >= dataLen) {\n            currBucket.buffer.set(data, currBucket.offset);\n            currBucket.offset += dataLen;\n            return dataLen;\n          } else if (freeBytesInCurrBuffer > 0) {\n            currBucket.buffer.set(data.subarray(0, freeBytesInCurrBuffer), currBucket.offset);\n            currBucket.offset += freeBytesInCurrBuffer;\n            data = data.subarray(freeBytesInCurrBuffer, data.byteLength);\n          }\n  \n          var numBuckets = (data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0;\n          var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;\n  \n          for (var i = 0; i < numBuckets; i++) {\n            var newBucket = {\n              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n              offset: PIPEFS.BUCKET_BUFFER_SIZE,\n              roffset: 0\n            };\n            pipe.buckets.push(newBucket);\n            newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));\n            data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength);\n          }\n  \n          if (remElements > 0) {\n            var newBucket = {\n              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),\n              offset: data.byteLength,\n              roffset: 0\n            };\n            pipe.buckets.push(newBucket);\n            newBucket.buffer.set(data);\n          }\n  \n          return dataLen;\n        },\n  close(stream) {\n          var pipe = stream.node.pipe;\n          pipe.refcnt--;\n          if (pipe.refcnt === 0) {\n            pipe.buckets = null;\n          }\n        },\n  },\n  nextname() {\n        if (!PIPEFS.nextname.current) {\n          PIPEFS.nextname.current = 0;\n        }\n        return 'pipe[' + (PIPEFS.nextname.current++) + ']';\n      },\n  };\n  function ___syscall_pipe(fdPtr) {\n  try {\n  \n      if (fdPtr == 0) {\n        throw new FS.ErrnoError(21);\n      }\n  \n      var res = PIPEFS.createPipe();\n  \n      HEAP32[((fdPtr)>>2)] = res.readable_fd;\n      HEAP32[(((fdPtr)+(4))>>2)] = res.writable_fd;\n  \n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_pipe.sig = 'ip';\n\n  function ___syscall_poll(fds, nfds, timeout) {\n  try {\n  \n      var nonzero = 0;\n      for (var i = 0; i < nfds; i++) {\n        var pollfd = fds + 8 * i;\n        var fd = HEAP32[((pollfd)>>2)];\n        var events = HEAP16[(((pollfd)+(4))>>1)];\n        var mask = 32;\n        var stream = FS.getStream(fd);\n        if (stream) {\n          mask = SYSCALLS.DEFAULT_POLLMASK;\n          if (stream.stream_ops.poll) {\n            mask = stream.stream_ops.poll(stream, -1);\n          }\n        }\n        mask &= events | 8 | 16;\n        if (mask) nonzero++;\n        HEAP16[(((pollfd)+(6))>>1)] = mask;\n      }\n      return nonzero;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_poll.sig = 'ipii';\n\n  \n  \n  function ___syscall_readlinkat(dirfd, path, buf, bufsize) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      if (bufsize <= 0) return -28;\n      var ret = FS.readlink(path);\n  \n      var len = Math.min(bufsize, lengthBytesUTF8(ret));\n      var endChar = HEAP8[buf+len];\n      stringToUTF8(ret, buf, bufsize+1);\n      // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)\n      // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.\n      HEAP8[buf+len] = endChar;\n      return len;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_readlinkat.sig = 'iippp';\n\n  \n  \n  function ___syscall_recvfrom(fd, buf, len, flags, addr, addrlen) {\n  try {\n  \n      var sock = getSocketFromFD(fd);\n      var msg = sock.sock_ops.recvmsg(sock, len);\n      if (!msg) return 0; // socket is closed\n      if (addr) {\n        var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port, addrlen);\n      }\n      HEAPU8.set(msg.buffer, buf);\n      return msg.buffer.byteLength;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_recvfrom.sig = 'iippipp';\n\n  function ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {\n  try {\n  \n      oldpath = SYSCALLS.getStr(oldpath);\n      newpath = SYSCALLS.getStr(newpath);\n      oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);\n      newpath = SYSCALLS.calculateAt(newdirfd, newpath);\n      FS.rename(oldpath, newpath);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_renameat.sig = 'iipip';\n\n  function ___syscall_rmdir(path) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      FS.rmdir(path);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_rmdir.sig = 'ip';\n\n  \n  function ___syscall_sendto(fd, message, length, flags, addr, addr_len) {\n  try {\n  \n      var sock = getSocketFromFD(fd);\n      if (!addr) {\n        // send, no address provided\n        return FS.write(sock.stream, HEAP8, message, length);\n      }\n      var dest = getSocketAddress(addr, addr_len);\n      // sendto an address\n      return sock.sock_ops.sendmsg(sock, HEAP8, message, length, dest.addr, dest.port);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_sendto.sig = 'iippipp';\n\n  function ___syscall_socket(domain, type, protocol) {\n  try {\n  \n      var sock = SOCKFS.createSocket(domain, type, protocol);\n      return sock.stream.fd;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_socket.sig = 'iiiiiii';\n\n  function ___syscall_stat64(path, buf) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      return SYSCALLS.doStat(FS.stat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_stat64.sig = 'ipp';\n\n  function ___syscall_symlink(target, linkpath) {\n  try {\n  \n      target = SYSCALLS.getStr(target);\n      linkpath = SYSCALLS.getStr(linkpath);\n      FS.symlink(target, linkpath);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_symlink.sig = 'ipp';\n\n  \n  function ___syscall_truncate64(path, length) {\n    length = bigintToI53Checked(length);\n  \n    \n  try {\n  \n      if (isNaN(length)) return 61;\n      path = SYSCALLS.getStr(path);\n      FS.truncate(path, length);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  ;\n  }\n  ___syscall_truncate64.sig = 'ipj';\n\n  function ___syscall_unlinkat(dirfd, path, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      if (flags === 0) {\n        FS.unlink(path);\n      } else if (flags === 512) {\n        FS.rmdir(path);\n      } else {\n        abort('Invalid flags passed to unlinkat');\n      }\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n  ___syscall_unlinkat.sig = 'iipi';\n\n  var ___table_base = new WebAssembly.Global({'value': 'i32', 'mutable': false}, 1);\n\n  var __abort_js = () => {\n      abort('');\n    };\n  __abort_js.sig = 'v';\n\n  var ENV = {\n  };\n  \n  \n  \n  \n  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);\n  var stringToUTF8OnStack = (str) => {\n      var size = lengthBytesUTF8(str) + 1;\n      var ret = stackAlloc(size);\n      stringToUTF8(str, ret, size);\n      return ret;\n    };\n  \n  \n  var dlSetError = (msg) => {\n      var sp = stackSave();\n      var cmsg = stringToUTF8OnStack(msg);\n      ___dl_seterr(cmsg, 0);\n      stackRestore(sp);\n    };\n  \n  \n  var dlopenInternal = (handle, jsflags) => {\n      // void *dlopen(const char *file, int mode);\n      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html\n      var filename = UTF8ToString(handle + 36);\n      var flags = HEAP32[(((handle)+(4))>>2)];\n      filename = PATH.normalize(filename);\n      var searchpaths = [];\n  \n      var global = Boolean(flags & 256);\n      var localScope = global ? null : {};\n  \n      // We don't care about RTLD_NOW and RTLD_LAZY.\n      var combinedFlags = {\n        global,\n        nodelete:  Boolean(flags & 4096),\n        loadAsync: jsflags.loadAsync,\n      }\n  \n      if (jsflags.loadAsync) {\n        return loadDynamicLibrary(filename, combinedFlags, localScope, handle);\n      }\n  \n      try {\n        return loadDynamicLibrary(filename, combinedFlags, localScope, handle)\n      } catch (e) {\n        dlSetError(`Could not load dynamic lib: ${filename}\\n${e}`);\n        return 0;\n      }\n    };\n  var __dlopen_js = (handle) => {\n      return dlopenInternal(handle, { loadAsync: false });\n    };\n  __dlopen_js.sig = 'pp';\n\n  \n  \n  \n  var __dlsym_js = (handle, symbol, symbolIndex) => {\n      // void *dlsym(void *restrict handle, const char *restrict name);\n      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html\n      symbol = UTF8ToString(symbol);\n      var result;\n      var newSymIndex;\n  \n      var lib = LDSO.loadedLibsByHandle[handle];\n      if (!lib.exports.hasOwnProperty(symbol) || lib.exports[symbol].stub) {\n        dlSetError(`Tried to lookup unknown symbol \"${symbol}\" in dynamic lib: ${lib.name}`)\n        return 0;\n      }\n      newSymIndex = Object.keys(lib.exports).indexOf(symbol);\n      result = lib.exports[symbol];\n  \n      if (typeof result == 'function') {\n  \n        var addr = getFunctionAddress(result);\n        if (addr) {\n          result = addr;\n        } else {\n          // Insert the function into the wasm table.  If its a direct wasm\n          // function the second argument will not be needed.  If its a JS\n          // function we rely on the `sig` attribute being set based on the\n          // `<func>__sig` specified in library JS file.\n          result = addFunction(result, result.sig);\n          HEAPU32[((symbolIndex)>>2)] = newSymIndex;\n        }\n      }\n      return result;\n    };\n  __dlsym_js.sig = 'pppp';\n\n  var nowIsMonotonic = 1;\n  var __emscripten_get_now_is_monotonic = () => nowIsMonotonic;\n  __emscripten_get_now_is_monotonic.sig = 'i';\n\n  var __emscripten_runtime_keepalive_clear = () => {\n      noExitRuntime = false;\n      runtimeKeepaliveCounter = 0;\n    };\n  __emscripten_runtime_keepalive_clear.sig = 'v';\n\n  var __emscripten_system = (command) => {\n      if (ENVIRONMENT_IS_NODE) {\n        if (!command) return 1; // shell is available\n  \n        var cmdstr = UTF8ToString(command);\n        if (!cmdstr.length) return 0; // this is what glibc seems to do (shell works test?)\n  \n        var cp = require('child_process');\n        var ret = cp.spawnSync(cmdstr, [], {shell:true, stdio:'inherit'});\n  \n        var _W_EXITCODE = (ret, sig) => ((ret) << 8 | (sig));\n  \n        // this really only can happen if process is killed by signal\n        if (ret.status === null) {\n          // sadly node doesn't expose such function\n          var signalToNumber = (sig) => {\n            // implement only the most common ones, and fallback to SIGINT\n            switch (sig) {\n              case 'SIGHUP': return 1;\n              case 'SIGQUIT': return 3;\n              case 'SIGFPE': return 8;\n              case 'SIGKILL': return 9;\n              case 'SIGALRM': return 14;\n              case 'SIGTERM': return 15;\n              default: return 2;\n            }\n          }\n          return _W_EXITCODE(0, signalToNumber(ret.signal));\n        }\n  \n        return _W_EXITCODE(ret.status, 0);\n      }\n      // int system(const char *command);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html\n      // Can't call external programs.\n      if (!command) return 0; // no shell available\n      return -52;\n    };\n  __emscripten_system.sig = 'ip';\n\n  var __emscripten_throw_longjmp = () => {\n      throw Infinity;\n    };\n  __emscripten_throw_longjmp.sig = 'v';\n\n  function __gmtime_js(time, tmPtr) {\n    time = bigintToI53Checked(time);\n  \n    \n      var date = new Date(time * 1000);\n      HEAP32[((tmPtr)>>2)] = date.getUTCSeconds();\n      HEAP32[(((tmPtr)+(4))>>2)] = date.getUTCMinutes();\n      HEAP32[(((tmPtr)+(8))>>2)] = date.getUTCHours();\n      HEAP32[(((tmPtr)+(12))>>2)] = date.getUTCDate();\n      HEAP32[(((tmPtr)+(16))>>2)] = date.getUTCMonth();\n      HEAP32[(((tmPtr)+(20))>>2)] = date.getUTCFullYear()-1900;\n      HEAP32[(((tmPtr)+(24))>>2)] = date.getUTCDay();\n      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);\n      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;\n      HEAP32[(((tmPtr)+(28))>>2)] = yday;\n    ;\n  }\n  __gmtime_js.sig = 'vjp';\n\n  var isLeapYear = (year) => year%4 === 0 && (year%100 !== 0 || year%400 === 0);\n  \n  var MONTH_DAYS_LEAP_CUMULATIVE = [0,31,60,91,121,152,182,213,244,274,305,335];\n  \n  var MONTH_DAYS_REGULAR_CUMULATIVE = [0,31,59,90,120,151,181,212,243,273,304,334];\n  var ydayFromDate = (date) => {\n      var leap = isLeapYear(date.getFullYear());\n      var monthDaysCumulative = (leap ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE);\n      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1; // -1 since it's days since Jan 1\n  \n      return yday;\n    };\n  \n  function __localtime_js(time, tmPtr) {\n    time = bigintToI53Checked(time);\n  \n    \n      var date = new Date(time*1000);\n      HEAP32[((tmPtr)>>2)] = date.getSeconds();\n      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();\n      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();\n      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();\n      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();\n      HEAP32[(((tmPtr)+(20))>>2)] = date.getFullYear()-1900;\n      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();\n  \n      var yday = ydayFromDate(date)|0;\n      HEAP32[(((tmPtr)+(28))>>2)] = yday;\n      HEAP32[(((tmPtr)+(36))>>2)] = -(date.getTimezoneOffset() * 60);\n  \n      // Attention: DST is in December in South, and some regions don't have DST at all.\n      var start = new Date(date.getFullYear(), 0, 1);\n      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();\n      var winterOffset = start.getTimezoneOffset();\n      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;\n      HEAP32[(((tmPtr)+(32))>>2)] = dst;\n    ;\n  }\n  __localtime_js.sig = 'vjp';\n\n  \n  \n  \n  \n  \n  function __mmap_js(len, prot, flags, fd, offset, allocated, addr) {\n    offset = bigintToI53Checked(offset);\n  \n    \n  try {\n  \n      if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var res = FS.mmap(stream, len, offset, prot, flags);\n      var ptr = res.ptr;\n      HEAP32[((allocated)>>2)] = res.allocated;\n      HEAPU32[((addr)>>2)] = ptr;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  ;\n  }\n  __mmap_js.sig = 'ipiiijpp';\n\n  \n  function __munmap_js(addr, len, prot, flags, fd, offset) {\n    offset = bigintToI53Checked(offset);\n  \n    \n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      if (prot & 2) {\n        SYSCALLS.doMsync(addr, stream, len, flags, offset);\n      }\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  ;\n  }\n  __munmap_js.sig = 'ippiiij';\n\n  var timers = {\n  };\n  \n  var handleException = (e) => {\n      // Certain exception types we do not treat as errors since they are used for\n      // internal control flow.\n      // 1. ExitStatus, which is thrown by exit()\n      // 2. \"unwind\", which is thrown by emscripten_unwind_to_js_event_loop() and others\n      //    that wish to return to JS event loop.\n      if (e instanceof ExitStatus || e == 'unwind') {\n        return EXITSTATUS;\n      }\n      quit_(1, e);\n    };\n  \n  \n  var runtimeKeepaliveCounter = 0;\n  var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;\n  var _proc_exit = (code) => {\n      EXITSTATUS = code;\n      if (!keepRuntimeAlive()) {\n        Module['onExit']?.(code);\n        ABORT = true;\n      }\n      quit_(code, new ExitStatus(code));\n    };\n  _proc_exit.sig = 'vi';\n  /** @suppress {duplicate } */\n  /** @param {boolean|number=} implicit */\n  var exitJS = (status, implicit) => {\n      EXITSTATUS = status;\n  \n      _proc_exit(status);\n    };\n  var _exit = exitJS;\n  _exit.sig = 'vi';\n  \n  \n  var maybeExit = () => {\n      if (!keepRuntimeAlive()) {\n        try {\n          _exit(EXITSTATUS);\n        } catch (e) {\n          handleException(e);\n        }\n      }\n    };\n  var callUserCallback = (func) => {\n      if (ABORT) {\n        return;\n      }\n      try {\n        func();\n        maybeExit();\n      } catch (e) {\n        handleException(e);\n      }\n    };\n  \n  \n  var _emscripten_get_now = () => performance.now();\n  _emscripten_get_now.sig = 'd';\n  var __setitimer_js = (which, timeout_ms) => {\n      // First, clear any existing timer.\n      if (timers[which]) {\n        clearTimeout(timers[which].id);\n        delete timers[which];\n      }\n  \n      // A timeout of zero simply cancels the current timeout so we have nothing\n      // more to do.\n      if (!timeout_ms) return 0;\n  \n      var id = setTimeout(() => {\n        delete timers[which];\n        callUserCallback(() => __emscripten_timeout(which, _emscripten_get_now()));\n      }, timeout_ms);\n      timers[which] = { id, timeout_ms };\n      return 0;\n    };\n  __setitimer_js.sig = 'iid';\n\n  var __tzset_js = (timezone, daylight, std_name, dst_name) => {\n      // TODO: Use (malleable) environment variables instead of system settings.\n      var currentYear = new Date().getFullYear();\n      var winter = new Date(currentYear, 0, 1);\n      var summer = new Date(currentYear, 6, 1);\n      var winterOffset = winter.getTimezoneOffset();\n      var summerOffset = summer.getTimezoneOffset();\n  \n      // Local standard timezone offset. Local standard time is not adjusted for\n      // daylight savings.  This code uses the fact that getTimezoneOffset returns\n      // a greater value during Standard Time versus Daylight Saving Time (DST).\n      // Thus it determines the expected output during Standard Time, and it\n      // compares whether the output of the given date the same (Standard) or less\n      // (DST).\n      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);\n  \n      // timezone is specified as seconds west of UTC (\"The external variable\n      // `timezone` shall be set to the difference, in seconds, between\n      // Coordinated Universal Time (UTC) and local standard time.\"), the same\n      // as returned by stdTimezoneOffset.\n      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html\n      HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;\n  \n      HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);\n  \n      var extractZone = (timezoneOffset) => {\n        // Why inverse sign?\n        // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\n        var sign = timezoneOffset >= 0 ? \"-\" : \"+\";\n  \n        var absOffset = Math.abs(timezoneOffset)\n        var hours = String(Math.floor(absOffset / 60)).padStart(2, \"0\");\n        var minutes = String(absOffset % 60).padStart(2, \"0\");\n  \n        return `UTC${sign}${hours}${minutes}`;\n      }\n  \n      var winterName = extractZone(winterOffset);\n      var summerName = extractZone(summerOffset);\n      if (summerOffset < winterOffset) {\n        // Northern hemisphere\n        stringToUTF8(winterName, std_name, 17);\n        stringToUTF8(summerName, dst_name, 17);\n      } else {\n        stringToUTF8(winterName, dst_name, 17);\n        stringToUTF8(summerName, std_name, 17);\n      }\n    };\n  __tzset_js.sig = 'vpppp';\n\n  var readEmAsmArgsArray = [];\n  var readEmAsmArgs = (sigPtr, buf) => {\n      readEmAsmArgsArray.length = 0;\n      var ch;\n      // Most arguments are i32s, so shift the buffer pointer so it is a plain\n      // index into HEAP32.\n      while (ch = HEAPU8[sigPtr++]) {\n        // Floats are always passed as doubles, so all types except for 'i'\n        // are 8 bytes and require alignment.\n        var wide = (ch != 105);\n        wide &= (ch != 112);\n        buf += wide && (buf % 8) ? 4 : 0;\n        readEmAsmArgsArray.push(\n          // Special case for pointers under wasm64 or CAN_ADDRESS_2GB mode.\n          ch == 112 ? HEAPU32[((buf)>>2)] :\n          ch == 106 ? HEAP64[((buf)>>3)] :\n          ch == 105 ?\n            HEAP32[((buf)>>2)] :\n            HEAPF64[((buf)>>3)]\n        );\n        buf += wide ? 8 : 4;\n      }\n      return readEmAsmArgsArray;\n    };\n  var runEmAsmFunction = (code, sigPtr, argbuf) => {\n      var args = readEmAsmArgs(sigPtr, argbuf);\n      return ASM_CONSTS[code](...args);\n    };\n  var _emscripten_asm_const_int = (code, sigPtr, argbuf) => {\n      return runEmAsmFunction(code, sigPtr, argbuf);\n    };\n  _emscripten_asm_const_int.sig = 'ippp';\n\n  var _emscripten_date_now = () => Date.now();\n  _emscripten_date_now.sig = 'd';\n\n  \n  \n  var _emscripten_force_exit = (status) => {\n      __emscripten_runtime_keepalive_clear();\n      _exit(status);\n    };\n  _emscripten_force_exit.sig = 'vi';\n\n\n  var getHeapMax = () =>\n      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate\n      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side\n      // for any code that deals with heap sizes, which would require special\n      // casing all heap size related code to treat 0 specially.\n      2147483648;\n  \n  \n  var growMemory = (size) => {\n      var b = wasmMemory.buffer;\n      var pages = (size - b.byteLength + 65535) / 65536;\n      try {\n        // round size grow request up to wasm page size (fixed 64KB per spec)\n        wasmMemory.grow(pages); // .grow() takes a delta compared to the previous size\n        updateMemoryViews();\n        return 1 /*success*/;\n      } catch(e) {\n      }\n      // implicit 0 return to save code size (caller will cast \"undefined\" into 0\n      // anyhow)\n    };\n  var _emscripten_resize_heap = (requestedSize) => {\n      var oldSize = HEAPU8.length;\n      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.\n      requestedSize >>>= 0;\n      // With multithreaded builds, races can happen (another thread might increase the size\n      // in between), so return a failure, and let the caller retry.\n  \n      // Memory resize rules:\n      // 1.  Always increase heap size to at least the requested size, rounded up\n      //     to next page multiple.\n      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap\n      //     geometrically: increase the heap size according to\n      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most\n      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).\n      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap\n      //     linearly: increase the heap size by at least\n      //     MEMORY_GROWTH_LINEAR_STEP bytes.\n      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by\n      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest\n      // 4.  If we were unable to allocate as much memory, it may be due to\n      //     over-eager decision to excessively reserve due to (3) above.\n      //     Hence if an allocation fails, cut down on the amount of excess\n      //     growth, in an attempt to succeed to perform a smaller allocation.\n  \n      // A limit is set for how much we can grow. We should not exceed that\n      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).\n      var maxHeapSize = getHeapMax();\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n  \n      // Loop through potential heap size increases. If we attempt a too eager\n      // reservation that fails, cut down on the attempted size and reserve a\n      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth\n        // but limit overreserving (default to capping at +96MB overgrowth at most)\n        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );\n  \n        var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));\n  \n        var replacement = growMemory(newSize);\n        if (replacement) {\n  \n          return true;\n        }\n      }\n      return false;\n    };\n  _emscripten_resize_heap.sig = 'ip';\n\n  \n  \n  var _emscripten_set_main_loop_timing = (mode, value) => {\n      MainLoop.timingMode = mode;\n      MainLoop.timingValue = value;\n  \n      if (!MainLoop.func) {\n        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.\n      }\n  \n      if (!MainLoop.running) {\n        \n        MainLoop.running = true;\n      }\n      if (mode == 0) {\n        MainLoop.scheduler = function MainLoop_scheduler_setTimeout() {\n          var timeUntilNextTick = Math.max(0, MainLoop.tickStartTime + value - _emscripten_get_now())|0;\n          setTimeout(MainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop\n        };\n        MainLoop.method = 'timeout';\n      } else if (mode == 1) {\n        MainLoop.scheduler = function MainLoop_scheduler_rAF() {\n          MainLoop.requestAnimationFrame(MainLoop.runner);\n        };\n        MainLoop.method = 'rAF';\n      } else if (mode == 2) {\n        if (typeof MainLoop.setImmediate == 'undefined') {\n          if (typeof setImmediate == 'undefined') {\n            // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)\n            var setImmediates = [];\n            var emscriptenMainLoopMessageId = 'setimmediate';\n            /** @param {Event} event */\n            var MainLoop_setImmediate_messageHandler = (event) => {\n              // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,\n              // so check for both cases.\n              if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {\n                event.stopPropagation();\n                setImmediates.shift()();\n              }\n            };\n            addEventListener(\"message\", MainLoop_setImmediate_messageHandler, true);\n            MainLoop.setImmediate = /** @type{function(function(): ?, ...?): number} */((func) => {\n              setImmediates.push(func);\n              if (ENVIRONMENT_IS_WORKER) {\n                Module['setImmediates'] ??= [];\n                Module['setImmediates'].push(func);\n                postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js\n              } else postMessage(emscriptenMainLoopMessageId, \"*\"); // On the main thread, can just send the message to itself.\n            });\n          } else {\n            MainLoop.setImmediate = setImmediate;\n          }\n        }\n        MainLoop.scheduler = function MainLoop_scheduler_setImmediate() {\n          MainLoop.setImmediate(MainLoop.runner);\n        };\n        MainLoop.method = 'immediate';\n      }\n      return 0;\n    };\n  _emscripten_set_main_loop_timing.sig = 'iii';\n  var MainLoop = {\n  running:false,\n  scheduler:null,\n  method:\"\",\n  currentlyRunningMainloop:0,\n  func:null,\n  arg:0,\n  timingMode:0,\n  timingValue:0,\n  currentFrameNumber:0,\n  queue:[],\n  preMainLoop:[],\n  postMainLoop:[],\n  pause() {\n        MainLoop.scheduler = null;\n        // Incrementing this signals the previous main loop that it's now become old, and it must return.\n        MainLoop.currentlyRunningMainloop++;\n      },\n  resume() {\n        MainLoop.currentlyRunningMainloop++;\n        var timingMode = MainLoop.timingMode;\n        var timingValue = MainLoop.timingValue;\n        var func = MainLoop.func;\n        MainLoop.func = null;\n        // do not set timing and call scheduler, we will do it on the next lines\n        setMainLoop(func, 0, false, MainLoop.arg, true);\n        _emscripten_set_main_loop_timing(timingMode, timingValue);\n        MainLoop.scheduler();\n      },\n  updateStatus() {\n        if (Module['setStatus']) {\n          var message = Module['statusMessage'] || 'Please wait...';\n          var remaining = MainLoop.remainingBlockers ?? 0;\n          var expected = MainLoop.expectedBlockers ?? 0;\n          if (remaining) {\n            if (remaining < expected) {\n              Module['setStatus'](`{message} ({expected - remaining}/{expected})`);\n            } else {\n              Module['setStatus'](message);\n            }\n          } else {\n            Module['setStatus']('');\n          }\n        }\n      },\n  init() {\n        Module['preMainLoop'] && MainLoop.preMainLoop.push(Module['preMainLoop']);\n        Module['postMainLoop'] && MainLoop.postMainLoop.push(Module['postMainLoop']);\n      },\n  runIter(func) {\n        if (ABORT) return;\n        for (var pre of MainLoop.preMainLoop) {\n          if (pre() === false) {\n            return; // |return false| skips a frame\n          }\n        }\n        callUserCallback(func);\n        for (var post of MainLoop.postMainLoop) {\n          post();\n        }\n      },\n  nextRAF:0,\n  fakeRequestAnimationFrame(func) {\n        // try to keep 60fps between calls to here\n        var now = Date.now();\n        if (MainLoop.nextRAF === 0) {\n          MainLoop.nextRAF = now + 1000/60;\n        } else {\n          while (now + 2 >= MainLoop.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0\n            MainLoop.nextRAF += 1000/60;\n          }\n        }\n        var delay = Math.max(MainLoop.nextRAF - now, 0);\n        setTimeout(func, delay);\n      },\n  requestAnimationFrame(func) {\n        if (typeof requestAnimationFrame == 'function') {\n          requestAnimationFrame(func);\n          return;\n        }\n        var RAF = MainLoop.fakeRequestAnimationFrame;\n        RAF(func);\n      },\n  };\n  \n  \n  \n  \n    /**\n     * @param {number=} arg\n     * @param {boolean=} noSetTiming\n     */\n  var setMainLoop = (iterFunc, fps, simulateInfiniteLoop, arg, noSetTiming) => {\n      MainLoop.func = iterFunc;\n      MainLoop.arg = arg;\n  \n      var thisMainLoopId = MainLoop.currentlyRunningMainloop;\n      function checkIsRunning() {\n        if (thisMainLoopId < MainLoop.currentlyRunningMainloop) {\n          \n          maybeExit();\n          return false;\n        }\n        return true;\n      }\n  \n      // We create the loop runner here but it is not actually running until\n      // _emscripten_set_main_loop_timing is called (which might happen a\n      // later time).  This member signifies that the current runner has not\n      // yet been started so that we can call runtimeKeepalivePush when it\n      // gets it timing set for the first time.\n      MainLoop.running = false;\n      MainLoop.runner = function MainLoop_runner() {\n        if (ABORT) return;\n        if (MainLoop.queue.length > 0) {\n          var start = Date.now();\n          var blocker = MainLoop.queue.shift();\n          blocker.func(blocker.arg);\n          if (MainLoop.remainingBlockers) {\n            var remaining = MainLoop.remainingBlockers;\n            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);\n            if (blocker.counted) {\n              MainLoop.remainingBlockers = next;\n            } else {\n              // not counted, but move the progress along a tiny bit\n              next = next + 0.5; // do not steal all the next one's progress\n              MainLoop.remainingBlockers = (8*remaining + next)/9;\n            }\n          }\n          MainLoop.updateStatus();\n  \n          // catches pause/resume main loop from blocker execution\n          if (!checkIsRunning()) return;\n  \n          setTimeout(MainLoop.runner, 0);\n          return;\n        }\n  \n        // catch pauses from non-main loop sources\n        if (!checkIsRunning()) return;\n  \n        // Implement very basic swap interval control\n        MainLoop.currentFrameNumber = MainLoop.currentFrameNumber + 1 | 0;\n        if (MainLoop.timingMode == 1 && MainLoop.timingValue > 1 && MainLoop.currentFrameNumber % MainLoop.timingValue != 0) {\n          // Not the scheduled time to render this frame - skip.\n          MainLoop.scheduler();\n          return;\n        } else if (MainLoop.timingMode == 0) {\n          MainLoop.tickStartTime = _emscripten_get_now();\n        }\n  \n        MainLoop.runIter(iterFunc);\n  \n        // catch pauses from the main loop itself\n        if (!checkIsRunning()) return;\n  \n        MainLoop.scheduler();\n      }\n  \n      if (!noSetTiming) {\n        if (fps && fps > 0) {\n          _emscripten_set_main_loop_timing(0, 1000.0 / fps);\n        } else {\n          // Do rAF by rendering each frame (no decimating)\n          _emscripten_set_main_loop_timing(1, 1);\n        }\n  \n        MainLoop.scheduler();\n      }\n  \n      if (simulateInfiniteLoop) {\n        throw 'unwind';\n      }\n    };\n  \n  var _emscripten_set_main_loop = (func, fps, simulateInfiniteLoop) => {\n      var iterFunc = getWasmTableEntry(func);\n      setMainLoop(iterFunc, fps, simulateInfiniteLoop);\n    };\n  _emscripten_set_main_loop.sig = 'vpii';\n\n  \n  var getExecutableName = () => {\n      return thisProgram || './this.program';\n    };\n  var getEnvStrings = () => {\n      if (!getEnvStrings.strings) {\n        // Default values.\n        // Browser language detection #8751\n        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';\n        var env = {\n          'USER': 'web_user',\n          'LOGNAME': 'web_user',\n          'PATH': '/',\n          'PWD': '/',\n          'HOME': '/home/web_user',\n          'LANG': lang,\n          '_': getExecutableName()\n        };\n        // Apply the user-provided values, if any.\n        for (var x in ENV) {\n          // x is a key in ENV; if ENV[x] is undefined, that means it was\n          // explicitly set to be so. We allow user code to do that to\n          // force variables with default values to remain unset.\n          if (ENV[x] === undefined) delete env[x];\n          else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push(`${x}=${env[x]}`);\n        }\n        getEnvStrings.strings = strings;\n      }\n      return getEnvStrings.strings;\n    };\n  \n  var stringToAscii = (str, buffer) => {\n      for (var i = 0; i < str.length; ++i) {\n        HEAP8[buffer++] = str.charCodeAt(i);\n      }\n      // Null-terminate the string\n      HEAP8[buffer] = 0;\n    };\n  var _environ_get = (__environ, environ_buf) => {\n      var bufSize = 0;\n      getEnvStrings().forEach((string, i) => {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;\n        stringToAscii(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    };\n  _environ_get.sig = 'ipp';\n\n  var _environ_sizes_get = (penviron_count, penviron_buf_size) => {\n      var strings = getEnvStrings();\n      HEAPU32[((penviron_count)>>2)] = strings.length;\n      var bufSize = 0;\n      strings.forEach((string) => bufSize += string.length + 1);\n      HEAPU32[((penviron_buf_size)>>2)] = bufSize;\n      return 0;\n    };\n  _environ_sizes_get.sig = 'ipp';\n\n\n  function _fd_close(fd) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.close(stream);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n  _fd_close.sig = 'ii';\n\n  function _fd_fdstat_get(fd, pbuf) {\n  try {\n  \n      var rightsBase = 0;\n      var rightsInheriting = 0;\n      var flags = 0;\n      {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        // All character devices are terminals (other things a Linux system would\n        // assume is a character device, like the mouse, we have special APIs for).\n        var type = stream.tty ? 2 :\n                   FS.isDir(stream.mode) ? 3 :\n                   FS.isLink(stream.mode) ? 7 :\n                   4;\n      }\n      HEAP8[pbuf] = type;\n      HEAP16[(((pbuf)+(2))>>1)] = flags;\n      HEAP64[(((pbuf)+(8))>>3)] = BigInt(rightsBase);\n      HEAP64[(((pbuf)+(16))>>3)] = BigInt(rightsInheriting);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n  _fd_fdstat_get.sig = 'iip';\n\n  /** @param {number=} offset */\n  var doReadv = (stream, iov, iovcnt, offset) => {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break; // nothing more to read\n        if (typeof offset != 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n  \n  \n  function _fd_pread(fd, iov, iovcnt, offset, pnum) {\n    offset = bigintToI53Checked(offset);\n  \n    \n  try {\n  \n      if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd)\n      var num = doReadv(stream, iov, iovcnt, offset);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  ;\n  }\n  _fd_pread.sig = 'iippjp';\n\n  /** @param {number=} offset */\n  var doWritev = (stream, iov, iovcnt, offset) => {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) {\n          // No more space to write.\n          break;\n        }\n        if (typeof offset != 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n  \n  \n  function _fd_pwrite(fd, iov, iovcnt, offset, pnum) {\n    offset = bigintToI53Checked(offset);\n  \n    \n  try {\n  \n      if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd)\n      var num = doWritev(stream, iov, iovcnt, offset);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  ;\n  }\n  _fd_pwrite.sig = 'iippjp';\n\n  \n  function _fd_read(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doReadv(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n  _fd_read.sig = 'iippp';\n\n  \n  function _fd_seek(fd, offset, whence, newOffset) {\n    offset = bigintToI53Checked(offset);\n  \n    \n  try {\n  \n      if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.llseek(stream, offset, whence);\n      HEAP64[((newOffset)>>3)] = BigInt(stream.position);\n      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  ;\n  }\n  _fd_seek.sig = 'iijip';\n\n  function _fd_sync(fd) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      if (stream.stream_ops?.fsync) {\n        return stream.stream_ops.fsync(stream);\n      }\n      return 0; // we can't do anything synchronously; the in-memory FS is already synced to\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n  _fd_sync.sig = 'ii';\n\n  \n  function _fd_write(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doWritev(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n  _fd_write.sig = 'iippp';\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  var _getaddrinfo = (node, service, hint, out) => {\n      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL\n      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we\n      // really should provide a linked list of suitable addrinfo values.\n      var addrs = [];\n      var canon = null;\n      var addr = 0;\n      var port = 0;\n      var flags = 0;\n      var family = 0;\n      var type = 0;\n      var proto = 0;\n      var ai, last;\n  \n      function allocaddrinfo(family, type, proto, canon, addr, port) {\n        var sa, salen, ai;\n        var errno;\n  \n        salen = family === 10 ?\n          28 :\n          16;\n        addr = family === 10 ?\n          inetNtop6(addr) :\n          inetNtop4(addr);\n        sa = _malloc(salen);\n        errno = writeSockaddr(sa, family, addr, port);\n        assert(!errno);\n  \n        ai = _malloc(32);\n        HEAP32[(((ai)+(4))>>2)] = family;\n        HEAP32[(((ai)+(8))>>2)] = type;\n        HEAP32[(((ai)+(12))>>2)] = proto;\n        HEAPU32[(((ai)+(24))>>2)] = canon;\n        HEAPU32[(((ai)+(20))>>2)] = sa;\n        if (family === 10) {\n          HEAP32[(((ai)+(16))>>2)] = 28;\n        } else {\n          HEAP32[(((ai)+(16))>>2)] = 16;\n        }\n        HEAP32[(((ai)+(28))>>2)] = 0;\n  \n        return ai;\n      }\n  \n      if (hint) {\n        flags = HEAP32[((hint)>>2)];\n        family = HEAP32[(((hint)+(4))>>2)];\n        type = HEAP32[(((hint)+(8))>>2)];\n        proto = HEAP32[(((hint)+(12))>>2)];\n      }\n      if (type && !proto) {\n        proto = type === 2 ? 17 : 6;\n      }\n      if (!type && proto) {\n        type = proto === 17 ? 2 : 1;\n      }\n  \n      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for\n      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.\n      if (proto === 0) {\n        proto = 6;\n      }\n      if (type === 0) {\n        type = 1;\n      }\n  \n      if (!node && !service) {\n        return -2;\n      }\n      if (flags & ~(1|2|4|\n          1024|8|16|32)) {\n        return -1;\n      }\n      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {\n        return -1;\n      }\n      if (flags & 32) {\n        // TODO\n        return -2;\n      }\n      if (type !== 0 && type !== 1 && type !== 2) {\n        return -7;\n      }\n      if (family !== 0 && family !== 2 && family !== 10) {\n        return -6;\n      }\n  \n      if (service) {\n        service = UTF8ToString(service);\n        port = parseInt(service, 10);\n  \n        if (isNaN(port)) {\n          if (flags & 1024) {\n            return -2;\n          }\n          // TODO support resolving well-known service names from:\n          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt\n          return -8;\n        }\n      }\n  \n      if (!node) {\n        if (family === 0) {\n          family = 2;\n        }\n        if ((flags & 1) === 0) {\n          if (family === 2) {\n            addr = _htonl(2130706433);\n          } else {\n            addr = [0, 0, 0, 1];\n          }\n        }\n        ai = allocaddrinfo(family, type, proto, null, addr, port);\n        HEAPU32[((out)>>2)] = ai;\n        return 0;\n      }\n  \n      //\n      // try as a numeric address\n      //\n      node = UTF8ToString(node);\n      addr = inetPton4(node);\n      if (addr !== null) {\n        // incoming node is a valid ipv4 address\n        if (family === 0 || family === 2) {\n          family = 2;\n        }\n        else if (family === 10 && (flags & 8)) {\n          addr = [0, 0, _htonl(0xffff), addr];\n          family = 10;\n        } else {\n          return -2;\n        }\n      } else {\n        addr = inetPton6(node);\n        if (addr !== null) {\n          // incoming node is a valid ipv6 address\n          if (family === 0 || family === 10) {\n            family = 10;\n          } else {\n            return -2;\n          }\n        }\n      }\n      if (addr != null) {\n        ai = allocaddrinfo(family, type, proto, node, addr, port);\n        HEAPU32[((out)>>2)] = ai;\n        return 0;\n      }\n      if (flags & 4) {\n        return -2;\n      }\n  \n      //\n      // try as a hostname\n      //\n      // resolve the hostname to a temporary fake address\n      node = DNS.lookup_name(node);\n      addr = inetPton4(node);\n      if (family === 0) {\n        family = 2;\n      } else if (family === 10) {\n        addr = [0, 0, _htonl(0xffff), addr];\n      }\n      ai = allocaddrinfo(family, type, proto, null, addr, port);\n      HEAPU32[((out)>>2)] = ai;\n      return 0;\n    };\n  _getaddrinfo.sig = 'ipppp';\n\n  \n  \n  \n  var _getnameinfo = (sa, salen, node, nodelen, serv, servlen, flags) => {\n      var info = readSockaddr(sa, salen);\n      if (info.errno) {\n        return -6;\n      }\n      var port = info.port;\n      var addr = info.addr;\n  \n      var overflowed = false;\n  \n      if (node && nodelen) {\n        var lookup;\n        if ((flags & 1) || !(lookup = DNS.lookup_addr(addr))) {\n          if (flags & 8) {\n            return -2;\n          }\n        } else {\n          addr = lookup;\n        }\n        var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);\n  \n        if (numBytesWrittenExclNull+1 >= nodelen) {\n          overflowed = true;\n        }\n      }\n  \n      if (serv && servlen) {\n        port = '' + port;\n        var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);\n  \n        if (numBytesWrittenExclNull+1 >= servlen) {\n          overflowed = true;\n        }\n      }\n  \n      if (overflowed) {\n        // Note: even when we overflow, getnameinfo() is specced to write out the truncated results.\n        return -12;\n      }\n  \n      return 0;\n    };\n  _getnameinfo.sig = 'ipipipii';\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  var stringToNewUTF8 = (str) => {\n      var size = lengthBytesUTF8(str) + 1;\n      var ret = _malloc(size);\n      if (ret) stringToUTF8(str, ret, size);\n      return ret;\n    };\n\n\n  var getCFunc = (ident) => {\n      var func = Module['_' + ident]; // closure exported function\n      return func;\n    };\n  \n  var writeArrayToMemory = (array, buffer) => {\n      HEAP8.set(array, buffer);\n    };\n  \n  \n  \n  \n  \n  \n    /**\n     * @param {string|null=} returnType\n     * @param {Array=} argTypes\n     * @param {Arguments|Array=} args\n     * @param {Object=} opts\n     */\n  var ccall = (ident, returnType, argTypes, args, opts) => {\n      // For fast lookup of conversion functions\n      var toC = {\n        'string': (str) => {\n          var ret = 0;\n          if (str !== null && str !== undefined && str !== 0) { // null string\n            ret = stringToUTF8OnStack(str);\n          }\n          return ret;\n        },\n        'array': (arr) => {\n          var ret = stackAlloc(arr.length);\n          writeArrayToMemory(arr, ret);\n          return ret;\n        }\n      };\n  \n      function convertReturnValue(ret) {\n        if (returnType === 'string') {\n          return UTF8ToString(ret);\n        }\n        if (returnType === 'boolean') return Boolean(ret);\n        return ret;\n      }\n  \n      var func = getCFunc(ident);\n      var cArgs = [];\n      var stack = 0;\n      if (args) {\n        for (var i = 0; i < args.length; i++) {\n          var converter = toC[argTypes[i]];\n          if (converter) {\n            if (stack === 0) stack = stackSave();\n            cArgs[i] = converter(args[i]);\n          } else {\n            cArgs[i] = args[i];\n          }\n        }\n      }\n      var ret = func(...cArgs);\n      function onDone(ret) {\n        if (stack !== 0) stackRestore(stack);\n        return convertReturnValue(ret);\n      }\n  \n      ret = onDone(ret);\n      return ret;\n    };\n\n  \n  \n    /**\n     * @param {string=} returnType\n     * @param {Array=} argTypes\n     * @param {Object=} opts\n     */\n  var cwrap = (ident, returnType, argTypes, opts) => {\n      // When the function takes numbers and returns a number, we can just return\n      // the original function\n      var numericArgs = !argTypes || argTypes.every((type) => type === 'number' || type === 'boolean');\n      var numericRet = returnType !== 'string';\n      if (numericRet && numericArgs && !opts) {\n        return getCFunc(ident);\n      }\n      return (...args) => ccall(ident, returnType, argTypes, args, opts);\n    };\n\n  var FS_createPath = FS.createPath;\n\n\n\n  var FS_unlink = (path) => FS.unlink(path);\n\n  var FS_createLazyFile = FS.createLazyFile;\n\n  var FS_createDevice = FS.createDevice;\n\n  /** @suppress {duplicate } */\n  var setTempRet0 = (val) => __emscripten_tempret_set(val);\n  var _setTempRet0 = setTempRet0;\n  Module['_setTempRet0'] = _setTempRet0;\n\n  /** @suppress {duplicate } */\n  var getTempRet0 = (val) => __emscripten_tempret_get();\n  var _getTempRet0 = getTempRet0;\n  Module['_getTempRet0'] = _getTempRet0;\n\n\n      registerWasmPlugin();\n      ;\n\n  FS.createPreloadedFile = FS_createPreloadedFile;\n  FS.staticInit();\n  // Set module methods based on EXPORTED_RUNTIME_METHODS\n  Module[\"FS_createPath\"] = FS.createPath;\n  Module[\"FS_createDataFile\"] = FS.createDataFile;\n  Module[\"FS_createPreloadedFile\"] = FS.createPreloadedFile;\n  Module[\"FS_unlink\"] = FS.unlink;\n  Module[\"FS_createLazyFile\"] = FS.createLazyFile;\n  Module[\"FS_createDevice\"] = FS.createDevice;\n  ;\nif (ENVIRONMENT_IS_NODE) { NODEFS.staticInit(); };\n\n      Module[\"requestAnimationFrame\"] = MainLoop.requestAnimationFrame;\n      Module[\"pauseMainLoop\"] = MainLoop.pause;\n      Module[\"resumeMainLoop\"] = MainLoop.resume;\n      MainLoop.init();;\nvar wasmImports = {\n  /** @export */\n  __assert_fail: ___assert_fail,\n  /** @export */\n  __call_sighandler: ___call_sighandler,\n  /** @export */\n  __heap_base: ___heap_base,\n  /** @export */\n  __indirect_function_table: wasmTable,\n  /** @export */\n  __memory_base: ___memory_base,\n  /** @export */\n  __stack_pointer: ___stack_pointer,\n  /** @export */\n  __syscall__newselect: ___syscall__newselect,\n  /** @export */\n  __syscall_bind: ___syscall_bind,\n  /** @export */\n  __syscall_chdir: ___syscall_chdir,\n  /** @export */\n  __syscall_chmod: ___syscall_chmod,\n  /** @export */\n  __syscall_connect: ___syscall_connect,\n  /** @export */\n  __syscall_dup: ___syscall_dup,\n  /** @export */\n  __syscall_dup3: ___syscall_dup3,\n  /** @export */\n  __syscall_faccessat: ___syscall_faccessat,\n  /** @export */\n  __syscall_fadvise64: ___syscall_fadvise64,\n  /** @export */\n  __syscall_fallocate: ___syscall_fallocate,\n  /** @export */\n  __syscall_fcntl64: ___syscall_fcntl64,\n  /** @export */\n  __syscall_fdatasync: ___syscall_fdatasync,\n  /** @export */\n  __syscall_fstat64: ___syscall_fstat64,\n  /** @export */\n  __syscall_ftruncate64: ___syscall_ftruncate64,\n  /** @export */\n  __syscall_getcwd: ___syscall_getcwd,\n  /** @export */\n  __syscall_getdents64: ___syscall_getdents64,\n  /** @export */\n  __syscall_getsockname: ___syscall_getsockname,\n  /** @export */\n  __syscall_getsockopt: ___syscall_getsockopt,\n  /** @export */\n  __syscall_ioctl: ___syscall_ioctl,\n  /** @export */\n  __syscall_lstat64: ___syscall_lstat64,\n  /** @export */\n  __syscall_mkdirat: ___syscall_mkdirat,\n  /** @export */\n  __syscall_newfstatat: ___syscall_newfstatat,\n  /** @export */\n  __syscall_openat: ___syscall_openat,\n  /** @export */\n  __syscall_pipe: ___syscall_pipe,\n  /** @export */\n  __syscall_poll: ___syscall_poll,\n  /** @export */\n  __syscall_readlinkat: ___syscall_readlinkat,\n  /** @export */\n  __syscall_recvfrom: ___syscall_recvfrom,\n  /** @export */\n  __syscall_renameat: ___syscall_renameat,\n  /** @export */\n  __syscall_rmdir: ___syscall_rmdir,\n  /** @export */\n  __syscall_sendto: ___syscall_sendto,\n  /** @export */\n  __syscall_socket: ___syscall_socket,\n  /** @export */\n  __syscall_stat64: ___syscall_stat64,\n  /** @export */\n  __syscall_symlink: ___syscall_symlink,\n  /** @export */\n  __syscall_truncate64: ___syscall_truncate64,\n  /** @export */\n  __syscall_unlinkat: ___syscall_unlinkat,\n  /** @export */\n  __table_base: ___table_base,\n  /** @export */\n  _abort_js: __abort_js,\n  /** @export */\n  _dlopen_js: __dlopen_js,\n  /** @export */\n  _dlsym_js: __dlsym_js,\n  /** @export */\n  _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n  /** @export */\n  _emscripten_runtime_keepalive_clear: __emscripten_runtime_keepalive_clear,\n  /** @export */\n  _emscripten_system: __emscripten_system,\n  /** @export */\n  _emscripten_throw_longjmp: __emscripten_throw_longjmp,\n  /** @export */\n  _gmtime_js: __gmtime_js,\n  /** @export */\n  _localtime_js: __localtime_js,\n  /** @export */\n  _mmap_js: __mmap_js,\n  /** @export */\n  _munmap_js: __munmap_js,\n  /** @export */\n  _setitimer_js: __setitimer_js,\n  /** @export */\n  _tzset_js: __tzset_js,\n  /** @export */\n  emscripten_asm_const_int: _emscripten_asm_const_int,\n  /** @export */\n  emscripten_date_now: _emscripten_date_now,\n  /** @export */\n  emscripten_force_exit: _emscripten_force_exit,\n  /** @export */\n  emscripten_get_now: _emscripten_get_now,\n  /** @export */\n  emscripten_resize_heap: _emscripten_resize_heap,\n  /** @export */\n  emscripten_set_main_loop: _emscripten_set_main_loop,\n  /** @export */\n  environ_get: _environ_get,\n  /** @export */\n  environ_sizes_get: _environ_sizes_get,\n  /** @export */\n  exit: _exit,\n  /** @export */\n  fd_close: _fd_close,\n  /** @export */\n  fd_fdstat_get: _fd_fdstat_get,\n  /** @export */\n  fd_pread: _fd_pread,\n  /** @export */\n  fd_pwrite: _fd_pwrite,\n  /** @export */\n  fd_read: _fd_read,\n  /** @export */\n  fd_seek: _fd_seek,\n  /** @export */\n  fd_sync: _fd_sync,\n  /** @export */\n  fd_write: _fd_write,\n  /** @export */\n  getTempRet0: _getTempRet0,\n  /** @export */\n  getaddrinfo: _getaddrinfo,\n  /** @export */\n  getnameinfo: _getnameinfo,\n  /** @export */\n  invoke_di,\n  /** @export */\n  invoke_i,\n  /** @export */\n  invoke_id,\n  /** @export */\n  invoke_ii,\n  /** @export */\n  invoke_iii,\n  /** @export */\n  invoke_iiii,\n  /** @export */\n  invoke_iiiii,\n  /** @export */\n  invoke_iiiiii,\n  /** @export */\n  invoke_iiiiiii,\n  /** @export */\n  invoke_iiiiiiii,\n  /** @export */\n  invoke_iiiiiiiii,\n  /** @export */\n  invoke_iiiiiiiiii,\n  /** @export */\n  invoke_iiiiiiiiiiiiiiiii,\n  /** @export */\n  invoke_iiiiiji,\n  /** @export */\n  invoke_iiiij,\n  /** @export */\n  invoke_iiiijii,\n  /** @export */\n  invoke_iiij,\n  /** @export */\n  invoke_iiji,\n  /** @export */\n  invoke_ij,\n  /** @export */\n  invoke_ijiiiii,\n  /** @export */\n  invoke_ijiiiiii,\n  /** @export */\n  invoke_ji,\n  /** @export */\n  invoke_jii,\n  /** @export */\n  invoke_jiiii,\n  /** @export */\n  invoke_jiiiii,\n  /** @export */\n  invoke_jiiiiiiii,\n  /** @export */\n  invoke_v,\n  /** @export */\n  invoke_vi,\n  /** @export */\n  invoke_vid,\n  /** @export */\n  invoke_vii,\n  /** @export */\n  invoke_viii,\n  /** @export */\n  invoke_viiii,\n  /** @export */\n  invoke_viiiii,\n  /** @export */\n  invoke_viiiiii,\n  /** @export */\n  invoke_viiiiiii,\n  /** @export */\n  invoke_viiiiiiii,\n  /** @export */\n  invoke_viiiiiiiii,\n  /** @export */\n  invoke_viiiiiiiiiiii,\n  /** @export */\n  invoke_viiij,\n  /** @export */\n  invoke_viij,\n  /** @export */\n  invoke_viiji,\n  /** @export */\n  invoke_viijii,\n  /** @export */\n  invoke_viijiiii,\n  /** @export */\n  invoke_vij,\n  /** @export */\n  invoke_viji,\n  /** @export */\n  invoke_vijiji,\n  /** @export */\n  invoke_vj,\n  /** @export */\n  invoke_vji,\n  /** @export */\n  is_web_env,\n  /** @export */\n  memory: wasmMemory,\n  /** @export */\n  proc_exit: _proc_exit,\n  /** @export */\n  setTempRet0: _setTempRet0\n};\nvar wasmExports = createWasm();\nvar ___wasm_call_ctors = () => (___wasm_call_ctors = wasmExports['__wasm_call_ctors'])();\nvar ___wasm_apply_data_relocs = () => (___wasm_apply_data_relocs = wasmExports['__wasm_apply_data_relocs'])();\nvar _ScanKeywordLookup = Module['_ScanKeywordLookup'] = (a0, a1) => (_ScanKeywordLookup = Module['_ScanKeywordLookup'] = wasmExports['ScanKeywordLookup'])(a0, a1);\nvar _pg_snprintf = Module['_pg_snprintf'] = (a0, a1, a2, a3) => (_pg_snprintf = Module['_pg_snprintf'] = wasmExports['pg_snprintf'])(a0, a1, a2, a3);\nvar _strlen = Module['_strlen'] = (a0) => (_strlen = Module['_strlen'] = wasmExports['strlen'])(a0);\nvar _memset = Module['_memset'] = (a0, a1, a2) => (_memset = Module['_memset'] = wasmExports['memset'])(a0, a1, a2);\nvar _strchr = Module['_strchr'] = (a0, a1) => (_strchr = Module['_strchr'] = wasmExports['strchr'])(a0, a1);\nvar _PQserverVersion = Module['_PQserverVersion'] = (a0) => (_PQserverVersion = Module['_PQserverVersion'] = wasmExports['PQserverVersion'])(a0);\nvar _strstr = Module['_strstr'] = (a0, a1) => (_strstr = Module['_strstr'] = wasmExports['strstr'])(a0, a1);\nvar _pg_fprintf = Module['_pg_fprintf'] = (a0, a1, a2) => (_pg_fprintf = Module['_pg_fprintf'] = wasmExports['pg_fprintf'])(a0, a1, a2);\nvar _strspn = Module['_strspn'] = (a0, a1) => (_strspn = Module['_strspn'] = wasmExports['strspn'])(a0, a1);\nvar _malloc = Module['_malloc'] = (a0) => (_malloc = Module['_malloc'] = wasmExports['malloc'])(a0);\nvar _pg_strcasecmp = Module['_pg_strcasecmp'] = (a0, a1) => (_pg_strcasecmp = Module['_pg_strcasecmp'] = wasmExports['pg_strcasecmp'])(a0, a1);\nvar _strcmp = Module['_strcmp'] = (a0, a1) => (_strcmp = Module['_strcmp'] = wasmExports['strcmp'])(a0, a1);\nvar _free = Module['_free'] = (a0) => (_free = Module['_free'] = wasmExports['free'])(a0);\nvar _pg_tolower = Module['_pg_tolower'] = (a0) => (_pg_tolower = Module['_pg_tolower'] = wasmExports['pg_tolower'])(a0);\nvar _memchr = Module['_memchr'] = (a0, a1, a2) => (_memchr = Module['_memchr'] = wasmExports['memchr'])(a0, a1, a2);\nvar _getenv = Module['_getenv'] = (a0) => (_getenv = Module['_getenv'] = wasmExports['getenv'])(a0);\nvar _fileno = Module['_fileno'] = (a0) => (_fileno = Module['_fileno'] = wasmExports['fileno'])(a0);\nvar _isatty = Module['_isatty'] = (a0) => (_isatty = Module['_isatty'] = wasmExports['isatty'])(a0);\nvar _strdup = Module['_strdup'] = (a0) => (_strdup = Module['_strdup'] = wasmExports['strdup'])(a0);\nvar ___errno_location = Module['___errno_location'] = () => (___errno_location = Module['___errno_location'] = wasmExports['__errno_location'])();\nvar _fflush = Module['_fflush'] = (a0) => (_fflush = Module['_fflush'] = wasmExports['fflush'])(a0);\nvar _pg_vsnprintf = Module['_pg_vsnprintf'] = (a0, a1, a2, a3) => (_pg_vsnprintf = Module['_pg_vsnprintf'] = wasmExports['pg_vsnprintf'])(a0, a1, a2, a3);\nvar _pg_malloc_extended = Module['_pg_malloc_extended'] = (a0, a1) => (_pg_malloc_extended = Module['_pg_malloc_extended'] = wasmExports['pg_malloc_extended'])(a0, a1);\nvar _find_base_rel = Module['_find_base_rel'] = (a0, a1) => (_find_base_rel = Module['_find_base_rel'] = wasmExports['find_base_rel'])(a0, a1);\nvar _errstart_cold = Module['_errstart_cold'] = (a0, a1) => (_errstart_cold = Module['_errstart_cold'] = wasmExports['errstart_cold'])(a0, a1);\nvar _errmsg_internal = Module['_errmsg_internal'] = (a0, a1) => (_errmsg_internal = Module['_errmsg_internal'] = wasmExports['errmsg_internal'])(a0, a1);\nvar _errfinish = Module['_errfinish'] = (a0, a1, a2) => (_errfinish = Module['_errfinish'] = wasmExports['errfinish'])(a0, a1, a2);\nvar _puts = Module['_puts'] = (a0) => (_puts = Module['_puts'] = wasmExports['puts'])(a0);\nvar _lappend = Module['_lappend'] = (a0, a1) => (_lappend = Module['_lappend'] = wasmExports['lappend'])(a0, a1);\nvar _list_concat = Module['_list_concat'] = (a0, a1) => (_list_concat = Module['_list_concat'] = wasmExports['list_concat'])(a0, a1);\nvar _bms_equal = Module['_bms_equal'] = (a0, a1) => (_bms_equal = Module['_bms_equal'] = wasmExports['bms_equal'])(a0, a1);\nvar _add_path = Module['_add_path'] = (a0, a1) => (_add_path = Module['_add_path'] = wasmExports['add_path'])(a0, a1);\nvar _pathkeys_contained_in = Module['_pathkeys_contained_in'] = (a0, a1) => (_pathkeys_contained_in = Module['_pathkeys_contained_in'] = wasmExports['pathkeys_contained_in'])(a0, a1);\nvar _bms_is_subset = Module['_bms_is_subset'] = (a0, a1) => (_bms_is_subset = Module['_bms_is_subset'] = wasmExports['bms_is_subset'])(a0, a1);\nvar _list_make1_impl = Module['_list_make1_impl'] = (a0, a1) => (_list_make1_impl = Module['_list_make1_impl'] = wasmExports['list_make1_impl'])(a0, a1);\nvar _create_sort_path = Module['_create_sort_path'] = (a0, a1, a2, a3, a4) => (_create_sort_path = Module['_create_sort_path'] = wasmExports['create_sort_path'])(a0, a1, a2, a3, a4);\nvar _palloc0 = Module['_palloc0'] = (a0) => (_palloc0 = Module['_palloc0'] = wasmExports['palloc0'])(a0);\nvar _check_stack_depth = Module['_check_stack_depth'] = () => (_check_stack_depth = Module['_check_stack_depth'] = wasmExports['check_stack_depth'])();\nvar _list_free = Module['_list_free'] = (a0) => (_list_free = Module['_list_free'] = wasmExports['list_free'])(a0);\nvar _bms_overlap = Module['_bms_overlap'] = (a0, a1) => (_bms_overlap = Module['_bms_overlap'] = wasmExports['bms_overlap'])(a0, a1);\nvar _exprType = Module['_exprType'] = (a0) => (_exprType = Module['_exprType'] = wasmExports['exprType'])(a0);\nvar _exprTypmod = Module['_exprTypmod'] = (a0) => (_exprTypmod = Module['_exprTypmod'] = wasmExports['exprTypmod'])(a0);\nvar _set_baserel_size_estimates = Module['_set_baserel_size_estimates'] = (a0, a1) => (_set_baserel_size_estimates = Module['_set_baserel_size_estimates'] = wasmExports['set_baserel_size_estimates'])(a0, a1);\nvar _copyObjectImpl = Module['_copyObjectImpl'] = (a0) => (_copyObjectImpl = Module['_copyObjectImpl'] = wasmExports['copyObjectImpl'])(a0);\nvar _pull_var_clause = Module['_pull_var_clause'] = (a0, a1) => (_pull_var_clause = Module['_pull_var_clause'] = wasmExports['pull_var_clause'])(a0, a1);\nvar _pfree = Module['_pfree'] = (a0) => (_pfree = Module['_pfree'] = wasmExports['pfree'])(a0);\nvar _pull_varattnos = Module['_pull_varattnos'] = (a0, a1, a2) => (_pull_varattnos = Module['_pull_varattnos'] = wasmExports['pull_varattnos'])(a0, a1, a2);\nvar _bms_is_member = Module['_bms_is_member'] = (a0, a1) => (_bms_is_member = Module['_bms_is_member'] = wasmExports['bms_is_member'])(a0, a1);\nvar _clamp_row_est = Module['_clamp_row_est'] = (a0) => (_clamp_row_est = Module['_clamp_row_est'] = wasmExports['clamp_row_est'])(a0);\nvar _get_opfamily_member = Module['_get_opfamily_member'] = (a0, a1, a2, a3) => (_get_opfamily_member = Module['_get_opfamily_member'] = wasmExports['get_opfamily_member'])(a0, a1, a2, a3);\nvar _bms_add_member = Module['_bms_add_member'] = (a0, a1) => (_bms_add_member = Module['_bms_add_member'] = wasmExports['bms_add_member'])(a0, a1);\nvar _bms_membership = Module['_bms_membership'] = (a0) => (_bms_membership = Module['_bms_membership'] = wasmExports['bms_membership'])(a0);\nvar _join_clause_is_movable_to = Module['_join_clause_is_movable_to'] = (a0, a1) => (_join_clause_is_movable_to = Module['_join_clause_is_movable_to'] = wasmExports['join_clause_is_movable_to'])(a0, a1);\nvar _generate_implied_equalities_for_column = Module['_generate_implied_equalities_for_column'] = (a0, a1, a2, a3, a4) => (_generate_implied_equalities_for_column = Module['_generate_implied_equalities_for_column'] = wasmExports['generate_implied_equalities_for_column'])(a0, a1, a2, a3, a4);\nvar _palloc = Module['_palloc'] = (a0) => (_palloc = Module['_palloc'] = wasmExports['palloc'])(a0);\nvar _pg_qsort = Module['_pg_qsort'] = (a0, a1, a2, a3) => (_pg_qsort = Module['_pg_qsort'] = wasmExports['pg_qsort'])(a0, a1, a2, a3);\nvar _equal = Module['_equal'] = (a0, a1) => (_equal = Module['_equal'] = wasmExports['equal'])(a0, a1);\nvar _bms_add_members = Module['_bms_add_members'] = (a0, a1) => (_bms_add_members = Module['_bms_add_members'] = wasmExports['bms_add_members'])(a0, a1);\nvar _bms_next_member = Module['_bms_next_member'] = (a0, a1) => (_bms_next_member = Module['_bms_next_member'] = wasmExports['bms_next_member'])(a0, a1);\nvar _estimate_num_groups = Module['_estimate_num_groups'] = (a0, a1, a2, a3, a4) => (_estimate_num_groups = Module['_estimate_num_groups'] = wasmExports['estimate_num_groups'])(a0, a1, a2, a3, a4);\nvar _list_copy = Module['_list_copy'] = (a0) => (_list_copy = Module['_list_copy'] = wasmExports['list_copy'])(a0);\nvar _bms_union = Module['_bms_union'] = (a0, a1) => (_bms_union = Module['_bms_union'] = wasmExports['bms_union'])(a0, a1);\nvar _get_plan_rowmark = Module['_get_plan_rowmark'] = (a0, a1) => (_get_plan_rowmark = Module['_get_plan_rowmark'] = wasmExports['get_plan_rowmark'])(a0, a1);\nvar _contain_mutable_functions = Module['_contain_mutable_functions'] = (a0) => (_contain_mutable_functions = Module['_contain_mutable_functions'] = wasmExports['contain_mutable_functions'])(a0);\nvar _list_member_oid = Module['_list_member_oid'] = (a0, a1) => (_list_member_oid = Module['_list_member_oid'] = wasmExports['list_member_oid'])(a0, a1);\nvar _MemoryContextAllocZeroAligned = Module['_MemoryContextAllocZeroAligned'] = (a0, a1) => (_MemoryContextAllocZeroAligned = Module['_MemoryContextAllocZeroAligned'] = wasmExports['MemoryContextAllocZeroAligned'])(a0, a1);\nvar _make_restrictinfo = Module['_make_restrictinfo'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) => (_make_restrictinfo = Module['_make_restrictinfo'] = wasmExports['make_restrictinfo'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\nvar _list_member = Module['_list_member'] = (a0, a1) => (_list_member = Module['_list_member'] = wasmExports['list_member'])(a0, a1);\nvar _bms_del_member = Module['_bms_del_member'] = (a0, a1) => (_bms_del_member = Module['_bms_del_member'] = wasmExports['bms_del_member'])(a0, a1);\nvar _list_make2_impl = Module['_list_make2_impl'] = (a0, a1, a2) => (_list_make2_impl = Module['_list_make2_impl'] = wasmExports['list_make2_impl'])(a0, a1, a2);\nvar _lappend_int = Module['_lappend_int'] = (a0, a1) => (_lappend_int = Module['_lappend_int'] = wasmExports['lappend_int'])(a0, a1);\nvar _bms_free = Module['_bms_free'] = (a0) => (_bms_free = Module['_bms_free'] = wasmExports['bms_free'])(a0);\nvar _lappend_oid = Module['_lappend_oid'] = (a0, a1) => (_lappend_oid = Module['_lappend_oid'] = wasmExports['lappend_oid'])(a0, a1);\nvar _update_mergeclause_eclasses = Module['_update_mergeclause_eclasses'] = (a0, a1) => (_update_mergeclause_eclasses = Module['_update_mergeclause_eclasses'] = wasmExports['update_mergeclause_eclasses'])(a0, a1);\nvar _bms_nonempty_difference = Module['_bms_nonempty_difference'] = (a0, a1) => (_bms_nonempty_difference = Module['_bms_nonempty_difference'] = wasmExports['bms_nonempty_difference'])(a0, a1);\nvar _bms_num_members = Module['_bms_num_members'] = (a0) => (_bms_num_members = Module['_bms_num_members'] = wasmExports['bms_num_members'])(a0);\nvar _lookup_type_cache = Module['_lookup_type_cache'] = (a0, a1) => (_lookup_type_cache = Module['_lookup_type_cache'] = wasmExports['lookup_type_cache'])(a0, a1);\nvar _errcode = Module['_errcode'] = (a0) => (_errcode = Module['_errcode'] = wasmExports['errcode'])(a0);\nvar _errmsg = Module['_errmsg'] = (a0, a1) => (_errmsg = Module['_errmsg'] = wasmExports['errmsg'])(a0, a1);\nvar _find_join_rel = Module['_find_join_rel'] = (a0, a1) => (_find_join_rel = Module['_find_join_rel'] = wasmExports['find_join_rel'])(a0, a1);\nvar _clauselist_selectivity = Module['_clauselist_selectivity'] = (a0, a1, a2, a3, a4) => (_clauselist_selectivity = Module['_clauselist_selectivity'] = wasmExports['clauselist_selectivity'])(a0, a1, a2, a3, a4);\nvar _estimate_expression_value = Module['_estimate_expression_value'] = (a0, a1) => (_estimate_expression_value = Module['_estimate_expression_value'] = wasmExports['estimate_expression_value'])(a0, a1);\nvar _get_tablespace_page_costs = Module['_get_tablespace_page_costs'] = (a0, a1, a2) => (_get_tablespace_page_costs = Module['_get_tablespace_page_costs'] = wasmExports['get_tablespace_page_costs'])(a0, a1, a2);\nvar _log = Module['_log'] = (a0) => (_log = Module['_log'] = wasmExports['log'])(a0);\nvar _cost_qual_eval = Module['_cost_qual_eval'] = (a0, a1, a2) => (_cost_qual_eval = Module['_cost_qual_eval'] = wasmExports['cost_qual_eval'])(a0, a1, a2);\nvar _cost_sort = Module['_cost_sort'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => (_cost_sort = Module['_cost_sort'] = wasmExports['cost_sort'])(a0, a1, a2, a3, a4, a5, a6, a7, a8);\nvar _getTypeInputInfo = Module['_getTypeInputInfo'] = (a0, a1, a2) => (_getTypeInputInfo = Module['_getTypeInputInfo'] = wasmExports['getTypeInputInfo'])(a0, a1, a2);\nvar _getTypeOutputInfo = Module['_getTypeOutputInfo'] = (a0, a1, a2) => (_getTypeOutputInfo = Module['_getTypeOutputInfo'] = wasmExports['getTypeOutputInfo'])(a0, a1, a2);\nvar _list_member_ptr = Module['_list_member_ptr'] = (a0, a1) => (_list_member_ptr = Module['_list_member_ptr'] = wasmExports['list_member_ptr'])(a0, a1);\nvar _list_delete_cell = Module['_list_delete_cell'] = (a0, a1) => (_list_delete_cell = Module['_list_delete_cell'] = wasmExports['list_delete_cell'])(a0, a1);\nvar _bms_make_singleton = Module['_bms_make_singleton'] = (a0) => (_bms_make_singleton = Module['_bms_make_singleton'] = wasmExports['bms_make_singleton'])(a0);\nvar _eclass_useful_for_merging = Module['_eclass_useful_for_merging'] = (a0, a1, a2) => (_eclass_useful_for_merging = Module['_eclass_useful_for_merging'] = wasmExports['eclass_useful_for_merging'])(a0, a1, a2);\nvar _make_canonical_pathkey = Module['_make_canonical_pathkey'] = (a0, a1, a2, a3, a4) => (_make_canonical_pathkey = Module['_make_canonical_pathkey'] = wasmExports['make_canonical_pathkey'])(a0, a1, a2, a3, a4);\nvar _get_sortgroupref_tle = Module['_get_sortgroupref_tle'] = (a0, a1) => (_get_sortgroupref_tle = Module['_get_sortgroupref_tle'] = wasmExports['get_sortgroupref_tle'])(a0, a1);\nvar _errdetail = Module['_errdetail'] = (a0, a1) => (_errdetail = Module['_errdetail'] = wasmExports['errdetail'])(a0, a1);\nvar _create_projection_path = Module['_create_projection_path'] = (a0, a1, a2, a3) => (_create_projection_path = Module['_create_projection_path'] = wasmExports['create_projection_path'])(a0, a1, a2, a3);\nvar _pstrdup = Module['_pstrdup'] = (a0) => (_pstrdup = Module['_pstrdup'] = wasmExports['pstrdup'])(a0);\nvar _makeTargetEntry = Module['_makeTargetEntry'] = (a0, a1, a2, a3) => (_makeTargetEntry = Module['_makeTargetEntry'] = wasmExports['makeTargetEntry'])(a0, a1, a2, a3);\nvar _makeVar = Module['_makeVar'] = (a0, a1, a2, a3, a4, a5) => (_makeVar = Module['_makeVar'] = wasmExports['makeVar'])(a0, a1, a2, a3, a4, a5);\nvar _grouping_is_sortable = Module['_grouping_is_sortable'] = (a0) => (_grouping_is_sortable = Module['_grouping_is_sortable'] = wasmExports['grouping_is_sortable'])(a0);\nvar _ProcessInterrupts = Module['_ProcessInterrupts'] = () => (_ProcessInterrupts = Module['_ProcessInterrupts'] = wasmExports['ProcessInterrupts'])();\nvar _table_open = Module['_table_open'] = (a0, a1) => (_table_open = Module['_table_open'] = wasmExports['table_open'])(a0, a1);\nvar _tlist_member = Module['_tlist_member'] = (a0, a1) => (_tlist_member = Module['_tlist_member'] = wasmExports['tlist_member'])(a0, a1);\nvar _table_close = Module['_table_close'] = (a0, a1) => (_table_close = Module['_table_close'] = wasmExports['table_close'])(a0, a1);\nvar _SearchSysCache1 = Module['_SearchSysCache1'] = (a0, a1) => (_SearchSysCache1 = Module['_SearchSysCache1'] = wasmExports['SearchSysCache1'])(a0, a1);\nvar _get_typlenbyval = Module['_get_typlenbyval'] = (a0, a1, a2) => (_get_typlenbyval = Module['_get_typlenbyval'] = wasmExports['get_typlenbyval'])(a0, a1, a2);\nvar _SysCacheGetAttr = Module['_SysCacheGetAttr'] = (a0, a1, a2, a3) => (_SysCacheGetAttr = Module['_SysCacheGetAttr'] = wasmExports['SysCacheGetAttr'])(a0, a1, a2, a3);\nvar _text_to_cstring = Module['_text_to_cstring'] = (a0) => (_text_to_cstring = Module['_text_to_cstring'] = wasmExports['text_to_cstring'])(a0);\nvar _ReleaseSysCache = Module['_ReleaseSysCache'] = (a0) => (_ReleaseSysCache = Module['_ReleaseSysCache'] = wasmExports['ReleaseSysCache'])(a0);\nvar _datumIsEqual = Module['_datumIsEqual'] = (a0, a1, a2, a3) => (_datumIsEqual = Module['_datumIsEqual'] = wasmExports['datumIsEqual'])(a0, a1, a2, a3);\nvar _get_agg_clause_costs = Module['_get_agg_clause_costs'] = (a0, a1, a2) => (_get_agg_clause_costs = Module['_get_agg_clause_costs'] = wasmExports['get_agg_clause_costs'])(a0, a1, a2);\nvar _make_orclause = Module['_make_orclause'] = (a0) => (_make_orclause = Module['_make_orclause'] = wasmExports['make_orclause'])(a0);\nvar _SearchSysCacheAttName = Module['_SearchSysCacheAttName'] = (a0, a1) => (_SearchSysCacheAttName = Module['_SearchSysCacheAttName'] = wasmExports['SearchSysCacheAttName'])(a0, a1);\nvar _get_rel_name = Module['_get_rel_name'] = (a0) => (_get_rel_name = Module['_get_rel_name'] = wasmExports['get_rel_name'])(a0);\nvar _memcpy = Module['_memcpy'] = (a0, a1, a2) => (_memcpy = Module['_memcpy'] = wasmExports['memcpy'])(a0, a1, a2);\nvar _get_translated_update_targetlist = Module['_get_translated_update_targetlist'] = (a0, a1, a2, a3) => (_get_translated_update_targetlist = Module['_get_translated_update_targetlist'] = wasmExports['get_translated_update_targetlist'])(a0, a1, a2, a3);\nvar _add_row_identity_var = Module['_add_row_identity_var'] = (a0, a1, a2, a3) => (_add_row_identity_var = Module['_add_row_identity_var'] = wasmExports['add_row_identity_var'])(a0, a1, a2, a3);\nvar _get_baserel_parampathinfo = Module['_get_baserel_parampathinfo'] = (a0, a1, a2) => (_get_baserel_parampathinfo = Module['_get_baserel_parampathinfo'] = wasmExports['get_baserel_parampathinfo'])(a0, a1, a2);\nvar _list_sort = Module['_list_sort'] = (a0, a1) => (_list_sort = Module['_list_sort'] = wasmExports['list_sort'])(a0, a1);\nvar _create_foreignscan_path = Module['_create_foreignscan_path'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) => (_create_foreignscan_path = Module['_create_foreignscan_path'] = wasmExports['create_foreignscan_path'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\nvar _create_foreign_join_path = Module['_create_foreign_join_path'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) => (_create_foreign_join_path = Module['_create_foreign_join_path'] = wasmExports['create_foreign_join_path'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\nvar _create_foreign_upper_path = Module['_create_foreign_upper_path'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => (_create_foreign_upper_path = Module['_create_foreign_upper_path'] = wasmExports['create_foreign_upper_path'])(a0, a1, a2, a3, a4, a5, a6, a7, a8);\nvar _adjust_limit_rows_costs = Module['_adjust_limit_rows_costs'] = (a0, a1, a2, a3, a4) => (_adjust_limit_rows_costs = Module['_adjust_limit_rows_costs'] = wasmExports['adjust_limit_rows_costs'])(a0, a1, a2, a3, a4);\nvar _copy_pathtarget = Module['_copy_pathtarget'] = (a0) => (_copy_pathtarget = Module['_copy_pathtarget'] = wasmExports['copy_pathtarget'])(a0);\nvar _makeString = Module['_makeString'] = (a0) => (_makeString = Module['_makeString'] = wasmExports['makeString'])(a0);\nvar _get_rel_all_updated_cols = Module['_get_rel_all_updated_cols'] = (a0, a1) => (_get_rel_all_updated_cols = Module['_get_rel_all_updated_cols'] = wasmExports['get_rel_all_updated_cols'])(a0, a1);\nvar _pg_detoast_datum = Module['_pg_detoast_datum'] = (a0) => (_pg_detoast_datum = Module['_pg_detoast_datum'] = wasmExports['pg_detoast_datum'])(a0);\nvar _ArrayGetNItems = Module['_ArrayGetNItems'] = (a0, a1) => (_ArrayGetNItems = Module['_ArrayGetNItems'] = wasmExports['ArrayGetNItems'])(a0, a1);\nvar _get_typlenbyvalalign = Module['_get_typlenbyvalalign'] = (a0, a1, a2, a3) => (_get_typlenbyvalalign = Module['_get_typlenbyvalalign'] = wasmExports['get_typlenbyvalalign'])(a0, a1, a2, a3);\nvar _deconstruct_array = Module['_deconstruct_array'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_deconstruct_array = Module['_deconstruct_array'] = wasmExports['deconstruct_array'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _CreateExecutorState = Module['_CreateExecutorState'] = () => (_CreateExecutorState = Module['_CreateExecutorState'] = wasmExports['CreateExecutorState'])();\nvar _ExecInitExpr = Module['_ExecInitExpr'] = (a0, a1) => (_ExecInitExpr = Module['_ExecInitExpr'] = wasmExports['ExecInitExpr'])(a0, a1);\nvar _MakePerTupleExprContext = Module['_MakePerTupleExprContext'] = (a0) => (_MakePerTupleExprContext = Module['_MakePerTupleExprContext'] = wasmExports['MakePerTupleExprContext'])(a0);\nvar _FreeExecutorState = Module['_FreeExecutorState'] = (a0) => (_FreeExecutorState = Module['_FreeExecutorState'] = wasmExports['FreeExecutorState'])(a0);\nvar _errstart = Module['_errstart'] = (a0, a1) => (_errstart = Module['_errstart'] = wasmExports['errstart'])(a0, a1);\nvar _hash_create = Module['_hash_create'] = (a0, a1, a2, a3) => (_hash_create = Module['_hash_create'] = wasmExports['hash_create'])(a0, a1, a2, a3);\nvar _CacheRegisterSyscacheCallback = Module['_CacheRegisterSyscacheCallback'] = (a0, a1, a2) => (_CacheRegisterSyscacheCallback = Module['_CacheRegisterSyscacheCallback'] = wasmExports['CacheRegisterSyscacheCallback'])(a0, a1, a2);\nvar _hash_search = Module['_hash_search'] = (a0, a1, a2, a3) => (_hash_search = Module['_hash_search'] = wasmExports['hash_search'])(a0, a1, a2, a3);\nvar _list_free_deep = Module['_list_free_deep'] = (a0) => (_list_free_deep = Module['_list_free_deep'] = wasmExports['list_free_deep'])(a0);\nvar _hash_seq_init = Module['_hash_seq_init'] = (a0, a1) => (_hash_seq_init = Module['_hash_seq_init'] = wasmExports['hash_seq_init'])(a0, a1);\nvar _hash_seq_search = Module['_hash_seq_search'] = (a0) => (_hash_seq_search = Module['_hash_seq_search'] = wasmExports['hash_seq_search'])(a0);\nvar _add_to_flat_tlist = Module['_add_to_flat_tlist'] = (a0, a1) => (_add_to_flat_tlist = Module['_add_to_flat_tlist'] = wasmExports['add_to_flat_tlist'])(a0, a1);\nvar _get_sortgrouplist_exprs = Module['_get_sortgrouplist_exprs'] = (a0, a1) => (_get_sortgrouplist_exprs = Module['_get_sortgrouplist_exprs'] = wasmExports['get_sortgrouplist_exprs'])(a0, a1);\nvar _get_sortgroupref_clause_noerr = Module['_get_sortgroupref_clause_noerr'] = (a0, a1) => (_get_sortgroupref_clause_noerr = Module['_get_sortgroupref_clause_noerr'] = wasmExports['get_sortgroupref_clause_noerr'])(a0, a1);\nvar _repalloc = Module['_repalloc'] = (a0, a1) => (_repalloc = Module['_repalloc'] = wasmExports['repalloc'])(a0, a1);\nvar _add_new_columns_to_pathtarget = Module['_add_new_columns_to_pathtarget'] = (a0, a1) => (_add_new_columns_to_pathtarget = Module['_add_new_columns_to_pathtarget'] = wasmExports['add_new_columns_to_pathtarget'])(a0, a1);\nvar _GetUserId = Module['_GetUserId'] = () => (_GetUserId = Module['_GetUserId'] = wasmExports['GetUserId'])();\nvar _list_append_unique_ptr = Module['_list_append_unique_ptr'] = (a0, a1) => (_list_append_unique_ptr = Module['_list_append_unique_ptr'] = wasmExports['list_append_unique_ptr'])(a0, a1);\nvar _extract_actual_clauses = Module['_extract_actual_clauses'] = (a0, a1) => (_extract_actual_clauses = Module['_extract_actual_clauses'] = wasmExports['extract_actual_clauses'])(a0, a1);\nvar _errdetail_relkind_not_supported = Module['_errdetail_relkind_not_supported'] = (a0) => (_errdetail_relkind_not_supported = Module['_errdetail_relkind_not_supported'] = wasmExports['errdetail_relkind_not_supported'])(a0);\nvar _RecoveryInProgress = Module['_RecoveryInProgress'] = () => (_RecoveryInProgress = Module['_RecoveryInProgress'] = wasmExports['RecoveryInProgress'])();\nvar _RelationGetIndexList = Module['_RelationGetIndexList'] = (a0) => (_RelationGetIndexList = Module['_RelationGetIndexList'] = wasmExports['RelationGetIndexList'])(a0);\nvar _index_open = Module['_index_open'] = (a0, a1) => (_index_open = Module['_index_open'] = wasmExports['index_open'])(a0, a1);\nvar _index_close = Module['_index_close'] = (a0, a1) => (_index_close = Module['_index_close'] = wasmExports['index_close'])(a0, a1);\nvar _TransactionIdPrecedes = Module['_TransactionIdPrecedes'] = (a0, a1) => (_TransactionIdPrecedes = Module['_TransactionIdPrecedes'] = wasmExports['TransactionIdPrecedes'])(a0, a1);\nvar _RelationGetNumberOfBlocksInFork = Module['_RelationGetNumberOfBlocksInFork'] = (a0, a1) => (_RelationGetNumberOfBlocksInFork = Module['_RelationGetNumberOfBlocksInFork'] = wasmExports['RelationGetNumberOfBlocksInFork'])(a0, a1);\nvar _stringToNode = Module['_stringToNode'] = (a0) => (_stringToNode = Module['_stringToNode'] = wasmExports['stringToNode'])(a0);\nvar _memcmp = Module['_memcmp'] = (a0, a1, a2) => (_memcmp = Module['_memcmp'] = wasmExports['memcmp'])(a0, a1, a2);\nvar _fmgr_info_copy = Module['_fmgr_info_copy'] = (a0, a1, a2) => (_fmgr_info_copy = Module['_fmgr_info_copy'] = wasmExports['fmgr_info_copy'])(a0, a1, a2);\nvar _SearchSysCache2 = Module['_SearchSysCache2'] = (a0, a1, a2) => (_SearchSysCache2 = Module['_SearchSysCache2'] = wasmExports['SearchSysCache2'])(a0, a1, a2);\nvar _list_member_int = Module['_list_member_int'] = (a0, a1) => (_list_member_int = Module['_list_member_int'] = wasmExports['list_member_int'])(a0, a1);\nvar _datumCopy = Module['_datumCopy'] = (a0, a1, a2) => (_datumCopy = Module['_datumCopy'] = wasmExports['datumCopy'])(a0, a1, a2);\nvar _list_make3_impl = Module['_list_make3_impl'] = (a0, a1, a2, a3) => (_list_make3_impl = Module['_list_make3_impl'] = wasmExports['list_make3_impl'])(a0, a1, a2, a3);\nvar _SysCacheGetAttrNotNull = Module['_SysCacheGetAttrNotNull'] = (a0, a1, a2) => (_SysCacheGetAttrNotNull = Module['_SysCacheGetAttrNotNull'] = wasmExports['SysCacheGetAttrNotNull'])(a0, a1, a2);\nvar _pg_detoast_datum_copy = Module['_pg_detoast_datum_copy'] = (a0) => (_pg_detoast_datum_copy = Module['_pg_detoast_datum_copy'] = wasmExports['pg_detoast_datum_copy'])(a0);\nvar _object_aclcheck = Module['_object_aclcheck'] = (a0, a1, a2, a3) => (_object_aclcheck = Module['_object_aclcheck'] = wasmExports['object_aclcheck'])(a0, a1, a2, a3);\nvar _AllocSetContextCreateInternal = Module['_AllocSetContextCreateInternal'] = (a0, a1, a2, a3, a4) => (_AllocSetContextCreateInternal = Module['_AllocSetContextCreateInternal'] = wasmExports['AllocSetContextCreateInternal'])(a0, a1, a2, a3, a4);\nvar _MemoryContextDelete = Module['_MemoryContextDelete'] = (a0) => (_MemoryContextDelete = Module['_MemoryContextDelete'] = wasmExports['MemoryContextDelete'])(a0);\nvar _geterrposition = Module['_geterrposition'] = () => (_geterrposition = Module['_geterrposition'] = wasmExports['geterrposition'])();\nvar _errposition = Module['_errposition'] = (a0) => (_errposition = Module['_errposition'] = wasmExports['errposition'])(a0);\nvar _internalerrposition = Module['_internalerrposition'] = (a0) => (_internalerrposition = Module['_internalerrposition'] = wasmExports['internalerrposition'])(a0);\nvar _internalerrquery = Module['_internalerrquery'] = (a0) => (_internalerrquery = Module['_internalerrquery'] = wasmExports['internalerrquery'])(a0);\nvar _set_errcontext_domain = Module['_set_errcontext_domain'] = (a0) => (_set_errcontext_domain = Module['_set_errcontext_domain'] = wasmExports['set_errcontext_domain'])(a0);\nvar _errcontext_msg = Module['_errcontext_msg'] = (a0, a1) => (_errcontext_msg = Module['_errcontext_msg'] = wasmExports['errcontext_msg'])(a0, a1);\nvar _list_delete_last = Module['_list_delete_last'] = (a0) => (_list_delete_last = Module['_list_delete_last'] = wasmExports['list_delete_last'])(a0);\nvar _lookup_rowtype_tupdesc_domain = Module['_lookup_rowtype_tupdesc_domain'] = (a0, a1, a2) => (_lookup_rowtype_tupdesc_domain = Module['_lookup_rowtype_tupdesc_domain'] = wasmExports['lookup_rowtype_tupdesc_domain'])(a0, a1, a2);\nvar _DecrTupleDescRefCount = Module['_DecrTupleDescRefCount'] = (a0) => (_DecrTupleDescRefCount = Module['_DecrTupleDescRefCount'] = wasmExports['DecrTupleDescRefCount'])(a0);\nvar _type_is_rowtype = Module['_type_is_rowtype'] = (a0) => (_type_is_rowtype = Module['_type_is_rowtype'] = wasmExports['type_is_rowtype'])(a0);\nvar _Int64GetDatum = Module['_Int64GetDatum'] = (a0) => (_Int64GetDatum = Module['_Int64GetDatum'] = wasmExports['Int64GetDatum'])(a0);\nvar _GetSysCacheHashValue = Module['_GetSysCacheHashValue'] = (a0, a1, a2, a3, a4) => (_GetSysCacheHashValue = Module['_GetSysCacheHashValue'] = wasmExports['GetSysCacheHashValue'])(a0, a1, a2, a3, a4);\nvar _addRTEPermissionInfo = Module['_addRTEPermissionInfo'] = (a0, a1) => (_addRTEPermissionInfo = Module['_addRTEPermissionInfo'] = wasmExports['addRTEPermissionInfo'])(a0, a1);\nvar _change_plan_targetlist = Module['_change_plan_targetlist'] = (a0, a1, a2) => (_change_plan_targetlist = Module['_change_plan_targetlist'] = wasmExports['change_plan_targetlist'])(a0, a1, a2);\nvar _make_foreignscan = Module['_make_foreignscan'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_make_foreignscan = Module['_make_foreignscan'] = wasmExports['make_foreignscan'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _standard_planner = Module['_standard_planner'] = (a0, a1, a2, a3) => (_standard_planner = Module['_standard_planner'] = wasmExports['standard_planner'])(a0, a1, a2, a3);\nvar _plan_create_index_workers = Module['_plan_create_index_workers'] = (a0, a1) => (_plan_create_index_workers = Module['_plan_create_index_workers'] = wasmExports['plan_create_index_workers'])(a0, a1);\nvar _psprintf = Module['_psprintf'] = (a0, a1) => (_psprintf = Module['_psprintf'] = wasmExports['psprintf'])(a0, a1);\nvar _format_type_be = Module['_format_type_be'] = (a0) => (_format_type_be = Module['_format_type_be'] = wasmExports['format_type_be'])(a0);\nvar _pg_sprintf = Module['_pg_sprintf'] = (a0, a1, a2) => (_pg_sprintf = Module['_pg_sprintf'] = wasmExports['pg_sprintf'])(a0, a1, a2);\nvar _pg_prng_double = Module['_pg_prng_double'] = (a0) => (_pg_prng_double = Module['_pg_prng_double'] = wasmExports['pg_prng_double'])(a0);\nvar _pg_prng_uint64_range = Module['_pg_prng_uint64_range'] = (a0, a1, a2) => (_pg_prng_uint64_range = Module['_pg_prng_uint64_range'] = wasmExports['pg_prng_uint64_range'])(a0, a1, a2);\nvar _qsort_arg = Module['_qsort_arg'] = (a0, a1, a2, a3, a4) => (_qsort_arg = Module['_qsort_arg'] = wasmExports['qsort_arg'])(a0, a1, a2, a3, a4);\nvar _FunctionCall2Coll = Module['_FunctionCall2Coll'] = (a0, a1, a2, a3) => (_FunctionCall2Coll = Module['_FunctionCall2Coll'] = wasmExports['FunctionCall2Coll'])(a0, a1, a2, a3);\nvar _parser_errposition = Module['_parser_errposition'] = (a0, a1) => (_parser_errposition = Module['_parser_errposition'] = wasmExports['parser_errposition'])(a0, a1);\nvar _ExecPrepareExpr = Module['_ExecPrepareExpr'] = (a0, a1) => (_ExecPrepareExpr = Module['_ExecPrepareExpr'] = wasmExports['ExecPrepareExpr'])(a0, a1);\nvar _RegisterSnapshot = Module['_RegisterSnapshot'] = (a0) => (_RegisterSnapshot = Module['_RegisterSnapshot'] = wasmExports['RegisterSnapshot'])(a0);\nvar _MemoryContextReset = Module['_MemoryContextReset'] = (a0) => (_MemoryContextReset = Module['_MemoryContextReset'] = wasmExports['MemoryContextReset'])(a0);\nvar _UnregisterSnapshot = Module['_UnregisterSnapshot'] = (a0) => (_UnregisterSnapshot = Module['_UnregisterSnapshot'] = wasmExports['UnregisterSnapshot'])(a0);\nvar _ExecDropSingleTupleTableSlot = Module['_ExecDropSingleTupleTableSlot'] = (a0) => (_ExecDropSingleTupleTableSlot = Module['_ExecDropSingleTupleTableSlot'] = wasmExports['ExecDropSingleTupleTableSlot'])(a0);\nvar _relation_open = Module['_relation_open'] = (a0, a1) => (_relation_open = Module['_relation_open'] = wasmExports['relation_open'])(a0, a1);\nvar _MemoryContextAllocZero = Module['_MemoryContextAllocZero'] = (a0, a1) => (_MemoryContextAllocZero = Module['_MemoryContextAllocZero'] = wasmExports['MemoryContextAllocZero'])(a0, a1);\nvar _get_fn_expr_argtype = Module['_get_fn_expr_argtype'] = (a0, a1) => (_get_fn_expr_argtype = Module['_get_fn_expr_argtype'] = wasmExports['get_fn_expr_argtype'])(a0, a1);\nvar _relation_close = Module['_relation_close'] = (a0, a1) => (_relation_close = Module['_relation_close'] = wasmExports['relation_close'])(a0, a1);\nvar _get_element_type = Module['_get_element_type'] = (a0) => (_get_element_type = Module['_get_element_type'] = wasmExports['get_element_type'])(a0);\nvar _GetActiveSnapshot = Module['_GetActiveSnapshot'] = () => (_GetActiveSnapshot = Module['_GetActiveSnapshot'] = wasmExports['GetActiveSnapshot'])();\nvar _ScanKeyInit = Module['_ScanKeyInit'] = (a0, a1, a2, a3, a4) => (_ScanKeyInit = Module['_ScanKeyInit'] = wasmExports['ScanKeyInit'])(a0, a1, a2, a3, a4);\nvar _systable_beginscan = Module['_systable_beginscan'] = (a0, a1, a2, a3, a4, a5) => (_systable_beginscan = Module['_systable_beginscan'] = wasmExports['systable_beginscan'])(a0, a1, a2, a3, a4, a5);\nvar _systable_getnext = Module['_systable_getnext'] = (a0) => (_systable_getnext = Module['_systable_getnext'] = wasmExports['systable_getnext'])(a0);\nvar _getmissingattr = Module['_getmissingattr'] = (a0, a1, a2) => (_getmissingattr = Module['_getmissingattr'] = wasmExports['getmissingattr'])(a0, a1, a2);\nvar _nocachegetattr = Module['_nocachegetattr'] = (a0, a1, a2) => (_nocachegetattr = Module['_nocachegetattr'] = wasmExports['nocachegetattr'])(a0, a1, a2);\nvar _systable_endscan = Module['_systable_endscan'] = (a0) => (_systable_endscan = Module['_systable_endscan'] = wasmExports['systable_endscan'])(a0);\nvar _get_rel_relkind = Module['_get_rel_relkind'] = (a0) => (_get_rel_relkind = Module['_get_rel_relkind'] = wasmExports['get_rel_relkind'])(a0);\nvar _MemoryContextStrdup = Module['_MemoryContextStrdup'] = (a0, a1) => (_MemoryContextStrdup = Module['_MemoryContextStrdup'] = wasmExports['MemoryContextStrdup'])(a0, a1);\nvar _MemoryContextSetIdentifier = Module['_MemoryContextSetIdentifier'] = (a0, a1) => (_MemoryContextSetIdentifier = Module['_MemoryContextSetIdentifier'] = wasmExports['MemoryContextSetIdentifier'])(a0, a1);\nvar _MemoryContextSetParent = Module['_MemoryContextSetParent'] = (a0, a1) => (_MemoryContextSetParent = Module['_MemoryContextSetParent'] = wasmExports['MemoryContextSetParent'])(a0, a1);\nvar _fmgr_info_cxt = Module['_fmgr_info_cxt'] = (a0, a1, a2) => (_fmgr_info_cxt = Module['_fmgr_info_cxt'] = wasmExports['fmgr_info_cxt'])(a0, a1, a2);\nvar _stat = Module['_stat'] = (a0, a1) => (_stat = Module['_stat'] = wasmExports['stat'])(a0, a1);\nvar _errcode_for_file_access = Module['_errcode_for_file_access'] = () => (_errcode_for_file_access = Module['_errcode_for_file_access'] = wasmExports['errcode_for_file_access'])();\nvar _on_shmem_exit = Module['_on_shmem_exit'] = (a0, a1) => (_on_shmem_exit = Module['_on_shmem_exit'] = wasmExports['on_shmem_exit'])(a0, a1);\nvar _errhint = Module['_errhint'] = (a0, a1) => (_errhint = Module['_errhint'] = wasmExports['errhint'])(a0, a1);\nvar _getpid = Module['_getpid'] = () => (_getpid = Module['_getpid'] = wasmExports['getpid'])();\nvar _LWLockAcquire = Module['_LWLockAcquire'] = (a0, a1) => (_LWLockAcquire = Module['_LWLockAcquire'] = wasmExports['LWLockAcquire'])(a0, a1);\nvar _LWLockRelease = Module['_LWLockRelease'] = (a0) => (_LWLockRelease = Module['_LWLockRelease'] = wasmExports['LWLockRelease'])(a0);\nvar _unlink = Module['_unlink'] = (a0) => (_unlink = Module['_unlink'] = wasmExports['unlink'])(a0);\nvar _strcpy = Module['_strcpy'] = (a0, a1) => (_strcpy = Module['_strcpy'] = wasmExports['strcpy'])(a0, a1);\nvar _wait_result_to_str = Module['_wait_result_to_str'] = (a0) => (_wait_result_to_str = Module['_wait_result_to_str'] = wasmExports['wait_result_to_str'])(a0);\nvar _replace_percent_placeholders = Module['_replace_percent_placeholders'] = (a0, a1, a2, a3) => (_replace_percent_placeholders = Module['_replace_percent_placeholders'] = wasmExports['replace_percent_placeholders'])(a0, a1, a2, a3);\nvar _strlcpy = Module['_strlcpy'] = (a0, a1, a2) => (_strlcpy = Module['_strlcpy'] = wasmExports['strlcpy'])(a0, a1, a2);\nvar _fd_durable_rename = Module['_fd_durable_rename'] = (a0, a1, a2) => (_fd_durable_rename = Module['_fd_durable_rename'] = wasmExports['fd_durable_rename'])(a0, a1, a2);\nvar _AllocateFile = Module['_AllocateFile'] = (a0, a1) => (_AllocateFile = Module['_AllocateFile'] = wasmExports['AllocateFile'])(a0, a1);\nvar _FreeFile = Module['_FreeFile'] = (a0) => (_FreeFile = Module['_FreeFile'] = wasmExports['FreeFile'])(a0);\nvar _errmsg_plural = Module['_errmsg_plural'] = (a0, a1, a2, a3) => (_errmsg_plural = Module['_errmsg_plural'] = wasmExports['errmsg_plural'])(a0, a1, a2, a3);\nvar _XLogBeginInsert = Module['_XLogBeginInsert'] = () => (_XLogBeginInsert = Module['_XLogBeginInsert'] = wasmExports['XLogBeginInsert'])();\nvar _XLogRegisterData = Module['_XLogRegisterData'] = (a0, a1) => (_XLogRegisterData = Module['_XLogRegisterData'] = wasmExports['XLogRegisterData'])(a0, a1);\nvar _XLogInsert = Module['_XLogInsert'] = (a0, a1) => (_XLogInsert = Module['_XLogInsert'] = wasmExports['XLogInsert'])(a0, a1);\nvar _GetMultiXactIdMembers = Module['_GetMultiXactIdMembers'] = (a0, a1, a2, a3) => (_GetMultiXactIdMembers = Module['_GetMultiXactIdMembers'] = wasmExports['GetMultiXactIdMembers'])(a0, a1, a2, a3);\nvar _TransactionIdIsInProgress = Module['_TransactionIdIsInProgress'] = (a0) => (_TransactionIdIsInProgress = Module['_TransactionIdIsInProgress'] = wasmExports['TransactionIdIsInProgress'])(a0);\nvar _TransactionIdDidCommit = Module['_TransactionIdDidCommit'] = (a0) => (_TransactionIdDidCommit = Module['_TransactionIdDidCommit'] = wasmExports['TransactionIdDidCommit'])(a0);\nvar _pg_usleep = Module['_pg_usleep'] = (a0) => (_pg_usleep = Module['_pg_usleep'] = wasmExports['pg_usleep'])(a0);\nvar _TransactionIdIsCurrentTransactionId = Module['_TransactionIdIsCurrentTransactionId'] = (a0) => (_TransactionIdIsCurrentTransactionId = Module['_TransactionIdIsCurrentTransactionId'] = wasmExports['TransactionIdIsCurrentTransactionId'])(a0);\nvar _ReadMultiXactIdRange = Module['_ReadMultiXactIdRange'] = (a0, a1) => (_ReadMultiXactIdRange = Module['_ReadMultiXactIdRange'] = wasmExports['ReadMultiXactIdRange'])(a0, a1);\nvar _initStringInfo = Module['_initStringInfo'] = (a0) => (_initStringInfo = Module['_initStringInfo'] = wasmExports['initStringInfo'])(a0);\nvar _appendStringInfo = Module['_appendStringInfo'] = (a0, a1, a2) => (_appendStringInfo = Module['_appendStringInfo'] = wasmExports['appendStringInfo'])(a0, a1, a2);\nvar _appendStringInfoChar = Module['_appendStringInfoChar'] = (a0, a1) => (_appendStringInfoChar = Module['_appendStringInfoChar'] = wasmExports['appendStringInfoChar'])(a0, a1);\nvar _MemoryContextAlloc = Module['_MemoryContextAlloc'] = (a0, a1) => (_MemoryContextAlloc = Module['_MemoryContextAlloc'] = wasmExports['MemoryContextAlloc'])(a0, a1);\nvar _MultiXactIdPrecedes = Module['_MultiXactIdPrecedes'] = (a0, a1) => (_MultiXactIdPrecedes = Module['_MultiXactIdPrecedes'] = wasmExports['MultiXactIdPrecedes'])(a0, a1);\nvar _add_size = Module['_add_size'] = (a0, a1) => (_add_size = Module['_add_size'] = wasmExports['add_size'])(a0, a1);\nvar _ShmemInitStruct = Module['_ShmemInitStruct'] = (a0, a1, a2) => (_ShmemInitStruct = Module['_ShmemInitStruct'] = wasmExports['ShmemInitStruct'])(a0, a1, a2);\nvar _MultiXactIdPrecedesOrEquals = Module['_MultiXactIdPrecedesOrEquals'] = (a0, a1) => (_MultiXactIdPrecedesOrEquals = Module['_MultiXactIdPrecedesOrEquals'] = wasmExports['MultiXactIdPrecedesOrEquals'])(a0, a1);\nvar _init_MultiFuncCall = Module['_init_MultiFuncCall'] = (a0) => (_init_MultiFuncCall = Module['_init_MultiFuncCall'] = wasmExports['init_MultiFuncCall'])(a0);\nvar _get_call_result_type = Module['_get_call_result_type'] = (a0, a1, a2) => (_get_call_result_type = Module['_get_call_result_type'] = wasmExports['get_call_result_type'])(a0, a1, a2);\nvar _TupleDescGetAttInMetadata = Module['_TupleDescGetAttInMetadata'] = (a0) => (_TupleDescGetAttInMetadata = Module['_TupleDescGetAttInMetadata'] = wasmExports['TupleDescGetAttInMetadata'])(a0);\nvar _per_MultiFuncCall = Module['_per_MultiFuncCall'] = (a0) => (_per_MultiFuncCall = Module['_per_MultiFuncCall'] = wasmExports['per_MultiFuncCall'])(a0);\nvar _BuildTupleFromCStrings = Module['_BuildTupleFromCStrings'] = (a0, a1) => (_BuildTupleFromCStrings = Module['_BuildTupleFromCStrings'] = wasmExports['BuildTupleFromCStrings'])(a0, a1);\nvar _HeapTupleHeaderGetDatum = Module['_HeapTupleHeaderGetDatum'] = (a0) => (_HeapTupleHeaderGetDatum = Module['_HeapTupleHeaderGetDatum'] = wasmExports['HeapTupleHeaderGetDatum'])(a0);\nvar _end_MultiFuncCall = Module['_end_MultiFuncCall'] = (a0, a1) => (_end_MultiFuncCall = Module['_end_MultiFuncCall'] = wasmExports['end_MultiFuncCall'])(a0, a1);\nvar _before_shmem_exit = Module['_before_shmem_exit'] = (a0, a1) => (_before_shmem_exit = Module['_before_shmem_exit'] = wasmExports['before_shmem_exit'])(a0, a1);\nvar _CreateTemplateTupleDesc = Module['_CreateTemplateTupleDesc'] = (a0) => (_CreateTemplateTupleDesc = Module['_CreateTemplateTupleDesc'] = wasmExports['CreateTemplateTupleDesc'])(a0);\nvar _TupleDescInitEntry = Module['_TupleDescInitEntry'] = (a0, a1, a2, a3, a4, a5) => (_TupleDescInitEntry = Module['_TupleDescInitEntry'] = wasmExports['TupleDescInitEntry'])(a0, a1, a2, a3, a4, a5);\nvar _BlessTupleDesc = Module['_BlessTupleDesc'] = (a0) => (_BlessTupleDesc = Module['_BlessTupleDesc'] = wasmExports['BlessTupleDesc'])(a0);\nvar _cstring_to_text = Module['_cstring_to_text'] = (a0) => (_cstring_to_text = Module['_cstring_to_text'] = wasmExports['cstring_to_text'])(a0);\nvar _heap_form_tuple = Module['_heap_form_tuple'] = (a0, a1, a2) => (_heap_form_tuple = Module['_heap_form_tuple'] = wasmExports['heap_form_tuple'])(a0, a1, a2);\nvar _OpenTransientFile = Module['_OpenTransientFile'] = (a0, a1) => (_OpenTransientFile = Module['_OpenTransientFile'] = wasmExports['OpenTransientFile'])(a0, a1);\nvar _fstat = Module['_fstat'] = (a0, a1) => (_fstat = Module['_fstat'] = wasmExports['fstat'])(a0, a1);\nvar _read = Module['_read'] = (a0, a1, a2) => (_read = Module['_read'] = wasmExports['read'])(a0, a1, a2);\nvar _CloseTransientFile = Module['_CloseTransientFile'] = (a0) => (_CloseTransientFile = Module['_CloseTransientFile'] = wasmExports['CloseTransientFile'])(a0);\nvar _superuser_arg = Module['_superuser_arg'] = (a0) => (_superuser_arg = Module['_superuser_arg'] = wasmExports['superuser_arg'])(a0);\nvar _GetCurrentTimestamp = Module['_GetCurrentTimestamp'] = () => (_GetCurrentTimestamp = Module['_GetCurrentTimestamp'] = wasmExports['GetCurrentTimestamp'])();\nvar _wal_segment_close = Module['_wal_segment_close'] = (a0) => (_wal_segment_close = Module['_wal_segment_close'] = wasmExports['wal_segment_close'])(a0);\nvar _wal_segment_open = Module['_wal_segment_open'] = (a0, a1, a2) => (_wal_segment_open = Module['_wal_segment_open'] = wasmExports['wal_segment_open'])(a0, a1, a2);\nvar _XLogReaderAllocate = Module['_XLogReaderAllocate'] = (a0, a1, a2, a3) => (_XLogReaderAllocate = Module['_XLogReaderAllocate'] = wasmExports['XLogReaderAllocate'])(a0, a1, a2, a3);\nvar _XLogReadRecord = Module['_XLogReadRecord'] = (a0, a1) => (_XLogReadRecord = Module['_XLogReadRecord'] = wasmExports['XLogReadRecord'])(a0, a1);\nvar _XLogReaderFree = Module['_XLogReaderFree'] = (a0) => (_XLogReaderFree = Module['_XLogReaderFree'] = wasmExports['XLogReaderFree'])(a0);\nvar _write = Module['_write'] = (a0, a1, a2) => (_write = Module['_write'] = wasmExports['write'])(a0, a1, a2);\nvar _fd_fsync_fname = Module['_fd_fsync_fname'] = (a0, a1) => (_fd_fsync_fname = Module['_fd_fsync_fname'] = wasmExports['fd_fsync_fname'])(a0, a1);\nvar _AllocateDir = Module['_AllocateDir'] = (a0) => (_AllocateDir = Module['_AllocateDir'] = wasmExports['AllocateDir'])(a0);\nvar _ReadDir = Module['_ReadDir'] = (a0, a1) => (_ReadDir = Module['_ReadDir'] = wasmExports['ReadDir'])(a0, a1);\nvar _strtoul = Module['_strtoul'] = (a0, a1, a2) => (_strtoul = Module['_strtoul'] = wasmExports['strtoul'])(a0, a1, a2);\nvar _FreeDir = Module['_FreeDir'] = (a0) => (_FreeDir = Module['_FreeDir'] = wasmExports['FreeDir'])(a0);\nvar _access = Module['_access'] = (a0, a1) => (_access = Module['_access'] = wasmExports['access'])(a0, a1);\nvar _palloc_extended = Module['_palloc_extended'] = (a0, a1) => (_palloc_extended = Module['_palloc_extended'] = wasmExports['palloc_extended'])(a0, a1);\nvar _XLogFindNextRecord = Module['_XLogFindNextRecord'] = (a0, a1) => (_XLogFindNextRecord = Module['_XLogFindNextRecord'] = wasmExports['XLogFindNextRecord'])(a0, a1);\nvar _XLogRecGetBlockTagExtended = Module['_XLogRecGetBlockTagExtended'] = (a0, a1, a2, a3, a4, a5) => (_XLogRecGetBlockTagExtended = Module['_XLogRecGetBlockTagExtended'] = wasmExports['XLogRecGetBlockTagExtended'])(a0, a1, a2, a3, a4, a5);\nvar _RestoreBlockImage = Module['_RestoreBlockImage'] = (a0, a1, a2) => (_RestoreBlockImage = Module['_RestoreBlockImage'] = wasmExports['RestoreBlockImage'])(a0, a1, a2);\nvar _LWLockInitialize = Module['_LWLockInitialize'] = (a0, a1) => (_LWLockInitialize = Module['_LWLockInitialize'] = wasmExports['LWLockInitialize'])(a0, a1);\nvar _pwrite = Module['_pwrite'] = (a0, a1, a2, a3) => (_pwrite = Module['_pwrite'] = wasmExports['pwrite'])(a0, a1, a2, a3);\nvar _lseek = Module['_lseek'] = (a0, a1, a2) => (_lseek = Module['_lseek'] = wasmExports['lseek'])(a0, a1, a2);\nvar _strtol = Module['_strtol'] = (a0, a1, a2) => (_strtol = Module['_strtol'] = wasmExports['strtol'])(a0, a1, a2);\nvar _CreateParallelContext = Module['_CreateParallelContext'] = (a0, a1, a2) => (_CreateParallelContext = Module['_CreateParallelContext'] = wasmExports['CreateParallelContext'])(a0, a1, a2);\nvar _GetCurrentSubTransactionId = Module['_GetCurrentSubTransactionId'] = () => (_GetCurrentSubTransactionId = Module['_GetCurrentSubTransactionId'] = wasmExports['GetCurrentSubTransactionId'])();\nvar _InitializeParallelDSM = Module['_InitializeParallelDSM'] = (a0) => (_InitializeParallelDSM = Module['_InitializeParallelDSM'] = wasmExports['InitializeParallelDSM'])(a0);\nvar _GetTransactionSnapshot = Module['_GetTransactionSnapshot'] = () => (_GetTransactionSnapshot = Module['_GetTransactionSnapshot'] = wasmExports['GetTransactionSnapshot'])();\nvar _dsm_create = Module['_dsm_create'] = (a0, a1) => (_dsm_create = Module['_dsm_create'] = wasmExports['dsm_create'])(a0, a1);\nvar _dsm_segment_address = Module['_dsm_segment_address'] = (a0) => (_dsm_segment_address = Module['_dsm_segment_address'] = wasmExports['dsm_segment_address'])(a0);\nvar _shm_toc_allocate = Module['_shm_toc_allocate'] = (a0, a1) => (_shm_toc_allocate = Module['_shm_toc_allocate'] = wasmExports['shm_toc_allocate'])(a0, a1);\nvar _GetUserIdAndSecContext = Module['_GetUserIdAndSecContext'] = (a0, a1) => (_GetUserIdAndSecContext = Module['_GetUserIdAndSecContext'] = wasmExports['GetUserIdAndSecContext'])(a0, a1);\nvar _s_init_lock_sema = Module['_s_init_lock_sema'] = (a0, a1) => (_s_init_lock_sema = Module['_s_init_lock_sema'] = wasmExports['s_init_lock_sema'])(a0, a1);\nvar _shm_toc_insert = Module['_shm_toc_insert'] = (a0, a1, a2) => (_shm_toc_insert = Module['_shm_toc_insert'] = wasmExports['shm_toc_insert'])(a0, a1, a2);\nvar _WaitForParallelWorkersToFinish = Module['_WaitForParallelWorkersToFinish'] = (a0) => (_WaitForParallelWorkersToFinish = Module['_WaitForParallelWorkersToFinish'] = wasmExports['WaitForParallelWorkersToFinish'])(a0);\nvar _shm_toc_lookup = Module['_shm_toc_lookup'] = (a0, a1, a2) => (_shm_toc_lookup = Module['_shm_toc_lookup'] = wasmExports['shm_toc_lookup'])(a0, a1, a2);\nvar _WaitLatch = Module['_WaitLatch'] = (a0, a1, a2, a3) => (_WaitLatch = Module['_WaitLatch'] = wasmExports['WaitLatch'])(a0, a1, a2, a3);\nvar _ResetLatch = Module['_ResetLatch'] = (a0) => (_ResetLatch = Module['_ResetLatch'] = wasmExports['ResetLatch'])(a0);\nvar _WaitForBackgroundWorkerShutdown = Module['_WaitForBackgroundWorkerShutdown'] = (a0) => (_WaitForBackgroundWorkerShutdown = Module['_WaitForBackgroundWorkerShutdown'] = wasmExports['WaitForBackgroundWorkerShutdown'])(a0);\nvar _LaunchParallelWorkers = Module['_LaunchParallelWorkers'] = (a0) => (_LaunchParallelWorkers = Module['_LaunchParallelWorkers'] = wasmExports['LaunchParallelWorkers'])(a0);\nvar _dsm_segment_handle = Module['_dsm_segment_handle'] = (a0) => (_dsm_segment_handle = Module['_dsm_segment_handle'] = wasmExports['dsm_segment_handle'])(a0);\nvar _RegisterDynamicBackgroundWorker = Module['_RegisterDynamicBackgroundWorker'] = (a0, a1) => (_RegisterDynamicBackgroundWorker = Module['_RegisterDynamicBackgroundWorker'] = wasmExports['RegisterDynamicBackgroundWorker'])(a0, a1);\nvar _WaitForParallelWorkersToAttach = Module['_WaitForParallelWorkersToAttach'] = (a0) => (_WaitForParallelWorkersToAttach = Module['_WaitForParallelWorkersToAttach'] = wasmExports['WaitForParallelWorkersToAttach'])(a0);\nvar _DestroyParallelContext = Module['_DestroyParallelContext'] = (a0) => (_DestroyParallelContext = Module['_DestroyParallelContext'] = wasmExports['DestroyParallelContext'])(a0);\nvar _dsm_detach = Module['_dsm_detach'] = (a0) => (_dsm_detach = Module['_dsm_detach'] = wasmExports['dsm_detach'])(a0);\nvar _appendBinaryStringInfo = Module['_appendBinaryStringInfo'] = (a0, a1, a2) => (_appendBinaryStringInfo = Module['_appendBinaryStringInfo'] = wasmExports['appendBinaryStringInfo'])(a0, a1, a2);\nvar _pq_getmsgint = Module['_pq_getmsgint'] = (a0, a1) => (_pq_getmsgint = Module['_pq_getmsgint'] = wasmExports['pq_getmsgint'])(a0, a1);\nvar _die = Module['_die'] = (a0) => (_die = Module['_die'] = wasmExports['die'])(a0);\nvar _pqsignal = Module['_pqsignal'] = (a0, a1) => (_pqsignal = Module['_pqsignal'] = wasmExports['pqsignal'])(a0, a1);\nvar _BackgroundWorkerUnblockSignals = Module['_BackgroundWorkerUnblockSignals'] = () => (_BackgroundWorkerUnblockSignals = Module['_BackgroundWorkerUnblockSignals'] = wasmExports['BackgroundWorkerUnblockSignals'])();\nvar _dsm_attach = Module['_dsm_attach'] = (a0) => (_dsm_attach = Module['_dsm_attach'] = wasmExports['dsm_attach'])(a0);\nvar _enlargeStringInfo = Module['_enlargeStringInfo'] = (a0, a1) => (_enlargeStringInfo = Module['_enlargeStringInfo'] = wasmExports['enlargeStringInfo'])(a0, a1);\nvar _BackgroundWorkerInitializeConnectionByOid = Module['_BackgroundWorkerInitializeConnectionByOid'] = (a0, a1, a2) => (_BackgroundWorkerInitializeConnectionByOid = Module['_BackgroundWorkerInitializeConnectionByOid'] = wasmExports['BackgroundWorkerInitializeConnectionByOid'])(a0, a1, a2);\nvar _GetDatabaseEncoding = Module['_GetDatabaseEncoding'] = () => (_GetDatabaseEncoding = Module['_GetDatabaseEncoding'] = wasmExports['GetDatabaseEncoding'])();\nvar _StartTransactionCommand = Module['_StartTransactionCommand'] = () => (_StartTransactionCommand = Module['_StartTransactionCommand'] = wasmExports['StartTransactionCommand'])();\nvar _CommitTransactionCommand = Module['_CommitTransactionCommand'] = () => (_CommitTransactionCommand = Module['_CommitTransactionCommand'] = wasmExports['CommitTransactionCommand'])();\nvar _PushActiveSnapshot = Module['_PushActiveSnapshot'] = (a0) => (_PushActiveSnapshot = Module['_PushActiveSnapshot'] = wasmExports['PushActiveSnapshot'])(a0);\nvar _SetUserIdAndSecContext = Module['_SetUserIdAndSecContext'] = (a0, a1) => (_SetUserIdAndSecContext = Module['_SetUserIdAndSecContext'] = wasmExports['SetUserIdAndSecContext'])(a0, a1);\nvar _EnterParallelMode = Module['_EnterParallelMode'] = () => (_EnterParallelMode = Module['_EnterParallelMode'] = wasmExports['EnterParallelMode'])();\nvar _ExitParallelMode = Module['_ExitParallelMode'] = () => (_ExitParallelMode = Module['_ExitParallelMode'] = wasmExports['ExitParallelMode'])();\nvar _PopActiveSnapshot = Module['_PopActiveSnapshot'] = () => (_PopActiveSnapshot = Module['_PopActiveSnapshot'] = wasmExports['PopActiveSnapshot'])();\nvar _tas_sema = Module['_tas_sema'] = (a0) => (_tas_sema = Module['_tas_sema'] = wasmExports['tas_sema'])(a0);\nvar _s_lock = Module['_s_lock'] = (a0, a1, a2, a3) => (_s_lock = Module['_s_lock'] = wasmExports['s_lock'])(a0, a1, a2, a3);\nvar _s_unlock_sema = Module['_s_unlock_sema'] = (a0) => (_s_unlock_sema = Module['_s_unlock_sema'] = wasmExports['s_unlock_sema'])(a0);\nvar _XLogRecStoreStats = Module['_XLogRecStoreStats'] = (a0, a1) => (_XLogRecStoreStats = Module['_XLogRecStoreStats'] = wasmExports['XLogRecStoreStats'])(a0, a1);\nvar _clock_gettime = Module['_clock_gettime'] = (a0, a1) => (_clock_gettime = Module['_clock_gettime'] = wasmExports['clock_gettime'])(a0, a1);\nvar _time = Module['_time'] = (a0) => (_time = Module['_time'] = wasmExports['time'])(a0);\nvar _close = Module['_close'] = (a0) => (_close = Module['_close'] = wasmExports['close'])(a0);\nvar _ReleaseExternalFD = Module['_ReleaseExternalFD'] = () => (_ReleaseExternalFD = Module['_ReleaseExternalFD'] = wasmExports['ReleaseExternalFD'])();\nvar _strncmp = Module['_strncmp'] = (a0, a1, a2) => (_strncmp = Module['_strncmp'] = wasmExports['strncmp'])(a0, a1, a2);\nvar _SplitIdentifierString = Module['_SplitIdentifierString'] = (a0, a1, a2) => (_SplitIdentifierString = Module['_SplitIdentifierString'] = wasmExports['SplitIdentifierString'])(a0, a1, a2);\nvar _pre_format_elog_string = Module['_pre_format_elog_string'] = (a0, a1) => (_pre_format_elog_string = Module['_pre_format_elog_string'] = wasmExports['pre_format_elog_string'])(a0, a1);\nvar _format_elog_string = Module['_format_elog_string'] = (a0, a1) => (_format_elog_string = Module['_format_elog_string'] = wasmExports['format_elog_string'])(a0, a1);\nvar _guc_malloc = Module['_guc_malloc'] = (a0, a1) => (_guc_malloc = Module['_guc_malloc'] = wasmExports['guc_malloc'])(a0, a1);\nvar _SetConfigOption = Module['_SetConfigOption'] = (a0, a1, a2, a3) => (_SetConfigOption = Module['_SetConfigOption'] = wasmExports['SetConfigOption'])(a0, a1, a2, a3);\nvar _gettimeofday = Module['_gettimeofday'] = (a0, a1) => (_gettimeofday = Module['_gettimeofday'] = wasmExports['gettimeofday'])(a0, a1);\nvar _pg_strong_random = Module['_pg_strong_random'] = (a0, a1) => (_pg_strong_random = Module['_pg_strong_random'] = wasmExports['pg_strong_random'])(a0, a1);\nvar _GetFlushRecPtr = Module['_GetFlushRecPtr'] = (a0) => (_GetFlushRecPtr = Module['_GetFlushRecPtr'] = wasmExports['GetFlushRecPtr'])(a0);\nvar _GetXLogReplayRecPtr = Module['_GetXLogReplayRecPtr'] = (a0) => (_GetXLogReplayRecPtr = Module['_GetXLogReplayRecPtr'] = wasmExports['GetXLogReplayRecPtr'])(a0);\nvar _timestamptz_to_str = Module['_timestamptz_to_str'] = (a0) => (_timestamptz_to_str = Module['_timestamptz_to_str'] = wasmExports['timestamptz_to_str'])(a0);\nvar _sscanf = Module['_sscanf'] = (a0, a1, a2) => (_sscanf = Module['_sscanf'] = wasmExports['sscanf'])(a0, a1, a2);\nvar _TimestampDifferenceMilliseconds = Module['_TimestampDifferenceMilliseconds'] = (a0, a1) => (_TimestampDifferenceMilliseconds = Module['_TimestampDifferenceMilliseconds'] = wasmExports['TimestampDifferenceMilliseconds'])(a0, a1);\nvar _UnlockReleaseBuffer = Module['_UnlockReleaseBuffer'] = (a0) => (_UnlockReleaseBuffer = Module['_UnlockReleaseBuffer'] = wasmExports['UnlockReleaseBuffer'])(a0);\nvar ___wasm_setjmp_test = Module['___wasm_setjmp_test'] = (a0, a1) => (___wasm_setjmp_test = Module['___wasm_setjmp_test'] = wasmExports['__wasm_setjmp_test'])(a0, a1);\nvar ___wasm_setjmp = Module['___wasm_setjmp'] = (a0, a1, a2) => (___wasm_setjmp = Module['___wasm_setjmp'] = wasmExports['__wasm_setjmp'])(a0, a1, a2);\nvar _cancel_before_shmem_exit = Module['_cancel_before_shmem_exit'] = (a0, a1) => (_cancel_before_shmem_exit = Module['_cancel_before_shmem_exit'] = wasmExports['cancel_before_shmem_exit'])(a0, a1);\nvar _pg_re_throw = Module['_pg_re_throw'] = () => (_pg_re_throw = Module['_pg_re_throw'] = wasmExports['pg_re_throw'])();\nvar _emscripten_longjmp = Module['_emscripten_longjmp'] = (a0, a1) => (_emscripten_longjmp = Module['_emscripten_longjmp'] = wasmExports['emscripten_longjmp'])(a0, a1);\nvar _ferror = Module['_ferror'] = (a0) => (_ferror = Module['_ferror'] = wasmExports['ferror'])(a0);\nvar _RmgrNotFound = Module['_RmgrNotFound'] = (a0) => (_RmgrNotFound = Module['_RmgrNotFound'] = wasmExports['RmgrNotFound'])(a0);\nvar _InitMaterializedSRF = Module['_InitMaterializedSRF'] = (a0, a1) => (_InitMaterializedSRF = Module['_InitMaterializedSRF'] = wasmExports['InitMaterializedSRF'])(a0, a1);\nvar _tuplestore_putvalues = Module['_tuplestore_putvalues'] = (a0, a1, a2, a3) => (_tuplestore_putvalues = Module['_tuplestore_putvalues'] = wasmExports['tuplestore_putvalues'])(a0, a1, a2, a3);\nvar _hash_destroy = Module['_hash_destroy'] = (a0) => (_hash_destroy = Module['_hash_destroy'] = wasmExports['hash_destroy'])(a0);\nvar _smgropen = Module['_smgropen'] = (a0, a1) => (_smgropen = Module['_smgropen'] = wasmExports['smgropen'])(a0, a1);\nvar _smgrexists = Module['_smgrexists'] = (a0, a1) => (_smgrexists = Module['_smgrexists'] = wasmExports['smgrexists'])(a0, a1);\nvar _pg_detoast_datum_packed = Module['_pg_detoast_datum_packed'] = (a0) => (_pg_detoast_datum_packed = Module['_pg_detoast_datum_packed'] = wasmExports['pg_detoast_datum_packed'])(a0);\nvar _makeStringInfo = Module['_makeStringInfo'] = () => (_makeStringInfo = Module['_makeStringInfo'] = wasmExports['makeStringInfo'])();\nvar _numeric_in = Module['_numeric_in'] = (a0) => (_numeric_in = Module['_numeric_in'] = wasmExports['numeric_in'])(a0);\nvar _DirectFunctionCall3Coll = Module['_DirectFunctionCall3Coll'] = (a0, a1, a2, a3, a4) => (_DirectFunctionCall3Coll = Module['_DirectFunctionCall3Coll'] = wasmExports['DirectFunctionCall3Coll'])(a0, a1, a2, a3, a4);\nvar _DirectFunctionCall2Coll = Module['_DirectFunctionCall2Coll'] = (a0, a1, a2, a3) => (_DirectFunctionCall2Coll = Module['_DirectFunctionCall2Coll'] = wasmExports['DirectFunctionCall2Coll'])(a0, a1, a2, a3);\nvar _GetCurrentCommandId = Module['_GetCurrentCommandId'] = (a0) => (_GetCurrentCommandId = Module['_GetCurrentCommandId'] = wasmExports['GetCurrentCommandId'])(a0);\nvar _GetCurrentTransactionNestLevel = Module['_GetCurrentTransactionNestLevel'] = () => (_GetCurrentTransactionNestLevel = Module['_GetCurrentTransactionNestLevel'] = wasmExports['GetCurrentTransactionNestLevel'])();\nvar _CommandCounterIncrement = Module['_CommandCounterIncrement'] = () => (_CommandCounterIncrement = Module['_CommandCounterIncrement'] = wasmExports['CommandCounterIncrement'])();\nvar _ResourceOwnerCreate = Module['_ResourceOwnerCreate'] = (a0, a1) => (_ResourceOwnerCreate = Module['_ResourceOwnerCreate'] = wasmExports['ResourceOwnerCreate'])(a0, a1);\nvar _AtEOXact_GUC = Module['_AtEOXact_GUC'] = (a0, a1) => (_AtEOXact_GUC = Module['_AtEOXact_GUC'] = wasmExports['AtEOXact_GUC'])(a0, a1);\nvar _ResourceOwnerDelete = Module['_ResourceOwnerDelete'] = (a0) => (_ResourceOwnerDelete = Module['_ResourceOwnerDelete'] = wasmExports['ResourceOwnerDelete'])(a0);\nvar _ConditionVariableCancelSleep = Module['_ConditionVariableCancelSleep'] = () => (_ConditionVariableCancelSleep = Module['_ConditionVariableCancelSleep'] = wasmExports['ConditionVariableCancelSleep'])();\nvar _AtEOSubXact_Files = Module['_AtEOSubXact_Files'] = (a0, a1, a2) => (_AtEOSubXact_Files = Module['_AtEOSubXact_Files'] = wasmExports['AtEOSubXact_Files'])(a0, a1, a2);\nvar _RegisterXactCallback = Module['_RegisterXactCallback'] = (a0, a1) => (_RegisterXactCallback = Module['_RegisterXactCallback'] = wasmExports['RegisterXactCallback'])(a0, a1);\nvar _RegisterSubXactCallback = Module['_RegisterSubXactCallback'] = (a0, a1) => (_RegisterSubXactCallback = Module['_RegisterSubXactCallback'] = wasmExports['RegisterSubXactCallback'])(a0, a1);\nvar _NewGUCNestLevel = Module['_NewGUCNestLevel'] = () => (_NewGUCNestLevel = Module['_NewGUCNestLevel'] = wasmExports['NewGUCNestLevel'])();\nvar _BeginInternalSubTransaction = Module['_BeginInternalSubTransaction'] = (a0) => (_BeginInternalSubTransaction = Module['_BeginInternalSubTransaction'] = wasmExports['BeginInternalSubTransaction'])(a0);\nvar _ReleaseCurrentSubTransaction = Module['_ReleaseCurrentSubTransaction'] = () => (_ReleaseCurrentSubTransaction = Module['_ReleaseCurrentSubTransaction'] = wasmExports['ReleaseCurrentSubTransaction'])();\nvar _RollbackAndReleaseCurrentSubTransaction = Module['_RollbackAndReleaseCurrentSubTransaction'] = () => (_RollbackAndReleaseCurrentSubTransaction = Module['_RollbackAndReleaseCurrentSubTransaction'] = wasmExports['RollbackAndReleaseCurrentSubTransaction'])();\nvar _errdetail_internal = Module['_errdetail_internal'] = (a0, a1) => (_errdetail_internal = Module['_errdetail_internal'] = wasmExports['errdetail_internal'])(a0, a1);\nvar _log_newpage_buffer = Module['_log_newpage_buffer'] = (a0, a1) => (_log_newpage_buffer = Module['_log_newpage_buffer'] = wasmExports['log_newpage_buffer'])(a0, a1);\nvar _log_newpage_range = Module['_log_newpage_range'] = (a0, a1, a2, a3, a4) => (_log_newpage_range = Module['_log_newpage_range'] = wasmExports['log_newpage_range'])(a0, a1, a2, a3, a4);\nvar _ReadBufferExtended = Module['_ReadBufferExtended'] = (a0, a1, a2, a3, a4) => (_ReadBufferExtended = Module['_ReadBufferExtended'] = wasmExports['ReadBufferExtended'])(a0, a1, a2, a3, a4);\nvar _LockBuffer = Module['_LockBuffer'] = (a0, a1) => (_LockBuffer = Module['_LockBuffer'] = wasmExports['LockBuffer'])(a0, a1);\nvar _MarkBufferDirty = Module['_MarkBufferDirty'] = (a0) => (_MarkBufferDirty = Module['_MarkBufferDirty'] = wasmExports['MarkBufferDirty'])(a0);\nvar _ConditionVariableInit = Module['_ConditionVariableInit'] = (a0) => (_ConditionVariableInit = Module['_ConditionVariableInit'] = wasmExports['ConditionVariableInit'])(a0);\nvar _timestamptz_in = Module['_timestamptz_in'] = (a0) => (_timestamptz_in = Module['_timestamptz_in'] = wasmExports['timestamptz_in'])(a0);\nvar _fscanf = Module['_fscanf'] = (a0, a1, a2) => (_fscanf = Module['_fscanf'] = wasmExports['fscanf'])(a0, a1, a2);\nvar _appendStringInfoString = Module['_appendStringInfoString'] = (a0, a1) => (_appendStringInfoString = Module['_appendStringInfoString'] = wasmExports['appendStringInfoString'])(a0, a1);\nvar _ParseDateTime = Module['_ParseDateTime'] = (a0, a1, a2, a3, a4, a5, a6) => (_ParseDateTime = Module['_ParseDateTime'] = wasmExports['ParseDateTime'])(a0, a1, a2, a3, a4, a5, a6);\nvar _DecodeDateTime = Module['_DecodeDateTime'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_DecodeDateTime = Module['_DecodeDateTime'] = wasmExports['DecodeDateTime'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _GenericXLogStart = Module['_GenericXLogStart'] = (a0) => (_GenericXLogStart = Module['_GenericXLogStart'] = wasmExports['GenericXLogStart'])(a0);\nvar _GenericXLogRegisterBuffer = Module['_GenericXLogRegisterBuffer'] = (a0, a1, a2) => (_GenericXLogRegisterBuffer = Module['_GenericXLogRegisterBuffer'] = wasmExports['GenericXLogRegisterBuffer'])(a0, a1, a2);\nvar _GenericXLogFinish = Module['_GenericXLogFinish'] = (a0) => (_GenericXLogFinish = Module['_GenericXLogFinish'] = wasmExports['GenericXLogFinish'])(a0);\nvar _GenericXLogAbort = Module['_GenericXLogAbort'] = (a0) => (_GenericXLogAbort = Module['_GenericXLogAbort'] = wasmExports['GenericXLogAbort'])(a0);\nvar _hash_get_num_entries = Module['_hash_get_num_entries'] = (a0) => (_hash_get_num_entries = Module['_hash_get_num_entries'] = wasmExports['hash_get_num_entries'])(a0);\nvar _LockBufferForCleanup = Module['_LockBufferForCleanup'] = (a0) => (_LockBufferForCleanup = Module['_LockBufferForCleanup'] = wasmExports['LockBufferForCleanup'])(a0);\nvar _ReleaseBuffer = Module['_ReleaseBuffer'] = (a0) => (_ReleaseBuffer = Module['_ReleaseBuffer'] = wasmExports['ReleaseBuffer'])(a0);\nvar _read_local_xlog_page_no_wait = Module['_read_local_xlog_page_no_wait'] = (a0, a1, a2, a3, a4) => (_read_local_xlog_page_no_wait = Module['_read_local_xlog_page_no_wait'] = wasmExports['read_local_xlog_page_no_wait'])(a0, a1, a2, a3, a4);\nvar _fgets = Module['_fgets'] = (a0, a1, a2) => (_fgets = Module['_fgets'] = wasmExports['fgets'])(a0, a1, a2);\nvar _SearchSysCacheExists = Module['_SearchSysCacheExists'] = (a0, a1, a2, a3, a4) => (_SearchSysCacheExists = Module['_SearchSysCacheExists'] = wasmExports['SearchSysCacheExists'])(a0, a1, a2, a3, a4);\nvar _convert_tuples_by_position = Module['_convert_tuples_by_position'] = (a0, a1, a2) => (_convert_tuples_by_position = Module['_convert_tuples_by_position'] = wasmExports['convert_tuples_by_position'])(a0, a1, a2);\nvar _build_attrmap_by_name_if_req = Module['_build_attrmap_by_name_if_req'] = (a0, a1, a2) => (_build_attrmap_by_name_if_req = Module['_build_attrmap_by_name_if_req'] = wasmExports['build_attrmap_by_name_if_req'])(a0, a1, a2);\nvar _execute_attr_map_tuple = Module['_execute_attr_map_tuple'] = (a0, a1) => (_execute_attr_map_tuple = Module['_execute_attr_map_tuple'] = wasmExports['execute_attr_map_tuple'])(a0, a1);\nvar _heap_deform_tuple = Module['_heap_deform_tuple'] = (a0, a1, a2, a3) => (_heap_deform_tuple = Module['_heap_deform_tuple'] = wasmExports['heap_deform_tuple'])(a0, a1, a2, a3);\nvar _execute_attr_map_slot = Module['_execute_attr_map_slot'] = (a0, a1, a2) => (_execute_attr_map_slot = Module['_execute_attr_map_slot'] = wasmExports['execute_attr_map_slot'])(a0, a1, a2);\nvar _slot_getsomeattrs_int = Module['_slot_getsomeattrs_int'] = (a0, a1) => (_slot_getsomeattrs_int = Module['_slot_getsomeattrs_int'] = wasmExports['slot_getsomeattrs_int'])(a0, a1);\nvar _ExecStoreVirtualTuple = Module['_ExecStoreVirtualTuple'] = (a0) => (_ExecStoreVirtualTuple = Module['_ExecStoreVirtualTuple'] = wasmExports['ExecStoreVirtualTuple'])(a0);\nvar _free_attrmap = Module['_free_attrmap'] = (a0) => (_free_attrmap = Module['_free_attrmap'] = wasmExports['free_attrmap'])(a0);\nvar _DatumGetEOHP = Module['_DatumGetEOHP'] = (a0) => (_DatumGetEOHP = Module['_DatumGetEOHP'] = wasmExports['DatumGetEOHP'])(a0);\nvar _EOH_get_flat_size = Module['_EOH_get_flat_size'] = (a0) => (_EOH_get_flat_size = Module['_EOH_get_flat_size'] = wasmExports['EOH_get_flat_size'])(a0);\nvar _EOH_flatten_into = Module['_EOH_flatten_into'] = (a0, a1, a2) => (_EOH_flatten_into = Module['_EOH_flatten_into'] = wasmExports['EOH_flatten_into'])(a0, a1, a2);\nvar _heap_modify_tuple_by_cols = Module['_heap_modify_tuple_by_cols'] = (a0, a1, a2, a3, a4, a5) => (_heap_modify_tuple_by_cols = Module['_heap_modify_tuple_by_cols'] = wasmExports['heap_modify_tuple_by_cols'])(a0, a1, a2, a3, a4, a5);\nvar _heap_freetuple = Module['_heap_freetuple'] = (a0) => (_heap_freetuple = Module['_heap_freetuple'] = wasmExports['heap_freetuple'])(a0);\nvar _hash_bytes = Module['_hash_bytes'] = (a0, a1) => (_hash_bytes = Module['_hash_bytes'] = wasmExports['hash_bytes'])(a0, a1);\nvar _format_type_with_typemod = Module['_format_type_with_typemod'] = (a0, a1) => (_format_type_with_typemod = Module['_format_type_with_typemod'] = wasmExports['format_type_with_typemod'])(a0, a1);\nvar _RelationIdGetRelation = Module['_RelationIdGetRelation'] = (a0) => (_RelationIdGetRelation = Module['_RelationIdGetRelation'] = wasmExports['RelationIdGetRelation'])(a0);\nvar _try_relation_open = Module['_try_relation_open'] = (a0, a1) => (_try_relation_open = Module['_try_relation_open'] = wasmExports['try_relation_open'])(a0, a1);\nvar _relation_openrv = Module['_relation_openrv'] = (a0, a1) => (_relation_openrv = Module['_relation_openrv'] = wasmExports['relation_openrv'])(a0, a1);\nvar _RangeVarGetRelidExtended = Module['_RangeVarGetRelidExtended'] = (a0, a1, a2, a3, a4) => (_RangeVarGetRelidExtended = Module['_RangeVarGetRelidExtended'] = wasmExports['RangeVarGetRelidExtended'])(a0, a1, a2, a3, a4);\nvar _RelationClose = Module['_RelationClose'] = (a0) => (_RelationClose = Module['_RelationClose'] = wasmExports['RelationClose'])(a0);\nvar _fmgr_info = Module['_fmgr_info'] = (a0, a1) => (_fmgr_info = Module['_fmgr_info'] = wasmExports['fmgr_info'])(a0, a1);\nvar _OutputFunctionCall = Module['_OutputFunctionCall'] = (a0, a1) => (_OutputFunctionCall = Module['_OutputFunctionCall'] = wasmExports['OutputFunctionCall'])(a0, a1);\nvar _pg_printf = Module['_pg_printf'] = (a0, a1) => (_pg_printf = Module['_pg_printf'] = wasmExports['pg_printf'])(a0, a1);\nvar _OidOutputFunctionCall = Module['_OidOutputFunctionCall'] = (a0, a1) => (_OidOutputFunctionCall = Module['_OidOutputFunctionCall'] = wasmExports['OidOutputFunctionCall'])(a0, a1);\nvar _CreateTupleDescCopy = Module['_CreateTupleDescCopy'] = (a0) => (_CreateTupleDescCopy = Module['_CreateTupleDescCopy'] = wasmExports['CreateTupleDescCopy'])(a0);\nvar _CreateTupleDescCopyConstr = Module['_CreateTupleDescCopyConstr'] = (a0) => (_CreateTupleDescCopyConstr = Module['_CreateTupleDescCopyConstr'] = wasmExports['CreateTupleDescCopyConstr'])(a0);\nvar _TupleDescInitEntryCollation = Module['_TupleDescInitEntryCollation'] = (a0, a1, a2) => (_TupleDescInitEntryCollation = Module['_TupleDescInitEntryCollation'] = wasmExports['TupleDescInitEntryCollation'])(a0, a1, a2);\nvar _typenameTypeIdAndMod = Module['_typenameTypeIdAndMod'] = (a0, a1, a2, a3) => (_typenameTypeIdAndMod = Module['_typenameTypeIdAndMod'] = wasmExports['typenameTypeIdAndMod'])(a0, a1, a2, a3);\nvar _detoast_external_attr = Module['_detoast_external_attr'] = (a0) => (_detoast_external_attr = Module['_detoast_external_attr'] = wasmExports['detoast_external_attr'])(a0);\nvar _index_form_tuple = Module['_index_form_tuple'] = (a0, a1, a2) => (_index_form_tuple = Module['_index_form_tuple'] = wasmExports['index_form_tuple'])(a0, a1, a2);\nvar _nocache_index_getattr = Module['_nocache_index_getattr'] = (a0, a1, a2) => (_nocache_index_getattr = Module['_nocache_index_getattr'] = wasmExports['nocache_index_getattr'])(a0, a1, a2);\nvar _index_deform_tuple = Module['_index_deform_tuple'] = (a0, a1, a2, a3) => (_index_deform_tuple = Module['_index_deform_tuple'] = wasmExports['index_deform_tuple'])(a0, a1, a2, a3);\nvar _add_reloption_kind = Module['_add_reloption_kind'] = () => (_add_reloption_kind = Module['_add_reloption_kind'] = wasmExports['add_reloption_kind'])();\nvar _init_local_reloptions = Module['_init_local_reloptions'] = (a0, a1) => (_init_local_reloptions = Module['_init_local_reloptions'] = wasmExports['init_local_reloptions'])(a0, a1);\nvar _register_reloptions_validator = Module['_register_reloptions_validator'] = (a0, a1) => (_register_reloptions_validator = Module['_register_reloptions_validator'] = wasmExports['register_reloptions_validator'])(a0, a1);\nvar _add_int_reloption = Module['_add_int_reloption'] = (a0, a1, a2, a3, a4, a5, a6) => (_add_int_reloption = Module['_add_int_reloption'] = wasmExports['add_int_reloption'])(a0, a1, a2, a3, a4, a5, a6);\nvar _add_local_int_reloption = Module['_add_local_int_reloption'] = (a0, a1, a2, a3, a4, a5, a6) => (_add_local_int_reloption = Module['_add_local_int_reloption'] = wasmExports['add_local_int_reloption'])(a0, a1, a2, a3, a4, a5, a6);\nvar _deconstruct_array_builtin = Module['_deconstruct_array_builtin'] = (a0, a1, a2, a3, a4) => (_deconstruct_array_builtin = Module['_deconstruct_array_builtin'] = wasmExports['deconstruct_array_builtin'])(a0, a1, a2, a3, a4);\nvar _accumArrayResult = Module['_accumArrayResult'] = (a0, a1, a2, a3, a4) => (_accumArrayResult = Module['_accumArrayResult'] = wasmExports['accumArrayResult'])(a0, a1, a2, a3, a4);\nvar _defGetString = Module['_defGetString'] = (a0) => (_defGetString = Module['_defGetString'] = wasmExports['defGetString'])(a0);\nvar _defGetBoolean = Module['_defGetBoolean'] = (a0) => (_defGetBoolean = Module['_defGetBoolean'] = wasmExports['defGetBoolean'])(a0);\nvar _makeArrayResult = Module['_makeArrayResult'] = (a0, a1) => (_makeArrayResult = Module['_makeArrayResult'] = wasmExports['makeArrayResult'])(a0, a1);\nvar _untransformRelOptions = Module['_untransformRelOptions'] = (a0) => (_untransformRelOptions = Module['_untransformRelOptions'] = wasmExports['untransformRelOptions'])(a0);\nvar _makeDefElem = Module['_makeDefElem'] = (a0, a1, a2) => (_makeDefElem = Module['_makeDefElem'] = wasmExports['makeDefElem'])(a0, a1, a2);\nvar _build_reloptions = Module['_build_reloptions'] = (a0, a1, a2, a3, a4, a5) => (_build_reloptions = Module['_build_reloptions'] = wasmExports['build_reloptions'])(a0, a1, a2, a3, a4, a5);\nvar _parse_bool = Module['_parse_bool'] = (a0, a1) => (_parse_bool = Module['_parse_bool'] = wasmExports['parse_bool'])(a0, a1);\nvar _parse_int = Module['_parse_int'] = (a0, a1, a2, a3) => (_parse_int = Module['_parse_int'] = wasmExports['parse_int'])(a0, a1, a2, a3);\nvar _parse_real = Module['_parse_real'] = (a0, a1, a2, a3) => (_parse_real = Module['_parse_real'] = wasmExports['parse_real'])(a0, a1, a2, a3);\nvar _pg_ltoa = Module['_pg_ltoa'] = (a0, a1) => (_pg_ltoa = Module['_pg_ltoa'] = wasmExports['pg_ltoa'])(a0, a1);\nvar _toast_open_indexes = Module['_toast_open_indexes'] = (a0, a1, a2, a3) => (_toast_open_indexes = Module['_toast_open_indexes'] = wasmExports['toast_open_indexes'])(a0, a1, a2, a3);\nvar _toast_close_indexes = Module['_toast_close_indexes'] = (a0, a1, a2) => (_toast_close_indexes = Module['_toast_close_indexes'] = wasmExports['toast_close_indexes'])(a0, a1, a2);\nvar _systable_beginscan_ordered = Module['_systable_beginscan_ordered'] = (a0, a1, a2, a3, a4) => (_systable_beginscan_ordered = Module['_systable_beginscan_ordered'] = wasmExports['systable_beginscan_ordered'])(a0, a1, a2, a3, a4);\nvar _systable_getnext_ordered = Module['_systable_getnext_ordered'] = (a0, a1) => (_systable_getnext_ordered = Module['_systable_getnext_ordered'] = wasmExports['systable_getnext_ordered'])(a0, a1);\nvar _systable_endscan_ordered = Module['_systable_endscan_ordered'] = (a0) => (_systable_endscan_ordered = Module['_systable_endscan_ordered'] = wasmExports['systable_endscan_ordered'])(a0);\nvar _init_toast_snapshot = Module['_init_toast_snapshot'] = (a0) => (_init_toast_snapshot = Module['_init_toast_snapshot'] = wasmExports['init_toast_snapshot'])(a0);\nvar __bt_allequalimage = Module['__bt_allequalimage'] = (a0, a1) => (__bt_allequalimage = Module['__bt_allequalimage'] = wasmExports['_bt_allequalimage'])(a0, a1);\nvar _RelationGetIndexScan = Module['_RelationGetIndexScan'] = (a0, a1, a2) => (_RelationGetIndexScan = Module['_RelationGetIndexScan'] = wasmExports['RelationGetIndexScan'])(a0, a1, a2);\nvar _memmove = Module['_memmove'] = (a0, a1, a2) => (_memmove = Module['_memmove'] = wasmExports['memmove'])(a0, a1, a2);\nvar _tbm_add_tuples = Module['_tbm_add_tuples'] = (a0, a1, a2, a3) => (_tbm_add_tuples = Module['_tbm_add_tuples'] = wasmExports['tbm_add_tuples'])(a0, a1, a2, a3);\nvar _ConditionVariableSleep = Module['_ConditionVariableSleep'] = (a0, a1) => (_ConditionVariableSleep = Module['_ConditionVariableSleep'] = wasmExports['ConditionVariableSleep'])(a0, a1);\nvar _ConditionVariableSignal = Module['_ConditionVariableSignal'] = (a0) => (_ConditionVariableSignal = Module['_ConditionVariableSignal'] = wasmExports['ConditionVariableSignal'])(a0);\nvar _LockRelationForExtension = Module['_LockRelationForExtension'] = (a0, a1) => (_LockRelationForExtension = Module['_LockRelationForExtension'] = wasmExports['LockRelationForExtension'])(a0, a1);\nvar _UnlockRelationForExtension = Module['_UnlockRelationForExtension'] = (a0, a1) => (_UnlockRelationForExtension = Module['_UnlockRelationForExtension'] = wasmExports['UnlockRelationForExtension'])(a0, a1);\nvar _pgstat_progress_update_param = Module['_pgstat_progress_update_param'] = (a0, a1) => (_pgstat_progress_update_param = Module['_pgstat_progress_update_param'] = wasmExports['pgstat_progress_update_param'])(a0, a1);\nvar _vacuum_delay_point = Module['_vacuum_delay_point'] = () => (_vacuum_delay_point = Module['_vacuum_delay_point'] = wasmExports['vacuum_delay_point'])();\nvar __bt_checkpage = Module['__bt_checkpage'] = (a0, a1) => (__bt_checkpage = Module['__bt_checkpage'] = wasmExports['_bt_checkpage'])(a0, a1);\nvar _RecordFreeIndexPage = Module['_RecordFreeIndexPage'] = (a0, a1) => (_RecordFreeIndexPage = Module['_RecordFreeIndexPage'] = wasmExports['RecordFreeIndexPage'])(a0, a1);\nvar __bt_relbuf = Module['__bt_relbuf'] = (a0, a1) => (__bt_relbuf = Module['__bt_relbuf'] = wasmExports['_bt_relbuf'])(a0, a1);\nvar _IndexFreeSpaceMapVacuum = Module['_IndexFreeSpaceMapVacuum'] = (a0) => (_IndexFreeSpaceMapVacuum = Module['_IndexFreeSpaceMapVacuum'] = wasmExports['IndexFreeSpaceMapVacuum'])(a0);\nvar __bt_mkscankey = Module['__bt_mkscankey'] = (a0, a1) => (__bt_mkscankey = Module['__bt_mkscankey'] = wasmExports['_bt_mkscankey'])(a0, a1);\nvar _ReadBuffer = Module['_ReadBuffer'] = (a0, a1) => (_ReadBuffer = Module['_ReadBuffer'] = wasmExports['ReadBuffer'])(a0, a1);\nvar _PageGetFreeSpace = Module['_PageGetFreeSpace'] = (a0) => (_PageGetFreeSpace = Module['_PageGetFreeSpace'] = wasmExports['PageGetFreeSpace'])(a0);\nvar __bt_compare = Module['__bt_compare'] = (a0, a1, a2, a3) => (__bt_compare = Module['__bt_compare'] = wasmExports['_bt_compare'])(a0, a1, a2, a3);\nvar _smgrsetowner = Module['_smgrsetowner'] = (a0, a1) => (_smgrsetowner = Module['_smgrsetowner'] = wasmExports['smgrsetowner'])(a0, a1);\nvar __bt_search = Module['__bt_search'] = (a0, a1, a2, a3, a4, a5) => (__bt_search = Module['__bt_search'] = wasmExports['_bt_search'])(a0, a1, a2, a3, a4, a5);\nvar __bt_binsrch_insert = Module['__bt_binsrch_insert'] = (a0, a1) => (__bt_binsrch_insert = Module['__bt_binsrch_insert'] = wasmExports['_bt_binsrch_insert'])(a0, a1);\nvar _ItemPointerCompare = Module['_ItemPointerCompare'] = (a0, a1) => (_ItemPointerCompare = Module['_ItemPointerCompare'] = wasmExports['ItemPointerCompare'])(a0, a1);\nvar _BufferGetBlockNumber = Module['_BufferGetBlockNumber'] = (a0) => (_BufferGetBlockNumber = Module['_BufferGetBlockNumber'] = wasmExports['BufferGetBlockNumber'])(a0);\nvar __bt_freestack = Module['__bt_freestack'] = (a0) => (__bt_freestack = Module['__bt_freestack'] = wasmExports['_bt_freestack'])(a0);\nvar _pg_prng_uint32 = Module['_pg_prng_uint32'] = (a0) => (_pg_prng_uint32 = Module['_pg_prng_uint32'] = wasmExports['pg_prng_uint32'])(a0);\nvar _PageAddItemExtended = Module['_PageAddItemExtended'] = (a0, a1, a2, a3, a4) => (_PageAddItemExtended = Module['_PageAddItemExtended'] = wasmExports['PageAddItemExtended'])(a0, a1, a2, a3, a4);\nvar _bsearch = Module['_bsearch'] = (a0, a1, a2, a3, a4) => (_bsearch = Module['_bsearch'] = wasmExports['bsearch'])(a0, a1, a2, a3, a4);\nvar _btboolcmp = Module['_btboolcmp'] = (a0) => (_btboolcmp = Module['_btboolcmp'] = wasmExports['btboolcmp'])(a0);\nvar _btint2cmp = Module['_btint2cmp'] = (a0) => (_btint2cmp = Module['_btint2cmp'] = wasmExports['btint2cmp'])(a0);\nvar _btint4cmp = Module['_btint4cmp'] = (a0) => (_btint4cmp = Module['_btint4cmp'] = wasmExports['btint4cmp'])(a0);\nvar _btint8cmp = Module['_btint8cmp'] = (a0) => (_btint8cmp = Module['_btint8cmp'] = wasmExports['btint8cmp'])(a0);\nvar _btoidcmp = Module['_btoidcmp'] = (a0) => (_btoidcmp = Module['_btoidcmp'] = wasmExports['btoidcmp'])(a0);\nvar _btcharcmp = Module['_btcharcmp'] = (a0) => (_btcharcmp = Module['_btcharcmp'] = wasmExports['btcharcmp'])(a0);\nvar _table_parallelscan_estimate = Module['_table_parallelscan_estimate'] = (a0, a1) => (_table_parallelscan_estimate = Module['_table_parallelscan_estimate'] = wasmExports['table_parallelscan_estimate'])(a0, a1);\nvar _tuplesort_estimate_shared = Module['_tuplesort_estimate_shared'] = (a0) => (_tuplesort_estimate_shared = Module['_tuplesort_estimate_shared'] = wasmExports['tuplesort_estimate_shared'])(a0);\nvar _table_parallelscan_initialize = Module['_table_parallelscan_initialize'] = (a0, a1, a2) => (_table_parallelscan_initialize = Module['_table_parallelscan_initialize'] = wasmExports['table_parallelscan_initialize'])(a0, a1, a2);\nvar _tuplesort_initialize_shared = Module['_tuplesort_initialize_shared'] = (a0, a1, a2) => (_tuplesort_initialize_shared = Module['_tuplesort_initialize_shared'] = wasmExports['tuplesort_initialize_shared'])(a0, a1, a2);\nvar _tuplesort_end = Module['_tuplesort_end'] = (a0) => (_tuplesort_end = Module['_tuplesort_end'] = wasmExports['tuplesort_end'])(a0);\nvar _tuplesort_performsort = Module['_tuplesort_performsort'] = (a0) => (_tuplesort_performsort = Module['_tuplesort_performsort'] = wasmExports['tuplesort_performsort'])(a0);\nvar _pgstat_report_activity = Module['_pgstat_report_activity'] = (a0, a1) => (_pgstat_report_activity = Module['_pgstat_report_activity'] = wasmExports['pgstat_report_activity'])(a0, a1);\nvar _tuplesort_attach_shared = Module['_tuplesort_attach_shared'] = (a0, a1) => (_tuplesort_attach_shared = Module['_tuplesort_attach_shared'] = wasmExports['tuplesort_attach_shared'])(a0, a1);\nvar _BuildIndexInfo = Module['_BuildIndexInfo'] = (a0) => (_BuildIndexInfo = Module['_BuildIndexInfo'] = wasmExports['BuildIndexInfo'])(a0);\nvar _table_beginscan_parallel = Module['_table_beginscan_parallel'] = (a0, a1) => (_table_beginscan_parallel = Module['_table_beginscan_parallel'] = wasmExports['table_beginscan_parallel'])(a0, a1);\nvar _PageIndexTupleOverwrite = Module['_PageIndexTupleOverwrite'] = (a0, a1, a2, a3) => (_PageIndexTupleOverwrite = Module['_PageIndexTupleOverwrite'] = wasmExports['PageIndexTupleOverwrite'])(a0, a1, a2, a3);\nvar __bt_form_posting = Module['__bt_form_posting'] = (a0, a1, a2) => (__bt_form_posting = Module['__bt_form_posting'] = wasmExports['_bt_form_posting'])(a0, a1, a2);\nvar _PageGetExactFreeSpace = Module['_PageGetExactFreeSpace'] = (a0) => (_PageGetExactFreeSpace = Module['_PageGetExactFreeSpace'] = wasmExports['PageGetExactFreeSpace'])(a0);\nvar __bt_metaversion = Module['__bt_metaversion'] = (a0, a1, a2) => (__bt_metaversion = Module['__bt_metaversion'] = wasmExports['_bt_metaversion'])(a0, a1, a2);\nvar _index_getprocinfo = Module['_index_getprocinfo'] = (a0, a1, a2) => (_index_getprocinfo = Module['_index_getprocinfo'] = wasmExports['index_getprocinfo'])(a0, a1, a2);\nvar _ItemPointerEquals = Module['_ItemPointerEquals'] = (a0, a1) => (_ItemPointerEquals = Module['_ItemPointerEquals'] = wasmExports['ItemPointerEquals'])(a0, a1);\nvar __bt_check_natts = Module['__bt_check_natts'] = (a0, a1, a2, a3) => (__bt_check_natts = Module['__bt_check_natts'] = wasmExports['_bt_check_natts'])(a0, a1, a2, a3);\nvar _PageInit = Module['_PageInit'] = (a0, a1, a2) => (_PageInit = Module['_PageInit'] = wasmExports['PageInit'])(a0, a1, a2);\nvar _GetFreeIndexPage = Module['_GetFreeIndexPage'] = (a0) => (_GetFreeIndexPage = Module['_GetFreeIndexPage'] = wasmExports['GetFreeIndexPage'])(a0);\nvar _ConditionalLockBuffer = Module['_ConditionalLockBuffer'] = (a0) => (_ConditionalLockBuffer = Module['_ConditionalLockBuffer'] = wasmExports['ConditionalLockBuffer'])(a0);\nvar _ExtendBufferedRel = Module['_ExtendBufferedRel'] = (a0, a1, a2, a3) => (_ExtendBufferedRel = Module['_ExtendBufferedRel'] = wasmExports['ExtendBufferedRel'])(a0, a1, a2, a3);\nvar _PageIndexMultiDelete = Module['_PageIndexMultiDelete'] = (a0, a1, a2) => (_PageIndexMultiDelete = Module['_PageIndexMultiDelete'] = wasmExports['PageIndexMultiDelete'])(a0, a1, a2);\nvar _GetOldestNonRemovableTransactionId = Module['_GetOldestNonRemovableTransactionId'] = (a0) => (_GetOldestNonRemovableTransactionId = Module['_GetOldestNonRemovableTransactionId'] = wasmExports['GetOldestNonRemovableTransactionId'])(a0);\nvar _SearchSysCacheList = Module['_SearchSysCacheList'] = (a0, a1, a2, a3, a4) => (_SearchSysCacheList = Module['_SearchSysCacheList'] = wasmExports['SearchSysCacheList'])(a0, a1, a2, a3, a4);\nvar _check_amproc_signature = Module['_check_amproc_signature'] = (a0, a1, a2, a3, a4, a5) => (_check_amproc_signature = Module['_check_amproc_signature'] = wasmExports['check_amproc_signature'])(a0, a1, a2, a3, a4, a5);\nvar _check_amoptsproc_signature = Module['_check_amoptsproc_signature'] = (a0) => (_check_amoptsproc_signature = Module['_check_amoptsproc_signature'] = wasmExports['check_amoptsproc_signature'])(a0);\nvar _format_procedure = Module['_format_procedure'] = (a0) => (_format_procedure = Module['_format_procedure'] = wasmExports['format_procedure'])(a0);\nvar _format_operator = Module['_format_operator'] = (a0) => (_format_operator = Module['_format_operator'] = wasmExports['format_operator'])(a0);\nvar _check_amop_signature = Module['_check_amop_signature'] = (a0, a1, a2, a3) => (_check_amop_signature = Module['_check_amop_signature'] = wasmExports['check_amop_signature'])(a0, a1, a2, a3);\nvar _identify_opfamily_groups = Module['_identify_opfamily_groups'] = (a0, a1) => (_identify_opfamily_groups = Module['_identify_opfamily_groups'] = wasmExports['identify_opfamily_groups'])(a0, a1);\nvar _ReleaseCatCacheList = Module['_ReleaseCatCacheList'] = (a0) => (_ReleaseCatCacheList = Module['_ReleaseCatCacheList'] = wasmExports['ReleaseCatCacheList'])(a0);\nvar _TestForOldSnapshot_impl = Module['_TestForOldSnapshot_impl'] = (a0, a1) => (_TestForOldSnapshot_impl = Module['_TestForOldSnapshot_impl'] = wasmExports['TestForOldSnapshot_impl'])(a0, a1);\nvar _pgstat_assoc_relation = Module['_pgstat_assoc_relation'] = (a0) => (_pgstat_assoc_relation = Module['_pgstat_assoc_relation'] = wasmExports['pgstat_assoc_relation'])(a0);\nvar _XLogRecGetBlockRefInfo = Module['_XLogRecGetBlockRefInfo'] = (a0, a1, a2, a3, a4) => (_XLogRecGetBlockRefInfo = Module['_XLogRecGetBlockRefInfo'] = wasmExports['XLogRecGetBlockRefInfo'])(a0, a1, a2, a3, a4);\nvar _strncpy = Module['_strncpy'] = (a0, a1, a2) => (_strncpy = Module['_strncpy'] = wasmExports['strncpy'])(a0, a1, a2);\nvar _index_getprocid = Module['_index_getprocid'] = (a0, a1, a2) => (_index_getprocid = Module['_index_getprocid'] = wasmExports['index_getprocid'])(a0, a1, a2);\nvar _gistcheckpage = Module['_gistcheckpage'] = (a0, a1) => (_gistcheckpage = Module['_gistcheckpage'] = wasmExports['gistcheckpage'])(a0, a1);\nvar _FunctionCall1Coll = Module['_FunctionCall1Coll'] = (a0, a1, a2) => (_FunctionCall1Coll = Module['_FunctionCall1Coll'] = wasmExports['FunctionCall1Coll'])(a0, a1, a2);\nvar _pairingheap_remove_first = Module['_pairingheap_remove_first'] = (a0) => (_pairingheap_remove_first = Module['_pairingheap_remove_first'] = wasmExports['pairingheap_remove_first'])(a0);\nvar _pairingheap_add = Module['_pairingheap_add'] = (a0, a1) => (_pairingheap_add = Module['_pairingheap_add'] = wasmExports['pairingheap_add'])(a0, a1);\nvar _pow = Module['_pow'] = (a0, a1) => (_pow = Module['_pow'] = wasmExports['pow'])(a0, a1);\nvar _GenerationContextCreate = Module['_GenerationContextCreate'] = (a0, a1, a2, a3, a4) => (_GenerationContextCreate = Module['_GenerationContextCreate'] = wasmExports['GenerationContextCreate'])(a0, a1, a2, a3, a4);\nvar _float_overflow_error = Module['_float_overflow_error'] = () => (_float_overflow_error = Module['_float_overflow_error'] = wasmExports['float_overflow_error'])();\nvar _float_underflow_error = Module['_float_underflow_error'] = () => (_float_underflow_error = Module['_float_underflow_error'] = wasmExports['float_underflow_error'])();\nvar _DirectFunctionCall5Coll = Module['_DirectFunctionCall5Coll'] = (a0, a1, a2, a3, a4, a5, a6) => (_DirectFunctionCall5Coll = Module['_DirectFunctionCall5Coll'] = wasmExports['DirectFunctionCall5Coll'])(a0, a1, a2, a3, a4, a5, a6);\nvar _Float8GetDatum = Module['_Float8GetDatum'] = (a0) => (_Float8GetDatum = Module['_Float8GetDatum'] = wasmExports['Float8GetDatum'])(a0);\nvar _pairingheap_allocate = Module['_pairingheap_allocate'] = (a0, a1) => (_pairingheap_allocate = Module['_pairingheap_allocate'] = wasmExports['pairingheap_allocate'])(a0, a1);\nvar __hash_getbuf = Module['__hash_getbuf'] = (a0, a1, a2, a3) => (__hash_getbuf = Module['__hash_getbuf'] = wasmExports['_hash_getbuf'])(a0, a1, a2, a3);\nvar __hash_relbuf = Module['__hash_relbuf'] = (a0, a1) => (__hash_relbuf = Module['__hash_relbuf'] = wasmExports['_hash_relbuf'])(a0, a1);\nvar __hash_get_indextuple_hashkey = Module['__hash_get_indextuple_hashkey'] = (a0) => (__hash_get_indextuple_hashkey = Module['__hash_get_indextuple_hashkey'] = wasmExports['_hash_get_indextuple_hashkey'])(a0);\nvar __hash_getbuf_with_strategy = Module['__hash_getbuf_with_strategy'] = (a0, a1, a2, a3, a4) => (__hash_getbuf_with_strategy = Module['__hash_getbuf_with_strategy'] = wasmExports['_hash_getbuf_with_strategy'])(a0, a1, a2, a3, a4);\nvar _hash_bytes_extended = Module['_hash_bytes_extended'] = (a0, a1, a2) => (_hash_bytes_extended = Module['_hash_bytes_extended'] = wasmExports['hash_bytes_extended'])(a0, a1, a2);\nvar __hash_ovflblkno_to_bitno = Module['__hash_ovflblkno_to_bitno'] = (a0, a1) => (__hash_ovflblkno_to_bitno = Module['__hash_ovflblkno_to_bitno'] = wasmExports['_hash_ovflblkno_to_bitno'])(a0, a1);\nvar _pg_class_aclcheck = Module['_pg_class_aclcheck'] = (a0, a1, a2) => (_pg_class_aclcheck = Module['_pg_class_aclcheck'] = wasmExports['pg_class_aclcheck'])(a0, a1, a2);\nvar _ExecFetchSlotHeapTuple = Module['_ExecFetchSlotHeapTuple'] = (a0, a1, a2) => (_ExecFetchSlotHeapTuple = Module['_ExecFetchSlotHeapTuple'] = wasmExports['ExecFetchSlotHeapTuple'])(a0, a1, a2);\nvar _HeapTupleSatisfiesUpdate = Module['_HeapTupleSatisfiesUpdate'] = (a0, a1, a2) => (_HeapTupleSatisfiesUpdate = Module['_HeapTupleSatisfiesUpdate'] = wasmExports['HeapTupleSatisfiesUpdate'])(a0, a1, a2);\nvar _HeapTupleGetUpdateXid = Module['_HeapTupleGetUpdateXid'] = (a0) => (_HeapTupleGetUpdateXid = Module['_HeapTupleGetUpdateXid'] = wasmExports['HeapTupleGetUpdateXid'])(a0);\nvar _HeapTupleSatisfiesVacuum = Module['_HeapTupleSatisfiesVacuum'] = (a0, a1, a2) => (_HeapTupleSatisfiesVacuum = Module['_HeapTupleSatisfiesVacuum'] = wasmExports['HeapTupleSatisfiesVacuum'])(a0, a1, a2);\nvar _HeapTupleSatisfiesVisibility = Module['_HeapTupleSatisfiesVisibility'] = (a0, a1, a2) => (_HeapTupleSatisfiesVisibility = Module['_HeapTupleSatisfiesVisibility'] = wasmExports['HeapTupleSatisfiesVisibility'])(a0, a1, a2);\nvar _PageGetHeapFreeSpace = Module['_PageGetHeapFreeSpace'] = (a0) => (_PageGetHeapFreeSpace = Module['_PageGetHeapFreeSpace'] = wasmExports['PageGetHeapFreeSpace'])(a0);\nvar _ftruncate = Module['_ftruncate'] = (a0, a1) => (_ftruncate = Module['_ftruncate'] = wasmExports['ftruncate'])(a0, a1);\nvar _heap_getnext = Module['_heap_getnext'] = (a0, a1) => (_heap_getnext = Module['_heap_getnext'] = wasmExports['heap_getnext'])(a0, a1);\nvar _MakeSingleTupleTableSlot = Module['_MakeSingleTupleTableSlot'] = (a0, a1) => (_MakeSingleTupleTableSlot = Module['_MakeSingleTupleTableSlot'] = wasmExports['MakeSingleTupleTableSlot'])(a0, a1);\nvar _ExecStoreHeapTuple = Module['_ExecStoreHeapTuple'] = (a0, a1, a2) => (_ExecStoreHeapTuple = Module['_ExecStoreHeapTuple'] = wasmExports['ExecStoreHeapTuple'])(a0, a1, a2);\nvar _visibilitymap_pin = Module['_visibilitymap_pin'] = (a0, a1, a2) => (_visibilitymap_pin = Module['_visibilitymap_pin'] = wasmExports['visibilitymap_pin'])(a0, a1, a2);\nvar _visibilitymap_clear = Module['_visibilitymap_clear'] = (a0, a1, a2, a3) => (_visibilitymap_clear = Module['_visibilitymap_clear'] = wasmExports['visibilitymap_clear'])(a0, a1, a2, a3);\nvar _visibilitymap_get_status = Module['_visibilitymap_get_status'] = (a0, a1, a2) => (_visibilitymap_get_status = Module['_visibilitymap_get_status'] = wasmExports['visibilitymap_get_status'])(a0, a1, a2);\nvar _visibilitymap_prepare_truncate = Module['_visibilitymap_prepare_truncate'] = (a0, a1) => (_visibilitymap_prepare_truncate = Module['_visibilitymap_prepare_truncate'] = wasmExports['visibilitymap_prepare_truncate'])(a0, a1);\nvar _get_namespace_name = Module['_get_namespace_name'] = (a0) => (_get_namespace_name = Module['_get_namespace_name'] = wasmExports['get_namespace_name'])(a0);\nvar _vac_estimate_reltuples = Module['_vac_estimate_reltuples'] = (a0, a1, a2, a3) => (_vac_estimate_reltuples = Module['_vac_estimate_reltuples'] = wasmExports['vac_estimate_reltuples'])(a0, a1, a2, a3);\nvar _PrefetchBuffer = Module['_PrefetchBuffer'] = (a0, a1, a2, a3) => (_PrefetchBuffer = Module['_PrefetchBuffer'] = wasmExports['PrefetchBuffer'])(a0, a1, a2, a3);\nvar _WalUsageAccumDiff = Module['_WalUsageAccumDiff'] = (a0, a1, a2) => (_WalUsageAccumDiff = Module['_WalUsageAccumDiff'] = wasmExports['WalUsageAccumDiff'])(a0, a1, a2);\nvar _BufferUsageAccumDiff = Module['_BufferUsageAccumDiff'] = (a0, a1, a2) => (_BufferUsageAccumDiff = Module['_BufferUsageAccumDiff'] = wasmExports['BufferUsageAccumDiff'])(a0, a1, a2);\nvar _GetRecordedFreeSpace = Module['_GetRecordedFreeSpace'] = (a0, a1) => (_GetRecordedFreeSpace = Module['_GetRecordedFreeSpace'] = wasmExports['GetRecordedFreeSpace'])(a0, a1);\nvar _heap_tuple_needs_eventual_freeze = Module['_heap_tuple_needs_eventual_freeze'] = (a0) => (_heap_tuple_needs_eventual_freeze = Module['_heap_tuple_needs_eventual_freeze'] = wasmExports['heap_tuple_needs_eventual_freeze'])(a0);\nvar _GetAccessStrategy = Module['_GetAccessStrategy'] = (a0) => (_GetAccessStrategy = Module['_GetAccessStrategy'] = wasmExports['GetAccessStrategy'])(a0);\nvar _FreeAccessStrategy = Module['_FreeAccessStrategy'] = (a0) => (_FreeAccessStrategy = Module['_FreeAccessStrategy'] = wasmExports['FreeAccessStrategy'])(a0);\nvar _ginPostingListDecode = Module['_ginPostingListDecode'] = (a0, a1) => (_ginPostingListDecode = Module['_ginPostingListDecode'] = wasmExports['ginPostingListDecode'])(a0, a1);\nvar _LockPage = Module['_LockPage'] = (a0, a1, a2) => (_LockPage = Module['_LockPage'] = wasmExports['LockPage'])(a0, a1, a2);\nvar _UnlockPage = Module['_UnlockPage'] = (a0, a1, a2) => (_UnlockPage = Module['_UnlockPage'] = wasmExports['UnlockPage'])(a0, a1, a2);\nvar _object_ownercheck = Module['_object_ownercheck'] = (a0, a1, a2) => (_object_ownercheck = Module['_object_ownercheck'] = wasmExports['object_ownercheck'])(a0, a1, a2);\nvar _aclcheck_error = Module['_aclcheck_error'] = (a0, a1, a2) => (_aclcheck_error = Module['_aclcheck_error'] = wasmExports['aclcheck_error'])(a0, a1, a2);\nvar _FunctionCall4Coll = Module['_FunctionCall4Coll'] = (a0, a1, a2, a3, a4, a5) => (_FunctionCall4Coll = Module['_FunctionCall4Coll'] = wasmExports['FunctionCall4Coll'])(a0, a1, a2, a3, a4, a5);\nvar _varstr_cmp = Module['_varstr_cmp'] = (a0, a1, a2, a3, a4) => (_varstr_cmp = Module['_varstr_cmp'] = wasmExports['varstr_cmp'])(a0, a1, a2, a3, a4);\nvar _table_openrv = Module['_table_openrv'] = (a0, a1) => (_table_openrv = Module['_table_openrv'] = wasmExports['table_openrv'])(a0, a1);\nvar _get_fn_opclass_options = Module['_get_fn_opclass_options'] = (a0) => (_get_fn_opclass_options = Module['_get_fn_opclass_options'] = wasmExports['get_fn_opclass_options'])(a0);\nvar _pg_popcount = Module['_pg_popcount'] = (a0, a1) => (_pg_popcount = Module['_pg_popcount'] = wasmExports['pg_popcount'])(a0, a1);\nvar _brin_deform_tuple = Module['_brin_deform_tuple'] = (a0, a1, a2) => (_brin_deform_tuple = Module['_brin_deform_tuple'] = wasmExports['brin_deform_tuple'])(a0, a1, a2);\nvar _brin_build_desc = Module['_brin_build_desc'] = (a0) => (_brin_build_desc = Module['_brin_build_desc'] = wasmExports['brin_build_desc'])(a0);\nvar _IndexGetRelation = Module['_IndexGetRelation'] = (a0, a1) => (_IndexGetRelation = Module['_IndexGetRelation'] = wasmExports['IndexGetRelation'])(a0, a1);\nvar _brin_free_desc = Module['_brin_free_desc'] = (a0) => (_brin_free_desc = Module['_brin_free_desc'] = wasmExports['brin_free_desc'])(a0);\nvar _numeric_sub = Module['_numeric_sub'] = (a0) => (_numeric_sub = Module['_numeric_sub'] = wasmExports['numeric_sub'])(a0);\nvar _DirectFunctionCall1Coll = Module['_DirectFunctionCall1Coll'] = (a0, a1, a2) => (_DirectFunctionCall1Coll = Module['_DirectFunctionCall1Coll'] = wasmExports['DirectFunctionCall1Coll'])(a0, a1, a2);\nvar _cstring_to_text_with_len = Module['_cstring_to_text_with_len'] = (a0, a1) => (_cstring_to_text_with_len = Module['_cstring_to_text_with_len'] = wasmExports['cstring_to_text_with_len'])(a0, a1);\nvar _bbsink_forward_begin_backup = Module['_bbsink_forward_begin_backup'] = (a0) => (_bbsink_forward_begin_backup = Module['_bbsink_forward_begin_backup'] = wasmExports['bbsink_forward_begin_backup'])(a0);\nvar _bbsink_forward_begin_archive = Module['_bbsink_forward_begin_archive'] = (a0, a1) => (_bbsink_forward_begin_archive = Module['_bbsink_forward_begin_archive'] = wasmExports['bbsink_forward_begin_archive'])(a0, a1);\nvar _bbsink_forward_archive_contents = Module['_bbsink_forward_archive_contents'] = (a0, a1) => (_bbsink_forward_archive_contents = Module['_bbsink_forward_archive_contents'] = wasmExports['bbsink_forward_archive_contents'])(a0, a1);\nvar _bbsink_forward_end_archive = Module['_bbsink_forward_end_archive'] = (a0) => (_bbsink_forward_end_archive = Module['_bbsink_forward_end_archive'] = wasmExports['bbsink_forward_end_archive'])(a0);\nvar _bbsink_forward_begin_manifest = Module['_bbsink_forward_begin_manifest'] = (a0) => (_bbsink_forward_begin_manifest = Module['_bbsink_forward_begin_manifest'] = wasmExports['bbsink_forward_begin_manifest'])(a0);\nvar _bbsink_forward_manifest_contents = Module['_bbsink_forward_manifest_contents'] = (a0, a1) => (_bbsink_forward_manifest_contents = Module['_bbsink_forward_manifest_contents'] = wasmExports['bbsink_forward_manifest_contents'])(a0, a1);\nvar _bbsink_forward_end_manifest = Module['_bbsink_forward_end_manifest'] = (a0) => (_bbsink_forward_end_manifest = Module['_bbsink_forward_end_manifest'] = wasmExports['bbsink_forward_end_manifest'])(a0);\nvar _bbsink_forward_end_backup = Module['_bbsink_forward_end_backup'] = (a0, a1, a2) => (_bbsink_forward_end_backup = Module['_bbsink_forward_end_backup'] = wasmExports['bbsink_forward_end_backup'])(a0, a1, a2);\nvar _bbsink_forward_cleanup = Module['_bbsink_forward_cleanup'] = (a0) => (_bbsink_forward_cleanup = Module['_bbsink_forward_cleanup'] = wasmExports['bbsink_forward_cleanup'])(a0);\nvar _geteuid = Module['_geteuid'] = () => (_geteuid = Module['_geteuid'] = wasmExports['geteuid'])();\nvar _atoi = Module['_atoi'] = (a0) => (_atoi = Module['_atoi'] = wasmExports['atoi'])(a0);\nvar _pg_checksum_page = Module['_pg_checksum_page'] = (a0, a1) => (_pg_checksum_page = Module['_pg_checksum_page'] = wasmExports['pg_checksum_page'])(a0, a1);\nvar _escape_json = Module['_escape_json'] = (a0, a1) => (_escape_json = Module['_escape_json'] = wasmExports['escape_json'])(a0, a1);\nvar _BaseBackupAddTarget = Module['_BaseBackupAddTarget'] = (a0, a1, a2) => (_BaseBackupAddTarget = Module['_BaseBackupAddTarget'] = wasmExports['BaseBackupAddTarget'])(a0, a1, a2);\nvar _CreateDestReceiver = Module['_CreateDestReceiver'] = (a0) => (_CreateDestReceiver = Module['_CreateDestReceiver'] = wasmExports['CreateDestReceiver'])(a0);\nvar _has_privs_of_role = Module['_has_privs_of_role'] = (a0, a1) => (_has_privs_of_role = Module['_has_privs_of_role'] = wasmExports['has_privs_of_role'])(a0, a1);\nvar _list_make4_impl = Module['_list_make4_impl'] = (a0, a1, a2, a3, a4) => (_list_make4_impl = Module['_list_make4_impl'] = wasmExports['list_make4_impl'])(a0, a1, a2, a3, a4);\nvar _list_make5_impl = Module['_list_make5_impl'] = (a0, a1, a2, a3, a4, a5) => (_list_make5_impl = Module['_list_make5_impl'] = wasmExports['list_make5_impl'])(a0, a1, a2, a3, a4, a5);\nvar _lappend_xid = Module['_lappend_xid'] = (a0, a1) => (_lappend_xid = Module['_lappend_xid'] = wasmExports['lappend_xid'])(a0, a1);\nvar _list_member_xid = Module['_list_member_xid'] = (a0, a1) => (_list_member_xid = Module['_list_member_xid'] = wasmExports['list_member_xid'])(a0, a1);\nvar _list_delete = Module['_list_delete'] = (a0, a1) => (_list_delete = Module['_list_delete'] = wasmExports['list_delete'])(a0, a1);\nvar _CleanQuerytext = Module['_CleanQuerytext'] = (a0, a1, a2) => (_CleanQuerytext = Module['_CleanQuerytext'] = wasmExports['CleanQuerytext'])(a0, a1, a2);\nvar _scanner_isspace = Module['_scanner_isspace'] = (a0) => (_scanner_isspace = Module['_scanner_isspace'] = wasmExports['scanner_isspace'])(a0);\nvar _EnableQueryId = Module['_EnableQueryId'] = () => (_EnableQueryId = Module['_EnableQueryId'] = wasmExports['EnableQueryId'])();\nvar _get_rel_type_id = Module['_get_rel_type_id'] = (a0) => (_get_rel_type_id = Module['_get_rel_type_id'] = wasmExports['get_rel_type_id'])(a0);\nvar _makeRangeVar = Module['_makeRangeVar'] = (a0, a1, a2) => (_makeRangeVar = Module['_makeRangeVar'] = wasmExports['makeRangeVar'])(a0, a1, a2);\nvar _makeTypeName = Module['_makeTypeName'] = (a0) => (_makeTypeName = Module['_makeTypeName'] = wasmExports['makeTypeName'])(a0);\nvar _makeTypeNameFromNameList = Module['_makeTypeNameFromNameList'] = (a0) => (_makeTypeNameFromNameList = Module['_makeTypeNameFromNameList'] = wasmExports['makeTypeNameFromNameList'])(a0);\nvar _MemoryContextAllocExtended = Module['_MemoryContextAllocExtended'] = (a0, a1, a2) => (_MemoryContextAllocExtended = Module['_MemoryContextAllocExtended'] = wasmExports['MemoryContextAllocExtended'])(a0, a1, a2);\nvar _exprIsLengthCoercion = Module['_exprIsLengthCoercion'] = (a0, a1) => (_exprIsLengthCoercion = Module['_exprIsLengthCoercion'] = wasmExports['exprIsLengthCoercion'])(a0, a1);\nvar _strip_implicit_coercions = Module['_strip_implicit_coercions'] = (a0) => (_strip_implicit_coercions = Module['_strip_implicit_coercions'] = wasmExports['strip_implicit_coercions'])(a0);\nvar _exprLocation = Module['_exprLocation'] = (a0) => (_exprLocation = Module['_exprLocation'] = wasmExports['exprLocation'])(a0);\nvar _makeParamList = Module['_makeParamList'] = (a0) => (_makeParamList = Module['_makeParamList'] = wasmExports['makeParamList'])(a0);\nvar _appendStringInfoStringQuoted = Module['_appendStringInfoStringQuoted'] = (a0, a1, a2) => (_appendStringInfoStringQuoted = Module['_appendStringInfoStringQuoted'] = wasmExports['appendStringInfoStringQuoted'])(a0, a1, a2);\nvar _get_typcollation = Module['_get_typcollation'] = (a0) => (_get_typcollation = Module['_get_typcollation'] = wasmExports['get_typcollation'])(a0);\nvar _makeInteger = Module['_makeInteger'] = (a0) => (_makeInteger = Module['_makeInteger'] = wasmExports['makeInteger'])(a0);\nvar _makeBoolean = Module['_makeBoolean'] = (a0) => (_makeBoolean = Module['_makeBoolean'] = wasmExports['makeBoolean'])(a0);\nvar _GetForeignDataWrapper = Module['_GetForeignDataWrapper'] = (a0) => (_GetForeignDataWrapper = Module['_GetForeignDataWrapper'] = wasmExports['GetForeignDataWrapper'])(a0);\nvar _GetSysCacheOid = Module['_GetSysCacheOid'] = (a0, a1, a2, a3, a4, a5) => (_GetSysCacheOid = Module['_GetSysCacheOid'] = wasmExports['GetSysCacheOid'])(a0, a1, a2, a3, a4, a5);\nvar _GetForeignServer = Module['_GetForeignServer'] = (a0) => (_GetForeignServer = Module['_GetForeignServer'] = wasmExports['GetForeignServer'])(a0);\nvar _GetForeignServerExtended = Module['_GetForeignServerExtended'] = (a0, a1) => (_GetForeignServerExtended = Module['_GetForeignServerExtended'] = wasmExports['GetForeignServerExtended'])(a0, a1);\nvar _GetForeignServerByName = Module['_GetForeignServerByName'] = (a0, a1) => (_GetForeignServerByName = Module['_GetForeignServerByName'] = wasmExports['GetForeignServerByName'])(a0, a1);\nvar _GetUserMapping = Module['_GetUserMapping'] = (a0, a1) => (_GetUserMapping = Module['_GetUserMapping'] = wasmExports['GetUserMapping'])(a0, a1);\nvar _GetUserNameFromId = Module['_GetUserNameFromId'] = (a0, a1) => (_GetUserNameFromId = Module['_GetUserNameFromId'] = wasmExports['GetUserNameFromId'])(a0, a1);\nvar _GetForeignTable = Module['_GetForeignTable'] = (a0) => (_GetForeignTable = Module['_GetForeignTable'] = wasmExports['GetForeignTable'])(a0);\nvar _GetForeignColumnOptions = Module['_GetForeignColumnOptions'] = (a0, a1) => (_GetForeignColumnOptions = Module['_GetForeignColumnOptions'] = wasmExports['GetForeignColumnOptions'])(a0, a1);\nvar _initClosestMatch = Module['_initClosestMatch'] = (a0, a1, a2) => (_initClosestMatch = Module['_initClosestMatch'] = wasmExports['initClosestMatch'])(a0, a1, a2);\nvar _updateClosestMatch = Module['_updateClosestMatch'] = (a0, a1) => (_updateClosestMatch = Module['_updateClosestMatch'] = wasmExports['updateClosestMatch'])(a0, a1);\nvar _getClosestMatch = Module['_getClosestMatch'] = (a0) => (_getClosestMatch = Module['_getClosestMatch'] = wasmExports['getClosestMatch'])(a0);\nvar _GetExistingLocalJoinPath = Module['_GetExistingLocalJoinPath'] = (a0) => (_GetExistingLocalJoinPath = Module['_GetExistingLocalJoinPath'] = wasmExports['GetExistingLocalJoinPath'])(a0);\nvar _LWLockRegisterTranche = Module['_LWLockRegisterTranche'] = (a0, a1) => (_LWLockRegisterTranche = Module['_LWLockRegisterTranche'] = wasmExports['LWLockRegisterTranche'])(a0, a1);\nvar _GetNamedLWLockTranche = Module['_GetNamedLWLockTranche'] = (a0) => (_GetNamedLWLockTranche = Module['_GetNamedLWLockTranche'] = wasmExports['GetNamedLWLockTranche'])(a0);\nvar _LWLockNewTrancheId = Module['_LWLockNewTrancheId'] = () => (_LWLockNewTrancheId = Module['_LWLockNewTrancheId'] = wasmExports['LWLockNewTrancheId'])();\nvar _RequestNamedLWLockTranche = Module['_RequestNamedLWLockTranche'] = (a0, a1) => (_RequestNamedLWLockTranche = Module['_RequestNamedLWLockTranche'] = wasmExports['RequestNamedLWLockTranche'])(a0, a1);\nvar _resetStringInfo = Module['_resetStringInfo'] = (a0) => (_resetStringInfo = Module['_resetStringInfo'] = wasmExports['resetStringInfo'])(a0);\nvar _ShmemInitHash = Module['_ShmemInitHash'] = (a0, a1, a2, a3, a4) => (_ShmemInitHash = Module['_ShmemInitHash'] = wasmExports['ShmemInitHash'])(a0, a1, a2, a3, a4);\nvar _hash_estimate_size = Module['_hash_estimate_size'] = (a0, a1) => (_hash_estimate_size = Module['_hash_estimate_size'] = wasmExports['hash_estimate_size'])(a0, a1);\nvar _smgrread = Module['_smgrread'] = (a0, a1, a2, a3) => (_smgrread = Module['_smgrread'] = wasmExports['smgrread'])(a0, a1, a2, a3);\nvar _smgrtruncate = Module['_smgrtruncate'] = (a0, a1, a2, a3) => (_smgrtruncate = Module['_smgrtruncate'] = wasmExports['smgrtruncate'])(a0, a1, a2, a3);\nvar _BackendXidGetPid = Module['_BackendXidGetPid'] = (a0) => (_BackendXidGetPid = Module['_BackendXidGetPid'] = wasmExports['BackendXidGetPid'])(a0);\nvar _superuser = Module['_superuser'] = () => (_superuser = Module['_superuser'] = wasmExports['superuser'])();\nvar _fcntl = Module['_fcntl'] = (a0, a1, a2) => (_fcntl = Module['_fcntl'] = wasmExports['fcntl'])(a0, a1, a2);\nvar _AddWaitEventToSet = Module['_AddWaitEventToSet'] = (a0, a1, a2, a3, a4) => (_AddWaitEventToSet = Module['_AddWaitEventToSet'] = wasmExports['AddWaitEventToSet'])(a0, a1, a2, a3, a4);\nvar _poll = Module['_poll'] = (a0, a1, a2) => (_poll = Module['_poll'] = wasmExports['poll'])(a0, a1, a2);\nvar _WaitLatchOrSocket = Module['_WaitLatchOrSocket'] = (a0, a1, a2, a3, a4) => (_WaitLatchOrSocket = Module['_WaitLatchOrSocket'] = wasmExports['WaitLatchOrSocket'])(a0, a1, a2, a3, a4);\nvar _GetNumRegisteredWaitEvents = Module['_GetNumRegisteredWaitEvents'] = (a0) => (_GetNumRegisteredWaitEvents = Module['_GetNumRegisteredWaitEvents'] = wasmExports['GetNumRegisteredWaitEvents'])(a0);\nvar _RequestAddinShmemSpace = Module['_RequestAddinShmemSpace'] = (a0) => (_RequestAddinShmemSpace = Module['_RequestAddinShmemSpace'] = wasmExports['RequestAddinShmemSpace'])(a0);\nvar _procsignal_sigusr1_handler = Module['_procsignal_sigusr1_handler'] = (a0) => (_procsignal_sigusr1_handler = Module['_procsignal_sigusr1_handler'] = wasmExports['procsignal_sigusr1_handler'])(a0);\nvar _wasm_OpenPipeStream = Module['_wasm_OpenPipeStream'] = (a0, a1) => (_wasm_OpenPipeStream = Module['_wasm_OpenPipeStream'] = wasmExports['wasm_OpenPipeStream'])(a0, a1);\nvar _fopen = Module['_fopen'] = (a0, a1) => (_fopen = Module['_fopen'] = wasmExports['fopen'])(a0, a1);\nvar _fiprintf = Module['_fiprintf'] = (a0, a1, a2) => (_fiprintf = Module['_fiprintf'] = wasmExports['fiprintf'])(a0, a1, a2);\nvar _fclose = Module['_fclose'] = (a0) => (_fclose = Module['_fclose'] = wasmExports['fclose'])(a0);\nvar _fsync_fname_ext = Module['_fsync_fname_ext'] = (a0, a1, a2, a3) => (_fsync_fname_ext = Module['_fsync_fname_ext'] = wasmExports['fsync_fname_ext'])(a0, a1, a2, a3);\nvar _rename = Module['_rename'] = (a0, a1) => (_rename = Module['_rename'] = wasmExports['rename'])(a0, a1);\nvar _dup = Module['_dup'] = (a0) => (_dup = Module['_dup'] = wasmExports['dup'])(a0);\nvar _open = Module['_open'] = (a0, a1, a2) => (_open = Module['_open'] = wasmExports['open'])(a0, a1, a2);\nvar _AcquireExternalFD = Module['_AcquireExternalFD'] = () => (_AcquireExternalFD = Module['_AcquireExternalFD'] = wasmExports['AcquireExternalFD'])();\nvar _realloc = Module['_realloc'] = (a0, a1) => (_realloc = Module['_realloc'] = wasmExports['realloc'])(a0, a1);\nvar _pclose = Module['_pclose'] = (a0) => (_pclose = Module['_pclose'] = wasmExports['pclose'])(a0);\nvar _ClosePipeStream = Module['_ClosePipeStream'] = (a0) => (_ClosePipeStream = Module['_ClosePipeStream'] = wasmExports['ClosePipeStream'])(a0);\nvar _copy_file = Module['_copy_file'] = (a0, a1) => (_copy_file = Module['_copy_file'] = wasmExports['copy_file'])(a0, a1);\nvar _have_free_buffer = Module['_have_free_buffer'] = () => (_have_free_buffer = Module['_have_free_buffer'] = wasmExports['have_free_buffer'])();\nvar _LockBufHdr = Module['_LockBufHdr'] = (a0) => (_LockBufHdr = Module['_LockBufHdr'] = wasmExports['LockBufHdr'])(a0);\nvar _calloc = Module['_calloc'] = (a0, a1) => (_calloc = Module['_calloc'] = wasmExports['calloc'])(a0, a1);\nvar _pg_md5_encrypt = Module['_pg_md5_encrypt'] = (a0, a1, a2, a3, a4) => (_pg_md5_encrypt = Module['_pg_md5_encrypt'] = wasmExports['pg_md5_encrypt'])(a0, a1, a2, a3, a4);\nvar _plain_crypt_verify = Module['_plain_crypt_verify'] = (a0, a1, a2, a3) => (_plain_crypt_verify = Module['_plain_crypt_verify'] = wasmExports['plain_crypt_verify'])(a0, a1, a2, a3);\nvar _feof = Module['_feof'] = (a0) => (_feof = Module['_feof'] = wasmExports['feof'])(a0);\nvar _pg_strip_crlf = Module['_pg_strip_crlf'] = (a0) => (_pg_strip_crlf = Module['_pg_strip_crlf'] = wasmExports['pg_strip_crlf'])(a0);\nvar _pg_getaddrinfo_all = Module['_pg_getaddrinfo_all'] = (a0, a1, a2, a3) => (_pg_getaddrinfo_all = Module['_pg_getaddrinfo_all'] = wasmExports['pg_getaddrinfo_all'])(a0, a1, a2, a3);\nvar _pg_freeaddrinfo_all = Module['_pg_freeaddrinfo_all'] = (a0, a1) => (_pg_freeaddrinfo_all = Module['_pg_freeaddrinfo_all'] = wasmExports['pg_freeaddrinfo_all'])(a0, a1);\nvar _gai_strerror = Module['_gai_strerror'] = (a0) => (_gai_strerror = Module['_gai_strerror'] = wasmExports['gai_strerror'])(a0);\nvar _pg_mb2wchar_with_len = Module['_pg_mb2wchar_with_len'] = (a0, a1, a2) => (_pg_mb2wchar_with_len = Module['_pg_mb2wchar_with_len'] = wasmExports['pg_mb2wchar_with_len'])(a0, a1, a2);\nvar _pg_regcomp = Module['_pg_regcomp'] = (a0, a1, a2, a3, a4) => (_pg_regcomp = Module['_pg_regcomp'] = wasmExports['pg_regcomp'])(a0, a1, a2, a3, a4);\nvar _pg_regerror = Module['_pg_regerror'] = (a0, a1, a2, a3) => (_pg_regerror = Module['_pg_regerror'] = wasmExports['pg_regerror'])(a0, a1, a2, a3);\nvar _get_role_oid = Module['_get_role_oid'] = (a0, a1) => (_get_role_oid = Module['_get_role_oid'] = wasmExports['get_role_oid'])(a0, a1);\nvar _strcat = Module['_strcat'] = (a0, a1) => (_strcat = Module['_strcat'] = wasmExports['strcat'])(a0, a1);\nvar _pg_getnameinfo_all = Module['_pg_getnameinfo_all'] = (a0, a1, a2, a3, a4, a5, a6) => (_pg_getnameinfo_all = Module['_pg_getnameinfo_all'] = wasmExports['pg_getnameinfo_all'])(a0, a1, a2, a3, a4, a5, a6);\nvar _pg_strtoint32 = Module['_pg_strtoint32'] = (a0) => (_pg_strtoint32 = Module['_pg_strtoint32'] = wasmExports['pg_strtoint32'])(a0);\nvar _getpeereid = Module['_getpeereid'] = (a0, a1, a2) => (_getpeereid = Module['_getpeereid'] = wasmExports['getpeereid'])(a0, a1, a2);\nvar _socket = Module['_socket'] = (a0, a1, a2) => (_socket = Module['_socket'] = wasmExports['socket'])(a0, a1, a2);\nvar _connect = Module['_connect'] = (a0, a1, a2) => (_connect = Module['_connect'] = wasmExports['connect'])(a0, a1, a2);\nvar _send = Module['_send'] = (a0, a1, a2, a3) => (_send = Module['_send'] = wasmExports['send'])(a0, a1, a2, a3);\nvar _recv = Module['_recv'] = (a0, a1, a2, a3) => (_recv = Module['_recv'] = wasmExports['recv'])(a0, a1, a2, a3);\nvar _pq_sendtext = Module['_pq_sendtext'] = (a0, a1, a2) => (_pq_sendtext = Module['_pq_sendtext'] = wasmExports['pq_sendtext'])(a0, a1, a2);\nvar _pq_sendfloat4 = Module['_pq_sendfloat4'] = (a0, a1) => (_pq_sendfloat4 = Module['_pq_sendfloat4'] = wasmExports['pq_sendfloat4'])(a0, a1);\nvar _pq_sendfloat8 = Module['_pq_sendfloat8'] = (a0, a1) => (_pq_sendfloat8 = Module['_pq_sendfloat8'] = wasmExports['pq_sendfloat8'])(a0, a1);\nvar _pq_begintypsend = Module['_pq_begintypsend'] = (a0) => (_pq_begintypsend = Module['_pq_begintypsend'] = wasmExports['pq_begintypsend'])(a0);\nvar _pq_endtypsend = Module['_pq_endtypsend'] = (a0) => (_pq_endtypsend = Module['_pq_endtypsend'] = wasmExports['pq_endtypsend'])(a0);\nvar _pq_getmsgfloat4 = Module['_pq_getmsgfloat4'] = (a0) => (_pq_getmsgfloat4 = Module['_pq_getmsgfloat4'] = wasmExports['pq_getmsgfloat4'])(a0);\nvar _pq_getmsgfloat8 = Module['_pq_getmsgfloat8'] = (a0) => (_pq_getmsgfloat8 = Module['_pq_getmsgfloat8'] = wasmExports['pq_getmsgfloat8'])(a0);\nvar _pq_getmsgtext = Module['_pq_getmsgtext'] = (a0, a1, a2) => (_pq_getmsgtext = Module['_pq_getmsgtext'] = wasmExports['pq_getmsgtext'])(a0, a1, a2);\nvar _be_lo_unlink = Module['_be_lo_unlink'] = (a0) => (_be_lo_unlink = Module['_be_lo_unlink'] = wasmExports['be_lo_unlink'])(a0);\nvar _text_to_cstring_buffer = Module['_text_to_cstring_buffer'] = (a0, a1, a2) => (_text_to_cstring_buffer = Module['_text_to_cstring_buffer'] = wasmExports['text_to_cstring_buffer'])(a0, a1, a2);\nvar _explicit_bzero = Module['_explicit_bzero'] = (a0, a1) => (_explicit_bzero = Module['_explicit_bzero'] = wasmExports['explicit_bzero'])(a0, a1);\nvar _setsockopt = Module['_setsockopt'] = (a0, a1, a2, a3, a4) => (_setsockopt = Module['_setsockopt'] = wasmExports['setsockopt'])(a0, a1, a2, a3, a4);\nvar _getsockname = Module['_getsockname'] = (a0, a1, a2) => (_getsockname = Module['_getsockname'] = wasmExports['getsockname'])(a0, a1, a2);\nvar _pq_recvbuf_fill = Module['_pq_recvbuf_fill'] = (a0, a1) => (_pq_recvbuf_fill = Module['_pq_recvbuf_fill'] = wasmExports['pq_recvbuf_fill'])(a0, a1);\nvar _fread = Module['_fread'] = (a0, a1, a2, a3) => (_fread = Module['_fread'] = wasmExports['fread'])(a0, a1, a2, a3);\nvar _fwrite = Module['_fwrite'] = (a0, a1, a2, a3) => (_fwrite = Module['_fwrite'] = wasmExports['fwrite'])(a0, a1, a2, a3);\nvar _getsockopt = Module['_getsockopt'] = (a0, a1, a2, a3, a4) => (_getsockopt = Module['_getsockopt'] = wasmExports['getsockopt'])(a0, a1, a2, a3, a4);\nvar _sigemptyset = Module['_sigemptyset'] = (a0) => (_sigemptyset = Module['_sigemptyset'] = wasmExports['sigemptyset'])(a0);\nvar _pg_b64_enc_len = Module['_pg_b64_enc_len'] = (a0) => (_pg_b64_enc_len = Module['_pg_b64_enc_len'] = wasmExports['pg_b64_enc_len'])(a0);\nvar _pg_b64_encode = Module['_pg_b64_encode'] = (a0, a1, a2, a3) => (_pg_b64_encode = Module['_pg_b64_encode'] = wasmExports['pg_b64_encode'])(a0, a1, a2, a3);\nvar _pg_b64_dec_len = Module['_pg_b64_dec_len'] = (a0) => (_pg_b64_dec_len = Module['_pg_b64_dec_len'] = wasmExports['pg_b64_dec_len'])(a0);\nvar _pg_b64_decode = Module['_pg_b64_decode'] = (a0, a1, a2, a3) => (_pg_b64_decode = Module['_pg_b64_decode'] = wasmExports['pg_b64_decode'])(a0, a1, a2, a3);\nvar _pg_hmac_create = Module['_pg_hmac_create'] = (a0) => (_pg_hmac_create = Module['_pg_hmac_create'] = wasmExports['pg_hmac_create'])(a0);\nvar _pg_hmac_init = Module['_pg_hmac_init'] = (a0, a1, a2) => (_pg_hmac_init = Module['_pg_hmac_init'] = wasmExports['pg_hmac_init'])(a0, a1, a2);\nvar _pg_hmac_update = Module['_pg_hmac_update'] = (a0, a1, a2) => (_pg_hmac_update = Module['_pg_hmac_update'] = wasmExports['pg_hmac_update'])(a0, a1, a2);\nvar _pg_hmac_final = Module['_pg_hmac_final'] = (a0, a1, a2) => (_pg_hmac_final = Module['_pg_hmac_final'] = wasmExports['pg_hmac_final'])(a0, a1, a2);\nvar _pg_hmac_error = Module['_pg_hmac_error'] = (a0) => (_pg_hmac_error = Module['_pg_hmac_error'] = wasmExports['pg_hmac_error'])(a0);\nvar _pg_hmac_free = Module['_pg_hmac_free'] = (a0) => (_pg_hmac_free = Module['_pg_hmac_free'] = wasmExports['pg_hmac_free'])(a0);\nvar _scram_H = Module['_scram_H'] = (a0, a1, a2, a3, a4) => (_scram_H = Module['_scram_H'] = wasmExports['scram_H'])(a0, a1, a2, a3, a4);\nvar _pg_saslprep = Module['_pg_saslprep'] = (a0, a1) => (_pg_saslprep = Module['_pg_saslprep'] = wasmExports['pg_saslprep'])(a0, a1);\nvar _scram_build_secret = Module['_scram_build_secret'] = (a0, a1, a2, a3, a4, a5, a6) => (_scram_build_secret = Module['_scram_build_secret'] = wasmExports['scram_build_secret'])(a0, a1, a2, a3, a4, a5, a6);\nvar _scram_SaltedPassword = Module['_scram_SaltedPassword'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_scram_SaltedPassword = Module['_scram_SaltedPassword'] = wasmExports['scram_SaltedPassword'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _scram_ServerKey = Module['_scram_ServerKey'] = (a0, a1, a2, a3, a4) => (_scram_ServerKey = Module['_scram_ServerKey'] = wasmExports['scram_ServerKey'])(a0, a1, a2, a3, a4);\nvar _pg_initdb = Module['_pg_initdb'] = () => (_pg_initdb = Module['_pg_initdb'] = wasmExports['pg_initdb'])();\nvar _pg_initdb_main = Module['_pg_initdb_main'] = () => (_pg_initdb_main = Module['_pg_initdb_main'] = wasmExports['pg_initdb_main'])();\nvar ___cxa_throw = Module['___cxa_throw'] = (a0, a1, a2) => (___cxa_throw = Module['___cxa_throw'] = wasmExports['__cxa_throw'])(a0, a1, a2);\nvar _main_repl = Module['_main_repl'] = () => (_main_repl = Module['_main_repl'] = wasmExports['main_repl'])();\nvar _main = Module['_main'] = (a0, a1) => (_main = Module['_main'] = wasmExports['__main_argc_argv'])(a0, a1);\nvar _setenv = Module['_setenv'] = (a0, a1, a2) => (_setenv = Module['_setenv'] = wasmExports['setenv'])(a0, a1, a2);\nvar _pg_repl_raf = Module['_pg_repl_raf'] = () => (_pg_repl_raf = Module['_pg_repl_raf'] = wasmExports['pg_repl_raf'])();\nvar _bloom_create = Module['_bloom_create'] = (a0, a1, a2) => (_bloom_create = Module['_bloom_create'] = wasmExports['bloom_create'])(a0, a1, a2);\nvar _bloom_free = Module['_bloom_free'] = (a0) => (_bloom_free = Module['_bloom_free'] = wasmExports['bloom_free'])(a0);\nvar _bloom_add_element = Module['_bloom_add_element'] = (a0, a1, a2) => (_bloom_add_element = Module['_bloom_add_element'] = wasmExports['bloom_add_element'])(a0, a1, a2);\nvar _bloom_lacks_element = Module['_bloom_lacks_element'] = (a0, a1, a2) => (_bloom_lacks_element = Module['_bloom_lacks_element'] = wasmExports['bloom_lacks_element'])(a0, a1, a2);\nvar _bloom_prop_bits_set = Module['_bloom_prop_bits_set'] = (a0) => (_bloom_prop_bits_set = Module['_bloom_prop_bits_set'] = wasmExports['bloom_prop_bits_set'])(a0);\nvar _pairingheap_free = Module['_pairingheap_free'] = (a0) => (_pairingheap_free = Module['_pairingheap_free'] = wasmExports['pairingheap_free'])(a0);\nvar _pairingheap_first = Module['_pairingheap_first'] = (a0) => (_pairingheap_first = Module['_pairingheap_first'] = wasmExports['pairingheap_first'])(a0);\nvar _get_relkind_objtype = Module['_get_relkind_objtype'] = (a0) => (_get_relkind_objtype = Module['_get_relkind_objtype'] = wasmExports['get_relkind_objtype'])(a0);\nvar _coerce_to_target_type = Module['_coerce_to_target_type'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_coerce_to_target_type = Module['_coerce_to_target_type'] = wasmExports['coerce_to_target_type'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _t_isdigit = Module['_t_isdigit'] = (a0) => (_t_isdigit = Module['_t_isdigit'] = wasmExports['t_isdigit'])(a0);\nvar _pg_mblen = Module['_pg_mblen'] = (a0) => (_pg_mblen = Module['_pg_mblen'] = wasmExports['pg_mblen'])(a0);\nvar _t_isspace = Module['_t_isspace'] = (a0) => (_t_isspace = Module['_t_isspace'] = wasmExports['t_isspace'])(a0);\nvar _t_isalnum = Module['_t_isalnum'] = (a0) => (_t_isalnum = Module['_t_isalnum'] = wasmExports['t_isalnum'])(a0);\nvar _isalnum = Module['_isalnum'] = (a0) => (_isalnum = Module['_isalnum'] = wasmExports['isalnum'])(a0);\nvar _tsearch_readline_begin = Module['_tsearch_readline_begin'] = (a0, a1) => (_tsearch_readline_begin = Module['_tsearch_readline_begin'] = wasmExports['tsearch_readline_begin'])(a0, a1);\nvar _tsearch_readline = Module['_tsearch_readline'] = (a0) => (_tsearch_readline = Module['_tsearch_readline'] = wasmExports['tsearch_readline'])(a0);\nvar _pg_any_to_server = Module['_pg_any_to_server'] = (a0, a1, a2) => (_pg_any_to_server = Module['_pg_any_to_server'] = wasmExports['pg_any_to_server'])(a0, a1, a2);\nvar _tsearch_readline_end = Module['_tsearch_readline_end'] = (a0) => (_tsearch_readline_end = Module['_tsearch_readline_end'] = wasmExports['tsearch_readline_end'])(a0);\nvar _lowerstr = Module['_lowerstr'] = (a0) => (_lowerstr = Module['_lowerstr'] = wasmExports['lowerstr'])(a0);\nvar _lowerstr_with_len = Module['_lowerstr_with_len'] = (a0, a1) => (_lowerstr_with_len = Module['_lowerstr_with_len'] = wasmExports['lowerstr_with_len'])(a0, a1);\nvar _pg_database_encoding_max_length = Module['_pg_database_encoding_max_length'] = () => (_pg_database_encoding_max_length = Module['_pg_database_encoding_max_length'] = wasmExports['pg_database_encoding_max_length'])();\nvar _tolower = Module['_tolower'] = (a0) => (_tolower = Module['_tolower'] = wasmExports['tolower'])(a0);\nvar _readstoplist = Module['_readstoplist'] = (a0, a1, a2) => (_readstoplist = Module['_readstoplist'] = wasmExports['readstoplist'])(a0, a1, a2);\nvar _searchstoplist = Module['_searchstoplist'] = (a0, a1) => (_searchstoplist = Module['_searchstoplist'] = wasmExports['searchstoplist'])(a0, a1);\nvar _get_tsearch_config_filename = Module['_get_tsearch_config_filename'] = (a0, a1) => (_get_tsearch_config_filename = Module['_get_tsearch_config_filename'] = wasmExports['get_tsearch_config_filename'])(a0, a1);\nvar _pnstrdup = Module['_pnstrdup'] = (a0, a1) => (_pnstrdup = Module['_pnstrdup'] = wasmExports['pnstrdup'])(a0, a1);\nvar _textToQualifiedNameList = Module['_textToQualifiedNameList'] = (a0) => (_textToQualifiedNameList = Module['_textToQualifiedNameList'] = wasmExports['textToQualifiedNameList'])(a0);\nvar _DirectFunctionCall4Coll = Module['_DirectFunctionCall4Coll'] = (a0, a1, a2, a3, a4, a5) => (_DirectFunctionCall4Coll = Module['_DirectFunctionCall4Coll'] = wasmExports['DirectFunctionCall4Coll'])(a0, a1, a2, a3, a4, a5);\nvar _lookup_ts_dictionary_cache = Module['_lookup_ts_dictionary_cache'] = (a0) => (_lookup_ts_dictionary_cache = Module['_lookup_ts_dictionary_cache'] = wasmExports['lookup_ts_dictionary_cache'])(a0);\nvar _isxdigit = Module['_isxdigit'] = (a0) => (_isxdigit = Module['_isxdigit'] = wasmExports['isxdigit'])(a0);\nvar _get_restriction_variable = Module['_get_restriction_variable'] = (a0, a1, a2, a3, a4, a5) => (_get_restriction_variable = Module['_get_restriction_variable'] = wasmExports['get_restriction_variable'])(a0, a1, a2, a3, a4, a5);\nvar _get_attstatsslot = Module['_get_attstatsslot'] = (a0, a1, a2, a3, a4) => (_get_attstatsslot = Module['_get_attstatsslot'] = wasmExports['get_attstatsslot'])(a0, a1, a2, a3, a4);\nvar _free_attstatsslot = Module['_free_attstatsslot'] = (a0) => (_free_attstatsslot = Module['_free_attstatsslot'] = wasmExports['free_attstatsslot'])(a0);\nvar _construct_array_builtin = Module['_construct_array_builtin'] = (a0, a1, a2) => (_construct_array_builtin = Module['_construct_array_builtin'] = wasmExports['construct_array_builtin'])(a0, a1, a2);\nvar _LookupTypeName = Module['_LookupTypeName'] = (a0, a1, a2, a3) => (_LookupTypeName = Module['_LookupTypeName'] = wasmExports['LookupTypeName'])(a0, a1, a2, a3);\nvar _NameListToString = Module['_NameListToString'] = (a0) => (_NameListToString = Module['_NameListToString'] = wasmExports['NameListToString'])(a0);\nvar _get_collation_oid = Module['_get_collation_oid'] = (a0, a1) => (_get_collation_oid = Module['_get_collation_oid'] = wasmExports['get_collation_oid'])(a0, a1);\nvar _typeStringToTypeName = Module['_typeStringToTypeName'] = (a0, a1) => (_typeStringToTypeName = Module['_typeStringToTypeName'] = wasmExports['typeStringToTypeName'])(a0, a1);\nvar _raw_parser = Module['_raw_parser'] = (a0, a1) => (_raw_parser = Module['_raw_parser'] = wasmExports['raw_parser'])(a0, a1);\nvar _errsave_start = Module['_errsave_start'] = (a0, a1) => (_errsave_start = Module['_errsave_start'] = wasmExports['errsave_start'])(a0, a1);\nvar _errsave_finish = Module['_errsave_finish'] = (a0, a1, a2, a3) => (_errsave_finish = Module['_errsave_finish'] = wasmExports['errsave_finish'])(a0, a1, a2, a3);\nvar _transformExpr = Module['_transformExpr'] = (a0, a1, a2) => (_transformExpr = Module['_transformExpr'] = wasmExports['transformExpr'])(a0, a1, a2);\nvar _get_base_element_type = Module['_get_base_element_type'] = (a0) => (_get_base_element_type = Module['_get_base_element_type'] = wasmExports['get_base_element_type'])(a0);\nvar _lookup_rowtype_tupdesc = Module['_lookup_rowtype_tupdesc'] = (a0, a1) => (_lookup_rowtype_tupdesc = Module['_lookup_rowtype_tupdesc'] = wasmExports['lookup_rowtype_tupdesc'])(a0, a1);\nvar _quote_qualified_identifier = Module['_quote_qualified_identifier'] = (a0, a1) => (_quote_qualified_identifier = Module['_quote_qualified_identifier'] = wasmExports['quote_qualified_identifier'])(a0, a1);\nvar _get_attname = Module['_get_attname'] = (a0, a1, a2) => (_get_attname = Module['_get_attname'] = wasmExports['get_attname'])(a0, a1, a2);\nvar _get_rel_namespace = Module['_get_rel_namespace'] = (a0) => (_get_rel_namespace = Module['_get_rel_namespace'] = wasmExports['get_rel_namespace'])(a0);\nvar _makeRangeVarFromNameList = Module['_makeRangeVarFromNameList'] = (a0) => (_makeRangeVarFromNameList = Module['_makeRangeVarFromNameList'] = wasmExports['makeRangeVarFromNameList'])(a0);\nvar _varstr_levenshtein_less_equal = Module['_varstr_levenshtein_less_equal'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => (_varstr_levenshtein_less_equal = Module['_varstr_levenshtein_less_equal'] = wasmExports['varstr_levenshtein_less_equal'])(a0, a1, a2, a3, a4, a5, a6, a7, a8);\nvar _core_yylex = Module['_core_yylex'] = (a0, a1, a2) => (_core_yylex = Module['_core_yylex'] = wasmExports['core_yylex'])(a0, a1, a2);\nvar _pg_mbstrlen_with_len = Module['_pg_mbstrlen_with_len'] = (a0, a1) => (_pg_mbstrlen_with_len = Module['_pg_mbstrlen_with_len'] = wasmExports['pg_mbstrlen_with_len'])(a0, a1);\nvar _truncate_identifier = Module['_truncate_identifier'] = (a0, a1, a2) => (_truncate_identifier = Module['_truncate_identifier'] = wasmExports['truncate_identifier'])(a0, a1, a2);\nvar _downcase_truncate_identifier = Module['_downcase_truncate_identifier'] = (a0, a1, a2) => (_downcase_truncate_identifier = Module['_downcase_truncate_identifier'] = wasmExports['downcase_truncate_identifier'])(a0, a1, a2);\nvar _getc = Module['_getc'] = (a0) => (_getc = Module['_getc'] = wasmExports['getc'])(a0);\nvar _clearerr = Module['_clearerr'] = (a0) => (_clearerr = Module['_clearerr'] = wasmExports['clearerr'])(a0);\nvar _scanner_init = Module['_scanner_init'] = (a0, a1, a2, a3) => (_scanner_init = Module['_scanner_init'] = wasmExports['scanner_init'])(a0, a1, a2, a3);\nvar _scanner_finish = Module['_scanner_finish'] = (a0) => (_scanner_finish = Module['_scanner_finish'] = wasmExports['scanner_finish'])(a0);\nvar _bit_in = Module['_bit_in'] = (a0) => (_bit_in = Module['_bit_in'] = wasmExports['bit_in'])(a0);\nvar _construct_array = Module['_construct_array'] = (a0, a1, a2, a3, a4, a5) => (_construct_array = Module['_construct_array'] = wasmExports['construct_array'])(a0, a1, a2, a3, a4, a5);\nvar _canonicalize_path = Module['_canonicalize_path'] = (a0) => (_canonicalize_path = Module['_canonicalize_path'] = wasmExports['canonicalize_path'])(a0);\nvar _path_is_prefix_of_path = Module['_path_is_prefix_of_path'] = (a0, a1) => (_path_is_prefix_of_path = Module['_path_is_prefix_of_path'] = wasmExports['path_is_prefix_of_path'])(a0, a1);\nvar _namein = Module['_namein'] = (a0) => (_namein = Module['_namein'] = wasmExports['namein'])(a0);\nvar _SetTuplestoreDestReceiverParams = Module['_SetTuplestoreDestReceiverParams'] = (a0, a1, a2, a3, a4, a5) => (_SetTuplestoreDestReceiverParams = Module['_SetTuplestoreDestReceiverParams'] = wasmExports['SetTuplestoreDestReceiverParams'])(a0, a1, a2, a3, a4, a5);\nvar _MemoryContextDeleteChildren = Module['_MemoryContextDeleteChildren'] = (a0) => (_MemoryContextDeleteChildren = Module['_MemoryContextDeleteChildren'] = wasmExports['MemoryContextDeleteChildren'])(a0);\nvar _set_config_option = Module['_set_config_option'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_set_config_option = Module['_set_config_option'] = wasmExports['set_config_option'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _ReleaseCachedPlan = Module['_ReleaseCachedPlan'] = (a0, a1) => (_ReleaseCachedPlan = Module['_ReleaseCachedPlan'] = wasmExports['ReleaseCachedPlan'])(a0, a1);\nvar _tuplestore_begin_heap = Module['_tuplestore_begin_heap'] = (a0, a1, a2) => (_tuplestore_begin_heap = Module['_tuplestore_begin_heap'] = wasmExports['tuplestore_begin_heap'])(a0, a1, a2);\nvar _ExecForceStoreHeapTuple = Module['_ExecForceStoreHeapTuple'] = (a0, a1, a2) => (_ExecForceStoreHeapTuple = Module['_ExecForceStoreHeapTuple'] = wasmExports['ExecForceStoreHeapTuple'])(a0, a1, a2);\nvar _tuplestore_end = Module['_tuplestore_end'] = (a0) => (_tuplestore_end = Module['_tuplestore_end'] = wasmExports['tuplestore_end'])(a0);\nvar _strtod = Module['_strtod'] = (a0, a1) => (_strtod = Module['_strtod'] = wasmExports['strtod'])(a0, a1);\nvar _pg_encoding_to_char_private = Module['_pg_encoding_to_char_private'] = (a0) => (_pg_encoding_to_char_private = Module['_pg_encoding_to_char_private'] = wasmExports['pg_encoding_to_char_private'])(a0);\nvar _GetDatabaseEncodingName = Module['_GetDatabaseEncodingName'] = () => (_GetDatabaseEncodingName = Module['_GetDatabaseEncodingName'] = wasmExports['GetDatabaseEncodingName'])();\nvar _pg_is_ascii = Module['_pg_is_ascii'] = (a0) => (_pg_is_ascii = Module['_pg_is_ascii'] = wasmExports['pg_is_ascii'])(a0);\nvar _pg_get_encoding_from_locale = Module['_pg_get_encoding_from_locale'] = (a0, a1) => (_pg_get_encoding_from_locale = Module['_pg_get_encoding_from_locale'] = wasmExports['pg_get_encoding_from_locale'])(a0, a1);\nvar _pg_encoding_max_length = Module['_pg_encoding_max_length'] = (a0) => (_pg_encoding_max_length = Module['_pg_encoding_max_length'] = wasmExports['pg_encoding_max_length'])(a0);\nvar _report_invalid_encoding = Module['_report_invalid_encoding'] = (a0, a1, a2) => (_report_invalid_encoding = Module['_report_invalid_encoding'] = wasmExports['report_invalid_encoding'])(a0, a1, a2);\nvar _NextCopyFrom = Module['_NextCopyFrom'] = (a0, a1, a2, a3) => (_NextCopyFrom = Module['_NextCopyFrom'] = wasmExports['NextCopyFrom'])(a0, a1, a2, a3);\nvar _InputFunctionCall = Module['_InputFunctionCall'] = (a0, a1, a2, a3) => (_InputFunctionCall = Module['_InputFunctionCall'] = wasmExports['InputFunctionCall'])(a0, a1, a2, a3);\nvar _defGetStreamingMode = Module['_defGetStreamingMode'] = (a0) => (_defGetStreamingMode = Module['_defGetStreamingMode'] = wasmExports['defGetStreamingMode'])(a0);\nvar _pg_lsn_in = Module['_pg_lsn_in'] = (a0) => (_pg_lsn_in = Module['_pg_lsn_in'] = wasmExports['pg_lsn_in'])(a0);\nvar _quote_identifier = Module['_quote_identifier'] = (a0) => (_quote_identifier = Module['_quote_identifier'] = wasmExports['quote_identifier'])(a0);\nvar _quote_literal_cstr = Module['_quote_literal_cstr'] = (a0) => (_quote_literal_cstr = Module['_quote_literal_cstr'] = wasmExports['quote_literal_cstr'])(a0);\nvar _SPI_connect = Module['_SPI_connect'] = () => (_SPI_connect = Module['_SPI_connect'] = wasmExports['SPI_connect'])();\nvar _SPI_exec = Module['_SPI_exec'] = (a0, a1) => (_SPI_exec = Module['_SPI_exec'] = wasmExports['SPI_exec'])(a0, a1);\nvar _SPI_execute = Module['_SPI_execute'] = (a0, a1, a2) => (_SPI_execute = Module['_SPI_execute'] = wasmExports['SPI_execute'])(a0, a1, a2);\nvar _SPI_getvalue = Module['_SPI_getvalue'] = (a0, a1, a2) => (_SPI_getvalue = Module['_SPI_getvalue'] = wasmExports['SPI_getvalue'])(a0, a1, a2);\nvar _SPI_finish = Module['_SPI_finish'] = () => (_SPI_finish = Module['_SPI_finish'] = wasmExports['SPI_finish'])();\nvar _pg_char_to_encoding_private = Module['_pg_char_to_encoding_private'] = (a0) => (_pg_char_to_encoding_private = Module['_pg_char_to_encoding_private'] = wasmExports['pg_char_to_encoding_private'])(a0);\nvar _BlockSampler_Init = Module['_BlockSampler_Init'] = (a0, a1, a2, a3) => (_BlockSampler_Init = Module['_BlockSampler_Init'] = wasmExports['BlockSampler_Init'])(a0, a1, a2, a3);\nvar _reservoir_init_selection_state = Module['_reservoir_init_selection_state'] = (a0, a1) => (_reservoir_init_selection_state = Module['_reservoir_init_selection_state'] = wasmExports['reservoir_init_selection_state'])(a0, a1);\nvar _BlockSampler_HasMore = Module['_BlockSampler_HasMore'] = (a0) => (_BlockSampler_HasMore = Module['_BlockSampler_HasMore'] = wasmExports['BlockSampler_HasMore'])(a0);\nvar _BlockSampler_Next = Module['_BlockSampler_Next'] = (a0) => (_BlockSampler_Next = Module['_BlockSampler_Next'] = wasmExports['BlockSampler_Next'])(a0);\nvar _reservoir_get_next_S = Module['_reservoir_get_next_S'] = (a0, a1, a2) => (_reservoir_get_next_S = Module['_reservoir_get_next_S'] = wasmExports['reservoir_get_next_S'])(a0, a1, a2);\nvar _sampler_random_fract = Module['_sampler_random_fract'] = (a0) => (_sampler_random_fract = Module['_sampler_random_fract'] = wasmExports['sampler_random_fract'])(a0);\nvar _ProcessConfigFile = Module['_ProcessConfigFile'] = (a0) => (_ProcessConfigFile = Module['_ProcessConfigFile'] = wasmExports['ProcessConfigFile'])(a0);\nvar _nextval = Module['_nextval'] = (a0) => (_nextval = Module['_nextval'] = wasmExports['nextval'])(a0);\nvar _ProcessCopyOptions = Module['_ProcessCopyOptions'] = (a0, a1, a2, a3) => (_ProcessCopyOptions = Module['_ProcessCopyOptions'] = wasmExports['ProcessCopyOptions'])(a0, a1, a2, a3);\nvar _pg_server_to_any = Module['_pg_server_to_any'] = (a0, a1, a2) => (_pg_server_to_any = Module['_pg_server_to_any'] = wasmExports['pg_server_to_any'])(a0, a1, a2);\nvar _pg_encoding_mblen = Module['_pg_encoding_mblen'] = (a0, a1) => (_pg_encoding_mblen = Module['_pg_encoding_mblen'] = wasmExports['pg_encoding_mblen'])(a0, a1);\nvar _GetTopMostAncestorInPublication = Module['_GetTopMostAncestorInPublication'] = (a0, a1, a2) => (_GetTopMostAncestorInPublication = Module['_GetTopMostAncestorInPublication'] = wasmExports['GetTopMostAncestorInPublication'])(a0, a1, a2);\nvar _pub_collist_to_bitmapset = Module['_pub_collist_to_bitmapset'] = (a0, a1, a2) => (_pub_collist_to_bitmapset = Module['_pub_collist_to_bitmapset'] = wasmExports['pub_collist_to_bitmapset'])(a0, a1, a2);\nvar _get_typtype = Module['_get_typtype'] = (a0) => (_get_typtype = Module['_get_typtype'] = wasmExports['get_typtype'])(a0);\nvar _Async_Notify = Module['_Async_Notify'] = (a0, a1) => (_Async_Notify = Module['_Async_Notify'] = wasmExports['Async_Notify'])(a0, a1);\nvar _ExplainBeginOutput = Module['_ExplainBeginOutput'] = (a0) => (_ExplainBeginOutput = Module['_ExplainBeginOutput'] = wasmExports['ExplainBeginOutput'])(a0);\nvar _NewExplainState = Module['_NewExplainState'] = () => (_NewExplainState = Module['_NewExplainState'] = wasmExports['NewExplainState'])();\nvar _ExplainEndOutput = Module['_ExplainEndOutput'] = (a0) => (_ExplainEndOutput = Module['_ExplainEndOutput'] = wasmExports['ExplainEndOutput'])(a0);\nvar _appendStringInfoSpaces = Module['_appendStringInfoSpaces'] = (a0, a1) => (_appendStringInfoSpaces = Module['_appendStringInfoSpaces'] = wasmExports['appendStringInfoSpaces'])(a0, a1);\nvar _ExplainPrintPlan = Module['_ExplainPrintPlan'] = (a0, a1) => (_ExplainPrintPlan = Module['_ExplainPrintPlan'] = wasmExports['ExplainPrintPlan'])(a0, a1);\nvar _ExplainPrintTriggers = Module['_ExplainPrintTriggers'] = (a0, a1) => (_ExplainPrintTriggers = Module['_ExplainPrintTriggers'] = wasmExports['ExplainPrintTriggers'])(a0, a1);\nvar _ExplainPrintJITSummary = Module['_ExplainPrintJITSummary'] = (a0, a1) => (_ExplainPrintJITSummary = Module['_ExplainPrintJITSummary'] = wasmExports['ExplainPrintJITSummary'])(a0, a1);\nvar _InstrEndLoop = Module['_InstrEndLoop'] = (a0) => (_InstrEndLoop = Module['_InstrEndLoop'] = wasmExports['InstrEndLoop'])(a0);\nvar _ExplainPropertyInteger = Module['_ExplainPropertyInteger'] = (a0, a1, a2, a3) => (_ExplainPropertyInteger = Module['_ExplainPropertyInteger'] = wasmExports['ExplainPropertyInteger'])(a0, a1, a2, a3);\nvar _ExplainQueryText = Module['_ExplainQueryText'] = (a0, a1) => (_ExplainQueryText = Module['_ExplainQueryText'] = wasmExports['ExplainQueryText'])(a0, a1);\nvar _ExplainPropertyText = Module['_ExplainPropertyText'] = (a0, a1, a2) => (_ExplainPropertyText = Module['_ExplainPropertyText'] = wasmExports['ExplainPropertyText'])(a0, a1, a2);\nvar _ExplainQueryParameters = Module['_ExplainQueryParameters'] = (a0, a1, a2) => (_ExplainQueryParameters = Module['_ExplainQueryParameters'] = wasmExports['ExplainQueryParameters'])(a0, a1, a2);\nvar _get_namespace_name_or_temp = Module['_get_namespace_name_or_temp'] = (a0) => (_get_namespace_name_or_temp = Module['_get_namespace_name_or_temp'] = wasmExports['get_namespace_name_or_temp'])(a0);\nvar _get_func_namespace = Module['_get_func_namespace'] = (a0) => (_get_func_namespace = Module['_get_func_namespace'] = wasmExports['get_func_namespace'])(a0);\nvar _construct_empty_array = Module['_construct_empty_array'] = (a0) => (_construct_empty_array = Module['_construct_empty_array'] = wasmExports['construct_empty_array'])(a0);\nvar _GetCommandTagName = Module['_GetCommandTagName'] = (a0) => (_GetCommandTagName = Module['_GetCommandTagName'] = wasmExports['GetCommandTagName'])(a0);\nvar _CreateExprContext = Module['_CreateExprContext'] = (a0) => (_CreateExprContext = Module['_CreateExprContext'] = wasmExports['CreateExprContext'])(a0);\nvar _EnsurePortalSnapshotExists = Module['_EnsurePortalSnapshotExists'] = () => (_EnsurePortalSnapshotExists = Module['_EnsurePortalSnapshotExists'] = wasmExports['EnsurePortalSnapshotExists'])();\nvar _BeginCopyFrom = Module['_BeginCopyFrom'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_BeginCopyFrom = Module['_BeginCopyFrom'] = wasmExports['BeginCopyFrom'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _EndCopyFrom = Module['_EndCopyFrom'] = (a0) => (_EndCopyFrom = Module['_EndCopyFrom'] = wasmExports['EndCopyFrom'])(a0);\nvar _get_extension_oid = Module['_get_extension_oid'] = (a0, a1) => (_get_extension_oid = Module['_get_extension_oid'] = wasmExports['get_extension_oid'])(a0, a1);\nvar _strrchr = Module['_strrchr'] = (a0, a1) => (_strrchr = Module['_strrchr'] = wasmExports['strrchr'])(a0, a1);\nvar _getExtensionOfObject = Module['_getExtensionOfObject'] = (a0, a1) => (_getExtensionOfObject = Module['_getExtensionOfObject'] = wasmExports['getExtensionOfObject'])(a0, a1);\nvar _GetRelationPublications = Module['_GetRelationPublications'] = (a0) => (_GetRelationPublications = Module['_GetRelationPublications'] = wasmExports['GetRelationPublications'])(a0);\nvar _ExecStoreAllNullTuple = Module['_ExecStoreAllNullTuple'] = (a0) => (_ExecStoreAllNullTuple = Module['_ExecStoreAllNullTuple'] = wasmExports['ExecStoreAllNullTuple'])(a0);\nvar _CopyFromErrorCallback = Module['_CopyFromErrorCallback'] = (a0) => (_CopyFromErrorCallback = Module['_CopyFromErrorCallback'] = wasmExports['CopyFromErrorCallback'])(a0);\nvar _ExecInitRangeTable = Module['_ExecInitRangeTable'] = (a0, a1, a2) => (_ExecInitRangeTable = Module['_ExecInitRangeTable'] = wasmExports['ExecInitRangeTable'])(a0, a1, a2);\nvar _format_type_extended = Module['_format_type_extended'] = (a0, a1, a2) => (_format_type_extended = Module['_format_type_extended'] = wasmExports['format_type_extended'])(a0, a1, a2);\nvar _ExecReScan = Module['_ExecReScan'] = (a0) => (_ExecReScan = Module['_ExecReScan'] = wasmExports['ExecReScan'])(a0);\nvar _ExecInitExprList = Module['_ExecInitExprList'] = (a0, a1) => (_ExecInitExprList = Module['_ExecInitExprList'] = wasmExports['ExecInitExprList'])(a0, a1);\nvar _InstrAlloc = Module['_InstrAlloc'] = (a0, a1, a2) => (_InstrAlloc = Module['_InstrAlloc'] = wasmExports['InstrAlloc'])(a0, a1, a2);\nvar _standard_ExecutorStart = Module['_standard_ExecutorStart'] = (a0, a1) => (_standard_ExecutorStart = Module['_standard_ExecutorStart'] = wasmExports['standard_ExecutorStart'])(a0, a1);\nvar _standard_ExecutorRun = Module['_standard_ExecutorRun'] = (a0, a1, a2, a3) => (_standard_ExecutorRun = Module['_standard_ExecutorRun'] = wasmExports['standard_ExecutorRun'])(a0, a1, a2, a3);\nvar _standard_ExecutorFinish = Module['_standard_ExecutorFinish'] = (a0) => (_standard_ExecutorFinish = Module['_standard_ExecutorFinish'] = wasmExports['standard_ExecutorFinish'])(a0);\nvar _standard_ExecutorEnd = Module['_standard_ExecutorEnd'] = (a0) => (_standard_ExecutorEnd = Module['_standard_ExecutorEnd'] = wasmExports['standard_ExecutorEnd'])(a0);\nvar _get_partition_ancestors = Module['_get_partition_ancestors'] = (a0) => (_get_partition_ancestors = Module['_get_partition_ancestors'] = wasmExports['get_partition_ancestors'])(a0);\nvar _MakeTupleTableSlot = Module['_MakeTupleTableSlot'] = (a0, a1) => (_MakeTupleTableSlot = Module['_MakeTupleTableSlot'] = wasmExports['MakeTupleTableSlot'])(a0, a1);\nvar _ExecFindJunkAttributeInTlist = Module['_ExecFindJunkAttributeInTlist'] = (a0, a1) => (_ExecFindJunkAttributeInTlist = Module['_ExecFindJunkAttributeInTlist'] = wasmExports['ExecFindJunkAttributeInTlist'])(a0, a1);\nvar _ExecGetReturningSlot = Module['_ExecGetReturningSlot'] = (a0, a1) => (_ExecGetReturningSlot = Module['_ExecGetReturningSlot'] = wasmExports['ExecGetReturningSlot'])(a0, a1);\nvar _ExecAsyncResponse = Module['_ExecAsyncResponse'] = (a0) => (_ExecAsyncResponse = Module['_ExecAsyncResponse'] = wasmExports['ExecAsyncResponse'])(a0);\nvar _ExecAsyncRequestDone = Module['_ExecAsyncRequestDone'] = (a0, a1) => (_ExecAsyncRequestDone = Module['_ExecAsyncRequestDone'] = wasmExports['ExecAsyncRequestDone'])(a0, a1);\nvar _ExecAsyncRequestPending = Module['_ExecAsyncRequestPending'] = (a0) => (_ExecAsyncRequestPending = Module['_ExecAsyncRequestPending'] = wasmExports['ExecAsyncRequestPending'])(a0);\nvar _InstrUpdateTupleCount = Module['_InstrUpdateTupleCount'] = (a0, a1) => (_InstrUpdateTupleCount = Module['_InstrUpdateTupleCount'] = wasmExports['InstrUpdateTupleCount'])(a0, a1);\nvar _ExecOpenScanRelation = Module['_ExecOpenScanRelation'] = (a0, a1, a2) => (_ExecOpenScanRelation = Module['_ExecOpenScanRelation'] = wasmExports['ExecOpenScanRelation'])(a0, a1, a2);\nvar _ExecInitExprWithParams = Module['_ExecInitExprWithParams'] = (a0, a1) => (_ExecInitExprWithParams = Module['_ExecInitExprWithParams'] = wasmExports['ExecInitExprWithParams'])(a0, a1);\nvar _ExprEvalPushStep = Module['_ExprEvalPushStep'] = (a0, a1) => (_ExprEvalPushStep = Module['_ExprEvalPushStep'] = wasmExports['ExprEvalPushStep'])(a0, a1);\nvar _get_call_expr_argtype = Module['_get_call_expr_argtype'] = (a0, a1) => (_get_call_expr_argtype = Module['_get_call_expr_argtype'] = wasmExports['get_call_expr_argtype'])(a0, a1);\nvar _MakeExpandedObjectReadOnlyInternal = Module['_MakeExpandedObjectReadOnlyInternal'] = (a0) => (_MakeExpandedObjectReadOnlyInternal = Module['_MakeExpandedObjectReadOnlyInternal'] = wasmExports['MakeExpandedObjectReadOnlyInternal'])(a0);\nvar _SPI_connect_ext = Module['_SPI_connect_ext'] = (a0) => (_SPI_connect_ext = Module['_SPI_connect_ext'] = wasmExports['SPI_connect_ext'])(a0);\nvar _SPI_commit = Module['_SPI_commit'] = () => (_SPI_commit = Module['_SPI_commit'] = wasmExports['SPI_commit'])();\nvar _CopyErrorData = Module['_CopyErrorData'] = () => (_CopyErrorData = Module['_CopyErrorData'] = wasmExports['CopyErrorData'])();\nvar _FlushErrorState = Module['_FlushErrorState'] = () => (_FlushErrorState = Module['_FlushErrorState'] = wasmExports['FlushErrorState'])();\nvar _ReThrowError = Module['_ReThrowError'] = (a0) => (_ReThrowError = Module['_ReThrowError'] = wasmExports['ReThrowError'])(a0);\nvar _SPI_commit_and_chain = Module['_SPI_commit_and_chain'] = () => (_SPI_commit_and_chain = Module['_SPI_commit_and_chain'] = wasmExports['SPI_commit_and_chain'])();\nvar _SPI_rollback = Module['_SPI_rollback'] = () => (_SPI_rollback = Module['_SPI_rollback'] = wasmExports['SPI_rollback'])();\nvar _SPI_rollback_and_chain = Module['_SPI_rollback_and_chain'] = () => (_SPI_rollback_and_chain = Module['_SPI_rollback_and_chain'] = wasmExports['SPI_rollback_and_chain'])();\nvar _SPI_freetuptable = Module['_SPI_freetuptable'] = (a0) => (_SPI_freetuptable = Module['_SPI_freetuptable'] = wasmExports['SPI_freetuptable'])(a0);\nvar _SPI_execute_extended = Module['_SPI_execute_extended'] = (a0, a1) => (_SPI_execute_extended = Module['_SPI_execute_extended'] = wasmExports['SPI_execute_extended'])(a0, a1);\nvar _SPI_execp = Module['_SPI_execp'] = (a0, a1, a2, a3) => (_SPI_execp = Module['_SPI_execp'] = wasmExports['SPI_execp'])(a0, a1, a2, a3);\nvar _SPI_execute_plan_extended = Module['_SPI_execute_plan_extended'] = (a0, a1) => (_SPI_execute_plan_extended = Module['_SPI_execute_plan_extended'] = wasmExports['SPI_execute_plan_extended'])(a0, a1);\nvar _SPI_execute_plan_with_paramlist = Module['_SPI_execute_plan_with_paramlist'] = (a0, a1, a2, a3) => (_SPI_execute_plan_with_paramlist = Module['_SPI_execute_plan_with_paramlist'] = wasmExports['SPI_execute_plan_with_paramlist'])(a0, a1, a2, a3);\nvar _SPI_prepare = Module['_SPI_prepare'] = (a0, a1, a2) => (_SPI_prepare = Module['_SPI_prepare'] = wasmExports['SPI_prepare'])(a0, a1, a2);\nvar _SPI_prepare_extended = Module['_SPI_prepare_extended'] = (a0, a1) => (_SPI_prepare_extended = Module['_SPI_prepare_extended'] = wasmExports['SPI_prepare_extended'])(a0, a1);\nvar _SPI_keepplan = Module['_SPI_keepplan'] = (a0) => (_SPI_keepplan = Module['_SPI_keepplan'] = wasmExports['SPI_keepplan'])(a0);\nvar _SPI_freeplan = Module['_SPI_freeplan'] = (a0) => (_SPI_freeplan = Module['_SPI_freeplan'] = wasmExports['SPI_freeplan'])(a0);\nvar _SPI_copytuple = Module['_SPI_copytuple'] = (a0) => (_SPI_copytuple = Module['_SPI_copytuple'] = wasmExports['SPI_copytuple'])(a0);\nvar _SPI_returntuple = Module['_SPI_returntuple'] = (a0, a1) => (_SPI_returntuple = Module['_SPI_returntuple'] = wasmExports['SPI_returntuple'])(a0, a1);\nvar _SPI_fnumber = Module['_SPI_fnumber'] = (a0, a1) => (_SPI_fnumber = Module['_SPI_fnumber'] = wasmExports['SPI_fnumber'])(a0, a1);\nvar _SPI_fname = Module['_SPI_fname'] = (a0, a1) => (_SPI_fname = Module['_SPI_fname'] = wasmExports['SPI_fname'])(a0, a1);\nvar _SPI_getbinval = Module['_SPI_getbinval'] = (a0, a1, a2, a3) => (_SPI_getbinval = Module['_SPI_getbinval'] = wasmExports['SPI_getbinval'])(a0, a1, a2, a3);\nvar _SPI_gettype = Module['_SPI_gettype'] = (a0, a1) => (_SPI_gettype = Module['_SPI_gettype'] = wasmExports['SPI_gettype'])(a0, a1);\nvar _SPI_gettypeid = Module['_SPI_gettypeid'] = (a0, a1) => (_SPI_gettypeid = Module['_SPI_gettypeid'] = wasmExports['SPI_gettypeid'])(a0, a1);\nvar _SPI_getrelname = Module['_SPI_getrelname'] = (a0) => (_SPI_getrelname = Module['_SPI_getrelname'] = wasmExports['SPI_getrelname'])(a0);\nvar _SPI_palloc = Module['_SPI_palloc'] = (a0) => (_SPI_palloc = Module['_SPI_palloc'] = wasmExports['SPI_palloc'])(a0);\nvar _SPI_datumTransfer = Module['_SPI_datumTransfer'] = (a0, a1, a2) => (_SPI_datumTransfer = Module['_SPI_datumTransfer'] = wasmExports['SPI_datumTransfer'])(a0, a1, a2);\nvar _datumTransfer = Module['_datumTransfer'] = (a0, a1, a2) => (_datumTransfer = Module['_datumTransfer'] = wasmExports['datumTransfer'])(a0, a1, a2);\nvar _SPI_cursor_open_with_paramlist = Module['_SPI_cursor_open_with_paramlist'] = (a0, a1, a2, a3) => (_SPI_cursor_open_with_paramlist = Module['_SPI_cursor_open_with_paramlist'] = wasmExports['SPI_cursor_open_with_paramlist'])(a0, a1, a2, a3);\nvar _SPI_cursor_parse_open = Module['_SPI_cursor_parse_open'] = (a0, a1, a2) => (_SPI_cursor_parse_open = Module['_SPI_cursor_parse_open'] = wasmExports['SPI_cursor_parse_open'])(a0, a1, a2);\nvar _SPI_cursor_find = Module['_SPI_cursor_find'] = (a0) => (_SPI_cursor_find = Module['_SPI_cursor_find'] = wasmExports['SPI_cursor_find'])(a0);\nvar _SPI_cursor_fetch = Module['_SPI_cursor_fetch'] = (a0, a1, a2) => (_SPI_cursor_fetch = Module['_SPI_cursor_fetch'] = wasmExports['SPI_cursor_fetch'])(a0, a1, a2);\nvar _SPI_scroll_cursor_fetch = Module['_SPI_scroll_cursor_fetch'] = (a0, a1, a2) => (_SPI_scroll_cursor_fetch = Module['_SPI_scroll_cursor_fetch'] = wasmExports['SPI_scroll_cursor_fetch'])(a0, a1, a2);\nvar _SPI_scroll_cursor_move = Module['_SPI_scroll_cursor_move'] = (a0, a1, a2) => (_SPI_scroll_cursor_move = Module['_SPI_scroll_cursor_move'] = wasmExports['SPI_scroll_cursor_move'])(a0, a1, a2);\nvar _SPI_cursor_close = Module['_SPI_cursor_close'] = (a0) => (_SPI_cursor_close = Module['_SPI_cursor_close'] = wasmExports['SPI_cursor_close'])(a0);\nvar _SPI_result_code_string = Module['_SPI_result_code_string'] = (a0) => (_SPI_result_code_string = Module['_SPI_result_code_string'] = wasmExports['SPI_result_code_string'])(a0);\nvar _SPI_plan_get_plan_sources = Module['_SPI_plan_get_plan_sources'] = (a0) => (_SPI_plan_get_plan_sources = Module['_SPI_plan_get_plan_sources'] = wasmExports['SPI_plan_get_plan_sources'])(a0);\nvar _SPI_plan_get_cached_plan = Module['_SPI_plan_get_cached_plan'] = (a0) => (_SPI_plan_get_cached_plan = Module['_SPI_plan_get_cached_plan'] = wasmExports['SPI_plan_get_cached_plan'])(a0);\nvar _SPI_register_trigger_data = Module['_SPI_register_trigger_data'] = (a0) => (_SPI_register_trigger_data = Module['_SPI_register_trigger_data'] = wasmExports['SPI_register_trigger_data'])(a0);\nvar _tuplestore_tuple_count = Module['_tuplestore_tuple_count'] = (a0) => (_tuplestore_tuple_count = Module['_tuplestore_tuple_count'] = wasmExports['tuplestore_tuple_count'])(a0);\nvar _tuplesort_gettupleslot = Module['_tuplesort_gettupleslot'] = (a0, a1, a2, a3, a4) => (_tuplesort_gettupleslot = Module['_tuplesort_gettupleslot'] = wasmExports['tuplesort_gettupleslot'])(a0, a1, a2, a3, a4);\nvar _tuplesort_begin_heap = Module['_tuplesort_begin_heap'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => (_tuplesort_begin_heap = Module['_tuplesort_begin_heap'] = wasmExports['tuplesort_begin_heap'])(a0, a1, a2, a3, a4, a5, a6, a7, a8);\nvar _tuplesort_reset = Module['_tuplesort_reset'] = (a0) => (_tuplesort_reset = Module['_tuplesort_reset'] = wasmExports['tuplesort_reset'])(a0);\nvar _tuplesort_puttupleslot = Module['_tuplesort_puttupleslot'] = (a0, a1) => (_tuplesort_puttupleslot = Module['_tuplesort_puttupleslot'] = wasmExports['tuplesort_puttupleslot'])(a0, a1);\nvar _construct_md_array = Module['_construct_md_array'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => (_construct_md_array = Module['_construct_md_array'] = wasmExports['construct_md_array'])(a0, a1, a2, a3, a4, a5, a6, a7, a8);\nvar _expanded_record_fetch_tupdesc = Module['_expanded_record_fetch_tupdesc'] = (a0) => (_expanded_record_fetch_tupdesc = Module['_expanded_record_fetch_tupdesc'] = wasmExports['expanded_record_fetch_tupdesc'])(a0);\nvar _expanded_record_fetch_field = Module['_expanded_record_fetch_field'] = (a0, a1, a2) => (_expanded_record_fetch_field = Module['_expanded_record_fetch_field'] = wasmExports['expanded_record_fetch_field'])(a0, a1, a2);\nvar _MemoryContextGetParent = Module['_MemoryContextGetParent'] = (a0) => (_MemoryContextGetParent = Module['_MemoryContextGetParent'] = wasmExports['MemoryContextGetParent'])(a0);\nvar _DeleteExpandedObject = Module['_DeleteExpandedObject'] = (a0) => (_DeleteExpandedObject = Module['_DeleteExpandedObject'] = wasmExports['DeleteExpandedObject'])(a0);\nvar _FreeExprContext = Module['_FreeExprContext'] = (a0, a1) => (_FreeExprContext = Module['_FreeExprContext'] = wasmExports['FreeExprContext'])(a0, a1);\nvar _ExecGetResultRelCheckAsUser = Module['_ExecGetResultRelCheckAsUser'] = (a0, a1) => (_ExecGetResultRelCheckAsUser = Module['_ExecGetResultRelCheckAsUser'] = wasmExports['ExecGetResultRelCheckAsUser'])(a0, a1);\nvar _MemoryContextMemAllocated = Module['_MemoryContextMemAllocated'] = (a0, a1) => (_MemoryContextMemAllocated = Module['_MemoryContextMemAllocated'] = wasmExports['MemoryContextMemAllocated'])(a0, a1);\nvar _tuplestore_puttuple = Module['_tuplestore_puttuple'] = (a0, a1) => (_tuplestore_puttuple = Module['_tuplestore_puttuple'] = wasmExports['tuplestore_puttuple'])(a0, a1);\nvar _standard_ProcessUtility = Module['_standard_ProcessUtility'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_standard_ProcessUtility = Module['_standard_ProcessUtility'] = wasmExports['standard_ProcessUtility'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _sigaddset = Module['_sigaddset'] = (a0, a1) => (_sigaddset = Module['_sigaddset'] = wasmExports['sigaddset'])(a0, a1);\nvar _fsync_pgdata = Module['_fsync_pgdata'] = (a0, a1) => (_fsync_pgdata = Module['_fsync_pgdata'] = wasmExports['fsync_pgdata'])(a0, a1);\nvar _get_restricted_token = Module['_get_restricted_token'] = () => (_get_restricted_token = Module['_get_restricted_token'] = wasmExports['get_restricted_token'])();\nvar _pg_malloc = Module['_pg_malloc'] = (a0) => (_pg_malloc = Module['_pg_malloc'] = wasmExports['pg_malloc'])(a0);\nvar _pg_realloc = Module['_pg_realloc'] = (a0, a1) => (_pg_realloc = Module['_pg_realloc'] = wasmExports['pg_realloc'])(a0, a1);\nvar _pg_strdup = Module['_pg_strdup'] = (a0) => (_pg_strdup = Module['_pg_strdup'] = wasmExports['pg_strdup'])(a0);\nvar _simple_prompt = Module['_simple_prompt'] = (a0, a1) => (_simple_prompt = Module['_simple_prompt'] = wasmExports['simple_prompt'])(a0, a1);\nvar _interactive_file = Module['_interactive_file'] = () => (_interactive_file = Module['_interactive_file'] = wasmExports['interactive_file'])();\nvar _interactive_one = Module['_interactive_one'] = () => (_interactive_one = Module['_interactive_one'] = wasmExports['interactive_one'])();\nvar _EmitErrorReport = Module['_EmitErrorReport'] = () => (_EmitErrorReport = Module['_EmitErrorReport'] = wasmExports['EmitErrorReport'])();\nvar _pg_shutdown = Module['_pg_shutdown'] = () => (_pg_shutdown = Module['_pg_shutdown'] = wasmExports['pg_shutdown'])();\nvar _errhidestmt = Module['_errhidestmt'] = (a0) => (_errhidestmt = Module['_errhidestmt'] = wasmExports['errhidestmt'])(a0);\nvar _interactive_write = Module['_interactive_write'] = (a0) => (_interactive_write = Module['_interactive_write'] = wasmExports['interactive_write'])(a0);\nvar _interactive_read = Module['_interactive_read'] = () => (_interactive_read = Module['_interactive_read'] = wasmExports['interactive_read'])();\nvar _SignalHandlerForConfigReload = Module['_SignalHandlerForConfigReload'] = (a0) => (_SignalHandlerForConfigReload = Module['_SignalHandlerForConfigReload'] = wasmExports['SignalHandlerForConfigReload'])(a0);\nvar _PQconnectStartParams = Module['_PQconnectStartParams'] = (a0, a1, a2) => (_PQconnectStartParams = Module['_PQconnectStartParams'] = wasmExports['PQconnectStartParams'])(a0, a1, a2);\nvar _PQstatus = Module['_PQstatus'] = (a0) => (_PQstatus = Module['_PQstatus'] = wasmExports['PQstatus'])(a0);\nvar _PQsocket = Module['_PQsocket'] = (a0) => (_PQsocket = Module['_PQsocket'] = wasmExports['PQsocket'])(a0);\nvar _ProcessWalRcvInterrupts = Module['_ProcessWalRcvInterrupts'] = () => (_ProcessWalRcvInterrupts = Module['_ProcessWalRcvInterrupts'] = wasmExports['ProcessWalRcvInterrupts'])();\nvar _PQconnectPoll = Module['_PQconnectPoll'] = (a0) => (_PQconnectPoll = Module['_PQconnectPoll'] = wasmExports['PQconnectPoll'])(a0);\nvar _PQconnectionUsedPassword = Module['_PQconnectionUsedPassword'] = (a0) => (_PQconnectionUsedPassword = Module['_PQconnectionUsedPassword'] = wasmExports['PQconnectionUsedPassword'])(a0);\nvar _PQfinish = Module['_PQfinish'] = (a0) => (_PQfinish = Module['_PQfinish'] = wasmExports['PQfinish'])(a0);\nvar _PQresultStatus = Module['_PQresultStatus'] = (a0) => (_PQresultStatus = Module['_PQresultStatus'] = wasmExports['PQresultStatus'])(a0);\nvar _PQclear = Module['_PQclear'] = (a0) => (_PQclear = Module['_PQclear'] = wasmExports['PQclear'])(a0);\nvar _PQerrorMessage = Module['_PQerrorMessage'] = (a0) => (_PQerrorMessage = Module['_PQerrorMessage'] = wasmExports['PQerrorMessage'])(a0);\nvar _pchomp = Module['_pchomp'] = (a0) => (_pchomp = Module['_pchomp'] = wasmExports['pchomp'])(a0);\nvar _PQnfields = Module['_PQnfields'] = (a0) => (_PQnfields = Module['_PQnfields'] = wasmExports['PQnfields'])(a0);\nvar _PQntuples = Module['_PQntuples'] = (a0) => (_PQntuples = Module['_PQntuples'] = wasmExports['PQntuples'])(a0);\nvar _PQgetvalue = Module['_PQgetvalue'] = (a0, a1, a2) => (_PQgetvalue = Module['_PQgetvalue'] = wasmExports['PQgetvalue'])(a0, a1, a2);\nvar _PQconsumeInput = Module['_PQconsumeInput'] = (a0) => (_PQconsumeInput = Module['_PQconsumeInput'] = wasmExports['PQconsumeInput'])(a0);\nvar _PQgetisnull = Module['_PQgetisnull'] = (a0, a1, a2) => (_PQgetisnull = Module['_PQgetisnull'] = wasmExports['PQgetisnull'])(a0, a1, a2);\nvar _PQresultErrorField = Module['_PQresultErrorField'] = (a0, a1) => (_PQresultErrorField = Module['_PQresultErrorField'] = wasmExports['PQresultErrorField'])(a0, a1);\nvar _PQsendQuery = Module['_PQsendQuery'] = (a0, a1) => (_PQsendQuery = Module['_PQsendQuery'] = wasmExports['PQsendQuery'])(a0, a1);\nvar _PQisBusy = Module['_PQisBusy'] = (a0) => (_PQisBusy = Module['_PQisBusy'] = wasmExports['PQisBusy'])(a0);\nvar _PQgetResult = Module['_PQgetResult'] = (a0) => (_PQgetResult = Module['_PQgetResult'] = wasmExports['PQgetResult'])(a0);\nvar _CacheRegisterRelcacheCallback = Module['_CacheRegisterRelcacheCallback'] = (a0, a1) => (_CacheRegisterRelcacheCallback = Module['_CacheRegisterRelcacheCallback'] = wasmExports['CacheRegisterRelcacheCallback'])(a0, a1);\nvar _hash_seq_term = Module['_hash_seq_term'] = (a0) => (_hash_seq_term = Module['_hash_seq_term'] = wasmExports['hash_seq_term'])(a0);\nvar _SignalHandlerForShutdownRequest = Module['_SignalHandlerForShutdownRequest'] = (a0) => (_SignalHandlerForShutdownRequest = Module['_SignalHandlerForShutdownRequest'] = wasmExports['SignalHandlerForShutdownRequest'])(a0);\nvar _replorigin_by_oid = Module['_replorigin_by_oid'] = (a0, a1, a2) => (_replorigin_by_oid = Module['_replorigin_by_oid'] = wasmExports['replorigin_by_oid'])(a0, a1, a2);\nvar _logicalrep_write_begin = Module['_logicalrep_write_begin'] = (a0, a1) => (_logicalrep_write_begin = Module['_logicalrep_write_begin'] = wasmExports['logicalrep_write_begin'])(a0, a1);\nvar _logicalrep_write_commit = Module['_logicalrep_write_commit'] = (a0, a1, a2) => (_logicalrep_write_commit = Module['_logicalrep_write_commit'] = wasmExports['logicalrep_write_commit'])(a0, a1, a2);\nvar _logicalrep_write_begin_prepare = Module['_logicalrep_write_begin_prepare'] = (a0, a1) => (_logicalrep_write_begin_prepare = Module['_logicalrep_write_begin_prepare'] = wasmExports['logicalrep_write_begin_prepare'])(a0, a1);\nvar _logicalrep_write_prepare = Module['_logicalrep_write_prepare'] = (a0, a1, a2) => (_logicalrep_write_prepare = Module['_logicalrep_write_prepare'] = wasmExports['logicalrep_write_prepare'])(a0, a1, a2);\nvar _logicalrep_write_commit_prepared = Module['_logicalrep_write_commit_prepared'] = (a0, a1, a2) => (_logicalrep_write_commit_prepared = Module['_logicalrep_write_commit_prepared'] = wasmExports['logicalrep_write_commit_prepared'])(a0, a1, a2);\nvar _logicalrep_write_rollback_prepared = Module['_logicalrep_write_rollback_prepared'] = (a0, a1, a2, a3) => (_logicalrep_write_rollback_prepared = Module['_logicalrep_write_rollback_prepared'] = wasmExports['logicalrep_write_rollback_prepared'])(a0, a1, a2, a3);\nvar _logicalrep_write_stream_prepare = Module['_logicalrep_write_stream_prepare'] = (a0, a1, a2) => (_logicalrep_write_stream_prepare = Module['_logicalrep_write_stream_prepare'] = wasmExports['logicalrep_write_stream_prepare'])(a0, a1, a2);\nvar _logicalrep_write_origin = Module['_logicalrep_write_origin'] = (a0, a1, a2) => (_logicalrep_write_origin = Module['_logicalrep_write_origin'] = wasmExports['logicalrep_write_origin'])(a0, a1, a2);\nvar _logicalrep_write_insert = Module['_logicalrep_write_insert'] = (a0, a1, a2, a3, a4, a5) => (_logicalrep_write_insert = Module['_logicalrep_write_insert'] = wasmExports['logicalrep_write_insert'])(a0, a1, a2, a3, a4, a5);\nvar _logicalrep_write_update = Module['_logicalrep_write_update'] = (a0, a1, a2, a3, a4, a5, a6) => (_logicalrep_write_update = Module['_logicalrep_write_update'] = wasmExports['logicalrep_write_update'])(a0, a1, a2, a3, a4, a5, a6);\nvar _logicalrep_write_delete = Module['_logicalrep_write_delete'] = (a0, a1, a2, a3, a4, a5) => (_logicalrep_write_delete = Module['_logicalrep_write_delete'] = wasmExports['logicalrep_write_delete'])(a0, a1, a2, a3, a4, a5);\nvar _logicalrep_write_truncate = Module['_logicalrep_write_truncate'] = (a0, a1, a2, a3, a4, a5) => (_logicalrep_write_truncate = Module['_logicalrep_write_truncate'] = wasmExports['logicalrep_write_truncate'])(a0, a1, a2, a3, a4, a5);\nvar _logicalrep_write_message = Module['_logicalrep_write_message'] = (a0, a1, a2, a3, a4, a5, a6) => (_logicalrep_write_message = Module['_logicalrep_write_message'] = wasmExports['logicalrep_write_message'])(a0, a1, a2, a3, a4, a5, a6);\nvar _logicalrep_write_rel = Module['_logicalrep_write_rel'] = (a0, a1, a2, a3) => (_logicalrep_write_rel = Module['_logicalrep_write_rel'] = wasmExports['logicalrep_write_rel'])(a0, a1, a2, a3);\nvar _logicalrep_write_typ = Module['_logicalrep_write_typ'] = (a0, a1, a2) => (_logicalrep_write_typ = Module['_logicalrep_write_typ'] = wasmExports['logicalrep_write_typ'])(a0, a1, a2);\nvar _logicalrep_write_stream_start = Module['_logicalrep_write_stream_start'] = (a0, a1, a2) => (_logicalrep_write_stream_start = Module['_logicalrep_write_stream_start'] = wasmExports['logicalrep_write_stream_start'])(a0, a1, a2);\nvar _logicalrep_write_stream_stop = Module['_logicalrep_write_stream_stop'] = (a0) => (_logicalrep_write_stream_stop = Module['_logicalrep_write_stream_stop'] = wasmExports['logicalrep_write_stream_stop'])(a0);\nvar _logicalrep_write_stream_commit = Module['_logicalrep_write_stream_commit'] = (a0, a1, a2) => (_logicalrep_write_stream_commit = Module['_logicalrep_write_stream_commit'] = wasmExports['logicalrep_write_stream_commit'])(a0, a1, a2);\nvar _logicalrep_write_stream_abort = Module['_logicalrep_write_stream_abort'] = (a0, a1, a2, a3, a4, a5) => (_logicalrep_write_stream_abort = Module['_logicalrep_write_stream_abort'] = wasmExports['logicalrep_write_stream_abort'])(a0, a1, a2, a3, a4, a5);\nvar _FreeErrorData = Module['_FreeErrorData'] = (a0) => (_FreeErrorData = Module['_FreeErrorData'] = wasmExports['FreeErrorData'])(a0);\nvar _RelidByRelfilenumber = Module['_RelidByRelfilenumber'] = (a0, a1) => (_RelidByRelfilenumber = Module['_RelidByRelfilenumber'] = wasmExports['RelidByRelfilenumber'])(a0, a1);\nvar _array_contains_nulls = Module['_array_contains_nulls'] = (a0) => (_array_contains_nulls = Module['_array_contains_nulls'] = wasmExports['array_contains_nulls'])(a0);\nvar _OutputPluginPrepareWrite = Module['_OutputPluginPrepareWrite'] = (a0, a1) => (_OutputPluginPrepareWrite = Module['_OutputPluginPrepareWrite'] = wasmExports['OutputPluginPrepareWrite'])(a0, a1);\nvar _OutputPluginWrite = Module['_OutputPluginWrite'] = (a0, a1) => (_OutputPluginWrite = Module['_OutputPluginWrite'] = wasmExports['OutputPluginWrite'])(a0, a1);\nvar _OutputPluginUpdateProgress = Module['_OutputPluginUpdateProgress'] = (a0, a1) => (_OutputPluginUpdateProgress = Module['_OutputPluginUpdateProgress'] = wasmExports['OutputPluginUpdateProgress'])(a0, a1);\nvar _RegisterBackgroundWorker = Module['_RegisterBackgroundWorker'] = (a0) => (_RegisterBackgroundWorker = Module['_RegisterBackgroundWorker'] = wasmExports['RegisterBackgroundWorker'])(a0);\nvar _toupper = Module['_toupper'] = (a0) => (_toupper = Module['_toupper'] = wasmExports['toupper'])(a0);\nvar _pg_reg_getinitialstate = Module['_pg_reg_getinitialstate'] = (a0) => (_pg_reg_getinitialstate = Module['_pg_reg_getinitialstate'] = wasmExports['pg_reg_getinitialstate'])(a0);\nvar _pg_reg_getfinalstate = Module['_pg_reg_getfinalstate'] = (a0) => (_pg_reg_getfinalstate = Module['_pg_reg_getfinalstate'] = wasmExports['pg_reg_getfinalstate'])(a0);\nvar _pg_reg_getnumoutarcs = Module['_pg_reg_getnumoutarcs'] = (a0, a1) => (_pg_reg_getnumoutarcs = Module['_pg_reg_getnumoutarcs'] = wasmExports['pg_reg_getnumoutarcs'])(a0, a1);\nvar _pg_reg_getoutarcs = Module['_pg_reg_getoutarcs'] = (a0, a1, a2, a3) => (_pg_reg_getoutarcs = Module['_pg_reg_getoutarcs'] = wasmExports['pg_reg_getoutarcs'])(a0, a1, a2, a3);\nvar _pg_reg_getnumcolors = Module['_pg_reg_getnumcolors'] = (a0) => (_pg_reg_getnumcolors = Module['_pg_reg_getnumcolors'] = wasmExports['pg_reg_getnumcolors'])(a0);\nvar _pg_reg_colorisbegin = Module['_pg_reg_colorisbegin'] = (a0, a1) => (_pg_reg_colorisbegin = Module['_pg_reg_colorisbegin'] = wasmExports['pg_reg_colorisbegin'])(a0, a1);\nvar _pg_reg_colorisend = Module['_pg_reg_colorisend'] = (a0, a1) => (_pg_reg_colorisend = Module['_pg_reg_colorisend'] = wasmExports['pg_reg_colorisend'])(a0, a1);\nvar _pg_reg_getnumcharacters = Module['_pg_reg_getnumcharacters'] = (a0, a1) => (_pg_reg_getnumcharacters = Module['_pg_reg_getnumcharacters'] = wasmExports['pg_reg_getnumcharacters'])(a0, a1);\nvar _pg_reg_getcharacters = Module['_pg_reg_getcharacters'] = (a0, a1, a2, a3) => (_pg_reg_getcharacters = Module['_pg_reg_getcharacters'] = wasmExports['pg_reg_getcharacters'])(a0, a1, a2, a3);\nvar _GetConfigOption = Module['_GetConfigOption'] = (a0, a1, a2) => (_GetConfigOption = Module['_GetConfigOption'] = wasmExports['GetConfigOption'])(a0, a1, a2);\nvar _pg_prng_seed_check = Module['_pg_prng_seed_check'] = (a0) => (_pg_prng_seed_check = Module['_pg_prng_seed_check'] = wasmExports['pg_prng_seed_check'])(a0);\nvar _pg_prng_seed = Module['_pg_prng_seed'] = (a0, a1) => (_pg_prng_seed = Module['_pg_prng_seed'] = wasmExports['pg_prng_seed'])(a0, a1);\nvar _fputc = Module['_fputc'] = (a0, a1) => (_fputc = Module['_fputc'] = wasmExports['fputc'])(a0, a1);\nvar _WaitForBackgroundWorkerStartup = Module['_WaitForBackgroundWorkerStartup'] = (a0, a1) => (_WaitForBackgroundWorkerStartup = Module['_WaitForBackgroundWorkerStartup'] = wasmExports['WaitForBackgroundWorkerStartup'])(a0, a1);\nvar _dlsym = Module['_dlsym'] = (a0, a1) => (_dlsym = Module['_dlsym'] = wasmExports['dlsym'])(a0, a1);\nvar _dlopen = Module['_dlopen'] = (a0, a1) => (_dlopen = Module['_dlopen'] = wasmExports['dlopen'])(a0, a1);\nvar _dlerror = Module['_dlerror'] = () => (_dlerror = Module['_dlerror'] = wasmExports['dlerror'])();\nvar _dlclose = Module['_dlclose'] = (a0) => (_dlclose = Module['_dlclose'] = wasmExports['dlclose'])(a0);\nvar _find_rendezvous_variable = Module['_find_rendezvous_variable'] = (a0) => (_find_rendezvous_variable = Module['_find_rendezvous_variable'] = wasmExports['find_rendezvous_variable'])(a0);\nvar _resolve_polymorphic_argtypes = Module['_resolve_polymorphic_argtypes'] = (a0, a1, a2, a3) => (_resolve_polymorphic_argtypes = Module['_resolve_polymorphic_argtypes'] = wasmExports['resolve_polymorphic_argtypes'])(a0, a1, a2, a3);\nvar _get_func_arg_info = Module['_get_func_arg_info'] = (a0, a1, a2, a3) => (_get_func_arg_info = Module['_get_func_arg_info'] = wasmExports['get_func_arg_info'])(a0, a1, a2, a3);\nvar _CallerFInfoFunctionCall2 = Module['_CallerFInfoFunctionCall2'] = (a0, a1, a2, a3, a4) => (_CallerFInfoFunctionCall2 = Module['_CallerFInfoFunctionCall2'] = wasmExports['CallerFInfoFunctionCall2'])(a0, a1, a2, a3, a4);\nvar _FunctionCall0Coll = Module['_FunctionCall0Coll'] = (a0, a1) => (_FunctionCall0Coll = Module['_FunctionCall0Coll'] = wasmExports['FunctionCall0Coll'])(a0, a1);\nvar _get_fn_expr_rettype = Module['_get_fn_expr_rettype'] = (a0) => (_get_fn_expr_rettype = Module['_get_fn_expr_rettype'] = wasmExports['get_fn_expr_rettype'])(a0);\nvar _has_fn_opclass_options = Module['_has_fn_opclass_options'] = (a0) => (_has_fn_opclass_options = Module['_has_fn_opclass_options'] = wasmExports['has_fn_opclass_options'])(a0);\nvar _CheckFunctionValidatorAccess = Module['_CheckFunctionValidatorAccess'] = (a0, a1) => (_CheckFunctionValidatorAccess = Module['_CheckFunctionValidatorAccess'] = wasmExports['CheckFunctionValidatorAccess'])(a0, a1);\nvar _pg_do_encoding_conversion = Module['_pg_do_encoding_conversion'] = (a0, a1, a2, a3) => (_pg_do_encoding_conversion = Module['_pg_do_encoding_conversion'] = wasmExports['pg_do_encoding_conversion'])(a0, a1, a2, a3);\nvar _MemoryContextAllocHuge = Module['_MemoryContextAllocHuge'] = (a0, a1) => (_MemoryContextAllocHuge = Module['_MemoryContextAllocHuge'] = wasmExports['MemoryContextAllocHuge'])(a0, a1);\nvar _pg_utf_mblen = Module['_pg_utf_mblen'] = (a0) => (_pg_utf_mblen = Module['_pg_utf_mblen'] = wasmExports['pg_utf_mblen'])(a0);\nvar _pg_wchar2mb_with_len = Module['_pg_wchar2mb_with_len'] = (a0, a1, a2) => (_pg_wchar2mb_with_len = Module['_pg_wchar2mb_with_len'] = wasmExports['pg_wchar2mb_with_len'])(a0, a1, a2);\nvar _check_encoding_conversion_args = Module['_check_encoding_conversion_args'] = (a0, a1, a2, a3, a4) => (_check_encoding_conversion_args = Module['_check_encoding_conversion_args'] = wasmExports['check_encoding_conversion_args'])(a0, a1, a2, a3, a4);\nvar _report_untranslatable_char = Module['_report_untranslatable_char'] = (a0, a1, a2, a3) => (_report_untranslatable_char = Module['_report_untranslatable_char'] = wasmExports['report_untranslatable_char'])(a0, a1, a2, a3);\nvar _local2local = Module['_local2local'] = (a0, a1, a2, a3, a4, a5, a6) => (_local2local = Module['_local2local'] = wasmExports['local2local'])(a0, a1, a2, a3, a4, a5, a6);\nvar _latin2mic = Module['_latin2mic'] = (a0, a1, a2, a3, a4, a5) => (_latin2mic = Module['_latin2mic'] = wasmExports['latin2mic'])(a0, a1, a2, a3, a4, a5);\nvar _mic2latin = Module['_mic2latin'] = (a0, a1, a2, a3, a4, a5) => (_mic2latin = Module['_mic2latin'] = wasmExports['mic2latin'])(a0, a1, a2, a3, a4, a5);\nvar _latin2mic_with_table = Module['_latin2mic_with_table'] = (a0, a1, a2, a3, a4, a5, a6) => (_latin2mic_with_table = Module['_latin2mic_with_table'] = wasmExports['latin2mic_with_table'])(a0, a1, a2, a3, a4, a5, a6);\nvar _mic2latin_with_table = Module['_mic2latin_with_table'] = (a0, a1, a2, a3, a4, a5, a6) => (_mic2latin_with_table = Module['_mic2latin_with_table'] = wasmExports['mic2latin_with_table'])(a0, a1, a2, a3, a4, a5, a6);\nvar _pg_encoding_verifymbchar = Module['_pg_encoding_verifymbchar'] = (a0, a1, a2) => (_pg_encoding_verifymbchar = Module['_pg_encoding_verifymbchar'] = wasmExports['pg_encoding_verifymbchar'])(a0, a1, a2);\nvar _ResourceOwnerReleaseAllPlanCacheRefs = Module['_ResourceOwnerReleaseAllPlanCacheRefs'] = (a0) => (_ResourceOwnerReleaseAllPlanCacheRefs = Module['_ResourceOwnerReleaseAllPlanCacheRefs'] = wasmExports['ResourceOwnerReleaseAllPlanCacheRefs'])(a0);\nvar _RegisterResourceReleaseCallback = Module['_RegisterResourceReleaseCallback'] = (a0, a1) => (_RegisterResourceReleaseCallback = Module['_RegisterResourceReleaseCallback'] = wasmExports['RegisterResourceReleaseCallback'])(a0, a1);\nvar _is_publishable_relation = Module['_is_publishable_relation'] = (a0) => (_is_publishable_relation = Module['_is_publishable_relation'] = wasmExports['is_publishable_relation'])(a0);\nvar _GetSchemaPublications = Module['_GetSchemaPublications'] = (a0) => (_GetSchemaPublications = Module['_GetSchemaPublications'] = wasmExports['GetSchemaPublications'])(a0);\nvar _err_generic_string = Module['_err_generic_string'] = (a0, a1) => (_err_generic_string = Module['_err_generic_string'] = wasmExports['err_generic_string'])(a0, a1);\nvar _get_rel_relispartition = Module['_get_rel_relispartition'] = (a0) => (_get_rel_relispartition = Module['_get_rel_relispartition'] = wasmExports['get_rel_relispartition'])(a0);\nvar _texteq = Module['_texteq'] = (a0) => (_texteq = Module['_texteq'] = wasmExports['texteq'])(a0);\nvar _get_typsubscript = Module['_get_typsubscript'] = (a0, a1) => (_get_typsubscript = Module['_get_typsubscript'] = wasmExports['get_typsubscript'])(a0, a1);\nvar _CachedPlanAllowsSimpleValidityCheck = Module['_CachedPlanAllowsSimpleValidityCheck'] = (a0, a1, a2) => (_CachedPlanAllowsSimpleValidityCheck = Module['_CachedPlanAllowsSimpleValidityCheck'] = wasmExports['CachedPlanAllowsSimpleValidityCheck'])(a0, a1, a2);\nvar _CachedPlanIsSimplyValid = Module['_CachedPlanIsSimplyValid'] = (a0, a1, a2) => (_CachedPlanIsSimplyValid = Module['_CachedPlanIsSimplyValid'] = wasmExports['CachedPlanIsSimplyValid'])(a0, a1, a2);\nvar _GetCachedExpression = Module['_GetCachedExpression'] = (a0) => (_GetCachedExpression = Module['_GetCachedExpression'] = wasmExports['GetCachedExpression'])(a0);\nvar _FreeCachedExpression = Module['_FreeCachedExpression'] = (a0) => (_FreeCachedExpression = Module['_FreeCachedExpression'] = wasmExports['FreeCachedExpression'])(a0);\nvar _strlcat = Module['_strlcat'] = (a0, a1, a2) => (_strlcat = Module['_strlcat'] = wasmExports['strlcat'])(a0, a1, a2);\nvar _pg_bindtextdomain = Module['_pg_bindtextdomain'] = (a0) => (_pg_bindtextdomain = Module['_pg_bindtextdomain'] = wasmExports['pg_bindtextdomain'])(a0);\nvar _tidin = Module['_tidin'] = (a0) => (_tidin = Module['_tidin'] = wasmExports['tidin'])(a0);\nvar _tidout = Module['_tidout'] = (a0) => (_tidout = Module['_tidout'] = wasmExports['tidout'])(a0);\nvar _btfloat4cmp = Module['_btfloat4cmp'] = (a0) => (_btfloat4cmp = Module['_btfloat4cmp'] = wasmExports['btfloat4cmp'])(a0);\nvar _btfloat8cmp = Module['_btfloat8cmp'] = (a0) => (_btfloat8cmp = Module['_btfloat8cmp'] = wasmExports['btfloat8cmp'])(a0);\nvar _btnamecmp = Module['_btnamecmp'] = (a0) => (_btnamecmp = Module['_btnamecmp'] = wasmExports['btnamecmp'])(a0);\nvar _bttextcmp = Module['_bttextcmp'] = (a0) => (_bttextcmp = Module['_bttextcmp'] = wasmExports['bttextcmp'])(a0);\nvar _cash_cmp = Module['_cash_cmp'] = (a0) => (_cash_cmp = Module['_cash_cmp'] = wasmExports['cash_cmp'])(a0);\nvar _text_lt = Module['_text_lt'] = (a0) => (_text_lt = Module['_text_lt'] = wasmExports['text_lt'])(a0);\nvar _text_le = Module['_text_le'] = (a0) => (_text_le = Module['_text_le'] = wasmExports['text_le'])(a0);\nvar _text_gt = Module['_text_gt'] = (a0) => (_text_gt = Module['_text_gt'] = wasmExports['text_gt'])(a0);\nvar _text_ge = Module['_text_ge'] = (a0) => (_text_ge = Module['_text_ge'] = wasmExports['text_ge'])(a0);\nvar _current_query = Module['_current_query'] = (a0) => (_current_query = Module['_current_query'] = wasmExports['current_query'])(a0);\nvar _macaddr_eq = Module['_macaddr_eq'] = (a0) => (_macaddr_eq = Module['_macaddr_eq'] = wasmExports['macaddr_eq'])(a0);\nvar _macaddr_lt = Module['_macaddr_lt'] = (a0) => (_macaddr_lt = Module['_macaddr_lt'] = wasmExports['macaddr_lt'])(a0);\nvar _macaddr_le = Module['_macaddr_le'] = (a0) => (_macaddr_le = Module['_macaddr_le'] = wasmExports['macaddr_le'])(a0);\nvar _macaddr_gt = Module['_macaddr_gt'] = (a0) => (_macaddr_gt = Module['_macaddr_gt'] = wasmExports['macaddr_gt'])(a0);\nvar _macaddr_ge = Module['_macaddr_ge'] = (a0) => (_macaddr_ge = Module['_macaddr_ge'] = wasmExports['macaddr_ge'])(a0);\nvar _macaddr_cmp = Module['_macaddr_cmp'] = (a0) => (_macaddr_cmp = Module['_macaddr_cmp'] = wasmExports['macaddr_cmp'])(a0);\nvar _inet_in = Module['_inet_in'] = (a0) => (_inet_in = Module['_inet_in'] = wasmExports['inet_in'])(a0);\nvar _network_cmp = Module['_network_cmp'] = (a0) => (_network_cmp = Module['_network_cmp'] = wasmExports['network_cmp'])(a0);\nvar _bpchareq = Module['_bpchareq'] = (a0) => (_bpchareq = Module['_bpchareq'] = wasmExports['bpchareq'])(a0);\nvar _bpcharlt = Module['_bpcharlt'] = (a0) => (_bpcharlt = Module['_bpcharlt'] = wasmExports['bpcharlt'])(a0);\nvar _bpcharle = Module['_bpcharle'] = (a0) => (_bpcharle = Module['_bpcharle'] = wasmExports['bpcharle'])(a0);\nvar _bpchargt = Module['_bpchargt'] = (a0) => (_bpchargt = Module['_bpchargt'] = wasmExports['bpchargt'])(a0);\nvar _bpcharge = Module['_bpcharge'] = (a0) => (_bpcharge = Module['_bpcharge'] = wasmExports['bpcharge'])(a0);\nvar _bpcharcmp = Module['_bpcharcmp'] = (a0) => (_bpcharcmp = Module['_bpcharcmp'] = wasmExports['bpcharcmp'])(a0);\nvar _date_eq = Module['_date_eq'] = (a0) => (_date_eq = Module['_date_eq'] = wasmExports['date_eq'])(a0);\nvar _date_lt = Module['_date_lt'] = (a0) => (_date_lt = Module['_date_lt'] = wasmExports['date_lt'])(a0);\nvar _date_le = Module['_date_le'] = (a0) => (_date_le = Module['_date_le'] = wasmExports['date_le'])(a0);\nvar _date_gt = Module['_date_gt'] = (a0) => (_date_gt = Module['_date_gt'] = wasmExports['date_gt'])(a0);\nvar _date_ge = Module['_date_ge'] = (a0) => (_date_ge = Module['_date_ge'] = wasmExports['date_ge'])(a0);\nvar _date_cmp = Module['_date_cmp'] = (a0) => (_date_cmp = Module['_date_cmp'] = wasmExports['date_cmp'])(a0);\nvar _time_lt = Module['_time_lt'] = (a0) => (_time_lt = Module['_time_lt'] = wasmExports['time_lt'])(a0);\nvar _time_le = Module['_time_le'] = (a0) => (_time_le = Module['_time_le'] = wasmExports['time_le'])(a0);\nvar _time_gt = Module['_time_gt'] = (a0) => (_time_gt = Module['_time_gt'] = wasmExports['time_gt'])(a0);\nvar _time_ge = Module['_time_ge'] = (a0) => (_time_ge = Module['_time_ge'] = wasmExports['time_ge'])(a0);\nvar _time_cmp = Module['_time_cmp'] = (a0) => (_time_cmp = Module['_time_cmp'] = wasmExports['time_cmp'])(a0);\nvar _date_mi = Module['_date_mi'] = (a0) => (_date_mi = Module['_date_mi'] = wasmExports['date_mi'])(a0);\nvar _time_eq = Module['_time_eq'] = (a0) => (_time_eq = Module['_time_eq'] = wasmExports['time_eq'])(a0);\nvar _timestamp_eq = Module['_timestamp_eq'] = (a0) => (_timestamp_eq = Module['_timestamp_eq'] = wasmExports['timestamp_eq'])(a0);\nvar _timestamp_lt = Module['_timestamp_lt'] = (a0) => (_timestamp_lt = Module['_timestamp_lt'] = wasmExports['timestamp_lt'])(a0);\nvar _timestamp_le = Module['_timestamp_le'] = (a0) => (_timestamp_le = Module['_timestamp_le'] = wasmExports['timestamp_le'])(a0);\nvar _timestamp_ge = Module['_timestamp_ge'] = (a0) => (_timestamp_ge = Module['_timestamp_ge'] = wasmExports['timestamp_ge'])(a0);\nvar _timestamp_gt = Module['_timestamp_gt'] = (a0) => (_timestamp_gt = Module['_timestamp_gt'] = wasmExports['timestamp_gt'])(a0);\nvar _interval_eq = Module['_interval_eq'] = (a0) => (_interval_eq = Module['_interval_eq'] = wasmExports['interval_eq'])(a0);\nvar _interval_lt = Module['_interval_lt'] = (a0) => (_interval_lt = Module['_interval_lt'] = wasmExports['interval_lt'])(a0);\nvar _interval_le = Module['_interval_le'] = (a0) => (_interval_le = Module['_interval_le'] = wasmExports['interval_le'])(a0);\nvar _interval_ge = Module['_interval_ge'] = (a0) => (_interval_ge = Module['_interval_ge'] = wasmExports['interval_ge'])(a0);\nvar _interval_gt = Module['_interval_gt'] = (a0) => (_interval_gt = Module['_interval_gt'] = wasmExports['interval_gt'])(a0);\nvar _interval_um = Module['_interval_um'] = (a0) => (_interval_um = Module['_interval_um'] = wasmExports['interval_um'])(a0);\nvar _interval_mi = Module['_interval_mi'] = (a0) => (_interval_mi = Module['_interval_mi'] = wasmExports['interval_mi'])(a0);\nvar _timestamp_mi = Module['_timestamp_mi'] = (a0) => (_timestamp_mi = Module['_timestamp_mi'] = wasmExports['timestamp_mi'])(a0);\nvar _quote_ident = Module['_quote_ident'] = (a0) => (_quote_ident = Module['_quote_ident'] = wasmExports['quote_ident'])(a0);\nvar _timestamp_in = Module['_timestamp_in'] = (a0) => (_timestamp_in = Module['_timestamp_in'] = wasmExports['timestamp_in'])(a0);\nvar _timestamp_cmp = Module['_timestamp_cmp'] = (a0) => (_timestamp_cmp = Module['_timestamp_cmp'] = wasmExports['timestamp_cmp'])(a0);\nvar _interval_cmp = Module['_interval_cmp'] = (a0) => (_interval_cmp = Module['_interval_cmp'] = wasmExports['interval_cmp'])(a0);\nvar _timetz_cmp = Module['_timetz_cmp'] = (a0) => (_timetz_cmp = Module['_timetz_cmp'] = wasmExports['timetz_cmp'])(a0);\nvar _varbit_in = Module['_varbit_in'] = (a0) => (_varbit_in = Module['_varbit_in'] = wasmExports['varbit_in'])(a0);\nvar _biteq = Module['_biteq'] = (a0) => (_biteq = Module['_biteq'] = wasmExports['biteq'])(a0);\nvar _bitge = Module['_bitge'] = (a0) => (_bitge = Module['_bitge'] = wasmExports['bitge'])(a0);\nvar _bitgt = Module['_bitgt'] = (a0) => (_bitgt = Module['_bitgt'] = wasmExports['bitgt'])(a0);\nvar _bitle = Module['_bitle'] = (a0) => (_bitle = Module['_bitle'] = wasmExports['bitle'])(a0);\nvar _bitlt = Module['_bitlt'] = (a0) => (_bitlt = Module['_bitlt'] = wasmExports['bitlt'])(a0);\nvar _bitcmp = Module['_bitcmp'] = (a0) => (_bitcmp = Module['_bitcmp'] = wasmExports['bitcmp'])(a0);\nvar _time_mi_time = Module['_time_mi_time'] = (a0) => (_time_mi_time = Module['_time_mi_time'] = wasmExports['time_mi_time'])(a0);\nvar _numeric_eq = Module['_numeric_eq'] = (a0) => (_numeric_eq = Module['_numeric_eq'] = wasmExports['numeric_eq'])(a0);\nvar _numeric_gt = Module['_numeric_gt'] = (a0) => (_numeric_gt = Module['_numeric_gt'] = wasmExports['numeric_gt'])(a0);\nvar _numeric_ge = Module['_numeric_ge'] = (a0) => (_numeric_ge = Module['_numeric_ge'] = wasmExports['numeric_ge'])(a0);\nvar _numeric_lt = Module['_numeric_lt'] = (a0) => (_numeric_lt = Module['_numeric_lt'] = wasmExports['numeric_lt'])(a0);\nvar _numeric_le = Module['_numeric_le'] = (a0) => (_numeric_le = Module['_numeric_le'] = wasmExports['numeric_le'])(a0);\nvar _numeric_div = Module['_numeric_div'] = (a0) => (_numeric_div = Module['_numeric_div'] = wasmExports['numeric_div'])(a0);\nvar _numeric_float4 = Module['_numeric_float4'] = (a0) => (_numeric_float4 = Module['_numeric_float4'] = wasmExports['numeric_float4'])(a0);\nvar _numeric_cmp = Module['_numeric_cmp'] = (a0) => (_numeric_cmp = Module['_numeric_cmp'] = wasmExports['numeric_cmp'])(a0);\nvar _byteaeq = Module['_byteaeq'] = (a0) => (_byteaeq = Module['_byteaeq'] = wasmExports['byteaeq'])(a0);\nvar _bytealt = Module['_bytealt'] = (a0) => (_bytealt = Module['_bytealt'] = wasmExports['bytealt'])(a0);\nvar _byteale = Module['_byteale'] = (a0) => (_byteale = Module['_byteale'] = wasmExports['byteale'])(a0);\nvar _byteagt = Module['_byteagt'] = (a0) => (_byteagt = Module['_byteagt'] = wasmExports['byteagt'])(a0);\nvar _byteage = Module['_byteage'] = (a0) => (_byteage = Module['_byteage'] = wasmExports['byteage'])(a0);\nvar _byteacmp = Module['_byteacmp'] = (a0) => (_byteacmp = Module['_byteacmp'] = wasmExports['byteacmp'])(a0);\nvar _to_hex32 = Module['_to_hex32'] = (a0) => (_to_hex32 = Module['_to_hex32'] = wasmExports['to_hex32'])(a0);\nvar _uuid_in = Module['_uuid_in'] = (a0) => (_uuid_in = Module['_uuid_in'] = wasmExports['uuid_in'])(a0);\nvar _uuid_out = Module['_uuid_out'] = (a0) => (_uuid_out = Module['_uuid_out'] = wasmExports['uuid_out'])(a0);\nvar _uuid_cmp = Module['_uuid_cmp'] = (a0) => (_uuid_cmp = Module['_uuid_cmp'] = wasmExports['uuid_cmp'])(a0);\nvar _gen_random_uuid = Module['_gen_random_uuid'] = (a0) => (_gen_random_uuid = Module['_gen_random_uuid'] = wasmExports['gen_random_uuid'])(a0);\nvar _enum_lt = Module['_enum_lt'] = (a0) => (_enum_lt = Module['_enum_lt'] = wasmExports['enum_lt'])(a0);\nvar _enum_gt = Module['_enum_gt'] = (a0) => (_enum_gt = Module['_enum_gt'] = wasmExports['enum_gt'])(a0);\nvar _enum_le = Module['_enum_le'] = (a0) => (_enum_le = Module['_enum_le'] = wasmExports['enum_le'])(a0);\nvar _enum_ge = Module['_enum_ge'] = (a0) => (_enum_ge = Module['_enum_ge'] = wasmExports['enum_ge'])(a0);\nvar _enum_cmp = Module['_enum_cmp'] = (a0) => (_enum_cmp = Module['_enum_cmp'] = wasmExports['enum_cmp'])(a0);\nvar _arraycontsel = Module['_arraycontsel'] = (a0) => (_arraycontsel = Module['_arraycontsel'] = wasmExports['arraycontsel'])(a0);\nvar _arraycontjoinsel = Module['_arraycontjoinsel'] = (a0) => (_arraycontjoinsel = Module['_arraycontjoinsel'] = wasmExports['arraycontjoinsel'])(a0);\nvar _macaddr8_eq = Module['_macaddr8_eq'] = (a0) => (_macaddr8_eq = Module['_macaddr8_eq'] = wasmExports['macaddr8_eq'])(a0);\nvar _macaddr8_lt = Module['_macaddr8_lt'] = (a0) => (_macaddr8_lt = Module['_macaddr8_lt'] = wasmExports['macaddr8_lt'])(a0);\nvar _macaddr8_le = Module['_macaddr8_le'] = (a0) => (_macaddr8_le = Module['_macaddr8_le'] = wasmExports['macaddr8_le'])(a0);\nvar _macaddr8_gt = Module['_macaddr8_gt'] = (a0) => (_macaddr8_gt = Module['_macaddr8_gt'] = wasmExports['macaddr8_gt'])(a0);\nvar _macaddr8_ge = Module['_macaddr8_ge'] = (a0) => (_macaddr8_ge = Module['_macaddr8_ge'] = wasmExports['macaddr8_ge'])(a0);\nvar _macaddr8_cmp = Module['_macaddr8_cmp'] = (a0) => (_macaddr8_cmp = Module['_macaddr8_cmp'] = wasmExports['macaddr8_cmp'])(a0);\nvar _PinPortal = Module['_PinPortal'] = (a0) => (_PinPortal = Module['_PinPortal'] = wasmExports['PinPortal'])(a0);\nvar _UnpinPortal = Module['_UnpinPortal'] = (a0) => (_UnpinPortal = Module['_UnpinPortal'] = wasmExports['UnpinPortal'])(a0);\nvar _strnlen = Module['_strnlen'] = (a0, a1) => (_strnlen = Module['_strnlen'] = wasmExports['strnlen'])(a0, a1);\nvar _DefineCustomBoolVariable = Module['_DefineCustomBoolVariable'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) => (_DefineCustomBoolVariable = Module['_DefineCustomBoolVariable'] = wasmExports['DefineCustomBoolVariable'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\nvar _DefineCustomIntVariable = Module['_DefineCustomIntVariable'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) => (_DefineCustomIntVariable = Module['_DefineCustomIntVariable'] = wasmExports['DefineCustomIntVariable'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);\nvar _DefineCustomRealVariable = Module['_DefineCustomRealVariable'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) => (_DefineCustomRealVariable = Module['_DefineCustomRealVariable'] = wasmExports['DefineCustomRealVariable'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);\nvar _DefineCustomStringVariable = Module['_DefineCustomStringVariable'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) => (_DefineCustomStringVariable = Module['_DefineCustomStringVariable'] = wasmExports['DefineCustomStringVariable'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\nvar _DefineCustomEnumVariable = Module['_DefineCustomEnumVariable'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) => (_DefineCustomEnumVariable = Module['_DefineCustomEnumVariable'] = wasmExports['DefineCustomEnumVariable'])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);\nvar _MarkGUCPrefixReserved = Module['_MarkGUCPrefixReserved'] = (a0) => (_MarkGUCPrefixReserved = Module['_MarkGUCPrefixReserved'] = wasmExports['MarkGUCPrefixReserved'])(a0);\nvar _strcspn = Module['_strcspn'] = (a0, a1) => (_strcspn = Module['_strcspn'] = wasmExports['strcspn'])(a0, a1);\nvar _sampler_random_init_state = Module['_sampler_random_init_state'] = (a0, a1) => (_sampler_random_init_state = Module['_sampler_random_init_state'] = wasmExports['sampler_random_init_state'])(a0, a1);\nvar _unpack_sql_state = Module['_unpack_sql_state'] = (a0) => (_unpack_sql_state = Module['_unpack_sql_state'] = wasmExports['unpack_sql_state'])(a0);\nvar _JsonbValueToJsonb = Module['_JsonbValueToJsonb'] = (a0) => (_JsonbValueToJsonb = Module['_JsonbValueToJsonb'] = wasmExports['JsonbValueToJsonb'])(a0);\nvar _ArrayGetIntegerTypmods = Module['_ArrayGetIntegerTypmods'] = (a0, a1) => (_ArrayGetIntegerTypmods = Module['_ArrayGetIntegerTypmods'] = wasmExports['ArrayGetIntegerTypmods'])(a0, a1);\nvar _numeric_is_nan = Module['_numeric_is_nan'] = (a0) => (_numeric_is_nan = Module['_numeric_is_nan'] = wasmExports['numeric_is_nan'])(a0);\nvar _log10 = Module['_log10'] = (a0) => (_log10 = Module['_log10'] = wasmExports['log10'])(a0);\nvar ___multi3 = Module['___multi3'] = (a0, a1, a2, a3, a4) => (___multi3 = Module['___multi3'] = wasmExports['__multi3'])(a0, a1, a2, a3, a4);\nvar _int64_to_numeric = Module['_int64_to_numeric'] = (a0) => (_int64_to_numeric = Module['_int64_to_numeric'] = wasmExports['int64_to_numeric'])(a0);\nvar _numeric_float8_no_overflow = Module['_numeric_float8_no_overflow'] = (a0) => (_numeric_float8_no_overflow = Module['_numeric_float8_no_overflow'] = wasmExports['numeric_float8_no_overflow'])(a0);\nvar _pg_xml_init = Module['_pg_xml_init'] = (a0) => (_pg_xml_init = Module['_pg_xml_init'] = wasmExports['pg_xml_init'])(a0);\nvar _xmlInitParser = Module['_xmlInitParser'] = () => (_xmlInitParser = Module['_xmlInitParser'] = wasmExports['xmlInitParser'])();\nvar _xml_ereport = Module['_xml_ereport'] = (a0, a1, a2, a3) => (_xml_ereport = Module['_xml_ereport'] = wasmExports['xml_ereport'])(a0, a1, a2, a3);\nvar _pg_xml_done = Module['_pg_xml_done'] = (a0, a1) => (_pg_xml_done = Module['_pg_xml_done'] = wasmExports['pg_xml_done'])(a0, a1);\nvar _xmlXPathNewContext = Module['_xmlXPathNewContext'] = (a0) => (_xmlXPathNewContext = Module['_xmlXPathNewContext'] = wasmExports['xmlXPathNewContext'])(a0);\nvar _xmlXPathFreeContext = Module['_xmlXPathFreeContext'] = (a0) => (_xmlXPathFreeContext = Module['_xmlXPathFreeContext'] = wasmExports['xmlXPathFreeContext'])(a0);\nvar _xmlFreeDoc = Module['_xmlFreeDoc'] = (a0) => (_xmlFreeDoc = Module['_xmlFreeDoc'] = wasmExports['xmlFreeDoc'])(a0);\nvar _xmlXPathCompile = Module['_xmlXPathCompile'] = (a0) => (_xmlXPathCompile = Module['_xmlXPathCompile'] = wasmExports['xmlXPathCompile'])(a0);\nvar _xmlXPathCompiledEval = Module['_xmlXPathCompiledEval'] = (a0, a1) => (_xmlXPathCompiledEval = Module['_xmlXPathCompiledEval'] = wasmExports['xmlXPathCompiledEval'])(a0, a1);\nvar _xmlXPathFreeCompExpr = Module['_xmlXPathFreeCompExpr'] = (a0) => (_xmlXPathFreeCompExpr = Module['_xmlXPathFreeCompExpr'] = wasmExports['xmlXPathFreeCompExpr'])(a0);\nvar _xmlStrdup = Module['_xmlStrdup'] = (a0) => (_xmlStrdup = Module['_xmlStrdup'] = wasmExports['xmlStrdup'])(a0);\nvar _initArrayResult = Module['_initArrayResult'] = (a0, a1, a2) => (_initArrayResult = Module['_initArrayResult'] = wasmExports['initArrayResult'])(a0, a1, a2);\nvar _xmlXPathCastNodeToString = Module['_xmlXPathCastNodeToString'] = (a0) => (_xmlXPathCastNodeToString = Module['_xmlXPathCastNodeToString'] = wasmExports['xmlXPathCastNodeToString'])(a0);\nvar _TransferExpandedObject = Module['_TransferExpandedObject'] = (a0, a1) => (_TransferExpandedObject = Module['_TransferExpandedObject'] = wasmExports['TransferExpandedObject'])(a0, a1);\nvar _pushJsonbValue = Module['_pushJsonbValue'] = (a0, a1, a2) => (_pushJsonbValue = Module['_pushJsonbValue'] = wasmExports['pushJsonbValue'])(a0, a1, a2);\nvar _varstr_levenshtein = Module['_varstr_levenshtein'] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_varstr_levenshtein = Module['_varstr_levenshtein'] = wasmExports['varstr_levenshtein'])(a0, a1, a2, a3, a4, a5, a6, a7);\nvar _utf8_to_unicode = Module['_utf8_to_unicode'] = (a0) => (_utf8_to_unicode = Module['_utf8_to_unicode'] = wasmExports['utf8_to_unicode'])(a0);\nvar _generic_restriction_selectivity = Module['_generic_restriction_selectivity'] = (a0, a1, a2, a3, a4, a5) => (_generic_restriction_selectivity = Module['_generic_restriction_selectivity'] = wasmExports['generic_restriction_selectivity'])(a0, a1, a2, a3, a4, a5);\nvar _convert_network_to_scalar = Module['_convert_network_to_scalar'] = (a0, a1, a2) => (_convert_network_to_scalar = Module['_convert_network_to_scalar'] = wasmExports['convert_network_to_scalar'])(a0, a1, a2);\nvar _genericcostestimate = Module['_genericcostestimate'] = (a0, a1, a2, a3) => (_genericcostestimate = Module['_genericcostestimate'] = wasmExports['genericcostestimate'])(a0, a1, a2, a3);\nvar _IsValidJsonNumber = Module['_IsValidJsonNumber'] = (a0, a1) => (_IsValidJsonNumber = Module['_IsValidJsonNumber'] = wasmExports['IsValidJsonNumber'])(a0, a1);\nvar _array_create_iterator = Module['_array_create_iterator'] = (a0, a1, a2) => (_array_create_iterator = Module['_array_create_iterator'] = wasmExports['array_create_iterator'])(a0, a1, a2);\nvar _array_iterate = Module['_array_iterate'] = (a0, a1, a2) => (_array_iterate = Module['_array_iterate'] = wasmExports['array_iterate'])(a0, a1, a2);\nvar _pg_inet_net_ntop = Module['_pg_inet_net_ntop'] = (a0, a1, a2, a3, a4) => (_pg_inet_net_ntop = Module['_pg_inet_net_ntop'] = wasmExports['pg_inet_net_ntop'])(a0, a1, a2, a3, a4);\nvar _expand_array = Module['_expand_array'] = (a0, a1, a2) => (_expand_array = Module['_expand_array'] = wasmExports['expand_array'])(a0, a1, a2);\nvar _forkname_to_number = Module['_forkname_to_number'] = (a0) => (_forkname_to_number = Module['_forkname_to_number'] = wasmExports['forkname_to_number'])(a0);\nvar _path_is_relative_and_below_cwd = Module['_path_is_relative_and_below_cwd'] = (a0) => (_path_is_relative_and_below_cwd = Module['_path_is_relative_and_below_cwd'] = wasmExports['path_is_relative_and_below_cwd'])(a0);\nvar _make_expanded_record_from_typeid = Module['_make_expanded_record_from_typeid'] = (a0, a1, a2) => (_make_expanded_record_from_typeid = Module['_make_expanded_record_from_typeid'] = wasmExports['make_expanded_record_from_typeid'])(a0, a1, a2);\nvar _make_expanded_record_from_tupdesc = Module['_make_expanded_record_from_tupdesc'] = (a0, a1) => (_make_expanded_record_from_tupdesc = Module['_make_expanded_record_from_tupdesc'] = wasmExports['make_expanded_record_from_tupdesc'])(a0, a1);\nvar _make_expanded_record_from_exprecord = Module['_make_expanded_record_from_exprecord'] = (a0, a1) => (_make_expanded_record_from_exprecord = Module['_make_expanded_record_from_exprecord'] = wasmExports['make_expanded_record_from_exprecord'])(a0, a1);\nvar _expanded_record_set_tuple = Module['_expanded_record_set_tuple'] = (a0, a1, a2, a3) => (_expanded_record_set_tuple = Module['_expanded_record_set_tuple'] = wasmExports['expanded_record_set_tuple'])(a0, a1, a2, a3);\nvar _domain_check = Module['_domain_check'] = (a0, a1, a2, a3, a4) => (_domain_check = Module['_domain_check'] = wasmExports['domain_check'])(a0, a1, a2, a3, a4);\nvar _expanded_record_get_tuple = Module['_expanded_record_get_tuple'] = (a0) => (_expanded_record_get_tuple = Module['_expanded_record_get_tuple'] = wasmExports['expanded_record_get_tuple'])(a0);\nvar _deconstruct_expanded_record = Module['_deconstruct_expanded_record'] = (a0) => (_deconstruct_expanded_record = Module['_deconstruct_expanded_record'] = wasmExports['deconstruct_expanded_record'])(a0);\nvar _expanded_record_lookup_field = Module['_expanded_record_lookup_field'] = (a0, a1, a2) => (_expanded_record_lookup_field = Module['_expanded_record_lookup_field'] = wasmExports['expanded_record_lookup_field'])(a0, a1, a2);\nvar _expanded_record_set_field_internal = Module['_expanded_record_set_field_internal'] = (a0, a1, a2, a3, a4, a5) => (_expanded_record_set_field_internal = Module['_expanded_record_set_field_internal'] = wasmExports['expanded_record_set_field_internal'])(a0, a1, a2, a3, a4, a5);\nvar _expanded_record_set_fields = Module['_expanded_record_set_fields'] = (a0, a1, a2, a3) => (_expanded_record_set_fields = Module['_expanded_record_set_fields'] = wasmExports['expanded_record_set_fields'])(a0, a1, a2, a3);\nvar _float8in_internal = Module['_float8in_internal'] = (a0, a1, a2, a3, a4) => (_float8in_internal = Module['_float8in_internal'] = wasmExports['float8in_internal'])(a0, a1, a2, a3, a4);\nvar _str_tolower = Module['_str_tolower'] = (a0, a1, a2) => (_str_tolower = Module['_str_tolower'] = wasmExports['str_tolower'])(a0, a1, a2);\nvar _pg_get_indexdef_columns_extended = Module['_pg_get_indexdef_columns_extended'] = (a0, a1) => (_pg_get_indexdef_columns_extended = Module['_pg_get_indexdef_columns_extended'] = wasmExports['pg_get_indexdef_columns_extended'])(a0, a1);\nvar _RelationIsVisible = Module['_RelationIsVisible'] = (a0) => (_RelationIsVisible = Module['_RelationIsVisible'] = wasmExports['RelationIsVisible'])(a0);\nvar _float4in_internal = Module['_float4in_internal'] = (a0, a1, a2, a3, a4) => (_float4in_internal = Module['_float4in_internal'] = wasmExports['float4in_internal'])(a0, a1, a2, a3, a4);\nvar _strtof = Module['_strtof'] = (a0, a1) => (_strtof = Module['_strtof'] = wasmExports['strtof'])(a0, a1);\nvar _float_to_shortest_decimal_buf = Module['_float_to_shortest_decimal_buf'] = (a0, a1) => (_float_to_shortest_decimal_buf = Module['_float_to_shortest_decimal_buf'] = wasmExports['float_to_shortest_decimal_buf'])(a0, a1);\nvar _float8out_internal = Module['_float8out_internal'] = (a0) => (_float8out_internal = Module['_float8out_internal'] = wasmExports['float8out_internal'])(a0);\nvar _acos = Module['_acos'] = (a0) => (_acos = Module['_acos'] = wasmExports['acos'])(a0);\nvar _asin = Module['_asin'] = (a0) => (_asin = Module['_asin'] = wasmExports['asin'])(a0);\nvar _cos = Module['_cos'] = (a0) => (_cos = Module['_cos'] = wasmExports['cos'])(a0);\nvar _sin = Module['_sin'] = (a0) => (_sin = Module['_sin'] = wasmExports['sin'])(a0);\nvar _fmod = Module['_fmod'] = (a0, a1) => (_fmod = Module['_fmod'] = wasmExports['fmod'])(a0, a1);\nvar _localtime = Module['_localtime'] = (a0) => (_localtime = Module['_localtime'] = wasmExports['localtime'])(a0);\nvar _strftime = Module['_strftime'] = (a0, a1, a2, a3) => (_strftime = Module['_strftime'] = wasmExports['strftime'])(a0, a1, a2, a3);\nvar _in_error_recursion_trouble = Module['_in_error_recursion_trouble'] = () => (_in_error_recursion_trouble = Module['_in_error_recursion_trouble'] = wasmExports['in_error_recursion_trouble'])();\nvar _getinternalerrposition = Module['_getinternalerrposition'] = () => (_getinternalerrposition = Module['_getinternalerrposition'] = wasmExports['getinternalerrposition'])();\nvar _GetErrorContextStack = Module['_GetErrorContextStack'] = () => (_GetErrorContextStack = Module['_GetErrorContextStack'] = wasmExports['GetErrorContextStack'])();\nvar _GetPublicationByName = Module['_GetPublicationByName'] = (a0, a1) => (_GetPublicationByName = Module['_GetPublicationByName'] = wasmExports['GetPublicationByName'])(a0, a1);\nvar _function_parse_error_transpose = Module['_function_parse_error_transpose'] = (a0) => (_function_parse_error_transpose = Module['_function_parse_error_transpose'] = wasmExports['function_parse_error_transpose'])(a0);\nvar _RelnameGetRelid = Module['_RelnameGetRelid'] = (a0) => (_RelnameGetRelid = Module['_RelnameGetRelid'] = wasmExports['RelnameGetRelid'])(a0);\nvar _fputs = Module['_fputs'] = (a0, a1) => (_fputs = Module['_fputs'] = wasmExports['fputs'])(a0, a1);\nvar _popen = Module['_popen'] = (a0, a1) => (_popen = Module['_popen'] = wasmExports['popen'])(a0, a1);\nvar _float_to_shortest_decimal_bufn = Module['_float_to_shortest_decimal_bufn'] = (a0, a1) => (_float_to_shortest_decimal_bufn = Module['_float_to_shortest_decimal_bufn'] = wasmExports['float_to_shortest_decimal_bufn'])(a0, a1);\nvar _pg_prng_uint64 = Module['_pg_prng_uint64'] = (a0) => (_pg_prng_uint64 = Module['_pg_prng_uint64'] = wasmExports['pg_prng_uint64'])(a0);\nvar _scram_ClientKey = Module['_scram_ClientKey'] = (a0, a1, a2, a3, a4) => (_scram_ClientKey = Module['_scram_ClientKey'] = wasmExports['scram_ClientKey'])(a0, a1, a2, a3, a4);\nvar _pg_encoding_dsplen = Module['_pg_encoding_dsplen'] = (a0, a1) => (_pg_encoding_dsplen = Module['_pg_encoding_dsplen'] = wasmExports['pg_encoding_dsplen'])(a0, a1);\nvar _getcwd = Module['_getcwd'] = (a0, a1) => (_getcwd = Module['_getcwd'] = wasmExports['getcwd'])(a0, a1);\nvar _pg_get_user_home_dir = Module['_pg_get_user_home_dir'] = (a0, a1, a2) => (_pg_get_user_home_dir = Module['_pg_get_user_home_dir'] = wasmExports['pg_get_user_home_dir'])(a0, a1, a2);\nvar _nanosleep = Module['_nanosleep'] = (a0, a1) => (_nanosleep = Module['_nanosleep'] = wasmExports['nanosleep'])(a0, a1);\nvar _snprintf = Module['_snprintf'] = (a0, a1, a2, a3) => (_snprintf = Module['_snprintf'] = wasmExports['snprintf'])(a0, a1, a2, a3);\nvar _pg_strerror_r = Module['_pg_strerror_r'] = (a0, a1, a2) => (_pg_strerror_r = Module['_pg_strerror_r'] = wasmExports['pg_strerror_r'])(a0, a1, a2);\nvar _pthread_mutex_lock = Module['_pthread_mutex_lock'] = (a0) => (_pthread_mutex_lock = Module['_pthread_mutex_lock'] = wasmExports['pthread_mutex_lock'])(a0);\nvar _pthread_mutex_unlock = Module['_pthread_mutex_unlock'] = (a0) => (_pthread_mutex_unlock = Module['_pthread_mutex_unlock'] = wasmExports['pthread_mutex_unlock'])(a0);\nvar _strncat = Module['_strncat'] = (a0, a1, a2) => (_strncat = Module['_strncat'] = wasmExports['strncat'])(a0, a1, a2);\nvar _PQexec = Module['_PQexec'] = (a0, a1) => (_PQexec = Module['_PQexec'] = wasmExports['PQexec'])(a0, a1);\nvar _PQsetSingleRowMode = Module['_PQsetSingleRowMode'] = (a0) => (_PQsetSingleRowMode = Module['_PQsetSingleRowMode'] = wasmExports['PQsetSingleRowMode'])(a0);\nvar _PQcmdStatus = Module['_PQcmdStatus'] = (a0) => (_PQcmdStatus = Module['_PQcmdStatus'] = wasmExports['PQcmdStatus'])(a0);\nvar _pthread_sigmask = Module['_pthread_sigmask'] = (a0, a1, a2) => (_pthread_sigmask = Module['_pthread_sigmask'] = wasmExports['pthread_sigmask'])(a0, a1, a2);\nvar _sigismember = Module['_sigismember'] = (a0, a1) => (_sigismember = Module['_sigismember'] = wasmExports['sigismember'])(a0, a1);\nvar _sigpending = Module['_sigpending'] = (a0) => (_sigpending = Module['_sigpending'] = wasmExports['sigpending'])(a0);\nvar _sigwait = Module['_sigwait'] = (a0, a1) => (_sigwait = Module['_sigwait'] = wasmExports['sigwait'])(a0, a1);\nvar _isolat1ToUTF8 = Module['_isolat1ToUTF8'] = (a0, a1, a2, a3) => (_isolat1ToUTF8 = Module['_isolat1ToUTF8'] = wasmExports['isolat1ToUTF8'])(a0, a1, a2, a3);\nvar _UTF8Toisolat1 = Module['_UTF8Toisolat1'] = (a0, a1, a2, a3) => (_UTF8Toisolat1 = Module['_UTF8Toisolat1'] = wasmExports['UTF8Toisolat1'])(a0, a1, a2, a3);\nvar _vfprintf = Module['_vfprintf'] = (a0, a1, a2) => (_vfprintf = Module['_vfprintf'] = wasmExports['vfprintf'])(a0, a1, a2);\nvar _vsnprintf = Module['_vsnprintf'] = (a0, a1, a2, a3) => (_vsnprintf = Module['_vsnprintf'] = wasmExports['vsnprintf'])(a0, a1, a2, a3);\nvar _xmlParserValidityWarning = Module['_xmlParserValidityWarning'] = (a0, a1, a2) => (_xmlParserValidityWarning = Module['_xmlParserValidityWarning'] = wasmExports['xmlParserValidityWarning'])(a0, a1, a2);\nvar _xmlParserValidityError = Module['_xmlParserValidityError'] = (a0, a1, a2) => (_xmlParserValidityError = Module['_xmlParserValidityError'] = wasmExports['xmlParserValidityError'])(a0, a1, a2);\nvar _xmlParserError = Module['_xmlParserError'] = (a0, a1, a2) => (_xmlParserError = Module['_xmlParserError'] = wasmExports['xmlParserError'])(a0, a1, a2);\nvar _xmlParserWarning = Module['_xmlParserWarning'] = (a0, a1, a2) => (_xmlParserWarning = Module['_xmlParserWarning'] = wasmExports['xmlParserWarning'])(a0, a1, a2);\nvar _fprintf = Module['_fprintf'] = (a0, a1, a2) => (_fprintf = Module['_fprintf'] = wasmExports['fprintf'])(a0, a1, a2);\nvar ___xmlParserInputBufferCreateFilename = Module['___xmlParserInputBufferCreateFilename'] = (a0, a1) => (___xmlParserInputBufferCreateFilename = Module['___xmlParserInputBufferCreateFilename'] = wasmExports['__xmlParserInputBufferCreateFilename'])(a0, a1);\nvar ___xmlOutputBufferCreateFilename = Module['___xmlOutputBufferCreateFilename'] = (a0, a1, a2) => (___xmlOutputBufferCreateFilename = Module['___xmlOutputBufferCreateFilename'] = wasmExports['__xmlOutputBufferCreateFilename'])(a0, a1, a2);\nvar _xmlSAX2InternalSubset = Module['_xmlSAX2InternalSubset'] = (a0, a1, a2, a3) => (_xmlSAX2InternalSubset = Module['_xmlSAX2InternalSubset'] = wasmExports['xmlSAX2InternalSubset'])(a0, a1, a2, a3);\nvar _xmlSAX2IsStandalone = Module['_xmlSAX2IsStandalone'] = (a0) => (_xmlSAX2IsStandalone = Module['_xmlSAX2IsStandalone'] = wasmExports['xmlSAX2IsStandalone'])(a0);\nvar _xmlSAX2HasInternalSubset = Module['_xmlSAX2HasInternalSubset'] = (a0) => (_xmlSAX2HasInternalSubset = Module['_xmlSAX2HasInternalSubset'] = wasmExports['xmlSAX2HasInternalSubset'])(a0);\nvar _xmlSAX2HasExternalSubset = Module['_xmlSAX2HasExternalSubset'] = (a0) => (_xmlSAX2HasExternalSubset = Module['_xmlSAX2HasExternalSubset'] = wasmExports['xmlSAX2HasExternalSubset'])(a0);\nvar _xmlSAX2ResolveEntity = Module['_xmlSAX2ResolveEntity'] = (a0, a1, a2) => (_xmlSAX2ResolveEntity = Module['_xmlSAX2ResolveEntity'] = wasmExports['xmlSAX2ResolveEntity'])(a0, a1, a2);\nvar _xmlSAX2GetEntity = Module['_xmlSAX2GetEntity'] = (a0, a1) => (_xmlSAX2GetEntity = Module['_xmlSAX2GetEntity'] = wasmExports['xmlSAX2GetEntity'])(a0, a1);\nvar _xmlSAX2EntityDecl = Module['_xmlSAX2EntityDecl'] = (a0, a1, a2, a3, a4, a5) => (_xmlSAX2EntityDecl = Module['_xmlSAX2EntityDecl'] = wasmExports['xmlSAX2EntityDecl'])(a0, a1, a2, a3, a4, a5);\nvar _xmlSAX2NotationDecl = Module['_xmlSAX2NotationDecl'] = (a0, a1, a2, a3) => (_xmlSAX2NotationDecl = Module['_xmlSAX2NotationDecl'] = wasmExports['xmlSAX2NotationDecl'])(a0, a1, a2, a3);\nvar _xmlSAX2AttributeDecl = Module['_xmlSAX2AttributeDecl'] = (a0, a1, a2, a3, a4, a5, a6) => (_xmlSAX2AttributeDecl = Module['_xmlSAX2AttributeDecl'] = wasmExports['xmlSAX2AttributeDecl'])(a0, a1, a2, a3, a4, a5, a6);\nvar _xmlSAX2ElementDecl = Module['_xmlSAX2ElementDecl'] = (a0, a1, a2, a3) => (_xmlSAX2ElementDecl = Module['_xmlSAX2ElementDecl'] = wasmExports['xmlSAX2ElementDecl'])(a0, a1, a2, a3);\nvar _xmlSAX2UnparsedEntityDecl = Module['_xmlSAX2UnparsedEntityDecl'] = (a0, a1, a2, a3, a4) => (_xmlSAX2UnparsedEntityDecl = Module['_xmlSAX2UnparsedEntityDecl'] = wasmExports['xmlSAX2UnparsedEntityDecl'])(a0, a1, a2, a3, a4);\nvar _xmlSAX2SetDocumentLocator = Module['_xmlSAX2SetDocumentLocator'] = (a0, a1) => (_xmlSAX2SetDocumentLocator = Module['_xmlSAX2SetDocumentLocator'] = wasmExports['xmlSAX2SetDocumentLocator'])(a0, a1);\nvar _xmlSAX2StartDocument = Module['_xmlSAX2StartDocument'] = (a0) => (_xmlSAX2StartDocument = Module['_xmlSAX2StartDocument'] = wasmExports['xmlSAX2StartDocument'])(a0);\nvar _xmlSAX2EndDocument = Module['_xmlSAX2EndDocument'] = (a0) => (_xmlSAX2EndDocument = Module['_xmlSAX2EndDocument'] = wasmExports['xmlSAX2EndDocument'])(a0);\nvar _xmlSAX2StartElement = Module['_xmlSAX2StartElement'] = (a0, a1, a2) => (_xmlSAX2StartElement = Module['_xmlSAX2StartElement'] = wasmExports['xmlSAX2StartElement'])(a0, a1, a2);\nvar _xmlSAX2EndElement = Module['_xmlSAX2EndElement'] = (a0, a1) => (_xmlSAX2EndElement = Module['_xmlSAX2EndElement'] = wasmExports['xmlSAX2EndElement'])(a0, a1);\nvar _xmlSAX2Reference = Module['_xmlSAX2Reference'] = (a0, a1) => (_xmlSAX2Reference = Module['_xmlSAX2Reference'] = wasmExports['xmlSAX2Reference'])(a0, a1);\nvar _xmlSAX2Characters = Module['_xmlSAX2Characters'] = (a0, a1, a2) => (_xmlSAX2Characters = Module['_xmlSAX2Characters'] = wasmExports['xmlSAX2Characters'])(a0, a1, a2);\nvar _xmlSAX2ProcessingInstruction = Module['_xmlSAX2ProcessingInstruction'] = (a0, a1, a2) => (_xmlSAX2ProcessingInstruction = Module['_xmlSAX2ProcessingInstruction'] = wasmExports['xmlSAX2ProcessingInstruction'])(a0, a1, a2);\nvar _xmlSAX2Comment = Module['_xmlSAX2Comment'] = (a0, a1) => (_xmlSAX2Comment = Module['_xmlSAX2Comment'] = wasmExports['xmlSAX2Comment'])(a0, a1);\nvar _xmlSAX2GetParameterEntity = Module['_xmlSAX2GetParameterEntity'] = (a0, a1) => (_xmlSAX2GetParameterEntity = Module['_xmlSAX2GetParameterEntity'] = wasmExports['xmlSAX2GetParameterEntity'])(a0, a1);\nvar _xmlSAX2CDataBlock = Module['_xmlSAX2CDataBlock'] = (a0, a1, a2) => (_xmlSAX2CDataBlock = Module['_xmlSAX2CDataBlock'] = wasmExports['xmlSAX2CDataBlock'])(a0, a1, a2);\nvar _xmlSAX2ExternalSubset = Module['_xmlSAX2ExternalSubset'] = (a0, a1, a2, a3) => (_xmlSAX2ExternalSubset = Module['_xmlSAX2ExternalSubset'] = wasmExports['xmlSAX2ExternalSubset'])(a0, a1, a2, a3);\nvar _xmlSAX2GetPublicId = Module['_xmlSAX2GetPublicId'] = (a0) => (_xmlSAX2GetPublicId = Module['_xmlSAX2GetPublicId'] = wasmExports['xmlSAX2GetPublicId'])(a0);\nvar _xmlSAX2GetSystemId = Module['_xmlSAX2GetSystemId'] = (a0) => (_xmlSAX2GetSystemId = Module['_xmlSAX2GetSystemId'] = wasmExports['xmlSAX2GetSystemId'])(a0);\nvar _xmlSAX2GetLineNumber = Module['_xmlSAX2GetLineNumber'] = (a0) => (_xmlSAX2GetLineNumber = Module['_xmlSAX2GetLineNumber'] = wasmExports['xmlSAX2GetLineNumber'])(a0);\nvar _xmlSAX2GetColumnNumber = Module['_xmlSAX2GetColumnNumber'] = (a0) => (_xmlSAX2GetColumnNumber = Module['_xmlSAX2GetColumnNumber'] = wasmExports['xmlSAX2GetColumnNumber'])(a0);\nvar _xmlSAX2IgnorableWhitespace = Module['_xmlSAX2IgnorableWhitespace'] = (a0, a1, a2) => (_xmlSAX2IgnorableWhitespace = Module['_xmlSAX2IgnorableWhitespace'] = wasmExports['xmlSAX2IgnorableWhitespace'])(a0, a1, a2);\nvar _xmlHashDefaultDeallocator = Module['_xmlHashDefaultDeallocator'] = (a0, a1) => (_xmlHashDefaultDeallocator = Module['_xmlHashDefaultDeallocator'] = wasmExports['xmlHashDefaultDeallocator'])(a0, a1);\nvar _iconv_open = Module['_iconv_open'] = (a0, a1) => (_iconv_open = Module['_iconv_open'] = wasmExports['iconv_open'])(a0, a1);\nvar _iconv_close = Module['_iconv_close'] = (a0) => (_iconv_close = Module['_iconv_close'] = wasmExports['iconv_close'])(a0);\nvar _iconv = Module['_iconv'] = (a0, a1, a2, a3, a4) => (_iconv = Module['_iconv'] = wasmExports['iconv'])(a0, a1, a2, a3, a4);\nvar _UTF8ToHtml = Module['_UTF8ToHtml'] = (a0, a1, a2, a3) => (_UTF8ToHtml = Module['_UTF8ToHtml'] = wasmExports['UTF8ToHtml'])(a0, a1, a2, a3);\nvar _xmlReadMemory = Module['_xmlReadMemory'] = (a0, a1, a2, a3, a4) => (_xmlReadMemory = Module['_xmlReadMemory'] = wasmExports['xmlReadMemory'])(a0, a1, a2, a3, a4);\nvar _xmlSAX2StartElementNs = Module['_xmlSAX2StartElementNs'] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => (_xmlSAX2StartElementNs = Module['_xmlSAX2StartElementNs'] = wasmExports['xmlSAX2StartElementNs'])(a0, a1, a2, a3, a4, a5, a6, a7, a8);\nvar _xmlSAX2EndElementNs = Module['_xmlSAX2EndElementNs'] = (a0, a1, a2, a3) => (_xmlSAX2EndElementNs = Module['_xmlSAX2EndElementNs'] = wasmExports['xmlSAX2EndElementNs'])(a0, a1, a2, a3);\nvar ___cxa_atexit = Module['___cxa_atexit'] = (a0, a1, a2) => (___cxa_atexit = Module['___cxa_atexit'] = wasmExports['__cxa_atexit'])(a0, a1, a2);\nvar _xmlDocGetRootElement = Module['_xmlDocGetRootElement'] = (a0) => (_xmlDocGetRootElement = Module['_xmlDocGetRootElement'] = wasmExports['xmlDocGetRootElement'])(a0);\nvar _xmlFileMatch = Module['_xmlFileMatch'] = (a0) => (_xmlFileMatch = Module['_xmlFileMatch'] = wasmExports['xmlFileMatch'])(a0);\nvar _xmlFileOpen = Module['_xmlFileOpen'] = (a0) => (_xmlFileOpen = Module['_xmlFileOpen'] = wasmExports['xmlFileOpen'])(a0);\nvar _xmlFileRead = Module['_xmlFileRead'] = (a0, a1, a2) => (_xmlFileRead = Module['_xmlFileRead'] = wasmExports['xmlFileRead'])(a0, a1, a2);\nvar _xmlFileClose = Module['_xmlFileClose'] = (a0) => (_xmlFileClose = Module['_xmlFileClose'] = wasmExports['xmlFileClose'])(a0);\nvar _gzread = Module['_gzread'] = (a0, a1, a2) => (_gzread = Module['_gzread'] = wasmExports['gzread'])(a0, a1, a2);\nvar _gzclose = Module['_gzclose'] = (a0) => (_gzclose = Module['_gzclose'] = wasmExports['gzclose'])(a0);\nvar _gzdirect = Module['_gzdirect'] = (a0) => (_gzdirect = Module['_gzdirect'] = wasmExports['gzdirect'])(a0);\nvar _gzdopen = Module['_gzdopen'] = (a0, a1) => (_gzdopen = Module['_gzdopen'] = wasmExports['gzdopen'])(a0, a1);\nvar _gzopen = Module['_gzopen'] = (a0, a1) => (_gzopen = Module['_gzopen'] = wasmExports['gzopen'])(a0, a1);\nvar _gzwrite = Module['_gzwrite'] = (a0, a1, a2) => (_gzwrite = Module['_gzwrite'] = wasmExports['gzwrite'])(a0, a1, a2);\nvar _xmlUCSIsCatNd = Module['_xmlUCSIsCatNd'] = (a0) => (_xmlUCSIsCatNd = Module['_xmlUCSIsCatNd'] = wasmExports['xmlUCSIsCatNd'])(a0);\nvar _xmlUCSIsCatP = Module['_xmlUCSIsCatP'] = (a0) => (_xmlUCSIsCatP = Module['_xmlUCSIsCatP'] = wasmExports['xmlUCSIsCatP'])(a0);\nvar _xmlUCSIsCatZ = Module['_xmlUCSIsCatZ'] = (a0) => (_xmlUCSIsCatZ = Module['_xmlUCSIsCatZ'] = wasmExports['xmlUCSIsCatZ'])(a0);\nvar _xmlUCSIsCatC = Module['_xmlUCSIsCatC'] = (a0) => (_xmlUCSIsCatC = Module['_xmlUCSIsCatC'] = wasmExports['xmlUCSIsCatC'])(a0);\nvar _xmlUCSIsCatL = Module['_xmlUCSIsCatL'] = (a0) => (_xmlUCSIsCatL = Module['_xmlUCSIsCatL'] = wasmExports['xmlUCSIsCatL'])(a0);\nvar _xmlUCSIsCatLu = Module['_xmlUCSIsCatLu'] = (a0) => (_xmlUCSIsCatLu = Module['_xmlUCSIsCatLu'] = wasmExports['xmlUCSIsCatLu'])(a0);\nvar _xmlUCSIsCatLl = Module['_xmlUCSIsCatLl'] = (a0) => (_xmlUCSIsCatLl = Module['_xmlUCSIsCatLl'] = wasmExports['xmlUCSIsCatLl'])(a0);\nvar _xmlUCSIsCatLt = Module['_xmlUCSIsCatLt'] = (a0) => (_xmlUCSIsCatLt = Module['_xmlUCSIsCatLt'] = wasmExports['xmlUCSIsCatLt'])(a0);\nvar _xmlUCSIsCatLm = Module['_xmlUCSIsCatLm'] = (a0) => (_xmlUCSIsCatLm = Module['_xmlUCSIsCatLm'] = wasmExports['xmlUCSIsCatLm'])(a0);\nvar _xmlUCSIsCatLo = Module['_xmlUCSIsCatLo'] = (a0) => (_xmlUCSIsCatLo = Module['_xmlUCSIsCatLo'] = wasmExports['xmlUCSIsCatLo'])(a0);\nvar _xmlUCSIsCatM = Module['_xmlUCSIsCatM'] = (a0) => (_xmlUCSIsCatM = Module['_xmlUCSIsCatM'] = wasmExports['xmlUCSIsCatM'])(a0);\nvar _xmlUCSIsCatMn = Module['_xmlUCSIsCatMn'] = (a0) => (_xmlUCSIsCatMn = Module['_xmlUCSIsCatMn'] = wasmExports['xmlUCSIsCatMn'])(a0);\nvar _xmlUCSIsCatMc = Module['_xmlUCSIsCatMc'] = (a0) => (_xmlUCSIsCatMc = Module['_xmlUCSIsCatMc'] = wasmExports['xmlUCSIsCatMc'])(a0);\nvar _xmlUCSIsCatMe = Module['_xmlUCSIsCatMe'] = (a0) => (_xmlUCSIsCatMe = Module['_xmlUCSIsCatMe'] = wasmExports['xmlUCSIsCatMe'])(a0);\nvar _xmlUCSIsCatN = Module['_xmlUCSIsCatN'] = (a0) => (_xmlUCSIsCatN = Module['_xmlUCSIsCatN'] = wasmExports['xmlUCSIsCatN'])(a0);\nvar _xmlUCSIsCatNl = Module['_xmlUCSIsCatNl'] = (a0) => (_xmlUCSIsCatNl = Module['_xmlUCSIsCatNl'] = wasmExports['xmlUCSIsCatNl'])(a0);\nvar _xmlUCSIsCatNo = Module['_xmlUCSIsCatNo'] = (a0) => (_xmlUCSIsCatNo = Module['_xmlUCSIsCatNo'] = wasmExports['xmlUCSIsCatNo'])(a0);\nvar _xmlUCSIsCatPc = Module['_xmlUCSIsCatPc'] = (a0) => (_xmlUCSIsCatPc = Module['_xmlUCSIsCatPc'] = wasmExports['xmlUCSIsCatPc'])(a0);\nvar _xmlUCSIsCatPd = Module['_xmlUCSIsCatPd'] = (a0) => (_xmlUCSIsCatPd = Module['_xmlUCSIsCatPd'] = wasmExports['xmlUCSIsCatPd'])(a0);\nvar _xmlUCSIsCatPs = Module['_xmlUCSIsCatPs'] = (a0) => (_xmlUCSIsCatPs = Module['_xmlUCSIsCatPs'] = wasmExports['xmlUCSIsCatPs'])(a0);\nvar _xmlUCSIsCatPe = Module['_xmlUCSIsCatPe'] = (a0) => (_xmlUCSIsCatPe = Module['_xmlUCSIsCatPe'] = wasmExports['xmlUCSIsCatPe'])(a0);\nvar _xmlUCSIsCatPi = Module['_xmlUCSIsCatPi'] = (a0) => (_xmlUCSIsCatPi = Module['_xmlUCSIsCatPi'] = wasmExports['xmlUCSIsCatPi'])(a0);\nvar _xmlUCSIsCatPf = Module['_xmlUCSIsCatPf'] = (a0) => (_xmlUCSIsCatPf = Module['_xmlUCSIsCatPf'] = wasmExports['xmlUCSIsCatPf'])(a0);\nvar _xmlUCSIsCatPo = Module['_xmlUCSIsCatPo'] = (a0) => (_xmlUCSIsCatPo = Module['_xmlUCSIsCatPo'] = wasmExports['xmlUCSIsCatPo'])(a0);\nvar _xmlUCSIsCatZs = Module['_xmlUCSIsCatZs'] = (a0) => (_xmlUCSIsCatZs = Module['_xmlUCSIsCatZs'] = wasmExports['xmlUCSIsCatZs'])(a0);\nvar _xmlUCSIsCatZl = Module['_xmlUCSIsCatZl'] = (a0) => (_xmlUCSIsCatZl = Module['_xmlUCSIsCatZl'] = wasmExports['xmlUCSIsCatZl'])(a0);\nvar _xmlUCSIsCatZp = Module['_xmlUCSIsCatZp'] = (a0) => (_xmlUCSIsCatZp = Module['_xmlUCSIsCatZp'] = wasmExports['xmlUCSIsCatZp'])(a0);\nvar _xmlUCSIsCatS = Module['_xmlUCSIsCatS'] = (a0) => (_xmlUCSIsCatS = Module['_xmlUCSIsCatS'] = wasmExports['xmlUCSIsCatS'])(a0);\nvar _xmlUCSIsCatSm = Module['_xmlUCSIsCatSm'] = (a0) => (_xmlUCSIsCatSm = Module['_xmlUCSIsCatSm'] = wasmExports['xmlUCSIsCatSm'])(a0);\nvar _xmlUCSIsCatSc = Module['_xmlUCSIsCatSc'] = (a0) => (_xmlUCSIsCatSc = Module['_xmlUCSIsCatSc'] = wasmExports['xmlUCSIsCatSc'])(a0);\nvar _xmlUCSIsCatSk = Module['_xmlUCSIsCatSk'] = (a0) => (_xmlUCSIsCatSk = Module['_xmlUCSIsCatSk'] = wasmExports['xmlUCSIsCatSk'])(a0);\nvar _xmlUCSIsCatSo = Module['_xmlUCSIsCatSo'] = (a0) => (_xmlUCSIsCatSo = Module['_xmlUCSIsCatSo'] = wasmExports['xmlUCSIsCatSo'])(a0);\nvar _xmlUCSIsCatCc = Module['_xmlUCSIsCatCc'] = (a0) => (_xmlUCSIsCatCc = Module['_xmlUCSIsCatCc'] = wasmExports['xmlUCSIsCatCc'])(a0);\nvar _xmlUCSIsCatCf = Module['_xmlUCSIsCatCf'] = (a0) => (_xmlUCSIsCatCf = Module['_xmlUCSIsCatCf'] = wasmExports['xmlUCSIsCatCf'])(a0);\nvar _xmlUCSIsCatCo = Module['_xmlUCSIsCatCo'] = (a0) => (_xmlUCSIsCatCo = Module['_xmlUCSIsCatCo'] = wasmExports['xmlUCSIsCatCo'])(a0);\nvar _xmlUCSIsAegeanNumbers = Module['_xmlUCSIsAegeanNumbers'] = (a0) => (_xmlUCSIsAegeanNumbers = Module['_xmlUCSIsAegeanNumbers'] = wasmExports['xmlUCSIsAegeanNumbers'])(a0);\nvar _xmlUCSIsAlphabeticPresentationForms = Module['_xmlUCSIsAlphabeticPresentationForms'] = (a0) => (_xmlUCSIsAlphabeticPresentationForms = Module['_xmlUCSIsAlphabeticPresentationForms'] = wasmExports['xmlUCSIsAlphabeticPresentationForms'])(a0);\nvar _xmlUCSIsArabic = Module['_xmlUCSIsArabic'] = (a0) => (_xmlUCSIsArabic = Module['_xmlUCSIsArabic'] = wasmExports['xmlUCSIsArabic'])(a0);\nvar _xmlUCSIsArabicPresentationFormsA = Module['_xmlUCSIsArabicPresentationFormsA'] = (a0) => (_xmlUCSIsArabicPresentationFormsA = Module['_xmlUCSIsArabicPresentationFormsA'] = wasmExports['xmlUCSIsArabicPresentationFormsA'])(a0);\nvar _xmlUCSIsArabicPresentationFormsB = Module['_xmlUCSIsArabicPresentationFormsB'] = (a0) => (_xmlUCSIsArabicPresentationFormsB = Module['_xmlUCSIsArabicPresentationFormsB'] = wasmExports['xmlUCSIsArabicPresentationFormsB'])(a0);\nvar _xmlUCSIsArmenian = Module['_xmlUCSIsArmenian'] = (a0) => (_xmlUCSIsArmenian = Module['_xmlUCSIsArmenian'] = wasmExports['xmlUCSIsArmenian'])(a0);\nvar _xmlUCSIsArrows = Module['_xmlUCSIsArrows'] = (a0) => (_xmlUCSIsArrows = Module['_xmlUCSIsArrows'] = wasmExports['xmlUCSIsArrows'])(a0);\nvar _xmlUCSIsBasicLatin = Module['_xmlUCSIsBasicLatin'] = (a0) => (_xmlUCSIsBasicLatin = Module['_xmlUCSIsBasicLatin'] = wasmExports['xmlUCSIsBasicLatin'])(a0);\nvar _xmlUCSIsBengali = Module['_xmlUCSIsBengali'] = (a0) => (_xmlUCSIsBengali = Module['_xmlUCSIsBengali'] = wasmExports['xmlUCSIsBengali'])(a0);\nvar _xmlUCSIsBlockElements = Module['_xmlUCSIsBlockElements'] = (a0) => (_xmlUCSIsBlockElements = Module['_xmlUCSIsBlockElements'] = wasmExports['xmlUCSIsBlockElements'])(a0);\nvar _xmlUCSIsBopomofo = Module['_xmlUCSIsBopomofo'] = (a0) => (_xmlUCSIsBopomofo = Module['_xmlUCSIsBopomofo'] = wasmExports['xmlUCSIsBopomofo'])(a0);\nvar _xmlUCSIsBopomofoExtended = Module['_xmlUCSIsBopomofoExtended'] = (a0) => (_xmlUCSIsBopomofoExtended = Module['_xmlUCSIsBopomofoExtended'] = wasmExports['xmlUCSIsBopomofoExtended'])(a0);\nvar _xmlUCSIsBoxDrawing = Module['_xmlUCSIsBoxDrawing'] = (a0) => (_xmlUCSIsBoxDrawing = Module['_xmlUCSIsBoxDrawing'] = wasmExports['xmlUCSIsBoxDrawing'])(a0);\nvar _xmlUCSIsBraillePatterns = Module['_xmlUCSIsBraillePatterns'] = (a0) => (_xmlUCSIsBraillePatterns = Module['_xmlUCSIsBraillePatterns'] = wasmExports['xmlUCSIsBraillePatterns'])(a0);\nvar _xmlUCSIsBuhid = Module['_xmlUCSIsBuhid'] = (a0) => (_xmlUCSIsBuhid = Module['_xmlUCSIsBuhid'] = wasmExports['xmlUCSIsBuhid'])(a0);\nvar _xmlUCSIsByzantineMusicalSymbols = Module['_xmlUCSIsByzantineMusicalSymbols'] = (a0) => (_xmlUCSIsByzantineMusicalSymbols = Module['_xmlUCSIsByzantineMusicalSymbols'] = wasmExports['xmlUCSIsByzantineMusicalSymbols'])(a0);\nvar _xmlUCSIsCJKCompatibility = Module['_xmlUCSIsCJKCompatibility'] = (a0) => (_xmlUCSIsCJKCompatibility = Module['_xmlUCSIsCJKCompatibility'] = wasmExports['xmlUCSIsCJKCompatibility'])(a0);\nvar _xmlUCSIsCJKCompatibilityForms = Module['_xmlUCSIsCJKCompatibilityForms'] = (a0) => (_xmlUCSIsCJKCompatibilityForms = Module['_xmlUCSIsCJKCompatibilityForms'] = wasmExports['xmlUCSIsCJKCompatibilityForms'])(a0);\nvar _xmlUCSIsCJKCompatibilityIdeographs = Module['_xmlUCSIsCJKCompatibilityIdeographs'] = (a0) => (_xmlUCSIsCJKCompatibilityIdeographs = Module['_xmlUCSIsCJKCompatibilityIdeographs'] = wasmExports['xmlUCSIsCJKCompatibilityIdeographs'])(a0);\nvar _xmlUCSIsCJKCompatibilityIdeographsSupplement = Module['_xmlUCSIsCJKCompatibilityIdeographsSupplement'] = (a0) => (_xmlUCSIsCJKCompatibilityIdeographsSupplement = Module['_xmlUCSIsCJKCompatibilityIdeographsSupplement'] = wasmExports['xmlUCSIsCJKCompatibilityIdeographsSupplement'])(a0);\nvar _xmlUCSIsCJKRadicalsSupplement = Module['_xmlUCSIsCJKRadicalsSupplement'] = (a0) => (_xmlUCSIsCJKRadicalsSupplement = Module['_xmlUCSIsCJKRadicalsSupplement'] = wasmExports['xmlUCSIsCJKRadicalsSupplement'])(a0);\nvar _xmlUCSIsCJKSymbolsandPunctuation = Module['_xmlUCSIsCJKSymbolsandPunctuation'] = (a0) => (_xmlUCSIsCJKSymbolsandPunctuation = Module['_xmlUCSIsCJKSymbolsandPunctuation'] = wasmExports['xmlUCSIsCJKSymbolsandPunctuation'])(a0);\nvar _xmlUCSIsCJKUnifiedIdeographs = Module['_xmlUCSIsCJKUnifiedIdeographs'] = (a0) => (_xmlUCSIsCJKUnifiedIdeographs = Module['_xmlUCSIsCJKUnifiedIdeographs'] = wasmExports['xmlUCSIsCJKUnifiedIdeographs'])(a0);\nvar _xmlUCSIsCJKUnifiedIdeographsExtensionA = Module['_xmlUCSIsCJKUnifiedIdeographsExtensionA'] = (a0) => (_xmlUCSIsCJKUnifiedIdeographsExtensionA = Module['_xmlUCSIsCJKUnifiedIdeographsExtensionA'] = wasmExports['xmlUCSIsCJKUnifiedIdeographsExtensionA'])(a0);\nvar _xmlUCSIsCJKUnifiedIdeographsExtensionB = Module['_xmlUCSIsCJKUnifiedIdeographsExtensionB'] = (a0) => (_xmlUCSIsCJKUnifiedIdeographsExtensionB = Module['_xmlUCSIsCJKUnifiedIdeographsExtensionB'] = wasmExports['xmlUCSIsCJKUnifiedIdeographsExtensionB'])(a0);\nvar _xmlUCSIsCherokee = Module['_xmlUCSIsCherokee'] = (a0) => (_xmlUCSIsCherokee = Module['_xmlUCSIsCherokee'] = wasmExports['xmlUCSIsCherokee'])(a0);\nvar _xmlUCSIsCombiningDiacriticalMarks = Module['_xmlUCSIsCombiningDiacriticalMarks'] = (a0) => (_xmlUCSIsCombiningDiacriticalMarks = Module['_xmlUCSIsCombiningDiacriticalMarks'] = wasmExports['xmlUCSIsCombiningDiacriticalMarks'])(a0);\nvar _xmlUCSIsCombiningDiacriticalMarksforSymbols = Module['_xmlUCSIsCombiningDiacriticalMarksforSymbols'] = (a0) => (_xmlUCSIsCombiningDiacriticalMarksforSymbols = Module['_xmlUCSIsCombiningDiacriticalMarksforSymbols'] = wasmExports['xmlUCSIsCombiningDiacriticalMarksforSymbols'])(a0);\nvar _xmlUCSIsCombiningHalfMarks = Module['_xmlUCSIsCombiningHalfMarks'] = (a0) => (_xmlUCSIsCombiningHalfMarks = Module['_xmlUCSIsCombiningHalfMarks'] = wasmExports['xmlUCSIsCombiningHalfMarks'])(a0);\nvar _xmlUCSIsCombiningMarksforSymbols = Module['_xmlUCSIsCombiningMarksforSymbols'] = (a0) => (_xmlUCSIsCombiningMarksforSymbols = Module['_xmlUCSIsCombiningMarksforSymbols'] = wasmExports['xmlUCSIsCombiningMarksforSymbols'])(a0);\nvar _xmlUCSIsControlPictures = Module['_xmlUCSIsControlPictures'] = (a0) => (_xmlUCSIsControlPictures = Module['_xmlUCSIsControlPictures'] = wasmExports['xmlUCSIsControlPictures'])(a0);\nvar _xmlUCSIsCurrencySymbols = Module['_xmlUCSIsCurrencySymbols'] = (a0) => (_xmlUCSIsCurrencySymbols = Module['_xmlUCSIsCurrencySymbols'] = wasmExports['xmlUCSIsCurrencySymbols'])(a0);\nvar _xmlUCSIsCypriotSyllabary = Module['_xmlUCSIsCypriotSyllabary'] = (a0) => (_xmlUCSIsCypriotSyllabary = Module['_xmlUCSIsCypriotSyllabary'] = wasmExports['xmlUCSIsCypriotSyllabary'])(a0);\nvar _xmlUCSIsCyrillic = Module['_xmlUCSIsCyrillic'] = (a0) => (_xmlUCSIsCyrillic = Module['_xmlUCSIsCyrillic'] = wasmExports['xmlUCSIsCyrillic'])(a0);\nvar _xmlUCSIsCyrillicSupplement = Module['_xmlUCSIsCyrillicSupplement'] = (a0) => (_xmlUCSIsCyrillicSupplement = Module['_xmlUCSIsCyrillicSupplement'] = wasmExports['xmlUCSIsCyrillicSupplement'])(a0);\nvar _xmlUCSIsDeseret = Module['_xmlUCSIsDeseret'] = (a0) => (_xmlUCSIsDeseret = Module['_xmlUCSIsDeseret'] = wasmExports['xmlUCSIsDeseret'])(a0);\nvar _xmlUCSIsDevanagari = Module['_xmlUCSIsDevanagari'] = (a0) => (_xmlUCSIsDevanagari = Module['_xmlUCSIsDevanagari'] = wasmExports['xmlUCSIsDevanagari'])(a0);\nvar _xmlUCSIsDingbats = Module['_xmlUCSIsDingbats'] = (a0) => (_xmlUCSIsDingbats = Module['_xmlUCSIsDingbats'] = wasmExports['xmlUCSIsDingbats'])(a0);\nvar _xmlUCSIsEnclosedAlphanumerics = Module['_xmlUCSIsEnclosedAlphanumerics'] = (a0) => (_xmlUCSIsEnclosedAlphanumerics = Module['_xmlUCSIsEnclosedAlphanumerics'] = wasmExports['xmlUCSIsEnclosedAlphanumerics'])(a0);\nvar _xmlUCSIsEnclosedCJKLettersandMonths = Module['_xmlUCSIsEnclosedCJKLettersandMonths'] = (a0) => (_xmlUCSIsEnclosedCJKLettersandMonths = Module['_xmlUCSIsEnclosedCJKLettersandMonths'] = wasmExports['xmlUCSIsEnclosedCJKLettersandMonths'])(a0);\nvar _xmlUCSIsEthiopic = Module['_xmlUCSIsEthiopic'] = (a0) => (_xmlUCSIsEthiopic = Module['_xmlUCSIsEthiopic'] = wasmExports['xmlUCSIsEthiopic'])(a0);\nvar _xmlUCSIsGeneralPunctuation = Module['_xmlUCSIsGeneralPunctuation'] = (a0) => (_xmlUCSIsGeneralPunctuation = Module['_xmlUCSIsGeneralPunctuation'] = wasmExports['xmlUCSIsGeneralPunctuation'])(a0);\nvar _xmlUCSIsGeometricShapes = Module['_xmlUCSIsGeometricShapes'] = (a0) => (_xmlUCSIsGeometricShapes = Module['_xmlUCSIsGeometricShapes'] = wasmExports['xmlUCSIsGeometricShapes'])(a0);\nvar _xmlUCSIsGeorgian = Module['_xmlUCSIsGeorgian'] = (a0) => (_xmlUCSIsGeorgian = Module['_xmlUCSIsGeorgian'] = wasmExports['xmlUCSIsGeorgian'])(a0);\nvar _xmlUCSIsGothic = Module['_xmlUCSIsGothic'] = (a0) => (_xmlUCSIsGothic = Module['_xmlUCSIsGothic'] = wasmExports['xmlUCSIsGothic'])(a0);\nvar _xmlUCSIsGreek = Module['_xmlUCSIsGreek'] = (a0) => (_xmlUCSIsGreek = Module['_xmlUCSIsGreek'] = wasmExports['xmlUCSIsGreek'])(a0);\nvar _xmlUCSIsGreekExtended = Module['_xmlUCSIsGreekExtended'] = (a0) => (_xmlUCSIsGreekExtended = Module['_xmlUCSIsGreekExtended'] = wasmExports['xmlUCSIsGreekExtended'])(a0);\nvar _xmlUCSIsGreekandCoptic = Module['_xmlUCSIsGreekandCoptic'] = (a0) => (_xmlUCSIsGreekandCoptic = Module['_xmlUCSIsGreekandCoptic'] = wasmExports['xmlUCSIsGreekandCoptic'])(a0);\nvar _xmlUCSIsGujarati = Module['_xmlUCSIsGujarati'] = (a0) => (_xmlUCSIsGujarati = Module['_xmlUCSIsGujarati'] = wasmExports['xmlUCSIsGujarati'])(a0);\nvar _xmlUCSIsGurmukhi = Module['_xmlUCSIsGurmukhi'] = (a0) => (_xmlUCSIsGurmukhi = Module['_xmlUCSIsGurmukhi'] = wasmExports['xmlUCSIsGurmukhi'])(a0);\nvar _xmlUCSIsHalfwidthandFullwidthForms = Module['_xmlUCSIsHalfwidthandFullwidthForms'] = (a0) => (_xmlUCSIsHalfwidthandFullwidthForms = Module['_xmlUCSIsHalfwidthandFullwidthForms'] = wasmExports['xmlUCSIsHalfwidthandFullwidthForms'])(a0);\nvar _xmlUCSIsHangulCompatibilityJamo = Module['_xmlUCSIsHangulCompatibilityJamo'] = (a0) => (_xmlUCSIsHangulCompatibilityJamo = Module['_xmlUCSIsHangulCompatibilityJamo'] = wasmExports['xmlUCSIsHangulCompatibilityJamo'])(a0);\nvar _xmlUCSIsHangulJamo = Module['_xmlUCSIsHangulJamo'] = (a0) => (_xmlUCSIsHangulJamo = Module['_xmlUCSIsHangulJamo'] = wasmExports['xmlUCSIsHangulJamo'])(a0);\nvar _xmlUCSIsHangulSyllables = Module['_xmlUCSIsHangulSyllables'] = (a0) => (_xmlUCSIsHangulSyllables = Module['_xmlUCSIsHangulSyllables'] = wasmExports['xmlUCSIsHangulSyllables'])(a0);\nvar _xmlUCSIsHanunoo = Module['_xmlUCSIsHanunoo'] = (a0) => (_xmlUCSIsHanunoo = Module['_xmlUCSIsHanunoo'] = wasmExports['xmlUCSIsHanunoo'])(a0);\nvar _xmlUCSIsHebrew = Module['_xmlUCSIsHebrew'] = (a0) => (_xmlUCSIsHebrew = Module['_xmlUCSIsHebrew'] = wasmExports['xmlUCSIsHebrew'])(a0);\nvar _xmlUCSIsHighPrivateUseSurrogates = Module['_xmlUCSIsHighPrivateUseSurrogates'] = (a0) => (_xmlUCSIsHighPrivateUseSurrogates = Module['_xmlUCSIsHighPrivateUseSurrogates'] = wasmExports['xmlUCSIsHighPrivateUseSurrogates'])(a0);\nvar _xmlUCSIsHighSurrogates = Module['_xmlUCSIsHighSurrogates'] = (a0) => (_xmlUCSIsHighSurrogates = Module['_xmlUCSIsHighSurrogates'] = wasmExports['xmlUCSIsHighSurrogates'])(a0);\nvar _xmlUCSIsHiragana = Module['_xmlUCSIsHiragana'] = (a0) => (_xmlUCSIsHiragana = Module['_xmlUCSIsHiragana'] = wasmExports['xmlUCSIsHiragana'])(a0);\nvar _xmlUCSIsIPAExtensions = Module['_xmlUCSIsIPAExtensions'] = (a0) => (_xmlUCSIsIPAExtensions = Module['_xmlUCSIsIPAExtensions'] = wasmExports['xmlUCSIsIPAExtensions'])(a0);\nvar _xmlUCSIsIdeographicDescriptionCharacters = Module['_xmlUCSIsIdeographicDescriptionCharacters'] = (a0) => (_xmlUCSIsIdeographicDescriptionCharacters = Module['_xmlUCSIsIdeographicDescriptionCharacters'] = wasmExports['xmlUCSIsIdeographicDescriptionCharacters'])(a0);\nvar _xmlUCSIsKanbun = Module['_xmlUCSIsKanbun'] = (a0) => (_xmlUCSIsKanbun = Module['_xmlUCSIsKanbun'] = wasmExports['xmlUCSIsKanbun'])(a0);\nvar _xmlUCSIsKangxiRadicals = Module['_xmlUCSIsKangxiRadicals'] = (a0) => (_xmlUCSIsKangxiRadicals = Module['_xmlUCSIsKangxiRadicals'] = wasmExports['xmlUCSIsKangxiRadicals'])(a0);\nvar _xmlUCSIsKannada = Module['_xmlUCSIsKannada'] = (a0) => (_xmlUCSIsKannada = Module['_xmlUCSIsKannada'] = wasmExports['xmlUCSIsKannada'])(a0);\nvar _xmlUCSIsKatakana = Module['_xmlUCSIsKatakana'] = (a0) => (_xmlUCSIsKatakana = Module['_xmlUCSIsKatakana'] = wasmExports['xmlUCSIsKatakana'])(a0);\nvar _xmlUCSIsKatakanaPhoneticExtensions = Module['_xmlUCSIsKatakanaPhoneticExtensions'] = (a0) => (_xmlUCSIsKatakanaPhoneticExtensions = Module['_xmlUCSIsKatakanaPhoneticExtensions'] = wasmExports['xmlUCSIsKatakanaPhoneticExtensions'])(a0);\nvar _xmlUCSIsKhmer = Module['_xmlUCSIsKhmer'] = (a0) => (_xmlUCSIsKhmer = Module['_xmlUCSIsKhmer'] = wasmExports['xmlUCSIsKhmer'])(a0);\nvar _xmlUCSIsKhmerSymbols = Module['_xmlUCSIsKhmerSymbols'] = (a0) => (_xmlUCSIsKhmerSymbols = Module['_xmlUCSIsKhmerSymbols'] = wasmExports['xmlUCSIsKhmerSymbols'])(a0);\nvar _xmlUCSIsLao = Module['_xmlUCSIsLao'] = (a0) => (_xmlUCSIsLao = Module['_xmlUCSIsLao'] = wasmExports['xmlUCSIsLao'])(a0);\nvar _xmlUCSIsLatin1Supplement = Module['_xmlUCSIsLatin1Supplement'] = (a0) => (_xmlUCSIsLatin1Supplement = Module['_xmlUCSIsLatin1Supplement'] = wasmExports['xmlUCSIsLatin1Supplement'])(a0);\nvar _xmlUCSIsLatinExtendedA = Module['_xmlUCSIsLatinExtendedA'] = (a0) => (_xmlUCSIsLatinExtendedA = Module['_xmlUCSIsLatinExtendedA'] = wasmExports['xmlUCSIsLatinExtendedA'])(a0);\nvar _xmlUCSIsLatinExtendedB = Module['_xmlUCSIsLatinExtendedB'] = (a0) => (_xmlUCSIsLatinExtendedB = Module['_xmlUCSIsLatinExtendedB'] = wasmExports['xmlUCSIsLatinExtendedB'])(a0);\nvar _xmlUCSIsLatinExtendedAdditional = Module['_xmlUCSIsLatinExtendedAdditional'] = (a0) => (_xmlUCSIsLatinExtendedAdditional = Module['_xmlUCSIsLatinExtendedAdditional'] = wasmExports['xmlUCSIsLatinExtendedAdditional'])(a0);\nvar _xmlUCSIsLetterlikeSymbols = Module['_xmlUCSIsLetterlikeSymbols'] = (a0) => (_xmlUCSIsLetterlikeSymbols = Module['_xmlUCSIsLetterlikeSymbols'] = wasmExports['xmlUCSIsLetterlikeSymbols'])(a0);\nvar _xmlUCSIsLimbu = Module['_xmlUCSIsLimbu'] = (a0) => (_xmlUCSIsLimbu = Module['_xmlUCSIsLimbu'] = wasmExports['xmlUCSIsLimbu'])(a0);\nvar _xmlUCSIsLinearBIdeograms = Module['_xmlUCSIsLinearBIdeograms'] = (a0) => (_xmlUCSIsLinearBIdeograms = Module['_xmlUCSIsLinearBIdeograms'] = wasmExports['xmlUCSIsLinearBIdeograms'])(a0);\nvar _xmlUCSIsLinearBSyllabary = Module['_xmlUCSIsLinearBSyllabary'] = (a0) => (_xmlUCSIsLinearBSyllabary = Module['_xmlUCSIsLinearBSyllabary'] = wasmExports['xmlUCSIsLinearBSyllabary'])(a0);\nvar _xmlUCSIsLowSurrogates = Module['_xmlUCSIsLowSurrogates'] = (a0) => (_xmlUCSIsLowSurrogates = Module['_xmlUCSIsLowSurrogates'] = wasmExports['xmlUCSIsLowSurrogates'])(a0);\nvar _xmlUCSIsMalayalam = Module['_xmlUCSIsMalayalam'] = (a0) => (_xmlUCSIsMalayalam = Module['_xmlUCSIsMalayalam'] = wasmExports['xmlUCSIsMalayalam'])(a0);\nvar _xmlUCSIsMathematicalAlphanumericSymbols = Module['_xmlUCSIsMathematicalAlphanumericSymbols'] = (a0) => (_xmlUCSIsMathematicalAlphanumericSymbols = Module['_xmlUCSIsMathematicalAlphanumericSymbols'] = wasmExports['xmlUCSIsMathematicalAlphanumericSymbols'])(a0);\nvar _xmlUCSIsMathematicalOperators = Module['_xmlUCSIsMathematicalOperators'] = (a0) => (_xmlUCSIsMathematicalOperators = Module['_xmlUCSIsMathematicalOperators'] = wasmExports['xmlUCSIsMathematicalOperators'])(a0);\nvar _xmlUCSIsMiscellaneousMathematicalSymbolsA = Module['_xmlUCSIsMiscellaneousMathematicalSymbolsA'] = (a0) => (_xmlUCSIsMiscellaneousMathematicalSymbolsA = Module['_xmlUCSIsMiscellaneousMathematicalSymbolsA'] = wasmExports['xmlUCSIsMiscellaneousMathematicalSymbolsA'])(a0);\nvar _xmlUCSIsMiscellaneousMathematicalSymbolsB = Module['_xmlUCSIsMiscellaneousMathematicalSymbolsB'] = (a0) => (_xmlUCSIsMiscellaneousMathematicalSymbolsB = Module['_xmlUCSIsMiscellaneousMathematicalSymbolsB'] = wasmExports['xmlUCSIsMiscellaneousMathematicalSymbolsB'])(a0);\nvar _xmlUCSIsMiscellaneousSymbols = Module['_xmlUCSIsMiscellaneousSymbols'] = (a0) => (_xmlUCSIsMiscellaneousSymbols = Module['_xmlUCSIsMiscellaneousSymbols'] = wasmExports['xmlUCSIsMiscellaneousSymbols'])(a0);\nvar _xmlUCSIsMiscellaneousSymbolsandArrows = Module['_xmlUCSIsMiscellaneousSymbolsandArrows'] = (a0) => (_xmlUCSIsMiscellaneousSymbolsandArrows = Module['_xmlUCSIsMiscellaneousSymbolsandArrows'] = wasmExports['xmlUCSIsMiscellaneousSymbolsandArrows'])(a0);\nvar _xmlUCSIsMiscellaneousTechnical = Module['_xmlUCSIsMiscellaneousTechnical'] = (a0) => (_xmlUCSIsMiscellaneousTechnical = Module['_xmlUCSIsMiscellaneousTechnical'] = wasmExports['xmlUCSIsMiscellaneousTechnical'])(a0);\nvar _xmlUCSIsMongolian = Module['_xmlUCSIsMongolian'] = (a0) => (_xmlUCSIsMongolian = Module['_xmlUCSIsMongolian'] = wasmExports['xmlUCSIsMongolian'])(a0);\nvar _xmlUCSIsMusicalSymbols = Module['_xmlUCSIsMusicalSymbols'] = (a0) => (_xmlUCSIsMusicalSymbols = Module['_xmlUCSIsMusicalSymbols'] = wasmExports['xmlUCSIsMusicalSymbols'])(a0);\nvar _xmlUCSIsMyanmar = Module['_xmlUCSIsMyanmar'] = (a0) => (_xmlUCSIsMyanmar = Module['_xmlUCSIsMyanmar'] = wasmExports['xmlUCSIsMyanmar'])(a0);\nvar _xmlUCSIsNumberForms = Module['_xmlUCSIsNumberForms'] = (a0) => (_xmlUCSIsNumberForms = Module['_xmlUCSIsNumberForms'] = wasmExports['xmlUCSIsNumberForms'])(a0);\nvar _xmlUCSIsOgham = Module['_xmlUCSIsOgham'] = (a0) => (_xmlUCSIsOgham = Module['_xmlUCSIsOgham'] = wasmExports['xmlUCSIsOgham'])(a0);\nvar _xmlUCSIsOldItalic = Module['_xmlUCSIsOldItalic'] = (a0) => (_xmlUCSIsOldItalic = Module['_xmlUCSIsOldItalic'] = wasmExports['xmlUCSIsOldItalic'])(a0);\nvar _xmlUCSIsOpticalCharacterRecognition = Module['_xmlUCSIsOpticalCharacterRecognition'] = (a0) => (_xmlUCSIsOpticalCharacterRecognition = Module['_xmlUCSIsOpticalCharacterRecognition'] = wasmExports['xmlUCSIsOpticalCharacterRecognition'])(a0);\nvar _xmlUCSIsOriya = Module['_xmlUCSIsOriya'] = (a0) => (_xmlUCSIsOriya = Module['_xmlUCSIsOriya'] = wasmExports['xmlUCSIsOriya'])(a0);\nvar _xmlUCSIsOsmanya = Module['_xmlUCSIsOsmanya'] = (a0) => (_xmlUCSIsOsmanya = Module['_xmlUCSIsOsmanya'] = wasmExports['xmlUCSIsOsmanya'])(a0);\nvar _xmlUCSIsPhoneticExtensions = Module['_xmlUCSIsPhoneticExtensions'] = (a0) => (_xmlUCSIsPhoneticExtensions = Module['_xmlUCSIsPhoneticExtensions'] = wasmExports['xmlUCSIsPhoneticExtensions'])(a0);\nvar _xmlUCSIsPrivateUse = Module['_xmlUCSIsPrivateUse'] = (a0) => (_xmlUCSIsPrivateUse = Module['_xmlUCSIsPrivateUse'] = wasmExports['xmlUCSIsPrivateUse'])(a0);\nvar _xmlUCSIsPrivateUseArea = Module['_xmlUCSIsPrivateUseArea'] = (a0) => (_xmlUCSIsPrivateUseArea = Module['_xmlUCSIsPrivateUseArea'] = wasmExports['xmlUCSIsPrivateUseArea'])(a0);\nvar _xmlUCSIsRunic = Module['_xmlUCSIsRunic'] = (a0) => (_xmlUCSIsRunic = Module['_xmlUCSIsRunic'] = wasmExports['xmlUCSIsRunic'])(a0);\nvar _xmlUCSIsShavian = Module['_xmlUCSIsShavian'] = (a0) => (_xmlUCSIsShavian = Module['_xmlUCSIsShavian'] = wasmExports['xmlUCSIsShavian'])(a0);\nvar _xmlUCSIsSinhala = Module['_xmlUCSIsSinhala'] = (a0) => (_xmlUCSIsSinhala = Module['_xmlUCSIsSinhala'] = wasmExports['xmlUCSIsSinhala'])(a0);\nvar _xmlUCSIsSmallFormVariants = Module['_xmlUCSIsSmallFormVariants'] = (a0) => (_xmlUCSIsSmallFormVariants = Module['_xmlUCSIsSmallFormVariants'] = wasmExports['xmlUCSIsSmallFormVariants'])(a0);\nvar _xmlUCSIsSpacingModifierLetters = Module['_xmlUCSIsSpacingModifierLetters'] = (a0) => (_xmlUCSIsSpacingModifierLetters = Module['_xmlUCSIsSpacingModifierLetters'] = wasmExports['xmlUCSIsSpacingModifierLetters'])(a0);\nvar _xmlUCSIsSpecials = Module['_xmlUCSIsSpecials'] = (a0) => (_xmlUCSIsSpecials = Module['_xmlUCSIsSpecials'] = wasmExports['xmlUCSIsSpecials'])(a0);\nvar _xmlUCSIsSuperscriptsandSubscripts = Module['_xmlUCSIsSuperscriptsandSubscripts'] = (a0) => (_xmlUCSIsSuperscriptsandSubscripts = Module['_xmlUCSIsSuperscriptsandSubscripts'] = wasmExports['xmlUCSIsSuperscriptsandSubscripts'])(a0);\nvar _xmlUCSIsSupplementalArrowsA = Module['_xmlUCSIsSupplementalArrowsA'] = (a0) => (_xmlUCSIsSupplementalArrowsA = Module['_xmlUCSIsSupplementalArrowsA'] = wasmExports['xmlUCSIsSupplementalArrowsA'])(a0);\nvar _xmlUCSIsSupplementalArrowsB = Module['_xmlUCSIsSupplementalArrowsB'] = (a0) => (_xmlUCSIsSupplementalArrowsB = Module['_xmlUCSIsSupplementalArrowsB'] = wasmExports['xmlUCSIsSupplementalArrowsB'])(a0);\nvar _xmlUCSIsSupplementalMathematicalOperators = Module['_xmlUCSIsSupplementalMathematicalOperators'] = (a0) => (_xmlUCSIsSupplementalMathematicalOperators = Module['_xmlUCSIsSupplementalMathematicalOperators'] = wasmExports['xmlUCSIsSupplementalMathematicalOperators'])(a0);\nvar _xmlUCSIsSupplementaryPrivateUseAreaA = Module['_xmlUCSIsSupplementaryPrivateUseAreaA'] = (a0) => (_xmlUCSIsSupplementaryPrivateUseAreaA = Module['_xmlUCSIsSupplementaryPrivateUseAreaA'] = wasmExports['xmlUCSIsSupplementaryPrivateUseAreaA'])(a0);\nvar _xmlUCSIsSupplementaryPrivateUseAreaB = Module['_xmlUCSIsSupplementaryPrivateUseAreaB'] = (a0) => (_xmlUCSIsSupplementaryPrivateUseAreaB = Module['_xmlUCSIsSupplementaryPrivateUseAreaB'] = wasmExports['xmlUCSIsSupplementaryPrivateUseAreaB'])(a0);\nvar _xmlUCSIsSyriac = Module['_xmlUCSIsSyriac'] = (a0) => (_xmlUCSIsSyriac = Module['_xmlUCSIsSyriac'] = wasmExports['xmlUCSIsSyriac'])(a0);\nvar _xmlUCSIsTagalog = Module['_xmlUCSIsTagalog'] = (a0) => (_xmlUCSIsTagalog = Module['_xmlUCSIsTagalog'] = wasmExports['xmlUCSIsTagalog'])(a0);\nvar _xmlUCSIsTagbanwa = Module['_xmlUCSIsTagbanwa'] = (a0) => (_xmlUCSIsTagbanwa = Module['_xmlUCSIsTagbanwa'] = wasmExports['xmlUCSIsTagbanwa'])(a0);\nvar _xmlUCSIsTags = Module['_xmlUCSIsTags'] = (a0) => (_xmlUCSIsTags = Module['_xmlUCSIsTags'] = wasmExports['xmlUCSIsTags'])(a0);\nvar _xmlUCSIsTaiLe = Module['_xmlUCSIsTaiLe'] = (a0) => (_xmlUCSIsTaiLe = Module['_xmlUCSIsTaiLe'] = wasmExports['xmlUCSIsTaiLe'])(a0);\nvar _xmlUCSIsTaiXuanJingSymbols = Module['_xmlUCSIsTaiXuanJingSymbols'] = (a0) => (_xmlUCSIsTaiXuanJingSymbols = Module['_xmlUCSIsTaiXuanJingSymbols'] = wasmExports['xmlUCSIsTaiXuanJingSymbols'])(a0);\nvar _xmlUCSIsTamil = Module['_xmlUCSIsTamil'] = (a0) => (_xmlUCSIsTamil = Module['_xmlUCSIsTamil'] = wasmExports['xmlUCSIsTamil'])(a0);\nvar _xmlUCSIsTelugu = Module['_xmlUCSIsTelugu'] = (a0) => (_xmlUCSIsTelugu = Module['_xmlUCSIsTelugu'] = wasmExports['xmlUCSIsTelugu'])(a0);\nvar _xmlUCSIsThaana = Module['_xmlUCSIsThaana'] = (a0) => (_xmlUCSIsThaana = Module['_xmlUCSIsThaana'] = wasmExports['xmlUCSIsThaana'])(a0);\nvar _xmlUCSIsThai = Module['_xmlUCSIsThai'] = (a0) => (_xmlUCSIsThai = Module['_xmlUCSIsThai'] = wasmExports['xmlUCSIsThai'])(a0);\nvar _xmlUCSIsTibetan = Module['_xmlUCSIsTibetan'] = (a0) => (_xmlUCSIsTibetan = Module['_xmlUCSIsTibetan'] = wasmExports['xmlUCSIsTibetan'])(a0);\nvar _xmlUCSIsUgaritic = Module['_xmlUCSIsUgaritic'] = (a0) => (_xmlUCSIsUgaritic = Module['_xmlUCSIsUgaritic'] = wasmExports['xmlUCSIsUgaritic'])(a0);\nvar _xmlUCSIsUnifiedCanadianAboriginalSyllabics = Module['_xmlUCSIsUnifiedCanadianAboriginalSyllabics'] = (a0) => (_xmlUCSIsUnifiedCanadianAboriginalSyllabics = Module['_xmlUCSIsUnifiedCanadianAboriginalSyllabics'] = wasmExports['xmlUCSIsUnifiedCanadianAboriginalSyllabics'])(a0);\nvar _xmlUCSIsVariationSelectors = Module['_xmlUCSIsVariationSelectors'] = (a0) => (_xmlUCSIsVariationSelectors = Module['_xmlUCSIsVariationSelectors'] = wasmExports['xmlUCSIsVariationSelectors'])(a0);\nvar _xmlUCSIsVariationSelectorsSupplement = Module['_xmlUCSIsVariationSelectorsSupplement'] = (a0) => (_xmlUCSIsVariationSelectorsSupplement = Module['_xmlUCSIsVariationSelectorsSupplement'] = wasmExports['xmlUCSIsVariationSelectorsSupplement'])(a0);\nvar _xmlUCSIsYiRadicals = Module['_xmlUCSIsYiRadicals'] = (a0) => (_xmlUCSIsYiRadicals = Module['_xmlUCSIsYiRadicals'] = wasmExports['xmlUCSIsYiRadicals'])(a0);\nvar _xmlUCSIsYiSyllables = Module['_xmlUCSIsYiSyllables'] = (a0) => (_xmlUCSIsYiSyllables = Module['_xmlUCSIsYiSyllables'] = wasmExports['xmlUCSIsYiSyllables'])(a0);\nvar _xmlUCSIsYijingHexagramSymbols = Module['_xmlUCSIsYijingHexagramSymbols'] = (a0) => (_xmlUCSIsYijingHexagramSymbols = Module['_xmlUCSIsYijingHexagramSymbols'] = wasmExports['xmlUCSIsYijingHexagramSymbols'])(a0);\nvar _xmlUCSIsCatCs = Module['_xmlUCSIsCatCs'] = (a0) => (_xmlUCSIsCatCs = Module['_xmlUCSIsCatCs'] = wasmExports['xmlUCSIsCatCs'])(a0);\nvar ___small_fprintf = Module['___small_fprintf'] = (a0, a1, a2) => (___small_fprintf = Module['___small_fprintf'] = wasmExports['__small_fprintf'])(a0, a1, a2);\nvar _xmlXPathBooleanFunction = Module['_xmlXPathBooleanFunction'] = (a0, a1) => (_xmlXPathBooleanFunction = Module['_xmlXPathBooleanFunction'] = wasmExports['xmlXPathBooleanFunction'])(a0, a1);\nvar _xmlXPathCeilingFunction = Module['_xmlXPathCeilingFunction'] = (a0, a1) => (_xmlXPathCeilingFunction = Module['_xmlXPathCeilingFunction'] = wasmExports['xmlXPathCeilingFunction'])(a0, a1);\nvar _xmlXPathCountFunction = Module['_xmlXPathCountFunction'] = (a0, a1) => (_xmlXPathCountFunction = Module['_xmlXPathCountFunction'] = wasmExports['xmlXPathCountFunction'])(a0, a1);\nvar _xmlXPathConcatFunction = Module['_xmlXPathConcatFunction'] = (a0, a1) => (_xmlXPathConcatFunction = Module['_xmlXPathConcatFunction'] = wasmExports['xmlXPathConcatFunction'])(a0, a1);\nvar _xmlXPathContainsFunction = Module['_xmlXPathContainsFunction'] = (a0, a1) => (_xmlXPathContainsFunction = Module['_xmlXPathContainsFunction'] = wasmExports['xmlXPathContainsFunction'])(a0, a1);\nvar _xmlXPathIdFunction = Module['_xmlXPathIdFunction'] = (a0, a1) => (_xmlXPathIdFunction = Module['_xmlXPathIdFunction'] = wasmExports['xmlXPathIdFunction'])(a0, a1);\nvar _xmlXPathFalseFunction = Module['_xmlXPathFalseFunction'] = (a0, a1) => (_xmlXPathFalseFunction = Module['_xmlXPathFalseFunction'] = wasmExports['xmlXPathFalseFunction'])(a0, a1);\nvar _xmlXPathFloorFunction = Module['_xmlXPathFloorFunction'] = (a0, a1) => (_xmlXPathFloorFunction = Module['_xmlXPathFloorFunction'] = wasmExports['xmlXPathFloorFunction'])(a0, a1);\nvar _xmlXPathLastFunction = Module['_xmlXPathLastFunction'] = (a0, a1) => (_xmlXPathLastFunction = Module['_xmlXPathLastFunction'] = wasmExports['xmlXPathLastFunction'])(a0, a1);\nvar _xmlXPathLangFunction = Module['_xmlXPathLangFunction'] = (a0, a1) => (_xmlXPathLangFunction = Module['_xmlXPathLangFunction'] = wasmExports['xmlXPathLangFunction'])(a0, a1);\nvar _xmlXPathLocalNameFunction = Module['_xmlXPathLocalNameFunction'] = (a0, a1) => (_xmlXPathLocalNameFunction = Module['_xmlXPathLocalNameFunction'] = wasmExports['xmlXPathLocalNameFunction'])(a0, a1);\nvar _xmlXPathNotFunction = Module['_xmlXPathNotFunction'] = (a0, a1) => (_xmlXPathNotFunction = Module['_xmlXPathNotFunction'] = wasmExports['xmlXPathNotFunction'])(a0, a1);\nvar _xmlXPathNamespaceURIFunction = Module['_xmlXPathNamespaceURIFunction'] = (a0, a1) => (_xmlXPathNamespaceURIFunction = Module['_xmlXPathNamespaceURIFunction'] = wasmExports['xmlXPathNamespaceURIFunction'])(a0, a1);\nvar _xmlXPathNormalizeFunction = Module['_xmlXPathNormalizeFunction'] = (a0, a1) => (_xmlXPathNormalizeFunction = Module['_xmlXPathNormalizeFunction'] = wasmExports['xmlXPathNormalizeFunction'])(a0, a1);\nvar _xmlXPathNumberFunction = Module['_xmlXPathNumberFunction'] = (a0, a1) => (_xmlXPathNumberFunction = Module['_xmlXPathNumberFunction'] = wasmExports['xmlXPathNumberFunction'])(a0, a1);\nvar _xmlXPathPositionFunction = Module['_xmlXPathPositionFunction'] = (a0, a1) => (_xmlXPathPositionFunction = Module['_xmlXPathPositionFunction'] = wasmExports['xmlXPathPositionFunction'])(a0, a1);\nvar _xmlXPathRoundFunction = Module['_xmlXPathRoundFunction'] = (a0, a1) => (_xmlXPathRoundFunction = Module['_xmlXPathRoundFunction'] = wasmExports['xmlXPathRoundFunction'])(a0, a1);\nvar _xmlXPathStringFunction = Module['_xmlXPathStringFunction'] = (a0, a1) => (_xmlXPathStringFunction = Module['_xmlXPathStringFunction'] = wasmExports['xmlXPathStringFunction'])(a0, a1);\nvar _xmlXPathStringLengthFunction = Module['_xmlXPathStringLengthFunction'] = (a0, a1) => (_xmlXPathStringLengthFunction = Module['_xmlXPathStringLengthFunction'] = wasmExports['xmlXPathStringLengthFunction'])(a0, a1);\nvar _xmlXPathStartsWithFunction = Module['_xmlXPathStartsWithFunction'] = (a0, a1) => (_xmlXPathStartsWithFunction = Module['_xmlXPathStartsWithFunction'] = wasmExports['xmlXPathStartsWithFunction'])(a0, a1);\nvar _xmlXPathSubstringFunction = Module['_xmlXPathSubstringFunction'] = (a0, a1) => (_xmlXPathSubstringFunction = Module['_xmlXPathSubstringFunction'] = wasmExports['xmlXPathSubstringFunction'])(a0, a1);\nvar _xmlXPathSubstringBeforeFunction = Module['_xmlXPathSubstringBeforeFunction'] = (a0, a1) => (_xmlXPathSubstringBeforeFunction = Module['_xmlXPathSubstringBeforeFunction'] = wasmExports['xmlXPathSubstringBeforeFunction'])(a0, a1);\nvar _xmlXPathSubstringAfterFunction = Module['_xmlXPathSubstringAfterFunction'] = (a0, a1) => (_xmlXPathSubstringAfterFunction = Module['_xmlXPathSubstringAfterFunction'] = wasmExports['xmlXPathSubstringAfterFunction'])(a0, a1);\nvar _xmlXPathSumFunction = Module['_xmlXPathSumFunction'] = (a0, a1) => (_xmlXPathSumFunction = Module['_xmlXPathSumFunction'] = wasmExports['xmlXPathSumFunction'])(a0, a1);\nvar _xmlXPathTrueFunction = Module['_xmlXPathTrueFunction'] = (a0, a1) => (_xmlXPathTrueFunction = Module['_xmlXPathTrueFunction'] = wasmExports['xmlXPathTrueFunction'])(a0, a1);\nvar _xmlXPathTranslateFunction = Module['_xmlXPathTranslateFunction'] = (a0, a1) => (_xmlXPathTranslateFunction = Module['_xmlXPathTranslateFunction'] = wasmExports['xmlXPathTranslateFunction'])(a0, a1);\nvar _xmlXPathNextSelf = Module['_xmlXPathNextSelf'] = (a0, a1) => (_xmlXPathNextSelf = Module['_xmlXPathNextSelf'] = wasmExports['xmlXPathNextSelf'])(a0, a1);\nvar _xmlXPathNextChild = Module['_xmlXPathNextChild'] = (a0, a1) => (_xmlXPathNextChild = Module['_xmlXPathNextChild'] = wasmExports['xmlXPathNextChild'])(a0, a1);\nvar _xmlXPathNextDescendant = Module['_xmlXPathNextDescendant'] = (a0, a1) => (_xmlXPathNextDescendant = Module['_xmlXPathNextDescendant'] = wasmExports['xmlXPathNextDescendant'])(a0, a1);\nvar _xmlXPathNextDescendantOrSelf = Module['_xmlXPathNextDescendantOrSelf'] = (a0, a1) => (_xmlXPathNextDescendantOrSelf = Module['_xmlXPathNextDescendantOrSelf'] = wasmExports['xmlXPathNextDescendantOrSelf'])(a0, a1);\nvar _xmlXPathNextParent = Module['_xmlXPathNextParent'] = (a0, a1) => (_xmlXPathNextParent = Module['_xmlXPathNextParent'] = wasmExports['xmlXPathNextParent'])(a0, a1);\nvar _xmlXPathNextAncestor = Module['_xmlXPathNextAncestor'] = (a0, a1) => (_xmlXPathNextAncestor = Module['_xmlXPathNextAncestor'] = wasmExports['xmlXPathNextAncestor'])(a0, a1);\nvar _xmlXPathNextAncestorOrSelf = Module['_xmlXPathNextAncestorOrSelf'] = (a0, a1) => (_xmlXPathNextAncestorOrSelf = Module['_xmlXPathNextAncestorOrSelf'] = wasmExports['xmlXPathNextAncestorOrSelf'])(a0, a1);\nvar _xmlXPathNextFollowingSibling = Module['_xmlXPathNextFollowingSibling'] = (a0, a1) => (_xmlXPathNextFollowingSibling = Module['_xmlXPathNextFollowingSibling'] = wasmExports['xmlXPathNextFollowingSibling'])(a0, a1);\nvar _xmlXPathNextPrecedingSibling = Module['_xmlXPathNextPrecedingSibling'] = (a0, a1) => (_xmlXPathNextPrecedingSibling = Module['_xmlXPathNextPrecedingSibling'] = wasmExports['xmlXPathNextPrecedingSibling'])(a0, a1);\nvar _xmlXPathNextFollowing = Module['_xmlXPathNextFollowing'] = (a0, a1) => (_xmlXPathNextFollowing = Module['_xmlXPathNextFollowing'] = wasmExports['xmlXPathNextFollowing'])(a0, a1);\nvar _xmlXPathNextNamespace = Module['_xmlXPathNextNamespace'] = (a0, a1) => (_xmlXPathNextNamespace = Module['_xmlXPathNextNamespace'] = wasmExports['xmlXPathNextNamespace'])(a0, a1);\nvar _xmlXPathNextAttribute = Module['_xmlXPathNextAttribute'] = (a0, a1) => (_xmlXPathNextAttribute = Module['_xmlXPathNextAttribute'] = wasmExports['xmlXPathNextAttribute'])(a0, a1);\nvar _zcalloc = Module['_zcalloc'] = (a0, a1, a2) => (_zcalloc = Module['_zcalloc'] = wasmExports['zcalloc'])(a0, a1, a2);\nvar _zcfree = Module['_zcfree'] = (a0, a1) => (_zcfree = Module['_zcfree'] = wasmExports['zcfree'])(a0, a1);\nvar _strerror = Module['_strerror'] = (a0) => (_strerror = Module['_strerror'] = wasmExports['strerror'])(a0);\nvar ___dl_seterr = (a0, a1) => (___dl_seterr = wasmExports['__dl_seterr'])(a0, a1);\nvar _putc = Module['_putc'] = (a0, a1) => (_putc = Module['_putc'] = wasmExports['putc'])(a0, a1);\nvar _gmtime = Module['_gmtime'] = (a0) => (_gmtime = Module['_gmtime'] = wasmExports['gmtime'])(a0);\nvar _htonl = (a0) => (_htonl = wasmExports['htonl'])(a0);\nvar _htons = (a0) => (_htons = wasmExports['htons'])(a0);\nvar _ioctl = Module['_ioctl'] = (a0, a1, a2) => (_ioctl = Module['_ioctl'] = wasmExports['ioctl'])(a0, a1, a2);\nvar _emscripten_builtin_memalign = (a0, a1) => (_emscripten_builtin_memalign = wasmExports['emscripten_builtin_memalign'])(a0, a1);\nvar _ntohs = (a0) => (_ntohs = wasmExports['ntohs'])(a0);\nvar _srand = Module['_srand'] = (a0) => (_srand = Module['_srand'] = wasmExports['srand'])(a0);\nvar _rand = Module['_rand'] = () => (_rand = Module['_rand'] = wasmExports['rand'])();\nvar __emscripten_timeout = (a0, a1) => (__emscripten_timeout = wasmExports['_emscripten_timeout'])(a0, a1);\nvar ___floatsitf = Module['___floatsitf'] = (a0, a1) => (___floatsitf = Module['___floatsitf'] = wasmExports['__floatsitf'])(a0, a1);\nvar ___multf3 = Module['___multf3'] = (a0, a1, a2, a3, a4) => (___multf3 = Module['___multf3'] = wasmExports['__multf3'])(a0, a1, a2, a3, a4);\nvar ___extenddftf2 = Module['___extenddftf2'] = (a0, a1) => (___extenddftf2 = Module['___extenddftf2'] = wasmExports['__extenddftf2'])(a0, a1);\nvar ___getf2 = Module['___getf2'] = (a0, a1, a2, a3) => (___getf2 = Module['___getf2'] = wasmExports['__getf2'])(a0, a1, a2, a3);\nvar ___subtf3 = Module['___subtf3'] = (a0, a1, a2, a3, a4) => (___subtf3 = Module['___subtf3'] = wasmExports['__subtf3'])(a0, a1, a2, a3, a4);\nvar ___letf2 = Module['___letf2'] = (a0, a1, a2, a3) => (___letf2 = Module['___letf2'] = wasmExports['__letf2'])(a0, a1, a2, a3);\nvar ___lttf2 = Module['___lttf2'] = (a0, a1, a2, a3) => (___lttf2 = Module['___lttf2'] = wasmExports['__lttf2'])(a0, a1, a2, a3);\nvar _setThrew = (a0, a1) => (_setThrew = wasmExports['setThrew'])(a0, a1);\nvar __emscripten_tempret_set = (a0) => (__emscripten_tempret_set = wasmExports['_emscripten_tempret_set'])(a0);\nvar __emscripten_tempret_get = () => (__emscripten_tempret_get = wasmExports['_emscripten_tempret_get'])();\nvar ___fixtfsi = Module['___fixtfsi'] = (a0, a1) => (___fixtfsi = Module['___fixtfsi'] = wasmExports['__fixtfsi'])(a0, a1);\nvar __emscripten_stack_restore = (a0) => (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(a0);\nvar __emscripten_stack_alloc = (a0) => (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);\nvar _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports['emscripten_stack_get_current'])();\nvar _ScanKeywords = Module['_ScanKeywords'] = 69101764;\nvar _stderr = Module['_stderr'] = 69124192;\nvar _stdout = Module['_stdout'] = 69124496;\nvar _CurrentMemoryContext = Module['_CurrentMemoryContext'] = 69176164;\nvar _cpu_tuple_cost = Module['_cpu_tuple_cost'] = 68959584;\nvar _cpu_operator_cost = Module['_cpu_operator_cost'] = 68959600;\nvar _work_mem = Module['_work_mem'] = 68988032;\nvar _seq_page_cost = Module['_seq_page_cost'] = 68959568;\nvar _InterruptPending = Module['_InterruptPending'] = 69172816;\nvar _error_context_stack = Module['_error_context_stack'] = 69181512;\nvar _planner_hook = Module['_planner_hook'] = 69125600;\nvar _IsUnderPostmaster = Module['_IsUnderPostmaster'] = 69172889;\nvar _ParallelWorkerNumber = Module['_ParallelWorkerNumber'] = 68959812;\nvar _maintenance_work_mem = Module['_maintenance_work_mem'] = 68988048;\nvar _max_parallel_maintenance_workers = Module['_max_parallel_maintenance_workers'] = 68988052;\nvar _CacheMemoryContext = Module['_CacheMemoryContext'] = 69176180;\nvar _DataDir = Module['_DataDir'] = 69172868;\nvar _MainLWLockArray = Module['_MainLWLockArray'] = 69127724;\nvar _ShmemVariableCache = Module['_ShmemVariableCache'] = 69127536;\nvar _wal_segment_size = Module['_wal_segment_size'] = 68959864;\nvar _CritSectionCount = Module['_CritSectionCount'] = 69172864;\nvar _TopMemoryContext = Module['_TopMemoryContext'] = 69176168;\nvar _TopTransactionContext = Module['_TopTransactionContext'] = 69176188;\nvar _MyProc = Module['_MyProc'] = 69129380;\nvar _MyDatabaseId = Module['_MyDatabaseId'] = 69172872;\nvar _InterruptHoldoffCount = Module['_InterruptHoldoffCount'] = 69172856;\nvar _XactIsoLevel = Module['_XactIsoLevel'] = 68968340;\nvar _MyProcPid = Module['_MyProcPid'] = 69172956;\nvar _MyLatch = Module['_MyLatch'] = 69172988;\nvar _pgWalUsage = Module['_pgWalUsage'] = 69145856;\nvar _wal_level = Module['_wal_level'] = 68959844;\nvar _NBuffers = Module['_NBuffers'] = 68988056;\nvar _GUC_check_errdetail_string = Module['_GUC_check_errdetail_string'] = 69176808;\nvar _RmgrTable = Module['_RmgrTable'] = 68960080;\nvar _CurrentResourceOwner = Module['_CurrentResourceOwner'] = 69148968;\nvar ___THREW__ = Module['___THREW__'] = 69281700;\nvar ___threwValue = Module['___threwValue'] = 69281704;\nvar _PG_exception_stack = Module['_PG_exception_stack'] = 69181516;\nvar _process_shared_preload_libraries_in_progress = Module['_process_shared_preload_libraries_in_progress'] = 69176140;\nvar _pg_global_prng_state = Module['_pg_global_prng_state'] = 69267952;\nvar _TopTransactionResourceOwner = Module['_TopTransactionResourceOwner'] = 69148976;\nvar _LocalBufferBlockPointers = Module['_LocalBufferBlockPointers'] = 69131152;\nvar _BufferBlocks = Module['_BufferBlocks'] = 69131196;\nvar _SnapshotAnyData = Module['_SnapshotAnyData'] = 68986408;\nvar _debug_query_string = Module['_debug_query_string'] = 69147036;\nvar _old_snapshot_threshold = Module['_old_snapshot_threshold'] = 69148708;\nvar _TTSOpsHeapTuple = Module['_TTSOpsHeapTuple'] = 68982872;\nvar _pgBufferUsage = Module['_pgBufferUsage'] = 69145744;\nvar _TTSOpsVirtual = Module['_TTSOpsVirtual'] = 68982824;\nvar _shmem_startup_hook = Module['_shmem_startup_hook'] = 69130992;\nvar _BufferDescriptors = Module['_BufferDescriptors'] = 69131192;\nvar _ClientAuthentication_hook = Module['_ClientAuthentication_hook'] = 69136448;\nvar _MyProcPort = Module['_MyProcPort'] = 69172976;\nvar _cma_rsize = Module['_cma_rsize'] = 69146852;\nvar _SOCKET_DATA = Module['_SOCKET_DATA'] = 69185960;\nvar _SOCKET_FILE = Module['_SOCKET_FILE'] = 69185956;\nvar _stdin = Module['_stdin'] = 69124344;\nvar _progname = Module['_progname'] = 69146804;\nvar _post_parse_analyze_hook = Module['_post_parse_analyze_hook'] = 69145344;\nvar _ScanKeywordTokens = Module['_ScanKeywordTokens'] = 68333312;\nvar _TTSOpsMinimalTuple = Module['_TTSOpsMinimalTuple'] = 68982920;\nvar _check_password_hook = Module['_check_password_hook'] = 69145452;\nvar _DateStyle = Module['_DateStyle'] = 68988020;\nvar _WalReceiverFunctions = Module['_WalReceiverFunctions'] = 69148088;\nvar _SPI_processed = Module['_SPI_processed'] = 69145880;\nvar _SPI_tuptable = Module['_SPI_tuptable'] = 69145888;\nvar _ConfigReloadPending = Module['_ConfigReloadPending'] = 69148220;\nvar _check_function_bodies = Module['_check_function_bodies'] = 69036310;\nvar _ExecutorStart_hook = Module['_ExecutorStart_hook'] = 69145724;\nvar _ExecutorRun_hook = Module['_ExecutorRun_hook'] = 69145728;\nvar _ExecutorFinish_hook = Module['_ExecutorFinish_hook'] = 69145732;\nvar _ExecutorEnd_hook = Module['_ExecutorEnd_hook'] = 69145736;\nvar _SPI_result = Module['_SPI_result'] = 69145892;\nvar _ProcessUtility_hook = Module['_ProcessUtility_hook'] = 69146756;\nvar _single_mode_feed = Module['_single_mode_feed'] = 69146820;\nvar _cma_wsize = Module['_cma_wsize'] = 69146860;\nvar _quote_all_identifiers = Module['_quote_all_identifiers'] = 69146809;\nvar _application_name = Module['_application_name'] = 69178180;\nvar _ShutdownRequestPending = Module['_ShutdownRequestPending'] = 69148224;\nvar _cluster_name = Module['_cluster_name'] = 69036364;\nvar _Log_directory = Module['_Log_directory'] = 69148232;\nvar _Log_filename = Module['_Log_filename'] = 69148236;\nvar _MyStartTime = Module['_MyStartTime'] = 69172960;\nvar _oldSnapshotControl = Module['_oldSnapshotControl'] = 69148712;\nvar _pg_crc32_table = Module['_pg_crc32_table'] = 68445312;\nvar _IntervalStyle = Module['_IntervalStyle'] = 69172896;\nvar _shmem_request_hook = Module['_shmem_request_hook'] = 69176144;\nvar _extra_float_digits = Module['_extra_float_digits'] = 69093036;\nvar _xmlStructuredError = Module['_xmlStructuredError'] = 69268316;\nvar _xmlStructuredErrorContext = Module['_xmlStructuredErrorContext'] = 69268324;\nvar _xmlGenericErrorContext = Module['_xmlGenericErrorContext'] = 69268320;\nvar _xmlGenericError = Module['_xmlGenericError'] = 69106068;\nvar _xmlIsBaseCharGroup = Module['_xmlIsBaseCharGroup'] = 69105832;\nvar _xmlIsDigitGroup = Module['_xmlIsDigitGroup'] = 69105864;\nvar _xmlIsCombiningGroup = Module['_xmlIsCombiningGroup'] = 69105848;\nvar _xmlIsExtenderGroup = Module['_xmlIsExtenderGroup'] = 69105880;\nvar _xmlFree = Module['_xmlFree'] = 69106032;\nvar _pg_number_of_ones = Module['_pg_number_of_ones'] = 68765008;\nvar _IDB_STAGE = Module['_IDB_STAGE'] = 69185968;\nvar _IDB_PIPE_FP = Module['_IDB_PIPE_FP'] = 69185964;\nvar _pg_scram_mech = Module['_pg_scram_mech'] = 69105776;\nvar _pg_g_threadlock = Module['_pg_g_threadlock'] = 69103880;\nvar _pgresStatus = Module['_pgresStatus'] = 69105568;\nvar _xmlIsPubidChar_tab = Module['_xmlIsPubidChar_tab'] = 68765296;\nvar _xmlGetWarningsDefaultValue = Module['_xmlGetWarningsDefaultValue'] = 69106060;\nvar _xmlMalloc = Module['_xmlMalloc'] = 69106036;\nvar _xmlRealloc = Module['_xmlRealloc'] = 69106044;\nvar _xmlLastError = Module['_xmlLastError'] = 69268336;\nvar _xmlMallocAtomic = Module['_xmlMallocAtomic'] = 69106040;\nvar _xmlMemStrdup = Module['_xmlMemStrdup'] = 69106048;\nvar _xmlBufferAllocScheme = Module['_xmlBufferAllocScheme'] = 69106052;\nvar _xmlDefaultBufferSize = Module['_xmlDefaultBufferSize'] = 69106056;\nvar _xmlParserDebugEntities = Module['_xmlParserDebugEntities'] = 69268276;\nvar _xmlDoValidityCheckingDefaultValue = Module['_xmlDoValidityCheckingDefaultValue'] = 69268280;\nvar _xmlLoadExtDtdDefaultValue = Module['_xmlLoadExtDtdDefaultValue'] = 69268284;\nvar _xmlPedanticParserDefaultValue = Module['_xmlPedanticParserDefaultValue'] = 69268288;\nvar _xmlLineNumbersDefaultValue = Module['_xmlLineNumbersDefaultValue'] = 69268292;\nvar _xmlKeepBlanksDefaultValue = Module['_xmlKeepBlanksDefaultValue'] = 69106064;\nvar _xmlSubstituteEntitiesDefaultValue = Module['_xmlSubstituteEntitiesDefaultValue'] = 69268296;\nvar _xmlRegisterNodeDefaultValue = Module['_xmlRegisterNodeDefaultValue'] = 69268300;\nvar _xmlDeregisterNodeDefaultValue = Module['_xmlDeregisterNodeDefaultValue'] = 69268304;\nvar _xmlParserInputBufferCreateFilenameValue = Module['_xmlParserInputBufferCreateFilenameValue'] = 69268308;\nvar _xmlOutputBufferCreateFilenameValue = Module['_xmlOutputBufferCreateFilenameValue'] = 69268312;\nvar _xmlIndentTreeOutput = Module['_xmlIndentTreeOutput'] = 69106072;\nvar _xmlTreeIndentString = Module['_xmlTreeIndentString'] = 69106076;\nvar _xmlSaveNoEmptyTags = Module['_xmlSaveNoEmptyTags'] = 69268328;\nvar _xmlDefaultSAXHandler = Module['_xmlDefaultSAXHandler'] = 69106080;\nvar _xmlDefaultSAXLocator = Module['_xmlDefaultSAXLocator'] = 69106192;\nvar _xmlParserMaxDepth = Module['_xmlParserMaxDepth'] = 69106852;\nvar _xmlStringText = Module['_xmlStringText'] = 68767104;\nvar _xmlStringComment = Module['_xmlStringComment'] = 68767119;\nvar _xmlStringTextNoenc = Module['_xmlStringTextNoenc'] = 68767109;\nvar _xmlXPathNAN = Module['_xmlXPathNAN'] = 69269000;\nvar _xmlXPathNINF = Module['_xmlXPathNINF'] = 69269016;\nvar _xmlXPathPINF = Module['_xmlXPathPINF'] = 69269008;\nvar _z_errmsg = Module['_z_errmsg'] = 69123408;\nvar __length_code = Module['__length_code'] = 68786768;\nvar __dist_code = Module['__dist_code'] = 68786256;\nfunction invoke_iii(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_ii(index,a1) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viii(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_v(index) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)();\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vii(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_jii(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n    return 0n;\n  }\n}\n\nfunction invoke_vi(index,a1) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiii(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiii(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_ji(index,a1) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n    return 0n;\n  }\n}\n\nfunction invoke_viiiii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_i(index) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)();\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_jiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n    return 0n;\n  }\n}\n\nfunction invoke_jiiiii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n    return 0n;\n  }\n}\n\nfunction invoke_viiii(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vji(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiijii(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vijiji(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viji(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiji(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiji(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vid(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiij(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_ij(index,a1) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiij(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vij(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vj(index,a1) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiij(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_jiiii(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n    return 0n;\n  }\n}\n\nfunction invoke_viiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_ijiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viijii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiji(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viijiiii(index,a1,a2,a3,a4,a5,a6,a7) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viij(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_di(index,a1) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_id(index,a1) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_ijiiiii(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\n\n// include: postamble.js\n// === Auto-generated postamble setup entry stuff ===\n\nModule['addRunDependency'] = addRunDependency;\nModule['removeRunDependency'] = removeRunDependency;\nModule['callMain'] = callMain;\nModule['ccall'] = ccall;\nModule['cwrap'] = cwrap;\nModule['setValue'] = setValue;\nModule['getValue'] = getValue;\nModule['UTF8ToString'] = UTF8ToString;\nModule['stringToNewUTF8'] = stringToNewUTF8;\nModule['stringToUTF8OnStack'] = stringToUTF8OnStack;\nModule['FS_createPreloadedFile'] = FS_createPreloadedFile;\nModule['FS_unlink'] = FS_unlink;\nModule['FS_createPath'] = FS_createPath;\nModule['FS_createDevice'] = FS_createDevice;\nModule['FS'] = FS;\nModule['FS_createDataFile'] = FS_createDataFile;\nModule['FS_createLazyFile'] = FS_createLazyFile;\n\n\nvar calledRun;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!calledRun) run();\n  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n};\n\nfunction callMain(args = []) {\n\n  var entryFunction = resolveGlobalSymbol('main').sym;;\n\n  // Main modules can't tell if they have main() at compile time, since it may\n  // arrive from a dynamic library.\n  if (!entryFunction) return;\n\n  args.unshift(thisProgram);\n\n  var argc = args.length;\n  var argv = stackAlloc((argc + 1) * 4);\n  var argv_ptr = argv;\n  args.forEach((arg) => {\n    HEAPU32[((argv_ptr)>>2)] = stringToUTF8OnStack(arg);\n    argv_ptr += 4;\n  });\n  HEAPU32[((argv_ptr)>>2)] = 0;\n\n  try {\n\n    var ret = entryFunction(argc, argv);\n\n    // if we're not running an evented main loop, it's time to exit\n    exitJS(ret, /* implicit = */ true);\n    return ret;\n  }\n  catch (e) {\n    return handleException(e);\n  }\n}\n\nfunction run(args = arguments_) {\n\n  if (runDependencies > 0) {\n    return;\n  }\n\n  preRun();\n\n  // a preRun added a dependency, run will be called later\n  if (runDependencies > 0) {\n    return;\n  }\n\n  function doRun() {\n    // run may have just been called through dependencies being fulfilled just in this very frame,\n    // or while the async setStatus time below was happening\n    if (calledRun) return;\n    calledRun = true;\n    Module['calledRun'] = true;\n\n    if (ABORT) return;\n\n    initRuntime();\n\n    preMain();\n\n    readyPromiseResolve(Module);\n    Module['onRuntimeInitialized']?.();\n\n    if (shouldRunNow) callMain(args);\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(() => {\n      setTimeout(() => Module['setStatus'](''), 1);\n      doRun();\n    }, 1);\n  } else\n  {\n    doRun();\n  }\n}\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\n// shouldRunNow refers to calling main(), not run().\nvar shouldRunNow = true;\n\nif (Module['noInitialRun']) shouldRunNow = false;\n\nrun();\n\n// end include: postamble.js\n\n// include: postamble_modularize.js\n// In MODULARIZE mode we wrap the generated code in a factory function\n// and return either the Module itself, or a promise of the module.\n//\n// We assign to the `moduleRtn` global here and configure closure to see\n// this as and extern so it won't get minified.\n\nmoduleRtn = readyPromise;\n\n// end include: postamble_modularize.js\n\n\n\n  return moduleRtn;\n}\n);\n})();\nexport default Module;\n","import{a as ce}from\"./chunk-4ZP5PNUC.js\";import{e as ve,h as _e,i as re,j as ne,k as oe,l as ae,m as le,n as Te,o as J,p as Fe,q as ue,r as de,s as pe,t as fe,u as Re,v as Me}from\"./chunk-JSQ47LU7.js\";import{a as Se,b as me,c as j,d as P,e as V}from\"./chunk-GMYUOGPV.js\";import\"./chunk-PZ27VTCT.js\";import{c as Pe,d as n,e as p,f as y,g as I,i as f}from\"./chunk-MPW3RCU6.js\";f();f();f();var ke=new Error(\"timeout while waiting for mutex to become available\"),Ge=new Error(\"mutex already locked\"),Oe=new Error(\"request for lock canceled\"),De=function(i,t,e,s){function o(r){return r instanceof e?r:new e(function(c){c(r)})}return new(e||(e=Promise))(function(r,c){function m(u){try{d(s.next(u))}catch(a){c(a)}}function l(u){try{d(s.throw(u))}catch(a){c(a)}}function d(u){u.done?r(u.value):o(u.value).then(m,l)}d((s=s.apply(i,t||[])).next())})},Z=class{constructor(t,e=Oe){this._value=t,this._cancelError=e,this._weightedQueues=[],this._weightedWaiters=[]}acquire(t=1){if(t<=0)throw new Error(`invalid weight ${t}: must be positive`);return new Promise((e,s)=>{this._weightedQueues[t-1]||(this._weightedQueues[t-1]=[]),this._weightedQueues[t-1].push({resolve:e,reject:s}),this._dispatch()})}runExclusive(t,e=1){return De(this,void 0,void 0,function*(){let[s,o]=yield this.acquire(e);try{return yield t(s)}finally{o()}})}waitForUnlock(t=1){if(t<=0)throw new Error(`invalid weight ${t}: must be positive`);return new Promise(e=>{this._weightedWaiters[t-1]||(this._weightedWaiters[t-1]=[]),this._weightedWaiters[t-1].push(e),this._dispatch()})}isLocked(){return this._value<=0}getValue(){return this._value}setValue(t){this._value=t,this._dispatch()}release(t=1){if(t<=0)throw new Error(`invalid weight ${t}: must be positive`);this._value+=t,this._dispatch()}cancel(){this._weightedQueues.forEach(t=>t.forEach(e=>e.reject(this._cancelError))),this._weightedQueues=[]}_dispatch(){var t;for(let e=this._value;e>0;e--){let s=(t=this._weightedQueues[e-1])===null||t===void 0?void 0:t.shift();if(!s)continue;let o=this._value,r=e;this._value-=e,e=this._value+1,s.resolve([o,this._newReleaser(r)])}this._drainUnlockWaiters()}_newReleaser(t){let e=!1;return()=>{e||(e=!0,this.release(t))}}_drainUnlockWaiters(){for(let t=this._value;t>0;t--)this._weightedWaiters[t-1]&&(this._weightedWaiters[t-1].forEach(e=>e()),this._weightedWaiters[t-1]=[])}},Ae=function(i,t,e,s){function o(r){return r instanceof e?r:new e(function(c){c(r)})}return new(e||(e=Promise))(function(r,c){function m(u){try{d(s.next(u))}catch(a){c(a)}}function l(u){try{d(s.throw(u))}catch(a){c(a)}}function d(u){u.done?r(u.value):o(u.value).then(m,l)}d((s=s.apply(i,t||[])).next())})},R=class{constructor(t){this._semaphore=new Z(1,t)}acquire(){return Ae(this,void 0,void 0,function*(){let[,t]=yield this._semaphore.acquire();return t})}runExclusive(t){return this._semaphore.runExclusive(()=>t())}isLocked(){return this._semaphore.isLocked()}waitForUnlock(){return this._semaphore.waitForUnlock()}release(){this._semaphore.isLocked()&&this._semaphore.release()}cancel(){return this._semaphore.cancel()}};f();var ye=Pe(Se(),1);async function ee(i){if(ue){let t=await import(\"fs\"),e=await import(\"zlib\"),{Writable:s}=await import(\"stream\"),{pipeline:o}=await import(\"stream/promises\");if(!t.existsSync(i))throw new Error(`Extension bundle not found: ${i}`);let r=e.createGunzip(),c=[];return await o(t.createReadStream(i),r,new s({write(m,l,d){c.push(m),d()}})),new Blob(c)}else{let t=await fetch(i.toString());if(!t.ok||!t.body)return null;if(t.headers.get(\"Content-Encoding\")===\"gzip\")return t.blob();{let e=new DecompressionStream(\"gzip\");return new Response(t.body.pipeThrough(e)).blob()}}}async function he(i,t){for(let e in i.pg_extensions){let s;try{s=await i.pg_extensions[e]}catch(o){console.error(\"Failed to fetch extension:\",e,o);continue}if(s){let o=new Uint8Array(await s.arrayBuffer());Ie(i,e,o,t)}else console.error(\"Could not get binary data for extension:\",e)}}function Ie(i,t,e,s){ye.default.untar(e).forEach(r=>{if(!r.name.startsWith(\".\")){let c=i.WASM_PREFIX+\"/\"+r.name;if(r.name.endsWith(\".so\")){let m=(...d)=>{s(\"pgfs:ext OK\",c,d)},l=(...d)=>{s(\"pgfs:ext FAIL\",c,d)};i.FS.createPreloadedFile(Be(c),r.name.split(\"/\").pop().slice(0,-3),r.data,!0,!0,m,l,!1)}else i.FS.writeFile(c,r.data)}})}function Be(i){let t=i.lastIndexOf(\"/\");return t>0?i.slice(0,t):i}f();f();var q=class extends V{async init(t,e){return this.pg=t,{emscriptenOpts:{...e,preRun:[...e.preRun||[],o=>{let r=o.FS.filesystems.IDBFS;o.FS.mkdir(\"/pglite\"),o.FS.mkdir(`/pglite/${this.dataDir}`),o.FS.mount(r,{},`/pglite/${this.dataDir}`),o.FS.symlink(`/pglite/${this.dataDir}`,P)}]}}}initialSyncFs(){return new Promise((t,e)=>{this.pg.Module.FS.syncfs(!0,s=>{s?e(s):t()})})}syncToFs(t){return new Promise((e,s)=>{this.pg.Module.FS.syncfs(!1,o=>{o?s(o):e()})})}async closeFs(){let t=this.pg.Module.FS.filesystems.IDBFS.dbs[this.dataDir];t&&t.close(),this.pg.Module.FS.quit()}};f();var L=class extends V{async closeFs(){this.pg.Module.FS.quit()}};function xe(i){let t;if(i?.startsWith(\"file://\")){if(i=i.slice(7),!i)throw new Error(\"Invalid dataDir, must be a valid path\");t=\"nodefs\"}else i?.startsWith(\"idb://\")?(i=i.slice(6),t=\"idbfs\"):i?.startsWith(\"opfs-ahp://\")?(i=i.slice(11),t=\"opfs-ahp\"):!i||i?.startsWith(\"memory://\")?t=\"memoryfs\":t=\"nodefs\";return{dataDir:i,fsType:t}}async function ge(i,t){let e;if(i&&t===\"nodefs\"){let{NodeFS:s}=await import(\"./fs/nodefs.js\");e=new s(i)}else if(i&&t===\"idbfs\")e=new q(i);else if(i&&t===\"opfs-ahp\"){let{OpfsAhpFS:s}=await import(\"./fs/opfs-ahp.js\");e=new s(i)}else e=new L;return e}f();import Ne from\"./postgres.js\";var we=Ne;var B,M,O,N,k,K,X,Y,G,z,$,C,D,T,g,A,E,Ee,W,te=class te extends ce{constructor(e={},s={}){super();p(this,E);p(this,B,!1);p(this,M,!1);p(this,O,!1);p(this,N,!1);p(this,k,!1);p(this,K,new R);p(this,X,new R);p(this,Y,new R);p(this,G,!1);this.debug=0;p(this,z);p(this,$,[]);p(this,C,new J);p(this,D);p(this,T);p(this,g,new Map);p(this,A,new Set);typeof e==\"string\"?s={dataDir:e,...s}:s=e,this.dataDir=s.dataDir,s.parsers!==void 0&&(this.parsers={...this.parsers,...s.parsers}),s.serializers!==void 0&&(this.serializers={...this.serializers,...s.serializers}),s?.debug!==void 0&&(this.debug=s.debug),s?.relaxedDurability!==void 0&&y(this,k,s.relaxedDurability),y(this,z,s.extensions??{}),this.waitReady=I(this,E,Ee).call(this,s??{})}static async create(e,s){let o=typeof e==\"string\"?{dataDir:e,...s??{}}:e??{},r=new te(o);return await r.waitReady,r}get Module(){return this.mod}get ready(){return n(this,B)&&!n(this,M)&&!n(this,O)}get closed(){return n(this,O)}async close(){await this._checkReady(),y(this,M,!0);for(let e of n(this,$))await e();try{await this.execProtocol(re.end()),this.mod._pg_shutdown()}catch(e){let s=e;if(!(s.name===\"ExitStatus\"&&s.status===0))throw e}await this.fs.closeFs(),y(this,O,!0),y(this,M,!1)}async[Symbol.asyncDispose](){await this.close()}async _handleBlob(e){y(this,D,e?await e.arrayBuffer():void 0)}async _cleanupBlob(){y(this,D,void 0)}async _getWrittenBlob(){if(!n(this,T))return;let e=new Blob(n(this,T));return y(this,T,void 0),e}async _checkReady(){if(n(this,M))throw new Error(\"PGlite is closing\");if(n(this,O))throw new Error(\"PGlite is closed\");n(this,B)||await this.waitReady}async execProtocolRaw(e,{syncToFs:s=!0}={}){let o=e.length,r=this.mod;r._interactive_write(o),r.HEAPU8.set(e,1),r._interactive_one();let c=o+2,m=c+r._interactive_read(),l=r.HEAPU8.subarray(c,m);return s&&await this.syncToFs(),l}async execProtocol(e,{syncToFs:s=!0,throwOnError:o=!0,onNotice:r}={}){let c=await this.execProtocolRaw(e,{syncToFs:s}),m=[];return n(this,C).parse(c,l=>{if(l instanceof ne){if(y(this,C,new J),o)throw l}else if(l instanceof le)this.debug>0&&console.warn(l),r&&r(l);else if(l instanceof ae)switch(l.text){case\"BEGIN\":y(this,N,!0);break;case\"COMMIT\":case\"ROLLBACK\":y(this,N,!1);break}else if(l instanceof oe){let d=n(this,g).get(l.channel);d&&d.forEach(u=>{queueMicrotask(()=>u(l.payload))}),n(this,A).forEach(u=>{queueMicrotask(()=>u(l.channel,l.payload))})}m.push(l)}),{messages:m,data:c}}isInTransaction(){return n(this,N)}async syncToFs(){if(n(this,G))return;y(this,G,!0);let e=async()=>{await n(this,Y).runExclusive(async()=>{y(this,G,!1),await this.fs.syncToFs(n(this,k))})};n(this,k)?e():await e()}async listen(e,s){return n(this,g).has(e)||n(this,g).set(e,new Set),n(this,g).get(e).add(s),await this.exec(`LISTEN \"${e}\"`),async()=>{await this.unlisten(e,s)}}async unlisten(e,s){s?(n(this,g).get(e)?.delete(s),n(this,g).get(e)?.size===0&&(await this.exec(`UNLISTEN \"${e}\"`),n(this,g).delete(e))):(await this.exec(`UNLISTEN \"${e}\"`),n(this,g).delete(e))}onNotification(e){return n(this,A).add(e),()=>{n(this,A).delete(e)}}offNotification(e){n(this,A).delete(e)}async dumpDataDir(e){let s=this.dataDir?.split(\"/\").pop()??\"pgdata\";return this.fs.dumpTar(s,e)}_runExclusiveQuery(e){return n(this,K).runExclusive(e)}_runExclusiveTransaction(e){return n(this,X).runExclusive(e)}};B=new WeakMap,M=new WeakMap,O=new WeakMap,N=new WeakMap,k=new WeakMap,K=new WeakMap,X=new WeakMap,Y=new WeakMap,G=new WeakMap,z=new WeakMap,$=new WeakMap,C=new WeakMap,D=new WeakMap,T=new WeakMap,g=new WeakMap,A=new WeakMap,E=new WeakSet,Ee=async function(e){if(e.fs)this.fs=e.fs;else{let{dataDir:a,fsType:h}=xe(e.dataDir);this.fs=await ge(a,h)}let s={},o=[],r=[`PGDATA=${P}`,`PREFIX=${j}`,`PGUSER=${e.username??\"postgres\"}`,`PGDATABASE=${e.database??\"template1\"}`,\"MODE=REACT\",\"REPL=N\",...this.debug?[\"-d\",this.debug.toString()]:[]];e.wasmModule||de();let c=e.fsBundle?e.fsBundle.arrayBuffer():fe(),m;c.then(a=>{m=a});let l={WASM_PREFIX:j,arguments:r,INITIAL_MEMORY:e.initialMemory,noExitRuntime:!0,...this.debug>0?{print:console.info,printErr:console.error}:{print:()=>{},printErr:()=>{}},instantiateWasm:(a,h)=>(pe(a,e.wasmModule).then(({instance:x,module:w})=>{h(x,w)}),{}),getPreloadedPackage:(a,h)=>{if(a===\"postgres.data\"){if(m.byteLength!==h)throw new Error(`Invalid FS bundle size: ${m.byteLength} !== ${h}`);return m}throw new Error(`Unknown package: ${a}`)},preRun:[a=>{let h=a.FS.makedev(64,0),x={open:w=>{},close:w=>{},read:(w,U,F,S,b)=>{let se=n(this,D);if(!se)throw new Error(\"No /dev/blob File or Blob provided to read from\");let H=new Uint8Array(se);if(b>=H.length)return 0;let ie=Math.min(H.length-b,S);for(let Q=0;Q<ie;Q++)U[F+Q]=H[b+Q];return ie},write:(w,U,F,S,b)=>(n(this,T)??y(this,T,[]),n(this,T).push(U.slice(F,F+S)),S),llseek:(w,U,F)=>{let S=n(this,D);if(!S)throw new Error(\"No /dev/blob File or Blob provided to llseek\");let b=U;if(F===1?b+=w.position:F===2&&(b=new Uint8Array(S).length),b<0)throw new a.FS.ErrnoError(28);return b}};a.FS.registerDevice(h,x),a.FS.mkdev(\"/dev/blob\",h)}]},{emscriptenOpts:d}=await this.fs.init(this,l);l=d;for(let[a,h]of Object.entries(n(this,z)))if(h instanceof URL)s[a]=ee(h);else{let x=await h.setup(this,l);if(x.emscriptenOpts&&(l=x.emscriptenOpts),x.namespaceObj){let w=this;w[a]=x.namespaceObj}x.bundlePath&&(s[a]=ee(x.bundlePath)),x.init&&o.push(x.init),x.close&&n(this,$).push(x.close)}if(l.pg_extensions=s,await c,this.mod=await we(l),await this.fs.initialSyncFs(),e.loadDataDir){if(this.mod.FS.analyzePath(P+\"/PG_VERSION\").exists)throw new Error(\"Database already exists, cannot load from tarball\");I(this,E,W).call(this,\"pglite: loading data from tarball\"),await me(this.mod.FS,e.loadDataDir,P)}this.mod.FS.analyzePath(P+\"/PG_VERSION\").exists?I(this,E,W).call(this,\"pglite: found DB, resuming\"):I(this,E,W).call(this,\"pglite: no db\"),await he(this.mod,(...a)=>I(this,E,W).call(this,...a));let u=this.mod._pg_initdb();if(!u)throw new Error(\"INITDB failed to return value\");if(u&1)throw new Error(\"INITDB failed\");if(u&2){let a=e.username??\"postgres\",h=e.database??\"template1\";if(u&4){if(!(u&12))throw new Error(\"Invalid db/user combination\")}else if(h!==\"template1\"&&a!==\"postgres\")throw new Error(\"INITDB created a new datadir, but an alternative db/user was requested\")}await this.syncToFs(),y(this,B,!0),await this.exec(\"SET search_path TO public;\"),await this._initArrayTypes();for(let a of o)await a()},W=function(...e){this.debug>0&&console.log(...e)};var be=te;f();export{q as IdbFs,L as MemoryFS,R as Mutex,be as PGlite,Me as formatQuery,Te as messages,_e as parse,Fe as protocol,ve as types,Re as uuid};\n//# sourceMappingURL=index.js.map","import { PGlite, PGliteOptions } from '@electric-sql/pglite'\nimport { logWarn } from 'src/utils/logger'\n\nexport class PGliteInstance {\n  private static instance: PGlite | null = null\n  private static options: PGliteOptions = {}\n\n  static async getInstance(): Promise<PGlite> {\n    if (!PGliteInstance.instance) {\n      if (!PGliteInstance.options) {\n        logWarn(\n          'PGlite constructor options are not provided. Creating instance with default options.',\n        )\n      }\n      PGliteInstance.instance = await PGlite.create(PGliteInstance.options)\n    }\n\n    return PGliteInstance.instance\n  }\n\n  static setOptions(options: PGliteOptions): void {\n    PGliteInstance.options = options\n  }\n\n  static async close(): Promise<void> {\n    if (PGliteInstance.instance) {\n      await PGliteInstance.instance.close()\n      PGliteInstance.instance = null\n    }\n  }\n}\n\nexport async function getPGliteInstance() {\n  return PGliteInstance.getInstance()\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-function-type */\nimport { EventEmitter } from 'eventemitter3'\nimport { PGliteInstance } from './pglite-instance'\nimport { Results } from '@electric-sql/pglite'\n\ntype ConnectCallback = (error: unknown, client: PGlitePool | null, done: Function) => void\ntype QueryCallback = (error: unknown, results: Results<unknown> | null) => void\n\nexport class PGlitePool extends EventEmitter {\n  constructor() {\n    super()\n  }\n\n  private doneCallback() {}\n\n  async connect(callback: ConnectCallback) {\n    try {\n      await PGliteInstance.getInstance()\n      callback(null, this, this.doneCallback)\n    } catch (error) {\n      callback(error, null, this.doneCallback)\n    }\n  }\n\n  async query(sqlQuery: string, queryParameters?: never[], callback?: QueryCallback) {\n    const pgliteInstance = await PGliteInstance.getInstance()\n    let cb = callback\n    let params = queryParameters\n\n    if (typeof queryParameters === 'function') {\n      cb = queryParameters\n      params = undefined\n    }\n\n    return pgliteInstance\n      .query(sqlQuery, params)\n      .then((results) => {\n        if (cb) {\n          cb(null, results)\n        }\n        return results\n      })\n      .catch((error) => {\n        if (cb) {\n          cb(error, null)\n        }\n        throw error\n      })\n  }\n\n  end(errorCallback: Function) {\n    PGliteInstance.close()\n      .then(() => errorCallback(null))\n      .catch((error) => errorCallback(error))\n  }\n}\n","import { PGliteOptions } from '@electric-sql/pglite'\nimport { PGlitePool } from './pglite-pool'\nimport { PGliteInstance } from './pglite-instance'\n\nexport class PGliteDriver {\n  constructor(options?: PGliteOptions) {\n    if (options) {\n      PGliteInstance.setOptions(options)\n    }\n  }\n\n  public get driver() {\n    return class {\n      static Pool = PGlitePool\n      static pool = PGlitePool\n    }\n  }\n}\n","import { logDebug, logError, logWarn } from 'src/utils/logger'\n\nconst processes = new Map<string, unknown>()\n\nexport const WOKER_INIT_MESSAGE_ID = '_WORKER_INIT_'\n\nexport type BaseMessagePayload = { messageId: string }\n\nexport type BaseMessageResponse = {\n  type: 'complete' | 'error' | 'inprogress' | 'started'\n  payload: unknown\n  messageId: string\n}\n\nexport async function sendToWorker(\n  worker: Worker,\n  type: string,\n  messageId: string,\n  payload: unknown,\n) {\n  return worker.postMessage({\n    type: type,\n    messageId,\n    payload: payload,\n  })\n}\n\nexport function sendToMainThread(\n  id: string,\n  type: 'inprogress' | 'complete' | 'error' | 'started',\n  payload: unknown,\n) {\n  const process = processes.get(id)\n  if (!process && id !== WOKER_INIT_MESSAGE_ID) {\n    logWarn('[No process found for message]', id)\n    return\n  }\n  self.postMessage({\n    messageId: id,\n    type,\n    payload,\n  } as BaseMessageResponse)\n  logDebug('[Message sent to main thread]', { id, type, payload })\n}\n\nfunction handlePayloadFunc<M extends BaseMessagePayload>(handler: (data: M) => Promise<unknown>) {\n  return async (data: M) => {\n    try {\n      const responseData = await handler(data)\n\n      sendToMainThread(data.messageId, 'complete', responseData)\n    } catch (e: unknown) {\n      logError('Handle Worker Message', e, { payload: data })\n      sendToMainThread(data.messageId, 'error', {\n        error: e instanceof Error ? e.message : 'An error occurred',\n        error_code: 'UNKNOWN_ERROR',\n      })\n    } finally {\n      processes.delete(data.messageId)\n    }\n  }\n}\n\n// Listen for messages from the main thread\nexport function listenForMessages<M extends BaseMessagePayload>(\n  handler: (data: M) => Promise<unknown>,\n  options?: { timeout?: number },\n) {\n  self.addEventListener('message', async (event: MessageEvent<M>) => {\n    processes.set(\n      event.data.messageId,\n      Promise.race([\n        handlePayloadFunc(handler)(event.data),\n        new Promise((resolve) => setTimeout(() => resolve(true), options?.timeout || 120000)).then(\n          () => {\n            if (processes.has(event.data.messageId)) {\n              sendToMainThread(event.data.messageId, 'error', {\n                error: 'Operation timed out',\n                error_code: 'TIMEOUT_ERROR',\n              })\n              processes.delete(event.data.messageId)\n            }\n          },\n        ),\n      ]),\n    )\n    sendToMainThread(event.data.messageId, 'started', 'Started processing')\n  })\n}\n\nexport async function init(func?: () => Promise<void>) {\n  if (typeof func === 'function') {\n    await func()\n  }\n  sendToMainThread(WOKER_INIT_MESSAGE_ID, 'complete', 'Worker initialized')\n}\n\nexport const workerMessagesHandler = <\n  T extends { messageId: string; type: string; payload?: unknown },\n  M extends Map<\n    string,\n    { resolve: unknown; reject: unknown; processInfo?: unknown; promise: unknown }\n  >,\n>(\n  event: MessageEvent<T>,\n  refProcesses: M,\n  callbacks?: {\n    onWorkerInit?: (e: MessageEvent<T>) => void\n    onComplete?: (e: MessageEvent<T>) => void\n    onError?: (e: MessageEvent<T>) => void\n    onFinish?: (e: MessageEvent<T>) => void\n    onProgress?: (e: MessageEvent<T>) => void\n  },\n) => {\n  const messageId = event.data.messageId\n  if (!messageId) {\n    return\n  }\n  const { resolve, reject, processInfo } = refProcesses?.get(messageId) || {}\n  if (messageId === WOKER_INIT_MESSAGE_ID) {\n    callbacks?.onWorkerInit?.(event)\n  } else if (['complete', 'error'].includes(event.data.type)) {\n    if (event.data.type === 'complete' && typeof resolve === 'function') {\n      resolve?.(event.data.payload as never)\n      callbacks?.onComplete?.(event)\n    } else if (typeof reject === 'function') {\n      reject?.(new Error(JSON.stringify(event.data.payload)))\n      callbacks?.onError?.(event)\n    }\n    refProcesses.delete(messageId)\n    callbacks?.onFinish?.(event)\n  } else if (event.data.type === 'inprogress') {\n    if (\n      processInfo &&\n      typeof processInfo === 'object' &&\n      'data' in processInfo &&\n      Array.isArray(processInfo?.data)\n    ) {\n      processInfo.data.push(event.data.payload)\n    }\n    callbacks?.onProgress?.(event)\n  } else if (event.data.type === 'started') {\n    // do nothing\n  } else {\n    logWarn('[Unknown message type]', event.data)\n  }\n}\n","export enum FlowNodeTypeEnum {\n  Toolbox = 'TOOLBOX',\n  LLM = 'LLM',\n  NewMessage = 'NEW_MESSAGE',\n  Thread = 'THREAD',\n  Message = 'MESSAGE',\n  Prompt = 'PROMPT',\n  SessionInfo = 'SESSION_INFO',\n  Schema = 'SCHEMA',\n  ToolDefinition = 'TOOL_DEFINITION',\n  ToolHandler = 'TOOL_HANDLER',\n  FewShotExample = 'FEW_SHOT_EXAMPLE',\n  CSVData = 'CSV_DATA',\n  DefaultEmbeddingModel = 'DEFAULT_EMBEDDING_MODEL',\n  VectorDatabase = 'VECTOR_DATABASE',\n  JSONLData = 'JSONL_DATA',\n  ApplicationBar = 'APPLICATION_BAR',\n  Shape = 'SHAPE',\n  CircleShape = 'CIRCLE_SHAPE',\n  TriangleShape = 'TRIANGLE_SHAPE',\n  EditorApp = 'EDITOR_APP',\n  PlaceHolder = 'PLACEHOLDER',\n  CodeContainerApp = 'CODE_CONTAINER_APP',\n  VSLiteApp = 'VSLITE_APP',\n  JSONData = 'JSON_DATA',\n}\n","export enum SessionStatusEnum {\n  Started = 'started',\n  Done = 'done',\n  Achieved = 'Achieved',\n  Deleted = 'deleted',\n}\n\nexport enum SessionTypeEnum {\n  Whiteboard = 'Whiteboard',\n  StandaloneApp = 'StandaloneApp',\n}\n","import { Thread } from '../entities/thread'\nimport type { Message } from '../entities/message'\nimport type { LLM } from '../entities/llm'\nimport type { FlowNode } from '../entities/flow-node'\nimport type { FlowEdge } from '../entities/flow-edge'\nimport type { Prompt } from '../entities/prompt'\nimport type { PromptVariable } from '../entities/prompt-variable'\nimport type { Session } from '../entities/session'\nimport type { Schema } from '../entities/schema'\nimport type { SchemaItem } from '../entities/schema-item'\nimport type { JSONData } from '../entities/json-data'\nimport type { CSVData } from '../entities/csv-data'\nimport type { ToolDefinition } from '../entities/tool-definition'\nimport type { VectorDatabase } from '../entities/vector-database'\nimport type { JSONLData } from '../entities/jsonl-data'\nimport type { FlowNodeData } from '../entities/flow-node-data'\nimport type { FlowNodePlaceholder } from '../entities/flow-node-placeholder'\nimport { FlowNodeTypeEnum } from './flow-node'\n\nexport type EntityTypesMap = {\n  Thread: Thread\n  Message: Message\n  LLM: LLM\n  FlowNode: FlowNode\n  FlowEdge: FlowEdge\n  Prompt: Prompt\n  PromptVariable: PromptVariable\n  Session: Session\n  Schema: Schema\n  SchemaItem: SchemaItem\n  JSONData: JSONData\n  CSVData: CSVData\n  ToolDefinition: ToolDefinition\n  VectorDatabase: VectorDatabase\n  JSONLData: JSONLData\n  FlowNodeData: FlowNodeData\n  FlowNodePlaceholder: FlowNodePlaceholder\n}\n\nexport type EntityArrayTypes = {\n  [K in keyof EntityTypesMap]: EntityTypesMap[K][]\n}[keyof EntityTypesMap]\n\nexport type EntityTypes = {\n  [K in keyof EntityTypesMap]: EntityTypesMap[K]\n}[keyof EntityTypesMap]\n\nexport type AppEntityNames = keyof EntityTypesMap\n\nexport type {\n  Thread,\n  Message,\n  LLM,\n  FlowEdge,\n  FlowNode,\n  Prompt,\n  PromptVariable,\n  Session,\n  Schema,\n  SchemaItem,\n  JSONData,\n  CSVData,\n  ToolDefinition,\n  VectorDatabase,\n  JSONLData,\n  FlowNodeData,\n  FlowNodePlaceholder,\n}\n\nexport const TABLE_NAMES = {\n  Thread: 'threads',\n  Message: 'messages',\n  LLM: 'llms',\n  FlowNode: 'flow_nodes',\n  FlowEdge: 'flow_edges',\n  Prompt: 'prompts',\n  PromptVariable: 'prompt_variables',\n  Session: 'sessions',\n  Schema: 'schemas',\n  SchemaItem: 'schema_items',\n  JSONData: 'json_data',\n  CSVData: 'csv_data',\n  ToolDefinition: 'tool_definitions',\n  VectorDatabase: 'vector_databases',\n  JSONLData: 'jsonl_data',\n  FlowNodeData: 'flow_node_data',\n  FlowNodePlaceholder: 'flow_node_placeholders',\n}\n\nexport * from './flow-node'\nexport * from './llm'\nexport * from './message'\nexport * from './thread'\nexport * from './prompt'\nexport * from './prompt-variable'\nexport * from './session'\nexport * from './schema'\nexport * from './tool-definition'\nexport * from './vector-database'\nexport * from './flow-node-placeholder'\n\nexport const flowNodeTypeToEntity: Record<FlowNodeTypeEnum, AppEntityNames | undefined> = {\n  [FlowNodeTypeEnum.Toolbox]: undefined,\n  [FlowNodeTypeEnum.SessionInfo]: undefined,\n  [FlowNodeTypeEnum.DefaultEmbeddingModel]: undefined,\n  [FlowNodeTypeEnum.ApplicationBar]: undefined,\n  [FlowNodeTypeEnum.Shape]: undefined,\n  [FlowNodeTypeEnum.CircleShape]: undefined,\n  [FlowNodeTypeEnum.TriangleShape]: undefined,\n  [FlowNodeTypeEnum.EditorApp]: undefined,\n  [FlowNodeTypeEnum.CodeContainerApp]: undefined,\n  [FlowNodeTypeEnum.VSLiteApp]: undefined,\n  [FlowNodeTypeEnum.NewMessage]: undefined,\n  [FlowNodeTypeEnum.ToolHandler]: undefined,\n  [FlowNodeTypeEnum.FewShotExample]: undefined,\n  [FlowNodeTypeEnum.JSONData]: 'JSONData',\n  [FlowNodeTypeEnum.LLM]: 'LLM',\n  [FlowNodeTypeEnum.Thread]: 'Thread',\n  [FlowNodeTypeEnum.Message]: 'Message',\n  [FlowNodeTypeEnum.Prompt]: 'Prompt',\n  [FlowNodeTypeEnum.Schema]: 'Schema',\n  [FlowNodeTypeEnum.CSVData]: 'CSVData',\n  [FlowNodeTypeEnum.ToolDefinition]: 'ToolDefinition',\n  [FlowNodeTypeEnum.VectorDatabase]: 'VectorDatabase',\n  [FlowNodeTypeEnum.JSONLData]: 'JSONLData',\n  [FlowNodeTypeEnum.PlaceHolder]: 'FlowNodePlaceholder',\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm'\nimport { Session, Message, LLM } from './index'\nimport { TABLE_NAMES, type ThreadStatusEnum } from '../types'\n\n@Entity({ name: TABLE_NAMES.Thread })\nexport class Thread {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  title: string\n\n  @Column({ type: 'text' })\n  status: `${ThreadStatusEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  userId?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @OneToMany(() => Message, (entity: Message) => entity.thread, { onDelete: 'CASCADE' })\n  messages?: Message[]\n\n  @Column('uuid')\n  initial_llm_id: string\n  @ManyToOne(() => LLM, (entity: LLM) => entity.threads, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'initial_llm_id' })\n  llm?: LLM\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.threads, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  OneToOne,\n} from 'typeorm'\nimport { LLM, Thread, Prompt, Session } from './index'\nimport { TABLE_NAMES, type MessageRoleEnum, type MessageStatusEnum } from '../types'\n\n@Entity({ name: TABLE_NAMES.Message })\nexport class Message {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  content: string\n\n  @Column({ type: 'text' })\n  role: `${MessageRoleEnum}`\n\n  @Column({ type: 'text' })\n  status: `${MessageStatusEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @Column({ type: 'text', nullable: true })\n  output?: string\n\n  @Column({ type: 'boolean', nullable: true })\n  hidden?: boolean\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid', { nullable: true })\n  parent_message_id?: string\n  @OneToOne(() => Message, (entity) => entity.message, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'parent_message_id' })\n  message?: Message\n\n  @Column('uuid')\n  thread_id: string\n  @ManyToOne(() => Thread, (entity) => entity.messages, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'thread_id' })\n  thread?: Thread\n\n  @Column('uuid')\n  llm_id: string\n  @ManyToOne(() => LLM, (entity: LLM) => entity.messages, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'llm_id' })\n  llm?: LLM\n\n  @Column('uuid', { nullable: true })\n  prompt_id?: string\n  @ManyToOne(() => Prompt, (entity: Prompt) => entity.messages, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'prompt_id' })\n  prompt?: Prompt\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.messages, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm'\nimport { Message, Session, Thread } from './index'\nimport {\n  TABLE_NAMES,\n  type LLMModelTypeEnum,\n  type LLMProviderEnum,\n  type LLMStatusEnum,\n} from '../types'\n\n@Entity({ name: TABLE_NAMES.LLM })\nexport class LLM {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  name: string\n\n  @Column({ type: 'text' })\n  status: `${LLMStatusEnum}`\n\n  @Column({ type: 'text' })\n  provider: `${LLMProviderEnum}`\n\n  @Column({ type: 'text' })\n  model_type: `${LLMModelTypeEnum}`\n\n  @Column({ type: 'boolean', nullable: true })\n  function_calling?: boolean\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @Column({ type: 'text', nullable: true })\n  connection_info?: string\n\n  @Column({ type: 'json', nullable: true })\n  parameters?: Record<string, unknown>\n\n  @Column({ type: 'json', nullable: true })\n  options?: Record<string, unknown>\n\n  @Column({ type: 'json', nullable: true })\n  encrypted?: Record<string, unknown>\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @OneToMany(() => Message, (message: Message) => message.thread)\n  messages?: Message[]\n\n  @OneToMany(() => Thread, (thread: Thread) => thread.llm)\n  threads?: Thread[]\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.llms, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\nimport { Session } from './index'\nimport { AppEntityNames, FlowNodeTypeEnum, TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.FlowNode })\nexport class FlowNode {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  node_type: `${FlowNodeTypeEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  source_id: string\n\n  @Column({ type: 'text', nullable: true })\n  source_type: `${AppEntityNames}`\n\n  @Column({ type: 'float' })\n  x?: number\n\n  @Column({ type: 'float' })\n  y?: number\n\n  @Column({ type: 'float', nullable: true })\n  width?: number\n\n  @Column({ type: 'float', nullable: true })\n  height?: number\n\n  @Column({ type: 'json', nullable: true })\n  data?: unknown\n\n  @Column({ type: 'json', nullable: true })\n  metadata?: unknown\n\n  @Column({ type: 'text', nullable: true })\n  raw?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.flow_nodes, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\nimport { Session } from './index'\nimport { TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.FlowEdge })\nexport class FlowEdge {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ nullable: true, type: 'text' })\n  type?: string\n\n  @Column({ type: 'text' })\n  source: string\n\n  @Column({ type: 'text' })\n  target: string\n\n  @Column({ nullable: true, type: 'text' })\n  sourceHandle?: string | null\n\n  @Column({ nullable: true, type: 'text' })\n  targetHandle?: string | null\n\n  @Column({ default: false, type: 'boolean' })\n  animated?: boolean\n\n  @Column({ default: false, type: 'boolean' })\n  hidden?: boolean\n\n  @Column({ default: true, type: 'boolean' })\n  deletable?: boolean\n\n  @Column({ default: true, type: 'boolean' })\n  selectable?: boolean\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.flow_edges, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm'\nimport { Message, PromptVariable, Session } from './index'\nimport { MessageRoleEnum, TABLE_NAMES, type PromptStatusEnum, type PromptTypeEnum } from '../types'\n\n@Entity({ name: TABLE_NAMES.Prompt })\nexport class Prompt {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text', nullable: true })\n  prefix?: string\n\n  @Column({ type: 'text' })\n  content: string\n\n  @Column({ type: 'text', nullable: true })\n  suffix?: string\n\n  @Column({ type: 'text' })\n  type: `${PromptTypeEnum}`\n\n  @Column({ type: 'text' })\n  role: `${MessageRoleEnum}`\n\n  @Column({ type: 'text' })\n  status: `${PromptStatusEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @OneToMany(() => Message, (message: Message) => message.prompt)\n  messages?: Message[]\n\n  @OneToMany(() => PromptVariable, (variable: PromptVariable) => variable.prompt, {\n    onDelete: 'CASCADE',\n  })\n  variables?: PromptVariable[]\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.prompts, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm'\nimport { Message, Prompt, Session } from './index'\nimport { TABLE_NAMES, type AppEntityNames, type PromptVariableTypeEnum } from '../types'\n\n@Entity({ name: TABLE_NAMES.PromptVariable })\nexport class PromptVariable {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  name: string\n\n  @Column({ type: 'text' })\n  type: `${PromptVariableTypeEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  value: string\n\n  @Column({ type: 'text' })\n  map_field: string\n\n  @Column({ type: 'text', nullable: true })\n  map_key: string\n\n  @Column({ type: 'text' })\n  map_id: string\n\n  @Column({ type: 'text' })\n  map_type: `${AppEntityNames}`\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @OneToMany(() => Message, (message: Message) => message.prompt)\n  messages?: Message[]\n\n  @Column('uuid', { nullable: true })\n  prompt_id: string\n  @ManyToOne(() => Prompt, (llm: Prompt) => llm.variables, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'prompt_id' })\n  prompt?: Prompt\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.prompt_variables, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm'\nimport {\n  FlowEdge,\n  FlowNode,\n  LLM,\n  Prompt,\n  Schema,\n  Thread,\n  CSVData,\n  VectorDatabase,\n  JSONData,\n  JSONLData,\n  ToolDefinition,\n  SchemaItem,\n  Message,\n  PromptVariable,\n} from './index'\nimport { AppEntityNames, SessionTypeEnum, TABLE_NAMES, type SessionStatusEnum } from '../types'\n\n@Entity({ name: TABLE_NAMES.Session })\nexport class Session {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  name: string\n\n  @Column({ type: 'text' })\n  status: `${SessionStatusEnum}`\n\n  @Column({ type: 'text', default: SessionTypeEnum.Whiteboard })\n  type: `${SessionTypeEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @Column({ type: 'text', nullable: true })\n  main_source_id?: string\n\n  @Column({ type: 'text', nullable: true })\n  main_source_type?: `${AppEntityNames}`\n\n  @Column({ type: 'text', nullable: true })\n  passphrase?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column({ type: 'uuid', nullable: true })\n  main_node_id?: string\n  @OneToOne(() => FlowNode, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'main_node_id' })\n  main_node?: FlowNode\n\n  @OneToMany(() => Prompt, (entity: Prompt) => entity.session, { onDelete: 'CASCADE' })\n  prompts?: Prompt[]\n\n  @OneToMany(() => PromptVariable, (entity: PromptVariable) => entity.session, {\n    onDelete: 'CASCADE',\n  })\n  prompt_variables?: PromptVariable[]\n\n  @OneToMany(() => Thread, (entity: Thread) => entity.session, { onDelete: 'CASCADE' })\n  threads?: Thread[]\n\n  @OneToMany(() => Message, (entity: Message) => entity.session, {\n    onDelete: 'CASCADE',\n  })\n  messages?: Message[]\n\n  @OneToMany(() => LLM, (entity: LLM) => entity.session, { onDelete: 'CASCADE' })\n  llms?: LLM[]\n\n  @OneToMany(() => FlowNode, (entity: FlowNode) => entity.session, { onDelete: 'CASCADE' })\n  flow_nodes?: FlowNode[]\n\n  @OneToMany(() => FlowEdge, (entity: FlowEdge) => entity.session, { onDelete: 'CASCADE' })\n  flow_edges?: FlowEdge[]\n\n  @OneToMany(() => Schema, (entity: Schema) => entity.session, { onDelete: 'CASCADE' })\n  schemas?: Schema[]\n\n  @OneToMany(() => SchemaItem, (entity: SchemaItem) => entity.session, {\n    onDelete: 'CASCADE',\n  })\n  schema_items?: SchemaItem[]\n\n  @OneToMany(() => CSVData, (entity: CSVData) => entity.session, { onDelete: 'CASCADE' })\n  csv_datas?: CSVData[]\n\n  @OneToMany(() => VectorDatabase, (entity: VectorDatabase) => entity.session, {\n    onDelete: 'CASCADE',\n  })\n  vector_databases?: VectorDatabase[]\n\n  @OneToMany(() => JSONData, (entity: JSONData) => entity.session, { onDelete: 'CASCADE' })\n  json_datas?: JSONData[]\n\n  @OneToMany(() => JSONLData, (entity: JSONLData) => entity.session, { onDelete: 'CASCADE' })\n  jsonl_datas?: JSONLData[]\n\n  @OneToMany(() => ToolDefinition, (entity: ToolDefinition) => entity.session, {\n    onDelete: 'CASCADE',\n  })\n  tool_definitions?: ToolDefinition[]\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm'\n\nimport { SchemaItem, Session } from './index'\nimport { TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.Schema })\nexport class Schema {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  name: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @OneToMany(() => SchemaItem, (entity: SchemaItem) => entity.schema, { onDelete: 'CASCADE' })\n  schema_items?: SchemaItem[]\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.schemas, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm'\n\nimport { Schema, Session } from './index'\nimport { SchemaTypeEnum, TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.SchemaItem })\nexport class SchemaItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  name: string\n\n  @Column({ type: 'text', nullable: true })\n  description: string\n\n  @Column({ type: 'boolean' })\n  required: boolean\n\n  @Column({ type: 'text' })\n  type: `${SchemaTypeEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @Column({ type: 'text', nullable: true })\n  enum?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @OneToMany(() => SchemaItem, (message: SchemaItem) => message.parent)\n  schemas?: SchemaItem[]\n\n  @Column('uuid', { nullable: true })\n  parent_id?: string\n  @ManyToOne(() => SchemaItem, (entity: SchemaItem) => entity.schemas, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'parent_id' })\n  parent?: SchemaItem\n\n  @Column('uuid')\n  schema_id: string\n  @ManyToOne(() => Schema, (entity: Schema) => entity.schema_items, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'schema_id' })\n  schema?: Schema\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.schema_items, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\n\nimport { Session } from './index'\nimport { TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.JSONData })\nexport class JSONData {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  headers: string\n\n  @Column({ type: 'text' })\n  json: string\n\n  @Column({ type: 'json', nullable: true })\n  data?: unknown\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.json_datas, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\n\nimport { Session } from './index'\nimport { TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.CSVData })\nexport class CSVData {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  headers: string\n\n  @Column({ type: 'text' })\n  csv: string\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.csv_datas, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm'\nimport { Session } from './index'\nimport { TABLE_NAMES, type ToolDefinitionTypeEnum } from '../types'\n\n@Entity({ name: TABLE_NAMES.ToolDefinition })\nexport class ToolDefinition {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  name: string\n\n  @Column({ type: 'text' })\n  description: string\n\n  @Column({ type: 'text', nullable: true })\n  type?: `${ToolDefinitionTypeEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.tool_definitions, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\n\nimport { Session } from './index'\nimport {\n  TABLE_NAMES,\n  VectorDatabaseProviderEnum,\n  VectorDatabaseStorageEnum,\n  VectorDatabaseTypeEnum,\n} from '../types'\n\n@Entity({ name: TABLE_NAMES.VectorDatabase })\nexport class VectorDatabase {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  name: string\n\n  @Column({ type: 'text' })\n  type: `${VectorDatabaseTypeEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  provider?: `${VectorDatabaseProviderEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  storage?: `${VectorDatabaseStorageEnum}`\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @Column({ type: 'text', nullable: true })\n  raw?: string\n\n  @Column({ type: 'json', nullable: true })\n  data?: unknown\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.vector_databases, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\n\nimport { Session } from './index'\nimport { TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.JSONLData })\nexport class JSONLData {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text' })\n  headers: string\n\n  @Column({ type: 'text' })\n  jsonl: string\n\n  @Column({ type: 'json', nullable: true })\n  data?: unknown\n\n  @Column({ type: 'text', nullable: true })\n  metadata?: string\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.jsonl_datas, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\nimport { Session } from './index'\nimport { TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.FlowNodeData })\nexport class FlowNodeData {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'json', nullable: true })\n  data?: Record<string, unknown>\n\n  @Column({ type: 'json', nullable: true })\n  metadata?: Record<string, unknown>\n\n  @Column({ type: 'json', nullable: true })\n  properties?: Record<string, unknown>\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.flow_nodes, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm'\nimport { Session } from './index'\nimport { FlowNodePlaceholderTypeEnum, TABLE_NAMES } from '../types'\n\n@Entity({ name: TABLE_NAMES.FlowNodePlaceholder })\nexport class FlowNodePlaceholder {\n  @PrimaryGeneratedColumn('uuid')\n  id: string\n\n  @Column({ type: 'text', nullable: true })\n  placeholder?: string\n\n  @Column({ type: 'text', nullable: true })\n  placeholder_type: `${FlowNodePlaceholderTypeEnum}`\n\n  @Column({ type: 'json', nullable: true })\n  data?: Record<string, unknown>\n\n  @Column({ type: 'json', nullable: true })\n  metadata?: Record<string, unknown>\n\n  @Column({ type: 'json', nullable: true })\n  encrypted?: Record<string, unknown>\n\n  @CreateDateColumn()\n  created_at?: Date\n\n  @UpdateDateColumn()\n  updated_at?: Date\n\n  @Column('uuid')\n  session_id: string\n  @ManyToOne(() => Session, (entity: Session) => entity.flow_nodes, {\n    createForeignKeyConstraints: false,\n  })\n  @JoinColumn({ name: 'session_id' })\n  session?: Session\n}\n","import { Thread } from './thread'\nimport { Message } from './message'\nimport { LLM } from './llm'\nimport { FlowNode } from './flow-node'\nimport { FlowEdge } from './flow-edge'\nimport { Prompt } from './prompt'\nimport { PromptVariable } from './prompt-variable'\nimport { Session } from './session'\nimport { Schema } from './schema'\nimport { SchemaItem } from './schema-item'\nimport { JSONData } from './json-data'\nimport { CSVData } from './csv-data'\nimport { ToolDefinition } from './tool-definition'\nimport { VectorDatabase } from './vector-database'\nimport { JSONLData } from './jsonl-data'\nimport { FlowNodeData } from './flow-node-data'\nimport { FlowNodePlaceholder } from './flow-node-placeholder'\n\nexport {\n  Thread,\n  Message,\n  LLM,\n  FlowNode,\n  FlowEdge,\n  Prompt,\n  PromptVariable,\n  Session,\n  Schema,\n  SchemaItem,\n  JSONData,\n  CSVData,\n  ToolDefinition,\n  VectorDatabase,\n  JSONLData,\n  FlowNodeData,\n  FlowNodePlaceholder,\n}\n\nexport type AppEntites =\n  | typeof Thread\n  | typeof Message\n  | typeof LLM\n  | typeof FlowNode\n  | typeof FlowEdge\n  | typeof Prompt\n  | typeof PromptVariable\n  | typeof Session\n  | typeof Schema\n  | typeof SchemaItem\n  | typeof JSONData\n  | typeof CSVData\n  | typeof ToolDefinition\n  | typeof VectorDatabase\n  | typeof JSONLData\n  | typeof FlowNodeData\n  | typeof FlowNodePlaceholder\n\nexport const entitiesMap: Record<string, AppEntites> = {\n  LLM,\n  Thread,\n  Message,\n  FlowNode,\n  FlowEdge,\n  Prompt,\n  PromptVariable,\n  Session,\n  Schema,\n  SchemaItem,\n  JSONData,\n  CSVData,\n  ToolDefinition,\n  VectorDatabase,\n  JSONLData,\n  FlowNodeData,\n  FlowNodePlaceholder,\n}\n// This file should not be use in main codebase. ONLY WORKER should use this file.\n","import type { FindOperator } from '../typeorm-wrapper'\nimport type {\n  FindManyOptions,\n  FindOneOptions,\n  SaveOptions,\n  UpdateOptions,\n} from '../typeorm-wrapper'\n\nexport type QueryOptions<T> =\n  | T\n  | string\n  | number\n  | FindManyOptions<T>\n  | FindOneOptions<T>\n  | SaveOptions\n  | UpdateOptions\n\nexport const isPlainObject = (value: unknown): value is Record<string, unknown> => {\n  return !!value && typeof value === 'object' && !Array.isArray(value)\n}\n\nexport const isFindOperator = (value: unknown): value is FindOperator<unknown> => {\n  return !!value && typeof value === 'object' && 'type' in value && '@instanceof' in value\n}\n","import {\n  Any,\n  ArrayContainedBy,\n  ArrayContains,\n  ArrayOverlap,\n  Between,\n  Equal,\n  In,\n  IsNull,\n  LessThan,\n  LessThanOrEqual,\n  Like,\n  MoreThan,\n  MoreThanOrEqual,\n  Not,\n  ObjectLiteral,\n  Raw,\n} from 'typeorm'\nimport { isFindOperator, isPlainObject, QueryOptions } from './serialize.base'\n\nexport const reconstructFindOperator = (obj: { value: unknown[] | unknown }) => {\n  if (isPlainObject(obj) && isFindOperator(obj)) {\n    switch (obj.type) {\n      case 'moreThan':\n        return MoreThan(obj.value)\n      case 'lessThan':\n        return LessThan(obj.value)\n      case 'equal':\n        return Equal(obj.value)\n      case 'like':\n        return Like(obj.value)\n      case 'in':\n        return In(obj.value as unknown[])\n      case 'not':\n        return Not(obj.value)\n      case 'isNull':\n        return IsNull()\n      case 'between':\n        return Between((obj.value as unknown[])[0], (obj.value as unknown[])[1])\n      case 'lessThanOrEqual':\n        return LessThanOrEqual(obj.value)\n      case 'moreThanOrEqual':\n        return MoreThanOrEqual(obj.value)\n      case 'any':\n        return Any(obj.value as unknown[])\n      case 'arrayContainedBy':\n        return ArrayContainedBy(obj.value as unknown[])\n      case 'arrayContains':\n        return ArrayContains(obj.value as unknown[])\n      case 'arrayOverlap':\n        return ArrayOverlap(obj.value as unknown[])\n      case 'raw':\n        return Raw(`${obj.value}`)\n      // Add other FindOperator types as needed\n      default:\n        throw new Error(`Unsupported FindOperator type: ${obj.type}`)\n    }\n  }\n  return obj\n}\n\nexport const transformBridgeJSONObjectToQuery = (\n  data?: QueryOptions<ObjectLiteral>,\n): QueryOptions<ObjectLiteral> => {\n  if (data === undefined || data === null || typeof data === 'string' || typeof data === 'number') {\n    return data as QueryOptions<ObjectLiteral>\n  }\n\n  if (typeof data === 'object') {\n    if (Array.isArray(data)) {\n      return data.map((item) =>\n        transformBridgeJSONObjectToQuery(item),\n      ) as QueryOptions<ObjectLiteral>\n    }\n\n    const transformed: Record<string, unknown> = {}\n    Object.keys(data).forEach((key) => {\n      const value = data[key as keyof typeof data]\n\n      if (isFindOperator(value)) {\n        transformed[key] = reconstructFindOperator(value)\n      } else if (value && typeof value === 'object' && value !== null) {\n        transformed[key] = transformBridgeJSONObjectToQuery(value)\n      } else {\n        transformed[key] = value\n      }\n    })\n\n    return transformed as QueryOptions<ObjectLiteral>\n  }\n\n  return data as QueryOptions<ObjectLiteral>\n}\n","export enum WorkerExecutionType {\n  INIT = 'init',\n  REPOSITORY_EXECUTE = 'repository-execute',\n  RAW_QUERY_EXECUTE = 'raw-query-execute',\n}\n","import { DataSource, FindManyOptions, ObjectLiteral } from 'typeorm'\n\nimport { uuid_ossp } from '@electric-sql/pglite/contrib/uuid_ossp'\nimport { DATABASE_LOG_CONFIG } from 'src/constants/dev'\nimport { logDebug, logInfo } from 'src/utils/logger'\nimport { PGliteDriver } from 'src/lib/typeorm-pglite-browser'\nimport { BaseMessagePayload, init, listenForMessages } from 'src/utils/worker-base'\n\nimport { entitiesMap } from '../entities'\nimport { QueryOptions } from '../utils/serialize.base'\nimport { transformBridgeJSONObjectToQuery } from '../utils/serialize.worker'\nimport { AppEntityNames } from '../types'\nimport { WorkerExecutionType } from '../utils/bridge.base'\n\nlet appDataSource: DataSource | undefined\nlet initProcess: Promise<void> | undefined\n\nconst initDatabase = async () => {\n  appDataSource = new DataSource({\n    type: 'postgres',\n    driver: new PGliteDriver({\n      dataDir: 'idb://local-db',\n      extensions: { uuid_ossp },\n    }).driver,\n    entities: Object.values(entitiesMap),\n    logging: [...DATABASE_LOG_CONFIG.logging],\n    synchronize: true,\n    logger: DATABASE_LOG_CONFIG.logger,\n    entitySkipConstructor: true,\n  })\n\n  if (!appDataSource) {\n    throw new Error('Database not initialized')\n  }\n\n  await appDataSource.initialize()\n  initProcess = undefined\n  logDebug('Database initialized with log config:', DATABASE_LOG_CONFIG)\n}\n\nconst getRepositoryAction = async (\n  entity: string,\n  action: string,\n  data: QueryOptions<ObjectLiteral> | QueryOptions<ObjectLiteral[]>,\n) => {\n  if (!appDataSource) {\n    throw new Error('Database not initialized')\n  }\n  if (!entitiesMap[entity]) {\n    throw new Error(`Entity not found: ${entity}`)\n  }\n  switch (action) {\n    case 'find':\n      return appDataSource\n        .getRepository(entitiesMap[entity])\n        .find(transformBridgeJSONObjectToQuery(data) as FindManyOptions)\n    case 'findOne':\n      return appDataSource\n        .getRepository(entitiesMap[entity])\n        .findOne(transformBridgeJSONObjectToQuery(data) as ObjectLiteral)\n    case 'count':\n      return appDataSource\n        .getRepository(entitiesMap[entity])\n        .count(transformBridgeJSONObjectToQuery(data) as FindManyOptions)\n    case 'save':\n      return appDataSource.getRepository(entitiesMap[entity]).save(data as ObjectLiteral)\n    case 'update':\n      if (typeof data !== 'object' || !('id' in data) || !('update' in data)) {\n        throw new Error('Invalid data for update')\n      }\n      return appDataSource\n        .getRepository(entitiesMap[entity])\n        .update(data.id, data.update as ObjectLiteral)\n    case 'delete':\n      if (typeof data !== 'string' && typeof data !== 'number') {\n        throw new Error('Invalid data for delete')\n      }\n      return appDataSource.getRepository(entitiesMap[entity]).delete(data)\n    default:\n      throw new Error(`Unknown action: ${action}`)\n  }\n}\n\ntype DatabasePayload = (\n  | {\n      type: WorkerExecutionType.INIT\n      payload: unknown\n    }\n  | {\n      type: WorkerExecutionType.REPOSITORY_EXECUTE\n      payload: [AppEntityNames, string, QueryOptions<ObjectLiteral> | QueryOptions<ObjectLiteral[]>]\n    }\n  | {\n      type: WorkerExecutionType.RAW_QUERY_EXECUTE\n      payload: Parameters<DataSource['query']>\n    }\n) &\n  BaseMessagePayload\n\nasync function handlePayload(data: DatabasePayload) {\n  const messageId = data.messageId\n  if (!messageId || !Object.keys(data).length) {\n    return\n  }\n  logDebug('Database worker received message:', data, data.type)\n  switch (data.type) {\n    case WorkerExecutionType.INIT: {\n      if (appDataSource || initProcess) {\n        return 'Database already initialized'\n      }\n      initProcess = init()\n      await initProcess\n      initProcess = undefined\n\n      return 'Database initialized'\n    }\n    case WorkerExecutionType.REPOSITORY_EXECUTE: {\n      if (initProcess) {\n        await initProcess\n      }\n      if (!appDataSource) {\n        throw new Error('Database not initialized')\n      }\n      const [entity, action, options] = data.payload\n      return getRepositoryAction(entity, action, options)\n    }\n    case WorkerExecutionType.RAW_QUERY_EXECUTE: {\n      if (initProcess) {\n        await initProcess\n      }\n      if (!appDataSource) {\n        throw new Error('Database not initialized')\n      }\n\n      return appDataSource.query(...data.payload)\n    }\n    default:\n      throw new Error('Invalid operation')\n  }\n}\n\n// Listen for messages from the main thread\nlistenForMessages<DatabasePayload>(handlePayload)\n\nlogInfo('Database worker initialized')\n\ninit(async () => {\n  initProcess = initDatabase()\n})\n"],"names":["Reflect","factory","root","global","sloppyModeThis","exporter","makeExporter","target","previous","key","value","functionThis","indirectEvalThis","hasOwn","supportsSymbol","toPrimitiveSymbol","iteratorSymbol","supportsCreate","supportsProto","downLevel","HashMap","MakeDictionary","map","functionPrototype","_Map","CreateMapPolyfill","_Set","CreateSetPolyfill","_WeakMap","CreateWeakMapPolyfill","registrySymbol","metadataRegistry","GetOrCreateMetadataRegistry","metadataProvider","CreateMetadataProvider","decorate","decorators","propertyKey","attributes","IsUndefined","IsArray","IsConstructor","DecorateConstructor","IsObject","IsNull","ToPropertyKey","DecorateProperty","metadata","metadataKey","metadataValue","decorator","IsPropertyKey","OrdinaryDefineOwnMetadata","defineMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","getMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","getMetadataKeys","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","provider","GetMetadataProvider","i","decorated","descriptor","MetadataKey","O","P","parent","OrdinaryGetPrototypeOf","ToBoolean","MetadataValue","ownKeys","parentKeys","set","keys","_i","ownKeys_1","hasKey","_a","parentKeys_1","Type","x","IsSymbol","ToPrimitive","input","PreferredType","hint","exoticToPrim","GetMethod","result","OrdinaryToPrimitive","valueOf","toString_1","IsCallable","argument","ToString","SameValueZero","y","V","func","GetIterator","obj","method","iterator","IteratorValue","iterResult","IteratorStep","IteratorClose","f","proto","prototype","prototypeProto","constructor","CreateMetadataRegistry","fallback","CreateFallbackProvider","first","second","rest","targetProviderMap","registry","registerProvider","getProvider","setProvider","getProviderNoCache","next","providerMap","hasProvider","existingProvider","targetMetadata","OrdinaryDeleteMetadata","GetOrCreateMetadataMap","Create","createdTargetMetadata","metadataMap","keysObj","k","nextValue","e","reflect","metadataOwner","metadataPropertySet","registeredProvider","cacheSentinel","arraySentinel","MapIterator","values","selector","index","error","Map","size","getKey","getValue","getEntry","insert","_","Set","UUID_SIZE","rootKey","CreateUniqueKey","WeakMap","table","GetOrCreateWeakMapTable","CreateUUID","create","FillRandomBytes","buffer","GenRandomBytes","array","data","offset","byte","entity","tree","getPrototypeOf","object","target1","target2","classes","item","propertyName","generated","unique","check","exclusion","joinTable","joinColumn","transactionEm","inheritance","discriminatorValue","newArray","newItem","existingIndex","clone","b64","len","validLen","placeHoldersLen","lens","tmp","arr","curByte","num","uint8","start","end","output","extraBytes","parts","maxChunkLength","len2","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","s","c","rt","exports","base64","ieee754$1","customInspectSymbol","Buffer","SlowBuffer","K_MAX_LENGTH","GlobalUint8Array","GlobalArrayBuffer","GlobalSharedArrayBuffer","typedArraySupport","createBuffer","length","buf","arg","encodingOrOffset","allocUnsafe","from","fromString","fromArrayView","isInstance","fromArrayBuffer","b","fromObject","assertSize","alloc","fill","encoding","checked","string","byteLength","actual","fromArrayLike","arrayView","copy","byteOffset","numberIsNaN","a","list","pos","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","str","max","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","indexSize","arrLength","valLength","read","foundIndex","found","j","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","ret","out","hexSliceLookupTable","bytes","newBuf","checkOffset","ext","noAssert","mul","defineBigIntMethod","validateNumber","last","boundsError","lo","hi","checkInt","min","maxBytes","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","limit","sub","checkIEEE754","writeFloat","littleEndian","writeDouble","targetStart","code","errors","E","sym","getMessage","Base","name","range","msg","received","addNumericalSeparator","checkBounds","type","INVALID_BASE64_RE","base64clean","units","leadSurrogate","byteArray","src","dst","alphabet","i16","fn","BufferBigIntNotDefined","pathStr","filename","path","sql","json","prefix","info","warning","message","sources","source","prop","subject","connectionName","dbType","id","objectExample","column","operation","driver","repository","entityClass","criteria","wrongValue","expectedVersion","actualVersion","entityName","entityMetadata","propertyPath","driverType","availableDrivers","driverName","packageName","optionName","notFoundRelations","relation","dataType","database","query","parameters","driverError","otherProperties","migrationsOverridingTransactionMode","migrationNames","migration","alias","aliasName","inherits_browserModule","ctor","superCtor","TempCtor","base64Js","toByteArray","fromByteArray","lookup","revLookup","Arr","getLens","_byteLength","tripletToBase64","encodeChunk","ieee754","require$$0","copyProps","module","SafeBuffer","Hash","blockSize","finalSize","enc","block","accum","assigned","remainder","rem","bits","lowBits","highBits","hash","inherits","require$$1","require$$2","K","W","Sha","rotl5","rotl30","ft","M","t","H","Sha1","rotl1","Sha256","ch","z","maj","sigma0","sigma1","gamma0","gamma1","g","h","T1","T2","require$$3","Sha224","Sha512","Ch","xl","Gamma0","Gamma0l","Gamma1","Gamma1l","getCarry","ah","bh","dh","eh","fh","gh","hh","al","bl","cl","dl","el","fl","gl","hl","xh","gamma0l","gamma1l","Wi7h","Wi7l","Wi16h","Wi16l","Wil","Wih","majh","majl","sigma0h","sigma0l","sigma1h","sigma1l","Kih","Kil","chh","chl","t1l","t1h","t2l","t2h","writeInt64BE","l","SHA512","Sha384","sha_jsModule","algorithm","Algorithm","require$$4","require$$5","firstCapital","match","p1","p2","txt","options","segmentLength","separator","termLength","acc","segmentTerms","shortSegment","term","hashFunction","hashedInput","version","targetVersion","v1","v2","v","buildOptions","urlDriverOptions","maxAliasLength","joiner","newAlias","shortenedAlias","url","firstSlashes","preBase","secondSlash","base","afterBase","lastAtSign","usernameAndPassword","hostAndPort","username","password","firstColon","host","port","afterQuestionMark","hostReplicaSet","replicaSet","optionsObject","optionsList","optionKey","optionValue","optionItem","connectionUrl","connection","queryExpressionMap","joinAttribute","select","relationOwnerSelection","aliasProperty","relationIdAttribute","parentAlias","relationProperty","expressionMap","relationCountAttribute","entityOrderBy","orderBy","aliasExpression","relationMetadata","join","relationId","relationCount","where","having","groupBy","cteOptions","whereFactory","transformer","databaseValue","transformedValue","_transformer","entityValue","useParameter","multipleParameters","getSql","objectLiteralParameters","In","connectionOrQueryBuilder","queryRunner","selection","selectionAliasName","entityOrTableNameUpdateSet","maybeUpdateSet","updateSet","mainAlias","entityTargetOrPropertyPath","maybePropertyPath","entityTarget","parameterName","childMetadata","comment","enabled","queryBuilder","tablePath","isSubquery","subQueryBuilder","subquery","statement","replacements","replaceAliasNamePrefix","allColumns","replacementKeys","replaceAliasNamePrefixes","matches","pre","p","conditionsArray","whereExpression","condition","returningType","columns","columnsExpression","columnName","clauses","clause","expression","alwaysWrap","databaseRequireRecusiveHint","cte","cteBodyExpression","cteHeader","escapedColumnNames","recursiveClause","materializeClause","ids","normalized","primaryColumn","qb","subQuery","propertyPathParts","part","joinAttr","fullRelationPath","aliasPropertyPath","paths","subPaths","joinColumns","primaryColumns","propertyPaths","containedWhere","aliasPath","parameterValue","operator","whereQueryBuilder","wheres","conditions","queryResult","transactionStartedByUs","deleteResult","returning","tableName","returningExpression","rnds","updateResult","entities","entityIndex","newRaw","rawItem","rawItemIndex","returningColumns","updationColumns","entityId","loadedReturningColumns","insertResult","insertionColumns","needToCheckGenerated","generatedMaps","generatedMap","entityIds","returningResult","valueSets","broadcastResult","valueSet","declareSql","selectOutputSql","returningResultsEntityUpdator","columnPath","insertSql","statementOrOverwrite","conflictTarget","orUpdateOptions","valuesExpression","overwrite","conflict","skipUpdateIfNoValuesChanged","indexPredicate","updatePart","valueSetIndex","columnIndex","uuidv4","paramName","geomFromText","insertionIndex","relationValue","ofs","of","ofIndex","junctionMetadata","firstColumnValues","secondColumnValues","bulkInserted","firstColumnVal","secondColumnVal","inserted","valueIndex","firstColumnValIndex","secondColumnValIndex","added","removed","results","classesAndStrings","cls","propertyCallback","groupedArray","grouped","criteriaOrProperty","uniqueArray","itemValue","uniqueItem","memo","args","leftChain","rightChain","segments","props","recursiveChild","firstId","secondId","arr1","arr2","element","lists","otherLists","otherList","enumMatch","chars","currentQuotes","enumValues","idx","char","rawRelationIdResults","rawRelationCountResults","rawResults","group","rawResult","keyValue","items","discriminatorValues","discriminatorMetadata","childEntityMetadata","hasColumns","hasRelations","hasRelationIds","hasRelationCounts","hasData","rawSqlResults","rawRelationIdResult","valueMap","idMaps","properties","mapToProperty","property","rawRelationCountResult","referenceColumnName","referenceColumnValue","rawSqlResult","relationIdRawResult","agg","idMap","entityPrimaryIds","relationIdAttributes","rawEntities","promises","relationIdAttr","duplicates","rawEntity","duplicateParts","duplicatePart","duplicate","tableAlias","parameterParts","queryPart","inverseJoinColumns","junctionAlias","inverseSideTableName","inverseSideTableAlias","junctionTableName","mappedColumns","joinColumnConditions","mappedColumn","inverseJoinColumnCondition","entityOrEntities","relatedEntityOrRelatedEntities","relatedEntities","entitiesOrEntities","relatedEntityOrEntities","isMany","relationIds","inverseColumns","entityRelationIds","relatedEntity","condition1","condition2","hasAllJoinColumnsInEntity","relationIdMaps","relationIdMap","entityColumnValue","relatedEntityColumnValue","joinColumnName","primaryColumnName","joinColumnIndex","attribute","parentAliasName","relationCountAttributes","onlyUnique","self","relationCountAttr","inverseRelation","inverseSideTable","inverseSidePropertyName","referenceColumnValues","joinTableColumnName","inverseJoinColumnName","firstJunctionColumn","secondJunctionColumn","vals","possibleOptions","allRelations","matchedBaseRelations","regexp","relationAlias","relationName","relMetadata","addJoin","joinAlreadyAdded","addSelect","findOptions","milliseconds","distinct","distinctOn","entityOrProperty","mapAsEntity","aliasNameOrOptions","queryBuilderFactory","timeTravelFn","sort","order","nulls","take","skip","lockMode","lockVersion","lockTables","onLocked","entitiesAndRaw","cacheId","count","releaseFn","enabledOrMillisecondsOrId","maybeMilliseconds","option","direction","isMappingMany","joinAttributeMetadata","conditionDeleteColumn","isSubQuery","allSelects","excludedSelects","excludedSelect","useIndex","froms","selectDistinct","selectDistinctOn","maxExecutionTime","on","destinationTableName","destinationTableAlias","appendedCondition","destinationJoin","junctionCondition","destinationCondition","orderBys","orderValue","criteriaParts","orderAlias","lockTablesClause","onLockExpression","hasMainAlias","nonSelectedPrimaryColumns","finalSelects","escapedAliasName","selectionPath","selections","mainSelect","distinctAlias","countSql","relations","tableNames","relationIdLoader","RelationIdLoader","relationCountLoader","selects","mainAliasName","querySelects","columnAlias","originalQuery","originalQueryTimeTravel","paramKey","paramKeyResult","queryStrategyRelationIdLoader","QueryStrategyRelationIdLoader","relationTarget","relatedEntityGroups","relatedEntityGroup","selectString","orderCriteria","orderByObject","queryId","cacheOptions","savedQueryResultCacheOptions","isCachingEnabled","cacheError","embedPrefix","embed","joinAlias","eagerRelation","eagerRelationJoinAlias","whereItem","andConditions","sqlOperator","entityIdMap","updateColumnAndValues","updateSql","statements","valuesSet","valuesSetNormalized","updatedColumns","_rotLeft","_cvtHex","blockstart","H0","H1","H2","H3","H4","A","B","C","D","temp","wordArray","tableOrName","targetName","userSpecifiedName","originalClosureTableName","customName","embeddedPrefixes","columnNames","clonedColumnNames","_referencedTablePath","_referencedColumnNames","isEnum","referencedColumnName","firstTableName","secondTableName","firstPropertyName","secondPropertyName","indexMetadata","columnMetadata","uniqueMetadata","checkMetadata","exclusionMetadata","foreignKey","constraint","foundColumn","uniqueConstraint","uniqueColumn","removedUnique","foundUnique","checkConstraint","removedCheck","foundCheck","exclusionConstraint","removedExclusion","foundExclusion","removedForeignKey","fk","isMysql","tableIndex","ind","schema","timestamp","instance","transaction","params","schemaBuilder","allMigrations","executedMigrations","executedMigration","q","hasUnappliedMigrations","lastTimeExecutedMigration","successMigrations","pendingMigrations","txModeDefault","instanceTx","err","migrationToRevert","migrationRaw","migrations","migrationClassName","migrationTimestamp","migrationName","sortedMigrations","callback","edges","leavesOnly","currentPath","visited","DFS","currentNode","node","edgeList","to","CycleDFS","entityMetadatas","allEntityMetadatas","columnMetadatas","sameDiscriminatorValueEntityMetadata","normalizedColumn","virtualColumn","entityInstance","relationInitializedValue","graph","manager","referencedColumn","parentId","relationMaps","childProperty","parentEntityId","childRelationMaps","relationMap","childIds","childEntity","parentProperty","parentRelationMap","parentEntity","plainEntityLikeOrPlainEntityLikes","mergeIntoEntity","entityLikes","entityLike","partialEntity","conflictPathsOrOptions","customs","thisRepo","ChildClass","custom","roots","escapeAlias","escapeColumn","parentPropertyName","closureTableAlias","escape","joinCondition","whereCondition","newEntity","getLazyRelationsPromiseValue","objectColumnValue","entityRelatedValue","objectRelatedValue","objectRelatedValueItem","objectRelatedValueEntity","entityRelatedValueItem","inverseEntityMetadata","plainEntity","parentLoadMapItem","newLoadMap","loadMapItem","groups","plainObject","loadMap","fillLoadMap","targetWithIds","customRepository","entityRepositoryMetadataArgs","subjects","sortedSubjects","junctionSubjects","nonNullableDependencies","sortedNonNullableEntityTargets","sortedEntityTarget","entityTargetSubjects","otherDependencies","sortedOtherEntityTargets","metadatas","dependencies","uniqueNodes","edge","nodes","cursor","sorted","visit","predecessors","outgoing","preds","child","this","r","u","o","$","S","w","mixedDate","toUtc","useMilliseconds","date","skipSeconds","hours","minutes","seconds","finalValue","totalLength","changeMap","shouldTransformDatabaseEntity","normalizedValue","allSubjects","relatedEntityRelationIdMap","databaseRelatedEntityRelationIdMap","valueSubject","leftColumnName","rightColumnName","parentNsRight","oldParent","oldParentId","entityNs","parentNs","isMovingUp","treeSize","entitySize","updateLeftSide","updateRightSide","entitiesIds","entitiesNs","entry","parameter","countAlias","closureJunctionInsertMap","queryParams","ancestorColumnNames","descendantColumnNames","childEntityIds1","closureTable","createSubQuery","subAlias","subSelect","superAlias","entityWhereCondition","parentWhereCondition","identifiers","generateWheres","identifier","ancestorWhere","descendantWhere","pojo","firstEntity","secondEntity","firstEntityIdMap","secondEntityIdMap","databaseName","embedded","relationsAndValues","subValue","manuallySetDiscriminatorValue","meta","parentPath","firstIdMaps","secondIdMaps","firstIdMap","secondIdMap","namingStrategy","entityPrefix","entitySkipConstructor","insertedEntityId","newParent","newParentId","newParentPath","oldParentPath","entityPath","broadcasterResult","groupedInsertSubjects","groupedInsertSubjectKeys","groupName","bulkInsertMaps","bulkInsertSubjects","singleInsertSubjects","preparedValue","updateSubject","updateMap","updateQueryBuilder","updateGeneratedMap","nestedSetSubjects","remainingSubjects","nestedSetPromise","ok","fail","groupedRemoveSubjects","groupedRemoveSubjectKeys","deleteMaps","softDeleteQueryBuilder","updatedRelationMap","hasReturningDependColumns","groupingAllowed","change","changeMapsWithoutValues","changeSet","relatedEntityDatabaseRelationIds","relatedEntityDatabaseRelation","relatedPersistedEntityRelationIds","relatedEntitySubject","relatedDatabaseEntityRelationId","removedRelatedEntityRelationId","removedRelatedEntitySubject","relatedEntityDatabaseRelationId","operateSubject","junctionSubject","databaseRelatedEntityIds","databaseRelatedEntityValue","databaseRelatedEntityRelationId","ownerValue","inverseValue","changedInverseEntityRelationIds","existRelationId","changedRelationId","removedEntityRelationId","ownerEntityMap","inverseEntityMap","operationType","subjectGroup","allIds","loadRelationPropertyPaths","operatedEntity","relationEntity","relationEntityMetadata","alreadyExistRelationEntitySubject","relationEntitySubject","mode","oldQueryRunnerData","entitiesInChunks","executorsWithExecutableOperations","cascadesSubjectBuilder","executor","isTransactionStartedByUs","isolationOrRunInTransaction","runInTransactionParam","isolation","runInTransaction","targetOrEntity","maybeEntity","plainObjectOrObjects","plainEntityLike","transformedEntity","maybeEntityOrOptions","maybeOptions","conflictColumns","overwriteColumns","col","fnName","repoFromMap","newRepository","repositoryConstructor","otherRepositoryProperties","entityRepositoryInstance","fileNameOrLocalStorageOrData","fileNameOrLocalStorage","viewIndex","metadataA","metadataB","isUsingTransactions","tablePaths","viewPaths","tableForeignKeysToDrop","tableForeignKey","metadataFK","metadataForeignKey","dbForeignKey","renamedMetadataColumns","tableColumn","renamedTableColumns","renamedColumn","dropQueries","postgresQueryRunner","view","oldChecks","tableCheck","compositeUniques","tableUnique","oldExclusions","tableExclusion","newComment","viewExpression","metadataExpression","droppedViews","viewEntityToSyncMetadatas","viewToMetadata","viewMetadata","viewDependencyChain","viewWithDependencies","currentView","currentMetadata","droppedViewsWithDependencies","all","segment","droppedTableColumns","newColumnMetadatas","newTableColumns","primaryMetadataColumns","changedPrimaryColumns","primaryMetadataColumn","changedColumns","changedColumn","newAndOldTableColumns","oldTableColumn","newTableColumnOptions","newTableColumn","newIndices","newChecks","newExclusions","newKeys","dbForeignKeys","foreignKeyMetadata","tablesWithFK","columnForeignKey","clonedTable","loadedTable","dependForeignKeys","dependForeignKey","tableWithFK","relatedIndices","relatedUniques","typeormMetadataTable","isPrimary","handle","attachHandle","nativeParameters","escapedParameters","full","isArray","driverDatabase","driverSchema","defaultValue","uq","entityNum","generatedColumn","tableColumns","viewPath","viewName","foundViews","foundTables","foundTablePath","cachedTable","changedTable","oldTablePath","foundTable","cachedPath","selectQb","deleteQb","oldColumn","newColumn","checkDefault","checkComment","checkEnum","precision","scale","upQueries","downQueries","MetadataTableType","isolationLevel","onEnd","onError","ifNotExist","ifExist","schemaPath","createForeignKeys","createIndices","generatedColumns","insertQuery","deleteQuery","dropForeignKeys","dropIndices","syncWithMetadata","oldTableOrName","newTableName","oldTable","newTable","up","down","oldUniqueName","oldForeignKeyName","oldIndexName","oldTableColumnOrName","newTableColumnOrName","changedColumnSet","uniqueName","foreignKeyName","indexName","originalColumn","columnOrName","columnInstance","uniqueConstraints","uniqueOrName","checkConstraints","checkOrName","exclusionConstraints","exclusionOrName","foreignKeys","foreignKeyOrName","indices","indexOrName","dbPath","isAnotherTransactionActive","selectViewDropsQuery","dropViewQueries","selectTableDropsQuery","dropTableQueries","viewNames","viewNamesString","dbView","tableOrIndex","pragma","dbTables","dbIndicesDef","tableNamesWithoutDot","tableNamesWithDot","queryPromises","tableNamesString","dbTable","withoutRowid","dbColumns","dbIndices","autoIncrementColumnName","tableSql","autoIncrementIndex","comma","bracket","dbColumn","asExpressionQuery","fullType","re","fkResult","fkMappings","fkRegex","tableForeignKeyConstraints","ownForeignKeys","referencedColumnNames","fkMapping","it","uniqueRegexResult","uniqueMappings","uniqueRegex","tableUniquePromises","dbIndex","dbIndexName","indexColumns","indexInfo1","indexInfo2","indexInfo","indexColumn","foundMapping","mapping","indicesPromises","indexDef","dbIndexDef","dbIndexPath","isUnique","temporaryTable","hasAutoIncrement","skipPrimary","columnDefinitions","databaseNew","uniquesSql","checksSql","foreignKeysSql","referencedDatabase","referencedTable","viewOrPath","migrateData","tableNameNew","tableNameOld","newColumnNames","oldColumnNames","revertInsertQuery","revertDeleteQuery","disableEscape","event","broadcastFunction","listener","executionResult","subscriber","databaseEntity","updatedRelations","success","executionTime","fittingSubscribers","nonPromiseEntities","useStructuredResult","databaseConnection","queryStartTime","raw","maxQueryExecutionTime","queryExecutionTime","resultSet","objectLiteral","startIndex","resolve","db","sqlite","records","isInsertQuery","handler","command","checkIfFileOrLocalStorageExists","localStorageContent","location","content","databaseArray","release","onErrorCallback","QueryStream","stream","parsedTableName","isCascade","enumColumns","createdEnumTypes","hasEnum","enumName","tableNameWithSchema","schemaName","oldTableName","oldPkName","newPkName","sequencePath","sequenceName","newSequencePath","newSequenceName","newUniqueName","newIndexName","newForeignKeyName","oldEnumType","pkName","defaultValueChanged","arraySuffix","newEnumName","oldEnumName","oldEnumNameWithoutSchema","oldEnumNameWithSchema_old","oldEnumNameWithoutSchema_old","upType","downType","columnCheck","columnUnique","enumType","escapedEnumName","constraintName","columnNamesString","viewOrName","schemas","schemaNamesString","selectMatViewDropsQuery","dropMatViewQueries","currentDatabase","currentSchema","viewsCondition","indicesSql","dbViews","tableIndexConstraints","tablesSql","columnsSql","table_schema","table_name","constraintsCondition","constraintsSql","foreignKeysCondition","isPartitionCondition","dbConstraints","getSchemaFromKey","dbObject","columnConstraints","dbConstraint","numericPrecision","numericScale","numericSize","primaryConstraint","isConstraintComposite","serialDefaultName","serialDefaultPath","defaultWithoutQuotes","tableUniqueConstraints","uniques","dbC","tableCheckConstraints","checks","tableExclusionConstraints","dbFk","referencedTableName","exclusionsSql","primaryKeyName","tableOrPath","materializedClause","schemaNames","selectDropsQuery","concurrent","checkName","exclusionName","seqName","withSchema","toOld","udtName","generatedIdentityOrDefault","slave","extensionsMetadata","versionString","logger","hasUuidColumns","hasCitextColumns","hasHstoreColumns","hasCubeColumns","hasGeometryColumns","hasLtreeColumns","hasExclusionConstraints","quoteString","cube","unescapeString","nullValue","stringValue","unparsedArrayString","parameterIndexMap","tableColumnDefault","random","postgres","credentials","connectionOptions","pool","poolErrorHandler","upperCaseValue","tsx","client","indexType","skipColumnLevelPrimary","nonGeneratedColumn","uniqueIndex","oldColumnOrName","newOrExistGeneratedColumn","changedGeneratedColumn","dbName","disableForeignKeysCheckQuery","dropTablesQuery","enableForeignKeysCheckQuery","columnsCondition","TABLE_NAME","TABLE_SCHEMA","primaryKeySql","collationsSql","dbPrimaryKeys","dbCollations","dbCollation","coll","defaultCollation","defaultCharset","columnUniqueIndices","tableMetadata","hasIgnoredIndex","width","dbPrimaryKey","colType","nonUnique","isUniqueIndexExist","isUniqueConstraintExist","skipName","defaultWidthForType","needsAdjustment","dbConnection","columnMetadataLength","DataApiDriver","columnMetadataValue","pg","databaseMode","isDatabaseEncryted","databaseVersion","session","isSelect","request","dropIndexQueries","dropFKQueries","loadedTableNames","dbChecks","tableForeignKeys","tableIndices","tableChecks","dbCheck","emptySpaceBefore","emptySpaceAfter","lib","directories","formats","someClass","useDatabaseName","propertyNames","extractEmbeddedColumnValue","isEmbeddedArray","submap","transform","embeddedObject","embeddedMetadatas","embeddedMetadata","valueToCompareWith","columnValue","columnPropertyPaths","columnsFnResult","columnWithSameName","relationWithSameName","updatedMap","referencedColumns","junctionEntityMetadata","ownerEntityPropertiesMap","prefixes","inverseEntity","inverseReferencedColumns","joinTableName","junctionColumns","joinColumnArgs","inverseJunctionColumns","inverseReferencedColumn","hasAnyReferencedColumnName","hasInverseJoinColumns","hasAnyInverseReferencedColumnName","junctionColumn","inverseJunctionColumn","junctionColumnName","inverseJunctionColumnName","parentClosureEntityMetadata","manyToOneWithoutJoinColumn","hasJoinColumnWithoutAnyReferencedColumnName","joinColumnMetadataArg","relationalColumn","metadataArgsStorage","entityClasses","tableArgs","closureJunctionEntityMetadata","inheritanceTree","tableInheritance","tableTree","singleTableChildrenTargets","allEntityMetadata","entityInheritance","childArgs","otherEntityMetadata","discriminatorColumnName","discriminatorColumn","left","right","parentRelation","embeddedArgs","targets","subEmbedded","listeners","foundRelation","givenColumnNames","field","entitySchema","regularColumn","columnArgs","generationArgs","relationSchema","joinColumnsOptions","joinColumnOption","relationIdName","relationIdOptions","indexArgs","uniqueArgs","checkArgs","exclusionArgs","embeddedOptions","embeddedSchema","migrationClasses","migrationDirectories","migrationClass","subscribers","subscriberClasses","subscriberDirectories","allSubscriberClasses","entityClassesOrSchemas","entityDirectories","entitySchemas","allEntityClasses","decoratorEntityMetadatas","metadataArgsStorageFromSchema","schemaEntityMetadatas","time","level","logMessage","messages","browser","fun","marker","timeout","browserExports","parse","fmtLong","fmtShort","ms","msAbs","plural","isPlural","setup","env","createDebug","coerce","disable","enable","destroy","selectColor","namespace","prevTime","enableOverride","namespacesCache","enabledCache","debug","curr","format","formatter","extend","delimiter","newDebug","namespaces","split","toNamespace","formatArgs","save","load","useColors","localstorage","warned","lastC","process","define_process_env_default","formatters","messageTypeOrLevel","clientType","savedCache","cacheTableName","duration","shouldCreateQueryRunner","insertedValues","_queryRunner","cache","joinAliasName","inverseJoinColumnConditions","inverseJoinColumn","relationLoader","dataIndex","promiseIndex","resolveIndex","setData","setPromise","loader","dropBeforeSync","databases","migrationExecutor","usedQueryRunner","entityOrRunner","relationPropertyPath","metadataFromMap","connectionMetadataBuilder","entityMetadataValidator","flattenedSubscribers","flattenedEntities","flattenedMigrations","globalScope","typeOrOptions","reflectMetadataType","strategyOrOptions","strategy","optionsOrOptionsArray","typeFunctionOrTarget","inverseSideOrOptions","inverseSideProperty","isLazy","reflectedType","inverseSide","nameOrOptions","valueOrSqlGenerator","sqlGeneratorParameters","L","R","red","green","blue","styles","codes","styleName","style","hex","colorString","character","integer","brand","substring","replacer","substringLength","endIndex","returnValue","postfix","gotCR","colorLevel","chalk","strings","builder","model","arguments_","styler","bgModel","open","close","openAll","closeAll","_styler","_isEmpty","lfIndex","has","Events","EE","context","once","addListener","emitter","evt","clearEvent","EventEmitter","names","events","handlers","ee","a1","a2","a3","a4","a5","oe","ge","we","Ae","G","De","Be","be","xe","bt","F","ae","X","te","Z","Y","Ie","Ee","he","N","ce","ue","Oe","T","ye","Q","$r","dr","mr","U","fr","yr","gr","hr","Qr","Sr","I","Fr","br","ne","rr","Tr","J","Ar","Er","Pr","wr","tr","xr","vr","Nr","Ur","kr","zr","Or","Cr","Dr","Mr","se","ir","Ir","_r","Lr","Rr","pr","reject","createRequire","dirname","isPthread","isWasmWorker","loadPackage","PACKAGE_NAME","REMOTE_PACKAGE_BASE","REMOTE_PACKAGE_NAME","REMOTE_PACKAGE_SIZE","fetchRemotePackage","packageSize","errback","contents","cause","response","reader","iterate","handleChunk","chunks","headers","total","loaded","done","packageData","chunk","totalLoaded","totalSize","download","handleError","fetchedCallback","fetched","runWithFS","Module","assert","DataRequest","audio","that","files","processPackageData","arrayBuffer","status","toThrow","binary","xhr","text","cb","what","file","binaryFile","imports","receiver","reason","receiveInstance","receiveInstantiationResult","$0","onCustomMessage","symName","rtn","callbacks","heapOrArray","maxBytesToRead","endIdx","endPtr","u0","u1","u2","getU8","getLEB","getString","failIf","dylinkSection","int32View","magicNumberFound","section_size","customSection","neededDynlibsCount","libname","WASM_DYLINK_MEM_INFO","WASM_DYLINK_NEEDED","WASM_DYLINK_EXPORT_INFO","WASM_DYLINK_IMPORT_INFO","WASM_SYMBOL_TLS","WASM_SYMBOL_BINDING_MASK","WASM_SYMBOL_BINDING_WEAK","subsectionType","subsectionSize","symname","flags","ptr","syms","dso","alignment","sig","typeNames","sigRet","sigParam","typeCodes","typeSectionBody","wrappedFunc","funcPtr","wrapped","replace","memoryBase","relocated","existing","sp","direct","resolved","stubs","chain","dynNeeded","needed","libName","exp","setImport","main_alias","onload","onerror","noRunDep","dep","wasmPlugin","localScope","loadLibData","dataSize","libData","libFile","getExports","preloaded","moduleLoaded","line","fp","splitPathRe","allowAboveRoot","isAbsolute","trailingSlash","lastSlash","crypto_module","randomFillSync","randomBytes","resolvedPath","resolvedAbsolute","trim","fromParts","toParts","samePartsLength","outputParts","heap","outIdx","maxBytesToWrite","startIdx","stringy","dontAddNull","u8array","numBytesWritten","BUFSIZE","bytesRead","fd","dev","ops","tty","optional_actions","address","mount","newCapacity","prevCapacity","CAPACITY_DOUBLING_MAX","oldContents","newSize","attr","old_node","new_dir","new_name","new_node","entries","newname","oldpath","position","canOwn","whence","prot","allocated","mmapFlags","fileData","canRead","canWrite","fullname","finish","handled","plugin","dontCreateFile","preFinish","processData","flagModes","onPersistComplete","startPersist","mnt","memfs_node_ops","populate","local","remote","req","fileStore","isRealDir","toAbsolute","stat","store","e2","remove","errored","newFlags","oldNode","newDir","newName","oldPath","newPath","errno","rdev","opts","defaults","current","current_path","islast","link","parentid","errCode","nodeName","flag","perms","isdir","origStream","device","ma","mi","mounts","completed","doCallback","mountpoint","pseudo","mountRoot","dirs","newpath","old_path","new_path","old_dirname","new_dirname","old_name","old_dir","relative","dontFollow","uid","gid","atime","mtime","created","seeking","bytesWritten","cmd","actualNumBytes","randomBuffer","randomLeft","randomByte","proc_self","dontResolveLastLink","LazyUint8Array","chunkOffset","chunkNum","getter","datalength","header","hasByteServing","usesGzip","chunkSize","doXHR","lazyArray","stream_ops","writeChunks","dirfd","allowEmpty","dirstream","ctime","addr","nfds","readfds","writefds","exceptfds","srcReadLow","srcReadHigh","srcWriteLow","srcWriteHigh","srcExceptLow","srcExceptHigh","dstReadLow","dstReadHigh","dstWriteLow","dstWriteHigh","dstExceptLow","dstExceptHigh","allLow","allHigh","low","high","mask","timeoutInMillis","tv_sec","tv_usec","param","family","protocol","streaming","sock","varargs","ws","runtimeConfig","subProtocols","WebSocketConstructor","peer","handleOpen","queued","handleMessage","encoder","wasfirst","newport","isBinary","dest","peers","backlog","WebSocketServer","newsock","listensock","queuedLength","queuedOffset","queuedBuffer","bytesRemaining","socket","ints","word","longest","lastzero","zstart","hasipv4","v4part","sa","salen","words","valid6regx","addrp","addrlen","d1","d2","d3","old","newfd","amode","advice","newStream","outPtr","cwd","cwdLengthInBytes","dirp","struct_size","off","optname","optval","optlen","op","termios","argp","c_iflag","c_oflag","c_cflag","c_lflag","c_cc","winsize","nofollow","pipe","rName","wName","rNode","wNode","readableStream","writableStream","bucket","currentLength","toRead","totalRead","toRemove","currBucket","bucketSize","tmpSlice","dataLen","freeBytesInCurrBuffer","numBuckets","remElements","newBucket","fdPtr","fds","nonzero","pollfd","bufsize","endChar","olddirfd","newdirfd","addr_len","domain","linkpath","sz","cmsg","jsflags","combinedFlags","symbol","symbolIndex","newSymIndex","cmdstr","cp","_W_EXITCODE","signalToNumber","tmPtr","yday","year","leap","monthDaysCumulative","summerOffset","winterOffset","implicit","which","timeout_ms","timezone","daylight","std_name","dst_name","currentYear","winter","summer","stdTimezoneOffset","extractZone","timezoneOffset","sign","absOffset","winterName","summerName","sigPtr","wide","argbuf","pages","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","replacement","timeUntilNextTick","setImmediates","emscriptenMainLoopMessageId","MainLoop_setImmediate_messageHandler","timingMode","timingValue","expected","post","now","delay","RAF","iterFunc","fps","simulateInfiniteLoop","noSetTiming","thisMainLoopId","checkIsRunning","blocker","lang","__environ","environ_buf","bufSize","penviron_count","penviron_buf_size","pbuf","rightsBase","rightsInheriting","iov","iovcnt","pnum","newOffset","service","ai","allocaddrinfo","canon","nodelen","serv","servlen","overflowed","numBytesWrittenExclNull","ident","returnType","argTypes","toC","convertReturnValue","cArgs","stack","converter","onDone","numericArgs","numericRet","a0","a6","a7","a8","a9","a10","a11","a12","a13","a14","a15","a16","runCaller","entryFunction","argc","argv","argv_ptr","doRun","Pe","Se","Ne","le","de","fe","pe","ie","me","PGlite","sqlQuery","queryParameters","pgliteInstance","errorCallback","payload","responseData","FlowNodeTypeEnum","SessionTypeEnum","__decorateClass","thread","variable","llm","transformed","WorkerExecutionType","uuid_ossp","action"],"mappings":";;;;;;;;;;;;;gMAcA,IAAIA,GACJ,OAAC,SAAUA,EAAS,EAGf,SAAUC,EAAS,CAChB,IAAIC,GAAO,OAAO,YAAe,SAAW,WACxC,OAAOC,gBAAW,SAAWA,eACzB,OAAO,MAAS,SAAW,KACvB,OAAO,MAAS,SAAW,KACvBC,GAAgB,EAC5BC,GAAWC,GAAaN,CAAO,EAC/B,OAAOE,GAAK,QAAY,MACxBG,GAAWC,GAAaJ,GAAK,QAASG,EAAQ,GAElDJ,EAAQI,GAAUH,EAAI,EAClB,OAAOA,GAAK,QAAY,MACxBA,GAAK,QAAUF,GAEnB,SAASM,GAAaC,GAAQC,GAAU,CACpC,OAAO,SAAUC,GAAKC,GAAO,CACzB,OAAO,eAAeH,GAAQE,GAAK,CAAE,aAAc,GAAM,SAAU,GAAM,MAAOC,EAAK,CAAE,EACnFF,IACAA,GAASC,GAAKC,EAAK,CAC1B,CACb,CACQ,SAASC,IAAe,CACpB,GAAI,CACA,OAAO,SAAS,cAAc,EAAG,CACjD,MACsB,CAAA,CACtB,CACQ,SAASC,IAAmB,CACxB,GAAI,CACA,SAAgB,MAAM,iCAAiC,CACvE,MACsB,CAAA,CACtB,CACQ,SAASR,IAAiB,CACtB,OAAOO,GAAc,GAAIC,GAAkB,CACvD,CACA,GAAO,SAAUP,EAAUH,GAAM,CACzB,IAAIW,GAAS,OAAO,UAAU,eAE1BC,GAAiB,OAAO,QAAW,WACnCC,GAAoBD,IAAkB,OAAO,OAAO,YAAgB,IAAc,OAAO,YAAc,gBACvGE,GAAiBF,IAAkB,OAAO,OAAO,SAAa,IAAc,OAAO,SAAW,aAC9FG,GAAiB,OAAO,OAAO,QAAW,WAC1CC,GAAgB,CAAE,UAAW,CAAE,CAAA,YAAc,MAC7CC,GAAY,CAACF,IAAkB,CAACC,GAChCE,GAAU,CAEV,OAAQH,GACF,UAAY,CAAE,OAAOI,GAAe,OAAO,OAAO,IAAI,CAAC,CAAE,EACzDH,GACI,UAAY,CAAE,OAAOG,GAAe,CAAE,UAAW,IAAM,CAAA,CAAE,EACzD,UAAY,CAAE,OAAOA,GAAe,CAAE,CAAA,CAAI,EACpD,IAAKF,GACC,SAAUG,GAAKb,GAAK,CAAE,OAAOI,GAAO,KAAKS,GAAKb,EAAG,CAAE,EACnD,SAAUa,GAAKb,GAAK,CAAE,OAAOA,MAAOa,EAAM,EAChD,IAAKH,GACC,SAAUG,GAAKb,GAAK,CAAE,OAAOI,GAAO,KAAKS,GAAKb,EAAG,EAAIa,GAAIb,EAAG,EAAI,MAAU,EAC1E,SAAUa,GAAKb,GAAK,CAAE,OAAOa,GAAIb,EAAG,CAAI,CACjD,EAEGc,GAAoB,OAAO,eAAe,QAAQ,EAClDC,GAAO,OAAO,KAAQ,YAAc,OAAO,IAAI,UAAU,SAAY,WAAa,IAAMC,GAAmB,EAC3GC,GAAO,OAAO,KAAQ,YAAc,OAAO,IAAI,UAAU,SAAY,WAAa,IAAMC,GAAmB,EAC3GC,GAAW,OAAO,SAAY,WAAa,QAAUC,GAAuB,EAC5EC,GAAiBhB,GAAiB,OAAO,IAAI,4BAA4B,EAAI,OAC7EiB,GAAmBC,GAA6B,EAChDC,GAAmBC,GAAuBH,EAAgB,EAwC9D,SAASI,GAASC,GAAY7B,GAAQ8B,GAAaC,GAAY,CAC3D,GAAKC,GAAYF,EAAW,EAYvB,CACD,GAAI,CAACG,GAAQJ,EAAU,EACnB,MAAM,IAAI,UACd,GAAI,CAACK,GAAclC,EAAM,EACrB,MAAM,IAAI,UACd,OAAOmC,GAAoBN,GAAY7B,EAAM,CAC7D,KAlB2C,CAC3B,GAAI,CAACiC,GAAQJ,EAAU,EACnB,MAAM,IAAI,UACd,GAAI,CAACO,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,GAAI,CAACoC,GAASL,EAAU,GAAK,CAACC,GAAYD,EAAU,GAAK,CAACM,GAAON,EAAU,EACvE,MAAM,IAAI,UACd,OAAIM,GAAON,EAAU,IACjBA,GAAa,QACjBD,GAAcQ,GAAcR,EAAW,EAChCS,GAAiBV,GAAY7B,GAAQ8B,GAAaC,EAAU,CACnF,CAQA,CACQjC,EAAS,WAAY8B,EAAQ,EA2C7B,SAASY,GAASC,GAAaC,GAAe,CAC1C,SAASC,GAAU3C,GAAQ8B,GAAa,CACpC,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,GAAI,CAACgC,GAAYF,EAAW,GAAK,CAACc,GAAcd,EAAW,EACvD,MAAM,IAAI,UACde,GAA0BJ,GAAaC,GAAe1C,GAAQ8B,EAAW,CACzF,CACY,OAAOa,EACnB,CACQ7C,EAAS,WAAY0C,EAAQ,EAwC7B,SAASM,GAAeL,GAAaC,GAAe1C,GAAQ8B,GAAa,CACrE,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,OAAKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACpCe,GAA0BJ,GAAaC,GAAe1C,GAAQ8B,EAAW,CAC5F,CACQhC,EAAS,iBAAkBgD,EAAc,EAmCzC,SAASC,GAAYN,GAAazC,GAAQ8B,GAAa,CACnD,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,OAAKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACpCkB,GAAoBP,GAAazC,GAAQ8B,EAAW,CACvE,CACQhC,EAAS,cAAeiD,EAAW,EAmCnC,SAASE,GAAeR,GAAazC,GAAQ8B,GAAa,CACtD,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,OAAKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACpCoB,GAAuBT,GAAazC,GAAQ8B,EAAW,CAC1E,CACQhC,EAAS,iBAAkBmD,EAAc,EAmCzC,SAASE,GAAYV,GAAazC,GAAQ8B,GAAa,CACnD,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,OAAKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACpCsB,GAAoBX,GAAazC,GAAQ8B,EAAW,CACvE,CACQhC,EAAS,cAAeqD,EAAW,EAmCnC,SAASE,GAAeZ,GAAazC,GAAQ8B,GAAa,CACtD,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,OAAKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACpCwB,GAAuBb,GAAazC,GAAQ8B,EAAW,CAC1E,CACQhC,EAAS,iBAAkBuD,EAAc,EAkCzC,SAASE,GAAgBvD,GAAQ8B,GAAa,CAC1C,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,OAAKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACpC0B,GAAqBxD,GAAQ8B,EAAW,CAC3D,CACQhC,EAAS,kBAAmByD,EAAe,EAkC3C,SAASE,GAAmBzD,GAAQ8B,GAAa,CAC7C,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACd,OAAKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACpC4B,GAAwB1D,GAAQ8B,EAAW,CAC9D,CACQhC,EAAS,qBAAsB2D,EAAkB,EAmCjD,SAASE,GAAelB,GAAazC,GAAQ8B,GAAa,CACtD,GAAI,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UAGd,GAFKgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GACvC,CAACM,GAASpC,EAAM,EAChB,MAAM,IAAI,UACTgC,GAAYF,EAAW,IACxBA,GAAcQ,GAAcR,EAAW,GAC3C,IAAI8B,GAAWC,GAAoB7D,GAAQ8B,GAAwB,EAAK,EACxE,OAAIE,GAAY4B,EAAQ,EACb,GACJA,GAAS,uBAAuBnB,GAAazC,GAAQ8B,EAAW,CACnF,CACQhC,EAAS,iBAAkB6D,EAAc,EACzC,SAASxB,GAAoBN,GAAY7B,GAAQ,CAC7C,QAAS8D,GAAIjC,GAAW,OAAS,EAAGiC,IAAK,EAAG,EAAEA,GAAG,CAC7C,IAAInB,GAAYd,GAAWiC,EAAC,EACxBC,GAAYpB,GAAU3C,EAAM,EAChC,GAAI,CAACgC,GAAY+B,EAAS,GAAK,CAAC1B,GAAO0B,EAAS,EAAG,CAC/C,GAAI,CAAC7B,GAAc6B,EAAS,EACxB,MAAM,IAAI,UACd/D,GAAS+D,EAC7B,CACA,CACY,OAAO/D,EACnB,CACQ,SAASuC,GAAiBV,GAAY7B,GAAQ8B,GAAakC,GAAY,CACnE,QAASF,GAAIjC,GAAW,OAAS,EAAGiC,IAAK,EAAG,EAAEA,GAAG,CAC7C,IAAInB,GAAYd,GAAWiC,EAAC,EACxBC,GAAYpB,GAAU3C,GAAQ8B,GAAakC,EAAU,EACzD,GAAI,CAAChC,GAAY+B,EAAS,GAAK,CAAC1B,GAAO0B,EAAS,EAAG,CAC/C,GAAI,CAAC3B,GAAS2B,EAAS,EACnB,MAAM,IAAI,UACdC,GAAaD,EACjC,CACA,CACY,OAAOC,EACnB,CAGQ,SAAShB,GAAoBiB,GAAaC,GAAGC,GAAG,CAC5C,IAAI7D,GAAS4C,GAAuBe,GAAaC,GAAGC,EAAC,EACrD,GAAI7D,GACA,MAAO,GACX,IAAI8D,GAASC,GAAuBH,EAAC,EACrC,OAAK7B,GAAO+B,EAAM,EAEX,GADIpB,GAAoBiB,GAAaG,GAAQD,EAAC,CAEjE,CAGQ,SAASjB,GAAuBe,GAAaC,GAAGC,GAAG,CAC/C,IAAIP,GAAWC,GAAoBK,GAAGC,GAAc,EAAK,EACzD,OAAInC,GAAY4B,EAAQ,EACb,GACJU,GAAUV,GAAS,uBAAuBK,GAAaC,GAAGC,EAAC,CAAC,CAC/E,CAGQ,SAASf,GAAoBa,GAAaC,GAAGC,GAAG,CAC5C,IAAI7D,GAAS4C,GAAuBe,GAAaC,GAAGC,EAAC,EACrD,GAAI7D,GACA,OAAOgD,GAAuBW,GAAaC,GAAGC,EAAC,EACnD,IAAIC,GAASC,GAAuBH,EAAC,EACrC,GAAI,CAAC7B,GAAO+B,EAAM,EACd,OAAOhB,GAAoBa,GAAaG,GAAQD,EAAC,CAEjE,CAGQ,SAASb,GAAuBW,GAAaC,GAAGC,GAAG,CAC/C,IAAIP,GAAWC,GAAoBK,GAAGC,GAAc,EAAK,EACzD,GAAI,CAAAnC,GAAY4B,EAAQ,EAExB,OAAOA,GAAS,uBAAuBK,GAAaC,GAAGC,EAAC,CACpE,CAGQ,SAAStB,GAA0BoB,GAAaM,GAAeL,GAAGC,GAAG,CACjE,IAAIP,GAAWC,GAAoBK,GAAGC,GAAc,EAAI,EACxDP,GAAS,0BAA0BK,GAAaM,GAAeL,GAAGC,EAAC,CAC/E,CAGQ,SAASX,GAAqBU,GAAGC,GAAG,CAChC,IAAIK,GAAUd,GAAwBQ,GAAGC,EAAC,EACtCC,GAASC,GAAuBH,EAAC,EACrC,GAAIE,KAAW,KACX,OAAOI,GACX,IAAIC,GAAajB,GAAqBY,GAAQD,EAAC,EAC/C,GAAIM,GAAW,QAAU,EACrB,OAAOD,GACX,GAAIA,GAAQ,QAAU,EAClB,OAAOC,GAGX,QAFIC,GAAM,IAAIvD,GACVwD,GAAO,CAAE,EACJC,GAAK,EAAGC,GAAYL,GAASI,GAAKC,GAAU,OAAQD,KAAM,CAC/D,IAAI1E,GAAM2E,GAAUD,EAAE,EAClBE,GAASJ,GAAI,IAAIxE,EAAG,EACnB4E,KACDJ,GAAI,IAAIxE,EAAG,EACXyE,GAAK,KAAKzE,EAAG,EAEjC,CACY,QAAS6E,GAAK,EAAGC,GAAeP,GAAYM,GAAKC,GAAa,OAAQD,KAAM,CACxE,IAAI7E,GAAM8E,GAAaD,EAAE,EACrBD,GAASJ,GAAI,IAAIxE,EAAG,EACnB4E,KACDJ,GAAI,IAAIxE,EAAG,EACXyE,GAAK,KAAKzE,EAAG,EAEjC,CACY,OAAOyE,EACnB,CAGQ,SAASjB,GAAwBQ,GAAGC,GAAG,CACnC,IAAIP,GAAWC,GAAoBK,GAAGC,GAAc,EAAK,EACzD,OAAKP,GAGEA,GAAS,wBAAwBM,GAAGC,EAAC,EAFjC,CAAE,CAGzB,CAGQ,SAASc,GAAKC,GAAG,CACb,GAAIA,KAAM,KACN,MAAO,GACX,OAAQ,OAAOA,GAAC,CACZ,IAAK,YAAa,MAAO,GACzB,IAAK,UAAW,MAAO,GACvB,IAAK,SAAU,MAAO,GACtB,IAAK,SAAU,MAAO,GACtB,IAAK,SAAU,MAAO,GACtB,IAAK,SAAU,OAAOA,KAAM,KAAO,EAAe,EAClD,QAAS,MAAO,EAChC,CACA,CAGQ,SAASlD,GAAYkD,GAAG,CACpB,OAAOA,KAAM,MACzB,CAGQ,SAAS7C,GAAO6C,GAAG,CACf,OAAOA,KAAM,IACzB,CAGQ,SAASC,GAASD,GAAG,CACjB,OAAO,OAAOA,IAAM,QAChC,CAGQ,SAAS9C,GAAS8C,GAAG,CACjB,OAAO,OAAOA,IAAM,SAAWA,KAAM,KAAO,OAAOA,IAAM,UACrE,CAKQ,SAASE,GAAYC,GAAOC,GAAe,CACvC,OAAQL,GAAKI,EAAK,EAAC,CACf,IAAK,GAAmB,OAAOA,GAC/B,IAAK,GAAc,OAAOA,GAC1B,IAAK,GAAiB,OAAOA,GAC7B,IAAK,GAAgB,OAAOA,GAC5B,IAAK,GAAgB,OAAOA,GAC5B,IAAK,GAAgB,OAAOA,EAC5C,CACY,IAAIE,GAA0C,SAC1CC,GAAeC,GAAUJ,GAAO7E,EAAiB,EACrD,GAAIgF,KAAiB,OAAW,CAC5B,IAAIE,GAASF,GAAa,KAAKH,GAAOE,EAAI,EAC1C,GAAInD,GAASsD,EAAM,EACf,MAAM,IAAI,UACd,OAAOA,EACvB,CACY,OAAOC,GAAoBN,EAA2C,CAClF,CAGQ,SAASM,GAAoBzB,GAAGqB,GAAM,CACX,IAAAK,GAAAF,GAAA,CACnB,IAAIG,GAAa3B,GAAE,SACnB,GAAI4B,GAAWD,EAAU,EAAG,CACxB,IAAIH,GAASG,GAAW,KAAK3B,EAAC,EAC9B,GAAI,CAAC9B,GAASsD,EAAM,EAChB,OAAOA,EAC/B,CACgB,IAAIE,GAAU1B,GAAE,QAChB,GAAI4B,GAAWF,EAAO,EAAG,CACrB,IAAIF,GAASE,GAAQ,KAAK1B,EAAC,EAC3B,GAAI,CAAC9B,GAASsD,EAAM,EAChB,OAAOA,EAC/B,CACA,CAeY,MAAM,IAAI,SACtB,CAGQ,SAASpB,GAAUyB,GAAU,CACzB,MAAO,CAAC,CAACA,EACrB,CAGQ,SAASC,GAASD,GAAU,CACxB,MAAO,GAAKA,EACxB,CAGQ,SAASzD,GAAcyD,GAAU,CAC7B,IAAI7F,GAAMkF,GAAYW,EAAyB,EAC/C,OAAIZ,GAASjF,EAAG,EACLA,GACJ8F,GAAS9F,EAAG,CAC/B,CAKQ,SAAS+B,GAAQ8D,GAAU,CACvB,OAAO,MAAM,QACP,MAAM,QAAQA,EAAQ,EACtBA,cAAoB,OAChBA,cAAoB,MACpB,OAAO,UAAU,SAAS,KAAKA,EAAQ,IAAM,gBACnE,CAGQ,SAASD,GAAWC,GAAU,CAE1B,OAAO,OAAOA,IAAa,UACvC,CAGQ,SAAS7D,GAAc6D,GAAU,CAE7B,OAAO,OAAOA,IAAa,UACvC,CAGQ,SAASnD,GAAcmD,GAAU,CAC7B,OAAQd,GAAKc,EAAQ,EAAC,CAClB,IAAK,GAAgB,MAAO,GAC5B,IAAK,GAAgB,MAAO,GAC5B,QAAS,MAAO,EAChC,CACA,CACQ,SAASE,GAAcf,GAAGgB,GAAG,CACzB,OAAOhB,KAAMgB,IAAKhB,KAAMA,IAAKgB,KAAMA,EAC/C,CAKQ,SAAST,GAAUU,GAAGhC,GAAG,CACrB,IAAIiC,GAAOD,GAAEhC,EAAC,EACd,GAA0BiC,IAAS,KAEnC,IAAI,CAACN,GAAWM,EAAI,EAChB,MAAM,IAAI,UACd,OAAOA,GACnB,CAGQ,SAASC,GAAYC,GAAK,CACtB,IAAIC,GAASd,GAAUa,GAAK7F,EAAc,EAC1C,GAAI,CAACqF,GAAWS,EAAM,EAClB,MAAM,IAAI,UACd,IAAIC,GAAWD,GAAO,KAAKD,EAAG,EAC9B,GAAI,CAAClE,GAASoE,EAAQ,EAClB,MAAM,IAAI,UACd,OAAOA,EACnB,CAGQ,SAASC,GAAcC,GAAY,CAC/B,OAAOA,GAAW,KAC9B,CAGQ,SAASC,GAAaH,GAAU,CAC5B,IAAId,GAASc,GAAS,KAAM,EAC5B,OAAOd,GAAO,KAAO,GAAQA,EACzC,CAGQ,SAASkB,GAAcJ,GAAU,CAC7B,IAAIK,GAAIL,GAAS,OACbK,IACAA,GAAE,KAAKL,EAAQ,CAC/B,CAKQ,SAASnC,GAAuBH,GAAG,CAC/B,IAAI4C,GAAQ,OAAO,eAAe5C,EAAC,EAUnC,GATI,OAAOA,IAAM,YAAcA,KAAMlD,IASjC8F,KAAU9F,GACV,OAAO8F,GAEX,IAAIC,GAAY7C,GAAE,UACd8C,GAAiBD,IAAa,OAAO,eAAeA,EAAS,EACjE,GAAIC,IAAkB,MAAQA,KAAmB,OAAO,UACpD,OAAOF,GAEX,IAAIG,GAAcD,GAAe,YAIjC,OAHI,OAAOC,IAAgB,YAGvBA,KAAgB/C,GACT4C,GAEJG,EACnB,CAOQ,SAASC,IAAyB,CAC9B,IAAIC,GACA,CAACnF,GAAYT,EAAc,GAC3B,OAAO5B,GAAK,QAAY,KACxB,EAAE4B,MAAkB5B,GAAK,UACzB,OAAOA,GAAK,QAAQ,gBAAmB,aAEvCwH,GAAWC,GAAuBzH,GAAK,OAAO,GAElD,IAAI0H,GACAC,GACAC,GACAC,GAAoB,IAAInG,GACxBoG,GAAW,CACX,iBAAkBC,GAClB,YAAaC,GACb,YAAaC,EAChB,EACD,OAAOH,GACP,SAASC,GAAiB9D,GAAU,CAChC,GAAI,CAAC,OAAO,aAAa6D,EAAQ,EAC7B,MAAM,IAAI,MAAM,2CAA2C,EAE/D,OAAQ,GAAI,CACR,KAAKN,KAAavD,GAAU,MAC5B,KAAK5B,GAAYqF,EAAK,EAClBA,GAAQzD,GACR,MACJ,KAAKyD,KAAUzD,GAAU,MACzB,KAAK5B,GAAYsF,EAAM,EACnBA,GAAS1D,GACT,MACJ,KAAK0D,KAAW1D,GAAU,MAC1B,QACQ2D,KAAS,SACTA,GAAO,IAAIpG,IACfoG,GAAK,IAAI3D,EAAQ,EACjB,KACxB,CACA,CACY,SAASiE,GAAmB3D,GAAGC,GAAG,CAC9B,GAAI,CAACnC,GAAYqF,EAAK,EAAG,CACrB,GAAIA,GAAM,cAAcnD,GAAGC,EAAC,EACxB,OAAOkD,GACX,GAAI,CAACrF,GAAYsF,EAAM,EAAG,CACtB,GAAIA,GAAO,cAAcpD,GAAGC,EAAC,EACzB,OAAOkD,GACX,GAAI,CAACrF,GAAYuF,EAAI,EAEjB,QADIf,GAAWH,GAAYkB,EAAI,IAClB,CACT,IAAIO,GAAOnB,GAAaH,EAAQ,EAChC,GAAI,CAACsB,GACD,OAEJ,IAAIlE,GAAW6C,GAAcqB,EAAI,EACjC,GAAIlE,GAAS,cAAcM,GAAGC,EAAC,EAC3B,OAAAyC,GAAcJ,EAAQ,EACf5C,EAE3C,CAEA,CACA,CACgB,GAAI,CAAC5B,GAAYmF,EAAQ,GAAKA,GAAS,cAAcjD,GAAGC,EAAC,EACrD,OAAOgD,EAG3B,CACY,SAASQ,GAAYzD,GAAGC,GAAG,CACvB,IAAI4D,GAAcP,GAAkB,IAAItD,EAAC,EACrCN,GAIJ,OAHK5B,GAAY+F,EAAW,IACxBnE,GAAWmE,GAAY,IAAI5D,EAAC,GAE3BnC,GAAY4B,EAAQ,IAGzBA,GAAWiE,GAAmB3D,GAAGC,EAAC,EAC7BnC,GAAY4B,EAAQ,IACjB5B,GAAY+F,EAAW,IACvBA,GAAc,IAAI9G,GAClBuG,GAAkB,IAAItD,GAAG6D,EAAW,GAExCA,GAAY,IAAI5D,GAAGP,EAAQ,IAExBA,EACvB,CACY,SAASoE,GAAYpE,GAAU,CAC3B,GAAI5B,GAAY4B,EAAQ,EACpB,MAAM,IAAI,UACd,OAAOyD,KAAUzD,IAAY0D,KAAW1D,IAAY,CAAC5B,GAAYuF,EAAI,GAAKA,GAAK,IAAI3D,EAAQ,CAC3G,CACY,SAASgE,GAAY1D,GAAGC,GAAGP,GAAU,CACjC,GAAI,CAACoE,GAAYpE,EAAQ,EACrB,MAAM,IAAI,MAAM,mCAAmC,EAEvD,IAAIqE,GAAmBN,GAAYzD,GAAGC,EAAC,EACvC,GAAI8D,KAAqBrE,GAAU,CAC/B,GAAI,CAAC5B,GAAYiG,EAAgB,EAC7B,MAAO,GAEX,IAAIF,GAAcP,GAAkB,IAAItD,EAAC,EACrClC,GAAY+F,EAAW,IACvBA,GAAc,IAAI9G,GAClBuG,GAAkB,IAAItD,GAAG6D,EAAW,GAExCA,GAAY,IAAI5D,GAAGP,EAAQ,CAC/C,CACgB,MAAO,EACvB,CACA,CAIQ,SAASnC,IAA8B,CACnC,IAAID,GACJ,MAAI,CAACQ,GAAYT,EAAc,GAAKa,GAASzC,GAAK,OAAO,GAAK,OAAO,aAAaA,GAAK,OAAO,IAC1F6B,GAAmB7B,GAAK,QAAQ4B,EAAc,GAE9CS,GAAYR,EAAgB,IAC5BA,GAAmB0F,GAAwB,GAE3C,CAAClF,GAAYT,EAAc,GAAKa,GAASzC,GAAK,OAAO,GAAK,OAAO,aAAaA,GAAK,OAAO,GAC1F,OAAO,eAAeA,GAAK,QAAS4B,GAAgB,CAChD,WAAY,GACZ,aAAc,GACd,SAAU,GACV,MAAOC,EAC3B,CAAiB,EAEEA,EACnB,CACQ,SAASG,GAAuB8F,GAAU,CAGtC,IAAIjF,GAAW,IAAInB,GACfuC,GAAW,CACX,cAAe,SAAUM,GAAGC,GAAG,CAC3B,IAAI+D,GAAiB1F,GAAS,IAAI0B,EAAC,EACnC,OAAIlC,GAAYkG,EAAc,EACnB,GACJA,GAAe,IAAI/D,EAAC,CAC9B,EACD,0BAA2BtB,GAC3B,uBAAwBK,GACxB,uBAAwBI,GACxB,wBAAyBI,GACzB,uBAAwByE,EAC3B,EACD,OAAA3G,GAAiB,iBAAiBoC,EAAQ,EACnCA,GACP,SAASwE,GAAuBlE,GAAGC,GAAGkE,GAAQ,CAC1C,IAAIH,GAAiB1F,GAAS,IAAI0B,EAAC,EAC/BoE,GAAwB,GAC5B,GAAItG,GAAYkG,EAAc,EAAG,CAC7B,GAAI,CAACG,GACD,OACJH,GAAiB,IAAIjH,GACrBuB,GAAS,IAAI0B,GAAGgE,EAAc,EAC9BI,GAAwB,EAC5C,CACgB,IAAIC,GAAcL,GAAe,IAAI/D,EAAC,EACtC,GAAInC,GAAYuG,EAAW,EAAG,CAC1B,GAAI,CAACF,GACD,OAGJ,GAFAE,GAAc,IAAItH,GAClBiH,GAAe,IAAI/D,GAAGoE,EAAW,EAC7B,CAACd,GAAS,YAAYvD,GAAGC,GAAGP,EAAQ,EACpC,MAAAsE,GAAe,OAAO/D,EAAC,EACnBmE,IACA9F,GAAS,OAAO0B,EAAC,EAEf,IAAI,MAAM,4BAA4B,CAEpE,CACgB,OAAOqE,EACvB,CAGY,SAASrF,GAAuBe,GAAaC,GAAGC,GAAG,CAC/C,IAAIoE,GAAcH,GAAuBlE,GAAGC,GAAc,EAAK,EAC/D,OAAInC,GAAYuG,EAAW,EAChB,GACJjE,GAAUiE,GAAY,IAAItE,EAAW,CAAC,CAC7D,CAGY,SAASX,GAAuBW,GAAaC,GAAGC,GAAG,CAC/C,IAAIoE,GAAcH,GAAuBlE,GAAGC,GAAc,EAAK,EAC/D,GAAI,CAAAnC,GAAYuG,EAAW,EAE3B,OAAOA,GAAY,IAAItE,EAAW,CAClD,CAGY,SAASpB,GAA0BoB,GAAaM,GAAeL,GAAGC,GAAG,CACjE,IAAIoE,GAAcH,GAAuBlE,GAAGC,GAAc,EAAI,EAC9DoE,GAAY,IAAItE,GAAaM,EAAa,CAC1D,CAGY,SAASb,GAAwBQ,GAAGC,GAAG,CACnC,IAAIQ,GAAO,CAAE,EACT4D,GAAcH,GAAuBlE,GAAGC,GAAc,EAAK,EAC/D,GAAInC,GAAYuG,EAAW,EACvB,OAAO5D,GAIX,QAHI6D,GAAUD,GAAY,KAAM,EAC5B/B,GAAWH,GAAYmC,EAAO,EAC9BC,GAAI,IACK,CACT,IAAIX,GAAOnB,GAAaH,EAAQ,EAChC,GAAI,CAACsB,GACD,OAAAnD,GAAK,OAAS8D,GACP9D,GAEX,IAAI+D,GAAYjC,GAAcqB,EAAI,EAClC,GAAI,CACAnD,GAAK8D,EAAC,EAAIC,EAClC,OAC2BC,GAAG,CACN,GAAI,CACA/B,GAAcJ,EAAQ,CAClD,QACgC,CACJ,MAAMmC,EAClC,CACA,CACoBF,IACpB,CACA,CACY,SAASN,GAAuBlE,GAAaC,GAAGC,GAAG,CAC/C,IAAIoE,GAAcH,GAAuBlE,GAAGC,GAAc,EAAK,EAG/D,GAFInC,GAAYuG,EAAW,GAEvB,CAACA,GAAY,OAAOtE,EAAW,EAC/B,MAAO,GACX,GAAIsE,GAAY,OAAS,EAAG,CACxB,IAAIL,GAAiB1F,GAAS,IAAI0B,EAAC,EAC9BlC,GAAYkG,EAAc,IAC3BA,GAAe,OAAO/D,EAAC,EACnB+D,GAAe,OAAS,GACxB1F,GAAS,OAAO0F,EAAc,EAG1D,CACgB,MAAO,EACvB,CACA,CACQ,SAASd,GAAuBwB,GAAS,CACrC,IAAI9F,GAAiB8F,GAAQ,eAAgB3F,GAAiB2F,GAAQ,eAAgBvF,GAAiBuF,GAAQ,eAAgBnF,GAAqBmF,GAAQ,mBAAoBjF,GAAiBiF,GAAQ,eACrMC,GAAgB,IAAIxH,GACpBuC,GAAW,CACX,cAAe,SAAUM,GAAGC,GAAG,CAC3B,IAAI2E,GAAsBD,GAAc,IAAI3E,EAAC,EAC7C,MAAI,CAAClC,GAAY8G,EAAmB,GAAKA,GAAoB,IAAI3E,EAAC,EACvD,GAEPV,GAAmBS,GAAGC,EAAC,EAAE,QACrBnC,GAAY8G,EAAmB,IAC/BA,GAAsB,IAAI3H,GAC1B0H,GAAc,IAAI3E,GAAG4E,EAAmB,GAE5CA,GAAoB,IAAI3E,EAAC,EAClB,IAEJ,EACV,EACD,0BAA2BrB,GAC3B,uBAAwBG,GACxB,uBAAwBI,GACxB,wBAAyBI,GACzB,uBAAwBE,EAC3B,EACD,OAAOC,EACnB,CAKQ,SAASC,GAAoBK,GAAGC,GAAGkE,GAAQ,CACvC,IAAIU,GAAqBvH,GAAiB,YAAY0C,GAAGC,EAAC,EAC1D,GAAI,CAACnC,GAAY+G,EAAkB,EAC/B,OAAOA,GAEX,GAAIV,GAAQ,CACR,GAAI7G,GAAiB,YAAY0C,GAAGC,GAAGzC,EAAgB,EACnD,OAAOA,GAEX,MAAM,IAAI,MAAM,gBAAgB,CAChD,CAEA,CAEQ,SAASR,IAAoB,CACzB,IAAI8H,GAAgB,CAAE,EAClBC,GAAgB,CAAE,EAClBC,GAA6B,UAAY,CACzC,SAASA,GAAYvE,GAAMwE,GAAQC,GAAU,CACzC,KAAK,OAAS,EACd,KAAK,MAAQzE,GACb,KAAK,QAAUwE,GACf,KAAK,UAAYC,EACrC,CACgB,OAAAF,GAAY,UAAU,YAAY,EAAI,UAAY,CAAE,OAAO,IAAO,EAClEA,GAAY,UAAUzI,EAAc,EAAI,UAAY,CAAE,OAAO,IAAO,EACpEyI,GAAY,UAAU,KAAO,UAAY,CACrC,IAAIG,GAAQ,KAAK,OACjB,GAAIA,IAAS,GAAKA,GAAQ,KAAK,MAAM,OAAQ,CACzC,IAAI3D,GAAS,KAAK,UAAU,KAAK,MAAM2D,EAAK,EAAG,KAAK,QAAQA,EAAK,CAAC,EAClE,OAAIA,GAAQ,GAAK,KAAK,MAAM,QACxB,KAAK,OAAS,GACd,KAAK,MAAQJ,GACb,KAAK,QAAUA,IAGf,KAAK,SAEF,CAAE,MAAOvD,GAAQ,KAAM,EAAO,CAC7D,CACoB,MAAO,CAAE,MAAO,OAAW,KAAM,EAAM,CAC1C,EACDwD,GAAY,UAAU,MAAQ,SAAUI,GAAO,CAC3C,MAAI,KAAK,QAAU,IACf,KAAK,OAAS,GACd,KAAK,MAAQL,GACb,KAAK,QAAUA,IAEbK,EACT,EACDJ,GAAY,UAAU,OAAS,SAAU/I,GAAO,CAC5C,OAAI,KAAK,QAAU,IACf,KAAK,OAAS,GACd,KAAK,MAAQ8I,GACb,KAAK,QAAUA,IAEZ,CAAE,MAAO9I,GAAO,KAAM,EAAM,CACtC,EACM+I,EACvB,IACgBK,GAAqB,UAAY,CACjC,SAASA,IAAM,CACX,KAAK,MAAQ,CAAE,EACf,KAAK,QAAU,CAAE,EACjB,KAAK,UAAYP,GACjB,KAAK,YAAc,EACvC,CACgB,cAAO,eAAeO,GAAI,UAAW,OAAQ,CACzC,IAAK,UAAY,CAAE,OAAO,KAAK,MAAM,MAAS,EAC9C,WAAY,GACZ,aAAc,EAClC,CAAiB,EACDA,GAAI,UAAU,IAAM,SAAUrJ,GAAK,CAAE,OAAO,KAAK,MAAMA,GAAgB,EAAK,GAAK,CAAI,EACrFqJ,GAAI,UAAU,IAAM,SAAUrJ,GAAK,CAC/B,IAAImJ,GAAQ,KAAK,MAAMnJ,GAAgB,EAAK,EAC5C,OAAOmJ,IAAS,EAAI,KAAK,QAAQA,EAAK,EAAI,MAC7C,EACDE,GAAI,UAAU,IAAM,SAAUrJ,GAAKC,GAAO,CACtC,IAAIkJ,GAAQ,KAAK,MAAMnJ,GAAgB,EAAI,EAC3C,YAAK,QAAQmJ,EAAK,EAAIlJ,GACf,IACV,EACDoJ,GAAI,UAAU,OAAS,SAAUrJ,GAAK,CAClC,IAAImJ,GAAQ,KAAK,MAAMnJ,GAAgB,EAAK,EAC5C,GAAImJ,IAAS,EAAG,CAEZ,QADIG,GAAO,KAAK,MAAM,OACb1F,GAAIuF,GAAQ,EAAGvF,GAAI0F,GAAM1F,KAC9B,KAAK,MAAMA,GAAI,CAAC,EAAI,KAAK,MAAMA,EAAC,EAChC,KAAK,QAAQA,GAAI,CAAC,EAAI,KAAK,QAAQA,EAAC,EAExC,YAAK,MAAM,SACX,KAAK,QAAQ,SACTmC,GAAc/F,GAAK,KAAK,SAAS,IACjC,KAAK,UAAY8I,GACjB,KAAK,YAAc,IAEhB,EAC/B,CACoB,MAAO,EACV,EACDO,GAAI,UAAU,MAAQ,UAAY,CAC9B,KAAK,MAAM,OAAS,EACpB,KAAK,QAAQ,OAAS,EACtB,KAAK,UAAYP,GACjB,KAAK,YAAc,EACtB,EACDO,GAAI,UAAU,KAAO,UAAY,CAAE,OAAO,IAAIL,GAAY,KAAK,MAAO,KAAK,QAASO,EAAM,CAAI,EAC9FF,GAAI,UAAU,OAAS,UAAY,CAAE,OAAO,IAAIL,GAAY,KAAK,MAAO,KAAK,QAASQ,EAAQ,CAAI,EAClGH,GAAI,UAAU,QAAU,UAAY,CAAE,OAAO,IAAIL,GAAY,KAAK,MAAO,KAAK,QAASS,EAAQ,CAAI,EACnGJ,GAAI,UAAU,YAAY,EAAI,UAAY,CAAE,OAAO,KAAK,QAAO,CAAK,EACpEA,GAAI,UAAU9I,EAAc,EAAI,UAAY,CAAE,OAAO,KAAK,QAAO,CAAK,EACtE8I,GAAI,UAAU,MAAQ,SAAUrJ,GAAK0J,GAAQ,CACzC,GAAI,CAAC3D,GAAc,KAAK,UAAW/F,EAAG,EAAG,CACrC,KAAK,YAAc,GACnB,QAAS4D,GAAI,EAAGA,GAAI,KAAK,MAAM,OAAQA,KACnC,GAAImC,GAAc,KAAK,MAAMnC,EAAC,EAAG5D,EAAG,EAAG,CACnC,KAAK,YAAc4D,GACnB,KAChC,CAEA,CACoB,OAAI,KAAK,YAAc,GAAK8F,KACxB,KAAK,YAAc,KAAK,MAAM,OAC9B,KAAK,MAAM,KAAK1J,EAAG,EACnB,KAAK,QAAQ,KAAK,MAAS,GAExB,KAAK,WACf,EACMqJ,EACvB,IACY,OAAOA,GACP,SAASE,GAAOvJ,GAAK2J,GAAG,CACpB,OAAO3J,EACvB,CACY,SAASwJ,GAASG,GAAG1J,GAAO,CACxB,OAAOA,EACvB,CACY,SAASwJ,GAASzJ,GAAKC,GAAO,CAC1B,MAAO,CAACD,GAAKC,EAAK,CAClC,CACA,CAEQ,SAASiB,IAAoB,CACzB,IAAI0I,GAAqB,UAAY,CACjC,SAASA,IAAM,CACX,KAAK,KAAO,IAAI7I,EACpC,CACgB,cAAO,eAAe6I,GAAI,UAAW,OAAQ,CACzC,IAAK,UAAY,CAAE,OAAO,KAAK,KAAK,IAAO,EAC3C,WAAY,GACZ,aAAc,EAClC,CAAiB,EACDA,GAAI,UAAU,IAAM,SAAU3J,GAAO,CAAE,OAAO,KAAK,KAAK,IAAIA,EAAK,CAAI,EACrE2J,GAAI,UAAU,IAAM,SAAU3J,GAAO,CAAE,OAAO,KAAK,KAAK,IAAIA,GAAOA,EAAK,EAAG,IAAO,EAClF2J,GAAI,UAAU,OAAS,SAAU3J,GAAO,CAAE,OAAO,KAAK,KAAK,OAAOA,EAAK,CAAI,EAC3E2J,GAAI,UAAU,MAAQ,UAAY,CAAE,KAAK,KAAK,MAAK,CAAK,EACxDA,GAAI,UAAU,KAAO,UAAY,CAAE,OAAO,KAAK,KAAK,KAAI,CAAK,EAC7DA,GAAI,UAAU,OAAS,UAAY,CAAE,OAAO,KAAK,KAAK,KAAI,CAAK,EAC/DA,GAAI,UAAU,QAAU,UAAY,CAAE,OAAO,KAAK,KAAK,QAAO,CAAK,EACnEA,GAAI,UAAU,YAAY,EAAI,UAAY,CAAE,OAAO,KAAK,KAAI,CAAK,EACjEA,GAAI,UAAUrJ,EAAc,EAAI,UAAY,CAAE,OAAO,KAAK,KAAI,CAAK,EAC5DqJ,EACvB,IACY,OAAOA,EACnB,CAEQ,SAASxI,IAAwB,CAC7B,IAAIyI,GAAY,GACZpF,GAAO9D,GAAQ,OAAQ,EACvBmJ,GAAUC,GAAiB,EAC/B,OAAsB,UAAY,CAC9B,SAASC,IAAU,CACf,KAAK,KAAOD,GAAiB,CACjD,CACgB,OAAAC,GAAQ,UAAU,IAAM,SAAUlK,GAAQ,CACtC,IAAImK,GAAQC,GAAwBpK,GAAmB,EAAK,EAC5D,OAAOmK,KAAU,OAAYtJ,GAAQ,IAAIsJ,GAAO,KAAK,IAAI,EAAI,EAChE,EACDD,GAAQ,UAAU,IAAM,SAAUlK,GAAQ,CACtC,IAAImK,GAAQC,GAAwBpK,GAAmB,EAAK,EAC5D,OAAOmK,KAAU,OAAYtJ,GAAQ,IAAIsJ,GAAO,KAAK,IAAI,EAAI,MAChE,EACDD,GAAQ,UAAU,IAAM,SAAUlK,GAAQG,GAAO,CAC7C,IAAIgK,GAAQC,GAAwBpK,GAAmB,EAAI,EAC3D,OAAAmK,GAAM,KAAK,IAAI,EAAIhK,GACZ,IACV,EACD+J,GAAQ,UAAU,OAAS,SAAUlK,GAAQ,CACzC,IAAImK,GAAQC,GAAwBpK,GAAmB,EAAK,EAC5D,OAAOmK,KAAU,OAAY,OAAOA,GAAM,KAAK,IAAI,EAAI,EAC1D,EACDD,GAAQ,UAAU,MAAQ,UAAY,CAElC,KAAK,KAAOD,GAAiB,CAChC,EACMC,EACvB,EAAe,EACH,SAASD,IAAkB,CACvB,IAAI/J,GACJ,GACIA,GAAM,cAAgBmK,GAAY,QAC/BxJ,GAAQ,IAAI8D,GAAMzE,EAAG,GAC5B,OAAAyE,GAAKzE,EAAG,EAAI,GACLA,EACvB,CACY,SAASkK,GAAwBpK,GAAQsK,GAAQ,CAC7C,GAAI,CAAChK,GAAO,KAAKN,GAAQgK,EAAO,EAAG,CAC/B,GAAI,CAACM,GACD,OACJ,OAAO,eAAetK,GAAQgK,GAAS,CAAE,MAAOnJ,GAAQ,OAAM,EAAI,CACtF,CACgB,OAAOb,GAAOgK,EAAO,CACrC,CACY,SAASO,GAAgBC,GAAQhB,GAAM,CACnC,QAAS1F,GAAI,EAAGA,GAAI0F,GAAM,EAAE1F,GACxB0G,GAAO1G,EAAC,EAAI,KAAK,OAAQ,EAAG,IAAO,EACvC,OAAO0G,EACvB,CACY,SAASC,GAAejB,GAAM,CAC1B,GAAI,OAAO,YAAe,WAAY,CAClC,IAAIkB,GAAQ,IAAI,WAAWlB,EAAI,EAC/B,OAAI,OAAO,OAAW,IAClB,OAAO,gBAAgBkB,EAAK,EAEvB,OAAO,SAAa,IACzB,SAAS,gBAAgBA,EAAK,EAG9BH,GAAgBG,GAAOlB,EAAI,EAExBkB,EAC3B,CACgB,OAAOH,GAAgB,IAAI,MAAMf,EAAI,EAAGA,EAAI,CAC5D,CACY,SAASa,IAAa,CAClB,IAAIM,GAAOF,GAAeV,EAAS,EAEnCY,GAAK,CAAC,EAAIA,GAAK,CAAC,EAAI,GAAO,GAC3BA,GAAK,CAAC,EAAIA,GAAK,CAAC,EAAI,IAAO,IAE3B,QADIjF,GAAS,GACJkF,GAAS,EAAGA,GAASb,GAAW,EAAEa,GAAQ,CAC/C,IAAIC,GAAOF,GAAKC,EAAM,GAClBA,KAAW,GAAKA,KAAW,GAAKA,KAAW,KAC3ClF,IAAU,KACVmF,GAAO,KACPnF,IAAU,KACdA,IAAUmF,GAAK,SAAS,EAAE,EAAE,YAAa,CAC7D,CACgB,OAAOnF,EACvB,CACA,CAEQ,SAAS5E,GAAewF,GAAK,CACzB,OAAAA,GAAI,GAAK,OACT,OAAOA,GAAI,GACJA,EACnB,CACA,CAAK,CACL,EAAG7G,KAAYA,GAAU,CAAA,EAAG,6BCn4CrB,MAAM,aAAc,CAOvB,OAAO,mBAAmBqL,EAAQ,CAC9B,MAAMC,EAAO,CAACD,CAAM,EACdE,GAAkBC,IAAW,CAC/B,MAAMnE,GAAQ,OAAO,eAAemE,EAAM,EACtCnE,IAASA,GAAM,OACfiE,EAAK,KAAKjE,EAAK,EACfkE,GAAelE,EAAK,EAE3B,EACD,OAAAkE,GAAeF,CAAM,EACdC,CACf,CAII,OAAO,YAAYG,EAASC,EAAS,CACjC,OAAOD,EAAQ,qBAAqBC,CAC5C,CAKI,OAAO,eAAeT,EAAOU,EAAS,CAClC,OAAKA,EAEEV,EAAM,OAAQW,IAASA,GAAK,QAAUD,EAAQ,QAAQC,GAAK,MAAM,IAAM,EAAE,EADrEX,CAEnB,CACA,CC/BO,MAAM,mBAAoB,CAC7B,aAAc,CAIV,KAAK,OAAS,CAAE,EAChB,KAAK,MAAQ,CAAE,EACf,KAAK,mBAAqB,CAAE,EAC5B,KAAK,0BAA4B,CAAE,EACnC,KAAK,wBAA0B,CAAE,EACjC,KAAK,iBAAmB,CAAE,EAC1B,KAAK,kBAAoB,CAAE,EAC3B,KAAK,QAAU,CAAE,EACjB,KAAK,QAAU,CAAE,EACjB,KAAK,OAAS,CAAE,EAChB,KAAK,WAAa,CAAE,EACpB,KAAK,QAAU,CAAE,EACjB,KAAK,YAAc,CAAE,EACrB,KAAK,UAAY,CAAE,EACnB,KAAK,YAAc,CAAE,EACrB,KAAK,WAAa,CAAE,EACpB,KAAK,gBAAkB,CAAE,EACzB,KAAK,eAAiB,CAAE,EACxB,KAAK,YAAc,CAAE,EACrB,KAAK,UAAY,CAAE,EACnB,KAAK,aAAe,CAAE,EACtB,KAAK,oBAAsB,CAAE,CACrC,CACI,aAAa1K,EAAQ,CACjB,OAAO,KAAK,eAAe,KAAK,OAAQA,CAAM,CACtD,CACI,cAAcA,EAAQ,CAClB,OAAO,KAAK,4CAA4C,KAAK,QAASA,CAAM,CACpF,CACI,cAAcA,EAAQsL,EAAc,CAChC,OAAO,KAAK,YAAY,KAAMC,KACjB,MAAM,QAAQvL,CAAM,EACvBA,EAAO,QAAQuL,GAAU,MAAM,IAAM,GACrCA,GAAU,SAAWvL,IACvBuL,GAAU,eAAiBD,CAClC,CACT,CACI,SAAStL,EAAQ,CACb,OAAO,KAAK,MAAM,KAAM+K,GACb,MAAM,QAAQ/K,CAAM,EACrBA,EAAO,QAAQ+K,EAAK,MAAM,IAAM,GAChCA,EAAK,SAAW/K,CACzB,CACT,CACI,gBAAgBA,EAAQ,CACpB,OAAO,KAAK,oDAAoD,KAAK,UAAWA,CAAM,CAC9F,CACI,kBAAkBA,EAAQ,CACtB,OAAO,KAAK,4CAA4C,KAAK,YAAaA,CAAM,CACxF,CACI,qBAAqBA,EAAQ,CACzB,OAAO,KAAK,4CAA4C,KAAK,eAAgBA,CAAM,CAC3F,CACI,cAAcA,EAAQ,CAElB,OAAO,KAAK,QAAQ,OAAQqJ,GACjB,MAAM,QAAQrJ,CAAM,EACrBA,EAAO,QAAQqJ,EAAM,MAAM,IAAM,GACjCA,EAAM,SAAWrJ,CAC1B,CACT,CACI,cAAcA,EAAQ,CAClB,OAAO,KAAK,QAAQ,OAAQwL,GACjB,MAAM,QAAQxL,CAAM,EACrBA,EAAO,QAAQwL,EAAO,MAAM,IAAM,GAClCA,EAAO,SAAWxL,CAC3B,CACT,CACI,aAAaA,EAAQ,CACjB,OAAO,KAAK,OAAO,OAAQyL,GAChB,MAAM,QAAQzL,CAAM,EACrBA,EAAO,QAAQyL,EAAM,MAAM,IAAM,GACjCA,EAAM,SAAWzL,CAC1B,CACT,CACI,iBAAiBA,EAAQ,CACrB,OAAO,KAAK,WAAW,OAAQ0L,GACpB,MAAM,QAAQ1L,CAAM,EACrBA,EAAO,QAAQ0L,EAAU,MAAM,IAAM,GACrCA,EAAU,SAAW1L,CAC9B,CACT,CACI,gBAAgBA,EAAQ,CACpB,OAAO,KAAK,eAAe,KAAK,gBAAiBA,CAAM,CAC/D,CACI,gBAAgBA,EAAQ,CACpB,OAAO,KAAK,oDAAoD,KAAK,UAAWA,CAAM,CAC9F,CACI,cAAcA,EAAQsL,EAAc,CAChC,OAAO,KAAK,WAAW,KAAMK,IACjBA,GAAU,SAAW3L,GACzB2L,GAAU,eAAiBL,CAClC,CACT,CACI,kBAAkBtL,EAAQsL,EAAc,CAEpC,OAAO,KAAK,YAAY,OAAQM,IACpBA,GAAW,SAAW5L,GAC1B4L,GAAW,eAAiBN,CACnC,CACT,CACI,kBAAkBtL,EAAQ,CACtB,OAAO,KAAK,eAAe,KAAK,kBAAmBA,CAAM,CACjE,CACI,uBAAuBA,EAAQ,CAC3B,OAAO,KAAK,eAAe,KAAK,iBAAkBA,CAAM,CAChE,CACI,gCAAgCA,EAAQsL,EAAc,CAClD,OAAO,KAAK,0BAA0B,OAAQO,KACjC,MAAM,QAAQ7L,CAAM,EACvBA,EAAO,QAAQ6L,GAAc,MAAM,IAAM,GACzCA,GAAc,SAAW7L,IAC3B6L,GAAc,aAAeP,CACpC,CACT,CACI,4BAA4BtL,EAAQsL,EAAc,CAC9C,OAAO,KAAK,wBAAwB,OAAQO,KAC/B,MAAM,QAAQ7L,CAAM,EACvBA,EAAO,QAAQ6L,GAAc,MAAM,IAAM,GACzCA,GAAc,SAAW7L,IAC3B6L,GAAc,aAAeP,CACpC,CACT,CACI,0BAA0BtL,EAAQ,CAC9B,OAAO,KAAK,OAAO,OAAQmK,GACf,OAAOA,EAAM,QAAW,YAC5B,OAAOnK,GAAW,YAClB,cAAc,YAAYmK,EAAM,OAAQnK,CAAM,GAC9CmK,EAAM,OAAS,cACtB,CACT,CACI,oBAAoBnK,EAAQ,CACxB,OAAO,KAAK,aAAa,KAAM8L,GAAgBA,EAAY,SAAW9L,CAAM,CACpF,CACI,uBAAuBA,EAAQ,CAC3B,OAAO,KAAK,oBAAoB,KAAM+L,GAAuBA,EAAmB,SAAW/L,CAAM,CACzG,CAOI,eAAe0K,EAAO1K,EAAQ,CAC1B,OAAO0K,EAAM,OAAQP,IACV,MAAM,QAAQnK,CAAM,EACrBA,EAAO,QAAQmK,GAAM,MAAM,IAAM,GACjCA,GAAM,SAAWnK,CAC1B,CACT,CAII,4CAA4C0K,EAAO1K,EAAQ,CACvD,MAAMgM,GAAW,CAAE,EACnB,OAAAtB,EAAM,QAASW,IAAS,EACD,MAAM,QAAQrL,CAAM,EACjCA,EAAO,QAAQqL,GAAK,MAAM,IAAM,GAChCA,GAAK,SAAWrL,KAEbgM,GAAS,KAAMC,IAAYA,GAAQ,eAAiBZ,GAAK,YAAY,GACtEW,GAAS,KAAKX,EAAI,EAEtC,CAAS,EACMW,EACf,CAII,oDAAoDtB,EAAO1K,EAAQ,CAC/D,MAAMgM,GAAW,CAAE,EACnB,OAAAtB,EAAM,QAASW,IAAS,CAIpB,GAHmB,MAAM,QAAQrL,CAAM,EACjCA,EAAO,QAAQqL,GAAK,MAAM,IAAM,GAChCA,GAAK,SAAWrL,EACN,CACZ,MAAMkM,GAAgBF,GAAS,UAAWC,IAAYA,GAAQ,eAAiBZ,GAAK,YAAY,EAChG,GAAI,MAAM,QAAQrL,CAAM,GACpBkM,KAAkB,IAClBlM,EAAO,QAAQqL,GAAK,MAAM,EACtBrL,EAAO,QAAQgM,GAASE,EAAa,EAAE,MAAM,EAAG,CACpD,MAAMC,GAAQ,OAAO,OAAOH,GAASE,EAAa,CAAC,EACnDC,GAAM,KAAOd,GAAK,KAClBW,GAASE,EAAa,EAAIC,EAC9C,MACyBD,KAAkB,IACvBF,GAAS,KAAKX,EAAI,CAEtC,CACA,CAAS,EACMW,EACf,CAII,oDAAoDtB,EAAO1K,EAAQ,CAC/D,MAAMgM,GAAW,CAAE,EACnB,OAAAtB,EAAM,QAASW,IAAS,EACD,MAAM,QAAQrL,CAAM,EACjCA,EAAO,QAAQqL,GAAK,MAAM,IAAM,GAChCA,GAAK,SAAWrL,KAEkBgM,GAAS,KAAMC,IAAYA,GAAQ,SAAWZ,GAAK,QACnFY,GAAQ,eAAiBZ,GAAK,YAAY,GAE1CW,GAAS,KAAKX,EAAI,EAEtC,CAAS,EACMW,EACf,CACA,CC7NA,MAAMpM,SAAS,YAAc,QAAU,KCAvC,IAAI,OAAS,CAAE,EAEX,SAAW,CAAE,EAEjB,SAAS,WAAa,WACtB,SAAS,YAAc,YACvB,SAAS,cAAgB,cAEzB,IAAI,OAAS,CAAE,EACX,UAAY,CAAE,EACd,IAAM,OAAO,WAAe,IAAc,WAAa,MAEvD,KAAO,mEACX,QAASkE,IAAI,EAAG,IAAM,KAAK,OAAQA,IAAI,IAAK,EAAEA,IAC5C,OAAOA,GAAC,EAAI,KAAKA,GAAC,EAClB,UAAU,KAAK,WAAWA,GAAC,CAAC,EAAIA,IAKzB,UAAC,EAAiB,EAAI,GAC/B,UAAU,EAAiB,EAAI,GAE/B,SAAS,QAASsI,GAAK,CACrB,IAAIC,EAAMD,GAAI,OAEd,GAAIC,EAAM,EAAI,EACZ,MAAM,IAAI,MAAM,gDAAgD,EAKlE,IAAIC,EAAWF,GAAI,QAAQ,GAAG,EAC1BE,IAAa,KAAIA,EAAWD,GAEhC,IAAIE,GAAkBD,IAAaD,EAC/B,EACA,EAAKC,EAAW,EAEpB,MAAO,CAACA,EAAUC,EAAe,CACnC,CAGS,SAAA,WAAYH,GAAK,CACxB,IAAII,EAAO,QAAQJ,EAAG,EAClBE,EAAWE,EAAK,CAAC,EACjBD,GAAkBC,EAAK,CAAC,EAC5B,OAASF,EAAWC,IAAmB,EAAI,EAAKA,EAClD,CAEA,SAAS,YAAaH,GAAKE,EAAUC,EAAiB,CACpD,OAASD,EAAWC,GAAmB,EAAI,EAAKA,CAClD,CAEA,SAAS,YAAaH,GAAK,CACzB,IAAIK,EACAD,EAAO,QAAQJ,EAAG,EAClBE,GAAWE,EAAK,CAAC,EACjBD,GAAkBC,EAAK,CAAC,EAExBE,GAAM,IAAI,IAAI,YAAYN,GAAKE,GAAUC,EAAe,CAAC,EAEzDI,GAAU,EAGVN,GAAME,GAAkB,EACxBD,GAAW,EACXA,GAEAxI,GACJ,IAAKA,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EACxB2I,EACG,UAAUL,GAAI,WAAWtI,EAAC,CAAC,GAAK,GAChC,UAAUsI,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,GACpC,UAAUsI,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACrC,UAAUsI,GAAI,WAAWtI,GAAI,CAAC,CAAC,EACjC4I,GAAIC,IAAS,EAAKF,GAAO,GAAM,IAC/BC,GAAIC,IAAS,EAAKF,GAAO,EAAK,IAC9BC,GAAIC,IAAS,EAAIF,EAAM,IAGzB,OAAIF,KAAoB,IACtBE,EACG,UAAUL,GAAI,WAAWtI,EAAC,CAAC,GAAK,EAChC,UAAUsI,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACvC4I,GAAIC,IAAS,EAAIF,EAAM,KAGrBF,KAAoB,IACtBE,EACG,UAAUL,GAAI,WAAWtI,EAAC,CAAC,GAAK,GAChC,UAAUsI,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACpC,UAAUsI,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACvC4I,GAAIC,IAAS,EAAKF,GAAO,EAAK,IAC9BC,GAAIC,IAAS,EAAIF,EAAM,KAGlBC,EACT,CAEA,SAAS,gBAAiBE,GAAK,CAC7B,OAAO,OAAOA,IAAO,GAAK,EAAI,EAC5B,OAAOA,IAAO,GAAK,EAAI,EACvB,OAAOA,IAAO,EAAI,EAAI,EACtB,OAAOA,GAAM,EAAI,CACrB,CAEA,SAAS,YAAaC,GAAOC,EAAOC,EAAK,CAGvC,QAFIN,GACAO,GAAS,CAAE,EACNlJ,GAAIgJ,EAAOhJ,GAAIiJ,EAAKjJ,IAAK,EAChC2I,IACII,GAAM/I,EAAC,GAAK,GAAM,WAClB+I,GAAM/I,GAAI,CAAC,GAAK,EAAK,QACtB+I,GAAM/I,GAAI,CAAC,EAAI,KAClBkJ,GAAO,KAAK,gBAAgBP,EAAG,CAAC,EAElC,OAAOO,GAAO,KAAK,EAAE,CACvB,CAEA,SAAS,cAAeH,GAAO,CAQ7B,QAPIJ,EACAJ,EAAMQ,GAAM,OACZI,GAAaZ,EAAM,EACnBa,GAAQ,CAAE,EACVC,GAAiB,MAGZrJ,GAAI,EAAGsJ,GAAOf,EAAMY,GAAYnJ,GAAIsJ,GAAMtJ,IAAKqJ,GACtDD,GAAM,KAAK,YAAYL,GAAO/I,GAAIA,GAAIqJ,GAAkBC,GAAOA,GAAQtJ,GAAIqJ,EAAe,CAAC,EAI7F,OAAIF,KAAe,GACjBR,EAAMI,GAAMR,EAAM,CAAC,EACnBa,GAAM,KACJ,OAAOT,GAAO,CAAC,EACf,OAAQA,GAAO,EAAK,EAAI,EACxB,IACD,GACQQ,KAAe,IACxBR,GAAOI,GAAMR,EAAM,CAAC,GAAK,GAAKQ,GAAMR,EAAM,CAAC,EAC3Ca,GAAM,KACJ,OAAOT,GAAO,EAAE,EAChB,OAAQA,GAAO,EAAK,EAAI,EACxB,OAAQA,GAAO,EAAK,EAAI,EACxB,GACD,GAGIS,GAAM,KAAK,EAAE,CACtB,CAEA,IAAI,QAAU,CAAE,EAEhB,yFAEA,QAAQ,KAAO,SAAU1C,GAAQI,EAAQyC,EAAMC,GAAMC,GAAQ,CAC3D,IAAI5E,GAAG6E,GACHC,GAAQF,GAAS,EAAKD,GAAO,EAC7BI,IAAQ,GAAKD,IAAQ,EACrBE,GAAQD,IAAQ,EAChBE,GAAQ,GACR9J,GAAIuJ,EAAQE,GAAS,EAAK,EAC1BM,GAAIR,EAAO,GAAK,EAChBS,GAAItD,GAAOI,EAAS9G,EAAC,EAOzB,IALAA,IAAK+J,GAELlF,GAAImF,IAAM,GAAM,CAACF,IAAU,EAC3BE,KAAO,CAACF,GACRA,IAASH,GACFG,GAAQ,EAAGjF,GAAKA,GAAI,IAAO6B,GAAOI,EAAS9G,EAAC,EAAGA,IAAK+J,GAAGD,IAAS,EAAG,CAK1E,IAHAJ,GAAI7E,IAAM,GAAM,CAACiF,IAAU,EAC3BjF,KAAO,CAACiF,GACRA,IAASN,GACFM,GAAQ,EAAGJ,GAAKA,GAAI,IAAOhD,GAAOI,EAAS9G,EAAC,EAAGA,IAAK+J,GAAGD,IAAS,EAAG,CAE1E,GAAIjF,KAAM,EACRA,GAAI,EAAIgF,OACH,IAAIhF,KAAM+E,GACf,OAAOF,GAAI,KAAQM,GAAI,GAAK,GAAK,MAEjCN,GAAIA,GAAI,KAAK,IAAI,EAAGF,EAAI,EACxB3E,GAAIA,GAAIgF,GAEV,OAAQG,GAAI,GAAK,GAAKN,GAAI,KAAK,IAAI,EAAG7E,GAAI2E,EAAI,CAChD,EAEA,QAAQ,MAAQ,SAAU9C,GAAQrK,EAAOyK,EAAQyC,GAAMC,GAAMC,GAAQ,CACnE,IAAI5E,GAAG6E,GAAGO,GACNN,GAAQF,GAAS,EAAKD,GAAO,EAC7BI,IAAQ,GAAKD,IAAQ,EACrBE,GAAQD,IAAQ,EAChBM,GAAMV,KAAS,GAAK,KAAK,IAAI,EAAG,GAAG,EAAI,KAAK,IAAI,EAAG,GAAG,EAAI,EAC1DxJ,GAAIuJ,GAAO,EAAKE,GAAS,EACzBM,GAAIR,GAAO,EAAI,GACfS,GAAI3N,EAAQ,GAAMA,IAAU,GAAK,EAAIA,EAAQ,EAAK,EAAI,EAmC1D,IAjCAA,EAAQ,KAAK,IAAIA,CAAK,EAElB,MAAMA,CAAK,GAAKA,IAAU,KAC5BqN,GAAI,MAAMrN,CAAK,EAAI,EAAI,EACvBwI,GAAI+E,KAEJ/E,GAAI,KAAK,MAAM,KAAK,IAAIxI,CAAK,EAAI,KAAK,GAAG,EACrCA,GAAS4N,GAAI,KAAK,IAAI,EAAG,CAACpF,EAAC,GAAK,IAClCA,KACAoF,IAAK,GAEHpF,GAAIgF,IAAS,EACfxN,GAAS6N,GAAKD,GAEd5N,GAAS6N,GAAK,KAAK,IAAI,EAAG,EAAIL,EAAK,EAEjCxN,EAAQ4N,IAAK,IACfpF,KACAoF,IAAK,GAGHpF,GAAIgF,IAASD,IACfF,GAAI,EACJ7E,GAAI+E,IACK/E,GAAIgF,IAAS,GACtBH,IAAMrN,EAAQ4N,GAAK,GAAK,KAAK,IAAI,EAAGT,EAAI,EACxC3E,GAAIA,GAAIgF,KAERH,GAAIrN,EAAQ,KAAK,IAAI,EAAGwN,GAAQ,CAAC,EAAI,KAAK,IAAI,EAAGL,EAAI,EACrD3E,GAAI,IAID2E,IAAQ,EAAG9C,GAAOI,EAAS9G,EAAC,EAAI0J,GAAI,IAAM1J,IAAK+J,GAAGL,IAAK,IAAKF,IAAQ,EAAG,CAI9E,IAFA3E,GAAKA,IAAK2E,GAAQE,GAClBC,IAAQH,GACDG,GAAO,EAAGjD,GAAOI,EAAS9G,EAAC,EAAI6E,GAAI,IAAM7E,IAAK+J,GAAGlF,IAAK,IAAK8E,IAAQ,EAAG,CAE7EjD,GAAOI,EAAS9G,GAAI+J,EAAC,GAAKC,GAAI,GAChC,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOC,SAAUG,GAAS,CAEnB,MAAMC,EAAS,SACTC,EAAY,QACZC,GACH,OAAO,QAAW,YAAc,OAAO,OAAO,KAAW,WACtD,OAAO,IAAO,4BAA4B,EAC1C,KAENH,GAAQ,OAASI,GACjBJ,GAAQ,WAAaK,GACrBL,GAAQ,kBAAoB,GAE5B,MAAMM,GAAe,WACrBN,GAAQ,WAAaM,GACrB,KAAM,CAAE,WAAYC,GAAkB,YAAaC,GAAmB,kBAAmBC,EAAuB,EAAK,WAgBrHL,GAAO,oBAAsBM,GAAmB,EAE5C,CAACN,GAAO,qBAAuB,OAAO,QAAY,KAClD,OAAO,QAAQ,OAAU,YAC3B,QAAQ,MACN,+IAED,EAGH,SAASM,IAAqB,CAE5B,GAAI,CACF,MAAMjC,GAAM,IAAI8B,GAAiB,CAAC,EAC5B1H,GAAQ,CAAE,IAAK,UAAY,CAAE,MAAO,GAAE,CAAI,EAChD,cAAO,eAAeA,GAAO0H,GAAiB,SAAS,EACvD,OAAO,eAAe9B,GAAK5F,EAAK,EACzB4F,GAAI,QAAU,EACtB,MAAW,CACV,MAAO,EACZ,CACA,CAEC,OAAO,eAAe2B,GAAO,UAAW,SAAU,CAChD,WAAY,GACZ,IAAK,UAAY,CACf,GAAKA,GAAO,SAAS,IAAI,EACzB,OAAO,KAAK,MACjB,CACA,CAAE,EAED,OAAO,eAAeA,GAAO,UAAW,SAAU,CAChD,WAAY,GACZ,IAAK,UAAY,CACf,GAAKA,GAAO,SAAS,IAAI,EACzB,OAAO,KAAK,UACjB,CACA,CAAE,EAED,SAASO,GAAcC,GAAQ,CAC7B,GAAIA,GAASN,GACX,MAAM,IAAI,WAAW,cAAgBM,GAAS,gCAAgC,EAGhF,MAAMC,GAAM,IAAIN,GAAiBK,EAAM,EACvC,cAAO,eAAeC,GAAKT,GAAO,SAAS,EACpCS,EACV,CAYC,SAAST,GAAQU,GAAKC,GAAkBH,GAAQ,CAE9C,GAAI,OAAOE,IAAQ,SAAU,CAC3B,GAAI,OAAOC,IAAqB,SAC9B,MAAM,IAAI,UACR,oEACT,EAEK,OAAOC,GAAYF,EAAG,CAC3B,CACG,OAAOG,GAAKH,GAAKC,GAAkBH,EAAM,CAC5C,CAECR,GAAO,SAAW,KAElB,SAASa,GAAM/O,GAAO6O,GAAkBH,GAAQ,CAC9C,GAAI,OAAO1O,IAAU,SACnB,OAAOgP,GAAWhP,GAAO6O,EAAgB,EAG3C,GAAIP,GAAkB,OAAOtO,EAAK,EAChC,OAAOiP,GAAcjP,EAAK,EAG5B,GAAIA,IAAS,KACX,MAAM,IAAI,UACR,kHAC0C,OAAOA,EACxD,EAQG,GALIkP,GAAWlP,GAAOsO,EAAiB,GAClCtO,IAASkP,GAAWlP,GAAM,OAAQsO,EAAiB,GAIpD,OAAOC,GAA4B,MAClCW,GAAWlP,GAAOuO,EAAuB,GACzCvO,IAASkP,GAAWlP,GAAM,OAAQuO,EAAuB,GAC5D,OAAOY,GAAgBnP,GAAO6O,GAAkBH,EAAM,EAGxD,GAAI,OAAO1O,IAAU,SACnB,MAAM,IAAI,UACR,uEACP,EAGG,MAAMyF,GAAUzF,GAAM,SAAWA,GAAM,QAAS,EAChD,GAAIyF,IAAW,MAAQA,KAAYzF,GACjC,OAAOkO,GAAO,KAAKzI,GAASoJ,GAAkBH,EAAM,EAGtD,MAAMU,GAAIC,GAAWrP,EAAK,EAC1B,GAAIoP,GAAG,OAAOA,GAEd,GAAI,OAAO,OAAW,KAAe,OAAO,aAAe,MACvD,OAAOpP,GAAM,OAAO,WAAW,GAAM,WACvC,OAAOkO,GAAO,KAAKlO,GAAM,OAAO,WAAW,EAAE,QAAQ,EAAG6O,GAAkBH,EAAM,EAGlF,MAAM,IAAI,UACR,kHAC0C,OAAO1O,EACtD,CACA,CAUCkO,GAAO,KAAO,SAAUlO,GAAO6O,GAAkBH,GAAQ,CACvD,OAAOK,GAAK/O,GAAO6O,GAAkBH,EAAM,CAC5C,EAID,OAAO,eAAeR,GAAO,UAAWG,GAAiB,SAAS,EAClE,OAAO,eAAeH,GAAQG,EAAgB,EAE9C,SAASiB,GAAYjG,GAAM,CACzB,GAAI,OAAOA,IAAS,SAClB,MAAM,IAAI,UAAU,wCAAwC,EACvD,GAAIA,GAAO,EAChB,MAAM,IAAI,WAAW,cAAgBA,GAAO,gCAAgC,CAEjF,CAEC,SAASkG,GAAOlG,GAAMmG,GAAMC,GAAU,CAEpC,OADAH,GAAWjG,EAAI,EACXA,IAAQ,EACHoF,GAAapF,EAAI,EAEtBmG,KAAS,OAIJ,OAAOC,IAAa,SACvBhB,GAAapF,EAAI,EAAE,KAAKmG,GAAMC,EAAQ,EACtChB,GAAapF,EAAI,EAAE,KAAKmG,EAAI,EAE3Bf,GAAapF,EAAI,CAC3B,CAMC6E,GAAO,MAAQ,SAAU7E,GAAMmG,GAAMC,GAAU,CAC7C,OAAOF,GAAMlG,GAAMmG,GAAMC,EAAQ,CAClC,EAED,SAASX,GAAazF,GAAM,CAC1B,OAAAiG,GAAWjG,EAAI,EACRoF,GAAapF,GAAO,EAAI,EAAIqG,GAAQrG,EAAI,EAAI,CAAC,CACvD,CAKC6E,GAAO,YAAc,SAAU7E,GAAM,CACnC,OAAOyF,GAAYzF,EAAI,CACxB,EAID6E,GAAO,gBAAkB,SAAU7E,GAAM,CACvC,OAAOyF,GAAYzF,EAAI,CACxB,EAED,SAAS2F,GAAYW,GAAQF,GAAU,CAKrC,IAJI,OAAOA,IAAa,UAAYA,KAAa,MAC/CA,GAAW,QAGT,CAACvB,GAAO,WAAWuB,EAAQ,EAC7B,MAAM,IAAI,UAAU,qBAAuBA,EAAQ,EAGrD,MAAMf,GAASkB,GAAWD,GAAQF,EAAQ,EAAI,EAC9C,IAAId,GAAMF,GAAaC,EAAM,EAE7B,MAAMmB,GAASlB,GAAI,MAAMgB,GAAQF,EAAQ,EAEzC,OAAII,KAAWnB,KAIbC,GAAMA,GAAI,MAAM,EAAGkB,EAAM,GAGpBlB,EACV,CAEC,SAASmB,GAAevF,GAAO,CAC7B,MAAMmE,GAASnE,GAAM,OAAS,EAAI,EAAImF,GAAQnF,GAAM,MAAM,EAAI,EACxDoE,GAAMF,GAAaC,EAAM,EAC/B,QAAS/K,GAAI,EAAGA,GAAI+K,GAAQ/K,IAAK,EAC/BgL,GAAIhL,EAAC,EAAI4G,GAAM5G,EAAC,EAAI,IAEtB,OAAOgL,EACV,CAEC,SAASM,GAAec,GAAW,CACjC,GAAIb,GAAWa,GAAW1B,EAAgB,EAAG,CAC3C,MAAM2B,GAAO,IAAI3B,GAAiB0B,EAAS,EAC3C,OAAOZ,GAAgBa,GAAK,OAAQA,GAAK,WAAYA,GAAK,UAAU,CACzE,CACG,OAAOF,GAAcC,EAAS,CACjC,CAEC,SAASZ,GAAiB5E,GAAO0F,GAAYvB,GAAQ,CACnD,GAAIuB,GAAa,GAAK1F,GAAM,WAAa0F,GACvC,MAAM,IAAI,WAAW,sCAAsC,EAG7D,GAAI1F,GAAM,WAAa0F,IAAcvB,IAAU,GAC7C,MAAM,IAAI,WAAW,sCAAsC,EAG7D,IAAIC,GACJ,OAAIsB,KAAe,QAAavB,KAAW,OACzCC,GAAM,IAAIN,GAAiB9D,EAAK,EACvBmE,KAAW,OACpBC,GAAM,IAAIN,GAAiB9D,GAAO0F,EAAU,EAE5CtB,GAAM,IAAIN,GAAiB9D,GAAO0F,GAAYvB,EAAM,EAItD,OAAO,eAAeC,GAAKT,GAAO,SAAS,EAEpCS,EACV,CAEC,SAASU,GAAYlJ,GAAK,CACxB,GAAI+H,GAAO,SAAS/H,EAAG,EAAG,CACxB,MAAM+F,GAAMwD,GAAQvJ,GAAI,MAAM,EAAI,EAC5BwI,GAAMF,GAAavC,EAAG,EAE5B,OAAIyC,GAAI,SAAW,GAInBxI,GAAI,KAAKwI,GAAK,EAAG,EAAGzC,EAAG,EAChByC,EACZ,CAEG,GAAIxI,GAAI,SAAW,OACjB,OAAI,OAAOA,GAAI,QAAW,UAAY+J,GAAY/J,GAAI,MAAM,EACnDsI,GAAa,CAAC,EAEhBqB,GAAc3J,EAAG,EAG1B,GAAIA,GAAI,OAAS,UAAY,MAAM,QAAQA,GAAI,IAAI,EACjD,OAAO2J,GAAc3J,GAAI,IAAI,CAElC,CAEC,SAASuJ,GAAShB,GAAQ,CAGxB,GAAIA,IAAUN,GACZ,MAAM,IAAI,WAAW,0DACaA,GAAa,SAAS,EAAE,EAAI,QAAQ,EAExE,OAAOM,GAAS,CACnB,CAEC,SAASP,GAAYO,GAAQ,CAC3B,MAAI,CAACA,IAAUA,KACbA,GAAS,GAEJR,GAAO,MAAM,CAACQ,EAAM,CAC9B,CAECR,GAAO,SAAW,SAAmBkB,GAAG,CACtC,OAAOA,IAAK,MAAQA,GAAE,YAAc,IAClCA,KAAMlB,GAAO,SAChB,EAEDA,GAAO,QAAU,SAAkBiC,GAAGf,GAAG,CAGvC,GAFIF,GAAWiB,GAAG9B,EAAgB,IAAG8B,GAAIjC,GAAO,KAAKiC,GAAGA,GAAE,OAAQA,GAAE,UAAU,GAC1EjB,GAAWE,GAAGf,EAAgB,IAAGe,GAAIlB,GAAO,KAAKkB,GAAGA,GAAE,OAAQA,GAAE,UAAU,GAC1E,CAAClB,GAAO,SAASiC,EAAC,GAAK,CAACjC,GAAO,SAASkB,EAAC,EAC3C,MAAM,IAAI,UACR,uEACP,EAGG,GAAIe,KAAMf,GAAG,MAAO,GAEpB,IAAIrK,GAAIoL,GAAE,OACNpK,GAAIqJ,GAAE,OAEV,QAASzL,GAAI,EAAGuI,GAAM,KAAK,IAAInH,GAAGgB,EAAC,EAAGpC,GAAIuI,GAAK,EAAEvI,GAC/C,GAAIwM,GAAExM,EAAC,IAAMyL,GAAEzL,EAAC,EAAG,CACjBoB,GAAIoL,GAAExM,EAAC,EACPoC,GAAIqJ,GAAEzL,EAAC,EACP,KACP,CAGG,OAAIoB,GAAIgB,GAAU,GACdA,GAAIhB,GAAU,EACX,CACR,EAEDmJ,GAAO,WAAa,SAAqBuB,GAAU,CACjD,OAAQ,OAAOA,EAAQ,EAAE,YAAa,EAAA,CACpC,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,MAAO,GACT,QACE,MAAO,EACd,CACE,EAEDvB,GAAO,OAAS,SAAiBkC,GAAM1B,GAAQ,CAC7C,GAAI,CAAC,MAAM,QAAQ0B,EAAI,EACrB,MAAM,IAAI,UAAU,6CAA6C,EAGnE,GAAIA,GAAK,SAAW,EAClB,OAAOlC,GAAO,MAAM,CAAC,EAGvB,IAAIvK,GACJ,GAAI+K,KAAW,OAEb,IADAA,GAAS,EACJ/K,GAAI,EAAGA,GAAIyM,GAAK,OAAQ,EAAEzM,GAC7B+K,IAAU0B,GAAKzM,EAAC,EAAE,OAItB,MAAM0G,GAAS6D,GAAO,YAAYQ,EAAM,EACxC,IAAI2B,GAAM,EACV,IAAK1M,GAAI,EAAGA,GAAIyM,GAAK,OAAQ,EAAEzM,GAAG,CAChC,IAAIgL,GAAMyB,GAAKzM,EAAC,EAChB,GAAIuL,GAAWP,GAAKN,EAAgB,EAC9BgC,GAAM1B,GAAI,OAAStE,GAAO,QACvB6D,GAAO,SAASS,EAAG,IAAGA,GAAMT,GAAO,KAAKS,EAAG,GAChDA,GAAI,KAAKtE,GAAQgG,EAAG,GAEpBhC,GAAiB,UAAU,IAAI,KAC7BhE,GACAsE,GACA0B,EACD,UAEOnC,GAAO,SAASS,EAAG,EAG7BA,GAAI,KAAKtE,GAAQgG,EAAG,MAFpB,OAAM,IAAI,UAAU,6CAA6C,EAInEA,IAAO1B,GAAI,MAChB,CACG,OAAOtE,EACR,EAED,SAASuF,GAAYD,GAAQF,GAAU,CACrC,GAAIvB,GAAO,SAASyB,EAAM,EACxB,OAAOA,GAAO,OAEhB,GAAIrB,GAAkB,OAAOqB,EAAM,GAAKT,GAAWS,GAAQrB,EAAiB,EAC1E,OAAOqB,GAAO,WAEhB,GAAI,OAAOA,IAAW,SACpB,MAAM,IAAI,UACR,2FACmB,OAAOA,EACjC,EAGG,MAAMzD,GAAMyD,GAAO,OACbW,GAAa,UAAU,OAAS,GAAK,UAAU,CAAC,IAAM,GAC5D,GAAI,CAACA,IAAapE,KAAQ,EAAG,MAAO,GAGpC,IAAIqE,GAAc,GAClB,OACE,OAAQd,GAAQ,CACd,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOvD,GACT,IAAK,OACL,IAAK,QACH,OAAOsE,GAAYb,EAAM,EAAE,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOzD,GAAM,EACf,IAAK,MACH,OAAOA,KAAQ,EACjB,IAAK,SACH,OAAOuE,GAAcd,EAAM,EAAE,OAC/B,QACE,GAAIY,GACF,OAAOD,GAAY,GAAKE,GAAYb,EAAM,EAAE,OAE9CF,IAAY,GAAKA,IAAU,YAAa,EACxCc,GAAc,EACvB,CAEA,CACCrC,GAAO,WAAa0B,GAEpB,SAASc,GAAcjB,GAAU9C,GAAOC,GAAK,CAC3C,IAAI2D,GAAc,GA8BlB,IArBI5D,KAAU,QAAaA,GAAQ,KACjCA,GAAQ,GAINA,GAAQ,KAAK,UAIbC,KAAQ,QAAaA,GAAM,KAAK,UAClCA,GAAM,KAAK,QAGTA,IAAO,KAKXA,MAAS,EACTD,MAAW,EAEPC,IAAOD,IACT,MAAO,GAKT,IAFK8C,KAAUA,GAAW,UAGxB,OAAQA,GAAQ,CACd,IAAK,MACH,OAAOkB,GAAS,KAAMhE,GAAOC,EAAG,EAElC,IAAK,OACL,IAAK,QACH,OAAOgE,GAAU,KAAMjE,GAAOC,EAAG,EAEnC,IAAK,QACH,OAAOiE,GAAW,KAAMlE,GAAOC,EAAG,EAEpC,IAAK,SACL,IAAK,SACH,OAAOkE,GAAY,KAAMnE,GAAOC,EAAG,EAErC,IAAK,SACH,OAAOmE,GAAY,KAAMpE,GAAOC,EAAG,EAErC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOoE,GAAa,KAAMrE,GAAOC,EAAG,EAEtC,QACE,GAAI2D,GAAa,MAAM,IAAI,UAAU,qBAAuBd,EAAQ,EACpEA,IAAYA,GAAW,IAAI,YAAa,EACxCc,GAAc,EACvB,CAEA,CAQCrC,GAAO,UAAU,UAAY,GAE7B,SAAS+C,GAAM7B,GAAG8B,GAAG7D,GAAG,CACtB,MAAM1J,GAAIyL,GAAE8B,EAAC,EACb9B,GAAE8B,EAAC,EAAI9B,GAAE/B,EAAC,EACV+B,GAAE/B,EAAC,EAAI1J,EACV,CAECuK,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAMhC,GAAM,KAAK,OACjB,GAAIA,GAAM,IAAM,EACd,MAAM,IAAI,WAAW,2CAA2C,EAElE,QAASvI,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EAC5BsN,GAAK,KAAMtN,GAAGA,GAAI,CAAC,EAErB,OAAO,IACR,EAEDuK,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAMhC,GAAM,KAAK,OACjB,GAAIA,GAAM,IAAM,EACd,MAAM,IAAI,WAAW,2CAA2C,EAElE,QAASvI,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EAC5BsN,GAAK,KAAMtN,GAAGA,GAAI,CAAC,EACnBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EAEzB,OAAO,IACR,EAEDuK,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAMhC,GAAM,KAAK,OACjB,GAAIA,GAAM,IAAM,EACd,MAAM,IAAI,WAAW,2CAA2C,EAElE,QAASvI,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EAC5BsN,GAAK,KAAMtN,GAAGA,GAAI,CAAC,EACnBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EACvBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EACvBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EAEzB,OAAO,IACR,EAEDuK,GAAO,UAAU,SAAW,UAAqB,CAC/C,MAAMQ,GAAS,KAAK,OACpB,OAAIA,KAAW,EAAU,GACrB,UAAU,SAAW,EAAUkC,GAAU,KAAM,EAAGlC,EAAM,EACrDgC,GAAa,MAAM,KAAM,SAAS,CAC1C,EAEDxC,GAAO,UAAU,eAAiBA,GAAO,UAAU,SAEnDA,GAAO,UAAU,OAAS,SAAiBkB,GAAG,CAC5C,GAAI,CAAClB,GAAO,SAASkB,EAAC,EAAG,MAAM,IAAI,UAAU,2BAA2B,EACxE,OAAI,OAASA,GAAU,GAChBlB,GAAO,QAAQ,KAAMkB,EAAC,IAAM,CACpC,EAEDlB,GAAO,UAAU,QAAU,UAAoB,CAC7C,IAAIiD,GAAM,GACV,MAAMC,GAAMtD,GAAQ,kBACpB,OAAAqD,GAAM,KAAK,SAAS,MAAO,EAAGC,EAAG,EAAE,QAAQ,UAAW,KAAK,EAAE,KAAM,EAC/D,KAAK,OAASA,KAAKD,IAAO,SACvB,WAAaA,GAAM,GAC3B,EACGlD,KACFC,GAAO,UAAUD,EAAmB,EAAIC,GAAO,UAAU,SAG3DA,GAAO,UAAU,QAAU,SAAkBrO,GAAQ8M,GAAOC,GAAKyE,GAAWC,GAAS,CAInF,GAHIpC,GAAWrP,GAAQwO,EAAgB,IACrCxO,GAASqO,GAAO,KAAKrO,GAAQA,GAAO,OAAQA,GAAO,UAAU,GAE3D,CAACqO,GAAO,SAASrO,EAAM,EACzB,MAAM,IAAI,UACR,iFACoB,OAAOA,EAClC,EAgBG,GAbI8M,KAAU,SACZA,GAAQ,GAENC,KAAQ,SACVA,GAAM/M,GAASA,GAAO,OAAS,GAE7BwR,KAAc,SAChBA,GAAY,GAEVC,KAAY,SACdA,GAAU,KAAK,QAGb3E,GAAQ,GAAKC,GAAM/M,GAAO,QAAUwR,GAAY,GAAKC,GAAU,KAAK,OACtE,MAAM,IAAI,WAAW,oBAAoB,EAG3C,GAAID,IAAaC,IAAW3E,IAASC,GACnC,MAAO,GAET,GAAIyE,IAAaC,GACf,MAAO,GAET,GAAI3E,IAASC,GACX,MAAO,GAQT,GALAD,MAAW,EACXC,MAAS,EACTyE,MAAe,EACfC,MAAa,EAET,OAASzR,GAAQ,MAAO,GAE5B,IAAIkF,GAAIuM,GAAUD,GACdtL,GAAI6G,GAAMD,GACd,MAAMT,GAAM,KAAK,IAAInH,GAAGgB,EAAC,EAEnBwL,GAAW,KAAK,MAAMF,GAAWC,EAAO,EACxCE,GAAa3R,GAAO,MAAM8M,GAAOC,EAAG,EAE1C,QAASjJ,GAAI,EAAGA,GAAIuI,GAAK,EAAEvI,GACzB,GAAI4N,GAAS5N,EAAC,IAAM6N,GAAW7N,EAAC,EAAG,CACjCoB,GAAIwM,GAAS5N,EAAC,EACdoC,GAAIyL,GAAW7N,EAAC,EAChB,KACP,CAGG,OAAIoB,GAAIgB,GAAU,GACdA,GAAIhB,GAAU,EACX,CACR,EAWD,SAAS0M,GAAsBpH,GAAQqH,GAAKzB,GAAYR,GAAUkC,GAAK,CAErE,GAAItH,GAAO,SAAW,EAAG,MAAO,GAmBhC,GAhBI,OAAO4F,IAAe,UACxBR,GAAWQ,GACXA,GAAa,GACJA,GAAa,WACtBA,GAAa,WACJA,GAAa,cACtBA,GAAa,aAEfA,GAAa,CAACA,GACVC,GAAYD,EAAU,IAExBA,GAAa0B,GAAM,EAAKtH,GAAO,OAAS,GAItC4F,GAAa,IAAGA,GAAa5F,GAAO,OAAS4F,IAC7CA,IAAc5F,GAAO,OAAQ,CAC/B,GAAIsH,GAAK,MAAO,GACX1B,GAAa5F,GAAO,OAAS,CACvC,SAAc4F,GAAa,EACtB,GAAI0B,GAAK1B,GAAa,MACjB,OAAO,GASd,GALI,OAAOyB,IAAQ,WACjBA,GAAMxD,GAAO,KAAKwD,GAAKjC,EAAQ,GAI7BvB,GAAO,SAASwD,EAAG,EAErB,OAAIA,GAAI,SAAW,EACV,GAEFE,GAAavH,GAAQqH,GAAKzB,GAAYR,GAAUkC,EAAG,EACrD,GAAI,OAAOD,IAAQ,SAExB,OADAA,GAAMA,GAAM,IACR,OAAOrD,GAAiB,UAAU,SAAY,WAC5CsD,GACKtD,GAAiB,UAAU,QAAQ,KAAKhE,GAAQqH,GAAKzB,EAAU,EAE/D5B,GAAiB,UAAU,YAAY,KAAKhE,GAAQqH,GAAKzB,EAAU,EAGvE2B,GAAavH,GAAQ,CAACqH,EAAG,EAAGzB,GAAYR,GAAUkC,EAAG,EAG9D,MAAM,IAAI,UAAU,sCAAsC,CAC7D,CAEC,SAASC,GAAcrF,GAAKmF,GAAKzB,GAAYR,GAAUkC,GAAK,CAC1D,IAAIE,GAAY,EACZC,GAAYvF,GAAI,OAChBwF,GAAYL,GAAI,OAEpB,GAAIjC,KAAa,SACfA,GAAW,OAAOA,EAAQ,EAAE,YAAa,EACrCA,KAAa,QAAUA,KAAa,SACpCA,KAAa,WAAaA,KAAa,YAAY,CACrD,GAAIlD,GAAI,OAAS,GAAKmF,GAAI,OAAS,EACjC,MAAO,GAETG,GAAY,EACZC,IAAa,EACbC,IAAa,EACb9B,IAAc,CACrB,CAGG,SAAS+B,GAAMrD,GAAKhL,GAAG,CACrB,OAAIkO,KAAc,EACTlD,GAAIhL,EAAC,EAELgL,GAAI,aAAahL,GAAIkO,EAAS,CAE5C,CAEG,IAAIlO,GACJ,GAAIgO,GAAK,CACP,IAAIM,GAAa,GACjB,IAAKtO,GAAIsM,GAAYtM,GAAImO,GAAWnO,KAClC,GAAIqO,GAAKzF,GAAK5I,EAAC,IAAMqO,GAAKN,GAAKO,KAAe,GAAK,EAAItO,GAAIsO,EAAU,GAEnE,GADIA,KAAe,KAAIA,GAAatO,IAChCA,GAAIsO,GAAa,IAAMF,GAAW,OAAOE,GAAaJ,QAEtDI,KAAe,KAAItO,IAAKA,GAAIsO,IAChCA,GAAa,EAGtB,KAEK,KADIhC,GAAa8B,GAAYD,KAAW7B,GAAa6B,GAAYC,IAC5DpO,GAAIsM,GAAYtM,IAAK,EAAGA,KAAK,CAChC,IAAIuO,GAAQ,GACZ,QAASC,GAAI,EAAGA,GAAIJ,GAAWI,KAC7B,GAAIH,GAAKzF,GAAK5I,GAAIwO,EAAC,IAAMH,GAAKN,GAAKS,EAAC,EAAG,CACrCD,GAAQ,GACR,KACX,CAEO,GAAIA,GAAO,OAAOvO,EACzB,CAGG,MAAO,EACV,CAECuK,GAAO,UAAU,SAAW,SAAmBwD,GAAKzB,GAAYR,GAAU,CACxE,OAAO,KAAK,QAAQiC,GAAKzB,GAAYR,EAAQ,IAAM,EACpD,EAEDvB,GAAO,UAAU,QAAU,SAAkBwD,GAAKzB,GAAYR,GAAU,CACtE,OAAOgC,GAAqB,KAAMC,GAAKzB,GAAYR,GAAU,EAAI,CAClE,EAEDvB,GAAO,UAAU,YAAc,SAAsBwD,GAAKzB,GAAYR,GAAU,CAC9E,OAAOgC,GAAqB,KAAMC,GAAKzB,GAAYR,GAAU,EAAK,CACnE,EAED,SAAS2C,GAAUzD,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAC9CjE,GAAS,OAAOA,EAAM,GAAK,EAC3B,MAAM4H,GAAY1D,GAAI,OAASlE,GAC1BiE,IAGHA,GAAS,OAAOA,EAAM,EAClBA,GAAS2D,KACX3D,GAAS2D,KAJX3D,GAAS2D,GAQX,MAAMC,GAAS3C,GAAO,OAElBjB,GAAS4D,GAAS,IACpB5D,GAAS4D,GAAS,GAEpB,IAAI3O,GACJ,IAAKA,GAAI,EAAGA,GAAI+K,GAAQ,EAAE/K,GAAG,CAC3B,MAAM4O,GAAS,SAAS5C,GAAO,OAAOhM,GAAI,EAAG,CAAC,EAAG,EAAE,EACnD,GAAIuM,GAAYqC,EAAM,EAAG,OAAO5O,GAChCgL,GAAIlE,GAAS9G,EAAC,EAAI4O,EACvB,CACG,OAAO5O,EACV,CAEC,SAAS6O,GAAW7D,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAC/C,OAAO+D,GAAWjC,GAAYb,GAAQhB,GAAI,OAASlE,EAAM,EAAGkE,GAAKlE,GAAQiE,EAAM,CAClF,CAEC,SAASgE,GAAY/D,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAChD,OAAO+D,GAAWE,GAAahD,EAAM,EAAGhB,GAAKlE,GAAQiE,EAAM,CAC9D,CAEC,SAASkE,GAAajE,GAAKgB,GAAQlF,GAAQiE,GAAQ,CACjD,OAAO+D,GAAWhC,GAAcd,EAAM,EAAGhB,GAAKlE,GAAQiE,EAAM,CAC/D,CAEC,SAASmE,GAAWlE,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAC/C,OAAO+D,GAAWK,GAAenD,GAAQhB,GAAI,OAASlE,EAAM,EAAGkE,GAAKlE,GAAQiE,EAAM,CACrF,CAECR,GAAO,UAAU,MAAQ,SAAgByB,GAAQlF,GAAQiE,GAAQe,GAAU,CAEzE,GAAIhF,KAAW,OACbgF,GAAW,OACXf,GAAS,KAAK,OACdjE,GAAS,UAEAiE,KAAW,QAAa,OAAOjE,IAAW,SACnDgF,GAAWhF,GACXiE,GAAS,KAAK,OACdjE,GAAS,UAEA,SAASA,EAAM,EACxBA,GAASA,KAAW,EAChB,SAASiE,EAAM,GACjBA,GAASA,KAAW,EAChBe,KAAa,SAAWA,GAAW,UAEvCA,GAAWf,GACXA,GAAS,YAGX,OAAM,IAAI,MACR,yEACP,EAGG,MAAM2D,GAAY,KAAK,OAAS5H,GAGhC,IAFIiE,KAAW,QAAaA,GAAS2D,MAAW3D,GAAS2D,IAEpD1C,GAAO,OAAS,IAAMjB,GAAS,GAAKjE,GAAS,IAAOA,GAAS,KAAK,OACrE,MAAM,IAAI,WAAW,wCAAwC,EAG1DgF,KAAUA,GAAW,QAE1B,IAAIc,GAAc,GAClB,OACE,OAAQd,GAAQ,CACd,IAAK,MACH,OAAO2C,GAAS,KAAMzC,GAAQlF,GAAQiE,EAAM,EAE9C,IAAK,OACL,IAAK,QACH,OAAO8D,GAAU,KAAM7C,GAAQlF,GAAQiE,EAAM,EAE/C,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOgE,GAAW,KAAM/C,GAAQlF,GAAQiE,EAAM,EAEhD,IAAK,SAEH,OAAOkE,GAAY,KAAMjD,GAAQlF,GAAQiE,EAAM,EAEjD,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOmE,GAAU,KAAMlD,GAAQlF,GAAQiE,EAAM,EAE/C,QACE,GAAI6B,GAAa,MAAM,IAAI,UAAU,qBAAuBd,EAAQ,EACpEA,IAAY,GAAKA,IAAU,YAAa,EACxCc,GAAc,EACvB,CAEE,EAEDrC,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAO,CACL,KAAM,SACN,KAAM,MAAM,UAAU,MAAM,KAAK,KAAK,MAAQ,KAAM,CAAC,CAC1D,CACE,EAED,SAAS6C,GAAapC,GAAKhC,GAAOC,GAAK,CACrC,OAAID,KAAU,GAAKC,KAAQ+B,GAAI,OACtBZ,EAAO,cAAcY,EAAG,EAExBZ,EAAO,cAAcY,GAAI,MAAMhC,GAAOC,EAAG,CAAC,CAEtD,CAEC,SAASgE,GAAWjC,GAAKhC,GAAOC,GAAK,CACnCA,GAAM,KAAK,IAAI+B,GAAI,OAAQ/B,EAAG,EAC9B,MAAMmG,GAAM,CAAE,EAEd,IAAIpP,GAAIgJ,GACR,KAAOhJ,GAAIiJ,IAAK,CACd,MAAMoG,GAAYrE,GAAIhL,EAAC,EACvB,IAAIsP,GAAY,KACZC,GAAoBF,GAAY,IAChC,EACCA,GAAY,IACT,EACCA,GAAY,IACT,EACA,EAEZ,GAAIrP,GAAIuP,IAAoBtG,GAAK,CAC/B,IAAIuG,GAAYC,GAAWC,GAAYC,GAEvC,OAAQJ,GAAgB,CACtB,IAAK,GACCF,GAAY,MACdC,GAAYD,IAEd,MACF,IAAK,GACHG,GAAaxE,GAAIhL,GAAI,CAAC,GACjBwP,GAAa,OAAU,MAC1BG,IAAiBN,GAAY,KAAS,EAAOG,GAAa,GACtDG,GAAgB,MAClBL,GAAYK,KAGhB,MACF,IAAK,GACHH,GAAaxE,GAAIhL,GAAI,CAAC,EACtByP,GAAYzE,GAAIhL,GAAI,CAAC,GAChBwP,GAAa,OAAU,MAASC,GAAY,OAAU,MACzDE,IAAiBN,GAAY,KAAQ,IAAOG,GAAa,KAAS,EAAOC,GAAY,GACjFE,GAAgB,OAAUA,GAAgB,OAAUA,GAAgB,SACtEL,GAAYK,KAGhB,MACF,IAAK,GACHH,GAAaxE,GAAIhL,GAAI,CAAC,EACtByP,GAAYzE,GAAIhL,GAAI,CAAC,EACrB0P,GAAa1E,GAAIhL,GAAI,CAAC,GACjBwP,GAAa,OAAU,MAASC,GAAY,OAAU,MAASC,GAAa,OAAU,MACzFC,IAAiBN,GAAY,KAAQ,IAAQG,GAAa,KAAS,IAAOC,GAAY,KAAS,EAAOC,GAAa,GAC/GC,GAAgB,OAAUA,GAAgB,UAC5CL,GAAYK,IAG3B,CACA,CAESL,KAAc,MAGhBA,GAAY,MACZC,GAAmB,GACVD,GAAY,QAErBA,IAAa,MACbF,GAAI,KAAKE,KAAc,GAAK,KAAQ,KAAM,EAC1CA,GAAY,MAASA,GAAY,MAGnCF,GAAI,KAAKE,EAAS,EAClBtP,IAAKuP,EACV,CAEG,OAAOK,GAAsBR,EAAG,CACnC,CAKC,MAAMS,GAAuB,KAE7B,SAASD,GAAuBE,GAAY,CAC1C,MAAMvH,GAAMuH,GAAW,OACvB,GAAIvH,IAAOsH,GACT,OAAO,OAAO,aAAa,MAAM,OAAQC,EAAU,EAIrD,IAAIV,GAAM,GACNpP,GAAI,EACR,KAAOA,GAAIuI,IACT6G,IAAO,OAAO,aAAa,MACzB,OACAU,GAAW,MAAM9P,GAAGA,IAAK6P,EAAoB,CAC9C,EAEH,OAAOT,EACV,CAEC,SAASlC,GAAYlC,GAAKhC,GAAOC,GAAK,CACpC,IAAI8G,GAAM,GACV9G,GAAM,KAAK,IAAI+B,GAAI,OAAQ/B,EAAG,EAE9B,QAASjJ,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GAC7B+P,IAAO,OAAO,aAAa/E,GAAIhL,EAAC,EAAI,GAAI,EAE1C,OAAO+P,EACV,CAEC,SAAS5C,GAAanC,GAAKhC,GAAOC,GAAK,CACrC,IAAI8G,GAAM,GACV9G,GAAM,KAAK,IAAI+B,GAAI,OAAQ/B,EAAG,EAE9B,QAASjJ,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GAC7B+P,IAAO,OAAO,aAAa/E,GAAIhL,EAAC,CAAC,EAEnC,OAAO+P,EACV,CAEC,SAAS/C,GAAUhC,GAAKhC,GAAOC,GAAK,CAClC,MAAMV,GAAMyC,GAAI,QAEZ,CAAChC,IAASA,GAAQ,KAAGA,GAAQ,IAC7B,CAACC,IAAOA,GAAM,GAAKA,GAAMV,MAAKU,GAAMV,IAExC,IAAIyH,GAAM,GACV,QAAShQ,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GAC7BgQ,IAAOC,GAAoBjF,GAAIhL,EAAC,CAAC,EAEnC,OAAOgQ,EACV,CAEC,SAAS3C,GAAcrC,GAAKhC,GAAOC,GAAK,CACtC,MAAMiH,GAAQlF,GAAI,MAAMhC,GAAOC,EAAG,EAClC,IAAImG,GAAM,GAEV,QAASpP,GAAI,EAAGA,GAAIkQ,GAAM,OAAS,EAAGlQ,IAAK,EACzCoP,IAAO,OAAO,aAAac,GAAMlQ,EAAC,EAAKkQ,GAAMlQ,GAAI,CAAC,EAAI,GAAI,EAE5D,OAAOoP,EACV,CAEC7E,GAAO,UAAU,MAAQ,SAAgBvB,GAAOC,GAAK,CACnD,MAAMV,GAAM,KAAK,OACjBS,GAAQ,CAAC,CAACA,GACVC,GAAMA,KAAQ,OAAYV,GAAM,CAAC,CAACU,GAE9BD,GAAQ,GACVA,IAAST,GACLS,GAAQ,IAAGA,GAAQ,IACdA,GAAQT,KACjBS,GAAQT,IAGNU,GAAM,GACRA,IAAOV,GACHU,GAAM,IAAGA,GAAM,IACVA,GAAMV,KACfU,GAAMV,IAGJU,GAAMD,KAAOC,GAAMD,IAEvB,MAAMmH,GAAS,KAAK,SAASnH,GAAOC,EAAG,EAEvC,cAAO,eAAekH,GAAQ5F,GAAO,SAAS,EAEvC4F,EACR,EAKD,SAASC,GAAatJ,GAAQuJ,GAAKtF,GAAQ,CACzC,GAAKjE,GAAS,IAAO,GAAKA,GAAS,EAAG,MAAM,IAAI,WAAW,oBAAoB,EAC/E,GAAIA,GAASuJ,GAAMtF,GAAQ,MAAM,IAAI,WAAW,uCAAuC,CAC1F,CAECR,GAAO,UAAU,WACjBA,GAAO,UAAU,WAAa,SAAqBzD,GAAQmF,GAAYqE,GAAU,CAC/ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IAAUF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAE1D,IAAI8B,GAAM,KAAKjH,EAAM,EACjByJ,GAAM,EACNvQ,GAAI,EACR,KAAO,EAAEA,GAAIiM,KAAesE,IAAO,MACjCxC,IAAO,KAAKjH,GAAS9G,EAAC,EAAIuQ,GAG5B,OAAOxC,EACR,EAEDxD,GAAO,UAAU,WACjBA,GAAO,UAAU,WAAa,SAAqBzD,GAAQmF,GAAYqE,GAAU,CAC/ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IACHF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAG7C,IAAI8B,GAAM,KAAKjH,GAAS,EAAEmF,EAAU,EAChCsE,GAAM,EACV,KAAOtE,GAAa,IAAMsE,IAAO,MAC/BxC,IAAO,KAAKjH,GAAS,EAAEmF,EAAU,EAAIsE,GAGvC,OAAOxC,EACR,EAEDxD,GAAO,UAAU,UACjBA,GAAO,UAAU,UAAY,SAAoBzD,GAAQwJ,GAAU,CACjE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1C,KAAKA,EAAM,CACnB,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1C,KAAKA,EAAM,EAAK,KAAKA,GAAS,CAAC,GAAK,CAC5C,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EACzC,KAAKA,EAAM,GAAK,EAAK,KAAKA,GAAS,CAAC,CAC7C,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,GAExC,KAAKA,EAAM,EACf,KAAKA,GAAS,CAAC,GAAK,EACpB,KAAKA,GAAS,CAAC,GAAK,IACpB,KAAKA,GAAS,CAAC,EAAI,QACzB,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAEzC,KAAKA,EAAM,EAAI,UACnB,KAAKA,GAAS,CAAC,GAAK,GACrB,KAAKA,GAAS,CAAC,GAAK,EACrB,KAAKA,GAAS,CAAC,EAClB,EAEDyD,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0B1J,GAAQ,CACtFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAM8J,GAAKrN,GACT,KAAK,EAAEuD,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GAElB+J,GAAK,KAAK,EAAE/J,EAAM,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB4J,GAAO,GAAK,GAEd,OAAO,OAAOE,EAAE,GAAK,OAAOC,EAAE,GAAK,OAAO,EAAE,EAC/C,CAAE,EAEDtG,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0B1J,GAAQ,CACtFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAM+J,GAAKtN,GAAQ,GAAK,GACtB,KAAK,EAAEuD,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAET8J,GAAK,KAAK,EAAE9J,EAAM,EAAI,GAAK,GAC/B,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB4J,GAEF,OAAQ,OAAOG,EAAE,GAAK,OAAO,EAAE,GAAK,OAAOD,EAAE,CAChD,CAAE,EAEDrG,GAAO,UAAU,UAAY,SAAoBzD,GAAQmF,GAAYqE,GAAU,CAC7ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IAAUF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAE1D,IAAI8B,GAAM,KAAKjH,EAAM,EACjByJ,GAAM,EACNvQ,GAAI,EACR,KAAO,EAAEA,GAAIiM,KAAesE,IAAO,MACjCxC,IAAO,KAAKjH,GAAS9G,EAAC,EAAIuQ,GAE5B,OAAAA,IAAO,IAEHxC,IAAOwC,KAAKxC,IAAO,KAAK,IAAI,EAAG,EAAI9B,EAAU,GAE1C8B,EACR,EAEDxD,GAAO,UAAU,UAAY,SAAoBzD,GAAQmF,GAAYqE,GAAU,CAC7ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IAAUF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAE1D,IAAIjM,GAAIiM,GACJsE,GAAM,EACNxC,GAAM,KAAKjH,GAAS,EAAE9G,EAAC,EAC3B,KAAOA,GAAI,IAAMuQ,IAAO,MACtBxC,IAAO,KAAKjH,GAAS,EAAE9G,EAAC,EAAIuQ,GAE9B,OAAAA,IAAO,IAEHxC,IAAOwC,KAAKxC,IAAO,KAAK,IAAI,EAAG,EAAI9B,EAAU,GAE1C8B,EACR,EAEDxD,GAAO,UAAU,SAAW,SAAmBzD,GAAQwJ,GAAU,CAG/D,OAFAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC3C,KAAKA,EAAM,EAAI,KACZ,IAAO,KAAKA,EAAM,EAAI,GAAK,GADA,KAAKA,EAAM,CAEhD,EAEDyD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrExJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EACjD,MAAMiH,GAAM,KAAKjH,EAAM,EAAK,KAAKA,GAAS,CAAC,GAAK,EAChD,OAAQiH,GAAM,MAAUA,GAAM,WAAaA,EAC5C,EAEDxD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrExJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EACjD,MAAMiH,GAAM,KAAKjH,GAAS,CAAC,EAAK,KAAKA,EAAM,GAAK,EAChD,OAAQiH,GAAM,MAAUA,GAAM,WAAaA,EAC5C,EAEDxD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAEzC,KAAKA,EAAM,EAChB,KAAKA,GAAS,CAAC,GAAK,EACpB,KAAKA,GAAS,CAAC,GAAK,GACpB,KAAKA,GAAS,CAAC,GAAK,EACxB,EAEDyD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAEzC,KAAKA,EAAM,GAAK,GACrB,KAAKA,GAAS,CAAC,GAAK,GACpB,KAAKA,GAAS,CAAC,GAAK,EACpB,KAAKA,GAAS,CAAC,CACnB,EAEDyD,GAAO,UAAU,eAAiBiG,GAAmB,SAAyB1J,GAAQ,CACpFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAMiH,GAAM,KAAKjH,GAAS,CAAC,EACzB,KAAKA,GAAS,CAAC,EAAI,GAAK,EACxB,KAAKA,GAAS,CAAC,EAAI,GAAK,IACvB4J,IAAQ,IAEX,OAAQ,OAAO3C,EAAG,GAAK,OAAO,EAAE,GAC9B,OAAOxK,GACP,KAAK,EAAEuD,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EAAE,CAC7B,CAAE,EAEDyD,GAAO,UAAU,eAAiBiG,GAAmB,SAAyB1J,GAAQ,CACpFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAMiH,IAAOxK,IAAS,IACpB,KAAK,EAAEuD,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAEf,OAAQ,OAAOiH,EAAG,GAAK,OAAO,EAAE,GAC9B,OAAO,KAAK,EAAEjH,EAAM,EAAI,GAAK,GAC7B,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB4J,EAAI,CACT,CAAE,EAEDnG,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,EAAU,KAAK,KAAMvD,GAAQ,GAAM,GAAI,CAAC,CAChD,EAEDyD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,EAAU,KAAK,KAAMvD,GAAQ,GAAO,GAAI,CAAC,CACjD,EAEDyD,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,EAAU,KAAK,KAAMvD,GAAQ,GAAM,GAAI,CAAC,CAChD,EAEDyD,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,EAAU,KAAK,KAAMvD,GAAQ,GAAO,GAAI,CAAC,CACjD,EAED,SAASgK,GAAU9F,GAAK3O,GAAOyK,GAAQuJ,GAAK5C,GAAKsD,GAAK,CACpD,GAAI,CAACxG,GAAO,SAASS,EAAG,EAAG,MAAM,IAAI,UAAU,6CAA6C,EAC5F,GAAI3O,GAAQoR,IAAOpR,GAAQ0U,GAAK,MAAM,IAAI,WAAW,mCAAmC,EACxF,GAAIjK,GAASuJ,GAAMrF,GAAI,OAAQ,MAAM,IAAI,WAAW,oBAAoB,CAC3E,CAECT,GAAO,UAAU,YACjBA,GAAO,UAAU,YAAc,SAAsBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAIxF,GAHAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACxB,CAACqE,GAAU,CACb,MAAMU,GAAW,KAAK,IAAI,EAAG,EAAI/E,EAAU,EAAI,EAC/C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAY+E,GAAU,CAAC,CAC1D,CAEG,IAAIT,GAAM,EACNvQ,GAAI,EAER,IADA,KAAK8G,EAAM,EAAIzK,GAAQ,IAChB,EAAE2D,GAAIiM,KAAesE,IAAO,MACjC,KAAKzJ,GAAS9G,EAAC,EAAK3D,GAAQkU,GAAO,IAGrC,OAAOzJ,GAASmF,EACjB,EAED1B,GAAO,UAAU,YACjBA,GAAO,UAAU,YAAc,SAAsBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAIxF,GAHAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACxB,CAACqE,GAAU,CACb,MAAMU,GAAW,KAAK,IAAI,EAAG,EAAI/E,EAAU,EAAI,EAC/C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAY+E,GAAU,CAAC,CAC1D,CAEG,IAAIhR,GAAIiM,GAAa,EACjBsE,GAAM,EAEV,IADA,KAAKzJ,GAAS9G,EAAC,EAAI3D,GAAQ,IACpB,EAAE2D,IAAK,IAAMuQ,IAAO,MACzB,KAAKzJ,GAAS9G,EAAC,EAAK3D,GAAQkU,GAAO,IAGrC,OAAOzJ,GAASmF,EACjB,EAED1B,GAAO,UAAU,WACjBA,GAAO,UAAU,WAAa,SAAqBlO,GAAOyK,GAAQwJ,GAAU,CAC1E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,IAAM,CAAC,EACvD,KAAKA,EAAM,EAAKzK,GAAQ,IACjByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,CAAC,EACzD,KAAKA,EAAM,EAAKzK,GAAQ,IACxB,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EACvByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,CAAC,EACzD,KAAKA,EAAM,EAAKzK,KAAU,EAC1B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,CAAC,EAC7D,KAAKA,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,EAAM,EAAKzK,GAAQ,IACjByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,CAAC,EAC7D,KAAKA,EAAM,EAAKzK,KAAU,GAC1B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAED,SAASmK,GAAgBjG,GAAK3O,GAAOyK,GAAQiK,GAAKtD,GAAK,CACrDyD,GAAW7U,GAAO0U,GAAKtD,GAAKzC,GAAKlE,GAAQ,CAAC,EAE1C,IAAI8J,GAAK,OAAOvU,GAAQ,OAAO,UAAU,CAAC,EAC1C2O,GAAIlE,IAAQ,EAAI8J,GAChBA,GAAKA,IAAM,EACX5F,GAAIlE,IAAQ,EAAI8J,GAChBA,GAAKA,IAAM,EACX5F,GAAIlE,IAAQ,EAAI8J,GAChBA,GAAKA,IAAM,EACX5F,GAAIlE,IAAQ,EAAI8J,GAChB,IAAIC,GAAK,OAAOxU,IAAS,OAAO,EAAE,EAAI,OAAO,UAAU,CAAC,EACxD,OAAA2O,GAAIlE,IAAQ,EAAI+J,GAChBA,GAAKA,IAAM,EACX7F,GAAIlE,IAAQ,EAAI+J,GAChBA,GAAKA,IAAM,EACX7F,GAAIlE,IAAQ,EAAI+J,GAChBA,GAAKA,IAAM,EACX7F,GAAIlE,IAAQ,EAAI+J,GACT/J,EACV,CAEC,SAASqK,GAAgBnG,GAAK3O,GAAOyK,GAAQiK,GAAKtD,GAAK,CACrDyD,GAAW7U,GAAO0U,GAAKtD,GAAKzC,GAAKlE,GAAQ,CAAC,EAE1C,IAAI8J,GAAK,OAAOvU,GAAQ,OAAO,UAAU,CAAC,EAC1C2O,GAAIlE,GAAS,CAAC,EAAI8J,GAClBA,GAAKA,IAAM,EACX5F,GAAIlE,GAAS,CAAC,EAAI8J,GAClBA,GAAKA,IAAM,EACX5F,GAAIlE,GAAS,CAAC,EAAI8J,GAClBA,GAAKA,IAAM,EACX5F,GAAIlE,GAAS,CAAC,EAAI8J,GAClB,IAAIC,GAAK,OAAOxU,IAAS,OAAO,EAAE,EAAI,OAAO,UAAU,CAAC,EACxD,OAAA2O,GAAIlE,GAAS,CAAC,EAAI+J,GAClBA,GAAKA,IAAM,EACX7F,GAAIlE,GAAS,CAAC,EAAI+J,GAClBA,GAAKA,IAAM,EACX7F,GAAIlE,GAAS,CAAC,EAAI+J,GAClBA,GAAKA,IAAM,EACX7F,GAAIlE,EAAM,EAAI+J,GACP/J,GAAS,CACnB,CAECyD,GAAO,UAAU,iBAAmBiG,GAAmB,SAA2BnU,GAAOyK,GAAS,EAAG,CACnG,OAAOmK,GAAe,KAAM5U,GAAOyK,GAAQ,OAAO,CAAC,EAAG,OAAO,oBAAoB,CAAC,CACrF,CAAE,EAEDyD,GAAO,UAAU,iBAAmBiG,GAAmB,SAA2BnU,GAAOyK,GAAS,EAAG,CACnG,OAAOqK,GAAe,KAAM9U,GAAOyK,GAAQ,OAAO,CAAC,EAAG,OAAO,oBAAoB,CAAC,CACrF,CAAE,EAEDyD,GAAO,UAAU,WAAa,SAAqBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAGtF,GAFAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EAChB,CAACwJ,GAAU,CACb,MAAMc,GAAQ,KAAK,IAAI,EAAI,EAAInF,GAAc,CAAC,EAE9C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAYmF,GAAQ,EAAG,CAACA,EAAK,CAChE,CAEG,IAAIpR,GAAI,EACJuQ,GAAM,EACNc,GAAM,EAEV,IADA,KAAKvK,EAAM,EAAIzK,GAAQ,IAChB,EAAE2D,GAAIiM,KAAesE,IAAO,MAC7BlU,GAAQ,GAAKgV,KAAQ,GAAK,KAAKvK,GAAS9G,GAAI,CAAC,IAAM,IACrDqR,GAAM,GAER,KAAKvK,GAAS9G,EAAC,GAAM3D,GAAQkU,IAAQ,GAAKc,GAAM,IAGlD,OAAOvK,GAASmF,EACjB,EAED1B,GAAO,UAAU,WAAa,SAAqBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAGtF,GAFAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EAChB,CAACwJ,GAAU,CACb,MAAMc,GAAQ,KAAK,IAAI,EAAI,EAAInF,GAAc,CAAC,EAE9C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAYmF,GAAQ,EAAG,CAACA,EAAK,CAChE,CAEG,IAAIpR,GAAIiM,GAAa,EACjBsE,GAAM,EACNc,GAAM,EAEV,IADA,KAAKvK,GAAS9G,EAAC,EAAI3D,GAAQ,IACpB,EAAE2D,IAAK,IAAMuQ,IAAO,MACrBlU,GAAQ,GAAKgV,KAAQ,GAAK,KAAKvK,GAAS9G,GAAI,CAAC,IAAM,IACrDqR,GAAM,GAER,KAAKvK,GAAS9G,EAAC,GAAM3D,GAAQkU,IAAQ,GAAKc,GAAM,IAGlD,OAAOvK,GAASmF,EACjB,EAED1B,GAAO,UAAU,UAAY,SAAoBlO,GAAOyK,GAAQwJ,GAAU,CACxE,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,IAAM,IAAK,EACvDzK,GAAQ,IAAGA,GAAQ,IAAOA,GAAQ,GACtC,KAAKyK,EAAM,EAAKzK,GAAQ,IACjByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,MAAO,EAC/D,KAAKA,EAAM,EAAKzK,GAAQ,IACxB,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EACvByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,MAAO,EAC/D,KAAKA,EAAM,EAAKzK,KAAU,EAC1B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,WAAW,EACvE,KAAKA,EAAM,EAAKzK,GAAQ,IACxB,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GACvByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,WAAW,EACnEzK,GAAQ,IAAGA,GAAQ,WAAaA,GAAQ,GAC5C,KAAKyK,EAAM,EAAKzK,KAAU,GAC1B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0BnU,GAAOyK,GAAS,EAAG,CACjG,OAAOmK,GAAe,KAAM5U,GAAOyK,GAAQ,CAAC,OAAO,oBAAoB,EAAG,OAAO,oBAAoB,CAAC,CACzG,CAAE,EAEDyD,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0BnU,GAAOyK,GAAS,EAAG,CACjG,OAAOqK,GAAe,KAAM9U,GAAOyK,GAAQ,CAAC,OAAO,oBAAoB,EAAG,OAAO,oBAAoB,CAAC,CACzG,CAAE,EAED,SAASwK,GAActG,GAAK3O,GAAOyK,GAAQuJ,GAAK5C,GAAKsD,GAAK,CACxD,GAAIjK,GAASuJ,GAAMrF,GAAI,OAAQ,MAAM,IAAI,WAAW,oBAAoB,EACxE,GAAIlE,GAAS,EAAG,MAAM,IAAI,WAAW,oBAAoB,CAC5D,CAEC,SAASyK,GAAYvG,GAAK3O,GAAOyK,GAAQ0K,GAAclB,GAAU,CAC/D,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IACHgB,GAAatG,GAAK3O,GAAOyK,GAAQ,CAAC,EAEpCuD,EAAU,MAAMW,GAAK3O,GAAOyK,GAAQ0K,GAAc,GAAI,CAAC,EAChD1K,GAAS,CACnB,CAECyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAOiB,GAAW,KAAMlV,GAAOyK,GAAQ,GAAMwJ,EAAQ,CACtD,EAED/F,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAOiB,GAAW,KAAMlV,GAAOyK,GAAQ,GAAOwJ,EAAQ,CACvD,EAED,SAASmB,GAAazG,GAAK3O,GAAOyK,GAAQ0K,GAAclB,GAAU,CAChE,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IACHgB,GAAatG,GAAK3O,GAAOyK,GAAQ,CAAC,EAEpCuD,EAAU,MAAMW,GAAK3O,GAAOyK,GAAQ0K,GAAc,GAAI,CAAC,EAChD1K,GAAS,CACnB,CAECyD,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAOmB,GAAY,KAAMpV,GAAOyK,GAAQ,GAAMwJ,EAAQ,CACvD,EAED/F,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAOmB,GAAY,KAAMpV,GAAOyK,GAAQ,GAAOwJ,EAAQ,CACxD,EAGD/F,GAAO,UAAU,KAAO,SAAerO,GAAQwV,GAAa1I,GAAOC,GAAK,CACtE,GAAI,CAACsB,GAAO,SAASrO,EAAM,EAAG,MAAM,IAAI,UAAU,6BAA6B,EAS/E,GARK8M,KAAOA,GAAQ,GAChB,CAACC,IAAOA,KAAQ,IAAGA,GAAM,KAAK,QAC9ByI,IAAexV,GAAO,SAAQwV,GAAcxV,GAAO,QAClDwV,KAAaA,GAAc,GAC5BzI,GAAM,GAAKA,GAAMD,KAAOC,GAAMD,IAG9BC,KAAQD,IACR9M,GAAO,SAAW,GAAK,KAAK,SAAW,EAAG,MAAO,GAGrD,GAAIwV,GAAc,EAChB,MAAM,IAAI,WAAW,2BAA2B,EAElD,GAAI1I,GAAQ,GAAKA,IAAS,KAAK,OAAQ,MAAM,IAAI,WAAW,oBAAoB,EAChF,GAAIC,GAAM,EAAG,MAAM,IAAI,WAAW,yBAAyB,EAGvDA,GAAM,KAAK,SAAQA,GAAM,KAAK,QAC9B/M,GAAO,OAASwV,GAAczI,GAAMD,KACtCC,GAAM/M,GAAO,OAASwV,GAAc1I,IAGtC,MAAMT,GAAMU,GAAMD,GAElB,OAAI,OAAS9M,IAAU,OAAOwO,GAAiB,UAAU,YAAe,WAEtE,KAAK,WAAWgH,GAAa1I,GAAOC,EAAG,EAEvCyB,GAAiB,UAAU,IAAI,KAC7BxO,GACA,KAAK,SAAS8M,GAAOC,EAAG,EACxByI,EACD,EAGInJ,EACR,EAMDgC,GAAO,UAAU,KAAO,SAAewD,GAAK/E,GAAOC,GAAK6C,GAAU,CAEhE,GAAI,OAAOiC,IAAQ,SAAU,CAS3B,GARI,OAAO/E,IAAU,UACnB8C,GAAW9C,GACXA,GAAQ,EACRC,GAAM,KAAK,QACF,OAAOA,IAAQ,WACxB6C,GAAW7C,GACXA,GAAM,KAAK,QAET6C,KAAa,QAAa,OAAOA,IAAa,SAChD,MAAM,IAAI,UAAU,2BAA2B,EAEjD,GAAI,OAAOA,IAAa,UAAY,CAACvB,GAAO,WAAWuB,EAAQ,EAC7D,MAAM,IAAI,UAAU,qBAAuBA,EAAQ,EAErD,GAAIiC,GAAI,SAAW,EAAG,CACpB,MAAM4D,GAAO5D,GAAI,WAAW,CAAC,GACxBjC,KAAa,QAAU6F,GAAO,KAC/B7F,KAAa,YAEfiC,GAAM4D,GAEf,CACA,MAAc,OAAO5D,IAAQ,SACxBA,GAAMA,GAAM,IACH,OAAOA,IAAQ,YACxBA,GAAM,OAAOA,EAAG,GAIlB,GAAI/E,GAAQ,GAAK,KAAK,OAASA,IAAS,KAAK,OAASC,GACpD,MAAM,IAAI,WAAW,oBAAoB,EAG3C,GAAIA,IAAOD,GACT,OAAO,KAGTA,GAAQA,KAAU,EAClBC,GAAMA,KAAQ,OAAY,KAAK,OAASA,KAAQ,EAE3C8E,KAAKA,GAAM,GAEhB,IAAI/N,GACJ,GAAI,OAAO+N,IAAQ,SACjB,IAAK/N,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GACzB,KAAKA,EAAC,EAAI+N,OAEP,CACL,MAAMmC,GAAQ3F,GAAO,SAASwD,EAAG,EAC7BA,GACAxD,GAAO,KAAKwD,GAAKjC,EAAQ,EACvBvD,GAAM2H,GAAM,OAClB,GAAI3H,KAAQ,EACV,MAAM,IAAI,UAAU,cAAgBwF,GAClC,mCAAmC,EAEvC,IAAK/N,GAAI,EAAGA,GAAIiJ,GAAMD,GAAO,EAAEhJ,GAC7B,KAAKA,GAAIgJ,EAAK,EAAIkH,GAAMlQ,GAAIuI,EAAG,CAEtC,CAEG,OAAO,IACR,EAMD,MAAMqJ,GAAS,CAAE,EACjB,SAASC,GAAGC,GAAKC,GAAYC,GAAM,CACjCJ,GAAOE,EAAG,EAAI,cAAwBE,EAAK,CACzC,aAAe,CACb,MAAO,EAEP,OAAO,eAAe,KAAM,UAAW,CACrC,MAAOD,GAAW,MAAM,KAAM,SAAS,EACvC,SAAU,GACV,aAAc,EACvB,CAAQ,EAGD,KAAK,KAAO,GAAG,KAAK,IAAI,KAAKD,EAAG,IAGhC,KAAK,MAEL,OAAO,KAAK,IACnB,CAEK,IAAI,MAAQ,CACV,OAAOA,EACd,CAEK,IAAI,KAAMzV,GAAO,CACf,OAAO,eAAe,KAAM,OAAQ,CAClC,aAAc,GACd,WAAY,GACZ,MAAAA,GACA,SAAU,EACnB,CAAQ,CACR,CAEK,UAAY,CACV,MAAO,GAAG,KAAK,IAAI,KAAKyV,EAAG,MAAM,KAAK,OAAO,EACpD,CACI,CACJ,CAECD,GAAE,2BACA,SAAUI,GAAM,CACd,OAAIA,GACK,GAAGA,EAAI,+BAGT,gDACR,EAAE,UAAU,EACfJ,GAAE,uBACA,SAAUI,GAAM/F,GAAQ,CACtB,MAAO,QAAQ+F,EAAI,oDAAoD,OAAO/F,EAAM,EACrF,EAAE,SAAS,EACd2F,GAAE,mBACA,SAAUrE,GAAK0E,GAAO3Q,GAAO,CAC3B,IAAI4Q,GAAM,iBAAiB3E,EAAG,qBAC1B4E,GAAW7Q,GACf,OAAI,OAAO,UAAUA,EAAK,GAAK,KAAK,IAAIA,EAAK,EAAI,GAAK,GACpD6Q,GAAWC,GAAsB,OAAO9Q,EAAK,CAAC,EACrC,OAAOA,IAAU,WAC1B6Q,GAAW,OAAO7Q,EAAK,GACnBA,GAAQ,OAAO,CAAC,GAAK,OAAO,EAAE,GAAKA,GAAQ,EAAE,OAAO,CAAC,GAAK,OAAO,EAAE,MACrE6Q,GAAWC,GAAsBD,EAAQ,GAE3CA,IAAY,KAEdD,IAAO,eAAeD,EAAK,cAAcE,EAAQ,GAC1CD,EACR,EAAE,UAAU,EAEf,SAASE,GAAuBtE,GAAK,CACnC,IAAIqB,GAAM,GACNpP,GAAI+N,GAAI,OACZ,MAAM/E,GAAQ+E,GAAI,CAAC,IAAM,IAAM,EAAI,EACnC,KAAO/N,IAAKgJ,GAAQ,EAAGhJ,IAAK,EAC1BoP,GAAM,IAAIrB,GAAI,MAAM/N,GAAI,EAAGA,EAAC,CAAC,GAAGoP,EAAG,GAErC,MAAO,GAAGrB,GAAI,MAAM,EAAG/N,EAAC,CAAC,GAAGoP,EAAG,EAClC,CAKC,SAASkD,GAAatH,GAAKlE,GAAQmF,GAAY,CAC7CwE,GAAe3J,GAAQ,QAAQ,GAC3BkE,GAAIlE,EAAM,IAAM,QAAakE,GAAIlE,GAASmF,EAAU,IAAM,SAC5D0E,GAAY7J,GAAQkE,GAAI,QAAUiB,GAAa,EAAE,CAEtD,CAEC,SAASiF,GAAY7U,GAAO0U,GAAKtD,GAAKzC,GAAKlE,GAAQmF,GAAY,CAC7D,GAAI5P,GAAQoR,IAAOpR,GAAQ0U,GAAK,CAC9B,MAAMxD,GAAI,OAAOwD,IAAQ,SAAW,IAAM,GAC1C,IAAImB,GAEF,MAAInB,KAAQ,GAAKA,KAAQ,OAAO,CAAC,EAC/BmB,GAAQ,OAAO3E,EAAC,WAAWA,EAAC,QAAQtB,GAAa,GAAK,CAAC,GAAGsB,EAAC,GAE3D2E,GAAQ,SAAS3E,EAAC,QAAQtB,GAAa,GAAK,EAAI,CAAC,GAAGsB,EAAC,iBACzCtB,GAAa,GAAK,EAAI,CAAC,GAAGsB,EAAC,GAKrC,IAAIqE,GAAO,iBAAiB,QAASM,GAAO7V,EAAK,CAC5D,CACGiW,GAAYtH,GAAKlE,GAAQmF,EAAU,CACtC,CAEC,SAASwE,GAAgBpU,GAAO4V,GAAM,CACpC,GAAI,OAAO5V,IAAU,SACnB,MAAM,IAAIuV,GAAO,qBAAqBK,GAAM,SAAU5V,EAAK,CAEhE,CAEC,SAASsU,GAAatU,GAAO0O,GAAQwH,GAAM,CACzC,MAAI,KAAK,MAAMlW,EAAK,IAAMA,IACxBoU,GAAepU,GAAOkW,EAAI,EACpB,IAAIX,GAAO,iBAAyB,SAAU,aAAcvV,EAAK,GAGrE0O,GAAS,EACL,IAAI6G,GAAO,yBAGb,IAAIA,GAAO,iBAAyB,SACR,eAA6B7G,EAAM,GACnC1O,EAAK,CAC1C,CAKC,MAAMmW,GAAoB,oBAE1B,SAASC,GAAajF,GAAK,CAMzB,GAJAA,GAAMA,GAAI,MAAM,GAAG,EAAE,CAAC,EAEtBA,GAAMA,GAAI,KAAI,EAAG,QAAQgF,GAAmB,EAAE,EAE1ChF,GAAI,OAAS,EAAG,MAAO,GAE3B,KAAOA,GAAI,OAAS,IAAM,GACxBA,GAAMA,GAAM,IAEd,OAAOA,EACV,CAEC,SAASX,GAAab,GAAQ0G,GAAO,CACnCA,GAAQA,IAAS,IACjB,IAAIpD,GACJ,MAAMvE,GAASiB,GAAO,OACtB,IAAI2G,GAAgB,KACpB,MAAMzC,GAAQ,CAAE,EAEhB,QAASlQ,GAAI,EAAGA,GAAI+K,GAAQ,EAAE/K,GAAG,CAI/B,GAHAsP,GAAYtD,GAAO,WAAWhM,EAAC,EAG3BsP,GAAY,OAAUA,GAAY,MAAQ,CAE5C,GAAI,CAACqD,GAAe,CAElB,GAAIrD,GAAY,MAAQ,EAEjBoD,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAClD,QACX,SAAoBlQ,GAAI,IAAM+K,GAAQ,EAEtB2H,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAClD,QACX,CAGSyC,GAAgBrD,GAEhB,QACT,CAGO,GAAIA,GAAY,MAAQ,EACjBoD,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAClDyC,GAAgBrD,GAChB,QACT,CAGOA,IAAaqD,GAAgB,OAAU,GAAKrD,GAAY,OAAU,KACnE,MAAUqD,KAEJD,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAMpD,GAHAyC,GAAgB,KAGZrD,GAAY,IAAM,CACpB,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KAAKZ,EAAS,CAC3B,SAAgBA,GAAY,KAAO,CAC5B,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KACJZ,IAAa,EAAM,IACnBA,GAAY,GAAO,GACpB,CACR,SAAgBA,GAAY,MAAS,CAC9B,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KACJZ,IAAa,GAAM,IACnBA,IAAa,EAAM,GAAO,IAC1BA,GAAY,GAAO,GACpB,CACR,SAAgBA,GAAY,QAAU,CAC/B,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KACJZ,IAAa,GAAO,IACpBA,IAAa,GAAM,GAAO,IAC1BA,IAAa,EAAM,GAAO,IAC1BA,GAAY,GAAO,GACpB,CACR,KACO,OAAM,IAAI,MAAM,oBAAoB,CAE3C,CAEG,OAAOY,EACV,CAEC,SAASlB,GAAcxB,GAAK,CAC1B,MAAMoF,GAAY,CAAE,EACpB,QAAS5S,GAAI,EAAGA,GAAIwN,GAAI,OAAQ,EAAExN,GAEhC4S,GAAU,KAAKpF,GAAI,WAAWxN,EAAC,EAAI,GAAI,EAEzC,OAAO4S,EACV,CAEC,SAASzD,GAAgB3B,GAAKkF,GAAO,CACnC,IAAIzI,GAAG4G,GAAID,GACX,MAAMgC,GAAY,CAAE,EACpB,QAAS5S,GAAI,EAAGA,GAAIwN,GAAI,QACjB,GAAAkF,IAAS,GAAK,GADW,EAAE1S,GAGhCiK,GAAIuD,GAAI,WAAWxN,EAAC,EACpB6Q,GAAK5G,IAAK,EACV2G,GAAK3G,GAAI,IACT2I,GAAU,KAAKhC,EAAE,EACjBgC,GAAU,KAAK/B,EAAE,EAGnB,OAAO+B,EACV,CAEC,SAAS9F,GAAeU,GAAK,CAC3B,OAAOpD,EAAO,YAAYqI,GAAYjF,EAAG,CAAC,CAC7C,CAEC,SAASsB,GAAY+D,GAAKC,GAAKhM,GAAQiE,GAAQ,CAC7C,IAAI/K,GACJ,IAAKA,GAAI,EAAGA,GAAI+K,IACT,EAAA/K,GAAI8G,IAAUgM,GAAI,QAAY9S,IAAK6S,GAAI,QADtB,EAAE7S,GAExB8S,GAAI9S,GAAI8G,EAAM,EAAI+L,GAAI7S,EAAC,EAEzB,OAAOA,EACV,CAKC,SAASuL,GAAY/I,GAAK+P,GAAM,CAC9B,OAAO/P,cAAe+P,IACnB/P,IAAO,MAAQA,GAAI,aAAe,MAAQA,GAAI,YAAY,MAAQ,MACjEA,GAAI,YAAY,OAAS+P,GAAK,IACrC,CACC,SAAShG,GAAa/J,GAAK,CAEzB,OAAOA,KAAQA,EAClB,CAIC,MAAMyN,GAAuB,UAAY,CACvC,MAAM8C,GAAW,mBACX1M,GAAQ,IAAI,MAAM,GAAG,EAC3B,QAASrG,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAG,CAC3B,MAAMgT,GAAMhT,GAAI,GAChB,QAASwO,GAAI,EAAGA,GAAI,GAAI,EAAEA,GACxBnI,GAAM2M,GAAMxE,EAAC,EAAIuE,GAAS/S,EAAC,EAAI+S,GAASvE,EAAC,CAEhD,CACG,OAAOnI,EACV,EAAK,EAGJ,SAASmK,GAAoByC,GAAI,CAC/B,OAAO,OAAO,OAAW,IAAcC,GAAyBD,EACnE,CAEC,SAASC,IAA0B,CACjC,MAAM,IAAI,MAAM,sBAAsB,CACvC,CACF,GAAG,MAAM,EAET,MAAM,OAAS,OAAO,OAIhB,SAAW,OAAO,OC1yEjB,MAAM,aAAc,CAIvB,OAAO,mBAAoB,CACnB,OAAA,OAAO,OAAW,IACX,OAIApX,QACX,CAMJ,OAAO,KAAKmW,EAAM,CACd,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,gGAAgGA,CAAI,KAAK,EACtH,MAAA,EAAA,CAKX,OAAO,cAAckB,EAAS,CAC1B,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,uGAAuGA,CAAO,KAAK,EAChI,MAAA,EAAA,CAKX,OAAO,YAAYA,EAAS,CACxB,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,qGAAqGA,CAAO,KAAK,EAC9H,MAAA,EAAA,CAKX,OAAO,YAAYA,EAAS,CACxB,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,qGAAqGA,CAAO,KAAK,EAC9H,MAAA,EAAA,CAKX,OAAO,UAAUA,EAAS,CACtB,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,sGAAsGA,CAAO,KAAK,EAC/H,MAAA,EAAA,CAEX,OAAO,OAAOA,EAAS,CACnB,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,8GAA8GA,CAAO,OAAO,CAAA,CAKpJ,OAAO,eAAelB,EAAM,CAGjB,CAEX,OAAO,aAAamB,EAAU,CAC1B,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,wGAAwGA,CAAQ,KAAK,EAClI,OAAA,IAAA,CAEX,OAAO,eAAeA,EAAUvM,EAAM,CAClC,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,0GAA0GuM,CAAQ,KAAK,CAAA,CAE/I,OAAO,UAAUC,EAAMxM,EAAM,CACzB,GAAI,KAAK,OAAS,UACd,MAAM,IAAI,MAAM,qGAAqGwM,CAAI,KAAK,EAC3H,OAAA,QAAQ,OAAO,IAAI,CAAA,CAK9B,OAAO,aAAaC,EAAK,CACd,OAAAA,CAAA,CAKX,OAAO,cAAcC,EAAM,CAChB,OAAAA,CAAA,CAKX,OAAO,QAAQC,EAAQC,EAAM,CACjB,QAAA,KAAKD,EAAS,IAAKC,CAAI,CAAA,CAEnC,OAAO,SAASD,EAAQhO,EAAO,CACnB,QAAA,MAAMgO,EAAS,IAAKhO,CAAK,CAAA,CAErC,OAAO,QAAQgO,EAAQE,EAAS,CACpB,QAAA,KAAKF,EAAS,IAAKE,CAAO,CAAA,CAEtC,OAAO,IAAIC,EAAS,CAChB,QAAQ,IAAIA,CAAO,CAAA,CAEvB,OAAO,KAAKA,EAAS,CACV,OAAAA,CAAA,CAEf,CAIA,cAAc,KAAO,UAWjB,OAAO,OAAW,MAClB,OAAO,OAASpJ,UAGhB,OAAOzO,SAAW,KAAe,OAAO,QAAY,MAC7CA,SAAA,OAAS,QAAQ,SAAS,EAAE,QC1IhC,MAAM,WAAY,CAMrB,OAAO,SAASiS,EAAK,CACjB,OAAOA,IAAQ,MAAQ,OAAOA,GAAQ,QAC9C,CAMI,OAAO,iBAAiBA,EAAK,CACzB,OAAQA,IAAQ,MAAQ,OAAOA,GAAQ,UAAYA,EAAI,OAAY,MAC3E,CAOI,OAAO,OAAO7R,KAAW0X,EAAS,CAC9B,UAAWC,MAAUD,EACjB,UAAWE,MAAQ,OAAO,oBAAoBD,EAAM,EAEhD3X,EAAO4X,EAAI,EAAID,GAAOC,EAAI,CAG1C,CAII,OAAO,iBAAiBrH,EAAM,CAC1B,OAAIA,IAAS,MAAQ,OAAOA,GAAS,SAC1B,OAAO,KAAKA,CAAI,EAAE,IAAKrQ,GAAQqQ,EAAKrQ,CAAG,CAAC,EAGxCqQ,CAEnB,CACA,CC1CO,MAAM,qBAAqB,KAAM,CACpC,IAAI,MAAO,CACP,OAAO,KAAK,YAAY,IAChC,CACI,YAAYkH,EAAS,CACjB,MAAMA,CAAO,EAGT,OAAO,eACP,OAAO,eAAe,KAAM,WAAW,SAAS,EAIhD,KAAK,UAAY,WAAW,SAExC,CACA,CCVO,MAAM,sCAAsC,YAAa,CAC5D,YAAYI,EAAS,CACjB,MAAM,2BAA2BA,EAAQ,SAAS,UAAU,gDAAgD,CACpH,CACA,CCNO,MAAM,2CAA2C,YAAa,CACjE,YAAYC,EAAgB,CACxB,MAAM,oBAAoBA,CAAc,sEAAsE,CACtH,CACA,CCJO,MAAM,2CAA2C,YAAa,CACjE,aAAc,CACV,MAAM,wCAAwC,CACtD,CACA,CCJO,MAAM,gCAAgC,YAAa,CACtD,YAAYC,EAAQ,CAChB,MAAM,mBAAmBA,CAAM,+DAA+D,CACtG,CACA,CCHO,MAAM,qCAAqC,YAAa,CAC3D,YAAYvV,EAAUwV,EAAI,CACtB,MAAO,EACP,MAAMC,GAAgBzV,EAAS,eAAe,OAAO,CAACyI,GAAQiN,GAAQ7O,MAClE6O,GAAO,eAAejN,GAAQ5B,GAAQ,CAAC,EAChC4B,IACR,EAAE,EACL,KAAK,QAAU,+BAA+B+M,CAAE,cAAcxV,EAAS,UAAU,mFAAmF,KAAK,UAAUyV,EAAa,CAAC,YACzM,CACA,CCVO,MAAM,mCAAmC,YAAa,CACzD,YAAYE,EAAW,CACnB,MAAM,UAAUA,CAAS,uIACkE,CACnG,CACA,CCRO,MAAM,iCAAiC,YAAa,CACvD,aAAc,CACV,MAAM,yHAAyH,CACvI,CACA,CCJO,MAAM,wCAAwC,YAAa,CAC9D,YAAYC,EAAQ,CAChB,MAAM,0CAA0CA,EAAO,QAAQ,IAAI,UAAU,CACrF,CACA,CCDO,MAAM,sCAAsC,YAAa,CAC5D,YAAYC,EAAY,CACpB,MAAM,qBAAqB,OAAOA,GAAe,WAC3CA,EAAW,KACXA,EAAW,YAAY,IAAI,0EAC6B,CACtE,CACA,CCPO,MAAM,mCAAmC,YAAa,CACzD,aAAc,CACV,MAAM,yFAAyF,CACvG,CACA,CCJO,MAAM,uCAAuC,YAAa,CAC7D,aAAc,CACV,MAAM,6GAA6G,CAC3H,CACA,CCRO,MAAM,eAAgB,CACzB,OAAO,iBAAiB/R,EAAK,CACzB,OAAO,KAAK,MAAMA,EAAK,gBAAgB,CAC/C,CACI,OAAO,iBAAiBA,EAAK,CACzB,OAAO,KAAK,MAAMA,EAAK,gBAAgB,CAC/C,CACI,OAAO,iBAAiBA,EAAK,CACzB,OAAO,KAAK,MAAMA,EAAK,gBAAgB,CAC/C,CACI,OAAO,qBAAqBA,EAAK,CAC7B,OAAO,KAAK,MAAMA,EAAK,oBAAoB,CACnD,CACI,OAAO,qBAAqBA,EAAK,CAC7B,OAAO,KAAK,MAAMA,EAAK,oBAAoB,CACnD,CACI,OAAO,qBAAqBA,EAAK,CAC7B,OAAO,KAAK,MAAMA,EAAK,oBAAoB,CACnD,CACI,OAAO,qBAAqBA,EAAK,CAC7B,OAAO,KAAK,MAAMA,EAAK,oBAAoB,CACnD,CACI,OAAO,yBAAyBA,EAAK,CACjC,OAAO,KAAK,MAAMA,EAAK,wBAAwB,CACvD,CACI,OAAO,uBAAuBA,EAAK,CAC/B,OAAO,KAAK,MAAMA,EAAK,sBAAsB,CACrD,CACI,OAAO,WAAWA,EAAK,CACnB,OAAO,KAAK,MAAMA,EAAK,UAAU,GAAK,KAAK,MAAMA,EAAK,aAAa,CAC3E,CACI,OAAO,cAAcA,EAAK,CACtB,OAAO,KAAK,MAAMA,EAAK,aAAa,CAC5C,CACI,OAAO,UAAUA,EAAK,CAClB,OAAO,KAAK,MAAMA,EAAK,SAAS,CACxC,CACI,OAAO,qBAAqBA,EAAK,CAC7B,OAAO,KAAK,MAAMA,EAAK,oBAAoB,CACnD,CACI,OAAO,qBAAqBA,EAAK,CAC7B,OAAO,KAAK,MAAMA,EAAK,oBAAoB,CACnD,CACI,OAAO,qBAAqBA,EAAK,CAC7B,OAAO,KAAK,MAAMA,EAAK,oBAAoB,CACnD,CACI,OAAO,eAAeA,EAAK,CACvB,OAAO,KAAK,MAAMA,EAAK,cAAc,CAC7C,CACI,OAAO,wBAAwBA,EAAK,CAChC,OAAQ,OAAOA,GAAQ,YACnB,OAAOA,EAAI,OAAU,YACrB,OAAOA,EAAI,MAAS,YACpB,OAAOA,EAAI,eAAkB,UACzC,CACI,OAAO,eAAeA,EAAK,CACvB,OAAQ,KAAK,MAAMA,EAAK,cAAc,GAAK,KAAK,MAAMA,EAAK,eAAe,CAClF,CACI,OAAO,gBAAgBA,EAAK,CACxB,OAAO,KAAK,MAAMA,EAAK,eAAe,CAC9C,CACI,OAAO,QAAQA,EAAK,CAChB,OAAO,KAAK,MAAMA,EAAK,OAAO,CACtC,CACI,OAAO,QAAQA,EAAK,CAChB,OAAO,KAAK,MAAMA,EAAK,OAAO,CACtC,CACI,OAAO,aAAaA,EAAK,CACrB,OAAO,KAAK,MAAMA,EAAK,YAAY,CAC3C,CACI,OAAO,cAAcA,EAAK,CACtB,OAAO,KAAK,MAAMA,EAAK,aAAa,CAC5C,CACI,OAAO,iBAAiBA,EAAK,CACzB,OAAO,KAAK,MAAMA,EAAK,gBAAgB,CAC/C,CACI,OAAO,kBAAkBA,EAAK,CAC1B,OAAO,KAAK,MAAMA,EAAK,iBAAiB,CAChD,CACI,OAAO,aAAaA,EAAK,CACrB,OAAO,KAAK,MAAMA,EAAK,YAAY,CAC3C,CACI,OAAO,cAAcA,EAAK,CACtB,OAAO,KAAK,MAAMA,EAAK,aAAa,CAC5C,CACI,OAAO,OAAOA,EAAK,CACf,OAAO,KAAK,MAAMA,EAAK,MAAM,CACrC,CACI,OAAO,aAAaA,EAAK,CACrB,OAAO,KAAK,MAAMA,EAAK,YAAY,CAC3C,CACI,OAAO,MAAMA,EAAKyP,EAAM,CACpB,OAAQ,OAAOzP,GAAQ,UACnBA,IAAQ,MACRA,EAAI,aAAa,IACb,OAAO,IAAIyP,CAAI,CAC/B,CACA,CC3FO,MAAM,4BAA4B,YAAa,CAClD,YAAYuC,EAAaC,EAAU,CAC/B,MAAO,EACP,KAAK,YAAcD,EACnB,KAAK,SAAWC,EAChB,KAAK,QACD,sCAAsC,KAAK,gBAAgBD,CAAW,CAAC,eAAoB,KAAK,kBAAkBC,CAAQ,CAAC,EACvI,CACI,gBAAgBvY,EAAQ,CACpB,OAAI,gBAAgB,eAAeA,CAAM,EAC9BA,EAAO,QAAQ,KAEjB,OAAOA,GAAW,YAGlB,YAAY,SAASA,CAAM,GAAK,SAAUA,EAFxCA,EAAO,KAMPA,CAEnB,CACI,kBAAkBuY,EAAU,CACxB,GAAI,CACA,OAAO,KAAK,UAAUA,EAAU,KAAM,CAAC,CACnD,MACkB,CAAA,CACV,MAAO,GAAKA,CACpB,CACA,CChCO,MAAM,oCAAoC,YAAa,CAC1D,YAAYvY,EAAQ,CAChB,MAAO,EACP,KAAK,QAAU,oBAAoB,KAAK,gBAAgBA,CAAM,CAAC,cACvE,CACI,gBAAgBA,EAAQ,CACpB,OAAI,gBAAgB,eAAeA,CAAM,EAC9BA,EAAO,QAAQ,KAEjB,OAAOA,GAAW,YAGlB,YAAY,SAASA,CAAM,GAAK,SAAUA,EAFxCA,EAAO,KAMPA,CAEnB,CACA,CClBO,MAAM,0BAA0B,YAAa,CAChD,YAAYmY,EAAWK,EAAY,CAC/B,MAAM,UAAUL,CAAS,6CAA6CK,CAAU,aAAa,CACrG,CACA,CCJO,MAAM,2CAA2C,YAAa,CACjE,YAAY1N,EAAQ2N,EAAiBC,GAAe,CAChD,MAAM,iCAAiC5N,CAAM,oBAAoB2N,CAAe,kCAAkCC,EAAa,GAAG,CAC1I,CACA,CCJO,MAAM,uCAAuC,YAAa,CAC7D,aAAc,CACV,MAAM,4DAA4D,CAC1E,CACA,CCJO,MAAM,qDAAqD,YAAa,CAC3E,YAAYL,EAAY,CACpB,MAAM,4BAA4B,OAAOA,GAAe,WAClDA,EAAW,KACXA,EAAW,YAAY,IAAI,gGACkE,CAC3G,CACA,CCPO,MAAM,gDAAgD,YAAa,CACtE,aAAc,CACV,MAAM,2HAC8D,CAC5E,CACA,CCLO,MAAM,4CAA4C,YAAa,CAClE,YAAYM,EAAY,CACpB,MAAM,yBAAyBA,CAAU,iGACmB,CACpE,CACA,CCLO,MAAM,+CAA+C,YAAa,CACrE,YAAYN,EAAY,CACpB,MAAM,qBAAqB,OAAOA,GAAe,WAC3CA,EAAW,KACXA,EAAW,YAAY,IAAI,sGAC0C,CACnF,CACA,CCVO,MAAM,qCAAqC,YAAa,CAC3D,YAAYO,EAAgB,CACxB,MAAM,WAAWA,EAAe,IAAI,sCAAsC,CAClF,CACA,CCDO,MAAM,+BAA+B,YAAa,CACrD,YAAYzB,EAAM,CACd,MAAM,gCAAgCA,CAAI,gGACsB,CACxE,CACA,CCJO,MAAM,4CAA4C,YAAa,CAClE,aAAc,CACV,MAAM,uGAAuG,CACrH,CACA,CCRO,MAAM,kCAAkC,YAAa,CACxD,YAAYyB,EAAgB,CACxB,MAAM,WAAWA,EAAe,IAAI,iKACiE,CAC7G,CACA,CCFO,MAAM,oCAAoC,YAAa,CAC1D,YAAYC,EAAcrW,EAAU,CAChC,MAAMqW,CAAY,EAClB,OAAO,eAAe,KAAM,4BAA4B,SAAS,EACjE,KAAK,QAAU,aAAaA,CAAY,uBAAuBrW,EAAS,UAAU,qCAC1F,CACA,CCNO,MAAM,2BAA2B,YAAa,CACjD,YAAYsW,EAAYC,EAAmB,GAAI,CAC3C,MAAM,kBAAkBD,CAAU,mCAC3BC,EAAiB,IAAKlL,IAAM,IAAIA,EAAC,GAAG,EAAE,KAAK,IAAI,CAAC,GAAG,CAClE,CACA,CCLO,MAAM,uCAAuC,YAAa,CAC7D,YAAYmL,EAAYC,EAAa,CACjC,MAAM,GAAGD,CAAU,yEACmBC,CAAW,SAAS,CAClE,CACA,CCLO,MAAM,yCAAyC,YAAa,CAC/D,YAAYnO,EAAQ,CAChB,MAAM,UAAUA,CAAM,gDAAgD,CAC9E,CACA,CCJO,MAAM,iCAAiC,YAAa,CACvD,aAAc,CACV,MAAM,sHACwD,CACtE,CACA,CCLO,MAAM,wCAAwC,YAAa,CAC9D,aAAc,CACV,MAAM,4DAA4D,CAC1E,CACA,CCJO,MAAM,gCAAgC,YAAa,CACtD,YAAYoO,EAAY,CACpB,MAAM,kBAAkBA,CAAU,oEACwB,CAClE,CACA,CCLO,MAAM,mCAAmC,YAAa,CACzD,YAAYC,EAAmB,CAC3B,MAAO,EACHA,EAAkB,SAAW,EAC7B,KAAK,QAAU,aAAaA,EAAkB,CAAC,CAAC,mFAGhD,KAAK,QAAU,aAAaA,EACvB,IAAKC,GAAa,IAAIA,CAAQ,GAAG,EACjC,KAAK,IAAI,CAAC,yFAE3B,CACA,CCZO,MAAM,gDAAgD,YAAa,CACtE,aAAc,CACV,MAAM,uDAAuD,CACrE,CACA,CCPO,MAAM,kCAAkC,YAAa,CACxD,YAAYlB,EAAQmB,EAAUC,GAAU,CACpC,MAAO,EACP,MAAMjD,GAAO,OAAOgD,GAAa,SAAWA,EAAWA,EAAS,KAChE,KAAK,QAAU,cAAchD,EAAI,SAAS6B,EAAO,eAAe,UAAU,IAAIA,EAAO,YAAY,0BAA0BoB,EAAQ,aAC3I,CACA,CCAO,MAAM,iCAAiC,YAAa,CACvD,YAAYF,EAAU,CAClB,MAAM,8GACiDA,EAAS,eAAe,UAAU,IAAIA,EAAS,YAAY,iGAChB,CAC1G,CACA,CCRO,MAAM,yBAAyB,YAAa,CAC/C,YAAYG,EAAOC,EAAYC,GAAa,CASxC,GARA,MAAMA,GACD,SAAQ,EACR,QAAQ,WAAY,EAAE,EACtB,QAAQ,WAAY,EAAE,EACtB,QAAQ,WAAY,EAAE,CAAC,EAC5B,KAAK,MAAQF,EACb,KAAK,WAAaC,EAClB,KAAK,YAAcC,GACfA,GAAa,CACb,KAAM,CAAE,KAAM5P,GACd,GAAG6P,EAAiB,EAAGD,GACvB,YAAY,OAAO,KAAM,CACrB,GAAGC,EACnB,CAAa,CACb,CACA,CACA,CCnBO,MAAM,0CAA0C,YAAa,CAChE,aAAc,CACV,MAAM,kPAEsE,CACpF,CACA,CCNO,MAAM,sCAAsC,YAAa,CAC5D,YAAY7B,EAAS,CACjB,MAAM,mBAAmBA,EAAQ,SAAS,IAAI,uKACmF,CACzI,CACA,CCJO,MAAM,iCAAiC,YAAa,CACvD,YAAY5M,EAAQK,EAAc,CAC9B,MAAM,mBAAmBL,EAAO,YAAY,IAAI,IAAIK,CAAY,+VAGkC,CAC1G,CACA,CCXO,MAAM,wCAAwC,YAAa,CAC9D,aAAc,CACV,MAAM,4DAA4D,CAC1E,CACA,CCDO,MAAM,4CAA4C,YAAa,CAClE,aAAc,CACV,MAAM,mMAEkB,CAChC,CACA,CCNO,MAAM,uCAAuC,YAAa,CAC7D,YAAYwM,EAAgB,CACxB,MAAM,gCAAgCA,CAAc,yDAAyD,CACrH,CACA,CCJO,MAAM,gCAAgC,YAAa,CACtD,YAAYoB,EAAY,CACpB,MAAM,WAAWA,CAAU,2DACZA,CAAU,uDAAuD,CACxF,CACA,CCLO,MAAM,8CAA8C,YAAa,CACpE,YAAYS,EAAqC,CAC7C,MAAMC,EAAiBD,EAAoC,IAAKE,IAAc,IAAIA,GAAU,IAAI,GAAG,EACnG,MAAM,cAAcD,EAAe,KAAK,IAAI,CAAC,0EAA0E,CAC/H,CACA,CCLO,MAAM,KAAM,CACf,YAAYE,EAAO,CACf,YAAY,OAAO,KAAMA,GAAS,CAAA,CAAE,CAC5C,CACI,IAAI,QAAS,CACT,OAAO,KAAK,SAAS,MAC7B,CACI,IAAI,aAAc,CACd,MAAO,CAAC,CAAC,KAAK,SACtB,CACI,IAAI,SAAStX,EAAU,CACnB,KAAK,UAAYA,CACzB,CACI,IAAI,UAAW,CACX,GAAI,CAAC,KAAK,UACN,MAAM,IAAI,aAAa,mDAAmD,KAAK,IAAI,GAAG,EAC1F,OAAO,KAAK,SACpB,CACA,CCnBO,MAAM,iBAAkB,CAK3B,OAAO,gBAAgB8O,EAAK,CAExB,GAAI,OAAOA,GAAQ,UAAYA,EAAI,QAAQ,GAAG,IAAM,GAChD,MAAO,GAEX,KAAM,CAACyI,EAAWzO,EAAY,EAAIgG,EAAI,MAAM,GAAG,EAQ/C,MAPI,GAACyI,GAAa,CAACzO,IAOfgG,EAAI,QAAQ,GAAG,IAAM,IAAMA,EAAI,QAAQ,GAAG,IAAM,GAG5D,CACA,yLCzBI,OAAO,OAAO,QAAW,WAE3B0I,iBAAA,QAAiB,SAAkBC,EAAMC,EAAW,CAC9CA,IACFD,EAAK,OAASC,EACdD,EAAK,UAAY,OAAO,OAAOC,EAAU,UAAW,CAClD,YAAa,CACX,MAAOD,EACP,WAAY,GACZ,SAAU,GACV,aAAc,EACxB,CACO,CAAA,EAEJ,EAGDD,iBAAA,QAAiB,SAAkBC,EAAMC,EAAW,CAClD,GAAIA,EAAW,CACbD,EAAK,OAASC,EACd,IAAIC,GAAW,UAAY,CAAA,EAC3BA,GAAS,UAAYD,EAAU,UAC/BD,EAAK,UAAY,IAAIE,GACrBF,EAAK,UAAU,YAAcA,CACnC,CACA,+JCvBA,OAAO,iBAAiBhM,GAAS,CAAE,WAAY,CAAE,MAAO,IAAQ,CAAC,OAAO,WAAW,EAAG,CAAE,MAAO,QAAU,CAAA,CAAE,EAE3G,IAAIzD,EAAS,CAAE,EAEX4P,EAAW,CAAE,EAEjBA,EAAS,WAAarK,GACtBqK,EAAS,YAAcC,GACvBD,EAAS,cAAgBE,GAOzB,QALIC,GAAS,CAAE,EACXC,GAAY,CAAE,EACdC,GAAM,OAAO,WAAe,IAAc,WAAa,MAEvDhF,GAAO,mEACF3R,GAAI,EAAGuI,GAAMoJ,GAAK,OAAQ3R,GAAIuI,GAAK,EAAEvI,GAC5CyW,GAAOzW,EAAC,EAAI2R,GAAK3R,EAAC,EAClB0W,GAAU/E,GAAK,WAAW3R,EAAC,CAAC,EAAIA,GAKlC0W,GAAU,EAAiB,EAAI,GAC/BA,GAAU,EAAiB,EAAI,GAE/B,SAASE,GAAStO,GAAK,CACrB,IAAIC,GAAMD,GAAI,OAEd,GAAIC,GAAM,EAAI,EACZ,MAAM,IAAI,MAAM,gDAAgD,EAKlE,IAAIC,GAAWF,GAAI,QAAQ,GAAG,EAC1BE,KAAa,KAAIA,GAAWD,IAEhC,IAAIE,GAAkBD,KAAaD,GAC/B,EACA,EAAKC,GAAW,EAEpB,MAAO,CAACA,GAAUC,EAAe,CACnC,CAGA,SAASwD,GAAY3D,GAAK,CACxB,IAAII,GAAOkO,GAAQtO,EAAG,EAClBE,GAAWE,GAAK,CAAC,EACjBD,GAAkBC,GAAK,CAAC,EAC5B,OAASF,GAAWC,IAAmB,EAAI,EAAKA,EAClD,CAEA,SAASoO,GAAavO,GAAKE,GAAUC,GAAiB,CACpD,OAASD,GAAWC,IAAmB,EAAI,EAAKA,EAClD,CAEA,SAAS8N,GAAajO,GAAK,CACzB,IAAIK,GACAD,GAAOkO,GAAQtO,EAAG,EAClBE,GAAWE,GAAK,CAAC,EACjBD,GAAkBC,GAAK,CAAC,EAExBE,GAAM,IAAI+N,GAAIE,GAAYvO,GAAKE,GAAUC,EAAe,CAAC,EAEzDI,GAAU,EAGVN,GAAME,GAAkB,EACxBD,GAAW,EACXA,GAEAxI,GACJ,IAAKA,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EACxB2I,GACG+N,GAAUpO,GAAI,WAAWtI,EAAC,CAAC,GAAK,GAChC0W,GAAUpO,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,GACpC0W,GAAUpO,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACrC0W,GAAUpO,GAAI,WAAWtI,GAAI,CAAC,CAAC,EACjC4I,GAAIC,IAAS,EAAKF,IAAO,GAAM,IAC/BC,GAAIC,IAAS,EAAKF,IAAO,EAAK,IAC9BC,GAAIC,IAAS,EAAIF,GAAM,IAGzB,OAAIF,KAAoB,IACtBE,GACG+N,GAAUpO,GAAI,WAAWtI,EAAC,CAAC,GAAK,EAChC0W,GAAUpO,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACvC4I,GAAIC,IAAS,EAAIF,GAAM,KAGrBF,KAAoB,IACtBE,GACG+N,GAAUpO,GAAI,WAAWtI,EAAC,CAAC,GAAK,GAChC0W,GAAUpO,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACpC0W,GAAUpO,GAAI,WAAWtI,GAAI,CAAC,CAAC,GAAK,EACvC4I,GAAIC,IAAS,EAAKF,IAAO,EAAK,IAC9BC,GAAIC,IAAS,EAAIF,GAAM,KAGlBC,EACT,CAEA,SAASkO,GAAiBhO,GAAK,CAC7B,OAAO2N,GAAO3N,IAAO,GAAK,EAAI,EAC5B2N,GAAO3N,IAAO,GAAK,EAAI,EACvB2N,GAAO3N,IAAO,EAAI,EAAI,EACtB2N,GAAO3N,GAAM,EAAI,CACrB,CAEA,SAASiO,GAAahO,GAAOC,GAAOC,GAAK,CAGvC,QAFIN,GACAO,GAAS,CAAE,EACNlJ,GAAIgJ,GAAOhJ,GAAIiJ,GAAKjJ,IAAK,EAChC2I,IACII,GAAM/I,EAAC,GAAK,GAAM,WAClB+I,GAAM/I,GAAI,CAAC,GAAK,EAAK,QACtB+I,GAAM/I,GAAI,CAAC,EAAI,KAClBkJ,GAAO,KAAK4N,GAAgBnO,EAAG,CAAC,EAElC,OAAOO,GAAO,KAAK,EAAE,CACvB,CAEA,SAASsN,GAAezN,GAAO,CAQ7B,QAPIJ,GACAJ,GAAMQ,GAAM,OACZI,GAAaZ,GAAM,EACnBa,GAAQ,CAAE,EACVC,GAAiB,MAGZrJ,GAAI,EAAGsJ,GAAOf,GAAMY,GAAYnJ,GAAIsJ,GAAMtJ,IAAKqJ,GACtDD,GAAM,KAAK2N,GAAYhO,GAAO/I,GAAIA,GAAIqJ,GAAkBC,GAAOA,GAAQtJ,GAAIqJ,EAAe,CAAC,EAI7F,OAAIF,KAAe,GACjBR,GAAMI,GAAMR,GAAM,CAAC,EACnBa,GAAM,KACJqN,GAAO9N,IAAO,CAAC,EACf8N,GAAQ9N,IAAO,EAAK,EAAI,EACxB,IACD,GACQQ,KAAe,IACxBR,IAAOI,GAAMR,GAAM,CAAC,GAAK,GAAKQ,GAAMR,GAAM,CAAC,EAC3Ca,GAAM,KACJqN,GAAO9N,IAAO,EAAE,EAChB8N,GAAQ9N,IAAO,EAAK,EAAI,EACxB8N,GAAQ9N,IAAO,EAAK,EAAI,EACxB,GACD,GAGIS,GAAM,KAAK,EAAE,CACtB,CAEA,IAAI4N,GAAU,CAAE,EAEhB,yFAEAA,GAAQ,KAAO,SAAUtQ,GAAQI,GAAQyC,GAAMC,GAAMC,GAAQ,CAC3D,IAAI5E,GAAG6E,GACHC,GAAQF,GAAS,EAAKD,GAAO,EAC7BI,IAAQ,GAAKD,IAAQ,EACrBE,GAAQD,IAAQ,EAChBE,GAAQ,GACR9J,GAAIuJ,GAAQE,GAAS,EAAK,EAC1BM,GAAIR,GAAO,GAAK,EAChBS,GAAItD,GAAOI,GAAS9G,EAAC,EAOzB,IALAA,IAAK+J,GAELlF,GAAImF,IAAM,GAAM,CAACF,IAAU,EAC3BE,KAAO,CAACF,GACRA,IAASH,GACFG,GAAQ,EAAGjF,GAAKA,GAAI,IAAO6B,GAAOI,GAAS9G,EAAC,EAAGA,IAAK+J,GAAGD,IAAS,EAAG,CAK1E,IAHAJ,GAAI7E,IAAM,GAAM,CAACiF,IAAU,EAC3BjF,KAAO,CAACiF,GACRA,IAASN,GACFM,GAAQ,EAAGJ,GAAKA,GAAI,IAAOhD,GAAOI,GAAS9G,EAAC,EAAGA,IAAK+J,GAAGD,IAAS,EAAG,CAE1E,GAAIjF,KAAM,EACRA,GAAI,EAAIgF,OACH,IAAIhF,KAAM+E,GACf,OAAOF,GAAI,KAAQM,GAAI,GAAK,GAAK,MAEjCN,GAAIA,GAAI,KAAK,IAAI,EAAGF,EAAI,EACxB3E,GAAIA,GAAIgF,GAEV,OAAQG,GAAI,GAAK,GAAKN,GAAI,KAAK,IAAI,EAAG7E,GAAI2E,EAAI,CAC/C,EAEDwN,GAAQ,MAAQ,SAAUtQ,GAAQrK,GAAOyK,GAAQyC,GAAMC,GAAMC,GAAQ,CACnE,IAAI5E,GAAG6E,GAAGO,GACNN,GAAQF,GAAS,EAAKD,GAAO,EAC7BI,IAAQ,GAAKD,IAAQ,EACrBE,GAAQD,IAAQ,EAChBM,GAAMV,KAAS,GAAK,KAAK,IAAI,EAAG,GAAG,EAAI,KAAK,IAAI,EAAG,GAAG,EAAI,EAC1DxJ,GAAIuJ,GAAO,EAAKE,GAAS,EACzBM,GAAIR,GAAO,EAAI,GACfS,GAAI3N,GAAQ,GAAMA,KAAU,GAAK,EAAIA,GAAQ,EAAK,EAAI,EAmC1D,IAjCAA,GAAQ,KAAK,IAAIA,EAAK,EAElB,MAAMA,EAAK,GAAKA,KAAU,KAC5BqN,GAAI,MAAMrN,EAAK,EAAI,EAAI,EACvBwI,GAAI+E,KAEJ/E,GAAI,KAAK,MAAM,KAAK,IAAIxI,EAAK,EAAI,KAAK,GAAG,EACrCA,IAAS4N,GAAI,KAAK,IAAI,EAAG,CAACpF,EAAC,GAAK,IAClCA,KACAoF,IAAK,GAEHpF,GAAIgF,IAAS,EACfxN,IAAS6N,GAAKD,GAEd5N,IAAS6N,GAAK,KAAK,IAAI,EAAG,EAAIL,EAAK,EAEjCxN,GAAQ4N,IAAK,IACfpF,KACAoF,IAAK,GAGHpF,GAAIgF,IAASD,IACfF,GAAI,EACJ7E,GAAI+E,IACK/E,GAAIgF,IAAS,GACtBH,IAAMrN,GAAQ4N,GAAK,GAAK,KAAK,IAAI,EAAGT,EAAI,EACxC3E,GAAIA,GAAIgF,KAERH,GAAIrN,GAAQ,KAAK,IAAI,EAAGwN,GAAQ,CAAC,EAAI,KAAK,IAAI,EAAGL,EAAI,EACrD3E,GAAI,IAID2E,IAAQ,EAAG9C,GAAOI,GAAS9G,EAAC,EAAI0J,GAAI,IAAM1J,IAAK+J,GAAGL,IAAK,IAAKF,IAAQ,EAAG,CAI9E,IAFA3E,GAAKA,IAAK2E,GAAQE,GAClBC,IAAQH,GACDG,GAAO,EAAGjD,GAAOI,GAAS9G,EAAC,EAAI6E,GAAI,IAAM7E,IAAK+J,GAAGlF,IAAK,IAAK8E,IAAQ,EAAG,CAE7EjD,GAAOI,GAAS9G,GAAI+J,EAAC,GAAKC,GAAI,GAC/B,EAED;AAAA;AAAA;AAAA;AAAA;AAAA,IAOC,SAAUG,GAAS,CAEnB,MAAMC,GAASkM,EACTjM,GAAY2M,GACZ1M,GACH,OAAO,QAAW,YAAc,OAAO,OAAO,KAAW,WACtD,OAAO,IAAO,4BAA4B,EAC1C,KAENH,GAAQ,OAASI,GACjBJ,GAAQ,WAAaK,GACrBL,GAAQ,kBAAoB,GAE5B,MAAMM,GAAe,WACrBN,GAAQ,WAAaM,GACrB,KAAM,CAAE,WAAYC,GAAkB,YAAaC,GAAmB,kBAAmBC,EAAuB,EAAK,WAgBrHL,GAAO,oBAAsBM,GAAmB,EAE5C,CAACN,GAAO,qBAAuB,OAAO,QAAY,KAClD,OAAO,QAAQ,OAAU,YAC3B,QAAQ,MACN,+IAED,EAGH,SAASM,IAAqB,CAE5B,GAAI,CACF,MAAMjC,GAAM,IAAI8B,GAAiB,CAAC,EAC5B1H,GAAQ,CAAE,IAAK,UAAY,CAAE,MAAO,GAAE,CAAI,EAChD,cAAO,eAAeA,GAAO0H,GAAiB,SAAS,EACvD,OAAO,eAAe9B,GAAK5F,EAAK,EACzB4F,GAAI,QAAU,EACtB,MAAW,CACV,MAAO,EACZ,CACA,CAEC,OAAO,eAAe2B,GAAO,UAAW,SAAU,CAChD,WAAY,GACZ,IAAK,UAAY,CACf,GAAKA,GAAO,SAAS,IAAI,EACzB,OAAO,KAAK,MACjB,CACA,CAAE,EAED,OAAO,eAAeA,GAAO,UAAW,SAAU,CAChD,WAAY,GACZ,IAAK,UAAY,CACf,GAAKA,GAAO,SAAS,IAAI,EACzB,OAAO,KAAK,UACjB,CACA,CAAE,EAED,SAASO,GAAcC,GAAQ,CAC7B,GAAIA,GAASN,GACX,MAAM,IAAI,WAAW,cAAgBM,GAAS,gCAAgC,EAGhF,MAAMC,GAAM,IAAIN,GAAiBK,EAAM,EACvC,cAAO,eAAeC,GAAKT,GAAO,SAAS,EACpCS,EACV,CAYC,SAAST,GAAQU,GAAKC,GAAkBH,GAAQ,CAE9C,GAAI,OAAOE,IAAQ,SAAU,CAC3B,GAAI,OAAOC,IAAqB,SAC9B,MAAM,IAAI,UACR,oEACT,EAEK,OAAOC,GAAYF,EAAG,CAC3B,CACG,OAAOG,GAAKH,GAAKC,GAAkBH,EAAM,CAC5C,CAECR,GAAO,SAAW,KAElB,SAASa,GAAM/O,GAAO6O,GAAkBH,GAAQ,CAC9C,GAAI,OAAO1O,IAAU,SACnB,OAAOgP,GAAWhP,GAAO6O,EAAgB,EAG3C,GAAIP,GAAkB,OAAOtO,EAAK,EAChC,OAAOiP,GAAcjP,EAAK,EAG5B,GAAIA,IAAS,KACX,MAAM,IAAI,UACR,kHAC0C,OAAOA,EACxD,EAQG,GALIkP,GAAWlP,GAAOsO,EAAiB,GAClCtO,IAASkP,GAAWlP,GAAM,OAAQsO,EAAiB,GAIpD,OAAOC,GAA4B,MAClCW,GAAWlP,GAAOuO,EAAuB,GACzCvO,IAASkP,GAAWlP,GAAM,OAAQuO,EAAuB,GAC5D,OAAOY,GAAgBnP,GAAO6O,GAAkBH,EAAM,EAGxD,GAAI,OAAO1O,IAAU,SACnB,MAAM,IAAI,UACR,uEACP,EAGG,MAAMyF,GAAUzF,GAAM,SAAWA,GAAM,QAAS,EAChD,GAAIyF,IAAW,MAAQA,KAAYzF,GACjC,OAAOkO,GAAO,KAAKzI,GAASoJ,GAAkBH,EAAM,EAGtD,MAAMU,GAAIC,GAAWrP,EAAK,EAC1B,GAAIoP,GAAG,OAAOA,GAEd,GAAI,OAAO,OAAW,KAAe,OAAO,aAAe,MACvD,OAAOpP,GAAM,OAAO,WAAW,GAAM,WACvC,OAAOkO,GAAO,KAAKlO,GAAM,OAAO,WAAW,EAAE,QAAQ,EAAG6O,GAAkBH,EAAM,EAGlF,MAAM,IAAI,UACR,kHAC0C,OAAO1O,EACtD,CACA,CAUCkO,GAAO,KAAO,SAAUlO,GAAO6O,GAAkBH,GAAQ,CACvD,OAAOK,GAAK/O,GAAO6O,GAAkBH,EAAM,CAC5C,EAID,OAAO,eAAeR,GAAO,UAAWG,GAAiB,SAAS,EAClE,OAAO,eAAeH,GAAQG,EAAgB,EAE9C,SAASiB,GAAYjG,GAAM,CACzB,GAAI,OAAOA,IAAS,SAClB,MAAM,IAAI,UAAU,wCAAwC,EACvD,GAAIA,GAAO,EAChB,MAAM,IAAI,WAAW,cAAgBA,GAAO,gCAAgC,CAEjF,CAEC,SAASkG,GAAOlG,GAAMmG,GAAMC,GAAU,CAEpC,OADAH,GAAWjG,EAAI,EACXA,IAAQ,EACHoF,GAAapF,EAAI,EAEtBmG,KAAS,OAIJ,OAAOC,IAAa,SACvBhB,GAAapF,EAAI,EAAE,KAAKmG,GAAMC,EAAQ,EACtChB,GAAapF,EAAI,EAAE,KAAKmG,EAAI,EAE3Bf,GAAapF,EAAI,CAC3B,CAMC6E,GAAO,MAAQ,SAAU7E,GAAMmG,GAAMC,GAAU,CAC7C,OAAOF,GAAMlG,GAAMmG,GAAMC,EAAQ,CAClC,EAED,SAASX,GAAazF,GAAM,CAC1B,OAAAiG,GAAWjG,EAAI,EACRoF,GAAapF,GAAO,EAAI,EAAIqG,GAAQrG,EAAI,EAAI,CAAC,CACvD,CAKC6E,GAAO,YAAc,SAAU7E,GAAM,CACnC,OAAOyF,GAAYzF,EAAI,CACxB,EAID6E,GAAO,gBAAkB,SAAU7E,GAAM,CACvC,OAAOyF,GAAYzF,EAAI,CACxB,EAED,SAAS2F,GAAYW,GAAQF,GAAU,CAKrC,IAJI,OAAOA,IAAa,UAAYA,KAAa,MAC/CA,GAAW,QAGT,CAACvB,GAAO,WAAWuB,EAAQ,EAC7B,MAAM,IAAI,UAAU,qBAAuBA,EAAQ,EAGrD,MAAMf,GAASkB,GAAWD,GAAQF,EAAQ,EAAI,EAC9C,IAAId,GAAMF,GAAaC,EAAM,EAE7B,MAAMmB,GAASlB,GAAI,MAAMgB,GAAQF,EAAQ,EAEzC,OAAII,KAAWnB,KAIbC,GAAMA,GAAI,MAAM,EAAGkB,EAAM,GAGpBlB,EACV,CAEC,SAASmB,GAAevF,GAAO,CAC7B,MAAMmE,GAASnE,GAAM,OAAS,EAAI,EAAImF,GAAQnF,GAAM,MAAM,EAAI,EACxDoE,GAAMF,GAAaC,EAAM,EAC/B,QAAS/K,GAAI,EAAGA,GAAI+K,GAAQ/K,IAAK,EAC/BgL,GAAIhL,EAAC,EAAI4G,GAAM5G,EAAC,EAAI,IAEtB,OAAOgL,EACV,CAEC,SAASM,GAAec,GAAW,CACjC,GAAIb,GAAWa,GAAW1B,EAAgB,EAAG,CAC3C,MAAM2B,GAAO,IAAI3B,GAAiB0B,EAAS,EAC3C,OAAOZ,GAAgBa,GAAK,OAAQA,GAAK,WAAYA,GAAK,UAAU,CACzE,CACG,OAAOF,GAAcC,EAAS,CACjC,CAEC,SAASZ,GAAiB5E,GAAO0F,GAAYvB,GAAQ,CACnD,GAAIuB,GAAa,GAAK1F,GAAM,WAAa0F,GACvC,MAAM,IAAI,WAAW,sCAAsC,EAG7D,GAAI1F,GAAM,WAAa0F,IAAcvB,IAAU,GAC7C,MAAM,IAAI,WAAW,sCAAsC,EAG7D,IAAIC,GACJ,OAAIsB,KAAe,QAAavB,KAAW,OACzCC,GAAM,IAAIN,GAAiB9D,EAAK,EACvBmE,KAAW,OACpBC,GAAM,IAAIN,GAAiB9D,GAAO0F,EAAU,EAE5CtB,GAAM,IAAIN,GAAiB9D,GAAO0F,GAAYvB,EAAM,EAItD,OAAO,eAAeC,GAAKT,GAAO,SAAS,EAEpCS,EACV,CAEC,SAASU,GAAYlJ,GAAK,CACxB,GAAI+H,GAAO,SAAS/H,EAAG,EAAG,CACxB,MAAM+F,GAAMwD,GAAQvJ,GAAI,MAAM,EAAI,EAC5BwI,GAAMF,GAAavC,EAAG,EAE5B,OAAIyC,GAAI,SAAW,GAInBxI,GAAI,KAAKwI,GAAK,EAAG,EAAGzC,EAAG,EAChByC,EACZ,CAEG,GAAIxI,GAAI,SAAW,OACjB,OAAI,OAAOA,GAAI,QAAW,UAAY+J,GAAY/J,GAAI,MAAM,EACnDsI,GAAa,CAAC,EAEhBqB,GAAc3J,EAAG,EAG1B,GAAIA,GAAI,OAAS,UAAY,MAAM,QAAQA,GAAI,IAAI,EACjD,OAAO2J,GAAc3J,GAAI,IAAI,CAElC,CAEC,SAASuJ,GAAShB,GAAQ,CAGxB,GAAIA,IAAUN,GACZ,MAAM,IAAI,WAAW,0DACaA,GAAa,SAAS,EAAE,EAAI,QAAQ,EAExE,OAAOM,GAAS,CACnB,CAEC,SAASP,GAAYO,GAAQ,CAC3B,MAAI,CAACA,IAAUA,KACbA,GAAS,GAEJR,GAAO,MAAM,CAACQ,EAAM,CAC9B,CAECR,GAAO,SAAW,SAAmBkB,GAAG,CACtC,OAAOA,IAAK,MAAQA,GAAE,YAAc,IAClCA,KAAMlB,GAAO,SAChB,EAEDA,GAAO,QAAU,SAAkBiC,GAAGf,GAAG,CAGvC,GAFIF,GAAWiB,GAAG9B,EAAgB,IAAG8B,GAAIjC,GAAO,KAAKiC,GAAGA,GAAE,OAAQA,GAAE,UAAU,GAC1EjB,GAAWE,GAAGf,EAAgB,IAAGe,GAAIlB,GAAO,KAAKkB,GAAGA,GAAE,OAAQA,GAAE,UAAU,GAC1E,CAAClB,GAAO,SAASiC,EAAC,GAAK,CAACjC,GAAO,SAASkB,EAAC,EAC3C,MAAM,IAAI,UACR,uEACP,EAGG,GAAIe,KAAMf,GAAG,MAAO,GAEpB,IAAIrK,GAAIoL,GAAE,OACNpK,GAAIqJ,GAAE,OAEV,QAASzL,GAAI,EAAGuI,GAAM,KAAK,IAAInH,GAAGgB,EAAC,EAAGpC,GAAIuI,GAAK,EAAEvI,GAC/C,GAAIwM,GAAExM,EAAC,IAAMyL,GAAEzL,EAAC,EAAG,CACjBoB,GAAIoL,GAAExM,EAAC,EACPoC,GAAIqJ,GAAEzL,EAAC,EACP,KACP,CAGG,OAAIoB,GAAIgB,GAAU,GACdA,GAAIhB,GAAU,EACX,CACR,EAEDmJ,GAAO,WAAa,SAAqBuB,GAAU,CACjD,OAAQ,OAAOA,EAAQ,EAAE,YAAa,EAAA,CACpC,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,MAAO,GACT,QACE,MAAO,EACd,CACE,EAEDvB,GAAO,OAAS,SAAiBkC,GAAM1B,GAAQ,CAC7C,GAAI,CAAC,MAAM,QAAQ0B,EAAI,EACrB,MAAM,IAAI,UAAU,6CAA6C,EAGnE,GAAIA,GAAK,SAAW,EAClB,OAAOlC,GAAO,MAAM,CAAC,EAGvB,IAAIvK,GACJ,GAAI+K,KAAW,OAEb,IADAA,GAAS,EACJ/K,GAAI,EAAGA,GAAIyM,GAAK,OAAQ,EAAEzM,GAC7B+K,IAAU0B,GAAKzM,EAAC,EAAE,OAItB,MAAM0G,GAAS6D,GAAO,YAAYQ,EAAM,EACxC,IAAI2B,GAAM,EACV,IAAK1M,GAAI,EAAGA,GAAIyM,GAAK,OAAQ,EAAEzM,GAAG,CAChC,IAAIgL,GAAMyB,GAAKzM,EAAC,EAChB,GAAIuL,GAAWP,GAAKN,EAAgB,EAC9BgC,GAAM1B,GAAI,OAAStE,GAAO,QACvB6D,GAAO,SAASS,EAAG,IAAGA,GAAMT,GAAO,KAAKS,EAAG,GAChDA,GAAI,KAAKtE,GAAQgG,EAAG,GAEpBhC,GAAiB,UAAU,IAAI,KAC7BhE,GACAsE,GACA0B,EACD,UAEOnC,GAAO,SAASS,EAAG,EAG7BA,GAAI,KAAKtE,GAAQgG,EAAG,MAFpB,OAAM,IAAI,UAAU,6CAA6C,EAInEA,IAAO1B,GAAI,MAChB,CACG,OAAOtE,EACR,EAED,SAASuF,GAAYD,GAAQF,GAAU,CACrC,GAAIvB,GAAO,SAASyB,EAAM,EACxB,OAAOA,GAAO,OAEhB,GAAIrB,GAAkB,OAAOqB,EAAM,GAAKT,GAAWS,GAAQrB,EAAiB,EAC1E,OAAOqB,GAAO,WAEhB,GAAI,OAAOA,IAAW,SACpB,MAAM,IAAI,UACR,2FACmB,OAAOA,EACjC,EAGG,MAAMzD,GAAMyD,GAAO,OACbW,GAAa,UAAU,OAAS,GAAK,UAAU,CAAC,IAAM,GAC5D,GAAI,CAACA,IAAapE,KAAQ,EAAG,MAAO,GAGpC,IAAIqE,GAAc,GAClB,OACE,OAAQd,GAAQ,CACd,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOvD,GACT,IAAK,OACL,IAAK,QACH,OAAOsE,GAAYb,EAAM,EAAE,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOzD,GAAM,EACf,IAAK,MACH,OAAOA,KAAQ,EACjB,IAAK,SACH,OAAOuE,GAAcd,EAAM,EAAE,OAC/B,QACE,GAAIY,GACF,OAAOD,GAAY,GAAKE,GAAYb,EAAM,EAAE,OAE9CF,IAAY,GAAKA,IAAU,YAAa,EACxCc,GAAc,EACvB,CAEA,CACCrC,GAAO,WAAa0B,GAEpB,SAASc,GAAcjB,GAAU9C,GAAOC,GAAK,CAC3C,IAAI2D,GAAc,GA8BlB,IArBI5D,KAAU,QAAaA,GAAQ,KACjCA,GAAQ,GAINA,GAAQ,KAAK,UAIbC,KAAQ,QAAaA,GAAM,KAAK,UAClCA,GAAM,KAAK,QAGTA,IAAO,KAKXA,MAAS,EACTD,MAAW,EAEPC,IAAOD,IACT,MAAO,GAKT,IAFK8C,KAAUA,GAAW,UAGxB,OAAQA,GAAQ,CACd,IAAK,MACH,OAAOkB,GAAS,KAAMhE,GAAOC,EAAG,EAElC,IAAK,OACL,IAAK,QACH,OAAOgE,GAAU,KAAMjE,GAAOC,EAAG,EAEnC,IAAK,QACH,OAAOiE,GAAW,KAAMlE,GAAOC,EAAG,EAEpC,IAAK,SACL,IAAK,SACH,OAAOkE,GAAY,KAAMnE,GAAOC,EAAG,EAErC,IAAK,SACH,OAAOmE,GAAY,KAAMpE,GAAOC,EAAG,EAErC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOoE,GAAa,KAAMrE,GAAOC,EAAG,EAEtC,QACE,GAAI2D,GAAa,MAAM,IAAI,UAAU,qBAAuBd,EAAQ,EACpEA,IAAYA,GAAW,IAAI,YAAa,EACxCc,GAAc,EACvB,CAEA,CAQCrC,GAAO,UAAU,UAAY,GAE7B,SAAS+C,GAAM7B,GAAG8B,GAAG7D,GAAG,CACtB,MAAM1J,GAAIyL,GAAE8B,EAAC,EACb9B,GAAE8B,EAAC,EAAI9B,GAAE/B,EAAC,EACV+B,GAAE/B,EAAC,EAAI1J,EACV,CAECuK,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAMhC,GAAM,KAAK,OACjB,GAAIA,GAAM,IAAM,EACd,MAAM,IAAI,WAAW,2CAA2C,EAElE,QAASvI,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EAC5BsN,GAAK,KAAMtN,GAAGA,GAAI,CAAC,EAErB,OAAO,IACR,EAEDuK,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAMhC,GAAM,KAAK,OACjB,GAAIA,GAAM,IAAM,EACd,MAAM,IAAI,WAAW,2CAA2C,EAElE,QAASvI,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EAC5BsN,GAAK,KAAMtN,GAAGA,GAAI,CAAC,EACnBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EAEzB,OAAO,IACR,EAEDuK,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAMhC,GAAM,KAAK,OACjB,GAAIA,GAAM,IAAM,EACd,MAAM,IAAI,WAAW,2CAA2C,EAElE,QAASvI,GAAI,EAAGA,GAAIuI,GAAKvI,IAAK,EAC5BsN,GAAK,KAAMtN,GAAGA,GAAI,CAAC,EACnBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EACvBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EACvBsN,GAAK,KAAMtN,GAAI,EAAGA,GAAI,CAAC,EAEzB,OAAO,IACR,EAEDuK,GAAO,UAAU,SAAW,UAAqB,CAC/C,MAAMQ,GAAS,KAAK,OACpB,OAAIA,KAAW,EAAU,GACrB,UAAU,SAAW,EAAUkC,GAAU,KAAM,EAAGlC,EAAM,EACrDgC,GAAa,MAAM,KAAM,SAAS,CAC1C,EAEDxC,GAAO,UAAU,eAAiBA,GAAO,UAAU,SAEnDA,GAAO,UAAU,OAAS,SAAiBkB,GAAG,CAC5C,GAAI,CAAClB,GAAO,SAASkB,EAAC,EAAG,MAAM,IAAI,UAAU,2BAA2B,EACxE,OAAI,OAASA,GAAU,GAChBlB,GAAO,QAAQ,KAAMkB,EAAC,IAAM,CACpC,EAEDlB,GAAO,UAAU,QAAU,UAAoB,CAC7C,IAAIiD,GAAM,GACV,MAAMC,GAAMtD,GAAQ,kBACpB,OAAAqD,GAAM,KAAK,SAAS,MAAO,EAAGC,EAAG,EAAE,QAAQ,UAAW,KAAK,EAAE,KAAM,EAC/D,KAAK,OAASA,KAAKD,IAAO,SACvB,WAAaA,GAAM,GAC3B,EACGlD,KACFC,GAAO,UAAUD,EAAmB,EAAIC,GAAO,UAAU,SAG3DA,GAAO,UAAU,QAAU,SAAkBrO,GAAQ8M,GAAOC,GAAKyE,GAAWC,GAAS,CAInF,GAHIpC,GAAWrP,GAAQwO,EAAgB,IACrCxO,GAASqO,GAAO,KAAKrO,GAAQA,GAAO,OAAQA,GAAO,UAAU,GAE3D,CAACqO,GAAO,SAASrO,EAAM,EACzB,MAAM,IAAI,UACR,iFACoB,OAAOA,EAClC,EAgBG,GAbI8M,KAAU,SACZA,GAAQ,GAENC,KAAQ,SACVA,GAAM/M,GAASA,GAAO,OAAS,GAE7BwR,KAAc,SAChBA,GAAY,GAEVC,KAAY,SACdA,GAAU,KAAK,QAGb3E,GAAQ,GAAKC,GAAM/M,GAAO,QAAUwR,GAAY,GAAKC,GAAU,KAAK,OACtE,MAAM,IAAI,WAAW,oBAAoB,EAG3C,GAAID,IAAaC,IAAW3E,IAASC,GACnC,MAAO,GAET,GAAIyE,IAAaC,GACf,MAAO,GAET,GAAI3E,IAASC,GACX,MAAO,GAQT,GALAD,MAAW,EACXC,MAAS,EACTyE,MAAe,EACfC,MAAa,EAET,OAASzR,GAAQ,MAAO,GAE5B,IAAIkF,GAAIuM,GAAUD,GACdtL,GAAI6G,GAAMD,GACd,MAAMT,GAAM,KAAK,IAAInH,GAAGgB,EAAC,EAEnBwL,GAAW,KAAK,MAAMF,GAAWC,EAAO,EACxCE,GAAa3R,GAAO,MAAM8M,GAAOC,EAAG,EAE1C,QAASjJ,GAAI,EAAGA,GAAIuI,GAAK,EAAEvI,GACzB,GAAI4N,GAAS5N,EAAC,IAAM6N,GAAW7N,EAAC,EAAG,CACjCoB,GAAIwM,GAAS5N,EAAC,EACdoC,GAAIyL,GAAW7N,EAAC,EAChB,KACP,CAGG,OAAIoB,GAAIgB,GAAU,GACdA,GAAIhB,GAAU,EACX,CACR,EAWD,SAAS0M,GAAsBpH,GAAQqH,GAAKzB,GAAYR,GAAUkC,GAAK,CAErE,GAAItH,GAAO,SAAW,EAAG,MAAO,GAmBhC,GAhBI,OAAO4F,IAAe,UACxBR,GAAWQ,GACXA,GAAa,GACJA,GAAa,WACtBA,GAAa,WACJA,GAAa,cACtBA,GAAa,aAEfA,GAAa,CAACA,GACVC,GAAYD,EAAU,IAExBA,GAAa0B,GAAM,EAAKtH,GAAO,OAAS,GAItC4F,GAAa,IAAGA,GAAa5F,GAAO,OAAS4F,IAC7CA,IAAc5F,GAAO,OAAQ,CAC/B,GAAIsH,GAAK,MAAO,GACX1B,GAAa5F,GAAO,OAAS,CACvC,SAAc4F,GAAa,EACtB,GAAI0B,GAAK1B,GAAa,MACjB,OAAO,GASd,GALI,OAAOyB,IAAQ,WACjBA,GAAMxD,GAAO,KAAKwD,GAAKjC,EAAQ,GAI7BvB,GAAO,SAASwD,EAAG,EAErB,OAAIA,GAAI,SAAW,EACV,GAEFE,GAAavH,GAAQqH,GAAKzB,GAAYR,GAAUkC,EAAG,EACrD,GAAI,OAAOD,IAAQ,SAExB,OADAA,GAAMA,GAAM,IACR,OAAOrD,GAAiB,UAAU,SAAY,WAC5CsD,GACKtD,GAAiB,UAAU,QAAQ,KAAKhE,GAAQqH,GAAKzB,EAAU,EAE/D5B,GAAiB,UAAU,YAAY,KAAKhE,GAAQqH,GAAKzB,EAAU,EAGvE2B,GAAavH,GAAQ,CAACqH,EAAG,EAAGzB,GAAYR,GAAUkC,EAAG,EAG9D,MAAM,IAAI,UAAU,sCAAsC,CAC7D,CAEC,SAASC,GAAcrF,GAAKmF,GAAKzB,GAAYR,GAAUkC,GAAK,CAC1D,IAAIE,GAAY,EACZC,GAAYvF,GAAI,OAChBwF,GAAYL,GAAI,OAEpB,GAAIjC,KAAa,SACfA,GAAW,OAAOA,EAAQ,EAAE,YAAa,EACrCA,KAAa,QAAUA,KAAa,SACpCA,KAAa,WAAaA,KAAa,YAAY,CACrD,GAAIlD,GAAI,OAAS,GAAKmF,GAAI,OAAS,EACjC,MAAO,GAETG,GAAY,EACZC,IAAa,EACbC,IAAa,EACb9B,IAAc,CACrB,CAGG,SAAS+B,GAAMrD,GAAKhL,GAAG,CACrB,OAAIkO,KAAc,EACTlD,GAAIhL,EAAC,EAELgL,GAAI,aAAahL,GAAIkO,EAAS,CAE5C,CAEG,IAAIlO,GACJ,GAAIgO,GAAK,CACP,IAAIM,GAAa,GACjB,IAAKtO,GAAIsM,GAAYtM,GAAImO,GAAWnO,KAClC,GAAIqO,GAAKzF,GAAK5I,EAAC,IAAMqO,GAAKN,GAAKO,KAAe,GAAK,EAAItO,GAAIsO,EAAU,GAEnE,GADIA,KAAe,KAAIA,GAAatO,IAChCA,GAAIsO,GAAa,IAAMF,GAAW,OAAOE,GAAaJ,QAEtDI,KAAe,KAAItO,IAAKA,GAAIsO,IAChCA,GAAa,EAGtB,KAEK,KADIhC,GAAa8B,GAAYD,KAAW7B,GAAa6B,GAAYC,IAC5DpO,GAAIsM,GAAYtM,IAAK,EAAGA,KAAK,CAChC,IAAIuO,GAAQ,GACZ,QAASC,GAAI,EAAGA,GAAIJ,GAAWI,KAC7B,GAAIH,GAAKzF,GAAK5I,GAAIwO,EAAC,IAAMH,GAAKN,GAAKS,EAAC,EAAG,CACrCD,GAAQ,GACR,KACX,CAEO,GAAIA,GAAO,OAAOvO,EACzB,CAGG,MAAO,EACV,CAECuK,GAAO,UAAU,SAAW,SAAmBwD,GAAKzB,GAAYR,GAAU,CACxE,OAAO,KAAK,QAAQiC,GAAKzB,GAAYR,EAAQ,IAAM,EACpD,EAEDvB,GAAO,UAAU,QAAU,SAAkBwD,GAAKzB,GAAYR,GAAU,CACtE,OAAOgC,GAAqB,KAAMC,GAAKzB,GAAYR,GAAU,EAAI,CAClE,EAEDvB,GAAO,UAAU,YAAc,SAAsBwD,GAAKzB,GAAYR,GAAU,CAC9E,OAAOgC,GAAqB,KAAMC,GAAKzB,GAAYR,GAAU,EAAK,CACnE,EAED,SAAS2C,GAAUzD,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAC9CjE,GAAS,OAAOA,EAAM,GAAK,EAC3B,MAAM4H,GAAY1D,GAAI,OAASlE,GAC1BiE,IAGHA,GAAS,OAAOA,EAAM,EAClBA,GAAS2D,KACX3D,GAAS2D,KAJX3D,GAAS2D,GAQX,MAAMC,GAAS3C,GAAO,OAElBjB,GAAS4D,GAAS,IACpB5D,GAAS4D,GAAS,GAEpB,IAAI3O,GACJ,IAAKA,GAAI,EAAGA,GAAI+K,GAAQ,EAAE/K,GAAG,CAC3B,MAAM4O,GAAS,SAAS5C,GAAO,OAAOhM,GAAI,EAAG,CAAC,EAAG,EAAE,EACnD,GAAIuM,GAAYqC,EAAM,EAAG,OAAO5O,GAChCgL,GAAIlE,GAAS9G,EAAC,EAAI4O,EACvB,CACG,OAAO5O,EACV,CAEC,SAAS6O,GAAW7D,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAC/C,OAAO+D,GAAWjC,GAAYb,GAAQhB,GAAI,OAASlE,EAAM,EAAGkE,GAAKlE,GAAQiE,EAAM,CAClF,CAEC,SAASgE,GAAY/D,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAChD,OAAO+D,GAAWE,GAAahD,EAAM,EAAGhB,GAAKlE,GAAQiE,EAAM,CAC9D,CAEC,SAASkE,GAAajE,GAAKgB,GAAQlF,GAAQiE,GAAQ,CACjD,OAAO+D,GAAWhC,GAAcd,EAAM,EAAGhB,GAAKlE,GAAQiE,EAAM,CAC/D,CAEC,SAASmE,GAAWlE,GAAKgB,GAAQlF,GAAQiE,GAAQ,CAC/C,OAAO+D,GAAWK,GAAenD,GAAQhB,GAAI,OAASlE,EAAM,EAAGkE,GAAKlE,GAAQiE,EAAM,CACrF,CAECR,GAAO,UAAU,MAAQ,SAAgByB,GAAQlF,GAAQiE,GAAQe,GAAU,CAEzE,GAAIhF,KAAW,OACbgF,GAAW,OACXf,GAAS,KAAK,OACdjE,GAAS,UAEAiE,KAAW,QAAa,OAAOjE,IAAW,SACnDgF,GAAWhF,GACXiE,GAAS,KAAK,OACdjE,GAAS,UAEA,SAASA,EAAM,EACxBA,GAASA,KAAW,EAChB,SAASiE,EAAM,GACjBA,GAASA,KAAW,EAChBe,KAAa,SAAWA,GAAW,UAEvCA,GAAWf,GACXA,GAAS,YAGX,OAAM,IAAI,MACR,yEACP,EAGG,MAAM2D,GAAY,KAAK,OAAS5H,GAGhC,IAFIiE,KAAW,QAAaA,GAAS2D,MAAW3D,GAAS2D,IAEpD1C,GAAO,OAAS,IAAMjB,GAAS,GAAKjE,GAAS,IAAOA,GAAS,KAAK,OACrE,MAAM,IAAI,WAAW,wCAAwC,EAG1DgF,KAAUA,GAAW,QAE1B,IAAIc,GAAc,GAClB,OACE,OAAQd,GAAQ,CACd,IAAK,MACH,OAAO2C,GAAS,KAAMzC,GAAQlF,GAAQiE,EAAM,EAE9C,IAAK,OACL,IAAK,QACH,OAAO8D,GAAU,KAAM7C,GAAQlF,GAAQiE,EAAM,EAE/C,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOgE,GAAW,KAAM/C,GAAQlF,GAAQiE,EAAM,EAEhD,IAAK,SAEH,OAAOkE,GAAY,KAAMjD,GAAQlF,GAAQiE,EAAM,EAEjD,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOmE,GAAU,KAAMlD,GAAQlF,GAAQiE,EAAM,EAE/C,QACE,GAAI6B,GAAa,MAAM,IAAI,UAAU,qBAAuBd,EAAQ,EACpEA,IAAY,GAAKA,IAAU,YAAa,EACxCc,GAAc,EACvB,CAEE,EAEDrC,GAAO,UAAU,OAAS,UAAmB,CAC3C,MAAO,CACL,KAAM,SACN,KAAM,MAAM,UAAU,MAAM,KAAK,KAAK,MAAQ,KAAM,CAAC,CAC1D,CACE,EAED,SAAS6C,GAAapC,GAAKhC,GAAOC,GAAK,CACrC,OAAID,KAAU,GAAKC,KAAQ+B,GAAI,OACtBZ,GAAO,cAAcY,EAAG,EAExBZ,GAAO,cAAcY,GAAI,MAAMhC,GAAOC,EAAG,CAAC,CAEtD,CAEC,SAASgE,GAAWjC,GAAKhC,GAAOC,GAAK,CACnCA,GAAM,KAAK,IAAI+B,GAAI,OAAQ/B,EAAG,EAC9B,MAAMmG,GAAM,CAAE,EAEd,IAAIpP,GAAIgJ,GACR,KAAOhJ,GAAIiJ,IAAK,CACd,MAAMoG,GAAYrE,GAAIhL,EAAC,EACvB,IAAIsP,GAAY,KACZC,GAAoBF,GAAY,IAChC,EACCA,GAAY,IACT,EACCA,GAAY,IACT,EACA,EAEZ,GAAIrP,GAAIuP,IAAoBtG,GAAK,CAC/B,IAAIuG,GAAYC,GAAWC,GAAYC,GAEvC,OAAQJ,GAAgB,CACtB,IAAK,GACCF,GAAY,MACdC,GAAYD,IAEd,MACF,IAAK,GACHG,GAAaxE,GAAIhL,GAAI,CAAC,GACjBwP,GAAa,OAAU,MAC1BG,IAAiBN,GAAY,KAAS,EAAOG,GAAa,GACtDG,GAAgB,MAClBL,GAAYK,KAGhB,MACF,IAAK,GACHH,GAAaxE,GAAIhL,GAAI,CAAC,EACtByP,GAAYzE,GAAIhL,GAAI,CAAC,GAChBwP,GAAa,OAAU,MAASC,GAAY,OAAU,MACzDE,IAAiBN,GAAY,KAAQ,IAAOG,GAAa,KAAS,EAAOC,GAAY,GACjFE,GAAgB,OAAUA,GAAgB,OAAUA,GAAgB,SACtEL,GAAYK,KAGhB,MACF,IAAK,GACHH,GAAaxE,GAAIhL,GAAI,CAAC,EACtByP,GAAYzE,GAAIhL,GAAI,CAAC,EACrB0P,GAAa1E,GAAIhL,GAAI,CAAC,GACjBwP,GAAa,OAAU,MAASC,GAAY,OAAU,MAASC,GAAa,OAAU,MACzFC,IAAiBN,GAAY,KAAQ,IAAQG,GAAa,KAAS,IAAOC,GAAY,KAAS,EAAOC,GAAa,GAC/GC,GAAgB,OAAUA,GAAgB,UAC5CL,GAAYK,IAG3B,CACA,CAESL,KAAc,MAGhBA,GAAY,MACZC,GAAmB,GACVD,GAAY,QAErBA,IAAa,MACbF,GAAI,KAAKE,KAAc,GAAK,KAAQ,KAAM,EAC1CA,GAAY,MAASA,GAAY,MAGnCF,GAAI,KAAKE,EAAS,EAClBtP,IAAKuP,EACV,CAEG,OAAOK,GAAsBR,EAAG,CACnC,CAKC,MAAMS,GAAuB,KAE7B,SAASD,GAAuBE,GAAY,CAC1C,MAAMvH,GAAMuH,GAAW,OACvB,GAAIvH,IAAOsH,GACT,OAAO,OAAO,aAAa,MAAM,OAAQC,EAAU,EAIrD,IAAIV,GAAM,GACNpP,GAAI,EACR,KAAOA,GAAIuI,IACT6G,IAAO,OAAO,aAAa,MACzB,OACAU,GAAW,MAAM9P,GAAGA,IAAK6P,EAAoB,CAC9C,EAEH,OAAOT,EACV,CAEC,SAASlC,GAAYlC,GAAKhC,GAAOC,GAAK,CACpC,IAAI8G,GAAM,GACV9G,GAAM,KAAK,IAAI+B,GAAI,OAAQ/B,EAAG,EAE9B,QAASjJ,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GAC7B+P,IAAO,OAAO,aAAa/E,GAAIhL,EAAC,EAAI,GAAI,EAE1C,OAAO+P,EACV,CAEC,SAAS5C,GAAanC,GAAKhC,GAAOC,GAAK,CACrC,IAAI8G,GAAM,GACV9G,GAAM,KAAK,IAAI+B,GAAI,OAAQ/B,EAAG,EAE9B,QAASjJ,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GAC7B+P,IAAO,OAAO,aAAa/E,GAAIhL,EAAC,CAAC,EAEnC,OAAO+P,EACV,CAEC,SAAS/C,GAAUhC,GAAKhC,GAAOC,GAAK,CAClC,MAAMV,GAAMyC,GAAI,QAEZ,CAAChC,IAASA,GAAQ,KAAGA,GAAQ,IAC7B,CAACC,IAAOA,GAAM,GAAKA,GAAMV,MAAKU,GAAMV,IAExC,IAAIyH,GAAM,GACV,QAAShQ,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GAC7BgQ,IAAOC,GAAoBjF,GAAIhL,EAAC,CAAC,EAEnC,OAAOgQ,EACV,CAEC,SAAS3C,GAAcrC,GAAKhC,GAAOC,GAAK,CACtC,MAAMiH,GAAQlF,GAAI,MAAMhC,GAAOC,EAAG,EAClC,IAAImG,GAAM,GAEV,QAASpP,GAAI,EAAGA,GAAIkQ,GAAM,OAAS,EAAGlQ,IAAK,EACzCoP,IAAO,OAAO,aAAac,GAAMlQ,EAAC,EAAKkQ,GAAMlQ,GAAI,CAAC,EAAI,GAAI,EAE5D,OAAOoP,EACV,CAEC7E,GAAO,UAAU,MAAQ,SAAgBvB,GAAOC,GAAK,CACnD,MAAMV,GAAM,KAAK,OACjBS,GAAQ,CAAC,CAACA,GACVC,GAAMA,KAAQ,OAAYV,GAAM,CAAC,CAACU,GAE9BD,GAAQ,GACVA,IAAST,GACLS,GAAQ,IAAGA,GAAQ,IACdA,GAAQT,KACjBS,GAAQT,IAGNU,GAAM,GACRA,IAAOV,GACHU,GAAM,IAAGA,GAAM,IACVA,GAAMV,KACfU,GAAMV,IAGJU,GAAMD,KAAOC,GAAMD,IAEvB,MAAMmH,GAAS,KAAK,SAASnH,GAAOC,EAAG,EAEvC,cAAO,eAAekH,GAAQ5F,GAAO,SAAS,EAEvC4F,EACR,EAKD,SAASC,GAAatJ,GAAQuJ,GAAKtF,GAAQ,CACzC,GAAKjE,GAAS,IAAO,GAAKA,GAAS,EAAG,MAAM,IAAI,WAAW,oBAAoB,EAC/E,GAAIA,GAASuJ,GAAMtF,GAAQ,MAAM,IAAI,WAAW,uCAAuC,CAC1F,CAECR,GAAO,UAAU,WACjBA,GAAO,UAAU,WAAa,SAAqBzD,GAAQmF,GAAYqE,GAAU,CAC/ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IAAUF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAE1D,IAAI8B,GAAM,KAAKjH,EAAM,EACjByJ,GAAM,EACNvQ,GAAI,EACR,KAAO,EAAEA,GAAIiM,KAAesE,IAAO,MACjCxC,IAAO,KAAKjH,GAAS9G,EAAC,EAAIuQ,GAG5B,OAAOxC,EACR,EAEDxD,GAAO,UAAU,WACjBA,GAAO,UAAU,WAAa,SAAqBzD,GAAQmF,GAAYqE,GAAU,CAC/ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IACHF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAG7C,IAAI8B,GAAM,KAAKjH,GAAS,EAAEmF,EAAU,EAChCsE,GAAM,EACV,KAAOtE,GAAa,IAAMsE,IAAO,MAC/BxC,IAAO,KAAKjH,GAAS,EAAEmF,EAAU,EAAIsE,GAGvC,OAAOxC,EACR,EAEDxD,GAAO,UAAU,UACjBA,GAAO,UAAU,UAAY,SAAoBzD,GAAQwJ,GAAU,CACjE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1C,KAAKA,EAAM,CACnB,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1C,KAAKA,EAAM,EAAK,KAAKA,GAAS,CAAC,GAAK,CAC5C,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EACzC,KAAKA,EAAM,GAAK,EAAK,KAAKA,GAAS,CAAC,CAC7C,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,GAExC,KAAKA,EAAM,EACf,KAAKA,GAAS,CAAC,GAAK,EACpB,KAAKA,GAAS,CAAC,GAAK,IACpB,KAAKA,GAAS,CAAC,EAAI,QACzB,EAEDyD,GAAO,UAAU,aACjBA,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAEzC,KAAKA,EAAM,EAAI,UACnB,KAAKA,GAAS,CAAC,GAAK,GACrB,KAAKA,GAAS,CAAC,GAAK,EACrB,KAAKA,GAAS,CAAC,EAClB,EAEDyD,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0B1J,GAAQ,CACtFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAM8J,GAAKrN,GACT,KAAK,EAAEuD,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GAElB+J,GAAK,KAAK,EAAE/J,EAAM,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB4J,GAAO,GAAK,GAEd,OAAO,OAAOE,EAAE,GAAK,OAAOC,EAAE,GAAK,OAAO,EAAE,EAC/C,CAAE,EAEDtG,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0B1J,GAAQ,CACtFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAM+J,GAAKtN,GAAQ,GAAK,GACtB,KAAK,EAAEuD,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAET8J,GAAK,KAAK,EAAE9J,EAAM,EAAI,GAAK,GAC/B,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB4J,GAEF,OAAQ,OAAOG,EAAE,GAAK,OAAO,EAAE,GAAK,OAAOD,EAAE,CAChD,CAAE,EAEDrG,GAAO,UAAU,UAAY,SAAoBzD,GAAQmF,GAAYqE,GAAU,CAC7ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IAAUF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAE1D,IAAI8B,GAAM,KAAKjH,EAAM,EACjByJ,GAAM,EACNvQ,GAAI,EACR,KAAO,EAAEA,GAAIiM,KAAesE,IAAO,MACjCxC,IAAO,KAAKjH,GAAS9G,EAAC,EAAIuQ,GAE5B,OAAAA,IAAO,IAEHxC,IAAOwC,KAAKxC,IAAO,KAAK,IAAI,EAAG,EAAI9B,EAAU,GAE1C8B,EACR,EAEDxD,GAAO,UAAU,UAAY,SAAoBzD,GAAQmF,GAAYqE,GAAU,CAC7ExJ,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACvBqE,IAAUF,GAAYtJ,GAAQmF,GAAY,KAAK,MAAM,EAE1D,IAAIjM,GAAIiM,GACJsE,GAAM,EACNxC,GAAM,KAAKjH,GAAS,EAAE9G,EAAC,EAC3B,KAAOA,GAAI,IAAMuQ,IAAO,MACtBxC,IAAO,KAAKjH,GAAS,EAAE9G,EAAC,EAAIuQ,GAE9B,OAAAA,IAAO,IAEHxC,IAAOwC,KAAKxC,IAAO,KAAK,IAAI,EAAG,EAAI9B,EAAU,GAE1C8B,EACR,EAEDxD,GAAO,UAAU,SAAW,SAAmBzD,GAAQwJ,GAAU,CAG/D,OAFAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC3C,KAAKA,EAAM,EAAI,KACZ,IAAO,KAAKA,EAAM,EAAI,GAAK,GADA,KAAKA,EAAM,CAEhD,EAEDyD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrExJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EACjD,MAAMiH,GAAM,KAAKjH,EAAM,EAAK,KAAKA,GAAS,CAAC,GAAK,EAChD,OAAQiH,GAAM,MAAUA,GAAM,WAAaA,EAC5C,EAEDxD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrExJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EACjD,MAAMiH,GAAM,KAAKjH,GAAS,CAAC,EAAK,KAAKA,EAAM,GAAK,EAChD,OAAQiH,GAAM,MAAUA,GAAM,WAAaA,EAC5C,EAEDxD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAEzC,KAAKA,EAAM,EAChB,KAAKA,GAAS,CAAC,GAAK,EACpB,KAAKA,GAAS,CAAC,GAAK,GACpB,KAAKA,GAAS,CAAC,GAAK,EACxB,EAEDyD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAEzC,KAAKA,EAAM,GAAK,GACrB,KAAKA,GAAS,CAAC,GAAK,GACpB,KAAKA,GAAS,CAAC,GAAK,EACpB,KAAKA,GAAS,CAAC,CACnB,EAEDyD,GAAO,UAAU,eAAiBiG,GAAmB,SAAyB1J,GAAQ,CACpFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAMiH,GAAM,KAAKjH,GAAS,CAAC,EACzB,KAAKA,GAAS,CAAC,EAAI,GAAK,EACxB,KAAKA,GAAS,CAAC,EAAI,GAAK,IACvB4J,IAAQ,IAEX,OAAQ,OAAO3C,EAAG,GAAK,OAAO,EAAE,GAC9B,OAAOxK,GACP,KAAK,EAAEuD,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EAAE,CAC7B,CAAE,EAEDyD,GAAO,UAAU,eAAiBiG,GAAmB,SAAyB1J,GAAQ,CACpFA,GAASA,KAAW,EACpB2J,GAAe3J,GAAQ,QAAQ,EAC/B,MAAMvD,GAAQ,KAAKuD,EAAM,EACnB4J,GAAO,KAAK5J,GAAS,CAAC,GACxBvD,KAAU,QAAamN,KAAS,SAClCC,GAAY7J,GAAQ,KAAK,OAAS,CAAC,EAGrC,MAAMiH,IAAOxK,IAAS,IACpB,KAAK,EAAEuD,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB,KAAK,EAAEA,EAAM,EAEf,OAAQ,OAAOiH,EAAG,GAAK,OAAO,EAAE,GAC9B,OAAO,KAAK,EAAEjH,EAAM,EAAI,GAAK,GAC7B,KAAK,EAAEA,EAAM,EAAI,GAAK,GACtB,KAAK,EAAEA,EAAM,EAAI,GAAK,EACtB4J,EAAI,CACT,CAAE,EAEDnG,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,GAAU,KAAK,KAAMvD,GAAQ,GAAM,GAAI,CAAC,CAChD,EAEDyD,GAAO,UAAU,YAAc,SAAsBzD,GAAQwJ,GAAU,CACrE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,GAAU,KAAK,KAAMvD,GAAQ,GAAO,GAAI,CAAC,CACjD,EAEDyD,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,GAAU,KAAK,KAAMvD,GAAQ,GAAM,GAAI,CAAC,CAChD,EAEDyD,GAAO,UAAU,aAAe,SAAuBzD,GAAQwJ,GAAU,CACvE,OAAAxJ,GAASA,KAAW,EACfwJ,IAAUF,GAAYtJ,GAAQ,EAAG,KAAK,MAAM,EAC1CuD,GAAU,KAAK,KAAMvD,GAAQ,GAAO,GAAI,CAAC,CACjD,EAED,SAASgK,GAAU9F,GAAK3O,GAAOyK,GAAQuJ,GAAK5C,GAAKsD,GAAK,CACpD,GAAI,CAACxG,GAAO,SAASS,EAAG,EAAG,MAAM,IAAI,UAAU,6CAA6C,EAC5F,GAAI3O,GAAQoR,IAAOpR,GAAQ0U,GAAK,MAAM,IAAI,WAAW,mCAAmC,EACxF,GAAIjK,GAASuJ,GAAMrF,GAAI,OAAQ,MAAM,IAAI,WAAW,oBAAoB,CAC3E,CAECT,GAAO,UAAU,YACjBA,GAAO,UAAU,YAAc,SAAsBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAIxF,GAHAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACxB,CAACqE,GAAU,CACb,MAAMU,GAAW,KAAK,IAAI,EAAG,EAAI/E,EAAU,EAAI,EAC/C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAY+E,GAAU,CAAC,CAC1D,CAEG,IAAIT,GAAM,EACNvQ,GAAI,EAER,IADA,KAAK8G,EAAM,EAAIzK,GAAQ,IAChB,EAAE2D,GAAIiM,KAAesE,IAAO,MACjC,KAAKzJ,GAAS9G,EAAC,EAAK3D,GAAQkU,GAAO,IAGrC,OAAOzJ,GAASmF,EACjB,EAED1B,GAAO,UAAU,YACjBA,GAAO,UAAU,YAAc,SAAsBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAIxF,GAHAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACpBmF,GAAaA,KAAe,EACxB,CAACqE,GAAU,CACb,MAAMU,GAAW,KAAK,IAAI,EAAG,EAAI/E,EAAU,EAAI,EAC/C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAY+E,GAAU,CAAC,CAC1D,CAEG,IAAIhR,GAAIiM,GAAa,EACjBsE,GAAM,EAEV,IADA,KAAKzJ,GAAS9G,EAAC,EAAI3D,GAAQ,IACpB,EAAE2D,IAAK,IAAMuQ,IAAO,MACzB,KAAKzJ,GAAS9G,EAAC,EAAK3D,GAAQkU,GAAO,IAGrC,OAAOzJ,GAASmF,EACjB,EAED1B,GAAO,UAAU,WACjBA,GAAO,UAAU,WAAa,SAAqBlO,GAAOyK,GAAQwJ,GAAU,CAC1E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,IAAM,CAAC,EACvD,KAAKA,EAAM,EAAKzK,GAAQ,IACjByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,CAAC,EACzD,KAAKA,EAAM,EAAKzK,GAAQ,IACxB,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EACvByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,CAAC,EACzD,KAAKA,EAAM,EAAKzK,KAAU,EAC1B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,CAAC,EAC7D,KAAKA,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,EAAM,EAAKzK,GAAQ,IACjByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,cACjBA,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,CAAC,EAC7D,KAAKA,EAAM,EAAKzK,KAAU,GAC1B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAED,SAASmK,GAAgBjG,GAAK3O,GAAOyK,GAAQiK,GAAKtD,GAAK,CACrDyD,GAAW7U,GAAO0U,GAAKtD,GAAKzC,GAAKlE,GAAQ,CAAC,EAE1C,IAAI8J,GAAK,OAAOvU,GAAQ,OAAO,UAAU,CAAC,EAC1C2O,GAAIlE,IAAQ,EAAI8J,GAChBA,GAAKA,IAAM,EACX5F,GAAIlE,IAAQ,EAAI8J,GAChBA,GAAKA,IAAM,EACX5F,GAAIlE,IAAQ,EAAI8J,GAChBA,GAAKA,IAAM,EACX5F,GAAIlE,IAAQ,EAAI8J,GAChB,IAAIC,GAAK,OAAOxU,IAAS,OAAO,EAAE,EAAI,OAAO,UAAU,CAAC,EACxD,OAAA2O,GAAIlE,IAAQ,EAAI+J,GAChBA,GAAKA,IAAM,EACX7F,GAAIlE,IAAQ,EAAI+J,GAChBA,GAAKA,IAAM,EACX7F,GAAIlE,IAAQ,EAAI+J,GAChBA,GAAKA,IAAM,EACX7F,GAAIlE,IAAQ,EAAI+J,GACT/J,EACV,CAEC,SAASqK,GAAgBnG,GAAK3O,GAAOyK,GAAQiK,GAAKtD,GAAK,CACrDyD,GAAW7U,GAAO0U,GAAKtD,GAAKzC,GAAKlE,GAAQ,CAAC,EAE1C,IAAI8J,GAAK,OAAOvU,GAAQ,OAAO,UAAU,CAAC,EAC1C2O,GAAIlE,GAAS,CAAC,EAAI8J,GAClBA,GAAKA,IAAM,EACX5F,GAAIlE,GAAS,CAAC,EAAI8J,GAClBA,GAAKA,IAAM,EACX5F,GAAIlE,GAAS,CAAC,EAAI8J,GAClBA,GAAKA,IAAM,EACX5F,GAAIlE,GAAS,CAAC,EAAI8J,GAClB,IAAIC,GAAK,OAAOxU,IAAS,OAAO,EAAE,EAAI,OAAO,UAAU,CAAC,EACxD,OAAA2O,GAAIlE,GAAS,CAAC,EAAI+J,GAClBA,GAAKA,IAAM,EACX7F,GAAIlE,GAAS,CAAC,EAAI+J,GAClBA,GAAKA,IAAM,EACX7F,GAAIlE,GAAS,CAAC,EAAI+J,GAClBA,GAAKA,IAAM,EACX7F,GAAIlE,EAAM,EAAI+J,GACP/J,GAAS,CACnB,CAECyD,GAAO,UAAU,iBAAmBiG,GAAmB,SAA2BnU,GAAOyK,GAAS,EAAG,CACnG,OAAOmK,GAAe,KAAM5U,GAAOyK,GAAQ,OAAO,CAAC,EAAG,OAAO,oBAAoB,CAAC,CACrF,CAAE,EAEDyD,GAAO,UAAU,iBAAmBiG,GAAmB,SAA2BnU,GAAOyK,GAAS,EAAG,CACnG,OAAOqK,GAAe,KAAM9U,GAAOyK,GAAQ,OAAO,CAAC,EAAG,OAAO,oBAAoB,CAAC,CACrF,CAAE,EAEDyD,GAAO,UAAU,WAAa,SAAqBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAGtF,GAFAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EAChB,CAACwJ,GAAU,CACb,MAAMc,GAAQ,KAAK,IAAI,EAAI,EAAInF,GAAc,CAAC,EAE9C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAYmF,GAAQ,EAAG,CAACA,EAAK,CAChE,CAEG,IAAIpR,GAAI,EACJuQ,GAAM,EACNc,GAAM,EAEV,IADA,KAAKvK,EAAM,EAAIzK,GAAQ,IAChB,EAAE2D,GAAIiM,KAAesE,IAAO,MAC7BlU,GAAQ,GAAKgV,KAAQ,GAAK,KAAKvK,GAAS9G,GAAI,CAAC,IAAM,IACrDqR,GAAM,GAER,KAAKvK,GAAS9G,EAAC,GAAM3D,GAAQkU,IAAQ,GAAKc,GAAM,IAGlD,OAAOvK,GAASmF,EACjB,EAED1B,GAAO,UAAU,WAAa,SAAqBlO,GAAOyK,GAAQmF,GAAYqE,GAAU,CAGtF,GAFAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EAChB,CAACwJ,GAAU,CACb,MAAMc,GAAQ,KAAK,IAAI,EAAI,EAAInF,GAAc,CAAC,EAE9C6E,GAAS,KAAMzU,GAAOyK,GAAQmF,GAAYmF,GAAQ,EAAG,CAACA,EAAK,CAChE,CAEG,IAAIpR,GAAIiM,GAAa,EACjBsE,GAAM,EACNc,GAAM,EAEV,IADA,KAAKvK,GAAS9G,EAAC,EAAI3D,GAAQ,IACpB,EAAE2D,IAAK,IAAMuQ,IAAO,MACrBlU,GAAQ,GAAKgV,KAAQ,GAAK,KAAKvK,GAAS9G,GAAI,CAAC,IAAM,IACrDqR,GAAM,GAER,KAAKvK,GAAS9G,EAAC,GAAM3D,GAAQkU,IAAQ,GAAKc,GAAM,IAGlD,OAAOvK,GAASmF,EACjB,EAED1B,GAAO,UAAU,UAAY,SAAoBlO,GAAOyK,GAAQwJ,GAAU,CACxE,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,IAAM,IAAK,EACvDzK,GAAQ,IAAGA,GAAQ,IAAOA,GAAQ,GACtC,KAAKyK,EAAM,EAAKzK,GAAQ,IACjByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,MAAO,EAC/D,KAAKA,EAAM,EAAKzK,GAAQ,IACxB,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EACvByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,MAAQ,MAAO,EAC/D,KAAKA,EAAM,EAAKzK,KAAU,EAC1B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,WAAW,EACvE,KAAKA,EAAM,EAAKzK,GAAQ,IACxB,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GACvByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IAAUQ,GAAS,KAAMzU,GAAOyK,GAAQ,EAAG,WAAY,WAAW,EACnEzK,GAAQ,IAAGA,GAAQ,WAAaA,GAAQ,GAC5C,KAAKyK,EAAM,EAAKzK,KAAU,GAC1B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,GAC9B,KAAKyK,GAAS,CAAC,EAAKzK,KAAU,EAC9B,KAAKyK,GAAS,CAAC,EAAKzK,GAAQ,IACrByK,GAAS,CACjB,EAEDyD,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0BnU,GAAOyK,GAAS,EAAG,CACjG,OAAOmK,GAAe,KAAM5U,GAAOyK,GAAQ,CAAC,OAAO,oBAAoB,EAAG,OAAO,oBAAoB,CAAC,CACzG,CAAE,EAEDyD,GAAO,UAAU,gBAAkBiG,GAAmB,SAA0BnU,GAAOyK,GAAS,EAAG,CACjG,OAAOqK,GAAe,KAAM9U,GAAOyK,GAAQ,CAAC,OAAO,oBAAoB,EAAG,OAAO,oBAAoB,CAAC,CACzG,CAAE,EAED,SAASwK,GAActG,GAAK3O,GAAOyK,GAAQuJ,GAAK5C,GAAKsD,GAAK,CACxD,GAAIjK,GAASuJ,GAAMrF,GAAI,OAAQ,MAAM,IAAI,WAAW,oBAAoB,EACxE,GAAIlE,GAAS,EAAG,MAAM,IAAI,WAAW,oBAAoB,CAC5D,CAEC,SAASyK,GAAYvG,GAAK3O,GAAOyK,GAAQ0K,GAAclB,GAAU,CAC/D,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IACHgB,GAAatG,GAAK3O,GAAOyK,GAAQ,CAAC,EAEpCuD,GAAU,MAAMW,GAAK3O,GAAOyK,GAAQ0K,GAAc,GAAI,CAAC,EAChD1K,GAAS,CACnB,CAECyD,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAOiB,GAAW,KAAMlV,GAAOyK,GAAQ,GAAMwJ,EAAQ,CACtD,EAED/F,GAAO,UAAU,aAAe,SAAuBlO,GAAOyK,GAAQwJ,GAAU,CAC9E,OAAOiB,GAAW,KAAMlV,GAAOyK,GAAQ,GAAOwJ,EAAQ,CACvD,EAED,SAASmB,GAAazG,GAAK3O,GAAOyK,GAAQ0K,GAAclB,GAAU,CAChE,OAAAjU,GAAQ,CAACA,GACTyK,GAASA,KAAW,EACfwJ,IACHgB,GAAatG,GAAK3O,GAAOyK,GAAQ,CAAC,EAEpCuD,GAAU,MAAMW,GAAK3O,GAAOyK,GAAQ0K,GAAc,GAAI,CAAC,EAChD1K,GAAS,CACnB,CAECyD,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAOmB,GAAY,KAAMpV,GAAOyK,GAAQ,GAAMwJ,EAAQ,CACvD,EAED/F,GAAO,UAAU,cAAgB,SAAwBlO,GAAOyK,GAAQwJ,GAAU,CAChF,OAAOmB,GAAY,KAAMpV,GAAOyK,GAAQ,GAAOwJ,EAAQ,CACxD,EAGD/F,GAAO,UAAU,KAAO,SAAerO,GAAQwV,GAAa1I,GAAOC,GAAK,CACtE,GAAI,CAACsB,GAAO,SAASrO,EAAM,EAAG,MAAM,IAAI,UAAU,6BAA6B,EAS/E,GARK8M,KAAOA,GAAQ,GAChB,CAACC,IAAOA,KAAQ,IAAGA,GAAM,KAAK,QAC9ByI,IAAexV,GAAO,SAAQwV,GAAcxV,GAAO,QAClDwV,KAAaA,GAAc,GAC5BzI,GAAM,GAAKA,GAAMD,KAAOC,GAAMD,IAG9BC,KAAQD,IACR9M,GAAO,SAAW,GAAK,KAAK,SAAW,EAAG,MAAO,GAGrD,GAAIwV,GAAc,EAChB,MAAM,IAAI,WAAW,2BAA2B,EAElD,GAAI1I,GAAQ,GAAKA,IAAS,KAAK,OAAQ,MAAM,IAAI,WAAW,oBAAoB,EAChF,GAAIC,GAAM,EAAG,MAAM,IAAI,WAAW,yBAAyB,EAGvDA,GAAM,KAAK,SAAQA,GAAM,KAAK,QAC9B/M,GAAO,OAASwV,GAAczI,GAAMD,KACtCC,GAAM/M,GAAO,OAASwV,GAAc1I,IAGtC,MAAMT,GAAMU,GAAMD,GAElB,OAAI,OAAS9M,IAAU,OAAOwO,GAAiB,UAAU,YAAe,WAEtE,KAAK,WAAWgH,GAAa1I,GAAOC,EAAG,EAEvCyB,GAAiB,UAAU,IAAI,KAC7BxO,GACA,KAAK,SAAS8M,GAAOC,EAAG,EACxByI,EACD,EAGInJ,EACR,EAMDgC,GAAO,UAAU,KAAO,SAAewD,GAAK/E,GAAOC,GAAK6C,GAAU,CAEhE,GAAI,OAAOiC,IAAQ,SAAU,CAS3B,GARI,OAAO/E,IAAU,UACnB8C,GAAW9C,GACXA,GAAQ,EACRC,GAAM,KAAK,QACF,OAAOA,IAAQ,WACxB6C,GAAW7C,GACXA,GAAM,KAAK,QAET6C,KAAa,QAAa,OAAOA,IAAa,SAChD,MAAM,IAAI,UAAU,2BAA2B,EAEjD,GAAI,OAAOA,IAAa,UAAY,CAACvB,GAAO,WAAWuB,EAAQ,EAC7D,MAAM,IAAI,UAAU,qBAAuBA,EAAQ,EAErD,GAAIiC,GAAI,SAAW,EAAG,CACpB,MAAM4D,GAAO5D,GAAI,WAAW,CAAC,GACxBjC,KAAa,QAAU6F,GAAO,KAC/B7F,KAAa,YAEfiC,GAAM4D,GAEf,CACA,MAAc,OAAO5D,IAAQ,SACxBA,GAAMA,GAAM,IACH,OAAOA,IAAQ,YACxBA,GAAM,OAAOA,EAAG,GAIlB,GAAI/E,GAAQ,GAAK,KAAK,OAASA,IAAS,KAAK,OAASC,GACpD,MAAM,IAAI,WAAW,oBAAoB,EAG3C,GAAIA,IAAOD,GACT,OAAO,KAGTA,GAAQA,KAAU,EAClBC,GAAMA,KAAQ,OAAY,KAAK,OAASA,KAAQ,EAE3C8E,KAAKA,GAAM,GAEhB,IAAI/N,GACJ,GAAI,OAAO+N,IAAQ,SACjB,IAAK/N,GAAIgJ,GAAOhJ,GAAIiJ,GAAK,EAAEjJ,GACzB,KAAKA,EAAC,EAAI+N,OAEP,CACL,MAAMmC,GAAQ3F,GAAO,SAASwD,EAAG,EAC7BA,GACAxD,GAAO,KAAKwD,GAAKjC,EAAQ,EACvBvD,GAAM2H,GAAM,OAClB,GAAI3H,KAAQ,EACV,MAAM,IAAI,UAAU,cAAgBwF,GAClC,mCAAmC,EAEvC,IAAK/N,GAAI,EAAGA,GAAIiJ,GAAMD,GAAO,EAAEhJ,GAC7B,KAAKA,GAAIgJ,EAAK,EAAIkH,GAAMlQ,GAAIuI,EAAG,CAEtC,CAEG,OAAO,IACR,EAMD,MAAMqJ,GAAS,CAAE,EACjB,SAASC,GAAGC,GAAKC,GAAYC,GAAM,CACjCJ,GAAOE,EAAG,EAAI,cAAwBE,EAAK,CACzC,aAAe,CACb,MAAO,EAEP,OAAO,eAAe,KAAM,UAAW,CACrC,MAAOD,GAAW,MAAM,KAAM,SAAS,EACvC,SAAU,GACV,aAAc,EACvB,CAAQ,EAGD,KAAK,KAAO,GAAG,KAAK,IAAI,KAAKD,EAAG,IAGhC,KAAK,MAEL,OAAO,KAAK,IACnB,CAEK,IAAI,MAAQ,CACV,OAAOA,EACd,CAEK,IAAI,KAAMzV,GAAO,CACf,OAAO,eAAe,KAAM,OAAQ,CAClC,aAAc,GACd,WAAY,GACZ,MAAAA,GACA,SAAU,EACnB,CAAQ,CACR,CAEK,UAAY,CACV,MAAO,GAAG,KAAK,IAAI,KAAKyV,EAAG,MAAM,KAAK,OAAO,EACpD,CACI,CACJ,CAECD,GAAE,2BACA,SAAUI,GAAM,CACd,OAAIA,GACK,GAAGA,EAAI,+BAGT,gDACR,EAAE,UAAU,EACfJ,GAAE,uBACA,SAAUI,GAAM/F,GAAQ,CACtB,MAAO,QAAQ+F,EAAI,oDAAoD,OAAO/F,EAAM,EACrF,EAAE,SAAS,EACd2F,GAAE,mBACA,SAAUrE,GAAK0E,GAAO3Q,GAAO,CAC3B,IAAI4Q,GAAM,iBAAiB3E,EAAG,qBAC1B4E,GAAW7Q,GACf,OAAI,OAAO,UAAUA,EAAK,GAAK,KAAK,IAAIA,EAAK,EAAI,GAAK,GACpD6Q,GAAWC,GAAsB,OAAO9Q,EAAK,CAAC,EACrC,OAAOA,IAAU,WAC1B6Q,GAAW,OAAO7Q,EAAK,GACnBA,GAAQ,OAAO,CAAC,GAAK,OAAO,EAAE,GAAKA,GAAQ,EAAE,OAAO,CAAC,GAAK,OAAO,EAAE,MACrE6Q,GAAWC,GAAsBD,EAAQ,GAE3CA,IAAY,KAEdD,IAAO,eAAeD,EAAK,cAAcE,EAAQ,GAC1CD,EACR,EAAE,UAAU,EAEf,SAASE,GAAuBtE,GAAK,CACnC,IAAIqB,GAAM,GACNpP,GAAI+N,GAAI,OACZ,MAAM/E,GAAQ+E,GAAI,CAAC,IAAM,IAAM,EAAI,EACnC,KAAO/N,IAAKgJ,GAAQ,EAAGhJ,IAAK,EAC1BoP,GAAM,IAAIrB,GAAI,MAAM/N,GAAI,EAAGA,EAAC,CAAC,GAAGoP,EAAG,GAErC,MAAO,GAAGrB,GAAI,MAAM,EAAG/N,EAAC,CAAC,GAAGoP,EAAG,EAClC,CAKC,SAASkD,GAAatH,GAAKlE,GAAQmF,GAAY,CAC7CwE,GAAe3J,GAAQ,QAAQ,GAC3BkE,GAAIlE,EAAM,IAAM,QAAakE,GAAIlE,GAASmF,EAAU,IAAM,SAC5D0E,GAAY7J,GAAQkE,GAAI,QAAUiB,GAAa,EAAE,CAEtD,CAEC,SAASiF,GAAY7U,GAAO0U,GAAKtD,GAAKzC,GAAKlE,GAAQmF,GAAY,CAC7D,GAAI5P,GAAQoR,IAAOpR,GAAQ0U,GAAK,CAC9B,MAAMxD,GAAI,OAAOwD,IAAQ,SAAW,IAAM,GAC1C,IAAImB,GAEF,MAAInB,KAAQ,GAAKA,KAAQ,OAAO,CAAC,EAC/BmB,GAAQ,OAAO3E,EAAC,WAAWA,EAAC,QAAQtB,GAAa,GAAK,CAAC,GAAGsB,EAAC,GAE3D2E,GAAQ,SAAS3E,EAAC,QAAQtB,GAAa,GAAK,EAAI,CAAC,GAAGsB,EAAC,iBACzCtB,GAAa,GAAK,EAAI,CAAC,GAAGsB,EAAC,GAKrC,IAAIqE,GAAO,iBAAiB,QAASM,GAAO7V,EAAK,CAC5D,CACGiW,GAAYtH,GAAKlE,GAAQmF,EAAU,CACtC,CAEC,SAASwE,GAAgBpU,GAAO4V,GAAM,CACpC,GAAI,OAAO5V,IAAU,SACnB,MAAM,IAAIuV,GAAO,qBAAqBK,GAAM,SAAU5V,EAAK,CAEhE,CAEC,SAASsU,GAAatU,GAAO0O,GAAQwH,GAAM,CACzC,MAAI,KAAK,MAAMlW,EAAK,IAAMA,IACxBoU,GAAepU,GAAOkW,EAAI,EACpB,IAAIX,GAAO,iBAAyB,SAAU,aAAcvV,EAAK,GAGrE0O,GAAS,EACL,IAAI6G,GAAO,yBAGb,IAAIA,GAAO,iBAAyB,SACR,eAA6B7G,EAAM,GACnC1O,EAAK,CAC1C,CAKC,MAAMmW,GAAoB,oBAE1B,SAASC,GAAajF,GAAK,CAMzB,GAJAA,GAAMA,GAAI,MAAM,GAAG,EAAE,CAAC,EAEtBA,GAAMA,GAAI,KAAI,EAAG,QAAQgF,GAAmB,EAAE,EAE1ChF,GAAI,OAAS,EAAG,MAAO,GAE3B,KAAOA,GAAI,OAAS,IAAM,GACxBA,GAAMA,GAAM,IAEd,OAAOA,EACV,CAEC,SAASX,GAAab,GAAQ0G,GAAO,CACnCA,GAAQA,IAAS,IACjB,IAAIpD,GACJ,MAAMvE,GAASiB,GAAO,OACtB,IAAI2G,GAAgB,KACpB,MAAMzC,GAAQ,CAAE,EAEhB,QAASlQ,GAAI,EAAGA,GAAI+K,GAAQ,EAAE/K,GAAG,CAI/B,GAHAsP,GAAYtD,GAAO,WAAWhM,EAAC,EAG3BsP,GAAY,OAAUA,GAAY,MAAQ,CAE5C,GAAI,CAACqD,GAAe,CAElB,GAAIrD,GAAY,MAAQ,EAEjBoD,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAClD,QACX,SAAoBlQ,GAAI,IAAM+K,GAAQ,EAEtB2H,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAClD,QACX,CAGSyC,GAAgBrD,GAEhB,QACT,CAGO,GAAIA,GAAY,MAAQ,EACjBoD,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAClDyC,GAAgBrD,GAChB,QACT,CAGOA,IAAaqD,GAAgB,OAAU,GAAKrD,GAAY,OAAU,KACnE,MAAUqD,KAEJD,IAAS,GAAK,IAAIxC,GAAM,KAAK,IAAM,IAAM,GAAI,EAMpD,GAHAyC,GAAgB,KAGZrD,GAAY,IAAM,CACpB,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KAAKZ,EAAS,CAC3B,SAAgBA,GAAY,KAAO,CAC5B,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KACJZ,IAAa,EAAM,IACnBA,GAAY,GAAO,GACpB,CACR,SAAgBA,GAAY,MAAS,CAC9B,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KACJZ,IAAa,GAAM,IACnBA,IAAa,EAAM,GAAO,IAC1BA,GAAY,GAAO,GACpB,CACR,SAAgBA,GAAY,QAAU,CAC/B,IAAKoD,IAAS,GAAK,EAAG,MACtBxC,GAAM,KACJZ,IAAa,GAAO,IACpBA,IAAa,GAAM,GAAO,IAC1BA,IAAa,EAAM,GAAO,IAC1BA,GAAY,GAAO,GACpB,CACR,KACO,OAAM,IAAI,MAAM,oBAAoB,CAE3C,CAEG,OAAOY,EACV,CAEC,SAASlB,GAAcxB,GAAK,CAC1B,MAAMoF,GAAY,CAAE,EACpB,QAAS5S,GAAI,EAAGA,GAAIwN,GAAI,OAAQ,EAAExN,GAEhC4S,GAAU,KAAKpF,GAAI,WAAWxN,EAAC,EAAI,GAAI,EAEzC,OAAO4S,EACV,CAEC,SAASzD,GAAgB3B,GAAKkF,GAAO,CACnC,IAAIzI,GAAG4G,GAAID,GACX,MAAMgC,GAAY,CAAE,EACpB,QAAS5S,GAAI,EAAGA,GAAIwN,GAAI,QACjB,GAAAkF,IAAS,GAAK,GADW,EAAE1S,GAGhCiK,GAAIuD,GAAI,WAAWxN,EAAC,EACpB6Q,GAAK5G,IAAK,EACV2G,GAAK3G,GAAI,IACT2I,GAAU,KAAKhC,EAAE,EACjBgC,GAAU,KAAK/B,EAAE,EAGnB,OAAO+B,EACV,CAEC,SAAS9F,GAAeU,GAAK,CAC3B,OAAOpD,GAAO,YAAYqI,GAAYjF,EAAG,CAAC,CAC7C,CAEC,SAASsB,GAAY+D,GAAKC,GAAKhM,GAAQiE,GAAQ,CAC7C,IAAI/K,GACJ,IAAKA,GAAI,EAAGA,GAAI+K,IACT,EAAA/K,GAAI8G,IAAUgM,GAAI,QAAY9S,IAAK6S,GAAI,QADtB,EAAE7S,GAExB8S,GAAI9S,GAAI8G,EAAM,EAAI+L,GAAI7S,EAAC,EAEzB,OAAOA,EACV,CAKC,SAASuL,GAAY/I,GAAK+P,GAAM,CAC9B,OAAO/P,cAAe+P,IACnB/P,IAAO,MAAQA,GAAI,aAAe,MAAQA,GAAI,YAAY,MAAQ,MACjEA,GAAI,YAAY,OAAS+P,GAAK,IACrC,CACC,SAAShG,GAAa/J,GAAK,CAEzB,OAAOA,KAAQA,EAClB,CAIC,MAAMyN,GAAuB,UAAY,CACvC,MAAM8C,GAAW,mBACX1M,GAAQ,IAAI,MAAM,GAAG,EAC3B,QAASrG,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAG,CAC3B,MAAMgT,GAAMhT,GAAI,GAChB,QAASwO,GAAI,EAAGA,GAAI,GAAI,EAAEA,GACxBnI,GAAM2M,GAAMxE,EAAC,EAAIuE,GAAS/S,EAAC,EAAI+S,GAASvE,EAAC,CAEhD,CACG,OAAOnI,EACV,EAAK,EAGJ,SAASmK,GAAoByC,GAAI,CAC/B,OAAO,OAAO,OAAW,IAAcC,GAAyBD,EACnE,CAEC,SAASC,IAA0B,CACjC,MAAM,IAAI,MAAM,sBAAsB,CACvC,CACD,GAAExM,CAAM,EAET,MAAM6D,GAAS7D,EAAO,OAEtByD,GAAe,KAAAzD,EAAO,KACtByD,GAAsB,YAAAzD,EAAO,YAC7ByD,GAAiB,OAAAzD,EAAO,OACxByD,GAAe,KAAAzD,EAAO,KACtByD,GAAsB,YAAAzD,EAAO,YAC7ByD,GAA4B,kBAAAzD,EAAO,kBACnCyD,GAAqB,WAAAzD,EAAO,WAC5ByD,GAA4B,kBAAAzD,EAAO,kBACnCyD,GAAe,KAAAzD,EAAO,KACtByD,GAAe,KAAAzD,EAAO,KACtByD,GAAoB,UAAAzD,EAAO,UAC3ByD,GAAA,QAAkBI,GAClBJ,GAAkB,QAAAzD,EAAO,QACzByD,GAAiB,OAAAzD,EAAO,OACxByD,GAAqB,WAAAzD,EAAO,WAC5ByD,GAA2B,iBAAAzD,EAAO,iBAClCyD,GAA2B,iBAAAzD,EAAO,iBAClCyD,GAAoB,UAAAzD,EAAO,wOCn0E3B,IAAIA,EAASuQ,YAAA,EACT1M,GAAS7D,EAAO,OAGpB,SAASwQ,GAAWrE,GAAKC,GAAK,CAC5B,QAAS1W,MAAOyW,GACdC,GAAI1W,EAAG,EAAIyW,GAAIzW,EAAG,CAEtB,CACImO,GAAO,MAAQA,GAAO,OAASA,GAAO,aAAeA,GAAO,gBAC9D4M,GAAiB,QAAAzQ,GAGjBwQ,GAAUxQ,EAAQyD,CAAO,EACzBA,EAAiB,OAAAiN,IAGnB,SAASA,GAAYnM,GAAKC,GAAkBH,GAAQ,CAClD,OAAOR,GAAOU,GAAKC,GAAkBH,EAAM,CAC7C,CAEAqM,GAAW,UAAY,OAAO,OAAO7M,GAAO,SAAS,EAGrD2M,GAAU3M,GAAQ6M,EAAU,EAE5BA,GAAW,KAAO,SAAUnM,GAAKC,GAAkBH,GAAQ,CACzD,GAAI,OAAOE,IAAQ,SACjB,MAAM,IAAI,UAAU,+BAA+B,EAErD,OAAOV,GAAOU,GAAKC,GAAkBH,EAAM,CAC7C,EAEAqM,GAAW,MAAQ,SAAU1R,GAAMmG,GAAMC,GAAU,CACjD,GAAI,OAAOpG,IAAS,SAClB,MAAM,IAAI,UAAU,2BAA2B,EAEjD,IAAIsF,GAAMT,GAAO7E,EAAI,EACrB,OAAImG,KAAS,OACP,OAAOC,IAAa,SACtBd,GAAI,KAAKa,GAAMC,EAAQ,EAEvBd,GAAI,KAAKa,EAAI,EAGfb,GAAI,KAAK,CAAC,EAELA,EACT,EAEAoM,GAAW,YAAc,SAAU1R,GAAM,CACvC,GAAI,OAAOA,IAAS,SAClB,MAAM,IAAI,UAAU,2BAA2B,EAEjD,OAAO6E,GAAO7E,EAAI,CACpB,EAEA0R,GAAW,gBAAkB,SAAU1R,GAAM,CAC3C,GAAI,OAAOA,IAAS,SAClB,MAAM,IAAI,UAAU,2BAA2B,EAEjD,OAAOgB,EAAO,WAAWhB,EAAI,CAC/B,2JChEA,IAAI6E,GAAS0M,oBAAuB,OAGpC,SAASI,EAAMC,EAAWC,GAAW,CACnC,KAAK,OAAShN,GAAO,MAAM+M,CAAS,EACpC,KAAK,WAAaC,GAClB,KAAK,WAAaD,EAClB,KAAK,KAAO,CACd,CAEA,OAAAD,EAAK,UAAU,OAAS,SAAUxQ,EAAM2Q,GAAK,CACvC,OAAO3Q,GAAS,WAClB2Q,GAAMA,IAAO,OACb3Q,EAAO0D,GAAO,KAAK1D,EAAM2Q,EAAG,GAQ9B,QALIC,GAAQ,KAAK,OACbH,GAAY,KAAK,WACjBvM,GAASlE,EAAK,OACd6Q,GAAQ,KAAK,KAER5Q,GAAS,EAAGA,GAASiE,IAAS,CAIrC,QAHI4M,GAAWD,GAAQJ,GACnBM,GAAY,KAAK,IAAI7M,GAASjE,GAAQwQ,GAAYK,EAAQ,EAErD3X,GAAI,EAAGA,GAAI4X,GAAW5X,KAC7ByX,GAAME,GAAW3X,EAAC,EAAI6G,EAAKC,GAAS9G,EAAC,EAGvC0X,IAASE,GACT9Q,IAAU8Q,GAELF,GAAQJ,KAAe,GAC1B,KAAK,QAAQG,EAAK,CAExB,CAEE,YAAK,MAAQ1M,GACN,IACT,EAEAsM,EAAK,UAAU,OAAS,SAAUG,EAAK,CACrC,IAAIK,GAAM,KAAK,KAAO,KAAK,WAE3B,KAAK,OAAOA,EAAG,EAAI,IAInB,KAAK,OAAO,KAAK,EAAGA,GAAM,CAAC,EAEvBA,IAAO,KAAK,aACd,KAAK,QAAQ,KAAK,MAAM,EACxB,KAAK,OAAO,KAAK,CAAC,GAGpB,IAAIC,GAAO,KAAK,KAAO,EAGvB,GAAIA,IAAQ,WACV,KAAK,OAAO,cAAcA,GAAM,KAAK,WAAa,CAAC,MAG9C,CACL,IAAIC,IAAWD,GAAO,cAAgB,EAClCE,IAAYF,GAAOC,IAAW,WAElC,KAAK,OAAO,cAAcC,GAAU,KAAK,WAAa,CAAC,EACvD,KAAK,OAAO,cAAcD,GAAS,KAAK,WAAa,CAAC,CAC1D,CAEE,KAAK,QAAQ,KAAK,MAAM,EACxB,IAAIE,GAAO,KAAK,MAAK,EAErB,OAAOT,EAAMS,GAAK,SAAST,CAAG,EAAIS,EACpC,EAEAZ,EAAK,UAAU,QAAU,UAAY,CACnC,MAAM,IAAI,MAAM,yCAAyC,CAC3D,EAEAY,OAAiBZ,oGCxEjB,IAAIa,GAAWjB,wBAAA,EACXI,EAAOc,YAAA,EACP5N,EAAS6N,oBAAuB,OAEhCC,GAAI,CACN,WAAY,WAAY,YAAgB,UAC1C,EAEIC,GAAI,IAAI,MAAM,EAAE,EAEpB,SAASC,IAAO,CACd,KAAK,KAAI,EACT,KAAK,GAAKD,GAEVjB,EAAK,KAAK,KAAM,GAAI,EAAE,CACxB,CAEAa,GAASK,GAAKlB,CAAI,EAElBkB,GAAI,UAAU,KAAO,UAAY,CAC/B,YAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,UACV,KAAK,GAAK,WAEH,IACT,EAEA,SAASC,GAAO1P,GAAK,CACnB,OAAQA,IAAO,EAAMA,KAAQ,EAC/B,CAEA,SAAS2P,GAAQ3P,GAAK,CACpB,OAAQA,IAAO,GAAOA,KAAQ,CAChC,CAEA,SAAS4P,GAAI1O,GAAGyB,GAAGxB,GAAGF,GAAG,CACvB,OAAIC,KAAM,EAAWyB,GAAIxB,GAAO,CAACwB,GAAK1B,GAClCC,KAAM,EAAWyB,GAAIxB,GAAMwB,GAAI1B,GAAME,GAAIF,GACtC0B,GAAIxB,GAAIF,EACjB,CAEA,OAAAwO,GAAI,UAAU,QAAU,SAAUI,GAAG,CASnC,QARIL,GAAI,KAAK,GAET9L,GAAI,KAAK,GAAK,EACdf,GAAI,KAAK,GAAK,EACdxB,GAAI,KAAK,GAAK,EACdF,GAAI,KAAK,GAAK,EACdlF,GAAI,KAAK,GAAK,EAET7E,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAGsY,GAAEtY,EAAC,EAAI2Y,GAAE,YAAY3Y,GAAI,CAAC,EACvD,KAAOA,GAAI,GAAI,EAAEA,GAAGsY,GAAEtY,EAAC,EAAIsY,GAAEtY,GAAI,CAAC,EAAIsY,GAAEtY,GAAI,CAAC,EAAIsY,GAAEtY,GAAI,EAAE,EAAIsY,GAAEtY,GAAI,EAAE,EAErE,QAASwO,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAG,CAC3B,IAAIxE,GAAI,CAAC,EAAEwE,GAAI,IACXoK,GAAKJ,GAAMhM,EAAC,EAAIkM,GAAG1O,GAAGyB,GAAGxB,GAAGF,EAAC,EAAIlF,GAAIyT,GAAE9J,EAAC,EAAI6J,GAAErO,EAAC,EAAK,EAExDnF,GAAIkF,GACJA,GAAIE,GACJA,GAAIwO,GAAOhN,EAAC,EACZA,GAAIe,GACJA,GAAIoM,EACR,CAEE,KAAK,GAAMpM,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMf,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMxB,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMF,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMlF,GAAI,KAAK,GAAM,CAC5B,EAEA0T,GAAI,UAAU,MAAQ,UAAY,CAChC,IAAIM,GAAItO,EAAO,YAAY,EAAE,EAE7B,OAAAsO,GAAE,aAAa,KAAK,GAAK,EAAG,CAAC,EAC7BA,GAAE,aAAa,KAAK,GAAK,EAAG,CAAC,EAC7BA,GAAE,aAAa,KAAK,GAAK,EAAG,CAAC,EAC7BA,GAAE,aAAa,KAAK,GAAK,EAAG,EAAE,EAC9BA,GAAE,aAAa,KAAK,GAAK,EAAG,EAAE,EAEvBA,EACT,EAEA,IAAiBN,wGCpFjB,IAAIL,GAAWjB,wBAAA,EACXI,EAAOc,YAAA,EACP5N,EAAS6N,oBAAuB,OAEhCC,GAAI,CACN,WAAY,WAAY,YAAgB,UAC1C,EAEIC,GAAI,IAAI,MAAM,EAAE,EAEpB,SAASQ,IAAQ,CACf,KAAK,KAAI,EACT,KAAK,GAAKR,GAEVjB,EAAK,KAAK,KAAM,GAAI,EAAE,CACxB,CAEAa,GAASY,GAAMzB,CAAI,EAEnByB,GAAK,UAAU,KAAO,UAAY,CAChC,YAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,UACV,KAAK,GAAK,WAEH,IACT,EAEA,SAASC,GAAOjQ,GAAK,CACnB,OAAQA,IAAO,EAAMA,KAAQ,EAC/B,CAEA,SAAS0P,GAAO1P,GAAK,CACnB,OAAQA,IAAO,EAAMA,KAAQ,EAC/B,CAEA,SAAS2P,GAAQ3P,GAAK,CACpB,OAAQA,IAAO,GAAOA,KAAQ,CAChC,CAEA,SAAS4P,GAAI1O,GAAGyB,GAAGxB,GAAGF,GAAG,CACvB,OAAIC,KAAM,EAAWyB,GAAIxB,GAAO,CAACwB,GAAK1B,GAClCC,KAAM,EAAWyB,GAAIxB,GAAMwB,GAAI1B,GAAME,GAAIF,GACtC0B,GAAIxB,GAAIF,EACjB,CAEA,OAAA+O,GAAK,UAAU,QAAU,SAAUH,GAAG,CASpC,QARIL,GAAI,KAAK,GAET9L,GAAI,KAAK,GAAK,EACdf,GAAI,KAAK,GAAK,EACdxB,GAAI,KAAK,GAAK,EACdF,GAAI,KAAK,GAAK,EACdlF,GAAI,KAAK,GAAK,EAET7E,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAGsY,GAAEtY,EAAC,EAAI2Y,GAAE,YAAY3Y,GAAI,CAAC,EACvD,KAAOA,GAAI,GAAI,EAAEA,GAAGsY,GAAEtY,EAAC,EAAI+Y,GAAMT,GAAEtY,GAAI,CAAC,EAAIsY,GAAEtY,GAAI,CAAC,EAAIsY,GAAEtY,GAAI,EAAE,EAAIsY,GAAEtY,GAAI,EAAE,CAAC,EAE5E,QAASwO,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAG,CAC3B,IAAIxE,GAAI,CAAC,EAAEwE,GAAI,IACXoK,GAAKJ,GAAMhM,EAAC,EAAIkM,GAAG1O,GAAGyB,GAAGxB,GAAGF,EAAC,EAAIlF,GAAIyT,GAAE9J,EAAC,EAAI6J,GAAErO,EAAC,EAAK,EAExDnF,GAAIkF,GACJA,GAAIE,GACJA,GAAIwO,GAAOhN,EAAC,EACZA,GAAIe,GACJA,GAAIoM,EACR,CAEE,KAAK,GAAMpM,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMf,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMxB,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMF,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMlF,GAAI,KAAK,GAAM,CAC5B,EAEAiU,GAAK,UAAU,MAAQ,UAAY,CACjC,IAAID,GAAItO,EAAO,YAAY,EAAE,EAE7B,OAAAsO,GAAE,aAAa,KAAK,GAAK,EAAG,CAAC,EAC7BA,GAAE,aAAa,KAAK,GAAK,EAAG,CAAC,EAC7BA,GAAE,aAAa,KAAK,GAAK,EAAG,CAAC,EAC7BA,GAAE,aAAa,KAAK,GAAK,EAAG,EAAE,EAC9BA,GAAE,aAAa,KAAK,GAAK,EAAG,EAAE,EAEvBA,EACT,EAEA,KAAiBC,qHC1FjB,IAAIZ,GAAWjB,wBAAA,EACXI,EAAOc,YAAA,EACP5N,EAAS6N,oBAAuB,OAEhCC,GAAI,CACN,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,UAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,UAAY,UAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACtC,EAEIC,GAAI,IAAI,MAAM,EAAE,EAEpB,SAASU,IAAU,CACjB,KAAK,KAAI,EAET,KAAK,GAAKV,GAEVjB,EAAK,KAAK,KAAM,GAAI,EAAE,CACxB,CAEAa,GAASc,GAAQ3B,CAAI,EAErB2B,GAAO,UAAU,KAAO,UAAY,CAClC,YAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,UACV,KAAK,GAAK,WAEH,IACT,EAEA,SAASC,GAAI7X,GAAGgB,GAAG8W,GAAG,CACpB,OAAOA,GAAK9X,IAAKgB,GAAI8W,GACvB,CAEA,SAASC,GAAK/X,GAAGgB,GAAG8W,GAAG,CACrB,OAAQ9X,GAAIgB,GAAM8W,IAAK9X,GAAIgB,GAC7B,CAEA,SAASgX,GAAQhY,GAAG,CAClB,OAAQA,KAAM,EAAIA,IAAK,KAAOA,KAAM,GAAKA,IAAK,KAAOA,KAAM,GAAKA,IAAK,GACvE,CAEA,SAASiY,GAAQjY,GAAG,CAClB,OAAQA,KAAM,EAAIA,IAAK,KAAOA,KAAM,GAAKA,IAAK,KAAOA,KAAM,GAAKA,IAAK,EACvE,CAEA,SAASkY,GAAQlY,GAAG,CAClB,OAAQA,KAAM,EAAIA,IAAK,KAAOA,KAAM,GAAKA,IAAK,IAAOA,KAAM,CAC7D,CAEA,SAASmY,GAAQnY,GAAG,CAClB,OAAQA,KAAM,GAAKA,IAAK,KAAOA,KAAM,GAAKA,IAAK,IAAOA,KAAM,EAC9D,CAEA,OAAA4X,GAAO,UAAU,QAAU,SAAUL,GAAG,CAYtC,QAXIL,GAAI,KAAK,GAET9L,GAAI,KAAK,GAAK,EACdf,GAAI,KAAK,GAAK,EACdxB,GAAI,KAAK,GAAK,EACdF,GAAI,KAAK,GAAK,EACdlF,GAAI,KAAK,GAAK,EACd9B,GAAI,KAAK,GAAK,EACdyW,GAAI,KAAK,GAAK,EACdC,GAAI,KAAK,GAAK,EAETzZ,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAGsY,GAAEtY,EAAC,EAAI2Y,GAAE,YAAY3Y,GAAI,CAAC,EACvD,KAAOA,GAAI,GAAI,EAAEA,GAAGsY,GAAEtY,EAAC,EAAKuZ,GAAOjB,GAAEtY,GAAI,CAAC,CAAC,EAAIsY,GAAEtY,GAAI,CAAC,EAAIsZ,GAAOhB,GAAEtY,GAAI,EAAE,CAAC,EAAIsY,GAAEtY,GAAI,EAAE,EAAK,EAE3F,QAASwO,GAAI,EAAGA,GAAI,GAAI,EAAEA,GAAG,CAC3B,IAAIkL,GAAMD,GAAIJ,GAAOxU,EAAC,EAAIoU,GAAGpU,GAAG9B,GAAGyW,EAAC,EAAInB,GAAE7J,EAAC,EAAI8J,GAAE9J,EAAC,EAAK,EACnDmL,GAAMP,GAAO5M,EAAC,EAAI2M,GAAI3M,GAAGf,GAAGxB,EAAC,EAAK,EAEtCwP,GAAID,GACJA,GAAIzW,GACJA,GAAI8B,GACJA,GAAKkF,GAAI2P,GAAM,EACf3P,GAAIE,GACJA,GAAIwB,GACJA,GAAIe,GACJA,GAAKkN,GAAKC,GAAM,CACpB,CAEE,KAAK,GAAMnN,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMf,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMxB,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMF,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMlF,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAM9B,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMyW,GAAI,KAAK,GAAM,EAC1B,KAAK,GAAMC,GAAI,KAAK,GAAM,CAC5B,EAEAT,GAAO,UAAU,MAAQ,UAAY,CACnC,IAAIH,GAAItO,EAAO,YAAY,EAAE,EAE7B,OAAAsO,GAAE,aAAa,KAAK,GAAI,CAAC,EACzBA,GAAE,aAAa,KAAK,GAAI,CAAC,EACzBA,GAAE,aAAa,KAAK,GAAI,CAAC,EACzBA,GAAE,aAAa,KAAK,GAAI,EAAE,EAC1BA,GAAE,aAAa,KAAK,GAAI,EAAE,EAC1BA,GAAE,aAAa,KAAK,GAAI,EAAE,EAC1BA,GAAE,aAAa,KAAK,GAAI,EAAE,EAC1BA,GAAE,aAAa,KAAK,GAAI,EAAE,EAEnBA,EACT,EAEA,OAAiBG,uHC9HjB,IAAId,GAAWjB,wBAAA,EACX+B,EAASb,cAAA,EACTd,EAAOe,YAAA,EACP7N,GAASqP,oBAAuB,OAEhCtB,GAAI,IAAI,MAAM,EAAE,EAEpB,SAASuB,IAAU,CACjB,KAAK,KAAI,EAET,KAAK,GAAKvB,GAEVjB,EAAK,KAAK,KAAM,GAAI,EAAE,CACxB,CAEA,OAAAa,GAAS2B,GAAQb,CAAM,EAEvBa,GAAO,UAAU,KAAO,UAAY,CAClC,YAAK,GAAK,WACV,KAAK,GAAK,UACV,KAAK,GAAK,UACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WACV,KAAK,GAAK,WAEH,IACT,EAEAA,GAAO,UAAU,MAAQ,UAAY,CACnC,IAAIhB,GAAItO,GAAO,YAAY,EAAE,EAE7B,OAAAsO,GAAE,aAAa,KAAK,GAAI,CAAC,EACzBA,GAAE,aAAa,KAAK,GAAI,CAAC,EACzBA,GAAE,aAAa,KAAK,GAAI,CAAC,EACzBA,GAAE,aAAa,KAAK,GAAI,EAAE,EAC1BA,GAAE,aAAa,KAAK,GAAI,EAAE,EAC1BA,GAAE,aAAa,KAAK,GAAI,EAAE,EAC1BA,GAAE,aAAa,KAAK,GAAI,EAAE,EAEnBA,EACT,EAEA,OAAiBgB,uHCpDjB,IAAI3B,GAAWjB,wBAAA,EACXI,EAAOc,YAAA,EACP5N,EAAS6N,oBAAuB,OAEhCC,GAAI,CACN,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,UAAY,UACpC,UAAY,WAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,UAAY,UACpC,UAAY,UAAY,UAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,UAAY,WAAY,UACtC,EAEIC,GAAI,IAAI,MAAM,GAAG,EAErB,SAASwB,IAAU,CACjB,KAAK,KAAI,EACT,KAAK,GAAKxB,GAEVjB,EAAK,KAAK,KAAM,IAAK,GAAG,CAC1B,CAEAa,GAAS4B,GAAQzC,CAAI,EAErByC,GAAO,UAAU,KAAO,UAAY,CAClC,YAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,UACX,KAAK,IAAM,WAEX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,UACX,KAAK,IAAM,WACX,KAAK,IAAM,UAEJ,IACT,EAEA,SAASC,GAAI3Y,GAAGgB,GAAG8W,GAAG,CACpB,OAAOA,GAAK9X,IAAKgB,GAAI8W,GACvB,CAEA,SAASC,GAAK/X,GAAGgB,GAAG8W,GAAG,CACrB,OAAQ9X,GAAIgB,GAAM8W,IAAK9X,GAAIgB,GAC7B,CAEA,SAASgX,GAAQhY,GAAG4Y,GAAI,CACtB,OAAQ5Y,KAAM,GAAK4Y,IAAM,IAAMA,KAAO,EAAI5Y,IAAK,KAAO4Y,KAAO,EAAI5Y,IAAK,GACxE,CAEA,SAASiY,GAAQjY,GAAG4Y,GAAI,CACtB,OAAQ5Y,KAAM,GAAK4Y,IAAM,KAAO5Y,KAAM,GAAK4Y,IAAM,KAAOA,KAAO,EAAI5Y,IAAK,GAC1E,CAEA,SAAS6Y,GAAQ7Y,GAAG4Y,GAAI,CACtB,OAAQ5Y,KAAM,EAAI4Y,IAAM,KAAO5Y,KAAM,EAAI4Y,IAAM,IAAO5Y,KAAM,CAC9D,CAEA,SAAS8Y,GAAS9Y,GAAG4Y,GAAI,CACvB,OAAQ5Y,KAAM,EAAI4Y,IAAM,KAAO5Y,KAAM,EAAI4Y,IAAM,KAAO5Y,KAAM,EAAI4Y,IAAM,GACxE,CAEA,SAASG,GAAQ/Y,GAAG4Y,GAAI,CACtB,OAAQ5Y,KAAM,GAAK4Y,IAAM,KAAOA,KAAO,GAAK5Y,IAAK,GAAMA,KAAM,CAC/D,CAEA,SAASgZ,GAAShZ,GAAG4Y,GAAI,CACvB,OAAQ5Y,KAAM,GAAK4Y,IAAM,KAAOA,KAAO,GAAK5Y,IAAK,IAAMA,KAAM,EAAI4Y,IAAM,GACzE,CAEA,SAASK,GAAU7N,GAAGf,GAAG,CACvB,OAAQe,KAAM,EAAMf,KAAM,EAAK,EAAI,CACrC,CAEA,OAAAqO,GAAO,UAAU,QAAU,SAAUnB,GAAG,CAqBtC,QApBIL,GAAI,KAAK,GAETgC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBtB,GAAK,KAAK,IAAM,EAChBuB,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAEhBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAChBC,GAAK,KAAK,IAAM,EAEXpb,GAAI,EAAGA,GAAI,GAAIA,IAAK,EAC3BsY,GAAEtY,EAAC,EAAI2Y,GAAE,YAAY3Y,GAAI,CAAC,EAC1BsY,GAAEtY,GAAI,CAAC,EAAI2Y,GAAE,YAAY3Y,GAAI,EAAI,CAAC,EAEpC,KAAOA,GAAI,IAAKA,IAAK,EAAG,CACtB,IAAIqb,GAAK/C,GAAEtY,GAAI,EAAM,EACjBga,GAAK1B,GAAEtY,GAAI,GAAK,EAAI,CAAC,EACrBsZ,GAASW,GAAOoB,GAAIrB,EAAE,EACtBsB,GAAUpB,GAAQF,GAAIqB,EAAE,EAE5BA,GAAK/C,GAAEtY,GAAI,EAAI,CAAC,EAChBga,GAAK1B,GAAEtY,GAAI,EAAI,EAAI,CAAC,EACpB,IAAIuZ,GAASY,GAAOkB,GAAIrB,EAAE,EACtBuB,GAAUnB,GAAQJ,GAAIqB,EAAE,EAGxBG,GAAOlD,GAAEtY,GAAI,EAAI,CAAC,EAClByb,GAAOnD,GAAEtY,GAAI,EAAI,EAAI,CAAC,EAEtB0b,GAAQpD,GAAEtY,GAAI,GAAK,CAAC,EACpB2b,GAAQrD,GAAEtY,GAAI,GAAK,EAAI,CAAC,EAExB4b,GAAON,GAAUG,GAAQ,EACzBI,GAAOvC,GAASkC,GAAOnB,GAASuB,GAAKN,EAAO,EAAK,EACrDM,GAAOA,GAAML,GAAW,EACxBM,GAAOA,GAAMtC,GAASc,GAASuB,GAAKL,EAAO,EAAK,EAChDK,GAAOA,GAAMD,GAAS,EACtBE,GAAOA,GAAMH,GAAQrB,GAASuB,GAAKD,EAAK,EAAK,EAE7CrD,GAAEtY,EAAC,EAAI6b,GACPvD,GAAEtY,GAAI,CAAC,EAAI4b,EACf,CAEE,QAASpN,GAAI,EAAGA,GAAI,IAAKA,IAAK,EAAG,CAC/BqN,GAAMvD,GAAE9J,EAAC,EACToN,GAAMtD,GAAE9J,GAAI,CAAC,EAEb,IAAIsN,GAAO3C,GAAImB,GAAIC,GAAItB,EAAE,EACrB8C,GAAO5C,GAAI0B,GAAIC,GAAIC,EAAE,EAErBiB,GAAU5C,GAAOkB,GAAIO,EAAE,EACvBoB,GAAU7C,GAAOyB,GAAIP,EAAE,EACvB4B,GAAU7C,GAAOoB,GAAIQ,EAAE,EACvBkB,GAAU9C,GAAO4B,GAAIR,EAAE,EAGvB2B,GAAM/D,GAAE7J,EAAC,EACT6N,GAAMhE,GAAE7J,GAAI,CAAC,EAEb8N,GAAMvC,GAAGU,GAAIC,GAAIC,EAAE,EACnB4B,GAAMxC,GAAGkB,GAAIC,GAAIC,EAAE,EAEnBqB,GAAOpB,GAAKe,GAAW,EACvBM,GAAO7B,GAAKsB,GAAU7B,GAASmC,GAAKpB,EAAE,EAAK,EAC/CoB,GAAOA,GAAMD,GAAO,EACpBE,GAAOA,GAAMH,GAAMjC,GAASmC,GAAKD,EAAG,EAAK,EACzCC,GAAOA,GAAMH,GAAO,EACpBI,GAAOA,GAAML,GAAM/B,GAASmC,GAAKH,EAAG,EAAK,EACzCG,GAAOA,GAAMZ,GAAO,EACpBa,GAAOA,GAAMZ,GAAMxB,GAASmC,GAAKZ,EAAG,EAAK,EAGzC,IAAIc,GAAOT,GAAUF,GAAQ,EACzBY,GAAOX,GAAUF,GAAOzB,GAASqC,GAAKT,EAAO,EAAK,EAEtDrB,GAAKD,GACLS,GAAKD,GACLR,GAAKD,GACLS,GAAKD,GACLR,GAAKD,GACLS,GAAKD,GACLA,GAAMD,GAAKwB,GAAO,EAClB/B,GAAMD,GAAKiC,GAAMpC,GAASY,GAAID,EAAE,EAAK,EACrCR,GAAKvB,GACL+B,GAAKD,GACL9B,GAAKsB,GACLQ,GAAKD,GACLP,GAAKD,GACLQ,GAAKD,GACLA,GAAM2B,GAAME,GAAO,EACnBpC,GAAMmC,GAAME,GAAMtC,GAASQ,GAAI2B,EAAG,EAAK,CAC3C,CAEE,KAAK,IAAO,KAAK,IAAM3B,GAAM,EAC7B,KAAK,IAAO,KAAK,IAAMC,GAAM,EAC7B,KAAK,IAAO,KAAK,IAAMC,GAAM,EAC7B,KAAK,IAAO,KAAK,IAAMC,GAAM,EAC7B,KAAK,IAAO,KAAK,IAAMC,GAAM,EAC7B,KAAK,IAAO,KAAK,IAAMC,GAAM,EAC7B,KAAK,IAAO,KAAK,IAAMC,GAAM,EAC7B,KAAK,IAAO,KAAK,IAAMC,GAAM,EAE7B,KAAK,IAAO,KAAK,IAAMd,GAAKD,GAAS,KAAK,IAAKQ,EAAE,EAAK,EACtD,KAAK,IAAO,KAAK,IAAMN,GAAKF,GAAS,KAAK,IAAKS,EAAE,EAAK,EACtD,KAAK,IAAO,KAAK,IAAM7B,GAAKoB,GAAS,KAAK,IAAKU,EAAE,EAAK,EACtD,KAAK,IAAO,KAAK,IAAMP,GAAKH,GAAS,KAAK,IAAKW,EAAE,EAAK,EACtD,KAAK,IAAO,KAAK,IAAMP,GAAKJ,GAAS,KAAK,IAAKY,EAAE,EAAK,EACtD,KAAK,IAAO,KAAK,IAAMP,GAAKL,GAAS,KAAK,IAAKa,EAAE,EAAK,EACtD,KAAK,IAAO,KAAK,IAAMP,GAAKN,GAAS,KAAK,IAAKc,EAAE,EAAK,EACtD,KAAK,IAAO,KAAK,IAAMP,GAAKP,GAAS,KAAK,IAAKe,EAAE,EAAK,CACxD,EAEAtB,GAAO,UAAU,MAAQ,UAAY,CACnC,IAAIjB,GAAItO,EAAO,YAAY,EAAE,EAE7B,SAASqS,GAAcnD,GAAGoD,GAAG/V,GAAQ,CACnC+R,GAAE,aAAaY,GAAG3S,EAAM,EACxB+R,GAAE,aAAagE,GAAG/V,GAAS,CAAC,CAChC,CAEE,OAAA8V,GAAa,KAAK,IAAK,KAAK,IAAK,CAAC,EAClCA,GAAa,KAAK,IAAK,KAAK,IAAK,CAAC,EAClCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EAE5B/D,EACT,EAEA,OAAiBiB,uHCnQjB,IAAI5B,GAAWjB,wBAAA,EACX6F,EAAS3E,cAAA,EACTd,EAAOe,YAAA,EACP7N,GAASqP,oBAAuB,OAEhCtB,GAAI,IAAI,MAAM,GAAG,EAErB,SAASyE,IAAU,CACjB,KAAK,KAAI,EACT,KAAK,GAAKzE,GAEVjB,EAAK,KAAK,KAAM,IAAK,GAAG,CAC1B,CAEA,OAAAa,GAAS6E,GAAQD,CAAM,EAEvBC,GAAO,UAAU,KAAO,UAAY,CAClC,YAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,UACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WAEX,KAAK,IAAM,WACX,KAAK,IAAM,UACX,KAAK,IAAM,UACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WACX,KAAK,IAAM,WAEJ,IACT,EAEAA,GAAO,UAAU,MAAQ,UAAY,CACnC,IAAIlE,GAAItO,GAAO,YAAY,EAAE,EAE7B,SAASqS,GAAcnD,GAAGoD,GAAG/V,GAAQ,CACnC+R,GAAE,aAAaY,GAAG3S,EAAM,EACxB+R,GAAE,aAAagE,GAAG/V,GAAS,CAAC,CAChC,CAEE,OAAA8V,GAAa,KAAK,IAAK,KAAK,IAAK,CAAC,EAClCA,GAAa,KAAK,IAAK,KAAK,IAAK,CAAC,EAClCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EACnCA,GAAa,KAAK,IAAK,KAAK,IAAK,EAAE,EAE5B/D,EACT,EAEA,OAAiBkE,wHCxDjB,IAAI5S,GAAU6S,OAAc,QAAG,SAAcC,EAAW,CACtDA,EAAYA,EAAU,YAAW,EAEjC,IAAIC,GAAY/S,GAAQ8S,CAAS,EACjC,GAAI,CAACC,GAAW,MAAM,IAAI,MAAMD,EAAY,6CAA6C,EAEzF,OAAO,IAAIC,EACb,EAEA,OAAA/S,GAAQ,IAAM8M,WAAA,EACd9M,GAAQ,KAAOgO,YAAA,EACfhO,GAAQ,OAASiO,cAAA,EACjBjO,GAAQ,OAASyP,cAAA,EACjBzP,GAAQ,OAASgT,cAAA,EACjBhT,GAAQ,OAASiT,cAAA,kGCRV,SAAS,UAAU5P,GAAK6P,EAAe,GAAO,CACjD,OAAIA,IACA7P,GAAM,IAAMA,IACTA,GAAI,QAAQ,uBAAwB,SAAU8P,EAAOC,GAAIC,GAAI,CAChE,OAAIA,GACOA,GAAG,YAAa,EACpBD,GAAG,YAAa,CAC/B,CAAK,CACL,CAKO,SAAS,UAAU/P,GAAK,CAC3B,OAAQA,GAEH,QAAQ,yBAA0B,SAAS,EAE3C,QAAQ,qBAAsB,OAAO,EACrC,YAAa,CACtB,CAMO,SAAS,UAAUA,GAAK,CAC3B,OAAOA,GAAI,QAAQ,SAAWiQ,GAAQA,EAAI,OAAO,CAAC,EAAE,YAAa,EAAGA,EAAI,OAAO,CAAC,EAAE,aAAa,CACnG,CAmCO,SAAS,QAAQlc,GAAOmc,EAAU,GAAI,CACzC,KAAM,CAAE,cAAAC,EAAgB,EAAG,UAAAC,GAAY,KAAM,WAAAC,GAAa,CAAC,EAAKH,EAehE,OAdiBnc,GAAM,MAAMqc,EAAS,EACP,OAAO,CAACE,GAAK/P,KAAQ,CAEhD,MAAMgQ,GAAehQ,GAChB,QAAQ,oCAAqC,OAAO,EACpD,MAAM,GAAG,EAERhD,GAASgT,GAAa,OAAS,EAAIF,GAAaF,EAChDK,GAAeD,GAChB,IAAKE,IAASA,GAAK,OAAO,EAAGlT,EAAM,CAAC,EACpC,KAAK,EAAE,EACZ,OAAA+S,GAAI,KAAKE,EAAY,EACdF,EACV,EAAE,EAAE,EACgB,KAAKF,EAAS,CACvC,CAOO,SAAS,KAAKrc,GAAOmc,EAAU,GAAI,CACtC,MAAMQ,EAAe,MAAM,MAAM,EACjCA,EAAa,OAAO3c,GAAO,MAAM,EACjC,MAAM4c,GAAcD,EAAa,OAAO,KAAK,EAC7C,OAAIR,EAAQ,OACDS,GAAY,MAAM,EAAGT,EAAQ,MAAM,EAEvCS,EACX,CCrGO,MAAM,YAAa,CACtB,OAAO,iBAAiBC,EAASC,EAAe,CAC5C,MAAMC,GAAK,aAAaF,CAAO,EACzBG,GAAK,aAAaF,CAAa,EACrC,OAAQC,GAAG,CAAC,EAAIC,GAAG,CAAC,GACfD,GAAG,CAAC,IAAMC,GAAG,CAAC,GAAKD,GAAG,CAAC,EAAIC,GAAG,CAAC,GAC/BD,GAAG,CAAC,IAAMC,GAAG,CAAC,GAAKD,GAAG,CAAC,IAAMC,GAAG,CAAC,GAAKD,GAAG,CAAC,GAAKC,GAAG,CAAC,CAChE,CACA,CACA,SAAS,aAAaH,GAAU,GAAI,CAChC,MAAMI,EAAI,CAAC,EAAG,EAAG,CAAC,EAClB,OAAAJ,GAAQ,MAAM,GAAG,EAAE,QAAQ,CAAC/hB,EAAO2D,KAAOwe,EAAExe,EAAC,EAAI,SAAS3D,EAAO,EAAE,CAAE,EAC9DmiB,CACX,CCRO,MAAM,WAAY,CAOrB,OAAO,eAAelK,EAAQ,CAC1B,MAAO,CACH,SACA,UACA,eACA,eACA,QACA,OACA,iBACA,WACH,EAAC,SAASA,EAAO,QAAQ,IAAI,CACtC,CAII,OAAO,cAAcA,EAAQ,CACzB,MAAO,CAAC,QAAS,SAAS,EAAE,SAASA,EAAO,QAAQ,IAAI,CAChE,CACI,OAAO,0BAA0BA,EAAQ8J,EAAS,CAC9C,OAAQ9J,EAAO,SAAW,MACtB,aAAa,iBAAiBA,EAAO,QAAS8J,CAAO,CACjE,CACI,OAAO,iBAAiB9J,EAAQ,CAC5B,MAAO,CAAC,WAAY,kBAAmB,aAAa,EAAE,SAASA,EAAO,QAAQ,IAAI,CAC1F,CAKI,OAAO,mBAAmBoJ,EAASe,EAAc,CAC7C,GAAIf,EAAQ,IAAK,CACb,MAAMgB,GAAmB,KAAK,mBAAmBhB,EAAQ,GAAG,EACxDe,GACAA,EAAa,QACbC,GAAiB,WACjBA,GAAiB,IAAMA,GAAiB,UAE5C,UAAWtiB,MAAO,OAAO,KAAKsiB,EAAgB,EACtC,OAAOA,GAAiBtiB,EAAG,EAAM,KACjC,OAAOsiB,GAAiBtiB,EAAG,EAGnC,OAAO,OAAO,OAAO,GAAIshB,EAASgB,EAAgB,CAC9D,CACQ,OAAO,OAAO,OAAO,CAAE,EAAEhB,CAAO,CACxC,CAII,OAAO,0BAA0BA,EAASe,EAAc,CACpD,GAAIf,EAAQ,IAAK,CACb,MAAMgB,GAAmB,KAAK,0BAA0BhB,EAAQ,GAAG,EAC/De,GACAA,EAAa,QACbC,GAAiB,WACjBA,GAAiB,IAAMA,GAAiB,UAE5C,UAAWtiB,MAAO,OAAO,KAAKsiB,EAAgB,EACtC,OAAOA,GAAiBtiB,EAAG,EAAM,KACjC,OAAOsiB,GAAiBtiB,EAAG,EAGnC,OAAO,OAAO,OAAO,GAAIshB,EAASgB,EAAgB,CAC9D,CACQ,OAAO,OAAO,OAAO,CAAE,EAAEhB,CAAO,CACxC,CAcI,OAAO,WAAW,CAAE,eAAAiB,CAAgB,EAAEF,KAAiBzI,GAAO,CAC1D,MAAM4I,GAASH,GAAgBA,EAAa,OAASA,EAAa,OAAS,IAC3E,IAAII,GAAW7I,GAAM,SAAW,EAAIA,GAAM,CAAC,EAAIA,GAAM,KAAK4I,EAAM,EAChE,GAAID,GACAA,EAAiB,GACjBE,GAAS,OAASF,EAAgB,CAClC,GAAIF,GAAgBA,EAAa,UAAY,GAAM,CAC/C,MAAMK,GAAiB,QAAQD,EAAQ,EACvC,GAAIC,GAAe,OAASH,EACxB,OAAOG,EAE3B,CACY,OAAO,KAAKD,GAAU,CAAE,OAAQF,CAAc,CAAE,CAC5D,CACQ,OAAOE,EACf,CAII,OAAO,iBAAiB,CAAE,eAAAF,CAAgB,EAAEF,KAAiBzI,GAAO,CAChE,OAAI,OAAOyI,GAAiB,UACxBzI,GAAM,QAAQyI,CAAY,EAC1BA,EAAe,CAAE,QAAS,GAAO,OAAQ,GAAK,GAG9CA,EAAe,OAAO,OAAO,CAAE,QAAS,GAAO,OAAQ,GAAK,EAAEA,CAAY,EAEvE,KAAK,WAAW,CAAE,eAAAE,CAAc,EAAIF,EAAc,GAAGzI,EAAK,CACzE,CAOI,OAAO,mBAAmB+I,EAAK,CAC3B,MAAMxM,EAAOwM,EAAI,MAAM,GAAG,EAAE,CAAC,EACvBC,GAAeD,EAAI,QAAQ,IAAI,EAC/BE,GAAUF,EAAI,OAAOC,GAAe,CAAC,EACrCE,GAAcD,GAAQ,QAAQ,GAAG,EACjCE,GAAOD,KAAgB,GAAKD,GAAQ,OAAO,EAAGC,EAAW,EAAID,GACnE,IAAIG,GAAYF,KAAgB,GAAKD,GAAQ,OAAOC,GAAc,CAAC,EAAI,OAEnEE,IAAaA,GAAU,QAAQ,GAAG,IAAM,KACxCA,GAAYA,GAAU,OAAO,EAAGA,GAAU,QAAQ,GAAG,CAAC,GAE1D,MAAMC,GAAaF,GAAK,YAAY,GAAG,EACjCG,GAAsBH,GAAK,OAAO,EAAGE,EAAU,EAC/CE,GAAcJ,GAAK,OAAOE,GAAa,CAAC,EAC9C,IAAIG,GAAWF,GACXG,GAAW,GACf,MAAMC,GAAaJ,GAAoB,QAAQ,GAAG,EAC9CI,KAAe,KACfF,GAAWF,GAAoB,OAAO,EAAGI,EAAU,EACnDD,GAAWH,GAAoB,OAAOI,GAAa,CAAC,GAExD,KAAM,CAACC,GAAMC,EAAI,EAAIL,GAAY,MAAM,GAAG,EAC1C,MAAO,CACH,KAAMhN,EACN,KAAMoN,GACN,SAAU,mBAAmBH,EAAQ,EACrC,SAAU,mBAAmBC,EAAQ,EACrC,KAAMG,GAAO,SAASA,EAAI,EAAI,OAC9B,SAAUR,IAAa,MAC1B,CACT,CAII,OAAO,0BAA0BL,EAAK,CAClC,MAAMxM,EAAOwM,EAAI,MAAM,GAAG,EAAE,CAAC,EACvBC,GAAeD,EAAI,QAAQ,IAAI,EAC/BE,GAAUF,EAAI,OAAOC,GAAe,CAAC,EACrCE,GAAcD,GAAQ,QAAQ,GAAG,EACjCE,GAAOD,KAAgB,GAAKD,GAAQ,OAAO,EAAGC,EAAW,EAAID,GACnE,IAAIG,GAAYF,KAAgB,GAAKD,GAAQ,OAAOC,GAAc,CAAC,EAAI,OACnEW,GAAoB,GACpBF,GACAC,GACAE,GACAC,GACAC,GAAgB,CAAE,EACtB,GAAIZ,IAAaA,GAAU,QAAQ,GAAG,IAAM,GAAI,CAE5CS,GAAoBT,GAAU,OAAOA,GAAU,QAAQ,GAAG,EAAI,EAAGA,GAAU,MAAM,EACjF,MAAMa,GAAcJ,GAAkB,MAAM,GAAG,EAC/C,IAAIK,GACAC,GAEJF,GAAY,QAASG,IAAe,CAChCF,GAAYE,GAAW,MAAM,GAAG,EAAE,CAAC,EACnCD,GAAcC,GAAW,MAAM,GAAG,EAAE,CAAC,EACrCJ,GAAcE,EAAS,EAAIC,EAC3C,CAAa,EAEDJ,GAAaC,GAAc,WAC3BZ,GAAYA,GAAU,OAAO,EAAGA,GAAU,QAAQ,GAAG,CAAC,CAClE,CACQ,MAAMC,GAAaF,GAAK,YAAY,GAAG,EACjCG,GAAsBH,GAAK,OAAO,EAAGE,EAAU,EAC/CE,GAAcJ,GAAK,OAAOE,GAAa,CAAC,EAC9C,IAAIG,GAAWF,GACXG,GAAW,GACf,MAAMC,GAAaJ,GAAoB,QAAQ,GAAG,EAC9CI,KAAe,KACfF,GAAWF,GAAoB,OAAO,EAAGI,EAAU,EACnDD,GAAWH,GAAoB,OAAOI,GAAa,CAAC,GAGpDK,GACAD,GAAiBP,GAIjB,CAACI,GAAMC,EAAI,EAAIL,GAAY,MAAM,GAAG,EAExC,IAAIc,GAAgB,CAChB,KAAM9N,EACN,KAAMoN,GACN,eAAgBG,GAChB,SAAU,mBAAmBN,EAAQ,EACrC,SAAU,mBAAmBC,EAAQ,EACrC,KAAMG,GAAO,SAASA,EAAI,EAAI,OAC9B,SAAUR,IAAa,MAC1B,EAED,SAAW,CAAChjB,GAAKC,EAAK,IAAK,OAAO,QAAQ2jB,EAAa,EACnDK,GAAcjkB,EAAG,EAAIC,GAEzB,OAAOgkB,EACf,CACA,CCvNO,MAAM,aAAc,CAIvB,YAAYC,EAAYC,EAAoBC,GAAe,CACvD,KAAK,WAAaF,EAClB,KAAK,mBAAqBC,EAC1B,KAAK,oBAAsB,GAC3B,KAAK,kBAAoB,GACrBC,IACA,YAAY,OAAO,KAAMA,EAAa,CAElD,CAII,IAAI,QAAS,CACT,OAAI,KAAK,gBAAkB,OAChB,KAAK,cACZ,KAAK,SACE,KAAK,SAAS,cAAgB,KAAK,SAAS,YAChD,EACf,CAII,IAAI,YAAa,CACb,GAAI,CAAC,KAAK,oBAAqB,CAC3B,IAAI5a,EAAW,IAAM,CACjB,UAAW6a,KAAU,KAAK,mBAAmB,QAGzC,GAFIA,EAAO,YAAc,KAAK,MAAM,MAEhC,KAAK,UACH,KAAK,SAAS,QAAQ,KAAMrM,IAAWqM,EAAO,YAC5C,KAAK,MAAM,KAAO,IAAMrM,GAAO,YAAY,EAC/C,MAAO,GAEf,MAAO,EACV,EACD,KAAK,gBAAkBxO,EAAU,EACjC,KAAK,oBAAsB,EACvC,CACQ,OAAO,KAAK,eACpB,CAII,IAAI,WAAY,CACZ,OAAO,KAAK,SACN,KAAK,SAAS,UACd,KAAK,gBACnB,CAOI,IAAI,aAAc,CACd,GAAK,kBAAkB,gBAAgB,KAAK,gBAAgB,EAE5D,OAAO,KAAK,iBAAiB,OAAO,EAAG,KAAK,iBAAiB,QAAQ,GAAG,CAAC,CACjF,CAQI,IAAI,sBAAuB,CACvB,GAAK,kBAAkB,gBAAgB,KAAK,gBAAgB,EAE5D,OAAO,KAAK,iBAAiB,OAAO,KAAK,iBAAiB,QAAQ,GAAG,EAAI,CAAC,CAClF,CAOI,IAAI,UAAW,CACX,GAAI,CAAC,KAAK,kBAAmB,CACzB,IAAIA,EAAW,IAAM,CACjB,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,gBAAgB,EACxD,OACJ,MAAM8a,EAAyB,KAAK,mBAAmB,gBAAgB,KAAK,WAAW,EACvF,IAAIpL,GAAWoL,EAAuB,SAAS,6BAA6B,KAAK,oBAAoB,EAIrG,GAHIpL,IAGAoL,EAAuB,SAAS,uBAChCpL,GACIoL,EAAuB,SAAS,qBAAqB,6BAA6B,KAAK,oBAAoB,EAC3GpL,IACA,OAAOA,GAGf,MAAM,IAAI,aAAa,+BAA+B,KAAK,oBAAoB,2BAA2B,CAC7G,EACD,KAAK,cAAgB1P,EAAS,KAAK,IAAI,EAAG,EAC1C,KAAK,kBAAoB,EACrC,CACQ,OAAO,KAAK,aACpB,CAKI,IAAI,UAAW,CAEX,GAAI,KAAK,SACL,OAAO,KAAK,SAAS,sBAEzB,GAAI,KAAK,WAAW,YAAY,KAAK,gBAAgB,EACjD,OAAO,KAAK,WAAW,YAAY,KAAK,gBAAgB,EAE5D,GAAI,KAAK,aAAe,KAAK,WAAW,YAAY,KAAK,WAAW,EAChE,OAAO,KAAK,WAAW,YAAY,KAAK,WAAW,CAc/D,CAII,IAAI,eAAgB,CAChB,GAAI,CAAC,KAAK,SACN,MAAM,IAAI,aAAa,sDAAsD,EAEjF,GAAI,OAAO,KAAK,kBAAqB,SACjC,MAAM,IAAI,aAAa,mCAAmC,EAE9D,MAAM+a,EAAgB,KAAK,iBAAiB,OAAO,EAAG,KAAK,iBAAiB,QAAQ,GAAG,CAAC,EACxF,OAAI,KAAK,SAAS,SACP,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWA,EAAe,KAAK,MAAM,IAAI,EAGxF,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAW,KAAK,MAAM,KAAMA,CAAa,CAE3G,CACI,IAAI,0BAA2B,CAC3B,GAAK,KAAK,cAEV,OAAO,KAAK,cAAc,MAAM,GAAG,EAAE,CAAC,CAC9C,CACI,IAAI,2BAA4B,CAC5B,GAAK,KAAK,cAEV,OAAO,KAAK,cAAc,MAAM,GAAG,EAAE,CAAC,CAC9C,CACA,CClKO,MAAM,mBAAoB,CAI7B,YAAYJ,EAAoBK,EAAqB,CACjD,KAAK,mBAAqBL,EAI1B,KAAK,gBAAkB,GACvB,YAAY,OAAO,KAAMK,GAAuB,CAAA,CAAE,CAC1D,CAII,IAAI,yBAA0B,CAC1B,OAAO,KAAK,SAAS,qBAC7B,CAOI,IAAI,aAAc,CACd,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,YAAY,EACpD,MAAM,IAAI,aAAa,+DAA+D,EAC1F,OAAO,KAAK,aAAa,OAAO,EAAG,KAAK,aAAa,QAAQ,GAAG,CAAC,CACzE,CAQI,IAAI,sBAAuB,CACvB,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,YAAY,EACpD,MAAM,IAAI,aAAa,+DAA+D,EAC1F,OAAO,KAAK,aAAa,OAAO,KAAK,aAAa,QAAQ,GAAG,EAAI,CAAC,CAC1E,CAMI,IAAI,UAAW,CACX,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,YAAY,EACpD,MAAM,IAAI,aAAa,+DAA+D,EAE1F,MAAMtL,EADyB,KAAK,mBAAmB,gBAAgB,KAAK,WAAW,EAC/C,SAAS,6BAA6B,KAAK,oBAAoB,EACvG,GAAI,CAACA,EACD,MAAM,IAAI,aAAa,+BAA+B,KAAK,oBAAoB,2BAA2B,EAC9G,OAAOA,CACf,CAII,IAAI,eAAgB,CAChB,KAAM,CAACuL,EAAaC,CAAgB,EAAI,KAAK,aAAa,MAAM,GAAG,EACnE,OAAOD,EAAc,IAAMC,EAAmB,MACtD,CAKI,IAAI,kBAAmB,CACnB,OAAO,KAAK,SAAS,sBAC7B,CACI,IAAI,0BAA2B,CAC3B,OAAO,KAAK,cAAc,OAAO,EAAG,KAAK,cAAc,QAAQ,GAAG,CAAC,CAC3E,CACI,IAAI,2BAA4B,CAC5B,OAAO,KAAK,cAAc,OAAO,KAAK,cAAc,QAAQ,GAAG,EAAI,CAAC,CAC5E,CACA,CC9EO,MAAM,sBAAuB,CAIhC,YAAYC,EAAeC,EAAwB,CAC/C,KAAK,cAAgBD,EACrB,YAAY,OAAO,KAAMC,GAA0B,CAAA,CAAE,CAC7D,CAII,IAAI,yBAA0B,CAC1B,OAAO,KAAK,SAAS,qBAC7B,CAOI,IAAI,aAAc,CACd,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,YAAY,EACpD,MAAM,IAAI,aAAa,+DAA+D,EAC1F,OAAO,KAAK,aAAa,MAAM,GAAG,EAAE,CAAC,CAC7C,CAQI,IAAI,kBAAmB,CACnB,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,YAAY,EACpD,MAAM,IAAI,aAAa,0DAA0D,EACrF,OAAO,KAAK,aAAa,MAAM,GAAG,EAAE,CAAC,CAC7C,CACI,IAAI,eAAgB,CAChB,KAAM,CAACH,EAAaC,CAAgB,EAAI,KAAK,aAAa,MAAM,GAAG,EACnE,OAAOD,EAAc,IAAMC,EAAmB,KACtD,CAMI,IAAI,UAAW,CACX,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,YAAY,EACpD,MAAM,IAAI,aAAa,0DAA0D,EACrF,KAAM,CAACD,EAAa9L,CAAY,EAAI,KAAK,aAAa,MAAM,GAAG,EAEzDO,GADyB,KAAK,cAAc,gBAAgBuL,CAAW,EACrC,SAAS,6BAA6B9L,CAAY,EAC1F,GAAI,CAACO,GACD,MAAM,IAAI,aAAa,+BAA+BP,CAAY,2BAA2B,EACjG,OAAOO,EACf,CAKI,IAAI,UAAW,CACX,GAAI,CAAC,kBAAkB,gBAAgB,KAAK,YAAY,EACpD,MAAM,IAAI,aAAa,0DAA0D,EACrF,MAAMuL,EAAc,KAAK,aAAa,MAAM,GAAG,EAAE,CAAC,EAElD,OADkB,KAAK,cAAc,gBAAgBA,CAAW,EAC/C,QACzB,CACI,IAAI,2BAA4B,CAC5B,OAAO,KAAK,cAAc,MAAM,GAAG,EAAE,CAAC,CAC9C,CACA,CCjEO,MAAM,kBAAmB,CAI5B,YAAYP,EAAY,CACpB,KAAK,WAAaA,EAOlB,KAAK,qBAAuB,OAI5B,KAAK,YAAc,GAInB,KAAK,QAAU,CAAE,EAIjB,KAAK,UAAY,SAIjB,KAAK,QAAU,CAAE,EAIjB,KAAK,iBAAmB,EAIxB,KAAK,eAAiB,GAItB,KAAK,iBAAmB,CAAE,EAI1B,KAAK,sBAAwB,CAAE,EAI/B,KAAK,WAAa,GAIlB,KAAK,SAAW,GAIhB,KAAK,eAAiB,CAAE,EAIxB,KAAK,qBAAuB,CAAE,EAI9B,KAAK,wBAA0B,CAAE,EAIjC,KAAK,OAAS,CAAE,EAIhB,KAAK,QAAU,CAAE,EAIjB,KAAK,SAAW,CAAE,EAIlB,KAAK,SAAW,CAAE,EAKlB,KAAK,YAAc,GAInB,KAAK,WAAa,CAAE,EAMpB,KAAK,gBAAkB,GAMvB,KAAK,uBAAyB,GAK9B,KAAK,+BAAiC,GAItC,KAAK,SAAW,GAMhB,KAAK,0BAA4B,GAIjC,KAAK,QAAU,CAAE,EAKjB,KAAK,cAAgB,CAAE,EAIvB,KAAK,cAAgB,CAAE,EAKvB,KAAK,aAAe,GAIpB,KAAK,cAAgB,GAIrB,KAAK,eAAiB,GAMtB,KAAK,iBAAmB,CAAE,EAM1B,KAAK,iBAAmB,CAAE,EAC1B,KAAK,uBAAyB,CAAE,EAC5BA,EAAW,QAAQ,uBACnB,KAAK,qBAAuBA,EAAW,QAAQ,sBAEnD,KAAK,WACDA,EAAW,SACL,mBAAqB,EACvC,CAQI,IAAI,aAAc,CACd,GAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,EAAE,QAC5B,KAAK,UAAU,aACf,KAAK,QAAQ,QAAQ,sBAAsB,IAAM,GAAI,CACrD,MAAMW,EAAgB,KAAK,UAAU,SAAS,SAAW,CAAE,EAC3D,OAAO,OAAO,KAAKA,CAAa,EAAE,OAAO,CAACC,EAAS9kB,MAC/C8kB,EAAQ,KAAK,UAAU,KAAO,IAAM9kB,EAAG,EAAI6kB,EAAc7kB,EAAG,EACrD8kB,GACR,EAAE,CACjB,CACQ,OAAO,KAAK,QACpB,CAOI,aAAalL,EAAO,CAKhB,YAAK,UAAYA,EACVA,CACf,CAII,YAAY0H,EAAS,CACjB,IAAIzH,EAAYyH,EAAQ,KACpB,CAACzH,GAAayH,EAAQ,YACtBzH,EAAYyH,EAAQ,WACpB,CAACzH,GAAa,OAAOyH,EAAQ,QAAW,aACxCzH,EAAYyH,EAAQ,OAAO,MAC3B,CAACzH,GAAa,OAAOyH,EAAQ,QAAW,WACxCzH,EAAYyH,EAAQ,QACxB,MAAM1H,GAAQ,IAAI,MAClB,OAAAA,GAAM,KAAO0H,EAAQ,KACjBzH,IACAD,GAAM,KAAOC,GACbyH,EAAQ,WACR1H,GAAM,SAAW0H,EAAQ,UACzBA,EAAQ,QAAU,CAAC1H,GAAM,cACzBA,GAAM,SAAW,KAAK,WAAW,YAAY0H,EAAQ,MAAM,GAC3DA,EAAQ,YACR1H,GAAM,UAAY0H,EAAQ,WAC1BA,EAAQ,WACR1H,GAAM,SAAW0H,EAAQ,UAC7B,KAAK,QAAQ,KAAK1H,EAAK,EAChBA,EACf,CAKI,gBAAgBC,EAAW,CACvB,MAAMD,EAAQ,KAAK,QAAQ,KAAMA,IAAUA,GAAM,OAASC,CAAS,EACnE,GAAI,CAACD,EACD,MAAM,IAAI,aAAa,IAAIC,CAAS,qDAAqD,EAC7F,OAAOD,CACf,CACI,4BAA4BmL,EAAiB,CACzC,KAAM,CAAClL,EAAWlB,EAAY,EAAIoM,EAAgB,MAAM,GAAG,EAE3D,OADc,KAAK,gBAAgBlL,CAAS,EAC/B,SAAS,2BAA2BlB,EAAY,CACrE,CAMI,IAAI,kBAAmB,CACnB,GAAI,CAAC,KAAK,UACN,MAAM,IAAI,aAAa,uCAAuC,EAClE,MAAMqM,EAAmB,KAAK,UAAU,SAAS,6BAA6B,KAAK,oBAAoB,EACvG,GAAI,CAACA,EACD,MAAM,IAAI,aAAa,YAAY,KAAK,oBAAoB,4BAA4B,KAAK,UAAU,IAAI,EAAE,EACjH,OAAOA,CACf,CAKI,OAAQ,CACJ,MAAMnkB,EAAM,IAAI,mBAAmB,KAAK,UAAU,EAClD,OAAAA,EAAI,UAAY,KAAK,UACrBA,EAAI,QAAU,KAAK,QAAQ,IAAKwjB,GAAWA,CAAM,EACjDxjB,EAAI,iBAAmB,KAAK,iBAC5BA,EAAI,eAAiB,KAAK,eAC1BA,EAAI,iBAAmB,KAAK,iBAC5B,KAAK,QAAQ,QAAS+Y,GAAU/Y,EAAI,QAAQ,KAAK,IAAI,MAAM+Y,CAAK,CAAC,CAAC,EAClE/Y,EAAI,qBAAuB,KAAK,qBAChCA,EAAI,UAAY,KAAK,UACrBA,EAAI,UAAY,KAAK,UACrBA,EAAI,UAAY,KAAK,UACrBA,EAAI,WAAa,KAAK,WACtBA,EAAI,SAAW,KAAK,SACpBA,EAAI,SAAW,KAAK,SACpBA,EAAI,eAAiB,KAAK,eAAe,IAAKokB,GAAS,IAAI,cAAc,KAAK,WAAY,KAAMA,CAAI,CAAC,EACrGpkB,EAAI,qBAAuB,KAAK,qBAAqB,IAAKqkB,GAAe,IAAI,oBAAoB,KAAMA,CAAU,CAAC,EAClHrkB,EAAI,wBAA0B,KAAK,wBAAwB,IAAKskB,GAAkB,IAAI,uBAAuB,KAAMA,CAAa,CAAC,EACjItkB,EAAI,OAAS,KAAK,OAAO,IAAKukB,IAAW,CAAE,GAAGA,CAAK,EAAG,EACtDvkB,EAAI,QAAU,KAAK,QAAQ,IAAKwkB,IAAY,CAAE,GAAGA,CAAM,EAAG,EAC1DxkB,EAAI,SAAW,OAAO,OAAO,CAAE,EAAE,KAAK,QAAQ,EAC9CA,EAAI,SAAW,KAAK,SAAS,IAAKykB,GAAYA,CAAO,EACrDzkB,EAAI,MAAQ,KAAK,MACjBA,EAAI,OAAS,KAAK,OAClBA,EAAI,KAAO,KAAK,KAChBA,EAAI,KAAO,KAAK,KAChBA,EAAI,SAAW,KAAK,SACpBA,EAAI,SAAW,KAAK,SACpBA,EAAI,YAAc,KAAK,YACvBA,EAAI,WAAa,KAAK,WACtBA,EAAI,YAAc,KAAK,YACvBA,EAAI,WAAa,OAAO,OAAO,CAAE,EAAE,KAAK,UAAU,EAClDA,EAAI,gBAAkB,KAAK,gBAC3BA,EAAI,uBAAyB,KAAK,uBAClCA,EAAI,+BAAiC,KAAK,+BAC1CA,EAAI,SAAW,KAAK,SACpBA,EAAI,0BAA4B,KAAK,0BACrCA,EAAI,MAAQ,KAAK,MACjBA,EAAI,QAAU,KAAK,QACnBA,EAAI,cAAgB,KAAK,cACzBA,EAAI,qBAAuB,KAAK,qBAChCA,EAAI,GAAK,KAAK,GACdA,EAAI,cAAgB,KAAK,cACzBA,EAAI,cAAgB,KAAK,cACzBA,EAAI,aAAe,KAAK,aACxBA,EAAI,cAAgB,KAAK,cACzBA,EAAI,eAAiB,KAAK,eAC1BA,EAAI,WAAa,KAAK,WACtBA,EAAI,iBAAmB,OAAO,OAAO,CAAE,EAAE,KAAK,gBAAgB,EAC9DA,EAAI,QAAU,KAAK,QACnBA,EAAI,uBAAyB,KAAK,uBAAuB,IAAK0kB,IAAgB,CAC1E,MAAOA,EAAW,MAClB,aAAc,OAAOA,EAAW,cAAiB,SAC3CA,EAAW,aACXA,EAAW,aAAa,MAAO,EACrC,QAASA,EAAW,OAChC,EAAU,EACK1kB,CACf,CACA,CC7TO,MAAM,QAAS,CAIlB,YAAY2kB,EAAc,CACtB,KAAK,aAAa,EAAI,OAAO,IAAI,UAAU,EAC3C,KAAK,aAAeA,CAC5B,CACA,CCZO,MAAM,sBAAuB,CAChC,OAAO,cAAcC,EAAaC,EAAe,CAC7C,OAAI,MAAM,QAAQD,CAAW,EACGA,EAAY,MAAK,EAAG,QAAS,EAC9B,OAAO,CAACE,GAAkBC,KAC1CA,GAAa,KAAKD,EAAgB,EAC1CD,CAAa,EAEbD,EAAY,KAAKC,CAAa,CAC7C,CACI,OAAO,YAAYD,EAAaI,EAAa,CACzC,OAAI,MAAM,QAAQJ,CAAW,EAClBA,EAAY,OAAO,CAACE,GAAkBC,KAClCA,GAAa,GAAGD,EAAgB,EACxCE,CAAW,EAEXJ,EAAY,GAAGI,CAAW,CACzC,CACA,CCbO,MAAM,YAAa,CAItB,YAAY1P,EAAMlW,EAAO6lB,GAAe,GAAMC,GAAqB,GAAOC,GAAQC,GAAyB,CACvG,KAAK,aAAa,EAAI,OAAO,IAAI,cAAc,EAC/C,KAAK,MAAQ9P,EACb,KAAK,OAASlW,EACd,KAAK,cAAgB6lB,GACrB,KAAK,oBAAsBC,GAC3B,KAAK,QAAUC,GACf,KAAK,yBAA2BC,EACxC,CAQI,IAAI,cAAe,CACf,OAAI,gBAAgB,eAAe,KAAK,MAAM,EACnC,KAAK,OAAO,aAChB,KAAK,aACpB,CAKI,IAAI,oBAAqB,CACrB,OAAI,gBAAgB,eAAe,KAAK,MAAM,EACnC,KAAK,OAAO,mBAChB,KAAK,mBACpB,CAII,IAAI,MAAO,CACP,OAAO,KAAK,KACpB,CAII,IAAI,OAAQ,CACR,OAAI,gBAAgB,eAAe,KAAK,MAAM,EACnC,KAAK,OAAO,MAChB,KAAK,MACpB,CAII,IAAI,yBAA0B,CAC1B,OAAI,gBAAgB,eAAe,KAAK,MAAM,EACnC,KAAK,OAAO,wBAChB,KAAK,wBACpB,CAII,IAAI,OAAQ,CACR,GAAI,gBAAgB,eAAe,KAAK,MAAM,EAC1C,OAAO,KAAK,MAExB,CAII,IAAI,QAAS,CACT,OAAI,gBAAgB,eAAe,KAAK,MAAM,EACnC,KAAK,OAAO,OAChB,KAAK,OACpB,CACI,eAAeR,EAAa,CACpB,KAAK,kBAAkB,aACvB,KAAK,OAAO,eAAeA,CAAW,EAGtC,KAAK,OACD,MAAM,QAAQ,KAAK,MAAM,GAAK,KAAK,oBAC7B,KAAK,OAAO,IAAKrD,GAAMqD,GACrB,uBAAuB,YAAYA,EAAarD,CAAC,CAAC,EACpD,uBAAuB,YAAYqD,EAAa,KAAK,MAAM,CAEjF,CACA,CCpFO,SAASS,KAAGjmB,GAAO,CACtB,OAAO,IAAI,aAAa,KAAMA,GAAO,GAAM,EAAI,CACnD,OCLM,cAAgB,wBACT,aAAgB2N,IAAMA,GAAE,QAAQ,cAAe,MAAM,ECqB3D,MAAM,YAAa,CAItB,YAAYuY,EAA0BC,EAAa,CAC/C,KAAK,aAAa,EAAI,OAAO,IAAI,cAAc,EAI/C,KAAK,eAAiB,EAClB,gBAAgB,aAAaD,CAAwB,GACrD,KAAK,WAAaA,EAClB,KAAK,YAAcC,EACnB,KAAK,cAAgB,IAAI,mBAAmB,KAAK,UAAU,IAG3D,KAAK,WAAaD,EAAyB,WAC3C,KAAK,YAAcA,EAAyB,YAC5C,KAAK,cAAgBA,EAAyB,cAAc,MAAO,EAE/E,CACI,OAAO,0BAA0BtQ,EAAMrW,EAAS,CAC5C,aAAa,qBAAqBqW,CAAI,EAAIrW,CAClD,CAOI,IAAI,OAAQ,CACR,GAAI,CAAC,KAAK,cAAc,UACpB,MAAM,IAAI,aAAa,uBAAuB,EAClD,OAAO,KAAK,cAAc,UAAU,IAC5C,CAKI,OAAO6mB,EAAWC,EAAoB,CAYlC,OAXA,KAAK,cAAc,UAAY,SAC3B,MAAM,QAAQD,CAAS,EACvB,KAAK,cAAc,QAAUA,EAAU,IAAKA,KAAe,CACvD,UAAWA,EAC3B,EAAc,EAEGA,IACL,KAAK,cAAc,QAAU,CACzB,CAAE,UAAWA,EAAW,UAAWC,CAAoB,CAC1D,GAED,gBAAgB,qBAAqB,IAAI,EAClC,KACJ,aAAa,qBAAqB,mBAAsB,IAAI,CAC3E,CAII,QAAS,CAEL,OADA,KAAK,cAAc,UAAY,SAC3B,gBAAgB,qBAAqB,IAAI,EAClC,KACJ,aAAa,qBAAqB,mBAAsB,IAAI,CAC3E,CAII,OAAOC,EAA4BC,EAAgB,CAC/C,MAAMC,GAAYD,GAEZD,EAIN,GAHAA,EAA6B,gBAAgB,eAAeA,CAA0B,EAChFA,EAA2B,QAAQ,KACnCA,EACF,OAAOA,GAA+B,YACtC,OAAOA,GAA+B,SAAU,CAChD,MAAMG,GAAY,KAAK,gBAAgBH,CAA0B,EACjE,KAAK,cAAc,aAAaG,EAAS,CACrD,CAGQ,OAFA,KAAK,cAAc,UAAY,SAC/B,KAAK,cAAc,UAAYD,GAC3B,gBAAgB,qBAAqB,IAAI,EAClC,KACJ,aAAa,qBAAqB,mBAAsB,IAAI,CAC3E,CAII,QAAS,CAEL,OADA,KAAK,cAAc,UAAY,SAC3B,gBAAgB,qBAAqB,IAAI,EAClC,KACJ,aAAa,qBAAqB,mBAAsB,IAAI,CAC3E,CACI,YAAa,CAET,OADA,KAAK,cAAc,UAAY,cAC3B,gBAAgB,yBAAyB,IAAI,EACtC,KACJ,aAAa,qBAAqB,uBAA0B,IAAI,CAC/E,CACI,SAAU,CAEN,OADA,KAAK,cAAc,UAAY,UAC3B,gBAAgB,yBAAyB,IAAI,EACtC,KACJ,aAAa,qBAAqB,uBAA0B,IAAI,CAC/E,CAII,SAASE,EAA4BC,EAAmB,CACpD,MAAMC,GAAe,UAAU,SAAW,EAAIF,EAA6B,OACrEhO,GAAe,UAAU,SAAW,EACpCiO,EACAD,EAGN,GAFA,KAAK,cAAc,UAAY,WAC/B,KAAK,cAAc,qBAAuBhO,GACtCkO,GAAc,CACd,MAAMH,GAAY,KAAK,gBAAgBG,EAAY,EACnD,KAAK,cAAc,aAAaH,EAAS,CACrD,CACQ,OAAI,gBAAgB,uBAAuB,IAAI,EACpC,KACJ,aAAa,qBAAqB,qBAAwB,IAAI,CAC7E,CAOI,YAAY5mB,EAAQoZ,EAAU,CAC1B,MAAMR,GAAiB,KAAK,WAAW,YAAY5Y,CAAM,EAEzD,OADkB,MAAM,QAAQoZ,CAAQ,EAAIA,EAAW,CAACA,CAAQ,GAC/C,MAAOA,IACb,CAAC,CAACR,GAAe,6BAA6BQ,EAAQ,CAChE,CACT,CAII,aAAalZ,EAAK,CACd,OAAQ,KAAK,oBAAoB,aAAaA,CAAG,GAC7CA,KAAO,KAAK,cAAc,UACtC,CAMI,aAAaA,EAAKC,EAAO,CACrB,GAAI,OAAOA,GAAU,WACjB,MAAM,IAAI,aAAa,uEAAuED,CAAG,cAAc,EAEnH,GAAI,CAACA,EAAI,MAAM,oBAAoB,EAC/B,MAAM,IAAI,aAAa,yFAAyF,EAEpH,OAAI,KAAK,oBACL,KAAK,mBAAmB,aAAaA,EAAKC,CAAK,EAEnD,KAAK,cAAc,WAAWD,CAAG,EAAIC,EAC9B,IACf,CAII,cAAcqZ,EAAY,CACtB,SAAW,CAACtZ,EAAKC,EAAK,IAAK,OAAO,QAAQqZ,CAAU,EAChD,KAAK,aAAatZ,EAAKC,EAAK,EAEhC,OAAO,IACf,CACI,gBAAgBA,EAAO,CACnB,IAAI6mB,EACJ,GACIA,EAAgB,aAAa,KAAK,gBAAgB,SAC7C,KAAK,aAAaA,CAAa,GACxC,YAAK,aAAaA,EAAe7mB,CAAK,EAC/B,IAAI6mB,CAAa,EAChC,CAMI,oBAAoBxN,EAAY,CAE5B,OAAI,KAAK,oBACL,KAAK,mBAAmB,oBAAoBA,CAAU,EAE1D,OAAO,KAAKA,CAAU,EAAE,QAAStZ,GAAQ,CACrC,KAAK,cAAc,iBAAiBA,CAAG,EAAIsZ,EAAWtZ,CAAG,CACrE,CAAS,EACM,IACf,CAII,eAAgB,CACZ,MAAMsZ,EAAa,OAAO,OAAO,CAAE,EAAE,KAAK,cAAc,UAAU,EAElE,GAAI,KAAK,cAAc,WACnB,KAAK,cAAc,UAAU,YAAa,CAC1C,MAAMhX,EAAW,KAAK,cAAc,UAAU,SAC9C,GAAIA,EAAS,qBAAuBA,EAAS,qBAAsB,CAC/D,MAAM2G,GAAS3G,EAAS,qBACnB,OAAQykB,IAAkBA,GAAc,mBAAmB,EAC3D,IAAKA,IAAkBA,GAAc,kBAAkB,EAC5D9d,GAAO,KAAK3G,EAAS,kBAAkB,EACvCgX,EAAW,0BAA+BrQ,EAC1D,CACA,CACQ,OAAOqQ,CACf,CAII,UAAW,CAEP,KAAM,CAACD,EAAOC,CAAU,EAAI,KAAK,sBAAuB,EACxD,YAAK,WAAW,OAAO,SAASD,EAAOC,CAAU,EAC1C,IACf,CAKI,QAAS,CACL,OAAO,KAAK,sBAAuB,EAAC,CAAC,CAC7C,CAII,uBAAwB,CAEpB,MAAMD,EAAQ,KAAK,SAAU,EACvBC,EAAa,KAAK,cAAe,EACvC,OAAO,KAAK,WAAW,OAAO,0BAA0BD,EAAOC,EAAY,KAAK,cAAc,gBAAgB,CACtH,CAII,MAAM,SAAU,CACZ,KAAM,CAACpC,EAAKoC,CAAU,EAAI,KAAK,sBAAuB,EAChD8M,GAAc,KAAK,kBAAmB,EAC5C,GAAI,CACA,OAAO,MAAMA,GAAY,MAAMlP,EAAKoC,CAAU,CAC1D,QACgB,CACA8M,KAAgB,KAAK,aAErB,MAAMA,GAAY,QAAS,CAE3C,CACA,CAKI,mBAAmBA,EAAa,CAC5B,OAAO,IAAI,KAAK,YAAY,KAAK,WAAYA,GAAe,KAAK,WAAW,CACpF,CAOI,OAAQ,CACJ,OAAO,IAAI,KAAK,YAAY,IAAI,CACxC,CAMI,QAAQY,EAAS,CACb,YAAK,cAAc,QAAUA,EACtB,IACf,CAII,iBAAkB,CACd,YAAK,cAAc,gBAAkB,GAC9B,IACf,CAII,OAAOnR,EAAM,CACT,OAAK,KAAK,cAAc,gBAEjB,KAAK,WAAW,OAAO,OAAOA,CAAI,EAD9BA,CAEnB,CAII,eAAeuQ,EAAa,CACxB,YAAK,YAAcA,EACZ,IACf,CAKI,cAAca,EAAS,CACnB,YAAK,cAAc,cAAgBA,EAC5B,IACf,CAII,eAAeA,EAAS,CACpB,YAAK,cAAc,eAAiBA,EAC7B,IACf,CAII,yBAAyBC,EAActN,EAAO0H,GAAS,CACnD,YAAK,cAAc,uBAAuB,KAAK,CAC3C,aAAA4F,EACA,MAAAtN,EACA,QAAS0H,IAAW,CAAE,CAClC,CAAS,EACM,IACf,CAQI,aAAa6F,EAAW,CACpB,OAAOA,EACF,MAAM,GAAG,EACT,IAAKvjB,GAEFA,IAAM,GACCA,EACJ,KAAK,OAAOA,CAAC,CACvB,EACI,KAAK,GAAG,CACrB,CAII,kBAAmB,CACf,GAAI,CAAC,KAAK,cAAc,UACpB,MAAM,IAAI,aAAa,uGAAuG,EAClI,OAAI,KAAK,cAAc,UAAU,YACtB,KAAK,cAAc,UAAU,SAAS,UAC1C,KAAK,cAAc,UAAU,SAC5C,CAKI,gBAAgBijB,EAAchN,EAAW,CAGrC,GAAI,KAAK,WAAW,YAAYgN,CAAY,EAAG,CAC3C,MAAMvkB,GAAW,KAAK,WAAW,YAAYukB,CAAY,EACzD,OAAO,KAAK,cAAc,YAAY,CAClC,KAAM,OACN,KAAMhN,EACN,SAAU,KAAK,WAAW,YAAYgN,CAAY,EAClD,UAAWvkB,GAAS,SACpC,CAAa,CACb,KACa,CACD,GAAI,OAAOukB,GAAiB,SAAU,CAClC,MAAMO,GAAaP,EAAa,OAAO,EAAG,CAAC,IAAM,KAC7CA,EAAa,OAAO,EAAE,IAAM,IAChC,OAAO,KAAK,cAAc,YAAY,CAClC,KAAM,OACN,KAAMhN,EACN,UAAYuN,GAEN,OADAP,EAEN,SAAUO,GAAaP,EAAe,MAC1D,CAAiB,CACjB,CACY,MAAMQ,GAAkBR,EAAa,KAAK,SAAQ,CAAE,EACpD,KAAK,cAAcQ,GAAgB,eAAe,EAClD,MAAMC,GAAWD,GAAgB,SAAU,EAC3C,OAAO,KAAK,cAAc,YAAY,CAClC,KAAM,OACN,KAAMxN,EACN,SAAUyN,EAC1B,CAAa,CACb,CACA,CAKI,qBAAqBC,EAAW,CAC5B,OAAOA,CACf,CAII,qCAAqCA,EAAW,CAC5C,MAAMC,EAAe,CAAE,EACvB,UAAW5N,MAAS,KAAK,cAAc,QAAS,CAC5C,GAAI,CAACA,GAAM,YACP,SACJ,MAAM6N,GAAyB,KAAK,cAAc,2BAA6B7N,GAAM,KAC/E,GAAGA,GAAM,IAAI,IACb,GACD4N,EAAaC,EAAsB,IACpCD,EAAaC,EAAsB,EAAI,CAAE,GAU7C,UAAWvO,MAAYU,GAAM,SAAS,UAC9BV,GAAS,YAAY,OAAS,IAC9BsO,EAAaC,EAAsB,EAAEvO,GAAS,YAAY,EAAIA,GAAS,YAAY,CAAC,EAAE,cAE9F,UAAWA,MAAYU,GAAM,SAAS,UAAW,CAC7C,MAAM8N,GAAa,CACf,GAAGxO,GAAS,YACZ,GAAGA,GAAS,kBACf,EACD,UAAWxN,MAAcgc,GAAY,CACjC,MAAM9lB,GAAc,GAAGsX,GAAS,YAAY,IAAIxN,GAAW,iBAAiB,YAAY,GACxF8b,EAAaC,EAAsB,EAAE7lB,EAAW,EAC5C8J,GAAW,YACnC,CACA,CACY,UAAWsM,MAAU4B,GAAM,SAAS,QAChC4N,EAAaC,EAAsB,EAAEzP,GAAO,YAAY,EACpDA,GAAO,aAEf,UAAWA,MAAU4B,GAAM,SAAS,QAChC4N,EAAaC,EAAsB,EAAEzP,GAAO,YAAY,EACpDA,GAAO,aAEf,UAAWA,MAAU4B,GAAM,SAAS,QAChC4N,EAAaC,EAAsB,EAAEzP,GAAO,YAAY,EACpDA,GAAO,YAE3B,CACQ,MAAM2P,GAAkB,OAAO,KAAKH,CAAY,EAC1CI,GAA2BD,GAC5B,IAAK3nB,IAAQ,aAAaA,EAAG,CAAC,EAC9B,KAAK,GAAG,EACb,OAAI2nB,GAAgB,OAAS,IACzBJ,EAAYA,EAAU,QAAQ,IAAI,OAElC,gBAEOK,GACG,IAAMA,GAA2B,IACjC,EAAE,8BAEY,IAAI,EAAG,IAAIC,KAAY,CAC3C,IAAI3G,GAAO4G,GAAKC,GAChB,GAAIH,IAIA,GAHA1G,GAAQ2G,GAAQ,CAAC,EACjBC,GAAMD,GAAQ,CAAC,EACfE,GAAIF,GAAQ,CAAC,EACTL,EAAaK,GAAQ,CAAC,CAAC,EAAEE,EAAC,EAC1B,MAAO,GAAGD,EAAG,GAAG,KAAK,OAAOD,GAAQ,CAAC,EAAE,UAAU,EAAGA,GAAQ,CAAC,EAAE,OAAS,CAAC,CAAC,CAAC,IAAI,KAAK,OAAOL,EAAaK,GAAQ,CAAC,CAAC,EAAEE,EAAC,CAAC,CAAC,WAI3H7G,GAAQ2G,GAAQ,CAAC,EACjBC,GAAMD,GAAQ,CAAC,EACfE,GAAIF,GAAQ,CAAC,EACTL,EAAa,EAAE,EAAEO,EAAC,EAClB,MAAO,GAAGD,EAAG,GAAG,KAAK,OAAON,EAAa,EAAE,EAAEO,EAAC,CAAC,CAAC,GAGxD,OAAO7G,EACvB,CAAa,GAEEqG,CACf,CACI,eAAgB,CACZ,OAAK,KAAK,cAAc,QAOjB,MAAM,KAAK,cAAc,QAAQ,QAAQ,QAAS,EAAE,CAAC,OANjD,EAOnB,CAII,uBAAwB,CACpB,OAAI,KAAK,cAAc,YAAc,UACjC,KAAK,cAAc,WACZ,sBAAsB,KAAK,cAAc,UAAU,GAEvD,EACf,CAII,uBAAwB,CACpB,MAAMS,EAAkB,CAAE,EACpBC,EAAkB,KAAK,6BAA6B,KAAK,cAAc,MAAM,EAInF,GAHIA,EAAgB,OAAS,GAAKA,IAAoB,OAClDD,EAAgB,KAAK,KAAK,qBAAqBC,CAAe,CAAC,EAE/D,KAAK,cAAc,UAAU,YAAa,CAC1C,MAAM3lB,GAAW,KAAK,cAAc,UAAU,SAE9C,GAAI,KAAK,cAAc,YAAc,UACjC,CAAC,KAAK,cAAc,aACpBA,GAAS,iBAAkB,CAC3B,MAAM0V,GAAS,KAAK,cAAc,0BAC5B,KAAK,cAAc,UAAU,KAC3B,IACA1V,GAAS,iBAAiB,aAC5BA,GAAS,iBAAiB,aAC1B4lB,GAAY,GAAG,KAAK,qBAAqBlQ,EAAM,CAAC,WACtDgQ,EAAgB,KAAKE,EAAS,CAC9C,CACY,GAAI5lB,GAAS,qBAAuBA,GAAS,qBAAsB,CAC/D,MAAM0V,GAAS,KAAK,cAAc,0BAC5B,KAAK,cAAc,UAAU,KAC3B,IACA1V,GAAS,oBAAoB,aAC/BA,GAAS,oBAAoB,aAC7B4lB,GAAY,GAAG,KAAK,qBAAqBlQ,EAAM,CAAC,sCACtDgQ,EAAgB,KAAKE,EAAS,CAC9C,CACA,CACQ,GAAI,KAAK,cAAc,+BAAgC,CACnD,MAAMA,GAAY,KAAK,qBAAqB,KAAK,cAAc,8BAA8B,EAC7FF,EAAgB,KAAKE,EAAS,CAC1C,CACQ,IAAIA,GAAY,GAEhB,OAAAA,IAAa,KAAK,sBAAuB,EACpCF,EAAgB,OAGZA,EAAgB,SAAW,EAChCE,IAAa,UAAUF,EAAgB,CAAC,CAAC,GAGzCE,IAAa,YAAYF,EAAgB,KAAK,WAAW,CAAC,KAN1DE,IAAa,GAQVA,EACf,CAII,0BAA0BC,EAAe,CACrC,MAAMC,EAAU,KAAK,oBAAqB,EACpClQ,GAAS,KAAK,WAAW,OAU/B,GAPI,OAAO,KAAK,cAAc,WAAc,UACxC,KAAK,cAAc,sBAAsB,OAAS,GAClDA,GAAO,wBAAwBiQ,CAAa,GAC5CC,EAAQ,KAAK,GAAG,KAAK,cAAc,sBAAsB,OAAQpQ,IACtDoQ,EAAQ,QAAQpQ,EAAM,IAAM,EACtC,CAAC,EAEFoQ,EAAQ,OAAQ,CAChB,IAAIC,GAAoBD,EACnB,IAAKpQ,IAAW,CACjB,MAAMnC,GAAO,KAAK,OAAOmC,GAAO,YAAY,EAC5C,OAAIE,GAAO,QAAQ,OAAS,QACpB,KAAK,cAAc,YAAc,UACjC,KAAK,cAAc,YAAc,UACjC,KAAK,cAAc,YAAc,eACjC,KAAK,cAAc,YAAc,UAC1B,YAAcrC,GAGb,KAAK,OAAO,KAAK,iBAAgB,CAAE,EACvC,IACAA,GAIDA,EAEd,CAAA,EACI,KAAK,IAAI,EACd,OAAIqC,GAAO,QAAQ,OAAS,WACxBmQ,IACI,SACID,EACK,IAAKpQ,IACC,KAAK,gBAAgB,CACxB,KAAME,GAAO,4BAA4BF,GAAO,IAAI,EACpD,IAAKE,GAAO,OAAO,QACnD,CAA6B,CACJ,EACI,KAAK,IAAI,GAEtBA,GAAO,QAAQ,OAAS,UACpB,KAAK,cAAc,YAAc,UACjC,KAAK,cAAc,YAAc,YACjCmQ,IAAqB,sBAGtBA,EACnB,SACiB,OAAO,KAAK,cAAc,WAAc,SAC7C,OAAO,KAAK,cAAc,UAE9B,MAAO,EACf,CAKI,qBAAsB,CAClB,MAAMD,EAAU,CAAE,EAClB,OAAI,MAAM,QAAQ,KAAK,cAAc,SAAS,GAE1C,KAAK,cAAc,UAAU,QAASE,GAAe,CAC7C,KAAK,cAAc,UAAU,aAC7BF,EAAQ,KAAK,GAAG,KAAK,cAAc,UAAU,SAAS,4BAA4BE,CAAU,CAAC,CAEjH,CAAa,EAEEF,CACf,CACI,6BAA6BG,EAAS,CAClC,OAAOA,EACF,IAAI,CAACC,EAAQrf,KAAU,CACxB,MAAMsf,GAAa,KAAK,+BAA+BD,EAAO,SAAS,EACvE,OAAQA,EAAO,KAAI,CACf,IAAK,MACD,OAASrf,GAAQ,EAAI,OAAS,IAC1B,GAAG,KAAK,WAAW,QAAQ,uBACrB,IACA,EAAE,GAAGsf,EAAU,GAAG,KAAK,WAAW,QAAQ,uBAC1C,IACA,EAAE,GAChB,IAAK,KACD,OAAStf,GAAQ,EAAI,MAAQ,IACzB,GAAG,KAAK,WAAW,QAAQ,uBACrB,IACA,EAAE,GAAGsf,EAAU,GAAG,KAAK,WAAW,QAAQ,uBAC1C,IACA,EAAE,EAChC,CACY,OAAOA,EACV,CAAA,EACI,KAAK,GAAG,EACR,KAAM,CACnB,CAII,+BAA+BP,EAAWQ,EAAa,GAAO,CAC1D,GAAI,OAAOR,GAAc,SACrB,OAAOA,EACX,GAAI,MAAM,QAAQA,CAAS,EACvB,OAAIA,EAAU,SAAW,EACd,MAIPA,EAAU,SAAW,GAAK,CAACQ,EACpB,KAAK,6BAA6BR,CAAS,EAE/C,IAAM,KAAK,6BAA6BA,CAAS,EAAI,IAEhE,KAAM,CAAE,OAAAhQ,IAAW,KAAK,WACxB,OAAQgQ,EAAU,SAAQ,CACtB,IAAK,WACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,MAAMA,EAAU,WAAW,CAAC,CAAC,GAClE,IAAK,kBACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,OAAOA,EAAU,WAAW,CAAC,CAAC,GACnE,IAAK,gBACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,OAAOA,EAAU,WAAW,CAAC,CAAC,GACnE,IAAK,eACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,eAAeA,EAAU,WAAW,CAAC,CAAC,GAC3E,IAAK,mBACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,OAAOA,EAAU,WAAW,CAAC,CAAC,GACnE,IAAK,eACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,OAAOA,EAAU,WAAW,CAAC,CAAC,GACnE,IAAK,WACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,MAAMA,EAAU,WAAW,CAAC,CAAC,GAClE,IAAK,kBACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,OAAOA,EAAU,WAAW,CAAC,CAAC,GACnE,IAAK,WACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,OAAOA,EAAU,WAAW,CAAC,CAAC,GACnE,IAAK,QACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,MAAMA,EAAU,WAAW,CAAC,CAAC,GAClE,IAAK,QACD,OAAIhQ,GAAO,QAAQ,OAAS,YACxBA,GAAO,QAAQ,OAAS,cACjB,GAAGgQ,EAAU,WAAW,CAAC,CAAC,UAAUA,EAAU,WAAW,CAAC,CAAC,GAE/D,SAASA,EAAU,WAAW,CAAC,CAAC,gBAAgBA,EAAU,WAAW,CAAC,CAAC,IAClF,IAAK,OACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,SAASA,EAAU,WAAW,CAAC,CAAC,GACrE,IAAK,UACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,YAAYA,EAAU,WAAW,CAAC,CAAC,QAAQA,EAAU,WAAW,CAAC,CAAC,GACvG,IAAK,KACD,OAAIA,EAAU,WAAW,QAAU,EACxB,MAEJ,GAAGA,EAAU,WAAW,CAAC,CAAC,QAAQA,EAAU,WAC9C,MAAM,CAAC,EACP,KAAK,IAAI,CAAC,IACnB,IAAK,MACD,OAAIhQ,GAAO,QAAQ,OAAS,cACjB,GAAGgQ,EAAU,WAAW,CAAC,CAAC,kBAAkBA,EAAU,WAAW,CAAC,CAAC,cAEvE,GAAGA,EAAU,WAAW,CAAC,CAAC,UAAUA,EAAU,WAAW,CAAC,CAAC,IACtE,IAAK,SACD,MAAO,GAAGA,EAAU,WAAW,CAAC,CAAC,WACrC,IAAK,MACD,MAAO,OAAO,KAAK,+BAA+BA,EAAU,SAAS,CAAC,IAC1E,IAAK,WACD,MAAO,GAAG,KAAK,+BAA+BA,EAAU,UAAW,EAAI,CAAC,GAC5E,IAAK,MACD,MAAO,IAAMA,EAAU,WAAW,KAAK,OAAO,EAAI,IACtD,IAAK,KACD,MAAO,IAAMA,EAAU,WAAW,KAAK,MAAM,EAAI,GACjE,CACQ,MAAM,IAAI,UAAU,4BAA4B,aAAa,YAAY,IAAI,EAAE,CACvF,CACI,qBAAsB,CAClB,GAAI,CAAC,KAAK,4BACN,MAAO,GAEX,MAAMS,EAA8B,KAAK,WAAW,OAAO,gBAAgB,sBA+C3E,MAAO,QA9CY,KAAK,cAAc,uBAAuB,IAAKC,IAAQ,CACtE,MAAMC,GAAoB,OAAOD,GAAI,cAAiB,SAChDA,GAAI,aACJA,GAAI,aAAa,SAAU,EACjC,GAAI,OAAOA,GAAI,cAAiB,SAAU,CACtC,GAAIA,GAAI,aAAa,4BACjB,MAAM,IAAI,aAAa,sCAAsCA,GAAI,KAAK,GAAG,EAE7E,GAAI,CAAC,KAAK,WAAW,OAAO,gBAAgB,UACxC,CAAC,gBAAgB,qBAAqBA,GAAI,YAAY,EACtD,MAAM,IAAI,aAAa,gDAAgD,KAAK,WAAW,QAAQ,IAAI,UAAUA,GAAI,KAAK,GAAG,EAE7H,KAAK,cAAcA,GAAI,aAAa,cAAa,CAAE,CACnE,CACY,IAAIE,GAAY,KAAK,OAAOF,GAAI,KAAK,EACrC,GAAIA,GAAI,QAAQ,YAAa,CACzB,MAAMG,GAAqBH,GAAI,QAAQ,YAAY,IAAK5Q,IAAW,KAAK,OAAOA,EAAM,CAAC,EACtF,GAAI,gBAAgB,qBAAqB4Q,GAAI,YAAY,GACjDA,GAAI,aAAa,cAAc,QAAQ,QACvCA,GAAI,QAAQ,YAAY,SACpBA,GAAI,aAAa,cAAc,QAAQ,OAC3C,MAAM,IAAI,aAAa,mCAAmCA,GAAI,QAAQ,YAAY,MAAM,+CAA+CA,GAAI,aAAa,cAAc,QAAQ,MAAM,UAAUA,GAAI,KAAK,GAAG,EAGlNE,IAAa,IAAIC,GAAmB,KAAK,IAAI,CAAC,GAC9D,CACY,MAAMC,GAAkBJ,GAAI,QAAQ,WAAaD,EAC3C,YACA,GACN,IAAIM,GAAoB,GACxB,OAAI,KAAK,WAAW,OAAO,gBAAgB,kBACvCL,GAAI,QAAQ,eAAiB,SAC7BK,GAAoBL,GAAI,QAAQ,aAC1B,eACA,oBAEH,CACHI,GACAF,GACA,KACAG,GACA,IAAIJ,EAAiB,GACrC,EACiB,OAAO,OAAO,EACd,KAAK,GAAG,CACzB,CAAS,EAC2B,KAAK,IAAI,EAAI,GACjD,CAII,uBAAuBK,EAAK,CACxB,MAAM5mB,EAAW,KAAK,cAAc,UAAU,SACxC6mB,IAAc,MAAM,QAAQD,CAAG,EAAIA,EAAM,CAACA,CAAG,GAAG,IAAKpR,IAAOxV,EAAS,kBAAkBwV,EAAE,CAAC,EAEhG,GAAI,CAACxV,EAAS,uBAAwB,CAClC,MAAM8mB,GAAgB9mB,EAAS,eAAe,CAAC,EAI/C,GAAI,CAAC8mB,GAAc,aACf,CAACA,GAAc,kBACf,CAACA,GAAc,iBACf,MAAO,CACH,CAACA,GAAc,YAAY,EAAGlD,KAAGiD,GAAW,IAAKrR,IAAOsR,GAAc,eAAetR,GAAI,EAAK,CAAC,CAAC,CACnG,CAEjB,CACQ,OAAO,IAAI,SAAUuR,IAAO,CACxB,UAAW5e,MAAQ0e,GACfE,GAAG,QAAQ,IAAI,SAAUA,IAAOA,GAAG,MAAM5e,EAAI,CAAC,CAAC,CAE/D,CAAS,CACT,CACI,mBAAmB6e,EAAU,CACzB,MAAMjQ,EAAQiQ,EACT,MAAK,EACL,QAAO,EACP,QAAO,EACP,OAAO,MAAS,EAChB,MAAM,MAAS,EACf,KAAK,MAAS,EACd,KAAK,MAAS,EACd,OAAO,GAAG,EACV,UAAU,sBAAsB,EACrC,MAAO,CAAC,WAAWjQ,EAAM,SAAU,CAAA,IAAKA,EAAM,eAAe,CACrE,CACI,2BAA2BV,EAAc,CAIrC,IAAIiB,EAAQ,KAAK,cAAc,UAC/B,MAAMna,GAAO,CAAE,EACT8pB,GAAoB5Q,EAAa,MAAM,GAAG,EAChD,KAAO4Q,GAAkB,OAAS,GAAG,CACjC,MAAMC,GAAOD,GAAkB,CAAC,EAChC,GAAI,CAAC3P,GAAO,YAGR,MAEJ,GAAIA,EAAM,SAAS,4BAA4B4P,EAAI,EAAG,CAIlDD,GAAkB,QAAQ,GAAGA,GAAkB,OAAO,IAAIA,GAAkB,MAAO,CAAA,EAAE,EACrF,QAChB,CACY,GAAI3P,EAAM,SAAS,4BAA4B4P,EAAI,EAAG,CAIlD,MAAMC,GAAW,KAAK,cAAc,eAAe,KAAMA,IAAaA,GAAS,uBAAyBD,EAAI,EAC5G,GAAI,CAACC,IAAU,MAAO,CAClB,MAAMC,GAAmBjqB,GAAK,OAAS,EAAI,GAAGA,GAAK,KAAK,GAAG,CAAC,IAAI+pB,EAAI,GAAKA,GACzE,MAAM,IAAI,MAAM,qCAAqCE,EAAgB,EAAE,CAC3F,CACgB9P,EAAQ6P,GAAS,MACjBhqB,GAAK,KAAK,GAAG+pB,GAAK,MAAM,GAAG,CAAC,EAC5BD,GAAkB,MAAO,EACzB,QAChB,CACY,KACZ,CACQ,GAAI,CAAC3P,EACD,MAAM,IAAI,MAAM,kCAAkCjB,CAAY,EAAE,EAGpE,MAAMgR,GAAoBJ,GAAkB,KAAK,GAAG,EAC9CnB,GAAUxO,EAAM,SAAS,4BAA4B+P,EAAiB,EAC5E,GAAI,CAACvB,GAAQ,OACT,MAAM,IAAI,4BAA4BzP,EAAciB,EAAM,QAAQ,EAEtE,MAAO,CAACA,EAAOna,GAAM2oB,EAAO,CACpC,CAII,mBAAmB9lB,EAAUsI,EAAQwM,GAAS,GAAI,CAC9C,MAAMwS,GAAQ,CAAE,EAChB,UAAW5pB,MAAO,OAAO,KAAK4K,CAAM,EAAG,CACnC,MAAMqM,GAAOG,GAAS,GAAGA,EAAM,IAAIpX,EAAG,GAAKA,GAG3C,GAAI4K,EAAO5K,EAAG,IAAM,MAChB,OAAO4K,EAAO5K,EAAG,GAAM,UACvB,gBAAgB,eAAe4K,EAAO5K,EAAG,CAAC,EAAG,CAC7C4pB,GAAM,KAAK3S,EAAI,EACf,QAChB,CACY,GAAI3U,EAAS,4BAA4B2U,EAAI,EAAG,CAC5C,MAAM4S,GAAW,KAAK,mBAAmBvnB,EAAUsI,EAAO5K,EAAG,EAAGiX,EAAI,EACpE2S,GAAM,KAAK,GAAGC,EAAQ,EACtB,QAChB,CACY,GAAIvnB,EAAS,4BAA4B2U,EAAI,EAAG,CAC5C,MAAMiC,GAAW5W,EAAS,6BAA6B2U,EAAI,EAO3D,GAAIiC,GAAS,eAAiB,cAC1BA,GAAS,eAAiB,cAAe,CACzC,MAAM4Q,GAAc5Q,GAAS,YACxB,IAAK9G,IAAMA,GAAE,gBAAgB,EAC7B,OAAQA,IAAM,CAAC,CAACA,EAAC,EAGtB,GAF0B0X,GAAY,OAAS,GAC3CA,GAAY,MAAO9R,IAAWA,GAAO,eAAepN,EAAO5K,EAAG,EAAG,EAAK,CAAC,EACpD,CACnB4pB,GAAM,KAAK3S,EAAI,EACf,QACxB,CACA,CACgB,GAAIiC,GAAS,eAAiB,eAC1BA,GAAS,eAAiB,eAC1B,MAAM,IAAI,MAAM,uBAAuBA,GAAS,YAAY,iBAAiBjC,EAAI,EAAE,EAOvF,MAAM8S,GAAiB7Q,GAAS,sBAAsB,eAGtD,GAF0B6Q,GAAe,OAAS,GAC9CA,GAAe,MAAO/R,IAAWA,GAAO,eAAepN,EAAO5K,EAAG,EAAG,EAAK,CAAC,EACvD,CACnB,MAAM6pB,GAAWE,GAAe,IAAK/R,IAAW,GAAGf,EAAI,IAAIe,GAAO,YAAY,EAAE,EAChF4R,GAAM,KAAK,GAAGC,EAAQ,EACtB,QACpB,CAEgB,MAAMA,GAAW,KAAK,mBAAmB3Q,GAAS,sBAAuBtO,EAAO5K,EAAG,CAAC,EAAE,IAAK+nB,IAAM,GAAG9Q,EAAI,IAAI8Q,EAAC,EAAE,EAC/G6B,GAAM,KAAK,GAAGC,EAAQ,EACtB,QAChB,CACYD,GAAM,KAAK3S,EAAI,CAC3B,CACQ,OAAO2S,EACf,CACI,CAAC,cAAcxE,EAAO,CAClB,GAAI,KAAK,cAAc,UAAU,YAAa,CAC1C,MAAM4E,EAAgB,KAAK,mBAAmB,KAAK,cAAc,UAAU,SAAU5E,CAAK,EAC1F,UAAWzM,MAAgBqR,EAAe,CACtC,KAAM,CAACpQ,GAAO+P,GAAmBvB,EAAO,EAAI,KAAK,2BAA2BzP,EAAY,EACxF,UAAWX,MAAUoQ,GAAS,CAC1B,IAAI6B,GAAiB7E,EACrB,UAAWoE,MAAQG,GAAmB,CAClC,GAAI,CAACM,IAAkB,EAAET,MAAQS,IAAiB,CAC9CA,GAAiB,CAAE,EACnB,KAC5B,CACwBA,GAAiBA,GAAeT,EAAI,CAC5D,CAEoB,MAAMU,GAAY,KAAK,cAClB,0BACC,GAAGtQ,GAAM,IAAI,IAAI5B,GAAO,YAAY,GACpCA,GAAO,aACPmS,GAAiBnS,GAAO,eAAeiS,GAAgB,EAAI,EACjE,KAAM,CAACC,GAAWC,EAAc,CACpD,CACA,CACA,KAEY,WAAWnqB,KAAO,OAAO,KAAKolB,CAAK,EAAG,CAClC,MAAM+E,GAAiB/E,EAAMplB,CAAG,EAIhC,KAAM,CAHY,KAAK,cAAc,0BAC/B,GAAG,KAAK,KAAK,IAAIA,CAAG,GACpBA,EACYmqB,EAAc,CAChD,CAEA,CACI,2BAA2BD,EAAWC,EAAgB,CAClD,GAAI,gBAAgB,eAAeA,CAAc,EAAG,CAChD,IAAI7Q,GAAa,CAAE,EACnB,GAAI6Q,EAAe,aACf,GAAIA,EAAe,wBACf,KAAK,cAAcA,EAAe,uBAAuB,UAEpDA,EAAe,mBACpB,UAAW/H,MAAK+H,EAAe,MAC3B7Q,GAAW,KAAK,KAAK,gBAAgB8I,EAAC,CAAC,OAI3C9I,GAAW,KAAK,KAAK,gBAAgB6Q,EAAe,KAAK,CAAC,EAGlE,GAAIA,EAAe,OAAS,MACxB,OAAIA,EAAe,OACRA,EAAe,OAAOD,CAAS,EAG/B,CACH,SAAU,QACV,WAAY,CAACA,EAAWC,EAAe,KAAK,CAC/C,EAGJ,GAAIA,EAAe,OAAS,MAC7B,OAAIA,EAAe,MACR,CACH,SAAUA,EAAe,KACzB,UAAW,KAAK,2BAA2BD,EAAWC,EAAe,KAAK,CAC7E,EAGM,CACH,SAAU,WACV,WAAY,CAACD,EAAW,GAAG5Q,EAAU,CACxC,EAGJ,GAAI6Q,EAAe,OAAS,MAAO,CACpC,MAAMlhB,GAASkhB,EAAe,MAC9B,MAAO,CACH,SAAUA,EAAe,KACzB,WAAYlhB,GAAO,IAAKmhB,IAAa,KAAK,+BAA+B,KAAK,2BAA2BF,EAAWE,EAAQ,CAAC,CAAC,CACjI,CACjB,SACqBD,EAAe,OAAS,KAAM,CACnC,MAAMlhB,GAASkhB,EAAe,MAC9B,MAAO,CACH,SAAUA,EAAe,KACzB,WAAYlhB,GAAO,IAAKmhB,IAAa,KAAK,+BAA+B,KAAK,2BAA2BF,EAAWE,EAAQ,CAAC,CAAC,CACjI,CACjB,KAEgB,OAAO,CACH,SAAUD,EAAe,KACzB,WAAY,CAACD,EAAW,GAAG5Q,EAAU,CACxC,CASjB,KAEY,OAAO,CACH,SAAU,QACV,WAAY,CAAC4Q,EAAW,KAAK,gBAAgBC,CAAc,CAAC,CAC/D,CAEb,CACI,kBAAkB/E,EAAO,CACrB,GAAI,OAAOA,GAAU,SACjB,OAAOA,EAEX,GAAI,gBAAgB,WAAWA,CAAK,EAAG,CACnC,MAAMiF,GAAoB,KAAK,mBAAoB,EACnD,OAAAA,GAAkB,mBAAqB,KACvCA,GAAkB,cAAc,UAC5B,KAAK,cAAc,UACvBA,GAAkB,cAAc,0BAC5B,KAAK,cAAc,0BACvBA,GAAkB,cAAc,WAC5B,KAAK,cAAc,WACvBA,GAAkB,cAAc,iBAC5B,KAAK,cAAc,iBACvBA,GAAkB,cAAc,OAAS,CAAE,EAC3CjF,EAAM,aAAaiF,EAAiB,EAC7B,CACH,SAAU,gBAAgB,cAAcjF,CAAK,EACvC,MACA,WACN,UAAWiF,GAAkB,cAAc,MAC9C,CACb,CACQ,GAAI,OAAOjF,GAAU,WACjB,OAAOA,EAAM,IAAI,EAErB,MAAMkF,EAAS,MAAM,QAAQlF,CAAK,EAAIA,EAAQ,CAACA,CAAK,EAC9CmD,GAAU,CAAE,EAClB,UAAWnD,MAASkF,EAAQ,CACxB,MAAMC,GAAa,CAAE,EAErB,SAAW,CAACL,GAAWC,EAAc,IAAK,KAAK,cAAc/E,EAAK,EAC9DmF,GAAW,KAAK,CACZ,KAAM,MACN,UAAW,KAAK,2BAA2BL,GAAWC,EAAc,CACxF,CAAiB,EAEL5B,GAAQ,KAAK,CAAE,KAAM,KAAM,UAAWgC,GAAY,CAC9D,CACQ,OAAIhC,GAAQ,SAAW,EACZA,GAAQ,CAAC,EAAE,UAEfA,EACf,CAII,mBAAoB,CAChB,OAAO,KAAK,aAAe,KAAK,WAAW,kBAAmB,CACtE,CACI,2BAA4B,CACxB,OAAO,KAAK,cAAc,uBAAuB,OAAS,CAClE,CACA,CAIA,aAAa,qBAAuB,CAAE,EC1mC/B,MAAM,YAAa,CACtB,OAAO,KAAKiC,EAAa,CACrB,MAAMhlB,EAAS,IAAI,KACnB,OAAAA,EAAO,IAAMglB,EAAY,QACzBhlB,EAAO,SAAWglB,EAAY,SACvBhlB,CACf,CACA,CCHO,MAAM,2BAA2B,YAAa,CAIjD,YAAY2gB,EAA0BC,EAAa,CAC/C,MAAMD,EAA0BC,CAAW,EAC3C,KAAK,aAAa,EAAI,OAAO,IAAI,oBAAoB,EACrD,KAAK,cAAc,0BAA4B,EACvD,CAOI,UAAW,CACP,IAAIlP,EAAM,KAAK,cAAe,EAC9B,OAAAA,GAAO,KAAK,oBAAqB,EACjCA,GAAO,KAAK,uBAAwB,EAC7B,KAAK,qCAAqCA,EAAI,KAAI,CAAE,CACnE,CAII,MAAM,SAAU,CACZ,KAAM,CAACA,EAAKoC,CAAU,EAAI,KAAK,sBAAuB,EAChD8M,GAAc,KAAK,kBAAmB,EAC5C,IAAIqE,GAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,GAAY,sBAAwB,KACpC,MAAMA,GAAY,iBAAkB,EACpCqE,GAAyB,IAGzB,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,aAC7B,MAAMrE,GAAY,YAAY,UAAU,eAAgB,KAAK,cAAc,UAAU,QAAQ,EAGjG,MAAMoE,GAAc,MAAMpE,GAAY,MAAMlP,EAAKoC,EAAY,EAAI,EAC3DoR,GAAe,aAAa,KAAKF,EAAW,EAElD,OAAI,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,aAC7B,MAAMpE,GAAY,YAAY,UAAU,cAAe,KAAK,cAAc,UAAU,QAAQ,EAG5FqE,IACA,MAAMrE,GAAY,kBAAmB,EAClCsE,EACnB,OACethB,GAAO,CAEV,GAAIqhB,GACA,GAAI,CACA,MAAMrE,GAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,KAAgB,KAAK,aAErB,MAAMA,GAAY,QAAS,CAE3C,CACA,CAQI,KAAKS,EAAchN,EAAW,CAC1BgN,EAAe,gBAAgB,eAAeA,CAAY,EACpDA,EAAa,QAAQ,KACrBA,EACN,MAAMH,GAAY,KAAK,gBAAgBG,EAAchN,CAAS,EAC9D,YAAK,cAAc,aAAa6M,EAAS,EAClC,IACf,CAOI,MAAMtB,EAAO9L,EAAY,CACrB,KAAK,cAAc,OAAS,GAC5B,MAAM4O,GAAY,KAAK,kBAAkB9C,CAAK,EAC9C,OAAI8C,KACA,KAAK,cAAc,OAAS,CACxB,CAAE,KAAM,SAAU,UAAWA,EAAW,CAC3C,GACD5O,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,SAAS8L,EAAO9L,EAAY,CACxB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,MACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,QAAQ8L,EAAO9L,EAAY,CACvB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,KACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAMI,WAAW4P,EAAK,CACZ,OAAO,KAAK,MAAM,KAAK,uBAAuBA,CAAG,CAAC,CAC1D,CAII,cAAcA,EAAK,CACf,OAAO,KAAK,SAAS,KAAK,uBAAuBA,CAAG,CAAC,CAC7D,CAII,aAAaA,EAAK,CACd,OAAO,KAAK,QAAQ,KAAK,uBAAuBA,CAAG,CAAC,CAC5D,CAII,OAAOpc,EAAQ,CACX,OAAO,KAAK,UAAUA,CAAM,CACpC,CAII,UAAU6d,EAAW,CAEjB,GAAI,CAAC,KAAK,WAAW,OAAO,wBAAwB,QAAQ,EACxD,MAAM,IAAI,oCAEd,YAAK,cAAc,UAAYA,EACxB,IACf,CAOI,wBAAyB,CACrB,MAAMC,EAAY,KAAK,aAAa,KAAK,iBAAgB,CAAE,EACrD3C,EAAkB,KAAK,sBAAuB,EAC9C4C,GAAsB,KAAK,0BAA0B,QAAQ,EACnE,OAAIA,KAAwB,GACjB,eAAeD,CAAS,GAAG3C,CAAe,GAEjD,KAAK,WAAW,OAAO,QAAQ,OAAS,QACjC,eAAe2C,CAAS,WAAWC,EAAmB,GAAG5C,CAAe,GAE5E,eAAe2C,CAAS,GAAG3C,CAAe,cAAc4C,EAAmB,EAC1F,CACA,CC3LA,IAAI,gBACJ,MAAM,MAAQ,IAAI,WAAW,EAAE,EAChB,SAAS,KAAM,CAE5B,GAAI,CAAC,kBAEH,gBAAkB,OAAO,OAAW,KAAe,OAAO,iBAAmB,OAAO,gBAAgB,KAAK,MAAM,EAE3G,CAAC,iBACH,MAAM,IAAI,MAAM,0GAA0G,EAI9H,OAAO,gBAAgB,KAAK,CAC9B,CCXA,MAAM,UAAY,CAAE,EAEpB,QAASjnB,GAAI,EAAGA,GAAI,IAAK,EAAEA,GACzB,UAAU,MAAMA,GAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC,EAG3C,SAAS,gBAAgB4I,GAAK9B,EAAS,EAAG,CAG/C,OAAO,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,IAAM,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,IAAM,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,IAAM,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,CAAC,CAAC,EAAI,IAAM,UAAU8B,GAAI9B,EAAS,EAAE,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,EAAE,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,EAAE,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,EAAE,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,EAAE,CAAC,EAAI,UAAU8B,GAAI9B,EAAS,EAAE,CAAC,CACnf,CChBA,MAAM,WAAa,OAAO,OAAW,KAAe,OAAO,YAAc,OAAO,WAAW,KAAK,MAAM,EACtG,IAAe,OAAA,CACb,UACF,ECCA,SAAS,GAAG4W,GAAS1S,EAAKlE,EAAQ,CAChC,GAAI,OAAO,YAAc,CAACkE,GAAO,CAAC0S,GAChC,OAAO,OAAO,WAAY,EAG5BA,GAAUA,IAAW,CAAE,EACvB,MAAMwJ,GAAOxJ,GAAQ,SAAWA,GAAQ,KAAO,OAE/C,OAAAwJ,GAAK,CAAC,EAAIA,GAAK,CAAC,EAAI,GAAO,GAC3BA,GAAK,CAAC,EAAIA,GAAK,CAAC,EAAI,GAAO,IAYpB,gBAAgBA,EAAI,CAC7B,CCvBO,MAAM,iBAAkB,CAC3B,aAAc,CAIV,KAAK,MAAQ,EAIb,KAAK,SAAW,CAAE,CAC1B,CAII,MAAM,MAAO,CACT,OAAI,KAAK,SAAS,OAAS,GACvB,MAAM,QAAQ,IAAI,KAAK,QAAQ,EAE5B,IACf,CACA,CCpBO,MAAM,YAAa,CACtB,aAAc,CAKV,KAAK,YAAc,CAAE,EAKrB,KAAK,cAAgB,CAAE,CAC/B,CACI,OAAO,KAAKN,EAAa,CACrB,MAAMhlB,EAAS,IAAI,KACnB,OAAAA,EAAO,IAAMglB,EAAY,IAClBhlB,CACf,CACA,CCjBO,MAAM,6BAA8B,CAIvC,YAAY4gB,EAAazB,EAAe,CACpC,KAAK,YAAcyB,EACnB,KAAK,cAAgBzB,CAC7B,CAOI,MAAM,OAAOoG,EAAcC,EAAU,CACjC,MAAM1oB,GAAW,KAAK,cAAc,UAAU,SAC9C,MAAM,QAAQ,IAAI0oB,EAAS,IAAI,MAAOpgB,GAAQqgB,KAAgB,CAE1D,GAAI,KAAK,YAAY,WAAW,OAAO,wBAAwB,QAAQ,EAAG,CAClE,KAAK,YAAY,WAAW,OAAO,QAAQ,OAC3C,UACA,MAAM,QAAQF,EAAa,GAAG,GAC9B,KAAK,cAAc,sBAAsB,OAAS,IAClDA,EAAa,IAAMA,EAAa,IAAI,OAAO,CAACG,GAAQC,GAASC,MACzDF,GAAO,KAAK,cAAc,sBAAsBE,EAAY,EAAE,YAAY,EAAID,GAAQ,CAAC,EAChFD,IACR,EAAE,GAET,MAAM1lB,GAAS,MAAM,QAAQulB,EAAa,GAAG,EACvCA,EAAa,IAAIE,EAAW,EAC5BF,EAAa,IACbM,GAAmB,KAAK,YAAY,WAAW,OAAO,mBAAmB/oB,GAAUkD,EAAM,EAC3F6lB,KACA,KAAK,YAAY,QAAQ,MAAM/oB,GAAS,OAAQsI,GAAQygB,EAAgB,EACxEN,EAAa,cAAc,KAAKM,EAAgB,EAEpE,KACiB,CAED,MAAMC,GAAkB,KAAK,cAAc,sBAC3C,GAAIA,GAAgB,OAAS,EAAG,CAE5B,MAAMC,GAAW,KAAK,cAAc,UAAU,SAAS,eAAe3gB,EAAM,EAC5E,GAAI,CAAC2gB,GACD,MAAM,IAAI,aAAa,kEAAkE,EAE7F,MAAMC,GAA0B,MAAM,KAAK,YAAY,QAClD,mBAAkB,EAClB,OAAOlpB,GAAS,eAAe,IAAK0V,IAAW1V,GAAS,WACzD,IACA0V,GAAO,YAAY,CAAC,EACnB,UAAUsT,GAAgB,IAAKtT,IAAW1V,GAAS,WACpD,IACA0V,GAAO,YAAY,CAAC,EACnB,KAAK1V,GAAS,OAAQA,GAAS,UAAU,EACzC,MAAMipB,EAAQ,EACd,YAAW,EACX,UAAU,aAAa,EACvB,SACDC,KACA,KAAK,YAAY,QAAQ,MAAMlpB,GAAS,OAAQsI,GAAQ4gB,EAAsB,EAC9ET,EAAa,cAAc,KAAKS,EAAsB,EAE9E,CACA,CACA,CAAS,CAAC,CACV,CAII,MAAM,OAAOC,EAAcT,EAAU,CACjC,MAAM1oB,GAAW,KAAK,cAAc,UAAU,SAC9C,IAAIopB,GAAmBppB,GAAS,6BAA8B,EAI9D,MAAMqpB,GAAuB,KAAK,YAAY,WAAW,OAAO,wBAAwB,QAAQ,EAChGD,GAAmBA,GAAiB,OAAQ1T,IACnCA,GAAO,YAEL2T,KAAyB,GADrB,EAEd,EACD,MAAMC,GAAgBZ,EAAS,IAAI,CAACpgB,GAAQqgB,KAAgB,CACpD,KAAK,YAAY,WAAW,OAAO,QAAQ,OAAS,UACpD,MAAM,QAAQQ,EAAa,GAAG,GAC9B,KAAK,cAAc,sBAAsB,OAAS,IAClDA,EAAa,IAAMA,EAAa,IAAI,OAAO,CAACP,GAAQC,GAASC,MACzDF,GAAO,KAAK,cAAc,sBAAsBE,EAAY,EAAE,YAAY,EAAID,GAAQ,CAAC,EAChFD,IACR,EAAE,GAGT,MAAM1lB,GAAS,MAAM,QAAQimB,EAAa,GAAG,EACvCA,EAAa,IAAIR,EAAW,EAC5BQ,EAAa,IACbI,GAAe,KAAK,YAAY,WAAW,OAAO,mBAAmBvpB,GAAUkD,GAAQylB,GAAaD,EAAS,MAAM,GAAK,CAAE,EAChI,OAAIC,MAAe,KAAK,cAAc,kBAClC,KAAK,YAAY,QAAQ,MAAM3oB,GAAS,OAAQupB,GAAc,KAAK,cAAc,iBAAiBZ,EAAW,CAAC,EAElH,KAAK,YAAY,QAAQ,MAAM3oB,GAAS,OAAQsI,GAAQihB,EAAY,EAC7DA,EACnB,CAAS,EAGD,GAAIH,GAAiB,OAAS,GAC1B,CAAC,KAAK,YAAY,WAAW,OAAO,wBAAwB,QAAQ,EAAG,CACvE,MAAMI,GAAYd,EAAS,IAAKpgB,IAAW,CACvC,MAAM2gB,GAAWjpB,GAAS,eAAesI,EAAM,EAI/C,GAAI,CAAC2gB,GACD,MAAM,IAAI,aAAa,kEAAkE,EAC7F,OAAOA,EACvB,CAAa,EAMKQ,GAAkB,MAAM,KAAK,YAAY,QAC1C,mBAAkB,EAClB,OAAOzpB,GAAS,eAAe,IAAK0V,IAAW1V,GAAS,WAAa,IAAM0V,GAAO,YAAY,CAAC,EAC/F,UAAU0T,GAAiB,IAAK1T,IAAW1V,GAAS,WAAa,IAAM0V,GAAO,YAAY,CAAC,EAC3F,KAAK1V,GAAS,OAAQA,GAAS,UAAU,EACzC,MAAMwpB,EAAS,EACf,UAAU,aAAa,EACvB,QAAS,EACdd,EAAS,QAAQ,CAACpgB,GAAQqgB,KAAgB,CACtC,KAAK,YAAY,QAAQ,MAAM3oB,GAAS,OAAQspB,GAAcX,EAAW,EAAGc,GAAgBd,EAAW,CAAC,EACxG,KAAK,YAAY,QAAQ,MAAM3oB,GAAS,OAAQsI,GAAQmhB,GAAgBd,EAAW,CAAC,CACpG,CAAa,CACb,CACQD,EAAS,QAAQ,CAACpgB,GAAQqgB,KAAgB,CACtC,MAAMM,GAAWjpB,GAAS,eAAesI,EAAM,EAC/C6gB,EAAa,YAAY,KAAKF,EAAQ,EACtCE,EAAa,cAAc,KAAKG,GAAcX,EAAW,CAAC,CACtE,CAAS,CACT,CAII,6BAA8B,CAC1B,OAAO,KAAK,cAAc,UAAU,SAAS,QAAQ,OAAQjT,GACjDA,EAAO,eAAiB,QAC5BA,EAAO,cACPA,EAAO,SACd,CACT,CAII,iCAAkC,CAC9B,OAAO,KAAK,cAAc,UAAU,SAAS,QAAQ,OAAQA,GACjDA,EAAO,eAAiB,QAC5BA,EAAO,cACPA,EAAO,WACPA,EAAO,YACd,CACT,CACA,CCtJO,MAAM,2BAA2B,YAAa,CACjD,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,aAAa,EAAI,OAAO,IAAI,oBAAoB,CAC7D,CAOI,UAAW,CACP,IAAId,EAAM,KAAK,cAAe,EAC9B,OAAAA,GAAO,KAAK,oBAAqB,EACjCA,GAAO,KAAK,uBAAwB,EAC7B,KAAK,qCAAqCA,EAAI,KAAI,CAAE,CACnE,CAII,MAAM,SAAU,CAEZ,MAAM8U,EAAY,KAAK,aAAc,EASrC,GAAIA,EAAU,SAAW,EACrB,OAAO,IAAI,aAGf,MAAM5F,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,GAAyB,GAC7B,GAAI,CASA,GAPI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,GAAyB,IAIzB,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,YAAa,CAC1C,MAAMwB,GAAkB,IAAI,kBAC5BD,EAAU,QAASE,IAAa,CAC5B9F,EAAY,YAAY,2BAA2B6F,GAAiB,KAAK,cAAc,UAAU,SAAUC,EAAQ,CACvI,CAAiB,EACD,MAAMD,GAAgB,KAAM,CAC5C,CACY,IAAIE,GAAa,KACbC,GAAkB,KAGtB,MAAMC,GAAgC,IAAI,8BAA8BjG,EAAa,KAAK,aAAa,EACjGiF,GAAmB,CAAE,EAC3B,GAAI,MAAM,QAAQ,KAAK,cAAc,SAAS,GAC1C,KAAK,cAAc,UAAU,YAC7B,UAAWiB,MAAc,KAAK,cAAc,UACxCjB,GAAiB,KAAK,GAAG,KAAK,cAAc,UAAU,SAAS,4BAA4BiB,EAAU,CAAC,EAG1G,KAAK,cAAc,eAAiB,IACpC,KAAK,cAAc,UAAU,cACvBN,EAAU,OAAS,GACrB,KAAK,WAAW,OAAO,QAAQ,OAAS,WACxC,KAAK,cAAc,sBACf,KAAK,cAAc,UAAU,SAAS,6BAA8B,GAE5EX,GAAiB,KAAK,GAAG,KAAK,cAAc,sBAAsB,OAAQxd,IAAM,CAACwd,GAAiB,SAASxd,EAAC,CAAC,CAAC,GAE9Gwd,GAAiB,OAAS,GAC1B,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxCc,GAAa,KAAK,WAAW,OAAO,8BAA8B,eAAgBd,EAAgB,EAClGe,GAAkB,8BAKtB,KAAM,CAACG,GAAWjT,EAAU,EAAI,KAAK,sBAAuB,EAItDpC,GADa,CAACiV,GAAYI,GAAWH,EAAe,EACnC,OAAQxe,IAAMA,IAAK,IAAI,EAAE,KAAK;AAAA;AAAA,CAAO,EACtD4c,GAAc,MAAMpE,EAAY,MAAMlP,GAAKoC,GAAY,EAAI,EAC3DmS,GAAe,aAAa,KAAKjB,EAAW,EAUlD,GAPI,KAAK,cAAc,eAAiB,IACpC,KAAK,cAAc,UAAU,aAE7B,MAAM6B,GAA8B,OAAOZ,GAAcO,CAAS,EAIlE,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,YAAa,CAC1C,MAAMC,GAAkB,IAAI,kBAC5BD,EAAU,QAASE,IAAa,CAC5B9F,EAAY,YAAY,0BAA0B6F,GAAiB,KAAK,cAAc,UAAU,SAAUC,EAAQ,CACtI,CAAiB,EACD,MAAMD,GAAgB,KAAM,CAC5C,CAGY,OAAIxB,IACA,MAAMrE,EAAY,kBAAmB,EAGlCqF,EACnB,OACeriB,GAAO,CAEV,GAAIqhB,GACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CAEAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAI3C,CACA,CAOI,KAAKS,EAAcuB,EAAS,CACxBvB,EAAe,gBAAgB,eAAeA,CAAY,EACpDA,EAAa,QAAQ,KACrBA,EACN,MAAMH,GAAY,KAAK,gBAAgBG,CAAY,EACnD,YAAK,cAAc,aAAaH,EAAS,EACzC,KAAK,cAAc,cAAgB0B,GAAW,CAAE,EACzC,IACf,CAII,OAAOnf,EAAQ,CACX,YAAK,cAAc,UAAYA,EACxB,IACf,CAII,OAAO6D,EAAQ,CACX,OAAO,KAAK,UAAUA,CAAM,CACpC,CAII,UAAU6d,EAAW,CAEjB,GAAI,CAAC,KAAK,WAAW,OAAO,wBAAwB,QAAQ,EACxD,MAAM,IAAI,oCAEd,YAAK,cAAc,UAAYA,EACxB,IACf,CAMI,aAAa1D,EAAS,CAClB,YAAK,cAAc,aAAeA,EAC3B,IACf,CAMI,WAAWM,EAAW,CAClB,YAAK,cAAc,WAAaA,EACzB,IACf,CAII,SAASA,EAAY,GAAM,CACvB,YAAK,cAAc,SAAW,CAAC,CAACA,EACzB,IACf,CAII,SAASiF,EAAsBC,EAAgBC,GAAiB,CAC5D,OAAK,MAAM,QAAQF,CAAoB,GAUvC,KAAK,cAAc,SAAW,CAC1B,UAAWA,EACX,SAAUC,EACV,4BAA6BC,IAAiB,4BAC9C,eAAgBA,IAAiB,eACjC,WAAYA,IAAiB,UAChC,EACM,OAhBH,KAAK,cAAc,SAAW,CAC1B,SAAUF,GAAsB,gBAChC,QAASA,GAAsB,QAC/B,UAAWA,GAAsB,UACjC,4BAA6BE,IAAiB,4BAC9C,WAAYA,IAAiB,UAChC,EACM,KAUnB,CAOI,wBAAyB,CACrB,MAAM9B,EAAY,KAAK,aAAa,KAAK,iBAAgB,CAAE,EACrD+B,EAAmB,KAAK,yBACxB9B,GAAsB,KAAK,WAAW,OAAO,QAAQ,OAAS,UAChE,KAAK,aAAc,EAAC,OAAS,EAC3B,KACA,KAAK,0BAA0B,QAAQ,EACvCxC,GAAoB,KAAK,4BAA6B,EAC5D,IAAIhP,GAAQ,UAkDZ,GAjDI,KAAK,cAAc,UAAU,aAAe,gBAC5CA,GAAQ,YAER,YAAY,cAAc,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,kBACxCA,IAAS,GAAG,KAAK,cAAc,SAAW,WAAa,EAAE,IAE7DA,IAAS,QAAQuR,CAAS,GACtB,KAAK,QAAU,KAAK,iBAAkB,GACtC,YAAY,iBAAiB,KAAK,WAAW,MAAM,IACnDvR,IAAS,QAAQ,KAAK,KAAK,KAG3BgP,GACAhP,IAAS,IAAIgP,EAAiB,IAG1B,CAACsE,IACA,YAAY,cAAc,KAAK,WAAW,MAAM,GAC7C,KAAK,WAAW,OAAO,QAAQ,OAAS,kBAE5CtT,IAAS,MAGbwR,IACA,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxCxR,IAAS,WAAWwR,EAAmB,IAGvC8B,GACK,KAAK,WAAW,OAAO,QAAQ,OAAS,UACzC,KAAK,WAAW,OAAO,QAAQ,OAAS,QACxC,KAAK,aAAY,EAAG,OAAS,EAC7BtT,IAAS,IAAIsT,CAAgB,GAG7BtT,IAAS,WAAWsT,CAAgB,GAIpC,YAAY,cAAc,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,eAExCtT,IAAS,aAGTA,IAAS,kBAGb,KAAK,cAAc,UAAU,aAAe,eAC5C,GAAI,KAAK,WAAW,OAAO,qBAAqB,SAAS,uBAAuB,GAC5E,GAAI,KAAK,cAAc,SACnBA,IAAS,mCAEJ,KAAK,cAAc,WACxBA,IAAS,gBAAgB,KAAK,cAAc,UAAU,YAEjD,KAAK,cAAc,SAAU,CAClC,KAAM,CAAE,UAAAuT,GAAW,QAAAxE,GAAS,SAAAyE,GAAU,4BAAAC,GAA6B,eAAAC,EAAiB,EAAG,KAAK,cAAc,SAC1G,IAAIN,GAAiB,cACrB,GAAI,MAAM,QAAQI,EAAQ,EAAG,CAIzB,GAHAJ,IAAkB,MAAMI,GACnB,IAAK7U,IAAW,KAAK,OAAOA,EAAM,CAAC,EACnC,KAAK,IAAI,CAAC,KACX+U,IACA,CAAC,YAAY,iBAAiB,KAAK,WAAW,MAAM,EACpD,MAAM,IAAI,aAAa,uEAAuE,EAE9FA,IACA,YAAY,iBAAiB,KAAK,WAAW,MAAM,IACnDN,IAAkB,YAAYM,EAAc,KAExE,MAC6BF,KACLJ,IAAkB,kBAAkB,KAAK,OAAOI,EAAQ,CAAC,IAE7D,MAAMG,GAAa,CAAE,EACjB,MAAM,QAAQJ,EAAS,EACvBI,GAAW,KAAK,GAAGJ,GAAU,IAAK5U,IAAW,GAAG,KAAK,OAAOA,EAAM,CAAC,eAAe,KAAK,OAAOA,EAAM,CAAC,EAAE,CAAC,EAEnGoQ,IACL4E,GAAW,KAAK,GAAG5E,GAAQ,IAAKpQ,IAAW,GAAG,KAAK,OAAOA,EAAM,CAAC,OAAOA,EAAM,EAAE,CAAC,EAEjFgV,GAAW,OAAS,IACpB3T,IAAS,IAAIoT,EAAc,kBAC3BO,GAAW,KAAK,GAAG,KAAK,cACnB,UAAU,SAAS,QAAQ,OAAQhV,IAAWA,GAAO,cACtD,CAAC4U,IAAW,SAAS5U,GAAO,YAAY,GACxC,EAAG,KAAK,WAAW,OAAO,QACrB,OAAS,UACV,KAAK,aAAY,EAAG,OAChB,GACJ,YAAY,eAAe,KAAK,WAAW,MAAM,GACjD,KAAK,WAAW,OAAO,QAClB,OAAS,OACd,KAAK,WAAW,OAAO,QAClB,OAAS,UAAU,EAC3B,IAAKA,IAAW,GAAG,KAAK,OAAOA,GAAO,YAAY,CAAC,YAAY,CAAC,EACrEqB,IAAS2T,GAAW,KAAK,IAAI,EAC7B3T,IAAS,KAET,MAAM,QAAQuT,EAAS,GACvBE,IACA,YAAY,iBAAiB,KAAK,WAAW,MAAM,IACnDzT,IAAS,WACTA,IAASuT,GACJ,IAAK5U,IAAW,GAAG4S,CAAS,IAAI,KAAK,OAAO5S,EAAM,CAAC,8BAA8B,KAAK,OAAOA,EAAM,CAAC,EAAE,EACtG,KAAK,MAAM,EAChBqB,IAAS,KAEjC,UAEqB,KAAK,WAAW,OAAO,qBAAqB,SAAS,yBAAyB,GACnF,GAAI,KAAK,cAAc,SAAU,CAC7B,KAAM,CAAE,UAAAuT,GAAW,QAAAxE,EAAS,EAAG,KAAK,cAAc,SAC9C,MAAM,QAAQwE,EAAS,GACvBvT,IAAS,4BACTA,IAASuT,GACJ,IAAK5U,IAAW,GAAG,KAAK,OAAOA,EAAM,CAAC,aAAa,KAAK,OAAOA,EAAM,CAAC,GAAG,EACzE,KAAK,IAAI,EACdqB,IAAS,KAEJ,MAAM,QAAQ+O,EAAO,IAC1B/O,IAAS,4BACTA,IAAS+O,GACJ,IAAKpQ,IAAW,GAAG,KAAK,OAAOA,EAAM,CAAC,OAAOA,EAAM,EAAE,EACrD,KAAK,IAAI,EACdqB,IAAS,IAEjC,UAGoB,KAAK,cAAc,SACnB,MAAM,IAAI,aAAa,0DAA0D,EAK7F,OAAIwR,KACC,YAAY,iBAAiB,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxC,KAAK,WAAW,OAAO,QAAQ,OAAS,eACxC,YAAY,cAAc,KAAK,WAAW,MAAM,KACpDxR,IAAS,cAAcwR,EAAmB,IAI1C,KAAK,WAAW,OAAO,QAAQ,OAAS,SACxC,KAAK,cAAc,UAAU,aAC7B,KAAK,cACA,UAAU,SAAS,QAAQ,OAAQ7S,IAAW,KAAK,cAAc,cAAc,OAAS,EACvF,KAAK,cAAc,cAAc,QAAQA,GAAO,YAAY,IAAM,GAClEA,GAAO,QAAQ,EAChB,KAAMA,IAAW,KAAK,kCAAkCA,EAAM,CAAC,IACpEqB,GAAQ,uBAAuBuR,CAAS,QAAQvR,EAAK,yBAAyBuR,CAAS,QAEpFvR,EACf,CAII,oBAAqB,CACjB,OAAK,KAAK,cAAc,UAAU,YAE3B,KAAK,cAAc,UAAU,SAAS,QAAQ,OAAQrB,GAErD,KAAK,cAAc,cAAc,OACzB,KAAK,cAAc,cAAc,QAAQA,EAAO,YAAY,IAAM,GAE1E,GAACA,EAAO,UAKRA,EAAO,aACPA,EAAO,qBAAuB,aAC5B,KAAK,WAAW,OAAO,QAAQ,OAAS,WACxC,KAAK,WAAW,OAAO,QAAQ,OAAS,UAC1C,CAAC,YAAY,eAAe,KAAK,WAAW,MAAM,GAClD,CAAC,YAAY,cAAc,KAAK,WAAW,MAAM,GAC/C,KAAK,WAAW,OAAO,QAAQ,OAAS,gBAC1C,EAAE,KAAK,WAAW,OAAO,QAAQ,OAAS,SACtC,KAAK,kCAAkCA,CAAM,GAGxD,EAtBU,CAAE,CAuBrB,CAII,6BAA8B,CAC1B,MAAMoQ,EAAU,KAAK,mBAAoB,EACzC,GAAIA,EAAQ,OAAS,EACjB,OAAOA,EACF,IAAKpQ,GAAW,KAAK,OAAOA,EAAO,YAAY,CAAC,EAChD,KAAK,IAAI,EAGlB,GAAI,CAAC,KAAK,cAAc,UAAU,aAC9B,CAAC,KAAK,cAAc,cAAc,OAAQ,CAC1C,MAAMgU,EAAY,KAAK,aAAc,EACrC,GAAIA,EAAU,SAAW,EACrB,OAAO,OAAO,KAAKA,EAAU,CAAC,CAAC,EAC1B,IAAK1D,IAAe,KAAK,OAAOA,EAAU,CAAC,EAC3C,KAAK,IAAI,CAC9B,CAEQ,OAAO,KAAK,cAAc,cACrB,IAAKA,GAAe,KAAK,OAAOA,CAAU,CAAC,EAC3C,KAAK,IAAI,CACtB,CAII,wBAAyB,CACrB,MAAM0D,EAAY,KAAK,aAAc,EAC/B5D,EAAU,KAAK,mBAAoB,EAEzC,GAAIA,EAAQ,OAAS,EAAG,CACpB,IAAIK,GAAa,GAmLjB,OAlLAuD,EAAU,QAAQ,CAACE,GAAUe,KAAkB,CAC3C7E,EAAQ,QAAQ,CAACpQ,GAAQkV,KAAgB,CACjCA,KAAgB,IACZ,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxClB,EAAU,OAAS,GAGd,KAAK,WAAW,OAAO,QAAQ,OAAS,OAC7CA,EAAU,OAAS,EAHnBvD,IAAc,WAOdA,IAAc,KAItB,IAAIxoB,GAAQ+X,GAAO,eAAekU,EAAQ,EAa1C,GANM,OAAOjsB,IAAU,aAEnBA,GAAQ,KAAK,WAAW,OAAO,uBAAuBA,GAAO+X,EAAM,GAInEA,GAAO,WAAa/X,KAAU,OAC9BwoB,IAAc,YAaTzQ,GAAO,gBACZyQ,IAAc,KAAK,gBAAgB,KAAK,cAAc,UAAU,SAC3D,kBAAkB,UASlBzQ,GAAO,aACZA,GAAO,qBAAuB,QAC9B,CAAC,KAAK,WAAW,OAAO,0BAA2B,GACnD/X,KAAU,OACVA,GAAQktB,GAAQ,EAChB1E,IAAc,KAAK,gBAAgBxoB,EAAK,EAClCgtB,MACF,KAAK,cAAc,mBACnB,KAAK,cAAc,iBAAiBA,EAAa,EAC7C,CAAE,GAEVjV,GAAO,eAAe,KAAK,cAAc,iBAAiBiV,EAAa,EAAGhtB,EAAK,UAG1EA,KAAU,OACV,KAAK,WAAW,OAAO,QAAQ,OAAS,UACzC+rB,EAAU,OAAS,GACnB,YAAY,eAAe,KAAK,WAAW,MAAM,GACjD,KAAK,WAAW,OAAO,QAAQ,OAAS,OACxC,KAAK,WAAW,OAAO,QAAQ,OAAS,UAEpChU,GAAO,UAAY,QACnBA,GAAO,UAAY,KAEnByQ,IACI,KAAK,WAAW,OAAO,iBAAiBzQ,EAAM,EAGlDyQ,IAAc,OAIlBA,IAAc,kBAGbxoB,KAAU,MACf,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxCwoB,IAAc,eAGT,OAAOxoB,IAAU,WACtBwoB,IAAcxoB,GAAO,MAGpB,CACG,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxCA,GAAQ,KAAK,WAAW,OAAO,iBAAiB+X,GAAQ/X,EAAK,GAIjE,MAAMmtB,GAAY,KAAK,gBAAgBntB,EAAK,EAC5C,IAAK,YAAY,cAAc,KAAK,WAAW,MAAM,GACjD,KAAK,WAAW,OAAO,QAAQ,OAC3B,iBACJ,KAAK,WAAW,OAAO,aAAa,QAAQ+X,GAAO,IAAI,IAAM,GAAI,CAEjE,MAAMqV,GADY,KAAK,WAAW,OAAO,QAAQ,qBAE3C,eACA,kBACFrV,GAAO,MAAQ,KACfyQ,IAAc,GAAG4E,EAAY,IAAID,EAAS,KAAKpV,GAAO,IAAI,IAG1DyQ,IAAc,GAAG4E,EAAY,IAAID,EAAS,GAE1E,MACiC,YAAY,iBAAiB,KAAK,WAAW,MAAM,GACxD,KAAK,WAAW,OAAO,aAAa,QAAQpV,GAAO,IAAI,IAAM,GACzDA,GAAO,MAAQ,KACfyQ,IAAc,iCAAiC2E,EAAS,MAAMpV,GAAO,IAAI,MAAMA,GAAO,IAAI,GAG1FyQ,IAAc,sBAAsB2E,EAAS,MAAMpV,GAAO,IAAI,GAG7D,KAAK,WAAW,OAAO,QAAQ,OAAS,SAC7C,KAAK,WAAW,OAAO,aAAa,QAAQA,GAAO,IAAI,IAAM,GAC7DyQ,IACIzQ,GAAO,KACH,oBACAoV,GACA,MACCpV,GAAO,MAAQ,KAChB,IAGRyQ,IAAc2E,EAE1C,CACwBF,KAAgB9E,EAAQ,OAAS,EAC7B6E,KAAkBjB,EAAU,OAAS,EACjC,KAAK,WAAW,OAAO,QAAQ,OAC/B,UACAA,EAAU,OAAS,EACnBvD,IAAc,cAET,KAAK,WAAW,OAAO,QAAQ,OAAS,OAC7CuD,EAAU,OAAS,EACnBvD,IAAc,eAGdA,IAAc,IAId,KAAK,WAAW,OAAO,QAAQ,OAC/B,UACAuD,EAAU,OAAS,EACnBvD,IAAc,wBAET,KAAK,WAAW,OAAO,QAAQ,OAAS,OAC7CuD,EAAU,OAAS,EACnBvD,IAAc,yBAGdA,IAAc,MAKtBA,IAAc,IAEtC,CAAiB,CACjB,CAAa,EACGA,KAAe,KACR,GACJA,EACnB,KACa,CAGD,IAAIA,GAAa,GA6CjB,OA5CAuD,EAAU,QAAQ,CAACE,GAAUoB,KAAmB,CAC5B,OAAO,KAAKpB,EAAQ,EAC5B,QAAQ,CAAC5D,GAAY4E,KAAgB,CACrCA,KAAgB,IAChBzE,IAAc,KAElB,MAAMxoB,GAAQisB,GAAS5D,EAAU,EAE7B,OAAOroB,IAAU,WACjBwoB,IAAcxoB,GAAO,EAGhBA,KAAU,OACV,KAAK,WAAW,OAAO,QAAQ,OAAS,UACzC+rB,EAAU,OAAS,GACnB,YAAY,eAAe,KAAK,WAAW,MAAM,GACjD,KAAK,WAAW,OAAO,QAAQ,OAAS,OACxC,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxCvD,IAAc,OAGdA,IAAc,UAGbxoB,KAAU,MACf,KAAK,WAAW,OAAO,QAAQ,OAAS,YAIxCwoB,IAAc,KAAK,gBAAgBxoB,EAAK,GAExCitB,KAAgB,OAAO,KAAKhB,EAAQ,EAAE,OAAS,EAC3CoB,KAAmBtB,EAAU,OAAS,EACtCvD,IAAc,IAGdA,IAAc,MAIlBA,IAAc,IAEtC,CAAiB,CACjB,CAAa,EACGA,KAAe,KACR,GACJA,EACnB,CACA,CAII,cAAe,CACX,GAAI,MAAM,QAAQ,KAAK,cAAc,SAAS,EAC1C,OAAO,KAAK,cAAc,UAC9B,GAAI,YAAY,SAAS,KAAK,cAAc,SAAS,EACjD,MAAO,CAAC,KAAK,cAAc,SAAS,EACxC,MAAM,IAAI,wBAClB,CAMI,kCAAkCzQ,EAAQ,CACtC,OAAQA,EAAO,WACXA,EAAO,aACPA,EAAO,qBAAuB,aAC9B,KAAK,aAAc,EAAC,KAAMkU,GAAalU,EAAO,eAAekU,CAAQ,IAAM,QACvElU,EAAO,eAAekU,CAAQ,IAAM,IAAI,CACxD,CACA,CCjtBO,MAAM,eAAgB,CAIzB,YAAYhF,EAAcvC,EAAe,CACrC,KAAK,aAAeuC,EACpB,KAAK,cAAgBvC,CAC7B,CAOI,MAAM,OAAO1kB,EAAO,CAChB,MAAMiZ,EAAW,KAAK,cAAc,iBACpC,GAAIA,EAAS,aAAeA,EAAS,gBAAiB,CAClD,MAAMuN,GAAYvN,EAAS,YAAY,OAAO,CAACuN,GAAW/a,KAAe,CACrE,MAAM6hB,GAAgB,YAAY,SAASttB,CAAK,EAC1CyL,GAAW,iBAAiB,eAAezL,CAAK,EAChDA,EACN,OAAAyL,GAAW,eAAe+a,GAAW8G,EAAa,EAC3C9G,EACV,EAAE,EAAE,EACL,GAAI,CAAC,KAAK,cAAc,IACnB,MAAM,QAAQ,KAAK,cAAc,EAAE,GAChC,CAAC,KAAK,cAAc,GAAG,OAC3B,OACJ,MAAM,KAAK,aACN,mBAAkB,EAClB,OAAOvN,EAAS,eAAe,MAAM,EACrC,IAAIuN,EAAS,EACb,WAAW,KAAK,cAAc,EAAE,EAChC,QAAS,CAC1B,UACkBvN,EAAS,oBAAsBA,EAAS,cAC9CjZ,IAAU,KAAM,CAEhB,MAAMwmB,GAAY,CAAE,EACpBvN,EAAS,gBAAgB,YAAY,QAASlB,IAAW,CACrDyO,GAAUzO,GAAO,YAAY,EAAI,IACjD,CAAa,EACD,MAAMwV,GAAM,MAAM,QAAQ,KAAK,cAAc,EAAE,EACzC,KAAK,cAAc,GACnB,CAAC,KAAK,cAAc,EAAE,EACtBlU,GAAa,CAAE,EACfiR,GAAa,CAAE,EACrBiD,GAAI,QAAQ,CAACC,GAAIC,KAAY,CACzBxU,EAAS,gBAAgB,YAAY,IAAI,CAAClB,GAAQkV,KAAgB,CAC9D,MAAMpG,GAAgB,cAAgB4G,GAAU,IAAMR,GACtD5T,GAAWwN,EAAa,EAAI,YAAY,SAAS2G,EAAE,EAC7CzV,GAAO,iBAAiB,eAAeyV,EAAE,EACzCA,GACNlD,GAAW,KAAK,GAAGvS,GAAO,YAAY,OAAO8O,EAAa,EAAE,CAChF,CAAiB,CACjB,CAAa,EACD,MAAMoB,GAAYqC,GACb,IAAKnZ,IAAQ,IAAMA,GAAM,GAAG,EAC5B,KAAK,MAAM,EAChB,GAAI,CAAC8W,GACD,OACJ,MAAM,KAAK,aACN,mBAAkB,EAClB,OAAOhP,EAAS,sBAAsB,MAAM,EAC5C,IAAIuN,EAAS,EACb,MAAMyB,EAAS,EACf,cAAc5O,EAAU,EACxB,QAAS,CAC1B,SACiBJ,EAAS,oBAAsBA,EAAS,YAAa,CAC1D,GAAI,MAAM,QAAQ,KAAK,cAAc,EAAE,EACnC,MAAM,IAAI,aAAa,yHAAyH,EACpJ,MAAMuU,GAAK,KAAK,cAAc,GACxBhH,GAAYvN,EAAS,gBAAgB,YAAY,OAAO,CAACuN,GAAW/a,KAAe,CACrF,MAAM6hB,GAAgB,YAAY,SAASE,EAAE,EACvC/hB,GAAW,iBAAiB,eAAe+hB,EAAE,EAC7CA,GACN,OAAA/hB,GAAW,eAAe+a,GAAW8G,EAAa,EAC3C9G,EACV,EAAE,EAAE,EACL,GAAI,CAACxmB,GAAU,MAAM,QAAQA,CAAK,GAAK,CAACA,EAAM,OAC1C,OACJ,MAAM,KAAK,aACN,mBAAkB,EAClB,OAAOiZ,EAAS,sBAAsB,MAAM,EAC5C,IAAIuN,EAAS,EACb,WAAWxmB,CAAK,EAChB,QAAS,CAC1B,KACa,CAED,MAAM0tB,GAAmBzU,EAAS,uBAC5BsU,GAAM,MAAM,QAAQ,KAAK,cAAc,EAAE,EACzC,KAAK,cAAc,GACnB,CAAC,KAAK,cAAc,EAAE,EACtBvkB,GAAS,MAAM,QAAQhJ,CAAK,EAAIA,EAAQ,CAACA,CAAK,EAC9C2tB,GAAoB1U,EAAS,kBAAoBsU,GAAMvkB,GACvD4kB,GAAqB3U,EAAS,kBAAoBjQ,GAASukB,GAC3DM,GAAe,CAAE,EAiBvB,GAhBAF,GAAkB,QAASG,IAAmB,CAC1CF,GAAmB,QAASG,IAAoB,CAC5C,MAAMC,GAAW,CAAE,EACnBN,GAAiB,aAAa,QAAS3V,IAAW,CAC9CiW,GAASjW,GAAO,YAAY,EAAI,YAAY,SAAS+V,EAAc,EAC7D/V,GAAO,iBAAiB,eAAe+V,EAAc,EACrDA,EAC9B,CAAqB,EACDJ,GAAiB,eAAe,QAAS3V,IAAW,CAChDiW,GAASjW,GAAO,YAAY,EAAI,YAAY,SAASgW,EAAe,EAC9DhW,GAAO,iBAAiB,eAAegW,EAAe,EACtDA,EAC9B,CAAqB,EACDF,GAAa,KAAKG,EAAQ,CAC9C,CAAiB,CACjB,CAAa,EACG,CAACH,GAAa,OACd,OACA,KAAK,aAAa,WAAW,OAAO,QAAQ,OAAS,UACrD,KAAK,aAAa,WAAW,OAAO,QAAQ,OAAS,MACrD,MAAM,QAAQ,IAAIA,GAAa,IAAK7tB,IACzB,KAAK,aACP,mBAAkB,EAClB,OAAM,EACN,KAAK0tB,GAAiB,SAAS,EAC/B,OAAO1tB,EAAK,EACZ,QAAS,CACjB,CAAC,EAGF,MAAM,KAAK,aACN,mBAAkB,EAClB,OAAM,EACN,KAAK0tB,GAAiB,SAAS,EAC/B,OAAOG,EAAY,EACnB,QAAS,CAE9B,CACA,CACA,CC3IO,MAAM,eAAgB,CAIzB,YAAY5G,EAAcvC,EAAe,CACrC,KAAK,aAAeuC,EACpB,KAAK,cAAgBvC,CAC7B,CAOI,MAAM,OAAO1kB,EAAO,CAChB,MAAMiZ,EAAW,KAAK,cAAc,iBACpC,GAAIA,EAAS,YAAa,CAItB,MAAMsU,GAAM,MAAM,QAAQ,KAAK,cAAc,EAAE,EACzC,KAAK,cAAc,GACnB,CAAC,KAAK,cAAc,EAAE,EACtBvkB,GAAS,MAAM,QAAQhJ,CAAK,EAAIA,EAAQ,CAACA,CAAK,EAC9CwmB,GAAY,CAAE,EACpBvN,EAAS,gBAAgB,YAAY,QAASlB,IAAW,CACrDyO,GAAUzO,GAAO,YAAY,EAAI,IACjD,CAAa,EACD,MAAMsB,GAAa,CAAE,EACfiR,GAAa,CAAE,EACrBiD,GAAI,QAAQ,CAACC,GAAIC,KAAY,CACzBnD,GAAW,KAAK,GAAGthB,GAAO,IAAI,CAAChJ,GAAOiuB,KAC3B,CACH,GAAGhV,EAAS,gBAAgB,YAAY,IAAI,CAAClB,GAAQkV,KAAgB,CACjE,MAAMpG,GAAgB,cAClB4G,GACA,IACAQ,GACA,IACAhB,GACJ,OAAA5T,GAAWwN,EAAa,EACpB,YAAY,SAAS2G,EAAE,EACjBzV,GAAO,iBAAiB,eAAeyV,EAAE,EACzCA,GACH,GAAGzV,GAAO,YAAY,OAAO8O,EAAa,EAC7E,CAAyB,EACD,GAAG5N,EAAS,gBAAgB,eAAe,eAAe,IAAI,CAAClB,GAAQkV,KAAgB,CACnF,MAAMpG,GAAgB,iBAClBoH,GACA,IACAA,GACA,IACAhB,GACJ,OAAA5T,GAAWwN,EAAa,EACpB,YAAY,SAAS7mB,EAAK,EACpB+X,GAAO,eAAe/X,EAAK,EAC3BA,GACH,GAAG+X,GAAO,YAAY,OAAO8O,EAAa,EAC7E,CAAyB,CACzB,EAAsB,KAAK,OAAO,CACjB,CAAC,CAClB,CAAa,EACD,MAAMoB,GAAYqC,GACb,IAAKnZ,IAAQ,IAAMA,GAAM,GAAG,EAC5B,KAAK,MAAM,EAChB,GAAI,CAAC8W,GACD,OACJ,MAAM,KAAK,aACN,mBAAkB,EAClB,OAAOhP,EAAS,sBAAsB,MAAM,EAC5C,IAAIuN,EAAS,EACb,MAAMyB,EAAS,EACf,cAAc5O,EAAU,EACxB,QAAS,CAC1B,KACa,CAED,MAAMqU,GAAmBzU,EAAS,uBAC5BsU,GAAM,MAAM,QAAQ,KAAK,cAAc,EAAE,EACzC,KAAK,cAAc,GACnB,CAAC,KAAK,cAAc,EAAE,EACtBvkB,GAAS,MAAM,QAAQhJ,CAAK,EAAIA,EAAQ,CAACA,CAAK,EAC9C2tB,GAAoB1U,EAAS,kBAAoBsU,GAAMvkB,GACvD4kB,GAAqB3U,EAAS,kBAAoBjQ,GAASukB,GAC3DlU,GAAa,CAAE,EACfiR,GAAa,CAAE,EACrBqD,GAAkB,QAAQ,CAACG,GAAgBI,KAAwB,CAC/D5D,GAAW,KAAK,GAAGsD,GAAmB,IAAI,CAACG,GAAiBI,KACjD,CACH,GAAGT,GAAiB,aAAa,IAAI,CAAC3V,GAAQkV,KAAgB,CAC1D,MAAMpG,GAAgB,cAClBqH,GACA,IACAC,GACA,IACAlB,GACJ,OAAA5T,GAAWwN,EAAa,EACpB,YAAY,SAASiH,EAAc,EAC7B/V,GAAO,iBAAiB,eAAe+V,EAAc,EACrDA,GACH,GAAG/V,GAAO,YAAY,OAAO8O,EAAa,EAC7E,CAAyB,EACD,GAAG6G,GAAiB,eAAe,IAAI,CAAC3V,GAAQkV,KAAgB,CAC5D,MAAMpG,GAAgB,eAClBqH,GACA,IACAC,GACA,IACAlB,GACJ,OAAA5T,GAAWwN,EAAa,EACpB,YAAY,SAASkH,EAAe,EAC9BhW,GAAO,iBAAiB,eAAegW,EAAe,EACtDA,GACH,GAAGhW,GAAO,YAAY,OAAO8O,EAAa,EAC7E,CAAyB,CACzB,EAAsB,KAAK,OAAO,CACjB,CAAC,CAClB,CAAa,EACD,MAAMoB,GAAYqC,GACb,IAAKnZ,IAAQ,IAAMA,GAAM,GAAG,EAC5B,KAAK,MAAM,EAChB,MAAM,KAAK,aACN,mBAAkB,EAClB,OAAM,EACN,KAAKuc,GAAiB,SAAS,EAC/B,MAAMzF,EAAS,EACf,cAAc5O,EAAU,EACxB,QAAS,CAC1B,CACA,CACA,CC9HO,MAAM,6BAA6B,YAAa,CACnD,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,aAAa,EAAI,OAAO,IAAI,sBAAsB,CAC/D,CAOI,UAAW,CACP,MAAO,EACf,CAOI,GAAG1O,EAAQ,CACP,YAAK,cAAc,GAAKA,EACjB,IACf,CAOI,MAAM,IAAI3K,EAAO,CACb,MAAMiZ,EAAW,KAAK,cAAc,iBACpC,GAAI,CAAC,KAAK,cAAc,GAEpB,MAAM,IAAI,aAAa,4GAA4G,EACvI,GAAIA,EAAS,cAAgBA,EAAS,YAClC,MAAM,IAAI,aAAa,4FACDA,EAAS,YAAY,SAASA,EAAS,YAAY,uCACzC,EAEpC,GAAIA,EAAS,aACTA,EAAS,YAAY,OAAS,IAC7B,CAAC,YAAY,SAASjZ,CAAK,GACxB,OAAO,KAAKA,CAAK,EAAE,OAASiZ,EAAS,YAAY,QACrD,MAAM,IAAI,aAAa,2HAA2H,EAEtJ,OADgB,IAAI,gBAAgB,KAAM,KAAK,aAAa,EAC7C,OAAOjZ,CAAK,CACnC,CAQI,MAAM,IAAIA,EAAO,CACb,GAAI,MAAM,QAAQA,CAAK,GAAKA,EAAM,SAAW,EACzC,OACJ,MAAMiZ,EAAW,KAAK,cAAc,iBACpC,GAAI,CAAC,KAAK,cAAc,GAEpB,MAAM,IAAI,aAAa,4GAA4G,EACvI,GAAIA,EAAS,aAAeA,EAAS,WACjC,MAAM,IAAI,aAAa,8FACDA,EAAS,YAAY,SAASA,EAAS,YAAY,uCACzC,EAEpC,GAAIA,EAAS,aACTA,EAAS,YAAY,OAAS,IAC7B,CAAC,YAAY,SAASjZ,CAAK,GACxB,OAAO,KAAKA,CAAK,EAAE,OAASiZ,EAAS,YAAY,QACrD,MAAM,IAAI,aAAa,2HAA2H,EAEtJ,OADgB,IAAI,gBAAgB,KAAM,KAAK,aAAa,EAC7C,OAAOjZ,CAAK,CACnC,CAQI,MAAM,OAAOA,EAAO,CAChB,GAAI,MAAM,QAAQA,CAAK,GAAKA,EAAM,SAAW,EACzC,OACJ,MAAMiZ,EAAW,KAAK,cAAc,iBACpC,GAAI,CAAC,KAAK,cAAc,GAEpB,MAAM,IAAI,aAAa,4GAA4G,EACvI,GAAIA,EAAS,aAAeA,EAAS,WACjC,MAAM,IAAI,aAAa,8FACDA,EAAS,YAAY,SAASA,EAAS,YAAY,2CACrC,EAExC,OADgB,IAAI,gBAAgB,KAAM,KAAK,aAAa,EAC7C,OAAOjZ,CAAK,CACnC,CAQI,MAAM,aAAaouB,EAAOC,EAAS,CAC/B,MAAM,KAAK,OAAOA,CAAO,EACzB,MAAM,KAAK,IAAID,CAAK,CAC5B,CAeI,MAAM,SAAU,CACZ,OAAO,KAAK,WAAW,KAAME,GAAYA,EAAQ,CAAC,CAAC,CAC3D,CAKI,MAAM,UAAW,CACb,IAAId,EAAK,KAAK,cAAc,GAC5B,GAAI,CAAC,YAAY,SAASA,CAAE,EAAG,CAC3B,MAAMnrB,EAAW,KAAK,cAAc,UAAU,SAC9C,GAAIA,EAAS,uBACT,MAAM,IAAI,aAAa,8GAA8G,EACzImrB,EAAKnrB,EAAS,eAAe,CAAC,EAAE,eAAemrB,CAAE,CAC7D,CACQ,OAAO,KAAK,WAAW,eAAe,KAAK,KAAK,cAAc,iBAAkBA,EAAI,KAAK,WAAW,CAC5G,CACA,CCpJO,MAAM,QAAS,CAOlB,OAAO,MAAMjjB,EAAOlB,EAAM,CACtB,OAAO,MAAM,KAAK,MAAM,KAAK,KAAKkB,EAAM,OAASlB,CAAI,CAAC,EAAG,CAACK,GAAG/F,KAClD4G,EAAM,MAAM5G,GAAI0F,EAAM1F,GAAI0F,EAAOA,CAAI,CAC/C,CACT,CACI,OAAO,uBAAuBklB,EAAmB,CAC7C,MAAO,CACHA,EAAkB,OAAQC,GAAQ,OAAOA,GAAQ,QAAQ,EACzDD,EAAkB,OAAQpd,GAAQ,OAAOA,GAAQ,QAAQ,CAC5D,CACT,CACI,OAAO,QAAQ5G,EAAOkkB,EAAkB,CACpC,OAAOlkB,EAAM,OAAO,CAACmkB,GAAc1uB,KAAU,CACzC,MAAMD,GAAM0uB,EAAiBzuB,EAAK,EAClC,IAAI2uB,GAAUD,GAAa,KAAM/qB,IAAMA,GAAE,KAAO5D,EAAG,EACnD,OAAK4uB,KACDA,GAAU,CAAE,GAAI5uB,GAAK,MAAO,CAAA,CAAI,EAChC2uB,GAAa,KAAKC,EAAO,GAE7BA,GAAQ,MAAM,KAAK3uB,EAAK,EACjB0uB,EACV,EAAE,EAAE,CACb,CACI,OAAO,KAAKnkB,EAAOqkB,EAAoB,CACnC,OAAOrkB,EAAM,OAAO,CAACskB,GAAa3jB,KAAS,CACvC,IAAIgH,GAAQ,GACZ,GAAI,OAAO0c,GAAuB,WAAY,CAC1C,MAAME,GAAYF,EAAmB1jB,EAAI,EACzCgH,GAAQ,CAAC,CAAC2c,GAAY,KAAME,IAAeH,EAAmBG,EAAU,IAAMD,EAAS,CACvG,MACqB,OAAOF,GAAuB,SACnC1c,GAAQ,CAAC,CAAC2c,GAAY,KAAME,IAAeA,GAAWH,CAAkB,IACpE1jB,GAAK0jB,CAAkB,CAAC,EAG5B1c,GAAQ2c,GAAY,QAAQ3jB,EAAI,IAAM,GAE1C,OAAKgH,IACD2c,GAAY,KAAK3jB,EAAI,EAClB2jB,EACV,EAAE,EAAE,CACb,CAEI,OAAO,cAAc3jB,EAAM,CACvB,OAAIA,GAAS,KACF,GAEJ,CAACA,EAAK,aAAeA,EAAK,cAAgB,MACzD,CACI,OAAO,cAAcrL,EAAQE,EAAKC,GAAOgvB,GAAM,CAE3C,GAAIA,GAAK,IAAIhvB,EAAK,EAAG,CACjBH,EAAOE,CAAG,EAAIivB,GAAK,IAAIhvB,EAAK,EAC5B,MACZ,CACQ,GAAI,EAAAA,cAAiB,SAOrB,IAAI,CAAC,KAAK,cAAcA,EAAK,GAAK,CAAC,MAAM,QAAQA,EAAK,EAAG,CACrDH,EAAOE,CAAG,EAAIC,GACd,MACZ,CACaH,EAAOE,CAAG,IACXF,EAAOE,CAAG,EAAI,MAAM,QAAQC,EAAK,EAAI,CAAA,EAAK,CAAE,GAEhDgvB,GAAK,IAAIhvB,GAAOH,EAAOE,CAAG,CAAC,EAC3B,KAAK,MAAMF,EAAOE,CAAG,EAAGC,GAAOgvB,EAAI,EACnCA,GAAK,OAAOhvB,EAAK,EACzB,CACI,OAAO,eAAeH,EAAQE,EAAKC,GAAOgvB,GAAM,CAE5C,GAAIA,GAAK,IAAIhvB,EAAK,EAAG,CACjB,OAAO,OAAOH,EAAQ,CAAE,CAACE,CAAG,EAAGivB,GAAK,IAAIhvB,EAAK,EAAG,EAChD,MACZ,CACQ,GAAI,EAAAA,cAAiB,SAOrB,IAAI,CAAC,KAAK,cAAcA,EAAK,GAAK,CAAC,MAAM,QAAQA,EAAK,EAAG,CACrD,OAAO,OAAOH,EAAQ,CAAE,CAACE,CAAG,EAAGC,EAAK,CAAE,EACtC,MACZ,CACaH,EAAOE,CAAG,GACX,OAAO,OAAOF,EAAQ,CAAE,CAACE,CAAG,EAAG,MAAM,QAAQC,EAAK,EAAI,CAAE,EAAG,CAAE,CAAA,CAAE,EAEnEgvB,GAAK,IAAIhvB,GAAOH,EAAOE,CAAG,CAAC,EAC3B,KAAK,MAAMF,EAAOE,CAAG,EAAGC,GAAOgvB,EAAI,EACnCA,GAAK,OAAOhvB,EAAK,EACzB,CACI,OAAO,MAAMH,EAAQ2X,EAAQwX,GAAO,IAAI,IAAO,CAC3C,GAAI,KAAK,cAAcnvB,CAAM,GAAK,KAAK,cAAc2X,CAAM,EACvD,UAAWzX,MAAO,OAAO,KAAKyX,CAAM,EAC5BzX,KAAQ,aAEZ,KAAK,eAAeF,EAAQE,GAAKyX,EAAOzX,EAAG,EAAGivB,EAAI,EAG1D,GAAI,MAAM,QAAQnvB,CAAM,GAAK,MAAM,QAAQ2X,CAAM,EAC7C,QAASzX,GAAM,EAAGA,GAAMyX,EAAO,OAAQzX,KACnC,KAAK,cAAcF,EAAQE,GAAKyX,EAAOzX,EAAG,EAAGivB,EAAI,CAGjE,CAII,OAAO,UAAUnvB,KAAW0X,EAAS,CACjC,GAAI,CAACA,EAAQ,OACT,OAAO1X,EAEX,UAAW2X,MAAUD,EACjB,SAAS,MAAM1X,EAAQ2X,EAAM,EAEjC,OAAO3X,CACf,CAMI,OAAO,eAAeovB,EAAM,CACxB,IAAItrB,EAAG6c,GAAG0O,GAAWC,GACrB,GAAI,UAAU,OAAS,EACnB,MAAO,GAGX,IAAKxrB,EAAI,EAAG6c,GAAI,UAAU,OAAQ7c,EAAI6c,GAAG7c,IAGrC,GAFAurB,GAAY,CAAA,EACZC,GAAa,CAAE,EACX,CAAC,KAAK,gBAAgBD,GAAWC,GAAY,UAAU,CAAC,EAAG,UAAUxrB,CAAC,CAAC,EACvE,MAAO,GAGf,MAAO,EACf,CAII,OAAO,UAAUwC,EAAK6Q,EAAM,CACxB,MAAMoY,GAAWpY,EAAK,MAAM,GAAG,EAC/B,QAASrT,GAAI,EAAGuI,GAAMkjB,GAAS,OAAQzrB,GAAIuI,GAAKvI,KAC5CwC,EAAMA,EAAIipB,GAASzrB,EAAC,CAAC,EAEzB,OAAOwC,CACf,CACI,OAAO,gCAAgCA,EAAK,CACxC,QAASpG,KAAOoG,EACRA,EAAIpG,CAAG,GAAK,OAAOoG,EAAIpG,CAAG,GAAM,WAC5B,OAAO,KAAKoG,EAAIpG,CAAG,CAAC,EAAE,SAAW,EACjCoG,EAAIpG,CAAG,EAAI,GAGX,KAAK,gCAAgCoG,EAAIpG,CAAG,CAAC,EAIjE,CACI,OAAO,4BAA4B4pB,EAAO,CACtC,IAAIxjB,EAAM,CAAE,EACZ,QAAS6Q,MAAQ2S,EAAO,CACpB,MAAM0F,GAAQrY,GAAK,MAAM,GAAG,EAC5B,GAAI,CAACqY,GAAM,OACP,UACA,CAAClpB,EAAIkpB,GAAM,CAAC,CAAC,GAAKlpB,EAAIkpB,GAAM,CAAC,CAAC,IAAM,MACpClpB,EAAIkpB,GAAM,CAAC,CAAC,EAAI,CAAE,GAEtB,IAAIC,GAAiBnpB,EAAIkpB,GAAM,CAAC,CAAC,EACjC,OAAS,CAACtvB,GAAK0X,EAAI,IAAK4X,GAAM,QAAO,EAC7BtvB,KAAQ,IAERuvB,GAAe7X,EAAI,EACnB6X,GAAiBA,GAAe7X,EAAI,EAE/B1X,KAAQsvB,GAAM,OAAS,GAC5BC,GAAe7X,EAAI,EAAI,CAAE,EACzB6X,GAAiB,OAGjBA,GAAe7X,EAAI,EAAI,CAAE,EACzB6X,GAAiBA,GAAe7X,EAAI,GAGxD,CACQ,YAAK,gCAAgCtR,CAAG,EACjCA,CACf,CAII,OAAO,WAAWopB,EAASC,EAAU,CACjC,OACID,GAAY,MACZC,IAAa,QACbA,IAAa,KACN,IAEL,OAAOD,EAAQ,IAAO,UACxB,OAAOC,EAAS,IAAO,UACtB,OAAOD,EAAQ,IAAO,UACnB,OAAOC,EAAS,IAAO,WAC3B,OAAO,KAAKD,CAAO,EAAE,SAAW,GAChC,OAAO,KAAKC,CAAQ,EAAE,SAAW,EAC1BD,EAAQ,KAAOC,EAAS,GAE5B,SAAS,YAAYD,EAASC,CAAQ,CACrD,CAII,OAAO,UAAUxvB,EAAO,CACpB,OAAI,OAAOA,GAAU,UACVA,EACP,OAAOA,GAAU,SACVA,IAAU,QAAUA,IAAU,IACrC,OAAOA,GAAU,SACVA,EAAQ,EACZ,EACf,CAII,OAAO,UAAUwE,EAAMwE,EAAQ,CAC3B,OAAOxE,EAAK,OAAO,CAACsG,GAAQiN,GAAQ7O,MAChC4B,GAAOiN,EAAM,EAAI/O,EAAOE,EAAK,EACtB4B,IACR,EAAE,CACb,CAII,OAAO,cAAc2kB,EAAMC,EAAM,CAC7B,OAAID,EAAK,SAAWC,EAAK,OACd,GACJD,EAAK,MAAOE,IACRD,EAAK,QAAQC,EAAO,IAAM,EACpC,CACT,CACI,OAAO,wBAAwBC,EAAO,CAKlC,MAAO,CAJmBA,EAAM,KAAMxf,IAAS,CAC3C,MAAMyf,GAAaD,EAAM,OAAQE,IAAcA,KAAc1f,EAAI,EACjE,OAAOA,GAAK,KAAMlF,IAAS2kB,GAAW,KAAMC,IAAcA,GAAU,SAAS5kB,EAAI,CAAC,CAAC,CAC/F,CAAS,CAET,CAMI,OAAO,wBAAwB+L,EAAKoR,EAAY,CAC5C,MAAM0H,GAAY9Y,EAAI,MAAM,IAAI,OAAO,IAAIoR,CAAU,8BAA8BA,CAAU,aAAa,CAAC,EAC3G,GAAI0H,IAAaA,GAAU,MAAO,CAI9B,MAAMC,GAHa/Y,EAAI,UAAU8Y,GAAU,MAAQA,GAAU,CAAC,EAAE,MAAM,EAQtE,IAAIE,GAAgB,GAChB1nB,GAAY,GAChB,MAAM2nB,GAAa,CAAE,EACrB,QAASC,GAAM,EAAGA,GAAMH,GAAM,OAAQG,KAAO,CACzC,MAAMC,GAAOJ,GAAMG,EAAG,EACtB,OAAQC,GAAI,CACR,IAAK,IACGH,IAAiB,IACjBC,GAAW,KAAK3nB,EAAS,EACzBA,GAAY,IAGZA,IAAa6nB,GAEjB,MACJ,IAAK,IACGH,IAAiBG,GACOJ,GAAMG,GAAM,CAAC,IAAMC,IAIvC7nB,IAAa6nB,GACbD,IAAO,GAGPF,GAAgB,GAIpBA,GAAgBG,GAEpB,MACJ,IAAK,IACD,GAAIH,IAAiB,GACjB,OAAAC,GAAW,KAAK3nB,EAAS,EAClB2nB,GAGP3nB,IAAa6nB,GAEjB,MACJ,QACQH,IAAiB,KACjB1nB,IAAa6nB,GAEzC,CACA,CACA,CAEA,CAII,OAAO,gBAAgBlB,EAAWC,EAAYpqB,GAAGgB,GAAG,CAChD,IAAI+hB,GAQJ,GALI,OAAO,MAAM/iB,EAAC,GAAK,OAAO,MAAMgB,EAAC,GAKjChB,KAAMgB,GACN,MAAO,GAGX,GAAIhB,KAAM,MAAQgB,KAAM,MAAQhB,KAAM,QAAagB,KAAM,OACrD,MAAO,GAGX,IAAK,OAAOhB,GAAE,QAAW,YACrB,OAAOA,GAAE,QAAW,aACpBA,GAAE,OAAOgB,EAAC,EACV,MAAO,GAIX,GAAK,OAAOhB,IAAM,YAAc,OAAOgB,IAAM,YACxChB,cAAa,MAAQgB,cAAa,MAClChB,cAAa,QAAUgB,cAAa,QACpC,OAAOhB,IAAM,UAAY,OAAOgB,IAAM,UACtC,OAAOhB,IAAM,UAAY,OAAOgB,IAAM,SACvC,OAAOhB,GAAE,aAAegB,GAAE,SAAU,EAYxC,GAVI,EAAE,OAAOhB,IAAM,UAAY,OAAOgB,IAAM,WAExC,OAAO,UAAU,cAAc,KAAKhB,GAAGgB,EAAC,GACxC,OAAO,UAAU,cAAc,KAAKA,GAAGhB,EAAC,GAExCA,GAAE,cAAgBgB,GAAE,aAEpBhB,GAAE,YAAcgB,GAAE,WAGlBmpB,EAAU,QAAQnqB,EAAC,EAAI,IAAMoqB,EAAW,QAAQppB,EAAC,EAAI,GACrD,MAAO,GAGX,IAAK+hB,MAAK/hB,GAAG,CACT,GAAIA,GAAE,eAAe+hB,EAAC,IAAM/iB,GAAE,eAAe+iB,EAAC,EAC1C,MAAO,GAEN,GAAI,OAAO/hB,GAAE+hB,EAAC,GAAM,OAAO/iB,GAAE+iB,EAAC,EAC/B,MAAO,EAEvB,CACQ,IAAKA,MAAK/iB,GAAG,CACT,GAAIgB,GAAE,eAAe+hB,EAAC,IAAM/iB,GAAE,eAAe+iB,EAAC,EAC1C,MAAO,GAEN,GAAI,OAAO/hB,GAAE+hB,EAAC,GAAM,OAAO/iB,GAAE+iB,EAAC,EAC/B,MAAO,GAEX,OAAQ,OAAO/iB,GAAE+iB,EAAC,EAAC,CACf,IAAK,SACL,IAAK,WAGD,GAFAoH,EAAU,KAAKnqB,EAAC,EAChBoqB,EAAW,KAAKppB,EAAC,EACb,CAAC,KAAK,gBAAgBmpB,EAAWC,EAAYpqB,GAAE+iB,EAAC,EAAG/hB,GAAE+hB,EAAC,CAAC,EACvD,MAAO,GAEXoH,EAAU,IAAK,EACfC,EAAW,IAAK,EAChB,MACJ,QACI,GAAIpqB,GAAE+iB,EAAC,IAAM/hB,GAAE+hB,EAAC,EACZ,MAAO,GAEX,KACpB,CACA,CACQ,MAAO,EACf,CACA,CCjZO,MAAM,gCAAiC,CAI1C,YAAYpD,EAAezM,EAAQoY,GAAsBC,GAAyBnK,GAAa,CAC3F,KAAK,cAAgBzB,EACrB,KAAK,OAASzM,EACd,KAAK,qBAAuBoY,GAC5B,KAAK,wBAA0BC,GAC/B,KAAK,YAAcnK,EAC3B,CAQI,UAAUoK,EAAY5W,EAAO,CACzB,MAAM6W,GAAQ,KAAK,MAAMD,EAAY5W,CAAK,EACpCoR,GAAW,CAAE,EACnB,OAAAyF,GAAM,QAASlC,IAAY,CACvB,MAAM3jB,GAAS,KAAK,yBAAyB2jB,GAAS3U,CAAK,EACvDhP,KAAW,QACX,CAAC,OAAO,OAAOA,EAAM,EAAE,MAAO3K,IAAUA,KAAU,IAAI,GACtD+qB,GAAS,KAAKpgB,EAAM,CACpC,CAAS,EACMogB,EACf,CAOI,MAAMwF,EAAY5W,EAAO,CACrB,MAAM/Y,GAAM,IAAI,IACV4D,GAAO,CAAE,EACf,OAAImV,EAAM,SAAS,YAAc,OAC7BnV,GAAK,KAAK,GAAGmV,EAAM,SAAS,QAAQ,IAAK5B,IAAW,YAAY,WAAW,KAAK,OAAQ,OAAW4B,EAAM,KAAM5B,GAAO,YAAY,CAAC,CAAC,EAGpIvT,GAAK,KAAK,GAAGmV,EAAM,SAAS,eAAe,IAAK5B,IAAW,YAAY,WAAW,KAAK,OAAQ,OAAW4B,EAAM,KAAM5B,GAAO,YAAY,CAAC,CAAC,EAE/IwY,EAAW,QAASE,IAAc,CAC9B,MAAM5Y,GAAKrT,GACN,IAAKzE,IAAQ,CACd,MAAM2wB,GAAWD,GAAU1wB,EAAG,EAC9B,OAAI,OAAO,SAAS2wB,EAAQ,EACjBA,GAAS,SAAS,KAAK,EAE9B,YAAY,SAASA,EAAQ,EACtB,KAAK,UAAUA,EAAQ,EAE3BA,EACV,CAAA,EACI,KAAK,GAAG,EACPC,GAAQ/vB,GAAI,IAAIiX,EAAE,EACnB8Y,GAIDA,GAAM,KAAKF,EAAS,EAHpB7vB,GAAI,IAAIiX,GAAI,CAAC4Y,EAAS,CAAC,CAKvC,CAAS,EACM7vB,EACf,CAII,yBAAyB2vB,EAAY5W,EAAO,CAExC,IAAItX,GAAWsX,EAAM,SACrB,GAAItX,GAAS,oBAAqB,CAC9B,MAAMuuB,GAAsBL,EAAW,IAAKhrB,IAAWA,GAAO,YAAY,WAAW,KAAK,OAAQ,OAAWoU,EAAM,KAAMA,EAAM,SAAS,oBAAoB,YAAY,CAAC,CAAC,EACpKkX,GAAwBxuB,GAAS,qBAAqB,KAAMyuB,IACtD,OAAOF,GAAoB,KAAM5wB,IAAUA,KAC/C8wB,GAAoB,kBAAkB,EAAM,GACnD,EACGD,KACAxuB,GAAWwuB,GAC3B,CACQ,IAAIlmB,GAAStI,GAAS,OAAO,KAAK,YAAa,CAC3C,iBAAkB,GAClB,KAAM,KAAK,cAAc,QAAQ,QAAQ,aAAa,IAAM,EACxE,CAAS,EAED,MAAM0uB,GAAa,KAAK,iBAAiBR,EAAY5W,EAAOhP,GAAQtI,EAAQ,EACtE2uB,GAAe,KAAK,eAAeT,EAAY5lB,GAAQgP,EAAOtX,EAAQ,EACtE4uB,GAAiB,KAAK,qBAAqBV,EAAY5W,EAAOhP,GAAQtI,EAAQ,EAC9E6uB,GAAoB,KAAK,wBAAwBX,EAAY5W,EAAOhP,EAAM,EAShF,GANIomB,IAKiC1uB,GAAS,eAAe,OAAQ0V,IAAWA,GAAO,YAAc,EAAK,EAAE,SAAW,IAElHiZ,IAAgBC,IAAkBC,IACnC,OAAOvmB,EAEnB,CAEI,iBAAiB4lB,EAAY5W,EAAOhP,GAAQtI,GAAU,CAClD,IAAI8uB,GAAU,GACd,OAAA9uB,GAAS,QAAQ,QAAS0V,IAAW,CAEjC,GAAI1V,GAAS,qBAAqB,OAAS,GACvCA,GAAS,qBAAqB,UAAWykB,IAAkBA,GAAc,SAAW/O,GAAO,MAAM,IAAM,GACvG,OACJ,MAAM/X,GAAQuwB,EAAW,CAAC,EAAE,YAAY,WAAW,KAAK,OAAQ,OAAW5W,EAAM,KAAM5B,GAAO,YAAY,CAAC,EACvG/X,KAAU,QAAa+X,GAAO,WAI7B,KAAK,cAAc,QAAQ,KAAMqM,IAAWA,GAAO,YAAczK,EAAM,MACxEyK,GAAO,YACHzK,EAAM,KAAO,IAAM5B,GAAO,YAAY,IAE9CA,GAAO,eAAepN,GAAQ,KAAK,OAAO,qBAAqB3K,GAAO+X,EAAM,CAAC,EACzE/X,KAAU,OAEVmxB,GAAU,IAC1B,CAAS,EACMA,EACf,CAII,eAAeZ,EAAY5lB,EAAQgP,GAAOtX,GAAU,CAChD,IAAI8uB,GAAU,GAId,YAAK,cAAc,eAAe,QAASnM,IAAS,CAUhD,GAPI,CAACA,GAAK,UAGN,CAACA,GAAK,YAINA,GAAK,UACL,CAAC3iB,GAAS,UAAU,KAAM4W,IAAaA,KAAa+L,GAAK,QAAQ,EACjE,OAEJ,GAAIA,GAAK,eACL,GAAIA,GAAK,2BAA6BrL,GAAM,KACxC,eAGA,CAACqL,GAAK,UACNA,GAAK,cAAgBrL,GAAM,MAC3BqL,GAAK,uBAAyBA,GAAK,SAAS,aAC5C,OAGR,IAAIzf,GAAS,KAAK,UAAUgrB,EAAYvL,GAAK,KAAK,EAClDzf,GAAUyf,GAAK,OAAqBzf,GAAZA,GAAO,CAAC,EAChCA,GAAS,CAACyf,GAAK,QAAUzf,KAAW,OAAY,KAAOA,GACnDA,KAAW,SAIXyf,GAAK,0BACLra,EAAOqa,GAAK,yBAAyB,EAAIzf,GAIzCyf,GAAK,SAAS,eAAera,EAAQpF,EAAM,EAE/C4rB,GAAU,GACtB,CAAS,EACMA,EACf,CACI,qBAAqBC,EAAezX,EAAOhP,GAAQtI,GAAU,CACzD,IAAI8uB,GAAU,GACd,YAAK,qBAAqB,QAAQ,CAACE,GAAqBnoB,KAAU,CAC9D,GAAImoB,GAAoB,oBAAoB,cACxC1X,EAAM,KACN,OACJ,MAAMV,GAAWoY,GAAoB,oBAAoB,SACnDC,GAAW,KAAK,8BAA8BrY,GAAUoY,GAAoB,oBAAoB,YAAaD,CAAa,EAChI,GAA8BE,IAAa,KACvC,OAGJ,KAAK,mCAAoC,EAEzC,MAAM1V,GAAO,KAAK,cAAc3C,GAAUqY,EAAQ,EAC5CC,GAAS,KAAK,eAAeroB,EAAK,EAAE0S,EAAI,GAAK,CAAE,EAE/C4V,GAAaH,GAAoB,oBAAoB,0BAA0B,MAAM,GAAG,EACxFI,GAAgB,CAACD,GAAY5wB,GAAKZ,KAAU,CAC9C,MAAM0xB,GAAWF,GAAW,MAAO,EACnC,GAAIE,IAAYF,GAAW,SAAW,EAClC,OAAA5wB,GAAI8wB,EAAQ,EAAI1xB,GACTY,GAEX,GAAI8wB,IAAYF,GAAW,OAAS,EAChCC,GAAcD,GAAY5wB,GAAI8wB,EAAQ,EAAG1xB,EAAK,MAG9C,QAAOY,EAEd,EACGqY,GAAS,YAAcA,GAAS,YAC5BsY,GAAO,CAAC,IAAM,SACdE,GAAcD,GAAY7mB,GAAQ4mB,GAAO,CAAC,CAAC,EAC3CJ,GAAU,KAIdM,GAAcD,GAAY7mB,GAAQ4mB,EAAM,EACxCJ,GAAUA,IAAWI,GAAO,OAAS,EAErD,CAAS,EACMJ,EACf,CACI,wBAAwBC,EAAezX,EAAOhP,GAAQ,CAClD,IAAIwmB,GAAU,GACd,YAAK,wBACA,OAAQQ,IAA2BA,GAAuB,uBAC1D,cAAgBhY,EAAM,IAAI,EAC1B,QAASgY,IAA2B,CACrC,MAAM1Y,GAAW0Y,GAAuB,uBAAuB,SAC/D,IAAIC,GACA3Y,GAAS,YACT2Y,GACI3Y,GAAS,gBAAgB,YAAY,CAAC,EACjC,iBAAiB,aAG1B2Y,GAAsB3Y,GAAS,SACzBA,GAAS,YAAY,CAAC,EAAE,iBAAiB,aACzCA,GAAS,gBAAgB,YAAY,CAAC,EACnC,iBAAiB,aAE9B,MAAM4Y,GAAuBT,EAAc,CAAC,EAAE,YAAY,WAAW,KAAK,OAAQ,OAAWzX,EAAM,KAAMiY,EAAmB,CAAC,EAEzHC,IAAyB,OACzBlnB,GAAOgnB,GAAuB,uBAAuB,yBAAyB,EAAI,EAClFA,GAAuB,QAClB,OAAQpsB,IAAWA,GAAO,WAAgBssB,EAAoB,EAC9D,QAAStsB,IAAW,CACrBoF,GAAOgnB,GAAuB,uBAAuB,yBAAyB,EAAI,SAASpsB,GAAO,GAAM,EACxG4rB,GAAU,EAC9B,CAAiB,EAEjB,CAAS,EACMA,EACf,CACI,8BAA8BlY,EAAUuL,EAAa4M,GAAe,CAChE,IAAIjJ,GACJ,OAAIlP,EAAS,aAAeA,EAAS,gBACjCkP,GAAUlP,EAAS,eAAe,eAAe,IAAKxN,IAAeA,EAAU,EAE1EwN,EAAS,aAAeA,EAAS,mBACtCkP,GAAUlP,EAAS,gBAAgB,YAAY,IAAKxN,IAAeA,EAAU,EAGzEwN,EAAS,SACTkP,GAAUlP,EAAS,YAAY,IAAKxN,IAAeA,EAAU,EAG7D0c,GAAUlP,EAAS,gBAAgB,mBAAmB,IAAKxN,IAAeA,EAAU,EAGrF0c,GAAQ,OAAO,CAACmJ,GAAUvZ,MAC7BqZ,GAAc,QAASU,IAAiB,CAChC7Y,EAAS,aAAeA,EAAS,gBACjCqY,GAASvZ,GAAO,YAAY,EACxB,KAAK,OAAO,qBAAqB+Z,GAAa,YAAY,WAAW,KAAK,OAAQ,OAAWtN,EAAazM,GAAO,YAAY,CAAC,EAAGA,EAAM,EAG3IuZ,GAASvZ,GAAO,YAAY,EACxB,KAAK,OAAO,qBAAqB+Z,GAAa,YAAY,WAAW,KAAK,OAAQ,OAAWtN,EAAazM,GAAO,iBAAiB,YAAY,CAAC,EAAGA,GAAO,gBAAgB,CAEjM,CAAa,EACMuZ,IACR,EAAE,CACb,CACI,wBAAwBrY,EAAU8Y,EAAqB,CACnD,IAAI5J,GACJ,OAAIlP,EAAS,aAAeA,EAAS,gBACjCkP,GAAUlP,EAAS,eAAe,eAAe,IAAKxN,IAAeA,EAAU,EAE1EwN,EAAS,aAAeA,EAAS,mBACtCkP,GAAUlP,EAAS,gBAAgB,YAAY,IAAKxN,IAAeA,EAAU,EAGzEwN,EAAS,SACTkP,GAAUlP,EAAS,YAAY,IAAKxN,IAAeA,EAAU,EAG7D0c,GAAUlP,EAAS,gBAAgB,mBAAmB,IAAKxN,IAAeA,EAAU,EAGrF0c,GAAQ,OAAO,CAAC3d,GAAMuN,MACzBvN,GAAKuN,GAAO,YAAY,EAAIga,EAAoBha,GAAO,YAAY,EAC5DvN,IACR,EAAE,CACb,CASI,oCAAqC,CAE7B,KAAK,iBAIT,KAAK,eAAiB,KAAK,qBAAqB,IAAK6mB,GAAwB,CACzE,MAAMpY,EAAWoY,EAAoB,oBAAoB,SAEzD,IAAIlJ,GACJ,OAAIlP,EAAS,aAAeA,EAAS,gBACjCkP,GAAUlP,EAAS,YAEdA,EAAS,aACdA,EAAS,mBACTkP,GAAUlP,EAAS,sBAAsB,eAIrCA,EAAS,SACTkP,GAAUlP,EAAS,mBAGnBkP,GAAUlP,EAAS,gBAAgB,YAIpCoY,EAAoB,QAAQ,OAAO,CAACW,GAAKzsB,KAAW,CACvD,IAAI0sB,GAAQ9J,GAAQ,OAAO,CAAC8J,GAAOla,KAAW,CAC1C,IAAI/X,GAAQuF,GAAOwS,GAAO,YAAY,EACtC,OAAIkB,EAAS,aACTA,EAAS,oBACLlB,GAAO,WACPA,GAAO,kBACPA,GAAO,iBAAiB,eACpBA,GAAO,eAEX/X,GACI+X,GAAO,iBAAiB,eAAe/X,EAAK,GAE7C,SAAS,UAAUiyB,GAAOla,GAAO,eAAe/X,EAAK,CAAC,IAE7D,CAAC+X,GAAO,WACRA,GAAO,iBAAiB,mBAExB/X,GACI+X,GAAO,iBAAiB,iBAAiB,eAAe/X,EAAK,GAE9D,SAAS,UAAUiyB,GAAOla,GAAO,iBAAiB,eAAe/X,EAAK,CAAC,EACjF,EAAE,EAAE,EAaL,GAZImoB,GAAQ,SAAW,GACnB,CAACkJ,EAAoB,oBAAoB,kBACrCpY,EAAS,aACTA,EAAS,mBACTgZ,GAAQ9J,GAAQ,CAAC,EAAE,eAAe8J,EAAK,EAGvCA,GACI9J,GAAQ,CAAC,EAAE,iBAAiB,eAAe8J,EAAK,GAIxDA,KAAU,OAAW,CACrB,MAAMrW,GAAO,KAAK,cAAc3C,EAAU1T,EAAM,EAC5CysB,GAAIpW,EAAI,EACRoW,GAAIpW,EAAI,EAAE,KAAKqW,EAAK,EAGpBD,GAAIpW,EAAI,EAAI,CAACqW,EAAK,CAE1C,CACgB,OAAOD,EACV,EAAE,EAAE,CACjB,CAAS,EACT,CAMI,cAAc/Y,EAAUzO,EAAM,CAC1B,MAAM0nB,GAAmB,KAAK,wBAAwBjZ,EAAUzO,CAAI,EACpE,OAAO,KAAK,UAAU0nB,EAAgB,CAC9C,CACA,CCnZO,IAAA,mBAAA,KAAuB,CAI1B,YAAYjO,EAAYkC,EAAagM,GAAsB,CACvD,KAAK,WAAalO,EAClB,KAAK,YAAckC,EACnB,KAAK,qBAAuBgM,EACpC,CAII,MAAM,KAAKC,EAAa,CACpB,MAAMC,EAAW,KAAK,qBAAqB,IAAI,MAAOC,IAAmB,CACrE,GAAIA,GAAe,SAAS,aACxBA,GAAe,SAAS,gBAAiB,CAIzC,GAAIA,GAAe,oBACf,MAAM,IAAI,aAAa,kFAAkF,EAC7G,MAAMC,GAAa,CAAE,EACfjE,GAAU8D,EACX,IAAKI,IAAc,CACpB,MAAMjtB,GAAS,CAAE,EACXktB,GAAiB,CAAE,EACzBH,GAAe,SAAS,YAAY,QAAS7mB,IAAe,CACxDlG,GAAOkG,GAAW,YAAY,EAC1B,KAAK,WAAW,OAAO,qBAAqB+mB,GAAU,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWF,GAAe,YAAa7mB,GAAW,YAAY,CAAC,EAAGA,GAAW,gBAAgB,EACtM,MAAMinB,GAAgB,GAAGjnB,GAAW,YAAY,IAAIlG,GAAOkG,GAAW,YAAY,CAAC,GAC/EgnB,GAAe,QAAQC,EAAa,IAAM,IAC1CD,GAAe,KAAKC,EAAa,CAE7D,CAAqB,EACDJ,GAAe,SAAS,eAAe,eAAe,QAASnJ,IAAkB,CAC7E5jB,GAAO4jB,GAAc,YAAY,EAC7B,KAAK,WAAW,OAAO,qBAAqBqJ,GAAU,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWF,GAAe,YAAanJ,GAAc,YAAY,CAAC,EAAGA,EAAa,EAC3L,MAAMuJ,GAAgB,GAAGvJ,GAAc,YAAY,IAAI5jB,GAAO4jB,GAAc,YAAY,CAAC,GACrFsJ,GAAe,QAAQC,EAAa,IAAM,IAC1CD,GAAe,KAAKC,EAAa,CAE7D,CAAqB,EACDD,GAAe,KAAM,EACrB,MAAME,GAAYF,GAAe,KAAK,IAAI,EAC1C,OAAIF,GAAWI,EAAS,EACb,MAEXJ,GAAWI,EAAS,EAAI,GACjBptB,GACV,CAAA,EACI,OAAQ4c,IAAMA,EAAC,EACpB,MAAO,CACH,oBAAqBmQ,GACrB,QAAShE,EACZ,CACjB,SACqBgE,GAAe,SAAS,aAC7BA,GAAe,SAAS,mBAAoB,CAI5C,MAAMrZ,GAAWqZ,GAAe,SAC1BzI,GAAc5Q,GAAS,SACvBA,GAAS,YACTA,GAAS,gBAAgB,YACzBjP,GAAQiP,GAAS,sBAAsB,OACvC0R,GAAY1R,GAAS,sBAAsB,UAC3C2Z,GAAaN,GAAe,OAAS3H,GACrC4H,GAAa,CAAE,EACflZ,GAAa,CAAE,EACf4O,GAAYmK,EACb,IAAI,CAACI,GAAWtpB,KAAU,CAC3B,MAAMupB,GAAiB,CAAE,EACnBI,GAAiB,CAAE,EACnBC,GAAYjJ,GACb,IAAKpe,IAAe,CACrB,MAAMob,GAAgBpb,GAAW,aAAevC,GAC1CghB,GAAiBsI,GAAU,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWF,GAAe,YAAa7mB,GAAW,iBAC7H,YAAY,CAAC,EACZinB,GAAgB,GAAGE,EAAU,IAAInnB,GAAW,YAAY,IAAIye,EAAc,GAChF,OAAIuI,GAAe,QAAQC,EAAa,IAAM,GACnC,IAEXD,GAAe,KAAKC,EAAa,EACjCG,GAAehM,EAAa,EACxBqD,GACI0I,GACJ,IACAnnB,GAAW,aACX,OACAob,GACP,CAAA,EACI,OAAQ1E,IAAMA,EAAC,EACf,KAAK,OAAO,EACjBsQ,GAAe,KAAM,EACrB,MAAME,GAAYF,GAAe,KAAK,IAAI,EAC1C,OAAIF,GAAWI,EAAS,EACb,IAEXJ,GAAWI,EAAS,EAAI,GACxB,OAAO,OAAOtZ,GAAYwZ,EAAc,EACjCC,GACV,CAAA,EACI,OAAQ3Q,IAAMA,EAAC,EACf,IAAK8F,IAAc,IAAMA,GAAY,GAAG,EACxC,KAAK,MAAM,EAGhB,GAAI,CAACA,GACD,MAAO,CACH,oBAAqBqK,GACrB,QAAS,CAAE,CACd,EAGL,MAAMlJ,GAAK,KAAK,WAAW,mBAAmB,KAAK,WAAW,EAC9C,SAAS,KAAK,CAC1B,GAAGS,GACH,GAAG5Q,GAAS,gBAAgB,eACvB,cACzB,EAAoBlB,IAAWA,GAAO,YAAY,EAC1B,QAAStM,IAAe,CAC5B2d,GAAG,UAAUwJ,GAAa,IAAMnnB,GAAW,aAAcA,GAAW,YAAY,CACpG,CAAiB,EACD2d,GAAG,KAAKpf,GAAO4oB,EAAU,EACpB,MAAM,IAAM3K,GAAY,GAAG,EAC3B,cAAc5O,EAAU,EAEzBiZ,GAAe,qBACfA,GAAe,oBAAoBlJ,EAAE,EACzC,MAAMkF,GAAU,MAAMlF,GAAG,WAAY,EACrC,OAAAkF,GAAQ,QAAS/oB,IAAW,CACxBskB,GAAY,QAAS9R,IAAW,CAC5BxS,GAAOwS,GAAO,YAAY,EACtB,KAAK,WAAW,OAAO,qBAAqBxS,GAAOwS,GAAO,YAAY,EAAGA,GAAO,gBAAgB,CAC5H,CAAqB,EACDkB,GAAS,gBAAgB,eAAe,eAAe,QAASlB,IAAW,CACvExS,GAAOwS,GAAO,YAAY,EACtB,KAAK,WAAW,OAAO,qBAAqBxS,GAAOwS,GAAO,YAAY,EAAGA,EAAM,CAC3G,CAAqB,CACrB,CAAiB,EACM,CACH,oBAAqBua,GACrB,QAAAhE,EACH,CACjB,KACiB,CAMD,MAAMrV,GAAWqZ,GAAe,SAC1BzI,GAAc5Q,GAAS,SACvBA,GAAS,YACTA,GAAS,gBAAgB,mBACzB8Z,GAAqB9Z,GAAS,SAC9BA,GAAS,mBACTA,GAAS,gBAAgB,YACzB+Z,GAAgBV,GAAe,cAC/BW,GAAuBX,GAAe,wBAAwB,UAC9DY,GAAwBZ,GAAe,OAASW,GAChDE,GAAoBla,GAAS,SAC7BA,GAAS,uBAAuB,UAChCA,GAAS,gBAAgB,uBACtB,UACHma,GAAgBhB,EAAY,IAAKI,IAC5B3I,GAAY,OAAO,CAACjpB,GAAK6K,MAC5B7K,GAAI6K,GAAW,YAAY,EACvB+mB,GAAU,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWF,GAAe,YAAa7mB,GAAW,iBACtG,YAAY,CAAC,EACf7K,IACR,EAAE,CACR,EAGD,GAAIwyB,GAAc,SAAW,EACzB,MAAO,CACH,oBAAqBd,GACrB,QAAS,CAAE,CACd,EACL,MAAMjZ,GAAa,CAAE,EACfkZ,GAAa,CAAE,EACfc,GAAuBD,GACxB,IAAI,CAACE,GAAcpqB,KAAU,CAC9B,MAAMupB,GAAiB,CAAE,EACnBI,GAAiB,CAAE,EACnBC,GAAY,OAAO,KAAKQ,EAAY,EACrC,IAAKvzB,IAAQ,CACd,MAAM8mB,GAAgB9mB,GAAMmJ,GACtBghB,GAAiBoJ,GAAavzB,EAAG,EACjC2yB,GAAgB,GAAGM,EAAa,IAAIjzB,EAAG,IAAImqB,EAAc,GAC/D,OAAIuI,GAAe,QAAQC,EAAa,IAAM,GACnC,IAEXD,GAAe,KAAKC,EAAa,EACjCG,GAAehM,EAAa,EACxBqD,GACI8I,GACJ,IACAjzB,GACA,OACA8mB,GACP,CAAA,EACI,OAAQlZ,IAAMA,EAAC,EACf,KAAK,OAAO,EACjB8kB,GAAe,KAAM,EACrB,MAAME,GAAYF,GAAe,KAAK,IAAI,EAC1C,OAAIF,GAAWI,EAAS,EACb,IAEXJ,GAAWI,EAAS,EAAI,GACxB,OAAO,OAAOtZ,GAAYwZ,EAAc,EACjCC,GACV,CAAA,EACI,OAAQnlB,IAAMA,EAAC,EACd4lB,GAA6BR,GAC9B,IAAKtnB,IACEunB,GACJ,IACAvnB,GAAW,aACX,MACAynB,GACA,IACAznB,GAAW,iBAAiB,YACnC,EACI,KAAK,OAAO,EACXwc,GAAYoL,GACb,IAAKpL,IACE,IACJA,GACA,QACAsL,GACA,GACP,EACI,KAAK,MAAM,EACVnK,GAAK,KAAK,WAAW,mBAAmB,KAAK,WAAW,EAC9D2J,GAAmB,QAAStnB,IAAe,CACvC2d,GAAG,UAAU4J,GAAgB,IAAMvnB,GAAW,aAAcA,GAAW,YAAY,EAAE,WAAWunB,GAAgB,IAAMvnB,GAAW,YAAY,CACjK,CAAiB,EACDoe,GAAY,QAASpe,IAAe,CAChC2d,GAAG,UAAU4J,GAAgB,IAAMvnB,GAAW,aAAcA,GAAW,YAAY,EAAE,WAAWunB,GAAgB,IAAMvnB,GAAW,YAAY,CACjK,CAAiB,EACD2d,GAAG,KAAK6J,GAAsBC,EAAqB,EAC9C,UAAUC,GAAmBH,GAAe/K,EAAS,EACrD,cAAc5O,EAAU,EAEzBiZ,GAAe,qBACfA,GAAe,oBAAoBlJ,EAAE,EACzC,MAAMkF,GAAU,MAAMlF,GAAG,WAAY,EACrC,OAAAkF,GAAQ,QAAS/oB,IAAW,CAExB,CAAC,GAAGskB,GAAa,GAAGkJ,EAAkB,EAAE,QAAShb,IAAW,CACxDxS,GAAOwS,GAAO,YAAY,EACtB,KAAK,WAAW,OAAO,qBAAqBxS,GAAOwS,GAAO,YAAY,EAAGA,GAAO,gBAAgB,CAC5H,CAAqB,CACrB,CAAiB,EACM,CACH,oBAAqBua,GACrB,QAAAhE,EACH,CACjB,CACA,CAAS,EACD,OAAO,QAAQ,IAAI+D,CAAQ,CACnC,CACA,ECxQO,MAAM,gBAAiB,CAI1B,YAAYpO,EAAYkC,EAAa,CACjC,KAAK,WAAalC,EAClB,KAAK,YAAckC,CAC3B,CAOI,KAAKlN,EAAUua,EAAkBC,GAAgC,CAC7D,MAAM1I,GAAW,MAAM,QAAQyI,CAAgB,EACzCA,EACA,CAACA,CAAgB,EACjBE,GAAkB,MAAM,QAAQD,EAA8B,EAC9DA,GACAA,GACI,CAACA,EAA8B,EAC/B,OAEV,OAAIxa,EAAS,aACF,KAAK,kBAAkBA,EAAU8R,GAAU2I,EAAe,EAE5Dza,EAAS,aAAeA,EAAS,gBAC/B,KAAK,iCAAiCA,EAAU8R,GAAU2I,EAAe,EAIzE,KAAK,oCAAoCza,EAAU8R,GAAU2I,EAAe,CAE/F,CAMI,MAAM,kCAAkCza,EAAU0a,EAAoBC,GAAyB3M,GAAc,CAGzG,MAAM4M,GAAS5a,EAAS,cAAgBA,EAAS,YAC3C8R,GAAW,MAAM,QAAQ4I,CAAkB,EAC3CA,EACA,CAACA,CAAkB,EACzB,GAAI,CAACC,KACDA,GAA0B,MAAM,KAAK,WAAW,eAAe,KAAK3a,EAAU0a,EAAoB,KAAK,YAAa1M,EAAY,EAC5H,CAAC2M,GAAwB,QACzB,OAAO7I,GAAS,IAAKpgB,KAAY,CAC7B,OAAQA,GACR,QAASkpB,GAAS,CAAA,EAAK,MAC3C,EAAkB,EAGV,MAAMC,GAAc,MAAM,KAAK,KAAK7a,EAAU0a,EAAoBC,EAAuB,EAInFF,GAAkB,MAAM,QAAQE,EAAuB,EACvDA,GACA,CAACA,EAAuB,EAC9B,IAAIzL,GAAU,GAAI4L,GAAiB,CAAE,EACrC,OAAI9a,EAAS,mBACTkP,GAAUlP,EAAS,uBAAuB,eAAe,IAAKlB,IAAWA,GAAO,gBAAgB,EAChGgc,GAAiB9a,EAAS,uBAAuB,aAAa,IAAKlB,IAAWA,GAAO,gBAAgB,GAEhGkB,EAAS,sBACdkP,GAAUlP,EAAS,uBAAuB,aAAa,IAAKlB,IAAWA,GAAO,gBAAgB,EAC9Fgc,GACI9a,EAAS,uBAAuB,eAAe,IAAKlB,IAAWA,GAAO,gBAAgB,GAErFkB,EAAS,aAAeA,EAAS,iBACtCkP,GAAUlP,EAAS,YAAY,IAAKlB,IAAWA,GAAO,gBAAgB,EACtEgc,GAAiB9a,EAAS,eAAe,iBAEpCA,EAAS,aAAeA,EAAS,sBACtCkP,GAAUlP,EAAS,gBAAgB,eAAe,eAClD8a,GAAiB9a,EAAS,gBAAgB,YAAY,IAAKlB,IAAWA,GAAO,gBAAgB,GAI1FgT,GAAS,IAAKpgB,IAAW,CAC5B,MAAM6lB,GAAQ,CACV,OAAQ7lB,GACR,QAASkpB,GAAS,CAAA,EAAK,MAC1B,EACKG,GAAoBF,GAAY,OAAQ7O,IACnC8O,GAAe,MAAOhc,IAClBA,GAAO,mBAAmBpN,GAAQsa,GAAWlN,GAAO,eAAe,KACtE,IACAA,GAAO,iBAAiB,CAAC,CAChC,CACJ,EACD,OAAKic,GAAkB,QAEvBN,GAAgB,QAASO,IAAkB,CACvCD,GAAkB,QAAS/O,IAAe,CACTkD,GAAQ,MAAOpQ,IACjCA,GAAO,mBAAmBkc,GAAehP,GAAW,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWlN,GAAO,eAAe,KACvI,IACAkB,EAAS,aAAa,QAAQ,IAAK,GAAG,EACtC,IACAlB,GAAO,aAAa,QAAQ,IAAK,GAAG,CAAC,CAAC,CAAC,CAC9C,IAEO8b,GAEArD,GAAM,QAAQ,KAAKyD,EAAa,EAGhCzD,GAAM,QAAUyD,GAG5C,CAAiB,CACjB,CAAa,EACMzD,EACnB,CAAS,CACT,CAyCI,kBAAkBvX,EAAU8R,EAAU2I,GAAiB,CACnD,MAAMhG,GAAmBzU,EAAS,uBAC5BwN,GAAYiH,GAAiB,KAC7BvF,GAAUlP,EAAS,SACnByU,GAAiB,aACjBA,GAAiB,eACjBqG,GAAiB9a,EAAS,SAC1ByU,GAAiB,eACjBA,GAAiB,aACjBtE,GAAK,KAAK,WAAW,mBAAmB,KAAK,WAAW,EAE9DjB,GAAQ,QAASpQ,IAAW,CACxB,MAAMsQ,GAAa,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWtQ,GAAO,iBAAiB,eAAe,KAChH,IACAA,GAAO,iBAAiB,aAAa,QAAQ,IAAK,GAAG,CAAC,EAC1DqR,GAAG,UAAU3C,GAAY,IAAM1O,GAAO,aAAcsQ,EAAU,CAC1E,CAAS,EACD0L,GAAe,QAAShc,IAAW,CAC/B,MAAMsQ,GAAa,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWtQ,GAAO,iBAAiB,eAAe,KAChH,IACAkB,EAAS,aAAa,QAAQ,IAAK,GAAG,EACtC,IACAlB,GAAO,iBAAiB,aAAa,QAAQ,IAAK,GAAG,CAAC,EAC1DqR,GAAG,UAAU3C,GAAY,IAAM1O,GAAO,aAAcsQ,EAAU,CAC1E,CAAS,EAED,IAAI6L,GAAa,GACjB,GAAI/L,GAAQ,SAAW,EAAG,CACtB,MAAMnf,GAAS+hB,EAAS,IAAKpgB,IAAWwd,GAAQ,CAAC,EAAE,iBAAiB,eAAexd,EAAM,CAAC,EACpE3B,GAAO,MAAOhJ,IAAU,OAAOA,IAAU,QAAQ,EAEnEk0B,GAAa,GAAGzN,EAAS,IAAI0B,GAAQ,CAAC,EAAE,YAAY,QAAQnf,GAAO,KAAK,IAAI,CAAC,KAG7EogB,GAAG,aAAa,UAAWpgB,EAAM,EACjCkrB,GACIzN,GACI,IACA0B,GAAQ,CAAC,EAAE,aACX,oBAExB,MAEY+L,GACI,IACInJ,EACK,IAAI,CAACpgB,GAAQqgB,KACP7C,GACF,IAAKpQ,IAAW,CACjB,MAAMoV,GAAY,WACdnC,GACA,IACAjT,GAAO,aACX,OAAAqR,GAAG,aAAa+D,GAAWpV,GAAO,iBAAiB,eAAepN,EAAM,CAAC,EACjE8b,GACJ,IACA1O,GAAO,aACP,OACAoV,EACP,CAAA,EACI,KAAK,OAAO,CACpB,EACI,IAAKlF,IAAc,IAAMA,GAAY,GAAG,EACxC,KAAK,MAAM,EAChB,IAGZ,IAAIkM,GAAa,GACjB,GAAIT,GACA,GAAIK,GAAe,SAAW,EAAG,CAC7B,MAAM/qB,GAAS0qB,GAAgB,IAAK/oB,IAAWopB,GAAe,CAAC,EAAE,iBAAiB,eAAeppB,EAAM,CAAC,EAClF3B,GAAO,MAAOhJ,IAAU,OAAOA,IAAU,QAAQ,EAEnEm0B,GAAa,GAAG1N,EAAS,IAAIsN,GAAe,CAAC,EAAE,YAAY,QAAQ/qB,GAAO,KAAK,IAAI,CAAC,KAGpFogB,GAAG,aAAa,UAAWpgB,EAAM,EACjCmrB,GACI1N,GACI,IACAsN,GAAe,CAAC,EAAE,aAClB,oBAE5B,MAEgBI,GACI,IACIT,GACK,IAAI,CAAC/oB,GAAQqgB,KACP+I,GACF,IAAKhc,IAAW,CACjB,MAAMoV,GAAY,WACdnC,GACA,IACAjT,GAAO,aACX,OAAAqR,GAAG,aAAa+D,GAAWpV,GAAO,iBAAiB,eAAepN,EAAM,CAAC,EACjE8b,GACJ,IACA1O,GAAO,aACP,OACAoV,EACP,CAAA,EACI,KAAK,OAAO,CACpB,EACI,IAAKlF,IAAc,IAAMA,GAAY,GAAG,EACxC,KAAK,MAAM,EAChB,IAqBhB,MAAMA,GAAY,CAACiM,GAAYC,EAAU,EACpC,OAAQhS,IAAMA,GAAE,OAAS,CAAC,EAC1B,KAAK,OAAO,EACjB,OAAOiH,GACF,KAAKsE,GAAiB,OAAQjH,EAAS,EACvC,MAAMwB,EAAS,EACf,WAAY,CACzB,CAII,iCAAiChP,EAAU8R,EAAU2I,GAAiB,CAClE,MAAMjN,GAAYxN,EAAS,eAAe,WAGpCmb,GAA4Bnb,EAAS,YAAY,MAAOxN,IACnD,CAAC,CAACwN,EAAS,eAAe,kBAAkB,KAAMlB,IAAWA,KAAWtM,EAAU,CAC5F,EACD,GAAIioB,IAAmBU,GAA2B,CAC9C,IAAIC,GAAiB,CAAE,EAoCvB,GAnCAtJ,EAAS,QAASpgB,IAAW,CACzB,IAAI2pB,GAAgB,CAAE,EACtBrb,EAAS,eAAe,eAAe,QAASkQ,IAAkB,CAC9D,MAAMppB,GAAMopB,GAAc,eAAe,KACrC,IACAA,GAAc,aAAa,QAAQ,IAAK,GAAG,EAC/CmL,GAAcv0B,EAAG,EACbopB,GAAc,eAAexe,EAAM,CAC3D,CAAiB,EACD+oB,GAAgB,QAASO,IAAkB,CACvChb,EAAS,YAAY,QAASxN,IAAe,CACzC,MAAM8oB,GAAoB9oB,GAAW,eAAed,EAAM,EACpD6pB,GAA2B/oB,GAAW,iBAAiB,eAAewoB,EAAa,EACzF,GAAI,EAAAM,KAAsB,QACtBC,KAA6B,SAE7BD,KAAsBC,GAA0B,CAChD,MAAMz0B,GAAM0L,GAAW,iBAAiB,eACnC,KACD,IACAwN,EAAS,aAAa,QAAQ,IAAK,GAAG,EACtC,IACAxN,GAAW,iBAAiB,aAAa,QAAQ,IAAK,GAAG,EAC7D6oB,GAAcv0B,EAAG,EAAIy0B,EACjD,CACA,CAAqB,CACrB,CAAiB,EACG,OAAO,KAAKF,EAAa,EAAE,SAC3Brb,EAAS,eAAe,eAAe,OACnCA,EAAS,YAAY,QACzBob,GAAe,KAAKC,EAAa,CAErD,CAAa,EAGGD,GAAe,SAAWtJ,EAAS,OACnC,OAAO,QAAQ,QAAQsJ,EAAc,CACrD,CAEQ,MAAMjL,GAAK,KAAK,WAAW,mBAAmB,KAAK,WAAW,EAC9DnQ,EAAS,eAAe,eAAe,QAASkQ,IAAkB,CAC9D,MAAMd,GAAa,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWc,GAAc,eAAe,KACtG,IACAA,GAAc,aAAa,QAAQ,IAAK,GAAG,CAAC,EAChDC,GAAG,UAAU3C,GAAY,IAAM0C,GAAc,aAAcd,EAAU,CACjF,CAAS,EACDpP,EAAS,YAAY,QAASlB,IAAW,CACrC,MAAMsQ,GAAa,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWtQ,GAAO,iBAAiB,eAAe,KAChH,IACAkB,EAAS,aAAa,QAAQ,IAAK,GAAG,EACtC,IACAlB,GAAO,iBAAiB,aAAa,QAAQ,IAAK,GAAG,CAAC,EAC1DqR,GAAG,UAAU3C,GAAY,IAAM1O,GAAO,aAAcsQ,EAAU,CAC1E,CAAS,EAED,IAAIJ,GAAY,GAChB,GAAIhP,EAAS,eAAe,eAAe,SAAW,EAAG,CACrD,MAAMjQ,GAAS+hB,EAAS,IAAKpgB,IAAWsO,EAAS,eAAe,eAAe,CAAC,EAAE,eAAetO,EAAM,CAAC,EAClF3B,GAAO,MAAOhJ,IAAU,OAAOA,IAAU,QAAQ,EAEnEioB,GAAY,GAAGxB,EAAS,IAAIxN,EAAS,eAAe,eAAe,CAAC,EAAE,YAAY,QAAQjQ,GAAO,KAAK,IAAI,CAAC,KAG3GogB,GAAG,aAAa,SAAUpgB,EAAM,EAChCif,GACIxB,GACI,IACAxN,EAAS,eAAe,eAAe,CAAC,EAAE,aAC1C,mBAExB,MAEYgP,GAAY8C,EACP,IAAI,CAACpgB,GAAQqgB,KACP/R,EAAS,eAAe,eAC1B,IAAI,CAAClB,GAAQkV,KAAgB,CAC9B,MAAME,GAAY,SAAWnC,GAAc,IAAMiC,GACjD,OAAA7D,GAAG,aAAa+D,GAAWpV,GAAO,eAAepN,EAAM,CAAC,EAChD8b,GACJ,IACA1O,GAAO,aACP,OACAoV,EACP,CAAA,EACI,KAAK,OAAO,CACpB,EACI,IAAKlF,IAAc,IAAMA,GAAY,GAAG,EACxC,KAAK,MAAM,EAGpB,OAAOmB,GACF,KAAKnQ,EAAS,eAAe,OAAQwN,EAAS,EAC9C,MAAMwB,EAAS,EACf,WAAY,CACzB,CAII,oCAAoChP,EAAU8R,EAAU2I,GAAiB,CAErE,GADAza,EAAWA,EAAS,gBAChBA,EAAS,eAAe,eAAe,SACvCA,EAAS,YAAY,QACSA,EAAS,eAAe,eAAe,MAAOlB,IACjEkB,EAAS,YAAY,QAAQlB,EAAM,IAAM,EACnD,EAEG,OAAO,QAAQ,QAAQgT,EAAS,IAAKpgB,IAAW,CAC5C,MAAMpF,GAAS,CAAE,EACjB,OAAA0T,EAAS,YAAY,QAAQ,SAAUxN,GAAY,CAC/C,MAAMzL,GAAQyL,GAAW,iBAAiB,eAAed,EAAM,EACzD8pB,GAAiBhpB,GAAW,iBAAiB,eAC9C,KACD,IACAA,GAAW,iBAAiB,aAAa,QAAQ,IAAK,GAAG,EACvDipB,GAAoBjpB,GAAW,eAAe,KAChD,IACAwN,EAAS,gBAAgB,aAAa,QAAQ,IAAK,GAAG,EACtD,IACAxN,GAAW,aAAa,QAAQ,IAAK,GAAG,EAC5ClG,GAAOkvB,EAAc,EAAIz0B,GACzBuF,GAAOmvB,EAAiB,EAAI10B,EACpD,CAAqB,EACMuF,EAC3B,CAAiB,CAAC,EAGV,MAAMkhB,GAAYxN,EAAS,eAAe,WAEpCmQ,GAAK,KAAK,WAAW,mBAAmB,KAAK,WAAW,EAC9DnQ,EAAS,eAAe,eAAe,QAASkQ,IAAkB,CAC9D,MAAMd,GAAa,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWc,GAAc,eAAe,KACtG,IACAlQ,EAAS,gBAAgB,aAAa,QAAQ,IAAK,GAAG,EACtD,IACAkQ,GAAc,aAAa,QAAQ,IAAK,GAAG,CAAC,EAChDC,GAAG,UAAU3C,GAAY,IAAM0C,GAAc,aAAcd,EAAU,CACjF,CAAS,EACDpP,EAAS,YAAY,QAASlB,IAAW,CACrC,MAAMsQ,GAAa,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWtQ,GAAO,iBAAiB,eAAe,KAChH,IACAA,GAAO,iBAAiB,aAAa,QAAQ,IAAK,GAAG,CAAC,EAC1DqR,GAAG,UAAU3C,GAAY,IAAM1O,GAAO,aAAcsQ,EAAU,CAC1E,CAAS,EAED,IAAIJ,GAAY,GAChB,GAAIhP,EAAS,YAAY,SAAW,EAAG,CACnC,MAAMjQ,GAAS+hB,EAAS,IAAKpgB,IAAWsO,EAAS,YAAY,CAAC,EAAE,iBAAiB,eAAetO,EAAM,CAAC,EACjF3B,GAAO,MAAOhJ,IAAU,OAAOA,IAAU,QAAQ,EAEnEioB,GAAY,GAAGxB,EAAS,IAAIxN,EAAS,YAAY,CAAC,EAAE,YAAY,QAAQjQ,GAAO,KAAK,IAAI,CAAC,KAGzFogB,GAAG,aAAa,SAAUpgB,EAAM,EAChCif,GACIxB,GACI,IACAxN,EAAS,YAAY,CAAC,EAAE,aACxB,mBAExB,MAEYgP,GAAY8C,EACP,IAAI,CAACpgB,GAAQqgB,KACP/R,EAAS,YACX,IAAI,CAACxN,GAAYkpB,KAAoB,CACtC,MAAMxH,GAAY,SAAWnC,GAAc,IAAM2J,GACjD,OAAAvL,GAAG,aAAa+D,GAAW1hB,GAAW,iBAAiB,eAAed,EAAM,CAAC,EACrE8b,GACJ,IACAhb,GAAW,aACX,OACA0hB,EACP,CAAA,EACI,KAAK,OAAO,CACpB,EACI,IAAKlF,IAAc,IAAMA,GAAY,GAAG,EACxC,KAAK,MAAM,EAGpB,OAAOmB,GACF,KAAKnQ,EAAS,eAAe,OAAQwN,EAAS,EAC9C,MAAMwB,EAAS,EACf,WAAY,CACzB,CACA,CC9eO,MAAM,wCAAyC,CAIlD,YAAYvD,EAAe,CACvB,KAAK,cAAgBA,CAC7B,CAII,WAAY,CASJ,KAAK,cAAc,WACnB,KAAK,cAAc,UAAU,SAAS,YAAY,QAASO,GAAe,CACtE,MAAM2P,EAAY,KAAK,oBAAoB,KAAK,cAAc,UAAU,KAAM3P,CAAU,EACxF,KAAK,cAAc,qBAAqB,KAAK2P,CAAS,CACtE,CAAa,EAGL,KAAK,cAAc,eAAe,QAAS5P,GAAS,CAE5C,CAACA,EAAK,UAAYA,EAAK,SAAS,YAEpCA,EAAK,SAAS,YAAY,QAASC,GAAe,CAC9C,MAAM2P,GAAY,KAAK,oBAAoB5P,EAAK,MAAM,KAAMC,CAAU,EACtE,KAAK,cAAc,qBAAqB,KAAK2P,EAAS,CACtE,CAAa,CACb,CAAS,CACT,CAII,oBAAoBC,EAAiB5P,EAAY,CAC7C,OAAO,IAAI,oBAAoB,KAAK,cAAe,CAC/C,aAAc4P,EAAkB,IAAM5P,EAAW,SAAS,aAC1D,cAAe4P,EAAkB,IAAM5P,EAAW,aAClD,MAAOA,EAAW,MAClB,oBAAqBA,EAAW,mBAC5C,CAAS,CACT,CACA,CChDO,MAAM,mBAAoB,CAI7B,YAAYhB,EAAYkC,EAAa2O,GAAyB,CAC1D,KAAK,WAAa7Q,EAClB,KAAK,YAAckC,EACnB,KAAK,wBAA0B2O,EACvC,CAII,MAAM,KAAK1C,EAAa,CACpB,MAAM2C,EAAa,CAAC/0B,GAAOkJ,GAAO8rB,KACvBA,GAAK,QAAQh1B,EAAK,IAAMkJ,GAE7BmpB,GAAW,KAAK,wBAAwB,IAAI,MAAO4C,IAAsB,CAC3E,GAAIA,GAAkB,SAAS,YAAa,CAKxC,MAAMhc,GAAWgc,GAAkB,SAC7BC,GAAkBjc,GAAS,gBAC3B2Y,GAAsBsD,GAAgB,YAAY,CAAC,EAAE,iBACtD,aACCC,GAAmBlc,GAAS,sBAAsB,OAClDga,GAAuBha,GAAS,sBAAsB,UACtDia,GAAwB+B,GAAkB,OAAShC,GACnDmC,GAA0BF,GAAgB,aAChD,IAAIG,GAAwBjD,EACvB,IAAKI,IAAcA,GAAUyC,GAAkB,YAChD,IACArD,EAAmB,CAAC,EACnB,OAAQ5xB,IAAU,CAAC,CAACA,EAAK,EAK9B,GAJAq1B,GACIA,GAAsB,OAAON,CAAU,EAGvCM,GAAsB,SAAW,EACjC,MAAO,CACH,uBAAwBJ,GACxB,QAAS,CAAE,CACd,EAGL,MAAM7L,GAAK,KAAK,WAAW,mBAAmB,KAAK,WAAW,EAC9D,OAAAA,GAAG,OAAO8J,GAAwB,IAAMkC,GAAyB,UAAU,EACtE,UAAU,WAAY,KAAK,EAC3B,KAAKD,GAAkBjC,EAAqB,EAC5C,MAAMA,GACP,IACAkC,GACA,eAAe,EACd,WAAWlC,GACZ,IACAkC,EAAuB,EACtB,aAAa,MAAOC,EAAqB,EAE1CJ,GAAkB,qBAClBA,GAAkB,oBAAoB7L,EAAE,EACrC,CACH,uBAAwB6L,GACxB,QAAS,MAAM7L,GAAG,WAAY,CACjC,CACjB,KACiB,CAKD,IAAIkM,GACAC,GACAC,GACAC,GACAR,GAAkB,SAAS,UAE3BK,GACIL,GAAkB,SAAS,YAAY,CAAC,EACnC,iBAAiB,aAC1BM,GACIN,GAAkB,SAAS,mBAAmB,CAAC,EAC1C,iBAAiB,aAC1BO,GACIP,GAAkB,SAAS,uBACtB,QAAQ,CAAC,EAClBQ,GACIR,GAAkB,SAAS,uBACtB,QAAQ,CAAC,IAGlBK,GACIL,GAAkB,SAAS,gBACtB,mBAAmB,CAAC,EAAE,iBACtB,aACTM,GACIN,GAAkB,SAAS,gBACtB,YAAY,CAAC,EAAE,iBAAiB,aACzCO,GACIP,GAAkB,SAAS,uBACtB,QAAQ,CAAC,EAClBQ,GACIR,GAAkB,SAAS,uBACtB,QAAQ,CAAC,GAEtB,IAAII,GAAwBjD,EACvB,IAAKI,IAAcA,GAAUyC,GAAkB,YAChD,IACAK,EAAmB,CAAC,EACnB,OAAQt1B,IAAU,CAAC,CAACA,EAAK,EAK9B,GAJAq1B,GACIA,GAAsB,OAAON,CAAU,EAGvCM,GAAsB,SAAW,EACjC,MAAO,CACH,uBAAwBJ,GACxB,QAAS,CAAE,CACd,EACL,MAAMjC,GAAgBiC,GAAkB,cAClChC,GAAuBgC,GAAkB,wBAAwB,UACjE/B,GAAwB+B,GAAkB,OAAShC,GACnDE,GAAoB8B,GAAkB,SAAS,uBAChD,UACChN,GAAY+K,GACd,IACAwC,GAAoB,aACpB,QACAH,GAAsB,IAAKK,IAAS,MAAMA,EAAI,EAAI,IAAMA,GAAO,IAAMA,EAAI,EACzE,SAEA1C,GACA,IACAyC,GAAqB,aACrB,MACAvC,GACA,IACAqC,GACEnM,GAAK,KAAK,WAAW,mBAAmB,KAAK,WAAW,EAC9D,OAAAA,GAAG,OAAO4J,GAAgB,IAAMwC,GAAoB,aAAc,UAAU,EACvE,UAAU,SACXpM,GAAG,OAAO8J,EAAqB,EAC/B,IACA9J,GAAG,OAAOmM,EAAqB,EAC/B,IAAK,KAAK,EACT,KAAKtC,GAAsBC,EAAqB,EAChD,UAAUC,GAAmBH,GAAe/K,EAAS,EACrD,WAAW+K,GACZ,IACAwC,GAAoB,YAAY,EAEhCP,GAAkB,qBAClBA,GAAkB,oBAAoB7L,EAAE,EACrC,CACH,uBAAwB6L,GACxB,QAAS,MAAM7L,GAAG,WAAY,CACjC,CACjB,CACA,CAAS,EACD,OAAO,QAAQ,IAAIiJ,EAAQ,CACnC,CACA,CChKO,MAAM,2CAA4C,CAIrD,YAAY3N,EAAe,CACvB,KAAK,cAAgBA,CAC7B,CAII,WAAY,CASJ,KAAK,cAAc,WACnB,KAAK,cAAc,UAAU,SAAS,eAAe,QAASQ,GAAkB,CAC5E,MAAM0P,EAAY,KAAK,oBAAoB,KAAK,cAAc,UAAU,KAAM1P,CAAa,EAC3F,KAAK,cAAc,wBAAwB,KAAK0P,CAAS,CACzE,CAAa,EAGL,KAAK,cAAc,eAAe,QAAS5P,GAAS,CAE5C,CAACA,EAAK,UAAYA,EAAK,SAAS,YAEpCA,EAAK,SAAS,eAAe,QAASE,GAAkB,CACpD,MAAM0P,GAAY,KAAK,oBAAoB5P,EAAK,MAAM,KAAME,CAAa,EACzE,KAAK,cAAc,wBAAwB,KAAK0P,EAAS,CACzE,CAAa,CACb,CAAS,CACT,CAII,oBAAoBC,EAAiB3P,EAAe,CAChD,OAAO,IAAI,uBAAuB,KAAK,cAAe,CAClD,aAAc2P,EAAkB,IAAM3P,EAAc,SAAS,aAC7D,cAAe2P,EAAkB,IAAM3P,EAAc,aACrD,MAAOA,EAAc,MACrB,oBAAqBA,EAAc,mBAC/C,CAAS,CACT,CACA,CC1CO,MAAM,gBAAiB,CAO1B,OAAO,iBAAiB/e,EAAK,CACzB,MAAMwvB,EAAkBxvB,EACxB,OAAQwvB,IACH,MAAM,QAAQA,EAAgB,MAAM,GACjC,MAAM,QAAQA,EAAgB,SAAS,GACvC,OAAOA,EAAgB,QAAW,UAClC,OAAOA,EAAgB,WAAc,UACrC,OAAOA,EAAgB,OAAU,UAEjC,OAAOA,EAAgB,MAAS,UAChC,OAAOA,EAAgB,OAAU,UACjC,OAAOA,EAAgB,OAAU,UACjC,OAAOA,EAAgB,OAAU,WACjC,OAAOA,EAAgB,OAAU,UACjC,OAAOA,EAAgB,SAAY,UACnC,OAAOA,EAAgB,MAAS,UAChC,OAAOA,EAAgB,iBAAoB,UAC3C,OAAOA,EAAgB,iBAAoB,WAC3C,OAAOA,EAAgB,oBAAuB,WAC9C,OAAOA,EAAgB,aAAgB,WACvC,OAAOA,EAAgB,sBAAyB,UAChD,OAAOA,EAAgB,aAAgB,UACvD,CAII,OAAO,kBAAkBxvB,EAAK,CAC1B,MAAMwvB,EAAkBxvB,EACxB,OAAQwvB,IACH,KAAK,iBAAiBA,CAAe,GAClC,OAAOA,EAAgB,MACnB,UACJ,OAAOA,EAAgB,MACnB,UACJ,OAAOA,EAAgB,MACnB,UACJ,OAAOA,EAAgB,MACnB,SACpB,CAII,OAAO,4BAA4B7qB,EAAQ,CACvC,GAAI,KAAK,kBAAkBA,CAAM,GAAKA,EAAO,KACzC,OAAOA,EAAO,KAAK,KAE/B,CAkKI,OAAO,+BAA+Bse,EAAI/H,EAAS,CAC/C,GAAIA,GAAS,UAAW,CAEpB,MAAMuU,GAAe,CAAC,GAAGvU,EAAQ,SAAS,EAK1C,GAJA,iBAAiB,0BAA0B+H,EAAIwM,GAAcxM,EAAG,cAAc,UAAU,KAAMA,EAAG,cAAc,UAAU,SAAU,EAAE,EAIjIwM,GAAa,OAAS,EACtB,MAAM,IAAI,2BAA2BA,EAAY,CACjE,CACQ,OAAOxM,CACf,CAOI,OAAO,0BAA0BA,EAAIwM,EAAcjc,GAAOtX,GAAU8U,GAAQ,CAExE,IAAI0e,GAAuB,CAAE,EAC7B,GAAI1e,GAAQ,CACR,MAAM2e,GAAS,IAAI,OAAO,IAAM3e,GAAO,QAAQ,IAAK,KAAK,EAAI,KAAK,EAClE0e,GAAuBD,EAClB,OAAQ3c,IAAaA,GAAS,MAAM6c,EAAM,CAAC,EAC3C,IAAK7c,IAAa5W,GAAS,6BAA6B4W,GAAS,QAAQ6c,GAAQ,EAAE,CAAC,CAAC,EACrF,OAAQnrB,IAAWA,EAAM,CAC1C,MAEYkrB,GAAuBD,EAClB,IAAK3c,IAAa5W,GAAS,6BAA6B4W,EAAQ,CAAC,EACjE,OAAQtO,IAAWA,EAAM,EAGlCkrB,GAAqB,QAAS5c,IAAa,CAEvC,IAAI8c,GAAgB,YAAY,WAAW3M,EAAG,WAAW,OAAQ,CAAE,OAAQ,IAAM,EAAEzP,GAAOV,GAAS,YAAY,EAE/G,MAAMmN,GAAYzM,GAAQ,IAAMV,GAAS,aACrCmQ,EAAG,cAAc,uBAAyB,QAC1CA,EAAG,uBAAuBnQ,EAAQ,EAGlCmQ,EAAG,kBAAkBhD,GAAW2P,EAAa,EAGjDH,EAAa,OAAOA,EAAa,QAAQze,GACnCA,GAAS,IAAM8B,GAAS,aACxBA,GAAS,YAAY,EAAG,CAAC,EAE/B,IAAI8L,GACAiR,GACJ,GAAI5M,EAAG,cAAc,uBAAyB,QAC1CrE,GAAmB9L,GAAS,sBAC5B+c,GAAeD,OAEd,CACD,MAAM/Q,GAAOoE,EAAG,cAAc,eAAe,KAAMpE,IAASA,GAAK,mBAAqBoB,EAAS,EAC/FrB,GAAmBC,GAAK,SACxBgR,GAAehR,GAAK,MAAM,IAC1C,CACY,GAAI,CAACgR,IAAgB,CAACjR,GAClB,MAAM,IAAI,4BAA4B9L,GAAS,aAAc5W,EAAQ,EAOzE,GALA,KAAK,0BAA0B+mB,EAAIwM,EAAcI,GAAcjR,GAAkB5N,GAC3EA,GAAS,IAAM8B,GAAS,aACxBA,GAAS,YAAY,EAGvBmQ,EAAG,cAAc,uBAAyB,OAAQ,CAClD,MAAM6M,GAAc5zB,GAAS,UAAU,KAAMA,IAAaA,GAAS,eAAiB4W,GAAS,YAAY,EACrGgd,IACA,KAAK,mBAAmB7M,EAAI2M,GAAeE,GAAY,qBAAqB,CAEhG,CACA,CAAS,CACT,CACI,OAAO,mBAAmB7M,EAAIzP,EAAOtX,GAAU,CAC3CA,GAAS,eAAe,QAAS4W,IAAa,CAE1C,IAAI8c,GAAgB,YAAY,WAAW3M,EAAG,WAAW,OAAQ,CAAE,OAAQ,IAAM,EAAEzP,EAAOV,GAAS,YAAY,EAG3Gid,GAAU,GAEd,UAAWlR,MAAQoE,EAAG,cAAc,eAChC,GAAI,EAAApE,GAAK,YAAc,QACnBA,GAAK,gBAAkB,QACvBA,GAAK,gBAAkB,QACvBA,GAAK,YAAc,QACnBA,GAAK,mBACD,GAAGrL,CAAK,IAAIV,GAAS,YAAY,IAGzC,CAAAid,GAAU,GACVH,GAAgB/Q,GAAK,MAAM,KAC3B,MAEJ,MAAMmR,GAAmB,EAAQ/M,EAAG,cAAc,eAAe,KAAMjF,IAAkBA,GAAc,MAAM,OAAS4R,EAAa,EAC/HG,IAAW,CAACC,IACZ/M,EAAG,SAASzP,EAAQ,IAAMV,GAAS,aAAc8c,EAAa,EAIlE,IAAIK,GAAY,GAChB,UAAWhS,MAAUgF,EAAG,cAAc,QAClC,GAAI,EAAAhF,GAAO,YAAc,QACrBA,GAAO,UAAY,QACnBA,GAAO,YAAc2R,IAGzB,CAAAK,GAAY,GACZ,MAEAA,IACAhN,EAAG,UAAU2M,EAAa,EAG9B,KAAK,mBAAmB3M,EAAI2M,GAAe9c,GAAS,qBAAqB,CACrF,CAAS,CACT,CACA,CC1TO,MAAM,2BAA2B,YAAa,CACjD,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,aAAa,EAAI,OAAO,IAAI,oBAAoB,EACrD,KAAK,YAAc,CAAE,EACrB,KAAK,QAAU,CAAE,EACjB,KAAK,MAAQ,CAAE,EACf,KAAK,WAAa,GAClB,KAAK,SAAW,CAAE,EAClB,KAAK,kBAAoB,CAAE,CACnC,CAOI,UAAW,CACP,IAAIhC,EAAM,KAAK,cAAe,EAC9B,OAAAA,GAAO,KAAK,oBAAqB,EACjCA,GAAO,KAAK,uBAAwB,EACpCA,GAAO,KAAK,qBAAsB,EAClCA,GAAO,KAAK,sBAAuB,EACnCA,GAAO,KAAK,wBAAyB,EACrCA,GAAO,KAAK,uBAAwB,EACpCA,GAAO,KAAK,wBAAyB,EACrCA,GAAO,KAAK,4BAA6B,EACzCA,GAAO,KAAK,qBAAsB,EAClCA,EAAMA,EAAI,KAAM,EACZ,KAAK,cAAc,WACnBA,EAAM,IAAMA,EAAM,KACf,KAAK,qCAAqCA,CAAG,CAC5D,CAII,eAAeof,EAAa,CACxB,YAAK,YAAcA,EACnB,KAAK,iBAAkB,EAChB,IACf,CAII,UAAW,CACP,MAAMjN,EAAK,KAAK,mBAAoB,EACpC,OAAAA,EAAG,cAAc,SAAW,GAC5BA,EAAG,mBAAqB,KACjBA,CACf,CAKI,OAAOhD,EAAWC,EAAoB,CAElC,GADA,KAAK,cAAc,UAAY,SAC3B,MAAM,QAAQD,CAAS,EACvB,KAAK,cAAc,QAAUA,EAAU,IAAKA,KAAe,CACvD,UAAWA,EAC3B,EAAc,UAEG,OAAOA,GAAc,WAAY,CACtC,MAAMgB,GAAkBhB,EAAU,KAAK,SAAQ,CAAE,EACjD,KAAK,cAAcgB,GAAgB,eAAe,EAClD,KAAK,cAAc,QAAQ,KAAK,CAC5B,UAAWA,GAAgB,SAAU,EACrC,UAAWf,CAC3B,CAAa,CACb,MACiBD,IACL,KAAK,cAAc,QAAU,CACzB,CAAE,UAAWA,EAAW,UAAWC,CAAoB,CAC1D,GAEL,OAAO,IACf,CAII,UAAUD,EAAWC,EAAoB,CACrC,GAAI,CAACD,EACD,OAAO,KACX,GAAI,MAAM,QAAQA,CAAS,EACvB,KAAK,cAAc,QAAU,KAAK,cAAc,QAAQ,OAAOA,EAAU,IAAKA,KAAe,CAAE,UAAWA,EAAS,EAAG,CAAC,UAElH,OAAOA,GAAc,WAAY,CACtC,MAAMgB,GAAkBhB,EAAU,KAAK,SAAQ,CAAE,EACjD,KAAK,cAAcgB,GAAgB,eAAe,EAClD,KAAK,cAAc,QAAQ,KAAK,CAC5B,UAAWA,GAAgB,SAAU,EACrC,UAAWf,CAC3B,CAAa,CACb,MACiBD,GACL,KAAK,cAAc,QAAQ,KAAK,CAC5B,UAAWA,EACX,UAAWC,CAC3B,CAAa,EAEL,OAAO,IACf,CAKI,iBAAiBiQ,EAAc,CAC3B,YAAK,cAAc,iBAAmBA,EAC/B,IACf,CAII,SAASC,EAAW,GAAM,CACtB,YAAK,cAAc,eAAiBA,EAC7B,IACf,CAII,WAAWC,EAAY,CACnB,YAAK,cAAc,iBAAmBA,EAC/B,IACf,CACI,WAAY,CACR,OAAO,KAAK,KAAK,KAAK,WAAW,OAAO,gBACpC,6BAA8B,aAAa,CACvD,CAMI,KAAK5P,EAAchN,EAAW,CAC1B,MAAM6M,GAAY,KAAK,gBAAgBG,EAAchN,CAAS,EAC9D,YAAK,cAAc,aAAa6M,EAAS,EAClC,IACf,CAKI,QAAQG,EAAchN,EAAW,CAC7B,MAAMD,GAAQ,KAAK,gBAAgBiN,EAAchN,CAAS,EAC1D,OAAK,KAAK,cAAc,WACpB,KAAK,cAAc,aAAaD,EAAK,EAClC,IACf,CAMI,UAAU8c,EAAkB9c,EAAOsO,GAAW5O,GAAY,CACtD,YAAK,KAAK,QAASod,EAAkB9c,EAAOsO,GAAW5O,EAAU,EAC1D,IACf,CAMI,SAASod,EAAkB9c,EAAOsO,GAAW5O,GAAY,CACrD,YAAK,KAAK,OAAQod,EAAkB9c,EAAOsO,GAAW5O,EAAU,EACzD,IACf,CAMI,mBAAmBod,EAAkB9c,EAAOsO,GAAW5O,GAAY,CAC/D,YAAK,UAAUM,CAAK,EACpB,KAAK,UAAU8c,EAAkB9c,EAAOsO,GAAW5O,EAAU,EACtD,IACf,CAMI,kBAAkBod,EAAkB9c,EAAOsO,GAAW5O,GAAY,CAC9D,YAAK,UAAUM,CAAK,EACpB,KAAK,SAAS8c,EAAkB9c,EAAOsO,GAAW5O,EAAU,EACrD,IACf,CAQI,oBAAoBoY,EAAegF,EAAkB9c,GAAOsO,GAAW5O,GAAY,CAC/E,YAAK,UAAUM,EAAK,EACpB,KAAK,KAAK,QAAS8c,EAAkB9c,GAAOsO,GAAW5O,GAAYoY,EAAe,EAAI,EAC/E,IACf,CAQI,mBAAmBA,EAAegF,EAAkB9c,GAAOsO,GAAW5O,GAAYqd,GAAa,CAC3F,YAAK,UAAU/c,EAAK,EACpB,KAAK,KAAK,QAAS8c,EAAkB9c,GAAOsO,GAAW5O,GAAYoY,EAAe,GAAOiF,EAAW,EAC7F,IACf,CAQI,mBAAmBjF,EAAegF,EAAkB9c,GAAOsO,GAAW5O,GAAY,CAC9E,YAAK,UAAUM,EAAK,EACpB,KAAK,KAAK,OAAQ8c,EAAkB9c,GAAOsO,GAAW5O,GAAYoY,EAAe,EAAI,EAC9E,IACf,CAQI,kBAAkBA,EAAegF,EAAkB9c,GAAOsO,GAAW5O,GAAYqd,GAAa,CAC1F,YAAK,UAAU/c,EAAK,EACpB,KAAK,KAAK,OAAQ8c,EAAkB9c,GAAOsO,GAAW5O,GAAYoY,EAAe,GAAOiF,EAAW,EAC5F,IACf,CAKI,qBAAqBjF,EAAeuE,EAAcW,GAAoBC,GAAqB,CACvF,MAAMrS,GAAsB,IAAI,oBAAoB,KAAK,aAAa,EACtE,OAAAA,GAAoB,cAAgBkN,EACpClN,GAAoB,aAAeyR,EAC/B,OAAOW,IAAuB,WAC9BpS,GAAoB,MAAQoS,IAC5B,OAAOA,IAAuB,UAC9BA,GAAmB,kBACnBpS,GAAoB,gBAAkB,IAC1CA,GAAoB,oBAAsBqS,GAC1C,KAAK,cAAc,qBAAqB,KAAKrS,EAAmB,EAC5DA,GAAoB,SAAS,wBAC7B,KAAK,cAAc,YAAY,CAC3B,KAAM,QACN,KAAMA,GAAoB,cAC1B,SAAUA,GAAoB,SAAS,sBACvD,CAAa,EAEE,IACf,CAKI,wBAAwBkN,EAAeuE,EAAcpc,GAAWgd,GAAqB,CACjF,MAAMjS,GAAyB,IAAI,uBAAuB,KAAK,aAAa,EAC5E,OAAAA,GAAuB,cAAgB8M,EACvC9M,GAAuB,aAAeqR,EACtCrR,GAAuB,MAAQ/K,GAC/B+K,GAAuB,oBAAsBiS,GAC7C,KAAK,cAAc,wBAAwB,KAAKjS,EAAsB,EACtE,KAAK,cAAc,YAAY,CAC3B,KAAM,QACN,KAAMA,GAAuB,aACzC,CAAS,EACGA,GAAuB,SAAS,wBAChC,KAAK,cAAc,YAAY,CAC3B,KAAM,QACN,KAAMA,GAAuB,cAC7B,SAAUA,GAAuB,SAAS,sBAC1D,CAAa,EAEE,IACf,CAMI,mBAAmBtD,EAAS,CAExB,YAAK,cAAc,UAAU,SAAS,UAAU,QAASpI,GAAa,CAC9DoI,IAAY,QACZA,EAAQ,YAAc,QACtBA,EAAQ,UAAU,QAAQpI,EAAS,YAAY,IAAM,IAEzD,KAAK,qBAAqB,KAAK,cAAc,UAAU,KACnD,IACAA,EAAS,aAAc,KAAK,cAAc,UAAU,KACpD,IACAA,EAAS,aAAcoI,CAAO,CAC9C,CAAS,EACM,IACf,CAOI,MAAM8D,EAAO9L,EAAY,CACrB,KAAK,cAAc,OAAS,GAC5B,MAAM4O,GAAY,KAAK,kBAAkB9C,CAAK,EAC9C,OAAI8C,KACA,KAAK,cAAc,OAAS,CACxB,CAAE,KAAM,SAAU,UAAWA,EAAW,CAC3C,GAED5O,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,SAAS8L,EAAO9L,EAAY,CACxB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,MACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,QAAQ8L,EAAO9L,EAAY,CACvB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,KACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAII,YAAYgQ,EAAU,CAClB,OAAO,KAAK,MAAM,GAAG,KAAK,mBAAmBA,CAAQ,CAAC,CAC9D,CAII,eAAeA,EAAU,CACrB,OAAO,KAAK,SAAS,GAAG,KAAK,mBAAmBA,CAAQ,CAAC,CACjE,CAII,cAAcA,EAAU,CACpB,OAAO,KAAK,QAAQ,GAAG,KAAK,mBAAmBA,CAAQ,CAAC,CAChE,CASI,WAAWJ,EAAK,CACZ,OAAO,KAAK,MAAM,KAAK,uBAAuBA,CAAG,CAAC,CAC1D,CASI,cAAcA,EAAK,CACf,OAAO,KAAK,SAAS,KAAK,uBAAuBA,CAAG,CAAC,CAC7D,CASI,aAAaA,EAAK,CACd,OAAO,KAAK,QAAQ,KAAK,uBAAuBA,CAAG,CAAC,CAC5D,CAOI,OAAO7D,EAAQ/L,EAAY,CACvB,YAAK,cAAc,QAAQ,KAAK,CAAE,KAAM,SAAU,UAAW+L,EAAQ,EACjE/L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,UAAU+L,EAAQ/L,EAAY,CAC1B,YAAK,cAAc,QAAQ,KAAK,CAAE,KAAM,MAAO,UAAW+L,EAAQ,EAC9D/L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,SAAS+L,EAAQ/L,EAAY,CACzB,YAAK,cAAc,QAAQ,KAAK,CAAE,KAAM,KAAM,UAAW+L,EAAQ,EAC7D/L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAMI,QAAQgM,EAAS,CACb,OAAIA,EACA,KAAK,cAAc,SAAW,CAACA,CAAO,EAGtC,KAAK,cAAc,SAAW,CAAE,EAE7B,IACf,CAII,WAAWA,EAAS,CAChB,YAAK,cAAc,SAAS,KAAKA,CAAO,EACjC,IACf,CAII,gBAAgBwR,EAAc,CAC1B,OAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,gBACpCA,IAAiB,OACjB,KAAK,cAAc,WAAa,4BAGhC,KAAK,cAAc,WAAaA,GAGjC,IACf,CAMI,QAAQC,EAAMC,EAAQ,MAAOC,GAAO,CAChC,GAAID,IAAU,QAAaA,IAAU,OAASA,IAAU,OACpD,MAAM,IAAI,aAAa,gFAAgF,EAC3G,GAAIC,KAAU,QACVA,KAAU,eACVA,KAAU,aACV,MAAM,IAAI,aAAa,8FAA8F,EACzH,OAAIF,EACI,OAAOA,GAAS,SAChB,KAAK,cAAc,SAAWA,EAG1BE,GACA,KAAK,cAAc,SAAW,CAC1B,CAACF,CAAI,EAAG,CAAE,MAAAC,EAAO,MAAAC,EAAO,CAC3B,EAGD,KAAK,cAAc,SAAW,CAAE,CAACF,CAAI,EAAGC,CAAO,EAKvD,KAAK,cAAc,SAAW,CAAE,EAE7B,IACf,CAII,WAAWD,EAAMC,EAAQ,MAAOC,GAAO,CACnC,GAAID,IAAU,QAAaA,IAAU,OAASA,IAAU,OACpD,MAAM,IAAI,aAAa,gFAAgF,EAC3G,GAAIC,KAAU,QACVA,KAAU,eACVA,KAAU,aACV,MAAM,IAAI,aAAa,8FAA8F,EACzH,OAAIA,GACA,KAAK,cAAc,SAASF,CAAI,EAAI,CAAE,MAAAC,EAAO,MAAAC,EAAO,EAGpD,KAAK,cAAc,SAASF,CAAI,EAAIC,EAEjC,IACf,CAOI,MAAMhiB,EAAO,CAET,GADA,KAAK,cAAc,MAAQ,KAAK,gBAAgBA,CAAK,EACjD,KAAK,cAAc,QAAU,QAC7B,MAAM,KAAK,cAAc,KAAK,EAC9B,MAAM,IAAI,aAAa,yEAAyE,EACpG,OAAO,IACf,CAOI,OAAOtK,EAAQ,CAEX,GADA,KAAK,cAAc,OAAS,KAAK,gBAAgBA,CAAM,EACnD,KAAK,cAAc,SAAW,QAC9B,MAAM,KAAK,cAAc,MAAM,EAC/B,MAAM,IAAI,aAAa,0EAA0E,EACrG,OAAO,IACf,CAII,KAAKwsB,EAAM,CAEP,GADA,KAAK,cAAc,KAAO,KAAK,gBAAgBA,CAAI,EAC/C,KAAK,cAAc,OAAS,QAC5B,MAAM,KAAK,cAAc,IAAI,EAC7B,MAAM,IAAI,aAAa,wEAAwE,EACnG,OAAO,IACf,CAII,KAAKC,EAAM,CAEP,GADA,KAAK,cAAc,KAAO,KAAK,gBAAgBA,CAAI,EAC/C,KAAK,cAAc,OAAS,QAC5B,MAAM,KAAK,cAAc,IAAI,EAC7B,MAAM,IAAI,aAAa,wEAAwE,EACnG,OAAO,IACf,CAMI,SAAShuB,EAAO,CACZ,YAAK,cAAc,SAAWA,EACvB,IACf,CAII,QAAQiuB,EAAUC,EAAaC,GAAY,CACvC,YAAK,cAAc,SAAWF,EAC9B,KAAK,cAAc,YAAcC,EACjC,KAAK,cAAc,WAAaC,GACzB,IACf,CAII,YAAYC,EAAU,CAClB,YAAK,cAAc,SAAWA,EACvB,IACf,CAII,aAAc,CACV,YAAK,cAAc,YAAc,GAC1B,IACf,CAII,MAAM,WAAY,CACd,OAAQ,MAAM,KAAK,WAAU,GAAI,CAAC,CAC1C,CAII,MAAM,YAAa,CACf,GAAI,KAAK,cAAc,WAAa,aAChC,MAAM,IAAI,gCACd,KAAK,cAAc,YAAc,GACjC,MAAMnR,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,EAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,EAAyB,IAE7B,MAAM8D,GAAU,MAAM,KAAK,eAAenI,CAAW,EAErD,OAAIqE,GACA,MAAMrE,EAAY,kBAAmB,EAElCmI,EACnB,OACenlB,GAAO,CAEV,GAAIqhB,EACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAE3C,CACA,CAII,MAAM,mBAAoB,CACtB,MAAMA,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,EAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,EAAyB,IAE7B,KAAK,cAAc,YAAc,GACjC,MAAM8D,GAAU,MAAM,KAAK,6BAA6BnI,CAAW,EAEnE,OAAIqE,GACA,MAAMrE,EAAY,kBAAmB,EAElCmI,EACnB,OACenlB,GAAO,CAEV,GAAIqhB,EACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAC3C,CACA,CAII,MAAM,QAAS,CAEX,MAAM5gB,GADU,MAAM,KAAK,kBAAmB,GACvB,SAAS,CAAC,EACjC,GAAIA,GACA,KAAK,cAAc,WAAa,cAChC,KAAK,cAAc,YAAa,CAChC,MAAMlD,GAAW,KAAK,cAAc,UAAU,SAC9C,GAAI,KAAK,cAAc,uBAAuB,KAAM,CAChD,MAAMkW,GAAgBlW,GAAS,iBAAiB,eAAekD,CAAM,EACrE,GAAIgT,GAAc,QAAS,IACvB,KAAK,cAAc,YAAY,QAAS,EACxC,MAAM,IAAI,mCAAmClW,GAAS,KAAM,KAAK,cAAc,YAAakW,EAAa,CAC7H,KACiB,CACD,MAAMA,GAAgBlW,GAAS,cAAc,eAAekD,CAAM,EAClE,GAAIgT,KAAkB,KAAK,cAAc,YACrC,MAAM,IAAI,mCAAmClW,GAAS,KAAM,KAAK,cAAc,YAAakW,EAAa,CAC7H,CACA,CACQ,OAAIhT,IAAW,OACJ,KAEJA,CACf,CAII,MAAM,cAAe,CACjB,MAAMoF,EAAS,MAAM,KAAK,OAAQ,EAClC,GAAI,CAACA,EACD,MAAM,IAAI,oBAAoB,KAAK,cAAc,UAAU,OAAQ,KAAK,cAAc,UAAU,EAEpG,OAAOA,CACf,CAII,MAAM,SAAU,CACZ,GAAI,KAAK,cAAc,WAAa,aAChC,MAAM,IAAI,gCAEd,OADgB,MAAM,KAAK,kBAAmB,GAC/B,QACvB,CAKI,MAAM,UAAW,CACb,GAAI,KAAK,cAAc,WAAa,aAChC,MAAM,IAAI,gCACd,MAAMwb,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,EAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,EAAyB,IAE7B,KAAK,cAAc,YAAc,GACjC,MAAM8D,GAAU,MAAM,KAAK,kBAAkBnI,CAAW,EAExD,OAAIqE,GACA,MAAMrE,EAAY,kBAAmB,EAElCmI,EACnB,OACenlB,GAAO,CAEV,GAAIqhB,EACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAC3C,CACA,CAKI,MAAM,WAAY,CACd,GAAI,KAAK,cAAc,WAAa,aAChC,MAAM,IAAI,gCACd,MAAMA,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,EAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,EAAyB,IAE7B,KAAK,cAAc,YAAc,GACjC,MAAM8D,GAAU,MAAM,KAAK,mBAAmBnI,CAAW,EAEzD,OAAIqE,GACA,MAAMrE,EAAY,kBAAmB,EAElCmI,EACnB,OACenlB,GAAO,CAEV,GAAIqhB,EACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAC3C,CACA,CAKI,MAAM,iBAAkB,CACpB,GAAI,KAAK,cAAc,WAAa,aAChC,MAAM,IAAI,gCACd,MAAMA,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,EAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,EAAyB,IAE7B,KAAK,cAAc,YAAc,GACjC,MAAM+M,GAAiB,MAAM,KAAK,6BAA6BpR,CAAW,EAC1E,KAAK,cAAc,YAAc,GACjC,MAAMqR,GAAU,KAAK,cAAc,QAGnC,KAAK,cAAc,QAAUA,IAAU,GAAGA,EAAO,SACjD,MAAMC,GAAQ,MAAM,KAAK,kBAAkBtR,CAAW,EAChDmI,GAAU,CAACiJ,GAAe,SAAUE,EAAK,EAE/C,OAAIjN,GACA,MAAMrE,EAAY,kBAAmB,EAElCmI,EACnB,OACenlB,GAAO,CAEV,GAAIqhB,EACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAC3C,CACA,CAII,MAAM,QAAS,CACX,KAAK,cAAc,YAAc,GACjC,KAAM,CAAClP,EAAKoC,CAAU,EAAI,KAAK,sBAAuB,EAChD8M,GAAc,KAAK,kBAAmB,EAC5C,IAAIqE,GAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,GAAY,sBAAwB,KACpC,MAAMA,GAAY,iBAAkB,EACpCqE,GAAyB,IAE7B,MAAMkN,GAAY,IAAM,CACpB,GAAIvR,KAAgB,KAAK,YAErB,OAAOA,GAAY,QAAS,CAEnC,EACKmI,GAAUnI,GAAY,OAAOlP,EAAKoC,EAAYqe,GAAWA,EAAS,EAExE,OAAIlN,IACA,MAAMrE,GAAY,kBAAmB,EAElCmI,EACnB,OACenlB,GAAO,CAEV,GAAIqhB,GACA,GAAI,CACA,MAAMrE,GAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,CACA,CAII,MAAMwuB,EAA2BC,EAAmB,CAChD,OAAI,OAAOD,GAA8B,UACrC,KAAK,cAAc,MAAQA,EAEtB,OAAOA,GAA8B,UAC1C,KAAK,cAAc,MAAQ,GAC3B,KAAK,cAAc,cAAgBA,IAE9B,OAAOA,GAA8B,UAC1C,OAAOA,GAA8B,YACrC,KAAK,cAAc,MAAQ,GAC3B,KAAK,cAAc,QAAUA,GAE7BC,IACA,KAAK,cAAc,cAAgBA,GAEhC,IACf,CAII,UAAUC,EAAQ,CACd,YAAK,cAAc,QAAQ,KAAKA,CAAM,EAC/B,IACf,CAII,KAAKC,EAAWrB,EAAkB7c,GAAWqO,GAAW5O,GAAYoY,GAAesG,GAAerB,GAAa,CACvGrd,IACA,KAAK,cAAcA,EAAU,EAEjC,MAAM8K,GAAgB,IAAI,cAAc,KAAK,WAAY,KAAK,aAAa,EAC3EA,GAAc,UAAY2T,EAC1B3T,GAAc,YAAcuS,GAC5BvS,GAAc,cAAgBsN,GAC9BtN,GAAc,cAAgB4T,GAC9B5T,GAAc,iBAAmBsS,EACjCtS,GAAc,UAAY8D,GAE1B,KAAK,cAAc,eAAe,KAAK9D,EAAa,EACpD,MAAM6T,GAAwB7T,GAAc,SAC5C,GAAI6T,GAAuB,CACvB,GAAIA,GAAsB,kBACtB,CAAC,KAAK,cAAc,YAAa,CACjC,MAAMC,GAAwB,GAAGre,EAAS,IAAIoe,GAAsB,iBAAiB,YAAY,WACjG7T,GAAc,UAAYA,GAAc,UAClC,IAAIA,GAAc,SAAS,QAAQ8T,EAAqB,GACxD,GAAGA,EAAqB,EAC9C,CAEY9T,GAAc,MAAQ,KAAK,cAAc,YAAY,CACjD,KAAM,OACN,KAAMvK,GACN,SAAUoe,EAC1B,CAAa,EACG7T,GAAc,UACdA,GAAc,SAAS,wBACvB,KAAK,cAAc,YAAY,CAC3B,KAAM,OACN,KAAMA,GAAc,cACpB,SAAUA,GAAc,SAAS,sBACrD,CAAiB,CAEjB,KACa,CACD,IAAIkF,GAAW,GACf,GAAI,OAAOoN,GAAqB,WAAY,CACxC,MAAMrP,GAAkBqP,EAAiB,KAAK,SAAQ,CAAE,EACxD,KAAK,cAAcrP,GAAgB,eAAe,EAClDiC,GAAWjC,GAAgB,SAAU,CACrD,MAEgBiC,GAAWoN,EAEf,MAAMyB,GAAa,OAAOzB,GAAqB,YAC1CA,EAAiB,OAAO,EAAG,CAAC,IAAM,KAC/BA,EAAiB,OAAO,EAAE,IAAM,IACxCtS,GAAc,MAAQ,KAAK,cAAc,YAAY,CACjD,KAAM,OACN,KAAMvK,GACN,UAAWse,KAAe,GACpBzB,EACA,OACN,SAAUyB,KAAe,GAAO7O,GAAW,MAC3D,CAAa,CACb,CACA,CAII,wBAAyB,CACrB,GAAI,CAAC,KAAK,cAAc,UACpB,MAAM,IAAI,aAAa,wEAAwE,EAEnG,MAAM8O,EAAa,CAAE,EACfC,EAAkB,CAAE,EAC1B,GAAI,KAAK,cAAc,UAAU,YAAa,CAC1C,MAAM/1B,GAAW,KAAK,cAAc,UAAU,SAC9C81B,EAAW,KAAK,GAAG,KAAK,gCAAgC,KAAK,cAAc,UAAU,KAAM91B,EAAQ,CAAC,EACpG+1B,EAAgB,KAAK,GAAG,KAAK,wBAAwB,KAAK,cAAc,UAAU,KAAM/1B,EAAQ,CAAC,CAC7G,CAEQ,KAAK,cAAc,eAAe,QAAS2iB,IAAS,CAChD,GAAIA,GAAK,SACLmT,EAAW,KAAK,GAAG,KAAK,gCAAgCnT,GAAK,MAAM,KAAMA,GAAK,QAAQ,CAAC,EACvFoT,EAAgB,KAAK,GAAG,KAAK,wBAAwBpT,GAAK,MAAM,KAAMA,GAAK,QAAQ,CAAC,UAG/D,KAAK,cAAc,QAAQ,KAAMZ,IAAWA,GAAO,YAAcY,GAAK,MAAM,IAAI,EACnF,CACdmT,EAAW,KAAK,CACZ,UAAW,KAAK,OAAOnT,GAAK,MAAM,IAAI,EAAI,IAClE,CAAqB,EACD,MAAMqT,GAAiB,KAAK,cAAc,QAAQ,KAAMjU,IAAWA,GAAO,YAAcY,GAAK,MAAM,IAAI,EACvGoT,EAAgB,KAAKC,EAAc,CACvD,CAEA,CAAS,EAED,KAAK,cAAc,QACd,OAAQjU,IAAWgU,EAAgB,QAAQhU,EAAM,IAAM,EAAE,EACzD,QAASA,IAAW+T,EAAW,KAAK,CACrC,UAAW,KAAK,qBAAqB/T,GAAO,SAAS,EACrD,UAAWA,GAAO,SAC9B,CAAS,CAAC,EAEE+T,EAAW,SAAW,GACtBA,EAAW,KAAK,CAAE,UAAW,GAAG,CAAE,EAEtC,IAAIG,GAAW,GACX,KAAK,cAAc,UACf,YAAY,cAAc,KAAK,WAAW,MAAM,IAChDA,GAAW,eAAe,KAAK,cAAc,QAAQ,KAI7D,MAAMC,GAAQ,KAAK,cAAc,QAC5B,OAAQ5e,IAAUA,GAAM,OAAS,SACjCA,GAAM,WAAaA,GAAM,SAAS,EAClC,IAAKA,IACFA,GAAM,SACCA,GAAM,SAAW,IAAM,KAAK,OAAOA,GAAM,IAAI,EAChD,KAAK,aAAaA,GAAM,SAAS,EACrC,IACA,KAAK,OAAOA,GAAM,IAAI,CAC7B,EACKyK,GAAS,KAAK,+BAAgC,EAC9CgC,GAAY+R,EACb,IAAK/T,IAAWA,GAAO,WACvBA,GAAO,UACF,OAAS,KAAK,OAAOA,GAAO,SAAS,EACrC,GAAG,EACR,KAAK,IAAI,EACd,OAAQA,GACJgC,GACA,SACAmS,GAAM,KAAK,IAAI,EACf,KAAK,0BAA2B,EAChCD,EACZ,CAII,gCAAiC,CAC7B,KAAM,CAAE,eAAAE,EAAgB,iBAAAC,EAAkB,iBAAAC,EAAkB,EAAG,KAAK,cAC9D,CAAE,OAAAzgB,IAAW,KAAK,WACxB,IAAImM,GAAS,UACb,OAAIsU,GAAmB,GACf,YAAY,cAAczgB,EAAM,IAChCmM,IAAU,0BAA0B,KAAK,cAAc,gBAAgB,SAG3E,YAAY,iBAAiBnM,EAAM,GACnCwgB,EAAiB,OAAS,EAI1BrU,GAAS,uBAHmBqU,EACvB,IAAKE,IAAO,KAAK,qBAAqBA,EAAE,CAAC,EACzC,KAAK,IAAI,CACqC,KAE9CH,IACLpU,GAAS,oBAENA,EACf,CAII,sBAAuB,CAiLnB,OAzKc,KAAK,cAAc,eAAe,IAAKoF,GAAa,CAC9D,MAAMvQ,GAAWuQ,EAAS,SACpBoP,GAAuBpP,EAAS,UAChCqP,GAAwBrP,EAAS,MAAM,KAC7C,IAAIsP,GAAoBtP,EAAS,UAC3B,SAAWA,EAAS,UAAY,IAChC,GACN,MAAMhF,GAAcgF,EAAS,YAG7B,GAAI,CAAChF,IAAe,CAACvL,GAAU,CAC3B,MAAM8f,GAAkBvP,EAAS,MAAM,SACjCA,EAAS,MAAM,SACf,KAAK,aAAaoP,EAAoB,EAC5C,MAAQ,IACJpP,EAAS,UACT,SACAuP,GACA,IACA,KAAK,OAAOF,EAAqB,EACjC,KAAK,0BAA2B,GAC/BrP,EAAS,UACJ,OAAS,KAAK,qBAAqBA,EAAS,SAAS,EACrD,GAC1B,CAEY,GAAIvQ,GAAS,aAAeA,GAAS,gBAAiB,CAElD,MAAMgP,GAAYhP,GAAS,YACtB,IAAKxN,IACEotB,GACJ,IACAptB,GAAW,iBAAiB,aAC5B,IACA+Y,GACA,IACAvL,GAAS,aACT,IACAxN,GAAW,iBAAiB,YACnC,EACI,KAAK,OAAO,EACjB,MAAQ,IACJ+d,EAAS,UACT,SACA,KAAK,aAAaoP,EAAoB,EACtC,IACA,KAAK,OAAOC,EAAqB,EACjC,KAAK,0BAA2B,EAChC,OACA,KAAK,qBAAqB5Q,GAAY6Q,EAAiB,CAC3E,SACqB7f,GAAS,aAAeA,GAAS,mBAAoB,CAE1D,MAAMgP,GAAYhP,GACb,gBAAgB,YAAY,IAAKxN,KAC9BwN,GAAS,sBAAsB,YAC/B,gBACAA,GAAS,sBAAsB,sBAC/B6f,IACI,QACID,GACA,IACA5f,GAAS,sBACJ,oBAAoB,aACzB,KACAA,GAAS,sBACJ,mBACL,KAEJ4f,GACJ,IACA5f,GAAS,gBAAgB,aACzB,IACAxN,GAAW,iBAAiB,aAC5B,IACA+Y,GACA,IACA/Y,GAAW,iBAAiB,aACnC,EACI,KAAK,OAAO,EACjB,GAAI,CAACwc,GACD,MAAM,IAAI,aAAa,YAAYhP,GAAS,eAAe,IAAI,IAAIA,GAAS,YAAY,8BAA8B,EAC1H,MAAQ,IACJuQ,EAAS,UACT,SACA,KAAK,aAAaoP,EAAoB,EACtC,IACA,KAAK,OAAOC,EAAqB,EACjC,KAAK,0BAA2B,EAChC,OACA,KAAK,qBAAqB5Q,GAAY6Q,EAAiB,CAC3E,KACiB,CAED,MAAM3F,GAAoBla,GAAS,uBAAuB,UACpD+Z,GAAgBxJ,EAAS,cAC/B,IAAIwP,GAAoB,GAAIC,GAAuB,GACnD,OAAIhgB,GAAS,UACT+f,GAAoB/f,GAAS,YACxB,IAAKxN,IAEEunB,GACJ,IACAvnB,GAAW,aACX,IACA+Y,GACA,IACA/Y,GAAW,iBAAiB,YACnC,EACI,KAAK,OAAO,EACjBwtB,GAAuBhgB,GAAS,mBAC3B,IAAKxN,IAEEotB,GACJ,IACAptB,GAAW,iBAAiB,aAC5B,IACAunB,GACA,IACAvnB,GAAW,YAClB,EACI,KAAK,OAAO,IAGjButB,GAAoB/f,GACf,gBAAgB,mBAAmB,IAAKxN,IAEjCunB,GACJ,IACAvnB,GAAW,aACX,IACA+Y,GACA,IACA/Y,GAAW,iBAAiB,YACnC,EACI,KAAK,OAAO,EACjBwtB,GAAuBhgB,GAClB,gBAAgB,YAAY,IAAKxN,IAE1BotB,GACJ,IACAptB,GAAW,iBAAiB,aAC5B,IACAunB,GACA,IACAvnB,GAAW,YAClB,EACI,KAAK,OAAO,GAEb,IACJ+d,EAAS,UACT,SACA,KAAK,aAAa2J,EAAiB,EACnC,IACA,KAAK,OAAOH,EAAa,EACzB,KAAK,0BAA2B,EAChC,OACA,KAAK,qBAAqBgG,EAAiB,EAC3C,IACAxP,EAAS,UACT,SACA,KAAK,aAAaoP,EAAoB,EACtC,IACA,KAAK,OAAOC,EAAqB,EACjC,KAAK,0BAA2B,EAChC,OACA,KAAK,qBAAqBI,GAAuBH,EAAiB,CACtF,CACA,CAAS,EACY,KAAK,GAAG,CAC7B,CAII,yBAA0B,CACtB,MAAI,CAAC,KAAK,cAAc,UAAY,CAAC,KAAK,cAAc,SAAS,OACtD,GACH,aACJ,KAAK,qBAAqB,KAAK,cAAc,SAAS,KAAK,IAAI,CAAC,CAC5E,CAII,yBAA0B,CACtB,MAAMI,EAAW,KAAK,cAAc,YACpC,OAAI,OAAO,KAAKA,CAAQ,EAAE,SAAW,EAC1B,GACH,aACJ,OAAO,KAAKA,CAAQ,EACf,IAAK7Q,GAAe,CACrB,MAAM8Q,GAAa,OAAOD,EAAS7Q,CAAU,GAAM,SAC7C6Q,EAAS7Q,CAAU,EACnB6Q,EAAS7Q,CAAU,EAAE,MACnB,IACA6Q,EAAS7Q,CAAU,EAAE,MACvBjC,GAAY,KAAK,cAAc,QAAQ,KAAMzY,IAAMA,GAAE,YAAc0a,CAAU,EACnF,GAAIjC,IACA,CAACA,GAAU,WACXiC,EAAW,QAAQ,GAAG,IAAM,GAAI,CAChC,MAAM+Q,GAAgB/Q,EAAW,MAAM,GAAG,EACpCzO,GAAYwf,GAAc,CAAC,EAC3B1gB,GAAe0gB,GAAc,MAAM,CAAC,EAAE,KAAK,GAAG,EAC9Czf,GAAQ,KAAK,cAAc,QAAQ,KAAMA,IAAUA,GAAM,OAASC,EAAS,EACjF,GAAID,GAAO,CACP,MAAM5B,GAAS4B,GAAM,SAAS,2BAA2BjB,EAAY,EACrE,GAAIX,GAAQ,CACR,MAAMshB,GAAa,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWzf,GAAW7B,GAAO,YAAY,EAC3G,OAAQ,KAAK,OAAOshB,EAAU,EAAI,IAAMF,EACpE,CACA,CACA,CACgB,OAAQ,KAAK,qBAAqB9Q,CAAU,EAAI,IAAM8Q,EACzD,CAAA,EACI,KAAK,IAAI,CAC1B,CAII,6BAA8B,CAG1B,IAAI1uB,EAAS,KAAK,cAAc,OAAQsK,EAAQ,KAAK,cAAc,MAOnE,GANI,CAACtK,GACD,CAACsK,GACD,KAAK,cAAc,eAAe,SAAW,IAC7CtK,EAAS,KAAK,cAAc,KAC5BsK,EAAQ,KAAK,cAAc,MAE3B,KAAK,WAAW,OAAO,QAAQ,OAAS,QAAS,CAMjD,IAAIoC,GAAS,GAKb,IAJKpC,GAAStK,IACV,OAAO,KAAK,KAAK,cAAc,WAAW,EAAE,QAAU,IACtD0M,GAAS,2BAETpC,GAAStK,EACT,OAAQ0M,GACJ,WACA1M,EACA,oBACAsK,EACA,aACR,GAAIA,EACA,OAAQoC,GAAS,6BAA+BpC,EAAQ,aAC5D,GAAItK,EACA,OAAO0M,GAAS,WAAa1M,EAAS,OACtD,SACiB,YAAY,cAAc,KAAK,WAAW,MAAM,GACrD,KAAK,WAAW,OAAO,QAAQ,OAAS,gBACxC,KAAK,WAAW,OAAO,QAAQ,OAAS,OACxC,KAAK,WAAW,OAAO,QAAQ,OAAS,UAAW,CACnD,GAAIsK,GAAStK,EACT,MAAO,UAAYsK,EAAQ,WAAatK,EAC5C,GAAIsK,EACA,MAAO,UAAYA,EACvB,GAAItK,EACA,MAAM,IAAI,mCAC1B,SACiB,YAAY,eAAe,KAAK,WAAW,MAAM,EAAG,CACzD,GAAIsK,GAAStK,EACT,MAAO,UAAYsK,EAAQ,WAAatK,EAC5C,GAAIsK,EACA,MAAO,UAAYA,EACvB,GAAItK,EACA,MAAO,oBAAsBA,CAC7C,SACiB,KAAK,WAAW,OAAO,QAAQ,OAAS,SAAU,CACvD,GAAIsK,GAAStK,EACT,MAAQ,WACJA,EACA,oBACAsK,EACA,aACR,GAAIA,EACA,MAAO,eAAiBA,EAAQ,aACpC,GAAItK,EACA,MAAO,WAAaA,EAAS,OAC7C,KACa,CACD,GAAIsK,GAAStK,EACT,MAAO,UAAYsK,EAAQ,WAAatK,EAC5C,GAAIsK,EACA,MAAO,UAAYA,EACvB,GAAItK,EACA,MAAO,WAAaA,CACpC,CACQ,MAAO,EACf,CASI,2BAA4B,CACxB,GAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,QACxC,OAAQ,KAAK,cAAc,SAAQ,CAC/B,IAAK,mBACD,MAAO,4BACX,IAAK,oBACD,MAAO,2BACX,IAAK,aACD,MAAO,gBAC3B,CAEQ,MAAO,EACf,CAII,sBAAuB,CACnB,MAAMwN,EAAS,KAAK,WAAW,OAC/B,IAAIqhB,EAAmB,GACvB,GAAI,KAAK,cAAc,WAAY,CAC/B,GAAI,EAAE,YAAY,iBAAiBrhB,CAAM,GACrCA,EAAO,QAAQ,OAAS,eACxB,MAAM,IAAI,aAAa,8CAA8C,EAEzE,GAAI,KAAK,cAAc,WAAW,OAAS,EACvC,MAAM,IAAI,aAAa,qCAAqC,EAEhEqhB,EAAmB,OAAS,KAAK,cAAc,WAAW,KAAK,IAAI,CAC/E,CACQ,IAAIC,GAAmB,GAOvB,OANI,KAAK,cAAc,WAAa,SAChCA,GAAmB,UAEd,KAAK,cAAc,WAAa,gBACrCA,GAAmB,gBAEf,KAAK,cAAc,SAAQ,CAC/B,IAAK,mBACD,GAAIthB,EAAO,QAAQ,OAAS,SACxBA,EAAO,QAAQ,OAAS,eACxB,OAAI,YAAY,0BAA0BA,EAAQ,OAAO,EAC7C,aAAeqhB,EAAmBC,GAGnC,sBAGV,GAAIthB,EAAO,QAAQ,OAAS,UAC7B,MAAO,sBAEN,GAAI,YAAY,iBAAiBA,CAAM,EACxC,MAAO,aAAeqhB,EAAmBC,GAExC,GAAIthB,EAAO,QAAQ,OAAS,SAC7B,MAAO,cAEN,GAAIA,EAAO,QAAQ,OAAS,QAC7B,MAAO,GAGP,MAAM,IAAI,mCAElB,IAAK,oBACD,GAAI,YAAY,cAAcA,CAAM,GAChCA,EAAO,QAAQ,OAAS,gBACxBA,EAAO,QAAQ,OAAS,SACxB,MAAO,cAAgBshB,GAEtB,GAAI,YAAY,iBAAiBthB,CAAM,GACxCA,EAAO,QAAQ,OAAS,cACxB,MAAO,cAAgBqhB,EAAmBC,GAEzC,GAAIthB,EAAO,QAAQ,OAAS,QAC7B,MAAO,GAGP,MAAM,IAAI,mCAElB,IAAK,4BACD,GAAI,YAAY,iBAAiBA,CAAM,EACnC,MAAO,cAAgBqhB,EAAmB,eAEzC,GAAI,YAAY,cAAcrhB,CAAM,EACrC,MAAO,0BAGP,MAAM,IAAI,mCAElB,IAAK,4BACD,GAAI,YAAY,iBAAiBA,CAAM,GACnCA,EAAO,QAAQ,OAAS,cACxB,MAAO,cAAgBqhB,EAAmB,UAEzC,GAAI,YAAY,cAAcrhB,CAAM,EACrC,MAAO,qBAGP,MAAM,IAAI,mCAElB,IAAK,oBACD,GAAI,YAAY,iBAAiBA,CAAM,GACnCA,EAAO,QAAQ,OAAS,cACxB,MAAQ,qBACJqhB,EACAC,GAGJ,MAAM,IAAI,mCAElB,IAAK,gBACD,GAAI,YAAY,iBAAiBthB,CAAM,EACnC,MAAQ,iBAAmBqhB,EAAmBC,GAG9C,MAAM,IAAI,mCAElB,QACI,MAAO,EACvB,CACA,CAII,wBAAyB,CACrB,GAAI,CAAC,KAAK,cAAc,SAAW,CAAC,KAAK,cAAc,QAAQ,OAC3D,MAAO,GACX,MAAMjP,EAAa,KAAK,cAAc,QACjC,IAAI,CAAClF,EAAQlc,KAAU,CACxB,OAAQkc,EAAO,KAAI,CACf,IAAK,MACD,OAASlc,GAAQ,EAAI,OAAS,IAC1B,KAAK,qBAAqBkc,EAAO,SAAS,EAClD,IAAK,KACD,OAASlc,GAAQ,EAAI,MAAQ,IACzB,KAAK,qBAAqBkc,EAAO,SAAS,EAClD,QACI,OAAO,KAAK,qBAAqBA,EAAO,SAAS,CACrE,CACS,CAAA,EACI,KAAK,GAAG,EACb,OAAKkF,EAAW,OAET,WAAaA,EADT,EAEnB,CACI,gCAAgC1Q,EAAWvX,EAAU,CACjD,MAAMm3B,GAAe,KAAK,cAAc,QAAQ,KAAMpV,IAAWA,GAAO,YAAcxK,CAAS,EACzFuO,GAAU,CAAE,EAWlB,GAVIqR,IACArR,GAAQ,KAAK,GAAG9lB,EAAS,QAAQ,OAAQ0V,IAAWA,GAAO,WAAa,EAAI,CAAC,EAEjFoQ,GAAQ,KAAK,GAAG9lB,EAAS,QAAQ,OAAQ0V,IAC9B,KAAK,cAAc,QAAQ,KAAMqM,IAAWA,GAAO,YACtDxK,EAAY,IAAM7B,GAAO,YAAY,CAC5C,CAAC,EAIEoQ,GAAQ,SAAW,EAEnB,MAAO,CAAE,EACb,MAAMsR,GAA4B,KAAK,cAAc,YAC/Cp3B,EAAS,eAAe,OAAQ8mB,IAAkBhB,GAAQ,QAAQgB,EAAa,IAAM,EAAE,EACvF,CAAE,EACF1B,GAAa,CAAC,GAAGU,GAAS,GAAGsR,EAAyB,EACtDC,GAAe,CAAE,EACjBC,GAAmB,KAAK,OAAO/f,CAAS,EAC9C,OAAA6N,GAAW,QAAS1P,IAAW,CAC3B,IAAI6hB,GAAgBD,GAAmB,IAAM,KAAK,OAAO5hB,GAAO,YAAY,EACxEA,GAAO,mBAAqBA,GAAO,QACnC6hB,GAAgB,IAAI7hB,GAAO,MAAM4hB,EAAgB,CAAC,KAElD,KAAK,WAAW,OAAO,aAAa,QAAQ5hB,GAAO,IAAI,IAAM,MACzD,YAAY,cAAc,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,kBAGxC6hB,GAAgB,GAFE,KAAK,WAAW,OAAO,QAAQ,qBACtB,SAAW,WACb,IAAIA,EAAa,KAE1C,YAAY,iBAAiB,KAAK,WAAW,MAAM,IAC/C7hB,GAAO,UAEP6hB,GAAgB,gBAAgBA,EAAa,KAAK7hB,GAAO,SAAS,UAGlE6hB,GAAgB,gBAAgBA,EAAa,WAEjD,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxCA,GAAgB,GAAGA,EAAa,gBAExC,MAAMC,GAAa,KAAK,cAAc,QAAQ,OAAQzV,IAAWA,GAAO,YAAcxK,EAAY,IAAM7B,GAAO,YAAY,EAC3H,GAAI8hB,GAAW,OACXA,GAAW,QAASzT,IAAc,CAC9BsT,GAAa,KAAK,CACd,UAAWE,GACX,UAAWxT,GAAU,UACfA,GAAU,UACV,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWxM,EAAW7B,GAAO,YAAY,EAE9F,QAASqO,GAAU,OAC3C,CAAqB,CACrB,CAAiB,MAEA,CACD,GAAIrO,GAAO,kBAEP,OAEJ2hB,GAAa,KAAK,CACd,UAAWE,GACX,UAAW,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWhgB,EAAW7B,GAAO,YAAY,EAEnG,QAASyhB,EAC7B,CAAiB,CACjB,CACA,CAAS,EACME,EACf,CACI,wBAAwB9f,EAAWvX,EAAU,CACzC,MAAMy3B,GAAa,KAAK,cAAc,QAAQ,KAAM1V,IAAWA,GAAO,YAAcxK,CAAS,EAC7F,OAAIkgB,GACO,CAACA,EAAU,EACf,KAAK,cAAc,QAAQ,OAAQ1V,IAC/B/hB,EAAS,QAAQ,KAAM0V,IAAWqM,GAAO,YAAcxK,EAAY,IAAM7B,GAAO,YAAY,CACtG,CACT,CACI,wBAAyB,CACrB,MAAM0O,EAAY,KAAK,cAAc,UAAU,KAEzCqD,GADW,KAAK,cAAc,UAAU,SACd,eAC1BiQ,GAAgB,KAAK,OAAOtT,CAAS,EAG3C,GAAI,KAAK,cAAc,eAAe,SAAW,GAC7C,KAAK,cAAc,qBAAqB,SAAW,GACnD,KAAK,cAAc,wBAAwB,SAAW,EACtD,MAAO,WAGX,GAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,eACxC,YAAY,iBAAiB,KAAK,WAAW,MAAM,EAGnD,MAAQ,kBACJqD,GACK,IAAKlc,IAAM,GAAGmsB,EAAa,IAAI,KAAK,OAAOnsB,GAAE,YAAY,CAAC,EAAE,EAC5D,KAAK,IAAI,EACd,KAER,GAAI,YAAY,cAAc,KAAK,WAAW,MAAM,EAGhD,MAAQ,kBACJkc,GACK,IAAKlc,IAAM,GAAGmsB,EAAa,IAAI,KAAK,OAAOnsB,GAAE,YAAY,CAAC,EAAE,EAC5D,KAAK,IAAI,EACd,IAER,GAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,QAAS,CAKjD,MAAMwa,GAAoB0B,GACrB,IAAKX,IAAkB,GAAG4Q,EAAa,IAAI,KAAK,OAAO5Q,GAAc,YAAY,CAAC,EAAE,EACpF,KAAK,WAAW,EACrB,OAAIW,GAAe,SAAW,EACnB,kBAAkB1B,EAAiB,KAEvC,yBAAyBA,EAAiB,KAC7D,CACQ,OAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,UAGpC0B,GAAe,SAAW,EACnB,kBAAkBiQ,EAAa,IAAI,KAAK,OAAOjQ,GAAe,CAAC,EAAE,YAAY,CAAC,KAKlF,yBAHmBA,GACrB,IAAKX,IAAkB,QAAQ4Q,EAAa,IAAI,KAAK,OAAO5Q,GAAc,YAAY,CAAC,aAAa,EACpG,KAAK,WAAW,CAC4B,MAO7C,kBACJW,GACK,IAAKlc,IAAM,GAAGmsB,EAAa,IAAI,KAAK,OAAOnsB,GAAE,YAAY,CAAC,EAAE,EAC5D,KAAK,eAAe,EACzB,IACZ,CACI,MAAM,kBAAkBuY,EAAa,CACjC,MAAM6T,EAAW,KAAK,uBAAwB,EACxC1L,GAAU,MAAM,KAAK,MAAK,EAC3B,QAAO,EACP,QAAO,EACP,OAAO,MAAS,EAChB,MAAM,MAAS,EACf,KAAK,MAAS,EACd,KAAK,MAAS,EACd,OAAO0L,EAAU,KAAK,EACtB,UAAU,sBAAsB,EAChC,eAAe7T,CAAW,EAC/B,MAAI,CAACmI,IAAW,CAACA,GAAQ,CAAC,GAAK,CAACA,GAAQ,CAAC,EAAE,IAChC,EACJ,SAASA,GAAQ,CAAC,EAAE,GAAM,CACzC,CACI,MAAM,mBAAmBnI,EAAa,CAQlC,OAPgB,MAAM,KAAK,WACtB,mBAAkB,EAClB,UAAS,EACT,OAAO,IAAK,YAAY,EACxB,YAAY,IAAI,EAChB,MAAM,CAAC,EACP,eAAeA,CAAW,GAChB,OAAS,CAChC,CACI,kBAAmB,CAGf,GAAI,KAAK,cAAc,UAAU,SAAU,CAWvC,GAVI,KAAK,YAAY,uBACjB,KAAK,cAAc,qBACf,KAAK,YAAY,sBAErB,KAAK,YAAY,SACjB,KAAK,QAAQ,KAAK,YAAY,OAAO,EAErC,KAAK,YAAY,aACjB,KAAK,YAAa,EAElB,KAAK,YAAY,OAAQ,CACzB,MAAM/B,EAAS,MAAM,QAAQ,KAAK,YAAY,MAAM,EAC9C,SAAS,4BAA4B,KAAK,YAAY,MAAM,EAC5D,KAAK,YAAY,OACvB,KAAK,YAAYA,EAAQ,KAAK,cAAc,UAAU,SAAU,KAAK,cAAc,UAAU,IAAI,CACjH,CAKY,GAJI,KAAK,QAAQ,QACb,KAAK,OAAO,KAAK,OAAO,EAE5B,KAAK,QAAU,CAAE,EACb,KAAK,YAAY,UAAW,CAC5B,MAAM6V,EAAY,MAAM,QAAQ,KAAK,YAAY,SAAS,EACpD,SAAS,4BAA4B,KAAK,YAAY,SAAS,EAC/D,KAAK,YAAY,UACvB,KAAK,eAAeA,EAAW,OAAO,KAAK,YAAY,QAAW,SAC5D,KAAK,YAAY,OACjB,OAAW,KAAK,cAAc,UAAU,SAAU,KAAK,cAAc,UAAU,IAAI,EACrF,KAAK,YAAY,qBAAuB,IACxC,KAAK,cAAc,uBAAyB,QAC5C,KAAK,oBAAoBA,EAAW,OAAO,KAAK,YAAY,QAAW,SACjE,KAAK,YACF,OACH,OAAW,KAAK,cAAc,UAAU,SAAU,KAAK,cAAc,UAAU,IAAI,CAE7G,CA+FY,GA9FI,KAAK,QAAQ,QACb,KAAK,UAAU,KAAK,OAAO,EAE3B,KAAK,YAAY,QACjB,KAAK,WAAa,KAAK,WAAW,KAAK,YAAY,MAAO,KAAK,cAAc,UAAU,SAAU,KAAK,cAAc,UAAU,IAAI,EAC9H,KAAK,WAAW,QAChB,KAAK,SAAS,KAAK,WAAW,OAAO,EAAG,CAAC,IAAM,IACzC,IAAM,KAAK,WAAa,IACxB,KAAK,UAAU,GAEzB,KAAK,YAAY,OACjB,KAAK,WAAW,KAAK,YAAY,MAAO,KAAK,cAAc,UAAU,SAAU,KAAK,cAAc,UAAU,IAAI,EAGhH,KAAK,MAAM,QACX,KAAK,MAAM,QAASjV,GAAS,CACrBA,EAAK,QAAU,CAACA,EAAK,UAIjBA,EAAK,OAAS,QACd,KAAK,mBAAmB,GAAGA,EAAK,WAAW,IAAIA,EAAK,iBAAiB,YAAY,GAAIA,EAAK,KAAK,EAG/F,KAAK,kBAAkB,GAAGA,EAAK,WAAW,IAAIA,EAAK,iBAAiB,YAAY,GAAIA,EAAK,KAAK,EAK9FA,EAAK,OAAS,QACd,KAAK,UAAU,GAAGA,EAAK,WAAW,IAAIA,EAAK,iBAAiB,YAAY,GAAIA,EAAK,KAAK,EAGtF,KAAK,SAAS,GAAGA,EAAK,WAAW,IAAIA,EAAK,iBAAiB,YAAY,GAAIA,EAAK,KAAK,CAYjH,CAAiB,EAMD,KAAK,YAAY,OAAS,QAI1B,KAAK,KAAK,KAAK,YAAY,IAAI,EAI/B,KAAK,YAAY,OAAS,QAI1B,KAAK,KAAK,KAAK,YAAY,IAAI,EAI/B,OAAO,KAAK,YAAY,OAAU,SAClC,KAAK,MAAM,KAAK,YAAY,KAAK,EAE5B,OAAO,KAAK,YAAY,OAAU,UACvC,KAAK,MAAM,KAAK,YAAY,KAAK,EAE5B,OAAO,KAAK,YAAY,OAAU,UACvC,KAAK,MAAM,KAAK,YAAY,MAAM,GAAI,KAAK,YAAY,MAAM,YAAY,EAEzE,KAAK,YAAY,OACb,KAAK,YAAY,KAAK,UACtB,OAAO,KAAK,KAAK,YAAY,KAAK,QAAQ,EAAE,QAASjlB,GAAQ,CACzD,KAAK,SAAS,KAAK,YAAY,KAAK,SAASA,CAAG,EAAGA,CAAG,CAC9E,CAAqB,EACD,KAAK,YAAY,KAAK,WACtB,OAAO,KAAK,KAAK,YAAY,KAAK,SAAS,EAAE,QAASA,GAAQ,CAC1D,KAAK,UAAU,KAAK,YAAY,KAAK,UAAUA,CAAG,EAAGA,CAAG,CAChF,CAAqB,EACD,KAAK,YAAY,KAAK,mBACtB,OAAO,KAAK,KAAK,YAAY,KAAK,iBAAiB,EAAE,QAASA,GAAQ,CAClE,KAAK,kBAAkB,KAAK,YAAY,KAAK,kBAAkBA,CAAG,EAAGA,CAAG,CAChG,CAAqB,EACD,KAAK,YAAY,KAAK,oBACtB,OAAO,KAAK,KAAK,YAAY,KAAK,kBAAkB,EAAE,QAASA,GAAQ,CACnE,KAAK,mBAAmB,KAAK,YAAY,KAAK,mBAAmBA,CAAG,EAAGA,CAAG,CAClG,CAAqB,GAEL,KAAK,YAAY,MACjB,GAAI,KAAK,YAAY,KAAK,OAAS,aAC/B,KAAK,QAAQ,KAAK,YAAY,KAAK,KAAM,KAAK,YAAY,KAAK,OAAO,UAEjE,KAAK,YAAY,KAAK,OAAS,oBACpC,KAAK,YAAY,KAAK,OAAS,qBAC/B,KAAK,YAAY,KAAK,OAAS,cAC/B,KAAK,YAAY,KAAK,OAClB,6BACJ,KAAK,YAAY,KAAK,OAClB,6BACJ,KAAK,YAAY,KAAK,OAAS,qBAC/B,KAAK,YAAY,KAAK,OAAS,gBAAiB,CAChD,MAAMm6B,EAAa,KAAK,YAAY,KAAK,OACnC,KAAK,YAAY,KAAK,OAAO,IAAKlwB,GAAU,CAC1C,MAAM4oB,GAAa,KAAK,cAAc,QAAQ,KAAMjZ,IACxCA,GAAM,SACT,yBAA2B3P,CACnC,EACD,GAAI,CAAC4oB,GACD,MAAM,IAAI,aAAa,IAAI5oB,CAAK,6BAA6B,EAEjE,OAAO,KAAK,OAAO4oB,GAAW,IAAI,CACrC,CAAA,EACC,OACN,KAAK,QAAQ,KAAK,YAAY,KAAK,KAAM,OAAWsH,CAAU,EAC1D,KAAK,YAAY,KAAK,UACtB,KAAK,YAAY,KAAK,YAAY,KAAK,QAAQ,CAEvE,EAEgB,KAAK,YAAY,kBAAoB,GACrC,KAAK,mBAAoB,EAEpB,OAAO,KAAK,YAAY,iBAAoB,UACjD,KAAK,mBAAmB,KAAK,YAAY,eAAe,EAExD,KAAK,YAAY,qBAAuB,IACxC,iBAAiB,mBAAmB,KAAM,KAAK,cAAc,UAAU,KAAM,KAAK,cAAc,UAAU,QAAQ,EAElH,KAAK,YAAY,cAAgB,KACjC,KAAK,cAAc,eAAiB,GAepD,CACA,CACI,uBAAuBnV,EAAkB,CACrC,KAAK,kBAAkB,KAAKA,CAAgB,CACpD,CAII,MAAM,6BAA6BoB,EAAa,CAC5C,GAAI,CAAC,KAAK,cAAc,UACpB,MAAM,IAAI,aAAa,sDAAsD,EACjF,IAAK,KAAK,cAAc,WAAa,oBACjC,KAAK,cAAc,WAAa,qBAChC,KAAK,cAAc,WAAa,6BAChC,KAAK,cAAc,WAAa,6BAChC,KAAK,cAAc,WAAa,qBAChC,KAAK,cAAc,WAAa,kBAChC,CAACA,EAAY,oBACb,MAAM,IAAI,wCACd,GAAI,KAAK,cAAc,WAAa,aAAc,CAC9C,MAAM9jB,GAAW,KAAK,cAAc,UAAU,SAC9C,GAAI,CAACA,GAAS,eAAiB,CAACA,GAAS,iBACrC,MAAM,IAAI,iCAAiCA,GAAS,IAAI,CACxE,CACQ,MAAM83B,EAAmB,IAAIC,mBAAiB,KAAK,WAAYjU,EAAa,KAAK,cAAc,oBAAoB,EAC7GkU,GAAsB,IAAI,oBAAoB,KAAK,WAAYlU,EAAa,KAAK,cAAc,uBAAuB,EACtF,IAAI,yCAAyC,KAAK,aAAa,EACvE,UAAW,EACA,IAAI,4CAA4C,KAAK,aAAa,EAC1E,UAAW,EAC5C,IAAIoK,GAAa,GAAIxF,GAAW,CAAE,EAKlC,IAAK,KAAK,cAAc,MAAQ,KAAK,cAAc,OAC/C,KAAK,cAAc,eAAe,OAAS,EAAG,CAG9C,KAAM,CAACuP,GAASpB,EAAQ,EAAI,KAAK,0CAA0C,eAAe,EACpF72B,GAAW,KAAK,cAAc,UAAU,SACxCk4B,GAAgB,KAAK,cAAc,UAAU,KAC7CC,GAAen4B,GAAS,eAAe,IAAK8mB,IAAkB,CAChE,MAAM4Q,GAAgB,KAAK,OAAO,eAAe,EAC3CU,GAAc,KAAK,OAAO,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAWF,GAAepR,GAAc,YAAY,CAAC,EAC/H+P,GAASuB,EAAW,IAErBvB,GAASuB,EAAW,EAAI,OAC5B,MAAM9gB,GAAQ,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAW,OAAS4gB,GAAepR,GAAc,YAAY,EAC1H,MAAO,GAAG4Q,EAAa,IAAIU,EAAW,OAAO,KAAK,OAAO9gB,EAAK,CAAC,EAC/E,CAAa,EACK+gB,GAAgB,KAAK,MAAO,EAE5BC,GAA0BD,GAAc,cAAc,WAkB5D,GAjBAnK,GAAa,MAAM,IAAI,mBAAmB,KAAK,WAAYpK,CAAW,EACjE,OAAO,YAAYqU,GAAa,KAAK,IAAI,CAAC,EAAE,EAC5C,UAAUF,EAAO,EACjB,KAAK,IAAII,GACT,QAAO,EACP,gBAAgB,EAAK,EACrB,SAAU,CAAA,IAAK,eAAe,EAC9B,gBAAgBC,EAAuB,EACvC,OAAO,KAAK,cAAc,IAAI,EAC9B,MAAM,KAAK,cAAc,IAAI,EAC7B,QAAQzB,EAAQ,EAChB,MAAM,KAAK,cAAc,OAAS,KAAK,cAAc,QACpD,GAAG,KAAK,cAAc,OAAO,cAC7B,KAAK,cAAc,MAAO,KAAK,cAAc,aAAa,EAC3D,cAAc,KAAK,cAAe,CAAA,EAClC,oBAAoB,KAAK,cAAc,gBAAgB,EACvD,WAAY,EACb3I,GAAW,OAAS,EAAG,CACvB,IAAItI,GAAY,GAChB,MAAM5O,GAAa,CAAE,EACrB,GAAIhX,GAAS,uBACT4lB,GAAYsI,GACP,IAAI,CAAChrB,GAAQ2D,KACP7G,GAAS,eACX,IAAK8mB,IAAkB,CACxB,MAAMyR,GAAW,oBAAoB1xB,EAAK,IAAIigB,GAAc,YAAY,GAClE0R,GAAiB,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAW,OAASN,GAAepR,GAAc,YAAY,EACnI,OAAA9P,GAAWuhB,EAAQ,EACfr1B,GAAOs1B,EAAc,EAClB,GAAGN,EAAa,IAAIpR,GAAc,YAAY,KAAKyR,EAAQ,EACrE,CAAA,EACI,KAAK,OAAO,CACpB,EACI,KAAK,MAAM,MAEf,CACD,MAAMjhB,GAAQ,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAW,OAAS4gB,GAAel4B,GAAS,eAAe,CAAC,EAAE,YAAY,EACjI4mB,GAAMsH,GAAW,IAAKhrB,IAAWA,GAAOoU,EAAK,CAAC,EAC9BsP,GAAI,MAAOpR,IAAO,OAAOA,IAAO,QAAQ,EAG1DoQ,GAAY,GAAGsS,EAAa,IAAIl4B,GAAS,eAAe,CAAC,EAAE,YAAY,QAAQ4mB,GAAI,KAAK,IAAI,CAAC,KAG7F5P,GAAW,iBAAsB4P,GACjChB,GACIsS,GACI,IACAl4B,GAAS,eAAe,CAAC,EAAE,aAC3B,6BAEhC,CACgBkuB,GAAa,MAAM,KAAK,MAAK,EACxB,mBAAmB,CACpB,+BAAgCtI,EACnC,CAAA,EACI,cAAc5O,EAAU,EACxB,eAAe8M,CAAW,CAC/C,CACA,MAEYoK,GAAa,MAAM,KAAK,eAAepK,CAAW,EAEtD,GAAIoK,GAAW,OAAS,EAAG,CAEvB,MAAMF,GAAuB,MAAM8J,EAAiB,KAAK5J,EAAU,EAC7DD,GAA0B,MAAM+J,GAAoB,KAAK9J,EAAU,EAEzExF,GADoB,IAAI,iCAAiC,KAAK,cAAe,KAAK,WAAW,OAAQsF,GAAsBC,GAAyB,KAAK,WAAW,EAC7I,UAAUC,GAAY,KAAK,cAAc,SAAS,EAErE,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,aAC7B,MAAMpK,EAAY,YAAY,UAAU,OAAQ,KAAK,cAAc,UAAU,SAAU4E,EAAQ,CAE/G,CACQ,GAAI,KAAK,cAAc,uBAAyB,QAAS,CACrD,MAAM+P,GAAgC,IAAIC,iBAA8B,KAAK,WAAY5U,CAAW,EACpG,MAAM,QAAQ,IAAI,KAAK,kBAAkB,IAAI,MAAOlN,IAAa,CAC7D,MAAM+hB,GAAiB/hB,GAAS,sBAAsB,OAChD8c,GAAgB9c,GAAS,sBAAsB,WAC/CmL,GAAS,MAAM,QAAQ,KAAK,YAAY,MAAM,EAC9C,SAAS,4BAA4B,KAAK,YAAY,MAAM,EAC5D,KAAK,YAAY,OACjB6V,GAAY,MAAM,QAAQ,KAAK,YAAY,SAAS,EACpD,SAAS,4BAA4B,KAAK,YAAY,SAAS,EAC/D,KAAK,YAAY,UACjBhT,GAAe,KAAK,mBAAmBd,CAAW,EACnD,OAAO4P,EAAa,EACpB,KAAKiF,GAAgBjF,EAAa,EAClC,eAAe,CAChB,OAAQ3R,GACF,SAAS,UAAUA,GAAQnL,GAAS,YAAY,EAChD,OACN,MAAO,KAAK,YAAY,MAClB,SAAS,UAAU,KAAK,YAAY,MAAOA,GAAS,YAAY,EAChE,OACN,UAAWghB,GACL,SAAS,UAAUA,GAAWhhB,GAAS,YAAY,EACnD,OACN,YAAa,KAAK,YAAY,YAC9B,qBAAsB,KAAK,YAAY,oBAC3D,CAAiB,EACD,GAAI8R,GAAS,OAAS,EAAG,CACrB,MAAMkQ,GAAsB,MAAMH,GAA8B,kCAAkC7hB,GAAU8R,GAAU,OAAW9D,EAAY,EAC7I8D,GAAS,QAASpgB,IAAW,CACzB,MAAMuwB,GAAqBD,GAAoB,KAAMzK,IAAUA,GAAM,SAAW7lB,EAAM,EACtF,GAAIuwB,GAAoB,CACpB,MAAMl7B,GAAQk7B,GAAmB,UAAY,OACvC,KACAA,GAAmB,QACzBjiB,GAAS,eAAetO,GAAQ3K,EAAK,CACjE,CACA,CAAqB,CACrB,CACA,CAAa,CAAC,CACd,CACQ,MAAO,CACH,IAAKuwB,GACL,SAAUxF,EACb,CACT,CACI,0CAA0CvG,EAAa,CAEnD,MAAM0U,EAAW,KAAK,cAAc,YAC9BiC,GAAe,OAAO,KAAKjC,CAAQ,EACpC,IAAKkC,IAAkB,CACxB,GAAIA,GAAc,QAAQ,GAAG,IAAM,GAAI,CACnC,MAAMhC,GAAgBgC,GAAc,MAAM,GAAG,EACvCxhB,GAAYwf,GAAc,CAAC,EAC3B1gB,GAAe0gB,GAAc,MAAM,CAAC,EAAE,KAAK,GAAG,EAE9CrhB,GADQ,KAAK,cAAc,gBAAgB6B,EAAS,EACrC,SAAS,2BAA2BlB,EAAY,EACrE,OAAQ,KAAK,OAAO8L,CAAW,EAC3B,IACA,KAAK,OAAO,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAW5K,GAAW7B,GAAO,YAAY,CAAC,CACzH,KAEgB,QAAI,KAAK,cAAc,QAAQ,KAAMqM,IAAWA,GAAO,YAAcgX,IACjEhX,GAAO,YAAcgX,EAAa,EAC1B,KAAK,OAAO5W,CAAW,EAC3B,IACA,KAAK,OAAO4W,EAAa,EAC1B,EAEd,CAAA,EACI,KAAK,IAAI,EACRC,GAAgB,CAAE,EACxB,cAAO,KAAKnC,CAAQ,EAAE,QAASkC,IAAkB,CAC7C,GAAIA,GAAc,QAAQ,GAAG,IAAM,GAAI,CACnC,MAAMhC,GAAgBgC,GAAc,MAAM,GAAG,EACvCxhB,GAAYwf,GAAc,CAAC,EAC3B1gB,GAAe0gB,GAAc,MAAM,CAAC,EAAE,KAAK,GAAG,EAE9CrhB,GADQ,KAAK,cAAc,gBAAgB6B,EAAS,EACrC,SAAS,2BAA2BlB,EAAY,EACrE2iB,GAAc,KAAK,OAAO7W,CAAW,EACjC,IACA,KAAK,OAAO,YAAY,WAAW,KAAK,WAAW,OAAQ,OAAW5K,GAAW7B,GAAO,YAAY,CAAC,CAAC,EAAImhB,EAASkC,EAAa,CACpJ,MAEoB,KAAK,cAAc,QAAQ,KAAMhX,IAAWA,GAAO,YAAcgX,IACjEhX,GAAO,YAAcgX,EAAa,EAClCC,GAAc,KAAK,OAAO7W,CAAW,EACjC,IACA,KAAK,OAAO4W,EAAa,CAAC,EAAIlC,EAASkC,EAAa,EAGxDC,GAAcD,EAAa,EAAIlC,EAASkC,EAAa,CAGzE,CAAS,EACM,CAACD,GAAcE,EAAa,CAC3C,CAII,MAAM,eAAelV,EAAa,CAC9B,KAAM,CAAClP,EAAKoC,EAAU,EAAI,KAAK,sBAAuB,EAChDiiB,GAAUrkB,EACZ,mBACA,KAAK,UAAUoC,GAAY,CAAC3P,GAAG1J,KAAU,OAAOA,IAAU,SAAWA,GAAM,SAAQ,EAAKA,EAAK,EAC3Fu7B,GAAe,OAAO,KAAK,WAAW,QAAQ,OAAU,SACxD,KAAK,WAAW,QAAQ,MACxB,CAAE,EACR,IAAIC,GACJ,MAAMC,GAELF,GAAa,eACV,KAAK,cAAc,QAAU,IAE7B,KAAK,cAAc,QAAU,GACjC,IAAIG,GAAa,GACjB,GAAI,KAAK,WAAW,kBAAoBD,GACpC,GAAI,CASA,GARAD,GACI,MAAM,KAAK,WAAW,iBAAiB,aAAa,CAChD,WAAY,KAAK,cAAc,QAC/B,MAAOF,GACP,SAAU,KAAK,cAAc,eACzBC,GAAa,UACb,GACP,EAAEpV,CAAW,EACdqV,IACA,CAAC,KAAK,WAAW,iBAAiB,UAAUA,EAA4B,EACxE,OAAO,KAAK,MAAMA,GAA6B,MAAM,CAEzE,OACmBryB,GAAO,CACV,GAAI,CAACoyB,GAAa,aACd,MAAMpyB,GAEVuyB,GAAa,EAC7B,CAEQ,MAAMpN,GAAU,MAAMnI,EAAY,MAAMlP,EAAKoC,GAAY,EAAI,EAC7D,GAAI,CAACqiB,IACD,KAAK,WAAW,kBAChBD,GACA,GAAI,CACA,MAAM,KAAK,WAAW,iBAAiB,aAAa,CAChD,WAAY,KAAK,cAAc,QAC/B,MAAOH,GACP,KAAM,IAAI,KAAM,EAAC,QAAS,EAC1B,SAAU,KAAK,cAAc,eACzBC,GAAa,UACb,IACJ,OAAQ,KAAK,UAAUjN,GAAQ,OAAO,CAC1D,EAAmBkN,GAA8BrV,CAAW,CAC5D,OACmBhd,GAAO,CACV,GAAI,CAACoyB,GAAa,aACd,MAAMpyB,EAE1B,CAEQ,OAAOmlB,GAAQ,OACvB,CAII,mBAAmB5J,EAAe,CAC9B,mBAAY,OAAO,KAAK,cAAeA,CAAa,EAC7C,IACf,CAII,gBAAgBjY,EAAK,CACjB,OAAI,OAAOA,GAAQ,UAAYA,IAAQ,QAAaA,IAAQ,KACjDA,EACJ,OAAOA,CAAG,CACzB,CAII,mBAAoB,CAChB,OAAQ,KAAK,aACT,KAAK,WAAW,kBAAkB,KAAK,WAAW,+BAA8B,CAAE,CAC9F,CACI,YAAY2X,EAAQ/hB,EAAUsX,GAAOgiB,GAAa,CAC9C,QAAS57B,MAAOqkB,EAAQ,CACpB,GAAIA,EAAOrkB,EAAG,IAAM,QAAaqkB,EAAOrkB,EAAG,IAAM,GAC7C,SACJ,MAAM2Y,GAAeijB,GAAcA,GAAc,IAAM57B,GAAMA,GACvDgY,GAAS1V,EAAS,iCAAiCqW,EAAY,EAC/DkjB,GAAQv5B,EAAS,6BAA6BqW,EAAY,EAC1DO,GAAW5W,EAAS,6BAA6BqW,EAAY,EACnE,GAAI,CAACkjB,IAAS,CAAC7jB,IAAU,CAACkB,GACtB,MAAM,IAAI,4BAA4BP,GAAcrW,CAAQ,EAC5D0V,GACA,KAAK,QAAQ,KAAK4B,GAAQ,IAAMjB,EAAY,EAGvCkjB,IACL,KAAK,YAAYxX,EAAOrkB,EAAG,EAAGsC,EAAUsX,GAAOjB,EAAY,CAe3E,CACA,CACI,eAAeuhB,EAAW7T,EAAW/jB,GAAUsX,GAAOgiB,GAAa,CAC1D1B,GAEL,OAAO,KAAKA,CAAS,EAAE,QAASjE,IAAiB,CAC7C,MAAM1I,GAAgB2M,EAAUjE,EAAY,EACtCtd,GAAeijB,GACfA,GAAc,IAAM3F,GACpBA,GACA4F,GAAQv5B,GAAS,6BAA6BqW,EAAY,EAC1DO,GAAW5W,GAAS,6BAA6BqW,EAAY,EACnE,GAAI,CAACkjB,IAAS,CAAC3iB,GACX,MAAM,IAAI,4BAA4BP,GAAcrW,EAAQ,EAChE,GAAIu5B,GACA,KAAK,eAAetO,GAAe,OAAOlH,GAAc,SAClD,SAAS,UAAUA,EAAWwV,GAAM,YAAY,EAChD,OAAWv5B,GAAUsX,GAAOjB,EAAY,UAEzCO,GAAU,CACf,IAAI4iB,GAAYliB,GAAQ,IAAMjB,GAAa,QAAQ,IAAK,GAAG,EAC3DmjB,GAAY,YAAY,WAAW,KAAK,WAAW,OAAQ,CAAE,OAAQ,MAAQliB,GAAOkiB,EAAS,GACzFvO,KAAkB,IAClB,OAAOA,IAAkB,YACrB,KAAK,cAAc,uBAAyB,QAC5C,KAAK,uBAAuBrU,EAAQ,GAIpC,KAAK,MAAM,KAAK,CACZ,KAAM,OACN,OAAQ,GACR,UAAWmN,GACP,OAAOA,EAAU4P,EAAY,GAAM,SACjC5P,EAAU4P,EAAY,EACtB,OACN,MAAO6F,GACP,YAAaliB,GACb,iBAAkBV,EAC9C,CAAyB,EACGmN,GACA,OAAOA,EAAU4P,EAAY,GAAM,UACnC,KAAK,YAAY5P,EAAU4P,EAAY,EAAG/c,GAAS,sBAAuB4iB,EAAS,IAI3F,OAAOvO,IAAkB,UACzB,KAAK,cAAc,uBAAyB,QAC5C,KAAK,eAAeA,GAAe,OAAOlH,GAAc,SAClD,SAAS,UAAUA,EAAWnN,GAAS,YAAY,EACnD,OAAWA,GAAS,sBAAuB4iB,GAAW,MAAS,CAEzF,CACA,CAAS,CACT,CACI,oBAAoB5B,EAAW7T,EAAW/jB,GAAUsX,GAAOgiB,GAAa,CAC/D1B,GAEL,OAAO,KAAKA,CAAS,EAAE,QAASjE,IAAiB,CAC7C,MAAM1I,GAAgB2M,EAAUjE,EAAY,EACtCtd,GAAeijB,GACfA,GAAc,IAAM3F,GACpBA,GACA4F,GAAQv5B,GAAS,6BAA6BqW,EAAY,EAC1DO,GAAW5W,GAAS,6BAA6BqW,EAAY,EACnE,GAAI,CAACkjB,IAAS,CAAC3iB,GACX,MAAM,IAAI,4BAA4BP,GAAcrW,EAAQ,EAChE,GAAIu5B,GACA,KAAK,oBAAoBtO,GAAe,OAAOlH,GAAc,SACvD,SAAS,UAAUA,EAAWwV,GAAM,YAAY,EAChD,OAAWv5B,GAAUsX,GAAOjB,EAAY,UAEzCO,GAAU,CACf,IAAI4iB,GAAYliB,GAAQ,IAAMjB,GAAa,QAAQ,IAAK,GAAG,EAC3DmjB,GAAY,YAAY,WAAW,KAAK,WAAW,OAAQ,CAAE,OAAQ,MAAQliB,GAAOkiB,EAAS,GACzFvO,KAAkB,IAClB,OAAOA,IAAkB,WACzBrU,GAAS,sBAAsB,eAAe,QAAS6iB,IAAkB,CACrE,IAAIC,GAAyBF,GACzB,IACAC,GAAc,aAAa,QAAQ,IAAK,GAAG,EAC/CC,GAAyB,YAAY,WAAW,KAAK,WAAW,OAAQ,CAAE,OAAQ,MAAQF,GAAWE,EAAsB,EACzG,KAAK,MAAM,KAAM/W,IAASA,GAAK,QAAU+W,EAAsB,GAE7E,KAAK,MAAM,KAAK,CACZ,KAAM,OACN,OAAQ,GACR,MAAOA,GACP,YAAaF,GACb,UAAW,OACX,iBAAkBC,EAClD,CAA6B,EAED1V,GACA,OAAOA,EAAU4P,EAAY,GAAM,UACnC,KAAK,YAAY5P,EAAU4P,EAAY,EAAG/c,GAAS,sBAAuB4iB,EAAS,CAE/G,CAAqB,EAED,OAAOvO,IAAkB,UACzB,KAAK,oBAAoBA,GAAe,OAAOlH,GAAc,SACvD,SAAS,UAAUA,EAAWnN,GAAS,YAAY,EACnD,OAAWA,GAAS,sBAAuB4iB,GAAW,MAAS,CAEzF,CACA,CAAS,CACT,CACI,WAAW9E,EAAO10B,EAAUsX,GAAOgiB,GAAa,CAC5C,QAAS57B,MAAOg3B,EAAO,CACnB,GAAIA,EAAMh3B,EAAG,IAAM,OACf,SACJ,MAAM2Y,GAAeijB,GAAcA,GAAc,IAAM57B,GAAMA,GACvDgY,GAAS1V,EAAS,iCAAiCqW,EAAY,EAC/DkjB,GAAQv5B,EAAS,6BAA6BqW,EAAY,EAC1DO,GAAW5W,EAAS,6BAA6BqW,EAAY,EACnE,GAAI,CAACkjB,IAAS,CAAC7jB,IAAU,CAACkB,GACtB,MAAM,IAAI,4BAA4BP,GAAcrW,CAAQ,EAChE,GAAI0V,GAAQ,CACR,IAAI+f,GAAY,OAAOf,EAAMh3B,EAAG,GAAM,SAChCg3B,EAAMh3B,EAAG,EAAE,UACXg3B,EAAMh3B,EAAG,EACf+3B,GACIA,KAAc,QACVA,KAAc,QACdA,KAAc,GACZ,OACA,MACV,IAAId,GAAQ,OAAOD,EAAMh3B,EAAG,GAAM,SAC5Bg3B,EAAMh3B,EAAG,EAAE,MACX,OACNi3B,GACIA,IAAO,YAAW,IAAO,QACnB,cACAA,IAAO,YAAW,IAAO,OACrB,aACA,OACd,IAAI/M,GAAY,GAAGtQ,EAAK,IAAIjB,EAAY,GAqBxC,KAAK,WAAWuR,GAAW6N,GAAWd,EAAK,CAE3D,SACqB4E,GACL,KAAK,WAAW7E,EAAMh3B,EAAG,EAAGsC,EAAUsX,GAAOjB,EAAY,UAEpDO,GAAU,CACf,IAAI4iB,GAAYliB,GAAQ,IAAMjB,GAAa,QAAQ,IAAK,GAAG,EAC3DmjB,GAAY,YAAY,WAAW,KAAK,WAAW,OAAQ,CAAE,OAAQ,MAAQliB,GAAOkiB,EAAS,EAI3E,KAAK,MAAM,KAAM7W,IAASA,GAAK,QAAU6W,EAAS,GAEhE,KAAK,MAAM,KAAK,CACZ,KAAM,OACN,OAAQ,GACR,MAAOA,GACP,YAAaliB,GACb,UAAW,OACX,iBAAkBV,EAC1C,CAAqB,EAEL,KAAK,WAAW8d,EAAMh3B,EAAG,EAAGkZ,GAAS,sBAAuB4iB,EAAS,CACrF,CACA,CACA,CACI,WAAW1W,EAAO9iB,EAAUsX,GAAOgiB,GAAa,CAC5C,IAAI1T,GAAY,GAEhB,GAAI,MAAM,QAAQ9C,CAAK,EACfA,EAAM,SACN8C,GAAY9C,EACP,IAAK6W,IACC,KAAK,WAAWA,GAAW35B,EAAUsX,GAAOgiB,EAAW,CACjE,EACI,OAAQ1T,IAAc,CAAC,CAACA,EAAS,EACjC,IAAKA,IAAc,IAAMA,GAAY,GAAG,EACxC,KAAK,MAAM,OAGnB,CACD,IAAIgU,GAAgB,CAAE,EACtB,QAASl8B,MAAOolB,EAAO,CACnB,GAAIA,EAAMplB,EAAG,IAAM,QAAaolB,EAAMplB,EAAG,IAAM,KAC3C,SACJ,MAAM2Y,GAAeijB,GAAcA,GAAc,IAAM57B,GAAMA,GACvDgY,GAAS1V,EAAS,iCAAiCqW,EAAY,EAC/DkjB,GAAQv5B,EAAS,6BAA6BqW,EAAY,EAC1DO,GAAW5W,EAAS,6BAA6BqW,EAAY,EACnE,GAAI,CAACkjB,IAAS,CAAC7jB,IAAU,CAACkB,GACtB,MAAM,IAAI,4BAA4BP,GAAcrW,CAAQ,EAChE,GAAI0V,GAAQ,CACR,IAAIkS,GAAY,GAAGtQ,EAAK,IAAIjB,EAAY,GACpCX,GAAO,mBAAqBA,GAAO,QACnCkS,GAAY,IAAIlS,GAAO,MAAM4B,EAAK,CAAC,KAIvC,IAAIuQ,GAAiB/E,EAAMplB,EAAG,EAC1B,gBAAgB,gBAAgBolB,EAAMplB,EAAG,CAAC,IAC1CmqB,GAAiB/E,EAAMplB,EAAG,EAAE,OAE5BgY,GAAO,cACPmS,cAA0B,aACpBA,GAAe,eAAenS,GAAO,WAAW,EAC/CmS,GACC,uBAAuB,YAAYnS,GAAO,YAAamS,EAAc,GAiCjF+R,GAAc,KAAK,KAAK,+BAA+B,KAAK,2BAA2BhS,GAAWC,EAAc,CAAC,CAAC,CAGtI,SACyB0R,GAAO,CACZ,MAAM3T,GAAY,KAAK,WAAW9C,EAAMplB,EAAG,EAAGsC,EAAUsX,GAAOjB,EAAY,EACvEuP,IACAgU,GAAc,KAAKhU,EAAS,CACpD,SACyBhP,GAAU,CAGf,GAAI,OAAOkM,EAAMplB,EAAG,GAAM,UACE,OAAO,KAAKolB,EAAMplB,EAAG,CAAC,EAAE,MAAOuI,IAAM6c,EAAMplB,EAAG,EAAEuI,EAAC,IAAM,MAAS,EAEpF,SAGR,GAAI,gBAAgB,eAAe6c,EAAMplB,EAAG,CAAC,EACzC,GAAIolB,EAAMplB,EAAG,EAAE,OAAS,YACpBolB,EAAMplB,EAAG,EAAE,OAAS,YACpBolB,EAAMplB,EAAG,EAAE,OAAS,mBACpBolB,EAAMplB,EAAG,EAAE,OAAS,kBAAmB,CACvC,IAAIm8B,GAAc,GACd/W,EAAMplB,EAAG,EAAE,OAAS,WACpBm8B,GAAc,IAET/W,EAAMplB,EAAG,EAAE,OAAS,WACzBm8B,GAAc,IAET/W,EAAMplB,EAAG,EAAE,OAAS,kBACzBm8B,GAAc,KAET/W,EAAMplB,EAAG,EAAE,OAAS,oBACzBm8B,GAAc,MAGlB,MAAM9S,GAAK,KAAK,SAAU,EAC1B,GAAInQ,GAAS,kBACTmQ,GAAG,OAAO,UAAU,EACf,KAAKnQ,GAAS,cAAeA,GAAS,aAAa,EACnD,MAAMA,GAAS,YACf,IAAKlB,IACC,GAAGkB,GAAS,aAAa,IAAIlB,GAAO,YAAY,MAAM4B,EAAK,IAAI5B,GAAO,iBACxE,YAAY,EACpB,EACI,KAAK,OAAO,CAAC,UAEbkB,GAAS,qBACdmQ,GAAG,OAAO,UAAU,EACf,KAAKnQ,GAAS,gBAAgB,cAAeA,GAAS,gBAAgB,aAAa,EACnF,MAAMA,GACN,gBAAgB,mBAAmB,IAAKlB,IAClC,GAAGkB,GAAS,gBACd,aAAa,IAAIlB,GAAO,YAAY,MAAM4B,EAAK,IAAI5B,GAAO,iBAC1D,YAAY,EACpB,EACI,KAAK,OAAO,CAAC,UAEbkB,GAAS,YACdmQ,GAAG,OAAO,UAAU,EACf,KAAKnQ,GAAS,sBAAsB,OAAQA,GAAS,sBACrD,SAAS,EACT,MAAMA,GACN,gBAAgB,YAAY,IAAKlB,IAC3B,GAAGkB,GACL,sBACA,SAAS,IAAIlB,GAAO,YAAY,MAAM4B,EAAK,IAAI5B,GAAO,iBACtD,YAAY,EACpB,EACI,KAAK,OAAO,CAAC,MAGlB,OAAM,IAAI,MAAM,sDAAsD,EAK1E,KAAK,SAASqR,GAAG,OAAQ,EACrB,IACA8S,GACA,IACA,SAAS/W,EAAMplB,EAAG,EAAE,KAAK,CAAC,CAC1D,SAEgCkZ,GAAS,aACRA,GAAS,YACNA,GAAS,gBAAkB,CAC/B,MAAMgR,GAAY,GAAGtQ,EAAK,IAAIjB,EAAY,GAC1CujB,GAAc,KAAK,KAAK,+BAA+B,KAAK,2BAA2BhS,GAAW9E,EAAMplB,EAAG,CAAC,CAAC,CAAC,CAC9I,KAEgC,OAAM,IAAI,MAAM,sDAAsD,MAI7E,CAED,IAAI87B,GAAYliB,GACZ,IACAV,GAAS,aAAa,QAAQ,IAAK,GAAG,EAC1C4iB,GAAY,YAAY,WAAW,KAAK,WAAW,OAAQ,CAAE,OAAQ,MAAQliB,GAAOkiB,EAAS,EAC3E,KAAK,MAAM,KAAM7W,IAASA,GAAK,QAAU6W,EAAS,GAEhE,KAAK,MAAM,KAAK,CACZ,KAAM,OACN,OAAQ,GACR,UAAW,OACX,MAAOA,GACP,YAAaliB,GACb,iBAAkBV,EAClD,CAA6B,EAEL,MAAMgP,GAAY,KAAK,WAAW9C,EAAMplB,EAAG,EAAGkZ,GAAS,sBAAuB4iB,EAAS,EACnF5T,IACAgU,GAAc,KAAKhU,EAAS,CAGxD,CACA,CACA,CACYA,GAAYgU,GAAc,OACpB,IAAMA,GAAc,KAAK,SAAS,EAAI,IACtCA,GAAc,KAAK,OAAO,CAC5C,CACQ,OAAOhU,GAAU,OAAS,IAAMA,GAAY,IAAMA,EAC1D,CACA,CCplFO,MAAM,YAAa,CACtB,aAAc,CAUV,KAAK,cAAgB,CAAE,CAC/B,CACI,OAAO,KAAKsC,EAAa,CACrB,MAAMhlB,EAAS,IAAI,KACnB,OAAAA,EAAO,IAAMglB,EAAY,QACzBhlB,EAAO,SAAWglB,EAAY,SACvBhlB,CACf,CACA,CCTO,MAAM,+BAA+B,YAAa,CAIrD,YAAY2gB,EAA0BC,EAAa,CAC/C,MAAMD,EAA0BC,CAAW,EAC3C,KAAK,aAAa,EAAI,OAAO,IAAI,wBAAwB,EACzD,KAAK,cAAc,0BAA4B,EACvD,CAOI,UAAW,CACP,IAAIlP,EAAM,KAAK,uBAAwB,EACvC,OAAAA,GAAO,KAAK,oBAAqB,EACjCA,GAAO,KAAK,wBAAyB,EACrCA,GAAO,KAAK,sBAAuB,EAC5B,KAAK,qCAAqCA,EAAI,KAAI,CAAE,CACnE,CAII,MAAM,SAAU,CACZ,MAAMkP,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,EAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,EAAyB,IAGzB,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,cACzB,KAAK,cAAc,YAAc,cACjC,MAAMrE,EAAY,YAAY,UAAU,mBAAoB,KAAK,cAAc,UAAU,QAAQ,EAC5F,KAAK,cAAc,YAAc,WACtC,MAAMA,EAAY,YAAY,UAAU,gBAAiB,KAAK,cAAc,UAAU,QAAQ,GAGtG,MAAMiG,GAAgC,IAAI,8BAA8BjG,EAAa,KAAK,aAAa,EACnG,KAAK,cAAc,eAAiB,IACpC,KAAK,cAAc,UAAU,aAC7B,KAAK,cAAc,cAAc,OAAS,IAC1C,KAAK,cAAc,sBACfiG,GAA8B,gCAAiC,GAGvE,KAAM,CAACnV,GAAKoC,EAAU,EAAI,KAAK,sBAAuB,EAChDkR,GAAc,MAAMpE,EAAY,MAAMlP,GAAKoC,GAAY,EAAI,EAC3DyR,GAAe,aAAa,KAAKP,EAAW,EAElD,OAAI,KAAK,cAAc,eAAiB,IACpC,KAAK,cAAc,UAAU,aAC7B,KAAK,cAAc,cAAc,OAAS,GAC1C,MAAM6B,GAA8B,OAAOtB,GAAc,KAAK,cAAc,aAAa,EAGzF,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,cACzB,KAAK,cAAc,YAAc,cACjC,MAAM3E,EAAY,YAAY,UAAU,kBAAmB,KAAK,cAAc,UAAU,QAAQ,EAC3F,KAAK,cAAc,YAAc,WACtC,MAAMA,EAAY,YAAY,UAAU,eAAgB,KAAK,cAAc,UAAU,QAAQ,GAGjGqE,GACA,MAAMrE,EAAY,kBAAmB,EAClC2E,EACnB,OACe3hB,GAAO,CAEV,GAAIqhB,EACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAE3C,CACA,CAQI,KAAKS,EAAchN,EAAW,CAC1BgN,EAAe,gBAAgB,eAAeA,CAAY,EACpDA,EAAa,QAAQ,KACrBA,EACN,MAAMH,GAAY,KAAK,gBAAgBG,EAAchN,CAAS,EAC9D,YAAK,cAAc,aAAa6M,EAAS,EAClC,IACf,CAOI,MAAMtB,EAAO9L,EAAY,CACrB,KAAK,cAAc,OAAS,GAC5B,MAAM4O,GAAY,KAAK,kBAAkB9C,CAAK,EAC9C,OAAI8C,KACA,KAAK,cAAc,OAAS,CACxB,CAAE,KAAM,SAAU,UAAWA,EAAW,CAC3C,GACD5O,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,SAAS8L,EAAO9L,EAAY,CACxB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,MACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,QAAQ8L,EAAO9L,EAAY,CACvB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,KACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAII,WAAW4P,EAAK,CACZ,OAAO,KAAK,MAAM,KAAK,uBAAuBA,CAAG,CAAC,CAC1D,CAII,cAAcA,EAAK,CACf,OAAO,KAAK,SAAS,KAAK,uBAAuBA,CAAG,CAAC,CAC7D,CAII,aAAaA,EAAK,CACd,OAAO,KAAK,QAAQ,KAAK,uBAAuBA,CAAG,CAAC,CAC5D,CAII,OAAOpc,EAAQ,CACX,OAAO,KAAK,UAAUA,CAAM,CACpC,CAII,UAAU6d,EAAW,CAEjB,GAAI,CAAC,KAAK,WAAW,OAAO,wBAAwB,QAAQ,EACxD,MAAM,IAAI,oCAEd,YAAK,cAAc,UAAYA,EACxB,IACf,CAMI,QAAQoM,EAAMC,EAAQ,MAAOC,GAAO,CAChC,OAAIF,EACI,OAAOA,GAAS,SAChB,KAAK,cAAc,SAAWA,EAG1BE,GACA,KAAK,cAAc,SAAW,CAC1B,CAACF,CAAI,EAAG,CAAE,MAAAC,EAAO,MAAAC,EAAO,CAC3B,EAGD,KAAK,cAAc,SAAW,CAAE,CAACF,CAAI,EAAGC,CAAO,EAKvD,KAAK,cAAc,SAAW,CAAE,EAE7B,IACf,CAII,WAAWD,EAAMC,EAAQ,MAAOC,GAAO,CACnC,OAAIA,GACA,KAAK,cAAc,SAASF,CAAI,EAAI,CAAE,MAAAC,EAAO,MAAAC,EAAO,EAGpD,KAAK,cAAc,SAASF,CAAI,EAAIC,EAEjC,IACf,CAII,MAAMhiB,EAAO,CACT,YAAK,cAAc,MAAQA,EACpB,IACf,CAMI,YAAYpK,EAAQ,CAChB,GAAI,CAAC,KAAK,cAAc,UAAU,YAC9B,MAAM,IAAI,aAAa,iFAAiF,EAC5G,KAAK,cAAc,OAAS,CAAE,EAC9B,MAAMogB,EAAW,MAAM,QAAQpgB,CAAM,EAAIA,EAAS,CAACA,CAAM,EACzD,OAAAogB,EAAS,QAASpgB,IAAW,CACzB,MAAMwxB,GAAc,KAAK,cAAc,UAAU,SAAS,eAAexxB,EAAM,EAC/E,GAAI,CAACwxB,GACD,MAAM,IAAI,aAAa,kEAAkE,EAC7F,KAAK,aAAaA,EAAW,CACzC,CAAS,EACD,KAAK,cAAc,cAAgBpR,EAC5B,IACf,CAMI,aAAa/D,EAAS,CAClB,YAAK,cAAc,aAAeA,EAC3B,IACf,CAOI,wBAAyB,CACrB,MAAM3kB,EAAW,KAAK,cAAc,UAAU,YACxC,KAAK,cAAc,UAAU,SAC7B,OACN,GAAI,CAACA,EACD,MAAM,IAAI,aAAa,mDAAmD,KAAK,cAAc,SAAS,GAAG,EAC7G,GAAI,CAACA,EAAS,iBACV,MAAM,IAAI,6BAA6BA,CAAQ,EAGnD,MAAM+5B,EAAwB,CAAE,EAChC,OAAQ,KAAK,cAAc,UAAS,CAChC,IAAK,cACDA,EAAsB,KAAK,KAAK,OAAO/5B,EAAS,iBAAiB,YAAY,EACzE,sBAAsB,EAC1B,MACJ,IAAK,UACD+5B,EAAsB,KAAK,KAAK,OAAO/5B,EAAS,iBAAiB,YAAY,EACzE,SAAS,EACb,MACJ,QACI,MAAM,IAAI,aAAa,kDAAkD,CACzF,CASQ,GARIA,EAAS,eACT+5B,EAAsB,KAAK,KAAK,OAAO/5B,EAAS,cAAc,YAAY,EACtE,MACA,KAAK,OAAOA,EAAS,cAAc,YAAY,EAC/C,MAAM,EACVA,EAAS,kBACT+5B,EAAsB,KAAK,KAAK,OAAO/5B,EAAS,iBAAiB,YAAY,EACzE,sBAAsB,EAC1B+5B,EAAsB,QAAU,EAChC,MAAM,IAAI,yBAGd,MAAMpU,GAAkB,KAAK,sBAAuB,EAC9C4C,GAAsB,KAAK,0BAA0B,QAAQ,EACnE,OAAIA,KAAwB,GACjB,UAAU,KAAK,aAAa,KAAK,iBAAkB,CAAA,CAAC,QAAQwR,EAAsB,KAAK,IAAI,CAAC,GAAGpU,EAAe,GAErH,KAAK,WAAW,OAAO,QAAQ,OAAS,QACjC,UAAU,KAAK,aAAa,KAAK,iBAAgB,CAAE,CAAC,QAAQoU,EAAsB,KAAK,IAAI,CAAC,WAAWxR,EAAmB,GAAG5C,EAAe,GAEhJ,UAAU,KAAK,aAAa,KAAK,iBAAgB,CAAE,CAAC,QAAQoU,EAAsB,KAAK,IAAI,CAAC,GAAGpU,EAAe,cAAc4C,EAAmB,EAC9J,CAII,yBAA0B,CACtB,MAAMsO,EAAW,KAAK,cAAc,SACpC,OAAI,OAAO,KAAKA,CAAQ,EAAE,OAAS,EACvB,aACJ,OAAO,KAAKA,CAAQ,EACf,IAAK7Q,GACF,OAAO6Q,EAAS7Q,CAAU,GAAM,SACxB,KAAK,qBAAqBA,CAAU,EACxC,IACA6Q,EAAS7Q,CAAU,EAGf,KAAK,qBAAqBA,CAAU,EACxC,IACA6Q,EAAS7Q,CAAU,EAAE,MACrB,IACA6Q,EAAS7Q,CAAU,EAAE,KAEhC,EACI,KAAK,IAAI,EACf,EACf,CAII,uBAAwB,CACpB,IAAItT,EAAQ,KAAK,cAAc,MAC/B,GAAIA,EAAO,CACP,GAAI,YAAY,cAAc,KAAK,WAAW,MAAM,EAChD,MAAO,UAAYA,EAGnB,MAAM,IAAI,8BAE1B,CACQ,MAAO,EACf,CACA,CC7VO,MAAM,2BAA2B,YAAa,CAIjD,YAAYmR,EAA0BC,EAAa,CAC/C,MAAMD,EAA0BC,CAAW,EAC3C,KAAK,aAAa,EAAI,OAAO,IAAI,oBAAoB,EACrD,KAAK,cAAc,0BAA4B,EACvD,CAOI,UAAW,CACP,IAAIlP,EAAM,KAAK,cAAe,EAC9B,OAAAA,GAAO,KAAK,oBAAqB,EACjCA,GAAO,KAAK,uBAAwB,EACpCA,GAAO,KAAK,wBAAyB,EACrCA,GAAO,KAAK,sBAAuB,EAC5B,KAAK,qCAAqCA,EAAI,KAAI,CAAE,CACnE,CAII,MAAM,SAAU,CACZ,MAAMkP,EAAc,KAAK,kBAAmB,EAC5C,IAAIqE,EAAyB,GAC7B,GAAI,CAEI,KAAK,cAAc,iBAAmB,IACtCrE,EAAY,sBAAwB,KACpC,MAAMA,EAAY,iBAAkB,EACpCqE,EAAyB,IAGzB,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,aAC7B,MAAMrE,EAAY,YAAY,UAAU,eAAgB,KAAK,cAAc,UAAU,SAAU,KAAK,cAAc,SAAS,EAE/H,IAAI+F,GAAa,KACbC,GAAkB,KAEtB,MAAMC,GAAgC,IAAI,8BAA8BjG,EAAa,KAAK,aAAa,EACjGiF,GAAmB,CAAE,EAC3B,GAAI,MAAM,QAAQ,KAAK,cAAc,SAAS,GAC1C,KAAK,cAAc,UAAU,YAC7B,UAAWiB,MAAc,KAAK,cAAc,UACxCjB,GAAiB,KAAK,GAAG,KAAK,cAAc,UAAU,SAAS,4BAA4BiB,EAAU,CAAC,EAG1G,KAAK,cAAc,eAAiB,IACpC,KAAK,cAAc,UAAU,aAC7B,KAAK,cAAc,cAAc,OAAS,IAC1C,KAAK,cAAc,sBACfD,GAA8B,4BAA6B,EAC/DhB,GAAiB,KAAK,GAAG,KAAK,cAAc,sBAAsB,OAAQxd,IAAM,CAACwd,GAAiB,SAASxd,EAAC,CAAC,CAAC,GAE9Gwd,GAAiB,OAAS,GAC1B,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxCc,GAAa,KAAK,WAAW,OAAO,8BAA8B,eAAgBd,EAAgB,EAClGe,GAAkB,8BAGtB,KAAM,CAACkQ,GAAWhjB,EAAU,EAAI,KAAK,sBAAuB,EACtDijB,GAAa,CAACpQ,GAAYmQ,GAAWlQ,EAAe,EACpD5B,GAAc,MAAMpE,EAAY,MAAMmW,GAAW,OAAQrlB,IAAQA,IAAO,IAAI,EAAE,KAAK;AAAA;AAAA,CAAO,EAAGoC,GAAY,EAAI,EAC7GyR,GAAe,aAAa,KAAKP,EAAW,EAElD,OAAI,KAAK,cAAc,eAAiB,IACpC,KAAK,cAAc,UAAU,aAC7B,KAAK,cAAc,cAAc,OAAS,GAC1C,MAAM6B,GAA8B,OAAOtB,GAAc,KAAK,cAAc,aAAa,EAGzF,KAAK,cAAc,gBAAkB,IACrC,KAAK,cAAc,UAAU,aAC7B,MAAM3E,EAAY,YAAY,UAAU,cAAe,KAAK,cAAc,UAAU,SAAU,KAAK,cAAc,SAAS,EAG1HqE,GACA,MAAMrE,EAAY,kBAAmB,EAClC2E,EACnB,OACe3hB,GAAO,CAEV,GAAIqhB,EACA,GAAI,CACA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAMhd,EAClB,QACgB,CACAgd,IAAgB,KAAK,aAErB,MAAMA,EAAY,QAAS,CAE3C,CACA,CAOI,IAAInd,EAAQ,CACR,YAAK,cAAc,UAAYA,EACxB,IACf,CAOI,MAAMmc,EAAO9L,EAAY,CACrB,KAAK,cAAc,OAAS,GAC5B,MAAM4O,GAAY,KAAK,kBAAkB9C,CAAK,EAC9C,OAAI8C,KACA,KAAK,cAAc,OAAS,CACxB,CAAE,KAAM,SAAU,UAAWA,EAAW,CAC3C,GACD5O,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,SAAS8L,EAAO9L,EAAY,CACxB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,MACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAKI,QAAQ8L,EAAO9L,EAAY,CACvB,YAAK,cAAc,OAAO,KAAK,CAC3B,KAAM,KACN,UAAW,KAAK,kBAAkB8L,CAAK,CACnD,CAAS,EACG9L,GACA,KAAK,cAAcA,CAAU,EAC1B,IACf,CAMI,WAAW4P,EAAK,CACZ,OAAO,KAAK,MAAM,KAAK,uBAAuBA,CAAG,CAAC,CAC1D,CAII,cAAcA,EAAK,CACf,OAAO,KAAK,SAAS,KAAK,uBAAuBA,CAAG,CAAC,CAC7D,CAII,aAAaA,EAAK,CACd,OAAO,KAAK,QAAQ,KAAK,uBAAuBA,CAAG,CAAC,CAC5D,CAII,OAAOpc,EAAQ,CACX,OAAO,KAAK,UAAUA,CAAM,CACpC,CAII,UAAU6d,EAAW,CAEjB,GAAI,CAAC,KAAK,WAAW,OAAO,wBAAwB,QAAQ,EACxD,MAAM,IAAI,oCAEd,YAAK,cAAc,UAAYA,EACxB,IACf,CAMI,QAAQoM,EAAMC,EAAQ,MAAOC,GAAO,CAChC,OAAIF,EACI,OAAOA,GAAS,SAChB,KAAK,cAAc,SAAWA,EAG1BE,GACA,KAAK,cAAc,SAAW,CAC1B,CAACF,CAAI,EAAG,CAAE,MAAAC,EAAO,MAAAC,EAAO,CAC3B,EAGD,KAAK,cAAc,SAAW,CAAE,CAACF,CAAI,EAAGC,CAAO,EAKvD,KAAK,cAAc,SAAW,CAAE,EAE7B,IACf,CAII,WAAWD,EAAMC,EAAQ,MAAOC,GAAO,CACnC,OAAIA,GACA,KAAK,cAAc,SAASF,CAAI,EAAI,CAAE,MAAAC,EAAO,MAAAC,EAAO,EAGpD,KAAK,cAAc,SAASF,CAAI,EAAIC,EAEjC,IACf,CAII,MAAMhiB,EAAO,CACT,YAAK,cAAc,MAAQA,EACpB,IACf,CAMI,YAAYpK,EAAQ,CAChB,GAAI,CAAC,KAAK,cAAc,UAAU,YAC9B,MAAM,IAAI,aAAa,iFAAiF,EAC5G,KAAK,cAAc,OAAS,CAAE,EAC9B,MAAMogB,EAAW,MAAM,QAAQpgB,CAAM,EAAIA,EAAS,CAACA,CAAM,EACzD,OAAAogB,EAAS,QAASpgB,IAAW,CACzB,MAAMwxB,GAAc,KAAK,cAAc,UAAU,SAAS,eAAexxB,EAAM,EAC/E,GAAI,CAACwxB,GACD,MAAM,IAAI,aAAa,kEAAkE,EAC7F,KAAK,aAAaA,EAAW,CACzC,CAAS,EACD,KAAK,cAAc,cAAgBpR,EAC5B,IACf,CAMI,aAAa/D,EAAS,CAClB,YAAK,cAAc,aAAeA,EAC3B,IACf,CAOI,wBAAyB,CACrB,MAAMuV,EAAY,KAAK,YAAa,EAC9Bl6B,EAAW,KAAK,cAAc,UAAU,YACxC,KAAK,cAAc,UAAU,SAC7B,OAEAm6B,GAAsB,CAAE,EAC9B,QAASz8B,MAAOw8B,EACRA,EAAUx8B,EAAG,IAAM,SACnBy8B,GAAoBz8B,EAAG,EAAIw8B,EAAUx8B,EAAG,GAIhD,MAAMq8B,GAAwB,CAAE,EAC1BK,GAAiB,CAAE,EAgIzB,GA/HIp6B,GACA,KAAK,mBAAmBA,EAAUm6B,EAAmB,EAAE,QAAS9jB,IAAiB,CAE7E,MAAMyP,GAAU9lB,EAAS,4BAA4BqW,EAAY,EACjE,GAAIyP,GAAQ,QAAU,EAClB,MAAM,IAAI,4BAA4BzP,GAAcrW,CAAQ,EAEhE8lB,GAAQ,QAASpQ,IAAW,CACxB,GAAI,CAACA,GAAO,UACR0kB,GAAe,SAAS1kB,EAAM,EAC9B,OAEJ0kB,GAAe,KAAK1kB,EAAM,EAE1B,IAAI/X,GAAQ+X,GAAO,eAAeykB,EAAmB,EAcrD,GAbIzkB,GAAO,kBACP,OAAO/X,IAAU,UACjB,EAAEA,cAAiB,OACnBA,KAAU,MACV,CAAC,OAAO,SAASA,EAAK,EACtBA,GACI+X,GAAO,iBAAiB,eAAe/X,EAAK,EAEzC,OAAOA,IAAU,aACxBA,GACI,KAAK,WAAW,OAAO,uBAAuBA,GAAO+X,EAAM,GAG/D,OAAO/X,IAAU,WAEjBo8B,GAAsB,KAAK,KAAK,OAAOrkB,GAAO,YAAY,EACtD,MACA/X,IAAO,WAEL,KAAK,WAAW,OAAO,QAAQ,OAAS,OAC9C,KAAK,WAAW,OAAO,QAAQ,OAC3B,YACJA,KAAU,KACVo8B,GAAsB,KAAK,KAAK,OAAOrkB,GAAO,YAAY,EAAI,SAAS,MAEtE,CACG,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxC/X,GAAQ,KAAK,WAAW,OAAO,iBAAiB+X,GAAQ/X,EAAK,GAEjE,MAAMmtB,GAAY,KAAK,gBAAgBntB,EAAK,EAC5C,IAAIwoB,GAAa,KACjB,IAAK,YAAY,cAAc,KAAK,WAAW,MAAM,GACjD,KAAK,WAAW,OAAO,QAAQ,OAC3B,iBACJ,KAAK,WAAW,OAAO,aAAa,QAAQzQ,GAAO,IAAI,IAAM,GAAI,CAEjE,MAAMqV,GADY,KAAK,WAAW,OAAO,QAAQ,qBAE3C,eACA,kBACFrV,GAAO,MAAQ,KACfyQ,GAAa,GAAG4E,EAAY,IAAID,EAAS,KAAKpV,GAAO,IAAI,IAGzDyQ,GAAa,GAAG4E,EAAY,IAAID,EAAS,GAEzE,MACiC,YAAY,iBAAiB,KAAK,WAAW,MAAM,GACxD,KAAK,WAAW,OAAO,aAAa,QAAQpV,GAAO,IAAI,IAAM,GACzDA,GAAO,MAAQ,KACfyQ,GAAa,iCAAiC2E,EAAS,MAAMpV,GAAO,IAAI,MAAMA,GAAO,IAAI,GAGzFyQ,GAAa,sBAAsB2E,EAAS,MAAMpV,GAAO,IAAI,GAG5D,KAAK,WAAW,OAAO,QAAQ,OACpC,SACA,KAAK,WAAW,OAAO,aAAa,QAAQA,GAAO,IAAI,IAAM,GAC7DyQ,GACIzQ,GAAO,KACH,oBACAoV,GACA,MACCpV,GAAO,MAAQ,KAChB,IAGRyQ,GAAa2E,GAEjBiP,GAAsB,KAAK,KAAK,OAAOrkB,GAAO,YAAY,EACtD,MACAyQ,EAAU,CACtC,CACA,CAAiB,CACjB,CAAa,GAEG4T,GAAsB,OAAS,GAC/B,OAAO,KAAKI,EAAmB,EAAE,SAAW,KACxCn6B,EAAS,eACTo6B,GAAe,QAAQp6B,EAAS,aAAa,IAAM,IACnD+5B,GAAsB,KAAK,KAAK,OAAO/5B,EAAS,cAAc,YAAY,EACtE,MACA,KAAK,OAAOA,EAAS,cAAc,YAAY,EAC/C,MAAM,EACVA,EAAS,kBACTo6B,GAAe,QAAQp6B,EAAS,gBAAgB,IAAM,IACtD+5B,GAAsB,KAAK,KAAK,OAAO/5B,EAAS,iBAAiB,YAAY,EACzE,sBAAsB,IAIlC,OAAO,KAAKm6B,EAAmB,EAAE,IAAKz8B,IAAQ,CAC1C,IAAIC,GAAQw8B,GAAoBz8B,EAAG,EAEnC,GAAI,OAAOC,IAAU,WAEjBo8B,GAAsB,KAAK,KAAK,OAAOr8B,EAAG,EAAI,MAAQC,IAAO,WAEvD,KAAK,WAAW,OAAO,QAAQ,OAAS,OAC9C,KAAK,WAAW,OAAO,QAAQ,OAAS,YACxCA,KAAU,KACVo8B,GAAsB,KAAK,KAAK,OAAOr8B,EAAG,EAAI,SAAS,MAEtD,CAID,MAAMotB,GAAY,KAAK,gBAAgBntB,EAAK,EAC5Co8B,GAAsB,KAAK,KAAK,OAAOr8B,EAAG,EAAI,MAAQotB,EAAS,CACnF,CACA,CAAa,EAEDiP,GAAsB,QAAU,EAChC,MAAM,IAAI,yBAGd,MAAMpU,GAAkB,KAAK,sBAAuB,EAC9C4C,GAAsB,KAAK,0BAA0B,QAAQ,EACnE,OAAIA,KAAwB,GACjB,UAAU,KAAK,aAAa,KAAK,iBAAkB,CAAA,CAAC,QAAQwR,GAAsB,KAAK,IAAI,CAAC,GAAGpU,EAAe,GAErH,KAAK,WAAW,OAAO,QAAQ,OAAS,QACjC,UAAU,KAAK,aAAa,KAAK,iBAAgB,CAAE,CAAC,QAAQoU,GAAsB,KAAK,IAAI,CAAC,WAAWxR,EAAmB,GAAG5C,EAAe,GAEhJ,UAAU,KAAK,aAAa,KAAK,iBAAgB,CAAE,CAAC,QAAQoU,GAAsB,KAAK,IAAI,CAAC,GAAGpU,EAAe,cAAc4C,EAAmB,EAC9J,CAII,yBAA0B,CACtB,MAAMsO,EAAW,KAAK,cAAc,SACpC,OAAI,OAAO,KAAKA,CAAQ,EAAE,OAAS,EACvB,aACJ,OAAO,KAAKA,CAAQ,EACf,IAAK7Q,GACF,OAAO6Q,EAAS7Q,CAAU,GAAM,SACxB,KAAK,qBAAqBA,CAAU,EACxC,IACA6Q,EAAS7Q,CAAU,EAGf,KAAK,qBAAqBA,CAAU,EACxC,IACA6Q,EAAS7Q,CAAU,EAAE,MACrB,IACA6Q,EAAS7Q,CAAU,EAAE,KAEhC,EACI,KAAK,IAAI,EACf,EACf,CAII,uBAAwB,CACpB,IAAItT,EAAQ,KAAK,cAAc,MAC/B,GAAIA,EAAO,CACP,GAAI,YAAY,cAAc,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,eACxC,MAAO,UAAYA,EAGnB,MAAM,IAAI,8BAE1B,CACQ,MAAO,EACf,CAII,aAAc,CACV,GAAI,OAAO,KAAK,cAAc,WAAc,SACxC,OAAO,KAAK,cAAc,UAC9B,MAAM,IAAI,wBAClB,CACA,CCjeO,SAAS,uBAAwB,CACpC,aAAa,0BAA0B,qBAAuBqU,IAAO,IAAI,mBAAmBA,EAAE,CAAC,EAC/F,aAAa,0BAA0B,qBAAuBA,IAAO,IAAI,mBAAmBA,EAAE,CAAC,EAC/F,aAAa,0BAA0B,uBAAyBA,IAAO,IAAI,qBAAqBA,EAAE,CAAC,EACnG,aAAa,0BAA0B,qBAAuBA,IAAO,IAAI,mBAAmBA,EAAE,CAAC,EAC/F,aAAa,0BAA0B,yBAA2BA,IAAO,IAAI,uBAAuBA,EAAE,CAAC,EACvG,aAAa,0BAA0B,qBAAuBA,IAAO,IAAI,mBAAmBA,EAAE,CAAC,CACnG,CCdO,MAAM,eAAgB,CAazB,OAAO,KAAKjY,EAAK,CACb,IAAIurB,EAAW,SAAUxrB,GAAGvD,GAAG,CAE3B,OADUuD,IAAKvD,GAAMuD,KAAO,GAAKvD,EAEpC,EACGgvB,GAAU,SAAUjrB,GAAK,CACzB,IAAIP,GAAM,GACNxN,GACAwe,GACJ,IAAKxe,GAAI,EAAGA,IAAK,EAAGA,KAChBwe,GAAKzQ,KAAS/N,GAAI,EAAM,GACxBwN,IAAOgR,GAAE,SAAS,EAAE,EAExB,OAAOhR,EACV,EACGyrB,GACAj5B,GAAGwO,GACH8J,GAAI,IAAI,MAAM,EAAE,EAChB4gB,GAAK,WACLC,GAAK,WACLC,GAAK,WACLC,GAAK,UACLC,GAAK,WACLC,GAAGC,GAAGC,GAAGC,GAAG7nB,GACZ8nB,GAEJnsB,EAAmB,mBAAmBA,CAAG,EACzC,IAAImB,GAASnB,EAAI,OACbosB,GAAY,CAAE,EAClB,IAAK55B,GAAI,EAAGA,GAAI2O,GAAS,EAAG3O,IAAK,EAC7BwO,GACKhB,EAAI,WAAWxN,EAAC,GAAK,GACjBwN,EAAI,WAAWxN,GAAI,CAAC,GAAK,GACzBwN,EAAI,WAAWxN,GAAI,CAAC,GAAK,EAC1BwN,EAAI,WAAWxN,GAAI,CAAC,EAC5B45B,GAAU,KAAKprB,EAAC,EAEpB,OAAQG,GAAS,EAAC,CACd,IAAK,GACD3O,GAAI,WACJ,MACJ,IAAK,GACDA,GAAKwN,EAAI,WAAWmB,GAAS,CAAC,GAAK,GAAM,QACzC,MACJ,IAAK,GACD3O,GACKwN,EAAI,WAAWmB,GAAS,CAAC,GAAK,GAC1BnB,EAAI,WAAWmB,GAAS,CAAC,GAAK,GAC/B,MACR,MACJ,IAAK,GACD3O,GACKwN,EAAI,WAAWmB,GAAS,CAAC,GAAK,GAC1BnB,EAAI,WAAWmB,GAAS,CAAC,GAAK,GAC9BnB,EAAI,WAAWmB,GAAS,CAAC,GAAK,EAC/B,IACR,KAChB,CAEQ,IADAirB,GAAU,KAAK55B,EAAC,EACT45B,GAAU,OAAS,KAAO,IAC7BA,GAAU,KAAK,CAAC,EAIpB,IAFAA,GAAU,KAAKjrB,KAAW,EAAE,EAC5BirB,GAAU,KAAMjrB,IAAU,EAAK,UAAW,EACrCsqB,GAAa,EAAGA,GAAaW,GAAU,OAAQX,IAAc,GAAI,CAClE,IAAKj5B,GAAI,EAAGA,GAAI,GAAIA,KAChBsY,GAAEtY,EAAC,EAAI45B,GAAUX,GAAaj5B,EAAC,EAEnC,IAAKA,GAAI,GAAIA,IAAK,GAAIA,KAClBsY,GAAEtY,EAAC,EAAI+4B,EAASzgB,GAAEtY,GAAI,CAAC,EAAIsY,GAAEtY,GAAI,CAAC,EAAIsY,GAAEtY,GAAI,EAAE,EAAIsY,GAAEtY,GAAI,EAAE,EAAG,CAAC,EAOlE,IALAu5B,GAAIL,GACJM,GAAIL,GACJM,GAAIL,GACJM,GAAIL,GACJxnB,GAAIynB,GACCt5B,GAAI,EAAGA,IAAK,GAAIA,KACjB25B,GACKZ,EAASQ,GAAG,CAAC,GACRC,GAAIC,GAAM,CAACD,GAAIE,IACjB7nB,GACAyG,GAAEtY,EAAC,EACH,WACA,WACR6R,GAAI6nB,GACJA,GAAID,GACJA,GAAIV,EAASS,GAAG,EAAE,EAClBA,GAAID,GACJA,GAAII,GAER,IAAK35B,GAAI,GAAIA,IAAK,GAAIA,KAClB25B,GACKZ,EAASQ,GAAG,CAAC,GAAKC,GAAIC,GAAIC,IAAK7nB,GAAIyG,GAAEtY,EAAC,EAAI,WACvC,WACR6R,GAAI6nB,GACJA,GAAID,GACJA,GAAIV,EAASS,GAAG,EAAE,EAClBA,GAAID,GACJA,GAAII,GAER,IAAK35B,GAAI,GAAIA,IAAK,GAAIA,KAClB25B,GACKZ,EAASQ,GAAG,CAAC,GACRC,GAAIC,GAAMD,GAAIE,GAAMD,GAAIC,IAC1B7nB,GACAyG,GAAEtY,EAAC,EACH,WACA,WACR6R,GAAI6nB,GACJA,GAAID,GACJA,GAAIV,EAASS,GAAG,EAAE,EAClBA,GAAID,GACJA,GAAII,GAER,IAAK35B,GAAI,GAAIA,IAAK,GAAIA,KAClB25B,GACKZ,EAASQ,GAAG,CAAC,GAAKC,GAAIC,GAAIC,IAAK7nB,GAAIyG,GAAEtY,EAAC,EAAI,WACvC,WACR6R,GAAI6nB,GACJA,GAAID,GACJA,GAAIV,EAASS,GAAG,EAAE,EAClBA,GAAID,GACJA,GAAII,GAERT,GAAMA,GAAKK,GAAK,WAChBJ,GAAMA,GAAKK,GAAK,WAChBJ,GAAMA,GAAKK,GAAK,WAChBJ,GAAMA,GAAKK,GAAK,WAChBJ,GAAMA,GAAKznB,GAAK,UAC5B,CACQ,OAAA8nB,GACIX,GAAQE,EAAE,EAAIF,GAAQG,EAAE,EAAIH,GAAQI,EAAE,EAAIJ,GAAQK,EAAE,EAAIL,GAAQM,EAAE,EAC/DK,GAAK,YAAa,CACjC,CACA,CC9IO,MAAM,qBAAsB,CAC/B,aAAc,CACV,KAAK,qBAAuB,CAAE,KAAM,SAAU,MAAO,SAAW,EAChE,KAAK,2BAA6B,OAC1C,CACI,aAAaE,EAAa,CACtB,OAAI,OAAOA,GAAgB,WACvBA,EAAcA,EAAY,MAEvBA,EAAY,MAAM,GAAG,EAAE,IAAK,CAC3C,CAOI,UAAUC,EAAYC,EAAmB,CACrC,OAAOA,GAAwC,UAAUD,CAAU,CAC3E,CAMI,yBAAyBE,EAA0B,CAC/C,OAAOA,EAA2B,UAC1C,CACI,WAAWxyB,EAAcyyB,EAAYC,GAAkB,CACnD,MAAMjoB,GAAOgoB,GAAczyB,EAC3B,OAAI0yB,GAAiB,OACV,UAAUA,GAAiB,KAAK,GAAG,CAAC,EAAI,UAAUjoB,EAAI,EAC1DA,EACf,CACI,aAAazK,EAAc,CACvB,OAAOA,CACf,CACI,eAAeqyB,EAAaM,EAAa,CAErC,MAAMC,GAAoB,CAAC,GAAGD,CAAW,EACzCC,GAAkB,KAAM,EAGxB,MAAMh+B,GAAM,GAFM,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACpB,IAAIO,GAAkB,KAAK,GAAG,CAAC,GAC/D,MAAO,MAAQ,gBAAgB,KAAKh+B,EAAG,EAAE,OAAO,EAAG,EAAE,CAC7D,CACI,qBAAqBy9B,EAAaM,EAAa,CAE3C,MAAMC,GAAoB,CAAC,GAAGD,CAAW,EACzCC,GAAkB,KAAM,EAGxB,MAAMh+B,GAAM,GAFM,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACpB,IAAIO,GAAkB,KAAK,GAAG,CAAC,GAC/D,MAAO,MAAQ,gBAAgB,KAAKh+B,EAAG,EAAE,OAAO,EAAG,EAAE,CAC7D,CACI,uBAAuBy9B,EAAaM,EAAa3Y,GAAO,CAEpD,MAAM4Y,GAAoB,CAAC,GAAGD,CAAW,EACzCC,GAAkB,KAAM,EAGxB,IAAIh+B,GAAM,GAFQ,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACtB,IAAIO,GAAkB,KAAK,GAAG,CAAC,GAC7D,OAAI5Y,KACAplB,IAAO,IAAIolB,EAAK,IACb,OAAS,gBAAgB,KAAKplB,EAAG,EAAE,OAAO,EAAG,EAAE,CAC9D,CACI,sBAAsBy9B,EAAanV,EAAY,CAG3C,MAAMtoB,GAAM,GAFM,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACpB,IAAInV,CAAU,GAC9C,MAAO,MAAQ,gBAAgB,KAAKtoB,EAAG,EAAE,OAAO,EAAG,EAAE,CAC7D,CACI,eAAey9B,EAAaM,EAAaE,GAAsBC,GAAwB,CAEnF,MAAMF,GAAoB,CAAC,GAAGD,CAAW,EACzCC,GAAkB,KAAM,EAGxB,MAAMh+B,GAAM,GAFM,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACpB,IAAIO,GAAkB,KAAK,GAAG,CAAC,GAC/D,MAAO,MAAQ,gBAAgB,KAAKh+B,EAAG,EAAE,OAAO,EAAG,EAAE,CAC7D,CACI,UAAUy9B,EAAaM,EAAa3Y,GAAO,CAEvC,MAAM4Y,GAAoB,CAAC,GAAGD,CAAW,EACzCC,GAAkB,KAAM,EAGxB,IAAIh+B,GAAM,GAFQ,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACtB,IAAIO,GAAkB,KAAK,GAAG,CAAC,GAC7D,OAAI5Y,KACAplB,IAAO,IAAIolB,EAAK,IACb,OAAS,gBAAgB,KAAKplB,EAAG,EAAE,OAAO,EAAG,EAAE,CAC9D,CACI,oBAAoBy9B,EAAahV,EAAY0V,GAAQ,CAGjD,MAAMn+B,GAAM,GAFM,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACpB,IAAIhV,CAAU,GACxC5S,GAAO,OAAS,gBAAgB,KAAK7V,EAAG,EAAE,OAAO,EAAG,EAAE,EAC5D,OAAOm+B,GAAS,GAAGtoB,EAAI,QAAUA,EACzC,CACI,wBAAwB4nB,EAAahV,EAAY,CAG7C,MAAMzoB,GAAM,GAFM,KAAK,aAAay9B,CAAW,EACX,QAAQ,IAAK,GAAG,CACpB,IAAIhV,CAAU,GAC9C,MAAO,OAAS,gBAAgB,KAAKzoB,EAAG,EAAE,OAAO,EAAG,EAAE,CAC9D,CACI,eAAei2B,EAAcmI,EAAsB,CAC/C,OAAO,UAAUnI,EAAe,IAAMmI,CAAoB,CAClE,CACI,cAAcC,EAAgBC,EAAiBC,GAAmBC,GAAoB,CAClF,OAAO,UAAUH,EACb,IACAE,GAAkB,QAAQ,OAAQ,GAAG,EACrC,IACAD,CAAe,CAC3B,CACI,iCAAiChW,EAAYnf,EAAO,CAChD,OAAOmf,EAAa,IAAMnf,CAClC,CACI,oBAAoByhB,EAAWxf,EAAckd,GAAY,CACrD,OAAO,UAAUsC,EAAY,KAAOtC,IAA0Bld,EAAa,CACnF,CACI,2BAA2Bwf,EAAWxf,EAAckd,GAAY,CAC5D,OAAO,KAAK,oBAAoBsC,EAAWxf,EAAckd,EAAU,CAC3E,CAOI,gBAAgBlR,EAAQwT,EAAW,CAC/B,OAAOxT,EAASwT,CACxB,CACA,CCvIO,MAAM,WAAY,CAIrB,YAAYtJ,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,aAAa,EAI9C,KAAK,WAAa,GAIlB,KAAK,YAAc,GAInB,KAAK,UAAY,GAIjB,KAAK,SAAW,GAIhB,KAAK,QAAU,GAKf,KAAK,OAAS,GAKd,KAAK,SAAW,GAIhB,KAAK,SAAW,GACZA,IACA,KAAK,KAAOA,EAAQ,KACpB,KAAK,KAAOA,EAAQ,MAAQ,GAC5B,KAAK,OAASA,EAAQ,QAAU,GAChC,KAAK,MAAQA,EAAQ,MACrB,KAAK,QAAUA,EAAQ,QACvB,KAAK,UAAYA,EAAQ,UACzB,KAAK,UAAYA,EAAQ,UACzB,KAAK,MAAQA,EAAQ,MACrB,KAAK,SAAWA,EAAQ,UAAY,GACpC,KAAK,SAAW,KAAK,SAAW,GAAOA,EAAQ,UAAY,GAC3D,KAAK,QAAUA,EAAQ,QACvB,KAAK,SAAWA,EAAQ,SACxB,KAAK,WAAaA,EAAQ,YAAc,GACxC,KAAK,YAAcA,EAAQ,aAAe,GAC1C,KAAK,mBAAqBA,EAAQ,mBAClC,KAAK,kBAAoBA,EAAQ,kBACjC,KAAK,UAAYA,EAAQ,WAAa,GACtC,KAAK,SAAWA,EAAQ,UAAY,GACpC,KAAK,QAAUA,EAAQ,SAAW,GAClC,KAAK,QAAUA,EAAQ,QACvB,KAAK,KAAOA,EAAQ,KACpB,KAAK,SAAWA,EAAQ,SACxB,KAAK,yBAA2BA,EAAQ,yBACxC,KAAK,aAAeA,EAAQ,aAC5B,KAAK,cAAgBA,EAAQ,cAC7B,KAAK,mBAAqBA,EAAQ,mBAClC,KAAK,KAAOA,EAAQ,KAEhC,CAOI,OAAQ,CACJ,OAAO,IAAI,YAAY,CACnB,KAAM,KAAK,KACX,KAAM,KAAK,KACX,OAAQ,KAAK,OACb,MAAO,KAAK,MACZ,QAAS,KAAK,QACd,UAAW,KAAK,UAChB,UAAW,KAAK,UAChB,MAAO,KAAK,MACZ,SAAU,KAAK,SACf,SAAU,KAAK,SACf,KAAM,KAAK,KACX,SAAU,KAAK,SACf,yBAA0B,KAAK,yBAC/B,aAAc,KAAK,aACnB,cAAe,KAAK,cACpB,QAAS,KAAK,QACd,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,YAAa,KAAK,YAClB,mBAAoB,KAAK,mBACzB,kBAAmB,KAAK,kBACxB,UAAW,KAAK,UAChB,SAAU,KAAK,SACf,QAAS,KAAK,QACd,QAAS,KAAK,QACd,mBAAoB,KAAK,mBACzB,KAAM,KAAK,IACvB,CAAS,CACT,CACA,CC3GO,MAAM,UAAW,CAIpB,YAAYA,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,YAAY,EAI7C,KAAK,YAAc,CAAE,EACrB,KAAK,KAAOA,EAAQ,KACpB,KAAK,YAAcA,EAAQ,YAC3B,KAAK,SAAW,CAAC,CAACA,EAAQ,SAC1B,KAAK,UAAY,CAAC,CAACA,EAAQ,UAC3B,KAAK,aAAe,CAAC,CAACA,EAAQ,aAC9B,KAAK,WAAa,CAAC,CAACA,EAAQ,WAC5B,KAAK,eAAiB,CAAC,CAACA,EAAQ,eAChC,KAAK,OAASA,EAAQ,OACtB,KAAK,MAAQA,EAAQ,MAAQA,EAAQ,MAAQ,EACrD,CAOI,OAAQ,CACJ,OAAO,IAAI,WAAW,CAClB,KAAM,KAAK,KACX,YAAa,CAAC,GAAG,KAAK,WAAW,EACjC,SAAU,KAAK,SACf,UAAW,KAAK,UAChB,aAAc,KAAK,aACnB,WAAY,KAAK,WACjB,eAAgB,KAAK,eACrB,OAAQ,KAAK,OACb,MAAO,KAAK,KACxB,CAAS,CACT,CAOI,OAAO,OAAOmd,EAAe,CACzB,OAAO,IAAI,WAAW,CAClB,KAAMA,EAAc,KACpB,YAAaA,EAAc,QAAQ,IAAKzmB,GAAWA,EAAO,YAAY,EACtE,SAAUymB,EAAc,SACxB,UAAWA,EAAc,UACzB,aAAcA,EAAc,aAC5B,WAAYA,EAAc,WAC1B,eAAgBA,EAAc,eAC9B,OAAQA,EAAc,OACtB,MAAOA,EAAc,KACjC,CAAS,CACT,CACA,CC1DO,MAAM,eAAgB,CAIzB,YAAYnd,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,iBAAiB,EAIlD,KAAK,YAAc,CAAE,EAIrB,KAAK,sBAAwB,CAAE,EAC/B,KAAK,KAAOA,EAAQ,KACpB,KAAK,YAAcA,EAAQ,YAC3B,KAAK,sBAAwBA,EAAQ,sBACrC,KAAK,mBAAqBA,EAAQ,mBAClC,KAAK,iBAAmBA,EAAQ,iBAChC,KAAK,oBAAsBA,EAAQ,oBACnC,KAAK,SAAWA,EAAQ,SACxB,KAAK,SAAWA,EAAQ,SACxB,KAAK,WAAaA,EAAQ,UAClC,CAOI,OAAQ,CACJ,OAAO,IAAI,gBAAgB,CACvB,KAAM,KAAK,KACX,YAAa,CAAC,GAAG,KAAK,WAAW,EACjC,sBAAuB,CAAC,GAAG,KAAK,qBAAqB,EACrD,mBAAoB,KAAK,mBACzB,iBAAkB,KAAK,iBACvB,oBAAqB,KAAK,oBAC1B,SAAU,KAAK,SACf,SAAU,KAAK,SACf,WAAY,KAAK,UAC7B,CAAS,CACT,CAOI,OAAO,OAAOhf,EAAU4V,EAAQ,CAC5B,OAAO,IAAI,gBAAgB,CACvB,KAAM5V,EAAS,KACf,YAAaA,EAAS,YACtB,sBAAuBA,EAAS,sBAChC,mBAAoBA,EAAS,yBAAyB,SACtD,iBAAkBA,EAAS,yBAAyB,OACpD,oBAAqBA,EAAS,oBAC9B,SAAUA,EAAS,SACnB,SAAUA,EAAS,SACnB,WAAYA,EAAS,UACjC,CAAS,CACT,CACA,CCjEO,MAAM,UAAW,CACpB,OAAO,yBAAyBo8B,EAAgBxmB,EAAQ,CACpD,MAAO,CACH,KAAMwmB,EAAe,aACrB,OAAQxmB,EAAO,gBAAgBwmB,CAAc,EAC7C,MAAOA,EAAe,MACtB,QAASA,EAAe,QACxB,UAAWA,EAAe,UAC1B,UAAWA,EAAe,UAC1B,MAAOA,EAAe,MACtB,SAAUA,EAAe,SACzB,SAAUA,EAAe,SACzB,aAAcA,EAAe,aAC7B,cAAeA,EAAe,cAC9B,QAASxmB,EAAO,iBAAiBwmB,CAAc,EAC/C,SAAUA,EAAe,SACzB,QAASA,EAAe,QACxB,YAAaA,EAAe,YAC5B,mBAAoBA,EAAe,mBACnC,kBAAmBA,EAAe,kBAClC,WAAYA,EAAe,WAC3B,KAAMxmB,EAAO,cAAcwmB,CAAc,EACzC,UAAWA,EAAe,UAC1B,SAAUxmB,EAAO,kBAAkBwmB,CAAc,EACjD,QAASA,EAAe,SAAW,GACnC,KAAMA,EAAe,KACfA,EAAe,KAAK,IAAK/sB,IAAQA,GAAM,EAAE,EACzC+sB,EAAe,KACrB,SAAUA,EAAe,SACzB,yBAA0BA,EAAe,yBACzC,mBAAoBA,EAAe,mBACnC,KAAMA,EAAe,IACxB,CACT,CACA,CC/BO,MAAM,WAAY,CAIrB,YAAYpd,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,aAAa,EAI9C,KAAK,YAAc,CAAE,EACrB,KAAK,KAAOA,EAAQ,KACpB,KAAK,YAAcA,EAAQ,YAC3B,KAAK,WAAaA,EAAQ,UAClC,CAOI,OAAQ,CACJ,OAAO,IAAI,YAAY,CACnB,KAAM,KAAK,KACX,YAAa,CAAC,GAAG,KAAK,WAAW,EACjC,WAAY,KAAK,UAC7B,CAAS,CACT,CAOI,OAAO,OAAOqd,EAAgB,CAC1B,OAAO,IAAI,YAAY,CACnB,KAAMA,EAAe,KACrB,YAAaA,EAAe,QAAQ,IAAK3mB,GAAWA,EAAO,YAAY,EACvE,WAAY2mB,EAAe,UACvC,CAAS,CACT,CACA,CCxCO,MAAM,UAAW,CAIpB,YAAYrd,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,YAAY,EAI7C,KAAK,YAAc,CAAE,EACrB,KAAK,KAAOA,EAAQ,KACpB,KAAK,YAAcA,EAAQ,YAC3B,KAAK,WAAaA,EAAQ,UAClC,CAOI,OAAQ,CACJ,OAAO,IAAI,WAAW,CAClB,KAAM,KAAK,KACX,YAAa,KAAK,YAAc,CAAC,GAAG,KAAK,WAAW,EAAI,CAAE,EAC1D,WAAY,KAAK,UAC7B,CAAS,CACT,CAOI,OAAO,OAAOsd,EAAe,CACzB,OAAO,IAAI,WAAW,CAClB,KAAMA,EAAc,KACpB,WAAYA,EAAc,UACtC,CAAS,CACT,CACA,CCvCO,MAAM,cAAe,CAIxB,YAAYtd,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,gBAAgB,EACjD,KAAK,KAAOA,EAAQ,KACpB,KAAK,WAAaA,EAAQ,UAClC,CAOI,OAAQ,CACJ,OAAO,IAAI,eAAe,CACtB,KAAM,KAAK,KACX,WAAY,KAAK,UAC7B,CAAS,CACT,CAOI,OAAO,OAAOud,EAAmB,CAC7B,OAAO,IAAI,eAAe,CACtB,KAAMA,EAAkB,KACxB,WAAYA,EAAkB,UAC1C,CAAS,CACT,CACA,CC1BO,MAAM,KAAM,CAIf,YAAYvd,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,OAAO,EAIxC,KAAK,QAAU,CAAE,EAIjB,KAAK,QAAU,CAAE,EAIjB,KAAK,YAAc,CAAE,EAIrB,KAAK,QAAU,CAAE,EAIjB,KAAK,OAAS,CAAE,EAIhB,KAAK,WAAa,CAAE,EAMpB,KAAK,YAAc,GAInB,KAAK,aAAe,GAChBA,IACA,KAAK,SAAWA,EAAQ,SACxB,KAAK,OAASA,EAAQ,OACtB,KAAK,KAAOA,EAAQ,KAChBA,EAAQ,UACR,KAAK,QAAUA,EAAQ,QAAQ,IAAKtJ,GAAW,IAAI,YAAYA,CAAM,CAAC,GACtEsJ,EAAQ,UACR,KAAK,QAAUA,EAAQ,QAAQ,IAAKnY,GAAU,IAAI,WAAWA,CAAK,CAAC,GACnEmY,EAAQ,cACR,KAAK,YAAcA,EAAQ,YAAY,IAAKwd,GAAe,IAAI,gBAAgB,CAC3E,GAAGA,EACH,mBAAoBA,GAAY,oBAC5Bxd,EAAQ,SACZ,iBAAkBwd,GAAY,kBAAoBxd,EAAQ,MAC9E,CAAiB,CAAC,GACFA,EAAQ,UACR,KAAK,QAAUA,EAAQ,QAAQ,IAAKhW,GAAW,IAAI,YAAYA,CAAM,CAAC,GACtEgW,EAAQ,SACR,KAAK,OAASA,EAAQ,OAAO,IAAK/V,GAAU,IAAI,WAAWA,CAAK,CAAC,GACjE+V,EAAQ,aACR,KAAK,WAAaA,EAAQ,WAAW,IAAK9V,GAAc,IAAI,eAAeA,CAAS,CAAC,GACrF8V,EAAQ,cAAgB,SACxB,KAAK,YAAcA,EAAQ,aAC3BA,EAAQ,eACR,KAAK,aAAeA,EAAQ,cAChC,KAAK,OAASA,EAAQ,OACtB,KAAK,QAAUA,EAAQ,QAEnC,CAII,IAAI,gBAAiB,CACjB,OAAO,KAAK,QAAQ,OAAQtJ,GAAWA,EAAO,SAAS,CAC/D,CAOI,OAAQ,CACJ,OAAO,IAAI,MAAM,CACb,OAAQ,KAAK,OACb,SAAU,KAAK,SACf,KAAM,KAAK,KACX,QAAS,KAAK,QAAQ,IAAKA,GAAWA,EAAO,OAAO,EACpD,QAAS,KAAK,QAAQ,IAAK+mB,GAAeA,EAAW,OAAO,EAC5D,YAAa,KAAK,YAAY,IAAKA,GAAeA,EAAW,OAAO,EACpE,QAAS,KAAK,QAAQ,IAAKA,GAAeA,EAAW,OAAO,EAC5D,OAAQ,KAAK,OAAO,IAAKA,GAAeA,EAAW,OAAO,EAC1D,WAAY,KAAK,WAAW,IAAKA,GAAeA,EAAW,OAAO,EAClE,YAAa,KAAK,YAClB,aAAc,KAAK,aACnB,OAAQ,KAAK,OACb,QAAS,KAAK,OAC1B,CAAS,CACT,CAII,UAAU/mB,EAAQ,CACd,KAAK,QAAQ,KAAKA,CAAM,CAChC,CAII,aAAaA,EAAQ,CACjB,MAAMgnB,EAAc,KAAK,QAAQ,KAAMnxB,IAAMA,GAAE,OAASmK,EAAO,IAAI,EAC/DgnB,GACA,KAAK,QAAQ,OAAO,KAAK,QAAQ,QAAQA,CAAW,EAAG,CAAC,CACpE,CAII,oBAAoBC,EAAkB,CAElC,GADA,KAAK,QAAQ,KAAKA,CAAgB,EAC9BA,EAAiB,YAAY,SAAW,EAAG,CAC3C,MAAMC,EAAe,KAAK,QAAQ,KAAMlnB,IAAWA,GAAO,OAASinB,EAAiB,YAAY,CAAC,CAAC,EAC9FC,IACAA,EAAa,SAAW,GACxC,CACA,CAII,uBAAuBC,EAAe,CAClC,MAAMC,EAAc,KAAK,QAAQ,KAAM9zB,IAAWA,GAAO,OAAS6zB,EAAc,IAAI,EACpF,GAAIC,IACA,KAAK,QAAQ,OAAO,KAAK,QAAQ,QAAQA,CAAW,EAAG,CAAC,EACpDA,EAAY,YAAY,SAAW,GAAG,CACtC,MAAMF,GAAe,KAAK,QAAQ,KAAMlnB,IAAWA,GAAO,OAASonB,EAAY,YAAY,CAAC,CAAC,EACzFF,KACAA,GAAa,SAAW,GAC5C,CAEA,CAII,mBAAmBG,EAAiB,CAChC,KAAK,OAAO,KAAKA,CAAe,CACxC,CAII,sBAAsBC,EAAc,CAChC,MAAMC,EAAa,KAAK,OAAO,KAAMh0B,IAAUA,GAAM,OAAS+zB,EAAa,IAAI,EAC3EC,GACA,KAAK,OAAO,OAAO,KAAK,OAAO,QAAQA,CAAU,EAAG,CAAC,CAEjE,CAII,uBAAuBC,EAAqB,CACxC,KAAK,WAAW,KAAKA,CAAmB,CAChD,CAII,0BAA0BC,EAAkB,CACxC,MAAMC,EAAiB,KAAK,WAAW,KAAMl0B,IAAcA,GAAU,OAASi0B,EAAiB,IAAI,EAC/FC,GACA,KAAK,WAAW,OAAO,KAAK,WAAW,QAAQA,CAAc,EAAG,CAAC,CAE7E,CAII,cAAcZ,EAAY,CACtB,KAAK,YAAY,KAAKA,CAAU,CACxC,CAII,iBAAiBa,EAAmB,CAChC,MAAMC,EAAK,KAAK,YAAY,KAAMd,IAAeA,GAAW,OAASa,EAAkB,IAAI,EACvFC,GACA,KAAK,YAAY,OAAO,KAAK,YAAY,QAAQA,CAAE,EAAG,CAAC,CACnE,CAII,SAASz2B,EAAO02B,EAAU,GAAO,CAI7B,GAHA,KAAK,QAAQ,KAAK12B,CAAK,EAGnBA,EAAM,YAAY,SAAW,GAAKA,EAAM,UAAY02B,EAAS,CAC7D,MAAM7nB,GAAS,KAAK,QAAQ,KAAMnK,IAAMA,GAAE,OAAS1E,EAAM,YAAY,CAAC,CAAC,EACnE6O,KACAA,GAAO,SAAW,GAClC,CACA,CAII,YAAY8nB,EAAYD,EAAU,GAAO,CACrC,MAAM12B,GAAQ,KAAK,QAAQ,KAAMA,IAAUA,GAAM,OAAS22B,EAAW,IAAI,EACzE,GAAI32B,KACA,KAAK,QAAQ,OAAO,KAAK,QAAQ,QAAQA,EAAK,EAAG,CAAC,EAG9CA,GAAM,YAAY,SAAW,GAAKA,GAAM,UAAY02B,GAAS,CAC7D,MAAM7nB,GAAS,KAAK,QAAQ,KAAMnK,IAAMA,GAAE,OAAS1E,GAAM,YAAY,CAAC,CAAC,EACnE6O,KACAA,GAAO,SAAW,KAAK,QAAQ,KAAM+nB,IAAQA,GAAI,YAAY,SAAW,GACpEA,GAAI,YAAY,CAAC,IAAM/nB,GAAO,MAC9B,CAAC,CAAC7O,GAAM,QAAQ,EACxC,CAEA,CACI,iBAAiB0M,EAAM,CACnB,OAAO,KAAK,QAAQ,KAAMmC,GAAWA,EAAO,OAASnC,CAAI,CACjE,CAII,kBAAkBmC,EAAQ,CACtB,OAAO,KAAK,QAAQ,OAAQ7O,GACjB,CAAC,CAACA,EAAM,YAAY,KAAMmf,IAAeA,KAAetQ,EAAO,IAAI,CAC7E,CACT,CAII,sBAAsBA,EAAQ,CAC1B,OAAO,KAAK,YAAY,OAAQ8mB,GACrB,CAAC,CAACA,EAAW,YAAY,KAAMxW,IAAeA,KAAetQ,EAAO,IAAI,CAClF,CACT,CAII,kBAAkBA,EAAQ,CACtB,OAAO,KAAK,QAAQ,OAAQ1M,GACjB,CAAC,CAACA,EAAO,YAAY,KAAMgd,IAAeA,KAAetQ,EAAO,IAAI,CAC9E,CACT,CAII,iBAAiBA,EAAQ,CACrB,OAAO,KAAK,OAAO,OAAQzM,GAChB,CAAC,CAACA,EAAM,YAAY,KAAM+c,IAAeA,KAAetQ,EAAO,IAAI,CAC7E,CACT,CAOI,OAAO,OAAOU,EAAgBR,EAAQ,CAClC,MAAMkB,GAAWV,EAAe,WAAaR,EAAO,SAC9C,OACAQ,EAAe,SACfsnB,GAAStnB,EAAe,SAAWR,EAAO,QAAQ,OAClD,OACAQ,EAAe,OACf4I,GAAU,CACZ,SAAU5I,EAAe,SACzB,OAAQA,EAAe,OACvB,KAAMR,EAAO,eAAeQ,EAAe,UAAWsnB,GAAQ5mB,EAAQ,EACtE,aAAcV,EAAe,aAC7B,OAAQA,EAAe,OACvB,QAASA,EAAe,QACnB,OAAQV,IAAWA,IAAU,CAACA,GAAO,iBAAiB,EACtD,IAAKA,IAAW,WAAW,yBAAyBA,GAAQE,CAAM,CAAC,EACxE,QAASQ,EAAe,QACnB,OAAQvP,IAAUA,GAAM,cAAgB,EAAI,EAC5C,IAAKA,IAAU,WAAW,OAAOA,EAAK,CAAC,EAC5C,QAASuP,EAAe,QAAQ,IAAKpN,IAAW,YAAY,OAAOA,EAAM,CAAC,EAC1E,OAAQoN,EAAe,OAAO,IAAKnN,IAAU,WAAW,OAAOA,EAAK,CAAC,EACrE,WAAYmN,EAAe,WAAW,IAAKlN,IAAc,eAAe,OAAOA,EAAS,CAAC,EACzF,QAASkN,EAAe,OAC3B,EACD,OAAO,IAAI,MAAM4I,EAAO,CAChC,CACA,CC9RO,MAAM,SAAU,CAInB,YAAYxJ,EAAImoB,EAAWpqB,GAAMqqB,GAAUC,GAAa,CACpD,KAAK,GAAKroB,EACV,KAAK,UAAYmoB,EACjB,KAAK,KAAOpqB,GACZ,KAAK,SAAWqqB,GAChB,KAAK,YAAcC,EAC3B,CACA,CCTO,MAAM,cAAe,CACxB,YAAYlgC,EAAOkW,KAASiqB,GAAQ,CAChC,KAAK,MAAQngC,EACb,KAAK,KAAOkW,EACZ,KAAK,aAAa,EAAI,OAAO,IAAI,gBAAgB,EAIjD,KAAK,OAAS,CAAE,EAChB,KAAK,OAASiqB,IAAU,CAAE,CAClC,CACA,CCRO,MAAM,iBAAkB,CAI3B,YAAYlc,EAAYkC,EAAa,CACjC,KAAK,WAAalC,EAClB,KAAK,YAAckC,EAUnB,KAAK,YAAc,MACnB,KAAM,CAAE,OAAA4Z,EAAQ,EAAG,KAAK,WAAW,OAAO,QACpC5mB,GAAW,KAAK,WAAW,OAAO,SACxC,KAAK,mBAAqBA,GAC1B,KAAK,iBAAmB4mB,GACxB,KAAK,oBACD9b,EAAW,QAAQ,qBAAuB,aAC9C,KAAK,gBAAkB,KAAK,WAAW,OAAO,eAAe,KAAK,oBAAqB8b,GAAQ5mB,EAAQ,CAC/G,CAOI,MAAM,iBAAiBO,EAAW,CAC9B,OAAO,KAAK,gBAAgB,MAAOyM,GAAgB,CAC/C,MAAM,KAAK,gCAAgCA,CAAW,EAEtD,MAAMia,GAAgB,KAAK,WAAW,OAAO,oBAAqB,EAClE,OAAI,gBAAgB,qBAAqBA,EAAa,GAClD,MAAMA,GAAc,+BAA+Bja,CAAW,EAElE,MAAMA,EAAY,gBAAiB,EACnC,MAAMzM,EAAU,SAAS,GAAGyM,CAAW,EACvC,MAAMA,EAAY,eAAgB,EAClC,MAAM,KAAK,wBAAwBA,EAAazM,CAAS,EAClDA,CACnB,CAAS,CACT,CAII,MAAM,kBAAmB,CACrB,OAAO,QAAQ,QAAQ,KAAK,cAAa,CAAE,CACnD,CAII,MAAM,uBAAwB,CAC1B,OAAO,KAAK,gBAAgB,MAAOyM,IAC/B,MAAM,KAAK,gCAAgCA,CAAW,EAC/C,MAAM,KAAK,uBAAuBA,CAAW,EACvD,CACT,CAII,MAAM,sBAAuB,CACzB,MAAMka,EAAgB,MAAM,KAAK,iBAAkB,EAC7CC,EAAqB,MAAM,KAAK,sBAAuB,EAC7D,OAAOD,EAAc,OAAQ3mB,IAAc,CAAC4mB,EAAmB,KAAMC,IAAsBA,GAAkB,OAAS7mB,GAAU,IAAI,CAAC,CAC7I,CAII,gBAAgBA,EAAW,CACvB,OAAO,KAAK,gBAAiB8mB,GAAM,KAAK,wBAAwBA,EAAG9mB,CAAS,CAAC,CACrF,CAII,gBAAgBA,EAAW,CACvB,OAAO,KAAK,gBAAiB8mB,GAAM,KAAK,wBAAwBA,EAAG9mB,CAAS,CAAC,CACrF,CAKI,MAAM,gBAAiB,CACnB,IAAI+mB,EAAyB,GAC7B,MAAMta,EAAc,KAAK,aAAe,KAAK,WAAW,kBAAmB,EAE3E,MAAM,KAAK,gCAAgCA,CAAW,EAEtD,MAAMma,GAAqB,MAAM,KAAK,uBAAuBna,CAAW,EAElEka,GAAgB,KAAK,cAAe,EAC1C,UAAW3mB,MAAa2mB,GAAe,CACnC,MAAME,GAAoBD,GAAmB,KAAMC,IAAsBA,GAAkB,OAAS7mB,GAAU,IAAI,EAC9G6mB,GACA,KAAK,WAAW,OAAO,eAAe,OAAOA,GAAkB,EAAE,IAAI7mB,GAAU,IAAI,EAAE,GAGrF+mB,EAAyB,GACzB,KAAK,WAAW,OAAO,eAAe,OAAO/mB,GAAU,IAAI,EAAE,EAE7E,CAEQ,OAAK,KAAK,aACN,MAAMyM,EAAY,QAAS,EAExBsa,CACf,CAKI,MAAM,0BAA2B,CAC7B,MAAMta,EAAc,KAAK,aAAe,KAAK,WAAW,kBAAmB,EAE3E,MAAM,KAAK,gCAAgCA,CAAW,EAEtD,MAAMia,EAAgB,KAAK,WAAW,OAAO,oBAAqB,EAC9D,gBAAgB,qBAAqBA,CAAa,GAClD,MAAMA,EAAc,+BAA+Bja,CAAW,EAGlE,MAAMma,GAAqB,MAAM,KAAK,uBAAuBna,CAAW,EAExE,IAAIua,GAA4B,KAAK,4BAA4BJ,EAAkB,EAEnF,MAAMD,GAAgB,KAAK,cAAe,EAEpCM,GAAoB,CAAE,EAEtBC,GAAoBP,GAAc,OAAQ3mB,IAElB,CAAA4mB,GAAmB,KAAMC,IAAsBA,GAAkB,OAAS7mB,GAAU,IAAI,CAQrH,EAED,GAAI,CAACknB,GAAkB,OACnB,YAAK,WAAW,OAAO,eAAe,2BAA2B,EAE5D,KAAK,aACN,MAAMza,EAAY,QAAS,EACxB,CAAE,EAQb,GALA,KAAK,WAAW,OAAO,eAAe,GAAGma,GAAmB,MAAM,iDAAiD,EACnH,KAAK,WAAW,OAAO,eAAe,GAAGD,GAAc,MAAM,4CAA4C,EACrGK,IACA,KAAK,WAAW,OAAO,eAAe,GAAGA,GAA0B,IAAI,uDAAuD,IAAI,KAAKA,GAA0B,SAAS,EAAE,SAAQ,CAAE,GAAG,EAC7L,KAAK,WAAW,OAAO,eAAe,GAAGE,GAAkB,MAAM,kDAAkD,EAC/G,KAAK,cAAgB,MAAO,CAM5B,MAAMpnB,GAAsConB,GAAkB,OAAQlnB,IAAgBA,GAAU,UAAU,cAAgB,MAAU,EACpI,GAAIF,GAAoC,OAAS,EAAG,CAChD,MAAMrQ,GAAQ,IAAI,sCAAsCqQ,EAAmC,EAC3F,WAAK,WAAW,OAAO,aAAa,6BAA6BrQ,GAAM,OAAO,EAAE,EAC1EA,EACtB,CACA,CAOQ,MAAM03B,GAAgB,CAClB,KAAM,GACN,KAAM,GACN,IAAK,EACjB,EAAU,KAAK,WAAW,EAClB,UAAWnnB,MAAaknB,GACpB,GAAIlnB,GAAU,SAAU,CACpB,MAAMonB,GAAapnB,GAAU,SAAS,YAClConB,KAAe,OACfpnB,GAAU,YAAcmnB,GAGxBnnB,GAAU,YAAconB,EAE5C,CAGQ,IAAItW,GAAyB,GACzB,KAAK,cAAgB,OAAS,CAACrE,EAAY,sBAC3C,MAAMA,EAAY,gBAAiB,EACnC,MAAMA,EAAY,iBAAkB,EACpCqE,GAAyB,IAG7B,GAAI,CACA,UAAW9Q,MAAaknB,GAAmB,CACvC,GAAI,KAAK,KAAM,CAEX,MAAM,KAAK,wBAAwBza,EAAazM,EAAS,EAEzD,QACpB,CACoBA,GAAU,aAAe,CAACyM,EAAY,sBACtC,MAAMA,EAAY,gBAAiB,EACnC,MAAMA,EAAY,iBAAkB,EACpCqE,GAAyB,IAE7B,MAAM9Q,GACD,SAAS,GAAGyM,CAAW,EACvB,MAAOhd,IAAU,CAElB,WAAK,WAAW,OAAO,aAAa,cAAcuQ,GAAU,IAAI,oBAAoBvQ,IAAO,OAAO,EAAE,EAC9FA,EACT,CAAA,EACI,KAAK,SAAY,CAElB,MAAM,KAAK,wBAAwBgd,EAAazM,EAAS,EAErDA,GAAU,aAAe8Q,KACzB,MAAMrE,EAAY,kBAAmB,EACrC,MAAMA,EAAY,eAAgB,EAEzC,CAAA,EACI,KAAK,IAAM,CAEZwa,GAAkB,KAAKjnB,EAAS,EAChC,KAAK,WAAW,OAAO,eAAe,aAAaA,GAAU,IAAI,aAAa,KAAK,KAAO,SAAW,EAAE,yBAAyB,CACpJ,CAAiB,CACjB,CAEgB,KAAK,cAAgB,OAAS8Q,KAC9B,MAAMrE,EAAY,kBAAmB,EACrC,MAAMA,EAAY,eAAgB,EAElD,OACe4a,GAAK,CAER,GAAIvW,GACA,GAAI,CAEA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAM4a,EAClB,QACgB,CAEC,KAAK,aACN,MAAM5a,EAAY,QAAS,CAC3C,CACQ,OAAOwa,EACf,CAII,MAAM,mBAAoB,CACtB,MAAMxa,EAAc,KAAK,aAAe,KAAK,WAAW,kBAAmB,EAE3E,MAAM,KAAK,gCAAgCA,CAAW,EAEtD,MAAMia,EAAgB,KAAK,WAAW,OAAO,oBAAqB,EAC9D,gBAAgB,qBAAqBA,CAAa,GAClD,MAAMA,EAAc,+BAA+Bja,CAAW,EAGlE,MAAMma,GAAqB,MAAM,KAAK,uBAAuBna,CAAW,EAExE,IAAIua,GAA4B,KAAK,2BAA2BJ,EAAkB,EAElF,GAAI,CAACI,GAA2B,CAC5B,KAAK,WAAW,OAAO,eAAe,8DAA8D,EACpG,MACZ,CAIQ,MAAMM,GAFgB,KAAK,cAAe,EAEF,KAAMtnB,IAAcA,GAAU,OAASgnB,GAA0B,IAAI,EAE7G,GAAI,CAACM,GACD,MAAM,IAAI,aAAa,gBAAgBN,GAA0B,IAAI,+HAA+H,EAExM,KAAK,WAAW,OAAO,eAAe,GAAGJ,GAAmB,MAAM,iDAAiD,EACnH,KAAK,WAAW,OAAO,eAAe,GAAGI,GAA0B,IAAI,uDAAuD,IAAI,KAAKA,GAA0B,SAAS,EAAE,SAAQ,CAAE,GAAG,EACzL,KAAK,WAAW,OAAO,eAAe,qBAAqB,EAE3D,IAAIlW,GAAyB,GACzB,KAAK,cAAgB,QAAU,CAACrE,EAAY,sBAC5C,MAAMA,EAAY,iBAAkB,EACpCqE,GAAyB,IAE7B,GAAI,CACK,KAAK,OACN,MAAMrE,EAAY,gBAAiB,EACnC,MAAM6a,GAAkB,SAAS,KAAK7a,CAAW,EACjD,MAAMA,EAAY,eAAgB,GAEtC,MAAM,KAAK,wBAAwBA,EAAa6a,EAAiB,EACjE,KAAK,WAAW,OAAO,eAAe,aAAaA,GAAkB,IAAI,aAAa,KAAK,KAAO,SAAW,EAAE,yBAAyB,EAEpIxW,IACA,MAAMrE,EAAY,kBAAmB,CACrD,OACe4a,GAAK,CAER,GAAIvW,GACA,GAAI,CAEA,MAAMrE,EAAY,oBAAqB,CAC3D,MACsC,CAAA,CAE1B,MAAM4a,EAClB,QACgB,CAEC,KAAK,aACN,MAAM5a,EAAY,QAAS,CAC3C,CACA,CAOI,MAAM,gCAAgCA,EAAa,CAE/C,GAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,UACxC,OAEe,MAAMA,EAAY,SAAS,KAAK,eAAe,GAE9D,MAAMA,EAAY,YAAY,IAAI,MAAM,CACpC,SAAU,KAAK,mBACf,OAAQ,KAAK,iBACb,KAAM,KAAK,gBACX,QAAS,CACL,CACI,KAAM,KACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,WACjC,CAAyB,EACD,YAAa,GACb,mBAAoB,YACpB,UAAW,GACX,WAAY,EACf,EACD,CACI,KAAM,YACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,kBACjC,CAAyB,EACD,UAAW,GACX,WAAY,EACf,EACD,CACI,KAAM,OACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,aACjC,CAAyB,EACD,WAAY,EACf,CACJ,CACjB,CAAa,CAAC,CAEd,CAII,MAAM,uBAAuBA,EAAa,CACtC,OAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,UACpBA,EAEf,OAAO,KAAK,oBAAqB,CAAE,CAAA,EACnC,KAAK,CAAE,IAAK,EAAI,CAAA,EAChB,QAAS,GAGQ,MAAM,KAAK,WAAW,QACvC,mBAAmBA,CAAW,EAC9B,OAAM,EACN,QAAQ,KAAK,WAAW,OAAO,OAAO,IAAI,EAAG,MAAM,EACnD,KAAK,KAAK,gBAAiB,KAAK,mBAAmB,EACnD,WAAY,GACI,IAAK8a,IACf,IAAI,UAAU,SAASA,GAAa,EAAK,EAAG,SAASA,GAAa,SAAY,EAAGA,GAAa,IAAO,CAC/G,CAEb,CAII,eAAgB,CACZ,MAAMC,EAAa,KAAK,WAAW,WAAW,IAAKxnB,GAAc,CAC7D,MAAMynB,GAAqBznB,EAAU,MAAQA,EAAU,YAAY,KAC7D0nB,GAAqB,SAASD,GAAmB,OAAO,GAAG,EAAG,EAAE,EACtE,GAAI,CAACC,IAAsB,MAAMA,EAAkB,EAC/C,MAAM,IAAI,aAAa,GAAGD,EAAkB,6FAA6F,EAE7I,OAAO,IAAI,UAAU,OAAWC,GAAoBD,GAAoBznB,CAAS,CAC7F,CAAS,EACD,YAAK,4BAA4BwnB,CAAU,EAEpCA,EAAW,KAAK,CAAC/wB,EAAGf,KAAMe,EAAE,UAAYf,GAAE,SAAS,CAClE,CACI,4BAA4B8xB,EAAY,CACpC,MAAMznB,EAAiBynB,EAAW,IAAKxnB,IAAcA,GAAU,IAAI,EAC7D6Y,GAAa,MAAM,KAAK,IAAI,IAAI9Y,EAAe,OAAO,CAAC4nB,GAAen4B,KAAUuQ,EAAe,QAAQ4nB,EAAa,EAAIn4B,EAAK,CAAC,CAAC,EACrI,GAAIqpB,GAAW,OAAS,EACpB,MAAM,MAAM,yBAAyBA,GAAW,KAAK,IAAI,CAAC,EAAE,CAExE,CAII,4BAA4B2O,EAAY,CACpC,MAAMI,EAAmBJ,EACpB,IAAKxnB,IAAcA,EAAS,EAC5B,KAAK,CAACvJ,GAAGf,MAAOe,GAAE,UAAYf,GAAE,WAAa,EAAE,EACpD,OAAOkyB,EAAiB,OAAS,EAAIA,EAAiB,CAAC,EAAI,MACnE,CAKI,2BAA2BA,EAAkB,CACzC,OAAOA,EAAiB,OAAS,EAAIA,EAAiB,CAAC,EAAI,MACnE,CAII,MAAM,wBAAwBnb,EAAazM,EAAW,CAClD,MAAM1Q,GAAS,CAAE,EACb,KAAK,WAAW,OAAO,QAAQ,OAAS,SACxCA,GAAO,UAAe,IAAI,eAAe0Q,EAAU,UAAW,KAAK,WAAW,OAAO,cAAc,CAC/F,KAAM,KAAK,WAAW,OAAO,gBACxB,kBACrB,CAAa,CAAC,EACF1Q,GAAO,KAAU,IAAI,eAAe0Q,EAAU,KAAM,KAAK,WAAW,OAAO,cAAc,CACrF,KAAM,KAAK,WAAW,OAAO,gBAAgB,aAC7D,CAAa,CAAC,IAGF1Q,GAAO,UAAe0Q,EAAU,UAChC1Q,GAAO,KAAU0Q,EAAU,MAE3B,KAAK,WAAW,OAAO,QAAQ,OAAS,UAExC,MADoByM,EACF,mBACb,GAAG,KAAK,WAAW,OAAO,QAAQ,EAClC,WAAW,KAAK,mBAAmB,EACnC,UAAUnd,EAAM,EAIrB,MADWmd,EAAY,QAAQ,mBAAoB,EAE9C,OAAM,EACN,KAAK,KAAK,eAAe,EACzB,OAAOnd,EAAM,EACb,QAAS,CAE1B,CAII,MAAM,wBAAwBmd,EAAazM,EAAW,CAClD,MAAM4Q,GAAa,CAAE,EAcrB,GAbI,KAAK,WAAW,OAAO,QAAQ,OAAS,SACxCA,GAAW,UAAe,IAAI,eAAe5Q,EAAU,UAAW,KAAK,WAAW,OAAO,cAAc,CACnG,KAAM,KAAK,WAAW,OAAO,gBACxB,kBACrB,CAAa,CAAC,EACF4Q,GAAW,KAAU,IAAI,eAAe5Q,EAAU,KAAM,KAAK,WAAW,OAAO,cAAc,CACzF,KAAM,KAAK,WAAW,OAAO,gBAAgB,aAC7D,CAAa,CAAC,IAGF4Q,GAAW,UAAe5Q,EAAU,UACpC4Q,GAAW,KAAU5Q,EAAU,MAE/B,KAAK,WAAW,OAAO,QAAQ,OAAS,UAExC,MADoByM,EACF,mBACb,GAAG,KAAK,WAAW,OAAO,QAAQ,EAClC,WAAW,KAAK,mBAAmB,EACnC,UAAUmE,EAAU,MAExB,CACD,MAAMlB,GAAKjD,EAAY,QAAQ,mBAAoB,EACnD,MAAMiD,GACD,OAAM,EACN,KAAK,KAAK,eAAe,EACzB,MAAM,GAAGA,GAAG,OAAO,WAAW,CAAC,eAAe,EAC9C,SAAS,GAAGA,GAAG,OAAO,MAAM,CAAC,UAAU,EACvC,cAAckB,EAAU,EACxB,QAAS,CAC1B,CACA,CACI,MAAM,gBAAgBiX,EAAU,CAC5B,MAAMpb,EAAc,KAAK,aAAe,KAAK,WAAW,kBAAmB,EAC3E,GAAI,CACA,OAAO,MAAMob,EAASpb,CAAW,CAC7C,QACgB,CACC,KAAK,aACN,MAAMA,EAAY,QAAS,CAE3C,CACA,CACA,CC5fA,SAAS,UAAUqb,GAAOC,EAAYl8B,EAAQ,CAC1C,IAAIm8B,GAAc,CAAE,EAChBC,GAAU,CAAE,EAChB,OAAO,SAASC,GAAIC,GAAa,CAC7BF,GAAQE,EAAW,EAAI,GACvBH,GAAY,KAAKG,EAAW,EAC5BL,GAAMK,EAAW,EAAE,QAAQ,SAAUC,GAAM,CACvC,GAAI,CAACH,GAAQG,EAAI,EACbF,GAAIE,EAAI,UAEHJ,GAAY,QAAQI,EAAI,GAAK,EAClC,MAAAJ,GAAY,KAAKI,EAAI,EACf,IAAI,aAAa,2BAA2BJ,GAAY,KAAK,MAAM,CAAC,EAAE,CAE5F,CAAS,EACDA,GAAY,IAAK,GACZ,CAACD,GAAcD,GAAMK,EAAW,EAAE,SAAW,IAC9Ct8B,EAAO,QAAQs8B,EAAW,IAAM,IAChCt8B,EAAO,KAAKs8B,EAAW,CAE9B,CACL,CACO,MAAM,QAAS,CAClB,aAAc,CACV,KAAK,MAAQ,CAAE,EACf,KAAK,cAAgB,GACrB,KAAK,cAAgB,EAC7B,CAII,QAAQC,EAAMt3B,EAAM,CACX,KAAK,QAAQs3B,CAAI,IAEd,UAAU,SAAW,EACrB,KAAK,MAAMA,CAAI,EAAIt3B,EAGnB,KAAK,MAAMs3B,CAAI,EAAIA,EAEvB,KAAK,cAAcA,CAAI,EAAI,CAAE,EAC7B,KAAK,cAAcA,CAAI,EAAI,CAAE,EAEzC,CAII,WAAWA,EAAM,CACT,KAAK,QAAQA,CAAI,IACjB,OAAO,KAAK,MAAMA,CAAI,EACtB,OAAO,KAAK,cAAcA,CAAI,EAC9B,OAAO,KAAK,cAAcA,CAAI,EAC9B,CAAC,KAAK,cAAe,KAAK,aAAa,EAAE,QAAQ,SAAUC,EAAU,CACjE,OAAO,KAAKA,CAAQ,EAAE,QAAQ,SAAUhiC,GAAK,CACzC,MAAMowB,GAAM4R,EAAShiC,EAAG,EAAE,QAAQ+hC,CAAI,EAClC3R,IAAO,GACP4R,EAAShiC,EAAG,EAAE,OAAOowB,GAAK,CAAC,CAEnD,CAAiB,CACjB,CAAa,EAEb,CAII,QAAQ2R,EAAM,CACV,OAAO,KAAK,MAAM,eAAeA,CAAI,CAC7C,CAII,YAAYA,EAAM,CACd,GAAI,KAAK,QAAQA,CAAI,EACjB,OAAO,KAAK,MAAMA,CAAI,EAGtB,MAAM,IAAI,aAAa,wBAAwBA,CAAI,EAAE,CAEjE,CAII,YAAYA,EAAMt3B,EAAM,CACpB,GAAI,KAAK,QAAQs3B,CAAI,EACjB,KAAK,MAAMA,CAAI,EAAIt3B,MAGnB,OAAM,IAAI,aAAa,wBAAwBs3B,CAAI,EAAE,CAEjE,CAKI,cAAc/yB,EAAMizB,EAAI,CACpB,GAAI,CAAC,KAAK,QAAQjzB,CAAI,EAClB,MAAM,IAAI,aAAa,wBAAwBA,CAAI,EAAE,EAEzD,GAAI,CAAC,KAAK,QAAQizB,CAAE,EAChB,MAAM,IAAI,aAAa,wBAAwBA,CAAE,EAAE,EAEvD,OAAI,KAAK,cAAcjzB,CAAI,EAAE,QAAQizB,CAAE,IAAM,IACzC,KAAK,cAAcjzB,CAAI,EAAE,KAAKizB,CAAE,EAEhC,KAAK,cAAcA,CAAE,EAAE,QAAQjzB,CAAI,IAAM,IACzC,KAAK,cAAcizB,CAAE,EAAE,KAAKjzB,CAAI,EAE7B,EACf,CAII,iBAAiBA,EAAMizB,EAAI,CACvB,IAAI7R,GACA,KAAK,QAAQphB,CAAI,IACjBohB,GAAM,KAAK,cAAcphB,CAAI,EAAE,QAAQizB,CAAE,EACrC7R,IAAO,GACP,KAAK,cAAcphB,CAAI,EAAE,OAAOohB,GAAK,CAAC,GAG1C,KAAK,QAAQ6R,CAAE,IACf7R,GAAM,KAAK,cAAc6R,CAAE,EAAE,QAAQjzB,CAAI,EACrCohB,IAAO,GACP,KAAK,cAAc6R,CAAE,EAAE,OAAO7R,GAAK,CAAC,EAGpD,CASI,eAAe2R,EAAML,EAAY,CAC7B,GAAI,KAAK,QAAQK,CAAI,EAAG,CACpB,IAAIv8B,GAAS,CAAE,EACL,UAAU,KAAK,cAAek8B,EAAYl8B,EAAM,EACtDu8B,CAAI,EACR,IAAI3R,GAAM5qB,GAAO,QAAQu8B,CAAI,EAC7B,OAAI3R,IAAO,GACP5qB,GAAO,OAAO4qB,GAAK,CAAC,EAEjB5qB,EACnB,KAEY,OAAM,IAAI,aAAa,wBAAwBu8B,CAAI,EAAE,CAEjE,CAQI,aAAaA,EAAML,EAAY,CAC3B,GAAI,KAAK,QAAQK,CAAI,EAAG,CACpB,IAAIv8B,GAAS,CAAE,EACL,UAAU,KAAK,cAAek8B,EAAYl8B,EAAM,EACtDu8B,CAAI,EACR,IAAI3R,GAAM5qB,GAAO,QAAQu8B,CAAI,EAC7B,OAAI3R,IAAO,GACP5qB,GAAO,OAAO4qB,GAAK,CAAC,EAEjB5qB,EACnB,KAEY,OAAM,IAAI,aAAa,wBAAwBu8B,CAAI,EAAE,CAEjE,CAQI,aAAaL,EAAY,CACrB,IAAIzM,EAAO,KACPzvB,GAAS,CAAE,EACXf,GAAO,OAAO,KAAK,KAAK,KAAK,EACjC,GAAIA,GAAK,SAAW,EAChB,OAAOe,GAEN,CAGD,IAAI08B,GAAW,UAAU,KAAK,cAAe,GAAO,CAAA,CAAE,EACtDz9B,GAAK,QAAQ,SAAU0M,GAAG,CACtB+wB,GAAS/wB,EAAC,CAC1B,CAAa,EACD,IAAI0wB,GAAM,UAAU,KAAK,cAAeH,EAAYl8B,EAAM,EAG1D,OAAAf,GAAK,OAAO,SAAUs9B,GAAM,CACxB,OAAO9M,EAAK,cAAc8M,EAAI,EAAE,SAAW,CAC3D,CAAa,EAAE,QAAQ,SAAU5wB,GAAG,CACpB0wB,GAAI1wB,EAAC,CACrB,CAAa,EACM3L,EACnB,CACA,CACA,CCrMO,MAAM,uBAAwB,CAOjC,aAAa28B,EAAiBjqB,EAAQ,CAClCiqB,EAAgB,QAASzpB,IAAmB,KAAK,SAASA,GAAgBypB,EAAiBjqB,CAAM,CAAC,EAClG,KAAK,qBAAqBiqB,CAAe,EACzC,KAAK,uBAAuBA,CAAe,CACnD,CAII,SAASzpB,EAAgB0pB,EAAoBlqB,GAAQ,CAEjD,GAAI,CAACQ,EAAe,eAAe,QAAU,CAACA,EAAe,WACzD,MAAM,IAAI,0BAA0BA,CAAc,EAGtD,GAAIA,EAAe,eAAe,OAAS,GAGnC,CAF4BA,EAAe,eAAe,MAAM,CAACgmB,GAAgB96B,GAAGy+B,KAAoB3D,GAAe,2BACvH2D,GAAgB,CAAC,EAAE,wBAAwB,EAE3C,MAAM,IAAI,aAAa,UAAU3pB,EAAe,IAAI,sGAAsG,EAKlK,GAAIA,EAAe,qBAAuB,OACtCA,EAAe,YAAc,eAAgB,CAC7C,GAAI,CAACA,EAAe,oBAChB,MAAM,IAAI,aAAa,UAAUA,EAAe,IAAI,kIAAkI,EAC1L,GAAI,OAAOA,EAAe,mBAAuB,IAC7C,MAAM,IAAI,aAAa,UAAUA,EAAe,IAAI,+EAA+E,EACvI,MAAM4pB,GAAuCF,EAAmB,KAAM9/B,IAC1DA,KAAaoW,IAChBpW,GAAS,qBAAuB,OAC7BA,GAAS,YAAc,iBAC3BA,GAAS,YAAcoW,EAAe,WACtCpW,GAAS,qBACLoW,EAAe,oBACnBpW,GAAS,gBAAgB,KAAM4B,IAAWwU,EAAe,gBAAgB,QAAQxU,EAAM,IAAM,EAAE,CACtG,EACD,GAAIo+B,GACA,MAAM,IAAI,aAAa,YAAY5pB,EAAe,IAAI,QAAQ4pB,GAAqC,IAAI,2GAA2G,CAClO,CAuBQ,GAtBA5pB,EAAe,eAAe,QAASyM,IAAkB,CACrD,GAAIA,GAAc,SAAS,aACvBA,GAAc,SAAS,WACvB,MAAM,IAAI,aAAa,2EAA2E,CAClH,CAAS,EACKjN,GAAO,QAAQ,OAAS,WAC1BQ,EAAe,QACV,OAAQV,IAAW,CAACA,GAAO,iBAAiB,EAC5C,QAASA,IAAW,CACrB,MAAMuqB,GAAmBrqB,GAAO,cAAcF,EAAM,EACpD,GAAIE,GAAO,mBAAmB,QAAQqqB,EAAgB,IAClD,GACA,MAAM,IAAI,0BAA0BvqB,GAAQuqB,GAAkBrqB,GAAO,QAAQ,IAAI,EACrF,GAAIF,GAAO,QACPE,GAAO,sBAAsB,QAAQqqB,EAAgB,IAAM,GAC3D,MAAM,IAAI,aAAa,UAAUvqB,GAAO,YAAY,cAAcU,EAAe,IAAI,oCAAoC,EAC7H,GAAIV,GAAO,OAAS,QAChB,CAACA,GAAO,MACR,CAACA,GAAO,SACR,MAAM,IAAI,aAAa,WAAWA,GAAO,YAAY,gBAAgBU,EAAe,IAAI,oEAAoE,CAChL,CAAa,GAED,YAAY,cAAcR,EAAM,GAChCA,GAAO,QAAQ,OAAS,iBACCQ,EAAe,QAAQ,OAAQV,IAAWA,GAAO,aAAeA,GAAO,qBAAuB,MAAM,EACxG,OAAS,EAC1B,MAAM,IAAI,aAAa,YAAYU,EAAe,IAAI,sEAAsE,EAKpI,GAAI,YAAY,cAAcR,EAAM,GACFkqB,EAAmB,OAAQ9/B,IAAaA,GAAS,QAAQ,EAC7D,SAAW,GAAK,CAAC4V,GAAO,SAC9C,MAAM,IAAI,wBAAwB,UAAU,EAEpD,GAAIA,GAAO,QAAQ,OAAS,SACDQ,EAAe,QAAQ,OAAQV,IAAWA,GAAO,OAAO,EAC5D,OAAS,EACxB,MAAM,IAAI,aAAa,yDAAyD,EAGxF,GAAIE,GAAO,QAAQ,OAAS,WAAY,CACpC,MAAMsqB,GAAgB9pB,EAAe,QAAQ,KAAMV,IAAWA,GAAO,eAChE,CAACA,GAAO,eACLA,GAAO,gBAAkB,UAAU,EAC3C,GAAIwqB,GACA,MAAM,IAAI,aAAa,WAAWA,GAAc,YAAY,gBAAgB9pB,EAAe,IAAI,+EAA+E,CAC9L,CAEQ,MAAM+pB,GAAiB/pB,EAAe,OAAO,OAAW,CACpD,iBAAkB,EAC9B,CAAS,EACDA,EAAe,UAAU,QAASQ,IAAa,CAC3C,GAAIA,GAAS,cAAgBA,GAAS,YAAa,CAE/C,GAAIA,GAAS,qBAAuB,GAChC,OAEJ,MAAMwpB,GAA2BxpB,GAAS,eAAeupB,EAAc,EACvE,GAAI,MAAM,QAAQC,EAAwB,EACtC,MAAM,IAAI,yBAAyBxpB,EAAQ,CAC/D,CACA,CAAS,EAEDR,EAAe,UAAU,QAASQ,IAAa,CAE3C,GAAIhB,GAAO,wBACPgB,GAAS,UACT,CAAChB,GAAO,uBAAuB,SAASgB,GAAS,QAAQ,EACzD,MAAM,IAAI,aAAa,iBAAiBA,GAAS,QAAQ,0BAA0BhB,GAAO,QAAQ,IAAI,GAAG,EAG7G,GAAIA,GAAO,wBACPgB,GAAS,UACT,CAAChB,GAAO,uBAAuB,SAASgB,GAAS,QAAQ,EACzD,MAAM,IAAI,aAAa,iBAAiBA,GAAS,QAAQ,sBAAsBhB,GAAO,QAAQ,IAAI,GAAG,CAoDrH,CAAS,EAEDQ,EAAe,UAAU,QAASQ,IAAa,CAI3C,GAHgCA,GAAS,iBACrCA,GAAS,iBACTA,GAAS,gBAAgB,gBAEzB,MAAM,IAAI,aAAa,YAAYR,EAAe,IAAI,IAAIQ,GAAS,YAAY,QAAQA,GAAS,gBAAgB,eAAe,IAAI,IAAIA,GAAS,gBAAgB,YAAY,4IAC1D,CAClI,CAAS,EACDR,EAAe,eAAe,QAASQ,IAAa,CAAA,CAAG,CAC/D,CAII,qBAAqBipB,EAAiB,CAClC,MAAMQ,EAAQ,IAAI,SAClBR,EAAgB,QAASzpB,IAAmB,CACxCiqB,EAAM,QAAQjqB,GAAe,IAAI,CAC7C,CAAS,EACDypB,EAAgB,QAASzpB,IAAmB,CACxCA,GAAe,yBACV,OAAQQ,IAAa,CAACA,GAAS,UAAU,EACzC,QAASA,IAAa,CACvBypB,EAAM,cAAcjqB,GAAe,KAAMQ,GAAS,sBAAsB,IAAI,CAC5F,CAAa,CACb,CAAS,EACD,GAAI,CACAypB,EAAM,aAAc,CAChC,OACe3B,GAAK,CACR,MAAM,IAAI,uBAAuBA,GAAI,SAAU,EAAC,QAAQ,kCAAmC,EAAE,CAAC,CAC1G,CACA,CAII,uBAAuBmB,EAAiB,CACpCA,EAAgB,QAASzpB,GAAmB,CACxCA,EAAe,eAAe,QAASQ,IAAa,CAChD,GAAIA,GAAS,iBACTA,GAAS,gBAAgB,QACzB,MAAM,IAAI,aAAa,4CAChBR,EAAe,UAAU,IAAIQ,GAAS,YAAY,iDAClDA,GAAS,sBAAsB,UAAU,IAAIA,GAAS,gBAAgB,YAAY,sFAC/B,CAC9E,CAAa,CACb,CAAS,CACT,CACA,CC/OO,MAAM,WAAY,CACzB,CAWO,MAAM,kBAAmB,CAChC,CAKO,MAAM,eAAgB,CAC7B,CAiBO,MAAM,eAAgB,CAC7B,CAWO,MAAM,eAAgB,CAC7B,CAKO,MAAM,SAAU,CACvB,CAKO,MAAM,WAAY,CACzB,CAKO,MAAM,YAAa,CAC1B,CAKO,MAAM,YAAa,CAC1B,CAKO,MAAM,mBAAoB,CACjC,CCvFO,MAAM,mBAAoB,CAI7B,OAAO,mBAAmB0pB,EAAStgC,EAAUsX,GAAO4W,GAAY,CAC5D,OAAOA,GAAW,IAAKE,IAAc,CACjC,MAAMhlB,GAAapJ,EAAS,mBAAmB,YAAY,CAAC,EACtDugC,GAAmBn3B,GAAW,kBAAoBpJ,EAAS,eAAe,CAAC,EAE3EoyB,GAAiBhpB,GAAW,mBAAqBA,GAAW,aAC5D0yB,GAAuByE,GAAiB,mBAC1CA,GAAiB,aACf/qB,GAAK4Y,GAAU9W,GAAQ,IAAMwkB,EAAoB,EACjD0E,GAAWpS,GAAU9W,GAAQ,IAAM8a,EAAc,EACvD,MAAO,CACH,GAAIkO,EAAQ,WAAW,OAAO,qBAAqB9qB,GAAI+qB,EAAgB,EACvE,SAAUD,EAAQ,WAAW,OAAO,qBAAqBE,GAAUp3B,EAAU,CAChF,CACb,CAAS,CACT,CACI,OAAO,wBAAwBpJ,EAAUsI,EAAQogB,GAAU+X,GAAczhB,GAAS,CAC9E,MAAM0hB,GAAgB1gC,EAAS,qBAAqB,aACpD,GAAIgf,GAAQ,QAAU,EAAG,CACrB1W,EAAOo4B,EAAa,EAAI,CAAE,EAC1B,MACZ,CAEQ,MAAMH,GADavgC,EAAS,mBAAmB,YAAY,CAAC,EACxB,kBAAoBA,EAAS,eAAe,CAAC,EAC3E2gC,GAAiBJ,GAAiB,eAAej4B,CAAM,EACvDs4B,GAAoBH,GAAa,OAAQI,IAAgBA,GAAY,WAAaF,EAAc,EAChGG,GAAW,IAAI,IAAIF,GAAkB,IAAKC,IAAgBA,GAAY,EAAE,CAAC,EAC/Ev4B,EAAOo4B,EAAa,EAAIhY,GAAS,OAAQpgB,IAAWw4B,GAAS,IAAIP,GAAiB,eAAej4B,EAAM,CAAC,CAAC,EACzGA,EAAOo4B,EAAa,EAAE,QAASK,IAAgB,CAC3C,oBAAoB,wBAAwB/gC,EAAU+gC,GAAarY,GAAU+X,GAAc,CACvF,GAAGzhB,GACH,MAAOA,GAAQ,MAAQ,CACvC,CAAa,CACb,CAAS,CACT,CACI,OAAO,sBAAsBhf,EAAUsI,EAAQogB,GAAU+X,GAAc,CACnE,MAAMO,GAAiBhhC,EAAS,mBAAmB,aAE7CugC,GADavgC,EAAS,mBAAmB,YAAY,CAAC,EACxB,kBAAoBA,EAAS,eAAe,CAAC,EAC3EipB,GAAWsX,GAAiB,eAAej4B,CAAM,EACjD24B,GAAoBR,GAAa,KAAMI,IAAgBA,GAAY,KAAO5X,EAAQ,EAClFiY,GAAexY,GAAS,KAAMpgB,IAC3B24B,GAEGV,GAAiB,eAAej4B,EAAM,IAC1C24B,GAAkB,SAFX,EAGd,EACGC,KACA54B,EAAO04B,EAAc,EAAIE,GACzB,oBAAoB,sBAAsBlhC,EAAUsI,EAAO04B,EAAc,EAAGtY,GAAU+X,EAAY,EAE9G,CACA,CCzDO,MAAM,UAAW,CAOpB,IAAI,UAAW,CACX,OAAO,KAAK,QAAQ,WAAW,YAAY,KAAK,MAAM,CAC9D,CAII,YAAYjjC,EAAQ8iC,EAASxc,GAAa,CACtC,KAAK,OAAStmB,EACd,KAAK,QAAU8iC,EACf,KAAK,YAAcxc,EAC3B,CAOI,mBAAmBxM,EAAOwM,EAAa,CACnC,OAAO,KAAK,QAAQ,mBAAmB,KAAK,SAAS,OAAQxM,GAAS,KAAK,SAAS,WAAYwM,GAAe,KAAK,WAAW,CACvI,CAKI,MAAMxb,EAAQ,CACV,OAAO,KAAK,QAAQ,MAAM,KAAK,SAAS,OAAQA,CAAM,CAC9D,CAII,MAAMA,EAAQ,CACV,OAAO,KAAK,QAAQ,MAAM,KAAK,SAAS,OAAQA,CAAM,CAC9D,CAKI,OAAO64B,EAAmC,CACtC,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQA,CAAiC,CAC1F,CAII,MAAMC,KAAoBC,EAAa,CACnC,OAAO,KAAK,QAAQ,MAAM,KAAK,SAAS,OAAQD,EAAiB,GAAGC,CAAW,CACvF,CAUI,QAAQC,EAAY,CAChB,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQA,CAAU,CACpE,CAII,KAAKnQ,EAAkBnS,EAAS,CAC5B,OAAO,KAAK,QAAQ,KAAK,KAAK,SAAS,OAAQmS,EAAkBnS,CAAO,CAChF,CAII,OAAOmS,EAAkBnS,EAAS,CAC9B,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQmS,EAAkBnS,CAAO,CAClF,CAII,WAAWmS,EAAkBnS,EAAS,CAClC,OAAO,KAAK,QAAQ,WAAW,KAAK,SAAS,OAAQmS,EAAkBnS,CAAO,CACtF,CAII,QAAQmS,EAAkBnS,EAAS,CAC/B,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQmS,EAAkBnS,CAAO,CACnF,CAOI,OAAO1W,EAAQ,CACX,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQA,CAAM,CAC/D,CAOI,OAAOyN,EAAUwrB,EAAe,CAC5B,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQxrB,EAAUwrB,CAAa,CAChF,CAMI,OAAOpQ,EAAkBqQ,EAAwB,CAC7C,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQrQ,EAAkBqQ,CAAsB,CACjG,CAOI,OAAOzrB,EAAU,CACb,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQA,CAAQ,CACjE,CAOI,WAAWA,EAAU,CACjB,OAAO,KAAK,QAAQ,WAAW,KAAK,SAAS,OAAQA,CAAQ,CACrE,CAOI,QAAQA,EAAU,CACd,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQA,CAAQ,CAClE,CAQI,MAAMiJ,EAAS,CACX,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQA,CAAO,CAChE,CAII,OAAOA,EAAS,CACZ,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQA,CAAO,CAChE,CAII,SAAS8D,EAAO,CACZ,OAAO,KAAK,QAAQ,SAAS,KAAK,SAAS,OAAQA,CAAK,CAChE,CAKI,MAAM9D,EAAS,CACX,OAAO,KAAK,QAAQ,MAAM,KAAK,SAAS,OAAQA,CAAO,CAC/D,CAKI,QAAQ8D,EAAO,CACX,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQA,CAAK,CAC/D,CAII,IAAIkD,EAAYlD,EAAO,CACnB,OAAO,KAAK,QAAQ,IAAI,KAAK,SAAS,OAAQkD,EAAYlD,CAAK,CACvE,CAII,QAAQkD,EAAYlD,EAAO,CACvB,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQkD,EAAYlD,CAAK,CAC3E,CAII,QAAQkD,EAAYlD,EAAO,CACvB,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQkD,EAAYlD,CAAK,CAC3E,CAII,QAAQkD,EAAYlD,EAAO,CACvB,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQkD,EAAYlD,CAAK,CAC3E,CAII,MAAM,KAAK9D,EAAS,CAChB,OAAO,KAAK,QAAQ,KAAK,KAAK,SAAS,OAAQA,CAAO,CAC9D,CAII,MAAM,OAAO8D,EAAO,CAChB,OAAO,KAAK,QAAQ,OAAO,KAAK,SAAS,OAAQA,CAAK,CAC9D,CAMI,aAAa9D,EAAS,CAClB,OAAO,KAAK,QAAQ,aAAa,KAAK,SAAS,OAAQA,CAAO,CACtE,CAMI,eAAe8D,EAAO,CAClB,OAAO,KAAK,QAAQ,eAAe,KAAK,SAAS,OAAQA,CAAK,CACtE,CAWI,MAAM,UAAU8D,EAAK,CACjB,OAAO,KAAK,QAAQ,UAAU,KAAK,SAAS,OAAQA,CAAG,CAC/D,CAKI,MAAM,QAAQ5H,EAAS,CACnB,OAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS,OAAQA,CAAO,CACjE,CAKI,MAAM,UAAU8D,EAAO,CACnB,OAAO,KAAK,QAAQ,UAAU,KAAK,SAAS,OAAQA,CAAK,CACjE,CAWI,MAAM,YAAYtN,EAAI,CAClB,OAAO,KAAK,QAAQ,YAAY,KAAK,SAAS,OAAQA,CAAE,CAChE,CAKI,MAAM,cAAcwJ,EAAS,CACzB,OAAO,KAAK,QAAQ,cAAc,KAAK,SAAS,OAAQA,CAAO,CACvE,CAKI,MAAM,gBAAgB8D,EAAO,CACzB,OAAO,KAAK,QAAQ,gBAAgB,KAAK,SAAS,OAAQA,CAAK,CACvE,CAKI,MAAM/L,EAAOC,EAAY,CACrB,OAAO,KAAK,QAAQ,MAAMD,EAAOC,CAAU,CACnD,CAOI,OAAQ,CACJ,OAAO,KAAK,QAAQ,MAAM,KAAK,SAAS,MAAM,CACtD,CAII,UAAUiR,EAAY5R,EAAc1Y,GAAO,CACvC,OAAO,KAAK,QAAQ,UAAU,KAAK,SAAS,OAAQsqB,EAAY5R,EAAc1Y,EAAK,CAC3F,CAII,UAAUsqB,EAAY5R,EAAc1Y,GAAO,CACvC,OAAO,KAAK,QAAQ,UAAU,KAAK,SAAS,OAAQsqB,EAAY5R,EAAc1Y,EAAK,CAC3F,CAII,OAAO8jC,EAAS,CAKZ,MAAMC,EAAW,KAAK,YAChB,CAAE,OAAAlkC,GAAQ,QAAA8iC,GAAS,YAAAxc,EAAa,EAAG,KACnC6d,GAAa,cAAcD,CAAS,CACtC,YAAYlkC,GAAQ8iC,GAASxc,GAAa,CACtC,MAAMtmB,GAAQ8iC,GAASxc,EAAW,CAClD,CACS,EACD,UAAW8d,MAAUH,EACjBE,GAAW,UAAUC,EAAM,EAAIH,EAAQG,EAAM,EACjD,OAAO,IAAID,GAAWnkC,GAAQ8iC,GAASxc,EAAW,CAC1D,CACA,CCpUO,MAAM,uBAAuB,UAAW,CAO3C,MAAM,UAAU9E,EAAS,CACrB,MAAM6iB,EAAQ,MAAM,KAAK,UAAU7iB,CAAO,EAC1C,aAAM,QAAQ,IAAI6iB,EAAM,IAAK1kC,IAAS,KAAK,oBAAoBA,GAAM6hB,CAAO,CAAC,CAAC,EACvE6iB,CACf,CAII,UAAU7iB,EAAS,CACf,MAAM8iB,EAAexqB,IAAU,KAAK,QAAQ,WAAW,OAAO,OAAOA,EAAK,EACpEyqB,GAAgBrsB,IAAW,KAAK,QAAQ,WAAW,OAAO,OAAOA,EAAM,EACvEtM,GAAa,KAAK,SAAS,mBAAmB,YAAY,CAAC,EAC3D44B,GAAqB54B,GAAW,mBAAqBA,GAAW,aAChE2d,GAAK,KAAK,mBAAmB,YAAY,EAC/C,wBAAiB,+BAA+BA,GAAI/H,CAAO,EACpD+H,GACF,MAAM,GAAG+a,EAAY,YAAY,CAAC,IAAIC,GAAaC,EAAkB,CAAC,UAAU,EAChF,QAAS,CACtB,CAII,gBAAgB15B,EAAQ0W,EAAS,CAC7B,MAAM+H,GAAK,KAAK,8BAA8B,aAAc,cAAeze,CAAM,EACjF,wBAAiB,+BAA+Bye,GAAI/H,CAAO,EACpD+H,GAAG,QAAS,CAC3B,CAII,MAAM,oBAAoBze,EAAQ0W,EAAS,CAEvC,MAAM+H,GAAK,KAAK,8BAA8B,aAAc,cAAeze,CAAM,EACjF,iBAAiB,+BAA+Bye,GAAI/H,CAAO,EAC3D,MAAM0J,GAAW,MAAM3B,GAAG,kBAAmB,EACvC0Z,GAAe,oBAAoB,mBAAmB,KAAK,QAAS,KAAK,SAAU,aAAc/X,GAAS,GAAG,EACnH,2BAAoB,wBAAwB,KAAK,SAAUpgB,EAAQogB,GAAS,SAAU+X,GAAc,CAChG,MAAO,GACP,GAAGzhB,CACf,CAAS,EACM1W,CACf,CAII,iBAAiBA,EAAQ,CACrB,OAAO,KAAK,8BAA8B,aAAc,cAAeA,CAAM,EAAE,SAAU,CACjG,CAII,8BAA8BgP,EAAO2qB,EAAmB35B,GAAQ,CAE5D,MAAM45B,GAAU5qB,IAAU,KAAK,QAAQ,WAAW,OAAO,OAAOA,EAAK,EACrE,GAAI,KAAK,SAAS,WAAa,gBAAiB,CAC5C,MAAM6qB,GAAgB,KAAK,SAAS,qBAAqB,kBACpD,IAAKzsB,IACEwsB,GAAOD,CAAiB,EAC5B,IACAC,GAAOxsB,GAAO,YAAY,EAC1B,MACAwsB,GAAO5qB,CAAK,EACZ,IACA4qB,GAAOxsB,GAAO,iBAAiB,YAAY,CAClD,EACI,KAAK,OAAO,EACXsB,GAAa,CAAE,EACforB,GAAiB,KAAK,SAAS,qBAAqB,gBACrD,IAAK1sB,KACNsB,GAAWtB,GAAO,iBAAiB,YAAY,EAC3CA,GAAO,iBAAiB,eAAepN,EAAM,EACzC45B,GAAOD,CAAiB,EAC5B,IACAC,GAAOxsB,GAAO,YAAY,EAC1B,OACAA,GAAO,iBAAiB,aAC/B,EACI,KAAK,OAAO,EACjB,OAAO,KAAK,mBAAmB4B,CAAK,EAC/B,UAAU,KAAK,SAAS,qBAAqB,UAAW2qB,EAAmBE,EAAa,EACxF,MAAMC,EAAc,EACpB,cAAcprB,EAAU,CACzC,SACiB,KAAK,SAAS,WAAa,aAAc,CAC9C,MAAMorB,GAAiB9qB,EACnB,IACA,KAAK,SAAS,oBAAoB,aAClC,mBAEA,KAAK,SAAS,oBAAoB,aAClC,eACA,KAAK,SAAS,qBAAqB,aACjCN,GAAa,CAAE,EACfmrB,GAAgB,KAAK,SACtB,mBAAmB,YAAY,IAAK/4B,IAAe,CACpD,MAAMob,GAAgBpb,GAAW,iBAAiB,aAAa,QAAQ,IAAK,GAAG,EAC/E,OAAA4N,GAAWwN,EAAa,EACpBpb,GAAW,iBAAiB,eAAed,EAAM,EAC7C,UACJc,GAAW,iBAAiB,aAC5B,OACAob,EACP,CAAA,EACI,KAAK,OAAO,EACjB,OAAO,KAAK,mBAAmBlN,CAAK,EAC/B,UAAU,KAAK,SAAS,WAAY,SAAU8qB,EAAc,EAC5D,MAAMD,GAAenrB,EAAU,CAChD,SACiB,KAAK,SAAS,WAAa,oBAChC,OAAO,KAAK,mBAAmBM,CAAK,EAAE,MAAOyP,IAAO,CAChD,MAAMC,GAAWD,GACZ,SAAQ,EACR,OAAO,GAAG,KAAK,SAAS,UAAU,IAAI,KAAK,SAAS,uBAAuB,YAAY,GAAI,MAAM,EACjG,KAAK,KAAK,SAAS,OAAQ,KAAK,SAAS,UAAU,EACnD,WAAW,KAAK,SAAS,eAAeze,EAAM,CAAC,EACpD,OAAI,YAAY,eAAe,KAAK,QAAQ,WAAW,MAAM,EAClD,GAAGgP,CAAK,IAAI,KAAK,SAAS,uBAAuB,YAAY,SAAS0P,GAAS,SAAQ,CAAE,UAGzF,GAAG1P,CAAK,IAAI,KAAK,SAAS,uBAAuB,YAAY,uBAAuB0P,GAAS,SAAQ,CAAE,cAElI,CAAa,EAEL,MAAM,IAAI,aAAa,iCAAiC,CAChE,CAII,cAAc1e,EAAQ0W,EAAS,CAC3B,MAAM+H,GAAK,KAAK,4BAA4B,aAAc,cAAeze,CAAM,EAC/E,wBAAiB,+BAA+Bye,GAAI/H,CAAO,EACpD+H,GAAG,QAAS,CAC3B,CAII,MAAM,kBAAkBze,EAAQ0W,EAAS,CAErC,MAAM+H,GAAK,KAAK,4BAA4B,aAAc,cAAeze,CAAM,EAC/E,iBAAiB,+BAA+Bye,GAAI/H,CAAO,EAC3D,MAAM0J,GAAW,MAAM3B,GAAG,kBAAmB,EACvC0Z,GAAe,oBAAoB,mBAAmB,KAAK,QAAS,KAAK,SAAU,aAAc/X,GAAS,GAAG,EACnH,2BAAoB,sBAAsB,KAAK,SAAUpgB,EAAQogB,GAAS,SAAU+X,EAAY,EACzFn4B,CACf,CAII,eAAeA,EAAQ,CACnB,OAAO,KAAK,4BAA4B,aAAc,cAAeA,CAAM,EAAE,SAAU,CAC/F,CAII,4BAA4BgP,EAAO2qB,EAAmB35B,GAAQ,CAG1D,GAAI,KAAK,SAAS,WAAa,gBAAiB,CAC5C,MAAM65B,GAAgB,KAAK,SAAS,qBAAqB,gBACpD,IAAKzsB,IACEusB,EACJ,IACAvsB,GAAO,aACP,MACA4B,EACA,IACA5B,GAAO,iBAAiB,YAC/B,EACI,KAAK,OAAO,EACXsB,GAAa,CAAE,EACforB,GAAiB,KAAK,SAAS,qBAAqB,kBACrD,IAAK1sB,KACNsB,GAAWtB,GAAO,iBAAiB,YAAY,EAC3CA,GAAO,iBAAiB,eAAepN,EAAM,EACzC25B,EACJ,IACAvsB,GAAO,aACP,OACAA,GAAO,iBAAiB,aAC/B,EACI,KAAK,OAAO,EACjB,OAAO,KAAK,mBAAmB4B,CAAK,EAC/B,UAAU,KAAK,SAAS,qBAAqB,UAAW2qB,EAAmBE,EAAa,EACxF,MAAMC,EAAc,EACpB,cAAcprB,EAAU,CACzC,SACiB,KAAK,SAAS,WAAa,aAAc,CAC9C,MAAMmrB,GAAgB,UAClB,KAAK,SAAS,oBAAoB,aAClC,YACA7qB,EACA,IACA,KAAK,SAAS,oBAAoB,aAClC,QACAA,EACA,IACA,KAAK,SAAS,qBAAqB,aACjCN,GAAa,CAAE,EACforB,GAAiB,KAAK,SACvB,mBAAmB,YAAY,IAAKh5B,IAAe,CACpD,MAAMob,GAAgBpb,GAAW,iBAAiB,aAAa,QAAQ,IAAK,GAAG,EAC/E,OAAA4N,GAAWwN,EAAa,EACpBpb,GAAW,iBAAiB,eAAed,EAAM,EAC7C,UACJc,GAAW,iBAAiB,aAC5B,OACAob,EACP,CAAA,EACI,KAAK,OAAO,EACjB,OAAO,KAAK,mBAAmBlN,CAAK,EAC/B,UAAU,KAAK,SAAS,WAAY,SAAU6qB,EAAa,EAC3D,MAAMC,GAAgBprB,EAAU,CACjD,SACiB,KAAK,SAAS,WAAa,oBAEhC,OAAO,KAAK,mBAAmBM,CAAK,EAAE,MAAOyP,IAAO,CAChD,MAAMC,GAAWD,GACZ,SAAQ,EACR,OAAO,GAAG,KAAK,SAAS,UAAU,IAAI,KAAK,SAAS,uBAAuB,YAAY,GAAI,MAAM,EACjG,KAAK,KAAK,SAAS,OAAQ,KAAK,SAAS,UAAU,EACnD,WAAW,KAAK,SAAS,eAAeze,EAAM,CAAC,EACpD,OAAI,YAAY,eAAe,KAAK,QAAQ,WAAW,MAAM,EAClD,GAAG0e,GAAS,SAAQ,CAAE,SAAS1P,CAAK,IAAI,KAAK,SAAS,uBAAuB,YAAY,UAGzF,GAAG0P,GAAS,SAAQ,CAAE,gBAAgB1P,CAAK,IAAI,KAAK,SAAS,uBAAuB,YAAY,QAE3H,CAAa,EAEL,MAAM,IAAI,aAAa,iCAAiC,CAChE,CACA,CCnPO,MAAM,iCAAkC,CAI3C,UAAU+qB,EAAW55B,EAAQzI,GAAUsiC,GAA+B,GAAO,CAGzE,YAAK,kBAAkBD,EAAW55B,EAAQzI,GAAUsiC,EAA4B,EAEzED,CACf,CAQI,kBAAkB/5B,EAAQG,EAAQzI,GAAUsiC,GAA+B,GAAO,CAI9EtiC,GAAS,kBAAkB,QAAS0V,IAAW,CAC3C,MAAM6sB,GAAoB7sB,GAAO,eAAejN,CAAM,EAClD85B,KAAsB,QACtB7sB,GAAO,eAAepN,EAAQi6B,EAAiB,CAC/D,CAAS,EAEGviC,GAAS,UAAU,QACnBA,GAAS,UAAU,QAAS4W,IAAa,CACrC,IAAI4rB,GAAqB5rB,GAAS,eAAetO,CAAM,EACvD,MAAMm6B,GAAqB7rB,GAAS,eAAenO,EAAQ65B,EAA4B,EACvF,GAAIG,KAAuB,OAE3B,GAAI7rB,GAAS,aAAeA,GAAS,aAAc,CAC/C,GAAI,CAAC,MAAM,QAAQ6rB,EAAkB,EACjC,OACCD,KACDA,GAAqB,CAAE,EACvB5rB,GAAS,eAAetO,EAAQk6B,EAAkB,GAEtDC,GAAmB,QAASC,IAA2B,CAEnD,IAAIC,GAA2BH,GAAmB,KAAMI,IAC7ChsB,GAAS,sBAAsB,gBAAgB8rB,GAAwBE,EAAsB,CACvG,EACD,MAAMC,GAAwBjsB,GAAS,sBAAsB,wBAAwB8rB,EAAsB,EAEtGC,KACDA,GACIE,GAAsB,OAAO,OAAW,CACpC,iBAAkB,EACtD,CAAiC,EACLL,GAAmB,KAAKG,EAAwB,GAEpD,KAAK,kBAAkBA,GAA0BD,GAAwBG,GAAuBP,EAA4B,CACpJ,CAAqB,CACrB,KACqB,CAKD,GAAI,CAAC,YAAY,SAASG,EAAkB,EAAG,CACtC,YAAY,SAASD,EAAkB,GACxC5rB,GAAS,eAAetO,EAAQm6B,EAAkB,EACtD,MACxB,CACoB,MAAMI,GAAwBjsB,GAAS,sBAAsB,wBAAwB6rB,EAAkB,EAClGD,KACDA,GAAqBK,GAAsB,OAAO,OAAW,CACzD,iBAAkB,EAC9C,CAAyB,EACDjsB,GAAS,eAAetO,EAAQk6B,EAAkB,GAEtD,KAAK,kBAAkBA,GAAoBC,GAAoBI,GAAuBP,EAA4B,CACtI,CACA,CAAa,CAEb,CACA,CCnFA,MAAM,WAAY,CACd,YAAYQ,EAAa9iC,EAAU+iC,GAAmBnsB,GAAU,CAC5D,KAAK,YAAcksB,EACnB,KAAK,SAAW9iC,EAChB,KAAK,kBAAoB+iC,GACzB,KAAK,SAAWnsB,EACxB,CACI,IAAI,QAAS,CACT,OAAO,KAAK,SAAS,MAC7B,CACI,IAAI,IAAK,CACL,OAAO,KAAK,SAAS,oBAAoB,KAAK,WAAW,CACjE,CACA,CACA,MAAM,OAAQ,CACV,aAAc,CACV,KAAK,aAAe,CAAE,CAC9B,CACI,IAAI,iBAAkB,CAClB,OAAO,KAAK,aAAa,KAAM/N,GAAS,CAACA,EAAK,UAAY,CAACA,EAAK,iBAAiB,CACzF,CACI,WAAWm6B,EAAY,CACN,KAAK,aAAa,KAAMn6B,IAASA,GAAK,SAAWm6B,EAAW,QAAUn6B,GAAK,KAAOm6B,EAAW,EAAE,GAExG,KAAK,aAAa,KAAKA,CAAU,CAC7C,CACI,aAAaxlC,EAAQkrB,EAAU,CAC3BA,EAAS,QAASpgB,IAAW,CACzB,MAAMO,GAAO,KAAK,aAAa,KAAMo6B,IACzBA,GAAY,SAAWzlC,GAC3BylC,GAAY,SAAS,gBAAgB36B,GAAQ26B,GAAY,WAAW,CAC3E,EACGp6B,KACAA,GAAK,OAASP,GAC9B,CAAS,CACT,CACI,kBAAmB,CACf,MAAM46B,EAAS,CAAE,EACjB,YAAK,aAAa,QAASD,GAAgB,CACvC,IAAI9U,GAAQ+U,EAAO,KAAM/U,IAAUA,GAAM,SAAW8U,EAAY,MAAM,EACjE9U,KACDA,GAAQ,CAAE,OAAQ8U,EAAY,OAAQ,IAAK,CAAA,CAAI,EAC/CC,EAAO,KAAK/U,EAAK,GAErBA,GAAM,IAAI,KAAK8U,EAAY,EAAE,CACzC,CAAS,EACMC,CACf,CACA,CAKO,MAAM,sCAAuC,CAChD,YAAY5C,EAAS,CACjB,KAAK,QAAUA,CACvB,CAII,MAAM,UAAU6C,EAAanjC,EAAU,CAEnC,GAAI,CAACA,EAAS,kBAAkBmjC,CAAW,EACvC,OAAO,QAAQ,OAAO,sFAAsF,EAEhH,MAAMC,GAAU,IAAI,QACdC,GAAc,CAAC/6B,GAAQ8N,GAAgB2sB,GAAmBnsB,KAAa,CACzE,MAAM/N,GAAO,IAAI,YAAYP,GAAQ8N,GAAgB2sB,GAAmBnsB,EAAQ,EAChFwsB,GAAQ,WAAWv6B,EAAI,EACvBuN,GACK,gCAAgC9N,GAAQtI,EAAS,SAAS,EAC1D,OAAQrC,IAAUA,IAAU,IAA2B,EACvD,QAAQ,CAAC,CAACiZ,GAAUjZ,GAAOklC,EAAqB,IAAMQ,GAAY1lC,GAAOklC,GAAuBh6B,GAAM+N,EAAQ,CAAC,CACvH,EACD,OAAAysB,GAAYF,EAAanjC,CAAQ,EAEjC,MAAM,QAAQ,IAAIojC,GAAQ,iBAAgB,EAAG,IAAKE,IAEvC,KAAK,QACP,UAAUA,GAAc,OAAQA,GAAc,GAAG,EACjD,KAAM5a,IAAa0a,GAAQ,aAAaE,GAAc,OAAQ5a,EAAQ,CAAC,CAC/E,CAAC,EAEF0a,GAAQ,aAAa,QAASH,IAAgB,CACtC,CAACA,GAAY,UACb,CAACA,GAAY,QACb,CAACA,GAAY,mBACb,CAACA,GAAY,kBAAkB,SAE/BA,GAAY,SAAS,cACrBA,GAAY,SAAS,aAChBA,GAAY,kBAAkB,OAAOA,GAAY,SAAS,YAAY,IACvEA,GAAY,kBAAkB,OAAOA,GAAY,SAAS,YAAY,EAAI,CAAE,GAChFA,GAAY,kBAAkB,OAAOA,GAAY,SAAS,YAAY,EAAE,KAAKA,GAAY,MAAM,GAG/FA,GAAY,kBAAkB,OAAOA,GAAY,SAAS,YAAY,EAAIA,GAAY,OAEtG,CAAS,EACMG,GAAQ,gBACTA,GAAQ,gBAAgB,OACxB,MACd,CACA,CC/FO,MAAM,kBAAmB,CAQ5B,IAAI,YAAa,CACb,MAAM5lC,EAAS,KAAK,0BAA0B,IAAI,EAClD,GAAI,CAACA,EACD,MAAM,IAAI,uCAAuC,KAAK,WAAW,EACrE,OAAO,KAAK,QAAQ,cAAcA,CAAM,CAChD,CAKI,IAAI,gBAAiB,CACjB,MAAMA,EAAS,KAAK,0BAA0B,IAAI,EAClD,GAAI,CAACA,EACD,MAAM,IAAI,uCAAuC,KAAK,WAAW,EACrE,OAAO,KAAK,QAAQ,kBAAkBA,CAAM,CACpD,CAQI,mBAAmB8Z,EAAO,CACtB,MAAM9Z,EAAS,KAAK,0BAA0B,KAAK,WAAW,EAC9D,GAAI,CAACA,EACD,MAAM,IAAI,uCAAuC,KAAK,WAAW,EACrE,OAAO,KAAK,QACP,cAAcA,CAAM,EACpB,mBAAmB8Z,CAAK,CACrC,CAII,sBAAsBhP,EAAQgP,EAAO,CACjC,OAAO,KAAK,iBAAiBhP,CAAM,EAAE,mBAAmBgP,CAAK,CACrE,CAII,iBAAiBhP,EAAQ,CACrB,OAAO,KAAK,QAAQ,cAAcA,CAAM,CAChD,CAII,qBAAqBA,EAAQ,CACzB,OAAO,KAAK,QAAQ,kBAAkBA,CAAM,CACpD,CAQI,0BAA0Bi7B,EAAkB,CACxC,MAAMC,EAA+B,uBAAwB,EAAC,mBAAmB,KAAM3tB,IAC3EA,GAAW,UACd,OAAO0tB,GAAqB,WACvBA,EACAA,EAAiB,YAC9B,EACD,GAAI,CAACC,EACD,MAAM,IAAI,8BAA8BD,CAAgB,EAC5D,OAAOC,EAA6B,MAC5C,CACA,CChFO,MAAM,wBAAyB,CAIlC,YAAYC,EAAU,CAClB,KAAK,SAAW,CAAC,GAAGA,CAAQ,EAC5B,KAAK,UAAY,KAAK,mBAAmB,KAAK,QAAQ,CAC9D,CAOI,KAAKhO,EAAW,CAEZ,GAAI,CAAC,KAAK,UAAU,OAChB,OAAO,KAAK,SAChB,MAAMiO,EAAiB,CAAE,EAGzB,GAAIjO,IAAc,SAAU,CACxB,MAAMkO,GAAmB,KAAK,SAAS,OAAQtuB,IAAY,CAACA,GAAQ,QAAU,CAACA,GAAQ,cAAc,EACrGquB,EAAe,KAAK,GAAGC,EAAgB,EACvC,KAAK,oBAAoBA,EAAgB,CACrD,CAEQ,MAAMC,GAA0B,KAAK,2BAA4B,EACjE,IAAIC,GAAiC,KAAK,SAASD,EAAuB,EACtEnO,IAAc,WACdoO,GACIA,GAA+B,QAAS,GAIhDA,GAA+B,QAASC,IAAuB,CAC3D,MAAMC,GAAuB,KAAK,SAAS,OAAQ1uB,IAAYA,GAAQ,SAAS,aAAeyuB,IAC3FzuB,GAAQ,SAAS,gBAAgB,KAAM/J,IAAMA,GAAE,OAASw4B,EAAkB,CAAC,EAC/EJ,EAAe,KAAK,GAAGK,EAAoB,EAC3C,KAAK,oBAAoBA,EAAoB,CACzD,CAAS,EAGD,MAAMC,GAAoB,KAAK,gBAAiB,EAChD,IAAIC,GAA2B,KAAK,SAASD,EAAiB,EAC9D,OAAIvO,IAAc,WACdwO,GAA2BA,GAAyB,QAAS,GACjEA,GAAyB,QAASH,IAAuB,CACrD,MAAMC,GAAuB,KAAK,SAAS,OAAQ1uB,IAAYA,GAAQ,SAAS,aAAeyuB,EAAkB,EACjHJ,EAAe,KAAK,GAAGK,EAAoB,EAC3C,KAAK,oBAAoBA,EAAoB,CACzD,CAAS,EAEDL,EAAe,KAAK,GAAG,KAAK,QAAQ,EAC7BA,CACf,CAOI,oBAAoBD,EAAU,CAC1BA,EAAS,QAASpuB,GAAY,CAC1B,KAAK,SAAS,OAAO,KAAK,SAAS,QAAQA,CAAO,EAAG,CAAC,CAClE,CAAS,CACT,CAII,mBAAmBouB,EAAU,CACzB,MAAMS,EAAY,CAAE,EACpB,OAAAT,EAAS,QAASpuB,IAAY,CACtB6uB,EAAU,QAAQ7uB,GAAQ,QAAQ,IAAM,IACxC6uB,EAAU,KAAK7uB,GAAQ,QAAQ,CAC/C,CAAS,EACM6uB,CACf,CAKI,4BAA6B,CACzB,OAAO,KAAK,UAAU,OAAO,CAACC,EAAcnkC,KACxCA,EAAS,yBAAyB,QAAS4W,IAAa,CAChDA,GAAS,YAEbutB,EAAa,KAAK,CACdnkC,EAAS,WACT4W,GAAS,sBAAsB,UACnD,CAAiB,CACjB,CAAa,EACMutB,GACR,EAAE,CACb,CAKI,iBAAkB,CACd,OAAO,KAAK,UAAU,OAAO,CAACA,EAAcnkC,KACxCA,EAAS,yBAAyB,QAAS4W,IAAa,CAEhDA,GAAS,wBAA0B5W,GAEvCmkC,EAAa,KAAK,CACdnkC,EAAS,WACT4W,GAAS,sBAAsB,UACnD,CAAiB,CACjB,CAAa,EACMutB,GACR,EAAE,CACb,CAMI,SAAShF,EAAO,CACZ,SAASiF,EAAYl6B,GAAK,CACtB,IAAIwG,GAAM,CAAE,EACZ,QAASpP,GAAI,EAAGuI,GAAMK,GAAI,OAAQ5I,GAAIuI,GAAKvI,KAAK,CAC5C,IAAI+iC,GAAOn6B,GAAI5I,EAAC,EACZoP,GAAI,QAAQ2zB,GAAK,CAAC,CAAC,EAAI,GACvB3zB,GAAI,KAAK2zB,GAAK,CAAC,CAAC,EAChB3zB,GAAI,QAAQ2zB,GAAK,CAAC,CAAC,EAAI,GACvB3zB,GAAI,KAAK2zB,GAAK,CAAC,CAAC,CACpC,CACY,OAAO3zB,EACnB,CACQ,MAAM4zB,GAAQF,EAAYjF,CAAK,EAC/B,IAAIoF,GAASD,GAAM,OAAQE,GAAS,IAAI,MAAMD,EAAM,EAAGjF,GAAU,CAAE,EAAEh+B,GAAIijC,GACzE,KAAOjjC,MACEg+B,GAAQh+B,EAAC,GACVmjC,GAAMH,GAAMhjC,EAAC,EAAGA,GAAG,CAAA,CAAE,EAE7B,SAASmjC,GAAMhF,GAAMn+B,GAAGojC,GAAc,CAClC,GAAIA,GAAa,QAAQjF,EAAI,GAAK,EAC9B,MAAM,IAAI,aAAa,sBAAwB,KAAK,UAAUA,EAAI,CAAC,EAEvE,GAAI,CAAC,CAAC6E,GAAM,QAAQ7E,EAAI,EACpB,MAAM,IAAI,aAAa,+EACnB,KAAK,UAAUA,EAAI,CAAC,EAE5B,GAAIH,GAAQh+B,EAAC,EACT,OACJg+B,GAAQh+B,EAAC,EAAI,GAEb,IAAIqjC,GAAWxF,EAAM,OAAO,SAAUkF,GAAM,CACxC,OAAOA,GAAK,CAAC,IAAM5E,EACnC,CAAa,EACD,GAAKn+B,GAAIqjC,GAAS,OAAS,CACvB,IAAIC,GAAQF,GAAa,OAAOjF,EAAI,EACpC,EAAG,CACC,IAAIoF,GAAQF,GAAS,EAAErjC,EAAC,EAAE,CAAC,EAC3BmjC,GAAMI,GAAOP,GAAM,QAAQO,EAAK,EAAGD,EAAK,CAC5D,OAAyBtjC,GACzB,CACYkjC,GAAO,EAAED,EAAM,EAAI9E,EAC/B,CACQ,OAAO+E,EACf,CACA,kLCvKC,SAAStqB,EAAE/T,GAAE,CAAsDsS,WAAetS,GAAmH,CAAA,GAAE2+B,UAAM,UAAU,CAAc,IAAI5qB,EAAE,IAAI/T,GAAE,IAAI0I,GAAE,KAAKk2B,GAAE,cAAczjC,GAAE,SAASgK,GAAE,SAAS05B,GAAE,OAAOl3B,GAAE,MAAMm3B,GAAE,OAAO15B,GAAE,QAAQlH,GAAE,UAAU0W,GAAE,OAAO1P,GAAE,OAAO8S,GAAE,eAAe+mB,GAAE,6FAA6FxhC,GAAE,sFAAsFuW,GAAE,CAAC,KAAK,KAAK,SAAS,2DAA2D,MAAM,GAAG,EAAE,OAAO,wFAAwF,MAAM,GAAG,EAAE,QAAQ,SAASC,GAAE,CAAC,IAAI/T,GAAE,CAAC,KAAK,KAAK,KAAK,IAAI,EAAE0I,GAAEqL,GAAE,IAAI,MAAM,IAAIA,IAAG/T,IAAG0I,GAAE,IAAI,EAAE,GAAG1I,GAAE0I,EAAC,GAAG1I,GAAE,CAAC,GAAG,GAAG,CAAC,EAAE6E,GAAE,SAASkP,GAAE/T,GAAE0I,GAAE,CAAC,IAAIk2B,GAAE,OAAO7qB,EAAC,EAAE,MAAM,CAAC6qB,IAAGA,GAAE,QAAQ5+B,GAAE+T,GAAE,GAAG,MAAM/T,GAAE,EAAE4+B,GAAE,MAAM,EAAE,KAAKl2B,EAAC,EAAEqL,EAAC,EAAE4F,GAAE,CAAC,EAAE9U,GAAE,EAAE,SAASkP,GAAE,CAAC,IAAI/T,GAAE,CAAC+T,GAAE,UAAS,EAAGrL,GAAE,KAAK,IAAI1I,EAAC,EAAE4+B,GAAE,KAAK,MAAMl2B,GAAE,EAAE,EAAEvN,GAAEuN,GAAE,GAAG,OAAO1I,IAAG,EAAE,IAAI,KAAK6E,GAAE+5B,GAAE,EAAE,GAAG,EAAE,IAAI/5B,GAAE1J,GAAE,EAAE,GAAG,CAAC,EAAE,EAAE,SAAS4Y,GAAE/T,GAAE0I,GAAE,CAAC,GAAG1I,GAAE,KAAM,EAAC0I,GAAE,KAAM,EAAC,MAAM,CAACqL,GAAErL,GAAE1I,EAAC,EAAE,IAAI4+B,GAAE,IAAIl2B,GAAE,KAAM,EAAC1I,GAAE,KAAI,IAAK0I,GAAE,MAAK,EAAG1I,GAAE,MAAK,GAAI7E,GAAE6E,GAAE,MAAK,EAAG,IAAI4+B,GAAEx5B,EAAC,EAAED,GAAEuD,GAAEvN,GAAE,EAAE0jC,GAAE7+B,GAAE,MAAO,EAAC,IAAI4+B,IAAGz5B,GAAE,GAAG,GAAGC,EAAC,EAAE,MAAM,EAAE,EAAEw5B,IAAGl2B,GAAEvN,KAAIgK,GAAEhK,GAAE0jC,GAAEA,GAAE1jC,MAAK,EAAE,EAAE,EAAE,SAAS4Y,GAAE,CAAC,OAAOA,GAAE,EAAE,KAAK,KAAKA,EAAC,GAAG,EAAE,KAAK,MAAMA,EAAC,CAAC,EAAE,EAAE,SAASA,GAAE,CAAC,MAAM,CAAC,EAAE3O,GAAE,EAAEwP,GAAE,EAAEkqB,GAAE,EAAEn3B,GAAE,EAAEzC,GAAE,EAAE25B,GAAE,EAAE15B,GAAE,EAAEhK,GAAE,GAAGyjC,GAAE,EAAE1gC,EAAC,EAAE6V,EAAC,GAAG,OAAOA,IAAG,EAAE,EAAE,YAAa,EAAC,QAAQ,KAAK,EAAE,CAAC,EAAE,EAAE,SAASA,GAAE,CAAC,OAAgBA,KAAT,MAAU,CAAC,EAAEY,GAAE,KAAKkgB,GAAE,CAAE,EAACA,GAAElgB,EAAC,EAAEb,GAAE,IAAIwL,GAAE,iBAAiB0f,GAAE,SAASjrB,GAAE,CAAC,OAAOA,cAAa7S,IAAG,EAAE,CAAC6S,IAAG,CAACA,GAAEuL,EAAC,EAAE,EAAE2f,GAAE,SAASlrB,GAAE/T,GAAE0I,GAAEk2B,GAAE,CAAC,IAAIzjC,GAAE,GAAG,CAAC6E,GAAE,OAAO2U,GAAE,GAAa,OAAO3U,IAAjB,SAAmB,CAAC,IAAImF,GAAEnF,GAAE,YAAa,EAAC60B,GAAE1vB,EAAC,IAAIhK,GAAEgK,IAAGuD,KAAImsB,GAAE1vB,EAAC,EAAEuD,GAAEvN,GAAEgK,IAAG,IAAI05B,GAAE7+B,GAAE,MAAM,GAAG,EAAE,GAAG,CAAC7E,IAAG0jC,GAAE,OAAO,EAAE,OAAO9qB,GAAE8qB,GAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIl3B,GAAE3H,GAAE,KAAK60B,GAAEltB,EAAC,EAAE3H,GAAE7E,GAAEwM,EAAC,CAAC,MAAM,CAACi3B,IAAGzjC,KAAIwZ,GAAExZ,IAAGA,IAAG,CAACyjC,IAAGjqB,EAAC,EAAEpZ,GAAE,SAASwY,GAAE/T,GAAE,CAAC,GAAGg/B,GAAEjrB,EAAC,EAAE,OAAOA,GAAE,MAAO,EAAC,IAAIrL,GAAY,OAAO1I,IAAjB,SAAmBA,GAAE,GAAG,OAAO0I,GAAE,KAAKqL,GAAErL,GAAE,KAAK,UAAU,IAAIxH,GAAEwH,EAAC,CAAC,EAAE9B,GAAE+S,GAAE/S,GAAE,EAAEq4B,GAAEr4B,GAAE,EAAEo4B,GAAEp4B,GAAE,EAAE,SAASmN,GAAE/T,GAAE,CAAC,OAAOzE,GAAEwY,GAAE,CAAC,OAAO/T,GAAE,GAAG,IAAIA,GAAE,GAAG,EAAEA,GAAE,GAAG,QAAQA,GAAE,OAAO,CAAC,CAAC,EAAE,IAAIkB,GAAE,UAAU,CAAC,SAAS4S,GAAEC,GAAE,CAAC,KAAK,GAAGkrB,GAAElrB,GAAE,OAAO,KAAK,EAAE,EAAE,KAAK,MAAMA,EAAC,EAAE,KAAK,GAAG,KAAK,IAAIA,GAAE,GAAG,CAAA,EAAG,KAAKuL,EAAC,EAAE,EAAE,CAAC,IAAIza,GAAEiP,GAAE,UAAU,OAAOjP,GAAE,MAAM,SAASkP,GAAE,CAAC,KAAK,GAAG,SAASA,GAAE,CAAC,IAAI/T,GAAE+T,GAAE,KAAKrL,GAAEqL,GAAE,IAAI,GAAU/T,KAAP,KAAS,OAAO,IAAI,KAAK,GAAG,EAAE,GAAG4G,GAAE,EAAE5G,EAAC,EAAE,OAAO,IAAI,KAAK,GAAGA,cAAa,KAAK,OAAO,IAAI,KAAKA,EAAC,EAAE,GAAa,OAAOA,IAAjB,UAAoB,CAAC,MAAM,KAAKA,EAAC,EAAE,CAAC,IAAI4+B,GAAE5+B,GAAE,MAAM++B,EAAC,EAAE,GAAGH,GAAE,CAAC,IAAIzjC,GAAEyjC,GAAE,CAAC,EAAE,GAAG,EAAEz5B,IAAGy5B,GAAE,CAAC,GAAG,KAAK,UAAU,EAAE,CAAC,EAAE,OAAOl2B,GAAE,IAAI,KAAK,KAAK,IAAIk2B,GAAE,CAAC,EAAEzjC,GAAEyjC,GAAE,CAAC,GAAG,EAAEA,GAAE,CAAC,GAAG,EAAEA,GAAE,CAAC,GAAG,EAAEA,GAAE,CAAC,GAAG,EAAEz5B,EAAC,CAAC,EAAE,IAAI,KAAKy5B,GAAE,CAAC,EAAEzjC,GAAEyjC,GAAE,CAAC,GAAG,EAAEA,GAAE,CAAC,GAAG,EAAEA,GAAE,CAAC,GAAG,EAAEA,GAAE,CAAC,GAAG,EAAEz5B,EAAC,CAAC,CAAC,CAAC,OAAO,IAAI,KAAKnF,EAAC,CAAC,EAAE+T,EAAC,EAAE,KAAK,KAAM,CAAA,EAAElP,GAAE,KAAK,UAAU,CAAC,IAAIkP,GAAE,KAAK,GAAG,KAAK,GAAGA,GAAE,cAAc,KAAK,GAAGA,GAAE,SAAQ,EAAG,KAAK,GAAGA,GAAE,QAAO,EAAG,KAAK,GAAGA,GAAE,SAAS,KAAK,GAAGA,GAAE,SAAQ,EAAG,KAAK,GAAGA,GAAE,WAAY,EAAC,KAAK,GAAGA,GAAE,WAAY,EAAC,KAAK,IAAIA,GAAE,iBAAiB,EAAElP,GAAE,OAAO,UAAU,CAAC,OAAO+B,EAAC,EAAE/B,GAAE,QAAQ,UAAU,CAAC,OAAQ,KAAK,GAAG,aAAamT,EAAE,EAAEnT,GAAE,OAAO,SAASkP,GAAE/T,GAAE,CAAC,IAAI0I,GAAEnN,GAAEwY,EAAC,EAAE,OAAO,KAAK,QAAQ/T,EAAC,GAAG0I,IAAGA,IAAG,KAAK,MAAM1I,EAAC,CAAC,EAAE6E,GAAE,QAAQ,SAASkP,GAAE/T,GAAE,CAAC,OAAOzE,GAAEwY,EAAC,EAAE,KAAK,QAAQ/T,EAAC,CAAC,EAAE6E,GAAE,SAAS,SAASkP,GAAE/T,GAAE,CAAC,OAAO,KAAK,MAAMA,EAAC,EAAEzE,GAAEwY,EAAC,CAAC,EAAElP,GAAE,GAAG,SAASkP,GAAE/T,GAAE0I,GAAE,CAAC,OAAO9B,GAAE,EAAEmN,EAAC,EAAE,KAAK/T,EAAC,EAAE,KAAK,IAAI0I,GAAEqL,EAAC,CAAC,EAAElP,GAAE,KAAK,UAAU,CAAC,OAAO,KAAK,MAAM,KAAK,QAAO,EAAG,GAAG,CAAC,EAAEA,GAAE,QAAQ,UAAU,CAAC,OAAO,KAAK,GAAG,QAAS,CAAA,EAAEA,GAAE,QAAQ,SAASkP,GAAE/T,GAAE,CAAC,IAAI0I,GAAE,KAAKk2B,GAAE,CAAC,CAACh4B,GAAE,EAAE5G,EAAC,GAAGA,GAAE9B,GAAE0I,GAAE,EAAEmN,EAAC,EAAEiE,GAAE,SAASjE,GAAE/T,GAAE,CAAC,IAAI7E,GAAEyL,GAAE,EAAE8B,GAAE,GAAG,KAAK,IAAIA,GAAE,GAAG1I,GAAE+T,EAAC,EAAE,IAAI,KAAKrL,GAAE,GAAG1I,GAAE+T,EAAC,EAAErL,EAAC,EAAE,OAAOk2B,GAAEzjC,GAAEA,GAAE,MAAMwM,EAAC,CAAC,EAAEo3B,GAAE,SAAShrB,GAAE/T,GAAE,CAAC,OAAO4G,GAAE,EAAE8B,GAAE,OAAM,EAAGqL,EAAC,EAAE,MAAMrL,GAAE,OAAO,GAAG,GAAGk2B,GAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM5+B,EAAC,CAAC,EAAE0I,EAAC,CAAC,EAAEnL,GAAE,KAAK,GAAGuW,GAAE,KAAK,GAAGjP,GAAE,KAAK,GAAG8U,GAAE,OAAO,KAAK,GAAG,MAAM,IAAI,OAAOzb,IAAG,KAAK0W,GAAE,OAAOgqB,GAAE5mB,GAAE,EAAE,CAAC,EAAEA,GAAE,GAAG,EAAE,EAAE,KAAK5S,GAAE,OAAOw5B,GAAE5mB,GAAE,EAAElE,EAAC,EAAEkE,GAAE,EAAElE,GAAE,CAAC,EAAE,KAAKgrB,GAAE,IAAInqB,GAAE,KAAK,UAAU,WAAW,EAAEkgB,IAAGt3B,GAAEoX,GAAEpX,GAAE,EAAEA,IAAGoX,GAAE,OAAOqD,GAAE4mB,GAAE/5B,GAAEgwB,GAAEhwB,IAAG,EAAEgwB,IAAG/gB,EAAC,EAAE,KAAKnM,GAAE,KAAKzC,GAAE,OAAO65B,GAAEplB,GAAE,QAAQ,CAAC,EAAE,KAAKklB,GAAE,OAAOE,GAAEplB,GAAE,UAAU,CAAC,EAAE,KAAKxU,GAAE,OAAO45B,GAAEplB,GAAE,UAAU,CAAC,EAAE,KAAKxe,GAAE,OAAO4jC,GAAEplB,GAAE,eAAe,CAAC,EAAE,QAAQ,OAAO,KAAK,MAAO,CAAA,CAAC,EAAE9U,GAAE,MAAM,SAASkP,GAAE,CAAC,OAAO,KAAK,QAAQA,GAAE,EAAE,CAAC,EAAElP,GAAE,KAAK,SAASkP,GAAE/T,GAAE,CAAC,IAAI0I,GAAEo2B,GAAEl4B,GAAE,EAAEmN,EAAC,EAAE7V,GAAE,OAAO,KAAK,GAAG,MAAM,IAAI8Z,IAAGtP,GAAE,CAAA,EAAGA,GAAEf,EAAC,EAAEzJ,GAAE,OAAOwK,GAAExD,EAAC,EAAEhH,GAAE,OAAOwK,GAAEtD,EAAC,EAAElH,GAAE,QAAQwK,GAAEkM,EAAC,EAAE1W,GAAE,WAAWwK,GAAEm2B,EAAC,EAAE3gC,GAAE,QAAQwK,GAAEvD,EAAC,EAAEjH,GAAE,UAAUwK,GAAEvN,EAAC,EAAE+C,GAAE,UAAUwK,GAAEk2B,EAAC,EAAE1gC,GAAE,eAAewK,IAAGo2B,EAAC,EAAEC,GAAED,KAAIn3B,GAAE,KAAK,IAAI3H,GAAE,KAAK,IAAIA,GAAE,GAAG8+B,KAAI15B,IAAG05B,KAAIlqB,GAAE,CAAC,IAAIrX,GAAE,KAAK,QAAQ,IAAI2H,GAAE,CAAC,EAAE3H,GAAE,GAAGya,EAAC,EAAE+mB,EAAC,EAAExhC,GAAE,KAAI,EAAG,KAAK,GAAGA,GAAE,IAAI2H,GAAE,KAAK,IAAI,KAAK,GAAG3H,GAAE,YAAW,CAAE,CAAC,EAAE,EAAE,MAAMya,IAAG,KAAK,GAAGA,EAAC,EAAE+mB,EAAC,EAAE,OAAO,KAAK,KAAM,EAAC,IAAI,EAAEl6B,GAAE,IAAI,SAASkP,GAAE/T,GAAE,CAAC,OAAO,KAAK,MAAO,EAAC,KAAK+T,GAAE/T,EAAC,CAAC,EAAE6E,GAAE,IAAI,SAASkP,GAAE,CAAC,OAAO,KAAKnN,GAAE,EAAEmN,EAAC,CAAC,GAAG,EAAElP,GAAE,IAAI,SAAS+5B,GAAE1gC,GAAE,CAAC,IAAIgH,GAAE8S,GAAE,KAAK4mB,GAAE,OAAOA,EAAC,EAAE,IAAIG,GAAEn4B,GAAE,EAAE1I,EAAC,EAAEX,GAAE,SAASwW,GAAE,CAAC,IAAI/T,GAAEzE,GAAEyc,EAAC,EAAE,OAAOpR,GAAE,EAAE5G,GAAE,KAAKA,GAAE,KAAM,EAAC,KAAK,MAAM+T,GAAE6qB,EAAC,CAAC,EAAE5mB,EAAC,CAAC,EAAE,GAAG+mB,KAAI35B,GAAE,OAAO,KAAK,IAAIA,GAAE,KAAK,GAAGw5B,EAAC,EAAE,GAAGG,KAAInqB,GAAE,OAAO,KAAK,IAAIA,GAAE,KAAK,GAAGgqB,EAAC,EAAE,GAAGG,KAAIp3B,GAAE,OAAOpK,GAAE,CAAC,EAAE,GAAGwhC,KAAID,GAAE,OAAOvhC,GAAE,CAAC,EAAE,IAAIuW,IAAG5O,GAAE,CAAE,EAACA,GAAEC,EAAC,EAAEnF,GAAEkF,GAAE25B,EAAC,EAAEn2B,GAAExD,GAAE/J,EAAC,EAAE4Y,EAAE7O,IAAG65B,EAAC,GAAG,EAAEl6B,GAAE,KAAK,GAAG,QAAS,EAAC+5B,GAAE9qB,GAAE,OAAOlN,GAAE,EAAE/B,GAAE,IAAI,CAAC,EAAEA,GAAE,SAAS,SAASkP,GAAE/T,GAAE,CAAC,OAAO,KAAK,IAAI,GAAG+T,GAAE/T,EAAC,CAAC,EAAE6E,GAAE,OAAO,SAASkP,GAAE,CAAC,IAAI/T,GAAE,KAAK0I,GAAE,KAAK,QAAO,EAAG,GAAG,CAAC,KAAK,QAAO,EAAG,OAAOA,GAAE,aAAasP,GAAE,IAAI4mB,GAAE7qB,IAAG,uBAAuB5Y,GAAEyL,GAAE,EAAE,IAAI,EAAEzB,GAAE,KAAK,GAAG05B,GAAE,KAAK,GAAGl3B,GAAE,KAAK,GAAGm3B,GAAEp2B,GAAE,SAAStD,GAAEsD,GAAE,OAAOxK,GAAEwK,GAAE,SAASkM,GAAE,SAASb,GAAErL,GAAEvN,GAAEgK,GAAE,CAAC,OAAO4O,KAAIA,GAAErL,EAAC,GAAGqL,GAAE/T,GAAE4+B,EAAC,IAAIzjC,GAAEuN,EAAC,EAAE,MAAM,EAAEvD,EAAC,CAAC,EAAED,GAAE,SAAS6O,GAAE,CAAC,OAAOnN,GAAE,EAAEzB,GAAE,IAAI,GAAG4O,GAAE,GAAG,CAAC,EAAEgrB,GAAE7gC,IAAG,SAAS6V,GAAE/T,GAAE0I,GAAE,CAAC,IAAIk2B,GAAE7qB,GAAE,GAAG,KAAK,KAAK,OAAOrL,GAAEk2B,GAAE,YAAa,EAACA,EAAC,EAAE,OAAOA,GAAE,QAAQrhC,GAAG,SAASwW,GAAE6qB,GAAE,CAAC,OAAOA,IAAG,SAAS7qB,GAAE,CAAC,OAAOA,GAAC,CAAE,IAAI,KAAK,OAAO,OAAO/T,GAAE,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,OAAO,OAAO4G,GAAE,EAAE5G,GAAE,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI,OAAO2H,GAAE,EAAE,IAAI,KAAK,OAAOf,GAAE,EAAEe,GAAE,EAAE,EAAE,GAAG,EAAE,IAAI,MAAM,OAAOiN,GAAElM,GAAE,YAAYf,GAAEvC,GAAE,CAAC,EAAE,IAAI,OAAO,OAAOwP,GAAExP,GAAEuC,EAAC,EAAE,IAAI,IAAI,OAAO3H,GAAE,GAAG,IAAI,KAAK,OAAO4G,GAAE,EAAE5G,GAAE,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI,OAAO,OAAOA,GAAE,EAAE,EAAE,IAAI,KAAK,OAAO4U,GAAElM,GAAE,YAAY1I,GAAE,GAAG8+B,GAAE,CAAC,EAAE,IAAI,MAAM,OAAOlqB,GAAElM,GAAE,cAAc1I,GAAE,GAAG8+B,GAAE,CAAC,EAAE,IAAI,OAAO,OAAOA,GAAE9+B,GAAE,EAAE,EAAE,IAAI,IAAI,OAAO,OAAOmF,EAAC,EAAE,IAAI,KAAK,OAAOyB,GAAE,EAAEzB,GAAE,EAAE,GAAG,EAAE,IAAI,IAAI,OAAOD,GAAE,CAAC,EAAE,IAAI,KAAK,OAAOA,GAAE,CAAC,EAAE,IAAI,IAAI,OAAO65B,GAAE55B,GAAE05B,GAAE,EAAE,EAAE,IAAI,IAAI,OAAOE,GAAE55B,GAAE05B,GAAE,EAAE,EAAE,IAAI,IAAI,OAAO,OAAOA,EAAC,EAAE,IAAI,KAAK,OAAOj4B,GAAE,EAAEi4B,GAAE,EAAE,GAAG,EAAE,IAAI,IAAI,OAAO,OAAO7+B,GAAE,EAAE,EAAE,IAAI,KAAK,OAAO4G,GAAE,EAAE5G,GAAE,GAAG,EAAE,GAAG,EAAE,IAAI,MAAM,OAAO4G,GAAE,EAAE5G,GAAE,IAAI,EAAE,GAAG,EAAE,IAAI,IAAI,OAAO7E,EAAC,CAAC,OAAO,IAAI,EAAE4Y,EAAC,GAAG5Y,GAAE,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAE,EAAE0J,GAAE,UAAU,UAAU,CAAC,MAAO,IAAG,CAAC,KAAK,MAAM,KAAK,GAAG,kBAAmB,EAAC,EAAE,CAAC,EAAEA,GAAE,KAAK,SAAS+5B,GAAE15B,GAAE8S,GAAE,CAAC,IAAI+mB,GAAExhC,GAAE,KAAKuW,GAAElN,GAAE,EAAE1B,EAAC,EAAEL,GAAEtJ,GAAEqjC,EAAC,EAAEjlB,IAAG9U,GAAE,UAAS,EAAG,KAAK,aAAa7E,GAAE2U,GAAE,KAAK9P,GAAEgwB,GAAE,UAAU,CAAC,OAAOjuB,GAAE,EAAErJ,GAAEsH,EAAC,CAAC,EAAE,OAAOiP,GAAG,CAAA,KAAKc,GAAEmqB,GAAElK,GAAC,EAAG,GAAG,MAAM,KAAKzvB,GAAE25B,GAAElK,KAAI,MAAM,KAAK32B,GAAE6gC,GAAElK,GAAC,EAAG,EAAE,MAAM,KAAKiK,GAAEC,IAAGpqB,GAAEgF,IAAG,OAAO,MAAM,KAAKhS,GAAEo3B,IAAGpqB,GAAEgF,IAAG,MAAM,MAAM,KAAKklB,GAAEE,GAAEpqB,GAAEjM,GAAE,MAAM,KAAKvD,GAAE45B,GAAEpqB,GAAE3U,GAAE,MAAM,KAAK7E,GAAE4jC,GAAEpqB,GAAEZ,EAAE,MAAM,QAAQgrB,GAAEpqB,EAAC,CAAC,OAAOqD,GAAE+mB,GAAEn4B,GAAE,EAAEm4B,EAAC,CAAC,EAAEl6B,GAAE,YAAY,UAAU,CAAC,OAAO,KAAK,MAAMO,EAAC,EAAE,EAAE,EAAEP,GAAE,QAAQ,UAAU,CAAC,OAAOgwB,GAAE,KAAK,EAAE,CAAC,EAAEhwB,GAAE,OAAO,SAASkP,GAAE/T,GAAE,CAAC,GAAG,CAAC+T,GAAE,OAAO,KAAK,GAAG,IAAIrL,GAAE,KAAK,QAAQk2B,GAAEK,GAAElrB,GAAE/T,GAAE,EAAE,EAAE,OAAO4+B,KAAIl2B,GAAE,GAAGk2B,IAAGl2B,EAAC,EAAE7D,GAAE,MAAM,UAAU,CAAC,OAAO+B,GAAE,EAAE,KAAK,GAAG,IAAI,CAAC,EAAE/B,GAAE,OAAO,UAAU,CAAC,OAAO,IAAI,KAAK,KAAK,SAAS,CAAC,EAAEA,GAAE,OAAO,UAAU,CAAC,OAAO,KAAK,QAAS,EAAC,KAAK,cAAc,IAAI,EAAEA,GAAE,YAAY,UAAU,CAAC,OAAO,KAAK,GAAG,YAAa,CAAA,EAAEA,GAAE,SAAS,UAAU,CAAC,OAAO,KAAK,GAAG,YAAa,CAAA,EAAEiP,EAAC,IAAIhU,GAAEoB,GAAE,UAAU,OAAO3F,GAAE,UAAUuE,GAAE,CAAC,CAAC,MAAM8+B,EAAC,EAAE,CAAC,KAAKzjC,EAAC,EAAE,CAAC,KAAKgK,EAAC,EAAE,CAAC,KAAK05B,EAAC,EAAE,CAAC,KAAKl3B,EAAC,EAAE,CAAC,KAAKvC,EAAC,EAAE,CAAC,KAAKwP,EAAC,EAAE,CAAC,KAAK1P,EAAC,CAAC,EAAE,QAAS,SAAS6O,GAAE,CAACjU,GAAEiU,GAAE,CAAC,CAAC,EAAE,SAAS/T,GAAE,CAAC,OAAO,KAAK,GAAGA,GAAE+T,GAAE,CAAC,EAAEA,GAAE,CAAC,CAAC,CAAC,CAAC,GAAIxY,GAAE,OAAO,SAASwY,GAAE/T,GAAE,CAAC,OAAO+T,GAAE,KAAKA,GAAE/T,GAAEkB,GAAE3F,EAAC,EAAEwY,GAAE,GAAG,IAAIxY,EAAC,EAAEA,GAAE,OAAO0jC,GAAE1jC,GAAE,QAAQyjC,GAAEzjC,GAAE,KAAK,SAASwY,GAAE,CAAC,OAAOxY,GAAE,IAAIwY,EAAC,CAAC,EAAExY,GAAE,GAAGs5B,GAAElgB,EAAC,EAAEpZ,GAAE,GAAGs5B,GAAEt5B,GAAE,EAAE,GAAGA,EAAC,CAAC,+HCI9+N,MAAM,SAAU,CAOnB,OAAO,sBAAsB2jC,EAAW,CACpC,OAAKA,IAEE,OAAOA,GAAc,SACtB,IAAI,KAAKA,CAAS,EAClBA,EACd,CAII,OAAO,sBAAsB1nC,EAAO,CAChC,OAAIA,aAAiB,KACT,KAAK,oBAAoBA,EAAM,YAAW,EAAI,CAAC,EACnD,IACA,KAAK,oBAAoBA,EAAM,SAAQ,EAAK,CAAC,EAC7C,IACA,KAAK,oBAAoBA,EAAM,SAAS,EAEzCA,CACf,CAII,OAAO,gBAAgB0nC,EAAWC,EAAQ,GAAOC,GAAkB,GAAM,CAerE,IAAIC,GAAO,OAAOH,GAAc,SAC1B,MAAMA,CAAS,EAAE,OAAM,EACvBA,EACN,OAAIC,IACAE,GAAO,IAAI,KAAKA,GAAK,eAAgB,EAAEA,GAAK,cAAeA,GAAK,WAAU,EAAIA,GAAK,YAAW,EAAIA,GAAK,cAAe,EAAEA,GAAK,cAAe,EAAEA,GAAK,oBAAoB,GACtKD,IACDC,GAAK,mBAAmB,CAAC,EACtBA,EACf,CAII,OAAO,sBAAsB7nC,EAAO8nC,EAAc,GAAO,CACrD,OAAI9nC,aAAiB,KACT,KAAK,oBAAoBA,EAAM,SAAQ,CAAE,EAC7C,IACA,KAAK,oBAAoBA,EAAM,YAAY,GACzC8nC,EAEI,GADA,IAAM,KAAK,oBAAoB9nC,EAAM,WAAY,CAAA,GAExDA,CACf,CAII,OAAO,gBAAgBA,EAAO,CAC1B,GAAI,OAAOA,GAAU,SAAU,CAC3B,KAAM,CAAC+nC,EAAOC,GAASC,EAAO,EAAIjoC,EAAM,MAAM,GAAG,EAC3C6nC,GAAO,IAAI,KACjB,OAAIE,GACAF,GAAK,SAAS,SAASE,CAAK,CAAC,EAC7BC,IACAH,GAAK,WAAW,SAASG,EAAO,CAAC,EACjCC,IACAJ,GAAK,WAAW,SAASI,EAAO,CAAC,EAC9BJ,EACnB,CACQ,OAAO7nC,CACf,CAII,OAAO,kBAAkBA,EAAO8nC,EAAc,GAAO,CAQjD,OAPA9nC,EACIA,aAAiB,KACXA,EAAM,SAAU,EACd,IACAA,EAAM,WAAY,GAChB8nC,EAAyC,GAA3B,IAAM9nC,EAAM,WAAY,GAC1CA,EACN,OAAOA,GAAU,SACVA,EACF,MAAM,GAAG,EACT,IAAKmiB,IAAOA,GAAE,SAAW,EAAI,IAAMA,GAAIA,EAAE,EACzC,KAAK,GAAG,EAEVniB,CACf,CAII,OAAO,0BAA0BA,EAAO4nC,EAAiB,CAIrD,GAHI,OAAO5nC,GAAU,WACjBA,EAAQ,IAAI,KAAKA,CAAK,GAEtBA,aAAiB,KAAM,CACvB,IAAIkoC,GAAa,KAAK,oBAAoBloC,EAAM,YAAa,EAAE,CAAC,EAC5D,IACA,KAAK,oBAAoBA,EAAM,SAAQ,EAAK,CAAC,EAC7C,IACA,KAAK,oBAAoBA,EAAM,SAAS,EACxC,IACA,KAAK,oBAAoBA,EAAM,UAAU,EACzC,IACA,KAAK,oBAAoBA,EAAM,YAAY,EAC3C,IACA,KAAK,oBAAoBA,EAAM,YAAY,EAC3C4nC,IACAM,IAAc,IAAI,KAAK,mBAAmBloC,EAAM,gBAAiB,CAAA,CAAC,IACtEA,EAAQkoC,EACpB,CACQ,OAAOloC,CACf,CAII,OAAO,6BAA6BA,EAAO,CAIvC,OAHI,OAAOA,GAAU,WACjBA,EAAQ,IAAI,KAAKA,CAAK,GAEtBA,aAAiB,KACT,KAAK,oBAAoBA,EAAM,eAAc,EAAI,CAAC,EACtD,IACA,KAAK,oBAAoBA,EAAM,YAAW,EAAK,CAAC,EAChD,IACA,KAAK,oBAAoBA,EAAM,YAAY,EAC3C,IACA,KAAK,oBAAoBA,EAAM,aAAa,EAC5C,IACA,KAAK,oBAAoBA,EAAM,eAAe,EAC9C,IACA,KAAK,oBAAoBA,EAAM,eAAe,EAC9C,IACA,KAAK,mBAAmBA,EAAM,oBAAoB,EAEnDA,CACf,CAII,OAAO,oBAAoBA,EAAO,CAC9B,OAAI,MAAM,QAAQA,CAAK,EACZA,EAAM,IAAK2D,GAAM,OAAOA,CAAC,CAAC,EAAE,KAAK,GAAG,EAExC3D,CACf,CAII,OAAO,oBAAoBA,EAAO,CAC9B,OAAI,OAAOA,GAAU,SACbA,EAAM,OAAS,EACRA,EAAM,MAAM,GAAG,EAGf,CAAE,EAGVA,CACf,CACI,OAAO,mBAAmBA,EAAO,CAC7B,OAAO,KAAK,UAAUA,CAAK,CACnC,CACI,OAAO,mBAAmBA,EAAO,CAC7B,OAAO,OAAOA,GAAU,SAAW,KAAK,MAAMA,CAAK,EAAIA,CAC/D,CACI,OAAO,mBAAmBA,EAAO,CAC7B,MAAO,GAAKA,CACpB,CACI,OAAO,mBAAmBA,EAAOy+B,EAAgB,CAC7C,OAAIA,EAAe,MACf,CAAC,MAAMz+B,CAAK,GACZy+B,EAAe,KAAK,QAAQ,SAASz+B,CAAK,CAAC,GAAK,IAEhDA,EAAQ,SAASA,CAAK,GAEnBA,CACf,CAOI,OAAO,oBAAoBA,EAAOmoC,EAAc,EAAG,CAE/C,MAAc,GADF,IAAI,OAAOA,CAAW,CACd,GAAGnoC,CAAK,GAAI,MAAM,CAACmoC,CAAW,CAC1D,CAII,OAAO,mBAAmBnoC,EAAO,CAC7B,OAAIA,EAAQ,GACD,KAAOA,EAETA,EAAQ,IACN,IAAMA,EAGN,OAAOA,CAAK,CAE/B,CACA,CCtNO,MAAM,6BAA8B,CAOvC,QAAQ8lC,EAAU,CACdA,EAAS,QAASpuB,GAAY,CAC1B,KAAK,mBAAmBA,CAAO,EAC/B,KAAK,6BAA6BouB,EAAUpuB,CAAO,CAC/D,CAAS,CACT,CAOI,mBAAmBA,EAAS,CAEnBA,EAAQ,QAEbA,EAAQ,SAAS,QAAQ,QAASK,GAAW,CAEzC,GAAIA,EAAO,WACPA,EAAO,gBAKP,OACJ,MAAMqwB,GAAY1wB,EAAQ,WAAW,KAAM0wB,IAAcA,GAAU,SAAWrwB,CAAM,EAChFqwB,IACA1wB,EAAQ,WAAW,OAAOA,EAAQ,WAAW,QAAQ0wB,EAAS,EAAG,CAAC,EAGtE,MAAMxiB,GAAc7N,EAAO,eAAeL,EAAQ,MAAM,EAExD,GAAIkO,KAAgB,OAGpB,IAAIlO,EAAQ,eAAgB,CAExB,MAAM2wB,GAAgCtwB,EAAO,OAAS,QAAUA,EAAO,OAAS,QAEhF,IAAI0N,GAAgB1N,EAAO,eAAeL,EAAQ,eAAgB2wB,EAA6B,EAE/F,GAAItwB,EAAO,iBAAkB,CACzB,MAAM/X,GAAQ+X,EAAO,iBAAiB,eAAeL,EAAQ,MAAM,EACnE,GAAI1X,IAAU,KACV,MACxB,CACgB,IAAIsoC,GAAkB1iB,GAEtB,GAAIA,KAAgB,KAAM,CACtB,OAAQ7N,EAAO,KAAI,CACf,IAAK,OACDuwB,GACI,UAAU,sBAAsB1iB,EAAW,EAC/C,MACJ,IAAK,OACL,IAAK,sBACL,IAAK,yBACL,IAAK,SACD0iB,GACI,UAAU,sBAAsB1iB,EAAW,EAC/C,MACJ,IAAK,WACL,IAAK,YACL,KAAK,KACL,IAAK,YACL,IAAK,8BACL,IAAK,2BACL,IAAK,iCACL,IAAK,cACD0iB,GACI,UAAU,6BAA6B1iB,EAAW,EACtDH,GACI,UAAU,6BAA6BA,EAAa,EACxD,MACJ,IAAK,OACL,IAAK,QAID,GAAI,SAAS,YAAYG,GAAaH,EAAa,EAC/C,OACJ,MACJ,IAAK,eACD6iB,GACI,UAAU,oBAAoB1iB,EAAW,EAC7CH,GACI,UAAU,oBAAoBA,EAAa,EAC/C,MACJ,IAAK,cACD6iB,GACI,UAAU,mBAAmB1iB,EAAW,EAC5CH,GACI,UAAU,mBAAmBA,EAAa,EAC9C,MACJ,IAAK,cACD6iB,GACI,UAAU,mBAAmB1iB,EAAW,EAC5CH,GACI,UAAU,mBAAmBA,EAAa,EAC9C,KAC5B,CACwB1N,EAAO,cACPuwB,GAAkB,uBAAuB,YAAYvwB,EAAO,YAAa6N,EAAW,EAE5G,CAEgB,GAAI,OAAO,SAAS0iB,EAAe,GAC/B,OAAO,SAAS7iB,EAAa,GAC7B,GAAI6iB,GAAgB,OAAO7iB,EAAa,EACpC,eAIA6iB,KAAoB7iB,GACpB,MAExB,CACiB/N,EAAQ,YAAY,SAASK,CAAM,GACpCL,EAAQ,YAAY,KAAKK,CAAM,EACnCL,EAAQ,WAAW,KAAK,CACpB,OAAQK,EACR,MAAO6N,EACvB,CAAa,EACb,CAAS,CACT,CAII,6BAA6B2iB,EAAa7wB,EAAS,CAE1CA,EAAQ,QAEbA,EAAQ,SAAS,yBAAyB,QAASuB,IAAa,CAE5D,IAAIgb,GAAgBhb,GAAS,eAAevB,EAAQ,MAAM,EAE1D,GAAIuc,KAAkB,OAClB,OAEJ,GAAIvc,EAAQ,eAAgB,CAMxB,IAAI8wB,GAA6BvU,GAC7BuU,KAA+B,MAC/B,YAAY,SAASA,EAA0B,IAC/CA,GAA6BvvB,GAAS,iBAAiBuvB,EAA0B,GAGrF,MAAMC,GAAqCxvB,GAAS,eAAevB,EAAQ,cAAc,EAGzF,GAD2B,SAAS,WAAW8wB,GAA4BC,EAAkC,EAEzG,OAGA/wB,EAAQ,cAAc,KAAKuB,EAAQ,CAEvD,CAGY,MAAMyvB,GAAeH,EAAY,KAAM7wB,IAAYA,GAAQ,gBAAkBA,GAAQ,SAAWuc,EAAa,EACzGyU,KACAzU,GAAgByU,IAEpB,MAAMN,GAAY1wB,EAAQ,WAAW,KAAM0wB,IAAcA,GAAU,WAAanvB,EAAQ,EACpFmvB,GAEAA,GAAU,MAAQnU,GAIlBvc,EAAQ,WAAW,KAAK,CACpB,SAAUuB,GACV,MAAOgb,EAC3B,CAAiB,CAEjB,CAAS,CACT,CACA,CClMO,MAAM,mCAAmC,YAAa,CACzD,aAAc,CACV,MAAM,oDAAoD,CAClE,CACA,CCEO,MAAM,wBAAyB,CAIlC,YAAY9N,EAAa,CACrB,KAAK,YAAcA,CAC3B,CAOI,MAAM,OAAOzO,EAAS,CAClB,MAAM6sB,EAAU5qB,IAAU,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAK,EACnEgR,GAAY,KAAK,aAAajT,EAAQ,SAAS,SAAS,EACxDixB,GAAiBpE,EAAO7sB,EAAQ,SAAS,oBAAoB,YAAY,EACzEkxB,GAAkBrE,EAAO7sB,EAAQ,SAAS,qBAAqB,YAAY,EACjF,IAAIzT,GAASyT,EAAQ,SAAS,mBAAmB,eAAeA,EAAQ,MAAM,EAC1E,CAACzT,IAAUyT,EAAQ,eAAiBA,EAAQ,cAAc,SAE1DzT,GAASyT,EAAQ,cAAc,iBACzBA,EAAQ,cAAc,iBACtBA,EAAQ,cAAc,QAChC,MAAMmrB,GAAWnrB,EAAQ,SAAS,eAAezT,EAAM,EACvD,IAAI4kC,GAgBJ,GAfIhG,KACAgG,GAAgB,MAAM,KAAK,YAAY,QAClC,mBAAkB,EAClB,OAAOnxB,EAAQ,SAAS,WACzB,IACAA,EAAQ,SAAS,qBAAqB,aAAc,OAAO,EAC1D,KAAKA,EAAQ,SAAS,OAAQA,EAAQ,SAAS,UAAU,EACzD,WAAWmrB,EAAQ,EACnB,UAAS,EACT,KAAMt9B,IAAW,CAClB,MAAMvF,GAAQuF,GAASA,GAAO,MAAW,OAEzC,OAAO,OAAOvF,IAAU,SAAW,SAASA,EAAK,EAAIA,EACrE,CAAa,GAED6oC,KAAkB,OAClB,MAAM,KAAK,YAAY,MAAM,UAAUle,EAAS,QACzCge,EAAc,gBAAgBA,EAAc,MAAME,EAAa,SAASF,EAAc,aAAaA,EAAc,QACjHC,EAAe,MAAMA,EAAe,cAC9BA,EAAe,OAAOC,EAAa,EAAE,EAClD,SAAS,UAAUnxB,EAAQ,iBAAkBA,EAAQ,SAAS,oBAAoB,eAAemxB,EAAa,EAAGnxB,EAAQ,SAAS,qBAAqB,eAAemxB,GAAgB,CAAC,CAAC,MAEvL,CAGD,GAAI,CAFiB,MAAM,KAAK,mBAAmBnxB,EAASzT,EAAM,EAG9D,MAAM,IAAI,2BACd,SAAS,UAAUyT,EAAQ,iBAAkBA,EAAQ,SAAS,oBAAoB,eAAe,CAAC,EAAGA,EAAQ,SAAS,qBAAqB,eAAe,CAAC,CAAC,CACxK,CACA,CAII,MAAM,OAAOA,EAAS,CAClB,IAAIzT,EAASyT,EAAQ,SAAS,mBAAmB,eAAeA,EAAQ,MAAM,EAC1E,CAACzT,GAAUyT,EAAQ,eAAiBA,EAAQ,cAAc,SAE1DzT,EAASyT,EAAQ,cAAc,QACnC,IAAI/M,GAAS+M,EAAQ,eASrB,GARI,CAAC/M,IAAU1G,IAEX0G,GAAS+M,EAAQ,SACZ,qBAAqB,eAAezT,CAAM,EAC1C,KAAMijC,IACA,OAAO,QAAQxvB,EAAQ,UAAU,EAAE,MAAM,CAAC,CAAC3X,GAAKC,EAAK,IAAMknC,GAAMnnC,EAAG,IAAMC,EAAK,CACzF,GAED2K,KAAW,QAAa1G,IAAW,OACnC,OAEJ,MAAM6kC,GAAYpxB,EAAQ,SAAS,mBAAmB,eAAe/M,EAAM,EACrEo+B,GAAcrxB,EAAQ,SAAS,eAAeoxB,EAAS,EACvDjG,GAAWnrB,EAAQ,SAAS,eAAezT,CAAM,EAEvD,GAAI,UAAS,WAAW8kC,GAAalG,EAAQ,GAG7C,GAAI5+B,EAAQ,CACR,MAAMsgC,GAAU5qB,IAAU,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAK,EACnEgR,GAAY,KAAK,aAAajT,EAAQ,SAAS,SAAS,EACxDixB,GAAiBpE,GAAO7sB,EAAQ,SAAS,oBAAoB,YAAY,EACzEkxB,GAAkBrE,GAAO7sB,EAAQ,SAAS,qBAAqB,YAAY,EAC3E4T,GAAW5T,EAAQ,SAAS,eAAe/M,EAAM,EACvD,IAAIq+B,GACA1d,KACA0d,IAAY,MAAM,KAAK,gBAAgBtxB,EAAQ,SAAU4T,EAAQ,GAAG,CAAC,GAEzE,IAAI2d,GAIJ,GAHIpG,KACAoG,IAAY,MAAM,KAAK,gBAAgBvxB,EAAQ,SAAUmrB,EAAQ,GAAG,CAAC,GAErEmG,KAAa,QAAaC,KAAa,OAAW,CAClD,MAAMC,GAAaD,GAAS,KAAOD,GAAS,KACtCG,GAAWH,GAAS,MAAQA,GAAS,KAAO,EAClD,IAAII,GACAF,GACAE,GAAaH,GAAS,KAAOD,GAAS,MAGtCI,GAAaH,GAAS,MAAQD,GAAS,KAG3C,MAAMK,GAAiB,QAAQV,EAAc,OAAOK,GAAS,IAAI,QAC1DL,EAAc,MAAMK,GAAS,KAAK,SAC7BL,EAAc,MAAMS,EAAU,IACpCE,GAAkB,QAAQV,EAAe,MAAMI,GAAS,IAAI,QAC3DJ,EAAe,OAAOI,GAAS,KAAK,SAC/BJ,EAAe,MAAMQ,EAAU,IAEvCF,GACA,MAAM,KAAK,YAAY,MAAM,UAAUve,EAAS,QACrCge,EAAc,gBACbA,EAAc,MAAMK,GAAS,KAAK,QACvCL,EAAc,OAAOM,GAAS,IAAI,SAC7BN,EAAc,MAAMQ,EAAQ,IACpCE,GACA,QAAQV,EAAc,SAEnBC,EAAe,gBACVA,EAAe,MAAMI,GAAS,KAAK,QACxCJ,EAAe,MAAMK,GAAS,IAAI,SAC7BL,EAAe,MAAMO,EAAQ,IACrCG,GACA,QAAQV,EAAe,MAClB,EAGT,MAAM,KAAK,YAAY,MAAM,UAAUje,EAAS,QACrCge,EAAc,gBACbA,EAAc,MAAMK,GAAS,IAAI,QACtCL,EAAc,MAAMM,GAAS,KAAK,SAC7BN,EAAc,MAAMQ,EAAQ,IACpCE,GACA,QAAQV,EAAc,SAEnBC,EAAe,gBACVA,EAAe,MAAMI,GAAS,IAAI,QACvCJ,EAAe,OAAOK,GAAS,KAAK,SAC/BL,EAAe,MAAMO,EAAQ,IACrCG,GACA,QAAQV,EAAe,MAClB,CAE7B,CACA,SAIgB,CAFiB,MAAM,KAAK,mBAAmBlxB,EAASzT,CAAM,EAG9D,MAAM,IAAI,2BAE1B,CAII,MAAM,OAAO6hC,EAAU,CACd,MAAM,QAAQA,CAAQ,IACvBA,EAAW,CAACA,CAAQ,GACxB,MAAMzjC,EAAWyjC,EAAS,CAAC,EAAE,SACvBvB,GAAU5qB,IAAU,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAK,EACnEgR,GAAY,KAAK,aAAatoB,EAAS,SAAS,EAChDsmC,GAAiBpE,GAAOliC,EAAS,oBAAoB,YAAY,EACjEumC,GAAkBrE,GAAOliC,EAAS,qBAAqB,YAAY,EACzE,IAAIknC,GAAc,CAAE,EACpB,UAAW7xB,MAAWouB,EAAU,CAC5B,MAAMxa,GAAWjpB,EAAS,eAAeqV,GAAQ,MAAM,EACnD4T,IACAie,GAAY,KAAKje,EAAQ,CAEzC,CACQ,IAAIke,GAAa,MAAM,KAAK,gBAAgBnnC,EAAUknC,EAAW,EACjE,UAAW5+B,MAAU6+B,GAAY,CAC7B,MAAML,GAAWx+B,GAAO,MAAQA,GAAO,KAAO,EAC9C,MAAM,KAAK,YAAY,MAAM,UAAUggB,EAAS,QACrCge,EAAc,gBACbA,EAAc,MAAMh+B,GAAO,IAAI,SAASg+B,EAAc,MAAMQ,EAAQ,SACpER,EAAc,SAEnBC,EAAe,gBACVA,EAAe,MAAMj+B,GAAO,KAAK,SAASi+B,EAAe,MAAMO,EAAQ,SACvEP,EAAe,MAClB,CACrB,CACA,CAII,gBAAgBvmC,EAAU4mB,EAAK,CAC3B,MAAM7E,GAAS,CACX,KAAM,GAAG/hB,EAAS,UAAU,IAAIA,EAAS,oBAAoB,YAAY,GACzE,MAAO,GAAGA,EAAS,UAAU,IAAIA,EAAS,qBAAqB,YAAY,EAC9E,EACK4kB,GAAe,KAAK,YAAY,QAAQ,mBAAoB,EAClE,cAAO,QAAQ7C,EAAM,EAAE,QAAQ,CAAC,CAACrkB,GAAKC,EAAK,IAAM,CAC7CinB,GAAa,UAAUjnB,GAAOD,EAAG,CAC7C,CAAS,EACMknB,GACF,KAAK5kB,EAAS,OAAQA,EAAS,UAAU,EACzC,WAAW4mB,CAAG,EACd,QAAQ7E,GAAO,MAAO,MAAM,EAC5B,WAAU,EACV,KAAMkK,IAAY,CACnB,MAAM9jB,GAAO,CAAE,EACf,UAAWjF,MAAU+oB,GAAS,CAC1B,MAAMmb,GAAQ,CAAE,EAChB,UAAW1pC,MAAO,OAAO,KAAKqkB,EAAM,EAAG,CACnC,MAAMpkB,GAAQuF,GAASA,GAAOxF,EAAG,EAAI,OAErC0pC,GAAM1pC,EAAG,EACL,OAAOC,IAAU,SAAW,SAASA,EAAK,EAAIA,EACtE,CACgBwK,GAAK,KAAKi/B,EAAK,CAC/B,CACY,OAAOj/B,EACnB,CAAS,CACT,CACI,MAAM,mBAAmBkN,EAASzT,EAAQ,CACtC,MAAMsgC,GAAU5qB,IAAU,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAK,EACnEgR,GAAY,KAAK,aAAajT,EAAQ,SAAS,SAAS,EACxD2B,GAAa,CAAE,EACforB,GAAiB/sB,EAAQ,SAC1B,mBAAmB,YAAY,IAAKK,IAAW,CAChD,MAAMsQ,GAAakc,GAAOxsB,GAAO,YAAY,EACvC2xB,GAAY3xB,GAAO,eAAe9T,CAAM,EAC9C,GAAIylC,IAAa,KACb,MAAO,GAAGrhB,EAAU,WAExBhP,GAAW,KAAKqwB,EAAS,EACzB,MAAM7iB,GAAgB,KAAK,YAAY,WAAW,OAAO,gBAAgB,UAAY9O,GAAO,aAAcsB,GAAW,OAAS,CAAC,EAC/H,MAAO,GAAGgP,EAAU,MAAMxB,EAAa,EAC1C,CAAA,EACI,KAAK,OAAO,EACX8iB,GAAa,QACbpkC,GAAS,MAAM,KAAK,YAAY,MAAM,sBAAsBg/B,GAAOoF,EAAU,CAAC,SAAShf,EAAS,UAAU8Z,EAAc,GAAIprB,GAAY,EAAI,EAClJ,OAAO,SAAS9T,GAAO,QAAQ,CAAC,EAAEokC,EAAU,CAAC,IAAM,CAC3D,CAKI,aAAaziB,EAAW,CACpB,OAAOA,EACF,MAAM,GAAG,EACT,IAAKvjB,GAECA,IAAM,GACPA,EACA,KAAK,YAAY,WAAW,OAAO,OAAOA,CAAC,CACpD,EACI,KAAK,GAAG,CACrB,CACA,CCnQO,MAAM,sBAAuB,CAIhC,YAAYwiB,EAAa,CACrB,KAAK,YAAcA,CAC3B,CAOI,MAAM,OAAOzO,EAAS,CAElB,MAAMkyB,EAA2B,CAAE,EACnClyB,EAAQ,SAAS,qBAAqB,gBAAgB,QAASK,IAAW,CACtE6xB,EAAyB7xB,GAAO,YAAY,EACxCL,EAAQ,UACxB,CAAS,EACDA,EAAQ,SAAS,qBAAqB,kBAAkB,QAASK,IAAW,CACxE6xB,EAAyB7xB,GAAO,YAAY,EACxCL,EAAQ,UACxB,CAAS,EAED,MAAM,KAAK,YAAY,QAClB,mBAAkB,EAClB,OAAM,EACN,KAAKA,EAAQ,SAAS,qBAAqB,SAAS,EACpD,OAAOkyB,CAAwB,EAC/B,aAAa,EAAK,EAClB,cAAc,EAAK,EACnB,QAAS,EACd,IAAI3lC,GAASyT,EAAQ,SAAS,mBAAmB,eAAeA,EAAQ,MAAM,EAM9E,GALI,CAACzT,IAAUyT,EAAQ,eAAiBA,EAAQ,cAAc,SAE1DzT,GAASyT,EAAQ,cAAc,iBACzBA,EAAQ,cAAc,iBACtBA,EAAQ,cAAc,QAC5BzT,GAAQ,CACR,MAAMsgC,GAAU5qB,IAAU,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAK,EACnEgR,GAAY,KAAK,aAAajT,EAAQ,SAAS,qBAAqB,SAAS,EAC7EmyB,GAAc,CAAE,EAChBC,GAAsBpyB,EAAQ,SAAS,qBAAqB,gBAAgB,IAAKK,IAC5EwsB,GAAOxsB,GAAO,YAAY,CACpC,EACKgyB,GAAwBryB,EAAQ,SAAS,qBAAqB,kBAAkB,IAAKK,IAChFwsB,GAAOxsB,GAAO,YAAY,CACpC,EACKiyB,GAAkBtyB,EAAQ,SAAS,eAAe,IAAKK,KACzD8xB,GAAY,KAAK9xB,GAAO,eAAeL,EAAQ,iBACzCA,EAAQ,iBACRA,EAAQ,MAAM,CAAC,EACd,KAAK,YAAY,WAAW,OAAO,gBAAgB,gBAAkBK,GAAO,aAAc8xB,GAAY,OAAS,CAAC,EAC1H,EACKpF,GAAiB/sB,EAAQ,SAAS,qBAAqB,kBAAkB,IAAKK,IAAW,CAC3F,MAAMsQ,GAAakc,GAAOxsB,GAAO,YAAY,EACvC8qB,GAAW9qB,GAAO,iBAAiB,eAAe9T,EAAM,EAC9D,GAAI,CAAC4+B,GACD,MAAM,IAAI,oCAAoCnrB,EAAQ,SAAS,IAAI,EACvEmyB,GAAY,KAAKhH,EAAQ,EACzB,MAAMhc,GAAgB,KAAK,YAAY,WAAW,OAAO,gBAAgB,iBACrE9O,GAAO,iBAAiB,aAAc8xB,GAAY,OAAS,CAAC,EAChE,MAAO,GAAGxhB,EAAU,MAAMxB,EAAa,EACvD,CAAa,EACD,MAAM,KAAK,YAAY,MAAM,eAAe8D,EAAS,KAAK,CACtD,GAAGmf,GACH,GAAGC,EACnB,EAAc,KAAK,IAAI,CAAC,YACED,GAAoB,KAAK,IAAI,CAAC,KAAKE,GAAgB,KAAK,IAAI,CAAC,SAASrf,EAAS,UAAU8Z,GAAe,KAAK,OAAO,CAAC,GAAIoF,EAAW,CAC9J,CACA,CAII,MAAM,OAAOnyB,EAAS,CAClB,IAAIzT,EAASyT,EAAQ,SAAS,mBAAmB,eAAeA,EAAQ,MAAM,EAC1E,CAACzT,GAAUyT,EAAQ,eAAiBA,EAAQ,cAAc,SAE1DzT,EAASyT,EAAQ,cAAc,QACnC,IAAI/M,GAAS+M,EAAQ,eASrB,GARI,CAAC/M,IAAU1G,IAEX0G,GAAS+M,EAAQ,SACZ,qBAAqB,eAAezT,CAAM,EAC1C,KAAMijC,IACA,OAAO,QAAQxvB,EAAQ,UAAU,EAAE,MAAM,CAAC,CAAC3X,GAAKC,EAAK,IAAMknC,GAAMnnC,EAAG,IAAMC,EAAK,CACzF,GAED2K,KAAW,QAAa1G,IAAW,OACnC,OAEJ,MAAM6kC,GAAYpxB,EAAQ,SAAS,mBAAmB,eAAe/M,EAAM,EACrEo+B,GAAcrxB,EAAQ,SAAS,eAAeoxB,EAAS,EACvDjG,GAAWnrB,EAAQ,SAAS,eAAezT,CAAM,EAEvD,GAAI,SAAS,WAAW8kC,GAAalG,EAAQ,EACzC,OAEJ,MAAM0B,GAAU5qB,IAAU,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAK,EACnEswB,GAAevyB,EAAQ,SAAS,qBAChCoyB,GAAsBG,GAAa,gBAAgB,IAAKlyB,IACnDwsB,GAAOxsB,GAAO,YAAY,CACpC,EACKgyB,GAAwBE,GAAa,kBAAkB,IAAKlyB,IACvDwsB,GAAOxsB,GAAO,YAAY,CACpC,EAEKmyB,GAAiB,CAAC9gB,GAAIzP,KAAU,CAClC,MAAMwwB,GAAW,MAAMxwB,EAAK,GACtBywB,GAAYhhB,GACb,mBAAkB,EAClB,OAAO2gB,GAAsB,KAAK,IAAI,CAAC,EACvC,KAAKE,GAAa,UAAWE,EAAQ,EAE1C,UAAWpyB,MAAUkyB,GAAa,gBAC9BG,GAAU,SAAS,GAAG7F,GAAO4F,EAAQ,CAAC,IAAI5F,GAAOxsB,GAAO,YAAY,CAAC,aAAaA,GAAO,iBAAiB,YAAY,EAAE,EAE5H,OAAOqR,GACF,mBAAkB,EAClB,OAAO2gB,GAAsB,KAAK,IAAI,CAAC,EACvC,KAAK,IAAIK,GAAU,SAAU,CAAA,IAAKzwB,EAAK,EACvC,cAAcywB,GAAU,cAAe,CAAA,EACvC,SAAU,CAClB,EACK/wB,GAAa,CAAE,EACrB,UAAWtB,MAAUL,EAAQ,SAAS,eAClC2B,GAAW,SAAStB,GAAO,YAAY,EAAE,EACrCpN,GAAOoN,GAAO,YAAY,EAelC,GAbA,MAAM,KAAK,YAAY,QAClB,mBAAkB,EAClB,OAAM,EACN,KAAKkyB,GAAa,SAAS,EAC3B,MAAO7gB,IAAO,IAAI2gB,GAAsB,KAAK,IAAI,CAAC,SAASG,GAAe9gB,GAAI,YAAY,CAAC,GAAG,EAC9F,SAAUA,IAAO,IAAI0gB,GAAoB,KAAK,IAAI,CAAC,aAAaI,GAAe9gB,GAAI,UAAU,CAAC,GAAG,EACjG,cAAc/P,EAAU,EACxB,QAAS,EAMVpV,EAAQ,CAER,MAAM4lC,GAAc,CAAE,EAChBlf,GAAY,KAAK,aAAasf,GAAa,SAAS,EACpDI,GAAa9F,GAAO,WAAW,EAC/B4F,GAAW5F,GAAO,SAAS,EAC3BngB,GAAS,CACX,GAAG0lB,GAAoB,IAAKzhB,IAAe,GAAGgiB,EAAU,IAAIhiB,EAAU,EAAE,EACxE,GAAG0hB,GAAsB,IAAK1hB,IAAe,GAAG8hB,EAAQ,IAAI9hB,EAAU,EAAE,CAC3E,EACKiiB,GAAuB5yB,EAAQ,SAAS,qBAAqB,gBAAgB,IAAKK,IAAW,CAC/F,MAAMsQ,GAAakc,GAAOxsB,GAAO,YAAY,EACvCuT,GAAWvT,GAAO,iBAAiB,eAAepN,EAAM,EAC9Dk/B,GAAY,KAAKve,EAAQ,EACzB,MAAMzE,GAAgB,KAAK,YAAY,WAAW,OAAO,gBAAgB,UACrE9O,GAAO,iBAAiB,aAAc8xB,GAAY,OAAS,CAAC,EAChE,MAAO,GAAGM,EAAQ,IAAI9hB,EAAU,MAAMxB,EAAa,EACnE,CAAa,EACK0jB,GAAuB7yB,EAAQ,SAAS,qBAAqB,kBAAkB,IAAKK,IAAW,CACjG,MAAMsQ,GAAakc,GAAOxsB,GAAO,YAAY,EACvC8qB,GAAW9qB,GAAO,iBAAiB,eAAe9T,CAAM,EAC9D,GAAI,CAAC4+B,GACD,MAAM,IAAI,oCAAoCnrB,EAAQ,SAAS,IAAI,EACvEmyB,GAAY,KAAKhH,EAAQ,EACzB,MAAMhc,GAAgB,KAAK,YAAY,WAAW,OAAO,gBAAgB,iBACrE9O,GAAO,iBAAiB,aAAc8xB,GAAY,OAAS,CAAC,EAChE,MAAO,GAAGQ,EAAU,IAAIhiB,EAAU,MAAMxB,EAAa,EACrE,CAAa,EACD,MAAM,KAAK,YAAY,MAAM,eAAe8D,EAAS,KAAK,CACtD,GAAGmf,GACH,GAAGC,EACnB,EAAc,KAAK,IAAI,CAAC,YACE3lB,GAAO,KAAK,IAAI,CAAC,SACnBuG,EAAS,OAAO0f,EAAU,KAAK1f,EAAS,OAAOwf,EAAQ,UACtD,CACL,GAAGG,GACH,GAAGC,EACN,EAAC,KAAK,OAAO,CAAC,GAAIV,EAAW,CAC9C,CACA,CAII,MAAM,OAAO/D,EAAU,CAEnB,GAAM,KAAK,YAAY,WAAW,OAAO,QAAQ,OAAS,QACtD,OAEC,MAAM,QAAQA,CAAQ,IACvBA,EAAW,CAACA,CAAQ,GACxB,MAAMvB,EAAU5qB,IAAU,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAK,EACnE6wB,GAAc1E,EAAS,IAAKpuB,IAAYA,GAAQ,UAAU,EAC1DuyB,GAAenE,EAAS,CAAC,EAAE,SAAS,qBACpC2E,GAAkBtiB,IACbA,GACF,IAAKpQ,IAAW,CACjB,MAAMvN,GAAOggC,GAAY,IAAKE,IAAeA,GAAW3yB,GAAO,iBAAiB,YAAY,CAAC,EAC7F,MAAO,GAAGwsB,EAAOxsB,GAAO,YAAY,CAAC,QAAQvN,GAAK,KAAK,IAAI,CAAC,GAC/D,CAAA,EACI,KAAK,OAAO,EAEfmgC,GAAgBF,GAAeR,GAAa,eAAe,EAC3DW,GAAkBH,GAAeR,GAAa,iBAAiB,EACrE,MAAM,KAAK,YAAY,QAClB,mBAAkB,EAClB,OAAM,EACN,KAAKA,GAAa,SAAS,EAC3B,MAAMU,EAAa,EACnB,QAAQC,EAAe,EACvB,QAAS,CACtB,CAKI,aAAa1jB,EAAW,CACpB,OAAOA,EACF,MAAM,GAAG,EACT,IAAKvjB,GAECA,IAAM,GACPA,EACA,KAAK,YAAY,WAAW,OAAO,OAAOA,CAAC,CACpD,EACI,KAAK,GAAG,CACrB,CACA,CClOO,MAAM,cAAe,CAIxB,YAAY0d,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,gBAAgB,EAIjD,KAAK,qBAAuB,CAAE,EAM9B,KAAK,gBAAkB,CAAE,EAIzB,KAAK,UAAY,UAIjB,KAAK,aAAe,GAIpB,KAAK,YAAc,GAInB,KAAK,wBAA0B,GAO/B,KAAK,WAAa,GAKlB,KAAK,yBAA2B,GAKhC,KAAK,kBAAoB,GAIzB,KAAK,uBAAyB,GAI9B,KAAK,wBAA0B,GAI/B,KAAK,WAAa,CAAE,EAIpB,KAAK,QAAU,CAAE,EAIjB,KAAK,gBAAkB,CAAE,EAIzB,KAAK,kBAAoB,CAAE,EAI3B,KAAK,kBAAoB,CAAE,EAK3B,KAAK,aAAe,CAAE,EAKtB,KAAK,eAAiB,CAAE,EAIxB,KAAK,iBAAmB,CAAE,EAI1B,KAAK,eAAiB,CAAE,EAIxB,KAAK,aAAe,CAAE,EAItB,KAAK,UAAY,CAAE,EAInB,KAAK,eAAiB,CAAE,EAIxB,KAAK,cAAgB,CAAE,EAIvB,KAAK,kBAAoB,CAAE,EAI3B,KAAK,uBAAyB,CAAE,EAIhC,KAAK,mBAAqB,CAAE,EAI5B,KAAK,mBAAqB,CAAE,EAI5B,KAAK,oBAAsB,CAAE,EAI7B,KAAK,yBAA2B,CAAE,EAIlC,KAAK,yBAA2B,CAAE,EAIlC,KAAK,YAAc,CAAE,EAIrB,KAAK,eAAiB,CAAE,EAIxB,KAAK,YAAc,CAAE,EAIrB,KAAK,UAAY,CAAE,EAInB,KAAK,aAAe,CAAE,EAItB,KAAK,WAAa,CAAE,EAIpB,KAAK,QAAU,CAAE,EAIjB,KAAK,QAAU,CAAE,EAIjB,KAAK,WAAa,CAAE,EAIpB,KAAK,OAAS,CAAE,EAIhB,KAAK,WAAa,CAAE,EAIpB,KAAK,aAAe,CAAE,EAItB,KAAK,UAAY,CAAE,EAInB,KAAK,mBAAqB,CAAE,EAI5B,KAAK,sBAAwB,CAAE,EAI/B,KAAK,qBAAuB,CAAE,EAI9B,KAAK,sBAAwB,CAAE,EAI/B,KAAK,qBAAuB,CAAE,EAI9B,KAAK,sBAAwB,CAAE,EAI/B,KAAK,0BAA4B,CAAE,EAInC,KAAK,uBAAyB,CAAE,EAIhC,KAAK,qBAAuB,CAAE,EAI9B,KAAK,yBAA2B,CAAE,EAIlC,KAAK,sBAAwB,CAAE,EAC/B,KAAK,WAAaA,EAAQ,WAC1B,KAAK,gBAAkBA,EAAQ,iBAAmB,CAAE,EACpD,KAAK,mBAAqBA,EAAQ,mBAClC,KAAK,SAAWA,EAAQ,UAAYA,EAAQ,UAAU,KAAO,OAC7D,KAAK,YAAcA,EAAQ,UACrBA,EAAQ,UAAU,QAClB,OACN,KAAK,4BAA8BA,EAAQ,4BAC3C,KAAK,kBAAoBA,EAAQ,KACjC,KAAK,OAAS,KAAK,kBAAkB,OACrC,KAAK,UAAY,KAAK,kBAAkB,KACxC,KAAK,WAAa,KAAK,kBAAkB,WACzC,KAAK,aAAe,KAAK,kBAAkB,aAC3C,KAAK,UAAY,KAAK,kBAAkB,SAChD,CAOI,OAAO8E,EAAa9E,EAAS,CACzB,MAAMwpB,GAAO,GAAAxpB,GAAWA,EAAQ,OAAS,IAEzC,IAAI3N,GACJ,OAAI,OAAO,KAAK,QAAW,YAAc,CAACm3B,GAClC,CAACxpB,GAAS,kBAAoB,KAAK,yBACnC3N,GAAM,IAAI,KAAK,OAGfA,GAAM,OAAO,OAAO,KAAK,OAAO,SAAS,EAK7CA,GAAM,CAAE,EAGR,KAAK,WAAW,QAAQ,WACxBA,GAAI,KAAK,WAAW,QAAQ,QAAQ,EAAI,KAAK,YAEjD,KAAK,cAAc,QAASuF,IAAa,KAAK,WAAW,eAAe,eAAeA,GAAUvF,GAAKyS,CAAW,CAAC,EAC3GzS,EACf,CAII,MAAM/I,EAAQ,CACV,OAAKA,EAEE,KAAK,eAAe,MAAOwe,GAAkB,CAChD,MAAMnpB,GAAQmpB,EAAc,eAAexe,CAAM,EACjD,OAAO3K,IAAU,MAA+BA,KAAU,EACtE,CAAS,EAJU,EAKnB,CAKI,kBAAkB2K,EAAQ,CACtB,OAAO,KAAK,eAAe,MAAOwe,GAAkB,CAChD,MAAMnpB,GAAQmpB,EAAc,eAAexe,CAAM,EACjD,OAAO3K,IAAU,IAC7B,CAAS,CACT,CAOI,kBAAkB6X,EAAI,CAClB,GAAI,YAAY,SAASA,CAAE,EACvB,OAAOA,EACX,GAAI,KAAK,uBACL,MAAM,IAAI,6BAA6B,KAAMA,CAAE,EACnD,OAAO,KAAK,eAAe,CAAC,EAAE,eAAeA,CAAE,CACvD,CAOI,eAAelN,EAAQ,CACnB,GAAKA,EAEL,OAAO,eAAe,YAAYA,EAAQ,KAAK,eAAgB,CAC3D,UAAW,EACvB,CAAS,CACT,CAOI,oBAAoBA,EAAQ,CACxB,GAAI,CAACA,EACD,OAAOA,EACX,MAAMsnB,EAAQ,KAAK,eAAetnB,CAAM,EACxC,OAAI,KAAK,uBACEsnB,EAEFA,GACE,KAAK,eAAe,CAAC,EAAE,eAAeA,CAAK,CAG9D,CAKI,gBAAgB6Y,EAAaC,EAAc,CACvC,MAAMC,GAAmB,KAAK,eAAeF,CAAW,EACxD,GAAI,CAACE,GACD,MAAO,GACX,MAAMC,GAAoB,KAAK,eAAeF,CAAY,EAC1D,OAAKE,GAEE,SAAS,WAAWD,GAAkBC,EAAiB,EADnD,EAEnB,CAII,2BAA2B9/B,EAAc,CACrC,OAAO,KAAK,QAAQ,KAAM4M,GAAWA,EAAO,eAAiB5M,CAAY,CACjF,CAII,2BAA2B+/B,EAAc,CACrC,OAAO,KAAK,QAAQ,KAAMnzB,GAAWA,EAAO,eAAiBmzB,CAAY,CACjF,CAII,0BAA0BxyB,EAAc,CAEpC,OADkB,KAAK,QAAQ,KAAMX,IAAWA,GAAO,eAAiBW,CAAY,GAChE,KAAK,4BAA4BA,CAAY,CACzE,CAII,2BAA2BA,EAAc,CACrC,MAAMX,EAAS,KAAK,QAAQ,KAAMA,IAAWA,GAAO,eAAiBW,CAAY,EACjF,GAAIX,EACA,OAAOA,EAGX,MAAMkB,GAAW,KAAK,UAAU,KAAMA,IAAaA,GAAS,eAAiBP,CAAY,EACzF,GAAIO,IAAYA,GAAS,YAAY,SAAW,EAC5C,OAAOA,GAAS,YAAY,CAAC,CAEzC,CAKI,iCAAiCP,EAAc,CAC3C,OAAO,KAAK,QAAQ,KAAMX,GAAWA,EAAO,eAAiBW,CAAY,CACjF,CAKI,4BAA4BA,EAAc,CACtC,MAAMX,EAAS,KAAK,QAAQ,KAAMA,IAAWA,GAAO,eAAiBW,CAAY,EACjF,GAAIX,EACA,MAAO,CAACA,CAAM,EAGlB,MAAMkB,GAAW,KAAK,6BAA6BP,CAAY,EAC/D,OAAIO,IAAYA,GAAS,YACdA,GAAS,YACb,CAAE,CACjB,CAII,4BAA4BP,EAAc,CACtC,OAAO,KAAK,UAAU,KAAMO,GAAaA,EAAS,eAAiBP,CAAY,CACvF,CAII,6BAA6BA,EAAc,CACvC,OAAO,KAAK,UAAU,KAAMO,GAAaA,EAAS,eAAiBP,CAAY,CACvF,CAII,4BAA4BA,EAAc,CACtC,OAAO,KAAK,aAAa,KAAMyyB,GAAaA,EAAS,eAAiBzyB,CAAY,CAC1F,CAII,6BAA6BA,EAAc,CACvC,OAAO,KAAK,aAAa,KAAMyyB,GAAaA,EAAS,eAAiBzyB,CAAY,CAC1F,CAII,0BAA0BqR,EAAe,CACrC,OAAOA,EAAc,IAAKrR,GAAiB,CACvC,MAAMX,GAAS,KAAK,2BAA2BW,CAAY,EAC3D,GAAIX,IAAU,KACV,MAAM,IAAI,4BAA4BW,EAAc,IAAI,EAE5D,OAAOX,EACnB,CAAS,CACT,CAKI,gCAAgCpN,EAAQsvB,EAAW,CAC/C,MAAMmR,GAAqB,CAAE,EAC7B,OAAAnR,EAAU,QAAShhB,IAAa,CAC5B,MAAMjZ,GAAQiZ,GAAS,eAAetO,CAAM,EACxC,MAAM,QAAQ3K,EAAK,EACnBA,GAAM,QAASqrC,IAAaD,GAAmB,KAAK,CAChDnyB,GACAoyB,GACA,eAAe,yBAAyBA,GAAUpyB,EAAQ,CAC9E,CAAiB,CAAC,EAEGjZ,IACLorC,GAAmB,KAAK,CACpBnyB,GACAjZ,GACA,eAAe,yBAAyBA,GAAOiZ,EAAQ,CAC3E,CAAiB,CAEjB,CAAS,EACMmyB,EACf,CASI,wBAAwBprC,EAAO,CAI3B,GAAI,KAAK,qBAAuB,OAC5B,KAAK,qBAAqB,OAAS,EAAG,CAEtC,IAAIsrC,EACJ,OAAI,KAAK,sBACLA,EACItrC,EAAM,KAAK,oBAAoB,YAAY,GAE3C,KAAK,qBAAqB,KAAMurC,IAASD,IAC7CC,GAAK,oBACLvrC,EAAM,cAAgBurC,GAAK,MAAM,GAAK,IACtD,CACQ,OAAO,IACf,CAII,OAAO,yBAAyBvrC,EAAOiZ,EAAU,CAC7C,OAAOA,EAAS,sBAAsB,wBAAwBjZ,CAAK,CAC3E,CASI,OAAO,mBAAmBqC,EAAUsI,EAAQwM,GAAS,GAAI,CACrD,MAAMwS,GAAQ,CAAE,EAChB,cAAO,KAAKhf,CAAM,EAAE,QAAS5K,IAAQ,CAGjC,MAAMyrC,GAAar0B,GAASA,GAAS,IAAMpX,GAAMA,GACjD,GAAIsC,EAAS,4BAA4BmpC,EAAU,EAAG,CAClD,MAAM5hB,GAAW,KAAK,mBAAmBvnB,EAAUsI,EAAO5K,EAAG,EAAGyrC,EAAU,EAC1E7hB,GAAM,KAAK,GAAGC,EAAQ,CACtC,KACiB,CACD,MAAM5S,GAAOG,GAASA,GAAS,IAAMpX,GAAMA,GAC3C4pB,GAAM,KAAK3S,EAAI,CAC/B,CACA,CAAS,EACM2S,EACf,CAKI,OAAO,WAAW8hB,EAAaC,EAAc,CACzC,OAAOD,EAAY,OAAQE,IAChB,CAACD,EAAa,KAAME,IAAgB,SAAS,WAAWD,GAAYC,EAAW,CAAC,CAC1F,CACT,CAKI,OAAO,YAAYjhC,EAAQwd,EAAS9G,GAAS,CACzC,OAAO8G,EAAQ,OAAO,CAACvnB,GAAKmX,KAAW,CACnC,MAAM/X,GAAQ+X,GAAO,kBAAkBpN,EAAQ0W,EAAO,EAEtD,GAAI,EAAAzgB,KAAQ,QAAaZ,KAAU,MAAQA,KAAU,QAErD,OAAO,SAAS,UAAUY,GAAKZ,EAAK,CACvC,EAAE,EAAE,CACb,CAII,OAAQ,CACJ,MAAM6rC,EAAiB,KAAK,WAAW,eACjCC,EAAe,KAAK,WAAW,QAAQ,aACvCC,GAAwB,KAAK,WAAW,QAAQ,sBACtD,KAAK,OAAS,KAAK,kBAAkB,OACrC,KAAK,SACD,KAAK,kBAAkB,OAAS,gBAC5B,KAAK,qBACH,KAAK,qBAAqB,SAC1B,KAAK,kBAAkB,SAC7B,KAAK,kBAAkB,OACvB,KAAK,OAAS,KAAK,kBAAkB,OAEhC,KAAK,kBAAkB,OAAS,gBACrC,KAAK,qBACL,KAAK,OAAS,KAAK,qBAAqB,OAEnC,KAAK,WAAW,SAAS,eAAe,QAAQ,IACrD,KAAK,OAAS,KAAK,WAAW,QAAQ,QAE1C,KAAK,eACD,KAAK,kBAAkB,OAAS,gBAC5B,KAAK,qBACH,KAAK,qBAAqB,eAC1B,KAAK,kBAAkB,KACjC,KAAK,YACD,KAAK,kBAAkB,cAAgB,GAC3C,KAAK,WACD,OAAO,KAAK,kBAAkB,QAAW,WACnC,KAAK,kBAAkB,OAAO,KAC9B,KAAK,kBAAkB,OAC7B,KAAK,kBAAkB,OAAS,mBAChC,KAAK,uBACDF,EAAe,yBAAyB,KAAK,cAAc,EAE1D,KAAK,kBAAkB,OAAS,gBACrC,KAAK,qBACL,KAAK,uBAAyBA,EAAe,UAAU,KAAK,qBAAqB,WAAY,KAAK,qBAAqB,cAAc,GAGrI,KAAK,uBAAyBA,EAAe,UAAU,KAAK,WAAY,KAAK,cAAc,EACvF,KAAK,kBAAkB,OAAS,YAChC,KAAK,WAAW,OAAO,gBACvB,KAAK,WAAW,OAAO,eAAiB,GACxC,KAAK,uBAAuB,OACxB,KAAK,WAAW,OAAO,iBAI3B,KAAK,uBAAyB,QAAQ,KAAK,uBAAwB,CAAE,UAAW,IAAK,cAAe,EAAG,IAG/G,KAAK,UAAYC,EACXD,EAAe,gBAAgBC,EAAc,KAAK,sBAAsB,EACxE,KAAK,uBACX,KAAK,OAAS,KAAK,OAAS,KAAK,OAAS,KAAK,UAC/C,KAAK,KAAO,KAAK,WAAa,KAAK,WAAa,KAAK,UACrD,KAAK,WAAa,KAAK,kBAAkB,WACzC,KAAK,aACD,KAAK,kBAAkB,eAAiB,GAC5C,KAAK,UAAY,KAAK,WAAW,OAAO,eAAe,KAAK,UAAW,KAAK,OAAQ,KAAK,QAAQ,EACjG,KAAK,QACD,OAAO,KAAK,kBAAkB,SAAY,WACpC,KAAK,kBAAkB,QAAQ,KAAK,aAAa,EACjD,KAAK,kBAAkB,QAC7BC,KAA0B,SAC1B,KAAK,yBAA2B,CAACA,IAErC,KAAK,WACD,KAAK,kBAAkB,OAAS,oBAC5B,KAAK,kBAAkB,OAAS,WACxC,KAAK,kBACD,KAAK,kBAAkB,OAAS,mBACpC,KAAK,QAAU,KAAK,kBAAkB,OAC9C,CAII,eAAeh0B,EAAQ,CACf,KAAK,WAAW,QAAQA,CAAM,IAAM,KAExC,KAAK,WAAW,KAAKA,CAAM,EAC3B,KAAK,QAAU,KAAK,UAAU,OAAO,CAACoQ,EAASgjB,KAAahjB,EAAQ,OAAOgjB,GAAS,eAAe,EAAG,KAAK,UAAU,EACrH,KAAK,eAAiB,KAAK,QAAQ,OAAQpzB,GAAWA,EAAO,SAAS,EACtE,KAAK,uBAAyB,KAAK,eAAe,OAAS,EAC3D,KAAK,wBACD,KAAK,QAAQ,OAAQA,GAAWA,EAAO,aAAeA,EAAO,qBAAuB,MAAM,EAAE,OAAS,EACzG,KAAK,cAAgB,KAAK,oBAAqB,EAC3C,KAAK,sBACL,KAAK,qBAAqB,QAASU,GAAmBA,EAAe,eAAeV,CAAM,CAAC,EACvG,CASI,qBAAsB,CAClB,MAAMnX,EAAM,CAAE,EACd,YAAK,QAAQ,QAASmX,GAAW,SAAS,UAAUnX,EAAKmX,EAAO,eAAeA,EAAO,YAAY,CAAC,CAAC,EACpG,KAAK,UAAU,QAASkB,GAAa,SAAS,UAAUrY,EAAKqY,EAAS,eAAeA,EAAS,YAAY,CAAC,CAAC,EACrGrY,CACf,CAOI,8BAA+B,CAC3B,OAAO,KAAK,QAAQ,OAAQmX,GAChBA,EAAO,UAAY,QACvBA,EAAO,eAAiB,QACxBA,EAAO,aACPA,EAAO,cACPA,EAAO,cACPA,EAAO,cACPA,EAAO,SACd,CACT,CACA,CCvqBO,MAAM,+BAAgC,CAIzC,YAAYoO,EAAa,CACrB,KAAK,YAAcA,CAC3B,CAOI,MAAM,OAAOzO,EAAS,CAClB,IAAIzT,EAASyT,EAAQ,SAAS,mBAAmB,eAAeA,EAAQ,MAAM,EAC1E,CAACzT,GAAUyT,EAAQ,eAAiBA,EAAQ,cAAc,SAE1DzT,EAASyT,EAAQ,cAAc,iBACzBA,EAAQ,cAAc,iBACtBA,EAAQ,cAAc,QAChC,MAAMmrB,GAAWnrB,EAAQ,SAAS,eAAezT,CAAM,EACvD,IAAIunC,GAAa,GACb3I,KACA2I,GAAa,MAAM,KAAK,cAAc9zB,EAASmrB,EAAQ,GAE3D,MAAMmJ,GAAmBt0B,EAAQ,SAC5B,mBAAmB,YAAY,IAAKjM,IAC9BA,GAAW,iBAAiB,eAAeiM,EAAQ,gBAAgB,CAC7E,EACI,KAAK,GAAG,EACb,MAAM,KAAK,YAAY,QAClB,mBAAkB,EAClB,OAAOA,EAAQ,SAAS,MAAM,EAC9B,IAAI,CACL,CAACA,EAAQ,SAAS,uBAAuB,YAAY,EAAG8zB,GAAaQ,GAAmB,GAC3F,CAAA,EACI,MAAMt0B,EAAQ,UAAU,EACxB,QAAS,CACtB,CAII,MAAM,OAAOA,EAAS,CAClB,IAAIu0B,EAAYv0B,EAAQ,SAAS,mBAAmB,eAAeA,EAAQ,MAAM,EAC7E,CAACu0B,GAAav0B,EAAQ,eAAiBA,EAAQ,cAAc,SAE7Du0B,EAAYv0B,EAAQ,cAAc,QACtC,IAAI/M,GAAS+M,EAAQ,eACjB,CAAC/M,IAAUshC,IAEXthC,GAAS+M,EAAQ,SACZ,qBAAqB,eAAeu0B,CAAS,EAC7C,KAAM/E,IACA,OAAO,QAAQxvB,EAAQ,UAAU,EAAE,MAAM,CAAC,CAAC3X,GAAKC,EAAK,IAAMknC,GAAMnnC,EAAG,IAAMC,EAAK,CACzF,GACL,MAAM8oC,GAAYpxB,EAAQ,SAAS,mBAAmB,eAAe/M,EAAM,EACrEo+B,GAAc,KAAK,mCAAmCrxB,EAASoxB,EAAS,EACxEoD,GAAc,KAAK,mCAAmCx0B,EAASu0B,CAAS,EAE9E,GAAI,SAAS,WAAWlD,GAAamD,EAAW,EAC5C,OAEJ,IAAIC,GAAgB,GAChBD,KACAC,GAAgB,MAAM,KAAK,cAAcz0B,EAASw0B,EAAW,GAEjE,IAAIE,GAAgB,GAChBrD,KACAqD,GACK,MAAM,KAAK,cAAc10B,EAASqxB,EAAW,GAAM,IAE5D,MAAMsD,GAAa30B,EAAQ,SACtB,mBAAmB,YAAY,IAAKjM,IAC9BA,GAAW,iBAAiB,eAAed,EAAM,CAC3D,EACI,KAAK,GAAG,EACP+N,GAAehB,EAAQ,SAAS,uBAAuB,aAC7D,MAAM,KAAK,YAAY,QAClB,mBAAkB,EAClB,OAAOA,EAAQ,SAAS,MAAM,EAC9B,IAAI,CACL,CAACgB,EAAY,EAAG,IAAM,WAAW,KAAK,YAAY,WAAW,OAAO,OAAOA,EAAY,CAAC,MAAM0zB,EAAa,GAAGC,EAAU,QAAQF,EAAa,GAAGE,EAAU,KAC7J,CAAA,EACI,MAAM,GAAG3zB,EAAY,cAAe,CACrC,KAAM,GAAG0zB,EAAa,GAAGC,EAAU,IACtC,CAAA,EACI,QAAS,CACtB,CACI,mCAAmC30B,EAAS/M,EAAQ,CAChD,GAAKA,EAEL,OAAO,eAAe,YAAYA,EAAQ+M,EAAQ,SAC7C,mBAAmB,YAAY,IAAKK,IAAWA,GAAO,gBAAgB,EACtE,OAAQoK,IAAMA,IAAK,IAAI,EAAG,CAAE,UAAW,GAAM,CAC1D,CACI,cAAczK,EAASG,EAAI,CACvB,MAAMxV,GAAWqV,EAAQ,SACnBwR,IAAc,MAAM,QAAQrR,CAAE,EAAIA,EAAK,CAACA,CAAE,GAAG,IAAKA,IAAOxV,GAAS,kBAAkBwV,EAAE,CAAC,EAC7F,OAAO,KAAK,YAAY,QACnB,mBAAkB,EAClB,OAAOH,EAAQ,SAAS,WACzB,IACAA,EAAQ,SAAS,uBAAuB,aAAc,MAAM,EAC3D,KAAKA,EAAQ,SAAS,OAAQA,EAAQ,SAAS,UAAU,EACzD,MAAM,IAAI,SAAU0R,IAAO,CAC5B,UAAW5e,MAAQ0e,GACfE,GAAG,QAAQ,IAAI,SAAUA,IAAOA,GAAG,MAAM5e,EAAI,CAAC,CAAC,CAE/D,CAAS,CAAC,EACG,UAAS,EACT,KAAMjF,IAAYA,GAASA,GAAO,KAAU,EAAG,CAC5D,CACA,CCvGO,MAAM,eAAgB,CAIzB,YAAY4gB,EAAa2f,EAAUzkB,GAAS,CAOxC,KAAK,wBAA0B,GAI/B,KAAK,eAAiB,CAAE,EAIxB,KAAK,eAAiB,CAAE,EAIxB,KAAK,eAAiB,CAAE,EAIxB,KAAK,mBAAqB,CAAE,EAI5B,KAAK,gBAAkB,CAAE,EACzB,KAAK,YAAc8E,EACnB,KAAK,YAAc2f,EACnB,KAAK,QAAUzkB,GACf,KAAK,SAAU,EACf,KAAK,UAAW,CACxB,CAQI,MAAM,SAAU,CAGZ,IAAIirB,GACA,CAAC,KAAK,SAAW,KAAK,QAAQ,YAAc,MAE5CA,EAAoB,KAAK,4BAA6B,EAClDA,EAAkB,SAAS,OAAS,GACpC,MAAM,QAAQ,IAAIA,EAAkB,QAAQ,GAKhDA,GAAqBA,EAAkB,MAAQ,IAE/C,KAAK,eAAe,QAAS50B,GAAYA,EAAQ,WAAW,EAC5D,KAAK,eAAe,QAASA,GAAYA,EAAQ,WAAW,EAC5D,KAAK,eAAe,QAASA,GAAYA,EAAQ,WAAW,EAC5D,KAAK,mBAAmB,QAASA,GAAYA,EAAQ,WAAW,EAChE,KAAK,gBAAgB,QAASA,GAAYA,EAAQ,WAAW,EAC7D,KAAK,UAAW,GAOpB,KAAK,eAAiB,IAAI,yBAAyB,KAAK,cAAc,EAAE,KAAK,QAAQ,EACrF,MAAM,KAAK,wBAAyB,EAIpC,KAAK,eAAiB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,aAAa,EAGhF,MAAM,KAAK,wBAAyB,EAIpC,KAAK,eAAiB,IAAI,yBAAyB,KAAK,cAAc,EAAE,KAAK,QAAQ,EACrF,MAAM,KAAK,wBAAyB,EAGpC,KAAK,mBAAqB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,iBAAiB,EAExF,MAAM,KAAK,4BAA6B,EAExC,KAAK,gBAAkB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,eAAe,EAEnF,MAAM,KAAK,yBAA0B,EAGrC,KAAK,wCAAyC,GAG1C,CAAC,KAAK,SAAW,KAAK,QAAQ,YAAc,MAE5C40B,EAAoB,KAAK,2BAA4B,EACjDA,EAAkB,SAAS,OAAS,GACpC,MAAM,QAAQ,IAAIA,EAAkB,QAAQ,EAI5D,CAOI,UAAW,CACP,KAAK,YAAY,QAAS50B,GAAY,CAClC,GAAIA,EAAQ,eAAiBA,EAAQ,cACjC,MAAM,IAAI,8BAA8BA,CAAO,CAC/D,CAAS,CACT,CAII,WAAY,CACR,IAAI,8BAA+B,EAAC,QAAQ,KAAK,WAAW,EAC5D,KAAK,eAAiB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,cAAc,EACjF,KAAK,eAAiB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,aAAa,EAChF,KAAK,eAAiB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,aAAa,EAChF,KAAK,mBAAqB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,iBAAiB,EACxF,KAAK,gBAAkB,KAAK,YAAY,OAAQA,GAAYA,EAAQ,eAAe,EACnF,KAAK,wBACD,KAAK,eAAe,OAAS,GACzB,KAAK,eAAe,OAAS,GAC7B,KAAK,eAAe,OAAS,GAC7B,KAAK,mBAAmB,OAAS,GACjC,KAAK,gBAAgB,OAAS,CAC9C,CAII,6BAA8B,CAC1B,MAAMnS,EAAS,IAAI,kBACnB,OAAI,KAAK,eAAe,QACpB,KAAK,eAAe,QAASmS,GAAY,KAAK,YAAY,YAAY,2BAA2BnS,EAAQmS,EAAQ,SAAUA,EAAQ,MAAM,CAAC,EAC1I,KAAK,eAAe,QACpB,KAAK,eAAe,QAASA,GAAY,KAAK,YAAY,YAAY,2BAA2BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,YAAaA,EAAQ,aAAa,CAAC,EAC9M,KAAK,eAAe,QACpB,KAAK,eAAe,QAASA,GAAY,KAAK,YAAY,YAAY,2BAA2BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,UAAU,CAAC,EACtL,KAAK,mBAAmB,QACxB,KAAK,mBAAmB,QAASA,GAAY,KAAK,YAAY,YAAY,+BAA+BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,UAAU,CAAC,EAC9L,KAAK,gBAAgB,QACrB,KAAK,gBAAgB,QAASA,GAAY,KAAK,YAAY,YAAY,4BAA4BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,UAAU,CAAC,EACrLnS,CACf,CAMI,4BAA6B,CACzB,MAAMA,EAAS,IAAI,kBACnB,OAAI,KAAK,eAAe,QACpB,KAAK,eAAe,QAASmS,GAAY,KAAK,YAAY,YAAY,0BAA0BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,UAAU,CAAC,EAC7J,KAAK,eAAe,QACpB,KAAK,eAAe,QAASA,GAAY,KAAK,YAAY,YAAY,0BAA0BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,YAAaA,EAAQ,aAAa,CAAC,EAC7M,KAAK,eAAe,QACpB,KAAK,eAAe,QAASA,GAAY,KAAK,YAAY,YAAY,0BAA0BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,UAAU,CAAC,EACrL,KAAK,mBAAmB,QACxB,KAAK,mBAAmB,QAASA,GAAY,KAAK,YAAY,YAAY,8BAA8BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,UAAU,CAAC,EAC7L,KAAK,gBAAgB,QACrB,KAAK,gBAAgB,QAASA,GAAY,KAAK,YAAY,YAAY,2BAA2BnS,EAAQmS,EAAQ,SAAUA,EAAQ,OAAQA,EAAQ,eAAgBA,EAAQ,UAAU,CAAC,EACpLnS,CACf,CAII,MAAM,yBAA0B,CAE5B,KAAM,CAACgnC,EAAuBC,CAAwB,EAAI,KAAK,kBAAkB,KAAK,eAAgB,QAAQ,EAE9G,UAAWC,MAAaD,EAA0B,CAC9C,MAAM1G,GAAWyG,EAAsBE,EAAS,EAG1CC,GAAiB,CAAE,EACnBC,GAAqB,CAAE,EACvBC,GAAuB,CAAE,EAwC/B,GAvCI,KAAK,YAAY,WAAW,OAAO,QAAQ,OAAS,UACpD9G,GAAS,QAASpuB,IAAY,CACtBA,GAAQ,SAAS,kBAAoBA,GAAQ,SAC7CA,GAAQ,OAAOA,GAAQ,SAAS,iBAAiB,YAAY,EAAI,IAAI,MAErEA,GAAQ,SAAS,kBAAoBA,GAAQ,SAC7CA,GAAQ,OAAOA,GAAQ,SAAS,iBAAiB,YAAY,EAAI,IAAI,MAEzEA,GAAQ,8BAA+B,EACvCi1B,GAAmB,KAAKj1B,EAAO,EAC/Bg1B,GAAe,KAAKh1B,GAAQ,MAAM,CACtD,CAAiB,EAEI,KAAK,YAAY,WAAW,OAAO,QAAQ,OAAS,SACzDouB,GAAS,QAASpuB,IAAY,CAC1Bk1B,GAAqB,KAAKl1B,EAAO,CACrD,CAAiB,EAGDouB,GAAS,QAASpuB,IAAY,CAKtBA,GAAQ,WAAW,SAAW,GAC9BA,GAAQ,SAAS,UACjB,KAAK,YAAY,WAAW,OAAO,QAAQ,OACvC,UACJ,KAAK,YAAY,WAAW,OAAO,QAAQ,OACvC,MACJk1B,GAAqB,KAAKl1B,EAAO,GAGjCi1B,GAAmB,KAAKj1B,EAAO,EAC/Bg1B,GAAe,KAAKh1B,GAAQ,+BAA+B,EAEnF,CAAiB,EAGD,gBAAgB,qBAAqB,KAAK,YAAY,OAAO,EAAG,CAChE,MAAM8T,GAAe,MAAM,KAAK,YAAY,QAAQ,OAAOsa,GAAS,CAAC,EAAE,SAAS,OAAQ4G,EAAc,EACtG5G,GAAS,QAAQ,CAACpuB,GAASxO,KAAU,CACjCwO,GAAQ,WAAa8T,GAAa,YAAYtiB,EAAK,EACnDwO,GAAQ,aAAe8T,GAAa,cAActiB,EAAK,EACvDwO,GAAQ,iBAAmBg1B,GAAexjC,EAAK,CACnE,CAAiB,CACjB,KACiB,CAKD,GAAIwjC,GAAe,OAAS,EAAG,CAC3B,MAAMlhB,GAAe,MAAM,KAAK,YAAY,QACvC,mBAAkB,EAClB,OAAM,EACN,KAAKsa,GAAS,CAAC,EAAE,SAAS,MAAM,EAChC,OAAO4G,EAAc,EACrB,aAAa,OAAK,SAAW,KAAK,QAAQ,SAAW,GAEhD,EACL,cAAc,EAAK,EACnB,QAAS,EACdC,GAAmB,QAAQ,CAACj1B,GAASxO,KAAU,CAC3CwO,GAAQ,WAAa8T,GAAa,YAAYtiB,EAAK,EACnDwO,GAAQ,aAAe8T,GAAa,cAActiB,EAAK,EACvDwO,GAAQ,iBAAmBg1B,GAAexjC,EAAK,CACvE,CAAqB,CACrB,CAEgB,GAAI0jC,GAAqB,OAAS,EAC9B,UAAWl1B,MAAWk1B,GAClBl1B,GAAQ,iBACJA,GAAQ,8BAA6B,EAErCA,GAAQ,SAAS,WAAa,cAC9B,MAAM,IAAI,yBAAyB,KAAK,WAAW,EAAE,OAAOA,EAAO,EACvE,MAAM,KAAK,YAAY,QAClB,mBAAkB,EAClB,OAAM,EACN,KAAKA,GAAQ,SAAS,MAAM,EAC5B,OAAOA,GAAQ,gBAAgB,EAC/B,aAAa,OAAK,SAAW,KAAK,QAAQ,SAAW,GAEhD,EACL,cAAc,EAAK,EACnB,QAAO,EACP,KAAM8T,IAAiB,CACxB9T,GAAQ,WAAa8T,GAAa,YAAY,CAAC,EAC/C9T,GAAQ,aACJ8T,GAAa,cAAc,CAAC,CAC5D,CAAyB,EAEG9T,GAAQ,SAAS,WAAa,gBAC9B,MAAM,IAAI,uBAAuB,KAAK,WAAW,EAAE,OAAOA,EAAO,EAE5DA,GAAQ,SAAS,WAAa,qBACnC,MAAM,IAAI,gCAAgC,KAAK,WAAW,EAAE,OAAOA,EAAO,CAItG,CACYouB,GAAS,QAASpuB,IAAY,CACtBA,GAAQ,cACRA,GAAQ,SAAS,QAAQ,QAASK,IAAW,CACzC,MAAM/X,GAAQ+X,GAAO,eAAeL,GAAQ,YAAY,EACxD,GAA2B1X,IAAU,KAAM,CACvC,MAAM6sC,GAAgB,KAAK,YAAY,WAAW,OAAO,qBAAqB7sC,GAAO+X,EAAM,EAC3FA,GAAO,eAAeL,GAAQ,aAAcm1B,EAAa,CACrF,CACA,CAAqB,CAErB,CAAa,CACb,CACA,CAII,MAAM,yBAA0B,CAC5B,MAAMC,EAAgB,MAAOp1B,IAAY,CACrC,GAAI,CAACA,GAAQ,WACT,MAAM,IAAI,8BAA8BA,EAAO,EAEnD,GAAI,gBAAgB,qBAAqB,KAAK,YAAY,OAAO,EAAG,CAChE,MAAMksB,GAAgB,KAAK,wBAAwBlsB,EAAO,EACtDA,GAAQ,SAAS,gBACjBA,GAAQ,SAAS,eAAe,cAChC,OAAOksB,GAAclsB,GAAQ,SAAS,eAAe,YAAY,EAEjEA,GAAQ,SAAS,kBACjBA,GAAQ,SAAS,iBAAiB,cAClC,OAAOksB,GAAclsB,GAAQ,SAAS,iBAAiB,YAAY,EAEnEA,GAAQ,SAAS,kBACjBA,GAAQ,SAAS,iBAAiB,eAClCksB,GAAclsB,GAAQ,SAAS,iBAAiB,YAAY,EAAI,IAAI,MAGxE,MADgB,KAAK,YAAY,QACnB,OAAOA,GAAQ,SAAS,OAAQA,GAAQ,WAAYksB,EAAa,CAC/F,KACiB,CACD,MAAMmJ,GAAYr1B,GAAQ,8BAA+B,EAEzD,OAAQA,GAAQ,SAAS,SAAQ,CAC7B,IAAK,aACD,MAAM,IAAI,yBAAyB,KAAK,WAAW,EAAE,OAAOA,EAAO,EACnE,MACJ,IAAK,gBACD,MAAM,IAAI,uBAAuB,KAAK,WAAW,EAAE,OAAOA,EAAO,EACjE,MACJ,IAAK,oBACD,MAAM,IAAI,gCAAgC,KAAK,WAAW,EAAE,OAAOA,EAAO,EAC1E,KACxB,CAKgB,MAAMs1B,GAAqB,KAAK,YAAY,QACvC,mBAAkB,EAClB,OAAOt1B,GAAQ,SAAS,MAAM,EAC9B,IAAIq1B,EAAS,EACb,aAAa,OAAK,SAAW,KAAK,QAAQ,SAAW,GAEhD,EACL,cAAc,EAAK,EACpBr1B,GAAQ,OACRs1B,GAAmB,YAAYt1B,GAAQ,UAAU,EAIjDs1B,GAAmB,MAAMt1B,GAAQ,UAAU,EAG/C,IAAIu1B,IADiB,MAAMD,GAAmB,QAAS,GACjB,cAAc,CAAC,EACjDC,KACAv1B,GAAQ,SAAS,QAAQ,QAASK,IAAW,CACzC,MAAM/X,GAAQ+X,GAAO,eAAek1B,EAAkB,EACtD,GAA2BjtC,IAAU,KAAM,CACvC,MAAM6sC,GAAgB,KAAK,YAAY,WAAW,OAAO,qBAAqB7sC,GAAO+X,EAAM,EAC3FA,GAAO,eAAek1B,GAAoBJ,EAAa,CACnF,CACA,CAAqB,EACIn1B,GAAQ,eACTA,GAAQ,aAAe,CAAE,GAE7B,OAAO,OAAOA,GAAQ,aAAcu1B,EAAkB,EAE1E,CACS,EAGKC,EAAoB,CAAE,EACtBC,GAAoB,CAAE,EAC5B,UAAWz1B,MAAW,KAAK,eACnBA,GAAQ,SAAS,WAAa,aAC9Bw1B,EAAkB,KAAKx1B,EAAO,EAG9By1B,GAAkB,KAAKz1B,EAAO,EAItC,MAAM01B,GAAmB,IAAI,QAAQ,MAAOC,GAAIC,KAAS,CACrD,UAAW51B,MAAWw1B,EAClB,GAAI,CACA,MAAMJ,EAAcp1B,EAAO,CAC/C,OACuBvO,GAAO,CACVmkC,GAAKnkC,EAAK,CAC9B,CAEYkkC,GAAI,CAChB,CAAS,EAED,MAAM,QAAQ,IAAI,CACd,GAAGF,GAAkB,IAAIL,CAAa,EACtCM,EACZ,CAAS,CACT,CAMI,MAAM,yBAA0B,CAE5B,KAAM,CAACG,EAAuBC,CAAwB,EAAI,KAAK,kBAAkB,KAAK,eAAgB,QAAQ,EAC9G,UAAWf,MAAae,EAA0B,CAC9C,MAAM1H,GAAWyH,EAAsBd,EAAS,EAC1CgB,GAAa3H,GAAS,IAAKpuB,IAAY,CACzC,GAAI,CAACA,GAAQ,WACT,MAAM,IAAI,8BAA8BA,EAAO,EACnD,OAAOA,GAAQ,UAC/B,CAAa,EAED,GAAI,gBAAgB,qBAAqB,KAAK,YAAY,OAAO,EAE7D,MADgB,KAAK,YAAY,QACnB,OAAOouB,GAAS,CAAC,EAAE,SAAS,OAAQ2H,EAAU,MAE3D,CAED,OAAQ3H,GAAS,CAAC,EAAE,SAAS,SAAQ,CACjC,IAAK,aACD,MAAM,IAAI,yBAAyB,KAAK,WAAW,EAAE,OAAOA,EAAQ,EACpE,MACJ,IAAK,gBACD,MAAM,IAAI,uBAAuB,KAAK,WAAW,EAAE,OAAOA,EAAQ,EAClE,KACxB,CAKgB,MAAM,KAAK,YAAY,QAClB,mBAAkB,EAClB,OAAM,EACN,KAAKA,GAAS,CAAC,EAAE,SAAS,MAAM,EAChC,MAAM2H,EAAU,EAChB,cAAc,EAAK,EACnB,QAAS,CAC9B,CACA,CACA,CACI,wBAAwB/1B,EAAS,CAC7B,MAAM7X,EAAS,CAAE,EACjB,GAAI6X,EAAQ,OACR,UAAWK,MAAUL,EAAQ,SAAS,QAClC,SAAS,UAAU7X,EAAQkY,GAAO,kBAAkBL,EAAQ,MAAM,CAAC,EAG3E,OAAO7X,CACf,CAII,MAAM,6BAA8B,CAChC,MAAM,QAAQ,IAAI,KAAK,mBAAmB,IAAI,MAAO6X,GAAY,CAC7D,GAAI,CAACA,EAAQ,WACT,MAAM,IAAI,8BAA8BA,CAAO,EACnD,IAAIoT,EAEJ,GAAI,gBAAgB,qBAAqB,KAAK,YAAY,OAAO,EAAG,CAChE,MAAM8Y,GAAgB,KAAK,wBAAwBlsB,CAAO,EACtDA,EAAQ,SAAS,gBACjBA,EAAQ,SAAS,eAAe,cAChC,OAAOksB,GAAclsB,EAAQ,SAAS,eAAe,YAAY,EAEjEA,EAAQ,SAAS,kBACjBA,EAAQ,SAAS,iBAAiB,cAClC,OAAOksB,GAAclsB,EAAQ,SAAS,iBAAiB,YAAY,EAEnEA,EAAQ,SAAS,kBACjBA,EAAQ,SAAS,iBAAiB,eAClCksB,GAAclsB,EAAQ,SAAS,iBAAiB,YAAY,EAAI,IAAI,MAEpEA,EAAQ,SAAS,kBACjBA,EAAQ,SAAS,iBAAiB,eAClCksB,GAAclsB,EAAQ,SAAS,iBAAiB,YAAY,EAAI,IAAI,MAIxEoT,EAAe,MAFC,KAAK,YAChB,QACwB,OAAOpT,EAAQ,SAAS,OAAQA,EAAQ,WAAYksB,EAAa,CAC9G,KACiB,CAKD,MAAM8J,GAAyB,KAAK,YAAY,QAC3C,mBAAkB,EAClB,WAAU,EACV,KAAKh2B,EAAQ,SAAS,MAAM,EAC5B,aAAa,OAAK,SAAW,KAAK,QAAQ,SAAW,GAEhD,EACL,cAAc,EAAK,EACpBA,EAAQ,OACRg2B,GAAuB,YAAYh2B,EAAQ,UAAU,EAIrDg2B,GAAuB,MAAMh2B,EAAQ,UAAU,EAEnDoT,EAAe,MAAM4iB,GAAuB,QAAS,CACrE,CACYh2B,EAAQ,aAAeoT,EAAa,cAAc,CAAC,EAC/CpT,EAAQ,cACRA,EAAQ,SAAS,QAAQ,QAASK,IAAW,CACzC,MAAM/X,GAAQ+X,GAAO,eAAeL,EAAQ,YAAY,EACxD,GAA2B1X,IAAU,KAAM,CACvC,MAAM6sC,GAAgB,KAAK,YAAY,WAAW,OAAO,qBAAqB7sC,GAAO+X,EAAM,EAC3FA,GAAO,eAAeL,EAAQ,aAAcm1B,EAAa,CACjF,CACA,CAAiB,CAajB,CAAS,CAAC,CACV,CAII,MAAM,0BAA2B,CAC7B,MAAM,QAAQ,IAAI,KAAK,gBAAgB,IAAI,MAAOn1B,GAAY,CAC1D,GAAI,CAACA,EAAQ,WACT,MAAM,IAAI,8BAA8BA,CAAO,EACnD,IAAIoT,EAEJ,GAAI,gBAAgB,qBAAqB,KAAK,YAAY,OAAO,EAAG,CAChE,MAAM8Y,GAAgB,KAAK,wBAAwBlsB,CAAO,EACtDA,EAAQ,SAAS,gBACjBA,EAAQ,SAAS,eAAe,cAChC,OAAOksB,GAAclsB,EAAQ,SAAS,eAAe,YAAY,EAEjEA,EAAQ,SAAS,kBACjBA,EAAQ,SAAS,iBAAiB,cAClC,OAAOksB,GAAclsB,EAAQ,SAAS,iBAAiB,YAAY,EAEnEA,EAAQ,SAAS,kBACjBA,EAAQ,SAAS,iBAAiB,eAClCksB,GAAclsB,EAAQ,SAAS,iBAAiB,YAAY,EAAI,IAAI,MAEpEA,EAAQ,SAAS,kBACjBA,EAAQ,SAAS,iBAAiB,eAClCksB,GAAclsB,EAAQ,SAAS,iBAAiB,YAAY,EAAI,MAIpEoT,EAAe,MAFC,KAAK,YAChB,QACwB,OAAOpT,EAAQ,SAAS,OAAQA,EAAQ,WAAYksB,EAAa,CAC9G,KACiB,CAKD,MAAM8J,GAAyB,KAAK,YAAY,QAC3C,mBAAkB,EAClB,QAAO,EACP,KAAKh2B,EAAQ,SAAS,MAAM,EAC5B,aAAa,OAAK,SAAW,KAAK,QAAQ,SAAW,GAEhD,EACL,cAAc,EAAK,EACpBA,EAAQ,OACRg2B,GAAuB,YAAYh2B,EAAQ,UAAU,EAIrDg2B,GAAuB,MAAMh2B,EAAQ,UAAU,EAEnDoT,EAAe,MAAM4iB,GAAuB,QAAS,CACrE,CACYh2B,EAAQ,aAAeoT,EAAa,cAAc,CAAC,EAC/CpT,EAAQ,cACRA,EAAQ,SAAS,QAAQ,QAASK,IAAW,CACzC,MAAM/X,GAAQ+X,GAAO,eAAeL,EAAQ,YAAY,EACxD,GAA2B1X,IAAU,KAAM,CACvC,MAAM6sC,GAAgB,KAAK,YAAY,WAAW,OAAO,qBAAqB7sC,GAAO+X,EAAM,EAC3FA,GAAO,eAAeL,EAAQ,aAAcm1B,EAAa,CACjF,CACA,CAAiB,CAajB,CAAS,CAAC,CACV,CAKI,yCAA0C,CAElC,KAAK,eAAe,QACpB,KAAK,iDAAiD,KAAK,cAAc,EAEzE,KAAK,eAAe,QACpB,KAAK,iDAAiD,KAAK,cAAc,EAEzE,KAAK,mBAAmB,QACxB,KAAK,iDAAiD,KAAK,kBAAkB,EAE7E,KAAK,gBAAgB,QACrB,KAAK,iDAAiD,KAAK,eAAe,EAE1E,KAAK,eAAe,QACpB,KAAK,eAAe,QAASn1B,GAAY,CAChCA,EAAQ,QAEbA,EAAQ,SAAS,eAAe,QAASyR,GAAkB,CACvDA,EAAc,eAAezR,EAAQ,OAAQ,MAAS,CAC1E,CAAiB,CACjB,CAAa,EAGL,KAAK,YAAY,QAASA,GAAY,CAC7BA,EAAQ,SAEbA,EAAQ,SAAS,YAAY,QAASuN,GAAe,CACjDA,EAAW,SAASvN,EAAQ,MAAM,CAClD,CAAa,EAEG,gBAAgB,qBAAqB,KAAK,YAAY,OAAO,GACzDA,EAAQ,SAAS,gBACjBA,EAAQ,SAAS,eAAe,cAChCA,EAAQ,SAAS,eAAe,eAC5BA,EAAQ,SAAS,eAAe,cACpC,OAAOA,EAAQ,OAAOA,EAAQ,SAAS,eAAe,YAAY,EAGtF,CAAS,CACT,CAKI,iDAAiDouB,EAAU,CACvDA,EAAS,QAASpuB,GAAY,CACrBA,EAAQ,SAGbA,EAAQ,SAAS,QAAQ,QAASK,IAAW,CAErCL,EAAQ,SAAS,qBAAqB,OAAS,GAC/CA,EAAQ,SAAS,qBACZ,IAAKrV,IAAaA,GAAS,MAAM,EACjC,QAAQ0V,GAAO,MAAM,IAAM,IAGhCA,GAAO,WAGPA,GAAO,eAGPA,GAAO,YACaA,GAAO,eAAeL,EAAQ,MAAM,IACpC,QAChBK,GAAO,eAAeL,EAAQ,OAAQ,IAAI,EAG9CA,EAAQ,oBAAoB,OAAS,GACrCA,EAAQ,oBAAoB,QAASi2B,IAAuB,CACxDA,GAAmB,SAAS,YAAY,QAAS51B,IAAW,CACpDA,GAAO,YAAc,IAEzBA,GAAO,eAAeL,EAAQ,OAAQ,YAAY,SAASi2B,GAAmB,KAAK,EAC7E51B,GAAO,iBAAiB,eAAe41B,GAAmB,KAAK,EAC/DA,GAAmB,KAAK,CAC1D,CAAyB,CACzB,CAAqB,EAErB,CAAa,EAEGj2B,EAAQ,cACR,KAAK,YAAY,QAAQ,MAAMA,EAAQ,SAAS,OAAQA,EAAQ,OAAQA,EAAQ,YAAY,EAC5G,CAAS,CACT,CAYI,kBAAkBouB,EAAU5vB,EAAM,CAC9B,MAAMsa,GAAQ,CAAE,EACVhsB,GAAO,CAAE,EACTopC,GAA4B9H,EAAS,KAAMpuB,IACtCA,GAAQ,SAAS,6BAA8B,EAAC,OAAS,CACnE,EACKm2B,GAAkB33B,IAAS,UAC7B,KAAK,YAAY,WAAW,OAAO,wBAAwB,QAAQ,GACnE03B,KAA8B,GAClC,OAAA9H,EAAS,QAAQ,CAACpuB,GAASxO,KAAU,CACjC,MAAMnJ,GAAM8tC,IAAmBn2B,GAAQ,SAAS,WAC1CA,GAAQ,SAAS,KACjBA,GAAQ,SAAS,KAAO,IAAMxO,GAC/BsnB,GAAMzwB,EAAG,EAKVywB,GAAMzwB,EAAG,EAAE,KAAK2X,EAAO,GAJvB8Y,GAAMzwB,EAAG,EAAI,CAAC2X,EAAO,EACrBlT,GAAK,KAAKzE,EAAG,EAK7B,CAAS,EACM,CAACywB,GAAOhsB,EAAI,CAC3B,CACA,CCpuBO,MAAM,OAAQ,CAIjB,YAAY6c,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,SAAS,EAO1C,KAAK,WAAa,OAIlB,KAAK,uBAAyB,OAK9B,KAAK,qBAAuB,GAI5B,KAAK,WAAa,CAAE,EAKpB,KAAK,cAAgB,GAKrB,KAAK,aAAe,GAKpB,KAAK,cAAgB,GAKrB,KAAK,iBAAmB,GAKxB,KAAK,eAAiB,GAItB,KAAK,oBAAsB,CAAE,EAI7B,KAAK,YAAc,CAAE,EAIrB,KAAK,cAAgB,CAAE,EACvB,KAAK,SAAWA,EAAQ,SACxB,KAAK,OAASA,EAAQ,OACtB,KAAK,cAAgBA,EAAQ,cACzBA,EAAQ,gBAAkB,SAC1B,KAAK,cAAgBA,EAAQ,eAC7BA,EAAQ,eAAiB,SACzB,KAAK,aAAeA,EAAQ,cAC5BA,EAAQ,gBAAkB,SAC1B,KAAK,cAAgBA,EAAQ,eAC7BA,EAAQ,mBAAqB,SAC7B,KAAK,iBAAmBA,EAAQ,kBAChCA,EAAQ,iBAAmB,SAC3B,KAAK,eAAiBA,EAAQ,gBAC9BA,EAAQ,aAAe,SACvB,KAAK,WAAaA,EAAQ,YAC1BA,EAAQ,aAAe,QACvB,KAAK,WAAW,KAAK,GAAGA,EAAQ,UAAU,EAC9C,KAAK,UAAW,CACxB,CASI,IAAI,gBAAiB,CACjB,OAAO,KAAK,eAAiB,CAAC,KAAK,cAC3C,CAMI,IAAI,eAAgB,CAChB,OAAQ,KAAK,cACT,KAAK,aACJ,KAAK,uBAAyB,IAC1B,KAAK,sBAAwB,KAAK,iBAGvC,KAAK,WAAW,KAAMysB,GAAW,CAACA,EAAO,QAAUA,EAAO,OAAO,QAAQ,CACrF,CAMI,IAAI,mBAAoB,CACpB,OAAQ,KAAK,kBACT,KAAK,aACJ,KAAK,uBAAyB,IAC1B,KAAK,sBAAwB,KAAK,eACnD,CAMI,IAAI,iBAAkB,CAClB,OAAQ,KAAK,gBACT,KAAK,aACJ,KAAK,uBAAyB,IAC1B,KAAK,sBAAwB,KAAK,eACnD,CASI,+BAAgC,CAC5B,MAAMC,EAA0B,CAAE,EAC5BC,EAAY,KAAK,WAAW,OAAO,CAACjB,GAAW3E,KAAc,CAC/D,IAAIpoC,GAAQooC,GAAU,MAClB,gBAAgB,UAAUpoC,EAAK,IAK/BA,GAAQA,GAAM,iBACRA,GAAM,iBACNA,GAAM,QAGhB,IAAIsxB,GACJ,GAAI,KAAK,SAAS,YAAc8W,GAAU,OACtC9W,GAAW8W,GAAU,OAAO,eAAeA,GAAU,OAAO,iBAAiB,eAAepoC,EAAK,CAAC,UAE7FooC,GAAU,OACf9W,GAAW8W,GAAU,OAAO,eAAepoC,EAAK,UAE3CooC,GAAU,SAKf,GAAI,YAAY,SAASpoC,EAAK,GAAK,CAAC,OAAO,SAASA,EAAK,EAAG,CAGxD,MAAMilB,GAAamjB,GAAU,SAAS,iBAAiBpoC,EAAK,EAK5D,GAAIilB,KAAe,OACf,OAAA8oB,EAAwB,KAAK3F,EAAS,EACtC,KAAK,aAAe,GACb2E,GAEXzb,GAAW8W,GAAU,SAAS,eAAenjB,EAAU,EACvD,KAAK,oBAAoB,KAAK,CAC1B,SAAUmjB,GAAU,SACpB,MAAOnjB,EAC/B,CAAqB,CACrB,MAGoBqM,GAAW8W,GAAU,SAAS,eAAepoC,EAAK,EAClD,KAAK,oBAAoB,KAAK,CAC1B,SAAUooC,GAAU,SACpB,MAAOpoC,EAC/B,CAAqB,EAGT,gBAAS,UAAU+sC,GAAWzb,EAAQ,EAC/Byb,EACV,EAAE,EAAE,EACL,YAAK,WAAagB,EACXC,CACf,CAII,WAAY,CACJ,KAAK,QACL,KAAK,uBAAyB,OAAO,OAAO,CAAE,EAAE,KAAK,MAAM,EACvD,KAAK,eACL,KAAK,SAAS,eAAe,QAAS7kB,GAAkB,CACpD,GAAIA,EAAc,kBACdA,EAAc,iBAAiB,wBAC3B,KAAK,cAAc,SAAU,CACjC,MAAMnpB,EAAQmpB,EAAc,iBAAiB,eAAe,KAAK,cAAc,MAAM,EACrFA,EAAc,eAAe,KAAK,uBAAwBnpB,CAAK,CACvF,CACA,CAAiB,EAEL,KAAK,WAAa,KAAK,SAAS,eAAe,KAAK,sBAAsB,GAErE,KAAK,iBACV,KAAK,WAAa,KAAK,SAAS,eAAe,KAAK,cAAc,EAE9E,CACA,CC1NO,MAAM,uBAAwB,CAIjC,YAAY8lC,EAAU,CAClB,KAAK,SAAWA,CACxB,CAOI,OAAQ,CACJ,KAAK,SAAS,QAASpuB,GAAY,CAC/BA,EAAQ,SAAS,mBAAmB,QAASuB,GAAa,CAElDA,EAAS,qBAAuB,IAEpC,KAAK,wBAAwBvB,EAASuB,CAAQ,CAC9D,CAAa,CACb,CAAS,CACT,CASI,wBAAwBvB,EAASuB,EAAU,CAQvC,IAAIg1B,GAAmC,CAAE,EACzC,GAAIv2B,EAAQ,eAAgB,CAExB,MAAMw2B,GAAgCj1B,EAAS,eAAevB,EAAQ,cAAc,EAChFw2B,KACAD,GACIC,GAA8B,IAAKvjC,IAAWsO,EAAS,sBAAsB,eAAetO,EAAM,CAAC,EAEvH,CAGQ,IAAI+oB,GAAkBza,EAAS,eAAevB,EAAQ,MAAM,EAI5D,GAHIgc,KAAoB,OAEpBA,GAAkB,CAAE,GACpBA,KAAoB,OAEpB,OAGJ,MAAMya,GAAoC,CAAE,EAC5Cza,GAAgB,QAASO,IAAkB,CAEvC,IAAIK,GAAgBrb,EAAS,sBAAsB,eAAegb,EAAa,EAE3Ema,GAAuB,KAAK,SAAS,KAAM12B,IACpCA,GAAQ,SAAWuc,EAC7B,EAQD,GANIma,KACA9Z,GAAgB8Z,GAAqB,YAKrC,CAAC9Z,GAAe,CAMhB,GAAI,CAAC8Z,GACD,OAMJA,GAAqB,WAAW,KAAK,CACjC,SAAUn1B,EAAS,gBACnB,MAAOvB,CAC3B,CAAiB,EACD,MAChB,CAGwDu2B,GAAiC,KAAMI,IACxE,SAAS,WAAW/Z,GAAe+Z,EAA+B,CAC5E,IAUQD,KACDA,GAAuB,IAAI,QAAQ,CAC/B,SAAUn1B,EAAS,sBACnB,cAAevB,EACf,aAAc,GACd,WAAY4c,EACpC,CAAqB,EACD,KAAK,SAAS,KAAK8Z,EAAoB,GAE3CA,GAAqB,WAAW,KAAK,CACjC,SAAUn1B,EAAS,gBACnB,MAAOvB,CAC3B,CAAiB,GAOLy2B,GAAkC,KAAK7Z,EAAa,CAChE,CAAS,EAEGrb,EAAS,iBAAiB,oBAAsB,WAChD,eAAe,WAAWg1B,GAAkCE,EAAiC,EAAE,QAASG,IAAmC,CAKvI,MAAMC,GAA8B,IAAI,QAAQ,CAC5C,SAAUt1B,EAAS,sBACnB,cAAevB,EACf,WAAY42B,EAChC,CAAiB,EACG,CAACr1B,EAAS,iBACVA,EAAS,gBAAgB,oBAAsB,WAC/Cs1B,GAA4B,aAAe,GAC3CA,GAA4B,WAAa,CACrC,CACI,SAAUt1B,EAAS,gBACnB,MAAO,IACV,CACJ,GAEIA,EAAS,gBAAgB,oBAAsB,SACpDs1B,GAA4B,cAAgB,GAEvCt1B,EAAS,gBAAgB,oBAAsB,gBACpDs1B,GAA4B,iBAAmB,IAEnD,KAAK,SAAS,KAAKA,EAA2B,CAC9D,CAAa,CAEb,CACA,CCjKO,MAAM,iCAAkC,CAI3C,YAAYzI,EAAU,CAClB,KAAK,SAAWA,CACxB,CAOI,OAAQ,CACJ,KAAK,SAAS,QAASpuB,GAAY,CAC/BA,EAAQ,SAAS,kBAAkB,QAASuB,GAAa,CAGjDA,EAAS,UAAYA,EAAS,qBAAuB,IAEzD,KAAK,wBAAwBvB,EAASuB,CAAQ,CAC9D,CAAa,CACb,CAAS,CACT,CASI,wBAAwBvB,EAASuB,EAAU,CAKvC,IAAIu1B,GACA92B,EAAQ,iBAER82B,GAAkCv1B,EAAS,eAAevB,EAAQ,cAAc,GAGpF,IAAIuc,GAAgBhb,EAAS,eAAevB,EAAQ,MAAM,EAC1D,GAAIuc,KAAkB,OAElB,OAIJ,GAAIA,KAAkB,KAAM,CAExB,GAAIua,GAAiC,CAIjC,MAAMD,GAA8B,IAAI,QAAQ,CAC5C,SAAUt1B,EAAS,sBACnB,cAAevB,EACf,aAAc,GACd,WAAY82B,GACZ,WAAY,CACR,CACI,SAAUv1B,EAAS,gBACnB,MAAO,IACV,CACJ,CACrB,CAAiB,EACD,KAAK,SAAS,KAAKs1B,EAA2B,CAC9D,CACY,MACH,CAGD,IAAIja,GAAgBrb,EAAS,sBAAsB,eAAegb,EAAa,EAE3Ema,GAAuB,KAAK,SAAS,KAAMK,IACnC,CAAC,CAACA,GAAe,QACrBA,GAAe,SAAWxa,EACjC,EAQD,GANIma,KACA9Z,GAAgB8Z,GAAqB,YAKrC,CAAC9Z,GAAe,CAShB,GAAI,CAAC8Z,GACD,OAMJA,GAAqB,WAAW,KAAK,CACjC,SAAUn1B,EAAS,gBACnB,MAAOvB,CACvB,CAAa,CACb,CAG8C82B,IAClC,SAAS,WAAWla,GAAeka,EAA+B,IAU7DJ,KACDA,GAAuB,IAAI,QAAQ,CAC/B,SAAUn1B,EAAS,sBACnB,aAAc,GACd,WAAYqb,EAChC,CAAiB,EACD,KAAK,SAAS,KAAK8Z,EAAoB,GAE3CA,GAAqB,WAAW,KAAK,CACjC,SAAUn1B,EAAS,gBACnB,MAAOvB,CACvB,CAAa,EAEb,CACA,CC1IO,MAAM,wBAAyB,CAIlC,YAAYouB,EAAU,CAClB,KAAK,SAAWA,CACxB,CAOI,OAAQ,CACJ,KAAK,SAAS,QAASpuB,GAAY,CAE1BA,EAAQ,QAGbA,EAAQ,SAAS,oBAAoB,QAASuB,GAAa,CAEnDA,EAAS,qBAAuB,IAEpC,KAAK,wBAAwBvB,EAASuB,CAAQ,CAC9D,CAAa,CACb,CAAS,CACT,CAII,mBAAmBvB,EAAS,CAGnBA,EAAQ,gBAGbA,EAAQ,SAAS,oBAAoB,QAASuB,GAAa,CAEvD,GAAIA,EAAS,qBAAuB,GAChC,OAGuCA,EAAS,eAAevB,EAAQ,cAAc,EAEtD,QAASuN,IAAe,CACvD,MAAMypB,GAAkB,IAAI,QAAQ,CAChC,SAAUz1B,EAAS,uBACnB,cAAevB,EACf,cAAe,GACf,WAAY,KAAK,wBAAwBA,EAASuB,EAAUgM,EAAU,CAC1F,CAAiB,EAID,KAAK,SAAS,KAAKypB,EAAe,CAClD,CAAa,CACb,CAAS,CACT,CASI,wBAAwBh3B,EAASuB,EAAU,CAGvC,IAAI01B,GAA2B,CAAE,EAGjC,GAAIj3B,EAAQ,eAAgB,CACxB,MAAMk3B,GAA6B31B,EAAS,eAAevB,EAAQ,cAAc,EAC7Ek3B,KACAD,GAA2BC,GAA2B,IAAKpmC,IAAMyQ,EAAS,sBAAsB,eAAezQ,EAAC,CAAC,EAEjI,CAGQ,IAAIkrB,GAAkBza,EAAS,eAAevB,EAAQ,MAAM,EAI5D,GAHIgc,KAAoB,OAEpBA,GAAkB,CAAE,GACpB,CAAC,MAAM,QAAQA,EAAe,EAC9B,OAEJA,GAAgB,QAASO,IAAkB,CAKvC,IAAIuU,GAA6BvvB,EAAS,sBAAsB,eAAegb,EAAa,EAE5F,MAAMma,GAAuB,KAAK,SAAS,KAAM12B,IACtCA,GAAQ,SAAWuc,EAC7B,EAwBD,GAtBIma,KACA5F,GAA6B4F,GAAqB,YAElD,CAAC5F,IAUG,CAAC4F,IAK4BO,GAAyB,KAAME,IACzD,SAAS,WAAWA,GAAiCrG,EAA0B,CACzF,EAGG,OACJ,MAAMsG,GAAa71B,EAAS,SACtBvB,EACA02B,IAAwBna,GACxB8a,GAAe91B,EAAS,SACxBm1B,IAAwBna,GACxBvc,EAEAg3B,GAAkB,IAAI,QAAQ,CAChC,SAAUz1B,EAAS,uBACnB,cAAevB,EACf,cAAe,EAC/B,CAAa,EACD,KAAK,SAAS,KAAKg3B,EAAe,EAClCz1B,EAAS,uBAAuB,aAAa,QAASlB,IAAW,CAC7D22B,GAAgB,WAAW,KAAK,CAC5B,OAAQ32B,GACR,MAAO+2B,EAE3B,CAAiB,CACjB,CAAa,EACD71B,EAAS,uBAAuB,eAAe,QAASlB,IAAW,CAC/D22B,GAAgB,WAAW,KAAK,CAC5B,OAAQ32B,GACR,MAAOg3B,EAE3B,CAAiB,CACjB,CAAa,CACb,CAAS,EAED,MAAMC,GAAkC,CAAE,EAC1Ctb,GAAgB,QAASO,IAAkB,CAEvC,IAAIuU,GAA6BvvB,EAAS,sBAAsB,eAAegb,EAAa,EAE5F,MAAMma,GAAuB,KAAK,SAAS,KAAM12B,IACtCA,GAAQ,SAAWuc,EAC7B,EAEGma,KACA5F,GAA6B4F,GAAqB,YAElD5F,IAA+B,MAC/BwG,GAAgC,KAAKxG,EAA0B,CAC/E,CAAS,EAEgCmG,GAAyB,OAAQM,IACvD,CAACD,GAAgC,KAAME,IACnC,SAAS,WAAWA,GAAmBD,EAAe,CAChE,CACJ,EAEwB,QAASE,IAA4B,CAC1D,MAAMT,GAAkB,IAAI,QAAQ,CAChC,SAAUz1B,EAAS,uBACnB,cAAevB,EACf,cAAe,GACf,WAAY,KAAK,wBAAwBA,EAASuB,EAAUk2B,EAAuB,CACnG,CAAa,EACD,KAAK,SAAS,KAAKT,EAAe,CAC9C,CAAS,CACT,CAKI,wBAAwBh3B,EAASuB,EAAUgM,GAAY,CACnD,MAAMmqB,GAAiBn2B,EAAS,SAAWvB,EAAQ,OAASuN,GACtDoqB,GAAmBp2B,EAAS,SAC5BgM,GACAvN,EAAQ,OACRgzB,GAAa,CAAE,EACrB,OAAAzxB,EAAS,uBAAuB,aAAa,QAASlB,IAAW,CAC7D,SAAS,UAAU2yB,GAAY3yB,GAAO,eAAeA,GAAO,iBAAiB,eAAeq3B,EAAc,CAAC,CAAC,CACxH,CAAS,EACDn2B,EAAS,uBAAuB,eAAe,QAASlB,IAAW,CAC/D,SAAS,UAAU2yB,GAAY3yB,GAAO,eAAeA,GAAO,iBAAiB,eAAes3B,EAAgB,CAAC,CAAC,CAC1H,CAAS,EACM3E,EACf,CACA,CC7MO,MAAM,2BAA4B,CAIrC,YAAYvkB,EAAa2f,EAAU,CAC/B,KAAK,YAAc3f,EACnB,KAAK,SAAW2f,CACxB,CAUI,MAAM,KAAKwJ,EAAe,CAGtB,MAAMjd,EAAW,KAAK,qBAAsB,EAAC,IAAI,MAAOkd,IAAiB,CAErE,MAAMC,GAAS,CAAE,EACXjH,GAAc,CAAE,EAStB,GARAgH,GAAa,SAAS,QAAS73B,IAAY,CAEnCA,GAAQ,gBAAkB,CAACA,GAAQ,aAEvC83B,GAAO,KAAK93B,GAAQ,UAAU,EAC9B6wB,GAAY,KAAK7wB,EAAO,EACxC,CAAa,EAEG,CAAC83B,GAAO,OACR,OACJ,MAAMC,GAA4B,CAAE,EAMhCH,IAAkB,QAClBA,IAAkB,eAClBA,IAAkB,UAClBC,GAAa,SAAS,QAAS73B,IAAY,CAEvCA,GAAQ,SAAS,UAAU,QAASuB,IAAa,CAC/BA,GAAS,eAAevB,GAAQ,sBAAsB,IACtD,QAEV+3B,GAA0B,QAAQx2B,GAAS,YAAY,IAAM,IAC7Dw2B,GAA0B,KAAKx2B,GAAS,YAAY,CAChF,CAAqB,CACrB,CAAiB,EAMDw2B,GAA0B,KAAK,GAAGF,GAAa,SAAS,CAAC,EAAE,SAAS,oBAAoB,IAAKt2B,IAAaA,GAAS,YAAY,CAAC,EAEpI,MAAMod,GAAc,CAChB,mBAAoB,GACpB,gBAAiB,CACb,UAAWoZ,GACX,gBAAiB,EACpB,EAED,YAAa,EAChB,EAED,IAAI1kB,GAAW,CAAE,EACb,KAAK,YAAY,WAAW,OAAO,QAAQ,OAC3C,UAEAA,GAAW,MADO,KAAK,YAAY,QAAQ,cAAcwkB,GAAa,MAAM,EACjD,UAAUC,GAAQnZ,EAAW,EAGxDtL,GAAW,MAAM,KAAK,YAAY,QAC7B,cAAcwkB,GAAa,MAAM,EACjC,mBAAkB,EAClB,eAAelZ,EAAW,EAC1B,WAAWmZ,EAAM,EACjB,QAAS,EAIlBzkB,GAAS,QAASpgB,IAAW,CACR,KAAK,wBAAwB4kC,GAAa,OAAQ5kC,EAAM,EAChE,QAAS+M,IAAY,CAC1BA,GAAQ,eAAiB/M,GACpB+M,GAAQ,aACTA,GAAQ,WACJA,GAAQ,SAAS,kBAAkB/M,EAAM,EACnC+M,GAAQ,SAAS,eAAe/M,EAAM,EACtC,OAClC,CAAiB,CACjB,CAAa,EAED,QAAS+M,MAAW6wB,GAChB7wB,GAAQ,qBAAuB,EAE/C,CAAS,EACD,MAAM,QAAQ,IAAI2a,CAAQ,CAClC,CAUI,wBAAwBzL,EAAcjc,EAAQ,CAC1C,OAAO,KAAK,SAAS,OAAQ+M,IACpBA,GAAQ,OAETA,GAAQ,SAAW/M,EACZ,GACH+M,GAAQ,SAAS,SAAWkP,GAChClP,GAAQ,SAAS,gBAAgBA,GAAQ,uBAAwB/M,CAAM,EAJhE,EAKd,CACT,CAII,sBAAuB,CACnB,OAAO,KAAK,SAAS,OAAO,CAAC46B,EAAQmK,IAAmB,CACpD,IAAIlf,GAAQ+U,EAAO,KAAM/U,IAAUA,GAAM,SAAWkf,EAAe,SAAS,MAAM,EAClF,OAAKlf,KACDA,GAAQ,CAAE,OAAQkf,EAAe,SAAS,OAAQ,SAAU,EAAI,EAChEnK,EAAO,KAAK/U,EAAK,GAErBA,GAAM,SAAS,KAAKkf,CAAc,EAC3BnK,CACV,EAAE,EAAE,CACb,CACA,CCzIO,MAAM,sBAAuB,CAIhC,YAAYgD,EAAa,CACrB,KAAK,YAAcA,CAC3B,CAOI,MAAM7wB,EAAS43B,EAAe,CAC1B53B,EAAQ,SACH,gCAAgCA,EAAQ,OAAQA,EAAQ,SAAS,SAAS,EAC1E,QAAQ,CAAC,CAACuB,GAAU02B,GAAgBC,EAAsB,IAAM,CAWjE,GARID,IAAmB,MAClB,CAAC12B,GAAS,iBACP,CAACA,GAAS,iBACV,CAACA,GAAS,qBACV,CAACA,GAAS,kBAId,CAAC,YAAY,SAAS02B,EAAc,EACpC,OAEJ,MAAME,GAAoC,KAAK,wBAAwBD,GAAuB,OAAQD,EAAc,EACpH,GAAIE,GAAmC,CAC/BA,GAAkC,gBAClC,KAEAA,GAAkC,cAC9B52B,GAAS,kBAAoB,IACzBq2B,IAAkB,QAC1BO,GAAkC,eAAiB,KAEnDA,GAAkC,aAC9B52B,GAAS,kBAAoB,IACzBq2B,IAAkB,QAC1BO,GAAkC,mBAClC,KAEAA,GAAkC,iBAC9B52B,GAAS,sBAAwB,IAC7Bq2B,IAAkB,eAC1BO,GAAkC,iBAClC,KAEAA,GAAkC,eAC9B52B,GAAS,mBAAqB,IAC1Bq2B,IAAkB,WAC9B,MAChB,CAGY,MAAMQ,GAAwB,IAAI,QAAQ,CACtC,SAAUF,GACV,cAAel4B,EACf,OAAQi4B,GACR,cAAe12B,GAAS,kBAAoB,IACxCq2B,IAAkB,OACtB,aAAcr2B,GAAS,kBAAoB,IACvCq2B,IAAkB,OACtB,iBAAkBr2B,GAAS,sBAAwB,IAC/Cq2B,IAAkB,cACtB,eAAgBr2B,GAAS,mBAAqB,IAC1Cq2B,IAAkB,SACtC,CAAa,EACD,KAAK,YAAY,KAAKQ,EAAqB,EAE3C,KAAK,MAAMA,GAAuBR,CAAa,CAC3D,CAAS,CACT,CAQI,wBAAwB1oB,EAAcjc,EAAQ,CAC1C,OAAO,KAAK,YAAY,KAAM+M,IACrBA,GAAQ,OAETA,GAAQ,SAAW/M,EACZ,GACH+M,GAAQ,SAAS,SAAWkP,GAChClP,GAAQ,SAAS,gBAAgBA,GAAQ,uBAAwB/M,CAAM,EAJhE,EAKd,CACT,CACA,CCvFO,MAAM,qBAAsB,CAI/B,YAAYsZ,EAAYkC,EAAa4pB,GAAMlwC,GAAQ8K,GAAQ0W,GAAS,CAChE,KAAK,WAAa4C,EAClB,KAAK,YAAckC,EACnB,KAAK,KAAO4pB,GACZ,KAAK,OAASlwC,GACd,KAAK,OAAS8K,GACd,KAAK,QAAU0W,EACvB,CAOI,MAAM,SAAU,CAEZ,GAAI,CAAC,KAAK,QAAU,OAAO,KAAK,QAAW,SACvC,OAAO,QAAQ,OAAO,IAAI,kBAAkB,KAAK,KAAM,KAAK,MAAM,CAAC,EAEvE,MAAM,QAAQ,QAAS,EAGvB,MAAM8E,EAAc,KAAK,aAAe,KAAK,WAAW,kBAAmB,EAG3E,IAAI6pB,EAAqB7pB,EAAY,KACjC,KAAK,SAAW,KAAK,QAAQ,OAC7BA,EAAY,KAAO,KAAK,QAAQ,MAEpC,GAAI,CAEA,MAAM4E,GAAW,MAAM,QAAQ,KAAK,MAAM,EACpC,KAAK,OACL,CAAC,KAAK,MAAM,EACZklB,GAAmB,KAAK,SAAW,KAAK,QAAQ,OAAS,KAAK,QAAQ,MAAQ,EAC9E,SAAS,MAAMllB,GAAU,KAAK,QAAQ,KAAK,EAC3C,CAACA,EAAQ,EA+DTmlB,IA7DY,MAAM,QAAQ,IAAID,GAAiB,IAAI,MAAOllB,IAAa,CACzE,MAAM+a,GAAW,CAAE,EAEnB/a,GAAS,QAASpgB,IAAW,CACzB,MAAMic,GAAe,KAAK,OACpB,KAAK,OACLjc,GAAO,YACb,GAAIic,KAAiB,OACjB,MAAM,IAAI,2BAA2B,KAAK,IAAI,EAClD,IAAIvkB,GAAW,KAAK,WACf,YAAYukB,EAAY,EACxB,wBAAwBjc,EAAM,EACnCm7B,GAAS,KAAK,IAAI,QAAQ,CACtB,SAAAzjC,GACA,OAAQsI,GACR,cAAe,KAAK,OAAS,OAC7B,aAAc,KAAK,OAAS,OAC5B,cAAe,KAAK,OAAS,SAC7B,iBAAkB,KAAK,OAAS,cAChC,eAAgB,KAAK,OAAS,SACtD,CAAqB,CAAC,CACtB,CAAiB,EAGD,MAAMwlC,GAAyB,IAAI,uBAAuBrK,EAAQ,EAClE,OAAAA,GAAS,QAASpuB,IAAY,CAG1By4B,GAAuB,MAAMz4B,GAAS,KAAK,IAAI,CACnE,CAAiB,EAKD,MAAM,IAAI,4BAA4ByO,EAAa2f,EAAQ,EAAE,KAAK,KAAK,IAAI,EAIvE,KAAK,OAAS,QACd,KAAK,OAAS,eACd,KAAK,OAAS,WACd,IAAI,wBAAwBA,EAAQ,EAAE,MAAO,EAC7C,IAAI,kCAAkCA,EAAQ,EAAE,MAAO,EACvD,IAAI,yBAAyBA,EAAQ,EAAE,MAAO,GAG9CA,GAAS,QAASpuB,IAAY,CACtBA,GAAQ,eACR,IAAI,yBAAyBouB,EAAQ,EAAE,mBAAmBpuB,EAAO,CAE7F,CAAqB,EAME,IAAI,gBAAgByO,EAAa2f,GAAU,KAAK,OAAO,CAC9E,CAAa,CAAC,GAIkD,OAAQsK,IAAaA,GAAS,uBAAuB,EACzG,GAAIF,GAAkC,SAAW,EAC7C,OAIJ,IAAIG,GAA2B,GAC/B,GAAI,CAEKlqB,EAAY,qBACT,KAAK,WAAW,OAAO,qBAAuB,SAC7C,CAAC,KAAK,SAAW,KAAK,QAAQ,cAAgB,MAE/CkqB,GAA2B,GAC3B,MAAMlqB,EAAY,iBAAkB,GAK5C,UAAWiqB,MAAYF,GACnB,MAAME,GAAS,QAAS,EAKxBC,KAA6B,IAC7B,MAAMlqB,EAAY,kBAAmB,CAEzD,OACmBhd,GAAO,CAEV,GAAIknC,GACA,GAAI,CACA,MAAMlqB,EAAY,oBAAqB,CAC/D,MAC0C,CAAA,CAE1B,MAAMhd,EACtB,CACA,QACgB,CACJgd,EAAY,KAAO6pB,EAEd,KAAK,aACN,MAAM7pB,EAAY,QAAS,CAC3C,CACA,CACA,CChJO,MAAM,aAAc,CAIvB,YAAYlC,EAAYkC,EAAa,CACjC,KAAK,aAAa,EAAI,OAAO,IAAI,eAAe,EAQhD,KAAK,aAAe,IAAI,IAIxB,KAAK,iBAAmB,CAAE,EAI1B,KAAK,+BAAiC,IAAI,kCAC1C,KAAK,WAAalC,EACdkC,IACA,KAAK,YAAcA,EAEnB,YAAY,OAAO,KAAK,YAAa,CAAE,QAAS,KAAM,EAElE,CAKI,MAAM,YAAYmqB,EAA6BC,EAAuB,CAClE,MAAMC,GAAY,OAAOF,GAAgC,SACnDA,EACA,OACAG,GAAmB,OAAOH,GAAgC,WAC1DA,EACAC,EACN,GAAI,CAACE,GACD,MAAM,IAAI,aAAa,0FAA0F,EAErH,GAAI,KAAK,aAAe,KAAK,YAAY,WACrC,MAAM,IAAI,wCAGd,MAAMtqB,GAAc,KAAK,aAAe,KAAK,WAAW,kBAAmB,EAC3E,GAAI,CACA,MAAMA,GAAY,iBAAiBqqB,EAAS,EAC5C,MAAMjrC,GAAS,MAAMkrC,GAAiBtqB,GAAY,OAAO,EACzD,aAAMA,GAAY,kBAAmB,EAC9B5gB,EACnB,OACew7B,GAAK,CACR,GAAI,CAEA,MAAM5a,GAAY,oBAAqB,CACvD,MACkC,CAAA,CACtB,MAAM4a,EAClB,QACgB,CACC,KAAK,aAEN,MAAM5a,GAAY,QAAS,CAC3C,CACA,CAII,MAAM,MAAM/M,EAAOC,EAAY,CAC3B,OAAO,KAAK,WAAW,MAAMD,EAAOC,EAAY,KAAK,WAAW,CACxE,CAII,mBAAmBlB,EAAawB,EAAOwM,GAAa,CAChD,OAAIxM,EACO,KAAK,WAAW,mBAAmBxB,EAAawB,EAAOwM,IAAe,KAAK,WAAW,EAGtF,KAAK,WAAW,mBAAmBhO,GACtCgO,IACA,KAAK,WAAW,CAEhC,CAII,MAAMuqB,EAAgBC,EAAa,CAC/B,MAAM9wC,GAAS,UAAU,SAAW,EAAI6wC,EAAiBA,EAAe,YAClE/lC,GAAS,UAAU,SAAW,EAAIgmC,EAAcD,EAEtD,OADiB,KAAK,WAAW,YAAY7wC,EAAM,EACnC,MAAM8K,EAAM,CACpC,CAII,MAAM+lC,EAAgBC,EAAa,CAC/B,MAAM9wC,GAAS,UAAU,SAAW,EAAI6wC,EAAiBA,EAAe,YAClE/lC,GAAS,UAAU,SAAW,EAAIgmC,EAAcD,EAEtD,OADiB,KAAK,WAAW,YAAY7wC,EAAM,EACnC,oBAAoB8K,EAAM,CAClD,CAKI,OAAOwN,EAAay4B,EAAsB,CACtC,MAAMvuC,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,GAAI,CAACy4B,EACD,OAAOvuC,GAAS,OAAO,KAAK,WAAW,EAC3C,GAAI,MAAM,QAAQuuC,CAAoB,EAClC,OAAOA,EAAqB,IAAKC,IAAoB,KAAK,OAAO14B,EAAa04B,EAAe,CAAC,EAClG,MAAMpN,GAAkBphC,GAAS,OAAO,KAAK,WAAW,EACxD,YAAK,+BAA+B,UAAUohC,GAAiBmN,EAAsBvuC,GAAU,EAAI,EAC5FohC,EACf,CAII,MAAMtrB,EAAasrB,KAAoBC,GAAa,CAEhD,MAAMrhC,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAAurB,GAAY,QAAS54B,IAAW,KAAK,+BAA+B,UAAU24B,EAAiB34B,GAAQzI,EAAQ,CAAC,EACzGohC,CACf,CAOI,MAAM,QAAQtrB,EAAawrB,EAAY,CACnC,MAAMthC,GAAW,KAAK,WAAW,YAAY8V,CAAW,EAElD24B,GAAoB,MADqB,IAAI,uCAAuC,KAAK,WAAW,OAAO,EAC1C,UAAUnN,EAAYthC,EAAQ,EACrG,GAAIyuC,GACA,OAAO,KAAK,MAAM34B,EAAa24B,GAAmBnN,CAAU,CAExE,CAII,KAAK+M,EAAgBK,EAAsBC,GAAc,CAErD,IAAInxC,GAAS,UAAU,OAAS,IAC3B,OAAO6wC,GAAmB,YACvB,gBAAgB,eAAeA,CAAc,GAC7C,OAAOA,GAAmB,UAC5BA,EACA,OACN,MAAM/lC,GAAS9K,GACTkxC,EACAL,EACArvB,GAAUxhB,GACVmxC,GACAD,EAIN,OAHI,gBAAgB,eAAelxC,EAAM,IACrCA,GAASA,GAAO,QAAQ,MAExB,MAAM,QAAQ8K,EAAM,GAAKA,GAAO,SAAW,EACpC,QAAQ,QAAQA,EAAM,EAE1B,IAAI,sBAAsB,KAAK,WAAY,KAAK,YAAa,OAAQ9K,GAAQ8K,GAAQ0W,EAAO,EAC9F,QAAO,EACP,KAAK,IAAM1W,EAAM,CAC9B,CAII,OAAO+lC,EAAgBK,EAAsBC,GAAc,CAEvD,MAAMnxC,GAAS,UAAU,OAAS,IAC7B,OAAO6wC,GAAmB,YACvB,gBAAgB,eAAeA,CAAc,GAC7C,OAAOA,GAAmB,UAC5BA,EACA,OACA/lC,GAAS9K,GACTkxC,EACAL,EACArvB,GAAUxhB,GACVmxC,GACAD,EAEN,OAAI,MAAM,QAAQpmC,EAAM,GAAKA,GAAO,SAAW,EACpC,QAAQ,QAAQA,EAAM,EAE1B,IAAI,sBAAsB,KAAK,WAAY,KAAK,YAAa,SAAU9K,GAAQ8K,GAAQ0W,EAAO,EAChG,QAAO,EACP,KAAK,IAAM1W,EAAM,CAC9B,CAII,WAAW+lC,EAAgBK,EAAsBC,GAAc,CAE3D,IAAInxC,GAAS,UAAU,OAAS,IAC3B,OAAO6wC,GAAmB,YACvB,gBAAgB,eAAeA,CAAc,GAC7C,OAAOA,GAAmB,UAC5BA,EACA,OACN,MAAM/lC,GAAS9K,GACTkxC,EACAL,EACArvB,GAAUxhB,GACVmxC,GACAD,EAIN,OAHI,gBAAgB,eAAelxC,EAAM,IACrCA,GAASA,GAAO,QAAQ,MAExB,MAAM,QAAQ8K,EAAM,GAAKA,GAAO,SAAW,EACpC,QAAQ,QAAQA,EAAM,EAE1B,IAAI,sBAAsB,KAAK,WAAY,KAAK,YAAa,cAAe9K,GAAQ8K,GAAQ0W,EAAO,EACrG,QAAO,EACP,KAAK,IAAM1W,EAAM,CAC9B,CAII,QAAQ+lC,EAAgBK,EAAsBC,GAAc,CAExD,IAAInxC,GAAS,UAAU,OAAS,IAC3B,OAAO6wC,GAAmB,YACvB,gBAAgB,eAAeA,CAAc,GAC7C,OAAOA,GAAmB,UAC5BA,EACA,OACN,MAAM/lC,GAAS9K,GACTkxC,EACAL,EACArvB,GAAUxhB,GACVmxC,GACAD,EAIN,OAHI,gBAAgB,eAAelxC,EAAM,IACrCA,GAASA,GAAO,QAAQ,MAExB,MAAM,QAAQ8K,EAAM,GAAKA,GAAO,SAAW,EACpC,QAAQ,QAAQA,EAAM,EAE1B,IAAI,sBAAsB,KAAK,WAAY,KAAK,YAAa,UAAW9K,GAAQ8K,GAAQ0W,EAAO,EACjG,QAAO,EACP,KAAK,IAAM1W,EAAM,CAC9B,CAQI,MAAM,OAAO9K,EAAQ8K,EAAQ,CACzB,OAAO,KAAK,mBAAkB,EACzB,OAAM,EACN,KAAK9K,CAAM,EACX,OAAO8K,CAAM,EACb,QAAS,CACtB,CACI,MAAM,OAAO9K,EAAQ2zB,EAAkBqQ,GAAwB,CAC3D,MAAMxhC,GAAW,KAAK,WAAW,YAAYxC,CAAM,EACnD,IAAIwhB,GACA,MAAM,QAAQwiB,EAAsB,EACpCxiB,GAAU,CACN,cAAewiB,EAClB,EAGDxiB,GAAUwiB,GAEd,IAAI9Y,GACC,MAAM,QAAQyI,CAAgB,EAI/BzI,GAAWyI,EAHXzI,GAAW,CAACyI,CAAgB,EAKhC,MAAMyd,GAAkB5uC,GAAS,0BAA0B,MAAM,QAAQgf,GAAQ,aAAa,EACxFA,GAAQ,cACR,OAAO,KAAKA,GAAQ,aAAa,CAAC,EAClC6vB,GAAmB7uC,GAAS,QAAQ,OAAQ8uC,IAAQ,CAACF,GAAgB,SAASE,EAAG,GACnFpmB,GAAS,KAAMpgB,IAAW,OAAOwmC,GAAI,eAAexmC,EAAM,EAAM,GAAW,CAAC,EAChF,OAAO,KAAK,mBAAkB,EACzB,OAAM,EACN,KAAK9K,CAAM,EACX,OAAOkrB,EAAQ,EACf,SAAS,CAAC,GAAGkmB,GAAiB,GAAGC,EAAgB,EAAE,IAAKC,IAAQA,GAAI,YAAY,EAAGF,GAAgB,IAAKE,IAAQA,GAAI,YAAY,EAAG,CACpI,4BAA6B9vB,GAAQ,4BACrC,eAAgBA,GAAQ,eACxB,WAAYA,GAAQ,YAChB,KAAK,WAAW,OAAO,qBAAqB,CAAC,CACpD,CAAA,EACI,QAAS,CACtB,CAQI,OAAOxhB,EAAQuY,EAAUwrB,GAAe,CAEpC,OACIxrB,GAAa,MACbA,IAAa,IACZ,MAAM,QAAQA,CAAQ,GAAKA,EAAS,SAAW,EACzC,QAAQ,OAAO,IAAI,aAAa,0DAA0D,CAAC,EAElG,OAAOA,GAAa,UACpB,OAAOA,GAAa,UACpBA,aAAoB,MACpB,MAAM,QAAQA,CAAQ,EACf,KAAK,mBAAkB,EACzB,OAAOvY,CAAM,EACb,IAAI+jC,EAAa,EACjB,WAAWxrB,CAAQ,EACnB,QAAS,EAGP,KAAK,mBAAkB,EACzB,OAAOvY,CAAM,EACb,IAAI+jC,EAAa,EACjB,MAAMxrB,CAAQ,EACd,QAAS,CAE1B,CAQI,OAAOs4B,EAAgBt4B,EAAU,CAE7B,OACIA,GAAa,MACbA,IAAa,IACZ,MAAM,QAAQA,CAAQ,GAAKA,EAAS,SAAW,EACzC,QAAQ,OAAO,IAAI,aAAa,0DAA0D,CAAC,EAElG,OAAOA,GAAa,UACpB,OAAOA,GAAa,UACpBA,aAAoB,MACpB,MAAM,QAAQA,CAAQ,EACf,KAAK,mBAAkB,EACzB,OAAM,EACN,KAAKs4B,CAAc,EACnB,WAAWt4B,CAAQ,EACnB,QAAS,EAGP,KAAK,mBAAkB,EACzB,OAAM,EACN,KAAKs4B,CAAc,EACnB,MAAMt4B,CAAQ,EACd,QAAS,CAE1B,CAQI,WAAWs4B,EAAgBt4B,EAAU,CAEjC,OACIA,GAAa,MACbA,IAAa,IACZ,MAAM,QAAQA,CAAQ,GAAKA,EAAS,SAAW,EACzC,QAAQ,OAAO,IAAI,aAAa,0DAA0D,CAAC,EAElG,OAAOA,GAAa,UACpB,OAAOA,GAAa,UACpBA,aAAoB,MACpB,MAAM,QAAQA,CAAQ,EACf,KAAK,mBAAkB,EACzB,WAAU,EACV,KAAKs4B,CAAc,EACnB,WAAWt4B,CAAQ,EACnB,QAAS,EAGP,KAAK,mBAAkB,EACzB,WAAU,EACV,KAAKs4B,CAAc,EACnB,MAAMt4B,CAAQ,EACd,QAAS,CAE1B,CAQI,QAAQs4B,EAAgBt4B,EAAU,CAE9B,OACIA,GAAa,MACbA,IAAa,IACZ,MAAM,QAAQA,CAAQ,GAAKA,EAAS,SAAW,EACzC,QAAQ,OAAO,IAAI,aAAa,0DAA0D,CAAC,EAElG,OAAOA,GAAa,UACpB,OAAOA,GAAa,UACpBA,aAAoB,MACpB,MAAM,QAAQA,CAAQ,EACf,KAAK,mBAAkB,EACzB,QAAO,EACP,KAAKs4B,CAAc,EACnB,WAAWt4B,CAAQ,EACnB,QAAS,EAGP,KAAK,mBAAkB,EACzB,QAAO,EACP,KAAKs4B,CAAc,EACnB,MAAMt4B,CAAQ,EACd,QAAS,CAE1B,CAII,OAAOD,EAAakJ,EAAS,CACzB,MAAMhf,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa,iBAAiB,4BAA4BkJ,CAAO,GAC5Fhf,GAAS,IAAI,EACZ,eAAegf,GAAW,CAAE,CAAA,EAC5B,UAAW,CACxB,CAII,MAAM,SAASlJ,EAAagN,EAAO,CAC/B,MAAM9iB,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa9V,GAAS,IAAI,EACpD,eAAe,CAAE,MAAA8iB,CAAO,CAAA,EACxB,UAAW,CACxB,CAKI,MAAMhN,EAAakJ,EAAS,CACxB,MAAMhf,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa,iBAAiB,4BAA4BkJ,CAAO,GAC5Fhf,GAAS,IAAI,EACZ,eAAegf,GAAW,CAAE,CAAA,EAC5B,SAAU,CACvB,CAKI,QAAQlJ,EAAagN,EAAO,CACxB,MAAM9iB,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa9V,GAAS,IAAI,EACpD,eAAe,CAAE,MAAA8iB,CAAO,CAAA,EACxB,SAAU,CACvB,CAII,IAAIhN,EAAakQ,EAAYlD,GAAO,CAChC,OAAO,KAAK,iBAAiBhN,EAAa,MAAOkQ,EAAYlD,EAAK,CAC1E,CAII,QAAQhN,EAAakQ,EAAYlD,GAAO,CACpC,OAAO,KAAK,iBAAiBhN,EAAa,MAAOkQ,EAAYlD,EAAK,CAC1E,CAII,QAAQhN,EAAakQ,EAAYlD,GAAO,CACpC,OAAO,KAAK,iBAAiBhN,EAAa,MAAOkQ,EAAYlD,EAAK,CAC1E,CAII,QAAQhN,EAAakQ,EAAYlD,GAAO,CACpC,OAAO,KAAK,iBAAiBhN,EAAa,MAAOkQ,EAAYlD,EAAK,CAC1E,CACI,MAAM,iBAAiBhN,EAAai5B,EAAQ/oB,GAAYlD,GAAQ,CAAA,EAAI,CAChE,MAAM9iB,GAAW,KAAK,WAAW,YAAY8V,CAAW,EAClDJ,GAAS1V,GAAS,QAAQ,KAAM6I,IAASA,GAAK,eAAiBmd,EAAU,EAC/E,GAAI,CAACtQ,GACD,MAAM,IAAI,aAAa,WAAWsQ,EAAU,6BAA6BhmB,GAAS,IAAI,GAAG,EAE7F,MAAMkD,GAAS,MAAM,KAAK,mBAAmB4S,EAAa9V,GAAS,IAAI,EAClE,eAAe,CAAE,MAAA8iB,EAAO,CAAA,EACxB,OAAO,GAAGisB,CAAM,IAAI,KAAK,WAAW,OAAO,OAAOr5B,GAAO,YAAY,CAAC,IAAKq5B,CAAM,EACjF,UAAW,EAChB,OAAO7rC,GAAO6rC,CAAM,IAAM,KAAO,KAAO,WAAW7rC,GAAO6rC,CAAM,CAAC,CACzE,CAII,MAAM,KAAKj5B,EAAakJ,EAAS,CAC7B,MAAMhf,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa,iBAAiB,4BAA4BkJ,CAAO,GAC5Fhf,GAAS,IAAI,EACZ,eAAegf,GAAW,CAAE,CAAA,EAC5B,QAAS,CACtB,CAII,MAAM,OAAOlJ,EAAagN,EAAO,CAC7B,MAAM9iB,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa9V,GAAS,IAAI,EACpD,eAAe,CAAE,MAAO8iB,CAAO,CAAA,EAC/B,QAAS,CACtB,CAMI,aAAahN,EAAakJ,EAAS,CAC/B,MAAMhf,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa,iBAAiB,4BAA4BkJ,CAAO,GAC5Fhf,GAAS,IAAI,EACZ,eAAegf,GAAW,CAAE,CAAA,EAC5B,gBAAiB,CAC9B,CAMI,eAAelJ,EAAagN,EAAO,CAC/B,MAAM9iB,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa9V,GAAS,IAAI,EACpD,eAAe,CAAE,MAAA8iB,CAAO,CAAA,EACxB,gBAAiB,CAC9B,CAWI,MAAM,UAAUhN,EAAa8Q,EAAK,CAE9B,GAAI,CAACA,EAAI,OACL,OAAO,QAAQ,QAAQ,EAAE,EAC7B,MAAM5mB,GAAW,KAAK,WAAW,YAAY8V,CAAW,EACxD,OAAO,KAAK,mBAAmBA,EAAa9V,GAAS,IAAI,EACpD,cAAc4mB,CAAG,EACjB,QAAS,CACtB,CAKI,MAAM,QAAQ9Q,EAAakJ,EAAS,CAGhC,IAAI1H,GAFa,KAAK,WAAW,YAAYxB,CAAW,EAEnC,KAIrB,GAHIkJ,GAAWA,EAAQ,OACnB1H,GAAQ0H,EAAQ,KAAK,OAErB,CAACA,EAAQ,MACT,MAAM,IAAI,MAAM,sEAAsE,EAG1F,OAAO,KAAK,mBAAmBlJ,EAAawB,EAAK,EAC5C,eAAe,CAChB,GAAG0H,EACH,KAAM,CACT,CAAA,EACI,OAAQ,CACrB,CAKI,MAAM,UAAUlJ,EAAagN,EAAO,CAChC,MAAM9iB,GAAW,KAAK,WAAW,YAAY8V,CAAW,EAExD,OAAO,KAAK,mBAAmBA,EAAa9V,GAAS,IAAI,EACpD,eAAe,CAChB,MAAA8iB,EACA,KAAM,CACT,CAAA,EACI,OAAQ,CACrB,CAWI,MAAM,YAAYhN,EAAaN,EAAI,CAC/B,MAAMxV,GAAW,KAAK,WAAW,YAAY8V,CAAW,EAExD,OAAO,KAAK,mBAAmBA,EAAa9V,GAAS,IAAI,EACpD,eAAe,CAChB,KAAM,CACT,CAAA,EACI,WAAWA,GAAS,kBAAkBwV,CAAE,CAAC,EACzC,OAAQ,CACrB,CAKI,MAAM,cAAcM,EAAakJ,EAAS,CACtC,OAAO,KAAK,QAAQlJ,EAAakJ,CAAO,EAAE,KAAMrhB,IACxCA,KAAU,KACH,QAAQ,OAAO,IAAI,oBAAoBmY,EAAakJ,CAAO,CAAC,EAEhE,QAAQ,QAAQrhB,EAAK,CAC/B,CACT,CAKI,MAAM,gBAAgBmY,EAAagN,EAAO,CACtC,OAAO,KAAK,UAAUhN,EAAagN,CAAK,EAAE,KAAMnlB,IACxCA,KAAU,KACH,QAAQ,OAAO,IAAI,oBAAoBmY,EAAagN,CAAK,CAAC,EAE9D,QAAQ,QAAQnlB,EAAK,CAC/B,CACT,CAOI,MAAM,MAAMmY,EAAa,CACrB,MAAM9V,EAAW,KAAK,WAAW,YAAY8V,CAAW,EAClDgO,GAAc,KAAK,aAAe,KAAK,WAAW,kBAAmB,EAC3E,GAAI,CACA,OAAO,MAAMA,GAAY,WAAW9jB,EAAS,SAAS,CAClE,QACgB,CACC,KAAK,aACN,MAAM8jB,GAAY,QAAS,CAC3C,CACA,CAII,MAAM,UAAUhO,EAAamS,EAAY5R,GAAc1Y,GAAO,CAC1D,MAAMqC,GAAW,KAAK,WAAW,YAAY8V,CAAW,EAClDJ,GAAS1V,GAAS,2BAA2BqW,EAAY,EAC/D,GAAI,CAACX,GACD,MAAM,IAAI,aAAa,UAAUW,EAAY,qBAAqBrW,GAAS,UAAU,UAAU,EACnG,GAAI,MAAM,OAAOrC,EAAK,CAAC,EACnB,MAAM,IAAI,aAAa,UAAUA,EAAK,oBAAoB,EAE9D,MAAMgJ,GAAS0P,GACV,MAAM,GAAG,EACT,YAAY,CAAC1Y,GAAOD,MAAS,CAAE,CAACA,EAAG,EAAGC,EAAK,GAAK,IAAM,KAAK,WAAW,OAAO,OAAO+X,GAAO,YAAY,EACxG,MACA/X,EAAK,EACT,OAAO,KAAK,mBAAmBmY,EAAa,QAAQ,EAC/C,OAAOA,CAAW,EAClB,IAAInP,EAAM,EACV,MAAMshB,CAAU,EAChB,QAAS,CACtB,CAII,MAAM,UAAUnS,EAAamS,EAAY5R,GAAc1Y,GAAO,CAC1D,MAAMqC,GAAW,KAAK,WAAW,YAAY8V,CAAW,EAClDJ,GAAS1V,GAAS,2BAA2BqW,EAAY,EAC/D,GAAI,CAACX,GACD,MAAM,IAAI,aAAa,UAAUW,EAAY,qBAAqBrW,GAAS,UAAU,UAAU,EACnG,GAAI,MAAM,OAAOrC,EAAK,CAAC,EACnB,MAAM,IAAI,aAAa,UAAUA,EAAK,oBAAoB,EAE9D,MAAMgJ,GAAS0P,GACV,MAAM,GAAG,EACT,YAAY,CAAC1Y,GAAOD,MAAS,CAAE,CAACA,EAAG,EAAGC,EAAK,GAAK,IAAM,KAAK,WAAW,OAAO,OAAO+X,GAAO,YAAY,EACxG,MACA/X,EAAK,EACT,OAAO,KAAK,mBAAmBmY,EAAa,QAAQ,EAC/C,OAAOA,CAAW,EAClB,IAAInP,EAAM,EACV,MAAMshB,CAAU,EAChB,QAAS,CACtB,CAOI,cAAczqB,EAAQ,CAElB,MAAMwxC,EAAc,KAAK,aAAa,IAAIxxC,CAAM,EAChD,GAAIwxC,EACA,OAAOA,EAEX,GAAI,KAAK,WAAW,OAAO,QAAQ,OAAS,UAAW,CACnD,MAAMC,GAAgB,IAAI,gBAAgBzxC,EAAQ,KAAM,KAAK,WAAW,EACxE,YAAK,aAAa,IAAIA,EAAQyxC,EAAa,EACpCA,EACnB,KACa,CACD,MAAMA,GAAgB,IAAI,WAAWzxC,EAAQ,KAAM,KAAK,WAAW,EACnE,YAAK,aAAa,IAAIA,EAAQyxC,EAAa,EACpCA,EACnB,CACA,CAOI,kBAAkBzxC,EAAQ,CAEtB,GAAI,KAAK,WAAW,OAAO,cAAgB,GACvC,MAAM,IAAI,gCAAgC,KAAK,WAAW,MAAM,EAEpE,MAAMqY,EAAa,KAAK,iBAAiB,KAAMA,IAAeA,GAAW,SAAWrY,CAAM,EAC1F,GAAIqY,EACA,OAAOA,EAEX,MAAMo5B,GAAgB,IAAI,eAAezxC,EAAQ,KAAM,KAAK,WAAW,EACvE,YAAK,iBAAiB,KAAKyxC,EAAa,EACjCA,EACf,CAII,mBAAmBzxC,EAAQ,CACvB,OAAO,KAAK,WAAW,mBAAmBA,CAAM,CACxD,CAMI,eAAeqY,EAAY,CACvB,MAAMq5B,EAAwBr5B,EAAW,YACnC,CAAE,OAAArY,GAAQ,QAAA8iC,GAAS,YAAAxc,GAAa,GAAGqrB,EAA2B,EAAGt5B,EACvE,OAAO,OAAO,OAAO,IAAIq5B,EAAsBr5B,EAAW,OAAQ,IAAI,EAAG,CACrE,GAAGs5B,EACf,CAAS,CACT,CAMI,oBAAoB5L,EAAkB,CAClC,MAAMC,EAA+B,uBAAwB,EAAC,mBAAmB,KAAM3tB,IAC3EA,GAAW,UACd,OAAO0tB,GAAqB,WACvBA,EACAA,EAAiB,YAC9B,EACD,GAAI,CAACC,EACD,MAAM,IAAI,8BAA8BD,CAAgB,EAC5D,MAAMntB,GAAiBotB,EAA6B,OAC9C,KAAK,WAAW,YAAYA,EAA6B,MAAM,EAC/D,OACA4L,GAA2B,IAAI5L,EAA6B,OAAO,KAAMptB,EAAc,EAG7F,GAAIg5B,cAAoC,mBAC/BA,GAAyB,UAC1BA,GAAyB,QAAa,UAEzC,CACD,GAAI,CAACh5B,GACD,MAAM,IAAI,6CAA6CmtB,CAAgB,EAC3E6L,GAAyB,QAAa,KACtCA,GAAyB,SAAch5B,EACnD,CACQ,OAAOg5B,EACf,CAMI,MAAM,SAAU,CACZ,GAAI,CAAC,KAAK,YACN,MAAM,IAAI,kCACd,OAAO,KAAK,YAAY,QAAS,CACzC,CACA,CCvzBO,MAAM,2BAA2B,aAAc,CAIlD,YAAYxtB,EAAYkC,EAAa,CACjC,MAAMlC,EAAYkC,CAAW,EAC7B,KAAK,aAAa,EAAI,OAAO,IAAI,oBAAoB,EACrD,KAAK,OAASlC,EAAW,MACjC,CAQI,MAAM,aAAaytB,EAA8B,CAC7C,MAAM,KAAK,OAAO,KAAKA,CAA4B,CAC3D,CAKI,MAAM,aAAaC,EAAwB,CACvC,MAAM,KAAK,OAAO,KAAKA,CAAsB,CACrD,CAII,gBAAiB,CACb,OAAO,KAAK,OAAO,OAAQ,CACnC,CACA,CC/BO,MAAM,oBAAqB,CAI9B,OAAO1tB,EAAYkC,EAAa,CAC5B,OAAIlC,EAAW,OAAO,QAAQ,OAAS,UAC5B,IAAI,mBAAmBA,CAAU,EACxCA,EAAW,OAAO,QAAQ,OAAS,QAC5B,IAAI,mBAAmBA,EAAYkC,CAAW,EAClD,IAAI,cAAclC,EAAYkC,CAAW,CACxD,CACA,CCdO,MAAM,IAAK,CAId,YAAY9E,EAAS,CACjB,KAAK,aAAa,EAAI,OAAO,IAAI,MAAM,EACvC,KAAK,QAAU,CAAE,EACbA,IACA,KAAK,SAAWA,EAAQ,SACxB,KAAK,OAASA,EAAQ,OACtB,KAAK,KAAOA,EAAQ,KACpB,KAAK,WAAaA,EAAQ,WAC1B,KAAK,aAAe,CAAC,CAACA,EAAQ,aAE1C,CAOI,OAAQ,CACJ,OAAO,IAAI,KAAK,CACZ,SAAU,KAAK,SACf,OAAQ,KAAK,OACb,KAAM,KAAK,KACX,WAAY,KAAK,WACjB,aAAc,KAAK,YAC/B,CAAS,CACT,CAII,SAASnY,EAAO,CACZ,KAAK,QAAQ,KAAKA,CAAK,CAC/B,CAII,YAAY0oC,EAAW,CACnB,MAAM1oC,EAAQ,KAAK,QAAQ,KAAMA,IAAUA,GAAM,OAAS0oC,EAAU,IAAI,EACpE1oC,GACA,KAAK,QAAQ,OAAO,KAAK,QAAQ,QAAQA,CAAK,EAAG,CAAC,CAE9D,CAOI,OAAO,OAAOuP,EAAgBR,EAAQ,CAClC,MAAMoJ,GAAU,CACZ,SAAU5I,EAAe,SACzB,OAAQA,EAAe,OACvB,KAAMR,EAAO,eAAeQ,EAAe,UAAWA,EAAe,OAAQA,EAAe,QAAQ,EACpG,WAAYA,EAAe,WAC3B,aAAcA,EAAe,kBAAkB,YAClD,EACD,OAAO,IAAI,KAAK4I,EAAO,CAC/B,CACA,CChEO,MAAM,SAAU,CAInB,OAAO,gBAAgBwwB,EAAWC,EAAW,CACzC,MAAI,CAACD,GAAa,CAACC,EACR,EAEPD,EAAU,YACTA,EAAU,UAAU,IAAIC,EAAU,MAAM,GACrCD,EAAU,UAAU,IAAIC,EAAU,IAAI,GACnC,EAEPA,EAAU,YACTA,EAAU,UAAU,IAAID,EAAU,MAAM,GACrCC,EAAU,UAAU,IAAID,EAAU,IAAI,GACnC,GAEJ,CACf,CACA,CCKO,MAAM,kBAAmB,CAI5B,YAAY5tB,EAAY,CACpB,KAAK,WAAaA,EAClB,KAAK,aAAa,EAAI,OAAO,IAAI,oBAAoB,CAC7D,CAOI,MAAM,OAAQ,CACV,KAAK,YAAc,KAAK,WAAW,kBAAmB,EAEtD,KAAK,gBAAkB,KAAK,WAAW,OAAO,SAC9C,KAAK,cAAgB,KAAK,WAAW,OAAO,OAK5C,MAAM8tB,EAAwB,KAAK,WAAW,OAAO,QAAQ,OAAS,eAChE,KAAK,WAAW,OAAO,QAAQ,OAAS,WAC1C,KAAK,WAAW,QAAQ,4BAA8B,OAC1D,MAAM,KAAK,YAAY,gBAAiB,EACpCA,GACA,MAAM,KAAK,YAAY,iBAAkB,EAE7C,GAAI,CACA,MAAM,KAAK,+BAA+B,KAAK,WAAW,EAE1D,MAAMC,EAAa,KAAK,sBAAsB,IAAK3vC,IAAa,KAAK,aAAaA,EAAQ,CAAC,EACrF4vC,GAAY,KAAK,0BAA0B,IAAK5vC,IAAa,KAAK,aAAaA,EAAQ,CAAC,EAC9F,MAAM,KAAK,YAAY,UAAU2vC,CAAU,EAC3C,MAAM,KAAK,YAAY,SAASC,EAAS,EACzC,MAAM,KAAK,yCAA0C,EAEjD,KAAK,WAAW,kBAChB,MAAM,KAAK,WAAW,iBAAiB,YAAY,KAAK,WAAW,EACnEF,GACA,MAAM,KAAK,YAAY,kBAAmB,CAE1D,OACe5oC,EAAO,CACV,GAAI,CAEI4oC,GACA,MAAM,KAAK,YAAY,oBAAqB,CAEhE,MACkC,CAAA,CACtB,MAAM5oC,CAClB,QACgB,CACJ,MAAM,KAAK,YAAY,eAAgB,EACvC,MAAM,KAAK,YAAY,QAAS,CAC5C,CACA,CAII,MAAM,+BAA+Bgd,EAAa,EAC1C,KAAK,0BAA0B,OAAS,GACxC,KAAK,oBAAmB,IACxB,MAAM,KAAK,2BAA2BA,CAAW,CAE7D,CAII,MAAM,KAAM,CACR,KAAK,YAAc,KAAK,WAAW,kBAAmB,EACtD,GAAI,CAEA,MAAM6rB,EAAa,KAAK,sBAAsB,IAAK3vC,IAAa,KAAK,aAAaA,EAAQ,CAAC,EACrF4vC,EAAY,KAAK,0BAA0B,IAAK5vC,IAAa,KAAK,aAAaA,EAAQ,CAAC,EAC9F,aAAM,KAAK,YAAY,UAAU2vC,CAAU,EAC3C,MAAM,KAAK,YAAY,SAASC,CAAS,EACzC,KAAK,YAAY,gBAAiB,EAClC,MAAM,KAAK,yCAA0C,EAEjD,KAAK,WAAW,kBAEhB,MAAM,KAAK,WAAW,iBAAiB,YAAY,KAAK,WAAW,EAChE,KAAK,YAAY,aAAc,CAClD,QACgB,CAIJ,KAAK,YAAY,iBAAkB,EACnC,MAAM,KAAK,YAAY,QAAS,CAC5C,CACA,CAOI,IAAI,uBAAwB,CACxB,OAAO,KAAK,WAAW,gBAAgB,OAAQ5vC,GAAaA,EAAS,aACjEA,EAAS,YAAc,gBACvBA,EAAS,YAAc,MAAM,CACzC,CAII,IAAI,2BAA4B,CAC5B,OAAQ,KAAK,WAAW,gBACnB,OAAQA,GAAaA,EAAS,YAAc,QAAUA,EAAS,WAAW,EAE1E,KAAK,UAAU,eAAe,CAC3C,CAII,qBAAsB,CAClB,OAAO,KAAK,WAAW,gBAAgB,KAAMoW,GAClCA,EAAe,QAAQ,KAAMV,GAAWA,EAAO,aAAa,CACtE,CACT,CAKI,MAAM,0CAA2C,CAC7C,MAAM,KAAK,aAAc,EACzB,MAAM,KAAK,mBAAoB,EAC/B,MAAM,KAAK,eAAgB,EAC3B,MAAM,KAAK,cAAe,EAC1B,MAAM,KAAK,kBAAmB,EAC9B,MAAM,KAAK,+BAAgC,EAE3C,MAAM,KAAK,cAAe,EAC1B,MAAM,KAAK,mBAAoB,EAC/B,MAAM,KAAK,gBAAiB,EAC5B,MAAM,KAAK,mBAAoB,EAC/B,MAAM,KAAK,cAAe,EAC1B,MAAM,KAAK,kBAAmB,EAC9B,MAAM,KAAK,mBAAoB,EAC/B,MAAM,KAAK,iBAAkB,EAC7B,MAAM,KAAK,gBAAiB,EAC5B,MAAM,KAAK,oBAAqB,EAChC,MAAM,KAAK,iCAAkC,EAC7C,MAAM,KAAK,kBAAmB,EAC9B,MAAM,KAAK,YAAa,EACxB,MAAM,KAAK,qBAAsB,CACzC,CACI,aAAalY,EAAQ,CACjB,MAAM0S,EAAS,KAAK,WAAW,OAAO,eAAe1S,CAAM,EAC3D,OAAO,KAAK,WAAW,OAAO,eAAe0S,EAAO,UAAWA,EAAO,QAAU,KAAK,cAAeA,EAAO,UAAY,KAAK,eAAe,CACnJ,CAII,MAAM,oBAAqB,CACvB,UAAWlQ,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SAEJ,MAAMkoC,GAAyBloC,EAAM,YAAY,OAAQmoC,IAAoB,CACzE,MAAMC,GAAa/vC,EAAS,YAAY,KAAMgwC,IAAuBF,GAAgB,OAASE,GAAmB,MAC7G,KAAK,aAAaF,EAAe,IAC7B,KAAK,aAAaE,GAAmB,wBAAwB,CAAC,EACtE,MAAQ,CAACD,IACJA,GAAW,UACRA,GAAW,WAAaD,GAAgB,UAC3CC,GAAW,UACRA,GAAW,WAAaD,GAAgB,QAChE,CAAa,EACGD,GAAuB,SAAW,IAEtC,KAAK,WAAW,OAAO,eAAe,gCAAgCloC,EAAM,IAAI,KAAKkoC,GAChF,IAAKI,IAAiBA,GAAa,IAAI,EACvC,KAAK,IAAI,CAAC,EAAE,EAEjB,MAAM,KAAK,YAAY,gBAAgBtoC,EAAOkoC,EAAsB,EAChF,CACA,CAII,MAAM,cAAe,CAIzB,CAMI,MAAM,eAAgB,CAClB,UAAW7vC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EAGpH,GAFI,CAAC2H,GAED3H,EAAS,QAAQ,SAAW2H,EAAM,QAAQ,OAC1C,SACJ,MAAMuoC,GAAyBlwC,EAAS,QACnC,OAAQuL,IAAM,CAACA,GAAE,iBAAiB,EAClC,OAAQmK,IACF,CAAC/N,EAAM,QAAQ,KAAMwoC,IAChBA,GAAY,OAASz6B,GAAO,cAChCy6B,GAAY,OACR,KAAK,WAAW,OAAO,cAAcz6B,EAAM,GAC/Cy6B,GAAY,aAAez6B,GAAO,YAClCy6B,GAAY,WACR,KAAK,WAAW,OAAO,kBAAkBz6B,EAAM,CAC1D,CACJ,EACD,GAAIw6B,GAAuB,SAAW,GAClCA,GAAuB,OAAS,EAChC,SACJ,MAAME,GAAsBzoC,EAAM,QAAQ,OAAQwoC,IACvC,CAACnwC,EAAS,QAAQ,KAAM0V,IACnB,CAACA,GAAO,mBACZA,GAAO,eAAiBy6B,GAAY,MACpC,KAAK,WAAW,OAAO,cAAcz6B,EAAM,IACvCy6B,GAAY,MAChBz6B,GAAO,aAAey6B,GAAY,YAClC,KAAK,WAAW,OAAO,kBAAkBz6B,EAAM,IAC3Cy6B,GAAY,QACvB,CACJ,EACD,GAAIC,GAAoB,SAAW,GAC/BA,GAAoB,OAAS,EAC7B,SACJ,MAAMC,GAAgBD,GAAoB,CAAC,EAAE,MAAO,EACpDC,GAAc,KAAOH,GAAuB,CAAC,EAAE,aAC/C,KAAK,WAAW,OAAO,eAAe,oBAAoBE,GAAoB,CAAC,EAAE,IAAI,SAASzoC,EAAM,IAAI,SAAS0oC,GAAc,IAAI,GAAG,EACtI,MAAM,KAAK,YAAY,aAAa1oC,EAAOyoC,GAAoB,CAAC,EAAGC,EAAa,CAC5F,CACA,CACI,MAAM,gBAAiB,CACnB,UAAWrwC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAM2oC,GAAc3oC,EAAM,QACrB,OAAQ61B,IAAe,CACxB,MAAMrB,GAAgBn8B,EAAS,QAAQ,KAAM6G,IAAUA,GAAM,OAAS22B,GAAW,IAAI,EACrF,OAAIrB,GACIA,GAAc,cAAgB,GACvB,GACPA,GAAc,WAAaqB,GAAW,UAEtCrB,GAAc,YAAcqB,GAAW,WAEvC,KAAK,WAAW,OAAO,8BAA+B,GACtDrB,GAAc,aAAeqB,GAAW,YAExCrB,GAAc,QAAQ,SACtBqB,GAAW,YAAY,OAChB,GACJ,CAACrB,GAAc,QAAQ,MAAOzmB,IAAW8nB,GAAW,YAAY,QAAQ9nB,GAAO,YAAY,IAAM,EAAE,EAEvG,EACV,CAAA,EACI,IAAI,MAAO8nB,IAAe,CAC3B,KAAK,WAAW,OAAO,eAAe,uBAAuBA,GAAW,IAAI,gBAAgB71B,EAAM,IAAI,EAAE,EACxG,MAAM,KAAK,YAAY,UAAUA,EAAO61B,EAAU,CAClE,CAAa,EACD,MAAM,QAAQ,IAAI8S,EAAW,CACzC,CACQ,GAAI,KAAK,WAAW,QAAQ,OAAS,WAAY,CAC7C,MAAMC,EAAsB,KAAK,YACjC,UAAWvwC,KAAY,KAAK,0BAA2B,CACnD,MAAMwwC,GAAO,KAAK,YAAY,YAAY,KAAMA,IAAS,KAAK,aAAaA,EAAI,IAAM,KAAK,aAAaxwC,CAAQ,CAAC,EAChH,GAAI,CAACwwC,GACD,SACJ,MAAMF,GAAcE,GAAK,QACpB,OAAQhT,IAAe,CACxB,MAAMrB,GAAgBn8B,EAAS,QAAQ,KAAM6G,IAAUA,GAAM,OAAS22B,GAAW,IAAI,EACrF,OAAIrB,GACIA,GAAc,cAAgB,GACvB,GACPA,GAAc,WAAaqB,GAAW,UAEtCrB,GAAc,YAAcqB,GAAW,WAEvC,KAAK,WAAW,OAAO,8BAA+B,GACtDrB,GAAc,aACVqB,GAAW,YAEfrB,GAAc,QAAQ,SACtBqB,GAAW,YAAY,OAChB,GACJ,CAACrB,GAAc,QAAQ,MAAOzmB,IAAW8nB,GAAW,YAAY,QAAQ9nB,GAAO,YAAY,IAAM,EAAE,EAEvG,EACV,CAAA,EACI,IAAI,MAAO8nB,IAAe,CAC3B,KAAK,WAAW,OAAO,eAAe,uBAAuBA,GAAW,IAAI,eAAegT,GAAK,IAAI,EAAE,EACtG,MAAMD,EAAoB,cAAcC,GAAMhT,EAAU,CAC5E,CAAiB,EACD,MAAM,QAAQ,IAAI8S,EAAW,CAC7C,CACA,CACA,CACI,MAAM,eAAgB,CAElB,GAAI,cAAY,cAAc,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,gBAE5C,UAAWtwC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAM8oC,GAAY9oC,EAAM,OAAO,OAAQ+oC,IAC5B,CAAC1wC,EAAS,OAAO,KAAMs8B,IAAkBA,GAAc,OAASoU,GAAW,IAAI,CACzF,EACGD,GAAU,SAAW,IAEzB,KAAK,WAAW,OAAO,eAAe,kCAAkCA,GACnE,IAAKxnC,IAAU,IAAIA,GAAM,IAAI,GAAG,EAChC,KAAK,IAAI,CAAC,gBAAgBtB,EAAM,IAAI,GAAG,EAC5C,MAAM,KAAK,YAAY,qBAAqBA,EAAO8oC,EAAS,EACxE,CACA,CACI,MAAM,gCAAiC,CACnC,UAAWzwC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAMgpC,GAAmBhpC,EAAM,QAAQ,OAAQipC,IACnCA,GAAY,YAAY,OAAS,GACrC,CAAC5wC,EAAS,QAAQ,KAAMq8B,IAAmBA,GAAe,OAASuU,GAAY,IAAI,CAC1F,EACGD,GAAiB,SAAW,IAEhC,KAAK,WAAW,OAAO,eAAe,mCAAmCA,GACpE,IAAK3nC,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,CAAC,gBAAgBrB,EAAM,IAAI,GAAG,EAC5C,MAAM,KAAK,YAAY,sBAAsBA,EAAOgpC,EAAgB,EAChF,CACA,CACI,MAAM,mBAAoB,CAEtB,GAAM,KAAK,WAAW,OAAO,QAAQ,OAAS,WAE9C,UAAW3wC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAMkpC,GAAgBlpC,EAAM,WAAW,OAAQmpC,IACpC,CAAC9wC,EAAS,WAAW,KAAMu8B,IAAsBA,GAAkB,OAASuU,GAAe,IAAI,CACzG,EACGD,GAAc,SAAW,IAE7B,KAAK,WAAW,OAAO,eAAe,sCAAsCA,GACvE,IAAK3nC,IAAc,IAAIA,GAAU,IAAI,GAAG,EACxC,KAAK,IAAI,CAAC,gBAAgBvB,EAAM,IAAI,GAAG,EAC5C,MAAM,KAAK,YAAY,yBAAyBA,EAAOkpC,EAAa,EAChF,CACA,CAII,MAAM,oBAAqB,CACvB,UAAW7wC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAK2H,IAED,YAAY,cAAc,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,YAAY,CACpD,MAAMopC,GAAa/wC,EAAS,QAC5B,MAAM,KAAK,YAAY,mBAAmB2H,EAAOopC,EAAU,CAC3E,CACA,CACA,CAMI,MAAM,iBAAkB,CACpB,UAAW/wC,KAAY,KAAK,sBAAuB,CAG/C,GADmB,KAAK,YAAY,aAAa,KAAM2H,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EAErH,SACJ,KAAK,WAAW,OAAO,eAAe,yBAAyB,KAAK,aAAaA,CAAQ,CAAC,EAAE,EAE5F,MAAM2H,GAAQ,MAAM,OAAO3H,EAAU,KAAK,WAAW,MAAM,EAC3D,MAAM,KAAK,YAAY,YAAY2H,GAAO,GAAO,EAAK,EACtD,KAAK,YAAY,aAAa,KAAKA,EAAK,CACpD,CACA,CACI,MAAM,aAAc,CAChB,UAAW3H,KAAY,KAAK,0BAA2B,CAYnD,GAVkB,KAAK,YAAY,YAAY,KAAMwwC,IAAS,CAC1D,MAAMQ,GAAiB,OAAOR,GAAK,YAAe,SAC5CA,GAAK,WAAW,KAAI,EACpBA,GAAK,WAAW,KAAK,UAAU,EAAE,SAAU,EAC3CS,GAAqB,OAAOjxC,EAAS,YAAe,SACpDA,EAAS,WAAW,KAAI,EACxBA,EAAS,WAAW,KAAK,UAAU,EAAE,SAAU,EACrD,OAAQ,KAAK,aAAawwC,EAAI,IAAM,KAAK,aAAaxwC,CAAQ,GAC1DgxC,KAAmBC,EACvC,CAAa,EAEG,SACJ,KAAK,WAAW,OAAO,eAAe,wBAAwB,KAAK,aAAajxC,CAAQ,CAAC,EAAE,EAE3F,MAAMwwC,GAAO,KAAK,OAAOxwC,EAAU,KAAK,WAAW,MAAM,EACzD,MAAM,KAAK,YAAY,WAAWwwC,GAAM,EAAI,EAC5C,KAAK,YAAY,YAAY,KAAKA,EAAI,CAClD,CACA,CACI,MAAM,cAAe,CACjB,MAAMU,EAAe,CAAE,EACjBC,EAA4B,KAAK,0BAEjCC,GAAiB,IAAI,IAC3B,UAAWZ,MAAQ,KAAK,YAAY,YAAa,CAC7C,MAAMa,GAAeF,EAA0B,KAAMnxC,IAC1C,KAAK,aAAawwC,EAAI,IAAM,KAAK,aAAaxwC,EAAQ,CAChE,EACGqxC,IACAD,GAAe,IAAIZ,GAAMa,EAAY,CAErD,CAEQ,UAAWb,MAAQ,KAAK,YAAY,YAAa,CAC7C,MAAMa,GAAeD,GAAe,IAAIZ,EAAI,EAC5C,GAAI,CAACa,GACD,SAEJ,MAAML,GAAiB,OAAOR,GAAK,YAAe,SAC5CA,GAAK,WAAW,KAAI,EACpBA,GAAK,WAAW,KAAK,UAAU,EAAE,SAAU,EAC3CS,GAAqB,OAAOI,GAAa,YAAe,SACxDA,GAAa,WAAW,KAAI,EAC5BA,GAAa,WAAW,KAAK,UAAU,EAAE,SAAU,EACrDL,KAAmBC,KAEvB,KAAK,WAAW,OAAO,eAAe,yBAAyBT,GAAK,IAAI,EAAE,EAE1EU,EAAa,KAAKV,EAAI,EAClC,CAEQ,MAAMc,GAAuBd,IAAS,CAElC,MAAMa,GAAeD,GAAe,IAAIZ,EAAI,EAC5C,IAAIe,GAAuB,CAACf,EAAI,EAEhC,GAAI,CAACa,GACD,OAAOE,GAGX,SAAW,CAACC,GAAaC,EAAiB,IAAIL,GAAe,QAAO,EAE5DI,KAAgBhB,IAIhBiB,GAAgB,YACfA,GAAgB,UAAU,IAAIJ,GAAa,MAAM,GAC9CI,GAAgB,UAAU,IAAIJ,GAAa,IAAI,KAEnDE,GAAuBA,GAAqB,OAAOD,GAAoBE,EAAW,CAAC,GAI3F,OAAOD,EACV,EAEKG,GAA+B,IAAI,IAEzCR,EACK,IAAKV,IAASc,GAAoBd,EAAI,CAAC,EAEvC,OAAO,CAACmB,GAAKC,KACPD,GAAI,OAAOC,EAAO,EAC1B,CAAE,CAAA,EAEA,KAAK,CAAC9jC,GAAGf,KACH,UAAU,gBAAgBqkC,GAAe,IAAItjC,EAAC,EAAGsjC,GAAe,IAAIrkC,EAAC,CAAC,CAChF,EAEI,SAAS,EAEd,UAAWyjC,MAAQkB,GACf,MAAM,KAAK,YAAY,SAASlB,EAAI,EAExC,KAAK,YAAY,YAAc,KAAK,YAAY,YAAY,OAAQA,IAAS,CAACkB,GAA6B,IAAIlB,EAAI,CAAC,CAC5H,CAKI,MAAM,oBAAqB,CACvB,UAAWxwC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SAEJ,MAAMkqC,GAAsBlqC,EAAM,QAAQ,OAAQwoC,IACvC,CAACnwC,EAAS,QAAQ,KAAMo8B,IAAmBA,GAAe,mBAC7DA,GAAe,eAAiB+T,GAAY,IAAI,CACvD,EACG0B,GAAoB,SAAW,IAEnC,KAAK,WAAW,OAAO,eAAe,sBAAsBlqC,EAAM,IAAI,KAClEkqC,GAAoB,IAAKn8B,IAAWA,GAAO,IAAI,EAAE,KAAK,IAAI,CAAC,EAE/D,MAAM,KAAK,YAAY,YAAY/N,EAAOkqC,EAAmB,EACzE,CACA,CAKI,MAAM,eAAgB,CAClB,UAAW7xC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SAEJ,MAAMmqC,GAAqB9xC,EAAS,QAAQ,OAAQo8B,IACxC,CAACA,GAAe,mBACpB,CAACz0B,EAAM,QAAQ,KAAMwoC,IAAgBA,GAAY,OAC7C/T,GAAe,YAAY,CACtC,EACD,GAAI0V,GAAmB,SAAW,EAC9B,SAGJ,MAAMC,GADwB,KAAK,oCAAoCD,EAAkB,EAC3C,IAAKtc,IAAW,IAAI,YAAYA,EAAM,CAAC,EACjFuc,GAAgB,SAAW,IAE/B,KAAK,WAAW,OAAO,eAAe,sBAClCD,GACK,IAAKp8B,IAAWA,GAAO,YAAY,EACnC,KAAK,IAAI,CAAC,EACnB,MAAM,KAAK,YAAY,WAAW/N,EAAOoqC,EAAe,EACpE,CACA,CAII,MAAM,mBAAoB,CACtB,UAAW/xC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAMqqC,GAAyBhyC,EAAS,QAAQ,OAAQ0V,IAAWA,GAAO,SAAS,EAEnF,GAD4B/N,EAAM,QAAQ,OAAQ+N,IAAWA,GAAO,SAAS,EACrD,SAAWs8B,GAAuB,QACtDA,GAAuB,OAAS,EAAG,CACnC,MAAMC,GAAwBD,GAAuB,IAAKE,IAC/C,IAAI,YAAY,WAAW,yBAAyBA,GAAuB,KAAK,WAAW,MAAM,CAAC,CAC5G,EACD,MAAM,KAAK,YAAY,kBAAkBvqC,EAAOsqC,EAAqB,CACrF,CACA,CACA,CAKI,MAAM,oBAAqB,CACvB,UAAWjyC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAMwqC,GAAiB,KAAK,WAAW,OAAO,mBAAmBxqC,EAAM,QAAS3H,EAAS,OAAO,EAChG,GAAImyC,GAAe,SAAW,EAC1B,SAEJ,UAAWC,MAAiBD,GACxB,MAAM,KAAK,gCAAgC,KAAK,aAAanyC,CAAQ,EAAGoyC,GAAc,YAAY,EAGtG,UAAWA,MAAiBD,GACxB,MAAM,KAAK,2BAA2B,KAAK,aAAanyC,CAAQ,EAAGoyC,GAAc,YAAY,EAIjG,GAAI,EAAE,YAAY,cAAc,KAAK,WAAW,MAAM,GAClD,KAAK,WAAW,OAAO,QAAQ,OAAS,gBACxC,KAAK,WAAW,OAAO,QAAQ,OAAS,WACxC,UAAWA,MAAiBD,GACxB,MAAM,KAAK,2BAA2B,KAAK,aAAanyC,CAAQ,EAAGoyC,GAAc,YAAY,EAIrG,MAAMC,GAAwBF,GAAe,IAAKC,IAAkB,CAChE,MAAME,GAAiB3qC,EAAM,QAAQ,KAAM+N,IAAWA,GAAO,OAAS08B,GAAc,YAAY,EAC1FG,GAAwB,WAAW,yBAAyBH,GAAe,KAAK,WAAW,MAAM,EACjGI,GAAiB,IAAI,YAAYD,EAAqB,EAC5D,MAAO,CACH,UAAWD,GACX,UAAWE,EACd,CACjB,CAAa,EACGH,GAAsB,SAAW,IAErC,KAAK,WAAW,OAAO,eAAe,uBAAuB1qC,EAAM,IAAI,gBACnEwqC,GACK,IAAKz8B,IAAWA,GAAO,YAAY,EACnC,KAAK,IAAI,CAAC,EACnB,MAAM,KAAK,YAAY,cAAc/N,EAAO0qC,EAAqB,EAC7E,CACA,CAII,MAAM,kBAAmB,CACrB,UAAWryC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAM8qC,GAAazyC,EAAS,QACvB,OAAQm8B,IAAkB,CAACx0B,EAAM,QAAQ,KAAM61B,IAAeA,GAAW,OAASrB,GAAc,IAAI,GAAKA,GAAc,cAAgB,EAAI,EAC3I,IAAKA,IAAkB,WAAW,OAAOA,EAAa,CAAC,EACxDsW,GAAW,SAAW,IAE1B,KAAK,WAAW,OAAO,eAAe,sBAAsBA,GACvD,IAAK5rC,IAAU,IAAIA,GAAM,IAAI,GAAG,EAChC,KAAK,IAAI,CAAC,cAAcc,EAAM,IAAI,GAAG,EAC1C,MAAM,KAAK,YAAY,cAAcA,EAAO8qC,EAAU,EAClE,CACA,CAII,MAAM,sBAAuB,CAEzB,GAAI,KAAK,WAAW,QAAQ,OAAS,YACjC,CAAC,YAAY,iBAAiB,KAAK,WAAW,MAAM,EACpD,OAEJ,MAAMlC,EAAuB,KAAK,YAClC,UAAWvwC,KAAY,KAAK,0BAA2B,CAEnD,MAAMwwC,GAAO,KAAK,YAAY,YAAY,KAAMA,IAAS,CACrD,MAAMQ,GAAiB,OAAOR,GAAK,YAAe,SAC5CA,GAAK,WAAW,KAAI,EACpBA,GAAK,WAAW,KAAK,UAAU,EAAE,SAAU,EAC3CS,GAAqB,OAAOjxC,EAAS,YAAe,SACpDA,EAAS,WAAW,KAAI,EACxBA,EAAS,WAAW,KAAK,UAAU,EAAE,SAAU,EACrD,OAAQ,KAAK,aAAawwC,EAAI,IAAM,KAAK,aAAaxwC,CAAQ,GAC1DgxC,KAAmBC,EACvC,CAAa,EACD,GAAI,CAACT,IAAQ,CAACA,GAAK,aACf,SACJ,MAAMiC,GAAazyC,EAAS,QACvB,OAAQm8B,IAAkB,CAACqU,GAAK,QAAQ,KAAMhT,IAAeA,GAAW,OAASrB,GAAc,IAAI,GAAKA,GAAc,cAAgB,EAAI,EAC1I,IAAKA,IAAkB,WAAW,OAAOA,EAAa,CAAC,EACxDsW,GAAW,SAAW,IAE1B,KAAK,WAAW,OAAO,eAAe,sBAAsBA,GACvD,IAAK5rC,IAAU,IAAIA,GAAM,IAAI,GAAG,EAChC,KAAK,IAAI,CAAC,aAAa2pC,GAAK,IAAI,GAAG,EACxC,MAAMD,EAAoB,kBAAkBC,GAAMiC,EAAU,EACxE,CACA,CACI,MAAM,iBAAkB,CAEpB,GAAI,cAAY,cAAc,KAAK,WAAW,MAAM,GAChD,KAAK,WAAW,OAAO,QAAQ,OAAS,gBAE5C,UAAWzyC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAM+qC,GAAY1yC,EAAS,OACtB,OAAQs8B,IAAkB,CAAC30B,EAAM,OAAO,KAAM+oC,IAAeA,GAAW,OAASpU,GAAc,IAAI,CAAC,EACpG,IAAKA,IAAkB,WAAW,OAAOA,EAAa,CAAC,EACxDoW,GAAU,SAAW,IAEzB,KAAK,WAAW,OAAO,eAAe,iCAAiCA,GAClE,IAAK7rC,IAAU,IAAIA,GAAM,IAAI,GAAG,EAChC,KAAK,IAAI,CAAC,cAAcc,EAAM,IAAI,GAAG,EAC1C,MAAM,KAAK,YAAY,uBAAuBA,EAAO+qC,EAAS,EAC1E,CACA,CAII,MAAM,kCAAmC,CACrC,UAAW1yC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAMgpC,GAAmB3wC,EAAS,QAC7B,OAAQq8B,IAAmBA,GAAe,QAAQ,OAAS,GAC5D,CAAC10B,EAAM,QAAQ,KAAMipC,IAAgBA,GAAY,OAASvU,GAAe,IAAI,CAAC,EAC7E,IAAKA,IAAmB,YAAY,OAAOA,EAAc,CAAC,EAC3DsU,GAAiB,SAAW,IAEhC,KAAK,WAAW,OAAO,eAAe,kCAAkCA,GACnE,IAAK3nC,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,CAAC,cAAcrB,EAAM,IAAI,GAAG,EAC1C,MAAM,KAAK,YAAY,wBAAwBA,EAAOgpC,EAAgB,EAClF,CACA,CAII,MAAM,qBAAsB,CAExB,GAAM,KAAK,WAAW,OAAO,QAAQ,OAAS,WAE9C,UAAW3wC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAMgrC,GAAgB3yC,EAAS,WAC1B,OAAQu8B,IAAsB,CAAC50B,EAAM,WAAW,KAAMmpC,IAAmBA,GAAe,OAASvU,GAAkB,IAAI,CAAC,EACxH,IAAKA,IAAsB,eAAe,OAAOA,EAAiB,CAAC,EACpEoW,GAAc,SAAW,IAE7B,KAAK,WAAW,OAAO,eAAe,qCAAqCA,GACtE,IAAKzpC,IAAc,IAAIA,GAAU,IAAI,GAAG,EACxC,KAAK,IAAI,CAAC,cAAcvB,EAAM,IAAI,GAAG,EAC1C,MAAM,KAAK,YAAY,2BAA2BA,EAAOgrC,EAAa,EAClF,CACA,CAII,MAAM,mBAAoB,CACtB,UAAW3yC,KAAY,KAAK,sBAAuB,CAC/C,MAAM2H,EAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAM,KAAK,aAAa3H,CAAQ,CAAC,EACpH,GAAI,CAAC2H,EACD,SACJ,MAAMirC,GAAU5yC,EAAS,YAAY,OAAQw8B,IAClC,CAAC70B,EAAM,YAAY,KAAMsoC,IAAiBA,GAAa,OAASzT,GAAW,MAC9E,KAAK,aAAayT,EAAY,IAC1B,KAAK,aAAazT,GAAW,wBAAwB,CAAC,CACjE,EACD,GAAIoW,GAAQ,SAAW,EACnB,SACJ,MAAMC,GAAgBD,GAAQ,IAAKE,IAAuB,gBAAgB,OAAOA,GAAoB,KAAK,WAAW,MAAM,CAAC,EAC5H,KAAK,WAAW,OAAO,eAAe,4BAA4BF,GAC7D,IAAKl1C,IAAQA,GAAI,IAAI,EACrB,KAAK,IAAI,CAAC,cAAciK,EAAM,IAAI,GAAG,EAC1C,MAAM,KAAK,YAAY,kBAAkBA,EAAOkrC,EAAa,CACzE,CACA,CAII,MAAM,gCAAgChuB,EAAWmB,EAAY,CACzD,MAAMre,GAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAMkd,CAAS,EAClG,GAAI,CAACld,GACD,OACJ,MAAMorC,GAAe,CAAE,EACjBC,GAAmBrrC,GAAM,YAAY,KAAM60B,IAAeA,GAAW,YAAY,QAAQxW,CAAU,IAAM,EAAE,EACjH,GAAIgtB,GAAkB,CAClB,MAAMC,GAActrC,GAAM,MAAO,EACjCsrC,GAAY,YAAc,CAACD,EAAgB,EAC3CD,GAAa,KAAKE,EAAW,EAC7BtrC,GAAM,iBAAiBqrC,EAAgB,CACnD,CACQ,UAAWE,MAAe,KAAK,YAAY,aAAc,CACrD,MAAMC,GAAoBD,GAAY,YAAY,OAAQ1W,IAC9C,KAAK,aAAaA,EAAU,IAAM3X,GACtC2X,GAAW,sBAAsB,QAAQxW,CAAU,IAC/C,EACX,EACD,GAAImtB,GAAkB,OAAS,EAAG,CAC9B,MAAMF,GAAcC,GAAY,MAAO,EACvCD,GAAY,YAAcE,GAC1BJ,GAAa,KAAKE,EAAW,EAC7BE,GAAkB,QAASC,IAAqBF,GAAY,iBAAiBE,EAAgB,CAAC,CAC9G,CACA,CACQ,GAAIL,GAAa,OAAS,EACtB,UAAWM,MAAeN,GACtB,KAAK,WAAW,OAAO,eAAe,oCAAoCM,GAAY,IAAI,KAAKA,GAAY,YACtG,IAAK7W,IAAeA,GAAW,IAAI,EACnC,KAAK,IAAI,CAAC,EAAE,EACjB,MAAM,KAAK,YAAY,gBAAgB6W,GAAaA,GAAY,WAAW,CAG3F,CAII,MAAM,2BAA2BxuB,EAAWmB,EAAY,CACpD,MAAMre,GAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAMkd,CAAS,EAClG,GAAI,CAACld,GACD,OACJ,MAAM2rC,GAAiB3rC,GAAM,QAAQ,OAAQd,IAAUA,GAAM,YAAY,OAAS,GAC9EA,GAAM,YAAY,QAAQmf,CAAU,IAAM,EAAE,EAC5CstB,GAAe,SAAW,IAE9B,KAAK,WAAW,OAAO,eAAe,gCAAgCzuB,CAAS,MAAMmB,CAAU,MAAMstB,GAChG,IAAKzsC,IAAUA,GAAM,IAAI,EACzB,KAAK,IAAI,CAAC,EAAE,EACjB,MAAM,KAAK,YAAY,YAAYc,GAAO2rC,EAAc,EAChE,CAII,MAAM,2BAA2BzuB,EAAWmB,EAAY,CACpD,MAAMre,GAAQ,KAAK,YAAY,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAMkd,CAAS,EAClG,GAAI,CAACld,GACD,OACJ,MAAM4rC,GAAiB5rC,GAAM,QAAQ,OAAQqB,IAAWA,GAAO,YAAY,OAAS,GAChFA,GAAO,YAAY,QAAQgd,CAAU,IAAM,EAAE,EAC7CutB,GAAe,SAAW,IAE9B,KAAK,WAAW,OAAO,eAAe,2CAA2C1uB,CAAS,MAAMmB,CAAU,MAAMutB,GAC3G,IAAKvqC,IAAWA,GAAO,IAAI,EAC3B,KAAK,IAAI,CAAC,EAAE,EACjB,MAAM,KAAK,YAAY,sBAAsBrB,GAAO4rC,EAAc,EAC1E,CAII,oCAAoCztB,EAAS,CACzC,OAAOA,EAAQ,IAAKsW,GAAmB,WAAW,yBAAyBA,EAAgB,KAAK,WAAW,MAAM,CAAC,CAC1H,CAII,MAAM,2BAA2BtY,EAAa,CAC1C,MAAM4Z,EAAS,KAAK,cACd5mB,GAAW,KAAK,gBAChB08B,GAAuB,KAAK,WAAW,OAAO,eAAe,KAAK,WAAW,kBAAmB9V,EAAQ5mB,EAAQ,EAIhH28B,GAAY,KAAK,WAAW,OAAO,QAAQ,OAAS,UAC1D,MAAM3vB,EAAY,YAAY,IAAI,MAAM,CACpC,SAAUhN,GACV,OAAQ4mB,EACR,KAAM8V,GACN,QAAS,CACL,CACI,KAAM,OACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,YAC7B,CAAqB,EACD,WAAY,GACZ,UAAAC,EACH,EACD,CACI,KAAM,WACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,gBAC7B,CAAqB,EACD,WAAY,GACZ,UAAAA,EACH,EACD,CACI,KAAM,SACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,cAC7B,CAAqB,EACD,WAAY,GACZ,UAAAA,EACH,EACD,CACI,KAAM,QACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,aAC7B,CAAqB,EACD,WAAY,GACZ,UAAAA,EACH,EACD,CACI,KAAM,OACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,YAC7B,CAAqB,EACD,WAAY,GACZ,UAAAA,EACH,EACD,CACI,KAAM,QACN,KAAM,KAAK,WAAW,OAAO,cAAc,CACvC,KAAM,KAAK,WAAW,OAAO,gBACxB,aAC7B,CAAqB,EACD,WAAY,GACZ,UAAAA,EACH,CACJ,CACJ,CAAA,EAAG,EAAI,CAChB,CACA,CCh5BO,MAAM,oBAAqB,CAI9B,YAAY7xB,EAAY,CAIpB,KAAK,aAAe,GAIpB,KAAK,YAAc,GAInB,KAAK,mBAAqB,SAO1B,KAAK,mBAAqB,CACtB,MACA,UACA,UACA,WACA,YACA,SACA,mBACA,OACA,OACA,UACA,YACA,UACA,oBACA,QACA,mBACA,WACA,OACA,OACA,OACA,OACA,OACA,SACA,mBACA,QACA,OACA,UACA,UACA,UACA,OACA,OACA,WACA,MACH,EAID,KAAK,qBAAuB,CAAC,uBAAuB,EAIpD,KAAK,sBAAwB,CACzB,YACA,UACA,oBACA,QACA,mBACA,WACA,OACA,OACA,MACH,EAID,KAAK,aAAe,CAAE,EAItB,KAAK,yBAA2B,CAC5B,OACA,SACA,mBACA,QACA,OACA,UACA,UACA,OACA,OACA,UACH,EAID,KAAK,qBAAuB,CACxB,OACA,SACA,mBACA,QACA,OACA,UACA,SACH,EAKD,KAAK,gBAAkB,CACnB,WAAY,WACZ,kBAAmB,kBACnB,WAAY,WACZ,kBAAmB,kBACnB,WAAY,WACZ,mBAAoB,GACpB,QAAS,UACT,UAAW,UACX,YAAa,UACb,cAAe,UACf,mBAAoB,SACpB,QAAS,MACT,gBAAiB,UACjB,UAAW,SACX,cAAe,MACf,WAAY,OACZ,YAAa,OACb,aAAc,UACd,iBAAkB,UAClB,eAAgB,UAChB,cAAe,UACf,aAAc,UACd,cAAe,MAClB,EACD,KAAK,gBAAkB,CACnB,QAAS,GACT,sBAAuB,EAC1B,EAOD,KAAK,kBAAoB,CAAE,EAC3B,KAAK,WAAaA,EAClB,KAAK,QAAUA,EAAW,QAC1B,KAAK,SAAW,YAAY,mBAAmB,KAAK,OAAO,EAAE,QACrE,CAOI,MAAM,SAAU,CACZ,KAAK,mBAAqB,MAAM,KAAK,yBAA0B,CACvE,CAII,cAAe,CACX,OAAO,QAAQ,QAAS,CAChC,CAII,MAAM,YAAa,CACf,OAAO,IAAI,QAAQ,CAACopB,EAAIC,IAAS,CAC7B,KAAK,YAAc,OACnB,KAAK,mBAAmB,MAAOvM,IAAQA,GAAMuM,EAAKvM,EAAG,EAAIsM,GAAI,CACzE,CAAS,CACT,CACI,sBAAuB,CACnB,MAAO,CAAC,CAAC,OAAO,KAAK,KAAK,iBAAiB,EAAE,MACrD,CACI,wCAAwCr2B,EAAM,CAC1C,OAAO,KAAK,oBAAoBA,CAAI,GAAG,YAC/C,CACI,wCAAwC++B,EAAQ,CAC5C,OAAO,OAAO,OAAO,KAAK,iBAAiB,EAAE,KAAK,CAAC,CAAE,aAAAC,CAAc,IAAKD,IAAWC,CAAY,GAAG,sBAC1G,CAII,qBAAsB,CAClB,OAAO,IAAI,mBAAmB,KAAK,UAAU,CACrD,CAII,uBAAuBh2C,EAAOy+B,EAAgB,CAG1C,OAFIA,EAAe,cACfz+B,EAAQ,uBAAuB,YAAYy+B,EAAe,YAAaz+B,CAAK,GAC5EA,GAAU,KACHA,EACPy+B,EAAe,OAAS,SACxBA,EAAe,OAAS,UACjBz+B,IAAU,GAAO,EAAI,EAEvBy+B,EAAe,OAAS,OACtB,UAAU,sBAAsBz+B,CAAK,EAEvCy+B,EAAe,OAAS,OACtB,UAAU,sBAAsBz+B,CAAK,EAEvCy+B,EAAe,OAAS,YAC7BA,EAAe,OAAS,KAGjB,UAAU,6BAA6Bz+B,CAAK,EAE9Cy+B,EAAe,OAAS,QAC7BA,EAAe,OAAS,cACjB,UAAU,mBAAmBz+B,CAAK,EAEpCy+B,EAAe,OAAS,eACtB,UAAU,oBAAoBz+B,CAAK,EAErCy+B,EAAe,OAAS,cACtB,UAAU,mBAAmBz+B,CAAK,EAEtCA,CACf,CAII,qBAAqBA,EAAOy+B,EAAgB,CACxC,OAAIz+B,GAAU,KACHy+B,EAAe,YAChB,uBAAuB,cAAcA,EAAe,YAAaz+B,CAAK,EACtEA,GACNy+B,EAAe,OAAS,SACxBA,EAAe,OAAS,UACxBz+B,EAAQ,EAAAA,EAEHy+B,EAAe,OAAS,YAC7BA,EAAe,OAAS,MAUpBz+B,GAAS,OAAOA,GAAU,WAMtB,gCAAgC,KAAKA,CAAK,IAC1CA,EAAQA,EAAM,QAAQ,IAAK,GAAG,GAE9B,oDAAoD,KAAKA,CAAK,IAC9DA,GAAS,MAGjBA,EAAQ,UAAU,sBAAsBA,CAAK,GAExCy+B,EAAe,OAAS,OAC7Bz+B,EAAQ,UAAU,sBAAsBA,CAAK,EAExCy+B,EAAe,OAAS,OAC7Bz+B,EAAQ,UAAU,kBAAkBA,CAAK,EAEpCy+B,EAAe,OAAS,QAC7BA,EAAe,OAAS,cACxBz+B,EAAQ,UAAU,mBAAmBA,CAAK,EAErCy+B,EAAe,OAAS,eAC7Bz+B,EAAQ,UAAU,oBAAoBA,CAAK,EAEtCy+B,EAAe,OAAS,cAC7Bz+B,EAAQ,UAAU,mBAAmBA,EAAOy+B,CAAc,EAErDA,EAAe,OAAS,SAE7Bz+B,EAAS,MAAM,CAACA,CAAK,EAAsBA,EAAlB,SAASA,CAAK,GAEvCy+B,EAAe,cACfz+B,EAAQ,uBAAuB,cAAcy+B,EAAe,YAAaz+B,CAAK,GAC3EA,EACf,CAKI,0BAA0BiX,EAAKoC,EAAY48B,GAAkB,CACzD,MAAMC,GAAoB,OAAO,KAAKD,EAAgB,EAAE,IAAKl2C,IAErD,OAAOk2C,GAAiBl2C,EAAG,GAAM,UAC1Bk2C,GAAiBl2C,EAAG,IAAM,GAAO,EAAI,EAE5Ck2C,GAAiBl2C,EAAG,YAAa,KAC1B,UAAU,6BAA6Bk2C,GAAiBl2C,EAAG,CAAC,EAEhEk2C,GAAiBl2C,EAAG,CAC9B,EACD,MAAI,CAACsZ,GAAc,CAAC,OAAO,KAAKA,CAAU,EAAE,OACjC,CAACpC,EAAKi/B,EAAiB,GAClCj/B,EAAMA,EAAI,QAAQ,8BAA+B,CAACk/B,GAAMC,GAASr2C,KAAQ,CACrE,GAAI,CAACsZ,EAAW,eAAetZ,EAAG,EAC9B,OAAOo2C,GAEX,IAAIn2C,GAAQqZ,EAAWtZ,EAAG,EAC1B,OAAIq2C,GACOp2C,GACF,IAAKmiB,KACN+zB,GAAkB,KAAK/zB,EAAC,EACjB,KAAK,gBAAgBpiB,GAAKm2C,GAAkB,OAAS,CAAC,EAChE,EACI,KAAK,IAAI,EAEd,OAAOl2C,IAAU,WACVA,GAAO,EAET,OAAOA,IAAU,SACf,OAAOA,EAAK,EAInB,OAAOA,IAAU,WACjBk2C,GAAkB,KAAK,CAACl2C,EAAK,EACtB,KAAK,gBAAgBD,GAAKm2C,GAAkB,OAAS,CAAC,GAE7Dl2C,cAAiB,MACjBk2C,GAAkB,KAAK,UAAU,6BAA6Bl2C,EAAK,CAAC,EAC7D,KAAK,gBAAgBD,GAAKm2C,GAAkB,OAAS,CAAC,IAEjEA,GAAkB,KAAKl2C,EAAK,EACrB,KAAK,gBAAgBD,GAAKm2C,GAAkB,OAAS,CAAC,EACzE,CAAS,EACM,CAACj/B,EAAKi/B,EAAiB,EACtC,CAII,OAAO7tB,EAAY,CACf,MAAO,IAAMA,EAAa,GAClC,CAOI,eAAesC,EAAWoV,EAAQ5mB,GAAU,CACxC,OAAOwR,CACf,CAII,eAAe9qB,EAAQ,CACnB,MAAMw2C,EAAiB,KAAK,SACtBC,GAAe,OACrB,GAAI,gBAAgB,QAAQz2C,CAAM,GAAK,gBAAgB,OAAOA,CAAM,EAAG,CACnE,MAAM0S,GAAS,KAAK,eAAe1S,EAAO,OACpC,IAAIA,EAAO,MAAM,MAAMA,EAAO,IAAI,IAClCA,EAAO,IAAI,EACjB,MAAO,CACH,SAAUA,EAAO,UAAY0S,GAAO,UAAY8jC,EAChD,OAAQx2C,EAAO,QAAU0S,GAAO,QAAU+jC,GAC1C,UAAW/jC,GAAO,SACrB,CACb,CACQ,GAAI,gBAAgB,kBAAkB1S,CAAM,EAAG,CAC3C,MAAM0S,GAAS,KAAK,eAAe1S,EAAO,mBAAmB,EAC7D,MAAO,CACH,SAAUA,EAAO,oBACb0S,GAAO,UACP8jC,EACJ,OAAQx2C,EAAO,kBAAoB0S,GAAO,QAAU+jC,GACpD,UAAW/jC,GAAO,SACrB,CACb,CACQ,GAAI,gBAAgB,iBAAiB1S,CAAM,EAEvC,MAAO,CACH,SAAUA,EAAO,UAAYw2C,EAC7B,OAAQx2C,EAAO,QAAUy2C,GACzB,UAAWz2C,EAAO,SACrB,EAEL,MAAMkN,GAAQlN,EAAO,MAAM,GAAG,EAC9B,OAAIkN,GAAM,SAAW,EACV,CACH,SAAUA,GAAM,CAAC,GAAKspC,EACtB,OAAQtpC,GAAM,CAAC,GAAKupC,GACpB,UAAWvpC,GAAM,CAAC,CACrB,EAEIA,GAAM,SAAW,EAGf,CACH,SAHa,KAAK,wCAAwCA,GAAM,CAAC,CAAC,GAClEspC,EAGA,OAAQtpC,GAAM,CAAC,EACf,UAAWA,GAAM,CAAC,CACrB,EAGM,CACH,SAAUspC,EACV,OAAQC,GACR,UAAWz2C,CACd,CAEb,CAII,cAAckY,EAAQ,CAClB,OAAIA,EAAO,OAAS,QAAUA,EAAO,OAAS,MACnC,UAEFA,EAAO,OAAS,OACd,UAEFA,EAAO,OAAS,KACd,WAEFA,EAAO,OAAS,QACd,UAEFA,EAAO,OAAS,OACd,UAEFA,EAAO,OAAS,gBAGhBA,EAAO,OAAS,cAFd,OAKFA,EAAO,OAAS,cACd,UAGAA,EAAO,MAAQ,EAElC,CAII,iBAAiB0mB,EAAgB,CAC7B,MAAM8X,EAAe9X,EAAe,QACpC,GAAI,OAAO8X,GAAiB,SACxB,MAAO,GAAKA,EAEhB,GAAI,OAAOA,GAAiB,UACxB,OAAOA,EAAe,IAAM,IAEhC,GAAI,OAAOA,GAAiB,WACxB,OAAOA,EAAc,EAEzB,GAAI,OAAOA,GAAiB,SACxB,MAAO,IAAIA,CAAY,IAE3B,GAAIA,GAAiB,KAGrB,MAAO,GAAGA,CAAY,EAC9B,CAII,kBAAkBx+B,EAAQ,CACtB,OAAOA,EAAO,eAAe,QAAQ,KAAMy+B,GAAOA,EAAG,QAAQ,SAAW,GAAKA,EAAG,QAAQ,CAAC,IAAMz+B,CAAM,CAC7G,CAII,gBAAgBA,EAAQ,CACpB,OAAOA,EAAO,OAASA,EAAO,OAAO,SAAU,EAAG,EAC1D,CAII,eAAeA,EAAQ,CACnB,IAAI7B,EAAO6B,EAAO,KAClB,OAAIA,EAAO,KACA,WAEPA,EAAO,OACP7B,GAAQ,IAAM6B,EAAO,OAAS,IAEzBA,EAAO,YAAc,MAC1BA,EAAO,YAAc,QACrBA,EAAO,QAAU,MACjBA,EAAO,QAAU,OACjB7B,GAAQ,IAAM6B,EAAO,UAAY,IAAMA,EAAO,MAAQ,IAEjDA,EAAO,YAAc,MAC1BA,EAAO,YAAc,SACrB7B,GAAQ,IAAM6B,EAAO,UAAY,KAEjCA,EAAO,UACP7B,GAAQ,UACLA,EACf,CAMI,wBAAyB,CACrB,OAAO,QAAQ,QAAS,CAChC,CAMI,uBAAwB,CACpB,OAAO,QAAQ,QAAS,CAChC,CAII,mBAAmB7T,EAAUmpB,EAAcR,GAAayrB,GAAW,CAC/D,MAAM7qB,GAAevpB,EAAS,iBAAiB,OAAO,CAACzB,GAAK81C,KAAoB,CAC5E,IAAI12C,GASJ,OARI02C,GAAgB,qBAAuB,aACvClrB,IAGAxrB,GAAQwrB,EAAeirB,GAAYzrB,GAAc,GAIhDhrB,GAEE,SAAS,UAAUY,GAAK81C,GAAgB,eAAe12C,EAAK,CAAC,EADzDY,EAEd,EAAE,EAAE,EACL,OAAO,OAAO,KAAKgrB,EAAY,EAAE,OAAS,EAAIA,GAAe,MACrE,CAKI,mBAAmB+qB,EAAcvU,EAAiB,CAC9C,OAAOA,EAAgB,OAAQ3D,IAAmB,CAC9C,MAAM+T,GAAcmE,EAAa,KAAM/oC,IAAMA,GAAE,OAAS6wB,GAAe,YAAY,EACnF,OAAK+T,GAEmBA,GAAY,OAAS/T,GAAe,cACxD+T,GAAY,OAAS,KAAK,cAAc/T,EAAc,GACtD+T,GAAY,SAAW/T,GAAe,QACtC+T,GAAY,YAAc/T,GAAe,WACzC+T,GAAY,QAAU/T,GAAe,OACrC,KAAK,iBAAiBA,EAAc,IAAM+T,GAAY,SACtDA,GAAY,YAAc/T,GAAe,WACzC+T,GAAY,aAAe/T,GAAe,YAC1C+T,GAAY,gBAAkB/T,GAAe,eAC7C+T,GAAY,eAAiB/T,GAAe,cAC5C+T,GAAY,WACR,KAAK,kBAAkB/T,EAAc,GACxC+T,GAAY,MACT/T,GAAe,MACf,CAAC,SAAS,cAAc+T,GAAY,KAAM/T,GAAe,KAAK,IAAK/sB,IAAQA,GAAM,EAAE,CAAC,GACvF+sB,GAAe,qBAAuB,QACnC+T,GAAY,cAAgB/T,GAAe,YAjBxC,EAwFvB,CAAS,CACT,CAII,yBAA0B,CACtB,MAAO,EACf,CAII,2BAA4B,CACxB,MAAO,EACf,CAII,+BAAgC,CAC5B,MAAO,EACf,CAII,gBAAgB5X,EAAe3d,EAAO,CAElC,MAAO,GAEf,CAOI,0BAA2B,CACvB,MAAM,IAAI,aAAa,sFAAsF,CACrH,CAII,kBAAmB,CAEvB,CACA,CC7qBO,MAAM,KAAM,CACf,YAAYkQ,EAAOC,EAAY,CAC3B,KAAK,MAAQD,EACb,KAAK,WAAaC,EAClB,KAAK,aAAa,EAAI,OAAO,IAAI,OAAO,CAChD,CACA,CCNO,MAAM,WAAY,CACrB,aAAc,CACV,KAAK,UAAY,CAAE,EACnB,KAAK,YAAc,CAAE,CAC7B,CACA,CCHO,MAAM,eAAgB,CACzB,aAAc,CAQV,KAAK,WAAa,GAIlB,KAAK,oBAAsB,GAK3B,KAAK,KAAO,CAAE,EAId,KAAK,aAAe,CAAE,EAItB,KAAK,YAAc,CAAE,EAIrB,KAAK,cAAgB,GAIrB,KAAK,YAAc,IAAI,YAKvB,KAAK,iBAAmB,EACxB,KAAK,iBAAmB,CAAE,CAClC,CAOI,MAAM,iBAAkB,CAE5B,CAII,MAAM,gBAAiB,CAE3B,CAII,MAAM,SAAS6N,EAAW,CACtB,YAAK,aAAe,MAAM,KAAK,WAAW,CAACA,CAAS,CAAC,EAC9C,KAAK,aAAa,OAAS,EAAI,KAAK,aAAa,CAAC,EAAI,MACrE,CAII,MAAM,UAAUgT,EAAY,CACxB,OAAKA,GAKL,KAAK,aAAe,MAAM,KAAK,WAAWA,CAAU,EAC7C,KAAK,cAHD,MAAM,KAAK,WAAWA,CAAU,CAInD,CAII,MAAM,QAAQ0c,EAAU,CACpB,YAAK,YAAc,MAAM,KAAK,UAAU,CAACA,CAAQ,CAAC,EAC3C,KAAK,YAAY,OAAS,EAAI,KAAK,YAAY,CAAC,EAAI,MACnE,CAII,MAAM,SAAS3E,EAAW,CACtB,YAAK,YAAc,MAAM,KAAK,UAAUA,CAAS,EAC1C,KAAK,WACpB,CAMI,iBAAkB,CACd,KAAK,YAAc,IAAI,YACvB,KAAK,cAAgB,EAC7B,CAOI,kBAAmB,CACf,KAAK,YAAc,IAAI,YACvB,KAAK,cAAgB,EAC7B,CAII,gBAAiB,CACb,KAAK,YAAc,IAAI,WAC/B,CAII,cAAe,CACX,OAAO,KAAK,WACpB,CAII,MAAM,oBAAqB,CACvB,SAAW,CAAE,MAAA74B,EAAO,WAAAC,CAAY,IAAI,KAAK,YAAY,UACjD,MAAM,KAAK,MAAMD,EAAOC,CAAU,CAE9C,CAII,MAAM,sBAAuB,CACzB,SAAW,CAAE,MAAAD,EAAO,WAAAC,CAAa,IAAI,KAAK,YAAY,YAAY,UAC9D,MAAM,KAAK,MAAMD,EAAOC,CAAU,CAE9C,CACI,oBAAqB,CACjB,OAAO,KAAK,IACpB,CAOI,MAAM,cAAcw9B,EAAU,CAC1B,MAAMhE,EAAO,KAAK,YAAY,KAAMA,IAASA,GAAK,OAASgE,CAAQ,EACnE,GAAIhE,EACA,OAAOA,EACX,MAAMiE,GAAa,MAAM,KAAK,UAAU,CAACD,CAAQ,CAAC,EAClD,GAAIC,GAAW,OAAS,EACpB,YAAK,YAAY,KAAKA,GAAW,CAAC,CAAC,EAC5BA,GAAW,CAAC,EAGnB,MAAM,IAAI,aAAa,SAASD,CAAQ,mBAAmB,CAEvE,CAII,MAAM,eAAelsB,EAAW,CAC5B,GAAIA,KAAa,KAAK,iBAAkB,CACpC,MAAMzD,GAAY,KAAK,iBAAiByD,CAAS,EAC3C3gB,GAAQ,KAAK,aAAa,KAAMA,IAAU,KAAK,aAAaA,EAAK,IAAMkd,EAAS,EACtF,GAAIld,GACA,OAAOA,EAEvB,CACQ,MAAM+sC,EAAc,MAAM,KAAK,WAAW,CAACpsB,CAAS,CAAC,EACrD,GAAIosB,EAAY,OAAS,EAAG,CACxB,MAAMC,GAAiB,KAAK,aAAaD,EAAY,CAAC,CAAC,EACjDE,GAAc,KAAK,aAAa,KAAMjtC,IAAU,KAAK,aAAaA,EAAK,IAAMgtC,EAAc,EACjG,OAAKC,KACD,KAAK,iBAAiBtsB,CAAS,EAAI,KAAK,aAAaosB,EAAY,CAAC,CAAC,EACnE,KAAK,aAAa,KAAKA,EAAY,CAAC,CAAC,EAC9BA,EAAY,CAAC,EAKpC,KAEY,OAAM,IAAI,aAAa,UAAUpsB,CAAS,mBAAmB,CAEzE,CAII,mBAAmB3gB,EAAOktC,EAAc,CACpC,MAAMC,GAAe,KAAK,aAAantC,CAAK,EACtCotC,GAAa,KAAK,aAAa,KAAM7B,IAAgB,KAAK,aAAaA,EAAW,IAAM4B,EAAY,EAE1G,SAAW,CAACp3C,GAAKs3C,EAAU,IAAK,OAAO,QAAQ,KAAK,gBAAgB,EAC5DA,KAAeF,KACf,KAAK,iBAAiBp3C,EAAG,EAAI,KAAK,aAAam3C,CAAY,GAG/DE,KACAA,GAAW,SAAWF,EAAa,SACnCE,GAAW,OAASF,EAAa,OACjCE,GAAW,KAAOF,EAAa,KAC/BE,GAAW,QAAUF,EAAa,QAClCE,GAAW,QAAUF,EAAa,QAClCE,GAAW,YAAcF,EAAa,YACtCE,GAAW,QAAUF,EAAa,QAClCE,GAAW,OAASF,EAAa,OACjCE,GAAW,YAAcF,EAAa,YACtCE,GAAW,OAASF,EAAa,OACjCE,GAAW,QAAUF,EAAa,QAE9C,CACI,aAAar3C,EAAQ,CACjB,MAAM0S,EAAS,KAAK,WAAW,OAAO,eAAe1S,CAAM,EAC3D,OAAO,KAAK,WAAW,OAAO,eAAe0S,EAAO,UAAWA,EAAO,OAAQA,EAAO,QAAQ,CACrG,CACI,6BAA8B,CAC1B,MAAM8O,EAAU,KAAK,WAAW,OAAO,QACvC,OAAO,KAAK,WAAW,OAAO,eAAe,KAAK,WAAW,kBAAmBA,EAAQ,OAAQA,EAAQ,QAAQ,CACxH,CAII,yBAAyB,CAAE,SAAAlI,EAAU,OAAA4mB,EAAQ,MAAA/1B,GAAO,KAAAkM,GAAM,KAAAN,IAAS,CAC/D,MAAMwT,GAAK,KAAK,WAAW,mBAAoB,EACzCkuB,GAAWluB,GACZ,OAAM,EACN,KAAK,KAAK,4BAA2B,EAAI,GAAG,EAC5C,MAAM,GAAGA,GAAG,OAAO,MAAM,CAAC,WAAY,CAAE,KAAAlT,EAAM,CAAA,EAC9C,SAAS,GAAGkT,GAAG,OAAO,MAAM,CAAC,WAAY,CAAE,KAAAxT,GAAM,EAClDuD,GACAm+B,GAAS,SAAS,GAAGluB,GAAG,OAAO,UAAU,CAAC,eAAgB,CACtD,SAAAjQ,CAChB,CAAa,EAED4mB,GACAuX,GAAS,SAAS,GAAGluB,GAAG,OAAO,QAAQ,CAAC,aAAc,CAAE,OAAA2W,EAAQ,EAEhE/1B,IACAstC,GAAS,SAAS,GAAGluB,GAAG,OAAO,OAAO,CAAC,YAAa,CAAE,MAAApf,GAAO,EAEjE,KAAM,CAACoP,GAAOC,EAAU,EAAIi+B,GAAS,sBAAuB,EAC5D,OAAO,IAAI,MAAMl+B,GAAOC,EAAU,CAC1C,CAII,yBAAyB,CAAE,SAAAF,EAAU,OAAA4mB,EAAQ,MAAA/1B,GAAO,KAAAkM,GAAM,KAAAN,GAAM,MAAA5V,IAAU,CACtE,KAAM,CAACoZ,GAAOC,EAAU,EAAI,KAAK,WAC5B,mBAAkB,EAClB,OAAM,EACN,KAAK,KAAK,4BAA6B,CAAA,EACvC,OAAO,CACR,SAAUF,EACV,OAAQ4mB,EACR,MAAO/1B,GACP,KAAMkM,GACN,KAAMN,GACN,MAAO5V,EACV,CAAA,EACI,sBAAuB,EAC5B,OAAO,IAAI,MAAMoZ,GAAOC,EAAU,CAC1C,CAII,yBAAyB,CAAE,SAAAF,EAAU,OAAA4mB,EAAQ,MAAA/1B,GAAO,KAAAkM,GAAM,KAAAN,IAAS,CAC/D,MAAMwT,GAAK,KAAK,WAAW,mBAAoB,EACzCmuB,GAAWnuB,GACZ,OAAM,EACN,KAAK,KAAK,4BAA6B,CAAA,EACvC,MAAM,GAAGA,GAAG,OAAO,MAAM,CAAC,WAAY,CAAE,KAAAlT,EAAM,CAAA,EAC9C,SAAS,GAAGkT,GAAG,OAAO,MAAM,CAAC,WAAY,CAAE,KAAAxT,GAAM,EAClDuD,GACAo+B,GAAS,SAAS,GAAGnuB,GAAG,OAAO,UAAU,CAAC,eAAgB,CACtD,SAAAjQ,CAChB,CAAa,EAED4mB,GACAwX,GAAS,SAAS,GAAGnuB,GAAG,OAAO,QAAQ,CAAC,aAAc,CAAE,OAAA2W,EAAQ,EAEhE/1B,IACAutC,GAAS,SAAS,GAAGnuB,GAAG,OAAO,OAAO,CAAC,YAAa,CAAE,MAAApf,GAAO,EAEjE,KAAM,CAACoP,GAAOC,EAAU,EAAIk+B,GAAS,sBAAuB,EAC5D,OAAO,IAAI,MAAMn+B,GAAOC,EAAU,CAC1C,CAKI,gBAAgBm+B,EAAWC,EAAWC,GAAcC,GAAcC,GAAY,GAAM,CA0BhF,OAAQJ,EAAU,UAAYC,EAAU,SACpCD,EAAU,YAAcC,EAAU,WAClCD,EAAU,YAAcC,EAAU,WAClCD,EAAU,QAAUC,EAAU,OAC9BD,EAAU,QAAUC,EAAU,OAC9BD,EAAU,WAAaC,EAAU,UACjCD,EAAU,WAAaC,EAAU,UACjCD,EAAU,eAAiBC,EAAU,cACpCC,IAAgBF,EAAU,UAAYC,EAAU,SACjDD,EAAU,WAAaC,EAAU,UACjCD,EAAU,aAAeC,EAAU,YAClCE,IAAgBH,EAAU,UAAYC,EAAU,SAChDG,IAAa,KAAK,cAAcJ,EAAWC,CAAS,CACjE,CACI,cAAcD,EAAWC,EAAW,CAChC,MAAO,CAAC,SAAS,cAAcD,EAAU,MAAQ,GAAIC,EAAU,MAAQ,EAAE,CACjF,CAII,sBAAsBztC,EAAO+N,EAAQrJ,GAAQ,CAEzC,GAAI,KAAK,WAAW,YAAY1E,EAAM,IAAI,EAAG,CAEzC,MAAMy0B,GADW,KAAK,WAAW,YAAYz0B,EAAM,IAAI,EACvB,2BAA2B+N,EAAO,IAAI,EACtE,GAAI0mB,IAC6B,KAAK,WAAW,OAAO,gBAAgBA,EAAc,EAE9E,MAAO,EAE3B,CACQ,OAAI,KAAK,WAAW,OAAO,kBACvB,KAAK,WAAW,OAAO,iBAAiB1mB,EAAO,IAAI,GACnD,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EAAE,OAC7C,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EAAE,OAAO,aAAerJ,GAAO,SAAU,EAEjG,EACf,CAII,yBAAyB1E,EAAO+N,EAAQ8/B,GAAW,CAE/C,GAAI,KAAK,WAAW,YAAY7tC,EAAM,IAAI,EAAG,CAEzC,MAAMy0B,GADW,KAAK,WAAW,YAAYz0B,EAAM,IAAI,EACvB,2BAA2B+N,EAAO,IAAI,EACtE,GAAI0mB,IACAA,GAAe,YAAc,MAC7BA,GAAe,YAAc,OAC7B,MAAO,EACvB,CACQ,OAAI,KAAK,WAAW,OAAO,kBACvB,KAAK,WAAW,OAAO,iBAAiB1mB,EAAO,IAAI,GACnD,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EAAE,YACjD,MACJ,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EAAE,YACjD,OACI,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EACtD,YAAc8/B,GAChB,EACf,CAII,qBAAqB7tC,EAAO+N,EAAQ+/B,GAAO,CAEvC,GAAI,KAAK,WAAW,YAAY9tC,EAAM,IAAI,EAAG,CAEzC,MAAMy0B,GADW,KAAK,WAAW,YAAYz0B,EAAM,IAAI,EACvB,2BAA2B+N,EAAO,IAAI,EACtE,GAAI0mB,IACAA,GAAe,QAAU,MACzBA,GAAe,QAAU,OACzB,MAAO,EACvB,CACQ,OAAI,KAAK,WAAW,OAAO,kBACvB,KAAK,WAAW,OAAO,iBAAiB1mB,EAAO,IAAI,GACnD,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EAAE,QACjD,MACJ,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EAAE,QACjD,OACI,KAAK,WAAW,OAAO,iBAAiBA,EAAO,IAAI,EAAE,QACzD+/B,GACD,EACf,CAII,MAAM,eAAeC,EAAWC,EAAa,CAQzC,GAPI,gBAAgB,QAAQD,CAAS,IACjCA,EAAY,CAACA,CAAS,GACtB,gBAAgB,QAAQC,CAAW,IACnCA,EAAc,CAACA,CAAW,GAC9B,KAAK,YAAY,UAAU,KAAK,GAAGD,CAAS,EAC5C,KAAK,YAAY,YAAY,KAAK,GAAGC,CAAW,EAE5C,KAAK,gBAAkB,GACvB,OAAO,QAAQ,QAAS,EAC5B,SAAW,CAAE,MAAA5+B,GAAO,WAAAC,EAAU,IAAM0+B,EAChC,MAAM,KAAK,MAAM3+B,GAAOC,EAAU,CAE9C,CAII,kBAAkBrP,EAAOd,EAAO,CAE5B,OAAO,KAAK,WAAW,eAAe,UAAUc,EAAOd,EAAM,YAAaA,EAAM,KAAK,CAC7F,CACA,CC/aO,IAAI,mBACV,SAAU+uC,GAAmB,CAC1BA,GAAkB,KAAU,OAC5BA,GAAkB,kBAAuB,oBACzCA,GAAkB,iBAAsB,kBAC5C,GAAG,oBAAsB,kBAAoB,CAAA,EAAG,ECYzC,MAAM,kCAAkC,eAAgB,CAI3D,aAAc,CACV,MAAO,EACP,KAAK,mBAAqB,IAClC,CAQI,SAAU,CACN,OAAO,QAAQ,QAAQ,KAAK,OAAO,kBAAkB,CAC7D,CAKI,SAAU,CACN,YAAK,aAAe,CAAE,EACtB,KAAK,eAAgB,EACd,QAAQ,QAAS,CAChC,CAII,MAAM,iBAAiBC,EAAgB,CACnC,GAAI,KAAK,OAAO,qBAAuB,OACnC,MAAM,IAAI,aAAa,oCAAoC,KAAK,WAAW,OAAO,QAAQ,IAAI,GAAG,EACrG,GAAI,KAAK,qBACL,KAAK,OAAO,qBAAuB,SACnC,MAAM,IAAI,+BACd,GAAIA,GACAA,IAAmB,oBACnBA,IAAmB,eACnB,MAAM,IAAI,aAAa,kEAAkE,EAC7F,KAAK,oBAAsB,GAC3B,GAAI,CACA,MAAM,KAAK,YAAY,UAAU,wBAAwB,CACrE,OACenX,EAAK,CACR,WAAK,oBAAsB,GACrBA,CAClB,CACY,KAAK,mBAAqB,GAC1B,KAAK,kBAAoB,EACrBmX,IACIA,IAAmB,mBACnB,MAAM,KAAK,MAAM,gCAAgC,EAGjD,MAAM,KAAK,MAAM,iCAAiC,GAG1D,MAAM,KAAK,MAAM,mBAAmB,IAGpC,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,qBAAqB,KAAK,iBAAmB,CAAC,EAAE,GAErE,MAAM,KAAK,YAAY,UAAU,uBAAuB,CAChE,CAKI,MAAM,mBAAoB,CACtB,GAAI,CAAC,KAAK,oBACN,MAAM,IAAI,2BACd,MAAM,KAAK,YAAY,UAAU,yBAAyB,EACtD,KAAK,iBAAmB,GACxB,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,6BAA6B,KAAK,gBAAgB,EAAE,IAGrE,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,QAAQ,EACzB,KAAK,oBAAsB,IAE/B,MAAM,KAAK,YAAY,UAAU,wBAAwB,CACjE,CAKI,MAAM,qBAAsB,CACxB,GAAI,CAAC,KAAK,oBACN,MAAM,IAAI,2BACd,MAAM,KAAK,YAAY,UAAU,2BAA2B,EACxD,KAAK,iBAAmB,GACxB,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,iCAAiC,KAAK,gBAAgB,EAAE,IAGzE,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,UAAU,EAC3B,KAAK,oBAAsB,IAE/B,MAAM,KAAK,YAAY,UAAU,0BAA0B,CACnE,CAII,OAAO9+B,EAAOC,EAAY8+B,GAAOC,GAAS,CACtC,MAAM,IAAI,aAAa,2CAA2C,CAC1E,CAII,MAAM,cAAe,CACjB,OAAO,QAAQ,QAAQ,EAAE,CACjC,CAKI,MAAM,WAAWj/B,EAAU,CACvB,OAAO,QAAQ,QAAQ,EAAE,CACjC,CAII,MAAM,YAAYA,EAAU,CACxB,OAAO,QAAQ,QAAQ,EAAK,CACpC,CAII,MAAM,oBAAqB,CACvB,OAAO,QAAQ,QAAQ,MAAS,CACxC,CAII,MAAM,UAAU4mB,EAAQ,CACpB,MAAM,IAAI,aAAa,4CAA4C,CAC3E,CAII,MAAM,kBAAmB,CACrB,OAAO,QAAQ,QAAQ,MAAS,CACxC,CAII,MAAM,SAASvC,EAAa,CAIxB,MAAMvmB,GAAM,sEAHM,gBAAgB,QAAQumB,CAAW,EAC/CA,EAAY,KACZA,CACqF,IAE3F,MAAO,GADQ,MAAM,KAAK,MAAMvmB,EAAG,GACrB,MACtB,CAII,MAAM,UAAUumB,EAAanV,EAAY,CACrC,MAAMsC,GAAY,gBAAgB,QAAQ6S,CAAW,EAC/CA,EAAY,KACZA,EACAvmB,GAAM,sBAAsB,KAAK,WAAW0T,EAAS,CAAC,IAE5D,MAAO,CAAC,EADQ,MAAM,KAAK,MAAM1T,EAAG,GACnB,KAAMc,IAAWA,GAAO,OAAYsQ,CAAU,CACvE,CAII,MAAM,eAAelP,EAAUk/B,EAAY,CACvC,OAAO,QAAQ,QAAS,CAChC,CAII,MAAM,aAAal/B,EAAUm/B,EAAS,CAClC,OAAO,QAAQ,QAAS,CAChC,CAII,MAAM,aAAaC,EAAYF,EAAY,CACvC,OAAO,QAAQ,QAAS,CAChC,CAII,MAAM,WAAWE,EAAYD,EAAS,CAClC,OAAO,QAAQ,QAAS,CAChC,CAII,MAAM,YAAYtuC,EAAOquC,EAAa,GAAOG,GAAoB,GAAMC,GAAgB,GAAM,CACzF,MAAMV,GAAY,CAAE,EACdC,GAAc,CAAE,EACtB,GAAIK,GACqB,MAAM,KAAK,SAASruC,CAAK,EAE1C,OAAO,QAAQ,QAAS,EAEhC+tC,GAAU,KAAK,KAAK,eAAe/tC,EAAOwuC,EAAiB,CAAC,EAC5DR,GAAY,KAAK,KAAK,aAAahuC,CAAK,CAAC,EACrCyuC,IACAzuC,EAAM,QAAQ,QAASd,IAAU,CAExBA,GAAM,OACPA,GAAM,KAAO,KAAK,WAAW,eAAe,UAAUc,EAAOd,GAAM,YAAaA,GAAM,KAAK,GAC/F6uC,GAAU,KAAK,KAAK,eAAe/tC,EAAOd,EAAK,CAAC,EAChD8uC,GAAY,KAAK,KAAK,aAAa9uC,EAAK,CAAC,CACzD,CAAa,EAGL,MAAMwvC,GAAmB1uC,EAAM,QAAQ,OAAQ+N,IAAWA,GAAO,eAAiBA,GAAO,YAAY,EACrG,UAAWA,MAAU2gC,GAAkB,CACnC,MAAMC,GAAc,KAAK,yBAAyB,CAC9C,MAAO3uC,EAAM,KACb,KAAM,kBAAkB,iBACxB,KAAM+N,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACK6gC,GAAc,KAAK,yBAAyB,CAC9C,MAAO5uC,EAAM,KACb,KAAM,kBAAkB,iBACxB,KAAM+N,GAAO,IAC7B,CAAa,EACDggC,GAAU,KAAKY,EAAW,EAC1BX,GAAY,KAAKY,EAAW,CACxC,CACQ,MAAM,KAAK,eAAeb,GAAWC,EAAW,CACxD,CAII,MAAM,UAAUxa,EAAa8a,EAASO,GAAkB,GAAMC,GAAc,GAAM,CAC9E,GAAIR,GAEI,CADiB,MAAM,KAAK,SAAS9a,CAAW,EAEhD,OAAO,QAAQ,QAAS,EAGhC,MAAMgb,GAAoBK,GACpB7uC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCua,GAAY,CAAE,EACdC,GAAc,CAAE,EAClBc,IACA9uC,GAAM,QAAQ,QAASd,IAAU,CAC7B6uC,GAAU,KAAK,KAAK,aAAa7uC,EAAK,CAAC,EACvC8uC,GAAY,KAAK,KAAK,eAAehuC,GAAOd,EAAK,CAAC,CAClE,CAAa,EAEL6uC,GAAU,KAAK,KAAK,aAAa/tC,GAAOsuC,CAAO,CAAC,EAChDN,GAAY,KAAK,KAAK,eAAehuC,GAAOwuC,EAAiB,CAAC,EAE9D,MAAME,GAAmB1uC,GAAM,QAAQ,OAAQ+N,IAAWA,GAAO,eAAiBA,GAAO,YAAY,EACrG,UAAWA,MAAU2gC,GAAkB,CACnC,MAAME,GAAc,KAAK,yBAAyB,CAC9C,MAAO5uC,GAAM,KACb,KAAM,kBAAkB,iBACxB,KAAM+N,GAAO,IAC7B,CAAa,EACK4gC,GAAc,KAAK,yBAAyB,CAC9C,MAAO3uC,GAAM,KACb,KAAM,kBAAkB,iBACxB,KAAM+N,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACDggC,GAAU,KAAKa,EAAW,EAC1BZ,GAAY,KAAKW,EAAW,CACxC,CACQ,MAAM,KAAK,eAAeZ,GAAWC,EAAW,CACxD,CAII,MAAM,WAAWnF,EAAMkG,EAAmB,GAAO,CAC7C,MAAMhB,GAAY,CAAE,EACdC,GAAc,CAAE,EACtBD,GAAU,KAAK,KAAK,cAAclF,CAAI,CAAC,EACnCkG,GACAhB,GAAU,KAAK,KAAK,wBAAwBlF,CAAI,CAAC,EACrDmF,GAAY,KAAK,KAAK,YAAYnF,CAAI,CAAC,EACnCkG,GACAf,GAAY,KAAK,KAAK,wBAAwBnF,CAAI,CAAC,EACvD,MAAM,KAAK,eAAekF,GAAWC,EAAW,CACxD,CAII,MAAM,SAASn4C,EAAQ,CACnB,MAAMg3C,EAAW,gBAAgB,OAAOh3C,CAAM,EAAIA,EAAO,KAAOA,EAC1DgzC,GAAO,MAAM,KAAK,cAAcgE,CAAQ,EACxCkB,GAAY,CAAE,EACdC,GAAc,CAAE,EACtBD,GAAU,KAAK,KAAK,wBAAwBlF,EAAI,CAAC,EACjDkF,GAAU,KAAK,KAAK,YAAYlF,EAAI,CAAC,EACrCmF,GAAY,KAAK,KAAK,wBAAwBnF,EAAI,CAAC,EACnDmF,GAAY,KAAK,KAAK,cAAcnF,EAAI,CAAC,EACzC,MAAM,KAAK,eAAekF,GAAWC,EAAW,CACxD,CAII,MAAM,YAAYgB,EAAgBC,EAAc,CAC5C,MAAMC,GAAW,gBAAgB,QAAQF,CAAc,EACjDA,EACA,MAAM,KAAK,eAAeA,CAAc,EACxCG,GAAWD,GAAS,MAAO,EACjCC,GAAS,KAAOF,EAEhB,MAAMG,GAAK,IAAI,MAAM,eAAe,KAAK,WAAWF,GAAS,IAAI,CAAC,cAAc,KAAK,WAAWD,CAAY,CAAC,EAAE,EACzGI,GAAO,IAAI,MAAM,eAAe,KAAK,WAAWJ,CAAY,CAAC,cAAc,KAAK,WAAWC,GAAS,IAAI,CAAC,EAAE,EACjH,MAAM,KAAK,eAAeE,GAAIC,EAAI,EAElCF,GAAS,QAAQ,QAAS9tC,IAAW,CACjC,MAAMiuC,GAAgB,KAAK,WAAW,eAAe,qBAAqBJ,GAAU7tC,GAAO,WAAW,EAElGA,GAAO,OAASiuC,KAEpBjuC,GAAO,KAAO,KAAK,WAAW,eAAe,qBAAqB8tC,GAAU9tC,GAAO,WAAW,EAC1G,CAAS,EAED8tC,GAAS,YAAY,QAASta,IAAe,CACzC,MAAM0a,GAAoB,KAAK,WAAW,eAAe,eAAeL,GAAUra,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EAErKA,GAAW,OAAS0a,KAExB1a,GAAW,KAAO,KAAK,WAAW,eAAe,eAAesa,GAAUta,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EAC7K,CAAS,EAEDsa,GAAS,QAAQ,QAASjwC,IAAU,CAChC,MAAMswC,GAAe,KAAK,WAAW,eAAe,UAAUN,GAAUhwC,GAAM,YAAaA,GAAM,KAAK,EAElGA,GAAM,OAASswC,KAEnBtwC,GAAM,KAAO,KAAK,WAAW,eAAe,UAAUiwC,GAAUjwC,GAAM,YAAaA,GAAM,KAAK,EAC1G,CAAS,EAEDgwC,GAAS,KAAOC,GAAS,KAEzB,MAAM,KAAK,cAAcA,GAAUD,EAAQ,CACnD,CAII,MAAM,UAAU1b,EAAazlB,EAAQ,CACjC,MAAM/N,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAC3C,OAAO,KAAK,WAAWxzB,GAAO,CAAC+N,CAAM,CAAC,CAC9C,CAII,MAAM,WAAWylB,EAAarV,EAAS,CACnC,MAAMne,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC0Z,GAAeltC,GAAM,MAAO,EAClCme,EAAQ,QAASpQ,IAAWm/B,GAAa,UAAUn/B,EAAM,CAAC,EAC1D,MAAM,KAAK,cAAcm/B,GAAcltC,EAAK,CACpD,CAII,MAAM,aAAawzB,EAAaic,EAAsBC,GAAsB,CACxE,MAAM1vC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCga,GAAY,gBAAgB,cAAciC,CAAoB,EAC9DA,EACAzvC,GAAM,QAAQ,KAAM4D,IAAMA,GAAE,OAAS6rC,CAAoB,EAC/D,GAAI,CAACjC,GACD,MAAM,IAAI,aAAa,WAAWiC,CAAoB,2BAA2BzvC,GAAM,IAAI,UAAU,EACzG,IAAIytC,GACJ,OAAI,gBAAgB,cAAciC,EAAoB,EAClDjC,GAAYiC,IAGZjC,GAAYD,GAAU,MAAO,EAC7BC,GAAU,KAAOiC,IAEd,KAAK,aAAa1vC,GAAOwtC,GAAWC,EAAS,CAC5D,CAII,MAAM,aAAaja,EAAaic,EAAsBhC,GAAW,CAC7D,MAAMztC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCga,GAAY,gBAAgB,cAAciC,CAAoB,EAC9DA,EACAzvC,GAAM,QAAQ,KAAM4D,IAAMA,GAAE,OAAS6rC,CAAoB,EAC/D,GAAI,CAACjC,GACD,MAAM,IAAI,aAAa,WAAWiC,CAAoB,2BAA2BzvC,GAAM,IAAI,UAAU,EACzG,MAAM,KAAK,cAAcA,GAAO,CAAC,CAAE,UAAAwtC,GAAW,UAAAC,EAAS,CAAE,CAAC,CAClE,CAKI,MAAM,cAAcja,EAAagX,EAAgB,CAC7C,MAAMxqC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC0Z,GAAeltC,GAAM,MAAO,EAClCwqC,EAAe,QAASmF,IAAqB,CACrCA,GAAiB,UAAU,OAC3BA,GAAiB,UAAU,OAC3BzC,GACK,kBAAkByC,GAAiB,SAAS,EAC5C,QAAStuC,IAAW,CACrB,MAAMuuC,GAAa,KAAK,WAAW,eAAe,qBAAqB5vC,GAAOqB,GAAO,WAAW,EAChGA,GAAO,YAAY,OAAOA,GAAO,YAAY,QAAQsuC,GAAiB,UAAU,IAAI,EAAG,CAAC,EACxFtuC,GAAO,YAAY,KAAKsuC,GAAiB,UAAU,IAAI,EAEnDtuC,GAAO,OAASuuC,KAChBvuC,GAAO,KACH,KAAK,WAAW,eAAe,qBAAqB6rC,GAAc7rC,GAAO,WAAW,EAEhH,CAAiB,EACD6rC,GACK,sBAAsByC,GAAiB,SAAS,EAChD,QAAS9a,IAAe,CACzB,MAAMgb,GAAiB,KAAK,WAAW,eAAe,eAAe7vC,GAAO60B,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EACnKA,GAAW,YAAY,OAAOA,GAAW,YAAY,QAAQ8a,GAAiB,UAAU,IAAI,EAAG,CAAC,EAChG9a,GAAW,YAAY,KAAK8a,GAAiB,UAAU,IAAI,EAEvD9a,GAAW,OAASgb,KACpBhb,GAAW,KACP,KAAK,WAAW,eAAe,eAAeqY,GAAcrY,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EAE/K,CAAiB,EACDqY,GACK,kBAAkByC,GAAiB,SAAS,EAC5C,QAASzwC,IAAU,CACpB,MAAM4wC,GAAY,KAAK,WAAW,eAAe,UAAU9vC,GAAOd,GAAM,YAAaA,GAAM,KAAK,EAChGA,GAAM,YAAY,OAAOA,GAAM,YAAY,QAAQywC,GAAiB,UAAU,IAAI,EAAG,CAAC,EACtFzwC,GAAM,YAAY,KAAKywC,GAAiB,UAAU,IAAI,EAElDzwC,GAAM,OAAS4wC,KACf5wC,GAAM,KACF,KAAK,WAAW,eAAe,UAAUguC,GAAchuC,GAAM,YAAaA,GAAM,KAAK,EAEjH,CAAiB,GAEL,MAAM6wC,GAAiB7C,GAAa,QAAQ,KAAMn/B,IAAWA,GAAO,OAAS4hC,GAAiB,UAAU,IAAI,EACxGI,KACA7C,GAAa,QAAQA,GAAa,QAAQ,QAAQ6C,EAAc,CAAC,EAAIJ,GAAiB,UACtG,CAAS,EACD,MAAM,KAAK,cAAczC,GAAcltC,EAAK,CACpD,CAII,MAAM,WAAWwzB,EAAawc,EAAc,CACxC,MAAMhwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCzlB,GAAS,gBAAgB,cAAciiC,CAAY,EACnDA,EACAhwC,GAAM,iBAAiBgwC,CAAY,EACzC,GAAI,CAACjiC,GACD,MAAM,IAAI,aAAa,WAAWiiC,CAAY,6BAA6BhwC,GAAM,IAAI,GAAG,EAC5F,MAAM,KAAK,YAAYA,GAAO,CAAC+N,EAAM,CAAC,CAC9C,CAII,MAAM,YAAYylB,EAAarV,EAAS,CACpC,MAAMne,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCme,EAAQ,QAASpQ,IAAW,CACxB,MAAMkiC,GAAiB,gBAAgB,cAAcliC,EAAM,EACrDA,GACA/N,GAAM,iBAAiB+N,EAAM,EACnC,GAAI,CAACkiC,GACD,MAAM,IAAI,MAAM,WAAWliC,EAAM,6BAA6B/N,GAAM,IAAI,GAAG,EAC/EktC,GAAa,aAAa+C,EAAc,EACxC/C,GACK,kBAAkB+C,EAAc,EAChC,QAAS5uC,IAAW6rC,GAAa,uBAAuB7rC,EAAM,CAAC,EACpE6rC,GACK,kBAAkB+C,EAAc,EAChC,QAAS/wC,IAAUguC,GAAa,YAAYhuC,EAAK,CAAC,EACvDguC,GACK,sBAAsB+C,EAAc,EACpC,QAASta,IAAOuX,GAAa,iBAAiBvX,EAAE,CAAC,CAClE,CAAS,EACD,MAAM,KAAK,cAAcuX,GAAcltC,EAAK,CACpD,CAII,MAAM,iBAAiBwzB,EAAaM,EAAa,CAC7C,MAAM9zB,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCktC,GAAa,QAAQ,QAASn/B,IAAW,CACjC+lB,EAAY,KAAMzV,IAAeA,KAAetQ,GAAO,IAAI,IAC3DA,GAAO,UAAY,GACnC,CAAS,EACD,MAAM,KAAK,cAAcm/B,GAAcltC,EAAK,EAE5CA,GAAM,QAAQ,QAAS+N,IAAW,CAC1B+lB,EAAY,KAAMzV,IAAeA,KAAetQ,GAAO,IAAI,IAC3DA,GAAO,UAAY,GACnC,CAAS,CACT,CAII,MAAM,kBAAkBylB,EAAarV,EAAS,CAC1C,MAAM,QAAQ,QAAS,CAC/B,CAII,MAAM,eAAeqV,EAAa,CAC9B,MAAMxzB,EAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,EAAM,MAAO,EAClCktC,GAAa,eAAe,QAASn/B,IAAW,CAC5CA,GAAO,UAAY,EAC/B,CAAS,EACD,MAAM,KAAK,cAAcm/B,GAAcltC,CAAK,EAE5CA,EAAM,eAAe,QAAS+N,IAAW,CACrCA,GAAO,UAAY,EAC/B,CAAS,CACT,CAII,MAAM,uBAAuBylB,EAAawB,EAAkB,CACxD,MAAM,KAAK,wBAAwBxB,EAAa,CAACwB,CAAgB,CAAC,CAC1E,CAII,MAAM,wBAAwBxB,EAAa0c,EAAmB,CAC1D,MAAMlwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCkwC,EAAkB,QAASlb,IAAqBkY,GAAa,oBAAoBlY,EAAgB,CAAC,EAClG,MAAM,KAAK,cAAckY,GAAcltC,EAAK,CACpD,CAII,MAAM,qBAAqBwzB,EAAa2c,EAAc,CAClD,MAAMnwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCwB,GAAmB,gBAAgB,cAAcmb,CAAY,EAC7DA,EACAnwC,GAAM,QAAQ,KAAMq9B,IAAMA,GAAE,OAAS8S,CAAY,EACvD,GAAI,CAACnb,GACD,MAAM,IAAI,aAAa,qDAAqDh1B,GAAM,IAAI,EAAE,EAC5F,MAAM,KAAK,sBAAsBA,GAAO,CAACg1B,EAAgB,CAAC,CAClE,CAII,MAAM,sBAAsBxB,EAAa0c,EAAmB,CACxD,MAAMlwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCkwC,EAAkB,QAASlb,IAAqBkY,GAAa,uBAAuBlY,EAAgB,CAAC,EACrG,MAAM,KAAK,cAAckY,GAAcltC,EAAK,CACpD,CAII,MAAM,sBAAsBwzB,EAAa4B,EAAiB,CACtD,MAAM,KAAK,uBAAuB5B,EAAa,CAAC4B,CAAe,CAAC,CACxE,CAII,MAAM,uBAAuB5B,EAAa4c,EAAkB,CACxD,MAAMpwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCowC,EAAiB,QAAShb,IAAoB8X,GAAa,mBAAmB9X,EAAe,CAAC,EAC9F,MAAM,KAAK,cAAc8X,GAAcltC,EAAK,CACpD,CAII,MAAM,oBAAoBwzB,EAAa6c,EAAa,CAChD,MAAMrwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC4B,GAAkB,gBAAgB,aAAaib,CAAW,EAC1DA,EACArwC,GAAM,OAAO,KAAM4D,IAAMA,GAAE,OAASysC,CAAW,EACrD,GAAI,CAACjb,GACD,MAAM,IAAI,aAAa,oDAAoDp1B,GAAM,IAAI,EAAE,EAC3F,MAAM,KAAK,qBAAqBA,GAAO,CAACo1B,EAAe,CAAC,CAChE,CAII,MAAM,qBAAqB5B,EAAa4c,EAAkB,CACtD,MAAMpwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCowC,EAAiB,QAAShb,IAAoB8X,GAAa,sBAAsB9X,EAAe,CAAC,EACjG,MAAM,KAAK,cAAc8X,GAAcltC,EAAK,CACpD,CAII,MAAM,0BAA0BwzB,EAAa+B,EAAqB,CAC9D,MAAM,IAAI,aAAa,gDAAgD,CAC/E,CAII,MAAM,2BAA2B/B,EAAa8c,EAAsB,CAChE,MAAM,IAAI,aAAa,gDAAgD,CAC/E,CAII,MAAM,wBAAwB9c,EAAa+c,EAAiB,CACxD,MAAM,IAAI,aAAa,gDAAgD,CAC/E,CAII,MAAM,yBAAyB/c,EAAa8c,EAAsB,CAC9D,MAAM,IAAI,aAAa,gDAAgD,CAC/E,CAII,MAAM,iBAAiB9c,EAAaqB,EAAY,CAC5C,MAAM,KAAK,kBAAkBrB,EAAa,CAACqB,CAAU,CAAC,CAC9D,CAII,MAAM,kBAAkBrB,EAAagd,EAAa,CAC9C,MAAMxwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCwwC,EAAY,QAAS3b,IAAeqY,GAAa,cAAcrY,EAAU,CAAC,EAC1E,MAAM,KAAK,cAAcqY,GAAcltC,EAAK,CACpD,CAII,MAAM,eAAewzB,EAAaid,EAAkB,CAChD,MAAMzwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCqB,GAAa,gBAAgB,kBAAkB4b,CAAgB,EAC/DA,EACAzwC,GAAM,YAAY,KAAM21B,IAAOA,GAAG,OAAS8a,CAAgB,EACjE,GAAI,CAAC5b,GACD,MAAM,IAAI,aAAa,+CAA+C70B,GAAM,IAAI,EAAE,EACtF,MAAM,KAAK,gBAAgBwzB,EAAa,CAACqB,EAAU,CAAC,CAC5D,CAII,MAAM,gBAAgBrB,EAAagd,EAAa,CAC5C,MAAMxwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAErC0Z,GAAeltC,GAAM,MAAO,EAClCwwC,EAAY,QAAS3b,IAAeqY,GAAa,iBAAiBrY,EAAU,CAAC,EAC7E,MAAM,KAAK,cAAcqY,GAAcltC,EAAK,CACpD,CAII,MAAM,YAAYwzB,EAAat0B,EAAO,CAClC,MAAMc,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAEtCt0B,EAAM,OACPA,EAAM,KAAO,KAAK,kBAAkBc,GAAOd,CAAK,GACpD,MAAMkwC,GAAK,KAAK,eAAepvC,GAAOd,CAAK,EACrCmwC,GAAO,KAAK,aAAanwC,CAAK,EACpC,MAAM,KAAK,eAAekwC,GAAIC,EAAI,EAClCrvC,GAAM,SAASd,CAAK,CAC5B,CAII,MAAM,cAAcs0B,EAAakd,EAAS,CACtC,MAAMroB,GAAWqoB,EAAQ,IAAKxxC,IAAU,KAAK,YAAYs0B,EAAat0B,EAAK,CAAC,EAC5E,MAAM,QAAQ,IAAImpB,EAAQ,CAClC,CAII,MAAM,UAAUmL,EAAamd,EAAa,CACtC,MAAM3wC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCt0B,GAAQ,gBAAgB,aAAayxC,CAAW,EAChDA,EACA3wC,GAAM,QAAQ,KAAMrG,IAAMA,GAAE,OAASg3C,CAAW,EACtD,GAAI,CAACzxC,GACD,MAAM,IAAI,aAAa,kBAAkByxC,CAAW,2BAA2B3wC,GAAM,IAAI,EAAE,EAE1Fd,GAAM,OACPA,GAAM,KAAO,KAAK,kBAAkBc,GAAOd,EAAK,GACpD,MAAMkwC,GAAK,KAAK,aAAalwC,EAAK,EAC5BmwC,GAAO,KAAK,eAAervC,GAAOd,EAAK,EAC7C,MAAM,KAAK,eAAekwC,GAAIC,EAAI,EAClCrvC,GAAM,YAAYd,EAAK,CAC/B,CAII,MAAM,YAAYs0B,EAAakd,EAAS,CACpC,MAAMroB,GAAWqoB,EAAQ,IAAKxxC,IAAU,KAAK,UAAUs0B,EAAat0B,EAAK,CAAC,EAC1E,MAAM,QAAQ,IAAImpB,EAAQ,CAClC,CAKI,MAAM,WAAW1H,EAAW,CACxB,MAAM,KAAK,MAAM,eAAe,KAAK,WAAWA,CAAS,CAAC,EAAE,CACpE,CAII,MAAM,cAAcxR,EAAU,CAC1B,IAAIyhC,EACAzhC,GACA,KAAK,OAAO,wCAAwCA,CAAQ,IAC5DyhC,EACI,KAAK,OAAO,wCAAwCzhC,CAAQ,GAEpE,MAAM,KAAK,MAAM,2BAA2B,EAC5C,MAAM0hC,GAA6B,KAAK,oBACnCA,IACD,MAAM,KAAK,iBAAkB,EACjC,GAAI,CACA,MAAMC,GAAuBF,EACvB,sBAAsBA,CAAM,uCAAuCA,CAAM,0CACzE,2FACAG,GAAkB,MAAM,KAAK,MAAMD,EAAoB,EAC7D,MAAM,QAAQ,IAAIC,GAAgB,IAAKva,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,EACpE,MAAMwa,GAAwBJ,EACxB,uBAAuBA,CAAM,uCAAuCA,CAAM,2EAC1E,6HACAK,GAAmB,MAAM,KAAK,MAAMD,EAAqB,EAC/D,MAAM,QAAQ,IAAIC,GAAiB,IAAKza,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,EAChEqa,IACD,MAAM,KAAK,kBAAmB,CAC9C,OACe1xC,GAAO,CACV,GAAI,CAEK0xC,IACD,MAAM,KAAK,oBAAqB,CACpD,MACkC,CAAA,CACtB,MAAM1xC,EAClB,QACgB,CACJ,MAAM,KAAK,MAAM,0BAA0B,CACvD,CACA,CAII,MAAM,UAAU+xC,EAAW,CAEvB,GAAI,CADa,MAAM,KAAK,SAAS,KAAK,4BAA2B,CAAE,EAEnE,MAAO,CAAE,EAERA,IACDA,EAAY,CAAE,GAElB,MAAMC,GAAkBD,EACnB,IAAKtlC,IAAS,IAAMA,GAAO,GAAG,EAC9B,KAAK,IAAI,EACd,IAAIwD,GAAQ,sBAAsB,KAAK,4BAA6B,CAAA,6GAA6G,kBAAkB,IAAI,IACvM,OAAI+hC,GAAgB,OAAS,IACzB/hC,IAAS,uBAAuB+hC,EAAe,MACnC,MAAM,KAAK,MAAM/hC,EAAK,GACvB,IAAKgiC,IAAW,CAC3B,MAAMvI,GAAO,IAAI,KACjB,OAAAA,GAAK,KAAOuI,GAAO,KACnBvI,GAAK,WAAauI,GAAO,MAClBvI,EACnB,CAAS,CACT,CACI,MAAM,iBAAiB3rB,EAAWm0B,EAAc,CAC5C,IAAIliC,GACJ,KAAM,CAAC4mB,GAAQpV,EAAS,EAAI,KAAK,eAAezD,CAAS,EACzD,OAAI6Y,IACA,KAAK,OAAO,wCAAwCA,EAAM,IAC1D5mB,GACI,KAAK,OAAO,wCAAwC4mB,EAAM,GAE3D,KAAK,MAAM,UAAU5mB,GAAW,IAAIA,EAAQ,IAAM,IAAI,iBAAiB4mB,GAAS,IAAIA,EAAM,IAAM,IAAI,sBAAsBA,GAAS,IAAIA,EAAM,KAAO,EAAE,GAAG,KAAK,WAAW,eAAe,CAAC,oBAAoBsb,CAAY,UAAUA,IAAiB,QAAU,OAAS,UAAU,UAAU1wB,EAAS,IAAI,CACvT,CACI,MAAM,kBAAkBzD,EAAWo0B,EAAQ,CACvC,KAAM,CAAG,CAAA3wB,EAAS,EAAI,KAAK,eAAezD,CAAS,EACnD,OAAO,KAAK,MAAM,UAAUo0B,CAAM,KAAK3wB,EAAS,IAAI,CAC5D,CAII,MAAM,WAAWuP,EAAY,CAEzB,GAAIA,GAAcA,EAAW,SAAW,EACpC,MAAO,CAAE,EAEb,IAAIqhB,EAAW,CAAE,EACbC,GACJ,GAAKthB,EAQA,CACD,MAAMuhB,GAAuBvhB,EACxB,OAAQvP,IACFA,GAAU,MAAM,GAAG,EAAE,SAAW,CAC1C,EACI,IAAKA,IAAc,IAAIA,EAAS,GAAG,EAClC+wB,GAAoBxhB,EAAW,OAAQvP,IAClCA,GAAU,MAAM,GAAG,EAAE,OAAS,CACxC,EACKgxB,GAAiBzlC,IAAS,CAC5B,MAAMmc,GAAW,CACb,GAAGqpB,GAAkB,IAAK/wB,IAAc,KAAK,iBAAiBA,GAAWzU,EAAI,CAAC,CACjF,EACD,OAAIulC,GAAqB,QACrBppB,GAAS,KAAK,KAAK,MAAM,iDAAiDnc,EAAI,UAAUA,KAAS,QAAU,OAAS,UAAU,SAASulC,EAAoB,GAAG,CAAC,EAE5JppB,EACV,EACDkpB,GAAY,MAAM,QAAQ,IAAII,GAAc,OAAO,CAAC,GAC/C,OAAO,CAACl6B,GAAK1O,KAAQ,CAAC,GAAG0O,GAAK,GAAG1O,EAAG,EAAG,CAAE,CAAA,EACzC,OAAO,OAAO,EACnByoC,IAAgB,MAAM,QAAQ,IAAIG,GAAc,OAAO,CAAC,GACnD,OAAO,CAACl6B,GAAK1O,KAAQ,CAAC,GAAG0O,GAAK,GAAG1O,EAAG,EAAG,CAAE,CAAA,EACzC,OAAO,OAAO,CAC/B,KAhCyB,CAEbwoC,EAAS,KAAK,GAAI,MAAM,KAAK,MADX,sDAC0B,CAAE,EAC9C,MAAMK,GAAmBL,EACpB,IAAI,CAAC,CAAE,KAAA3lC,EAAI,IAAO,IAAIA,EAAI,GAAG,EAC7B,KAAK,IAAI,EACd4lC,GAAe,MAAM,KAAK,MAAM,2EAA2EI,EAAgB,GAAG,CAC1I,CA2BQ,OAAIL,EAAS,SAAW,EACb,CAAE,EAGN,QAAQ,IAAIA,EAAS,IAAI,MAAOM,IAAY,CAC/C,MAAM30B,GAAY20B,GAAQ,UACtB,KAAK,OAAO,wCAAwCA,GAAQ,QAAW,EACrE,GAAG,KAAK,OAAO,wCAAwCA,GAAQ,QAAW,CAAC,IAAIA,GAAQ,IAAO,GAC9FA,GAAQ,KACR5kC,GAAM4kC,GAAQ,IACdC,GAAe7kC,GAAI,SAAS,eAAe,EAC3CjN,GAAQ,IAAI,MAAM,CAAE,KAAMkd,GAAW,aAAA40B,GAAc,EAEnD,CAACC,GAAWC,GAAW9G,EAAa,EAAI,MAAM,QAAQ,IAAI,CAC5D,KAAK,kBAAkBhuB,GAAW,aAAa,EAC/C,KAAK,kBAAkBA,GAAW,YAAY,EAC9C,KAAK,kBAAkBA,GAAW,kBAAkB,CACpE,CAAa,EAED,IAAI+0B,GACJ,MAAMC,GAAWL,GAAQ,IACzB,IAAIM,GAAqBD,GACpB,YAAW,EACX,QAAQ,eAAe,EAC5B,GAAIC,KAAuB,GAAI,CAC3BF,GAA0BC,GAAS,OAAO,EAAGC,EAAkB,EAC/D,MAAMC,GAAQH,GAAwB,YAAY,GAAG,EAC/CI,GAAUJ,GAAwB,YAAY,GAAG,EACnDG,KAAU,IACVH,GACIA,GAAwB,OAAOG,EAAK,EACxCH,GACIA,GAAwB,OAAO,EAAGA,GAAwB,YAAY,GAAG,CAAC,EAC9EA,GACIA,GAAwB,OAAOA,GAAwB,QAAQ,GAAG,EAAI,CAAC,GAEtEI,KAAY,KACjBJ,GACIA,GAAwB,OAAOI,EAAO,EAC1CJ,GACIA,GAAwB,OAAO,EAAGA,GAAwB,YAAY,GAAG,CAAC,EAC9EA,GACIA,GAAwB,OAAOA,GAAwB,QAAQ,GAAG,EAAI,CAAC,EAE/F,CAEYjyC,GAAM,QAAU,MAAM,QAAQ,IAAI+xC,GAAU,IAAI,MAAOO,IAAa,CAChE,MAAM9J,GAAc,IAAI,YAiBxB,GAhBAA,GAAY,KAAO8J,GAAS,KAC5B9J,GAAY,KAAO8J,GAAS,KAAQ,YAAa,EACjD9J,GAAY,QACR8J,GAAS,aAAkB,MACvBA,GAAS,aAAkB,OACzBA,GAAS,WACT,OACV9J,GAAY,WAAa8J,GAAS,UAAe,EAEjD9J,GAAY,UAAY8J,GAAS,GAAQ,EACzC9J,GAAY,QAAU,GACtBA,GAAY,YACRyJ,KAA4BK,GAAS,KACrC9J,GAAY,cACZA,GAAY,mBAAqB,aAEjC8J,GAAS,SAAc,GACvBA,GAAS,SAAc,EAAG,CAC1B9J,GAAY,cACR8J,GAAS,SAAc,EAAI,UAAY,SAC3C,MAAMC,GAAoB,KAAK,yBAAyB,CACpD,MAAOvyC,GAAM,KACb,KAAM,kBAAkB,iBACxB,KAAMwoC,GAAY,IAC1C,CAAqB,EACKlkB,GAAU,MAAM,KAAK,MAAMiuB,GAAkB,MAAOA,GAAkB,UAAU,EAClFjuB,GAAQ,CAAC,GAAKA,GAAQ,CAAC,EAAE,MACzBkkB,GAAY,aAAelkB,GAAQ,CAAC,EAAE,MAGtCkkB,GAAY,aAAe,EAEnD,CACoBA,GAAY,OAAS,YACrBA,GAAY,KAAO,SAAS,wBAAwBv7B,GAAKu7B,GAAY,IAAI,GAG7E,IAAIniC,GAAMmiC,GAAY,KAAK,QAAQ,GAAG,EACtC,GAAIniC,KAAQ,GAAI,CACZ,MAAMmsC,GAAWhK,GAAY,KAC7B,IAAIt5B,GAAWsjC,GAAS,OAAO,EAAGnsC,EAAG,EACrC,GAAI,KAAK,OAAO,sBAAsB,KAAM8gC,IAAQA,KAAQj4B,EAAQ,EAAG,CACnE,IAAIhN,GAAM,SAASswC,GAAS,UAAUnsC,GAAM,EAAGmsC,GAAS,OAAS,CAAC,CAAC,EAC/DtwC,KACAsmC,GAAY,OAAStmC,GAAI,SAAU,EACnCsmC,GAAY,KAAOt5B,GAE/C,CACoB,GAAI,KAAK,OAAO,yBAAyB,KAAMi4B,IAAQA,KAAQj4B,EAAQ,EAAG,CACtE,MAAMujC,GAAK,IAAI,OAAO,IAAIvjC,EAAQ,2BAA2B,EACvD0O,GAAU40B,GAAS,MAAMC,EAAE,EAC7B70B,IAAWA,GAAQ,CAAC,IACpB4qB,GAAY,UAAY,CAAC5qB,GAAQ,CAAC,GAElC,KAAK,OAAO,qBAAqB,KAAMupB,IAAQA,KAAQj4B,EAAQ,GAC3D0O,IAAWA,GAAQ,CAAC,IACpB4qB,GAAY,MAAQ,CAAC5qB,GAAQ,CAAC,GAGtC4qB,GAAY,KAAOt5B,EAC3C,CACA,CACgB,OAAOs5B,EACvB,CAAa,CAAC,EAEF,IAAIkK,GACJ,MAAMC,GAAa,CAAE,EACfC,GAAU,oEAChB,MAAQF,GAAWE,GAAQ,KAAK3lC,EAAG,KAAO,MACtC0lC,GAAW,KAAK,CACZ,KAAMD,GAAS,CAAC,EAChB,QAASA,GAAS,CAAC,EACd,OAAO,EAAGA,GAAS,CAAC,EAAE,OAAS,CAAC,EAChC,MAAM,MAAM,EACjB,oBAAqBA,GAAS,CAAC,CACnD,CAAiB,EAGL,MAAMG,GAA6B,SAAS,KAAK3H,GAAgB5C,IAAiBA,GAAa,EAAK,EACpGtoC,GAAM,YAAc6yC,GAA2B,IAAKhe,IAAe,CAC/D,MAAMie,GAAiB5H,GAAc,OAAQ5C,IAAiBA,GAAa,KAAUzT,GAAW,IAC5FyT,GAAa,QAAazT,GAAW,KAAQ,EAC3Cf,GAAcgf,GAAe,IAAKxK,IAAiBA,GAAa,IAAO,EACvEyK,GAAwBD,GAAe,IAAKxK,IAAiBA,GAAa,EAAK,EAE/E0K,GAAYL,GAAW,KAAMM,IAAOA,GAAG,sBACzCpe,GAAW,OACXoe,GAAG,QAAQ,MAAOllC,IAAW+lB,GAAY,QAAQ/lB,EAAM,IAAM,EAAE,CAAC,EACpE,OAAO,IAAI,gBAAgB,CACvB,KAAMilC,IAAW,KACjB,YAAalf,GACb,oBAAqBe,GAAW,MAChC,sBAAuBke,GACvB,SAAUle,GAAW,UACrB,SAAUA,GAAW,SACzC,CAAiB,CACjB,CAAa,EAED,IAAIqe,GACJ,MAAMC,GAAiB,CAAE,EACnBC,GAAc,0CACpB,MAAQF,GAAoBE,GAAY,KAAKnmC,EAAG,KAAO,MACnDkmC,GAAe,KAAK,CAChB,KAAMD,GAAkB,CAAC,EACzB,QAASA,GAAkB,CAAC,EACvB,OAAO,EAAGA,GAAkB,CAAC,EAAE,OAAS,CAAC,EACzC,MAAM,MAAM,CACrC,CAAiB,EAGL,MAAMG,GAAsBrB,GACvB,OAAQsB,IAAYA,GAAQ,SAAc,GAAG,EAC7C,IAAKA,IAAYA,GAAQ,IAAO,EAChC,OAAO,CAACt9C,GAAOkJ,GAAO8rB,KAASA,GAAK,QAAQh1B,EAAK,IAAMkJ,EAAK,EAC5D,IAAI,MAAOq0C,IAAgB,CAC5B,MAAMD,GAAUtB,GAAU,KAAMsB,IAAYA,GAAQ,OAAYC,EAAW,EAErEC,IADa,MAAM,KAAK,MAAM,sBAAsBF,GAAQ,IAAO,IAAI,GAExE,KAAK,CAACG,GAAYC,KAAe,SAASD,GAAW,KAAQ,EAC9D,SAASC,GAAW,KAAQ,CAAC,EAC5B,IAAKC,IAAcA,GAAU,IAAO,EACzC,GAAIH,GAAa,SAAW,EAAG,CAC3B,MAAMzlC,GAAS/N,GAAM,QAAQ,KAAM+N,IACxB,CAAC,CAACylC,GAAa,KAAMI,IAAgBA,KAAgB7lC,GAAO,IAAI,CAC1E,EACGA,KACAA,GAAO,SAAW,GAC1C,CAEgB,MAAM8lC,GAAeV,GAAe,KAAMW,IAC/BA,GAAQ,QAAQ,MAAO/lC,IAAWylC,GAAa,QAAQzlC,EAAM,IAAM,EAAE,CAC/E,EACD,OAAO,IAAI,YAAY,CACnB,KAAM8lC,GACAA,GAAa,KACb,KAAK,WAAW,eAAe,qBAAqB7zC,GAAOwzC,EAAY,EAC7E,YAAaA,EACjC,CAAiB,CACjB,CAAa,EACDxzC,GAAM,QAAW,MAAM,QAAQ,IAAIqzC,EAAmB,EAEtD,IAAI93C,GACJ,MAAMuwB,GAAS,mDACf,MAAQvwB,GAASuwB,GAAO,KAAK7e,EAAG,KAAO,MACnCjN,GAAM,OAAO,KAAK,IAAI,WAAW,CAC7B,KAAMzE,GAAO,CAAC,EACd,WAAYA,GAAO,CAAC,CACxC,CAAiB,CAAC,EAGN,MAAMw4C,GAAkB/B,GACnB,OAAQsB,IAAYA,GAAQ,SAAc,GAAG,EAC7C,IAAKA,IAAYA,GAAQ,IAAO,EAChC,OAAO,CAACt9C,GAAOkJ,GAAO8rB,KAASA,GAAK,QAAQh1B,EAAK,IAAMkJ,EAAK,EAC5D,IAAI,MAAOq0C,IAAgB,CAC5B,MAAMS,GAAWxC,GAAa,KAAMyC,IAAeA,GAAW,OAAYV,EAAW,EAC/Et1B,GAAY,aAAa,KAAK+1B,GAAS,GAAM,EAC7CV,GAAUtB,GAAU,KAAMsB,IAAYA,GAAQ,OAAYC,EAAW,EAErEC,IADa,MAAM,KAAK,MAAM,sBAAsBF,GAAQ,IAAO,IAAI,GAExE,KAAK,CAACG,GAAYC,KAAe,SAASD,GAAW,KAAQ,EAC9D,SAASC,GAAW,KAAQ,CAAC,EAC5B,IAAKC,IAAcA,GAAU,IAAO,EACnCO,GAAc,GAAGrC,GAAQ,SAAc,GAAGA,GAAQ,QAAW,IAAM,EAAE,GAAGyB,GAAQ,IAAO,GACvFa,GAAWb,GAAQ,SAAc,KACnCA,GAAQ,SAAc,EAC1B,OAAO,IAAI,WAAW,CAClB,MAAOtzC,GACP,KAAMk0C,GACN,YAAaV,GACb,SAAUW,GACV,MAAOl2B,GAAYA,GAAU,CAAC,EAAI,MACtD,CAAiB,CACjB,CAAa,EACKyyB,GAAU,MAAM,QAAQ,IAAIqD,EAAe,EACjD,OAAA/zC,GAAM,QAAU0wC,GAAQ,OAAQxxC,IAAU,CAAC,CAACA,EAAK,EAC1Cc,EACnB,CAAS,CAAC,CACV,CAII,eAAeA,EAAOwuC,EAAmB4F,GAAgB,CACrD,MAAMt0B,GAAiB9f,EAAM,QAAQ,OAAQ+N,IAAWA,GAAO,SAAS,EAClEsmC,GAAmBv0B,GAAe,KAAM/R,IAAWA,GAAO,aAAeA,GAAO,qBAAuB,WAAW,EAClHumC,GAAcx0B,GAAe,OAAS,EAC5C,GAAIw0B,IAAeD,GACf,MAAM,IAAI,aAAa,gEAAgE,EAC3F,MAAME,GAAoBv0C,EAAM,QAC3B,IAAK+N,IAAW,KAAK,qBAAqBA,GAAQumC,EAAW,CAAC,EAC9D,KAAK,IAAI,EACR,CAACnlC,EAAQ,EAAI,KAAK,eAAenP,EAAM,IAAI,EACjD,IAAIiN,GAAM,gBAAgB,KAAK,WAAWjN,EAAM,IAAI,CAAC,KAAKu0C,EAAiB,GACvE,CAACC,GAAa7zB,EAAS,EAAI,KAAK,eAAe3gB,EAAM,IAAI,EAC7D,MAAMivC,GAAemF,GACf,GAAGI,GAAc,GAAGA,EAAW,IAAM,EAAE,GAAG7zB,GAAU,QAAQ,cAAe,EAAE,CAAC,GAC9E3gB,EAAM,KAaZ,GAXAA,EAAM,QACD,OAAQ+N,IAAWA,GAAO,QAAQ,EAClC,QAASA,IAAW,CACC/N,EAAM,QAAQ,KAAMqB,IAAWA,GAAO,YAAY,SAAW,GAC/EA,GAAO,YAAY,CAAC,IAAM0M,GAAO,IAAI,GAErC/N,EAAM,QAAQ,KAAK,IAAI,YAAY,CAC/B,KAAM,KAAK,WAAW,eAAe,qBAAqBA,EAAO,CAAC+N,GAAO,IAAI,CAAC,EAC9E,YAAa,CAACA,GAAO,IAAI,CAC7C,CAAiB,CAAC,CAClB,CAAS,EACG/N,EAAM,QAAQ,OAAS,EAAG,CAC1B,MAAMy0C,GAAaz0C,EAAM,QACpB,IAAKqB,IAAW,CACjB,MAAMuuC,GAAavuC,GAAO,KACpBA,GAAO,KACP,KAAK,WAAW,eAAe,qBAAqB4tC,GAAc5tC,GAAO,WAAW,EACpFyyB,GAAczyB,GAAO,YACtB,IAAKgd,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd,MAAO,eAAeuxB,EAAU,aAAa9b,EAAW,GAC3D,CAAA,EACI,KAAK,IAAI,EACd7mB,IAAO,KAAKwnC,EAAU,EAClC,CACQ,GAAIz0C,EAAM,OAAO,OAAS,EAAG,CACzB,MAAM00C,GAAY10C,EAAM,OACnB,IAAKsB,IAIC,eAHWA,GAAM,KAClBA,GAAM,KACN,KAAK,WAAW,eAAe,oBAAoB2tC,GAAc3tC,GAAM,UAAU,CACxD,YAAYA,GAAM,UAAU,GAC9D,EACI,KAAK,IAAI,EACd2L,IAAO,KAAKynC,EAAS,EACjC,CACQ,GAAI10C,EAAM,YAAY,OAAS,GAAKwuC,EAAmB,CACnD,MAAMmG,GAAiB30C,EAAM,YACxB,OAAQ21B,IAAO,CAChB,KAAM,CAACif,EAAkB,EAAI,KAAK,eAAejf,GAAG,mBAAmB,EACvE,OAAIif,KAAuBzlC,EAI9B,CAAA,EACI,IAAKwmB,IAAO,CACb,KAAM,CAAA,CAAGkf,EAAe,EAAI,KAAK,eAAelf,GAAG,mBAAmB,EAChE7B,GAAc6B,GAAG,YAClB,IAAKtX,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACTsX,GAAG,OACJA,GAAG,KAAO,KAAK,WAAW,eAAe,eAAesZ,GAActZ,GAAG,YAAa,KAAK,aAAaA,EAAE,EAAGA,GAAG,qBAAqB,GACzI,MAAMod,GAAwBpd,GAAG,sBAC5B,IAAKtX,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd,IAAIyW,GAAa,eAAea,GAAG,IAAI,kBAAkB7B,EAAW,iBAAiB+gB,EAAe,MAAM9B,EAAqB,IAC/H,OAAIpd,GAAG,WACHb,IAAc,cAAca,GAAG,QAAQ,IACvCA,GAAG,WACHb,IAAc,cAAca,GAAG,QAAQ,IACvCA,GAAG,aACHb,IAAc,eAAea,GAAG,UAAU,IACvCb,EACV,CAAA,EACI,KAAK,IAAI,EACd7nB,IAAO,KAAK0nC,EAAc,EACtC,CACQ,GAAI70B,GAAe,OAAS,EAAG,CAC3B,MAAMgU,GAAchU,GACf,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdd,IAAO,kBAAkB6mB,EAAW,GAChD,CACQ,OAAA7mB,IAAO,IACHjN,EAAM,eACNiN,IAAO,kBAEJ,IAAI,MAAMA,EAAG,CAC5B,CAII,aAAaumB,EAAa8a,EAAS,CAC/B,MAAM3tB,GAAY,gBAAgB,QAAQ6S,CAAW,EAC/CA,EAAY,KACZA,EACApkB,GAAQk/B,EACR,wBAAwB,KAAK,WAAW3tB,EAAS,CAAC,GAClD,cAAc,KAAK,WAAWA,EAAS,CAAC,GAC9C,OAAO,IAAI,MAAMvR,EAAK,CAC9B,CACI,cAAcy5B,EAAM,CAChB,OAAI,OAAOA,EAAK,YAAe,SACpB,IAAI,MAAM,gBAAgBA,EAAK,IAAI,QAAQA,EAAK,UAAU,EAAE,EAG5D,IAAI,MAAM,gBAAgBA,EAAK,IAAI,QAAQA,EAC7C,WAAW,KAAK,UAAU,EAC1B,SAAQ,CAAE,EAAE,CAE7B,CACI,wBAAwBA,EAAM,CAC1B,MAAMrqB,EAAa,OAAOqqB,EAAK,YAAe,SACxCA,EAAK,WAAW,KAAI,EACpBA,EAAK,WAAW,KAAK,UAAU,EAAE,SAAU,EACjD,OAAO,KAAK,yBAAyB,CACjC,KAAM,kBAAkB,KACxB,KAAMA,EAAK,KACX,MAAOrqB,CACnB,CAAS,CACT,CAII,YAAYs2B,EAAY,CACpB,MAAMjI,EAAW,gBAAgB,OAAOiI,CAAU,EAC5CA,EAAW,KACXA,EACN,OAAO,IAAI,MAAM,cAAcjI,CAAQ,GAAG,CAClD,CAII,wBAAwBiI,EAAY,CAChC,MAAMjI,EAAW,gBAAgB,OAAOiI,CAAU,EAC5CA,EAAW,KACXA,EACN,OAAO,KAAK,yBAAyB,CACjC,KAAM,kBAAkB,KACxB,KAAMjI,CAClB,CAAS,CACT,CAII,eAAe7sC,EAAOd,EAAO,CACzB,MAAMif,GAAUjf,EAAM,YACjB,IAAKmf,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACR,CAAClP,GAAUwR,EAAS,EAAI,KAAK,eAAe3gB,EAAM,IAAI,EAC5D,OAAO,IAAI,MAAM,UAAUd,EAAM,SAAW,UAAY,EAAE,SAASiQ,GAAW,IAAIA,EAAQ,KAAO,EAAE,GAAG,KAAK,WAAWjQ,EAAM,IAAI,CAAC,QAAQyhB,EAAS,MAAMxC,EAAO,KAAKjf,EAAM,MAAQ,SAAWA,EAAM,MAAQ,EAAE,EAAE,CACvN,CAII,aAAayxC,EAAa,CACtB,IAAIb,EAAY,gBAAgB,aAAaa,CAAW,EAClDA,EAAY,KACZA,EACN,OAAO,IAAI,MAAM,cAAc,KAAK,WAAWb,CAAS,CAAC,EAAE,CACnE,CAII,qBAAqB/hC,EAAQumC,EAAa,CACtC,IAAI1wC,GAAI,IAAMmK,EAAO,KAAO,IAC5B,OAAI,gBAAgB,iBAAiBA,CAAM,EACvCnK,IAAK,IAAM,KAAK,OAAO,cAAcmK,CAAM,EAG3CnK,IAAK,IAAM,KAAK,WAAW,OAAO,eAAemK,CAAM,EAEvDA,EAAO,OACPnK,IACI,YACImK,EAAO,KACP,SACAA,EAAO,KAAK,IAAKrG,IAAQ,IAAMA,GAAM,GAAG,EAAE,KAAK,GAAG,EAClD,OACRqG,EAAO,WAAa,CAACumC,IACrB1wC,IAAK,gBACLmK,EAAO,cAAgB,IACvBA,EAAO,qBAAuB,cAE9BnK,IAAK,kBACLmK,EAAO,YACPnK,IAAK,YAAcmK,EAAO,WAC1BA,EAAO,aAAe,KACtBnK,IAAK,aACLmK,EAAO,aACPnK,IAAK,QAAQmK,EAAO,YAAY,KAAKA,EAAO,cAAgBA,EAAO,cAAgB,SAAS,GAGxFA,EAAO,UAAY,QAAaA,EAAO,UAAY,OACnDnK,IAAK,aAAemK,EAAO,QAAU,KAEtCnK,EACf,CACI,MAAM,cAAcurC,EAAUD,EAAU6F,GAAc,GAAM,CACxD,MAAMhH,GAAY,CAAE,EACdC,GAAc,CAAE,EAEtBkB,EAAS,QAAQ,QAAShwC,IAAU,CAChC6uC,GAAU,KAAK,KAAK,aAAa7uC,EAAK,CAAC,EACvC8uC,GAAY,KAAK,KAAK,eAAekB,EAAUhwC,EAAK,CAAC,CACjE,CAAS,EAED,GAAI,CAACs1C,GAAaQ,EAAY,EAAI,KAAK,eAAe7F,EAAS,IAAI,EAC/D,CAAA,CAAG8F,EAAY,EAAI,KAAK,eAAe/F,EAAS,IAAI,EAMxD,GALAC,EAAS,KAAO6F,GAAe,GAAGR,GAAc,GAAGA,EAAW,IAAM,EAAE,aAAaQ,EAAY,GAE/FjH,GAAU,KAAK,KAAK,eAAeoB,EAAU,GAAM,EAAI,CAAC,EACxDnB,GAAY,KAAK,KAAK,aAAamB,CAAQ,CAAC,EAExC4F,GAAa,CACb,IAAIG,GAAiB/F,EAAS,QACzB,OAAQphC,IAAW,CAACA,GAAO,aAAa,EACxC,IAAKA,IAAW,IAAIA,GAAO,IAAI,GAAG,EACnConC,GAAiBjG,EAAS,QACzB,OAAQnhC,IAAW,CAACA,GAAO,aAAa,EACxC,IAAKA,IAAW,IAAIA,GAAO,IAAI,GAAG,EACnConC,GAAe,OAASD,GAAe,OACvCA,GAAiB/F,EAAS,QACrB,OAAQphC,IAAW,CACpB,MAAMy/B,GAAY0B,EAAS,QAAQ,KAAMtrC,IAAMA,GAAE,OAASmK,GAAO,IAAI,EACrE,OAAIy/B,IAAaA,GAAU,cAChB,GACJ,CAACz/B,GAAO,eAAiBy/B,EACnC,CAAA,EACI,IAAKz/B,IAAW,IAAIA,GAAO,IAAI,GAAG,EAElConC,GAAe,OAASD,GAAe,SAC5CC,GAAiBjG,EAAS,QACrB,OAAQnhC,IACD,CAACA,GAAO,eACZohC,EAAS,QAAQ,KAAMvrC,IAAMA,GAAE,OAASmK,GAAO,IAAI,CAC1D,EACI,IAAKA,IAAW,IAAIA,GAAO,IAAI,GAAG,GAE3CggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWoB,EAAS,IAAI,CAAC,IAAI+F,GAAe,KAAK,IAAI,CAAC,YAAYC,GAAe,KAAK,IAAI,CAAC,SAAS,KAAK,WAAWjG,EAAS,IAAI,CAAC,EAAE,CAAC,EAClLlB,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWkB,EAAS,IAAI,CAAC,IAAIiG,GAAe,KAAK,IAAI,CAAC,YAAYD,GAAe,KAAK,IAAI,CAAC,SAAS,KAAK,WAAW/F,EAAS,IAAI,CAAC,EAAE,CAAC,CAChM,CAEQpB,GAAU,KAAK,KAAK,aAAamB,CAAQ,CAAC,EAC1ClB,GAAY,KAAK,KAAK,eAAekB,EAAU,EAAI,CAAC,EAEpDnB,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWoB,EAAS,IAAI,CAAC,cAAc,KAAK,WAAW8F,EAAY,CAAC,EAAE,CAAC,EACpHjH,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWkB,EAAS,IAAI,CAAC,cAAc,KAAK,WAAW8F,EAAY,CAAC,EAAE,CAAC,EACtH7F,EAAS,KAAOD,EAAS,KAEzBC,EAAS,QAAQ,QAASjwC,IAAU,CAE3BA,GAAM,OACPA,GAAM,KAAO,KAAK,WAAW,eAAe,UAAUiwC,EAAUjwC,GAAM,YAAaA,GAAM,KAAK,GAClG6uC,GAAU,KAAK,KAAK,eAAeoB,EAAUjwC,EAAK,CAAC,EACnD8uC,GAAY,KAAK,KAAK,aAAa9uC,EAAK,CAAC,CACrD,CAAS,EAGDgwC,EAAS,QACJ,OAAQnhC,IAAW,CACpB,MAAM88B,GAAiBsE,EAAS,QAAQ,KAAMvrC,IAAMA,GAAE,OAASmK,GAAO,IAAI,EAG1E,OAAQA,GAAO,eACXA,GAAO,eACN,CAAC88B,IACG,CAACA,GAAe,eACb,CAACA,GAAe,aAC/B,CAAA,EACI,QAAS98B,IAAW,CACrB,MAAM6gC,GAAc,KAAK,yBAAyB,CAC9C,MAAOM,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAMnhC,GAAO,IAC7B,CAAa,EACK4gC,GAAc,KAAK,yBAAyB,CAC9C,MAAOO,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAMnhC,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACDggC,GAAU,KAAKa,EAAW,EAC1BZ,GAAY,KAAKW,EAAW,CACxC,CAAS,EAEDQ,EAAS,QACJ,OAAQphC,IAAWA,GAAO,eAC3BA,GAAO,cACP,CAACmhC,EAAS,QAAQ,KAAMtrC,IAAMA,GAAE,OAASmK,GAAO,IAAI,CAAC,EACpD,QAASA,IAAW,CACrB,MAAM4gC,GAAc,KAAK,yBAAyB,CAC9C,MAAOQ,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAMphC,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACK6gC,GAAc,KAAK,yBAAyB,CAC9C,MAAOO,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAMphC,GAAO,IAC7B,CAAa,EACDggC,GAAU,KAAKY,EAAW,EAC1BX,GAAY,KAAKY,EAAW,CACxC,CAAS,EAEDO,EAAS,QACJ,OAAQphC,IAAWA,GAAO,eAAiBA,GAAO,YAAY,EAC9D,QAASA,IAAW,CACrB,MAAMy/B,GAAY0B,EAAS,QAAQ,KAAMtrC,IAAMA,GAAE,OAASmK,GAAO,MAC7DnK,GAAE,eACFmK,GAAO,eACPnK,GAAE,eAAiBmK,GAAO,YAAY,EAC1C,GAAI,CAACy/B,GACD,OAEJ,MAAMoB,GAAc,KAAK,yBAAyB,CAC9C,MAAOM,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAM1B,GAAU,IAChC,CAAa,EACKmB,GAAc,KAAK,yBAAyB,CAC9C,MAAOQ,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAMphC,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACDggC,GAAU,KAAKa,EAAW,EAC1Bb,GAAU,KAAKY,EAAW,EAE1B,MAAMyG,GAAoB,KAAK,yBAAyB,CACpD,MAAOjG,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAM3B,GAAU,KAChB,MAAOA,GAAU,YACjC,CAAa,EACK6H,GAAoB,KAAK,yBAAyB,CACpD,MAAOnG,EAAS,KAChB,KAAM,kBAAkB,iBACxB,KAAMnhC,GAAO,IAC7B,CAAa,EACDigC,GAAY,KAAKoH,EAAiB,EAClCpH,GAAY,KAAKqH,EAAiB,CAC9C,CAAS,EACD,MAAM,KAAK,eAAetH,GAAWC,EAAW,EAChD,KAAK,mBAAmBkB,EAAUC,CAAQ,CAClD,CAII,eAAejyB,EAAW,CACtB,OAAQA,EAAU,QAAQ,GAAG,IAAM,GAC7BA,EAAU,MAAM,GAAG,EACnB,CAAC,OAAWA,CAAS,CACnC,CAII,WAAWrnB,EAAQy/C,EAAe,CAI9B,OAHkB,gBAAgB,QAAQz/C,CAAM,GAAK,gBAAgB,OAAOA,CAAM,EAC5EA,EAAO,KACPA,GAED,QAAQ,aAAc,EAAE,EACxB,MAAM,GAAG,EACT,IAAK8D,IAAO27C,EAAgB37C,GAAI,IAAIA,EAAC,GAAI,EACzC,KAAK,GAAG,CACrB,CAII,mBAAmB65B,EAAazW,EAAS,CACrC,MAAM,IAAI,aAAa,+CAA+C,CAC9E,CACA,CC99CO,MAAM,WAAY,CAIrB,YAAYZ,EAAa,CACrB,KAAK,YAAcA,CAC3B,CAII,MAAM,UAAUo5B,KAAUtwB,EAAM,CAC5B,MAAM1pB,GAAS,IAAI,kBACbi6C,GAAoB,KAAK,YAAYD,CAAK,OAAO,EACnD,OAAOC,IAAsB,YAE7BA,GAAkB,KAAK,KAAMj6C,GAAQ,GAAG0pB,CAAI,EAEhD,MAAM1pB,GAAO,KAAM,CAC3B,CASI,2BAA2BA,EAAQlD,EAAUsI,GAAQ,CAC7CA,IAAUtI,EAAS,sBAAsB,QACzCA,EAAS,sBAAsB,QAASo9C,IAAa,CACjD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,aAAc,CACzB,MAAMD,GAAkBC,GAAW,aAAa,CAC5C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,CAClC,CAAqB,EACGq9C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,2BAA2BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBnjB,GAAgBojB,GAAkB,CAE/Fl1C,IAAUtI,EAAS,sBAAsB,QACzCA,EAAS,sBAAsB,QAASo9C,IAAa,CACjD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,aAAc,CACzB,MAAMD,GAAkBC,GAAW,aAAa,CAC5C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,eAAgBnjB,IAAkB,CAAE,EACpC,iBAAkBojB,IAAoB,CAAE,CAChE,CAAqB,EACGH,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,2BAA2BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBlV,GAAY,CACzE//B,IAAUtI,EAAS,sBAAsB,QACzCA,EAAS,sBAAsB,QAASo9C,IAAa,CACjD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,aAAc,CACzB,MAAMD,GAAkBC,GAAW,aAAa,CAC5C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,SAAUv9C,EAAS,oBAAoBu9C,IAAkBlV,EAAU,CAC3F,CAAqB,EACGgV,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,+BAA+BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBlV,GAAY,CAC7E//B,IAAUtI,EAAS,0BAA0B,QAC7CA,EAAS,0BAA0B,QAASo9C,IAAa,CACrD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,iBAAkB,CAC7B,MAAMD,GAAkBC,GAAW,iBAAiB,CAChD,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,SAAUv9C,EAAS,oBAAoBu9C,IAAkBlV,EAAU,CAC3F,CAAqB,EACGgV,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,4BAA4BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBlV,GAAY,CAC1E//B,IAAUtI,EAAS,uBAAuB,QAC1CA,EAAS,uBAAuB,QAASo9C,IAAa,CAClD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,cAAe,CAC1B,MAAMD,GAAkBC,GAAW,cAAc,CAC7C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,SAAUv9C,EAAS,oBAAoBu9C,IAAkBlV,EAAU,CAC3F,CAAqB,EACGgV,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,0BAA0BA,EAAQlD,EAAUsI,GAAQ+/B,GAAY,CACxD//B,IAAUtI,EAAS,qBAAqB,QACxCA,EAAS,qBAAqB,QAASo9C,IAAa,CAChD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,YAAa,CACxB,MAAMD,GAAkBC,GAAW,YAAY,CAC3C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,SAAUA,EAAS,oBAAoBqoC,EAAU,CACzE,CAAqB,EACGgV,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,0BAA0BA,EAAQ6T,EAAOC,GAAY,CAC7C,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASsmC,IAAe,CAC5D,GAAIA,GAAW,YAAa,CACxB,MAAMD,GAAkBC,GAAW,YAAY,CAC3C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,MAAOvmC,EACP,WAAYC,EACpC,CAAqB,EACGqmC,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,yBAAyBA,EAAQ6T,EAAOC,GAAYymC,GAASC,GAAexvB,GAAYpnB,GAAO,CACvF,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASw2C,IAAe,CAC5D,GAAIA,GAAW,WAAY,CACvB,MAAMD,GAAkBC,GAAW,WAAW,CAC1C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,MAAOvmC,EACP,WAAYC,GACZ,QAASymC,GACT,cAAeC,GACf,WAAYxvB,GACZ,MAAOpnB,EAC/B,CAAqB,EACGu2C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,qCAAqCA,EAAQ,CACrC,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,GAAe,CAC5D,GAAIA,EAAW,uBAAwB,CACnC,MAAMD,GAAkBC,EAAW,uBAAuB,CACtD,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,OAClD,CAAqB,EACGD,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,oCAAoCA,EAAQ,CACpC,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,GAAe,CAC5D,GAAIA,EAAW,sBAAuB,CAClC,MAAMD,GAAkBC,EAAW,sBAAsB,CACrD,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,OAClD,CAAqB,EACGD,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,sCAAsCA,EAAQ,CACtC,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,GAAe,CAC5D,GAAIA,EAAW,wBAAyB,CACpC,MAAMD,GAAkBC,EAAW,wBAAwB,CACvD,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,OAClD,CAAqB,EACGD,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,qCAAqCA,EAAQ,CACrC,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,GAAe,CAC5D,GAAIA,EAAW,uBAAwB,CACnC,MAAMD,GAAkBC,EAAW,uBAAuB,CACtD,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,OAClD,CAAqB,EACGD,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,wCAAwCA,EAAQ,CACxC,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,GAAe,CAC5D,GAAIA,EAAW,0BAA2B,CACtC,MAAMD,GAAkBC,EAAW,0BAA0B,CACzD,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,OAClD,CAAqB,EACGD,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,uCAAuCA,EAAQ,CACvC,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,GAAe,CAC5D,GAAIA,EAAW,yBAA0B,CACrC,MAAMD,GAAkBC,EAAW,yBAAyB,CACxD,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,OAClD,CAAqB,EACGD,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,0BAA0BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBnjB,GAAgBojB,GAAkB,CAC9Fl1C,IAAUtI,EAAS,qBAAqB,QACxCA,EAAS,qBAAqB,QAASo9C,IAAa,CAChD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,YAAa,CACxB,MAAMD,GAAkBC,GAAW,YAAY,CAC3C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,eAAgBnjB,IAAkB,CAAE,EACpC,iBAAkBojB,IAAoB,CAAE,CAChE,CAAqB,EACGH,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,0BAA0BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBlV,GAAY,CACxE//B,IAAUtI,EAAS,qBAAqB,QACxCA,EAAS,qBAAqB,QAASo9C,IAAa,CAChD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,YAAa,CACxB,MAAMD,GAAkBC,GAAW,YAAY,CAC3C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,SAAUv9C,EAAS,oBAAoBu9C,IAAkBlV,EAAU,CAC3F,CAAqB,EACGgV,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,8BAA8BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBlV,GAAY,CAC5E//B,IAAUtI,EAAS,yBAAyB,QAC5CA,EAAS,yBAAyB,QAASo9C,IAAa,CACpD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,gBAAiB,CAC5B,MAAMD,GAAkBC,GAAW,gBAAgB,CAC/C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,SAAUv9C,EAAS,oBAAoBu9C,IAAkBlV,EAAU,CAC3F,CAAqB,EACGgV,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CASI,2BAA2BA,EAAQlD,EAAUsI,GAAQi1C,GAAgBlV,GAAY,CACzE//B,IAAUtI,EAAS,sBAAsB,QACzCA,EAAS,sBAAsB,QAASo9C,IAAa,CACjD,GAAIA,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,EAED,KAAK,YAAY,WAAW,YAAY,QACxC,KAAK,YAAY,WAAW,YAAY,QAASo6C,IAAe,CAC5D,GAAI,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GACpDs9C,GAAW,aAAc,CACzB,MAAMD,GAAkBC,GAAW,aAAa,CAC5C,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,QAC1B,OAAQh1C,GACR,SAAUtI,EACV,eAAgBu9C,GAChB,SAAUv9C,EAAS,oBAAoBu9C,IAAkBlV,EAAU,CAC3F,CAAqB,EACGgV,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CACA,CAAa,CAEb,CAII,0BAA0BA,EAAQlD,EAAU0oB,GAAU,CAClD,OAAO,KAAK,mBAAmBxlB,EAAQlD,EAAU0oB,EAAQ,CACjE,CASI,mBAAmBxlB,EAAQlD,EAAU0oB,GAAU,CAE3C,MAAMi1B,GAAqB,KAAK,YAAY,WAAW,YAAY,OAAQL,IAAe,KAAK,oBAAoBA,GAAYt9C,EAAS,MAAM,GAC1Is9C,GAAW,SAAS,EACxB,GAAIt9C,EAAS,UAAU,QACnBA,EAAS,mBAAmB,QAC5B29C,GAAmB,OAAQ,CAE3B,MAAMC,GAAqBl1B,GAAS,OAAQpgB,IAAW,EAAEA,cAAkB,QAAQ,EAE/EtI,EAAS,UAAU,QACnBA,EAAS,UAAU,QAAS4W,IAAa,CACrCgnC,GAAmB,QAASt1C,IAAW,CAEnC,GAAIsO,GAAS,QACT,CAACtO,GAAO,eAAesO,GAAS,YAAY,EAC5C,OACJ,MAAMjZ,GAAQiZ,GAAS,eAAetO,EAAM,EACxC,YAAY,SAAS3K,EAAK,GAC1B,KAAK,mBAAmBuF,EAAQ0T,GAAS,sBAAuB,MAAM,QAAQjZ,EAAK,EAAIA,GAAQ,CAACA,EAAK,CAAC,CAClI,CAAqB,CACrB,CAAiB,EAEDqC,EAAS,mBAAmB,QAC5BA,EAAS,mBAAmB,QAASo9C,IAAa,CAC9CQ,GAAmB,QAASt1C,IAAW,CACnC,GAAI80C,GAAS,UAAU90C,EAAM,EAAG,CAC5B,MAAM+0C,GAAkBD,GAAS,QAAQ90C,EAAM,EAC3C+0C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OACnC,CACA,CAAqB,CACrB,CAAiB,EAELy6C,GAAmB,QAASL,IAAe,CACvCM,GAAmB,QAASt1C,IAAW,CACnC,MAAM+0C,GAAkBC,GAAW,UAAUh1C,GAAQ,CACjD,OAAAA,GACA,SAAAtI,EACA,WAAY,KAAK,YAAY,WAC7B,YAAa,KAAK,YAClB,QAAS,KAAK,YAAY,OAClD,CAAqB,EACGq9C,cAA2B,SAC3Bn6C,EAAO,SAAS,KAAKm6C,EAAe,EACxCn6C,EAAO,OAC3B,CAAiB,CACjB,CAAa,CACb,CACA,CAQI,oBAAoBo6C,EAAY9/C,EAAQ,CACpC,MAAQ,CAAC8/C,EAAW,UAChB,CAACA,EAAW,SAAU,GACtBA,EAAW,SAAQ,IAAO,QAC1BA,EAAW,SAAQ,IAAO9/C,GAC1B8/C,EAAW,SAAQ,EAAG,cAAc9/C,CAAM,CACtD,CACA,CC1oBO,MAAM,WAAY,CACrB,aAAc,CAIV,KAAK,QAAU,CAAE,CACzB,CACA,CCAO,MAAM,2BAA2B,yBAA0B,CAI9D,YAAYoY,EAAQ,CAChB,MAAO,EACP,KAAK,OAASA,EACd,KAAK,WAAaA,EAAO,WACzB,KAAK,YAAc,IAAI,YAAY,IAAI,CAC/C,CAII,MAAM,iBAAkB,CACpB,MAAM,KAAK,MAAM,2BAA2B,CACpD,CAII,MAAM,gBAAiB,CACnB,MAAM,KAAK,MAAM,0BAA0B,CACnD,CAII,MAAM,MAAMmB,EAAOC,EAAY6mC,GAAsB,GAAO,CACxD,GAAI,KAAK,WACL,MAAM,IAAI,gCACd,MAAMC,GAAqB,MAAM,KAAK,QAAS,EACzC7T,GAAoB,IAAI,kBAC9B,KAAK,OAAO,WAAW,OAAO,SAASlzB,EAAOC,EAAY,IAAI,EAC9D,KAAK,YAAY,0BAA0BizB,GAAmBlzB,EAAOC,CAAU,EAC/E,MAAM+mC,GAAiB,CAAC,IAAI,KAC5B,GAAI,CACA,MAAMC,GAAM,MAAM,IAAI,QAAQ,MAAOhT,GAAIC,KAAS,CAC9C6S,GAAmB,WAAW/mC,EAAOC,EAAagnC,IAAQhT,GAAGgT,EAAG,EAAItf,IAAQuM,GAAKvM,EAAG,CAAC,CACrG,CAAa,EAEKuf,GAAwB,KAAK,OAAO,QAAQ,sBAE5CC,GADe,CAAC,IAAI,KACgBH,GAC1C,KAAK,YAAY,yBAAyB9T,GAAmBlzB,EAAOC,EAAY,GAAMknC,GAAoBF,GAAK,MAAS,EACpHC,IACAC,GAAqBD,IACrB,KAAK,OAAO,WAAW,OAAO,aAAaC,GAAoBnnC,EAAOC,EAAY,IAAI,EAE1F,MAAM9T,GAAS,IAAI,YACnB,GAAI6T,EAAM,OAAO,EAAG,EAAE,IAAM,cACxB7T,GAAO,IAAM86C,GAAI,aAEhB,CACD,IAAIG,GAAY,CAAE,EAClB,QAAS78C,GAAI,EAAGA,GAAI08C,GAAI,KAAK,OAAQ18C,KACjC68C,GAAU,KAAKH,GAAI,KAAK,KAAK18C,EAAC,CAAC,EAEnC4B,GAAO,QAAUi7C,GACjBj7C,GAAO,IAAMi7C,EAC7B,CACY,OAAIN,GACO36C,GAGAA,GAAO,GAE9B,OACew7B,GAAK,CACR,WAAK,OAAO,WAAW,OAAO,cAAcA,GAAK3nB,EAAOC,EAAY,IAAI,EACxE,KAAK,YAAY,yBAAyBizB,GAAmBlzB,EAAOC,EAAY,GAAO,OAAW,OAAW0nB,EAAG,EAC1G,IAAI,iBAAiB3nB,EAAOC,EAAY0nB,EAAG,CAC7D,QACgB,CACJ,MAAMuL,GAAkB,KAAM,CAC1C,CACA,CAqCI,MAAM,kBAAmB,CACrB,MAAM,IAAI,aAAa,sDAAsD,CACrF,CAII,MAAM,mBAAoB,CACtB,MAAM,IAAI,aAAa,sDAAsD,CACrF,CAII,MAAM,qBAAsB,CACxB,MAAM,IAAI,aAAa,sDAAsD,CACrF,CAMI,MAAM,eAAgB,CAClB,MAAM,KAAK,MAAM,2BAA2B,EAC5C,GAAI,CAEA,MAAMyO,EAAkB,MAAM,KAAK,MADN,0FACgC,EAEvDE,GAAmB,MAAM,KAAK,MADN,4HACiC,EAC/D,MAAM,QAAQ,IAAIF,EAAgB,IAAKva,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,EACpE,MAAM,QAAQ,IAAIya,GAAiB,IAAKza,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,CACjF,QACgB,CACJ,MAAM,KAAK,MAAM,0BAA0B,CACvD,CACA,CAOI,YAAYigB,EAAeC,EAAa,EAAG,CACvC,OAAO,OAAO,KAAKD,CAAa,EAAE,IAAI,CAAC1gD,GAAKmJ,KAAU,IAAInJ,EAAG,KAAU,CAC/E,CACA,CChKO,MAAM,sBAAsB,oBAAqB,CAIpD,YAAYkkB,EAAY,CACpB,MAAMA,CAAU,EAChB,KAAK,mBAAqB,OAG1B,KAAK,SAAW,KAAK,QAAQ,SAE7B,KAAK,iBAAkB,CAC/B,CAOI,MAAM,YAAa,CACf,YAAK,YAAc,OACZ,IAAI,QAAQ,CAACopB,EAAIC,IAAS,CAC7B,KAAK,mBAAmB,MAAMD,EAAIC,CAAI,CAClD,CAAS,CACT,CAII,kBAAkByC,EAAM,CACpB,OAAK,KAAK,cACN,KAAK,YAAc,IAAI,mBAAmB,IAAI,GAC3C,KAAK,WACpB,CAOI,MAAM,0BAA2B,CAC7B,MAAM1uB,EAAU,OAAO,OAAO,GAAI,CAC9B,KAAM,KAAK,QAAQ,SACnB,SAAU,KAAK,QAAQ,QAC1B,EAAE,KAAK,QAAQ,OAAS,EAAE,EACrB4C,EAAa,MAAM,IAAI,QAAQ,CAAC08B,GAASrT,KAAS,CACpD,KAAK,OAAO,aAAajsB,EAAUu/B,IAAOD,GAAQC,EAAE,EAAI7f,IAAQuM,GAAKvM,EAAG,CAAC,CACrF,CAAS,EACD,aAAM,IAAI,QAAQ,CAACsM,GAAIC,KAAS,CAG5BrpB,EAAW,WAAW,2BAA4B,CAAE,EAAE,IAAMopB,GAAE,EAAKtM,IAAQuM,GAAKvM,EAAG,CAAC,CAChG,CAAS,EACM9c,CACf,CAII,kBAAmB,CACf,GAAI,CACA,MAAM48B,EAAS,KAAK,QAAQ,QAAU,OAAO,aAC7C,KAAK,OAASA,CAC1B,MACkB,CACN,MAAM,IAAI,+BAA+B,iBAAkB,wBAAwB,CAC/F,CACA,CACA,CC5DO,MAAM,+BAA+B,yBAA0B,CAIlE,YAAY5oC,EAAQ,CAChB,MAAO,EACP,KAAK,OAASA,EACd,KAAK,WAAaA,EAAO,WACzB,KAAK,YAAc,IAAI,YAAY,IAAI,CAC/C,CAII,MAAM,iBAAkB,CACpB,MAAM,KAAK,MAAM,2BAA2B,CACpD,CAII,MAAM,gBAAiB,CACnB,MAAM,KAAK,MAAM,0BAA0B,CACnD,CAII,MAAMmB,EAAOC,EAAY6mC,GAAsB,GAAO,CAClD,GAAI,KAAK,WACL,MAAM,IAAI,gCACd,OAAO,IAAI,QAAQ,MAAO7S,GAAIC,KAAS,CACnC,MAAM6S,GAAqB,MAAM,KAAK,QAAS,EACzC7T,GAAoB,IAAI,kBAC9B,KAAK,OAAO,WAAW,OAAO,SAASlzB,EAAOC,EAAY,IAAI,EAC9D,KAAK,YAAY,0BAA0BizB,GAAmBlzB,EAAOC,CAAU,EAC/E,MAAM+mC,GAAiB,CAAC,IAAI,KAC5BD,GAAmB,WAAW/mC,EAAOC,EAAY,MAAOgnC,IAAQ,CAE5D,MAAMC,GAAwB,KAAK,OAAO,QAAQ,sBAE5CC,GADe,CAAC,IAAI,KACgBH,GAC1C,KAAK,YAAY,yBAAyB9T,GAAmBlzB,EAAOC,EAAY,GAAMknC,GAAoBF,GAAK,MAAS,EACpHC,IACAC,GAAqBD,IACrB,KAAK,OAAO,WAAW,OAAO,aAAaC,GAAoBnnC,EAAOC,EAAY,IAAI,EACtFizB,GAAkB,SAAS,OAAS,GACpC,MAAM,QAAQ,IAAIA,GAAkB,QAAQ,EAChD,MAAM/mC,GAAS,IAAI,YAInB,GAHI86C,IAAK,eAAe,cAAc,IAClC96C,GAAO,SAAW86C,GAAI,cAEtBA,IAAK,eAAe,MAAM,EAAG,CAC7B,IAAIS,GAAU,CAAE,EAChB,QAASn9C,GAAI,EAAGA,GAAI08C,GAAI,KAAK,OAAQ18C,KACjCm9C,GAAQ,KAAKT,GAAI,KAAK,KAAK18C,EAAC,CAAC,EAEjC4B,GAAO,IAAMu7C,GACbv7C,GAAO,QAAUu7C,EACrC,CAEoB1nC,EAAM,OAAO,EAAG,EAAE,IAAM,gBACxB7T,GAAO,IAAM86C,GAAI,UAGjBhT,GADA6S,GACG36C,GAGAA,GAAO,GAHD,CAKhB,EAAE,MAAOw7B,IAAQ,CACd,KAAK,OAAO,WAAW,OAAO,cAAcA,GAAK3nB,EAAOC,EAAY,IAAI,EACxE,KAAK,YAAY,yBAAyBizB,GAAmBlzB,EAAOC,EAAY,GAAO,OAAW,OAAW0nB,EAAG,EAChH,MAAMuL,GAAkB,KAAM,EAC9BgB,GAAK,IAAI,iBAAiBl0B,EAAOC,EAAY0nB,EAAG,CAAC,CACjE,CAAa,CACb,CAAS,CACT,CAOI,YAAY0f,EAAeC,EAAa,EAAG,CACvC,OAAO,OAAO,KAAKD,CAAa,EAAE,IAAI,CAAC1gD,GAAKmJ,KAAU,IAAInJ,EAAG,KAAU,CAC/E,CACA,CCnFO,MAAM,iBAAkB,CAI3B,YAAYkkB,EAAY,CAIpB,KAAK,aAAe,GAIpB,KAAK,YAAc,GAInB,KAAK,mBAAqB,SAO1B,KAAK,mBAAqB,CACtB,MACA,UACA,UACA,WACA,YACA,SACA,mBACA,OACA,OACA,UACA,YACA,UACA,oBACA,QACA,mBACA,WACA,OACA,OACA,OACA,OACA,OACA,SACA,mBACA,QACA,OACA,UACA,UACA,UACA,OACA,OACA,UACH,EAID,KAAK,qBAAuB,CAAC,uBAAuB,EAIpD,KAAK,sBAAwB,CACzB,YACA,UACA,oBACA,QACA,mBACA,WACA,OACA,OACA,MACH,EAID,KAAK,aAAe,CAAE,EAItB,KAAK,yBAA2B,CAC5B,OACA,SACA,mBACA,QACA,OACA,UACA,UACA,OACA,OACA,UACH,EAID,KAAK,qBAAuB,CACxB,OACA,SACA,mBACA,QACA,OACA,UACA,SACH,EAKD,KAAK,gBAAkB,CACnB,WAAY,WACZ,kBAAmB,kBACnB,WAAY,WACZ,kBAAmB,kBACnB,WAAY,WACZ,mBAAoB,GACpB,QAAS,UACT,UAAW,UACX,YAAa,UACb,cAAe,UACf,mBAAoB,SACpB,QAAS,MACT,gBAAiB,UACjB,UAAW,SACX,cAAe,MACf,WAAY,OACZ,YAAa,OACb,aAAc,UACd,iBAAkB,UAClB,eAAgB,UAChB,cAAe,UACf,aAAc,UACd,cAAe,MAClB,EACD,KAAK,gBAAkB,CACnB,QAAS,GACT,sBAAuB,EAC1B,EAOD,KAAK,kBAAoB,CAAE,EAC3B,KAAK,WAAaA,EAClB,KAAK,QAAUA,EAAW,QAE1B,KAAK,SAAW,KAAK,QAAQ,SAC7B,KAAK,iBAAkB,CAC/B,CAOI,kBAAkB8rB,EAAM,CACpB,OAAK,KAAK,cACN,KAAK,YAAc,IAAI,uBAAuB,IAAI,GAC/C,KAAK,WACpB,CAOI,MAAM,SAAU,CACZ,KAAK,mBAAqB,MAAM,KAAK,yBAA0B,CACvE,CAII,cAAe,CACX,OAAO,QAAQ,QAAS,CAChC,CAII,MAAM,YAAa,CACf,OAAO,IAAI,QAAQ,CAAC1C,EAAIC,IAAS,CAC7B,KAAK,YAAc,OACnB,KAAK,mBAAmB,MAAMD,EAAIC,CAAI,CAClD,CAAS,CACT,CACI,sBAAuB,CACnB,MAAO,CAAC,CAAC,OAAO,KAAK,KAAK,iBAAiB,EAAE,MACrD,CACI,wCAAwCt2B,EAAM,CAC1C,OAAO,KAAK,oBAAoBA,CAAI,GAAG,YAC/C,CACI,wCAAwC++B,EAAQ,CAC5C,OAAO,OAAO,OAAO,KAAK,iBAAiB,EAAE,KAAK,CAAC,CAAE,aAAAC,CAAc,IAAKD,IAAWC,CAAY,GAAG,sBAC1G,CAII,qBAAsB,CAClB,OAAO,IAAI,mBAAmB,KAAK,UAAU,CACrD,CAII,uBAAuBh2C,EAAOy+B,EAAgB,CAG1C,OAFIA,EAAe,cACfz+B,EAAQ,uBAAuB,YAAYy+B,EAAe,YAAaz+B,CAAK,GAC5EA,GAAU,KACHA,EACPy+B,EAAe,OAAS,SACxBA,EAAe,OAAS,UACjBz+B,IAAU,GAAO,EAAI,EAEvBy+B,EAAe,OAAS,OACtB,UAAU,sBAAsBz+B,CAAK,EAEvCy+B,EAAe,OAAS,OACtB,UAAU,sBAAsBz+B,CAAK,EAEvCy+B,EAAe,OAAS,YAC7BA,EAAe,OAAS,KAGjB,UAAU,6BAA6Bz+B,CAAK,EAE9Cy+B,EAAe,OAAS,eACtB,UAAU,oBAAoBz+B,CAAK,EAErCy+B,EAAe,OAAS,cACtB,UAAU,mBAAmBz+B,CAAK,EAEpCy+B,EAAe,OAAS,cACtB,UAAU,mBAAmBz+B,CAAK,EAEtCA,CACf,CAII,qBAAqBA,EAAOy+B,EAAgB,CACxC,OAAIz+B,GAAU,KACHy+B,EAAe,YAChB,uBAAuB,cAAcA,EAAe,YAAaz+B,CAAK,EACtEA,GACNy+B,EAAe,OAAS,SACxBA,EAAe,OAAS,UACxBz+B,EAAQ,EAAAA,EAEHy+B,EAAe,OAAS,YAC7BA,EAAe,OAAS,MAUpBz+B,GAAS,OAAOA,GAAU,WAMtB,gCAAgC,KAAKA,CAAK,IAC1CA,EAAQA,EAAM,QAAQ,IAAK,GAAG,GAE9B,oDAAoD,KAAKA,CAAK,IAC9DA,GAAS,MAGjBA,EAAQ,UAAU,sBAAsBA,CAAK,GAExCy+B,EAAe,OAAS,OAC7Bz+B,EAAQ,UAAU,sBAAsBA,CAAK,EAExCy+B,EAAe,OAAS,OAC7Bz+B,EAAQ,UAAU,kBAAkBA,CAAK,EAEpCy+B,EAAe,OAAS,eAC7Bz+B,EAAQ,UAAU,oBAAoBA,CAAK,EAEtCy+B,EAAe,OAAS,cAC7Bz+B,EAAQ,UAAU,mBAAmBA,CAAK,EAErCy+B,EAAe,OAAS,cAC7Bz+B,EAAQ,UAAU,mBAAmBA,EAAOy+B,CAAc,EAErDA,EAAe,OAAS,SAE7Bz+B,EAAS,MAAM,CAACA,CAAK,EAAsBA,EAAlB,SAASA,CAAK,GAEvCy+B,EAAe,cACfz+B,EAAQ,uBAAuB,cAAcy+B,EAAe,YAAaz+B,CAAK,GAC3EA,EACf,CAKI,0BAA0BiX,EAAKoC,EAAY48B,GAAkB,CACzD,MAAMC,GAAoB,OAAO,KAAKD,EAAgB,EAAE,IAAKl2C,IAErD,OAAOk2C,GAAiBl2C,EAAG,GAAM,UAC1Bk2C,GAAiBl2C,EAAG,IAAM,GAAO,EAAI,EAE5Ck2C,GAAiBl2C,EAAG,YAAa,KAC1B,UAAU,6BAA6Bk2C,GAAiBl2C,EAAG,CAAC,EAEhEk2C,GAAiBl2C,EAAG,CAC9B,EACD,MAAI,CAACsZ,GAAc,CAAC,OAAO,KAAKA,CAAU,EAAE,OACjC,CAACpC,EAAKi/B,EAAiB,GAClCj/B,EAAMA,EAAI,QAAQ,8BAA+B,CAACk/B,GAAMC,GAASr2C,KAAQ,CACrE,GAAI,CAACsZ,EAAW,eAAetZ,EAAG,EAC9B,OAAOo2C,GAEX,IAAIn2C,GAAQqZ,EAAWtZ,EAAG,EAC1B,OAAIq2C,GACOp2C,GACF,IAAKmiB,KACN+zB,GAAkB,KAAK/zB,EAAC,EACjB,KAAK,gBAAgBpiB,GAAKm2C,GAAkB,OAAS,CAAC,EAChE,EACI,KAAK,IAAI,EAEd,OAAOl2C,IAAU,WACVA,GAAO,EAET,OAAOA,IAAU,SACf,OAAOA,EAAK,EAInB,OAAOA,IAAU,WACjBk2C,GAAkB,KAAK,CAACl2C,EAAK,EACtB,KAAK,gBAAgBD,GAAKm2C,GAAkB,OAAS,CAAC,GAE7Dl2C,cAAiB,MACjBk2C,GAAkB,KAAK,UAAU,6BAA6Bl2C,EAAK,CAAC,EAC7D,KAAK,gBAAgBD,GAAKm2C,GAAkB,OAAS,CAAC,IAEjEA,GAAkB,KAAKl2C,EAAK,EACrB,KAAK,gBAAgBD,GAAKm2C,GAAkB,OAAS,CAAC,EACzE,CAAS,EACM,CAACj/B,EAAKi/B,EAAiB,EACtC,CAII,OAAO7tB,EAAY,CACf,MAAO,IAAMA,EAAa,GAClC,CAOI,eAAesC,EAAWoV,EAAQ5mB,GAAU,CACxC,OAAOwR,CACf,CAII,eAAe9qB,EAAQ,CACnB,MAAMw2C,EAAiB,KAAK,SACtBC,GAAe,OACrB,GAAI,gBAAgB,QAAQz2C,CAAM,GAAK,gBAAgB,OAAOA,CAAM,EAAG,CACnE,MAAM0S,GAAS,KAAK,eAAe1S,EAAO,OACpC,IAAIA,EAAO,MAAM,MAAMA,EAAO,IAAI,IAClCA,EAAO,IAAI,EACjB,MAAO,CACH,SAAUA,EAAO,UAAY0S,GAAO,UAAY8jC,EAChD,OAAQx2C,EAAO,QAAU0S,GAAO,QAAU+jC,GAC1C,UAAW/jC,GAAO,SACrB,CACb,CACQ,GAAI,gBAAgB,kBAAkB1S,CAAM,EAAG,CAC3C,MAAM0S,GAAS,KAAK,eAAe1S,EAAO,mBAAmB,EAC7D,MAAO,CACH,SAAUA,EAAO,oBACb0S,GAAO,UACP8jC,EACJ,OAAQx2C,EAAO,kBAAoB0S,GAAO,QAAU+jC,GACpD,UAAW/jC,GAAO,SACrB,CACb,CACQ,GAAI,gBAAgB,iBAAiB1S,CAAM,EAEvC,MAAO,CACH,SAAUA,EAAO,UAAYw2C,EAC7B,OAAQx2C,EAAO,QAAUy2C,GACzB,UAAWz2C,EAAO,SACrB,EAEL,MAAMkN,GAAQlN,EAAO,MAAM,GAAG,EAC9B,OAAIkN,GAAM,SAAW,EACV,CACH,SAAUA,GAAM,CAAC,GAAKspC,EACtB,OAAQtpC,GAAM,CAAC,GAAKupC,GACpB,UAAWvpC,GAAM,CAAC,CACrB,EAEIA,GAAM,SAAW,EAGf,CACH,SAHa,KAAK,wCAAwCA,GAAM,CAAC,CAAC,GAClEspC,EAGA,OAAQtpC,GAAM,CAAC,EACf,UAAWA,GAAM,CAAC,CACrB,EAGM,CACH,SAAUspC,EACV,OAAQC,GACR,UAAWz2C,CACd,CAEb,CAII,cAAckY,EAAQ,CAClB,OAAIA,EAAO,OAAS,QAAUA,EAAO,OAAS,MACnC,UAEFA,EAAO,OAAS,OACd,UAEFA,EAAO,OAAS,KACd,WAEFA,EAAO,OAAS,QACd,UAEFA,EAAO,OAAS,OACd,UAEFA,EAAO,OAAS,gBAGhBA,EAAO,OAAS,cAFd,OAKFA,EAAO,OAAS,cACd,UAGAA,EAAO,MAAQ,EAElC,CAII,iBAAiB0mB,EAAgB,CAC7B,MAAM8X,EAAe9X,EAAe,QACpC,GAAI,OAAO8X,GAAiB,SACxB,MAAO,GAAKA,EAEhB,GAAI,OAAOA,GAAiB,UACxB,OAAOA,EAAe,IAAM,IAEhC,GAAI,OAAOA,GAAiB,WACxB,OAAOA,EAAc,EAEzB,GAAI,OAAOA,GAAiB,SACxB,MAAO,IAAIA,CAAY,IAE3B,GAAIA,GAAiB,KAGrB,MAAO,GAAGA,CAAY,EAC9B,CAII,kBAAkBx+B,EAAQ,CACtB,OAAOA,EAAO,eAAe,QAAQ,KAAMy+B,GAAOA,EAAG,QAAQ,SAAW,GAAKA,EAAG,QAAQ,CAAC,IAAMz+B,CAAM,CAC7G,CAII,gBAAgBA,EAAQ,CACpB,OAAOA,EAAO,OAASA,EAAO,OAAO,SAAU,EAAG,EAC1D,CAII,eAAeA,EAAQ,CACnB,IAAI7B,EAAO6B,EAAO,KAClB,OAAIA,EAAO,KACA,WAEPA,EAAO,OACP7B,GAAQ,IAAM6B,EAAO,OAAS,IAEzBA,EAAO,YAAc,MAC1BA,EAAO,YAAc,QACrBA,EAAO,QAAU,MACjBA,EAAO,QAAU,OACjB7B,GAAQ,IAAM6B,EAAO,UAAY,IAAMA,EAAO,MAAQ,IAEjDA,EAAO,YAAc,MAC1BA,EAAO,YAAc,SACrB7B,GAAQ,IAAM6B,EAAO,UAAY,KAEjCA,EAAO,UACP7B,GAAQ,UACLA,EACf,CAMI,wBAAyB,CACrB,OAAO,QAAQ,QAAS,CAChC,CAMI,uBAAwB,CACpB,OAAO,QAAQ,QAAS,CAChC,CAII,mBAAmB7T,EAAUmpB,EAAcR,GAAayrB,GAAW,CAC/D,MAAM7qB,GAAevpB,EAAS,iBAAiB,OAAO,CAACzB,GAAK81C,KAAoB,CAC5E,IAAI12C,GASJ,OARI02C,GAAgB,qBAAuB,aACvClrB,IAGAxrB,GAAQwrB,EAAeirB,GAAYzrB,GAAc,GAIhDhrB,GAEE,SAAS,UAAUY,GAAK81C,GAAgB,eAAe12C,EAAK,CAAC,EADzDY,EAEd,EAAE,EAAE,EACL,OAAO,OAAO,KAAKgrB,EAAY,EAAE,OAAS,EAAIA,GAAe,MACrE,CAKI,mBAAmB+qB,EAAcvU,EAAiB,CAC9C,OAAOA,EAAgB,OAAQ3D,IAAmB,CAC9C,MAAM+T,GAAcmE,EAAa,KAAM/oC,IAAMA,GAAE,OAAS6wB,GAAe,YAAY,EACnF,OAAK+T,GAEmBA,GAAY,OAAS/T,GAAe,cACxD+T,GAAY,OAAS,KAAK,cAAc/T,EAAc,GACtD+T,GAAY,SAAW/T,GAAe,QACtC+T,GAAY,YAAc/T,GAAe,WACzC+T,GAAY,QAAU/T,GAAe,OACrC,KAAK,iBAAiBA,EAAc,IAAM+T,GAAY,SACtDA,GAAY,YAAc/T,GAAe,WACzC+T,GAAY,aAAe/T,GAAe,YAC1C+T,GAAY,gBAAkB/T,GAAe,eAC7C+T,GAAY,eAAiB/T,GAAe,cAC5C+T,GAAY,WACR,KAAK,kBAAkB/T,EAAc,GACxC+T,GAAY,MACT/T,GAAe,MACf,CAAC,SAAS,cAAc+T,GAAY,KAAM/T,GAAe,KAAK,IAAK/sB,IAAQA,GAAM,EAAE,CAAC,GACvF+sB,GAAe,qBAAuB,QACnC+T,GAAY,cAAgB/T,GAAe,YAjBxC,EAwFvB,CAAS,CACT,CAII,yBAA0B,CACtB,MAAO,EACf,CAII,2BAA4B,CACxB,MAAO,EACf,CAII,+BAAgC,CAC5B,MAAO,EACf,CAII,gBAAgB5X,EAAe3d,EAAO,CAElC,MAAO,GAEf,CAOI,0BAA2B,CACvB,OAAO,IAAI,QAAQ,CAACmkC,EAAIC,IAAS,CAC7B,MAAMjsB,GAAU,OAAO,OAAO,GAAI,CAC9B,KAAM,KAAK,QAAQ,SACnB,SAAU,KAAK,QAAQ,QAC1B,EAAE,KAAK,QAAQ,OAAS,EAAE,EAC3B,KAAK,OAAO,aAAaA,GAAUu/B,IAAO,CACtC,MAAMT,GAAqBS,GAG3BT,GAAmB,WAAW,2BAA4B,CAAE,EAAG56C,IAAW,CACtE8nC,EAAG8S,EAAkB,CACxB,EAAGh3C,IAAU,CACVmkC,EAAKnkC,EAAK,CAC9B,CAAiB,CACJ,EAAGA,IAAU,CACVmkC,EAAKnkC,EAAK,CAC1B,CAAa,CACb,CAAS,CACT,CAII,kBAAmB,CACf,GAAI,CACA,MAAM03C,EAAS,KAAK,QAAQ,QAAU,QAAQ,6BAA6B,EAC3E,KAAK,OAASA,CAC1B,MACkB,CACN,MAAM,IAAI,+BAA+B,eAAgB,6BAA6B,CAClG,CACA,CACA,CCzsBO,MAAM,gCAAgC,yBAA0B,CAInE,YAAY5oC,EAAQ,CAChB,MAAO,EACP,KAAK,OAASA,EACd,KAAK,WAAaA,EAAO,WACzB,KAAK,YAAc,IAAI,YAAY,IAAI,CAC/C,CAII,MAAM,iBAAkB,CACpB,MAAM,KAAK,MAAM,2BAA2B,CACpD,CAII,MAAM,gBAAiB,CACnB,MAAM,KAAK,MAAM,0BAA0B,CACnD,CAII,MAAM,MAAMmB,EAAOC,EAAY6mC,GAAsB,GAAO,CACxD,GAAI,KAAK,WACL,MAAM,IAAI,gCAEd,MAAMj8B,GAAa,KAAK,OAAO,WAC/B,OAAO,IAAI,QAAQ,MAAOopB,GAAIC,KAAS,CACnC,MAAM6S,GAAqB,MAAM,KAAK,QAAS,EACzCY,GAAgB3nC,EAAM,OAAO,EAAG,EAAE,IAAM,cAC9C6K,GAAW,OAAO,SAAS7K,EAAOC,EAAY,IAAI,EAClD,MAAM2nC,GAAU,CAACjgB,GAAKsf,KAAQ,CAE1B,MAAMC,GAAwB,KAAK,OAAO,QAAQ,sBAE5CC,GADe,CAAC,IAAI,KACgBH,GACtCE,IACAC,GAAqBD,IACrBr8B,GAAW,OAAO,aAAas8B,GAAoBnnC,EAAOC,EAAY,IAAI,EAE1E0nB,KACA9c,GAAW,OAAO,cAAc8c,GAAK3nB,EAAOC,EAAY,IAAI,EAC5Di0B,GAAK,IAAI,iBAAiBl0B,EAAOC,EAAY0nB,EAAG,CAAC,GAErD,MAAMx7B,GAAS,IAAI,YACnBA,GAAO,IAAM86C,GACT,CAACU,IAAiB,MAAM,QAAQV,EAAG,IACnC96C,GAAO,QAAU86C,IAGjBhT,GADA6S,GACG36C,GAGAA,GAAO,GAHD,CAKhB,EACK66C,GAAiB,CAAC,IAAI,KACxBW,GACAZ,GAAmB,QAAQ/mC,EAAOC,EAAY2nC,EAAO,EAGrDb,GAAmB,IAAI/mC,EAAOC,EAAY2nC,EAAO,CAEjE,CAAS,CACT,CAOI,YAAYP,EAAeC,EAAa,EAAG,CACvC,OAAO,OAAO,KAAKD,CAAa,EAAE,IAAI,CAAC1gD,GAAKmJ,KAAU,IAAInJ,EAAG,KAAU,CAC/E,CACA,CC/EO,MAAM,2BAA2B,oBAAqB,CAIzD,YAAYkkB,EAAY,CACpB,MAAMA,CAAU,EAChB,KAAK,WAAaA,EAClB,KAAK,QAAUA,EAAW,QAC1B,KAAK,SAAW,KAAK,QAAQ,SAC7B,KAAK,OAAS,KAAK,QAAQ,OAE3B,KAAK,iBAAkB,CAC/B,CAOI,MAAM,YAAa,CACf,OAAO,IAAI,QAAQ,CAACopB,EAAIC,IAAS,CAC7B,KAAK,YAAc,OACnB,KAAK,mBAAmB,MAAO,EAAC,KAAKD,CAAE,EAAE,MAAMC,CAAI,CAC/D,CAAS,CACT,CAII,kBAAkByC,EAAM,CACpB,OAAK,KAAK,cACN,KAAK,YAAc,IAAI,wBAAwB,IAAI,GAEhD,KAAK,WACpB,CACI,cAAch4B,EAAQ,CAClB,OAAIA,EAAO,OAAS,OACT,OAEJ,MAAM,cAAcA,CAAM,CACzC,CAOI,0BAA2B,CACvB,OAAO,IAAI,QAAQ,CAACs1B,EAAIC,IAAS,CAC7B,MAAMjsB,GAAU,OAAO,OAAO,GAAI,CAC9B,SAAU,KAAK,QAAQ,SACvB,IAAK,KAAK,QAAQ,IAClB,eAAgB,KAAK,QAAQ,eAC7B,QAAS,KAAK,QAAQ,QACtB,SAAU,KAAK,QAAQ,SACvB,aAAc,KAAK,QAAQ,YAC9B,EAAE,KAAK,QAAQ,OAAS,EAAE,EAC3B,IAAI,KAAK,OAAO,KAAK,QAAQ,SAAUA,GAAS,CAAC0f,GAAK6f,KAAO,CACzD,GAAI7f,GACA,OAAOuM,EAAKvM,EAAG,EAEnB6f,GAAG,WAAW,KAAK,OAAO,eAAe,EAGzCA,GAAG,QAAQ,2BAA4B,CAAA,EAAI,CAAC7f,GAAKx7B,KAAW,CACxD,GAAIw7B,GACA,OAAOuM,EAAKvM,EAAG,EAEnBsM,EAAGuT,EAAE,CACzB,CAAiB,CACjB,CAAa,CACb,CAAS,CACT,CAII,kBAAmB,CAEf,GADA,KAAK,OAAS,KAAK,OACf,CAAC,KAAK,OACN,MAAM,IAAI,+BAA+B,eAAgB,qBAAqB,CAE1F,CACA,CC9EO,MAAM,yBAAyB,yBAA0B,CAI5D,YAAY3oC,EAAQ,CAChB,MAAO,EAIP,KAAK,QAAU,GACf,KAAK,OAASA,EACd,KAAK,WAAaA,EAAO,WACzB,KAAK,YAAc,IAAI,YAAY,IAAI,CAC/C,CAOI,MAAM,iBAAkB,CACpB,MAAM,KAAK,MAAM,2BAA2B,CACpD,CAII,MAAM,gBAAiB,CACnB,MAAM,KAAK,MAAM,0BAA0B,CACnD,CACI,MAAM,OAAQ,CACN,KAAK,UACL,MAAM,KAAK,OAAO,SAAU,EAC5B,KAAK,QAAU,GAE3B,CACI,MAAM,SAAU,CACZ,aAAM,KAAK,MAAO,EACX,MAAM,QAAS,CAC9B,CAKI,MAAM,mBAAoB,CACtB,MAAM,MAAM,kBAAmB,EAC1B,KAAK,qBACN,MAAM,KAAK,MAAO,CAE9B,CAII,MAAM,MAAMmB,EAAOC,EAAa,CAAA,EAAI6mC,GAAsB,GAAO,CAC7D,GAAI,KAAK,WACL,MAAM,IAAI,gCACd,MAAMe,GAAU7nC,EAAM,KAAM,EAAC,MAAM,IAAK,CAAC,EAAE,CAAC,EACtC+mC,GAAqB,KAAK,OAAO,mBACjC7T,GAAoB,IAAI,kBAC9B,KAAK,OAAO,WAAW,OAAO,SAASlzB,EAAOC,EAAY,IAAI,EAC9D,KAAK,YAAY,0BAA0BizB,GAAmBlzB,EAAOC,CAAU,EAC/E,MAAM+mC,GAAiB,CAAC,IAAI,KAC5B,IAAI94B,GACJ,GAAI,CACAA,GAAY64B,GAAmB,QAAQ/mC,CAAK,EACxCC,IACAA,EAAaA,EAAW,IAAKyO,IAAM,OAAOA,GAAM,IAAcA,GAAI,IAAI,EACtER,GAAU,KAAKjO,CAAU,GAG7B,MAAMinC,GAAwB,KAAK,OAAO,QAAQ,sBAE5CC,GADe,CAAC,IAAI,KACgBH,GACtCE,IACAC,GAAqBD,IACrB,KAAK,OAAO,WAAW,OAAO,aAAaC,GAAoBnnC,EAAOC,EAAY,IAAI,EAC1F,MAAMynC,GAAU,CAAE,EAClB,KAAOx5B,GAAU,QACbw5B,GAAQ,KAAKx5B,GAAU,aAAa,EAExC,KAAK,YAAY,yBAAyBglB,GAAmBlzB,EAAOC,EAAY,GAAMknC,GAAoBO,GAAS,MAAS,EAC5H,MAAMv7C,GAAS,IAAI,YAQnB,OAPAA,GAAO,SAAW46C,GAAmB,gBAAiB,EACtD56C,GAAO,QAAUu7C,GACjBv7C,GAAO,IAAMu7C,GACbx5B,GAAU,KAAM,EACZ25B,KAAY,WACZ,KAAK,QAAU,IAEff,GACO36C,GAGAA,GAAO,GAE9B,OACew7B,GAAK,CACR,MAAIzZ,IACAA,GAAU,KAAM,EAEpB,KAAK,OAAO,WAAW,OAAO,cAAcyZ,GAAK3nB,EAAOC,EAAY,IAAI,EACxE,KAAK,YAAY,yBAAyBizB,GAAmBlzB,EAAOC,EAAY,GAAO,OAAW,OAAW0nB,EAAG,EAC1G,IAAI,iBAAiB3nB,EAAOC,EAAY0nB,EAAG,CAC7D,QACgB,CACJ,MAAMuL,GAAkB,KAAM,CAC1C,CACA,CACA,CC7GO,MAAM,oBAAoB,oBAAqB,CAIlD,YAAYroB,EAAY,CAIpB,GAHA,MAAMA,CAAU,EAGZ,KAAK,QAAQ,UACb,CAAC,KAAK,QAAQ,UACd,CAAC,KAAK,QAAQ,iBACd,MAAM,IAAI,wBAAwB,8BAA8B,EAGpE,KAAK,iBAAkB,CAC/B,CAOI,MAAM,SAAU,CACZ,KAAK,mBAAqB,MAAM,KAAK,yBAA0B,CACvE,CAII,MAAM,YAAa,CACf,KAAK,YAAc,OACnB,KAAK,mBAAmB,MAAO,CACvC,CAII,kBAAkB8rB,EAAM,CACpB,OAAK,KAAK,cACN,KAAK,YAAc,IAAI,iBAAiB,IAAI,GACzC,KAAK,WACpB,CAKI,MAAM,KAAK2B,EAA8BwP,EAAkC,GAAM,CAC7E,GAAI,OAAOxP,GAAiC,SAExC,GAAI,cAAc,OAAS,OAGvB,GAAI,cAAc,UAAUA,CAA4B,EAAG,CACvD,MAAMv4B,GAAW,cAAc,aAAau4B,CAA4B,EACxE,OAAO,KAAK,mCAAmCv4B,EAAQ,CAC3E,KACqB,IAAI+nC,EACL,MAAM,IAAI,aAAa,QAAQxP,CAA4B,iBAAiB,EAM5E,OAAO,KAAK,mCAAoC,MAGnD,CAGD,IAAIyP,GAAsB,KAC1B,GAAI,KAAK,QAAQ,eACb,GAAI,OAAO,YACPA,GAAsB,MAAM,OAAO,YAAY,QAAQzP,CAA4B,MAGnF,OAAM,IAAI,aAAa,0EAA0E,OAIrGyP,GACI,cAAc,kBAAmB,EAAC,aAAa,QAAQzP,CAA4B,EAE3F,GAAIyP,IAAuB,KAEvB,OAAO,KAAK,mCAAmC,KAAK,MAAMA,EAAmB,CAAC,EAE7E,GAAID,EACL,MAAM,IAAI,aAAa,QAAQxP,CAA4B,iBAAiB,EAM5E,OAAO,KAAK,mCAAoC,CAEpE,KAGY,QAAO,KAAK,mCAAmCA,CAA4B,CAEvF,CAMI,MAAM,KAAK0P,EAAU,CACjB,GAAI,CAACA,GAAY,CAAC,KAAK,QAAQ,SAC3B,MAAM,IAAI,aAAa,mGAAmG,EAE9H,IAAIpqC,EAAO,GAOX,GANIoqC,EACApqC,EAAOoqC,EAEF,KAAK,QAAQ,WAClBpqC,EAAO,KAAK,QAAQ,UAEpB,cAAc,OAAS,OACvB,GAAI,CACA,MAAMqqC,GAAU,OAAO,KAAK,KAAK,mBAAmB,QAAQ,EAC5D,MAAM,cAAc,UAAUrqC,EAAMqqC,EAAO,CAC3D,OACmB74C,GAAG,CACN,MAAM,IAAI,aAAa,mCAAmCA,EAAC,EAAE,CAC7E,KAEa,CACD,MAAM2Q,GAAW,KAAK,mBAAmB,OAAQ,EAE3CmoC,GAAgB,CAAE,EAAC,MAAM,KAAKnoC,EAAQ,EAC5C,GAAI,KAAK,QAAQ,eACb,GAAI,OAAO,YACP,MAAM,OAAO,YAAY,QAAQnC,EAAM,KAAK,UAAUsqC,EAAa,CAAC,MAGpE,OAAM,IAAI,aAAa,0EAA0E,OAIrG,cAAc,kBAAmB,EAAC,aAAa,QAAQtqC,EAAM,KAAK,UAAUsqC,EAAa,CAAC,CAE1G,CACA,CAQI,MAAM,UAAW,CACT,KAAK,QAAQ,UAAY,CAAC,KAAK,aAAa,sBACxC,KAAK,QAAQ,iBACb,MAAM,KAAK,QAAQ,iBAAiB,KAAK,OAAM,CAAE,EAGjD,MAAM,KAAK,KAAM,EAGjC,CAII,QAAS,CACL,OAAO,KAAK,mBAAmB,OAAQ,CAC/C,CAII,mBAAmBj/C,EAAUmpB,EAAc,CACvC,MAAMI,GAAevpB,EAAS,iBAAiB,OAAO,CAACzB,GAAK81C,KAAoB,CAE5E,GAAIA,GAAgB,WAChBA,GAAgB,qBAAuB,YAAa,CACpD,MAAMt9B,GAAQ,6BACd,GAAI,CACA,IAAI7T,GAAS,KAAK,mBAAmB,KAAK6T,EAAK,EAC/C,YAAK,WAAW,OAAO,SAASA,EAAK,EAC9B,SAAS,UAAUxY,GAAK81C,GAAgB,eAAenxC,GAAO,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CACzG,OACuBiD,GAAG,CACN,KAAK,WAAW,OAAO,cAAcA,GAAG4Q,GAAO,EAAE,CACrE,CACA,CACY,OAAOxY,EACV,EAAE,EAAE,EACL,OAAO,OAAO,KAAKgrB,EAAY,EAAE,OAAS,EAAIA,GAAe,MACrE,CAQI,0BAA2B,CACvB,OAAI,KAAK,QAAQ,SACN,KAAK,KAAK,KAAK,QAAQ,SAAU,EAAK,EAE1C,KAAK,mCAAmC,KAAK,QAAQ,QAAQ,CAC5E,CAKI,MAAM,mCAAmCzS,EAAU,CAG/C,MAAM0nC,GADkB,OAAO,KAAK,OAAO,UAAa,WAElD,KAAK,OACL,MAAM,KAAK,OAAO,KAAK,QAAQ,WAAW,EAChD,OAAI1nC,GAAYA,EAAS,OAAS,EAC9B,KAAK,mBAAqB,IAAI0nC,GAAO,SAAS1nC,CAAQ,EAGtD,KAAK,mBAAqB,IAAI0nC,GAAO,SAEzC,KAAK,mBAAmB,KAAK,0BAA0B,EAChD,KAAK,kBACpB,CAII,kBAAmB,CACf,GAAI,cAAc,OAAS,UAAW,CAClC,MAAMA,EAAS,KAAK,QAAQ,QAAU,OAAO,IAC7C,KAAK,OAASA,CAC1B,KAEY,IAAI,CACA,MAAMA,EAAS,KAAK,QAAQ,QAAU,cAAc,KAAK,QAAQ,EACjE,KAAK,OAASA,CAC9B,MACsB,CACN,MAAM,IAAI,+BAA+B,SAAU,QAAQ,CAC3E,CAEA,CACA,CC3NO,MAAM,4BAA4B,eAAgB,CAIrD,YAAY5oC,EAAQ83B,EAAM,CACtB,MAAO,EACP,KAAK,OAAS93B,EACd,KAAK,WAAaA,EAAO,WACzB,KAAK,KAAO83B,EACZ,KAAK,YAAc,IAAI,YAAY,IAAI,CAC/C,CAQI,SAAU,CACN,OAAI,KAAK,mBACE,QAAQ,QAAQ,KAAK,kBAAkB,EAC9C,KAAK,0BACE,KAAK,2BACZ,KAAK,OAAS,SAAW,KAAK,OAAO,aACrC,KAAK,0BAA4B,KAAK,OACjC,sBAAqB,EACrB,KAAK,CAAC,CAAC9rB,EAAYs9B,CAAO,IAAM,CACjC,KAAK,OAAO,sBAAsB,KAAK,IAAI,EAC3C,KAAK,mBAAqBt9B,EAC1B,MAAMu9B,GAAmBzgB,IAAQ,KAAK,0BAA0BA,EAAG,EACnE,YAAK,gBAAmBA,IAAQ,CAC5B,KAAK,mBAAmB,eAAe,QAASygB,EAAe,EAC/DD,EAAQxgB,EAAG,CACd,EACD,KAAK,mBAAmB,GAAG,QAASygB,EAAe,EAC5C,KAAK,kBAC5B,CAAa,EAID,KAAK,0BAA4B,KAAK,OACjC,uBAAsB,EACtB,KAAK,CAAC,CAACv9B,EAAYs9B,CAAO,IAAM,CACjC,KAAK,OAAO,sBAAsB,KAAK,IAAI,EAC3C,KAAK,mBAAqBt9B,EAC1B,MAAMu9B,GAAmBzgB,IAAQ,KAAK,0BAA0BA,EAAG,EACnE,YAAK,gBAAmBA,IAAQ,CAC5B,KAAK,mBAAmB,eAAe,QAASygB,EAAe,EAC/DD,EAAQxgB,EAAG,CACd,EACD,KAAK,mBAAmB,GAAG,QAASygB,EAAe,EAC5C,KAAK,kBAC5B,CAAa,EAEE,KAAK,0BACpB,CAKI,MAAM,0BAA0BzgB,EAAK,CACjC,GAAI,KAAK,WACL,OAEJ,KAAK,WAAa,GACd,KAAK,kBACL,KAAK,gBAAgBA,CAAG,EACxB,KAAK,gBAAkB,QAE3B,MAAM73B,EAAQ,KAAK,OAAO,sBAAsB,QAAQ,IAAI,EACxDA,IAAU,IACV,KAAK,OAAO,sBAAsB,OAAOA,EAAO,CAAC,CAE7D,CAKI,SAAU,CACN,OAAO,KAAK,0BAA2B,CAC/C,CAII,MAAM,iBAAiBgvC,EAAgB,CACnC,KAAK,oBAAsB,GAC3B,GAAI,CACA,MAAM,KAAK,YAAY,UAAU,wBAAwB,CACrE,OACenX,EAAK,CACR,WAAK,oBAAsB,GACrBA,CAClB,CACY,KAAK,mBAAqB,GAC1B,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,mBAAmB,EAChCmX,GACA,MAAM,KAAK,MAAM,mCAAqCA,CAAc,IAIxE,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,qBAAqB,KAAK,iBAAmB,CAAC,EAAE,GAErE,MAAM,KAAK,YAAY,UAAU,uBAAuB,CAChE,CAKI,MAAM,mBAAoB,CACtB,GAAI,CAAC,KAAK,oBACN,MAAM,IAAI,2BACd,MAAM,KAAK,YAAY,UAAU,yBAAyB,EACtD,KAAK,iBAAmB,GACxB,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,6BAA6B,KAAK,gBAAgB,EAAE,IAGrE,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,QAAQ,EACzB,KAAK,oBAAsB,IAE/B,MAAM,KAAK,YAAY,UAAU,wBAAwB,CACjE,CAKI,MAAM,qBAAsB,CACxB,GAAI,CAAC,KAAK,oBACN,MAAM,IAAI,2BACd,MAAM,KAAK,YAAY,UAAU,2BAA2B,EACxD,KAAK,iBAAmB,GACxB,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,iCAAiC,KAAK,gBAAgB,EAAE,IAGzE,KAAK,kBAAoB,EACzB,MAAM,KAAK,MAAM,UAAU,EAC3B,KAAK,oBAAsB,IAE/B,MAAM,KAAK,YAAY,UAAU,0BAA0B,CACnE,CAII,MAAM,MAAM9+B,EAAOC,EAAY6mC,GAAsB,GAAO,CACxD,GAAI,KAAK,WACL,MAAM,IAAI,gCACd,MAAMC,GAAqB,MAAM,KAAK,QAAS,EACzC7T,GAAoB,IAAI,kBAC9B,KAAK,OAAO,WAAW,OAAO,SAASlzB,EAAOC,EAAY,IAAI,EAC9D,KAAK,YAAY,0BAA0BizB,GAAmBlzB,EAAOC,CAAU,EAC/E,GAAI,CACA,MAAM+mC,GAAiB,CAAC,IAAI,KACtBC,GAAM,MAAMF,GAAmB,MAAM/mC,EAAOC,CAAU,EAEtDinC,GAAwB,KAAK,OAAO,QAAQ,sBAE5CC,GADe,CAAC,IAAI,KACgBH,GAC1C,KAAK,YAAY,yBAAyB9T,GAAmBlzB,EAAOC,EAAY,GAAMknC,GAAoBF,GAAK,MAAS,EACpHC,IACAC,GAAqBD,IACrB,KAAK,OAAO,WAAW,OAAO,aAAaC,GAAoBnnC,EAAOC,EAAY,IAAI,EAC1F,MAAM9T,GAAS,IAAI,YACnB,GAAI86C,GAAK,CAOL,OANIA,GAAI,eAAe,MAAM,IACzB96C,GAAO,QAAU86C,GAAI,MAErBA,GAAI,eAAe,UAAU,IAC7B96C,GAAO,SAAW86C,GAAI,UAElBA,GAAI,QAAO,CACf,IAAK,SACL,IAAK,SAED96C,GAAO,IAAM,CAAC86C,GAAI,KAAMA,GAAI,QAAQ,EACpC,MACJ,QACI96C,GAAO,IAAM86C,GAAI,IACzC,CACgB,GAAI,CAACH,GACD,OAAO36C,GAAO,GAElC,CACY,OAAOA,EACnB,OACew7B,GAAK,CACR,WAAK,OAAO,WAAW,OAAO,cAAcA,GAAK3nB,EAAOC,EAAY,IAAI,EACxE,KAAK,YAAY,yBAAyBizB,GAAmBlzB,EAAOC,EAAY,GAAO,OAAW,OAAW0nB,EAAG,EAC1G,IAAI,iBAAiB3nB,EAAOC,EAAY0nB,EAAG,CAC7D,QACgB,CACJ,MAAMuL,GAAkB,KAAM,CAC1C,CACA,CAII,MAAM,OAAOlzB,EAAOC,EAAY8+B,GAAOC,GAAS,CAC5C,MAAMqJ,GAAc,KAAK,OAAO,qBAAsB,EACtD,GAAI,KAAK,WACL,MAAM,IAAI,gCACd,MAAMtB,GAAqB,MAAM,KAAK,QAAS,EAC/C,KAAK,OAAO,WAAW,OAAO,SAAS/mC,EAAOC,EAAY,IAAI,EAC9D,MAAMqoC,GAASvB,GAAmB,MAAM,IAAIsB,GAAYroC,EAAOC,CAAU,CAAC,EAC1E,OAAI8+B,IACAuJ,GAAO,GAAG,MAAOvJ,EAAK,EACtBC,IACAsJ,GAAO,GAAG,QAAStJ,EAAO,EACvBsJ,EACf,CAII,MAAM,cAAe,CACjB,OAAO,QAAQ,QAAQ,EAAE,CACjC,CAKI,MAAM,WAAWvoC,EAAU,CACvB,OAAO,QAAQ,QAAQ,EAAE,CACjC,CAII,MAAM,YAAYA,EAAU,CAExB,MAAO,GADQ,MAAM,KAAK,MAAM,4CAA4CA,CAAQ,IAAI,GAC1E,MACtB,CAII,MAAM,oBAAqB,CAEvB,OADc,MAAM,KAAK,MAAM,kCAAkC,GACpD,CAAC,EAAE,gBACxB,CAII,MAAM,UAAU4mB,EAAQ,CAEpB,MAAO,GADQ,MAAM,KAAK,MAAM,wEAAwEA,CAAM,GAAG,GACnG,MACtB,CAII,MAAM,kBAAmB,CAErB,OADc,MAAM,KAAK,MAAM,gCAAgC,GAClD,CAAC,EAAE,cACxB,CAII,MAAM,SAASvC,EAAa,CACxB,MAAMmkB,EAAkB,KAAK,OAAO,eAAenkB,CAAW,EACzDmkB,EAAgB,SACjBA,EAAgB,OAAS,MAAM,KAAK,iBAAkB,GAE1D,MAAM1qC,GAAM,uEAAuE0qC,EAAgB,MAAM,yBAAyBA,EAAgB,SAAS,IAE3J,MAAO,GADQ,MAAM,KAAK,MAAM1qC,EAAG,GACrB,MACtB,CAII,MAAM,UAAUumB,EAAanV,EAAY,CACrC,MAAMs5B,GAAkB,KAAK,OAAO,eAAenkB,CAAW,EACzDmkB,GAAgB,SACjBA,GAAgB,OAAS,MAAM,KAAK,iBAAkB,GAE1D,MAAM1qC,GAAM,wEAAwE0qC,GAAgB,MAAM,yBAAyBA,GAAgB,SAAS,0BAA0Bt5B,CAAU,IAEhM,MAAO,GADQ,MAAM,KAAK,MAAMpR,EAAG,GACrB,MACtB,CAKI,MAAM,eAAekC,EAAUk/B,EAAY,CACvC,GAAIA,GAC8B,MAAM,KAAK,YAAYl/B,CAAQ,EAEzD,OAAO,QAAQ,QAAS,EAEhC,MAAMigC,GAAK,oBAAoBjgC,CAAQ,IACjCkgC,GAAO,kBAAkBlgC,CAAQ,IACvC,MAAM,KAAK,eAAe,IAAI,MAAMigC,EAAE,EAAG,IAAI,MAAMC,EAAI,CAAC,CAChE,CAKI,MAAM,aAAalgC,EAAUm/B,EAAS,CAClC,MAAMc,GAAKd,EACL,4BAA4Bn/B,CAAQ,IACpC,kBAAkBA,CAAQ,IAC1BkgC,GAAO,oBAAoBlgC,CAAQ,IACzC,MAAM,KAAK,eAAe,IAAI,MAAMigC,EAAE,EAAG,IAAI,MAAMC,EAAI,CAAC,CAChE,CAII,MAAM,aAAad,EAAYF,EAAY,CACvC,MAAMtY,GAASwY,EAAW,QAAQ,GAAG,IAAM,GACrCA,EACAA,EAAW,MAAM,GAAG,EAAE,CAAC,EACvBa,GAAKf,EACL,gCAAgCtY,EAAM,IACtC,kBAAkBA,EAAM,IACxBsZ,GAAO,gBAAgBtZ,EAAM,YACnC,MAAM,KAAK,eAAe,IAAI,MAAMqZ,EAAE,EAAG,IAAI,MAAMC,EAAI,CAAC,CAChE,CAII,MAAM,WAAWd,EAAYD,EAASsJ,GAAW,CAC7C,MAAM7hB,GAASwY,EAAW,QAAQ,GAAG,IAAM,GACrCA,EACAA,EAAW,MAAM,GAAG,EAAE,CAAC,EACvBa,GAAKd,EACL,0BAA0BvY,EAAM,KAAK6hB,GAAY,UAAY,EAAE,GAC/D,gBAAgB7hB,EAAM,KAAK6hB,GAAY,UAAY,EAAE,GACrDvI,GAAO,kBAAkBtZ,EAAM,IACrC,MAAM,KAAK,eAAe,IAAI,MAAMqZ,EAAE,EAAG,IAAI,MAAMC,EAAI,CAAC,CAChE,CAII,MAAM,YAAYrvC,EAAOquC,EAAa,GAAOG,GAAoB,GAAMC,GAAgB,GAAM,CACzF,GAAIJ,GACqB,MAAM,KAAK,SAASruC,CAAK,EAE1C,OAAO,QAAQ,QAAS,EAEhC,MAAM+tC,GAAY,CAAE,EACdC,GAAc,CAAE,EAEhB6J,GAAc73C,EAAM,QAAQ,OAAQ+N,IAAWA,GAAO,OAAS,QAAUA,GAAO,OAAS,aAAa,EACtG+pC,GAAmB,CAAE,EAC3B,UAAW/pC,MAAU8pC,GAAa,CAE9B,MAAME,GAAU,MAAM,KAAK,YAAY/3C,EAAO+N,EAAM,EAC9CiqC,GAAW,KAAK,cAAch4C,EAAO+N,EAAM,EAE7C,CAACgqC,IAAWD,GAAiB,QAAQE,EAAQ,IAAM,KACnDF,GAAiB,KAAKE,EAAQ,EAC9BjK,GAAU,KAAK,KAAK,kBAAkB/tC,EAAO+N,GAAQiqC,EAAQ,CAAC,EAC9DhK,GAAY,KAAK,KAAK,gBAAgBhuC,EAAO+N,GAAQiqC,EAAQ,CAAC,EAE9E,CAEQ,MAAMtJ,GAAmB1uC,EAAM,QAAQ,OAAQ+N,IAAWA,GAAO,gBAAkB,UAAYA,GAAO,YAAY,EAClH,UAAWA,MAAU2gC,GAAkB,CACnC,MAAMuJ,IAAuB,MAAM,KAAK,uBAAuBj4C,EAAM,IAAI,GAAG,MAAM,GAAG,EAC/E2gB,GAAYs3B,GAAoB,CAAC,EACjCliB,GAASkiB,GAAoB,CAAC,EAC9BtJ,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA5Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACK6gC,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA7Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,GAAO,IAC7B,CAAa,EACDggC,GAAU,KAAKY,EAAW,EAC1BX,GAAY,KAAKY,EAAW,CACxC,CACQb,GAAU,KAAK,KAAK,eAAe/tC,EAAOwuC,EAAiB,CAAC,EAC5DR,GAAY,KAAK,KAAK,aAAahuC,CAAK,CAAC,EAGrCwuC,IACAxuC,EAAM,YAAY,QAAS60B,IAAemZ,GAAY,KAAK,KAAK,kBAAkBhuC,EAAO60B,EAAU,CAAC,CAAC,EACrG4Z,IACAzuC,EAAM,QAAQ,QAASd,IAAU,CAExBA,GAAM,OACPA,GAAM,KAAO,KAAK,WAAW,eAAe,UAAUc,EAAOd,GAAM,YAAaA,GAAM,KAAK,GAC/F6uC,GAAU,KAAK,KAAK,eAAe/tC,EAAOd,EAAK,CAAC,EAChD8uC,GAAY,KAAK,KAAK,aAAahuC,EAAOd,EAAK,CAAC,CAChE,CAAa,EAEDc,EAAM,UACN+tC,GAAU,KAAK,IAAI,MAAM,oBAAsB,KAAK,WAAW/tC,CAAK,EAAI,QAAUA,EAAM,QAAU,GAAG,CAAC,EACtGguC,GAAY,KAAK,IAAI,MAAM,oBAAsB,KAAK,WAAWhuC,CAAK,EAAI,UAAU,CAAC,GAEzF,MAAM,KAAK,eAAe+tC,GAAWC,EAAW,CACxD,CAII,MAAM,UAAUn4C,EAAQy4C,EAASO,GAAkB,GAAMC,GAAc,GAAM,CAGzE,GAAIR,GAEI,CADiB,MAAM,KAAK,SAASz4C,CAAM,EAE3C,OAAO,QAAQ,QAAS,EAGhC,MAAM24C,GAAoBK,GACpB3xB,GAAY,KAAK,aAAarnB,CAAM,EACpCmK,GAAQ,MAAM,KAAK,eAAekd,EAAS,EAC3C6wB,GAAY,CAAE,EACdC,GAAc,CAAE,EAClBc,IACA9uC,GAAM,QAAQ,QAASd,IAAU,CAC7B6uC,GAAU,KAAK,KAAK,aAAa/tC,GAAOd,EAAK,CAAC,EAC9C8uC,GAAY,KAAK,KAAK,eAAehuC,GAAOd,EAAK,CAAC,CAClE,CAAa,EAED2vC,IACA7uC,GAAM,YAAY,QAAS60B,IAAekZ,GAAU,KAAK,KAAK,kBAAkB/tC,GAAO60B,EAAU,CAAC,CAAC,EACvGkZ,GAAU,KAAK,KAAK,aAAa/tC,EAAK,CAAC,EACvCguC,GAAY,KAAK,KAAK,eAAehuC,GAAOwuC,EAAiB,CAAC,EAE9D,MAAME,GAAmB1uC,GAAM,QAAQ,OAAQ+N,IAAWA,GAAO,eAAiBA,GAAO,YAAY,EACrG,UAAWA,MAAU2gC,GAAkB,CACnC,MAAMuJ,IAAuB,MAAM,KAAK,uBAAuBj4C,GAAM,IAAI,GAAG,MAAM,GAAG,EAC/E2gB,GAAYs3B,GAAoB,CAAC,EACjCliB,GAASkiB,GAAoB,CAAC,EAC9BrJ,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA7Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,GAAO,IAC7B,CAAa,EACK4gC,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA5Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACDggC,GAAU,KAAKa,EAAW,EAC1BZ,GAAY,KAAKW,EAAW,CACxC,CACQ,MAAM,KAAK,eAAeZ,GAAWC,EAAW,CACxD,CAII,MAAM,WAAWnF,EAAMkG,EAAmB,GAAO,CAC7C,MAAMhB,GAAY,CAAE,EACdC,GAAc,CAAE,EACtBD,GAAU,KAAK,KAAK,cAAclF,CAAI,CAAC,EACnCkG,GACAhB,GAAU,KAAK,MAAM,KAAK,wBAAwBlF,CAAI,CAAC,EAC3DmF,GAAY,KAAK,KAAK,YAAYnF,CAAI,CAAC,EACnCkG,GACAf,GAAY,KAAK,MAAM,KAAK,wBAAwBnF,CAAI,CAAC,EAC7D,MAAM,KAAK,eAAekF,GAAWC,EAAW,CACxD,CAII,MAAM,SAASn4C,EAAQ,CACnB,MAAMg3C,EAAW,gBAAgB,OAAOh3C,CAAM,EAAIA,EAAO,KAAOA,EAC1DgzC,GAAO,MAAM,KAAK,cAAcgE,CAAQ,EACxCkB,GAAY,CAAE,EACdC,GAAc,CAAE,EACtBD,GAAU,KAAK,MAAM,KAAK,wBAAwBlF,EAAI,CAAC,EACvDkF,GAAU,KAAK,KAAK,YAAYlF,EAAI,CAAC,EACrCmF,GAAY,KAAK,MAAM,KAAK,wBAAwBnF,EAAI,CAAC,EACzDmF,GAAY,KAAK,KAAK,cAAcnF,EAAI,CAAC,EACzC,MAAM,KAAK,eAAekF,GAAWC,EAAW,CACxD,CAII,MAAM,YAAYgB,EAAgBC,EAAc,CAC5C,MAAMlB,GAAY,CAAE,EACdC,GAAc,CAAE,EAChBkB,GAAW,gBAAgB,QAAQF,CAAc,EACjDA,EACA,MAAM,KAAK,eAAeA,CAAc,EACxCG,GAAWD,GAAS,MAAO,EAC3B,CAAE,OAAQgJ,GAAY,UAAWC,EAAc,EAAG,KAAK,OAAO,eAAejJ,EAAQ,EAO3F,GANAC,GAAS,KAAO+I,GACV,GAAGA,EAAU,IAAIjJ,CAAY,GAC7BA,EACNlB,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWmB,EAAQ,CAAC,eAAeD,CAAY,GAAG,CAAC,EAChGjB,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWmB,EAAQ,CAAC,eAAegJ,EAAY,GAAG,CAAC,EAE9FhJ,GAAS,eAAe,OAAS,GACjC,CAACA,GAAS,eAAe,CAAC,EAAE,yBAA0B,CACtD,MAAMrb,GAAcqb,GAAS,eAAe,IAAKphC,IAAWA,GAAO,IAAI,EACjEqqC,GAAY,KAAK,WAAW,eAAe,eAAelJ,GAAUpb,EAAW,EAC/EukB,GAAY,KAAK,WAAW,eAAe,eAAelJ,GAAUrb,EAAW,EACrFia,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWoB,EAAQ,CAAC,uBAAuBiJ,EAAS,SAASC,EAAS,GAAG,CAAC,EACvHrK,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWmB,EAAQ,CAAC,uBAAuBkJ,EAAS,SAASD,EAAS,GAAG,CAAC,CACrI,CAEQjJ,GAAS,QAAQ,IAAKhI,IAAQ,CAC1B,GAAIA,GAAI,aAAeA,GAAI,qBAAuB,YAAa,CAC3D,MAAMmR,GAAe,KAAK,kBAAkBpJ,GAAU/H,GAAI,IAAI,EACxDoR,GAAe,KAAK,kBAAkBrJ,GAAU/H,GAAI,IAAI,EACxDqR,GAAkB,KAAK,kBAAkBrJ,GAAUhI,GAAI,IAAI,EAC3DsR,GAAkB,KAAK,kBAAkBtJ,GAAUhI,GAAI,IAAI,EAC3DiI,GAAK,kBAAkB,KAAK,WAAWkJ,EAAY,CAAC,eAAeG,EAAe,IAClFpJ,GAAO,kBAAkB,KAAK,WAAWmJ,EAAe,CAAC,eAAeD,EAAY,IAC1FxK,GAAU,KAAK,IAAI,MAAMqB,EAAE,CAAC,EAC5BpB,GAAY,KAAK,IAAI,MAAMqB,EAAI,CAAC,CAChD,CACA,CAAS,EAEDF,GAAS,QAAQ,QAAS9tC,IAAW,CACjC,MAAMiuC,GAAgB,KAAK,WAAW,eAAe,qBAAqBJ,GAAU7tC,GAAO,WAAW,EAEtG,GAAIA,GAAO,OAASiuC,GAChB,OAEJ,MAAMoJ,GAAgB,KAAK,WAAW,eAAe,qBAAqBvJ,GAAU9tC,GAAO,WAAW,EAEtG0sC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWoB,EAAQ,CAAC,uBAAuB9tC,GAAO,IAAI,SAASq3C,EAAa,GAAG,CAAC,EAC7H1K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWmB,EAAQ,CAAC,uBAAuBuJ,EAAa,SAASr3C,GAAO,IAAI,GAAG,CAAC,EAE/HA,GAAO,KAAOq3C,EAC1B,CAAS,EAEDvJ,GAAS,QAAQ,QAASjwC,IAAU,CAChC,MAAMswC,GAAe,KAAK,WAAW,eAAe,UAAUN,GAAUhwC,GAAM,YAAaA,GAAM,KAAK,EAEtG,GAAIA,GAAM,OAASswC,GACf,OAEJ,KAAM,CAAE,OAAAzZ,EAAM,EAAK,KAAK,OAAO,eAAeoZ,EAAQ,EAChDwJ,GAAe,KAAK,WAAW,eAAe,UAAUxJ,GAAUjwC,GAAM,YAAaA,GAAM,KAAK,EAEhGkwC,GAAKrZ,GACL,gBAAgBA,EAAM,MAAM72B,GAAM,IAAI,gBAAgBy5C,EAAY,IAClE,gBAAgBz5C,GAAM,IAAI,gBAAgBy5C,EAAY,IACtDtJ,GAAOtZ,GACP,gBAAgBA,EAAM,MAAM4iB,EAAY,gBAAgBz5C,GAAM,IAAI,IAClE,gBAAgBy5C,EAAY,gBAAgBz5C,GAAM,IAAI,IAC5D6uC,GAAU,KAAK,IAAI,MAAMqB,EAAE,CAAC,EAC5BpB,GAAY,KAAK,IAAI,MAAMqB,EAAI,CAAC,EAEhCnwC,GAAM,KAAOy5C,EACzB,CAAS,EAEDxJ,GAAS,YAAY,QAASta,IAAe,CACzC,MAAM0a,GAAoB,KAAK,WAAW,eAAe,eAAeL,GAAUra,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EAEzK,GAAIA,GAAW,OAAS0a,GACpB,OAEJ,MAAMqJ,GAAoB,KAAK,WAAW,eAAe,eAAezJ,GAAUta,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EAEzKkZ,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWoB,EAAQ,CAAC,uBAAuBta,GAAW,IAAI,SAAS+jB,EAAiB,GAAG,CAAC,EACrI5K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWmB,EAAQ,CAAC,uBAAuByJ,EAAiB,SAAS/jB,GAAW,IAAI,GAAG,CAAC,EAEvIA,GAAW,KAAO+jB,EAC9B,CAAS,EAED,MAAMf,GAAc1I,GAAS,QAAQ,OAAQphC,IAAWA,GAAO,OAAS,QAAUA,GAAO,OAAS,aAAa,EAC/G,QAASA,MAAU8pC,GAAa,CAE5B,GAAI9pC,GAAO,SACP,SACJ,MAAM8qC,GAAc,MAAM,KAAK,uBAAuB3J,GAAUnhC,EAAM,EACtEggC,GAAU,KAAK,IAAI,MAAM,eAAe8K,GAAY,MAAM,MAAMA,GAAY,IAAI,eAAe,KAAK,cAAc1J,GAAUphC,GAAQ,EAAK,CAAC,EAAE,CAAC,EAC7IigC,GAAY,KAAK,IAAI,MAAM,cAAc,KAAK,cAAcmB,GAAUphC,EAAM,CAAC,eAAe8qC,GAAY,IAAI,GAAG,CAAC,CAC5H,CACQ,MAAM,KAAK,eAAe9K,GAAWC,EAAW,CACxD,CAII,MAAM,UAAUxa,EAAazlB,EAAQ,CACjC,MAAM/N,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC8X,GAActrC,GAAM,MAAO,EAC3B+tC,GAAY,CAAE,EACdC,GAAc,CAAE,EAWtB,IAVIjgC,EAAO,OAAS,QAAUA,EAAO,OAAS,iBAC1B,MAAM,KAAK,YAAY/N,GAAO+N,CAAM,IAEhDggC,GAAU,KAAK,KAAK,kBAAkB/tC,GAAO+N,CAAM,CAAC,EACpDigC,GAAY,KAAK,KAAK,gBAAgBhuC,GAAO+N,CAAM,CAAC,IAG5DggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,QAAQ,KAAK,qBAAqBA,GAAO+N,CAAM,CAAC,EAAE,CAAC,EACjHigC,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,iBAAiB+N,EAAO,IAAI,GAAG,CAAC,EAE5FA,EAAO,UAAW,CAClB,MAAM+R,GAAiBwrB,GAAY,eAEnC,GAAIxrB,GAAe,OAAS,EAAG,CAC3B,MAAMg5B,GAASh5B,GAAe,CAAC,EAAE,yBAC3BA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAewrB,GAAaxrB,GAAe,IAAK/R,IAAWA,GAAO,IAAI,CAAC,EACtG+lB,GAAchU,GACf,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,qBAAqB84C,EAAM,GAAG,CAAC,EAC7F9K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,oBAAoB84C,EAAM,kBAAkBhlB,EAAW,GAAG,CAAC,CAC3I,CACYhU,GAAe,KAAK/R,CAAM,EAC1B,MAAM+qC,GAASh5B,GAAe,CAAC,EAAE,yBAC3BA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAewrB,GAAaxrB,GAAe,IAAK/R,IAAWA,GAAO,IAAI,CAAC,EACtG+lB,GAAchU,GACf,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,oBAAoB84C,EAAM,kBAAkBhlB,EAAW,GAAG,CAAC,EACzHka,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,qBAAqB84C,EAAM,GAAG,CAAC,CAC3G,CAEQ,MAAM71B,GAAcqoB,GAAY,QAAQ,KAAMpsC,IAAUA,GAAM,YAAY,SAAW,GACjFA,GAAM,YAAY,CAAC,IAAM6O,EAAO,IAAI,EAMxC,GALIkV,KACA8qB,GAAU,KAAK,KAAK,eAAe/tC,GAAOijB,EAAW,CAAC,EACtD+qB,GAAY,KAAK,KAAK,aAAahuC,GAAOijB,EAAW,CAAC,GAGtDlV,EAAO,SAAU,CACjB,MAAMinB,GAAmB,IAAI,YAAY,CACrC,KAAM,KAAK,WAAW,eAAe,qBAAqBh1B,GAAO,CAAC+N,EAAO,IAAI,CAAC,EAC9E,YAAa,CAACA,EAAO,IAAI,CACzC,CAAa,EACDu9B,GAAY,QAAQ,KAAKtW,EAAgB,EACzC+Y,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,oBAAoBg1B,GAAiB,IAAI,cAAcjnB,EAAO,IAAI,IAAI,CAAC,EACrIigC,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,qBAAqBg1B,GAAiB,IAAI,GAAG,CAAC,CAC1H,CACQ,GAAIjnB,EAAO,gBAAkB,UAAYA,EAAO,aAAc,CAC1D,MAAMkqC,IAAuB,MAAM,KAAK,uBAAuBj4C,GAAM,IAAI,GAAG,MAAM,GAAG,EAC/E2gB,GAAYs3B,GAAoB,CAAC,EACjCliB,GAASkiB,GAAoB,CAAC,EAC9BtJ,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA5Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,EAAO,KACb,MAAOA,EAAO,YAC9B,CAAa,EACK6gC,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA7Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,EAAO,IAC7B,CAAa,EACDggC,GAAU,KAAKY,EAAW,EAC1BX,GAAY,KAAKY,EAAW,CACxC,CAEY7gC,EAAO,UACPggC,GAAU,KAAK,IAAI,MAAM,qBAAqB,KAAK,WAAW/tC,EAAK,CAAC,KAAK+N,EAAO,IAAI,QAAQ,KAAK,cAAcA,EAAO,OAAO,CAAC,EAAE,CAAC,EACjIigC,GAAY,KAAK,IAAI,MAAM,qBAAqB,KAAK,WAAWhuC,EAAK,CAAC,KAAK+N,EAAO,IAAI,QAAQ,KAAK,cAAcA,EAAO,OAAO,CAAC,EAAE,CAAC,GAEvI,MAAM,KAAK,eAAeggC,GAAWC,EAAW,EAChD1C,GAAY,UAAUv9B,CAAM,EAC5B,KAAK,mBAAmB/N,GAAOsrC,EAAW,CAClD,CAII,MAAM,WAAW9X,EAAarV,EAAS,CACnC,UAAWpQ,MAAUoQ,EACjB,MAAM,KAAK,UAAUqV,EAAazlB,EAAM,CAEpD,CAII,MAAM,aAAaylB,EAAaic,EAAsBC,GAAsB,CACxE,MAAM1vC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCga,GAAY,gBAAgB,cAAciC,CAAoB,EAC9DA,EACAzvC,GAAM,QAAQ,KAAM4D,IAAMA,GAAE,OAAS6rC,CAAoB,EAC/D,GAAI,CAACjC,GACD,MAAM,IAAI,aAAa,WAAWiC,CAAoB,2BAA2BzvC,GAAM,IAAI,UAAU,EACzG,IAAIytC,GACJ,OAAI,gBAAgB,cAAciC,EAAoB,EAClDjC,GAAYiC,IAGZjC,GAAYD,GAAU,MAAO,EAC7BC,GAAU,KAAOiC,IAEd,KAAK,aAAa1vC,GAAOwtC,GAAWC,EAAS,CAC5D,CAII,MAAM,aAAaja,EAAaic,EAAsBhC,GAAW,CAC7D,MAAMztC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAC3C,IAAI8X,GAActrC,GAAM,MAAO,EAC/B,MAAM+tC,GAAY,CAAE,EACdC,GAAc,CAAE,EACtB,IAAI+K,GAAsB,GAC1B,MAAMvL,GAAY,gBAAgB,cAAciC,CAAoB,EAC9DA,EACAzvC,GAAM,QAAQ,KAAM+N,IAAWA,GAAO,OAAS0hC,CAAoB,EACzE,GAAI,CAACjC,GACD,MAAM,IAAI,aAAa,WAAWiC,CAAoB,2BAA2BzvC,GAAM,IAAI,UAAU,EACzG,GAAIwtC,GAAU,OAASC,GAAU,MAC7BD,GAAU,SAAWC,GAAU,QAC/BA,GAAU,UAAYD,GAAU,SAC/B,CAACA,GAAU,eACRC,GAAU,gBAAkB,UAC/BD,GAAU,eAAiBC,GAAU,cAClCA,GAAU,gBAAkB,SAEhC,MAAM,KAAK,WAAWztC,GAAOwtC,EAAS,EACtC,MAAM,KAAK,UAAUxtC,GAAOytC,EAAS,EAErCnC,GAActrC,GAAM,MAAO,MAE1B,CACD,GAAIwtC,GAAU,OAASC,GAAU,KAAM,CAKnC,GAHAM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,mBAAmBwtC,GAAU,IAAI,SAASC,GAAU,IAAI,GAAG,CAAC,EAC1HO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,mBAAmBytC,GAAU,IAAI,SAASD,GAAU,IAAI,GAAG,CAAC,EAExHA,GAAU,OAAS,QACnBA,GAAU,OAAS,cAAe,CAClC,MAAMqL,GAAc,MAAM,KAAK,uBAAuB74C,GAAOwtC,EAAS,EACtEO,GAAU,KAAK,IAAI,MAAM,eAAe8K,GAAY,MAAM,MAAMA,GAAY,IAAI,eAAe,KAAK,cAAc74C,GAAOytC,GAAW,EAAK,CAAC,EAAE,CAAC,EAC7IO,GAAY,KAAK,IAAI,MAAM,cAAc,KAAK,cAAchuC,GAAOytC,EAAS,CAAC,eAAeoL,GAAY,IAAI,GAAG,CAAC,CACpI,CAEgB,GAAIrL,GAAU,YAAc,IACxB,CAACA,GAAU,yBAA0B,CAGrC,MAAM1Z,GAFiBwX,GAAY,eAEA,IAAKv9B,IAAWA,GAAO,IAAI,EACxDqqC,GAAY,KAAK,WAAW,eAAe,eAAe9M,GAAaxX,EAAW,EAExFA,GAAY,OAAOA,GAAY,QAAQ0Z,GAAU,IAAI,EAAG,CAAC,EACzD1Z,GAAY,KAAK2Z,GAAU,IAAI,EAE/B,MAAM4K,GAAY,KAAK,WAAW,eAAe,eAAe/M,GAAaxX,EAAW,EACxFia,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,uBAAuBo4C,EAAS,SAASC,EAAS,GAAG,CAAC,EACpHrK,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,uBAAuBq4C,EAAS,SAASD,EAAS,GAAG,CAAC,CAC1I,CAEgB,GAAI5K,GAAU,cAAgB,IAC1BC,GAAU,qBAAuB,YAAa,CAC9C,MAAM6K,GAAe,KAAK,kBAAkBt4C,GAAOwtC,GAAU,IAAI,EAC3D+K,GAAe,KAAK,kBAAkBv4C,GAAOwtC,GAAU,IAAI,EAC3DgL,GAAkB,KAAK,kBAAkBx4C,GAAOytC,GAAU,IAAI,EAC9DgL,GAAkB,KAAK,kBAAkBz4C,GAAOytC,GAAU,IAAI,EAC9D2B,GAAK,kBAAkB,KAAK,WAAWkJ,EAAY,CAAC,eAAeG,EAAe,IAClFpJ,GAAO,kBAAkB,KAAK,WAAWmJ,EAAe,CAAC,eAAeD,EAAY,IAC1FxK,GAAU,KAAK,IAAI,MAAMqB,EAAE,CAAC,EAC5BpB,GAAY,KAAK,IAAI,MAAMqB,EAAI,CAAC,CACpD,CAEgB/D,GAAY,kBAAkBkC,EAAS,EAAE,QAASnsC,IAAW,CACzD,MAAMiuC,GAAgB,KAAK,WAAW,eAAe,qBAAqBhE,GAAajqC,GAAO,WAAW,EAEzG,GAAIA,GAAO,OAASiuC,GAChB,OAEJjuC,GAAO,YAAY,OAAOA,GAAO,YAAY,QAAQmsC,GAAU,IAAI,EAAG,CAAC,EACvEnsC,GAAO,YAAY,KAAKosC,GAAU,IAAI,EACtC,MAAMiL,GAAgB,KAAK,WAAW,eAAe,qBAAqBpN,GAAajqC,GAAO,WAAW,EAEzG0sC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,uBAAuBqB,GAAO,IAAI,SAASq3C,EAAa,GAAG,CAAC,EAC1H1K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,uBAAuB04C,EAAa,SAASr3C,GAAO,IAAI,GAAG,CAAC,EAE5HA,GAAO,KAAOq3C,EAClC,CAAiB,EAEDpN,GAAY,kBAAkBkC,EAAS,EAAE,QAAStuC,IAAU,CACxD,MAAMswC,GAAe,KAAK,WAAW,eAAe,UAAUlE,GAAapsC,GAAM,YAAaA,GAAM,KAAK,EAEzG,GAAIA,GAAM,OAASswC,GACf,OAEJtwC,GAAM,YAAY,OAAOA,GAAM,YAAY,QAAQsuC,GAAU,IAAI,EAAG,CAAC,EACrEtuC,GAAM,YAAY,KAAKuuC,GAAU,IAAI,EACrC,KAAM,CAAE,OAAA1X,EAAM,EAAK,KAAK,OAAO,eAAe/1B,EAAK,EAC7C24C,GAAe,KAAK,WAAW,eAAe,UAAUrN,GAAapsC,GAAM,YAAaA,GAAM,KAAK,EAEnGkwC,GAAKrZ,GACL,gBAAgBA,EAAM,MAAM72B,GAAM,IAAI,gBAAgBy5C,EAAY,IAClE,gBAAgBz5C,GAAM,IAAI,gBAAgBy5C,EAAY,IACtDtJ,GAAOtZ,GACP,gBAAgBA,EAAM,MAAM4iB,EAAY,gBAAgBz5C,GAAM,IAAI,IAClE,gBAAgBy5C,EAAY,gBAAgBz5C,GAAM,IAAI,IAC5D6uC,GAAU,KAAK,IAAI,MAAMqB,EAAE,CAAC,EAC5BpB,GAAY,KAAK,IAAI,MAAMqB,EAAI,CAAC,EAEhCnwC,GAAM,KAAOy5C,EACjC,CAAiB,EAEDrN,GACK,sBAAsBkC,EAAS,EAC/B,QAAS3Y,IAAe,CACzB,MAAMgb,GAAiB,KAAK,WAAW,eAAe,eAAevE,GAAazW,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EAEzK,GAAIA,GAAW,OAASgb,GACpB,OAEJhb,GAAW,YAAY,OAAOA,GAAW,YAAY,QAAQ2Y,GAAU,IAAI,EAAG,CAAC,EAC/E3Y,GAAW,YAAY,KAAK4Y,GAAU,IAAI,EAC1C,MAAMmL,GAAoB,KAAK,WAAW,eAAe,eAAetN,GAAazW,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,EAE5KkZ,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,uBAAuB60B,GAAW,IAAI,SAAS+jB,EAAiB,GAAG,CAAC,EAClI5K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,uBAAuB44C,EAAiB,SAAS/jB,GAAW,IAAI,GAAG,CAAC,EAEpIA,GAAW,KAAO+jB,EACtC,CAAiB,EAED,MAAMjO,GAAiBW,GAAY,QAAQ,KAAMv9B,IAAWA,GAAO,OAASy/B,GAAU,IAAI,EAC1FlC,GAAY,QAAQA,GAAY,QAAQ,QAAQX,EAAc,CAAC,EAAE,KAAO8C,GAAU,KAClFD,GAAU,KAAOC,GAAU,IAC3C,CAMY,IALIA,GAAU,YAAcD,GAAU,WAClCC,GAAU,QAAUD,GAAU,SAC9BO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,UAAU,KAAK,OAAO,eAAeA,EAAS,CAAC,EAAE,CAAC,EAChJO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,UAAU,KAAK,OAAO,eAAeD,EAAS,CAAC,EAAE,CAAC,IAEjJC,GAAU,OAAS,QACpBA,GAAU,OAAS,iBAClBD,GAAU,OAAS,QAChBA,GAAU,OAAS,iBACtB,CAAC,SAAS,cAAcC,GAAU,KAAMD,GAAU,IAAI,GACnDC,GAAU,WAAaD,GAAU,UAAW,CAChD,MAAMwL,GAAcvL,GAAU,QAAU,KAAO,GAEzCwL,GAAc,KAAK,cAAcj5C,GAAOytC,EAAS,EAEjDyL,GAAc,KAAK,cAAcl5C,GAAOwtC,EAAS,EAEjD2L,GAA2B,KAAK,cAAcn5C,GAAOwtC,GAAW,EAAK,EAErE4L,GAA4B,KAAK,cAAcp5C,GAAOwtC,GAAW,GAAM,GAAO,EAAI,EAElF6L,GAA+B,KAAK,cAAcr5C,GAAOwtC,GAAW,GAAO,GAAO,EAAI,EAE5FO,GAAU,KAAK,IAAI,MAAM,cAAcmL,EAAW,cAAcG,EAA4B,EAAE,CAAC,EAC/FrL,GAAY,KAAK,IAAI,MAAM,cAAcoL,EAAyB,cAAcD,EAAwB,EAAE,CAAC,EAE3GpL,GAAU,KAAK,KAAK,kBAAkB/tC,GAAOytC,GAAWwL,EAAW,CAAC,EACpEjL,GAAY,KAAK,KAAK,gBAAgBhuC,GAAOytC,GAAWwL,EAAW,CAAC,EAEhEzL,GAAU,UAAY,MACtBA,GAAU,UAAY,SAEtBuL,GAAsB,GACtBhL,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,gBAAgB,CAAC,EAC/GQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,iBAAiBA,GAAU,OAAO,EAAE,CAAC,GAGzI,MAAM8L,GAAS,GAAGL,EAAW,GAAGD,EAAW,WAAWvL,GAAU,IAAI,cAAcwL,EAAW,GAAGD,EAAW,GACrGO,GAAW,GAAGH,EAAyB,GAAGJ,EAAW,WAAWvL,GAAU,IAAI,cAAc2L,EAAyB,GAAGJ,EAAW,GAEzIjL,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,UAAU6L,EAAM,EAAE,CAAC,EACjHtL,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,UAAU8L,EAAQ,EAAE,CAAC,EAEjH9L,GAAU,UAAY,MACtBA,GAAU,UAAY,SACtBM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,iBAAiBA,GAAU,OAAO,EAAE,CAAC,EACnIO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,GAGrHM,GAAU,KAAK,KAAK,gBAAgB/tC,GAAOwtC,GAAW4L,EAAyB,CAAC,EAChFpL,GAAY,KAAK,KAAK,kBAAkBhuC,GAAOwtC,GAAW4L,EAAyB,CAAC,CACpG,CAeY,GAdI5L,GAAU,aAAeC,GAAU,aAC/BA,GAAU,YACVM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,iBAAiB,CAAC,EAChHQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,gBAAgB,CAAC,IAGjHO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,gBAAgB,CAAC,EAC/GQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,iBAAiB,CAAC,IAGtHA,GAAU,UAAYC,GAAU,UAChCM,GAAU,KAAK,IAAI,MAAM,qBAAqB,KAAK,WAAW/tC,EAAK,CAAC,KAAKwtC,GAAU,IAAI,QAAQ,KAAK,cAAcC,GAAU,OAAO,CAAC,EAAE,CAAC,EACvIO,GAAY,KAAK,IAAI,MAAM,qBAAqB,KAAK,WAAWhuC,EAAK,CAAC,KAAKytC,GAAU,IAAI,QAAQ,KAAK,cAAcD,GAAU,OAAO,CAAC,EAAE,CAAC,GAEzIC,GAAU,YAAcD,GAAU,UAAW,CAC7C,MAAM1tB,GAAiBwrB,GAAY,eAEnC,GAAIxrB,GAAe,OAAS,EAAG,CAC3B,MAAMg5B,GAASh5B,GAAe,CAAC,EAAE,yBAC3BA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAewrB,GAAaxrB,GAAe,IAAK/R,IAAWA,GAAO,IAAI,CAAC,EACtG+lB,GAAchU,GACf,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,qBAAqB84C,EAAM,GAAG,CAAC,EAC7F9K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,oBAAoB84C,EAAM,kBAAkBhlB,EAAW,GAAG,CAAC,CAC/I,CACgB,GAAI2Z,GAAU,YAAc,GAAM,CAC9B3tB,GAAe,KAAK2tB,EAAS,EAE7B,MAAM1/B,GAASu9B,GAAY,QAAQ,KAAMv9B,IAAWA,GAAO,OAAS0/B,GAAU,IAAI,EAClF1/B,GAAO,UAAY,GACnB,MAAM+qC,GAASh5B,GAAe,CAAC,EAAE,yBAC3BA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAewrB,GAAaxrB,GAAe,IAAK/R,IAAWA,GAAO,IAAI,CAAC,EACtG+lB,GAAchU,GACf,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,oBAAoB84C,EAAM,kBAAkBhlB,EAAW,GAAG,CAAC,EACzHka,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,qBAAqB84C,EAAM,GAAG,CAAC,CACnH,KACqB,CACD,MAAM35B,GAAgBW,GAAe,KAAMlc,IAAMA,GAAE,OAAS6pC,GAAU,IAAI,EAC1E3tB,GAAe,OAAOA,GAAe,QAAQX,EAAa,EAAG,CAAC,EAE9D,MAAMpR,GAASu9B,GAAY,QAAQ,KAAMv9B,IAAWA,GAAO,OAAS0/B,GAAU,IAAI,EAGlF,GAFA1/B,GAAO,UAAY,GAEf+R,GAAe,OAAS,EAAG,CAC3B,MAAMg5B,GAASh5B,GAAe,CAAC,EAC1B,yBACCA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAewrB,GAAaxrB,GAAe,IAAK/R,IAAWA,GAAO,IAAI,CAAC,EACtG+lB,GAAchU,GACf,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,oBAAoB84C,EAAM,kBAAkBhlB,EAAW,GAAG,CAAC,EACzHka,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,qBAAqB84C,EAAM,GAAG,CAAC,CACvH,CACA,CACA,CACY,GAAIrL,GAAU,WAAaD,GAAU,SACjC,GAAIC,GAAU,WAAa,GAAM,CAC7B,MAAMzY,GAAmB,IAAI,YAAY,CACrC,KAAM,KAAK,WAAW,eAAe,qBAAqBh1B,GAAO,CAACytC,GAAU,IAAI,CAAC,EACjF,YAAa,CAACA,GAAU,IAAI,CACpD,CAAqB,EACDnC,GAAY,QAAQ,KAAKtW,EAAgB,EACzC+Y,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,oBAAoBg1B,GAAiB,IAAI,cAAcyY,GAAU,IAAI,IAAI,CAAC,EACxIO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,qBAAqBg1B,GAAiB,IAAI,GAAG,CAAC,CAClI,KACqB,CACD,MAAMA,GAAmBsW,GAAY,QAAQ,KAAMjqC,IACvCA,GAAO,YAAY,SAAW,GAClC,CAAC,CAACA,GAAO,YAAY,KAAMgd,IAAeA,KAAeovB,GAAU,IAAI,CAC9E,EACDnC,GAAY,QAAQ,OAAOA,GAAY,QAAQ,QAAQtW,EAAgB,EAAG,CAAC,EAC3E+Y,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,qBAAqBg1B,GAAiB,IAAI,GAAG,CAAC,EAC5GgZ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,oBAAoBg1B,GAAiB,IAAI,cAAcyY,GAAU,IAAI,IAAI,CAAC,CAC9J,CAmEY,GAjEID,GAAU,cAAgBC,GAAU,cAEhCD,GAAU,cACNA,GAAU,qBAAuB,QACjCO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,gBAAgB,CAAC,EAC/GQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBwtC,GAAU,IAAI,iBAAiB,KAAK,OAAO,aAAa,EAAE,CAAC,GAExIA,GAAU,qBAAuB,cACtCO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,EAC/GO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,0BAA0B,KAAK,WAAW,KAAK,kBAAkBztC,GAAOytC,EAAS,CAAC,CAAC,IAAI,CAAC,EACxLM,GAAU,KAAK,IAAI,MAAM,iBAAiB,KAAK,WAAW,KAAK,kBAAkB/tC,GAAOytC,EAAS,CAAC,CAAC,EAAE,CAAC,EACtGO,GAAY,KAAK,IAAI,MAAM,iCAAiC,KAAK,WAAW,KAAK,kBAAkBhuC,GAAOytC,EAAS,CAAC,CAAC,aAAa,KAAK,WAAWztC,EAAK,CAAC,KAAKytC,GAAU,IAAI,GAAG,CAAC,IAGnLA,GAAU,qBAAuB,OAC7BA,GAAU,cAAgB,IAC1BM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,iBAAiB,KAAK,OAAO,aAAa,EAAE,CAAC,EAC3IO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,IAGjHM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,EAC/GO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,iBAAiB,KAAK,OAAO,aAAa,EAAE,CAAC,GAG5IA,GAAU,qBAAuB,cAClCA,GAAU,cAAgB,IAC1BM,GAAU,KAAK,IAAI,MAAM,iCAAiC,KAAK,WAAW,KAAK,kBAAkB/tC,GAAOytC,EAAS,CAAC,CAAC,aAAa,KAAK,WAAWztC,EAAK,CAAC,KAAKytC,GAAU,IAAI,GAAG,CAAC,EAC7KO,GAAY,KAAK,IAAI,MAAM,iBAAiB,KAAK,WAAW,KAAK,kBAAkBhuC,GAAOytC,EAAS,CAAC,CAAC,EAAE,CAAC,EACxGM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,0BAA0B,KAAK,WAAW,KAAK,kBAAkBztC,GAAOytC,EAAS,CAAC,CAAC,IAAI,CAAC,EACtLO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,IAGjHM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,EAC/GO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,0BAA0B,KAAK,WAAW,KAAK,kBAAkBztC,GAAOytC,EAAS,CAAC,CAAC,IAAI,CAAC,EACxLM,GAAU,KAAK,IAAI,MAAM,iBAAiB,KAAK,WAAW,KAAK,kBAAkB/tC,GAAOytC,EAAS,CAAC,CAAC,EAAE,CAAC,EACtGO,GAAY,KAAK,IAAI,MAAM,iCAAiC,KAAK,WAAW,KAAK,kBAAkBhuC,GAAOytC,EAAS,CAAC,CAAC,aAAa,KAAK,WAAWztC,EAAK,CAAC,KAAKytC,GAAU,IAAI,GAAG,CAAC,KAKvLA,GAAU,UAAYD,GAAU,SAChC,CAACuL,KACGtL,GAAU,UAAY,MACtBA,GAAU,UAAY,QACtBM,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,iBAAiBA,GAAU,OAAO,EAAE,CAAC,EAC/HD,GAAU,UAAY,MACtBA,GAAU,UAAY,OACtBQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,iBAAiBD,GAAU,OAAO,EAAE,CAAC,EAGrIQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,GAGhHD,GAAU,UAAY,MAC3BA,GAAU,UAAY,SACtBO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,gBAAgB,CAAC,EAC/GO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,iBAAiBD,GAAU,OAAO,EAAE,CAAC,MAGxIC,GAAU,oBAAsB,IAAI,YAAa,KACjDD,GAAU,oBAAsB,IAAI,YAAa,GAClDC,GAAU,OAASD,GAAU,QAC7BO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,UAAU,KAAK,OAAO,eAAeA,EAAS,CAAC,EAAE,CAAC,EAChJO,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,kBAAkBytC,GAAU,IAAI,UAAU,KAAK,OAAO,eAAeD,EAAS,CAAC,EAAE,CAAC,GAElJC,GAAU,gBAAkBD,GAAU,gBAElC,CAACC,GAAU,eACXA,GAAU,gBAAkB,WAAW,CAEvC,MAAMwK,IAAuB,MAAM,KAAK,uBAAuBj4C,GAAM,IAAI,GAAG,MAAM,GAAG,EAC/E2gB,GAAYs3B,GAAoB,CAAC,EACjCliB,GAASkiB,GAAoB,CAAC,EACpClK,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,mBAAmBwtC,GAAU,IAAI,kBAAkBA,GAAU,IAAI,GAAG,CAAC,EACnIO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,QAAQ,KAAK,qBAAqBA,GAAOytC,EAAS,CAAC,EAAE,CAAC,EACpHM,GAAU,KAAK,IAAI,MAAM,UAAU,KAAK,WAAW/tC,EAAK,CAAC,SAASytC,GAAU,IAAI,iBAAiBD,GAAU,IAAI,GAAG,CAAC,EACnHO,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,0BAA0BwtC,GAAU,IAAI,GAAG,CAAC,EAC1GO,GAAU,KAAK,KAAK,yBAAyB,CACzC,SAAU,KAAK,OAAO,SACtB,OAAAhY,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM6sB,GAAU,IACxC,CAAqB,CAAC,EAEFQ,GAAY,KAAK,KAAK,yBAAyB,CAC3C,SAAU,KAAK,OAAO,SACtB,OAAAjY,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM6sB,GAAU,KAChB,MAAOA,GAAU,YACzC,CAAqB,CAAC,EACFQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,QAAQ,KAAK,qBAAqBA,GAAOwtC,EAAS,CAAC,EAAE,CAAC,EACtHQ,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,iBAAiBytC,GAAU,IAAI,GAAG,CAAC,CAUvH,CAEA,CACQ,MAAM,KAAK,eAAeM,GAAWC,EAAW,EAChD,KAAK,mBAAmBhuC,GAAOsrC,EAAW,CAClD,CAII,MAAM,cAAc9X,EAAagX,EAAgB,CAC7C,SAAW,CAAE,UAAAgD,GAAW,UAAAC,EAAS,IAAMjD,EACnC,MAAM,KAAK,aAAahX,EAAaga,GAAWC,EAAS,CAErE,CAII,MAAM,WAAWja,EAAawc,EAAc,CACxC,MAAMhwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCzlB,GAAS,gBAAgB,cAAciiC,CAAY,EACnDA,EACAhwC,GAAM,iBAAiBgwC,CAAY,EACzC,GAAI,CAACjiC,GACD,MAAM,IAAI,aAAa,WAAWiiC,CAAY,6BAA6BhwC,GAAM,IAAI,GAAG,EAC5F,MAAMsrC,GAActrC,GAAM,MAAO,EAC3B+tC,GAAY,CAAE,EACdC,GAAc,CAAE,EAEtB,GAAIjgC,GAAO,UAAW,CAClB,MAAM+qC,GAAS/qC,GAAO,yBAChBA,GAAO,yBACP,KAAK,WAAW,eAAe,eAAeu9B,GAAaA,GAAY,eAAe,IAAKv9B,IAAWA,GAAO,IAAI,CAAC,EAClH+lB,GAAcwX,GAAY,eAC3B,IAAKnsB,IAAkB,IAAIA,GAAc,IAAI,GAAG,EAChD,KAAK,IAAI,EACd4uB,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWzC,EAAW,CAAC,qBAAqBwN,EAAM,GAAG,CAAC,EACnG9K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW1C,EAAW,CAAC,oBAAoBwN,EAAM,kBAAkBhlB,EAAW,GAAG,CAAC,EAEjI,MAAM0U,GAAc8C,GAAY,iBAAiBv9B,GAAO,IAAI,EAG5D,GAFAy6B,GAAY,UAAY,GAEpB8C,GAAY,eAAe,OAAS,EAAG,CACvC,MAAMwN,GAASxN,GAAY,eAAe,CAAC,EACtC,yBACCA,GAAY,eAAe,CAAC,EAAE,yBAC9B,KAAK,WAAW,eAAe,eAAeA,GAAaA,GAAY,eAAe,IAAKv9B,IAAWA,GAAO,IAAI,CAAC,EAClH+lB,GAAcwX,GAAY,eAC3B,IAAKnsB,IAAkB,IAAIA,GAAc,IAAI,GAAG,EAChD,KAAK,IAAI,EACd4uB,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWzC,EAAW,CAAC,oBAAoBwN,EAAM,kBAAkBhlB,EAAW,GAAG,CAAC,EAC/Hka,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW1C,EAAW,CAAC,qBAAqBwN,EAAM,GAAG,CAAC,CACrH,CACA,CAEQ,MAAM71B,GAAcqoB,GAAY,QAAQ,KAAMpsC,IAAUA,GAAM,YAAY,SAAW,GACjFA,GAAM,YAAY,CAAC,IAAM6O,GAAO,IAAI,EACpCkV,KACAqoB,GAAY,QAAQ,OAAOA,GAAY,QAAQ,QAAQroB,EAAW,EAAG,CAAC,EACtE8qB,GAAU,KAAK,KAAK,aAAa/tC,GAAOijB,EAAW,CAAC,EACpD+qB,GAAY,KAAK,KAAK,eAAehuC,GAAOijB,EAAW,CAAC,GAG5D,MAAMu2B,GAAclO,GAAY,OAAO,KAAMhqC,IAAU,CAAC,CAACA,GAAM,aAC3DA,GAAM,YAAY,SAAW,GAC7BA,GAAM,YAAY,CAAC,IAAMyM,GAAO,IAAI,EACpCyrC,KACAlO,GAAY,OAAO,OAAOA,GAAY,OAAO,QAAQkO,EAAW,EAAG,CAAC,EACpEzL,GAAU,KAAK,KAAK,uBAAuB/tC,GAAOw5C,EAAW,CAAC,EAC9DxL,GAAY,KAAK,KAAK,yBAAyBhuC,GAAOw5C,EAAW,CAAC,GAGtE,MAAMC,GAAenO,GAAY,QAAQ,KAAMjqC,IAAWA,GAAO,YAAY,SAAW,GACpFA,GAAO,YAAY,CAAC,IAAM0M,GAAO,IAAI,EASzC,GARI0rC,KACAnO,GAAY,QAAQ,OAAOA,GAAY,QAAQ,QAAQmO,EAAY,EAAG,CAAC,EACvE1L,GAAU,KAAK,KAAK,wBAAwB/tC,GAAOy5C,EAAY,CAAC,EAChEzL,GAAY,KAAK,KAAK,0BAA0BhuC,GAAOy5C,EAAY,CAAC,GAExE1L,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,iBAAiB+N,GAAO,IAAI,GAAG,CAAC,EAC9FigC,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,QAAQ,KAAK,qBAAqBA,GAAO+N,EAAM,CAAC,EAAE,CAAC,GAE/GA,GAAO,OAAS,QAAUA,GAAO,OAAS,gBAC1B,MAAM,KAAK,YAAY/N,GAAO+N,EAAM,EACvC,CACT,MAAM2rC,GAAW,MAAM,KAAK,uBAAuB15C,GAAO+N,EAAM,EAC1D4rC,GAAkB,IAAID,GAAS,MAAM,MAAMA,GAAS,IAAI,IAC9D3L,GAAU,KAAK,KAAK,gBAAgB/tC,GAAO+N,GAAQ4rC,EAAe,CAAC,EACnE3L,GAAY,KAAK,KAAK,kBAAkBhuC,GAAO+N,GAAQ4rC,EAAe,CAAC,CACvF,CAEQ,GAAI5rC,GAAO,gBAAkB,SAAU,CACnC,MAAMkqC,IAAuB,MAAM,KAAK,uBAAuBj4C,GAAM,IAAI,GAAG,MAAM,GAAG,EAC/E2gB,GAAYs3B,GAAoB,CAAC,EACjCliB,GAASkiB,GAAoB,CAAC,EAC9BrJ,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA7Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,GAAO,IAC7B,CAAa,EACK4gC,GAAc,KAAK,yBAAyB,CAC9C,SAAU,KAAK,OAAO,SACtB,OAAA5Y,GACA,MAAOpV,GACP,KAAM,kBAAkB,iBACxB,KAAM5S,GAAO,KACb,MAAOA,GAAO,YAC9B,CAAa,EACDggC,GAAU,KAAKa,EAAW,EAC1BZ,GAAY,KAAKW,EAAW,CACxC,CACQ,MAAM,KAAK,eAAeZ,GAAWC,EAAW,EAChD1C,GAAY,aAAav9B,EAAM,EAC/B,KAAK,mBAAmB/N,GAAOsrC,EAAW,CAClD,CAII,MAAM,YAAY9X,EAAarV,EAAS,CACpC,UAAWpQ,MAAUoQ,EACjB,MAAM,KAAK,WAAWqV,EAAazlB,EAAM,CAErD,CAII,MAAM,iBAAiBylB,EAAaM,EAAa8lB,GAAgB,CAC7D,MAAM55C,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC8X,GAActrC,GAAM,MAAO,EAC3BovC,GAAK,KAAK,oBAAoBpvC,GAAO8zB,EAAa8lB,EAAc,EAEtEtO,GAAY,QAAQ,QAASv9B,IAAW,CAChC+lB,EAAY,KAAMzV,IAAeA,KAAetQ,GAAO,IAAI,IAC3DA,GAAO,UAAY,GACnC,CAAS,EACD,MAAMshC,GAAO,KAAK,kBAAkB/D,EAAW,EAC/C,MAAM,KAAK,eAAe8D,GAAIC,EAAI,EAClC,KAAK,mBAAmBrvC,GAAOsrC,EAAW,CAClD,CAII,MAAM,kBAAkB9X,EAAarV,EAAS,CAC1C,MAAMne,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC8X,GAActrC,GAAM,MAAO,EAC3B8zB,GAAc3V,EAAQ,IAAKpQ,IAAWA,GAAO,IAAI,EACjDggC,GAAY,CAAE,EACdC,GAAc,CAAE,EAEhBluB,GAAiBwrB,GAAY,eACnC,GAAIxrB,GAAe,OAAS,EAAG,CAC3B,MAAMg5B,GAASh5B,GAAe,CAAC,EAAE,yBAC3BA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAewrB,GAAaxrB,GAAe,IAAK/R,IAAWA,GAAO,IAAI,CAAC,EACtG8rC,GAAoB/5B,GACrB,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdggC,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,qBAAqB84C,EAAM,GAAG,CAAC,EAC7F9K,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,oBAAoB84C,EAAM,kBAAkBe,EAAiB,GAAG,CAAC,CAC7I,CAEQvO,GAAY,QACP,OAAQv9B,IAAW+lB,GAAY,QAAQ/lB,GAAO,IAAI,IAAM,EAAE,EAC1D,QAASA,IAAYA,GAAO,UAAY,EAAK,EAClD,MAAM+qC,GAASh5B,GAAe,CAAC,GAAG,yBAC5BA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAewrB,GAAaxX,EAAW,EACtE+lB,GAAoB/lB,GACrB,IAAKzV,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd0vB,GAAU,KAAK,IAAI,MAAM,eAAe,KAAK,WAAW/tC,EAAK,CAAC,oBAAoB84C,EAAM,kBAAkBe,EAAiB,GAAG,CAAC,EAC/H7L,GAAY,KAAK,IAAI,MAAM,eAAe,KAAK,WAAWhuC,EAAK,CAAC,qBAAqB84C,EAAM,GAAG,CAAC,EAC/F,MAAM,KAAK,eAAe/K,GAAWC,EAAW,EAChD,KAAK,mBAAmBhuC,GAAOsrC,EAAW,CAClD,CAII,MAAM,eAAe9X,EAAaomB,EAAgB,CAC9C,MAAM55C,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC4b,GAAK,KAAK,kBAAkBpvC,EAAK,EACjCqvC,GAAO,KAAK,oBAAoBrvC,GAAOA,GAAM,eAAe,IAAK+N,IAAWA,GAAO,IAAI,EAAG6rC,CAAc,EAC9G,MAAM,KAAK,eAAexK,GAAIC,EAAI,EAClCrvC,GAAM,eAAe,QAAS+N,IAAW,CACrCA,GAAO,UAAY,EAC/B,CAAS,CACT,CAII,MAAM,uBAAuBylB,EAAawB,EAAkB,CACxD,MAAMh1B,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAEtCwB,EAAiB,OAClBA,EAAiB,KACb,KAAK,WAAW,eAAe,qBAAqBh1B,GAAOg1B,EAAiB,WAAW,GAC/F,MAAMoa,GAAK,KAAK,0BAA0BpvC,GAAOg1B,CAAgB,EAC3Dqa,GAAO,KAAK,wBAAwBrvC,GAAOg1B,CAAgB,EACjE,MAAM,KAAK,eAAeoa,GAAIC,EAAI,EAClCrvC,GAAM,oBAAoBg1B,CAAgB,CAClD,CAII,MAAM,wBAAwBxB,EAAa0c,EAAmB,CAC1D,UAAWlb,MAAoBkb,EAC3B,MAAM,KAAK,uBAAuB1c,EAAawB,EAAgB,CAE3E,CAII,MAAM,qBAAqBxB,EAAa2c,EAAc,CAClD,MAAMnwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCwB,GAAmB,gBAAgB,cAAcmb,CAAY,EAC7DA,EACAnwC,GAAM,QAAQ,KAAMq9B,IAAMA,GAAE,OAAS8S,CAAY,EACvD,GAAI,CAACnb,GACD,MAAM,IAAI,aAAa,qDAAqDh1B,GAAM,IAAI,EAAE,EAC5F,MAAMovC,GAAK,KAAK,wBAAwBpvC,GAAOg1B,EAAgB,EACzDqa,GAAO,KAAK,0BAA0BrvC,GAAOg1B,EAAgB,EACnE,MAAM,KAAK,eAAeoa,GAAIC,EAAI,EAClCrvC,GAAM,uBAAuBg1B,EAAgB,CACrD,CAII,MAAM,sBAAsBxB,EAAa0c,EAAmB,CACxD,UAAWlb,MAAoBkb,EAC3B,MAAM,KAAK,qBAAqB1c,EAAawB,EAAgB,CAEzE,CAII,MAAM,sBAAsBxB,EAAa4B,EAAiB,CACtD,MAAMp1B,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAEtC4B,EAAgB,OACjBA,EAAgB,KACZ,KAAK,WAAW,eAAe,oBAAoBp1B,GAAOo1B,EAAgB,UAAU,GAC5F,MAAMga,GAAK,KAAK,yBAAyBpvC,GAAOo1B,CAAe,EACzDia,GAAO,KAAK,uBAAuBrvC,GAAOo1B,CAAe,EAC/D,MAAM,KAAK,eAAega,GAAIC,EAAI,EAClCrvC,GAAM,mBAAmBo1B,CAAe,CAChD,CAII,MAAM,uBAAuB5B,EAAa4c,EAAkB,CACxD,MAAM/nB,GAAW+nB,EAAiB,IAAKhb,IAAoB,KAAK,sBAAsB5B,EAAa4B,EAAe,CAAC,EACnH,MAAM,QAAQ,IAAI/M,EAAQ,CAClC,CAII,MAAM,oBAAoBmL,EAAa6c,EAAa,CAChD,MAAMrwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC4B,GAAkB,gBAAgB,aAAaib,CAAW,EAC1DA,EACArwC,GAAM,OAAO,KAAM4D,IAAMA,GAAE,OAASysC,CAAW,EACrD,GAAI,CAACjb,GACD,MAAM,IAAI,aAAa,oDAAoDp1B,GAAM,IAAI,EAAE,EAC3F,MAAMovC,GAAK,KAAK,uBAAuBpvC,GAAOo1B,EAAe,EACvDia,GAAO,KAAK,yBAAyBrvC,GAAOo1B,EAAe,EACjE,MAAM,KAAK,eAAega,GAAIC,EAAI,EAClCrvC,GAAM,sBAAsBo1B,EAAe,CACnD,CAII,MAAM,qBAAqB5B,EAAa4c,EAAkB,CACtD,MAAM/nB,GAAW+nB,EAAiB,IAAKhb,IAAoB,KAAK,oBAAoB5B,EAAa4B,EAAe,CAAC,EACjH,MAAM,QAAQ,IAAI/M,EAAQ,CAClC,CAII,MAAM,0BAA0BmL,EAAa+B,EAAqB,CAC9D,MAAMv1B,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAEtC+B,EAAoB,OACrBA,EAAoB,KAChB,KAAK,WAAW,eAAe,wBAAwBv1B,GAAOu1B,EAAoB,UAAU,GACpG,MAAM6Z,GAAK,KAAK,6BAA6BpvC,GAAOu1B,CAAmB,EACjE8Z,GAAO,KAAK,2BAA2BrvC,GAAOu1B,CAAmB,EACvE,MAAM,KAAK,eAAe6Z,GAAIC,EAAI,EAClCrvC,GAAM,uBAAuBu1B,CAAmB,CACxD,CAII,MAAM,2BAA2B/B,EAAa8c,EAAsB,CAChE,MAAMjoB,GAAWioB,EAAqB,IAAK/a,IAAwB,KAAK,0BAA0B/B,EAAa+B,EAAmB,CAAC,EACnI,MAAM,QAAQ,IAAIlN,EAAQ,CAClC,CAII,MAAM,wBAAwBmL,EAAa+c,EAAiB,CACxD,MAAMvwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrC+B,GAAsB,gBAAgB,iBAAiBgb,CAAe,EACtEA,EACAvwC,GAAM,WAAW,KAAM4D,IAAMA,GAAE,OAAS2sC,CAAe,EAC7D,GAAI,CAAChb,GACD,MAAM,IAAI,aAAa,wDAAwDv1B,GAAM,IAAI,EAAE,EAC/F,MAAMovC,GAAK,KAAK,2BAA2BpvC,GAAOu1B,EAAmB,EAC/D8Z,GAAO,KAAK,6BAA6BrvC,GAAOu1B,EAAmB,EACzE,MAAM,KAAK,eAAe6Z,GAAIC,EAAI,EAClCrvC,GAAM,0BAA0Bu1B,EAAmB,CAC3D,CAII,MAAM,yBAAyB/B,EAAa8c,EAAsB,CAC9D,MAAMjoB,GAAWioB,EAAqB,IAAK/a,IAAwB,KAAK,wBAAwB/B,EAAa+B,EAAmB,CAAC,EACjI,MAAM,QAAQ,IAAIlN,EAAQ,CAClC,CAII,MAAM,iBAAiBmL,EAAaqB,EAAY,CAC5C,MAAM70B,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAEtCqB,EAAW,OACZA,EAAW,KAAO,KAAK,WAAW,eAAe,eAAe70B,GAAO60B,EAAW,YAAa,KAAK,aAAaA,CAAU,EAAGA,EAAW,qBAAqB,GAClK,MAAMua,GAAK,KAAK,oBAAoBpvC,GAAO60B,CAAU,EAC/Cwa,GAAO,KAAK,kBAAkBrvC,GAAO60B,CAAU,EACrD,MAAM,KAAK,eAAeua,GAAIC,EAAI,EAClCrvC,GAAM,cAAc60B,CAAU,CACtC,CAII,MAAM,kBAAkBrB,EAAagd,EAAa,CAC9C,UAAW3b,MAAc2b,EACrB,MAAM,KAAK,iBAAiBhd,EAAaqB,EAAU,CAE/D,CAII,MAAM,eAAerB,EAAaid,EAAkB,CAChD,MAAMzwC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCqB,GAAa,gBAAgB,kBAAkB4b,CAAgB,EAC/DA,EACAzwC,GAAM,YAAY,KAAM21B,IAAOA,GAAG,OAAS8a,CAAgB,EACjE,GAAI,CAAC5b,GACD,MAAM,IAAI,aAAa,+CAA+C70B,GAAM,IAAI,EAAE,EACjF60B,GAAW,OACZA,GAAW,KAAO,KAAK,WAAW,eAAe,eAAe70B,GAAO60B,GAAW,YAAa,KAAK,aAAaA,EAAU,EAAGA,GAAW,qBAAqB,GAElK,MAAMua,GAAK,KAAK,kBAAkBpvC,GAAO60B,EAAU,EAC7Cwa,GAAO,KAAK,oBAAoBrvC,GAAO60B,EAAU,EACvD,MAAM,KAAK,eAAeua,GAAIC,EAAI,EAClCrvC,GAAM,iBAAiB60B,EAAU,CACzC,CAII,MAAM,gBAAgBrB,EAAagd,EAAa,CAC5C,UAAW3b,MAAc2b,EACrB,MAAM,KAAK,eAAehd,EAAaqB,EAAU,CAE7D,CAII,MAAM,YAAYrB,EAAat0B,EAAO,CAClC,MAAMc,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAEtCt0B,EAAM,OACPA,EAAM,KAAO,KAAK,kBAAkBc,GAAOd,CAAK,GACpD,MAAMkwC,GAAK,KAAK,eAAepvC,GAAOd,CAAK,EACrCmwC,GAAO,KAAK,aAAarvC,GAAOd,CAAK,EAC3C,MAAM,KAAK,eAAekwC,GAAIC,EAAI,EAClCrvC,GAAM,SAASd,CAAK,CAC5B,CAII,MAAM,gBAAgB46C,EAAY56C,EAAO,CACrC,MAAM2pC,GAAO,gBAAgB,OAAOiR,CAAU,EACxCA,EACA,MAAM,KAAK,cAAcA,CAAU,EAEpC56C,EAAM,OACPA,EAAM,KAAO,KAAK,kBAAkB2pC,GAAM3pC,CAAK,GACnD,MAAMkwC,GAAK,KAAK,mBAAmBvG,GAAM3pC,CAAK,EACxCmwC,GAAO,KAAK,aAAaxG,GAAM3pC,CAAK,EAC1C,MAAM,KAAK,eAAekwC,GAAIC,EAAI,EAClCxG,GAAK,SAAS3pC,CAAK,CAC3B,CAII,MAAM,cAAcs0B,EAAakd,EAAS,CACtC,UAAWxxC,MAASwxC,EAChB,MAAM,KAAK,YAAYld,EAAat0B,EAAK,CAErD,CAII,MAAM,kBAAkB46C,EAAYpJ,EAAS,CACzC,UAAWxxC,MAASwxC,EAChB,MAAM,KAAK,gBAAgBoJ,EAAY56C,EAAK,CAExD,CAII,MAAM,UAAUs0B,EAAamd,EAAa,CACtC,MAAM3wC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EACrCt0B,GAAQ,gBAAgB,aAAayxC,CAAW,EAChDA,EACA3wC,GAAM,QAAQ,KAAMrG,IAAMA,GAAE,OAASg3C,CAAW,EACtD,GAAI,CAACzxC,GACD,MAAM,IAAI,aAAa,kBAAkByxC,CAAW,2BAA2B3wC,GAAM,IAAI,EAAE,EAE1Fd,GAAM,OACPA,GAAM,KAAO,KAAK,kBAAkBc,GAAOd,EAAK,GACpD,MAAMkwC,GAAK,KAAK,aAAapvC,GAAOd,EAAK,EACnCmwC,GAAO,KAAK,eAAervC,GAAOd,EAAK,EAC7C,MAAM,KAAK,eAAekwC,GAAIC,EAAI,EAClCrvC,GAAM,YAAYd,EAAK,CAC/B,CAII,MAAM,cAAc46C,EAAYnJ,EAAa,CACzC,MAAM9H,GAAO,gBAAgB,OAAOiR,CAAU,EACxCA,EACA,MAAM,KAAK,cAAcA,CAAU,EACnC56C,GAAQ,gBAAgB,aAAayxC,CAAW,EAChDA,EACA9H,GAAK,QAAQ,KAAMlvC,IAAMA,GAAE,OAASg3C,CAAW,EACrD,GAAI,CAACzxC,GACD,MAAM,IAAI,aAAa,kBAAkByxC,CAAW,0BAA0B9H,GAAK,IAAI,EAAE,EAExF3pC,GAAM,OACPA,GAAM,KAAO,KAAK,kBAAkB2pC,GAAM3pC,EAAK,GACnD,MAAMkwC,GAAK,KAAK,aAAavG,GAAM3pC,EAAK,EAClCmwC,GAAO,KAAK,mBAAmBxG,GAAM3pC,EAAK,EAChD,MAAM,KAAK,eAAekwC,GAAIC,EAAI,EAClCxG,GAAK,YAAY3pC,EAAK,CAC9B,CAII,MAAM,YAAYs0B,EAAakd,EAAS,CACpC,UAAWxxC,MAASwxC,EAChB,MAAM,KAAK,UAAUld,EAAat0B,EAAK,CAEnD,CAKI,MAAM,WAAWyhB,EAAW,CACxB,MAAM,KAAK,MAAM,kBAAkB,KAAK,WAAWA,CAAS,CAAC,EAAE,CACvE,CAII,MAAM,eAAgB,CAClB,MAAMo5B,EAAU,CAAE,EAClB,KAAK,WAAW,gBACX,OAAQ1hD,IAAaA,GAAS,MAAM,EACpC,QAASA,IAAa,CACD,CAAC,CAAC0hD,EAAQ,KAAMhkB,IAAWA,KAAW19B,GAAS,MAAM,GAEvE0hD,EAAQ,KAAK1hD,GAAS,MAAM,CAC5C,CAAS,EACD0hD,EAAQ,KAAK,KAAK,OAAO,QAAQ,QAAU,kBAAkB,EAC7D,MAAMC,EAAoBD,EACrB,IAAKnuC,IACCA,KAAS,mBAAqBA,GAAO,IAAMA,GAAO,GAC5D,EACI,KAAK,IAAI,EACRilC,GAA6B,KAAK,oBACnCA,IACD,MAAM,KAAK,iBAAkB,EACjC,GAAI,CACA,MAAM94B,GAAU,MAAM,KAAK,WAAY,EAEjC+4B,GAAuB,uIACiBkJ,CAAiB,0GACzDjJ,GAAkB,MAAM,KAAK,MAAMD,EAAoB,EAI7D,GAHA,MAAM,QAAQ,IAAIC,GAAgB,IAAKva,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,EAGhE,aAAa,iBAAiBze,GAAS,KAAK,EAAG,CAC/C,MAAMkiC,GAA0B,0JACiBD,CAAiB,IAC5DE,GAAqB,MAAM,KAAK,MAAMD,EAAuB,EACnE,MAAM,QAAQ,IAAIC,GAAmB,IAAK1jB,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,CACvF,CAIY,MAAMwa,GAAwB,0IAA0IgJ,CAAiB,+CACnL/I,GAAmB,MAAM,KAAK,MAAMD,EAAqB,EAC/D,MAAM,QAAQ,IAAIC,GAAiB,IAAKza,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,EAErE,MAAM,KAAK,cAAcwjB,CAAiB,EACrCnJ,IACD,MAAM,KAAK,kBAAmB,CAE9C,OACe1xC,GAAO,CACV,GAAI,CAEK0xC,IACD,MAAM,KAAK,oBAAqB,CAEpD,MACkC,CAAA,CACtB,MAAM1xC,EAClB,CACA,CAII,MAAM,UAAU+xC,EAAW,CAEvB,GAAI,CADa,MAAM,KAAK,SAAS,KAAK,4BAA2B,CAAE,EAEnE,MAAO,CAAE,EACRA,IACDA,EAAY,CAAE,GAElB,MAAMiJ,GAAkB,MAAM,KAAK,mBAAoB,EACjDC,GAAgB,MAAM,KAAK,iBAAkB,EAC7CC,GAAiBnJ,EAAU,SAAW,EACtC,MACAA,EACG,IAAKvwB,IAAc,KAAK,OAAO,eAAeA,EAAS,CAAC,EACxD,IAAI,CAAC,CAAE,OAAAoV,GAAQ,UAAApV,OACXoV,KACDA,GACI,KAAK,OAAO,QAAQ,QAAUqkB,IAE/B,oBAAoBrkB,EAAM,uBAAuBpV,EAAS,KACpE,EACI,KAAK,MAAM,EAad25B,GAAa,4yBAZUpJ,EAAU,SAAW,EAC5C,MACAA,EACG,IAAKvwB,IAAc,KAAK,OAAO,eAAeA,EAAS,CAAC,EACxD,IAAI,CAAC,CAAE,OAAAoV,GAAQ,UAAApV,OACXoV,KACDA,GACI,KAAK,OAAO,QAAQ,QAAUqkB,IAE/B,sBAAsBrkB,EAAM,0BAA0BpV,EAAS,KACzE,EACI,KAAK,MAAM,CAWsE,IACpFvR,GAAQ,qBAAqB,KAAK,WAAW,KAAK,6BAA6B,CAAC,oMAGzD,kBAAkB,IAAI,OAAO,kBAAkB,iBAAiB,MAAMirC,GAAiB,QAAQA,EAAc,IAAM,EAAE,GAC5IE,GAAU,MAAM,KAAK,MAAMnrC,EAAK,EAChC4iC,GAAY,MAAM,KAAK,MAAMsI,EAAU,EAC7C,OAAOC,GAAQ,IAAKnJ,IAAW,CAE3B,MAAMoJ,GAAwB,SAAS,KAAKxI,GAAU,OAAQsB,IAClDA,GAAQ,aAAkBlC,GAAO,MACrCkC,GAAQ,eAAoBlC,GAAO,MAC1C,EAAIkC,IAAYA,GAAQ,eAAkB,EACrCzK,GAAO,IAAI,KACX9S,GAASqb,GAAO,SAAcgJ,IAChC,CAAC,KAAK,OAAO,QAAQ,OACnB,OACAhJ,GAAO,OACb,OAAAvI,GAAK,SAAWsR,GAChBtR,GAAK,OAASuI,GAAO,OACrBvI,GAAK,KAAO,KAAK,OAAO,eAAeuI,GAAO,KAASrb,EAAM,EAC7D8S,GAAK,WAAauI,GAAO,MACzBvI,GAAK,aACDuI,GAAO,OAAY,kBAAkB,kBACzCvI,GAAK,QAAU2R,GAAsB,IAAK1lB,IAAe,CACrD,MAAM4b,GAAUsB,GAAU,OAAQ9yC,IACtBA,GAAM,eAAoB41B,GAAW,cACzC51B,GAAM,aAAkB41B,GAAW,YACnC51B,GAAM,kBACF41B,GAAW,eACtB,EACD,OAAO,IAAI,WAAW,CAClB,KAAM+T,GACN,KAAM/T,GAAW,gBACjB,YAAa4b,GAAQ,IAAK/2C,IAAMA,GAAE,WAAc,EAChD,SAAUm7B,GAAW,YAAiB,OACtC,MAAOA,GAAW,UAClB,WAAY,EAChC,CAAiB,CACjB,CAAa,EACM+T,EACnB,CAAS,CACT,CAII,MAAM,WAAW3Y,EAAY,CAEzB,GAAIA,GAAcA,EAAW,SAAW,EACpC,MAAO,CAAE,EAEb,MAAMkqB,EAAgB,MAAM,KAAK,iBAAkB,EAC7CD,GAAkB,MAAM,KAAK,mBAAoB,EACjD5I,GAAW,CAAE,EACnB,GAAI,CAACrhB,EAEDqhB,GAAS,KAAK,GAAI,MAAM,KAAK,MADX,yLAC0B,CAAE,MAE7C,CAOD,MAAMkJ,GAAY,iMANMvqB,EACnB,IAAKvP,IAAc,KAAK,OAAO,eAAeA,EAAS,CAAC,EACxD,IAAI,CAAC,CAAE,OAAAoV,GAAQ,UAAApV,MACT,sBAAsBoV,IAAUqkB,CAAa,yBAAyBz5B,EAAS,IACzF,EACI,KAAK,MAAM,EAGhB4wB,GAAS,KAAK,GAAI,MAAM,KAAK,MAAMkJ,EAAS,CAAE,CAC1D,CAEQ,GAAIlJ,GAAS,SAAW,EACpB,MAAO,CAAE,EAYb,MAAMmJ,GAAa,6uBALMnJ,GACpB,IAAI,CAAC,CAAE,aAAAoJ,GAAc,WAAAC,MACf,sBAAsBD,EAAY,yBAAyBC,EAAU,IAC/E,EACI,KAAK,MAAM,EAaVC,GAAuBtJ,GACxB,IAAI,CAAC,CAAE,aAAAoJ,GAAc,WAAAC,MACf,sBAAsBD,EAAY,0BAA0BC,EAAU,IAChF,EACI,KAAK,MAAM,EACVE,GAAiB,ioBAOuBD,EAAoB,IAC5DP,GAAa,o4BAWwDO,EAAoB,IACzFE,GAAuBxJ,GACxB,IAAI,CAAC,CAAE,aAAAoJ,GAAc,WAAAC,MACf,sBAAsBD,EAAY,2BAA2BC,EAAU,IACjF,EACI,KAAK,MAAM,EAEVI,GAD0B,MAAM,KAAK,+BAAgC,EAErE,mCACA,GACArG,GAAiB,+wCAYkBoG,EAAoB,qLAGOC,EAAoB,mLAGlF,CAACjJ,GAAWkJ,GAAejJ,GAAW9G,IAAkB,MAAM,QAAQ,IAAI,CAC5E,KAAK,MAAMwP,EAAU,EACrB,KAAK,MAAMI,EAAc,EACzB,KAAK,MAAMR,EAAU,EACrB,KAAK,MAAM3F,EAAc,CACrC,CAAS,EAED,OAAO,QAAQ,IAAIpD,GAAS,IAAI,MAAOM,IAAY,CAC/C,MAAM7xC,GAAQ,IAAI,MACZk7C,GAAmB,CAACC,GAAUplD,KACzBolD,GAASplD,EAAG,IAAMqkD,IACpB,CAAC,KAAK,OAAO,QAAQ,QAClB,KAAK,OAAO,QAAQ,SAAWA,GACjC,OACAe,GAASplD,EAAG,EAGhBggC,GAASmlB,GAAiBrJ,GAAS,cAAc,EACvD7xC,GAAM,SAAWm6C,GACjBn6C,GAAM,OAAS6xC,GAAQ,aACvB7xC,GAAM,QAAU6xC,GAAQ,cACxB7xC,GAAM,KAAO,KAAK,OAAO,eAAe6xC,GAAQ,WAAe9b,EAAM,EAErE/1B,GAAM,QAAU,MAAM,QAAQ,IAAI+xC,GAC7B,OAAQO,IAAaA,GAAS,aAC/BT,GAAQ,YACRS,GAAS,eACLT,GAAQ,YAAe,EAC1B,IAAI,MAAOS,IAAa,CACzB,MAAM8I,GAAoBH,GAAc,OAAQI,IACpCA,GAAa,aACjB/I,GAAS,YACT+I,GAAa,eACT/I,GAAS,cACb+I,GAAa,cACT/I,GAAS,WACpB,EACK9J,GAAc,IAAI,YAGxB,GAFAA,GAAY,KAAO8J,GAAS,YAC5B9J,GAAY,KAAO8J,GAAS,QAAW,YAAa,EAChD9J,GAAY,OAAS,WACrBA,GAAY,OAAS,aACrBA,GAAY,OAAS,WACrBA,GAAY,OAAS,QAAS,CAC9B,IAAI8S,GAAmBhJ,GAAS,kBAC5BiJ,GAAejJ,GAAS,cAC5B,GAAIA,GAAS,YAAiB,QAAS,CACnC,MAAMkJ,GAAclJ,GAAS,YAAe,MAAM,oCAAoC,EAClFkJ,KACAF,GAAmB,CAACE,GAAY,CAAC,EACjCD,GAAe,CAACC,GAAY,CAAC,EAEzD,CAGwBF,KAAqB,MACrB,CAAC,KAAK,yBAAyBt7C,GAAOwoC,GAAa8S,EAAgB,EACnE9S,GAAY,UAAY8S,GAEnBC,KAAiB,MACtB,CAAC,KAAK,qBAAqBv7C,GAAOwoC,GAAa+S,EAAY,IAC3D/S,GAAY,UAAY,QAExB+S,KAAiB,MACjB,CAAC,KAAK,qBAAqBv7C,GAAOwoC,GAAa+S,EAAY,EAC3D/S,GAAY,MAAQ+S,GAEfD,KAAqB,MAC1B,CAAC,KAAK,yBAAyBt7C,GAAOwoC,GAAa8S,EAAgB,IACnE9S,GAAY,MAAQ,OAE5C,CAcgB,IAbIA,GAAY,OAAS,YACrBA,GAAY,OAAS,0BACrBA,GAAY,OAAS,uBACrBA,GAAY,OACR,+BACJA,GAAY,OAAS,8BACrBA,GAAY,UACP,KAAK,yBAAyBxoC,GAAOwoC,GAAa8J,GAAS,kBAAqB,EAE3E,OADAA,GAAS,oBAKnBA,GAAS,YAAiB,gBAC1BA,GAAS,YAAiB,QAAS,CACnC,KAAM,CAAE,KAAA1mC,EAAI,EAAK,MAAM,KAAK,uBAAuB5L,GAAOwoC,EAAW,EAG/DwP,GADgB,KAAK,cAAch4C,GAAOwoC,GAAa,GAAO,EAAI,IACrC58B,GAAOA,GAAO,OAE3CqB,GAAM,uMAGkB4kC,GAAQ,YAAe,0BAA0BmG,IAAYpsC,EAAI,IACzF0Y,GAAU,MAAM,KAAK,MAAMrX,EAAG,EAMpC,GALIqX,GAAQ,SACRkkB,GAAY,KAAO,OACnBA,GAAY,KAAOlkB,GAAQ,IAAK/oB,IAAWA,GAAO,KAAQ,EAC1DitC,GAAY,SAAWwP,IAEvB1F,GAAS,YAAiB,QAAS,CACnC9J,GAAY,QAAU,GACtB,MAAMt8B,GAAOs8B,GAAY,KAAK,QAAQ,KAAM,EAAE,EAC9CA,GAAY,KACR,KAAK,WAAW,OAAO,cAAc,CACjC,KAAMt8B,EACtC,CAA6B,CAC7B,CACA,CACgB,GAAIs8B,GAAY,OAAS,YACrBA,GAAY,OAAS,YAAa,CAClC,MAAMv7B,GAAM,0FAEFu7B,GAAY,IAAI,gDACbA,GAAY,IAAI,0CAEC8J,GAAS,WAAc,2BAC5BA,GAAS,YAAe,yBAC1BA,GAAS,UAAa,IACvChuB,GAAU,MAAM,KAAK,MAAMrX,EAAG,EAChCqX,GAAQ,OAAS,IACjBkkB,GAAY,mBACRlkB,GAAQ,CAAC,EAAE,KACfkkB,GAAY,KAAOlkB,GAAQ,CAAC,EAAE,KAEtD,CAEgB,GAAI,KAAK,OAAO,sBAAsB,QAAQkkB,GAAY,IAAI,IAAM,GAAI,CACpE,IAAI9jC,GACJ,GAAI8jC,GAAY,QAAS,CACrB,MAAMvxB,GAAQ,YAAY,KAAKq7B,GAAS,WAAc,EACtD5tC,GAASuS,GAAQA,GAAM,CAAC,EAAI,MACpD,MAC6Bq7B,GAAS,2BACd5tC,GACI4tC,GAAS,yBAA4B,SAAU,GAEnD5tC,KACA8jC,GAAY,OACP,KAAK,sBAAsBxoC,GAAOwoC,GAAa9jC,EAAM,EAEhD,GADAA,GAGlC,CACgB8jC,GAAY,WACR8J,GAAS,cAAmB,MAChC,MAAMmJ,GAAoBL,GAAkB,KAAMtmB,IAAeA,GAAW,kBAAuB,SAAS,EAC5G,GAAI2mB,GAAmB,CACnBjT,GAAY,UAAY,GAWxB,MAAM1U,GAT4BmnB,GAAc,OAAQnmB,IAAeA,GAAW,aAC9Ewd,GAAS,YACTxd,GAAW,eACPwd,GAAS,cACbxd,GAAW,cACPwd,GAAS,aACbxd,GAAW,kBACP,SAAS,EAE6B,IAAKA,IAAeA,GAAW,WAAc,EAC3FhB,GAAY,KAAKwe,GAAS,WAAc,EAExC,MAAMwG,GAAS,KAAK,WAAW,eAAe,eAAe94C,GAAO8zB,EAAW,EAE3E2nB,GAAkB,kBAClB3C,KACAtQ,GAAY,yBACRiT,GAAkB,gBAE9C,CACgB,MAAMvL,GAAoBkL,GAAkB,OAAQtmB,IAAeA,GAAW,kBAAuB,QAAQ,EACvG4mB,GAAwBxL,GAAkB,MAAOlb,IAC5CimB,GAAc,KAAMI,IAAiBA,GAAa,kBACrD,UACAA,GAAa,kBACTrmB,GAAiB,iBACrBqmB,GAAa,cACT/I,GAAS,WAAc,CAClC,EAID,GAHA9J,GAAY,SACR0H,GAAkB,OAAS,GACvB,CAACwL,GACLpJ,GAAS,cAAgB,MAEzB9J,GAAY,YAAc,GAC1BA,GAAY,mBAAqB,WACjCA,GAAY,kBACR8J,GAAS,4BAERA,GAAS,iBAAsB,MACpCA,GAAS,iBAAsB,OAAW,CAC1C,MAAMqJ,GAAoB,YAAY,KAAK,kBAAkB37C,GAAOsyC,GAAS,WAAc,CAAC,eACtFsJ,GAAoB,YAAY,KAAK,kBAAkB57C,GAAOsyC,GAAS,WAAc,CAAC,eACtFuJ,GAAuBvJ,GAAS,eAAkB,QAAQ,KAAM,EAAE,EACpEuJ,KACAF,IACAE,KAAyBD,IACzBpT,GAAY,YAAc,GAC1BA,GAAY,mBAAqB,aAE5B8J,GAAS,iBACd,qBACA,yBAAyB,KAAKA,GAAS,cAAiB,EACpD9J,GAAY,OAAS,QACrBA,GAAY,YAAc,GAC1BA,GAAY,mBAAqB,QAGjCA,GAAY,QACR8J,GAAS,eAGZA,GAAS,iBAAsB,SACpCA,GAAS,eAAkB,QAAQ,aAAa,IAAM,GACtD9J,GAAY,QACR8J,GAAS,gBAGb9J,GAAY,QAAU8J,GAAS,eAAkB,QAAQ,oBAAqB,EAAE,EAChF9J,GAAY,QACRA,GAAY,QAAQ,QAAQ,YAAa,MAAM,EAE3E,CACgB,GAAI8J,GAAS,eAAoB,UAC7BA,GAAS,sBAA0B,CAEnC9J,GAAY,cAAgB,SAE5B,MAAM+J,GAAoB,KAAK,yBAAyB,CACpD,SAAU4H,GACV,OAAQtI,GAAQ,aAChB,MAAOA,GAAQ,WACf,KAAM,kBAAkB,iBACxB,KAAMrJ,GAAY,IAC1C,CAAqB,EACKlkB,GAAU,MAAM,KAAK,MAAMiuB,GAAkB,MAAOA,GAAkB,UAAU,EAClFjuB,GAAQ,CAAC,GAAKA,GAAQ,CAAC,EAAE,MACzBkkB,GAAY,aAAelkB,GAAQ,CAAC,EAAE,MAGtCkkB,GAAY,aAAe,EAEnD,CACgB,OAAAA,GAAY,QAAU8J,GAAS,YACzBA,GAAS,YACT,OACFA,GAAS,qBACT9J,GAAY,QACR8J,GAAS,oBACbA,GAAS,iBACT9J,GAAY,UACR8J,GAAS,gBACV9J,EACvB,CAAa,CAAC,EAEF,MAAMsT,GAAyB,SAAS,KAAKb,GAAc,OAAQI,IACvDA,GAAa,aACjBxJ,GAAQ,YACRwJ,GAAa,eACTxJ,GAAQ,cACZwJ,GAAa,kBAAuB,QAC3C,EAAIA,IAAiBA,GAAa,eAAkB,EACrDr7C,GAAM,QAAU87C,GAAuB,IAAKhnB,IAAe,CACvD,MAAMinB,GAAUd,GAAc,OAAQe,IAAQA,GAAI,kBAC9ClnB,GAAW,eAAkB,EACjC,OAAO,IAAI,YAAY,CACnB,KAAMA,GAAW,gBACjB,YAAainB,GAAQ,IAAK1e,IAAMA,GAAE,WAAc,EAChD,WAAYvI,GAAW,WACjBA,GAAW,SACX,MAC1B,CAAiB,CACjB,CAAa,EAED,MAAMmnB,GAAwB,SAAS,KAAKhB,GAAc,OAAQI,IACtDA,GAAa,aACjBxJ,GAAQ,YACRwJ,GAAa,eACTxJ,GAAQ,cACZwJ,GAAa,kBAAuB,OAC3C,EAAIA,IAAiBA,GAAa,eAAkB,EACrDr7C,GAAM,OAASi8C,GAAsB,IAAKnnB,IAAe,CACrD,MAAMonB,GAASjB,GAAc,OAAQe,IAAQA,GAAI,kBAC7ClnB,GAAW,eAAkB,EACjC,OAAO,IAAI,WAAW,CAClB,KAAMA,GAAW,gBACjB,YAAaonB,GAAO,IAAKt4C,IAAMA,GAAE,WAAc,EAC/C,WAAYkxB,GAAW,WAAc,QAAQ,4BAA6B,IAAI,CAClG,CAAiB,CACjB,CAAa,EAED,MAAMqnB,GAA4B,SAAS,KAAKlB,GAAc,OAAQI,IAC1DA,GAAa,aACjBxJ,GAAQ,YACRwJ,GAAa,eACTxJ,GAAQ,cACZwJ,GAAa,kBAAuB,SAC3C,EAAIA,IAAiBA,GAAa,eAAkB,EACrDr7C,GAAM,WAAam8C,GAA0B,IAAKrnB,IACvC,IAAI,eAAe,CACtB,KAAMA,GAAW,gBACjB,WAAYA,GAAW,WAAc,UAAU,CAAC,CACpE,CAAiB,CACJ,EAED,MAAM+d,GAA6B,SAAS,KAAK3H,GAAc,OAAQ5C,IAC3DA,GAAa,aACjBuJ,GAAQ,YACRvJ,GAAa,eACTuJ,GAAQ,YACnB,EAAIvJ,IAAiBA,GAAa,eAAkB,EACrDtoC,GAAM,YAAc6yC,GAA2B,IAAKvK,IAAiB,CACjE,MAAMkI,GAActF,GAAc,OAAQkR,IAASA,GAAK,kBACpD9T,GAAa,eAAkB,EAE7BvS,GAASmlB,GAAiB5S,GAAc,yBAAyB,EACjE+T,GAAsB,KAAK,OAAO,eAAe/T,GAAa,sBAA0BvS,EAAM,EACpG,OAAO,IAAI,gBAAgB,CACvB,KAAMuS,GAAa,gBACnB,YAAakI,GAAY,IAAK4L,IAASA,GAAK,WAAc,EAC1D,iBAAkB9T,GAAa,wBAC/B,oBAAqB+T,GACrB,sBAAuB7L,GAAY,IAAK4L,IAASA,GAAK,sBAAyB,EAC/E,SAAU9T,GAAa,UACvB,SAAUA,GAAa,UACvB,WAAYA,GAAa,WACnBA,GAAa,SACb,MAC1B,CAAiB,CACjB,CAAa,EAED,MAAMkS,GAAwB,SAAS,KAAKxI,GAAU,OAAQsB,IAClDA,GAAQ,aAAkBzB,GAAQ,YACtCyB,GAAQ,eAAoBzB,GAAQ,YAC3C,EAAIyB,IAAYA,GAAQ,eAAkB,EAC3C,OAAAtzC,GAAM,QAAUw6C,GAAsB,IAAK1lB,IAAe,CACtD,MAAM4b,GAAUsB,GAAU,OAAQ9yC,IACtBA,GAAM,eACV41B,GAAW,cACX51B,GAAM,aAAkB41B,GAAW,YACnC51B,GAAM,kBACF41B,GAAW,eACtB,EACD,OAAO,IAAI,WAAW,CAClB,MAAO90B,GACP,KAAM80B,GAAW,gBACjB,YAAa4b,GAAQ,IAAK/2C,IAAMA,GAAE,WAAc,EAChD,SAAUm7B,GAAW,YAAiB,OACtC,MAAOA,GAAW,UAClB,UAAWA,GAAW,aAAkB,OACxC,WAAY,EAChC,CAAiB,CACjB,CAAa,EACM90B,EACnB,CAAS,CAAC,CACV,CAII,eAAeA,EAAOwuC,EAAmB,CACrC,MAAM+F,GAAoBv0C,EAAM,QAC3B,IAAK+N,IAAW,KAAK,qBAAqB/N,EAAO+N,EAAM,CAAC,EACxD,KAAK,IAAI,EACd,IAAId,GAAM,gBAAgB,KAAK,WAAWjN,CAAK,CAAC,KAAKu0C,EAAiB,GAYtE,GAXAv0C,EAAM,QACD,OAAQ+N,IAAWA,GAAO,QAAQ,EAClC,QAASA,IAAW,CACC/N,EAAM,QAAQ,KAAMqB,IAAWA,GAAO,YAAY,SAAW,GAC/EA,GAAO,YAAY,CAAC,IAAM0M,GAAO,IAAI,GAErC/N,EAAM,QAAQ,KAAK,IAAI,YAAY,CAC/B,KAAM,KAAK,WAAW,eAAe,qBAAqBA,EAAO,CAAC+N,GAAO,IAAI,CAAC,EAC9E,YAAa,CAACA,GAAO,IAAI,CAC7C,CAAiB,CAAC,CAClB,CAAS,EACG/N,EAAM,QAAQ,OAAS,EAAG,CAC1B,MAAMy0C,GAAaz0C,EAAM,QACpB,IAAKqB,IAAW,CACjB,MAAMuuC,GAAavuC,GAAO,KACpBA,GAAO,KACP,KAAK,WAAW,eAAe,qBAAqBrB,EAAOqB,GAAO,WAAW,EAC7EyyB,GAAczyB,GAAO,YACtB,IAAKgd,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd,IAAIyW,GAAa,eAAe8a,EAAU,aAAa9b,EAAW,IAClE,OAAIzyB,GAAO,aACPyzB,IAAc,eAAezzB,GAAO,UAAU,IAC3CyzB,EACV,CAAA,EACI,KAAK,IAAI,EACd7nB,IAAO,KAAKwnC,EAAU,EAClC,CACQ,GAAIz0C,EAAM,OAAO,OAAS,EAAG,CACzB,MAAM00C,GAAY10C,EAAM,OACnB,IAAKsB,IAIC,eAHWA,GAAM,KAClBA,GAAM,KACN,KAAK,WAAW,eAAe,oBAAoBtB,EAAOsB,GAAM,UAAU,CACjD,YAAYA,GAAM,UAAU,GAC9D,EACI,KAAK,IAAI,EACd2L,IAAO,KAAKynC,EAAS,EACjC,CACQ,GAAI10C,EAAM,WAAW,OAAS,EAAG,CAC7B,MAAMs8C,GAAgBt8C,EAAM,WACvB,IAAKuB,IAIC,eAHeA,GAAU,KAC1BA,GAAU,KACV,KAAK,WAAW,eAAe,wBAAwBvB,EAAOuB,GAAU,UAAU,CACrD,aAAaA,GAAU,UAAU,EACvE,EACI,KAAK,IAAI,EACd0L,IAAO,KAAKqvC,EAAa,EACrC,CACQ,GAAIt8C,EAAM,YAAY,OAAS,GAAKwuC,EAAmB,CACnD,MAAMmG,GAAiB30C,EAAM,YACxB,IAAK21B,IAAO,CACb,MAAM7B,GAAc6B,GAAG,YAClB,IAAKtX,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACTsX,GAAG,OACJA,GAAG,KAAO,KAAK,WAAW,eAAe,eAAe31B,EAAO21B,GAAG,YAAa,KAAK,aAAaA,EAAE,EAAGA,GAAG,qBAAqB,GAClI,MAAMod,GAAwBpd,GAAG,sBAC5B,IAAKtX,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd,IAAIyW,GAAa,eAAea,GAAG,IAAI,kBAAkB7B,EAAW,gBAAgB,KAAK,WAAW,KAAK,aAAa6B,EAAE,CAAC,CAAC,KAAKod,EAAqB,IACpJ,OAAIpd,GAAG,WACHb,IAAc,cAAca,GAAG,QAAQ,IACvCA,GAAG,WACHb,IAAc,cAAca,GAAG,QAAQ,IACvCA,GAAG,aACHb,IAAc,eAAea,GAAG,UAAU,IACvCb,EACV,CAAA,EACI,KAAK,IAAI,EACd7nB,IAAO,KAAK0nC,EAAc,EACtC,CACQ,MAAM70B,GAAiB9f,EAAM,QAAQ,OAAQ+N,IAAWA,GAAO,SAAS,EACxE,GAAI+R,GAAe,OAAS,EAAG,CAC3B,MAAMy8B,GAAiBz8B,GAAe,CAAC,EAAE,yBACnCA,GAAe,CAAC,EAAE,yBAClB,KAAK,WAAW,eAAe,eAAe9f,EAAO8f,GAAe,IAAK/R,IAAWA,GAAO,IAAI,CAAC,EAChG+lB,GAAchU,GACf,IAAK/R,IAAW,IAAIA,GAAO,IAAI,GAAG,EAClC,KAAK,IAAI,EACdd,IAAO,iBAAiBsvC,EAAc,kBAAkBzoB,EAAW,GAC/E,CACQ,OAAA7mB,IAAO,IACPjN,EAAM,QACD,OAAQizC,IAAOA,GAAG,OAAO,EACzB,QAASA,IAAQhmC,IAAO,uBAAuB,KAAK,WAAWjN,CAAK,CAAC,KAAKizC,GAAG,IAAI,QAAQ,KAAK,cAAcA,GAAG,OAAO,CAAC,EAAG,EACxH,IAAI,MAAMhmC,EAAG,CAC5B,CAII,MAAM,YAAa,CAEf,OADe,MAAM,KAAK,MAAM,kBAAkB,GACpC,CAAC,EAAE,QAAW,QAAQ,2BAA4B,IAAI,CAC5E,CAII,aAAauvC,EAAa,CACtB,OAAO,IAAI,MAAM,cAAc,KAAK,WAAWA,CAAW,CAAC,EAAE,CACrE,CACI,cAAc3T,EAAM,CAChB,MAAM4T,EAAqB5T,EAAK,aAAe,gBAAkB,GAC3DgE,GAAW,KAAK,WAAWhE,CAAI,EACrC,OAAI,OAAOA,EAAK,YAAe,SACpB,IAAI,MAAM,UAAU4T,CAAkB,QAAQ5P,EAAQ,OAAOhE,EAAK,UAAU,EAAE,EAG9E,IAAI,MAAM,UAAU4T,CAAkB,QAAQ5P,EAAQ,OAAOhE,EAC/D,WAAW,KAAK,UAAU,EAC1B,SAAQ,CAAE,EAAE,CAE7B,CACI,MAAM,wBAAwBA,EAAM,CAChC,MAAMuR,EAAgB,MAAM,KAAK,iBAAkB,EACnD,GAAI,CAAE,OAAArkB,GAAQ,UAAWnqB,EAAI,EAAK,KAAK,OAAO,eAAei9B,CAAI,EAC5D9S,KACDA,GAASqkB,GAEb,MAAMluC,GAAO28B,EAAK,aACZ,kBAAkB,kBAClB,kBAAkB,KAClBrqB,GAAa,OAAOqqB,EAAK,YAAe,SACxCA,EAAK,WAAW,KAAI,EACpBA,EAAK,WAAW,KAAK,UAAU,EAAE,SAAU,EACjD,OAAO,KAAK,yBAAyB,CACjC,KAAA38B,GACA,OAAA6pB,GACA,KAAAnqB,GACA,MAAO4S,EACnB,CAAS,CACT,CAII,YAAYqqB,EAAM,CACd,MAAM4T,EAAqB5T,EAAK,aAAe,gBAAkB,GACjE,OAAO,IAAI,MAAM,QAAQ4T,CAAkB,QAAQ,KAAK,WAAW5T,CAAI,CAAC,EAAE,CAClF,CAII,MAAM,wBAAwBA,EAAM,CAChC,MAAMuR,EAAgB,MAAM,KAAK,iBAAkB,EACnD,GAAI,CAAE,OAAArkB,GAAQ,UAAWnqB,EAAI,EAAK,KAAK,OAAO,eAAei9B,CAAI,EAC5D9S,KACDA,GAASqkB,GAEb,MAAMluC,GAAO28B,EAAK,aACZ,kBAAkB,kBAClB,kBAAkB,KACxB,OAAO,KAAK,yBAAyB,CAAE,KAAA38B,GAAM,OAAA6pB,GAAQ,KAAAnqB,EAAI,CAAE,CACnE,CAII,MAAM,cAAc8wC,EAAa,CAC7B,MAAMC,EAAmB,mQAGMD,CAAW,0CACpC/T,GAAc,MAAM,KAAK,MAAMgU,CAAgB,EACrD,MAAM,QAAQ,IAAIhU,GAAY,IAAKnS,IAAM,KAAK,MAAMA,GAAE,KAAQ,CAAC,CAAC,CACxE,CAII,MAAM,YAAYx2B,EAAO+N,EAAQ,CAC7B,GAAI,CAAE,OAAAgoB,EAAM,EAAK,KAAK,OAAO,eAAe/1B,CAAK,EAC5C+1B,KACDA,GAAS,MAAM,KAAK,iBAAkB,GAE1C,MAAMiiB,GAAW,KAAK,cAAch4C,EAAO+N,EAAQ,GAAO,EAAI,EACxDd,GAAM,iJAEkB8oB,EAAM,0BAA0BiiB,EAAQ,IAEtE,MAAO,GADQ,MAAM,KAAK,MAAM/qC,EAAG,GACrB,MACtB,CAII,kBAAkBjN,EAAO+N,EAAQiqC,GAAU,CAClCA,KACDA,GAAW,KAAK,cAAch4C,EAAO+N,CAAM,GAC/C,MAAMmY,GAAanY,EACd,KAAK,IAAK/X,IAAU,IAAIA,GAAM,QAAQ,IAAK,IAAI,CAAC,GAAG,EACnD,KAAK,IAAI,EACd,OAAO,IAAI,MAAM,eAAegiD,EAAQ,YAAY9xB,EAAU,GAAG,CACzE,CAII,gBAAgBlmB,EAAO+N,EAAQiqC,GAAU,CACrC,OAAKA,KACDA,GAAW,KAAK,cAAch4C,EAAO+N,CAAM,GACxC,IAAI,MAAM,aAAaiqC,EAAQ,EAAE,CAChD,CAII,eAAeh4C,EAAOd,EAAO,CACzB,MAAMif,GAAUjf,EAAM,YACjB,IAAKmf,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd,OAAO,IAAI,MAAM,UAAUnf,EAAM,SAAW,UAAY,EAAE,QAAQA,EAAM,aAAe,gBAAkB,EAAE,KAAKA,EAAM,IAAI,QAAQ,KAAK,WAAWc,CAAK,CAAC,IAAId,EAAM,UAAY,cAAgB,EAAE,IAAIif,EAAO,KAAKjf,EAAM,MAAQ,SAAWA,EAAM,MAAQ,EAAE,EAAE,CACnQ,CAII,mBAAmB2pC,EAAM3pC,EAAO,CAC5B,MAAMif,GAAUjf,EAAM,YACjB,IAAKmf,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd,OAAO,IAAI,MAAM,UAAUnf,EAAM,SAAW,UAAY,EAAE,UAAUA,EAAM,IAAI,QAAQ,KAAK,WAAW2pC,CAAI,CAAC,KAAK1qB,EAAO,KAAKjf,EAAM,MAAQ,SAAWA,EAAM,MAAQ,EAAE,EAAE,CAC/K,CAII,aAAac,EAAO2wC,EAAa,CAC7B,MAAMb,GAAY,gBAAgB,aAAaa,CAAW,EACpDA,EAAY,KACZA,EACAiM,GAAa,gBAAgB,aAAajM,CAAW,EACrDA,EAAY,aACZ,GACA,CAAE,OAAA5a,EAAM,EAAK,KAAK,OAAO,eAAe/1B,CAAK,EACnD,OAAO+1B,GACD,IAAI,MAAM,cAAc6mB,GAAa,gBAAkB,EAAE,IAAI7mB,EAAM,MAAM+Z,EAAS,GAAG,EACrF,IAAI,MAAM,cAAc8M,GAAa,gBAAkB,EAAE,IAAI9M,EAAS,GAAG,CACvF,CAII,oBAAoB9vC,EAAO8zB,EAAa8lB,GAAgB,CACpD,MAAM2C,GAAiB3C,IAEjB,KAAK,WAAW,eAAe,eAAe55C,EAAO8zB,CAAW,EAChE+lB,GAAoB/lB,EACrB,IAAKzV,IAAe,IAAIA,EAAU,GAAG,EACrC,KAAK,IAAI,EACd,OAAO,IAAI,MAAM,eAAe,KAAK,WAAWre,CAAK,CAAC,oBAAoBu8C,EAAc,kBAAkB1C,EAAiB,GAAG,CACtI,CAII,kBAAkB75C,EAAO,CACrB,GAAI,CAACA,EAAM,eAAe,OACtB,MAAM,IAAI,aAAa,SAASA,CAAK,uBAAuB,EAChE,MAAM8zB,EAAc9zB,EAAM,eAAe,IAAK+N,IAAWA,GAAO,IAAI,EAC9D6rC,GAAiB55C,EAAM,eAAe,CAAC,EAAE,yBACzCu8C,GAAiB3C,IAEjB,KAAK,WAAW,eAAe,eAAe55C,EAAO8zB,CAAW,EACtE,OAAO,IAAI,MAAM,eAAe,KAAK,WAAW9zB,CAAK,CAAC,qBAAqBu8C,EAAc,GAAG,CACpG,CAII,0BAA0Bv8C,EAAOg1B,EAAkB,CAC/C,MAAMlB,GAAckB,EAAiB,YAChC,IAAKjnB,IAAW,IAAMA,GAAS,GAAG,EAClC,KAAK,IAAI,EACd,IAAId,GAAM,eAAe,KAAK,WAAWjN,CAAK,CAAC,oBAAoBg1B,EAAiB,IAAI,aAAalB,EAAW,IAChH,OAAIkB,EAAiB,aACjB/nB,IAAO,eAAe+nB,EAAiB,UAAU,IAC9C,IAAI,MAAM/nB,EAAG,CAC5B,CAII,wBAAwBjN,EAAOmwC,EAAc,CACzC,MAAMP,GAAa,gBAAgB,cAAcO,CAAY,EACvDA,EAAa,KACbA,EACN,OAAO,IAAI,MAAM,eAAe,KAAK,WAAWnwC,CAAK,CAAC,qBAAqB4vC,EAAU,GAAG,CAChG,CAII,yBAAyB5vC,EAAOo1B,EAAiB,CAC7C,OAAO,IAAI,MAAM,eAAe,KAAK,WAAWp1B,CAAK,CAAC,oBAAoBo1B,EAAgB,IAAI,YAAYA,EAAgB,UAAU,GAAG,CAC/I,CAII,uBAAuBp1B,EAAOqwC,EAAa,CACvC,MAAMwM,GAAY,gBAAgB,aAAaxM,CAAW,EACpDA,EAAY,KACZA,EACN,OAAO,IAAI,MAAM,eAAe,KAAK,WAAWrwC,CAAK,CAAC,qBAAqB68C,EAAS,GAAG,CAC/F,CAII,6BAA6B78C,EAAOu1B,EAAqB,CACrD,OAAO,IAAI,MAAM,eAAe,KAAK,WAAWv1B,CAAK,CAAC,oBAAoBu1B,EAAoB,IAAI,aAAaA,EAAoB,UAAU,EAAE,CACvJ,CAII,2BAA2Bv1B,EAAOuwC,EAAiB,CAC/C,MAAMuM,GAAgB,gBAAgB,iBAAiBvM,CAAe,EAChEA,EAAgB,KAChBA,EACN,OAAO,IAAI,MAAM,eAAe,KAAK,WAAWvwC,CAAK,CAAC,qBAAqB88C,EAAa,GAAG,CACnG,CAII,oBAAoB98C,EAAO60B,EAAY,CACnC,MAAMf,GAAce,EAAW,YAC1B,IAAK9mB,IAAW,IAAMA,GAAS,GAAG,EAClC,KAAK,IAAI,EACRglC,GAAwBle,EAAW,sBACpC,IAAK9mB,IAAW,IAAMA,GAAS,GAAG,EAClC,KAAK,GAAG,EACb,IAAId,GAAM,eAAe,KAAK,WAAWjN,CAAK,CAAC,oBAAoB60B,EAAW,IAAI,kBAAkBf,EAAW,gBAC7F,KAAK,WAAW,KAAK,aAAae,CAAU,CAAC,CAAC,IAAIke,EAAqB,IACzF,OAAIle,EAAW,WACX5nB,IAAO,cAAc4nB,EAAW,QAAQ,IACxCA,EAAW,WACX5nB,IAAO,cAAc4nB,EAAW,QAAQ,IACxCA,EAAW,aACX5nB,IAAO,eAAe4nB,EAAW,UAAU,IACxC,IAAI,MAAM5nB,EAAG,CAC5B,CAII,kBAAkBjN,EAAOywC,EAAkB,CACvC,MAAMZ,GAAiB,gBAAgB,kBAAkBY,CAAgB,EACnEA,EAAiB,KACjBA,EACN,OAAO,IAAI,MAAM,eAAe,KAAK,WAAWzwC,CAAK,CAAC,qBAAqB6vC,EAAc,GAAG,CACpG,CAII,kBAAkB7vC,EAAOgwC,EAAc,CACnC,KAAM,CAAE,UAAArvB,EAAS,EAAK,KAAK,OAAO,eAAe3gB,CAAK,EAChDqe,GAAa,gBAAgB,cAAc2xB,CAAY,EACvDA,EAAa,KACbA,EACN,IAAI+M,GAAU,GAAGp8B,EAAS,IAAItC,EAAU,OACxC,OAAI0+B,GAAQ,OAAS,KAAK,WAAW,OAAO,iBAExCA,GAAU,GAAGp8B,GAAU,UAAU,EAAG,EAAE,CAAC,IAAItC,GAAW,UAAU,EAAG,KAAK,IAAI,GAAI,GAAKre,EAAM,KAAK,OAAS,CAAC,CAAC,CAAC,QAEzG+8C,EACf,CACI,kBAAkB/8C,EAAOgwC,EAAc,CACnC,KAAM,CAAE,OAAAja,EAAM,EAAK,KAAK,OAAO,eAAe/1B,CAAK,EACnD,OAAO+1B,GACD,GAAGA,EAAM,IAAI,KAAK,kBAAkB/1B,EAAOgwC,CAAY,CAAC,GACxD,KAAK,kBAAkBhwC,EAAOgwC,CAAY,CACxD,CAII,cAAchwC,EAAO+N,EAAQivC,GAAa,GAAM1H,GAAe2H,GAAO,CAClE,KAAM,CAAE,OAAAlnB,GAAQ,UAAApV,EAAW,EAAG,KAAK,OAAO,eAAe3gB,CAAK,EAC9D,IAAIg4C,GAAWjqC,EAAO,SAChBA,EAAO,SACP,GAAG4S,EAAS,IAAI5S,EAAO,KAAK,YAAa,CAAA,QAC/C,OAAIgoB,IAAUinB,KACVhF,GAAW,GAAGjiB,EAAM,IAAIiiB,EAAQ,IAChCiF,KACAjF,GAAWA,GAAW,QACnBA,GACF,MAAM,GAAG,EACT,IAAKr+C,IACC27C,GAAgB37C,GAAI,IAAIA,EAAC,GACnC,EACI,KAAK,GAAG,CACrB,CACI,MAAM,uBAAuBqG,EAAO+N,EAAQ,CACxC,GAAI,CAAE,OAAAgoB,GAAQ,UAAWnqB,EAAI,EAAK,KAAK,OAAO,eAAe5L,CAAK,EAC7D+1B,KACDA,GAAS,MAAM,KAAK,iBAAkB,GAE1C,MAAMx6B,GAAS,MAAM,KAAK,MAAM,+FACmCw6B,EAAM,yBAAyBnqB,EAAI,wBAAwBmC,EAAO,IAAI,GAAG,EAM5I,IAAImvC,GAAU3hD,GAAO,CAAC,EAAE,SACxB,OAAI2hD,GAAQ,QAAQ,GAAG,IAAM,IACzBA,GAAUA,GAAQ,OAAO,EAAGA,GAAQ,MAAM,GAEvC,CACH,OAAQ3hD,GAAO,CAAC,EAAE,WAClB,KAAM2hD,EACT,CACT,CAII,cAAcngC,EAAS,CACnB,MAAI,CAACA,GAAWA,EAAQ,SAAW,EACxB,QAEXA,EAAUA,EAAQ,QAAQ,KAAM,IAAI,EAAE,QAAQ,UAAW,EAAE,EACpD,IAAIA,CAAO,IAC1B,CAII,WAAWlnB,EAAQ,CACf,KAAM,CAAE,OAAAkgC,EAAQ,UAAApV,EAAW,EAAG,KAAK,OAAO,eAAe9qB,CAAM,EAC/D,OAAIkgC,GAAUA,IAAW,KAAK,OAAO,aAC1B,IAAIA,CAAM,MAAMpV,EAAS,IAE7B,IAAIA,EAAS,GAC5B,CAKI,MAAM,uBAAuB9qB,EAAQ,CACjC,MAAM8qB,EAAY,gBAAgB,QAAQ9qB,CAAM,EAAIA,EAAO,KAAOA,EAClE,OAAI8qB,EAAU,QAAQ,GAAG,IAAM,GAGpB,IAFc,MAAM,KAAK,MAAM,yBAAyB,GACnC,CAAC,EAAE,cACf,IAAIA,CAAS,GAGtB,GAAGA,EAAU,MAAM,GAAG,EAAE,CAAC,CAAC,IAAIA,EAAU,MAAM,GAAG,EAAE,CAAC,CAAC,EAExE,CAII,qBAAqB3gB,EAAO+N,EAAQ,CAChC,IAAInK,GAAI,IAAMmK,EAAO,KAAO,IAC5B,GAAIA,EAAO,cAAgB,IACvBA,EAAO,qBAAuB,OAC9B,GAAIA,EAAO,qBAAuB,WAAY,CAE1C,MAAMovC,GAA6BpvC,EAAO,mBAAqB,aAC/DnK,IAAK,IAAImK,EAAO,IAAI,cAAcovC,EAA0B,cAC5E,MAGoBpvC,EAAO,OAAS,WAChBA,EAAO,OAAS,OAChBA,EAAO,OAAS,UAChBnK,IAAK,YACLmK,EAAO,OAAS,YAAcA,EAAO,OAAS,UAC9CnK,IAAK,iBACLmK,EAAO,OAAS,UAAYA,EAAO,OAAS,UAC5CnK,IAAK,cAGjB,OAAImK,EAAO,OAAS,QAAUA,EAAO,OAAS,eAC1CnK,IAAK,IAAM,KAAK,cAAc5D,EAAO+N,CAAM,EACvCA,EAAO,UACPnK,IAAK,YAEJ,CAACmK,EAAO,aAAeA,EAAO,OAAS,UAC5CnK,IAAK,IAAM,KAAK,WAAW,OAAO,eAAemK,CAAM,GAGvDA,EAAO,gBAAkB,UAAYA,EAAO,eAC5CnK,IAAK,yBAAyBmK,EAAO,YAAY,YAEjDA,EAAO,UACPnK,IAAK,mBAAqBmK,EAAO,QAAU,KAC3CA,EAAO,YACPnK,IAAK,aAAemK,EAAO,UAAY,KACvCA,EAAO,aAAe,KACtBnK,IAAK,aACLmK,EAAO,UAAY,QAAaA,EAAO,UAAY,OACnDnK,IAAK,YAAcmK,EAAO,SAC1BA,EAAO,aACPA,EAAO,qBAAuB,QAC9B,CAACA,EAAO,UACRnK,IAAK,YAAY,KAAK,OAAO,aAAa,IACvCA,EACf,CAII,MAAM,gCAAiC,CAEnC,MAAO,GADQ,MAAM,KAAK,MAAM,8GAA8G,GAChI,MACtB,CAII,MAAM,mBAAmB4vB,EAAa4V,EAAY,CAC9C,MAAM2E,GAAY,CAAE,EACdC,GAAc,CAAE,EAChBhuC,GAAQ,gBAAgB,QAAQwzB,CAAW,EAC3CA,EACA,MAAM,KAAK,eAAeA,CAAW,EAC3C4V,EAAa,KAAK,cAAcA,CAAU,EAC1C,MAAMrsB,GAAU,KAAK,cAAc/c,GAAM,OAAO,EAChD,GAAIopC,IAAersB,GACf,OAEJ,MAAMoyB,GAAWnvC,GAAM,MAAO,EAC9B+tC,GAAU,KAAK,IAAI,MAAM,oBAAoB,KAAK,WAAWoB,EAAQ,CAAC,OAAO/F,CAAU,EAAE,CAAC,EAC1F4E,GAAY,KAAK,IAAI,MAAM,oBAAoB,KAAK,WAAWhuC,EAAK,CAAC,OAAO+c,EAAO,EAAE,CAAC,EACtF,MAAM,KAAK,eAAegxB,GAAWC,EAAW,EAChDhuC,GAAM,QAAUmvC,GAAS,QACzB,KAAK,mBAAmBnvC,GAAOmvC,EAAQ,CAC/C,CACA,CCxoFO,MAAM,cAAe,CAIxB,YAAYl1B,EAAY,CAKpB,KAAK,OAAS,CAAC,EAIf,KAAK,sBAAwB,CAAC,EAI9B,KAAK,aAAe,GAIpB,KAAK,YAAc,GAInB,KAAK,mBAAqB,SAO1B,KAAK,mBAAqB,CACtB,MACA,OACA,OACA,OACA,WACA,UACA,SACA,UACA,UACA,OACA,QACA,SACA,SACA,mBACA,QACA,oBACA,UACA,YACA,OACA,OACA,SACA,SACA,QACA,MACA,SACA,cACA,SACA,cACA,YACA,8BACA,2BACA,OACA,OACA,yBACA,sBACA,WACA,OACA,UACA,OACA,QACA,OACA,OACA,MACA,OACA,UACA,SACA,OACA,OACA,UACA,WACA,UACA,OACA,MACA,OACA,QACA,YACA,YACA,WACA,UACA,YACA,YACA,iBACA,iBACA,gBACA,eACA,iBACA,iBACA,WACA,YACA,OACA,OACJ,EAIK,KAAA,qBAAuB,CAAC,uBAAuB,EAI/C,KAAA,aAAe,CAAC,WAAY,WAAW,EAI5C,KAAK,sBAAwB,CACzB,oBACA,UACA,YACA,OACA,MACA,SACA,aACJ,EAIA,KAAK,yBAA2B,CAC5B,UACA,UACA,WACA,yBACA,sBACA,8BACA,0BACJ,EAIK,KAAA,qBAAuB,CAAC,UAAW,SAAS,EAKjD,KAAK,gBAAkB,CACnB,WAAY,YACZ,kBAAmB,QACnB,WAAY,YACZ,kBAAmB,QACnB,WAAY,YACZ,mBAAoB,GACpB,QAAS,OACT,UAAW,OACX,YAAa,OACb,cAAe,UACf,mBAAoB,OACpB,QAAS,OACT,gBAAiB,UACjB,UAAW,OACX,cAAe,OACf,WAAY,OACZ,YAAa,OACb,aAAc,UACd,iBAAkB,UAClB,eAAgB,UAChB,cAAe,UACf,aAAc,UACd,cAAe,MACnB,EAIA,KAAK,iBAAmB,IAKxB,KAAK,iBAAmB,CACpB,UAAW,CAAE,OAAQ,CAAE,EACvB,IAAK,CAAE,OAAQ,CAAE,EACjB,SAAU,CAAE,UAAW,CAAE,EACzB,yBAA0B,CAAE,UAAW,CAAE,EACzC,sBAAuB,CAAE,UAAW,CAAE,EACtC,8BAA+B,CAAE,UAAW,CAAE,EAC9C,2BAA4B,CAAE,UAAW,CAAE,CAC/C,EAKA,KAAK,eAAiB,GACtB,KAAK,4BAA8B,GACnC,KAAK,gBAAkB,CACnB,QAAS,GACT,SAAU,GACV,sBAAuB,GACvB,iBAAkB,EACtB,EACKA,IAGL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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,243,244,245,246,248,249,250,251,252,253,254]}