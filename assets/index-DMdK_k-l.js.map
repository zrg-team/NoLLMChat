{"version":3,"file":"index-DMdK_k-l.js","sources":["../../node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/**\nA parse stack. These are used internally by the parser to track\nparsing progress. They also provide some properties and methods\nthat external code such as a tokenizer can use to get information\nabout the parse state.\n*/\nclass Stack {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parse that this stack is part of @internal\n    */\n    p, \n    /**\n    Holds state, input pos, buffer index triplets for all but the\n    top state @internal\n    */\n    stack, \n    /**\n    The current parse state @internal\n    */\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /**\n    @internal\n    */\n    reducePos, \n    /**\n    The input position up to which this stack has parsed.\n    */\n    pos, \n    /**\n    The dynamic score of the stack, including dynamic precedence\n    and error-recovery penalties\n    @internal\n    */\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /**\n    @internal\n    */\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /**\n    @internal\n    */\n    bufferBase, \n    /**\n    @internal\n    */\n    curContext, \n    /**\n    @internal\n    */\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /**\n    @internal\n    */\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /**\n    @internal\n    */\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /**\n    The stack's current [context](#lr.ContextTracker) value, if\n    any. Its type will depend on the context tracker's type\n    parameter, or it will be `null` if there is no context\n    tracker.\n    */\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /**\n    @internal\n    */\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /**\n    @internal\n    */\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;\n        if (lookaheadRecord)\n            this.setLookAhead(this.pos);\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special caseâ€”they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /**\n    @internal\n    */\n    storeNode(term, start, end, size = 4, mustSink = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!mustSink || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {\n                let mustMove = false;\n                for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {\n                    if (this.buffer[scan - 1] >= 0) {\n                        mustMove = true;\n                        break;\n                    }\n                }\n                if (mustMove)\n                    while (index > 0 && this.buffer[index - 2] > end) {\n                        // Move this record forward\n                        this.buffer[index] = this.buffer[index - 4];\n                        this.buffer[index + 1] = this.buffer[index - 3];\n                        this.buffer[index + 2] = this.buffer[index - 2];\n                        this.buffer[index + 3] = this.buffer[index - 1];\n                        index -= 4;\n                        if (size > 4)\n                            size -= 4;\n                    }\n            }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /**\n    @internal\n    */\n    shift(action, type, start, end) {\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (end > this.pos || type <= parser.maxNode) {\n                this.pos = end;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = end;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(type, start);\n            if (type <= parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = end;\n            this.shiftContext(type, start);\n            if (type <= this.p.parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n    }\n    // Apply an action\n    /**\n    @internal\n    */\n    apply(action, next, nextStart, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextStart, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /**\n    @internal\n    */\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /**\n    @internal\n    */\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /**\n    @internal\n    */\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /**\n    Check if the given term would be able to be shifted (optionally\n    after some reductions) on this stack. This can be useful for\n    external tokenizers that want to make sure they only provide a\n    given token when it applies.\n    */\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /**\n    @internal\n    */\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.reducePos = this.pos;\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /**\n    @internal\n    */\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /**\n    Try to scan through the automaton to find some kind of reduction\n    that can be applied. Used when the regular ForcedReduce field\n    isn't a valid action. @internal\n    */\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /**\n    @internal\n    */\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n    Check whether this state has no further actions (assumed to be a direct descendant of the\n    top state, since any other states must be able to continue\n    somehow). @internal\n    */\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /**\n    Restart the stack (put it back in its start state). Only safe\n    when this.stack.length == 3 (state is directly below the top\n    state). @internal\n    */\n    restart() {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /**\n    @internal\n    */\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /**\n    Get the parser used by this stack.\n    */\n    get parser() { return this.p.parser; }\n    /**\n    Test whether a given dialect (by numeric ID, as exported from\n    the terms file) is enabled.\n    */\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /**\n    @internal\n    */\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /**\n    @internal\n    */\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /**\n    @internal\n    */\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /**\n    @internal\n    */\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/**\n[Tokenizers](#lr.ExternalTokenizer) interact with the input\nthrough this interface. It presents the input as a stream of\ncharacters, tracking lookahead and hiding the complexity of\n[ranges](#common.Parser.parse^ranges) from tokenizer code.\n*/\nclass InputStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    input, \n    /**\n    @internal\n    */\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /**\n        @internal\n        */\n        this.chunk = \"\";\n        /**\n        @internal\n        */\n        this.chunkOff = 0;\n        /**\n        Backup chunk\n        */\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /**\n        The character code of the next code unit in the input, or -1\n        when the stream is at the end of the input.\n        */\n        this.next = -1;\n        /**\n        @internal\n        */\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /**\n    @internal\n    */\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /**\n    @internal\n    */\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /**\n    Look at a code unit near the stream position. `.peek(0)` equals\n    `.next`, `.peek(-1)` gives you the previous character, and so\n    on.\n    \n    Note that looking around during tokenizing creates dependencies\n    on potentially far-away content, which may reduce the\n    effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    cause invalid reparses when looking backward more than 25 code\n    units, since the library does not track lookbehind.\n    */\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /**\n    Accept a token. By default, the end of the token is set to the\n    current stream position, but you can pass an offset (relative to\n    the stream position) to change that.\n    */\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    /**\n    Accept a token ending at a specific given position.\n    */\n    acceptTokenTo(token, endPos) {\n        this.token.value = token;\n        this.token.end = endPos;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /**\n    Move the stream forward N (defaults to 1) code units. Returns\n    the new value of [`next`](#lr.InputStream.next).\n    */\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /**\n    @internal\n    */\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /**\n    @internal\n    */\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/**\n@internal\n*/\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n@hide\n*/\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n`@external tokens` declarations in the grammar should resolve to\nan instance of this class.\n*/\nclass ExternalTokenizer {\n    /**\n    Create a tokenizer. The first argument is the function that,\n    given an input stream, scans for the types of tokens it\n    recognizes at the stream's position, and calls\n    [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    one.\n    */\n    constructor(\n    /**\n    @internal\n    */\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Finish with \" + this.stackID(finished));\n                return this.stackToTree(finished);\n            }\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Force-finish \" + this.stackID(finished));\n                return this.stackToTree(finished.forceAll());\n            }\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {\n            while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            let main = this.tokens.mainToken;\n            localStack.apply(action, term, main ? main.start : localStack.pos, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/**\nContext trackers are used to track stateful context (such as\nindentation in the Python grammar, or parent elements in the XML\ngrammar) needed by external tokenizers. You declare them in a\ngrammar file as `@context exportName from \"module\"`.\n\nContext values should be immutable, and can be updated (replaced)\non shift or reduce actions.\n\nThe export used in a `@context` declaration should be of this\ntype.\n*/\nclass ContextTracker {\n    /**\n    Define a context tracker.\n    */\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/**\nHolds the parse tables for a given grammar, as generated by\n`lezer-generator`, and provides [methods](#common.Parser) to parse\ncontent with.\n*/\nclass LRParser extends Parser {\n    /**\n    @internal\n    */\n    constructor(spec) {\n        super();\n        /**\n        @internal\n        */\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /**\n    Get a goto table entry @internal\n    */\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /**\n    Check if this state has an action for a given terminal @internal\n    */\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /**\n    @internal\n    */\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /**\n    @internal\n    */\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /**\n    @internal\n    */\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /**\n    @internal\n    */\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /**\n    Get the states that can follow this one through shift actions or\n    goto jumps. @internal\n    */\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /**\n    Configure the parser. Returns a new parser instance that has the\n    given settings modified. Settings not provided in `config` are\n    kept from the original parser.\n    */\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /**\n    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    are registered for this parser.\n    */\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /**\n    Returns the name associated with a given term. This will only\n    work for all terms when the parser was generated with the\n    `--names` option. By default, only the names of tagged terms are\n    stored.\n    */\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /**\n    The eof term id is always allocated directly after the node\n    types. @internal\n    */\n    get eofTerm() { return this.maxNode + 1; }\n    /**\n    The type of top node produced by the parser.\n    */\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /**\n    @internal\n    */\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /**\n    @internal\n    */\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /**\n    Used by the output of the parser generator. Not available to\n    user code. @hide\n    */\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n"],"names":["i","id","process"],"mappings":"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","x_google_ignoreList":[0]}