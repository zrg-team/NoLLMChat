import { r as reactExports, j as jsxRuntimeExports, a1 as React, aC as ReactDOM, a4 as logWarn, t as useAppState, F as logDebug, L as LazyIcon, g as cn, p as useTranslation, __tla as __tla_0 } from "./index-Bs2EL0Mm.js";
import { u as usePreventPitchZoom, __tla as __tla_1 } from "./use-prevent-pitch-zoom-DzGgDOPg.js";
import { y as Label, __tla as __tla_2 } from "./routes-Q3DgWzwS.js";
import { u as useWebContainerState, __tla as __tla_3 } from "./index-Br76-WZb.js";
import { L as LoadingButton, __tla as __tla_4 } from "./HomePage-D_Hs-RaH.js";
import { __tla as __tla_5 } from "./use-llm-Kc_COJca.js";
let VSLiteApp;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_1;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_2;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_3;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_4;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_5;
    } catch {
    }
  })()
]).then(async () => {
  var _a;
  const MainVSLiteContext = reactExports.createContext(null);
  const MainVSLiteAppProvider = ({ children, fileSystemTree, onUpdateFileContent }) => {
    const [layoutReady, setLayoutReady] = reactExports.useState(false);
    const previewElementRef = reactExports.useRef(null);
    const ternimalElementRef = reactExports.useRef(null);
    const [container, setContainer] = reactExports.useState(null);
    const [terminal, setTerminal] = reactExports.useState(null);
    const [containerInfo, setContainerInfo] = reactExports.useState({
      url: void 0,
      port: void 0
    });
    const [process, setProcess] = reactExports.useState(null);
    const fileTreeStateRef = reactExports.useRef({
      fileSystemTree,
      refresh: () => {
      },
      treeEnv: null
    });
    const clearSession = reactExports.useCallback(() => {
      fileSystemTree = void 0;
      setContainer(null);
      setTerminal(null);
      setProcess(null);
      setContainerInfo({
        url: void 0,
        port: void 0
      });
    }, []);
    const value = reactExports.useMemo(() => ({
      setContainer,
      setTerminal,
      setProcess,
      fileTreeStateRef,
      container,
      terminal,
      process,
      containerInfo,
      setContainerInfo,
      clearSession,
      onUpdateFileContent,
      ternimalElementRef,
      previewElementRef,
      layoutReady,
      setLayoutReady
    }), [
      container,
      terminal,
      process,
      containerInfo,
      clearSession,
      onUpdateFileContent,
      layoutReady
    ]);
    return jsxRuntimeExports.jsx(MainVSLiteContext.Provider, {
      value,
      children
    });
  };
  const useMainVSLiteAppContext = () => {
    const context = reactExports.useContext(MainVSLiteContext);
    if (!context) {
      throw new Error("useMainVSLiteAppContext must be used within a MainVSLiteAppProvider");
    }
    return context;
  };
  class TransferObject {
  }
  class PanelTransfer extends TransferObject {
    constructor(viewId, groupId, panelId) {
      super();
      this.viewId = viewId;
      this.groupId = groupId;
      this.panelId = panelId;
    }
  }
  class PaneTransfer extends TransferObject {
    constructor(viewId, paneId) {
      super();
      this.viewId = viewId;
      this.paneId = paneId;
    }
  }
  class LocalSelectionTransfer {
    constructor() {
    }
    static getInstance() {
      return LocalSelectionTransfer.INSTANCE;
    }
    hasData(proto) {
      return proto && proto === this.proto;
    }
    clearData(proto) {
      if (this.hasData(proto)) {
        this.proto = void 0;
        this.data = void 0;
      }
    }
    getData(proto) {
      if (this.hasData(proto)) {
        return this.data;
      }
      return void 0;
    }
    setData(data, proto) {
      if (proto) {
        this.data = data;
        this.proto = proto;
      }
    }
  }
  LocalSelectionTransfer.INSTANCE = new LocalSelectionTransfer();
  function getPanelData() {
    const panelTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = panelTransfer.hasData(PanelTransfer.prototype);
    if (!isPanelEvent) {
      return void 0;
    }
    return panelTransfer.getData(PanelTransfer.prototype)[0];
  }
  function getPaneData() {
    const paneTransfer = LocalSelectionTransfer.getInstance();
    const isPanelEvent = paneTransfer.hasData(PaneTransfer.prototype);
    if (!isPanelEvent) {
      return void 0;
    }
    return paneTransfer.getData(PaneTransfer.prototype)[0];
  }
  var Event;
  (function(Event2) {
    Event2.any = (...children) => {
      return (listener) => {
        const disposables = children.map((child) => child(listener));
        return {
          dispose: () => {
            disposables.forEach((d) => {
              d.dispose();
            });
          }
        };
      };
    };
  })(Event || (Event = {}));
  class DockviewEvent {
    constructor() {
      this._defaultPrevented = false;
    }
    get defaultPrevented() {
      return this._defaultPrevented;
    }
    preventDefault() {
      this._defaultPrevented = true;
    }
  }
  class LeakageMonitor {
    constructor() {
      this.events = /* @__PURE__ */ new Map();
    }
    get size() {
      return this.events.size;
    }
    add(event, stacktrace) {
      this.events.set(event, stacktrace);
    }
    delete(event) {
      this.events.delete(event);
    }
    clear() {
      this.events.clear();
    }
  }
  class Stacktrace {
    static create() {
      var _a2;
      return new Stacktrace((_a2 = new Error().stack) !== null && _a2 !== void 0 ? _a2 : "");
    }
    constructor(value) {
      this.value = value;
    }
    print() {
      console.warn("dockview: stacktrace", this.value);
    }
  }
  class Listener {
    constructor(callback, stacktrace) {
      this.callback = callback;
      this.stacktrace = stacktrace;
    }
  }
  class Emitter {
    static setLeakageMonitorEnabled(isEnabled) {
      if (isEnabled !== Emitter.ENABLE_TRACKING) {
        Emitter.MEMORY_LEAK_WATCHER.clear();
      }
      Emitter.ENABLE_TRACKING = isEnabled;
    }
    get value() {
      return this._last;
    }
    constructor(options) {
      this.options = options;
      this._listeners = [];
      this._disposed = false;
    }
    get event() {
      if (!this._event) {
        this._event = (callback) => {
          var _a2;
          if (((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.replay) && this._last !== void 0) {
            callback(this._last);
          }
          const listener = new Listener(callback, Emitter.ENABLE_TRACKING ? Stacktrace.create() : void 0);
          this._listeners.push(listener);
          return {
            dispose: () => {
              const index2 = this._listeners.indexOf(listener);
              if (index2 > -1) {
                this._listeners.splice(index2, 1);
              }
            }
          };
        };
        if (Emitter.ENABLE_TRACKING) {
          Emitter.MEMORY_LEAK_WATCHER.add(this._event, Stacktrace.create());
        }
      }
      return this._event;
    }
    fire(e) {
      this._last = e;
      for (const listener of this._listeners) {
        listener.callback(e);
      }
    }
    dispose() {
      if (!this._disposed) {
        this._disposed = true;
        if (this._listeners.length > 0) {
          if (Emitter.ENABLE_TRACKING) {
            queueMicrotask(() => {
              var _a2;
              for (const listener of this._listeners) {
                console.warn("dockview: stacktrace", (_a2 = listener.stacktrace) === null || _a2 === void 0 ? void 0 : _a2.print());
              }
            });
          }
          this._listeners = [];
        }
        if (Emitter.ENABLE_TRACKING && this._event) {
          Emitter.MEMORY_LEAK_WATCHER.delete(this._event);
        }
      }
    }
  }
  Emitter.ENABLE_TRACKING = false;
  Emitter.MEMORY_LEAK_WATCHER = new LeakageMonitor();
  function addDisposableWindowListener(element, type, listener, options) {
    element.addEventListener(type, listener, options);
    return {
      dispose: () => {
        element.removeEventListener(type, listener, options);
      }
    };
  }
  function addDisposableListener(element, type, listener, options) {
    element.addEventListener(type, listener, options);
    return {
      dispose: () => {
        element.removeEventListener(type, listener, options);
      }
    };
  }
  class AsapEvent {
    constructor() {
      this._onFired = new Emitter();
      this._currentFireCount = 0;
      this._queued = false;
      this.onEvent = (e) => {
        const fireCountAtTimeOfEventSubscription = this._currentFireCount;
        return this._onFired.event(() => {
          if (this._currentFireCount > fireCountAtTimeOfEventSubscription) {
            e();
          }
        });
      };
    }
    fire() {
      this._currentFireCount++;
      if (this._queued) {
        return;
      }
      this._queued = true;
      queueMicrotask(() => {
        this._queued = false;
        this._onFired.fire();
      });
    }
    dispose() {
      this._onFired.dispose();
    }
  }
  var Disposable;
  (function(Disposable2) {
    Disposable2.NONE = {
      dispose: () => {
      }
    };
    function from(func) {
      return {
        dispose: () => {
          func();
        }
      };
    }
    Disposable2.from = from;
  })(Disposable || (Disposable = {}));
  class CompositeDisposable {
    get isDisposed() {
      return this._isDisposed;
    }
    constructor(...args) {
      this._isDisposed = false;
      this._disposables = args;
    }
    addDisposables(...args) {
      args.forEach((arg) => this._disposables.push(arg));
    }
    dispose() {
      if (this._isDisposed) {
        return;
      }
      this._isDisposed = true;
      this._disposables.forEach((arg) => arg.dispose());
      this._disposables = [];
    }
  }
  class MutableDisposable {
    constructor() {
      this._disposable = Disposable.NONE;
    }
    set value(disposable) {
      if (this._disposable) {
        this._disposable.dispose();
      }
      this._disposable = disposable;
    }
    dispose() {
      if (this._disposable) {
        this._disposable.dispose();
        this._disposable = Disposable.NONE;
      }
    }
  }
  function createComponent(id, componentName, components = {}, frameworkComponents = {}, createFrameworkComponent, fallback) {
    const Component = typeof componentName === "string" ? components[componentName] : void 0;
    const FrameworkComponent = typeof componentName === "string" ? frameworkComponents[componentName] : void 0;
    if (Component && FrameworkComponent) {
      throw new Error(`Cannot create '${id}'. component '${componentName}' registered as both a component and frameworkComponent`);
    }
    if (FrameworkComponent) {
      if (!createFrameworkComponent) {
        throw new Error(`Cannot create '${id}' for framework component '${componentName}'. you must register a frameworkPanelWrapper to use framework components`);
      }
      return createFrameworkComponent.createComponent(id, componentName, FrameworkComponent);
    }
    if (!Component) {
      throw new Error(`Cannot create '${id}', no component '${componentName}' provided`);
    }
    return new Component(id, componentName);
  }
  function watchElementResize(element, cb) {
    const observer = new ResizeObserver((entires) => {
      requestAnimationFrame(() => {
        const firstEntry = entires[0];
        cb(firstEntry);
      });
    });
    observer.observe(element);
    return {
      dispose: () => {
        observer.unobserve(element);
        observer.disconnect();
      }
    };
  }
  const removeClasses = (element, ...classes) => {
    for (const classname of classes) {
      if (element.classList.contains(classname)) {
        element.classList.remove(classname);
      }
    }
  };
  const addClasses = (element, ...classes) => {
    for (const classname of classes) {
      if (!element.classList.contains(classname)) {
        element.classList.add(classname);
      }
    }
  };
  const toggleClass = (element, className, isToggled) => {
    const hasClass = element.classList.contains(className);
    if (isToggled && !hasClass) {
      element.classList.add(className);
    }
    if (!isToggled && hasClass) {
      element.classList.remove(className);
    }
  };
  function isAncestor(testChild, testAncestor) {
    while (testChild) {
      if (testChild === testAncestor) {
        return true;
      }
      testChild = testChild.parentNode;
    }
    return false;
  }
  function getElementsByTagName(tag) {
    return Array.prototype.slice.call(document.getElementsByTagName(tag), 0);
  }
  function trackFocus(element) {
    return new FocusTracker(element);
  }
  class FocusTracker extends CompositeDisposable {
    constructor(element) {
      super();
      this._onDidFocus = new Emitter();
      this.onDidFocus = this._onDidFocus.event;
      this._onDidBlur = new Emitter();
      this.onDidBlur = this._onDidBlur.event;
      this.addDisposables(this._onDidFocus, this._onDidBlur);
      let hasFocus = isAncestor(document.activeElement, element);
      let loosingFocus = false;
      const onFocus = () => {
        loosingFocus = false;
        if (!hasFocus) {
          hasFocus = true;
          this._onDidFocus.fire();
        }
      };
      const onBlur = () => {
        if (hasFocus) {
          loosingFocus = true;
          window.setTimeout(() => {
            if (loosingFocus) {
              loosingFocus = false;
              hasFocus = false;
              this._onDidBlur.fire();
            }
          }, 0);
        }
      };
      this._refreshStateHandler = () => {
        const currentNodeHasFocus = isAncestor(document.activeElement, element);
        if (currentNodeHasFocus !== hasFocus) {
          if (hasFocus) {
            onBlur();
          } else {
            onFocus();
          }
        }
      };
      if (element instanceof HTMLElement) {
        this.addDisposables(addDisposableListener(element, "focus", onFocus, true));
        this.addDisposables(addDisposableListener(element, "blur", onBlur, true));
      } else {
        this.addDisposables(addDisposableWindowListener(element, "focus", onFocus, true));
        this.addDisposables(addDisposableWindowListener(element, "blur", onBlur, true));
      }
    }
    refreshState() {
      this._refreshStateHandler();
    }
  }
  const QUASI_PREVENT_DEFAULT_KEY = "dv-quasiPreventDefault";
  function quasiPreventDefault(event) {
    event[QUASI_PREVENT_DEFAULT_KEY] = true;
  }
  function quasiDefaultPrevented(event) {
    return event[QUASI_PREVENT_DEFAULT_KEY];
  }
  function addStyles(document2, styleSheetList) {
    const styleSheets = Array.from(styleSheetList);
    for (const styleSheet of styleSheets) {
      if (styleSheet.href) {
        const link = document2.createElement("link");
        link.href = styleSheet.href;
        link.type = styleSheet.type;
        link.rel = "stylesheet";
        document2.head.appendChild(link);
      }
      let cssTexts = [];
      try {
        if (styleSheet.cssRules) {
          cssTexts = Array.from(styleSheet.cssRules).map((rule) => rule.cssText);
        }
      } catch (err) {
      }
      for (const rule of cssTexts) {
        const style = document2.createElement("style");
        style.appendChild(document2.createTextNode(rule));
        document2.head.appendChild(style);
      }
    }
  }
  function getDomNodePagePosition(domNode) {
    const { left, top, width, height } = domNode.getBoundingClientRect();
    return {
      left: left + window.scrollX,
      top: top + window.scrollY,
      width,
      height
    };
  }
  function isInDocument(element) {
    let currentElement = element;
    while (currentElement === null || currentElement === void 0 ? void 0 : currentElement.parentNode) {
      if (currentElement.parentNode === document) {
        return true;
      } else if (currentElement.parentNode instanceof DocumentFragment) {
        currentElement = currentElement.parentNode.host;
      } else {
        currentElement = currentElement.parentNode;
      }
    }
    return false;
  }
  function addTestId(element, id) {
    element.setAttribute("data-testid", id);
  }
  function disableIframePointEvents() {
    const iframes = [
      ...getElementsByTagName("iframe"),
      ...getElementsByTagName("webview")
    ];
    const original = /* @__PURE__ */ new WeakMap();
    for (const iframe of iframes) {
      original.set(iframe, iframe.style.pointerEvents);
      iframe.style.pointerEvents = "none";
    }
    return {
      release: () => {
        var _a2;
        for (const iframe of iframes) {
          iframe.style.pointerEvents = (_a2 = original.get(iframe)) !== null && _a2 !== void 0 ? _a2 : "auto";
        }
        iframes.splice(0, iframes.length);
      }
    };
  }
  function getDockviewTheme(element) {
    function toClassList(element2) {
      const list = [];
      for (let i = 0; i < element2.classList.length; i++) {
        list.push(element2.classList.item(i));
      }
      return list;
    }
    let theme = void 0;
    let parent = element;
    while (parent !== null) {
      theme = toClassList(parent).find((cls) => cls.startsWith("dockview-theme-"));
      if (typeof theme === "string") {
        break;
      }
      parent = parent.parentElement;
    }
    return theme;
  }
  class Classnames {
    constructor(element) {
      this.element = element;
      this._classNames = [];
    }
    setClassNames(classNames) {
      for (const className of this._classNames) {
        toggleClass(this.element, className, false);
      }
      this._classNames = classNames.split(" ").filter((v2) => v2.trim().length > 0);
      for (const className of this._classNames) {
        toggleClass(this.element, className, true);
      }
    }
  }
  function tail(arr) {
    if (arr.length === 0) {
      throw new Error("Invalid tail call");
    }
    return [
      arr.slice(0, arr.length - 1),
      arr[arr.length - 1]
    ];
  }
  function last(arr) {
    return arr.length > 0 ? arr[arr.length - 1] : void 0;
  }
  function sequenceEquals(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }
    for (let i = 0; i < arr1.length; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }
  function pushToStart(arr, value) {
    const index2 = arr.indexOf(value);
    if (index2 > -1) {
      arr.splice(index2, 1);
      arr.unshift(value);
    }
  }
  function pushToEnd(arr, value) {
    const index2 = arr.indexOf(value);
    if (index2 > -1) {
      arr.splice(index2, 1);
      arr.push(value);
    }
  }
  function firstIndex(array, fn) {
    for (let i = 0; i < array.length; i++) {
      const element = array[i];
      if (fn(element)) {
        return i;
      }
    }
    return -1;
  }
  function remove(array, value) {
    const index2 = array.findIndex((t) => t === value);
    if (index2 > -1) {
      array.splice(index2, 1);
      return true;
    }
    return false;
  }
  const clamp = (value, min, max) => {
    if (min > max) {
      return min;
    }
    return Math.min(max, Math.max(value, min));
  };
  const sequentialNumberGenerator = () => {
    let value = 1;
    return {
      next: () => (value++).toString()
    };
  };
  const range = (from, to) => {
    const result = [];
    if (typeof to !== "number") {
      to = from;
      from = 0;
    }
    if (from <= to) {
      for (let i = from; i < to; i++) {
        result.push(i);
      }
    } else {
      for (let i = from; i > to; i--) {
        result.push(i);
      }
    }
    return result;
  };
  class ViewItem {
    set size(size) {
      this._size = size;
    }
    get size() {
      return this._size;
    }
    get cachedVisibleSize() {
      return this._cachedVisibleSize;
    }
    get visible() {
      return typeof this._cachedVisibleSize === "undefined";
    }
    get minimumSize() {
      return this.visible ? this.view.minimumSize : 0;
    }
    get viewMinimumSize() {
      return this.view.minimumSize;
    }
    get maximumSize() {
      return this.visible ? this.view.maximumSize : 0;
    }
    get viewMaximumSize() {
      return this.view.maximumSize;
    }
    get priority() {
      return this.view.priority;
    }
    get snap() {
      return !!this.view.snap;
    }
    set enabled(enabled) {
      this.container.style.pointerEvents = enabled ? "" : "none";
    }
    constructor(container, view, size, disposable) {
      this.container = container;
      this.view = view;
      this.disposable = disposable;
      this._cachedVisibleSize = void 0;
      if (typeof size === "number") {
        this._size = size;
        this._cachedVisibleSize = void 0;
        container.classList.add("visible");
      } else {
        this._size = 0;
        this._cachedVisibleSize = size.cachedVisibleSize;
      }
    }
    setVisible(visible, size) {
      var _a2;
      if (visible === this.visible) {
        return;
      }
      if (visible) {
        this.size = clamp((_a2 = this._cachedVisibleSize) !== null && _a2 !== void 0 ? _a2 : 0, this.viewMinimumSize, this.viewMaximumSize);
        this._cachedVisibleSize = void 0;
      } else {
        this._cachedVisibleSize = typeof size === "number" ? size : this.size;
        this.size = 0;
      }
      this.container.classList.toggle("visible", visible);
      if (this.view.setVisible) {
        this.view.setVisible(visible);
      }
    }
    dispose() {
      this.disposable.dispose();
      return this.view;
    }
  }
  var Orientation;
  (function(Orientation2) {
    Orientation2["HORIZONTAL"] = "HORIZONTAL";
    Orientation2["VERTICAL"] = "VERTICAL";
  })(Orientation || (Orientation = {}));
  var SashState;
  (function(SashState2) {
    SashState2[SashState2["MAXIMUM"] = 0] = "MAXIMUM";
    SashState2[SashState2["MINIMUM"] = 1] = "MINIMUM";
    SashState2[SashState2["DISABLED"] = 2] = "DISABLED";
    SashState2[SashState2["ENABLED"] = 3] = "ENABLED";
  })(SashState || (SashState = {}));
  var LayoutPriority;
  (function(LayoutPriority2) {
    LayoutPriority2["Low"] = "low";
    LayoutPriority2["High"] = "high";
    LayoutPriority2["Normal"] = "normal";
  })(LayoutPriority || (LayoutPriority = {}));
  var Sizing;
  (function(Sizing2) {
    Sizing2.Distribute = {
      type: "distribute"
    };
    function Split(index2) {
      return {
        type: "split",
        index: index2
      };
    }
    Sizing2.Split = Split;
    function Invisible(cachedVisibleSize) {
      return {
        type: "invisible",
        cachedVisibleSize
      };
    }
    Sizing2.Invisible = Invisible;
  })(Sizing || (Sizing = {}));
  class Splitview {
    get contentSize() {
      return this._contentSize;
    }
    get size() {
      return this._size;
    }
    set size(value) {
      this._size = value;
    }
    get orthogonalSize() {
      return this._orthogonalSize;
    }
    set orthogonalSize(value) {
      this._orthogonalSize = value;
    }
    get length() {
      return this.viewItems.length;
    }
    get proportions() {
      return this._proportions ? [
        ...this._proportions
      ] : void 0;
    }
    get orientation() {
      return this._orientation;
    }
    set orientation(value) {
      this._orientation = value;
      const tmp = this.size;
      this.size = this.orthogonalSize;
      this.orthogonalSize = tmp;
      removeClasses(this.element, "horizontal", "vertical");
      this.element.classList.add(this.orientation == Orientation.HORIZONTAL ? "horizontal" : "vertical");
    }
    get minimumSize() {
      return this.viewItems.reduce((r, item) => r + item.minimumSize, 0);
    }
    get maximumSize() {
      return this.length === 0 ? Number.POSITIVE_INFINITY : this.viewItems.reduce((r, item) => r + item.maximumSize, 0);
    }
    get startSnappingEnabled() {
      return this._startSnappingEnabled;
    }
    set startSnappingEnabled(startSnappingEnabled) {
      if (this._startSnappingEnabled === startSnappingEnabled) {
        return;
      }
      this._startSnappingEnabled = startSnappingEnabled;
      this.updateSashEnablement();
    }
    get endSnappingEnabled() {
      return this._endSnappingEnabled;
    }
    set endSnappingEnabled(endSnappingEnabled) {
      if (this._endSnappingEnabled === endSnappingEnabled) {
        return;
      }
      this._endSnappingEnabled = endSnappingEnabled;
      this.updateSashEnablement();
    }
    get disabled() {
      return this._disabled;
    }
    set disabled(value) {
      this._disabled = value;
      toggleClass(this.element, "dv-splitview-disabled", value);
    }
    get margin() {
      return this._margin;
    }
    set margin(value) {
      this._margin = value;
    }
    constructor(container, options) {
      var _a2;
      this.container = container;
      this.viewItems = [];
      this.sashes = [];
      this._size = 0;
      this._orthogonalSize = 0;
      this._contentSize = 0;
      this._proportions = void 0;
      this._startSnappingEnabled = true;
      this._endSnappingEnabled = true;
      this._disabled = false;
      this._margin = 0;
      this._onDidSashEnd = new Emitter();
      this.onDidSashEnd = this._onDidSashEnd.event;
      this._onDidAddView = new Emitter();
      this.onDidAddView = this._onDidAddView.event;
      this._onDidRemoveView = new Emitter();
      this.onDidRemoveView = this._onDidRemoveView.event;
      this.resize = (index2, delta, sizes = this.viewItems.map((x) => x.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) => {
        if (index2 < 0 || index2 > this.viewItems.length) {
          return 0;
        }
        const upIndexes = range(index2, -1);
        const downIndexes = range(index2 + 1, this.viewItems.length);
        if (highPriorityIndexes) {
          for (const i of highPriorityIndexes) {
            pushToStart(upIndexes, i);
            pushToStart(downIndexes, i);
          }
        }
        if (lowPriorityIndexes) {
          for (const i of lowPriorityIndexes) {
            pushToEnd(upIndexes, i);
            pushToEnd(downIndexes, i);
          }
        }
        const upItems = upIndexes.map((i) => this.viewItems[i]);
        const upSizes = upIndexes.map((i) => sizes[i]);
        const downItems = downIndexes.map((i) => this.viewItems[i]);
        const downSizes = downIndexes.map((i) => sizes[i]);
        const minDeltaUp = upIndexes.reduce((_2, i) => _2 + this.viewItems[i].minimumSize - sizes[i], 0);
        const maxDeltaUp = upIndexes.reduce((_2, i) => _2 + this.viewItems[i].maximumSize - sizes[i], 0);
        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((_2, i) => _2 + sizes[i] - this.viewItems[i].minimumSize, 0);
        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((_2, i) => _2 + sizes[i] - this.viewItems[i].maximumSize, 0);
        const minDelta = Math.max(minDeltaUp, minDeltaDown);
        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
        let snapped = false;
        if (snapBefore) {
          const snapView = this.viewItems[snapBefore.index];
          const visible = delta >= snapBefore.limitDelta;
          snapped = visible !== snapView.visible;
          snapView.setVisible(visible, snapBefore.size);
        }
        if (!snapped && snapAfter) {
          const snapView = this.viewItems[snapAfter.index];
          const visible = delta < snapAfter.limitDelta;
          snapped = visible !== snapView.visible;
          snapView.setVisible(visible, snapAfter.size);
        }
        if (snapped) {
          return this.resize(index2, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);
        }
        const tentativeDelta = clamp(delta, minDelta, maxDelta);
        let actualDelta = 0;
        let deltaUp = tentativeDelta;
        for (let i = 0; i < upItems.length; i++) {
          const item = upItems[i];
          const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);
          const viewDelta = size - upSizes[i];
          actualDelta += viewDelta;
          deltaUp -= viewDelta;
          item.size = size;
        }
        let deltaDown = actualDelta;
        for (let i = 0; i < downItems.length; i++) {
          const item = downItems[i];
          const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);
          const viewDelta = size - downSizes[i];
          deltaDown += viewDelta;
          item.size = size;
        }
        return delta;
      };
      this._orientation = options.orientation;
      this.element = this.createContainer();
      this.margin = (_a2 = options.margin) !== null && _a2 !== void 0 ? _a2 : 0;
      this.proportionalLayout = options.proportionalLayout === void 0 ? true : !!options.proportionalLayout;
      this.viewContainer = this.createViewContainer();
      this.sashContainer = this.createSashContainer();
      this.element.appendChild(this.sashContainer);
      this.element.appendChild(this.viewContainer);
      this.container.appendChild(this.element);
      this.style(options.styles);
      if (options.descriptor) {
        this._size = options.descriptor.size;
        options.descriptor.views.forEach((viewDescriptor, index2) => {
          const sizing = viewDescriptor.visible === void 0 || viewDescriptor.visible ? viewDescriptor.size : {
            type: "invisible",
            cachedVisibleSize: viewDescriptor.size
          };
          const view = viewDescriptor.view;
          this.addView(view, sizing, index2, true);
        });
        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
        this.saveProportions();
      }
    }
    style(styles) {
      if ((styles === null || styles === void 0 ? void 0 : styles.separatorBorder) === "transparent") {
        removeClasses(this.element, "separator-border");
        this.element.style.removeProperty("--dv-separator-border");
      } else {
        addClasses(this.element, "separator-border");
        if (styles === null || styles === void 0 ? void 0 : styles.separatorBorder) {
          this.element.style.setProperty("--dv-separator-border", styles.separatorBorder);
        }
      }
    }
    isViewVisible(index2) {
      if (index2 < 0 || index2 >= this.viewItems.length) {
        throw new Error("Index out of bounds");
      }
      const viewItem = this.viewItems[index2];
      return viewItem.visible;
    }
    setViewVisible(index2, visible) {
      if (index2 < 0 || index2 >= this.viewItems.length) {
        throw new Error("Index out of bounds");
      }
      const viewItem = this.viewItems[index2];
      viewItem.setVisible(visible, viewItem.size);
      this.distributeEmptySpace(index2);
      this.layoutViews();
      this.saveProportions();
    }
    getViewSize(index2) {
      if (index2 < 0 || index2 >= this.viewItems.length) {
        return -1;
      }
      return this.viewItems[index2].size;
    }
    resizeView(index2, size) {
      if (index2 < 0 || index2 >= this.viewItems.length) {
        return;
      }
      const indexes = range(this.viewItems.length).filter((i) => i !== index2);
      const lowPriorityIndexes = [
        ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
        index2
      ];
      const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
      const item = this.viewItems[index2];
      size = Math.round(size);
      size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this._size));
      item.size = size;
      this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    getViews() {
      return this.viewItems.map((x) => x.view);
    }
    onDidChange(item, size) {
      const index2 = this.viewItems.indexOf(item);
      if (index2 < 0 || index2 >= this.viewItems.length) {
        return;
      }
      size = typeof size === "number" ? size : item.size;
      size = clamp(size, item.minimumSize, item.maximumSize);
      item.size = size;
      const indexes = range(this.viewItems.length).filter((i) => i !== index2);
      const lowPriorityIndexes = [
        ...indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low),
        index2
      ];
      const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
      this.relayout([
        ...lowPriorityIndexes,
        index2
      ], highPriorityIndexes);
    }
    addView(view, size = {
      type: "distribute"
    }, index2 = this.viewItems.length, skipLayout) {
      const container = document.createElement("div");
      container.className = "view";
      container.appendChild(view.element);
      let viewSize;
      if (typeof size === "number") {
        viewSize = size;
      } else if (size.type === "split") {
        viewSize = this.getViewSize(size.index) / 2;
      } else if (size.type === "invisible") {
        viewSize = {
          cachedVisibleSize: size.cachedVisibleSize
        };
      } else {
        viewSize = view.minimumSize;
      }
      const disposable = view.onDidChange((newSize) => this.onDidChange(viewItem, newSize.size));
      const viewItem = new ViewItem(container, view, viewSize, {
        dispose: () => {
          disposable.dispose();
          this.viewContainer.removeChild(container);
        }
      });
      if (index2 === this.viewItems.length) {
        this.viewContainer.appendChild(container);
      } else {
        this.viewContainer.insertBefore(container, this.viewContainer.children.item(index2));
      }
      this.viewItems.splice(index2, 0, viewItem);
      if (this.viewItems.length > 1) {
        const sash = document.createElement("div");
        sash.className = "sash";
        const onPointerStart = (event) => {
          for (const item of this.viewItems) {
            item.enabled = false;
          }
          const iframes = disableIframePointEvents();
          const start = this._orientation === Orientation.HORIZONTAL ? event.clientX : event.clientY;
          const sashIndex = firstIndex(this.sashes, (s) => s.container === sash);
          const sizes = this.viewItems.map((x) => x.size);
          let snapBefore;
          let snapAfter;
          const upIndexes = range(sashIndex, -1);
          const downIndexes = range(sashIndex + 1, this.viewItems.length);
          const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);
          const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);
          const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);
          const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);
          const minDelta = Math.max(minDeltaUp, minDeltaDown);
          const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);
          const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
          const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
          if (typeof snapBeforeIndex === "number") {
            const snappedViewItem = this.viewItems[snapBeforeIndex];
            const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
            snapBefore = {
              index: snapBeforeIndex,
              limitDelta: snappedViewItem.visible ? minDelta - halfSize : minDelta + halfSize,
              size: snappedViewItem.size
            };
          }
          if (typeof snapAfterIndex === "number") {
            const snappedViewItem = this.viewItems[snapAfterIndex];
            const halfSize = Math.floor(snappedViewItem.viewMinimumSize / 2);
            snapAfter = {
              index: snapAfterIndex,
              limitDelta: snappedViewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,
              size: snappedViewItem.size
            };
          }
          const onPointerMove = (event2) => {
            const current = this._orientation === Orientation.HORIZONTAL ? event2.clientX : event2.clientY;
            const delta = current - start;
            this.resize(sashIndex, delta, sizes, void 0, void 0, minDelta, maxDelta, snapBefore, snapAfter);
            this.distributeEmptySpace();
            this.layoutViews();
          };
          const end = () => {
            for (const item of this.viewItems) {
              item.enabled = true;
            }
            iframes.release();
            this.saveProportions();
            document.removeEventListener("pointermove", onPointerMove);
            document.removeEventListener("pointerup", end);
            document.removeEventListener("pointercancel", end);
            this._onDidSashEnd.fire(void 0);
          };
          document.addEventListener("pointermove", onPointerMove);
          document.addEventListener("pointerup", end);
          document.addEventListener("pointercancel", end);
        };
        sash.addEventListener("pointerdown", onPointerStart);
        const sashItem = {
          container: sash,
          disposable: () => {
            sash.removeEventListener("pointerdown", onPointerStart);
            this.sashContainer.removeChild(sash);
          }
        };
        this.sashContainer.appendChild(sash);
        this.sashes.push(sashItem);
      }
      if (!skipLayout) {
        this.relayout([
          index2
        ]);
      }
      if (!skipLayout && typeof size !== "number" && size.type === "distribute") {
        this.distributeViewSizes();
      }
      this._onDidAddView.fire(view);
    }
    distributeViewSizes() {
      const flexibleViewItems = [];
      let flexibleSize = 0;
      for (const item of this.viewItems) {
        if (item.maximumSize - item.minimumSize > 0) {
          flexibleViewItems.push(item);
          flexibleSize += item.size;
        }
      }
      const size = Math.floor(flexibleSize / flexibleViewItems.length);
      for (const item of flexibleViewItems) {
        item.size = clamp(size, item.minimumSize, item.maximumSize);
      }
      const indexes = range(this.viewItems.length);
      const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
      const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
      this.relayout(lowPriorityIndexes, highPriorityIndexes);
    }
    removeView(index2, sizing, skipLayout = false) {
      const viewItem = this.viewItems.splice(index2, 1)[0];
      viewItem.dispose();
      if (this.viewItems.length >= 1) {
        const sashIndex = Math.max(index2 - 1, 0);
        const sashItem = this.sashes.splice(sashIndex, 1)[0];
        sashItem.disposable();
      }
      if (!skipLayout) {
        this.relayout();
      }
      if (sizing && sizing.type === "distribute") {
        this.distributeViewSizes();
      }
      this._onDidRemoveView.fire(viewItem.view);
      return viewItem.view;
    }
    getViewCachedVisibleSize(index2) {
      if (index2 < 0 || index2 >= this.viewItems.length) {
        throw new Error("Index out of bounds");
      }
      const viewItem = this.viewItems[index2];
      return viewItem.cachedVisibleSize;
    }
    moveView(from, to) {
      const cachedVisibleSize = this.getViewCachedVisibleSize(from);
      const sizing = typeof cachedVisibleSize === "undefined" ? this.getViewSize(from) : Sizing.Invisible(cachedVisibleSize);
      const view = this.removeView(from, void 0, true);
      this.addView(view, sizing, to);
    }
    layout(size, orthogonalSize) {
      const previousSize = Math.max(this.size, this._contentSize);
      this.size = size;
      this.orthogonalSize = orthogonalSize;
      if (!this.proportions) {
        const indexes = range(this.viewItems.length);
        const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
        const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
        this.resize(this.viewItems.length - 1, size - previousSize, void 0, lowPriorityIndexes, highPriorityIndexes);
      } else {
        let total = 0;
        for (let i = 0; i < this.viewItems.length; i++) {
          const item = this.viewItems[i];
          const proportion = this.proportions[i];
          if (typeof proportion === "number") {
            total += proportion;
          } else {
            size -= item.size;
          }
        }
        for (let i = 0; i < this.viewItems.length; i++) {
          const item = this.viewItems[i];
          const proportion = this.proportions[i];
          if (typeof proportion === "number" && total > 0) {
            item.size = clamp(Math.round(proportion * size / total), item.minimumSize, item.maximumSize);
          }
        }
      }
      this.distributeEmptySpace();
      this.layoutViews();
    }
    relayout(lowPriorityIndexes, highPriorityIndexes) {
      const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
      this.resize(this.viewItems.length - 1, this._size - contentSize, void 0, lowPriorityIndexes, highPriorityIndexes);
      this.distributeEmptySpace();
      this.layoutViews();
      this.saveProportions();
    }
    distributeEmptySpace(lowPriorityIndex) {
      const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
      let emptyDelta = this.size - contentSize;
      const indexes = range(this.viewItems.length - 1, -1);
      const lowPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.Low);
      const highPriorityIndexes = indexes.filter((i) => this.viewItems[i].priority === LayoutPriority.High);
      for (const index2 of highPriorityIndexes) {
        pushToStart(indexes, index2);
      }
      for (const index2 of lowPriorityIndexes) {
        pushToEnd(indexes, index2);
      }
      if (typeof lowPriorityIndex === "number") {
        pushToEnd(indexes, lowPriorityIndex);
      }
      for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {
        const item = this.viewItems[indexes[i]];
        const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);
        const viewDelta = size - item.size;
        emptyDelta -= viewDelta;
        item.size = size;
      }
    }
    saveProportions() {
      if (this.proportionalLayout && this._contentSize > 0) {
        this._proportions = this.viewItems.map((i) => i.visible ? i.size / this._contentSize : void 0);
      }
    }
    layoutViews() {
      this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);
      this.updateSashEnablement();
      if (this.viewItems.length === 0) {
        return;
      }
      const visibleViewItems = this.viewItems.filter((i) => i.visible);
      const sashCount = Math.max(0, visibleViewItems.length - 1);
      const marginReducedSize = this.margin * sashCount / Math.max(1, visibleViewItems.length);
      let totalLeftOffset = 0;
      const viewLeftOffsets = [];
      const sashWidth = 4;
      const runningVisiblePanelCount = this.viewItems.reduce((arr, viewItem, i) => {
        const flag = viewItem.visible ? 1 : 0;
        if (i === 0) {
          arr.push(flag);
        } else {
          arr.push(arr[i - 1] + flag);
        }
        return arr;
      }, []);
      this.viewItems.forEach((view, i) => {
        totalLeftOffset += this.viewItems[i].size;
        viewLeftOffsets.push(totalLeftOffset);
        const size = view.visible ? view.size - marginReducedSize : 0;
        const visiblePanelsBeforeThisView = Math.max(0, runningVisiblePanelCount[i] - 1);
        const offset = i === 0 || visiblePanelsBeforeThisView === 0 ? 0 : viewLeftOffsets[i - 1] + visiblePanelsBeforeThisView / sashCount * marginReducedSize;
        if (i < this.viewItems.length - 1) {
          const newSize = view.visible ? offset + size - sashWidth / 2 + this.margin / 2 : offset;
          if (this._orientation === Orientation.HORIZONTAL) {
            this.sashes[i].container.style.left = `${newSize}px`;
            this.sashes[i].container.style.top = `0px`;
          }
          if (this._orientation === Orientation.VERTICAL) {
            this.sashes[i].container.style.left = `0px`;
            this.sashes[i].container.style.top = `${newSize}px`;
          }
        }
        if (this._orientation === Orientation.HORIZONTAL) {
          view.container.style.width = `${size}px`;
          view.container.style.left = `${offset}px`;
          view.container.style.top = "";
          view.container.style.height = "";
        }
        if (this._orientation === Orientation.VERTICAL) {
          view.container.style.height = `${size}px`;
          view.container.style.top = `${offset}px`;
          view.container.style.width = "";
          view.container.style.left = "";
        }
        view.view.layout(view.size - marginReducedSize, this._orthogonalSize);
      });
    }
    findFirstSnapIndex(indexes) {
      for (const index2 of indexes) {
        const viewItem = this.viewItems[index2];
        if (!viewItem.visible) {
          continue;
        }
        if (viewItem.snap) {
          return index2;
        }
      }
      for (const index2 of indexes) {
        const viewItem = this.viewItems[index2];
        if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {
          return void 0;
        }
        if (!viewItem.visible && viewItem.snap) {
          return index2;
        }
      }
      return void 0;
    }
    updateSashEnablement() {
      let previous = false;
      const collapsesDown = this.viewItems.map((i) => previous = i.size - i.minimumSize > 0 || previous);
      previous = false;
      const expandsDown = this.viewItems.map((i) => previous = i.maximumSize - i.size > 0 || previous);
      const reverseViews = [
        ...this.viewItems
      ].reverse();
      previous = false;
      const collapsesUp = reverseViews.map((i) => previous = i.size - i.minimumSize > 0 || previous).reverse();
      previous = false;
      const expandsUp = reverseViews.map((i) => previous = i.maximumSize - i.size > 0 || previous).reverse();
      let position = 0;
      for (let index2 = 0; index2 < this.sashes.length; index2++) {
        const sash = this.sashes[index2];
        const viewItem = this.viewItems[index2];
        position += viewItem.size;
        const min = !(collapsesDown[index2] && expandsUp[index2 + 1]);
        const max = !(expandsDown[index2] && collapsesUp[index2 + 1]);
        if (min && max) {
          const upIndexes = range(index2, -1);
          const downIndexes = range(index2 + 1, this.viewItems.length);
          const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);
          const snapAfterIndex = this.findFirstSnapIndex(downIndexes);
          const snappedBefore = typeof snapBeforeIndex === "number" && !this.viewItems[snapBeforeIndex].visible;
          const snappedAfter = typeof snapAfterIndex === "number" && !this.viewItems[snapAfterIndex].visible;
          if (snappedBefore && collapsesUp[index2] && (position > 0 || this.startSnappingEnabled)) {
            this.updateSash(sash, SashState.MINIMUM);
          } else if (snappedAfter && collapsesDown[index2] && (position < this._contentSize || this.endSnappingEnabled)) {
            this.updateSash(sash, SashState.MAXIMUM);
          } else {
            this.updateSash(sash, SashState.DISABLED);
          }
        } else if (min && !max) {
          this.updateSash(sash, SashState.MINIMUM);
        } else if (!min && max) {
          this.updateSash(sash, SashState.MAXIMUM);
        } else {
          this.updateSash(sash, SashState.ENABLED);
        }
      }
    }
    updateSash(sash, state) {
      toggleClass(sash.container, "disabled", state === SashState.DISABLED);
      toggleClass(sash.container, "enabled", state === SashState.ENABLED);
      toggleClass(sash.container, "maximum", state === SashState.MAXIMUM);
      toggleClass(sash.container, "minimum", state === SashState.MINIMUM);
    }
    createViewContainer() {
      const element = document.createElement("div");
      element.className = "view-container";
      return element;
    }
    createSashContainer() {
      const element = document.createElement("div");
      element.className = "sash-container";
      return element;
    }
    createContainer() {
      const element = document.createElement("div");
      const orientationClassname = this._orientation === Orientation.HORIZONTAL ? "horizontal" : "vertical";
      element.className = `split-view-container ${orientationClassname}`;
      return element;
    }
    dispose() {
      this._onDidSashEnd.dispose();
      this._onDidAddView.dispose();
      this._onDidRemoveView.dispose();
      for (let i = 0; i < this.element.children.length; i++) {
        if (this.element.children.item(i) === this.element) {
          this.element.removeChild(this.element);
          break;
        }
      }
      for (const viewItem of this.viewItems) {
        viewItem.dispose();
      }
      this.element.remove();
    }
  }
  class Paneview extends CompositeDisposable {
    get onDidAddView() {
      return this.splitview.onDidAddView;
    }
    get onDidRemoveView() {
      return this.splitview.onDidRemoveView;
    }
    get minimumSize() {
      return this.splitview.minimumSize;
    }
    get maximumSize() {
      return this.splitview.maximumSize;
    }
    get orientation() {
      return this.splitview.orientation;
    }
    get size() {
      return this.splitview.size;
    }
    get orthogonalSize() {
      return this.splitview.orthogonalSize;
    }
    constructor(container, options) {
      var _a2;
      super();
      this.paneItems = [];
      this.skipAnimation = false;
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this._orientation = (_a2 = options.orientation) !== null && _a2 !== void 0 ? _a2 : Orientation.VERTICAL;
      this.element = document.createElement("div");
      this.element.className = "pane-container";
      container.appendChild(this.element);
      this.splitview = new Splitview(this.element, {
        orientation: this._orientation,
        proportionalLayout: false,
        descriptor: options.descriptor
      });
      this.getPanes().forEach((pane) => {
        const disposable = new CompositeDisposable(pane.onDidChangeExpansionState(() => {
          this.setupAnimation();
          this._onDidChange.fire(void 0);
        }));
        const paneItem = {
          pane,
          disposable: {
            dispose: () => {
              disposable.dispose();
            }
          }
        };
        this.paneItems.push(paneItem);
        pane.orthogonalSize = this.splitview.orthogonalSize;
      });
      this.addDisposables(this._onDidChange, this.splitview.onDidSashEnd(() => {
        this._onDidChange.fire(void 0);
      }), this.splitview.onDidAddView(() => {
        this._onDidChange.fire();
      }), this.splitview.onDidRemoveView(() => {
        this._onDidChange.fire();
      }));
    }
    setViewVisible(index2, visible) {
      this.splitview.setViewVisible(index2, visible);
    }
    addPane(pane, size, index2 = this.splitview.length, skipLayout = false) {
      const disposable = pane.onDidChangeExpansionState(() => {
        this.setupAnimation();
        this._onDidChange.fire(void 0);
      });
      const paneItem = {
        pane,
        disposable: {
          dispose: () => {
            disposable.dispose();
          }
        }
      };
      this.paneItems.splice(index2, 0, paneItem);
      pane.orthogonalSize = this.splitview.orthogonalSize;
      this.splitview.addView(pane, size, index2, skipLayout);
    }
    getViewSize(index2) {
      return this.splitview.getViewSize(index2);
    }
    getPanes() {
      return this.splitview.getViews();
    }
    removePane(index2, options = {
      skipDispose: false
    }) {
      const paneItem = this.paneItems.splice(index2, 1)[0];
      this.splitview.removeView(index2);
      if (!options.skipDispose) {
        paneItem.disposable.dispose();
        paneItem.pane.dispose();
      }
      return paneItem;
    }
    moveView(from, to) {
      if (from === to) {
        return;
      }
      const view = this.removePane(from, {
        skipDispose: true
      });
      this.skipAnimation = true;
      try {
        this.addPane(view.pane, view.pane.size, to, false);
      } finally {
        this.skipAnimation = false;
      }
    }
    layout(size, orthogonalSize) {
      this.splitview.layout(size, orthogonalSize);
    }
    setupAnimation() {
      if (this.skipAnimation) {
        return;
      }
      if (this.animationTimer) {
        clearTimeout(this.animationTimer);
        this.animationTimer = void 0;
      }
      addClasses(this.element, "animated");
      this.animationTimer = setTimeout(() => {
        this.animationTimer = void 0;
        removeClasses(this.element, "animated");
      }, 200);
    }
    dispose() {
      super.dispose();
      if (this.animationTimer) {
        clearTimeout(this.animationTimer);
        this.animationTimer = void 0;
      }
      this.paneItems.forEach((paneItem) => {
        paneItem.disposable.dispose();
        paneItem.pane.dispose();
      });
      this.paneItems = [];
      this.splitview.dispose();
      this.element.remove();
    }
  }
  class LeafNode {
    get minimumWidth() {
      return this.view.minimumWidth;
    }
    get maximumWidth() {
      return this.view.maximumWidth;
    }
    get minimumHeight() {
      return this.view.minimumHeight;
    }
    get maximumHeight() {
      return this.view.maximumHeight;
    }
    get priority() {
      return this.view.priority;
    }
    get snap() {
      return this.view.snap;
    }
    get minimumSize() {
      return this.orientation === Orientation.HORIZONTAL ? this.minimumHeight : this.minimumWidth;
    }
    get maximumSize() {
      return this.orientation === Orientation.HORIZONTAL ? this.maximumHeight : this.maximumWidth;
    }
    get minimumOrthogonalSize() {
      return this.orientation === Orientation.HORIZONTAL ? this.minimumWidth : this.minimumHeight;
    }
    get maximumOrthogonalSize() {
      return this.orientation === Orientation.HORIZONTAL ? this.maximumWidth : this.maximumHeight;
    }
    get orthogonalSize() {
      return this._orthogonalSize;
    }
    get size() {
      return this._size;
    }
    get element() {
      return this.view.element;
    }
    get width() {
      return this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;
    }
    get height() {
      return this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;
    }
    constructor(view, orientation, orthogonalSize, size = 0) {
      this.view = view;
      this.orientation = orientation;
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this._orthogonalSize = orthogonalSize;
      this._size = size;
      this._disposable = this.view.onDidChange((event) => {
        if (event) {
          this._onDidChange.fire({
            size: this.orientation === Orientation.VERTICAL ? event.width : event.height,
            orthogonalSize: this.orientation === Orientation.VERTICAL ? event.height : event.width
          });
        } else {
          this._onDidChange.fire({});
        }
      });
    }
    setVisible(visible) {
      if (this.view.setVisible) {
        this.view.setVisible(visible);
      }
    }
    layout(size, orthogonalSize) {
      this._size = size;
      this._orthogonalSize = orthogonalSize;
      this.view.layout(this.width, this.height);
    }
    dispose() {
      this._onDidChange.dispose();
      this._disposable.dispose();
    }
  }
  class BranchNode extends CompositeDisposable {
    get width() {
      return this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;
    }
    get height() {
      return this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;
    }
    get minimumSize() {
      return this.children.length === 0 ? 0 : Math.max(...this.children.map((c, index2) => this.splitview.isViewVisible(index2) ? c.minimumOrthogonalSize : 0));
    }
    get maximumSize() {
      return Math.min(...this.children.map((c, index2) => this.splitview.isViewVisible(index2) ? c.maximumOrthogonalSize : Number.POSITIVE_INFINITY));
    }
    get minimumOrthogonalSize() {
      return this.splitview.minimumSize;
    }
    get maximumOrthogonalSize() {
      return this.splitview.maximumSize;
    }
    get orthogonalSize() {
      return this._orthogonalSize;
    }
    get size() {
      return this._size;
    }
    get minimumWidth() {
      return this.orientation === Orientation.HORIZONTAL ? this.minimumOrthogonalSize : this.minimumSize;
    }
    get minimumHeight() {
      return this.orientation === Orientation.HORIZONTAL ? this.minimumSize : this.minimumOrthogonalSize;
    }
    get maximumWidth() {
      return this.orientation === Orientation.HORIZONTAL ? this.maximumOrthogonalSize : this.maximumSize;
    }
    get maximumHeight() {
      return this.orientation === Orientation.HORIZONTAL ? this.maximumSize : this.maximumOrthogonalSize;
    }
    get priority() {
      if (this.children.length === 0) {
        return LayoutPriority.Normal;
      }
      const priorities = this.children.map((c) => typeof c.priority === "undefined" ? LayoutPriority.Normal : c.priority);
      if (priorities.some((p) => p === LayoutPriority.High)) {
        return LayoutPriority.High;
      } else if (priorities.some((p) => p === LayoutPriority.Low)) {
        return LayoutPriority.Low;
      }
      return LayoutPriority.Normal;
    }
    get disabled() {
      return this.splitview.disabled;
    }
    set disabled(value) {
      this.splitview.disabled = value;
    }
    get margin() {
      return this.splitview.margin;
    }
    set margin(value) {
      this.splitview.margin = value;
      this.children.forEach((child) => {
        if (child instanceof BranchNode) {
          child.margin = value;
        }
      });
    }
    constructor(orientation, proportionalLayout, styles, size, orthogonalSize, disabled, margin, childDescriptors) {
      super();
      this.orientation = orientation;
      this.proportionalLayout = proportionalLayout;
      this.styles = styles;
      this._childrenDisposable = Disposable.NONE;
      this.children = [];
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this._onDidVisibilityChange = new Emitter();
      this.onDidVisibilityChange = this._onDidVisibilityChange.event;
      this._orthogonalSize = orthogonalSize;
      this._size = size;
      this.element = document.createElement("div");
      this.element.className = "branch-node";
      if (!childDescriptors) {
        this.splitview = new Splitview(this.element, {
          orientation: this.orientation,
          proportionalLayout,
          styles,
          margin
        });
        this.splitview.layout(this.size, this.orthogonalSize);
      } else {
        const descriptor = {
          views: childDescriptors.map((childDescriptor) => {
            return {
              view: childDescriptor.node,
              size: childDescriptor.node.size,
              visible: childDescriptor.node instanceof LeafNode && childDescriptor.visible !== void 0 ? childDescriptor.visible : true
            };
          }),
          size: this.orthogonalSize
        };
        this.children = childDescriptors.map((c) => c.node);
        this.splitview = new Splitview(this.element, {
          orientation: this.orientation,
          descriptor,
          proportionalLayout,
          styles,
          margin
        });
      }
      this.disabled = disabled;
      this.addDisposables(this._onDidChange, this._onDidVisibilityChange, this.splitview.onDidSashEnd(() => {
        this._onDidChange.fire({});
      }));
      this.setupChildrenEvents();
    }
    setVisible(_visible) {
    }
    isChildVisible(index2) {
      if (index2 < 0 || index2 >= this.children.length) {
        throw new Error("Invalid index");
      }
      return this.splitview.isViewVisible(index2);
    }
    setChildVisible(index2, visible) {
      if (index2 < 0 || index2 >= this.children.length) {
        throw new Error("Invalid index");
      }
      if (this.splitview.isViewVisible(index2) === visible) {
        return;
      }
      const wereAllChildrenHidden = this.splitview.contentSize === 0;
      this.splitview.setViewVisible(index2, visible);
      const areAllChildrenHidden = this.splitview.contentSize === 0;
      if (visible && wereAllChildrenHidden || !visible && areAllChildrenHidden) {
        this._onDidVisibilityChange.fire({
          visible
        });
      }
    }
    moveChild(from, to) {
      if (from === to) {
        return;
      }
      if (from < 0 || from >= this.children.length) {
        throw new Error("Invalid from index");
      }
      if (from < to) {
        to--;
      }
      this.splitview.moveView(from, to);
      const child = this._removeChild(from);
      this._addChild(child, to);
    }
    getChildSize(index2) {
      if (index2 < 0 || index2 >= this.children.length) {
        throw new Error("Invalid index");
      }
      return this.splitview.getViewSize(index2);
    }
    resizeChild(index2, size) {
      if (index2 < 0 || index2 >= this.children.length) {
        throw new Error("Invalid index");
      }
      this.splitview.resizeView(index2, size);
    }
    layout(size, orthogonalSize) {
      this._size = orthogonalSize;
      this._orthogonalSize = size;
      this.splitview.layout(orthogonalSize, size);
    }
    addChild(node, size, index2, skipLayout) {
      if (index2 < 0 || index2 > this.children.length) {
        throw new Error("Invalid index");
      }
      this.splitview.addView(node, size, index2, skipLayout);
      this._addChild(node, index2);
    }
    getChildCachedVisibleSize(index2) {
      if (index2 < 0 || index2 >= this.children.length) {
        throw new Error("Invalid index");
      }
      return this.splitview.getViewCachedVisibleSize(index2);
    }
    removeChild(index2, sizing) {
      if (index2 < 0 || index2 >= this.children.length) {
        throw new Error("Invalid index");
      }
      this.splitview.removeView(index2, sizing);
      return this._removeChild(index2);
    }
    _addChild(node, index2) {
      this.children.splice(index2, 0, node);
      this.setupChildrenEvents();
    }
    _removeChild(index2) {
      const [child] = this.children.splice(index2, 1);
      this.setupChildrenEvents();
      return child;
    }
    setupChildrenEvents() {
      this._childrenDisposable.dispose();
      this._childrenDisposable = new CompositeDisposable(Event.any(...this.children.map((c) => c.onDidChange))((e) => {
        this._onDidChange.fire({
          size: e.orthogonalSize
        });
      }), ...this.children.map((c, i) => {
        if (c instanceof BranchNode) {
          return c.onDidVisibilityChange(({ visible }) => {
            this.setChildVisible(i, visible);
          });
        }
        return Disposable.NONE;
      }));
    }
    dispose() {
      this._childrenDisposable.dispose();
      this.splitview.dispose();
      this.children.forEach((child) => child.dispose());
      super.dispose();
    }
  }
  function findLeaf(candiateNode, last2) {
    if (candiateNode instanceof LeafNode) {
      return candiateNode;
    }
    if (candiateNode instanceof BranchNode) {
      return findLeaf(candiateNode.children[last2 ? candiateNode.children.length - 1 : 0], last2);
    }
    throw new Error("invalid node");
  }
  function flipNode(node, size, orthogonalSize) {
    if (node instanceof BranchNode) {
      const result = new BranchNode(orthogonal(node.orientation), node.proportionalLayout, node.styles, size, orthogonalSize, node.disabled, node.margin);
      let totalSize = 0;
      for (let i = node.children.length - 1; i >= 0; i--) {
        const child = node.children[i];
        const childSize = child instanceof BranchNode ? child.orthogonalSize : child.size;
        let newSize = node.size === 0 ? 0 : Math.round(size * childSize / node.size);
        totalSize += newSize;
        if (i === 0) {
          newSize += size - totalSize;
        }
        result.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0, true);
      }
      return result;
    } else {
      return new LeafNode(node.view, orthogonal(node.orientation), orthogonalSize);
    }
  }
  function indexInParent(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
      throw new Error("Invalid grid element");
    }
    let el = parentElement.firstElementChild;
    let index2 = 0;
    while (el !== element && el !== parentElement.lastElementChild && el) {
      el = el.nextElementSibling;
      index2++;
    }
    return index2;
  }
  function getGridLocation(element) {
    const parentElement = element.parentElement;
    if (!parentElement) {
      throw new Error("Invalid grid element");
    }
    if (/\bgrid-view\b/.test(parentElement.className)) {
      return [];
    }
    const index2 = indexInParent(parentElement);
    const ancestor = parentElement.parentElement.parentElement.parentElement;
    return [
      ...getGridLocation(ancestor),
      index2
    ];
  }
  function getRelativeLocation(rootOrientation, location2, direction) {
    const orientation = getLocationOrientation(rootOrientation, location2);
    const directionOrientation = getDirectionOrientation(direction);
    if (orientation === directionOrientation) {
      const [rest, _index] = tail(location2);
      let index2 = _index;
      if (direction === "right" || direction === "bottom") {
        index2 += 1;
      }
      return [
        ...rest,
        index2
      ];
    } else {
      const index2 = direction === "right" || direction === "bottom" ? 1 : 0;
      return [
        ...location2,
        index2
      ];
    }
  }
  function getDirectionOrientation(direction) {
    return direction === "top" || direction === "bottom" ? Orientation.VERTICAL : Orientation.HORIZONTAL;
  }
  function getLocationOrientation(rootOrientation, location2) {
    return location2.length % 2 === 0 ? orthogonal(rootOrientation) : rootOrientation;
  }
  const orthogonal = (orientation) => orientation === Orientation.HORIZONTAL ? Orientation.VERTICAL : Orientation.HORIZONTAL;
  function isGridBranchNode(node) {
    return !!node.children;
  }
  const serializeBranchNode = (node, orientation) => {
    const size = orientation === Orientation.VERTICAL ? node.box.width : node.box.height;
    if (!isGridBranchNode(node)) {
      if (typeof node.cachedVisibleSize === "number") {
        return {
          type: "leaf",
          data: node.view.toJSON(),
          size: node.cachedVisibleSize,
          visible: false
        };
      }
      return {
        type: "leaf",
        data: node.view.toJSON(),
        size
      };
    }
    return {
      type: "branch",
      data: node.children.map((c) => serializeBranchNode(c, orthogonal(orientation))),
      size
    };
  };
  class Gridview {
    get length() {
      return this._root ? this._root.children.length : 0;
    }
    get orientation() {
      return this.root.orientation;
    }
    set orientation(orientation) {
      if (this.root.orientation === orientation) {
        return;
      }
      const { size, orthogonalSize } = this.root;
      this.root = flipNode(this.root, orthogonalSize, size);
      this.root.layout(size, orthogonalSize);
    }
    get width() {
      return this.root.width;
    }
    get height() {
      return this.root.height;
    }
    get minimumWidth() {
      return this.root.minimumWidth;
    }
    get minimumHeight() {
      return this.root.minimumHeight;
    }
    get maximumWidth() {
      return this.root.maximumHeight;
    }
    get maximumHeight() {
      return this.root.maximumHeight;
    }
    get locked() {
      return this._locked;
    }
    set locked(value) {
      this._locked = value;
      const branch = [
        this.root
      ];
      while (branch.length > 0) {
        const node = branch.pop();
        if (node instanceof BranchNode) {
          node.disabled = value;
          branch.push(...node.children);
        }
      }
    }
    get margin() {
      return this._margin;
    }
    set margin(value) {
      this._margin = value;
      this.root.margin = value;
    }
    maximizedView() {
      var _a2;
      return (_a2 = this._maximizedNode) === null || _a2 === void 0 ? void 0 : _a2.leaf.view;
    }
    hasMaximizedView() {
      return this._maximizedNode !== void 0;
    }
    maximizeView(view) {
      var _a2;
      const location2 = getGridLocation(view.element);
      const [_2, node] = this.getNode(location2);
      if (!(node instanceof LeafNode)) {
        return;
      }
      if (((_a2 = this._maximizedNode) === null || _a2 === void 0 ? void 0 : _a2.leaf) === node) {
        return;
      }
      if (this.hasMaximizedView()) {
        this.exitMaximizedView();
      }
      const hiddenOnMaximize = [];
      function hideAllViewsBut(parent, exclude) {
        for (let i = 0; i < parent.children.length; i++) {
          const child = parent.children[i];
          if (child instanceof LeafNode) {
            if (child !== exclude) {
              if (parent.isChildVisible(i)) {
                parent.setChildVisible(i, false);
              } else {
                hiddenOnMaximize.push(child);
              }
            }
          } else {
            hideAllViewsBut(child, exclude);
          }
        }
      }
      hideAllViewsBut(this.root, node);
      this._maximizedNode = {
        leaf: node,
        hiddenOnMaximize
      };
      this._onDidMaximizedNodeChange.fire();
    }
    exitMaximizedView() {
      if (!this._maximizedNode) {
        return;
      }
      const hiddenOnMaximize = this._maximizedNode.hiddenOnMaximize;
      function showViewsInReverseOrder(parent) {
        for (let index2 = parent.children.length - 1; index2 >= 0; index2--) {
          const child = parent.children[index2];
          if (child instanceof LeafNode) {
            if (!hiddenOnMaximize.includes(child)) {
              parent.setChildVisible(index2, true);
            }
          } else {
            showViewsInReverseOrder(child);
          }
        }
      }
      showViewsInReverseOrder(this.root);
      this._maximizedNode = void 0;
      this._onDidMaximizedNodeChange.fire();
    }
    serialize() {
      if (this.hasMaximizedView()) {
        this.exitMaximizedView();
      }
      const root2 = serializeBranchNode(this.getView(), this.orientation);
      return {
        root: root2,
        width: this.width,
        height: this.height,
        orientation: this.orientation
      };
    }
    dispose() {
      this.disposable.dispose();
      this._onDidChange.dispose();
      this._onDidMaximizedNodeChange.dispose();
      this._onDidViewVisibilityChange.dispose();
      this.root.dispose();
      this._maximizedNode = void 0;
      this.element.remove();
    }
    clear() {
      const orientation = this.root.orientation;
      this.root = new BranchNode(orientation, this.proportionalLayout, this.styles, this.root.size, this.root.orthogonalSize, this.locked, this.margin);
    }
    deserialize(json, deserializer) {
      const orientation = json.orientation;
      const height = orientation === Orientation.VERTICAL ? json.height : json.width;
      this._deserialize(json.root, orientation, deserializer, height);
    }
    _deserialize(root2, orientation, deserializer, orthogonalSize) {
      this.root = this._deserializeNode(root2, orientation, deserializer, orthogonalSize);
    }
    _deserializeNode(node, orientation, deserializer, orthogonalSize) {
      var _a2;
      let result;
      if (node.type === "branch") {
        const serializedChildren = node.data;
        const children = serializedChildren.map((serializedChild) => {
          return {
            node: this._deserializeNode(serializedChild, orthogonal(orientation), deserializer, node.size),
            visible: serializedChild.visible
          };
        });
        result = new BranchNode(orientation, this.proportionalLayout, this.styles, node.size, orthogonalSize, this.locked, this.margin, children);
      } else {
        const view = deserializer.fromJSON(node);
        if (typeof node.visible === "boolean") {
          (_a2 = view.setVisible) === null || _a2 === void 0 ? void 0 : _a2.call(view, node.visible);
        }
        result = new LeafNode(view, orientation, orthogonalSize, node.size);
      }
      return result;
    }
    get root() {
      return this._root;
    }
    set root(root2) {
      const oldRoot = this._root;
      if (oldRoot) {
        oldRoot.dispose();
        this._maximizedNode = void 0;
        this.element.removeChild(oldRoot.element);
      }
      this._root = root2;
      this.element.appendChild(this._root.element);
      this.disposable.value = this._root.onDidChange((e) => {
        this._onDidChange.fire(e);
      });
    }
    insertOrthogonalSplitviewAtRoot() {
      if (!this._root) {
        return;
      }
      const oldRoot = this.root;
      oldRoot.element.remove();
      this._root = new BranchNode(orthogonal(oldRoot.orientation), this.proportionalLayout, this.styles, this.root.orthogonalSize, this.root.size, this.locked, this.margin);
      if (oldRoot.children.length === 0) ;
      else if (oldRoot.children.length === 1) {
        const childReference = oldRoot.children[0];
        const child = oldRoot.removeChild(0);
        child.dispose();
        oldRoot.dispose();
        this._root.addChild(flipNode(childReference, childReference.orthogonalSize, childReference.size), Sizing.Distribute, 0);
      } else {
        this._root.addChild(oldRoot, Sizing.Distribute, 0);
      }
      this.element.appendChild(this._root.element);
      this.disposable.value = this._root.onDidChange((e) => {
        this._onDidChange.fire(e);
      });
    }
    next(location2) {
      return this.progmaticSelect(location2);
    }
    previous(location2) {
      return this.progmaticSelect(location2, true);
    }
    getView(location2) {
      const node = location2 ? this.getNode(location2)[1] : this.root;
      return this._getViews(node, this.orientation);
    }
    _getViews(node, orientation, cachedVisibleSize) {
      const box = {
        height: node.height,
        width: node.width
      };
      if (node instanceof LeafNode) {
        return {
          box,
          view: node.view,
          cachedVisibleSize
        };
      }
      const children = [];
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        const nodeCachedVisibleSize = node.getChildCachedVisibleSize(i);
        children.push(this._getViews(child, orthogonal(orientation), nodeCachedVisibleSize));
      }
      return {
        box,
        children
      };
    }
    progmaticSelect(location2, reverse = false) {
      const [path, node] = this.getNode(location2);
      if (!(node instanceof LeafNode)) {
        throw new Error("invalid location");
      }
      for (let i = path.length - 1; i > -1; i--) {
        const n = path[i];
        const l2 = location2[i] || 0;
        const canProgressInCurrentLevel = reverse ? l2 - 1 > -1 : l2 + 1 < n.children.length;
        if (canProgressInCurrentLevel) {
          return findLeaf(n.children[reverse ? l2 - 1 : l2 + 1], reverse);
        }
      }
      return findLeaf(this.root, reverse);
    }
    constructor(proportionalLayout, styles, orientation, locked, margin) {
      this.proportionalLayout = proportionalLayout;
      this.styles = styles;
      this._locked = false;
      this._margin = 0;
      this._maximizedNode = void 0;
      this.disposable = new MutableDisposable();
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this._onDidViewVisibilityChange = new Emitter();
      this.onDidViewVisibilityChange = this._onDidViewVisibilityChange.event;
      this._onDidMaximizedNodeChange = new Emitter();
      this.onDidMaximizedNodeChange = this._onDidMaximizedNodeChange.event;
      this.element = document.createElement("div");
      this.element.className = "grid-view";
      this._locked = locked !== null && locked !== void 0 ? locked : false;
      this._margin = margin !== null && margin !== void 0 ? margin : 0;
      this.root = new BranchNode(orientation, proportionalLayout, styles, 0, 0, this.locked, this.margin);
    }
    isViewVisible(location2) {
      const [rest, index2] = tail(location2);
      const [, parent] = this.getNode(rest);
      if (!(parent instanceof BranchNode)) {
        throw new Error("Invalid from location");
      }
      return parent.isChildVisible(index2);
    }
    setViewVisible(location2, visible) {
      if (this.hasMaximizedView()) {
        this.exitMaximizedView();
      }
      const [rest, index2] = tail(location2);
      const [, parent] = this.getNode(rest);
      if (!(parent instanceof BranchNode)) {
        throw new Error("Invalid from location");
      }
      this._onDidViewVisibilityChange.fire();
      parent.setChildVisible(index2, visible);
    }
    moveView(parentLocation, from, to) {
      if (this.hasMaximizedView()) {
        this.exitMaximizedView();
      }
      const [, parent] = this.getNode(parentLocation);
      if (!(parent instanceof BranchNode)) {
        throw new Error("Invalid location");
      }
      parent.moveChild(from, to);
    }
    addView(view, size, location2) {
      if (this.hasMaximizedView()) {
        this.exitMaximizedView();
      }
      const [rest, index2] = tail(location2);
      const [pathToParent, parent] = this.getNode(rest);
      if (parent instanceof BranchNode) {
        const node = new LeafNode(view, orthogonal(parent.orientation), parent.orthogonalSize);
        parent.addChild(node, size, index2);
      } else {
        const [grandParent, ..._2] = [
          ...pathToParent
        ].reverse();
        const [parentIndex, ...__] = [
          ...rest
        ].reverse();
        let newSiblingSize = 0;
        const newSiblingCachedVisibleSize = grandParent.getChildCachedVisibleSize(parentIndex);
        if (typeof newSiblingCachedVisibleSize === "number") {
          newSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);
        }
        const child = grandParent.removeChild(parentIndex);
        child.dispose();
        const newParent = new BranchNode(parent.orientation, this.proportionalLayout, this.styles, parent.size, parent.orthogonalSize, this.locked, this.margin);
        grandParent.addChild(newParent, parent.size, parentIndex);
        const newSibling = new LeafNode(parent.view, grandParent.orientation, parent.size);
        newParent.addChild(newSibling, newSiblingSize, 0);
        if (typeof size !== "number" && size.type === "split") {
          size = {
            type: "split",
            index: 0
          };
        }
        const node = new LeafNode(view, grandParent.orientation, parent.size);
        newParent.addChild(node, size, index2);
      }
    }
    remove(view, sizing) {
      const location2 = getGridLocation(view.element);
      return this.removeView(location2, sizing);
    }
    removeView(location2, sizing) {
      if (this.hasMaximizedView()) {
        this.exitMaximizedView();
      }
      const [rest, index2] = tail(location2);
      const [pathToParent, parent] = this.getNode(rest);
      if (!(parent instanceof BranchNode)) {
        throw new Error("Invalid location");
      }
      const nodeToRemove = parent.children[index2];
      if (!(nodeToRemove instanceof LeafNode)) {
        throw new Error("Invalid location");
      }
      parent.removeChild(index2, sizing);
      nodeToRemove.dispose();
      if (parent.children.length !== 1) {
        return nodeToRemove.view;
      }
      const sibling = parent.children[0];
      if (pathToParent.length === 0) {
        if (sibling instanceof LeafNode) {
          return nodeToRemove.view;
        }
        parent.removeChild(0, sizing);
        this.root = sibling;
        return nodeToRemove.view;
      }
      const [grandParent, ..._2] = [
        ...pathToParent
      ].reverse();
      const [parentIndex, ...__] = [
        ...rest
      ].reverse();
      const isSiblingVisible = parent.isChildVisible(0);
      parent.removeChild(0, sizing);
      const sizes = grandParent.children.map((_size, i) => grandParent.getChildSize(i));
      grandParent.removeChild(parentIndex, sizing).dispose();
      if (sibling instanceof BranchNode) {
        sizes.splice(parentIndex, 1, ...sibling.children.map((c) => c.size));
        for (let i = 0; i < sibling.children.length; i++) {
          const child = sibling.children[i];
          grandParent.addChild(child, child.size, parentIndex + i);
        }
        while (sibling.children.length > 0) {
          sibling.removeChild(0);
        }
      } else {
        const newSibling = new LeafNode(sibling.view, orthogonal(sibling.orientation), sibling.size);
        const siblingSizing = isSiblingVisible ? sibling.orthogonalSize : Sizing.Invisible(sibling.orthogonalSize);
        grandParent.addChild(newSibling, siblingSizing, parentIndex);
      }
      sibling.dispose();
      for (let i = 0; i < sizes.length; i++) {
        grandParent.resizeChild(i, sizes[i]);
      }
      return nodeToRemove.view;
    }
    layout(width, height) {
      const [size, orthogonalSize] = this.root.orientation === Orientation.HORIZONTAL ? [
        height,
        width
      ] : [
        width,
        height
      ];
      this.root.layout(size, orthogonalSize);
    }
    getNode(location2, node = this.root, path = []) {
      if (location2.length === 0) {
        return [
          path,
          node
        ];
      }
      if (!(node instanceof BranchNode)) {
        throw new Error("Invalid location");
      }
      const [index2, ...rest] = location2;
      if (index2 < 0 || index2 >= node.children.length) {
        throw new Error("Invalid location");
      }
      const child = node.children[index2];
      path.push(node);
      return this.getNode(rest, child, path);
    }
  }
  class Resizable extends CompositeDisposable {
    get element() {
      return this._element;
    }
    get disableResizing() {
      return this._disableResizing;
    }
    set disableResizing(value) {
      this._disableResizing = value;
    }
    constructor(parentElement, disableResizing = false) {
      super();
      this._disableResizing = disableResizing;
      this._element = parentElement;
      this.addDisposables(watchElementResize(this._element, (entry) => {
        if (this.isDisposed) {
          return;
        }
        if (this.disableResizing) {
          return;
        }
        if (!this._element.offsetParent) {
          return;
        }
        if (!isInDocument(this._element)) {
          return;
        }
        const { width, height } = entry.contentRect;
        this.layout(width, height);
      }));
    }
  }
  const nextLayoutId$1 = sequentialNumberGenerator();
  function toTarget(direction) {
    switch (direction) {
      case "left":
        return "left";
      case "right":
        return "right";
      case "above":
        return "top";
      case "below":
        return "bottom";
      case "within":
      default:
        return "center";
    }
  }
  class BaseGrid extends Resizable {
    get id() {
      return this._id;
    }
    get size() {
      return this._groups.size;
    }
    get groups() {
      return Array.from(this._groups.values()).map((_2) => _2.value);
    }
    get width() {
      return this.gridview.width;
    }
    get height() {
      return this.gridview.height;
    }
    get minimumHeight() {
      return this.gridview.minimumHeight;
    }
    get maximumHeight() {
      return this.gridview.maximumHeight;
    }
    get minimumWidth() {
      return this.gridview.minimumWidth;
    }
    get maximumWidth() {
      return this.gridview.maximumWidth;
    }
    get activeGroup() {
      return this._activeGroup;
    }
    get locked() {
      return this.gridview.locked;
    }
    set locked(value) {
      this.gridview.locked = value;
    }
    constructor(parentElement, options) {
      var _a2;
      super(document.createElement("div"), options.disableAutoResizing);
      this._id = nextLayoutId$1.next();
      this._groups = /* @__PURE__ */ new Map();
      this._onDidRemove = new Emitter();
      this.onDidRemove = this._onDidRemove.event;
      this._onDidAdd = new Emitter();
      this.onDidAdd = this._onDidAdd.event;
      this._onDidActiveChange = new Emitter();
      this.onDidActiveChange = this._onDidActiveChange.event;
      this._bufferOnDidLayoutChange = new AsapEvent();
      this.onDidLayoutChange = this._bufferOnDidLayoutChange.onEvent;
      this._onDidViewVisibilityChangeMicroTaskQueue = new AsapEvent();
      this.onDidViewVisibilityChangeMicroTaskQueue = this._onDidViewVisibilityChangeMicroTaskQueue.onEvent;
      this.element.style.height = "100%";
      this.element.style.width = "100%";
      this._classNames = new Classnames(this.element);
      this._classNames.setClassNames((_a2 = options.className) !== null && _a2 !== void 0 ? _a2 : "");
      parentElement.appendChild(this.element);
      this.gridview = new Gridview(!!options.proportionalLayout, options.styles, options.orientation, options.locked, options.margin);
      this.gridview.locked = !!options.locked;
      this.element.appendChild(this.gridview.element);
      this.layout(0, 0, true);
      this.addDisposables(this.gridview.onDidViewVisibilityChange(() => this._onDidViewVisibilityChangeMicroTaskQueue.fire()), this.onDidViewVisibilityChangeMicroTaskQueue(() => {
        this.layout(this.width, this.height, true);
      }), Disposable.from(() => {
        var _a3;
        (_a3 = this.element.parentElement) === null || _a3 === void 0 ? void 0 : _a3.removeChild(this.element);
      }), this.gridview.onDidChange(() => {
        this._bufferOnDidLayoutChange.fire();
      }), Event.any(this.onDidAdd, this.onDidRemove, this.onDidActiveChange)(() => {
        this._bufferOnDidLayoutChange.fire();
      }), this._bufferOnDidLayoutChange);
    }
    setVisible(panel, visible) {
      this.gridview.setViewVisible(getGridLocation(panel.element), visible);
      this._bufferOnDidLayoutChange.fire();
    }
    isVisible(panel) {
      return this.gridview.isViewVisible(getGridLocation(panel.element));
    }
    updateOptions(options) {
      var _a2, _b, _c, _d;
      if (typeof options.proportionalLayout === "boolean") ;
      if (options.orientation) {
        this.gridview.orientation = options.orientation;
      }
      if ("disableResizing" in options) {
        this.disableResizing = (_a2 = options.disableAutoResizing) !== null && _a2 !== void 0 ? _a2 : false;
      }
      if ("locked" in options) {
        this.locked = (_b = options.locked) !== null && _b !== void 0 ? _b : false;
      }
      if ("margin" in options) {
        this.gridview.margin = (_c = options.margin) !== null && _c !== void 0 ? _c : 0;
      }
      if ("className" in options) {
        this._classNames.setClassNames((_d = options.className) !== null && _d !== void 0 ? _d : "");
      }
    }
    maximizeGroup(panel) {
      this.gridview.maximizeView(panel);
      this.doSetGroupActive(panel);
    }
    isMaximizedGroup(panel) {
      return this.gridview.maximizedView() === panel;
    }
    exitMaximizedGroup() {
      this.gridview.exitMaximizedView();
    }
    hasMaximizedGroup() {
      return this.gridview.hasMaximizedView();
    }
    get onDidMaximizedGroupChange() {
      return this.gridview.onDidMaximizedNodeChange;
    }
    doAddGroup(group, location2 = [
      0
    ], size) {
      this.gridview.addView(group, size !== null && size !== void 0 ? size : Sizing.Distribute, location2);
      this._onDidAdd.fire(group);
    }
    doRemoveGroup(group, options) {
      if (!this._groups.has(group.id)) {
        throw new Error("invalid operation");
      }
      const item = this._groups.get(group.id);
      const view = this.gridview.remove(group, Sizing.Distribute);
      if (item && !(options === null || options === void 0 ? void 0 : options.skipDispose)) {
        item.disposable.dispose();
        item.value.dispose();
        this._groups.delete(group.id);
        this._onDidRemove.fire(group);
      }
      if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
        const groups = Array.from(this._groups.values());
        this.doSetGroupActive(groups.length > 0 ? groups[0].value : void 0);
      }
      return view;
    }
    getPanel(id) {
      var _a2;
      return (_a2 = this._groups.get(id)) === null || _a2 === void 0 ? void 0 : _a2.value;
    }
    doSetGroupActive(group) {
      if (this._activeGroup === group) {
        return;
      }
      if (this._activeGroup) {
        this._activeGroup.setActive(false);
      }
      if (group) {
        group.setActive(true);
      }
      this._activeGroup = group;
      this._onDidActiveChange.fire(group);
    }
    removeGroup(group) {
      this.doRemoveGroup(group);
    }
    moveToNext(options) {
      var _a2;
      if (!options) {
        options = {};
      }
      if (!options.group) {
        if (!this.activeGroup) {
          return;
        }
        options.group = this.activeGroup;
      }
      const location2 = getGridLocation(options.group.element);
      const next = (_a2 = this.gridview.next(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
      this.doSetGroupActive(next);
    }
    moveToPrevious(options) {
      var _a2;
      if (!options) {
        options = {};
      }
      if (!options.group) {
        if (!this.activeGroup) {
          return;
        }
        options.group = this.activeGroup;
      }
      const location2 = getGridLocation(options.group.element);
      const next = (_a2 = this.gridview.previous(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
      this.doSetGroupActive(next);
    }
    layout(width, height, forceResize) {
      const different = forceResize || width !== this.width || height !== this.height;
      if (!different) {
        return;
      }
      this.gridview.element.style.height = `${height}px`;
      this.gridview.element.style.width = `${width}px`;
      this.gridview.layout(width, height);
    }
    dispose() {
      this._onDidActiveChange.dispose();
      this._onDidAdd.dispose();
      this._onDidRemove.dispose();
      for (const group of this.groups) {
        group.dispose();
      }
      this.gridview.dispose();
      super.dispose();
    }
  }
  class SplitviewApi {
    get minimumSize() {
      return this.component.minimumSize;
    }
    get maximumSize() {
      return this.component.maximumSize;
    }
    get width() {
      return this.component.width;
    }
    get height() {
      return this.component.height;
    }
    get length() {
      return this.component.length;
    }
    get orientation() {
      return this.component.orientation;
    }
    get panels() {
      return this.component.panels;
    }
    get onDidLayoutFromJSON() {
      return this.component.onDidLayoutFromJSON;
    }
    get onDidLayoutChange() {
      return this.component.onDidLayoutChange;
    }
    get onDidAddView() {
      return this.component.onDidAddView;
    }
    get onDidRemoveView() {
      return this.component.onDidRemoveView;
    }
    constructor(component) {
      this.component = component;
    }
    removePanel(panel, sizing) {
      this.component.removePanel(panel, sizing);
    }
    focus() {
      this.component.focus();
    }
    getPanel(id) {
      return this.component.getPanel(id);
    }
    layout(width, height) {
      return this.component.layout(width, height);
    }
    addPanel(options) {
      return this.component.addPanel(options);
    }
    movePanel(from, to) {
      this.component.movePanel(from, to);
    }
    fromJSON(data) {
      this.component.fromJSON(data);
    }
    toJSON() {
      return this.component.toJSON();
    }
    clear() {
      this.component.clear();
    }
    updateOptions(options) {
      this.component.updateOptions(options);
    }
    dispose() {
      this.component.dispose();
    }
  }
  class PaneviewApi {
    get minimumSize() {
      return this.component.minimumSize;
    }
    get maximumSize() {
      return this.component.maximumSize;
    }
    get width() {
      return this.component.width;
    }
    get height() {
      return this.component.height;
    }
    get panels() {
      return this.component.panels;
    }
    get onDidLayoutChange() {
      return this.component.onDidLayoutChange;
    }
    get onDidLayoutFromJSON() {
      return this.component.onDidLayoutFromJSON;
    }
    get onDidAddView() {
      return this.component.onDidAddView;
    }
    get onDidRemoveView() {
      return this.component.onDidRemoveView;
    }
    get onDidDrop() {
      const emitter = new Emitter();
      const disposable = this.component.onDidDrop((e) => {
        emitter.fire(Object.assign(Object.assign({}, e), {
          api: this
        }));
      });
      emitter.dispose = () => {
        disposable.dispose();
        emitter.dispose();
      };
      return emitter.event;
    }
    constructor(component) {
      this.component = component;
    }
    removePanel(panel) {
      this.component.removePanel(panel);
    }
    getPanel(id) {
      return this.component.getPanel(id);
    }
    movePanel(from, to) {
      this.component.movePanel(from, to);
    }
    focus() {
      this.component.focus();
    }
    layout(width, height) {
      this.component.layout(width, height);
    }
    addPanel(options) {
      return this.component.addPanel(options);
    }
    fromJSON(data) {
      this.component.fromJSON(data);
    }
    toJSON() {
      return this.component.toJSON();
    }
    clear() {
      this.component.clear();
    }
    updateOptions(options) {
      this.component.updateOptions(options);
    }
    dispose() {
      this.component.dispose();
    }
  }
  class GridviewApi {
    get width() {
      return this.component.width;
    }
    get height() {
      return this.component.height;
    }
    get minimumHeight() {
      return this.component.minimumHeight;
    }
    get maximumHeight() {
      return this.component.maximumHeight;
    }
    get minimumWidth() {
      return this.component.minimumWidth;
    }
    get maximumWidth() {
      return this.component.maximumWidth;
    }
    get onDidLayoutChange() {
      return this.component.onDidLayoutChange;
    }
    get onDidAddPanel() {
      return this.component.onDidAddGroup;
    }
    get onDidRemovePanel() {
      return this.component.onDidRemoveGroup;
    }
    get onDidActivePanelChange() {
      return this.component.onDidActiveGroupChange;
    }
    get onDidLayoutFromJSON() {
      return this.component.onDidLayoutFromJSON;
    }
    get panels() {
      return this.component.groups;
    }
    get orientation() {
      return this.component.orientation;
    }
    set orientation(value) {
      this.component.updateOptions({
        orientation: value
      });
    }
    constructor(component) {
      this.component = component;
    }
    focus() {
      this.component.focus();
    }
    layout(width, height, force = false) {
      this.component.layout(width, height, force);
    }
    addPanel(options) {
      return this.component.addPanel(options);
    }
    removePanel(panel, sizing) {
      this.component.removePanel(panel, sizing);
    }
    movePanel(panel, options) {
      this.component.movePanel(panel, options);
    }
    getPanel(id) {
      return this.component.getPanel(id);
    }
    fromJSON(data) {
      return this.component.fromJSON(data);
    }
    toJSON() {
      return this.component.toJSON();
    }
    clear() {
      this.component.clear();
    }
    updateOptions(options) {
      this.component.updateOptions(options);
    }
    dispose() {
      this.component.dispose();
    }
  }
  class DockviewApi {
    get id() {
      return this.component.id;
    }
    get width() {
      return this.component.width;
    }
    get height() {
      return this.component.height;
    }
    get minimumHeight() {
      return this.component.minimumHeight;
    }
    get maximumHeight() {
      return this.component.maximumHeight;
    }
    get minimumWidth() {
      return this.component.minimumWidth;
    }
    get maximumWidth() {
      return this.component.maximumWidth;
    }
    get size() {
      return this.component.size;
    }
    get totalPanels() {
      return this.component.totalPanels;
    }
    get gap() {
      return this.component.gap;
    }
    get onDidActiveGroupChange() {
      return this.component.onDidActiveGroupChange;
    }
    get onDidAddGroup() {
      return this.component.onDidAddGroup;
    }
    get onDidRemoveGroup() {
      return this.component.onDidRemoveGroup;
    }
    get onDidActivePanelChange() {
      return this.component.onDidActivePanelChange;
    }
    get onDidAddPanel() {
      return this.component.onDidAddPanel;
    }
    get onDidRemovePanel() {
      return this.component.onDidRemovePanel;
    }
    get onDidMovePanel() {
      return this.component.onDidMovePanel;
    }
    get onDidLayoutFromJSON() {
      return this.component.onDidLayoutFromJSON;
    }
    get onDidLayoutChange() {
      return this.component.onDidLayoutChange;
    }
    get onDidDrop() {
      return this.component.onDidDrop;
    }
    get onWillDrop() {
      return this.component.onWillDrop;
    }
    get onWillShowOverlay() {
      return this.component.onWillShowOverlay;
    }
    get onWillDragGroup() {
      return this.component.onWillDragGroup;
    }
    get onWillDragPanel() {
      return this.component.onWillDragPanel;
    }
    get onUnhandledDragOverEvent() {
      return this.component.onUnhandledDragOverEvent;
    }
    get panels() {
      return this.component.panels;
    }
    get groups() {
      return this.component.groups;
    }
    get activePanel() {
      return this.component.activePanel;
    }
    get activeGroup() {
      return this.component.activeGroup;
    }
    constructor(component) {
      this.component = component;
    }
    focus() {
      this.component.focus();
    }
    getPanel(id) {
      return this.component.getGroupPanel(id);
    }
    layout(width, height, force = false) {
      this.component.layout(width, height, force);
    }
    addPanel(options) {
      return this.component.addPanel(options);
    }
    removePanel(panel) {
      this.component.removePanel(panel);
    }
    addGroup(options) {
      return this.component.addGroup(options);
    }
    closeAllGroups() {
      return this.component.closeAllGroups();
    }
    removeGroup(group) {
      this.component.removeGroup(group);
    }
    getGroup(id) {
      return this.component.getPanel(id);
    }
    addFloatingGroup(item, options) {
      return this.component.addFloatingGroup(item, options);
    }
    fromJSON(data) {
      this.component.fromJSON(data);
    }
    toJSON() {
      return this.component.toJSON();
    }
    clear() {
      this.component.clear();
    }
    moveToNext(options) {
      this.component.moveToNext(options);
    }
    moveToPrevious(options) {
      this.component.moveToPrevious(options);
    }
    maximizeGroup(panel) {
      this.component.maximizeGroup(panel.group);
    }
    hasMaximizedGroup() {
      return this.component.hasMaximizedGroup();
    }
    exitMaximizedGroup() {
      this.component.exitMaximizedGroup();
    }
    get onDidMaximizedGroupChange() {
      return this.component.onDidMaximizedGroupChange;
    }
    addPopoutGroup(item, options) {
      return this.component.addPopoutGroup(item, options);
    }
    setGap(gap) {
      this.component.updateOptions({
        gap
      });
    }
    updateOptions(options) {
      this.component.updateOptions(options);
    }
    dispose() {
      this.component.dispose();
    }
  }
  class DragHandler extends CompositeDisposable {
    constructor(el) {
      super();
      this.el = el;
      this.dataDisposable = new MutableDisposable();
      this.pointerEventsDisposable = new MutableDisposable();
      this._onDragStart = new Emitter();
      this.onDragStart = this._onDragStart.event;
      this.addDisposables(this._onDragStart, this.dataDisposable, this.pointerEventsDisposable);
      this.configure();
    }
    isCancelled(_event) {
      return false;
    }
    configure() {
      this.addDisposables(this._onDragStart, addDisposableListener(this.el, "dragstart", (event) => {
        if (event.defaultPrevented || this.isCancelled(event)) {
          event.preventDefault();
          return;
        }
        const iframes = disableIframePointEvents();
        this.pointerEventsDisposable.value = {
          dispose: () => {
            iframes.release();
          }
        };
        this.el.classList.add("dv-dragged");
        setTimeout(() => this.el.classList.remove("dv-dragged"), 0);
        this.dataDisposable.value = this.getData(event);
        this._onDragStart.fire(event);
        if (event.dataTransfer) {
          event.dataTransfer.effectAllowed = "move";
          const hasData = event.dataTransfer.items.length > 0;
          if (!hasData) {
            event.dataTransfer.setData("text/plain", "__dockview_internal_drag_event__");
          }
        }
      }), addDisposableListener(this.el, "dragend", () => {
        this.pointerEventsDisposable.dispose();
        this.dataDisposable.dispose();
      }));
    }
  }
  class DragAndDropObserver extends CompositeDisposable {
    constructor(element, callbacks) {
      super();
      this.element = element;
      this.callbacks = callbacks;
      this.target = null;
      this.registerListeners();
    }
    onDragEnter(e) {
      this.target = e.target;
      this.callbacks.onDragEnter(e);
    }
    onDragOver(e) {
      e.preventDefault();
      if (this.callbacks.onDragOver) {
        this.callbacks.onDragOver(e);
      }
    }
    onDragLeave(e) {
      if (this.target === e.target) {
        this.target = null;
        this.callbacks.onDragLeave(e);
      }
    }
    onDragEnd(e) {
      this.target = null;
      this.callbacks.onDragEnd(e);
    }
    onDrop(e) {
      this.callbacks.onDrop(e);
    }
    registerListeners() {
      this.addDisposables(addDisposableListener(this.element, "dragenter", (e) => {
        this.onDragEnter(e);
      }, true));
      this.addDisposables(addDisposableListener(this.element, "dragover", (e) => {
        this.onDragOver(e);
      }, true));
      this.addDisposables(addDisposableListener(this.element, "dragleave", (e) => {
        this.onDragLeave(e);
      }));
      this.addDisposables(addDisposableListener(this.element, "dragend", (e) => {
        this.onDragEnd(e);
      }));
      this.addDisposables(addDisposableListener(this.element, "drop", (e) => {
        this.onDrop(e);
      }));
    }
  }
  class WillShowOverlayEvent extends DockviewEvent {
    get nativeEvent() {
      return this.options.nativeEvent;
    }
    get position() {
      return this.options.position;
    }
    constructor(options) {
      super();
      this.options = options;
    }
  }
  function directionToPosition(direction) {
    switch (direction) {
      case "above":
        return "top";
      case "below":
        return "bottom";
      case "left":
        return "left";
      case "right":
        return "right";
      case "within":
        return "center";
      default:
        throw new Error(`invalid direction '${direction}'`);
    }
  }
  function positionToDirection(position) {
    switch (position) {
      case "top":
        return "above";
      case "bottom":
        return "below";
      case "left":
        return "left";
      case "right":
        return "right";
      case "center":
        return "within";
      default:
        throw new Error(`invalid position '${position}'`);
    }
  }
  const DEFAULT_ACTIVATION_SIZE = {
    value: 20,
    type: "percentage"
  };
  const DEFAULT_SIZE = {
    value: 50,
    type: "percentage"
  };
  const SMALL_WIDTH_BOUNDARY = 100;
  const SMALL_HEIGHT_BOUNDARY = 100;
  class Droptarget extends CompositeDisposable {
    get state() {
      return this._state;
    }
    constructor(element, options) {
      super();
      this.element = element;
      this.options = options;
      this._onDrop = new Emitter();
      this.onDrop = this._onDrop.event;
      this._onWillShowOverlay = new Emitter();
      this.onWillShowOverlay = this._onWillShowOverlay.event;
      this._acceptedTargetZonesSet = new Set(this.options.acceptedTargetZones);
      this.dnd = new DragAndDropObserver(this.element, {
        onDragEnter: () => void 0,
        onDragOver: (e) => {
          if (this._acceptedTargetZonesSet.size === 0) {
            this.removeDropTarget();
            return;
          }
          const width = this.element.clientWidth;
          const height = this.element.clientHeight;
          if (width === 0 || height === 0) {
            return;
          }
          const rect = e.currentTarget.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          const quadrant = this.calculateQuadrant(this._acceptedTargetZonesSet, x, y, width, height);
          if (this.isAlreadyUsed(e) || quadrant === null) {
            this.removeDropTarget();
            return;
          }
          if (!this.options.canDisplayOverlay(e, quadrant)) {
            this.removeDropTarget();
            return;
          }
          const willShowOverlayEvent = new WillShowOverlayEvent({
            nativeEvent: e,
            position: quadrant
          });
          this._onWillShowOverlay.fire(willShowOverlayEvent);
          if (willShowOverlayEvent.defaultPrevented) {
            this.removeDropTarget();
            return;
          }
          this.markAsUsed(e);
          if (!this.targetElement) {
            this.targetElement = document.createElement("div");
            this.targetElement.className = "drop-target-dropzone";
            this.overlayElement = document.createElement("div");
            this.overlayElement.className = "drop-target-selection";
            this._state = "center";
            this.targetElement.appendChild(this.overlayElement);
            this.element.classList.add("drop-target");
            this.element.append(this.targetElement);
          }
          this.toggleClasses(quadrant, width, height);
          this._state = quadrant;
        },
        onDragLeave: () => {
          this.removeDropTarget();
        },
        onDragEnd: () => {
          this.removeDropTarget();
        },
        onDrop: (e) => {
          e.preventDefault();
          const state = this._state;
          this.removeDropTarget();
          if (state) {
            e.stopPropagation();
            this._onDrop.fire({
              position: state,
              nativeEvent: e
            });
          }
        }
      });
      this.addDisposables(this._onDrop, this._onWillShowOverlay, this.dnd);
    }
    setTargetZones(acceptedTargetZones) {
      this._acceptedTargetZonesSet = new Set(acceptedTargetZones);
    }
    setOverlayModel(model) {
      this.options.overlayModel = model;
    }
    dispose() {
      this.removeDropTarget();
      super.dispose();
    }
    markAsUsed(event) {
      event[Droptarget.USED_EVENT_ID] = true;
    }
    isAlreadyUsed(event) {
      const value = event[Droptarget.USED_EVENT_ID];
      return typeof value === "boolean" && value;
    }
    toggleClasses(quadrant, width, height) {
      var _a2, _b;
      if (!this.overlayElement) {
        return;
      }
      const isSmallX = width < SMALL_WIDTH_BOUNDARY;
      const isSmallY = height < SMALL_HEIGHT_BOUNDARY;
      const isLeft = quadrant === "left";
      const isRight = quadrant === "right";
      const isTop = quadrant === "top";
      const isBottom = quadrant === "bottom";
      const rightClass = !isSmallX && isRight;
      const leftClass = !isSmallX && isLeft;
      const topClass = !isSmallY && isTop;
      const bottomClass = !isSmallY && isBottom;
      let size = 1;
      const sizeOptions = (_b = (_a2 = this.options.overlayModel) === null || _a2 === void 0 ? void 0 : _a2.size) !== null && _b !== void 0 ? _b : DEFAULT_SIZE;
      if (sizeOptions.type === "percentage") {
        size = clamp(sizeOptions.value, 0, 100) / 100;
      } else {
        if (rightClass || leftClass) {
          size = clamp(0, sizeOptions.value, width) / width;
        }
        if (topClass || bottomClass) {
          size = clamp(0, sizeOptions.value, height) / height;
        }
      }
      const box = {
        top: "0px",
        left: "0px",
        width: "100%",
        height: "100%"
      };
      if (rightClass) {
        box.left = `${100 * (1 - size)}%`;
        box.width = `${100 * size}%`;
      } else if (leftClass) {
        box.width = `${100 * size}%`;
      } else if (topClass) {
        box.height = `${100 * size}%`;
      } else if (bottomClass) {
        box.top = `${100 * (1 - size)}%`;
        box.height = `${100 * size}%`;
      }
      this.overlayElement.style.top = box.top;
      this.overlayElement.style.left = box.left;
      this.overlayElement.style.width = box.width;
      this.overlayElement.style.height = box.height;
      toggleClass(this.overlayElement, "dv-drop-target-small-vertical", isSmallY);
      toggleClass(this.overlayElement, "dv-drop-target-small-horizontal", isSmallX);
      toggleClass(this.overlayElement, "dv-drop-target-left", isLeft);
      toggleClass(this.overlayElement, "dv-drop-target-right", isRight);
      toggleClass(this.overlayElement, "dv-drop-target-top", isTop);
      toggleClass(this.overlayElement, "dv-drop-target-bottom", isBottom);
      toggleClass(this.overlayElement, "dv-drop-target-center", quadrant === "center");
    }
    calculateQuadrant(overlayType, x, y, width, height) {
      var _a2, _b;
      const activationSizeOptions = (_b = (_a2 = this.options.overlayModel) === null || _a2 === void 0 ? void 0 : _a2.activationSize) !== null && _b !== void 0 ? _b : DEFAULT_ACTIVATION_SIZE;
      const isPercentage = activationSizeOptions.type === "percentage";
      if (isPercentage) {
        return calculateQuadrantAsPercentage(overlayType, x, y, width, height, activationSizeOptions.value);
      }
      return calculateQuadrantAsPixels(overlayType, x, y, width, height, activationSizeOptions.value);
    }
    removeDropTarget() {
      if (this.targetElement) {
        this._state = void 0;
        this.element.removeChild(this.targetElement);
        this.targetElement = void 0;
        this.overlayElement = void 0;
        this.element.classList.remove("drop-target");
      }
    }
  }
  Droptarget.USED_EVENT_ID = "__dockview_droptarget_event_is_used__";
  function calculateQuadrantAsPercentage(overlayType, x, y, width, height, threshold) {
    const xp = 100 * x / width;
    const yp = 100 * y / height;
    if (overlayType.has("left") && xp < threshold) {
      return "left";
    }
    if (overlayType.has("right") && xp > 100 - threshold) {
      return "right";
    }
    if (overlayType.has("top") && yp < threshold) {
      return "top";
    }
    if (overlayType.has("bottom") && yp > 100 - threshold) {
      return "bottom";
    }
    if (!overlayType.has("center")) {
      return null;
    }
    return "center";
  }
  function calculateQuadrantAsPixels(overlayType, x, y, width, height, threshold) {
    if (overlayType.has("left") && x < threshold) {
      return "left";
    }
    if (overlayType.has("right") && x > width - threshold) {
      return "right";
    }
    if (overlayType.has("top") && y < threshold) {
      return "top";
    }
    if (overlayType.has("bottom") && y > height - threshold) {
      return "bottom";
    }
    if (!overlayType.has("center")) {
      return null;
    }
    return "center";
  }
  class WillFocusEvent extends DockviewEvent {
    constructor() {
      super();
    }
  }
  class PanelApiImpl extends CompositeDisposable {
    get isFocused() {
      return this._isFocused;
    }
    get isActive() {
      return this._isActive;
    }
    get isVisible() {
      return this._isVisible;
    }
    get width() {
      return this._width;
    }
    get height() {
      return this._height;
    }
    constructor(id, component) {
      super();
      this.id = id;
      this.component = component;
      this._isFocused = false;
      this._isActive = false;
      this._isVisible = true;
      this._width = 0;
      this._height = 0;
      this._parameters = {};
      this.panelUpdatesDisposable = new MutableDisposable();
      this._onDidDimensionChange = new Emitter();
      this.onDidDimensionsChange = this._onDidDimensionChange.event;
      this._onDidChangeFocus = new Emitter();
      this.onDidFocusChange = this._onDidChangeFocus.event;
      this._onWillFocus = new Emitter();
      this.onWillFocus = this._onWillFocus.event;
      this._onDidVisibilityChange = new Emitter();
      this.onDidVisibilityChange = this._onDidVisibilityChange.event;
      this._onWillVisibilityChange = new Emitter();
      this.onWillVisibilityChange = this._onWillVisibilityChange.event;
      this._onDidActiveChange = new Emitter();
      this.onDidActiveChange = this._onDidActiveChange.event;
      this._onActiveChange = new Emitter();
      this.onActiveChange = this._onActiveChange.event;
      this._onDidParametersChange = new Emitter();
      this.onDidParametersChange = this._onDidParametersChange.event;
      this.addDisposables(this.onDidFocusChange((event) => {
        this._isFocused = event.isFocused;
      }), this.onDidActiveChange((event) => {
        this._isActive = event.isActive;
      }), this.onDidVisibilityChange((event) => {
        this._isVisible = event.isVisible;
      }), this.onDidDimensionsChange((event) => {
        this._width = event.width;
        this._height = event.height;
      }), this.panelUpdatesDisposable, this._onDidDimensionChange, this._onDidChangeFocus, this._onDidVisibilityChange, this._onDidActiveChange, this._onWillFocus, this._onActiveChange, this._onWillFocus, this._onWillVisibilityChange, this._onDidParametersChange);
    }
    getParameters() {
      return this._parameters;
    }
    initialize(panel) {
      this.panelUpdatesDisposable.value = this._onDidParametersChange.event((parameters) => {
        this._parameters = parameters;
        panel.update({
          params: parameters
        });
      });
    }
    setVisible(isVisible) {
      this._onWillVisibilityChange.fire({
        isVisible
      });
    }
    setActive() {
      this._onActiveChange.fire();
    }
    updateParameters(parameters) {
      this._onDidParametersChange.fire(parameters);
    }
  }
  class SplitviewPanelApiImpl extends PanelApiImpl {
    constructor(id, component) {
      super(id, component);
      this._onDidConstraintsChangeInternal = new Emitter();
      this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
      this._onDidConstraintsChange = new Emitter({
        replay: true
      });
      this.onDidConstraintsChange = this._onDidConstraintsChange.event;
      this._onDidSizeChange = new Emitter();
      this.onDidSizeChange = this._onDidSizeChange.event;
      this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
    }
    setConstraints(value) {
      this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
      this._onDidSizeChange.fire(event);
    }
  }
  class PaneviewPanelApiImpl extends SplitviewPanelApiImpl {
    set pane(pane) {
      this._pane = pane;
    }
    constructor(id, component) {
      super(id, component);
      this._onDidExpansionChange = new Emitter({
        replay: true
      });
      this.onDidExpansionChange = this._onDidExpansionChange.event;
      this._onMouseEnter = new Emitter({});
      this.onMouseEnter = this._onMouseEnter.event;
      this._onMouseLeave = new Emitter({});
      this.onMouseLeave = this._onMouseLeave.event;
      this.addDisposables(this._onDidExpansionChange, this._onMouseEnter, this._onMouseLeave);
    }
    setExpanded(isExpanded) {
      var _a2;
      (_a2 = this._pane) === null || _a2 === void 0 ? void 0 : _a2.setExpanded(isExpanded);
    }
    get isExpanded() {
      var _a2;
      return !!((_a2 = this._pane) === null || _a2 === void 0 ? void 0 : _a2.isExpanded());
    }
  }
  class BasePanelView extends CompositeDisposable {
    get element() {
      return this._element;
    }
    get width() {
      return this._width;
    }
    get height() {
      return this._height;
    }
    get params() {
      var _a2;
      return (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params;
    }
    constructor(id, component, api) {
      super();
      this.id = id;
      this.component = component;
      this.api = api;
      this._height = 0;
      this._width = 0;
      this._element = document.createElement("div");
      this._element.tabIndex = -1;
      this._element.style.outline = "none";
      this._element.style.height = "100%";
      this._element.style.width = "100%";
      this._element.style.overflow = "hidden";
      const focusTracker = trackFocus(this._element);
      this.addDisposables(this.api, focusTracker.onDidFocus(() => {
        this.api._onDidChangeFocus.fire({
          isFocused: true
        });
      }), focusTracker.onDidBlur(() => {
        this.api._onDidChangeFocus.fire({
          isFocused: false
        });
      }), focusTracker);
    }
    focus() {
      const event = new WillFocusEvent();
      this.api._onWillFocus.fire(event);
      if (event.defaultPrevented) {
        return;
      }
      this._element.focus();
    }
    layout(width, height) {
      this._width = width;
      this._height = height;
      this.api._onDidDimensionChange.fire({
        width,
        height
      });
      if (this.part) {
        if (this._params) {
          this.part.update(this._params.params);
        }
      }
    }
    init(parameters) {
      this._params = parameters;
      this.part = this.getComponent();
    }
    update(event) {
      var _a2, _b;
      this._params = Object.assign(Object.assign({}, this._params), {
        params: Object.assign(Object.assign({}, (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params), event.params)
      });
      for (const key of Object.keys(event.params)) {
        if (event.params[key] === void 0) {
          delete this._params.params[key];
        }
      }
      (_b = this.part) === null || _b === void 0 ? void 0 : _b.update({
        params: this._params.params
      });
    }
    toJSON() {
      var _a2, _b;
      const params = (_b = (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params) !== null && _b !== void 0 ? _b : {};
      return {
        id: this.id,
        component: this.component,
        params: Object.keys(params).length > 0 ? params : void 0
      };
    }
    dispose() {
      var _a2;
      this.api.dispose();
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
      super.dispose();
    }
  }
  class PaneviewPanel extends BasePanelView {
    set orientation(value) {
      this._orientation = value;
    }
    get orientation() {
      return this._orientation;
    }
    get minimumSize() {
      const headerSize = this.headerSize;
      const expanded = this.isExpanded();
      const minimumBodySize = expanded ? this._minimumBodySize : 0;
      return headerSize + minimumBodySize;
    }
    get maximumSize() {
      const headerSize = this.headerSize;
      const expanded = this.isExpanded();
      const maximumBodySize = expanded ? this._maximumBodySize : 0;
      return headerSize + maximumBodySize;
    }
    get size() {
      return this._size;
    }
    get orthogonalSize() {
      return this._orthogonalSize;
    }
    set orthogonalSize(size) {
      this._orthogonalSize = size;
    }
    get minimumBodySize() {
      return this._minimumBodySize;
    }
    set minimumBodySize(value) {
      this._minimumBodySize = typeof value === "number" ? value : 0;
    }
    get maximumBodySize() {
      return this._maximumBodySize;
    }
    set maximumBodySize(value) {
      this._maximumBodySize = typeof value === "number" ? value : Number.POSITIVE_INFINITY;
    }
    get headerVisible() {
      return this._headerVisible;
    }
    set headerVisible(value) {
      this._headerVisible = value;
      this.header.style.display = value ? "" : "none";
    }
    constructor(id, component, headerComponent, orientation, isExpanded, isHeaderVisible) {
      super(id, component, new PaneviewPanelApiImpl(id, component));
      this.headerComponent = headerComponent;
      this._onDidChangeExpansionState = new Emitter({
        replay: true
      });
      this.onDidChangeExpansionState = this._onDidChangeExpansionState.event;
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this.headerSize = 22;
      this._orthogonalSize = 0;
      this._size = 0;
      this._minimumBodySize = 100;
      this._maximumBodySize = Number.POSITIVE_INFINITY;
      this._isExpanded = false;
      this.expandedSize = 0;
      this.api.pane = this;
      this.api.initialize(this);
      this._isExpanded = isExpanded;
      this._headerVisible = isHeaderVisible;
      this._onDidChangeExpansionState.fire(this.isExpanded());
      this._orientation = orientation;
      this.element.classList.add("pane");
      this.addDisposables(this.api.onWillVisibilityChange((event) => {
        const { isVisible } = event;
        const { accessor } = this._params;
        accessor.setVisible(this, isVisible);
      }), this.api.onDidSizeChange((event) => {
        this._onDidChange.fire({
          size: event.size
        });
      }), addDisposableListener(this.element, "mouseenter", (ev) => {
        this.api._onMouseEnter.fire(ev);
      }), addDisposableListener(this.element, "mouseleave", (ev) => {
        this.api._onMouseLeave.fire(ev);
      }));
      this.addDisposables(this._onDidChangeExpansionState, this.onDidChangeExpansionState((isPanelExpanded) => {
        this.api._onDidExpansionChange.fire({
          isExpanded: isPanelExpanded
        });
      }), this.api.onDidFocusChange((e) => {
        if (!this.header) {
          return;
        }
        if (e.isFocused) {
          addClasses(this.header, "focused");
        } else {
          removeClasses(this.header, "focused");
        }
      }));
      this.renderOnce();
    }
    setVisible(isVisible) {
      this.api._onDidVisibilityChange.fire({
        isVisible
      });
    }
    setActive(isActive) {
      this.api._onDidActiveChange.fire({
        isActive
      });
    }
    isExpanded() {
      return this._isExpanded;
    }
    setExpanded(expanded) {
      if (this._isExpanded === expanded) {
        return;
      }
      this._isExpanded = expanded;
      if (expanded) {
        if (this.animationTimer) {
          clearTimeout(this.animationTimer);
        }
        if (this.body) {
          this.element.appendChild(this.body);
        }
      } else {
        this.animationTimer = setTimeout(() => {
          var _a2;
          (_a2 = this.body) === null || _a2 === void 0 ? void 0 : _a2.remove();
        }, 200);
      }
      this._onDidChange.fire(expanded ? {
        size: this.width
      } : {});
      this._onDidChangeExpansionState.fire(expanded);
    }
    layout(size, orthogonalSize) {
      this._size = size;
      this._orthogonalSize = orthogonalSize;
      const [width, height] = this.orientation === Orientation.HORIZONTAL ? [
        size,
        orthogonalSize
      ] : [
        orthogonalSize,
        size
      ];
      if (this.isExpanded()) {
        this.expandedSize = width;
      }
      super.layout(width, height);
    }
    init(parameters) {
      var _a2, _b;
      super.init(parameters);
      if (typeof parameters.minimumBodySize === "number") {
        this.minimumBodySize = parameters.minimumBodySize;
      }
      if (typeof parameters.maximumBodySize === "number") {
        this.maximumBodySize = parameters.maximumBodySize;
      }
      this.bodyPart = this.getBodyComponent();
      this.headerPart = this.getHeaderComponent();
      this.bodyPart.init(Object.assign(Object.assign({}, parameters), {
        api: this.api
      }));
      this.headerPart.init(Object.assign(Object.assign({}, parameters), {
        api: this.api
      }));
      (_a2 = this.body) === null || _a2 === void 0 ? void 0 : _a2.append(this.bodyPart.element);
      (_b = this.header) === null || _b === void 0 ? void 0 : _b.append(this.headerPart.element);
      if (typeof parameters.isExpanded === "boolean") {
        this.setExpanded(parameters.isExpanded);
      }
    }
    toJSON() {
      const params = this._params;
      return Object.assign(Object.assign({}, super.toJSON()), {
        headerComponent: this.headerComponent,
        title: params.title
      });
    }
    renderOnce() {
      this.header = document.createElement("div");
      this.header.tabIndex = 0;
      this.header.className = "pane-header";
      this.header.style.height = `${this.headerSize}px`;
      this.header.style.lineHeight = `${this.headerSize}px`;
      this.header.style.minHeight = `${this.headerSize}px`;
      this.header.style.maxHeight = `${this.headerSize}px`;
      this.element.appendChild(this.header);
      this.body = document.createElement("div");
      this.body.className = "pane-body";
      this.element.appendChild(this.body);
    }
    getComponent() {
      return {
        update: (params) => {
          var _a2, _b;
          (_a2 = this.bodyPart) === null || _a2 === void 0 ? void 0 : _a2.update({
            params
          });
          (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.update({
            params
          });
        },
        dispose: () => {
          var _a2, _b;
          (_a2 = this.bodyPart) === null || _a2 === void 0 ? void 0 : _a2.dispose();
          (_b = this.headerPart) === null || _b === void 0 ? void 0 : _b.dispose();
        }
      };
    }
  }
  class DraggablePaneviewPanel extends PaneviewPanel {
    constructor(accessor, id, component, headerComponent, orientation, isExpanded, disableDnd) {
      super(id, component, headerComponent, orientation, isExpanded, true);
      this.accessor = accessor;
      this._onDidDrop = new Emitter();
      this.onDidDrop = this._onDidDrop.event;
      if (!disableDnd) {
        this.initDragFeatures();
      }
    }
    initDragFeatures() {
      if (!this.header) {
        return;
      }
      const id = this.id;
      const accessorId = this.accessor.id;
      this.header.draggable = true;
      this.handler = new class PaneDragHandler extends DragHandler {
        getData() {
          LocalSelectionTransfer.getInstance().setData([
            new PaneTransfer(accessorId, id)
          ], PaneTransfer.prototype);
          return {
            dispose: () => {
              LocalSelectionTransfer.getInstance().clearData(PaneTransfer.prototype);
            }
          };
        }
      }(this.header);
      this.target = new Droptarget(this.element, {
        acceptedTargetZones: [
          "top",
          "bottom"
        ],
        overlayModel: {
          activationSize: {
            type: "percentage",
            value: 50
          }
        },
        canDisplayOverlay: (event) => {
          const data = getPaneData();
          if (data) {
            if (data.paneId !== this.id && data.viewId === this.accessor.id) {
              return true;
            }
          }
          if (this.accessor.options.showDndOverlay) {
            return this.accessor.options.showDndOverlay({
              nativeEvent: event,
              getData: getPaneData,
              panel: this
            });
          }
          return false;
        }
      });
      this.addDisposables(this._onDidDrop, this.handler, this.target, this.target.onDrop((event) => {
        this.onDrop(event);
      }));
    }
    onDrop(event) {
      const data = getPaneData();
      if (!data || data.viewId !== this.accessor.id) {
        this._onDidDrop.fire(Object.assign(Object.assign({}, event), {
          panel: this,
          api: new PaneviewApi(this.accessor),
          getData: getPaneData
        }));
        return;
      }
      const containerApi = this._params.containerApi;
      const panelId = data.paneId;
      const existingPanel = containerApi.getPanel(panelId);
      if (!existingPanel) {
        this._onDidDrop.fire(Object.assign(Object.assign({}, event), {
          panel: this,
          getData: getPaneData,
          api: new PaneviewApi(this.accessor)
        }));
        return;
      }
      const allPanels = containerApi.panels;
      const fromIndex = allPanels.indexOf(existingPanel);
      let toIndex = containerApi.panels.indexOf(this);
      if (event.position === "left" || event.position === "top") {
        toIndex = Math.max(0, toIndex - 1);
      }
      if (event.position === "right" || event.position === "bottom") {
        if (fromIndex > toIndex) {
          toIndex++;
        }
        toIndex = Math.min(allPanels.length - 1, toIndex);
      }
      containerApi.movePanel(fromIndex, toIndex);
    }
  }
  class ContentContainer extends CompositeDisposable {
    get element() {
      return this._element;
    }
    constructor(accessor, group) {
      super();
      this.accessor = accessor;
      this.group = group;
      this.disposable = new MutableDisposable();
      this._onDidFocus = new Emitter();
      this.onDidFocus = this._onDidFocus.event;
      this._onDidBlur = new Emitter();
      this.onDidBlur = this._onDidBlur.event;
      this._element = document.createElement("div");
      this._element.className = "content-container";
      this._element.tabIndex = -1;
      this.addDisposables(this._onDidFocus, this._onDidBlur);
      this.dropTarget = new Droptarget(this.element, {
        acceptedTargetZones: [
          "top",
          "bottom",
          "left",
          "right",
          "center"
        ],
        canDisplayOverlay: (event, position) => {
          if (this.group.locked === "no-drop-target" || this.group.locked && position === "center") {
            return false;
          }
          const data = getPanelData();
          if (!data && event.shiftKey && this.group.location.type !== "floating") {
            return false;
          }
          if (data && data.viewId === this.accessor.id) {
            if (data.groupId === this.group.id) {
              if (position === "center") {
                return false;
              }
              if (data.panelId === null) {
                return false;
              }
            }
            const groupHasOnePanelAndIsActiveDragElement = this.group.panels.length === 1 && data.groupId === this.group.id;
            return !groupHasOnePanelAndIsActiveDragElement;
          }
          return this.group.canDisplayOverlay(event, position, "content");
        }
      });
      this.addDisposables(this.dropTarget);
    }
    show() {
      this.element.style.display = "";
    }
    hide() {
      this.element.style.display = "none";
    }
    renderPanel(panel, options = {
      asActive: true
    }) {
      const doRender = options.asActive || this.panel && this.group.isPanelActive(this.panel);
      if (this.panel && this.panel.view.content.element.parentElement === this._element) {
        this._element.removeChild(this.panel.view.content.element);
      }
      this.panel = panel;
      let container;
      switch (panel.api.renderer) {
        case "onlyWhenVisible":
          this.group.renderContainer.detatch(panel);
          if (this.panel) {
            if (doRender) {
              this._element.appendChild(this.panel.view.content.element);
            }
          }
          container = this._element;
          break;
        case "always":
          if (panel.view.content.element.parentElement === this._element) {
            this._element.removeChild(panel.view.content.element);
          }
          container = this.group.renderContainer.attach({
            panel,
            referenceContainer: this
          });
          break;
      }
      if (doRender) {
        const focusTracker = trackFocus(container);
        const disposable = new CompositeDisposable();
        disposable.addDisposables(focusTracker, focusTracker.onDidFocus(() => this._onDidFocus.fire()), focusTracker.onDidBlur(() => this._onDidBlur.fire()));
        this.disposable.value = disposable;
      }
    }
    openPanel(panel) {
      if (this.panel === panel) {
        return;
      }
      this.renderPanel(panel);
    }
    layout(_width, _height) {
    }
    closePanel() {
      var _a2;
      if (this.panel) {
        if (this.panel.api.renderer === "onlyWhenVisible") {
          (_a2 = this.panel.view.content.element.parentElement) === null || _a2 === void 0 ? void 0 : _a2.removeChild(this.panel.view.content.element);
        }
      }
      this.panel = void 0;
    }
    dispose() {
      this.disposable.dispose();
      super.dispose();
    }
  }
  class TabDragHandler extends DragHandler {
    constructor(element, accessor, group, panel) {
      super(element);
      this.accessor = accessor;
      this.group = group;
      this.panel = panel;
      this.panelTransfer = LocalSelectionTransfer.getInstance();
    }
    getData(event) {
      this.panelTransfer.setData([
        new PanelTransfer(this.accessor.id, this.group.id, this.panel.id)
      ], PanelTransfer.prototype);
      return {
        dispose: () => {
          this.panelTransfer.clearData(PanelTransfer.prototype);
        }
      };
    }
  }
  class Tab extends CompositeDisposable {
    get element() {
      return this._element;
    }
    constructor(panel, accessor, group) {
      super();
      this.panel = panel;
      this.accessor = accessor;
      this.group = group;
      this.content = void 0;
      this._onChanged = new Emitter();
      this.onChanged = this._onChanged.event;
      this._onDropped = new Emitter();
      this.onDrop = this._onDropped.event;
      this._onDragStart = new Emitter();
      this.onDragStart = this._onDragStart.event;
      this._element = document.createElement("div");
      this._element.className = "tab";
      this._element.tabIndex = 0;
      this._element.draggable = true;
      toggleClass(this.element, "inactive-tab", true);
      const dragHandler = new TabDragHandler(this._element, this.accessor, this.group, this.panel);
      this.dropTarget = new Droptarget(this._element, {
        acceptedTargetZones: [
          "center"
        ],
        canDisplayOverlay: (event, position) => {
          if (this.group.locked) {
            return false;
          }
          const data = getPanelData();
          if (data && this.accessor.id === data.viewId) {
            if (data.panelId === null && data.groupId === this.group.id) {
              return false;
            }
            return this.panel.id !== data.panelId;
          }
          return this.group.model.canDisplayOverlay(event, position, "tab");
        }
      });
      this.onWillShowOverlay = this.dropTarget.onWillShowOverlay;
      this.addDisposables(this._onChanged, this._onDropped, this._onDragStart, dragHandler.onDragStart((event) => {
        this._onDragStart.fire(event);
      }), dragHandler, addDisposableListener(this._element, "pointerdown", (event) => {
        if (event.defaultPrevented) {
          return;
        }
        this._onChanged.fire(event);
      }), this.dropTarget.onDrop((event) => {
        this._onDropped.fire(event);
      }), this.dropTarget);
    }
    setActive(isActive) {
      toggleClass(this.element, "active-tab", isActive);
      toggleClass(this.element, "inactive-tab", !isActive);
    }
    setContent(part) {
      if (this.content) {
        this._element.removeChild(this.content.element);
      }
      this.content = part;
      this._element.appendChild(this.content.element);
    }
    dispose() {
      super.dispose();
    }
  }
  function addGhostImage(dataTransfer, ghostElement) {
    addClasses(ghostElement, "dv-dragged");
    document.body.appendChild(ghostElement);
    dataTransfer.setDragImage(ghostElement, 0, 0);
    setTimeout(() => {
      removeClasses(ghostElement, "dv-dragged");
      ghostElement.remove();
    }, 0);
  }
  class GroupDragHandler extends DragHandler {
    constructor(element, accessor, group) {
      super(element);
      this.accessor = accessor;
      this.group = group;
      this.panelTransfer = LocalSelectionTransfer.getInstance();
      this.addDisposables(addDisposableListener(element, "pointerdown", (e) => {
        if (e.shiftKey) {
          quasiPreventDefault(e);
        }
      }, true));
    }
    isCancelled(_event) {
      if (this.group.api.location.type === "floating" && !_event.shiftKey) {
        return true;
      }
      return false;
    }
    getData(dragEvent) {
      const dataTransfer = dragEvent.dataTransfer;
      this.panelTransfer.setData([
        new PanelTransfer(this.accessor.id, this.group.id, null)
      ], PanelTransfer.prototype);
      const style = window.getComputedStyle(this.el);
      const bgColor = style.getPropertyValue("--dv-activegroup-visiblepanel-tab-background-color");
      const color = style.getPropertyValue("--dv-activegroup-visiblepanel-tab-color");
      if (dataTransfer) {
        const ghostElement = document.createElement("div");
        ghostElement.style.backgroundColor = bgColor;
        ghostElement.style.color = color;
        ghostElement.style.padding = "2px 8px";
        ghostElement.style.height = "24px";
        ghostElement.style.fontSize = "11px";
        ghostElement.style.lineHeight = "20px";
        ghostElement.style.borderRadius = "12px";
        ghostElement.style.position = "absolute";
        ghostElement.textContent = `Multiple Panels (${this.group.size})`;
        addGhostImage(dataTransfer, ghostElement);
      }
      return {
        dispose: () => {
          this.panelTransfer.clearData(PanelTransfer.prototype);
        }
      };
    }
  }
  class VoidContainer extends CompositeDisposable {
    get element() {
      return this._element;
    }
    constructor(accessor, group) {
      super();
      this.accessor = accessor;
      this.group = group;
      this._onDrop = new Emitter();
      this.onDrop = this._onDrop.event;
      this._onDragStart = new Emitter();
      this.onDragStart = this._onDragStart.event;
      this._element = document.createElement("div");
      this._element.className = "void-container";
      this._element.tabIndex = 0;
      this._element.draggable = true;
      this.addDisposables(this._onDrop, this._onDragStart, addDisposableListener(this._element, "pointerdown", () => {
        this.accessor.doSetGroupActive(this.group);
      }));
      const handler = new GroupDragHandler(this._element, accessor, group);
      this.dropTraget = new Droptarget(this._element, {
        acceptedTargetZones: [
          "center"
        ],
        canDisplayOverlay: (event, position) => {
          var _a2;
          const data = getPanelData();
          if (data && this.accessor.id === data.viewId) {
            if (data.panelId === null && data.groupId === this.group.id) {
              return false;
            }
            return ((_a2 = last(this.group.panels)) === null || _a2 === void 0 ? void 0 : _a2.id) !== data.panelId;
          }
          return group.model.canDisplayOverlay(event, position, "header_space");
        }
      });
      this.onWillShowOverlay = this.dropTraget.onWillShowOverlay;
      this.addDisposables(handler, handler.onDragStart((event) => {
        this._onDragStart.fire(event);
      }), this.dropTraget.onDrop((event) => {
        this._onDrop.fire(event);
      }), this.dropTraget);
    }
  }
  class TabsContainer extends CompositeDisposable {
    get panels() {
      return this.tabs.map((_2) => _2.value.panel.id);
    }
    get size() {
      return this.tabs.length;
    }
    get hidden() {
      return this._hidden;
    }
    set hidden(value) {
      this._hidden = value;
      this.element.style.display = value ? "none" : "";
    }
    show() {
      if (!this.hidden) {
        this.element.style.display = "";
      }
    }
    hide() {
      this._element.style.display = "none";
    }
    setRightActionsElement(element) {
      if (this.rightActions === element) {
        return;
      }
      if (this.rightActions) {
        this.rightActions.remove();
        this.rightActions = void 0;
      }
      if (element) {
        this.rightActionsContainer.appendChild(element);
        this.rightActions = element;
      }
    }
    setLeftActionsElement(element) {
      if (this.leftActions === element) {
        return;
      }
      if (this.leftActions) {
        this.leftActions.remove();
        this.leftActions = void 0;
      }
      if (element) {
        this.leftActionsContainer.appendChild(element);
        this.leftActions = element;
      }
    }
    setPrefixActionsElement(element) {
      if (this.preActions === element) {
        return;
      }
      if (this.preActions) {
        this.preActions.remove();
        this.preActions = void 0;
      }
      if (element) {
        this.preActionsContainer.appendChild(element);
        this.preActions = element;
      }
    }
    get element() {
      return this._element;
    }
    isActive(tab) {
      return this.selectedIndex > -1 && this.tabs[this.selectedIndex].value === tab;
    }
    indexOf(id) {
      return this.tabs.findIndex((tab) => tab.value.panel.id === id);
    }
    constructor(accessor, group) {
      super();
      this.accessor = accessor;
      this.group = group;
      this.tabs = [];
      this.selectedIndex = -1;
      this._hidden = false;
      this._onDrop = new Emitter();
      this.onDrop = this._onDrop.event;
      this._onTabDragStart = new Emitter();
      this.onTabDragStart = this._onTabDragStart.event;
      this._onGroupDragStart = new Emitter();
      this.onGroupDragStart = this._onGroupDragStart.event;
      this._onWillShowOverlay = new Emitter();
      this.onWillShowOverlay = this._onWillShowOverlay.event;
      this._element = document.createElement("div");
      this._element.className = "tabs-and-actions-container";
      toggleClass(this._element, "dv-full-width-single-tab", this.accessor.options.singleTabMode === "fullwidth");
      this.rightActionsContainer = document.createElement("div");
      this.rightActionsContainer.className = "right-actions-container";
      this.leftActionsContainer = document.createElement("div");
      this.leftActionsContainer.className = "left-actions-container";
      this.preActionsContainer = document.createElement("div");
      this.preActionsContainer.className = "pre-actions-container";
      this.tabContainer = document.createElement("div");
      this.tabContainer.className = "tabs-container";
      this.voidContainer = new VoidContainer(this.accessor, this.group);
      this._element.appendChild(this.preActionsContainer);
      this._element.appendChild(this.tabContainer);
      this._element.appendChild(this.leftActionsContainer);
      this._element.appendChild(this.voidContainer.element);
      this._element.appendChild(this.rightActionsContainer);
      this.addDisposables(this.accessor.onDidAddPanel((e) => {
        if (e.api.group === this.group) {
          toggleClass(this._element, "dv-single-tab", this.size === 1);
        }
      }), this.accessor.onDidRemovePanel((e) => {
        if (e.api.group === this.group) {
          toggleClass(this._element, "dv-single-tab", this.size === 1);
        }
      }), this._onWillShowOverlay, this._onDrop, this._onTabDragStart, this._onGroupDragStart, this.voidContainer, this.voidContainer.onDragStart((event) => {
        this._onGroupDragStart.fire({
          nativeEvent: event,
          group: this.group
        });
      }), this.voidContainer.onDrop((event) => {
        this._onDrop.fire({
          event: event.nativeEvent,
          index: this.tabs.length
        });
      }), this.voidContainer.onWillShowOverlay((event) => {
        this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {
          kind: "header_space",
          panel: this.group.activePanel,
          api: this.accessor.api,
          group: this.group,
          getData: getPanelData
        }));
      }), addDisposableListener(this.voidContainer.element, "pointerdown", (event) => {
        const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
        if (isFloatingGroupsEnabled && event.shiftKey && this.group.api.location.type !== "floating") {
          event.preventDefault();
          const { top, left } = this.element.getBoundingClientRect();
          const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
          this.accessor.addFloatingGroup(this.group, {
            x: left - rootLeft + 20,
            y: top - rootTop + 20,
            inDragMode: true
          });
        }
      }), addDisposableListener(this.tabContainer, "pointerdown", (event) => {
        if (event.defaultPrevented) {
          return;
        }
        const isLeftClick = event.button === 0;
        if (isLeftClick) {
          this.accessor.doSetGroupActive(this.group);
        }
      }));
    }
    setActive(_isGroupActive) {
    }
    addTab(tab, index2 = this.tabs.length) {
      if (index2 < 0 || index2 > this.tabs.length) {
        throw new Error("invalid location");
      }
      this.tabContainer.insertBefore(tab.value.element, this.tabContainer.children[index2]);
      this.tabs = [
        ...this.tabs.slice(0, index2),
        tab,
        ...this.tabs.slice(index2)
      ];
      if (this.selectedIndex < 0) {
        this.selectedIndex = index2;
      }
    }
    delete(id) {
      const index2 = this.tabs.findIndex((tab) => tab.value.panel.id === id);
      const tabToRemove = this.tabs.splice(index2, 1)[0];
      const { value, disposable } = tabToRemove;
      disposable.dispose();
      value.dispose();
      value.element.remove();
    }
    setActivePanel(panel) {
      this.tabs.forEach((tab) => {
        const isActivePanel = panel.id === tab.value.panel.id;
        tab.value.setActive(isActivePanel);
      });
    }
    openPanel(panel, index2 = this.tabs.length) {
      var _a2;
      if (this.tabs.find((tab2) => tab2.value.panel.id === panel.id)) {
        return;
      }
      const tab = new Tab(panel, this.accessor, this.group);
      if (!((_a2 = panel.view) === null || _a2 === void 0 ? void 0 : _a2.tab)) {
        throw new Error("invalid header component");
      }
      tab.setContent(panel.view.tab);
      const disposable = new CompositeDisposable(tab.onDragStart((event) => {
        this._onTabDragStart.fire({
          nativeEvent: event,
          panel
        });
      }), tab.onChanged((event) => {
        const isFloatingGroupsEnabled = !this.accessor.options.disableFloatingGroups;
        const isFloatingWithOnePanel = this.group.api.location.type === "floating" && this.size === 1;
        if (isFloatingGroupsEnabled && !isFloatingWithOnePanel && event.shiftKey) {
          event.preventDefault();
          const panel2 = this.accessor.getGroupPanel(tab.panel.id);
          const { top, left } = tab.element.getBoundingClientRect();
          const { top: rootTop, left: rootLeft } = this.accessor.element.getBoundingClientRect();
          this.accessor.addFloatingGroup(panel2, {
            x: left - rootLeft,
            y: top - rootTop,
            inDragMode: true
          });
          return;
        }
        const isLeftClick = event.button === 0;
        if (!isLeftClick || event.defaultPrevented) {
          return;
        }
        if (this.group.activePanel !== panel) {
          this.group.model.openPanel(panel);
        }
      }), tab.onDrop((event) => {
        this._onDrop.fire({
          event: event.nativeEvent,
          index: this.tabs.findIndex((x) => x.value === tab)
        });
      }), tab.onWillShowOverlay((event) => {
        this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {
          kind: "tab",
          panel: this.group.activePanel,
          api: this.accessor.api,
          group: this.group,
          getData: getPanelData
        }));
      }));
      const value = {
        value: tab,
        disposable
      };
      this.addTab(value, index2);
    }
    closePanel(panel) {
      this.delete(panel.id);
    }
    dispose() {
      super.dispose();
      for (const { value, disposable } of this.tabs) {
        disposable.dispose();
        value.dispose();
      }
      this.tabs = [];
    }
  }
  class DockviewUnhandledDragOverEvent {
    get isAccepted() {
      return this._isAccepted;
    }
    constructor(nativeEvent, target, position, getData, group) {
      this.nativeEvent = nativeEvent;
      this.target = target;
      this.position = position;
      this.getData = getData;
      this.group = group;
      this._isAccepted = false;
    }
    accept() {
      this._isAccepted = true;
    }
  }
  const PROPERTY_KEYS = (() => {
    const properties = {
      disableAutoResizing: void 0,
      hideBorders: void 0,
      singleTabMode: void 0,
      disableFloatingGroups: void 0,
      floatingGroupBounds: void 0,
      popoutUrl: void 0,
      defaultRenderer: void 0,
      debug: void 0,
      rootOverlayModel: void 0,
      locked: void 0,
      disableDnd: void 0,
      gap: void 0,
      className: void 0
    };
    return Object.keys(properties);
  })();
  function isPanelOptionsWithPanel(data) {
    if (data.referencePanel) {
      return true;
    }
    return false;
  }
  function isPanelOptionsWithGroup(data) {
    if (data.referenceGroup) {
      return true;
    }
    return false;
  }
  function isGroupOptionsWithPanel(data) {
    if (data.referencePanel) {
      return true;
    }
    return false;
  }
  function isGroupOptionsWithGroup(data) {
    if (data.referenceGroup) {
      return true;
    }
    return false;
  }
  class DockviewDidDropEvent extends DockviewEvent {
    get nativeEvent() {
      return this.options.nativeEvent;
    }
    get position() {
      return this.options.position;
    }
    get panel() {
      return this.options.panel;
    }
    get group() {
      return this.options.group;
    }
    get api() {
      return this.options.api;
    }
    constructor(options) {
      super();
      this.options = options;
    }
    getData() {
      return this.options.getData();
    }
  }
  class DockviewWillDropEvent extends DockviewDidDropEvent {
    get kind() {
      return this._kind;
    }
    constructor(options) {
      super(options);
      this._kind = options.kind;
    }
  }
  class WillShowOverlayLocationEvent {
    get kind() {
      return this.options.kind;
    }
    get nativeEvent() {
      return this.event.nativeEvent;
    }
    get position() {
      return this.event.position;
    }
    get defaultPrevented() {
      return this.event.defaultPrevented;
    }
    get panel() {
      return this.options.panel;
    }
    get api() {
      return this.options.api;
    }
    get group() {
      return this.options.group;
    }
    preventDefault() {
      this.event.preventDefault();
    }
    getData() {
      return this.options.getData();
    }
    constructor(event, options) {
      this.event = event;
      this.options = options;
    }
  }
  class DockviewGroupPanelModel extends CompositeDisposable {
    get element() {
      throw new Error("not supported");
    }
    get activePanel() {
      return this._activePanel;
    }
    get locked() {
      return this._locked;
    }
    set locked(value) {
      this._locked = value;
      toggleClass(this.container, "locked-groupview", value === "no-drop-target" || value);
    }
    get isActive() {
      return this._isGroupActive;
    }
    get panels() {
      return this._panels;
    }
    get size() {
      return this._panels.length;
    }
    get isEmpty() {
      return this._panels.length === 0;
    }
    get hasWatermark() {
      return !!(this.watermark && this.container.contains(this.watermark.element));
    }
    get header() {
      return this.tabsContainer;
    }
    get isContentFocused() {
      if (!document.activeElement) {
        return false;
      }
      return isAncestor(document.activeElement, this.contentContainer.element);
    }
    get location() {
      return this._location;
    }
    set location(value) {
      this._location = value;
      toggleClass(this.container, "dv-groupview-floating", false);
      toggleClass(this.container, "dv-groupview-popout", false);
      switch (value.type) {
        case "grid":
          this.contentContainer.dropTarget.setTargetZones([
            "top",
            "bottom",
            "left",
            "right",
            "center"
          ]);
          break;
        case "floating":
          this.contentContainer.dropTarget.setTargetZones([
            "center"
          ]);
          this.contentContainer.dropTarget.setTargetZones(value ? [
            "center"
          ] : [
            "top",
            "bottom",
            "left",
            "right",
            "center"
          ]);
          toggleClass(this.container, "dv-groupview-floating", true);
          break;
        case "popout":
          this.contentContainer.dropTarget.setTargetZones([
            "center"
          ]);
          toggleClass(this.container, "dv-groupview-popout", true);
          break;
      }
      this.groupPanel.api._onDidLocationChange.fire({
        location: this.location
      });
    }
    constructor(container, accessor, id, options, groupPanel) {
      var _a2;
      super();
      this.container = container;
      this.accessor = accessor;
      this.id = id;
      this.options = options;
      this.groupPanel = groupPanel;
      this._isGroupActive = false;
      this._locked = false;
      this._location = {
        type: "grid"
      };
      this.mostRecentlyUsed = [];
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this._width = 0;
      this._height = 0;
      this._panels = [];
      this._panelDisposables = /* @__PURE__ */ new Map();
      this._onMove = new Emitter();
      this.onMove = this._onMove.event;
      this._onDidDrop = new Emitter();
      this.onDidDrop = this._onDidDrop.event;
      this._onWillDrop = new Emitter();
      this.onWillDrop = this._onWillDrop.event;
      this._onWillShowOverlay = new Emitter();
      this.onWillShowOverlay = this._onWillShowOverlay.event;
      this._onTabDragStart = new Emitter();
      this.onTabDragStart = this._onTabDragStart.event;
      this._onGroupDragStart = new Emitter();
      this.onGroupDragStart = this._onGroupDragStart.event;
      this._onDidAddPanel = new Emitter();
      this.onDidAddPanel = this._onDidAddPanel.event;
      this._onDidPanelTitleChange = new Emitter();
      this.onDidPanelTitleChange = this._onDidPanelTitleChange.event;
      this._onDidPanelParametersChange = new Emitter();
      this.onDidPanelParametersChange = this._onDidPanelParametersChange.event;
      this._onDidRemovePanel = new Emitter();
      this.onDidRemovePanel = this._onDidRemovePanel.event;
      this._onDidActivePanelChange = new Emitter();
      this.onDidActivePanelChange = this._onDidActivePanelChange.event;
      this._onUnhandledDragOverEvent = new Emitter();
      this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
      this._overwriteRenderContainer = null;
      toggleClass(this.container, "groupview", true);
      this._api = new DockviewApi(this.accessor);
      this.tabsContainer = new TabsContainer(this.accessor, this.groupPanel);
      this.contentContainer = new ContentContainer(this.accessor, this);
      container.append(this.tabsContainer.element, this.contentContainer.element);
      this.header.hidden = !!options.hideHeader;
      this.locked = (_a2 = options.locked) !== null && _a2 !== void 0 ? _a2 : false;
      this.addDisposables(this._onTabDragStart, this._onGroupDragStart, this._onWillShowOverlay, this.tabsContainer.onTabDragStart((event) => {
        this._onTabDragStart.fire(event);
      }), this.tabsContainer.onGroupDragStart((event) => {
        this._onGroupDragStart.fire(event);
      }), this.tabsContainer.onDrop((event) => {
        this.handleDropEvent("header", event.event, "center", event.index);
      }), this.contentContainer.onDidFocus(() => {
        this.accessor.doSetGroupActive(this.groupPanel);
      }), this.contentContainer.onDidBlur(() => {
      }), this.contentContainer.dropTarget.onDrop((event) => {
        this.handleDropEvent("content", event.nativeEvent, event.position);
      }), this.tabsContainer.onWillShowOverlay((event) => {
        this._onWillShowOverlay.fire(event);
      }), this.contentContainer.dropTarget.onWillShowOverlay((event) => {
        this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {
          kind: "content",
          panel: this.activePanel,
          api: this._api,
          group: this.groupPanel,
          getData: getPanelData
        }));
      }), this._onMove, this._onDidChange, this._onDidDrop, this._onWillDrop, this._onDidAddPanel, this._onDidRemovePanel, this._onDidActivePanelChange, this._onUnhandledDragOverEvent);
    }
    focusContent() {
      this.contentContainer.element.focus();
    }
    set renderContainer(value) {
      this.panels.forEach((panel) => {
        this.renderContainer.detatch(panel);
      });
      this._overwriteRenderContainer = value;
      this.panels.forEach((panel) => {
        this.rerender(panel);
      });
    }
    get renderContainer() {
      var _a2;
      return (_a2 = this._overwriteRenderContainer) !== null && _a2 !== void 0 ? _a2 : this.accessor.overlayRenderContainer;
    }
    initialize() {
      if (this.options.panels) {
        this.options.panels.forEach((panel) => {
          this.doAddPanel(panel);
        });
      }
      if (this.options.activePanel) {
        this.openPanel(this.options.activePanel);
      }
      this.setActive(this.isActive, true);
      this.updateContainer();
      if (this.accessor.options.createRightHeaderActionComponent) {
        this._rightHeaderActions = this.accessor.options.createRightHeaderActionComponent(this.groupPanel);
        this.addDisposables(this._rightHeaderActions);
        this._rightHeaderActions.init({
          containerApi: this._api,
          api: this.groupPanel.api,
          group: this.groupPanel
        });
        this.tabsContainer.setRightActionsElement(this._rightHeaderActions.element);
      }
      if (this.accessor.options.createLeftHeaderActionComponent) {
        this._leftHeaderActions = this.accessor.options.createLeftHeaderActionComponent(this.groupPanel);
        this.addDisposables(this._leftHeaderActions);
        this._leftHeaderActions.init({
          containerApi: this._api,
          api: this.groupPanel.api,
          group: this.groupPanel
        });
        this.tabsContainer.setLeftActionsElement(this._leftHeaderActions.element);
      }
      if (this.accessor.options.createPrefixHeaderActionComponent) {
        this._prefixHeaderActions = this.accessor.options.createPrefixHeaderActionComponent(this.groupPanel);
        this.addDisposables(this._prefixHeaderActions);
        this._prefixHeaderActions.init({
          containerApi: this._api,
          api: this.groupPanel.api,
          group: this.groupPanel
        });
        this.tabsContainer.setPrefixActionsElement(this._prefixHeaderActions.element);
      }
    }
    rerender(panel) {
      this.contentContainer.renderPanel(panel, {
        asActive: false
      });
    }
    indexOf(panel) {
      return this.tabsContainer.indexOf(panel.id);
    }
    toJSON() {
      var _a2;
      const result = {
        views: this.tabsContainer.panels,
        activeView: (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.id,
        id: this.id
      };
      if (this.locked !== false) {
        result.locked = this.locked;
      }
      if (this.header.hidden) {
        result.hideHeader = true;
      }
      return result;
    }
    moveToNext(options) {
      if (!options) {
        options = {};
      }
      if (!options.panel) {
        options.panel = this.activePanel;
      }
      const index2 = options.panel ? this.panels.indexOf(options.panel) : -1;
      let normalizedIndex;
      if (index2 < this.panels.length - 1) {
        normalizedIndex = index2 + 1;
      } else if (!options.suppressRoll) {
        normalizedIndex = 0;
      } else {
        return;
      }
      this.openPanel(this.panels[normalizedIndex]);
    }
    moveToPrevious(options) {
      if (!options) {
        options = {};
      }
      if (!options.panel) {
        options.panel = this.activePanel;
      }
      if (!options.panel) {
        return;
      }
      const index2 = this.panels.indexOf(options.panel);
      let normalizedIndex;
      if (index2 > 0) {
        normalizedIndex = index2 - 1;
      } else if (!options.suppressRoll) {
        normalizedIndex = this.panels.length - 1;
      } else {
        return;
      }
      this.openPanel(this.panels[normalizedIndex]);
    }
    containsPanel(panel) {
      return this.panels.includes(panel);
    }
    init(_params) {
    }
    update(_params) {
    }
    focus() {
      var _a2;
      (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
    openPanel(panel, options = {}) {
      if (typeof options.index !== "number" || options.index > this.panels.length) {
        options.index = this.panels.length;
      }
      const skipSetActive = !!options.skipSetActive;
      panel.updateParentGroup(this.groupPanel, {
        skipSetActive: options.skipSetActive
      });
      this.doAddPanel(panel, options.index, {
        skipSetActive
      });
      if (this._activePanel === panel) {
        this.contentContainer.renderPanel(panel, {
          asActive: true
        });
        return;
      }
      if (!skipSetActive) {
        this.doSetActivePanel(panel);
      }
      if (!options.skipSetGroupActive) {
        this.accessor.doSetGroupActive(this.groupPanel);
      }
      if (!options.skipSetActive) {
        this.updateContainer();
      }
    }
    removePanel(groupItemOrId, options = {
      skipSetActive: false
    }) {
      const id = typeof groupItemOrId === "string" ? groupItemOrId : groupItemOrId.id;
      const panelToRemove = this._panels.find((panel) => panel.id === id);
      if (!panelToRemove) {
        throw new Error("invalid operation");
      }
      return this._removePanel(panelToRemove, options);
    }
    closeAllPanels() {
      if (this.panels.length > 0) {
        const arrPanelCpy = [
          ...this.panels
        ];
        for (const panel of arrPanelCpy) {
          this.doClose(panel);
        }
      } else {
        this.accessor.removeGroup(this.groupPanel);
      }
    }
    closePanel(panel) {
      this.doClose(panel);
    }
    doClose(panel) {
      this.accessor.removePanel(panel);
    }
    isPanelActive(panel) {
      return this._activePanel === panel;
    }
    updateActions(element) {
      this.tabsContainer.setRightActionsElement(element);
    }
    setActive(isGroupActive, force = false) {
      if (!force && this.isActive === isGroupActive) {
        return;
      }
      this._isGroupActive = isGroupActive;
      toggleClass(this.container, "active-group", isGroupActive);
      toggleClass(this.container, "inactive-group", !isGroupActive);
      this.tabsContainer.setActive(this.isActive);
      if (!this._activePanel && this.panels.length > 0) {
        this.doSetActivePanel(this.panels[0]);
      }
      this.updateContainer();
    }
    layout(width, height) {
      var _a2;
      this._width = width;
      this._height = height;
      this.contentContainer.layout(this._width, this._height);
      if ((_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.layout) {
        this._activePanel.layout(this._width, this._height);
      }
    }
    _removePanel(panel, options) {
      const isActivePanel = this._activePanel === panel;
      this.doRemovePanel(panel);
      if (isActivePanel && this.panels.length > 0) {
        const nextPanel = this.mostRecentlyUsed[0];
        this.openPanel(nextPanel, {
          skipSetActive: options.skipSetActive,
          skipSetGroupActive: options.skipSetActiveGroup
        });
      }
      if (this._activePanel && this.panels.length === 0) {
        this.doSetActivePanel(void 0);
      }
      if (!options.skipSetActive) {
        this.updateContainer();
      }
      return panel;
    }
    doRemovePanel(panel) {
      const index2 = this.panels.indexOf(panel);
      if (this._activePanel === panel) {
        this.contentContainer.closePanel();
      }
      this.tabsContainer.delete(panel.id);
      this._panels.splice(index2, 1);
      if (this.mostRecentlyUsed.includes(panel)) {
        const index3 = this.mostRecentlyUsed.indexOf(panel);
        this.mostRecentlyUsed.splice(index3, 1);
      }
      const disposable = this._panelDisposables.get(panel.id);
      if (disposable) {
        disposable.dispose();
        this._panelDisposables.delete(panel.id);
      }
      this._onDidRemovePanel.fire({
        panel
      });
    }
    doAddPanel(panel, index2 = this.panels.length, options = {
      skipSetActive: false
    }) {
      const existingPanel = this._panels.indexOf(panel);
      const hasExistingPanel = existingPanel > -1;
      this.tabsContainer.show();
      this.contentContainer.show();
      this.tabsContainer.openPanel(panel, index2);
      if (!options.skipSetActive) {
        this.contentContainer.openPanel(panel);
      }
      if (hasExistingPanel) {
        return;
      }
      this.updateMru(panel);
      this.panels.splice(index2, 0, panel);
      this._panelDisposables.set(panel.id, new CompositeDisposable(panel.api.onDidTitleChange((event) => this._onDidPanelTitleChange.fire(event)), panel.api.onDidParametersChange((event) => this._onDidPanelParametersChange.fire(event))));
      this._onDidAddPanel.fire({
        panel
      });
    }
    doSetActivePanel(panel) {
      if (this._activePanel === panel) {
        return;
      }
      this._activePanel = panel;
      if (panel) {
        this.tabsContainer.setActivePanel(panel);
        panel.layout(this._width, this._height);
        this.updateMru(panel);
        this._onDidActivePanelChange.fire({
          panel
        });
      }
    }
    updateMru(panel) {
      if (this.mostRecentlyUsed.includes(panel)) {
        this.mostRecentlyUsed.splice(this.mostRecentlyUsed.indexOf(panel), 1);
      }
      this.mostRecentlyUsed = [
        panel,
        ...this.mostRecentlyUsed
      ];
    }
    updateContainer() {
      var _a2, _b;
      toggleClass(this.container, "empty", this.isEmpty);
      this.panels.forEach((panel) => panel.runEvents());
      if (this.isEmpty && !this.watermark) {
        const watermark = this.accessor.createWatermarkComponent();
        watermark.init({
          containerApi: this._api,
          group: this.groupPanel
        });
        this.watermark = watermark;
        addDisposableListener(this.watermark.element, "pointerdown", () => {
          if (!this.isActive) {
            this.accessor.doSetGroupActive(this.groupPanel);
          }
        });
        this.tabsContainer.hide();
        this.contentContainer.element.appendChild(this.watermark.element);
      }
      if (!this.isEmpty && this.watermark) {
        this.watermark.element.remove();
        (_b = (_a2 = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a2);
        this.watermark = void 0;
        this.tabsContainer.show();
      }
    }
    canDisplayOverlay(event, position, target) {
      const firedEvent = new DockviewUnhandledDragOverEvent(event, target, position, getPanelData, this.accessor.getPanel(this.id));
      this._onUnhandledDragOverEvent.fire(firedEvent);
      return firedEvent.isAccepted;
    }
    handleDropEvent(type, event, position, index2) {
      if (this.locked === "no-drop-target") {
        return;
      }
      function getKind() {
        switch (type) {
          case "header":
            return typeof index2 === "number" ? "tab" : "header_space";
          case "content":
            return "content";
        }
      }
      const panel = typeof index2 === "number" ? this.panels[index2] : void 0;
      const willDropEvent = new DockviewWillDropEvent({
        nativeEvent: event,
        position,
        panel,
        getData: () => getPanelData(),
        kind: getKind(),
        group: this.groupPanel,
        api: this._api
      });
      this._onWillDrop.fire(willDropEvent);
      if (willDropEvent.defaultPrevented) {
        return;
      }
      const data = getPanelData();
      if (data && data.viewId === this.accessor.id) {
        if (data.panelId === null) {
          const { groupId: groupId2 } = data;
          this._onMove.fire({
            target: position,
            groupId: groupId2,
            index: index2
          });
          return;
        }
        const fromSameGroup = this.tabsContainer.indexOf(data.panelId) !== -1;
        if (fromSameGroup && this.tabsContainer.size === 1) {
          return;
        }
        const { groupId, panelId } = data;
        const isSameGroup = this.id === groupId;
        if (isSameGroup && !position) {
          const oldIndex = this.tabsContainer.indexOf(panelId);
          if (oldIndex === index2) {
            return;
          }
        }
        this._onMove.fire({
          target: position,
          groupId: data.groupId,
          itemId: data.panelId,
          index: index2
        });
      } else {
        this._onDidDrop.fire(new DockviewDidDropEvent({
          nativeEvent: event,
          position,
          panel,
          getData: () => getPanelData(),
          group: this.groupPanel,
          api: this._api
        }));
      }
    }
    dispose() {
      var _a2, _b, _c;
      super.dispose();
      (_a2 = this.watermark) === null || _a2 === void 0 ? void 0 : _a2.element.remove();
      (_c = (_b = this.watermark) === null || _b === void 0 ? void 0 : _b.dispose) === null || _c === void 0 ? void 0 : _c.call(_b);
      this.watermark = void 0;
      for (const panel of this.panels) {
        panel.dispose();
      }
      this.tabsContainer.dispose();
      this.contentContainer.dispose();
    }
  }
  class GridviewPanelApiImpl extends PanelApiImpl {
    constructor(id, component, panel) {
      super(id, component);
      this._onDidConstraintsChangeInternal = new Emitter();
      this.onDidConstraintsChangeInternal = this._onDidConstraintsChangeInternal.event;
      this._onDidConstraintsChange = new Emitter();
      this.onDidConstraintsChange = this._onDidConstraintsChange.event;
      this._onDidSizeChange = new Emitter();
      this.onDidSizeChange = this._onDidSizeChange.event;
      this.addDisposables(this._onDidConstraintsChangeInternal, this._onDidConstraintsChange, this._onDidSizeChange);
      if (panel) {
        this.initialize(panel);
      }
    }
    setConstraints(value) {
      this._onDidConstraintsChangeInternal.fire(value);
    }
    setSize(event) {
      this._onDidSizeChange.fire(event);
    }
  }
  class GridviewPanel extends BasePanelView {
    get priority() {
      return this._priority;
    }
    get snap() {
      return this._snap;
    }
    get minimumWidth() {
      const width = typeof this._minimumWidth === "function" ? this._minimumWidth() : this._minimumWidth;
      if (width !== this._evaluatedMinimumWidth) {
        this._evaluatedMinimumWidth = width;
        this.updateConstraints();
      }
      return width;
    }
    get minimumHeight() {
      const height = typeof this._minimumHeight === "function" ? this._minimumHeight() : this._minimumHeight;
      if (height !== this._evaluatedMinimumHeight) {
        this._evaluatedMinimumHeight = height;
        this.updateConstraints();
      }
      return height;
    }
    get maximumHeight() {
      const height = typeof this._maximumHeight === "function" ? this._maximumHeight() : this._maximumHeight;
      if (height !== this._evaluatedMaximumHeight) {
        this._evaluatedMaximumHeight = height;
        this.updateConstraints();
      }
      return height;
    }
    get maximumWidth() {
      const width = typeof this._maximumWidth === "function" ? this._maximumWidth() : this._maximumWidth;
      if (width !== this._evaluatedMaximumWidth) {
        this._evaluatedMaximumWidth = width;
        this.updateConstraints();
      }
      return width;
    }
    get isActive() {
      return this.api.isActive;
    }
    get isVisible() {
      return this.api.isVisible;
    }
    constructor(id, component, options, api) {
      super(id, component, api !== null && api !== void 0 ? api : new GridviewPanelApiImpl(id, component));
      this._evaluatedMinimumWidth = 0;
      this._evaluatedMaximumWidth = Number.MAX_SAFE_INTEGER;
      this._evaluatedMinimumHeight = 0;
      this._evaluatedMaximumHeight = Number.MAX_SAFE_INTEGER;
      this._minimumWidth = 0;
      this._minimumHeight = 0;
      this._maximumWidth = Number.MAX_SAFE_INTEGER;
      this._maximumHeight = Number.MAX_SAFE_INTEGER;
      this._snap = false;
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      if (typeof (options === null || options === void 0 ? void 0 : options.minimumWidth) === "number") {
        this._minimumWidth = options.minimumWidth;
      }
      if (typeof (options === null || options === void 0 ? void 0 : options.maximumWidth) === "number") {
        this._maximumWidth = options.maximumWidth;
      }
      if (typeof (options === null || options === void 0 ? void 0 : options.minimumHeight) === "number") {
        this._minimumHeight = options.minimumHeight;
      }
      if (typeof (options === null || options === void 0 ? void 0 : options.maximumHeight) === "number") {
        this._maximumHeight = options.maximumHeight;
      }
      this.api.initialize(this);
      this.addDisposables(this.api.onWillVisibilityChange((event) => {
        const { isVisible } = event;
        const { accessor } = this._params;
        accessor.setVisible(this, isVisible);
      }), this.api.onActiveChange(() => {
        const { accessor } = this._params;
        accessor.doSetGroupActive(this);
      }), this.api.onDidConstraintsChangeInternal((event) => {
        if (typeof event.minimumWidth === "number" || typeof event.minimumWidth === "function") {
          this._minimumWidth = event.minimumWidth;
        }
        if (typeof event.minimumHeight === "number" || typeof event.minimumHeight === "function") {
          this._minimumHeight = event.minimumHeight;
        }
        if (typeof event.maximumWidth === "number" || typeof event.maximumWidth === "function") {
          this._maximumWidth = event.maximumWidth;
        }
        if (typeof event.maximumHeight === "number" || typeof event.maximumHeight === "function") {
          this._maximumHeight = event.maximumHeight;
        }
      }), this.api.onDidSizeChange((event) => {
        this._onDidChange.fire({
          height: event.height,
          width: event.width
        });
      }), this._onDidChange);
    }
    setVisible(isVisible) {
      this.api._onDidVisibilityChange.fire({
        isVisible
      });
    }
    setActive(isActive) {
      this.api._onDidActiveChange.fire({
        isActive
      });
    }
    init(parameters) {
      if (parameters.maximumHeight) {
        this._maximumHeight = parameters.maximumHeight;
      }
      if (parameters.minimumHeight) {
        this._minimumHeight = parameters.minimumHeight;
      }
      if (parameters.maximumWidth) {
        this._maximumWidth = parameters.maximumWidth;
      }
      if (parameters.minimumWidth) {
        this._minimumWidth = parameters.minimumWidth;
      }
      this._priority = parameters.priority;
      this._snap = !!parameters.snap;
      super.init(parameters);
      if (typeof parameters.isVisible === "boolean") {
        this.setVisible(parameters.isVisible);
      }
    }
    updateConstraints() {
      this.api._onDidConstraintsChange.fire({
        minimumWidth: this._evaluatedMinimumWidth,
        maximumWidth: this._evaluatedMaximumWidth,
        minimumHeight: this._evaluatedMinimumHeight,
        maximumHeight: this._evaluatedMaximumHeight
      });
    }
    toJSON() {
      const state = super.toJSON();
      const maximum = (value) => value === Number.MAX_SAFE_INTEGER ? void 0 : value;
      const minimum = (value) => value <= 0 ? void 0 : value;
      return Object.assign(Object.assign({}, state), {
        minimumHeight: minimum(this.minimumHeight),
        maximumHeight: maximum(this.maximumHeight),
        minimumWidth: minimum(this.minimumWidth),
        maximumWidth: maximum(this.maximumWidth),
        snap: this.snap,
        priority: this.priority
      });
    }
  }
  const NOT_INITIALIZED_MESSAGE = "dockview: DockviewGroupPanelApiImpl not initialized";
  class DockviewGroupPanelApiImpl extends GridviewPanelApiImpl {
    get location() {
      if (!this._group) {
        throw new Error(NOT_INITIALIZED_MESSAGE);
      }
      return this._group.model.location;
    }
    constructor(id, accessor) {
      super(id, "__dockviewgroup__");
      this.accessor = accessor;
      this._mutableDisposable = new MutableDisposable();
      this._onDidLocationChange = new Emitter();
      this.onDidLocationChange = this._onDidLocationChange.event;
      this._onDidActivePanelChange = new Emitter();
      this.onDidActivePanelChange = this._onDidActivePanelChange.event;
      this.addDisposables(this._onDidLocationChange, this._onDidActivePanelChange, this._mutableDisposable);
    }
    close() {
      if (!this._group) {
        return;
      }
      return this.accessor.removeGroup(this._group);
    }
    getWindow() {
      return this.location.type === "popout" ? this.location.getWindow() : window;
    }
    moveTo(options) {
      var _a2, _b, _c;
      if (!this._group) {
        throw new Error(NOT_INITIALIZED_MESSAGE);
      }
      const group = (_a2 = options.group) !== null && _a2 !== void 0 ? _a2 : this.accessor.addGroup({
        direction: positionToDirection((_b = options.position) !== null && _b !== void 0 ? _b : "right"),
        skipSetActive: true
      });
      this.accessor.moveGroupOrPanel({
        from: {
          groupId: this._group.id
        },
        to: {
          group,
          position: options.group ? (_c = options.position) !== null && _c !== void 0 ? _c : "center" : "center"
        }
      });
    }
    maximize() {
      if (!this._group) {
        throw new Error(NOT_INITIALIZED_MESSAGE);
      }
      if (this.location.type !== "grid") {
        return;
      }
      this.accessor.maximizeGroup(this._group);
    }
    isMaximized() {
      if (!this._group) {
        throw new Error(NOT_INITIALIZED_MESSAGE);
      }
      return this.accessor.isMaximizedGroup(this._group);
    }
    exitMaximized() {
      if (!this._group) {
        throw new Error(NOT_INITIALIZED_MESSAGE);
      }
      if (this.isMaximized()) {
        this.accessor.exitMaximizedGroup();
      }
    }
    initialize(group) {
      this._group = group;
      queueMicrotask(() => {
        this._mutableDisposable.value = this._group.model.onDidActivePanelChange((event) => {
          this._onDidActivePanelChange.fire(event);
        });
      });
    }
  }
  const MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH = 100;
  const MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT = 100;
  class DockviewGroupPanel extends GridviewPanel {
    get minimumWidth() {
      var _a2;
      const activePanelMinimumWidth = (_a2 = this.activePanel) === null || _a2 === void 0 ? void 0 : _a2.minimumWidth;
      return typeof activePanelMinimumWidth === "number" ? activePanelMinimumWidth : MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH;
    }
    get minimumHeight() {
      var _a2;
      const activePanelMinimumHeight = (_a2 = this.activePanel) === null || _a2 === void 0 ? void 0 : _a2.minimumHeight;
      return typeof activePanelMinimumHeight === "number" ? activePanelMinimumHeight : MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT;
    }
    get maximumWidth() {
      var _a2;
      const activePanelMaximumWidth = (_a2 = this.activePanel) === null || _a2 === void 0 ? void 0 : _a2.maximumWidth;
      return typeof activePanelMaximumWidth === "number" ? activePanelMaximumWidth : Number.MAX_SAFE_INTEGER;
    }
    get maximumHeight() {
      var _a2;
      const activePanelMaximumHeight = (_a2 = this.activePanel) === null || _a2 === void 0 ? void 0 : _a2.maximumHeight;
      return typeof activePanelMaximumHeight === "number" ? activePanelMaximumHeight : Number.MAX_SAFE_INTEGER;
    }
    get panels() {
      return this._model.panels;
    }
    get activePanel() {
      return this._model.activePanel;
    }
    get size() {
      return this._model.size;
    }
    get model() {
      return this._model;
    }
    get locked() {
      return this._model.locked;
    }
    set locked(value) {
      this._model.locked = value;
    }
    get header() {
      return this._model.header;
    }
    constructor(accessor, id, options) {
      var _a2, _b, _c, _d, _e, _f;
      super(id, "groupview_default", {
        minimumHeight: (_b = (_a2 = options.constraints) === null || _a2 === void 0 ? void 0 : _a2.minimumHeight) !== null && _b !== void 0 ? _b : MINIMUM_DOCKVIEW_GROUP_PANEL_HEIGHT,
        minimumWidth: (_d = (_c = options.constraints) === null || _c === void 0 ? void 0 : _c.maximumHeight) !== null && _d !== void 0 ? _d : MINIMUM_DOCKVIEW_GROUP_PANEL_WIDTH,
        maximumHeight: (_e = options.constraints) === null || _e === void 0 ? void 0 : _e.maximumHeight,
        maximumWidth: (_f = options.constraints) === null || _f === void 0 ? void 0 : _f.maximumWidth
      }, new DockviewGroupPanelApiImpl(id, accessor));
      this.api.initialize(this);
      this._model = new DockviewGroupPanelModel(this.element, accessor, id, options, this);
    }
    focus() {
      if (!this.api.isActive) {
        this.api.setActive();
      }
      super.focus();
    }
    initialize() {
      this._model.initialize();
    }
    setActive(isActive) {
      super.setActive(isActive);
      this.model.setActive(isActive);
    }
    layout(width, height) {
      super.layout(width, height);
      this.model.layout(width, height);
    }
    getComponent() {
      return this._model;
    }
    toJSON() {
      return this.model.toJSON();
    }
  }
  class DockviewPanelApiImpl extends GridviewPanelApiImpl {
    get location() {
      return this.group.api.location;
    }
    get title() {
      return this.panel.title;
    }
    get isGroupActive() {
      return this.group.isActive;
    }
    get renderer() {
      return this.panel.renderer;
    }
    set group(value) {
      const oldGroup = this._group;
      if (this._group !== value) {
        this._group = value;
        this._onDidGroupChange.fire({});
        this.setupGroupEventListeners(oldGroup);
        this._onDidLocationChange.fire({
          location: this.group.api.location
        });
      }
    }
    get group() {
      return this._group;
    }
    get tabComponent() {
      return this._tabComponent;
    }
    constructor(panel, group, accessor, component, tabComponent) {
      super(panel.id, component);
      this.panel = panel;
      this.accessor = accessor;
      this._onDidTitleChange = new Emitter();
      this.onDidTitleChange = this._onDidTitleChange.event;
      this._onDidActiveGroupChange = new Emitter();
      this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
      this._onDidGroupChange = new Emitter();
      this.onDidGroupChange = this._onDidGroupChange.event;
      this._onDidRendererChange = new Emitter();
      this.onDidRendererChange = this._onDidRendererChange.event;
      this._onDidLocationChange = new Emitter();
      this.onDidLocationChange = this._onDidLocationChange.event;
      this.groupEventsDisposable = new MutableDisposable();
      this._tabComponent = tabComponent;
      this.initialize(panel);
      this._group = group;
      this.setupGroupEventListeners();
      this.addDisposables(this.groupEventsDisposable, this._onDidRendererChange, this._onDidTitleChange, this._onDidGroupChange, this._onDidActiveGroupChange, this._onDidLocationChange);
    }
    getWindow() {
      return this.group.api.getWindow();
    }
    moveTo(options) {
      var _a2;
      this.accessor.moveGroupOrPanel({
        from: {
          groupId: this._group.id,
          panelId: this.panel.id
        },
        to: {
          group: options.group,
          position: (_a2 = options.position) !== null && _a2 !== void 0 ? _a2 : "center",
          index: options.index
        }
      });
    }
    setTitle(title) {
      this.panel.setTitle(title);
    }
    setRenderer(renderer) {
      this.panel.setRenderer(renderer);
    }
    close() {
      this.group.model.closePanel(this.panel);
    }
    maximize() {
      this.group.api.maximize();
    }
    isMaximized() {
      return this.group.api.isMaximized();
    }
    exitMaximized() {
      this.group.api.exitMaximized();
    }
    setupGroupEventListeners(previousGroup) {
      var _a2;
      let _trackGroupActive = (_a2 = previousGroup === null || previousGroup === void 0 ? void 0 : previousGroup.isActive) !== null && _a2 !== void 0 ? _a2 : false;
      this.groupEventsDisposable.value = new CompositeDisposable(this.group.api.onDidVisibilityChange((event) => {
        const hasBecomeHidden = !event.isVisible && this.isVisible;
        const hasBecomeVisible = event.isVisible && !this.isVisible;
        const isActivePanel = this.group.model.isPanelActive(this.panel);
        if (hasBecomeHidden || hasBecomeVisible && isActivePanel) {
          this._onDidVisibilityChange.fire(event);
        }
      }), this.group.api.onDidLocationChange((event) => {
        if (this.group !== this.panel.group) {
          return;
        }
        this._onDidLocationChange.fire(event);
      }), this.group.api.onDidActiveChange(() => {
        if (this.group !== this.panel.group) {
          return;
        }
        if (_trackGroupActive !== this.isGroupActive) {
          _trackGroupActive = this.isGroupActive;
          this._onDidActiveGroupChange.fire({
            isActive: this.isGroupActive
          });
        }
      }));
    }
  }
  class DockviewPanel extends CompositeDisposable {
    get params() {
      return this._params;
    }
    get title() {
      return this._title;
    }
    get group() {
      return this._group;
    }
    get renderer() {
      var _a2;
      return (_a2 = this._renderer) !== null && _a2 !== void 0 ? _a2 : this.accessor.renderer;
    }
    get minimumWidth() {
      return this._minimumWidth;
    }
    get minimumHeight() {
      return this._minimumHeight;
    }
    get maximumWidth() {
      return this._maximumWidth;
    }
    get maximumHeight() {
      return this._maximumHeight;
    }
    constructor(id, component, tabComponent, accessor, containerApi, group, view, options) {
      super();
      this.id = id;
      this.accessor = accessor;
      this.containerApi = containerApi;
      this.view = view;
      this._renderer = options.renderer;
      this._group = group;
      this._minimumWidth = options.minimumWidth;
      this._minimumHeight = options.minimumHeight;
      this._maximumWidth = options.maximumWidth;
      this._maximumHeight = options.maximumHeight;
      this.api = new DockviewPanelApiImpl(this, this._group, accessor, component, tabComponent);
      this.addDisposables(this.api.onActiveChange(() => {
        accessor.setActivePanel(this);
      }), this.api.onDidSizeChange((event) => {
        this.group.api.setSize(event);
      }), this.api.onDidRendererChange(() => {
        this.group.model.rerender(this);
      }));
    }
    init(params) {
      this._params = params.params;
      this.view.init(Object.assign(Object.assign({}, params), {
        api: this.api,
        containerApi: this.containerApi
      }));
      this.setTitle(params.title);
    }
    focus() {
      const event = new WillFocusEvent();
      this.api._onWillFocus.fire(event);
      if (event.defaultPrevented) {
        return;
      }
      if (!this.api.isActive) {
        this.api.setActive();
      }
    }
    toJSON() {
      return {
        id: this.id,
        contentComponent: this.view.contentComponent,
        tabComponent: this.view.tabComponent,
        params: Object.keys(this._params || {}).length > 0 ? this._params : void 0,
        title: this.title,
        renderer: this._renderer,
        minimumHeight: this._minimumHeight,
        maximumHeight: this._maximumHeight,
        minimumWidth: this._minimumWidth,
        maximumWidth: this._maximumWidth
      };
    }
    setTitle(title) {
      const didTitleChange = title !== this.title;
      if (didTitleChange) {
        this._title = title;
        this.api._onDidTitleChange.fire({
          title
        });
      }
    }
    setRenderer(renderer) {
      const didChange = renderer !== this.renderer;
      if (didChange) {
        this._renderer = renderer;
        this.api._onDidRendererChange.fire({
          renderer
        });
      }
    }
    update(event) {
      var _a2;
      this._params = Object.assign(Object.assign({}, (_a2 = this._params) !== null && _a2 !== void 0 ? _a2 : {}), event.params);
      for (const key of Object.keys(event.params)) {
        if (event.params[key] === void 0) {
          delete this._params[key];
        }
      }
      this.view.update({
        params: this._params
      });
    }
    updateParentGroup(group, options) {
      this._group = group;
      this.api.group = this._group;
      const isPanelVisible = this._group.model.isPanelActive(this);
      const isActive = this.group.api.isActive && isPanelVisible;
      if (!(options === null || options === void 0 ? void 0 : options.skipSetActive)) {
        if (this.api.isActive !== isActive) {
          this.api._onDidActiveChange.fire({
            isActive: this.group.api.isActive && isPanelVisible
          });
        }
      }
      if (this.api.isVisible !== isPanelVisible) {
        this.api._onDidVisibilityChange.fire({
          isVisible: isPanelVisible
        });
      }
    }
    runEvents() {
      const isPanelVisible = this._group.model.isPanelActive(this);
      const isActive = this.group.api.isActive && isPanelVisible;
      if (this.api.isActive !== isActive) {
        this.api._onDidActiveChange.fire({
          isActive: this.group.api.isActive && isPanelVisible
        });
      }
      if (this.api.isVisible !== isPanelVisible) {
        this.api._onDidVisibilityChange.fire({
          isVisible: isPanelVisible
        });
      }
    }
    layout(width, height) {
      this.api._onDidDimensionChange.fire({
        width,
        height
      });
      this.view.layout(width, height);
    }
    dispose() {
      this.api.dispose();
      this.view.dispose();
    }
  }
  const createSvgElementFromPath = (params) => {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttributeNS(null, "height", params.height);
    svg.setAttributeNS(null, "width", params.width);
    svg.setAttributeNS(null, "viewBox", params.viewbox);
    svg.setAttributeNS(null, "aria-hidden", "false");
    svg.setAttributeNS(null, "focusable", "false");
    svg.classList.add("dockview-svg");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttributeNS(null, "d", params.path);
    svg.appendChild(path);
    return svg;
  };
  const createCloseButton = () => createSvgElementFromPath({
    width: "11",
    height: "11",
    viewbox: "0 0 28 28",
    path: "M2.1 27.3L0 25.2L11.55 13.65L0 2.1L2.1 0L13.65 11.55L25.2 0L27.3 2.1L15.75 13.65L27.3 25.2L25.2 27.3L13.65 15.75L2.1 27.3Z"
  });
  const createExpandMoreButton = () => createSvgElementFromPath({
    width: "11",
    height: "11",
    viewbox: "0 0 24 15",
    path: "M12 14.15L0 2.15L2.15 0L12 9.9L21.85 0.0499992L24 2.2L12 14.15Z"
  });
  const createChevronRightButton = () => createSvgElementFromPath({
    width: "11",
    height: "11",
    viewbox: "0 0 15 25",
    path: "M2.15 24.1L0 21.95L9.9 12.05L0 2.15L2.15 0L14.2 12.05L2.15 24.1Z"
  });
  class DefaultTab extends CompositeDisposable {
    get element() {
      return this._element;
    }
    constructor() {
      super();
      this._element = document.createElement("div");
      this._element.className = "dv-default-tab";
      this._content = document.createElement("div");
      this._content.className = "dv-default-tab-content";
      this.action = document.createElement("div");
      this.action.className = "dv-default-tab-action";
      this.action.appendChild(createCloseButton());
      this._element.appendChild(this._content);
      this._element.appendChild(this.action);
      this.addDisposables(addDisposableListener(this.action, "pointerdown", (ev) => {
        ev.preventDefault();
      }));
      this.render();
    }
    init(params) {
      this._title = params.title;
      this.addDisposables(params.api.onDidTitleChange((event) => {
        this._title = event.title;
        this.render();
      }), addDisposableListener(this.action, "pointerdown", (ev) => {
        ev.preventDefault();
      }), addDisposableListener(this.action, "click", (ev) => {
        if (ev.defaultPrevented) {
          return;
        }
        ev.preventDefault();
        params.api.close();
      }));
      this.render();
    }
    render() {
      var _a2;
      if (this._content.textContent !== this._title) {
        this._content.textContent = (_a2 = this._title) !== null && _a2 !== void 0 ? _a2 : "";
      }
    }
  }
  class DockviewPanelModel {
    get content() {
      return this._content;
    }
    get tab() {
      return this._tab;
    }
    constructor(accessor, id, contentComponent, tabComponent) {
      this.accessor = accessor;
      this.id = id;
      this.contentComponent = contentComponent;
      this.tabComponent = tabComponent;
      this._content = this.createContentComponent(this.id, contentComponent);
      this._tab = this.createTabComponent(this.id, tabComponent);
    }
    init(params) {
      this.content.init(params);
      this.tab.init(params);
    }
    updateParentGroup(_group, _isPanelVisible) {
    }
    layout(width, height) {
      var _a2, _b;
      (_b = (_a2 = this.content).layout) === null || _b === void 0 ? void 0 : _b.call(_a2, width, height);
    }
    update(event) {
      var _a2, _b, _c, _d;
      (_b = (_a2 = this.content).update) === null || _b === void 0 ? void 0 : _b.call(_a2, event);
      (_d = (_c = this.tab).update) === null || _d === void 0 ? void 0 : _d.call(_c, event);
    }
    dispose() {
      var _a2, _b, _c, _d;
      (_b = (_a2 = this.content).dispose) === null || _b === void 0 ? void 0 : _b.call(_a2);
      (_d = (_c = this.tab).dispose) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
    createContentComponent(id, componentName) {
      return this.accessor.options.createComponent({
        id,
        name: componentName
      });
    }
    createTabComponent(id, componentName) {
      const name = componentName !== null && componentName !== void 0 ? componentName : this.accessor.options.defaultTabComponent;
      if (name) {
        if (this.accessor.options.createTabComponent) {
          const component = this.accessor.options.createTabComponent({
            id,
            name
          });
          if (component) {
            return component;
          } else {
            return new DefaultTab();
          }
        }
        console.warn(`dockview: tabComponent '${componentName}' was not found. falling back to the default tab.`);
      }
      return new DefaultTab();
    }
  }
  class DefaultDockviewDeserialzier {
    constructor(accessor) {
      this.accessor = accessor;
    }
    fromJSON(panelData, group) {
      var _a2, _b;
      const panelId = panelData.id;
      const params = panelData.params;
      const title = panelData.title;
      const viewData = panelData.view;
      const contentComponent = viewData ? viewData.content.id : (_a2 = panelData.contentComponent) !== null && _a2 !== void 0 ? _a2 : "unknown";
      const tabComponent = viewData ? (_b = viewData.tab) === null || _b === void 0 ? void 0 : _b.id : panelData.tabComponent;
      const view = new DockviewPanelModel(this.accessor, panelId, contentComponent, tabComponent);
      const panel = new DockviewPanel(panelId, contentComponent, tabComponent, this.accessor, new DockviewApi(this.accessor), group, view, {
        renderer: panelData.renderer,
        minimumWidth: panelData.minimumWidth,
        minimumHeight: panelData.minimumHeight,
        maximumWidth: panelData.maximumWidth,
        maximumHeight: panelData.maximumHeight
      });
      panel.init({
        title: title !== null && title !== void 0 ? title : panelId,
        params: params !== null && params !== void 0 ? params : {}
      });
      return panel;
    }
  }
  let Watermark$1 = class Watermark extends CompositeDisposable {
    get element() {
      return this._element;
    }
    constructor() {
      super();
      this._element = document.createElement("div");
      this._element.className = "watermark";
      const title = document.createElement("div");
      title.className = "watermark-title";
      const emptySpace = document.createElement("span");
      emptySpace.style.flexGrow = "1";
      const content = document.createElement("div");
      content.className = "watermark-content";
      this._element.appendChild(title);
      this._element.appendChild(content);
      const actionsContainer = document.createElement("div");
      actionsContainer.className = "actions-container";
      const closeAnchor = document.createElement("div");
      closeAnchor.className = "close-action";
      closeAnchor.appendChild(createCloseButton());
      actionsContainer.appendChild(closeAnchor);
      title.appendChild(emptySpace);
      title.appendChild(actionsContainer);
      this.addDisposables(addDisposableListener(closeAnchor, "click", (event) => {
        var _a2;
        event.preventDefault();
        if (this._group) {
          (_a2 = this._api) === null || _a2 === void 0 ? void 0 : _a2.removeGroup(this._group);
        }
      }));
    }
    init(_params) {
      this._api = _params.containerApi;
      this._group = _params.group;
      this.render();
    }
    render() {
      const isOneGroup = !!(this._api && this._api.size <= 1);
      toggleClass(this.element, "has-actions", isOneGroup);
    }
  };
  class AriaLevelTracker {
    constructor() {
      this._orderedList = [];
    }
    push(element) {
      this._orderedList = [
        ...this._orderedList.filter((item) => item !== element),
        element
      ];
      this.update();
    }
    destroy(element) {
      this._orderedList = this._orderedList.filter((item) => item !== element);
      this.update();
    }
    update() {
      for (let i = 0; i < this._orderedList.length; i++) {
        this._orderedList[i].setAttribute("aria-level", `${i}`);
        this._orderedList[i].style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${i * 2})`;
      }
    }
  }
  const arialLevelTracker = new AriaLevelTracker();
  class Overlay extends CompositeDisposable {
    set minimumInViewportWidth(value) {
      this.options.minimumInViewportWidth = value;
    }
    set minimumInViewportHeight(value) {
      this.options.minimumInViewportHeight = value;
    }
    get element() {
      return this._element;
    }
    constructor(options) {
      super();
      this.options = options;
      this._element = document.createElement("div");
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this._onDidChangeEnd = new Emitter();
      this.onDidChangeEnd = this._onDidChangeEnd.event;
      this.addDisposables(this._onDidChange, this._onDidChangeEnd);
      this._element.className = "dv-resize-container";
      this.setupResize("top");
      this.setupResize("bottom");
      this.setupResize("left");
      this.setupResize("right");
      this.setupResize("topleft");
      this.setupResize("topright");
      this.setupResize("bottomleft");
      this.setupResize("bottomright");
      this._element.appendChild(this.options.content);
      this.options.container.appendChild(this._element);
      this.setBounds(Object.assign(Object.assign(Object.assign(Object.assign({
        height: this.options.height,
        width: this.options.width
      }, "top" in this.options && {
        top: this.options.top
      }), "bottom" in this.options && {
        bottom: this.options.bottom
      }), "left" in this.options && {
        left: this.options.left
      }), "right" in this.options && {
        right: this.options.right
      }));
      arialLevelTracker.push(this._element);
    }
    bringToFront() {
      arialLevelTracker.push(this._element);
    }
    setBounds(bounds = {}) {
      if (typeof bounds.height === "number") {
        this._element.style.height = `${bounds.height}px`;
      }
      if (typeof bounds.width === "number") {
        this._element.style.width = `${bounds.width}px`;
      }
      if ("top" in bounds && typeof bounds.top === "number") {
        this._element.style.top = `${bounds.top}px`;
        this._element.style.bottom = "auto";
        this.verticalAlignment = "top";
      }
      if ("bottom" in bounds && typeof bounds.bottom === "number") {
        this._element.style.bottom = `${bounds.bottom}px`;
        this._element.style.top = "auto";
        this.verticalAlignment = "bottom";
      }
      if ("left" in bounds && typeof bounds.left === "number") {
        this._element.style.left = `${bounds.left}px`;
        this._element.style.right = "auto";
        this.horiziontalAlignment = "left";
      }
      if ("right" in bounds && typeof bounds.right === "number") {
        this._element.style.right = `${bounds.right}px`;
        this._element.style.left = "auto";
        this.horiziontalAlignment = "right";
      }
      const containerRect = this.options.container.getBoundingClientRect();
      const overlayRect = this._element.getBoundingClientRect();
      const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
      const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
      if (this.verticalAlignment === "top") {
        const top = clamp(overlayRect.top - containerRect.top, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
        this._element.style.top = `${top}px`;
        this._element.style.bottom = "auto";
      }
      if (this.verticalAlignment === "bottom") {
        const bottom = clamp(containerRect.bottom - overlayRect.bottom, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
        this._element.style.bottom = `${bottom}px`;
        this._element.style.top = "auto";
      }
      if (this.horiziontalAlignment === "left") {
        const left = clamp(overlayRect.left - containerRect.left, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
        this._element.style.left = `${left}px`;
        this._element.style.right = "auto";
      }
      if (this.horiziontalAlignment === "right") {
        const right = clamp(containerRect.right - overlayRect.right, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
        this._element.style.right = `${right}px`;
        this._element.style.left = "auto";
      }
      this._onDidChange.fire();
    }
    toJSON() {
      const container = this.options.container.getBoundingClientRect();
      const element = this._element.getBoundingClientRect();
      const result = {};
      if (this.verticalAlignment === "top") {
        result.top = parseFloat(this._element.style.top);
      } else if (this.verticalAlignment === "bottom") {
        result.bottom = parseFloat(this._element.style.bottom);
      } else {
        result.top = element.top - container.top;
      }
      if (this.horiziontalAlignment === "left") {
        result.left = parseFloat(this._element.style.left);
      } else if (this.horiziontalAlignment === "right") {
        result.right = parseFloat(this._element.style.right);
      } else {
        result.left = element.left - container.left;
      }
      result.width = element.width;
      result.height = element.height;
      return result;
    }
    setupDrag(dragTarget, options = {
      inDragMode: false
    }) {
      const move = new MutableDisposable();
      const track = () => {
        let offset = null;
        const iframes = disableIframePointEvents();
        move.value = new CompositeDisposable({
          dispose: () => {
            iframes.release();
          }
        }, addDisposableWindowListener(window, "pointermove", (e) => {
          const containerRect = this.options.container.getBoundingClientRect();
          const x = e.clientX - containerRect.left;
          const y = e.clientY - containerRect.top;
          toggleClass(this._element, "dv-resize-container-dragging", true);
          const overlayRect = this._element.getBoundingClientRect();
          if (offset === null) {
            offset = {
              x: e.clientX - overlayRect.left,
              y: e.clientY - overlayRect.top
            };
          }
          const xOffset = Math.max(0, this.getMinimumWidth(overlayRect.width));
          const yOffset = Math.max(0, this.getMinimumHeight(overlayRect.height));
          const top = clamp(y - offset.y, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
          const bottom = clamp(offset.y - y + containerRect.height - overlayRect.height, -yOffset, Math.max(0, containerRect.height - overlayRect.height + yOffset));
          const left = clamp(x - offset.x, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
          const right = clamp(offset.x - x + containerRect.width - overlayRect.width, -xOffset, Math.max(0, containerRect.width - overlayRect.width + xOffset));
          const bounds = {};
          if (top <= bottom) {
            bounds.top = top;
          } else {
            bounds.bottom = bottom;
          }
          if (left <= right) {
            bounds.left = left;
          } else {
            bounds.right = right;
          }
          this.setBounds(bounds);
        }), addDisposableWindowListener(window, "pointerup", () => {
          toggleClass(this._element, "dv-resize-container-dragging", false);
          move.dispose();
          this._onDidChangeEnd.fire();
        }));
      };
      this.addDisposables(move, addDisposableListener(dragTarget, "pointerdown", (event) => {
        if (event.defaultPrevented) {
          event.preventDefault();
          return;
        }
        if (quasiDefaultPrevented(event)) {
          return;
        }
        track();
      }), addDisposableListener(this.options.content, "pointerdown", (event) => {
        if (event.defaultPrevented) {
          return;
        }
        if (quasiDefaultPrevented(event)) {
          return;
        }
        if (event.shiftKey) {
          track();
        }
      }), addDisposableListener(this.options.content, "pointerdown", () => {
        arialLevelTracker.push(this._element);
      }, true));
      if (options.inDragMode) {
        track();
      }
    }
    setupResize(direction) {
      const resizeHandleElement = document.createElement("div");
      resizeHandleElement.className = `dv-resize-handle-${direction}`;
      this._element.appendChild(resizeHandleElement);
      const move = new MutableDisposable();
      this.addDisposables(move, addDisposableListener(resizeHandleElement, "pointerdown", (e) => {
        e.preventDefault();
        let startPosition = null;
        const iframes = disableIframePointEvents();
        move.value = new CompositeDisposable(addDisposableWindowListener(window, "pointermove", (e2) => {
          const containerRect = this.options.container.getBoundingClientRect();
          const overlayRect = this._element.getBoundingClientRect();
          const y = e2.clientY - containerRect.top;
          const x = e2.clientX - containerRect.left;
          if (startPosition === null) {
            startPosition = {
              originalY: y,
              originalHeight: overlayRect.height,
              originalX: x,
              originalWidth: overlayRect.width
            };
          }
          let top = void 0;
          let bottom = void 0;
          let height = void 0;
          let left = void 0;
          let right = void 0;
          let width = void 0;
          const moveTop = () => {
            top = clamp(y, -Number.MAX_VALUE, startPosition.originalY + startPosition.originalHeight > containerRect.height ? this.getMinimumHeight(containerRect.height) : Math.max(0, startPosition.originalY + startPosition.originalHeight - Overlay.MINIMUM_HEIGHT));
            height = startPosition.originalY + startPosition.originalHeight - top;
            bottom = containerRect.height - top - height;
          };
          const moveBottom = () => {
            top = startPosition.originalY - startPosition.originalHeight;
            height = clamp(y - top, top < 0 && typeof this.options.minimumInViewportHeight === "number" ? -top + this.options.minimumInViewportHeight : Overlay.MINIMUM_HEIGHT, Number.MAX_VALUE);
            bottom = containerRect.height - top - height;
          };
          const moveLeft = () => {
            left = clamp(x, -Number.MAX_VALUE, startPosition.originalX + startPosition.originalWidth > containerRect.width ? this.getMinimumWidth(containerRect.width) : Math.max(0, startPosition.originalX + startPosition.originalWidth - Overlay.MINIMUM_WIDTH));
            width = startPosition.originalX + startPosition.originalWidth - left;
            right = containerRect.width - left - width;
          };
          const moveRight = () => {
            left = startPosition.originalX - startPosition.originalWidth;
            width = clamp(x - left, left < 0 && typeof this.options.minimumInViewportWidth === "number" ? -left + this.options.minimumInViewportWidth : Overlay.MINIMUM_WIDTH, Number.MAX_VALUE);
            right = containerRect.width - left - width;
          };
          switch (direction) {
            case "top":
              moveTop();
              break;
            case "bottom":
              moveBottom();
              break;
            case "left":
              moveLeft();
              break;
            case "right":
              moveRight();
              break;
            case "topleft":
              moveTop();
              moveLeft();
              break;
            case "topright":
              moveTop();
              moveRight();
              break;
            case "bottomleft":
              moveBottom();
              moveLeft();
              break;
            case "bottomright":
              moveBottom();
              moveRight();
              break;
          }
          const bounds = {};
          if (top <= bottom) {
            bounds.top = top;
          } else {
            bounds.bottom = bottom;
          }
          if (left <= right) {
            bounds.left = left;
          } else {
            bounds.right = right;
          }
          bounds.height = height;
          bounds.width = width;
          this.setBounds(bounds);
        }), {
          dispose: () => {
            iframes.release();
          }
        }, addDisposableWindowListener(window, "pointerup", () => {
          move.dispose();
          this._onDidChangeEnd.fire();
        }));
      }));
    }
    getMinimumWidth(width) {
      if (typeof this.options.minimumInViewportWidth === "number") {
        return width - this.options.minimumInViewportWidth;
      }
      return 0;
    }
    getMinimumHeight(height) {
      if (typeof this.options.minimumInViewportHeight === "number") {
        return height - this.options.minimumInViewportHeight;
      }
      return 0;
    }
    dispose() {
      arialLevelTracker.destroy(this._element);
      this._element.remove();
      super.dispose();
    }
  }
  Overlay.MINIMUM_HEIGHT = 20;
  Overlay.MINIMUM_WIDTH = 20;
  class DockviewFloatingGroupPanel extends CompositeDisposable {
    constructor(group, overlay) {
      super();
      this.group = group;
      this.overlay = overlay;
      this.addDisposables(overlay);
    }
    position(bounds) {
      this.overlay.setBounds(bounds);
    }
  }
  const DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE = 100;
  const DEFAULT_FLOATING_GROUP_POSITION = {
    left: 100,
    top: 100,
    width: 300,
    height: 300
  };
  function createFocusableElement() {
    const element = document.createElement("div");
    element.tabIndex = -1;
    return element;
  }
  class OverlayRenderContainer extends CompositeDisposable {
    constructor(element, accessor) {
      super();
      this.element = element;
      this.accessor = accessor;
      this.map = {};
      this._disposed = false;
      this.addDisposables(Disposable.from(() => {
        for (const value of Object.values(this.map)) {
          value.disposable.dispose();
          value.destroy.dispose();
        }
        this._disposed = true;
      }));
    }
    detatch(panel) {
      if (this.map[panel.api.id]) {
        const { disposable, destroy } = this.map[panel.api.id];
        disposable.dispose();
        destroy.dispose();
        delete this.map[panel.api.id];
        return true;
      }
      return false;
    }
    attach(options) {
      const { panel, referenceContainer } = options;
      if (!this.map[panel.api.id]) {
        const element = createFocusableElement();
        element.className = "dv-render-overlay";
        this.map[panel.api.id] = {
          panel,
          disposable: Disposable.NONE,
          destroy: Disposable.NONE,
          element
        };
      }
      const focusContainer = this.map[panel.api.id].element;
      if (panel.view.content.element.parentElement !== focusContainer) {
        focusContainer.appendChild(panel.view.content.element);
      }
      if (focusContainer.parentElement !== this.element) {
        this.element.appendChild(focusContainer);
      }
      const resize = () => {
        const box = getDomNodePagePosition(referenceContainer.element);
        const box2 = getDomNodePagePosition(this.element);
        focusContainer.style.left = `${box.left - box2.left}px`;
        focusContainer.style.top = `${box.top - box2.top}px`;
        focusContainer.style.width = `${box.width}px`;
        focusContainer.style.height = `${box.height}px`;
        toggleClass(focusContainer, "dv-render-overlay-float", panel.group.api.location.type === "floating");
      };
      const visibilityChanged = () => {
        if (panel.api.isVisible) {
          resize();
        }
        focusContainer.style.display = panel.api.isVisible ? "" : "none";
      };
      const observerDisposable = new MutableDisposable();
      const correctLayerPosition = () => {
        if (panel.api.location.type === "floating") {
          queueMicrotask(() => {
            const floatingGroup = this.accessor.floatingGroups.find((group) => group.group === panel.api.group);
            if (!floatingGroup) {
              return;
            }
            const element = floatingGroup.overlay.element;
            const update = () => {
              const level = Number(element.getAttribute("aria-level"));
              focusContainer.style.zIndex = `calc(var(--dv-overlay-z-index, 999) + ${level * 2 + 1})`;
            };
            const observer = new MutationObserver(() => {
              update();
            });
            observerDisposable.value = Disposable.from(() => observer.disconnect());
            observer.observe(element, {
              attributeFilter: [
                "aria-level"
              ],
              attributes: true
            });
            update();
          });
        } else {
          focusContainer.style.zIndex = "";
        }
      };
      const disposable = new CompositeDisposable(observerDisposable, new DragAndDropObserver(focusContainer, {
        onDragEnd: (e) => {
          referenceContainer.dropTarget.dnd.onDragEnd(e);
        },
        onDragEnter: (e) => {
          referenceContainer.dropTarget.dnd.onDragEnter(e);
        },
        onDragLeave: (e) => {
          referenceContainer.dropTarget.dnd.onDragLeave(e);
        },
        onDrop: (e) => {
          referenceContainer.dropTarget.dnd.onDrop(e);
        },
        onDragOver: (e) => {
          referenceContainer.dropTarget.dnd.onDragOver(e);
        }
      }), panel.api.onDidVisibilityChange(() => {
        visibilityChanged();
      }), panel.api.onDidDimensionsChange(() => {
        if (!panel.api.isVisible) {
          return;
        }
        resize();
      }), panel.api.onDidLocationChange(() => {
        correctLayerPosition();
      }));
      this.map[panel.api.id].destroy = Disposable.from(() => {
        var _a2;
        if (panel.view.content.element.parentElement === focusContainer) {
          focusContainer.removeChild(panel.view.content.element);
        }
        (_a2 = focusContainer.parentElement) === null || _a2 === void 0 ? void 0 : _a2.removeChild(focusContainer);
      });
      correctLayerPosition();
      queueMicrotask(() => {
        if (this.isDisposed) {
          return;
        }
        visibilityChanged();
      });
      this.map[panel.api.id].disposable.dispose();
      this.map[panel.api.id].disposable = disposable;
      return focusContainer;
    }
  }
  var __awaiter$3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  class PopoutWindow extends CompositeDisposable {
    get window() {
      var _a2, _b;
      return (_b = (_a2 = this._window) === null || _a2 === void 0 ? void 0 : _a2.value) !== null && _b !== void 0 ? _b : null;
    }
    constructor(target, className, options) {
      super();
      this.target = target;
      this.className = className;
      this.options = options;
      this._onWillClose = new Emitter();
      this.onWillClose = this._onWillClose.event;
      this._onDidClose = new Emitter();
      this.onDidClose = this._onDidClose.event;
      this._window = null;
      this.addDisposables(this._onWillClose, this._onDidClose, {
        dispose: () => {
          this.close();
        }
      });
    }
    dimensions() {
      if (!this._window) {
        return null;
      }
      const left = this._window.value.screenX;
      const top = this._window.value.screenY;
      const width = this._window.value.innerWidth;
      const height = this._window.value.innerHeight;
      return {
        top,
        left,
        width,
        height
      };
    }
    close() {
      var _a2, _b;
      if (this._window) {
        this._onWillClose.fire();
        (_b = (_a2 = this.options).onWillClose) === null || _b === void 0 ? void 0 : _b.call(_a2, {
          id: this.target,
          window: this._window.value
        });
        this._window.disposable.dispose();
        this._window.value.close();
        this._window = null;
        this._onDidClose.fire();
      }
    }
    open() {
      var _a2, _b;
      return __awaiter$3(this, void 0, void 0, function* () {
        if (this._window) {
          throw new Error("instance of popout window is already open");
        }
        const url = `${this.options.url}`;
        const features = Object.entries({
          top: this.options.top,
          left: this.options.left,
          width: this.options.width,
          height: this.options.height
        }).map(([key, value]) => `${key}=${value}`).join(",");
        const externalWindow = window.open(url, this.target, features);
        if (!externalWindow) {
          return null;
        }
        const disposable = new CompositeDisposable();
        this._window = {
          value: externalWindow,
          disposable
        };
        disposable.addDisposables(addDisposableWindowListener(window, "beforeunload", () => {
          this.close();
        }));
        const container = this.createPopoutWindowContainer();
        if (this.className) {
          container.classList.add(this.className);
        }
        (_b = (_a2 = this.options).onDidOpen) === null || _b === void 0 ? void 0 : _b.call(_a2, {
          id: this.target,
          window: externalWindow
        });
        return new Promise((resolve) => {
          externalWindow.addEventListener("unload", (e) => {
          });
          externalWindow.addEventListener("load", () => {
            const externalDocument = externalWindow.document;
            externalDocument.title = document.title;
            externalDocument.body.appendChild(container);
            addStyles(externalDocument, window.document.styleSheets);
            addDisposableWindowListener(externalWindow, "beforeunload", () => {
              this.close();
            });
            resolve(container);
          });
        });
      });
    }
    createPopoutWindowContainer() {
      const el = document.createElement("div");
      el.classList.add("dv-popout-window");
      el.id = "dv-popout-window";
      el.style.position = "absolute";
      el.style.width = "100%";
      el.style.height = "100%";
      el.style.top = "0px";
      el.style.left = "0px";
      return el;
    }
  }
  const DEFAULT_ROOT_OVERLAY_MODEL = {
    activationSize: {
      type: "pixels",
      value: 10
    },
    size: {
      type: "pixels",
      value: 20
    }
  };
  function moveGroupWithoutDestroying(options) {
    const activePanel = options.from.activePanel;
    const panels = [
      ...options.from.panels
    ].map((panel) => {
      const removedPanel = options.from.model.removePanel(panel);
      options.from.model.renderContainer.detatch(panel);
      return removedPanel;
    });
    panels.forEach((panel) => {
      options.to.model.openPanel(panel, {
        skipSetActive: activePanel !== panel,
        skipSetGroupActive: true
      });
    });
  }
  class DockviewComponent extends BaseGrid {
    get orientation() {
      return this.gridview.orientation;
    }
    get totalPanels() {
      return this.panels.length;
    }
    get panels() {
      return this.groups.flatMap((group) => group.panels);
    }
    get options() {
      return this._options;
    }
    get activePanel() {
      const activeGroup = this.activeGroup;
      if (!activeGroup) {
        return void 0;
      }
      return activeGroup.activePanel;
    }
    get renderer() {
      var _a2;
      return (_a2 = this.options.defaultRenderer) !== null && _a2 !== void 0 ? _a2 : "onlyWhenVisible";
    }
    get api() {
      return this._api;
    }
    get gap() {
      return this.gridview.margin;
    }
    get floatingGroups() {
      return this._floatingGroups;
    }
    constructor(parentElement, options) {
      var _a2;
      super(parentElement, {
        proportionalLayout: true,
        orientation: Orientation.HORIZONTAL,
        styles: options.hideBorders ? {
          separatorBorder: "transparent"
        } : void 0,
        disableAutoResizing: options.disableAutoResizing,
        locked: options.locked,
        margin: options.gap,
        className: options.className
      });
      this.nextGroupId = sequentialNumberGenerator();
      this._deserializer = new DefaultDockviewDeserialzier(this);
      this.watermark = null;
      this._onWillDragPanel = new Emitter();
      this.onWillDragPanel = this._onWillDragPanel.event;
      this._onWillDragGroup = new Emitter();
      this.onWillDragGroup = this._onWillDragGroup.event;
      this._onDidDrop = new Emitter();
      this.onDidDrop = this._onDidDrop.event;
      this._onWillDrop = new Emitter();
      this.onWillDrop = this._onWillDrop.event;
      this._onWillShowOverlay = new Emitter();
      this.onWillShowOverlay = this._onWillShowOverlay.event;
      this._onUnhandledDragOverEvent = new Emitter();
      this.onUnhandledDragOverEvent = this._onUnhandledDragOverEvent.event;
      this._onDidRemovePanel = new Emitter();
      this.onDidRemovePanel = this._onDidRemovePanel.event;
      this._onDidAddPanel = new Emitter();
      this.onDidAddPanel = this._onDidAddPanel.event;
      this._onDidLayoutFromJSON = new Emitter();
      this.onDidLayoutFromJSON = this._onDidLayoutFromJSON.event;
      this._onDidActivePanelChange = new Emitter();
      this.onDidActivePanelChange = this._onDidActivePanelChange.event;
      this._onDidMovePanel = new Emitter();
      this.onDidMovePanel = this._onDidMovePanel.event;
      this._floatingGroups = [];
      this._popoutGroups = [];
      this._onDidRemoveGroup = new Emitter();
      this.onDidRemoveGroup = this._onDidRemoveGroup.event;
      this._onDidAddGroup = new Emitter();
      this.onDidAddGroup = this._onDidAddGroup.event;
      this._onDidActiveGroupChange = new Emitter();
      this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
      this._moving = false;
      this.overlayRenderContainer = new OverlayRenderContainer(this.gridview.element, this);
      toggleClass(this.gridview.element, "dv-dockview", true);
      toggleClass(this.element, "dv-debug", !!options.debug);
      this.addDisposables(this.overlayRenderContainer, this._onWillDragPanel, this._onWillDragGroup, this._onWillShowOverlay, this._onDidActivePanelChange, this._onDidAddPanel, this._onDidRemovePanel, this._onDidLayoutFromJSON, this._onDidDrop, this._onWillDrop, this._onDidMovePanel, this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this._onUnhandledDragOverEvent, this.onDidViewVisibilityChangeMicroTaskQueue(() => {
        this.updateWatermark();
      }), this.onDidAdd((event) => {
        if (!this._moving) {
          this._onDidAddGroup.fire(event);
        }
      }), this.onDidRemove((event) => {
        if (!this._moving) {
          this._onDidRemoveGroup.fire(event);
        }
      }), this.onDidActiveChange((event) => {
        if (!this._moving) {
          this._onDidActiveGroupChange.fire(event);
        }
      }), Event.any(this.onDidAdd, this.onDidRemove)(() => {
        this.updateWatermark();
      }), Event.any(this.onDidAddPanel, this.onDidRemovePanel, this.onDidAddGroup, this.onDidRemove, this.onDidMovePanel, this.onDidActivePanelChange)(() => {
        this._bufferOnDidLayoutChange.fire();
      }), Disposable.from(() => {
        for (const group of [
          ...this._floatingGroups
        ]) {
          group.dispose();
        }
        for (const group of [
          ...this._popoutGroups
        ]) {
          group.disposable.dispose();
        }
      }));
      this._options = options;
      this._rootDropTarget = new Droptarget(this.element, {
        canDisplayOverlay: (event, position) => {
          const data = getPanelData();
          if (data) {
            if (data.viewId !== this.id) {
              return false;
            }
            if (position === "center") {
              return this.gridview.length === 0;
            }
            return true;
          }
          if (position === "center" && this.gridview.length !== 0) {
            return false;
          }
          const firedEvent = new DockviewUnhandledDragOverEvent(event, "edge", position, getPanelData);
          this._onUnhandledDragOverEvent.fire(firedEvent);
          return firedEvent.isAccepted;
        },
        acceptedTargetZones: [
          "top",
          "bottom",
          "left",
          "right",
          "center"
        ],
        overlayModel: (_a2 = this.options.rootOverlayModel) !== null && _a2 !== void 0 ? _a2 : DEFAULT_ROOT_OVERLAY_MODEL
      });
      this.addDisposables(this._rootDropTarget, this._rootDropTarget.onWillShowOverlay((event) => {
        if (this.gridview.length > 0 && event.position === "center") {
          return;
        }
        this._onWillShowOverlay.fire(new WillShowOverlayLocationEvent(event, {
          kind: "edge",
          panel: void 0,
          api: this._api,
          group: void 0,
          getData: getPanelData
        }));
      }), this._rootDropTarget.onDrop((event) => {
        var _a3;
        const willDropEvent = new DockviewWillDropEvent({
          nativeEvent: event.nativeEvent,
          position: event.position,
          panel: void 0,
          api: this._api,
          group: void 0,
          getData: getPanelData,
          kind: "edge"
        });
        this._onWillDrop.fire(willDropEvent);
        if (willDropEvent.defaultPrevented) {
          return;
        }
        const data = getPanelData();
        if (data) {
          this.moveGroupOrPanel({
            from: {
              groupId: data.groupId,
              panelId: (_a3 = data.panelId) !== null && _a3 !== void 0 ? _a3 : void 0
            },
            to: {
              group: this.orthogonalize(event.position),
              position: "center"
            }
          });
        } else {
          this._onDidDrop.fire(new DockviewDidDropEvent({
            nativeEvent: event.nativeEvent,
            position: event.position,
            panel: void 0,
            api: this._api,
            group: void 0,
            getData: getPanelData
          }));
        }
      }), this._rootDropTarget);
      this._api = new DockviewApi(this);
      this.updateWatermark();
    }
    addPopoutGroup(itemToPopout, options) {
      var _a2, _b, _c;
      if (itemToPopout instanceof DockviewPanel && itemToPopout.group.size === 1) {
        return this.addPopoutGroup(itemToPopout.group, options);
      }
      const theme = getDockviewTheme(this.gridview.element);
      const element = this.element;
      function getBox() {
        if (options === null || options === void 0 ? void 0 : options.position) {
          return options.position;
        }
        if (itemToPopout instanceof DockviewGroupPanel) {
          return itemToPopout.element.getBoundingClientRect();
        }
        if (itemToPopout.group) {
          return itemToPopout.group.element.getBoundingClientRect();
        }
        return element.getBoundingClientRect();
      }
      const box = getBox();
      const groupId = (_b = (_a2 = options === null || options === void 0 ? void 0 : options.overridePopoutGroup) === null || _a2 === void 0 ? void 0 : _a2.id) !== null && _b !== void 0 ? _b : this.getNextGroupId();
      if (itemToPopout.api.location.type === "grid") {
        itemToPopout.api.setVisible(false);
      }
      const _window = new PopoutWindow(`${this.id}-${groupId}`, theme !== null && theme !== void 0 ? theme : "", {
        url: (_c = options === null || options === void 0 ? void 0 : options.popoutUrl) !== null && _c !== void 0 ? _c : "/popout.html",
        left: window.screenX + box.left,
        top: window.screenY + box.top,
        width: box.width,
        height: box.height,
        onDidOpen: options === null || options === void 0 ? void 0 : options.onDidOpen,
        onWillClose: options === null || options === void 0 ? void 0 : options.onWillClose
      });
      const popoutWindowDisposable = new CompositeDisposable(_window, _window.onDidClose(() => {
        popoutWindowDisposable.dispose();
      }));
      return _window.open().then((popoutContainer) => {
        var _a3;
        if (_window.isDisposed) {
          return;
        }
        if (popoutContainer === null) {
          popoutWindowDisposable.dispose();
          return;
        }
        const gready = document.createElement("div");
        gready.className = "dv-overlay-render-container";
        const overlayRenderContainer = new OverlayRenderContainer(gready, this);
        const referenceGroup = itemToPopout instanceof DockviewPanel ? itemToPopout.group : itemToPopout;
        const referenceLocation = itemToPopout.api.location.type;
        const group = (_a3 = options === null || options === void 0 ? void 0 : options.overridePopoutGroup) !== null && _a3 !== void 0 ? _a3 : this.createGroup({
          id: groupId
        });
        group.model.renderContainer = overlayRenderContainer;
        if (!(options === null || options === void 0 ? void 0 : options.overridePopoutGroup)) {
          this._onDidAddGroup.fire(group);
        }
        if (itemToPopout instanceof DockviewPanel) {
          this.movingLock(() => {
            const panel = referenceGroup.model.removePanel(itemToPopout);
            group.model.openPanel(panel);
          });
        } else {
          this.movingLock(() => moveGroupWithoutDestroying({
            from: referenceGroup,
            to: group
          }));
          switch (referenceLocation) {
            case "grid":
              referenceGroup.api.setVisible(false);
              break;
            case "floating":
            case "popout":
              this.removeGroup(referenceGroup);
              break;
          }
        }
        popoutContainer.classList.add("dv-dockview");
        popoutContainer.style.overflow = "hidden";
        popoutContainer.appendChild(gready);
        popoutContainer.appendChild(group.element);
        group.model.location = {
          type: "popout",
          getWindow: () => _window.window
        };
        this.doSetGroupAndPanelActive(group);
        popoutWindowDisposable.addDisposables(group.api.onDidActiveChange((event) => {
          var _a4;
          if (event.isActive) {
            (_a4 = _window.window) === null || _a4 === void 0 ? void 0 : _a4.focus();
          }
        }), group.api.onWillFocus(() => {
          var _a4;
          (_a4 = _window.window) === null || _a4 === void 0 ? void 0 : _a4.focus();
        }));
        let returnedGroup;
        const value = {
          window: _window,
          popoutGroup: group,
          referenceGroup: this.getPanel(referenceGroup.id) ? referenceGroup.id : void 0,
          disposable: {
            dispose: () => {
              popoutWindowDisposable.dispose();
              return returnedGroup;
            }
          }
        };
        popoutWindowDisposable.addDisposables(addDisposableWindowListener(_window.window, "resize", () => {
          group.layout(window.innerWidth, window.innerHeight);
        }), overlayRenderContainer, Disposable.from(() => {
          if (this.getPanel(referenceGroup.id)) {
            this.movingLock(() => moveGroupWithoutDestroying({
              from: group,
              to: referenceGroup
            }));
            if (!referenceGroup.api.isVisible) {
              referenceGroup.api.setVisible(true);
            }
            if (this.getPanel(group.id)) {
              this.doRemoveGroup(group, {
                skipPopoutAssociated: true
              });
            }
          } else if (this.getPanel(group.id)) {
            const removedGroup = this.doRemoveGroup(group, {
              skipDispose: true,
              skipActive: true
            });
            removedGroup.model.renderContainer = this.overlayRenderContainer;
            removedGroup.model.location = {
              type: "grid"
            };
            returnedGroup = removedGroup;
          }
        }));
        this._popoutGroups.push(value);
        this.updateWatermark();
      }).catch((err) => {
        console.error("dockview: failed to create popout window", err);
      });
    }
    addFloatingGroup(item, options) {
      var _a2, _b, _c, _d, _e;
      let group;
      if (item instanceof DockviewPanel) {
        group = this.createGroup();
        this._onDidAddGroup.fire(group);
        this.movingLock(() => this.removePanel(item, {
          removeEmptyGroup: true,
          skipDispose: true,
          skipSetActiveGroup: true
        }));
        this.movingLock(() => group.model.openPanel(item, {
          skipSetGroupActive: true
        }));
      } else {
        group = item;
        const popoutReferenceGroupId = (_a2 = this._popoutGroups.find((_2) => _2.popoutGroup === group)) === null || _a2 === void 0 ? void 0 : _a2.referenceGroup;
        const popoutReferenceGroup = popoutReferenceGroupId ? this.getPanel(popoutReferenceGroupId) : void 0;
        const skip = typeof (options === null || options === void 0 ? void 0 : options.skipRemoveGroup) === "boolean" && options.skipRemoveGroup;
        if (!skip) {
          if (popoutReferenceGroup) {
            this.movingLock(() => moveGroupWithoutDestroying({
              from: item,
              to: popoutReferenceGroup
            }));
            this.doRemoveGroup(item, {
              skipPopoutReturn: true,
              skipPopoutAssociated: true
            });
            this.doRemoveGroup(popoutReferenceGroup, {
              skipDispose: true
            });
            group = popoutReferenceGroup;
          } else {
            this.doRemoveGroup(item, {
              skipDispose: true,
              skipPopoutReturn: true,
              skipPopoutAssociated: false
            });
          }
        }
      }
      function getAnchoredBox() {
        if (options === null || options === void 0 ? void 0 : options.position) {
          const result = {};
          if ("left" in options.position) {
            result.left = Math.max(options.position.left, 0);
          } else if ("right" in options.position) {
            result.right = Math.max(options.position.right, 0);
          } else {
            result.left = DEFAULT_FLOATING_GROUP_POSITION.left;
          }
          if ("top" in options.position) {
            result.top = Math.max(options.position.top, 0);
          } else if ("bottom" in options.position) {
            result.bottom = Math.max(options.position.bottom, 0);
          } else {
            result.top = DEFAULT_FLOATING_GROUP_POSITION.top;
          }
          if (typeof options.width === "number") {
            result.width = Math.max(options.width, 0);
          } else {
            result.width = DEFAULT_FLOATING_GROUP_POSITION.width;
          }
          if (typeof options.height === "number") {
            result.height = Math.max(options.height, 0);
          } else {
            result.height = DEFAULT_FLOATING_GROUP_POSITION.height;
          }
          return result;
        }
        return {
          left: typeof (options === null || options === void 0 ? void 0 : options.x) === "number" ? Math.max(options.x, 0) : DEFAULT_FLOATING_GROUP_POSITION.left,
          top: typeof (options === null || options === void 0 ? void 0 : options.y) === "number" ? Math.max(options.y, 0) : DEFAULT_FLOATING_GROUP_POSITION.top,
          width: typeof (options === null || options === void 0 ? void 0 : options.width) === "number" ? Math.max(options.width, 0) : DEFAULT_FLOATING_GROUP_POSITION.width,
          height: typeof (options === null || options === void 0 ? void 0 : options.height) === "number" ? Math.max(options.height, 0) : DEFAULT_FLOATING_GROUP_POSITION.height
        };
      }
      const anchoredBox = getAnchoredBox();
      const overlay = new Overlay(Object.assign(Object.assign({
        container: this.gridview.element,
        content: group.element
      }, anchoredBox), {
        minimumInViewportWidth: this.options.floatingGroupBounds === "boundedWithinViewport" ? void 0 : (_c = (_b = this.options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport) !== null && _c !== void 0 ? _c : DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE,
        minimumInViewportHeight: this.options.floatingGroupBounds === "boundedWithinViewport" ? void 0 : (_e = (_d = this.options.floatingGroupBounds) === null || _d === void 0 ? void 0 : _d.minimumHeightWithinViewport) !== null && _e !== void 0 ? _e : DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE
      }));
      const el = group.element.querySelector(".void-container");
      if (!el) {
        throw new Error("failed to find drag handle");
      }
      overlay.setupDrag(el, {
        inDragMode: typeof (options === null || options === void 0 ? void 0 : options.inDragMode) === "boolean" ? options.inDragMode : false
      });
      const floatingGroupPanel = new DockviewFloatingGroupPanel(group, overlay);
      const disposable = new CompositeDisposable(group.api.onDidActiveChange((event) => {
        if (event.isActive) {
          overlay.bringToFront();
        }
      }), watchElementResize(group.element, (entry) => {
        const { width, height } = entry.contentRect;
        group.layout(width, height);
      }));
      floatingGroupPanel.addDisposables(overlay.onDidChange(() => {
        group.layout(group.width, group.height);
      }), overlay.onDidChangeEnd(() => {
        this._bufferOnDidLayoutChange.fire();
      }), group.onDidChange((event) => {
        overlay.setBounds({
          height: event === null || event === void 0 ? void 0 : event.height,
          width: event === null || event === void 0 ? void 0 : event.width
        });
      }), {
        dispose: () => {
          disposable.dispose();
          remove(this._floatingGroups, floatingGroupPanel);
          group.model.location = {
            type: "grid"
          };
          this.updateWatermark();
        }
      });
      this._floatingGroups.push(floatingGroupPanel);
      group.model.location = {
        type: "floating"
      };
      if (!(options === null || options === void 0 ? void 0 : options.skipActiveGroup)) {
        this.doSetGroupAndPanelActive(group);
      }
      this.updateWatermark();
    }
    orthogonalize(position) {
      switch (position) {
        case "top":
        case "bottom":
          if (this.gridview.orientation === Orientation.HORIZONTAL) {
            this.gridview.insertOrthogonalSplitviewAtRoot();
          }
          break;
        case "left":
        case "right":
          if (this.gridview.orientation === Orientation.VERTICAL) {
            this.gridview.insertOrthogonalSplitviewAtRoot();
          }
          break;
      }
      switch (position) {
        case "top":
        case "left":
        case "center":
          return this.createGroupAtLocation([
            0
          ]);
        case "bottom":
        case "right":
          return this.createGroupAtLocation([
            this.gridview.length
          ]);
        default:
          throw new Error(`unsupported position ${position}`);
      }
    }
    updateOptions(options) {
      var _a2, _b, _c, _d;
      super.updateOptions(options);
      if ("floatingGroupBounds" in options) {
        for (const group of this._floatingGroups) {
          switch (options.floatingGroupBounds) {
            case "boundedWithinViewport":
              group.overlay.minimumInViewportHeight = void 0;
              group.overlay.minimumInViewportWidth = void 0;
              break;
            case void 0:
              group.overlay.minimumInViewportHeight = DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
              group.overlay.minimumInViewportWidth = DEFAULT_FLOATING_GROUP_OVERFLOW_SIZE;
              break;
            default:
              group.overlay.minimumInViewportHeight = (_a2 = options.floatingGroupBounds) === null || _a2 === void 0 ? void 0 : _a2.minimumHeightWithinViewport;
              group.overlay.minimumInViewportWidth = (_b = options.floatingGroupBounds) === null || _b === void 0 ? void 0 : _b.minimumWidthWithinViewport;
          }
          group.overlay.setBounds();
        }
      }
      if ("rootOverlayModel" in options) {
        this._rootDropTarget.setOverlayModel((_c = options.rootOverlayModel) !== null && _c !== void 0 ? _c : DEFAULT_ROOT_OVERLAY_MODEL);
      }
      if ("gap" in options) {
        this.gridview.margin = (_d = options.gap) !== null && _d !== void 0 ? _d : 0;
      }
      this._options = Object.assign(Object.assign({}, this.options), options);
      this.layout(this.gridview.width, this.gridview.height, true);
    }
    layout(width, height, forceResize) {
      super.layout(width, height, forceResize);
      if (this._floatingGroups) {
        for (const floating of this._floatingGroups) {
          floating.overlay.setBounds();
        }
      }
    }
    focus() {
      var _a2;
      (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
    getGroupPanel(id) {
      return this.panels.find((panel) => panel.id === id);
    }
    setActivePanel(panel) {
      panel.group.model.openPanel(panel);
      this.doSetGroupAndPanelActive(panel.group);
    }
    moveToNext(options = {}) {
      var _a2;
      if (!options.group) {
        if (!this.activeGroup) {
          return;
        }
        options.group = this.activeGroup;
      }
      if (options.includePanel && options.group) {
        if (options.group.activePanel !== options.group.panels[options.group.panels.length - 1]) {
          options.group.model.moveToNext({
            suppressRoll: true
          });
          return;
        }
      }
      const location2 = getGridLocation(options.group.element);
      const next = (_a2 = this.gridview.next(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
      this.doSetGroupAndPanelActive(next);
    }
    moveToPrevious(options = {}) {
      var _a2;
      if (!options.group) {
        if (!this.activeGroup) {
          return;
        }
        options.group = this.activeGroup;
      }
      if (options.includePanel && options.group) {
        if (options.group.activePanel !== options.group.panels[0]) {
          options.group.model.moveToPrevious({
            suppressRoll: true
          });
          return;
        }
      }
      const location2 = getGridLocation(options.group.element);
      const next = (_a2 = this.gridview.previous(location2)) === null || _a2 === void 0 ? void 0 : _a2.view;
      if (next) {
        this.doSetGroupAndPanelActive(next);
      }
    }
    toJSON() {
      var _a2;
      const data = this.gridview.serialize();
      const panels = this.panels.reduce((collection, panel) => {
        collection[panel.id] = panel.toJSON();
        return collection;
      }, {});
      const floats = this._floatingGroups.map((group) => {
        return {
          data: group.group.toJSON(),
          position: group.overlay.toJSON()
        };
      });
      const popoutGroups = this._popoutGroups.map((group) => {
        return {
          data: group.popoutGroup.toJSON(),
          gridReferenceGroup: group.referenceGroup,
          position: group.window.dimensions()
        };
      });
      const result = {
        grid: data,
        panels,
        activeGroup: (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.id
      };
      if (floats.length > 0) {
        result.floatingGroups = floats;
      }
      if (popoutGroups.length > 0) {
        result.popoutGroups = popoutGroups;
      }
      return result;
    }
    fromJSON(data) {
      var _a2, _b, _c;
      this.clear();
      if (typeof data !== "object" || data === null) {
        throw new Error("serialized layout must be a non-null object");
      }
      const { grid, panels, activeGroup } = data;
      if (grid.root.type !== "branch" || !Array.isArray(grid.root.data)) {
        throw new Error("root must be of type branch");
      }
      try {
        const width = this.width;
        const height = this.height;
        const createGroupFromSerializedState = (data2) => {
          const { id, locked, hideHeader, views, activeView } = data2;
          if (typeof id !== "string") {
            throw new Error("group id must be of type string");
          }
          const group = this.createGroup({
            id,
            locked: !!locked,
            hideHeader: !!hideHeader
          });
          const createdPanels = [];
          for (const child of views) {
            const panel = this._deserializer.fromJSON(panels[child], group);
            createdPanels.push(panel);
          }
          this._onDidAddGroup.fire(group);
          for (let i = 0; i < views.length; i++) {
            const panel = createdPanels[i];
            const isActive = typeof activeView === "string" && activeView === panel.id;
            group.model.openPanel(panel, {
              skipSetActive: !isActive,
              skipSetGroupActive: true
            });
          }
          if (!group.activePanel && group.panels.length > 0) {
            group.model.openPanel(group.panels[group.panels.length - 1], {
              skipSetGroupActive: true
            });
          }
          return group;
        };
        this.gridview.deserialize(grid, {
          fromJSON: (node) => {
            return createGroupFromSerializedState(node.data);
          }
        });
        this.layout(width, height, true);
        const serializedFloatingGroups = (_a2 = data.floatingGroups) !== null && _a2 !== void 0 ? _a2 : [];
        for (const serializedFloatingGroup of serializedFloatingGroups) {
          const { data: data2, position } = serializedFloatingGroup;
          const group = createGroupFromSerializedState(data2);
          this.addFloatingGroup(group, {
            position,
            width: position.width,
            height: position.height,
            skipRemoveGroup: true,
            inDragMode: false
          });
        }
        const serializedPopoutGroups = (_b = data.popoutGroups) !== null && _b !== void 0 ? _b : [];
        for (const serializedPopoutGroup of serializedPopoutGroups) {
          const { data: data2, position, gridReferenceGroup } = serializedPopoutGroup;
          const group = createGroupFromSerializedState(data2);
          this.addPopoutGroup((_c = gridReferenceGroup ? this.getPanel(gridReferenceGroup) : void 0) !== null && _c !== void 0 ? _c : group, {
            skipRemoveGroup: true,
            position: position !== null && position !== void 0 ? position : void 0,
            overridePopoutGroup: gridReferenceGroup ? group : void 0
          });
        }
        for (const floatingGroup of this._floatingGroups) {
          floatingGroup.overlay.setBounds();
        }
        if (typeof activeGroup === "string") {
          const panel = this.getPanel(activeGroup);
          if (panel) {
            this.doSetGroupAndPanelActive(panel);
          }
        }
      } catch (err) {
        for (const group of this.groups) {
          for (const panel of group.panels) {
            this.removePanel(panel, {
              removeEmptyGroup: false,
              skipDispose: false
            });
          }
        }
        for (const group of this.groups) {
          group.dispose();
          this._groups.delete(group.id);
          this._onDidRemoveGroup.fire(group);
        }
        for (const floatingGroup of [
          ...this._floatingGroups
        ]) {
          floatingGroup.dispose();
        }
        this.clear();
        throw err;
      }
      this.updateWatermark();
      this._onDidLayoutFromJSON.fire();
    }
    clear() {
      const groups = Array.from(this._groups.values()).map((_2) => _2.value);
      const hasActiveGroup = !!this.activeGroup;
      for (const group of groups) {
        this.removeGroup(group, {
          skipActive: true
        });
      }
      if (hasActiveGroup) {
        this.doSetGroupAndPanelActive(void 0);
      }
      this.gridview.clear();
    }
    closeAllGroups() {
      for (const entry of this._groups.entries()) {
        const [_2, group] = entry;
        group.value.model.closeAllPanels();
      }
    }
    addPanel(options) {
      var _a2, _b;
      if (this.panels.find((_2) => _2.id === options.id)) {
        throw new Error(`panel with id ${options.id} already exists`);
      }
      let referenceGroup;
      if (options.position && options.floating) {
        throw new Error("you can only provide one of: position, floating as arguments to .addPanel(...)");
      }
      const initial = {
        width: options.initialWidth,
        height: options.initialHeight
      };
      if (options.position) {
        if (isPanelOptionsWithPanel(options.position)) {
          const referencePanel = typeof options.position.referencePanel === "string" ? this.getGroupPanel(options.position.referencePanel) : options.position.referencePanel;
          if (!referencePanel) {
            throw new Error(`referencePanel '${options.position.referencePanel}' does not exist`);
          }
          referenceGroup = this.findGroup(referencePanel);
        } else if (isPanelOptionsWithGroup(options.position)) {
          referenceGroup = typeof options.position.referenceGroup === "string" ? (_a2 = this._groups.get(options.position.referenceGroup)) === null || _a2 === void 0 ? void 0 : _a2.value : options.position.referenceGroup;
          if (!referenceGroup) {
            throw new Error(`referenceGroup '${options.position.referenceGroup}' does not exist`);
          }
        } else {
          const group = this.orthogonalize(directionToPosition(options.position.direction));
          const panel2 = this.createPanel(options, group);
          group.model.openPanel(panel2, {
            skipSetActive: options.inactive,
            skipSetGroupActive: options.inactive
          });
          if (!options.inactive) {
            this.doSetGroupAndPanelActive(group);
          }
          group.api.setSize({
            height: initial === null || initial === void 0 ? void 0 : initial.height,
            width: initial === null || initial === void 0 ? void 0 : initial.width
          });
          return panel2;
        }
      } else {
        referenceGroup = this.activeGroup;
      }
      let panel;
      if (referenceGroup) {
        const target = toTarget(((_b = options.position) === null || _b === void 0 ? void 0 : _b.direction) || "within");
        if (options.floating) {
          const group = this.createGroup();
          this._onDidAddGroup.fire(group);
          const floatingGroupOptions = typeof options.floating === "object" && options.floating !== null ? options.floating : {};
          this.addFloatingGroup(group, Object.assign(Object.assign({}, floatingGroupOptions), {
            inDragMode: false,
            skipRemoveGroup: true,
            skipActiveGroup: true
          }));
          panel = this.createPanel(options, group);
          group.model.openPanel(panel, {
            skipSetActive: options.inactive,
            skipSetGroupActive: options.inactive
          });
        } else if (referenceGroup.api.location.type === "floating" || target === "center") {
          panel = this.createPanel(options, referenceGroup);
          referenceGroup.model.openPanel(panel, {
            skipSetActive: options.inactive,
            skipSetGroupActive: options.inactive
          });
          referenceGroup.api.setSize({
            width: initial === null || initial === void 0 ? void 0 : initial.width,
            height: initial === null || initial === void 0 ? void 0 : initial.height
          });
          if (!options.inactive) {
            this.doSetGroupAndPanelActive(referenceGroup);
          }
        } else {
          const location2 = getGridLocation(referenceGroup.element);
          const relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
          const group = this.createGroupAtLocation(relativeLocation, this.orientationAtLocation(relativeLocation) === Orientation.VERTICAL ? initial === null || initial === void 0 ? void 0 : initial.height : initial === null || initial === void 0 ? void 0 : initial.width);
          panel = this.createPanel(options, group);
          group.model.openPanel(panel, {
            skipSetActive: options.inactive,
            skipSetGroupActive: options.inactive
          });
          if (!options.inactive) {
            this.doSetGroupAndPanelActive(group);
          }
        }
      } else if (options.floating) {
        const group = this.createGroup();
        this._onDidAddGroup.fire(group);
        const coordinates = typeof options.floating === "object" && options.floating !== null ? options.floating : {};
        this.addFloatingGroup(group, Object.assign(Object.assign({}, coordinates), {
          inDragMode: false,
          skipRemoveGroup: true,
          skipActiveGroup: true
        }));
        panel = this.createPanel(options, group);
        group.model.openPanel(panel, {
          skipSetActive: options.inactive,
          skipSetGroupActive: options.inactive
        });
      } else {
        const group = this.createGroupAtLocation([
          0
        ], this.gridview.orientation === Orientation.VERTICAL ? initial === null || initial === void 0 ? void 0 : initial.height : initial === null || initial === void 0 ? void 0 : initial.width);
        panel = this.createPanel(options, group);
        group.model.openPanel(panel, {
          skipSetActive: options.inactive,
          skipSetGroupActive: options.inactive
        });
        if (!options.inactive) {
          this.doSetGroupAndPanelActive(group);
        }
      }
      return panel;
    }
    removePanel(panel, options = {
      removeEmptyGroup: true,
      skipDispose: false
    }) {
      const group = panel.group;
      if (!group) {
        throw new Error(`cannot remove panel ${panel.id}. it's missing a group.`);
      }
      group.model.removePanel(panel, {
        skipSetActiveGroup: options.skipSetActiveGroup
      });
      if (!options.skipDispose) {
        panel.group.model.renderContainer.detatch(panel);
        panel.dispose();
      }
      if (group.size === 0 && options.removeEmptyGroup) {
        this.removeGroup(group, {
          skipActive: options.skipSetActiveGroup
        });
      }
    }
    createWatermarkComponent() {
      if (this.options.createWatermarkComponent) {
        return this.options.createWatermarkComponent();
      }
      return new Watermark$1();
    }
    updateWatermark() {
      var _a2, _b;
      if (this.groups.filter((x) => x.api.location.type === "grid" && x.api.isVisible).length === 0) {
        if (!this.watermark) {
          this.watermark = this.createWatermarkComponent();
          this.watermark.init({
            containerApi: new DockviewApi(this)
          });
          const watermarkContainer = document.createElement("div");
          watermarkContainer.className = "dv-watermark-container";
          addTestId(watermarkContainer, "watermark-component");
          watermarkContainer.appendChild(this.watermark.element);
          this.gridview.element.appendChild(watermarkContainer);
        }
      } else if (this.watermark) {
        this.watermark.element.parentElement.remove();
        (_b = (_a2 = this.watermark).dispose) === null || _b === void 0 ? void 0 : _b.call(_a2);
        this.watermark = null;
      }
    }
    addGroup(options) {
      var _a2;
      if (options) {
        let referenceGroup;
        if (isGroupOptionsWithPanel(options)) {
          const referencePanel = typeof options.referencePanel === "string" ? this.panels.find((panel) => panel.id === options.referencePanel) : options.referencePanel;
          if (!referencePanel) {
            throw new Error(`reference panel ${options.referencePanel} does not exist`);
          }
          referenceGroup = this.findGroup(referencePanel);
          if (!referenceGroup) {
            throw new Error(`reference group for reference panel ${options.referencePanel} does not exist`);
          }
        } else if (isGroupOptionsWithGroup(options)) {
          referenceGroup = typeof options.referenceGroup === "string" ? (_a2 = this._groups.get(options.referenceGroup)) === null || _a2 === void 0 ? void 0 : _a2.value : options.referenceGroup;
          if (!referenceGroup) {
            throw new Error(`reference group ${options.referenceGroup} does not exist`);
          }
        } else {
          const group2 = this.orthogonalize(directionToPosition(options.direction));
          if (!options.skipSetActive) {
            this.doSetGroupAndPanelActive(group2);
          }
          return group2;
        }
        const target = toTarget(options.direction || "within");
        const location2 = getGridLocation(referenceGroup.element);
        const relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
        const group = this.createGroup(options);
        const size = this.getLocationOrientation(relativeLocation) === Orientation.VERTICAL ? options.initialHeight : options.initialWidth;
        this.doAddGroup(group, relativeLocation, size);
        if (!options.skipSetActive) {
          this.doSetGroupAndPanelActive(group);
        }
        return group;
      } else {
        const group = this.createGroup(options);
        this.doAddGroup(group);
        this.doSetGroupAndPanelActive(group);
        return group;
      }
    }
    getLocationOrientation(location2) {
      return location2.length % 2 == 0 && this.gridview.orientation === Orientation.HORIZONTAL ? Orientation.HORIZONTAL : Orientation.VERTICAL;
    }
    removeGroup(group, options) {
      this.doRemoveGroup(group, options);
    }
    doRemoveGroup(group, options) {
      var _a2;
      const panels = [
        ...group.panels
      ];
      if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
        for (const panel of panels) {
          this.removePanel(panel, {
            removeEmptyGroup: false,
            skipDispose: (_a2 = options === null || options === void 0 ? void 0 : options.skipDispose) !== null && _a2 !== void 0 ? _a2 : false
          });
        }
      }
      const activePanel = this.activePanel;
      if (group.api.location.type === "floating") {
        const floatingGroup = this._floatingGroups.find((_2) => _2.group === group);
        if (floatingGroup) {
          if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            floatingGroup.group.dispose();
            this._groups.delete(group.id);
            this._onDidRemoveGroup.fire(group);
          }
          remove(this._floatingGroups, floatingGroup);
          floatingGroup.dispose();
          if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
            const groups = Array.from(this._groups.values());
            this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : void 0);
          }
          return floatingGroup.group;
        }
        throw new Error("failed to find floating group");
      }
      if (group.api.location.type === "popout") {
        const selectedGroup = this._popoutGroups.find((_2) => _2.popoutGroup === group);
        if (selectedGroup) {
          if (!(options === null || options === void 0 ? void 0 : options.skipDispose)) {
            if (!(options === null || options === void 0 ? void 0 : options.skipPopoutAssociated)) {
              const refGroup = selectedGroup.referenceGroup ? this.getPanel(selectedGroup.referenceGroup) : void 0;
              if (refGroup) {
                this.removeGroup(refGroup);
              }
            }
            selectedGroup.popoutGroup.dispose();
            this._groups.delete(group.id);
            this._onDidRemoveGroup.fire(group);
          }
          remove(this._popoutGroups, selectedGroup);
          const removedGroup = selectedGroup.disposable.dispose();
          if (!(options === null || options === void 0 ? void 0 : options.skipPopoutReturn) && removedGroup) {
            this.doAddGroup(removedGroup, [
              0
            ]);
            this.doSetGroupAndPanelActive(removedGroup);
          }
          if (!(options === null || options === void 0 ? void 0 : options.skipActive) && this._activeGroup === group) {
            const groups = Array.from(this._groups.values());
            this.doSetGroupAndPanelActive(groups.length > 0 ? groups[0].value : void 0);
          }
          this.updateWatermark();
          return selectedGroup.popoutGroup;
        }
        throw new Error("failed to find popout group");
      }
      const re = super.doRemoveGroup(group, options);
      if (!(options === null || options === void 0 ? void 0 : options.skipActive)) {
        if (this.activePanel !== activePanel) {
          this._onDidActivePanelChange.fire(this.activePanel);
        }
      }
      return re;
    }
    movingLock(func) {
      const isMoving = this._moving;
      try {
        this._moving = true;
        return func();
      } finally {
        this._moving = isMoving;
      }
    }
    moveGroupOrPanel(options) {
      var _a2;
      const destinationGroup = options.to.group;
      const sourceGroupId = options.from.groupId;
      const sourceItemId = options.from.panelId;
      const destinationTarget = options.to.position;
      const destinationIndex = options.to.index;
      const sourceGroup = sourceGroupId ? (_a2 = this._groups.get(sourceGroupId)) === null || _a2 === void 0 ? void 0 : _a2.value : void 0;
      if (!sourceGroup) {
        throw new Error(`Failed to find group id ${sourceGroupId}`);
      }
      if (sourceItemId === void 0) {
        this.moveGroup({
          from: {
            group: sourceGroup
          },
          to: {
            group: destinationGroup,
            position: destinationTarget
          }
        });
        return;
      }
      if (!destinationTarget || destinationTarget === "center") {
        const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
          skipSetActive: false,
          skipSetActiveGroup: true
        }));
        if (!removedPanel) {
          throw new Error(`No panel with id ${sourceItemId}`);
        }
        if (sourceGroup.model.size === 0) {
          this.doRemoveGroup(sourceGroup, {
            skipActive: true
          });
        }
        this.movingLock(() => destinationGroup.model.openPanel(removedPanel, {
          index: destinationIndex,
          skipSetGroupActive: true
        }));
        this.doSetGroupAndPanelActive(destinationGroup);
        this._onDidMovePanel.fire({
          panel: removedPanel,
          from: sourceGroup
        });
      } else {
        const referenceLocation = getGridLocation(destinationGroup.element);
        const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);
        if (sourceGroup.size < 2) {
          const [targetParentLocation, to] = tail(targetLocation);
          if (sourceGroup.api.location.type === "grid") {
            const sourceLocation = getGridLocation(sourceGroup.element);
            const [sourceParentLocation, from] = tail(sourceLocation);
            if (sequenceEquals(sourceParentLocation, targetParentLocation)) {
              this.gridview.moveView(sourceParentLocation, from, to);
              this._onDidMovePanel.fire({
                panel: this.getGroupPanel(sourceItemId),
                from: sourceGroup
              });
              return;
            }
          }
          if (sourceGroup.api.location.type === "popout") {
            const popoutGroup = this._popoutGroups.find((group) => group.popoutGroup === sourceGroup);
            const removedPanel = this.movingLock(() => popoutGroup.popoutGroup.model.removePanel(popoutGroup.popoutGroup.panels[0], {
              skipSetActive: true,
              skipSetActiveGroup: true
            }));
            this.doRemoveGroup(sourceGroup, {
              skipActive: true
            });
            const newGroup = this.createGroupAtLocation(targetLocation);
            this.movingLock(() => newGroup.model.openPanel(removedPanel, {
              skipSetActive: true
            }));
            this.doSetGroupAndPanelActive(newGroup);
            this._onDidMovePanel.fire({
              panel: this.getGroupPanel(sourceItemId),
              from: sourceGroup
            });
            return;
          }
          const targetGroup = this.movingLock(() => this.doRemoveGroup(sourceGroup, {
            skipActive: true,
            skipDispose: true
          }));
          const updatedReferenceLocation = getGridLocation(destinationGroup.element);
          const location2 = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, destinationTarget);
          this.movingLock(() => this.doAddGroup(targetGroup, location2));
          this.doSetGroupAndPanelActive(targetGroup);
          this._onDidMovePanel.fire({
            panel: this.getGroupPanel(sourceItemId),
            from: sourceGroup
          });
        } else {
          const removedPanel = this.movingLock(() => sourceGroup.model.removePanel(sourceItemId, {
            skipSetActive: false,
            skipSetActiveGroup: true
          }));
          if (!removedPanel) {
            throw new Error(`No panel with id ${sourceItemId}`);
          }
          const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, destinationTarget);
          const group = this.createGroupAtLocation(dropLocation);
          this.movingLock(() => group.model.openPanel(removedPanel, {
            skipSetGroupActive: true
          }));
          this.doSetGroupAndPanelActive(group);
          this._onDidMovePanel.fire({
            panel: removedPanel,
            from: sourceGroup
          });
        }
      }
    }
    moveGroup(options) {
      const from = options.from.group;
      const to = options.to.group;
      const target = options.to.position;
      if (target === "center") {
        const activePanel = from.activePanel;
        const panels = this.movingLock(() => [
          ...from.panels
        ].map((p) => from.model.removePanel(p.id, {
          skipSetActive: true
        })));
        if ((from === null || from === void 0 ? void 0 : from.model.size) === 0) {
          this.doRemoveGroup(from, {
            skipActive: true
          });
        }
        this.movingLock(() => {
          for (const panel of panels) {
            to.model.openPanel(panel, {
              skipSetActive: panel !== activePanel,
              skipSetGroupActive: true
            });
          }
        });
        this.doSetGroupAndPanelActive(to);
      } else {
        switch (from.api.location.type) {
          case "grid":
            this.gridview.removeView(getGridLocation(from.element));
            break;
          case "floating": {
            const selectedFloatingGroup = this._floatingGroups.find((x) => x.group === from);
            if (!selectedFloatingGroup) {
              throw new Error("failed to find floating group");
            }
            selectedFloatingGroup.dispose();
            break;
          }
          case "popout": {
            const selectedPopoutGroup = this._popoutGroups.find((x) => x.popoutGroup === from);
            if (!selectedPopoutGroup) {
              throw new Error("failed to find popout group");
            }
            selectedPopoutGroup.disposable.dispose();
          }
        }
        const referenceLocation = getGridLocation(to.element);
        const dropLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);
        let size;
        switch (this.gridview.orientation) {
          case Orientation.VERTICAL:
            size = referenceLocation.length % 2 == 0 ? from.api.width : from.api.height;
            break;
          case Orientation.HORIZONTAL:
            size = referenceLocation.length % 2 == 0 ? from.api.height : from.api.width;
            break;
        }
        this.gridview.addView(from, size, dropLocation);
      }
      from.panels.forEach((panel) => {
        this._onDidMovePanel.fire({
          panel,
          from
        });
      });
    }
    doSetGroupActive(group) {
      super.doSetGroupActive(group);
      const activePanel = this.activePanel;
      if (!this._moving && activePanel !== this._onDidActivePanelChange.value) {
        this._onDidActivePanelChange.fire(activePanel);
      }
    }
    doSetGroupAndPanelActive(group) {
      super.doSetGroupActive(group);
      const activePanel = this.activePanel;
      if (group && this.hasMaximizedGroup() && !this.isMaximizedGroup(group)) {
        this.exitMaximizedGroup();
      }
      if (!this._moving && activePanel !== this._onDidActivePanelChange.value) {
        this._onDidActivePanelChange.fire(activePanel);
      }
    }
    getNextGroupId() {
      let id = this.nextGroupId.next();
      while (this._groups.has(id)) {
        id = this.nextGroupId.next();
      }
      return id;
    }
    createGroup(options) {
      if (!options) {
        options = {};
      }
      let id = options === null || options === void 0 ? void 0 : options.id;
      if (id && this._groups.has(options.id)) {
        console.warn(`dockview: Duplicate group id ${options === null || options === void 0 ? void 0 : options.id}. reassigning group id to avoid errors`);
        id = void 0;
      }
      if (!id) {
        id = this.nextGroupId.next();
        while (this._groups.has(id)) {
          id = this.nextGroupId.next();
        }
      }
      const view = new DockviewGroupPanel(this, id, options);
      view.init({
        params: {},
        accessor: this
      });
      if (!this._groups.has(view.id)) {
        const disposable = new CompositeDisposable(view.model.onTabDragStart((event) => {
          this._onWillDragPanel.fire(event);
        }), view.model.onGroupDragStart((event) => {
          this._onWillDragGroup.fire(event);
        }), view.model.onMove((event) => {
          const { groupId, itemId, target, index: index2 } = event;
          this.moveGroupOrPanel({
            from: {
              groupId,
              panelId: itemId
            },
            to: {
              group: view,
              position: target,
              index: index2
            }
          });
        }), view.model.onDidDrop((event) => {
          this._onDidDrop.fire(event);
        }), view.model.onWillDrop((event) => {
          this._onWillDrop.fire(event);
        }), view.model.onWillShowOverlay((event) => {
          if (this.options.disableDnd) {
            event.preventDefault();
            return;
          }
          this._onWillShowOverlay.fire(event);
        }), view.model.onUnhandledDragOverEvent((event) => {
          this._onUnhandledDragOverEvent.fire(event);
        }), view.model.onDidAddPanel((event) => {
          if (this._moving) {
            return;
          }
          this._onDidAddPanel.fire(event.panel);
        }), view.model.onDidRemovePanel((event) => {
          if (this._moving) {
            return;
          }
          this._onDidRemovePanel.fire(event.panel);
        }), view.model.onDidActivePanelChange((event) => {
          if (this._moving) {
            return;
          }
          if (event.panel !== this.activePanel) {
            return;
          }
          if (this._onDidActivePanelChange.value !== event.panel) {
            this._onDidActivePanelChange.fire(event.panel);
          }
        }), Event.any(view.model.onDidPanelTitleChange, view.model.onDidPanelParametersChange)(() => {
          this._bufferOnDidLayoutChange.fire();
        }));
        this._groups.set(view.id, {
          value: view,
          disposable
        });
      }
      view.initialize();
      return view;
    }
    createPanel(options, group) {
      var _a2, _b, _c;
      const contentComponent = options.component;
      const tabComponent = (_a2 = options.tabComponent) !== null && _a2 !== void 0 ? _a2 : this.options.defaultTabComponent;
      const view = new DockviewPanelModel(this, options.id, contentComponent, tabComponent);
      const panel = new DockviewPanel(options.id, contentComponent, tabComponent, this, this._api, group, view, {
        renderer: options.renderer,
        minimumWidth: options.minimumWidth,
        minimumHeight: options.minimumHeight,
        maximumWidth: options.maximumWidth,
        maximumHeight: options.maximumHeight
      });
      panel.init({
        title: (_b = options.title) !== null && _b !== void 0 ? _b : options.id,
        params: (_c = options === null || options === void 0 ? void 0 : options.params) !== null && _c !== void 0 ? _c : {}
      });
      return panel;
    }
    createGroupAtLocation(location2, size) {
      const group = this.createGroup();
      this.doAddGroup(group, location2, size);
      return group;
    }
    findGroup(panel) {
      var _a2;
      return (_a2 = Array.from(this._groups.values()).find((group) => group.value.model.containsPanel(panel))) === null || _a2 === void 0 ? void 0 : _a2.value;
    }
    orientationAtLocation(location2) {
      const rootOrientation = this.gridview.orientation;
      return location2.length % 2 == 1 ? rootOrientation : orthogonal(rootOrientation);
    }
  }
  class GridviewComponent extends BaseGrid {
    get orientation() {
      return this.gridview.orientation;
    }
    set orientation(value) {
      this.gridview.orientation = value;
    }
    get options() {
      return this._options;
    }
    get deserializer() {
      return this._deserializer;
    }
    set deserializer(value) {
      this._deserializer = value;
    }
    constructor(parentElement, options) {
      super(parentElement, {
        proportionalLayout: options.proportionalLayout,
        orientation: options.orientation,
        styles: options.styles,
        disableAutoResizing: options.disableAutoResizing,
        className: options.className
      });
      this._onDidLayoutfromJSON = new Emitter();
      this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
      this._onDidRemoveGroup = new Emitter();
      this.onDidRemoveGroup = this._onDidRemoveGroup.event;
      this._onDidAddGroup = new Emitter();
      this.onDidAddGroup = this._onDidAddGroup.event;
      this._onDidActiveGroupChange = new Emitter();
      this.onDidActiveGroupChange = this._onDidActiveGroupChange.event;
      this._options = options;
      this.addDisposables(this._onDidAddGroup, this._onDidRemoveGroup, this._onDidActiveGroupChange, this.onDidAdd((event) => {
        this._onDidAddGroup.fire(event);
      }), this.onDidRemove((event) => {
        this._onDidRemoveGroup.fire(event);
      }), this.onDidActiveChange((event) => {
        this._onDidActiveGroupChange.fire(event);
      }));
      if (!this.options.components) {
        this.options.components = {};
      }
      if (!this.options.frameworkComponents) {
        this.options.frameworkComponents = {};
      }
    }
    updateOptions(options) {
      super.updateOptions(options);
      const hasOrientationChanged = typeof options.orientation === "string" && this.gridview.orientation !== options.orientation;
      this._options = Object.assign(Object.assign({}, this.options), options);
      if (hasOrientationChanged) {
        this.gridview.orientation = options.orientation;
      }
      this.layout(this.gridview.width, this.gridview.height, true);
    }
    removePanel(panel) {
      this.removeGroup(panel);
    }
    toJSON() {
      var _a2;
      const data = this.gridview.serialize();
      return {
        grid: data,
        activePanel: (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.id
      };
    }
    setVisible(panel, visible) {
      this.gridview.setViewVisible(getGridLocation(panel.element), visible);
    }
    setActive(panel) {
      this._groups.forEach((value, _key) => {
        value.value.setActive(panel === value.value);
      });
    }
    focus() {
      var _a2;
      (_a2 = this.activeGroup) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
    fromJSON(serializedGridview) {
      this.clear();
      const { grid, activePanel } = serializedGridview;
      try {
        const queue = [];
        const width = this.width;
        const height = this.height;
        this.gridview.deserialize(grid, {
          fromJSON: (node) => {
            var _a2, _b;
            const { data } = node;
            const view = createComponent(data.id, data.component, (_a2 = this.options.components) !== null && _a2 !== void 0 ? _a2 : {}, (_b = this.options.frameworkComponents) !== null && _b !== void 0 ? _b : {}, this.options.frameworkComponentFactory ? {
              createComponent: this.options.frameworkComponentFactory.createComponent
            } : void 0);
            queue.push(() => view.init({
              params: data.params,
              minimumWidth: data.minimumWidth,
              maximumWidth: data.maximumWidth,
              minimumHeight: data.minimumHeight,
              maximumHeight: data.maximumHeight,
              priority: data.priority,
              snap: !!data.snap,
              accessor: this,
              isVisible: node.visible
            }));
            this._onDidAddGroup.fire(view);
            this.registerPanel(view);
            return view;
          }
        });
        this.layout(width, height, true);
        queue.forEach((f) => f());
        if (typeof activePanel === "string") {
          const panel = this.getPanel(activePanel);
          if (panel) {
            this.doSetGroupActive(panel);
          }
        }
      } catch (err) {
        for (const group of this.groups) {
          group.dispose();
          this._groups.delete(group.id);
          this._onDidRemoveGroup.fire(group);
        }
        this.clear();
        throw err;
      }
      this._onDidLayoutfromJSON.fire();
    }
    clear() {
      const hasActiveGroup = this.activeGroup;
      const groups = Array.from(this._groups.values());
      for (const group of groups) {
        group.disposable.dispose();
        this.doRemoveGroup(group.value, {
          skipActive: true
        });
      }
      if (hasActiveGroup) {
        this.doSetGroupActive(void 0);
      }
      this.gridview.clear();
    }
    movePanel(panel, options) {
      var _a2;
      let relativeLocation;
      const removedPanel = this.gridview.remove(panel);
      const referenceGroup = (_a2 = this._groups.get(options.reference)) === null || _a2 === void 0 ? void 0 : _a2.value;
      if (!referenceGroup) {
        throw new Error(`reference group ${options.reference} does not exist`);
      }
      const target = toTarget(options.direction);
      if (target === "center") {
        throw new Error(`${target} not supported as an option`);
      } else {
        const location2 = getGridLocation(referenceGroup.element);
        relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
      }
      this.doAddGroup(removedPanel, relativeLocation, options.size);
    }
    addPanel(options) {
      var _a2, _b, _c, _d, _e, _f;
      let relativeLocation = (_a2 = options.location) !== null && _a2 !== void 0 ? _a2 : [
        0
      ];
      if ((_b = options.position) === null || _b === void 0 ? void 0 : _b.referencePanel) {
        const referenceGroup = (_c = this._groups.get(options.position.referencePanel)) === null || _c === void 0 ? void 0 : _c.value;
        if (!referenceGroup) {
          throw new Error(`reference group ${options.position.referencePanel} does not exist`);
        }
        const target = toTarget(options.position.direction);
        if (target === "center") {
          throw new Error(`${target} not supported as an option`);
        } else {
          const location2 = getGridLocation(referenceGroup.element);
          relativeLocation = getRelativeLocation(this.gridview.orientation, location2, target);
        }
      }
      const view = createComponent(options.id, options.component, (_d = this.options.components) !== null && _d !== void 0 ? _d : {}, (_e = this.options.frameworkComponents) !== null && _e !== void 0 ? _e : {}, this.options.frameworkComponentFactory ? {
        createComponent: this.options.frameworkComponentFactory.createComponent
      } : void 0);
      view.init({
        params: (_f = options.params) !== null && _f !== void 0 ? _f : {},
        minimumWidth: options.minimumWidth,
        maximumWidth: options.maximumWidth,
        minimumHeight: options.minimumHeight,
        maximumHeight: options.maximumHeight,
        priority: options.priority,
        snap: !!options.snap,
        accessor: this,
        isVisible: true
      });
      this.registerPanel(view);
      this.doAddGroup(view, relativeLocation, options.size);
      this.doSetGroupActive(view);
      return view;
    }
    registerPanel(panel) {
      const disposable = new CompositeDisposable(panel.api.onDidFocusChange((event) => {
        if (!event.isFocused) {
          return;
        }
        this._groups.forEach((groupItem) => {
          const group = groupItem.value;
          if (group !== panel) {
            group.setActive(false);
          } else {
            group.setActive(true);
          }
        });
      }));
      this._groups.set(panel.id, {
        value: panel,
        disposable
      });
    }
    moveGroup(referenceGroup, groupId, target) {
      const sourceGroup = this.getPanel(groupId);
      if (!sourceGroup) {
        throw new Error("invalid operation");
      }
      const referenceLocation = getGridLocation(referenceGroup.element);
      const targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, target);
      const [targetParentLocation, to] = tail(targetLocation);
      const sourceLocation = getGridLocation(sourceGroup.element);
      const [sourceParentLocation, from] = tail(sourceLocation);
      if (sequenceEquals(sourceParentLocation, targetParentLocation)) {
        this.gridview.moveView(sourceParentLocation, from, to);
        return;
      }
      const targetGroup = this.doRemoveGroup(sourceGroup, {
        skipActive: true,
        skipDispose: true
      });
      const updatedReferenceLocation = getGridLocation(referenceGroup.element);
      const location2 = getRelativeLocation(this.gridview.orientation, updatedReferenceLocation, target);
      this.doAddGroup(targetGroup, location2);
    }
    removeGroup(group) {
      super.removeGroup(group);
    }
    dispose() {
      super.dispose();
      this._onDidLayoutfromJSON.dispose();
    }
  }
  class SplitviewComponent extends Resizable {
    get panels() {
      return this.splitview.getViews();
    }
    get options() {
      return this._options;
    }
    get length() {
      return this._panels.size;
    }
    get orientation() {
      return this.splitview.orientation;
    }
    get splitview() {
      return this._splitview;
    }
    set splitview(value) {
      this._splitview = value;
      this._splitviewChangeDisposable.value = new CompositeDisposable(this._splitview.onDidSashEnd(() => {
        this._onDidLayoutChange.fire(void 0);
      }), this._splitview.onDidAddView((e) => this._onDidAddView.fire(e)), this._splitview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get minimumSize() {
      return this.splitview.minimumSize;
    }
    get maximumSize() {
      return this.splitview.maximumSize;
    }
    get height() {
      return this.splitview.orientation === Orientation.HORIZONTAL ? this.splitview.orthogonalSize : this.splitview.size;
    }
    get width() {
      return this.splitview.orientation === Orientation.HORIZONTAL ? this.splitview.size : this.splitview.orthogonalSize;
    }
    constructor(parentElement, options) {
      var _a2;
      super(parentElement, options.disableAutoResizing);
      this._splitviewChangeDisposable = new MutableDisposable();
      this._panels = /* @__PURE__ */ new Map();
      this._onDidLayoutfromJSON = new Emitter();
      this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
      this._onDidAddView = new Emitter();
      this.onDidAddView = this._onDidAddView.event;
      this._onDidRemoveView = new Emitter();
      this.onDidRemoveView = this._onDidRemoveView.event;
      this._onDidLayoutChange = new Emitter();
      this.onDidLayoutChange = this._onDidLayoutChange.event;
      this._classNames = new Classnames(this.element);
      this._classNames.setClassNames((_a2 = options.className) !== null && _a2 !== void 0 ? _a2 : "");
      this._options = options;
      if (!options.components) {
        options.components = {};
      }
      if (!options.frameworkComponents) {
        options.frameworkComponents = {};
      }
      this.splitview = new Splitview(this.element, options);
      this.addDisposables(this._onDidAddView, this._onDidLayoutfromJSON, this._onDidRemoveView, this._onDidLayoutChange);
    }
    updateOptions(options) {
      var _a2, _b;
      if ("className" in options) {
        this._classNames.setClassNames((_a2 = options.className) !== null && _a2 !== void 0 ? _a2 : "");
      }
      if ("disableResizing" in options) {
        this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
      }
      if (typeof options.orientation === "string") {
        this.splitview.orientation = options.orientation;
      }
      this._options = Object.assign(Object.assign({}, this.options), options);
      this.splitview.layout(this.splitview.size, this.splitview.orthogonalSize);
    }
    focus() {
      var _a2;
      (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
    movePanel(from, to) {
      this.splitview.moveView(from, to);
    }
    setVisible(panel, visible) {
      const index2 = this.panels.indexOf(panel);
      this.splitview.setViewVisible(index2, visible);
    }
    setActive(panel, skipFocus) {
      this._activePanel = panel;
      this.panels.filter((v2) => v2 !== panel).forEach((v2) => {
        v2.api._onDidActiveChange.fire({
          isActive: false
        });
        if (!skipFocus) {
          v2.focus();
        }
      });
      panel.api._onDidActiveChange.fire({
        isActive: true
      });
      if (!skipFocus) {
        panel.focus();
      }
    }
    removePanel(panel, sizing) {
      const item = this._panels.get(panel.id);
      if (!item) {
        throw new Error(`unknown splitview panel ${panel.id}`);
      }
      item.dispose();
      this._panels.delete(panel.id);
      const index2 = this.panels.findIndex((_2) => _2 === panel);
      const removedView = this.splitview.removeView(index2, sizing);
      removedView.dispose();
      const panels = this.panels;
      if (panels.length > 0) {
        this.setActive(panels[panels.length - 1]);
      }
    }
    getPanel(id) {
      return this.panels.find((view) => view.id === id);
    }
    addPanel(options) {
      var _a2, _b, _c;
      if (this._panels.has(options.id)) {
        throw new Error(`panel ${options.id} already exists`);
      }
      const view = createComponent(options.id, options.component, (_a2 = this.options.components) !== null && _a2 !== void 0 ? _a2 : {}, (_b = this.options.frameworkComponents) !== null && _b !== void 0 ? _b : {}, this.options.frameworkWrapper ? {
        createComponent: this.options.frameworkWrapper.createComponent
      } : void 0);
      view.orientation = this.splitview.orientation;
      view.init({
        params: (_c = options.params) !== null && _c !== void 0 ? _c : {},
        minimumSize: options.minimumSize,
        maximumSize: options.maximumSize,
        snap: options.snap,
        priority: options.priority,
        accessor: this
      });
      const size = typeof options.size === "number" ? options.size : Sizing.Distribute;
      const index2 = typeof options.index === "number" ? options.index : void 0;
      this.splitview.addView(view, size, index2);
      this.doAddView(view);
      this.setActive(view);
      return view;
    }
    layout(width, height) {
      const [size, orthogonalSize] = this.splitview.orientation === Orientation.HORIZONTAL ? [
        width,
        height
      ] : [
        height,
        width
      ];
      this.splitview.layout(size, orthogonalSize);
    }
    doAddView(view) {
      const disposable = view.api.onDidFocusChange((event) => {
        if (!event.isFocused) {
          return;
        }
        this.setActive(view, true);
      });
      this._panels.set(view.id, disposable);
    }
    toJSON() {
      var _a2;
      const views = this.splitview.getViews().map((view, i) => {
        const size = this.splitview.getViewSize(i);
        return {
          size,
          data: view.toJSON(),
          snap: !!view.snap,
          priority: view.priority
        };
      });
      return {
        views,
        activeView: (_a2 = this._activePanel) === null || _a2 === void 0 ? void 0 : _a2.id,
        size: this.splitview.size,
        orientation: this.splitview.orientation
      };
    }
    fromJSON(serializedSplitview) {
      this.clear();
      const { views, orientation, size, activeView } = serializedSplitview;
      const queue = [];
      const width = this.width;
      const height = this.height;
      this.splitview = new Splitview(this.element, {
        orientation,
        proportionalLayout: this.options.proportionalLayout,
        descriptor: {
          size,
          views: views.map((view) => {
            var _a2, _b;
            const data = view.data;
            if (this._panels.has(data.id)) {
              throw new Error(`panel ${data.id} already exists`);
            }
            const panel = createComponent(data.id, data.component, (_a2 = this.options.components) !== null && _a2 !== void 0 ? _a2 : {}, (_b = this.options.frameworkComponents) !== null && _b !== void 0 ? _b : {}, this.options.frameworkWrapper ? {
              createComponent: this.options.frameworkWrapper.createComponent
            } : void 0);
            queue.push(() => {
              var _a3;
              panel.init({
                params: (_a3 = data.params) !== null && _a3 !== void 0 ? _a3 : {},
                minimumSize: data.minimumSize,
                maximumSize: data.maximumSize,
                snap: view.snap,
                priority: view.priority,
                accessor: this
              });
            });
            panel.orientation = orientation;
            this.doAddView(panel);
            setTimeout(() => {
              this._onDidAddView.fire(panel);
            }, 0);
            return {
              size: view.size,
              view: panel
            };
          })
        }
      });
      this.layout(width, height);
      queue.forEach((f) => f());
      if (typeof activeView === "string") {
        const panel = this.getPanel(activeView);
        if (panel) {
          this.setActive(panel);
        }
      }
      this._onDidLayoutfromJSON.fire();
    }
    clear() {
      for (const disposable of this._panels.values()) {
        disposable.dispose();
      }
      this._panels.clear();
      while (this.splitview.length > 0) {
        const view = this.splitview.removeView(0, Sizing.Distribute, true);
        view.dispose();
      }
    }
    dispose() {
      for (const disposable of this._panels.values()) {
        disposable.dispose();
      }
      this._panels.clear();
      const views = this.splitview.getViews();
      this._splitviewChangeDisposable.dispose();
      this.splitview.dispose();
      for (const view of views) {
        view.dispose();
      }
      super.dispose();
    }
  }
  class DefaultHeader extends CompositeDisposable {
    get element() {
      return this._element;
    }
    constructor() {
      super();
      this._expandedIcon = createExpandMoreButton();
      this._collapsedIcon = createChevronRightButton();
      this.disposable = new MutableDisposable();
      this.apiRef = {
        api: null
      };
      this._element = document.createElement("div");
      this.element.className = "default-header";
      this._content = document.createElement("span");
      this._expander = document.createElement("div");
      this._expander.className = "dockview-pane-header-icon";
      this.element.appendChild(this._expander);
      this.element.appendChild(this._content);
      this.addDisposables(addDisposableListener(this._element, "click", () => {
        var _a2;
        (_a2 = this.apiRef.api) === null || _a2 === void 0 ? void 0 : _a2.setExpanded(!this.apiRef.api.isExpanded);
      }));
    }
    init(params) {
      this.apiRef.api = params.api;
      this._content.textContent = params.title;
      this.updateIcon();
      this.disposable.value = params.api.onDidExpansionChange(() => {
        this.updateIcon();
      });
    }
    updateIcon() {
      var _a2;
      const isExpanded = !!((_a2 = this.apiRef.api) === null || _a2 === void 0 ? void 0 : _a2.isExpanded);
      toggleClass(this._expander, "collapsed", !isExpanded);
      if (isExpanded) {
        if (this._expander.contains(this._collapsedIcon)) {
          this._collapsedIcon.remove();
        }
        if (!this._expander.contains(this._expandedIcon)) {
          this._expander.appendChild(this._expandedIcon);
        }
      } else {
        if (this._expander.contains(this._expandedIcon)) {
          this._expandedIcon.remove();
        }
        if (!this._expander.contains(this._collapsedIcon)) {
          this._expander.appendChild(this._collapsedIcon);
        }
      }
    }
    update(_params) {
    }
    dispose() {
      this.disposable.dispose();
      super.dispose();
    }
  }
  const nextLayoutId = sequentialNumberGenerator();
  class PaneFramework extends DraggablePaneviewPanel {
    constructor(options) {
      super(options.accessor, options.id, options.component, options.headerComponent, options.orientation, options.isExpanded, options.disableDnd);
      this.options = options;
    }
    getBodyComponent() {
      return this.options.body;
    }
    getHeaderComponent() {
      return this.options.header;
    }
  }
  class PaneviewComponent extends Resizable {
    get id() {
      return this._id;
    }
    get panels() {
      return this.paneview.getPanes();
    }
    set paneview(value) {
      this._paneview = value;
      this._disposable.value = new CompositeDisposable(this._paneview.onDidChange(() => {
        this._onDidLayoutChange.fire(void 0);
      }), this._paneview.onDidAddView((e) => this._onDidAddView.fire(e)), this._paneview.onDidRemoveView((e) => this._onDidRemoveView.fire(e)));
    }
    get paneview() {
      return this._paneview;
    }
    get minimumSize() {
      return this.paneview.minimumSize;
    }
    get maximumSize() {
      return this.paneview.maximumSize;
    }
    get height() {
      return this.paneview.orientation === Orientation.HORIZONTAL ? this.paneview.orthogonalSize : this.paneview.size;
    }
    get width() {
      return this.paneview.orientation === Orientation.HORIZONTAL ? this.paneview.size : this.paneview.orthogonalSize;
    }
    get options() {
      return this._options;
    }
    constructor(parentElement, options) {
      var _a2;
      super(parentElement, options.disableAutoResizing);
      this._id = nextLayoutId.next();
      this._disposable = new MutableDisposable();
      this._viewDisposables = /* @__PURE__ */ new Map();
      this._onDidLayoutfromJSON = new Emitter();
      this.onDidLayoutFromJSON = this._onDidLayoutfromJSON.event;
      this._onDidLayoutChange = new Emitter();
      this.onDidLayoutChange = this._onDidLayoutChange.event;
      this._onDidDrop = new Emitter();
      this.onDidDrop = this._onDidDrop.event;
      this._onDidAddView = new Emitter();
      this.onDidAddView = this._onDidAddView.event;
      this._onDidRemoveView = new Emitter();
      this.onDidRemoveView = this._onDidRemoveView.event;
      this.addDisposables(this._onDidLayoutChange, this._onDidLayoutfromJSON, this._onDidDrop, this._onDidAddView, this._onDidRemoveView);
      this._classNames = new Classnames(this.element);
      this._classNames.setClassNames((_a2 = options.className) !== null && _a2 !== void 0 ? _a2 : "");
      this._options = options;
      if (!options.components) {
        options.components = {};
      }
      if (!options.frameworkComponents) {
        options.frameworkComponents = {};
      }
      this.paneview = new Paneview(this.element, {
        orientation: Orientation.VERTICAL
      });
      this.addDisposables(this._disposable);
    }
    setVisible(panel, visible) {
      const index2 = this.panels.indexOf(panel);
      this.paneview.setViewVisible(index2, visible);
    }
    focus() {
    }
    updateOptions(options) {
      var _a2, _b;
      if ("className" in options) {
        this._classNames.setClassNames((_a2 = options.className) !== null && _a2 !== void 0 ? _a2 : "");
      }
      if ("disableResizing" in options) {
        this.disableResizing = (_b = options.disableAutoResizing) !== null && _b !== void 0 ? _b : false;
      }
      this._options = Object.assign(Object.assign({}, this.options), options);
    }
    addPanel(options) {
      var _a2, _b, _c, _d;
      const body = createComponent(options.id, options.component, (_a2 = this.options.components) !== null && _a2 !== void 0 ? _a2 : {}, (_b = this.options.frameworkComponents) !== null && _b !== void 0 ? _b : {}, this.options.frameworkWrapper ? {
        createComponent: this.options.frameworkWrapper.body.createComponent
      } : void 0);
      let header;
      if (options.headerComponent) {
        header = createComponent(options.id, options.headerComponent, (_c = this.options.headerComponents) !== null && _c !== void 0 ? _c : {}, this.options.headerframeworkComponents, this.options.frameworkWrapper ? {
          createComponent: this.options.frameworkWrapper.header.createComponent
        } : void 0);
      } else {
        header = new DefaultHeader();
      }
      const view = new PaneFramework({
        id: options.id,
        component: options.component,
        headerComponent: options.headerComponent,
        header,
        body,
        orientation: Orientation.VERTICAL,
        isExpanded: !!options.isExpanded,
        disableDnd: !!this.options.disableDnd,
        accessor: this
      });
      this.doAddPanel(view);
      const size = typeof options.size === "number" ? options.size : Sizing.Distribute;
      const index2 = typeof options.index === "number" ? options.index : void 0;
      view.init({
        params: (_d = options.params) !== null && _d !== void 0 ? _d : {},
        minimumBodySize: options.minimumBodySize,
        maximumBodySize: options.maximumBodySize,
        isExpanded: options.isExpanded,
        title: options.title,
        containerApi: new PaneviewApi(this),
        accessor: this
      });
      this.paneview.addPane(view, size, index2);
      view.orientation = this.paneview.orientation;
      return view;
    }
    removePanel(panel) {
      const views = this.panels;
      const index2 = views.findIndex((_2) => _2 === panel);
      this.paneview.removePane(index2);
      this.doRemovePanel(panel);
    }
    movePanel(from, to) {
      this.paneview.moveView(from, to);
    }
    getPanel(id) {
      return this.panels.find((view) => view.id === id);
    }
    layout(width, height) {
      const [size, orthogonalSize] = this.paneview.orientation === Orientation.HORIZONTAL ? [
        width,
        height
      ] : [
        height,
        width
      ];
      this.paneview.layout(size, orthogonalSize);
    }
    toJSON() {
      const maximum = (value) => value === Number.MAX_SAFE_INTEGER || value === Number.POSITIVE_INFINITY ? void 0 : value;
      const minimum = (value) => value <= 0 ? void 0 : value;
      const views = this.paneview.getPanes().map((view, i) => {
        const size = this.paneview.getViewSize(i);
        return {
          size,
          data: view.toJSON(),
          minimumSize: minimum(view.minimumBodySize),
          maximumSize: maximum(view.maximumBodySize),
          expanded: view.isExpanded()
        };
      });
      return {
        views,
        size: this.paneview.size
      };
    }
    fromJSON(serializedPaneview) {
      this.clear();
      const { views, size } = serializedPaneview;
      const queue = [];
      const width = this.width;
      const height = this.height;
      this.paneview = new Paneview(this.element, {
        orientation: Orientation.VERTICAL,
        descriptor: {
          size,
          views: views.map((view) => {
            var _a2, _b, _c, _d;
            const data = view.data;
            const body = createComponent(data.id, data.component, (_a2 = this.options.components) !== null && _a2 !== void 0 ? _a2 : {}, (_b = this.options.frameworkComponents) !== null && _b !== void 0 ? _b : {}, this.options.frameworkWrapper ? {
              createComponent: this.options.frameworkWrapper.body.createComponent
            } : void 0);
            let header;
            if (data.headerComponent) {
              header = createComponent(data.id, data.headerComponent, (_c = this.options.headerComponents) !== null && _c !== void 0 ? _c : {}, (_d = this.options.headerframeworkComponents) !== null && _d !== void 0 ? _d : {}, this.options.frameworkWrapper ? {
                createComponent: this.options.frameworkWrapper.header.createComponent
              } : void 0);
            } else {
              header = new DefaultHeader();
            }
            const panel = new PaneFramework({
              id: data.id,
              component: data.component,
              headerComponent: data.headerComponent,
              header,
              body,
              orientation: Orientation.VERTICAL,
              isExpanded: !!view.expanded,
              disableDnd: !!this.options.disableDnd,
              accessor: this
            });
            this.doAddPanel(panel);
            queue.push(() => {
              var _a3;
              panel.init({
                params: (_a3 = data.params) !== null && _a3 !== void 0 ? _a3 : {},
                minimumBodySize: view.minimumSize,
                maximumBodySize: view.maximumSize,
                title: data.title,
                isExpanded: !!view.expanded,
                containerApi: new PaneviewApi(this),
                accessor: this
              });
              panel.orientation = this.paneview.orientation;
            });
            setTimeout(() => {
              this._onDidAddView.fire(panel);
            }, 0);
            return {
              size: view.size,
              view: panel
            };
          })
        }
      });
      this.layout(width, height);
      queue.forEach((f) => f());
      this._onDidLayoutfromJSON.fire();
    }
    clear() {
      for (const [_2, value] of this._viewDisposables.entries()) {
        value.dispose();
      }
      this._viewDisposables.clear();
      this.paneview.dispose();
    }
    doAddPanel(panel) {
      const disposable = panel.onDidDrop((event) => {
        this._onDidDrop.fire(event);
      });
      this._viewDisposables.set(panel.id, disposable);
    }
    doRemovePanel(panel) {
      const disposable = this._viewDisposables.get(panel.id);
      if (disposable) {
        disposable.dispose();
        this._viewDisposables.delete(panel.id);
      }
    }
    dispose() {
      super.dispose();
      for (const [_2, value] of this._viewDisposables.entries()) {
        value.dispose();
      }
      this._viewDisposables.clear();
      this.paneview.dispose();
    }
  }
  class SplitviewPanel extends BasePanelView {
    get priority() {
      return this._priority;
    }
    set orientation(value) {
      this._orientation = value;
    }
    get orientation() {
      return this._orientation;
    }
    get minimumSize() {
      const size = typeof this._minimumSize === "function" ? this._minimumSize() : this._minimumSize;
      if (size !== this._evaluatedMinimumSize) {
        this._evaluatedMinimumSize = size;
        this.updateConstraints();
      }
      return size;
    }
    get maximumSize() {
      const size = typeof this._maximumSize === "function" ? this._maximumSize() : this._maximumSize;
      if (size !== this._evaluatedMaximumSize) {
        this._evaluatedMaximumSize = size;
        this.updateConstraints();
      }
      return size;
    }
    get snap() {
      return this._snap;
    }
    constructor(id, componentName) {
      super(id, componentName, new SplitviewPanelApiImpl(id, componentName));
      this._evaluatedMinimumSize = 0;
      this._evaluatedMaximumSize = Number.POSITIVE_INFINITY;
      this._minimumSize = 0;
      this._maximumSize = Number.POSITIVE_INFINITY;
      this._snap = false;
      this._onDidChange = new Emitter();
      this.onDidChange = this._onDidChange.event;
      this.api.initialize(this);
      this.addDisposables(this._onDidChange, this.api.onWillVisibilityChange((event) => {
        const { isVisible } = event;
        const { accessor } = this._params;
        accessor.setVisible(this, isVisible);
      }), this.api.onActiveChange(() => {
        const { accessor } = this._params;
        accessor.setActive(this);
      }), this.api.onDidConstraintsChangeInternal((event) => {
        if (typeof event.minimumSize === "number" || typeof event.minimumSize === "function") {
          this._minimumSize = event.minimumSize;
        }
        if (typeof event.maximumSize === "number" || typeof event.maximumSize === "function") {
          this._maximumSize = event.maximumSize;
        }
        this.updateConstraints();
      }), this.api.onDidSizeChange((event) => {
        this._onDidChange.fire({
          size: event.size
        });
      }));
    }
    setVisible(isVisible) {
      this.api._onDidVisibilityChange.fire({
        isVisible
      });
    }
    setActive(isActive) {
      this.api._onDidActiveChange.fire({
        isActive
      });
    }
    layout(size, orthogonalSize) {
      const [width, height] = this.orientation === Orientation.HORIZONTAL ? [
        size,
        orthogonalSize
      ] : [
        orthogonalSize,
        size
      ];
      super.layout(width, height);
    }
    init(parameters) {
      super.init(parameters);
      this._priority = parameters.priority;
      if (parameters.minimumSize) {
        this._minimumSize = parameters.minimumSize;
      }
      if (parameters.maximumSize) {
        this._maximumSize = parameters.maximumSize;
      }
      if (parameters.snap) {
        this._snap = parameters.snap;
      }
    }
    toJSON() {
      const maximum = (value) => value === Number.MAX_SAFE_INTEGER || value === Number.POSITIVE_INFINITY ? void 0 : value;
      const minimum = (value) => value <= 0 ? void 0 : value;
      return Object.assign(Object.assign({}, super.toJSON()), {
        minimumSize: minimum(this.minimumSize),
        maximumSize: maximum(this.maximumSize)
      });
    }
    updateConstraints() {
      this.api._onDidConstraintsChange.fire({
        maximumSize: this._evaluatedMaximumSize,
        minimumSize: this._evaluatedMinimumSize
      });
    }
  }
  function createDockview(element, options) {
    const component = new DockviewComponent(element, options);
    return component.api;
  }
  function createSplitview(element, options) {
    const component = new SplitviewComponent(element, options);
    return new SplitviewApi(component);
  }
  function createGridview(element, options) {
    const component = new GridviewComponent(element, options);
    return new GridviewApi(component);
  }
  function createPaneview(element, options) {
    const component = new PaneviewComponent(element, options);
    return new PaneviewApi(component);
  }
  const ReactComponentBridge = (props, ref) => {
    const [_2, triggerRender] = React.useState();
    const _props = React.useRef(props.componentProps);
    React.useImperativeHandle(ref, () => ({
      update: (componentProps) => {
        _props.current = Object.assign(Object.assign({}, _props.current), componentProps);
        triggerRender(Date.now());
      }
    }), []);
    return React.createElement(props.component, _props.current);
  };
  ReactComponentBridge.displayName = "DockviewReactJsBridge";
  const uniquePortalKeyGenerator = /* @__PURE__ */ (() => {
    let value = 1;
    return {
      next: () => `dockview_react_portal_key_${(value++).toString()}`
    };
  })();
  const ReactPartContext = React.createContext({});
  class ReactPart {
    constructor(parent, portalStore, component, parameters, context) {
      this.parent = parent;
      this.portalStore = portalStore;
      this.component = component;
      this.parameters = parameters;
      this.context = context;
      this._initialProps = {};
      this.disposed = false;
      this.createPortal();
    }
    update(props) {
      if (this.disposed) {
        throw new Error("invalid operation: resource is already disposed");
      }
      if (!this.componentInstance) {
        this._initialProps = Object.assign(Object.assign({}, this._initialProps), props);
      } else {
        this.componentInstance.update(props);
      }
    }
    createPortal() {
      if (this.disposed) {
        throw new Error("invalid operation: resource is already disposed");
      }
      if (!isReactComponent(this.component)) {
        throw new Error("Dockview: Only React.memo(...), React.ForwardRef(...) and functional components are accepted as components");
      }
      const bridgeComponent = React.createElement(React.forwardRef(ReactComponentBridge), {
        component: this.component,
        componentProps: this.parameters,
        ref: (element) => {
          this.componentInstance = element;
          if (Object.keys(this._initialProps).length > 0) {
            this.componentInstance.update(this._initialProps);
            this._initialProps = {};
          }
        }
      });
      const node = this.context ? React.createElement(ReactPartContext.Provider, {
        value: this.context
      }, bridgeComponent) : bridgeComponent;
      const portal = ReactDOM.createPortal(node, this.parent, uniquePortalKeyGenerator.next());
      this.ref = {
        portal,
        disposable: this.portalStore.addPortal(portal)
      };
    }
    dispose() {
      var _a2;
      (_a2 = this.ref) === null || _a2 === void 0 ? void 0 : _a2.disposable.dispose();
      this.disposed = true;
    }
  }
  const usePortalsLifecycle = () => {
    const [portals, setPortals] = React.useState([]);
    React.useDebugValue(`Portal count: ${portals.length}`);
    const addPortal = React.useCallback((portal) => {
      setPortals((existingPortals) => [
        ...existingPortals,
        portal
      ]);
      let disposed = false;
      return Disposable.from(() => {
        if (disposed) {
          throw new Error("invalid operation: resource already disposed");
        }
        disposed = true;
        setPortals((existingPortals) => existingPortals.filter((p) => p !== portal));
      });
    }, []);
    return [
      portals,
      addPortal
    ];
  };
  function isReactComponent(component) {
    return typeof component === "function" || !!(component === null || component === void 0 ? void 0 : component.$$typeof);
  }
  class ReactPanelContentPart {
    get element() {
      return this._element;
    }
    constructor(id, component, reactPortalStore) {
      this.id = id;
      this.component = component;
      this.reactPortalStore = reactPortalStore;
      this._onDidFocus = new Emitter();
      this.onDidFocus = this._onDidFocus.event;
      this._onDidBlur = new Emitter();
      this.onDidBlur = this._onDidBlur.event;
      this._element = document.createElement("div");
      this._element.className = "dockview-react-part";
      this._element.style.height = "100%";
      this._element.style.width = "100%";
    }
    focus() {
    }
    init(parameters) {
      this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
        params: parameters.params,
        api: parameters.api,
        containerApi: parameters.containerApi
      });
    }
    update(event) {
      var _a2;
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update({
        params: event.params
      });
    }
    layout(_width, _height) {
    }
    dispose() {
      var _a2;
      this._onDidFocus.dispose();
      this._onDidBlur.dispose();
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
    }
  }
  class ReactPanelHeaderPart {
    get element() {
      return this._element;
    }
    constructor(id, component, reactPortalStore) {
      this.id = id;
      this.component = component;
      this.reactPortalStore = reactPortalStore;
      this._element = document.createElement("div");
      this._element.className = "dockview-react-part";
      this._element.style.height = "100%";
      this._element.style.width = "100%";
    }
    focus() {
    }
    init(parameters) {
      this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
        params: parameters.params,
        api: parameters.api,
        containerApi: parameters.containerApi
      });
    }
    update(event) {
      var _a2;
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update({
        params: event.params
      });
    }
    layout(_width, _height) {
    }
    dispose() {
      var _a2;
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
    }
  }
  class ReactWatermarkPart {
    get element() {
      return this._element;
    }
    constructor(id, component, reactPortalStore) {
      this.id = id;
      this.component = component;
      this.reactPortalStore = reactPortalStore;
      this._element = document.createElement("div");
      this._element.className = "dockview-react-part";
      this._element.style.height = "100%";
      this._element.style.width = "100%";
    }
    init(parameters) {
      this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
        group: parameters.group,
        containerApi: parameters.containerApi
      });
    }
    focus() {
    }
    update(params) {
      var _a2, _b, _c;
      if (this.parameters) {
        this.parameters.params = params.params;
      }
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update({
        params: (_c = (_b = this.parameters) === null || _b === void 0 ? void 0 : _b.params) !== null && _c !== void 0 ? _c : {}
      });
    }
    layout(_width, _height) {
    }
    dispose() {
      var _a2;
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
    }
  }
  class ReactHeaderActionsRendererPart {
    get element() {
      return this._element;
    }
    get part() {
      return this._part;
    }
    constructor(component, reactPortalStore, _group) {
      this.component = component;
      this.reactPortalStore = reactPortalStore;
      this._group = _group;
      this.mutableDisposable = new MutableDisposable();
      this._element = document.createElement("div");
      this._element.className = "dockview-react-part";
      this._element.style.height = "100%";
      this._element.style.width = "100%";
    }
    init(parameters) {
      this.mutableDisposable.value = new CompositeDisposable(this._group.model.onDidAddPanel(() => {
        this.updatePanels();
      }), this._group.model.onDidRemovePanel(() => {
        this.updatePanels();
      }), this._group.model.onDidActivePanelChange(() => {
        this.updateActivePanel();
      }), parameters.api.onDidActiveChange(() => {
        this.updateGroupActive();
      }));
      this._part = new ReactPart(this.element, this.reactPortalStore, this.component, {
        api: parameters.api,
        containerApi: parameters.containerApi,
        panels: this._group.model.panels,
        activePanel: this._group.model.activePanel,
        isGroupActive: this._group.api.isActive,
        group: this._group
      });
    }
    dispose() {
      var _a2;
      this.mutableDisposable.dispose();
      (_a2 = this._part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
    }
    update(event) {
      var _a2;
      (_a2 = this._part) === null || _a2 === void 0 ? void 0 : _a2.update(event.params);
    }
    updatePanels() {
      this.update({
        params: {
          panels: this._group.model.panels
        }
      });
    }
    updateActivePanel() {
      this.update({
        params: {
          activePanel: this._group.model.activePanel
        }
      });
    }
    updateGroupActive() {
      this.update({
        params: {
          isGroupActive: this._group.api.isActive
        }
      });
    }
  }
  function createGroupControlElement(component, store) {
    return component ? (groupPanel) => {
      return new ReactHeaderActionsRendererPart(component, store, groupPanel);
    } : void 0;
  }
  const DEFAULT_REACT_TAB = "props.defaultTabComponent";
  function extractCoreOptions(props) {
    const coreOptions = PROPERTY_KEYS.reduce((obj, key) => {
      if (key in props) {
        obj[key] = props[key];
      }
      return obj;
    }, {});
    return coreOptions;
  }
  const DockviewReact = React.forwardRef((props, ref) => {
    const domRef = React.useRef(null);
    const dockviewRef = React.useRef();
    const [portals, addPortal] = usePortalsLifecycle();
    React.useImperativeHandle(ref, () => domRef.current, []);
    const prevProps = React.useRef({});
    React.useEffect(() => {
      const changes = {};
      PROPERTY_KEYS.forEach((propKey) => {
        const key = propKey;
        const propValue = props[key];
        if (key in props && propValue !== prevProps.current[key]) {
          changes[key] = propValue;
        }
      });
      if (dockviewRef.current) {
        dockviewRef.current.updateOptions(changes);
      }
      prevProps.current = props;
    }, PROPERTY_KEYS.map((key) => props[key]));
    React.useEffect(() => {
      var _a2;
      if (!domRef.current) {
        return;
      }
      const frameworkTabComponents = (_a2 = props.tabComponents) !== null && _a2 !== void 0 ? _a2 : {};
      if (props.defaultTabComponent) {
        frameworkTabComponents[DEFAULT_REACT_TAB] = props.defaultTabComponent;
      }
      const frameworkOptions = {
        createLeftHeaderActionComponent: createGroupControlElement(props.leftHeaderActionsComponent, {
          addPortal
        }),
        createRightHeaderActionComponent: createGroupControlElement(props.rightHeaderActionsComponent, {
          addPortal
        }),
        createPrefixHeaderActionComponent: createGroupControlElement(props.prefixHeaderActionsComponent, {
          addPortal
        }),
        createComponent: (options) => {
          return new ReactPanelContentPart(options.id, props.components[options.name], {
            addPortal
          });
        },
        createTabComponent(options) {
          return new ReactPanelHeaderPart(options.id, frameworkTabComponents[options.name], {
            addPortal
          });
        },
        createWatermarkComponent: props.watermarkComponent ? () => {
          return new ReactWatermarkPart("watermark", props.watermarkComponent, {
            addPortal
          });
        } : void 0,
        defaultTabComponent: props.defaultTabComponent ? DEFAULT_REACT_TAB : void 0
      };
      const api = createDockview(domRef.current, Object.assign(Object.assign({}, extractCoreOptions(props)), frameworkOptions));
      const { clientWidth, clientHeight } = domRef.current;
      api.layout(clientWidth, clientHeight);
      if (props.onReady) {
        props.onReady({
          api
        });
      }
      dockviewRef.current = api;
      return () => {
        api.dispose();
      };
    }, []);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return () => {
        };
      }
      const disposable = dockviewRef.current.onDidDrop((event) => {
        if (props.onDidDrop) {
          props.onDidDrop(event);
        }
      });
      return () => {
        disposable.dispose();
      };
    }, [
      props.onDidDrop
    ]);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return () => {
        };
      }
      const disposable = dockviewRef.current.onUnhandledDragOverEvent((event) => {
        var _a2;
        if ((_a2 = props.showDndOverlay) === null || _a2 === void 0 ? void 0 : _a2.call(props, event)) {
          event.accept();
        }
      });
      return () => {
        disposable.dispose();
      };
    }, [
      props.showDndOverlay
    ]);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return () => {
        };
      }
      const disposable = dockviewRef.current.onWillDrop((event) => {
        if (props.onWillDrop) {
          props.onWillDrop(event);
        }
      });
      return () => {
        disposable.dispose();
      };
    }, [
      props.onWillDrop
    ]);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return;
      }
      dockviewRef.current.updateOptions({
        createComponent: (options) => {
          return new ReactPanelContentPart(options.id, props.components[options.name], {
            addPortal
          });
        }
      });
    }, [
      props.components
    ]);
    React.useEffect(() => {
      var _a2;
      if (!dockviewRef.current) {
        return;
      }
      const frameworkTabComponents = (_a2 = props.tabComponents) !== null && _a2 !== void 0 ? _a2 : {};
      if (props.defaultTabComponent) {
        frameworkTabComponents[DEFAULT_REACT_TAB] = props.defaultTabComponent;
      }
      dockviewRef.current.updateOptions({
        defaultTabComponent: props.defaultTabComponent ? DEFAULT_REACT_TAB : void 0,
        createTabComponent(options) {
          return new ReactPanelHeaderPart(options.id, frameworkTabComponents[options.name], {
            addPortal
          });
        }
      });
    }, [
      props.tabComponents,
      props.defaultTabComponent
    ]);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return;
      }
      dockviewRef.current.updateOptions({
        createWatermarkComponent: props.watermarkComponent ? () => {
          return new ReactWatermarkPart("watermark", props.watermarkComponent, {
            addPortal
          });
        } : void 0
      });
    }, [
      props.watermarkComponent
    ]);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return;
      }
      dockviewRef.current.updateOptions({
        createRightHeaderActionComponent: createGroupControlElement(props.rightHeaderActionsComponent, {
          addPortal
        })
      });
    }, [
      props.rightHeaderActionsComponent
    ]);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return;
      }
      dockviewRef.current.updateOptions({
        createLeftHeaderActionComponent: createGroupControlElement(props.leftHeaderActionsComponent, {
          addPortal
        })
      });
    }, [
      props.leftHeaderActionsComponent
    ]);
    React.useEffect(() => {
      if (!dockviewRef.current) {
        return;
      }
      dockviewRef.current.updateOptions({
        createPrefixHeaderActionComponent: createGroupControlElement(props.prefixHeaderActionsComponent, {
          addPortal
        })
      });
    }, [
      props.prefixHeaderActionsComponent
    ]);
    return React.createElement("div", {
      className: props.className,
      style: {
        height: "100%",
        width: "100%"
      },
      ref: domRef
    }, portals);
  });
  DockviewReact.displayName = "DockviewComponent";
  (function(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  });
  class ReactPanelView extends SplitviewPanel {
    constructor(id, component, reactComponent, reactPortalStore) {
      super(id, component);
      this.reactComponent = reactComponent;
      this.reactPortalStore = reactPortalStore;
    }
    getComponent() {
      var _a2, _b;
      return new ReactPart(this.element, this.reactPortalStore, this.reactComponent, {
        params: (_b = (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params) !== null && _b !== void 0 ? _b : {},
        api: this.api,
        containerApi: new SplitviewApi(this._params.accessor)
      });
    }
  }
  const SplitviewReact = React.forwardRef((props, ref) => {
    const domRef = React.useRef(null);
    const splitviewRef = React.useRef();
    const [portals, addPortal] = usePortalsLifecycle();
    React.useImperativeHandle(ref, () => domRef.current, []);
    React.useEffect(() => {
      var _a2;
      const api = createSplitview(domRef.current, {
        disableAutoResizing: props.disableAutoResizing,
        orientation: (_a2 = props.orientation) !== null && _a2 !== void 0 ? _a2 : Orientation.HORIZONTAL,
        frameworkComponents: props.components,
        frameworkWrapper: {
          createComponent: (id, componentId, component) => {
            return new ReactPanelView(id, componentId, component, {
              addPortal
            });
          }
        },
        proportionalLayout: typeof props.proportionalLayout === "boolean" ? props.proportionalLayout : true,
        styles: props.hideBorders ? {
          separatorBorder: "transparent"
        } : void 0
      });
      const { clientWidth, clientHeight } = domRef.current;
      api.layout(clientWidth, clientHeight);
      if (props.onReady) {
        props.onReady({
          api
        });
      }
      splitviewRef.current = api;
      return () => {
        api.dispose();
      };
    }, []);
    React.useEffect(() => {
      if (!splitviewRef.current) {
        return;
      }
      splitviewRef.current.updateOptions({
        frameworkComponents: props.components
      });
    }, [
      props.components
    ]);
    return React.createElement("div", {
      className: props.className,
      style: {
        height: "100%",
        width: "100%"
      },
      ref: domRef
    }, portals);
  });
  SplitviewReact.displayName = "SplitviewComponent";
  class ReactGridPanelView extends GridviewPanel {
    constructor(id, component, reactComponent, reactPortalStore) {
      super(id, component);
      this.reactComponent = reactComponent;
      this.reactPortalStore = reactPortalStore;
    }
    getComponent() {
      var _a2, _b;
      return new ReactPart(this.element, this.reactPortalStore, this.reactComponent, {
        params: (_b = (_a2 = this._params) === null || _a2 === void 0 ? void 0 : _a2.params) !== null && _b !== void 0 ? _b : {},
        api: this.api,
        containerApi: new GridviewApi(this._params.accessor)
      });
    }
  }
  const GridviewReact = React.forwardRef((props, ref) => {
    const domRef = React.useRef(null);
    const gridviewRef = React.useRef();
    const [portals, addPortal] = usePortalsLifecycle();
    React.useImperativeHandle(ref, () => domRef.current, []);
    React.useEffect(() => {
      var _a2;
      if (!domRef.current) {
        return () => {
        };
      }
      const api = createGridview(domRef.current, {
        disableAutoResizing: props.disableAutoResizing,
        proportionalLayout: typeof props.proportionalLayout === "boolean" ? props.proportionalLayout : true,
        orientation: (_a2 = props.orientation) !== null && _a2 !== void 0 ? _a2 : Orientation.HORIZONTAL,
        frameworkComponents: props.components,
        frameworkComponentFactory: {
          createComponent: (id, componentId, component) => {
            return new ReactGridPanelView(id, componentId, component, {
              addPortal
            });
          }
        },
        styles: props.hideBorders ? {
          separatorBorder: "transparent"
        } : void 0
      });
      const { clientWidth, clientHeight } = domRef.current;
      api.layout(clientWidth, clientHeight);
      if (props.onReady) {
        props.onReady({
          api
        });
      }
      gridviewRef.current = api;
      return () => {
        api.dispose();
      };
    }, []);
    React.useEffect(() => {
      if (!gridviewRef.current) {
        return;
      }
      gridviewRef.current.updateOptions({
        frameworkComponents: props.components
      });
    }, [
      props.components
    ]);
    return React.createElement("div", {
      className: props.className,
      style: {
        height: "100%",
        width: "100%"
      },
      ref: domRef
    }, portals);
  });
  GridviewReact.displayName = "GridviewComponent";
  class PanePanelSection {
    get element() {
      return this._element;
    }
    constructor(id, component, reactPortalStore) {
      this.id = id;
      this.component = component;
      this.reactPortalStore = reactPortalStore;
      this._element = document.createElement("div");
      this._element.style.height = "100%";
      this._element.style.width = "100%";
    }
    init(parameters) {
      this.part = new ReactPart(this.element, this.reactPortalStore, this.component, {
        params: parameters.params,
        api: parameters.api,
        title: parameters.title,
        containerApi: parameters.containerApi
      });
    }
    toJSON() {
      return {
        id: this.id
      };
    }
    update(params) {
      var _a2;
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.update(params.params);
    }
    dispose() {
      var _a2;
      (_a2 = this.part) === null || _a2 === void 0 ? void 0 : _a2.dispose();
    }
  }
  const PaneviewReact = React.forwardRef((props, ref) => {
    const domRef = React.useRef(null);
    const paneviewRef = React.useRef();
    const [portals, addPortal] = usePortalsLifecycle();
    React.useImperativeHandle(ref, () => domRef.current, []);
    React.useEffect(() => {
      const createComponent2 = (id, _componentId, component) => new PanePanelSection(id, component, {
        addPortal
      });
      const api = createPaneview(domRef.current, {
        disableAutoResizing: props.disableAutoResizing,
        frameworkComponents: props.components,
        components: {},
        headerComponents: {},
        disableDnd: props.disableDnd,
        headerframeworkComponents: props.headerComponents,
        frameworkWrapper: {
          header: {
            createComponent: createComponent2
          },
          body: {
            createComponent: createComponent2
          }
        },
        showDndOverlay: props.showDndOverlay
      });
      const { clientWidth, clientHeight } = domRef.current;
      api.layout(clientWidth, clientHeight);
      if (props.onReady) {
        props.onReady({
          api
        });
      }
      paneviewRef.current = api;
      return () => {
        api.dispose();
      };
    }, []);
    React.useEffect(() => {
      if (!paneviewRef.current) {
        return;
      }
      paneviewRef.current.updateOptions({
        frameworkComponents: props.components
      });
    }, [
      props.components
    ]);
    React.useEffect(() => {
      if (!paneviewRef.current) {
        return;
      }
      paneviewRef.current.updateOptions({
        headerframeworkComponents: props.headerComponents
      });
    }, [
      props.headerComponents
    ]);
    React.useEffect(() => {
      if (!paneviewRef.current) {
        return () => {
        };
      }
      const api = paneviewRef.current;
      const disposable = api.onDidDrop((event) => {
        if (props.onDidDrop) {
          props.onDidDrop(Object.assign(Object.assign({}, event), {
            api
          }));
        }
      });
      return () => {
        disposable.dispose();
      };
    }, [
      props.onDidDrop
    ]);
    React.useEffect(() => {
      if (!paneviewRef.current) {
        return;
      }
      paneviewRef.current.updateOptions({
        showDndOverlay: props.showDndOverlay
      });
    }, [
      props.showDndOverlay
    ]);
    return React.createElement("div", {
      className: props.className,
      style: {
        height: "100%",
        width: "100%"
      },
      ref: domRef
    }, portals);
  });
  PaneviewReact.displayName = "PaneviewComponent";
  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2$1(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function compose$1() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }
    return function(x) {
      return fns.reduceRight(function(y, f) {
        return f(y);
      }, x);
    };
  }
  function curry$1(fn) {
    return function curried() {
      var _this = this;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return args.length >= fn.length ? fn.apply(this, args) : function() {
        for (var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          nextArgs[_key3] = arguments[_key3];
        }
        return curried.apply(_this, [].concat(args, nextArgs));
      };
    };
  }
  function isObject$1(value) {
    return {}.toString.call(value).includes("Object");
  }
  function isEmpty(obj) {
    return !Object.keys(obj).length;
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function hasOwnProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  function validateChanges(initial, changes) {
    if (!isObject$1(changes)) errorHandler$1("changeType");
    if (Object.keys(changes).some(function(field) {
      return !hasOwnProperty(initial, field);
    })) errorHandler$1("changeField");
    return changes;
  }
  function validateSelector(selector) {
    if (!isFunction(selector)) errorHandler$1("selectorType");
  }
  function validateHandler(handler) {
    if (!(isFunction(handler) || isObject$1(handler))) errorHandler$1("handlerType");
    if (isObject$1(handler) && Object.values(handler).some(function(_handler) {
      return !isFunction(_handler);
    })) errorHandler$1("handlersType");
  }
  function validateInitial(initial) {
    if (!initial) errorHandler$1("initialIsRequired");
    if (!isObject$1(initial)) errorHandler$1("initialType");
    if (isEmpty(initial)) errorHandler$1("initialContent");
  }
  function throwError$1(errorMessages2, type) {
    throw new Error(errorMessages2[type] || errorMessages2["default"]);
  }
  var errorMessages$1 = {
    initialIsRequired: "initial state is required",
    initialType: "initial state should be an object",
    initialContent: "initial state shouldn't be an empty object",
    handlerType: "handler should be an object or a function",
    handlersType: "all handlers should be a functions",
    selectorType: "selector should be a function",
    changeType: "provided value of changes should be an object",
    changeField: 'it seams you want to change a field in the state which is not specified in the "initial" state',
    "default": "an unknown error accured in `state-local` package"
  };
  var errorHandler$1 = curry$1(throwError$1)(errorMessages$1);
  var validators$1 = {
    changes: validateChanges,
    selector: validateSelector,
    handler: validateHandler,
    initial: validateInitial
  };
  function create(initial) {
    var handler = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    validators$1.initial(initial);
    validators$1.handler(handler);
    var state = {
      current: initial
    };
    var didUpdate = curry$1(didStateUpdate)(state, handler);
    var update = curry$1(updateState)(state);
    var validate = curry$1(validators$1.changes)(initial);
    var getChanges = curry$1(extractChanges)(state);
    function getState2() {
      var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function(state2) {
        return state2;
      };
      validators$1.selector(selector);
      return selector(state.current);
    }
    function setState2(causedChanges) {
      compose$1(didUpdate, update, validate, getChanges)(causedChanges);
    }
    return [
      getState2,
      setState2
    ];
  }
  function extractChanges(state, causedChanges) {
    return isFunction(causedChanges) ? causedChanges(state.current) : causedChanges;
  }
  function updateState(state, changes) {
    state.current = _objectSpread2(_objectSpread2({}, state.current), changes);
    return changes;
  }
  function didStateUpdate(state, handler, changes) {
    isFunction(handler) ? handler(state.current) : Object.keys(changes).forEach(function(field) {
      var _handler$field;
      return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);
    });
    return changes;
  }
  var index = {
    create
  };
  var config$2 = {
    paths: {
      vs: "https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs"
    }
  };
  function curry(fn) {
    return function curried() {
      var _this = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return args.length >= fn.length ? fn.apply(this, args) : function() {
        for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          nextArgs[_key2] = arguments[_key2];
        }
        return curried.apply(_this, [].concat(args, nextArgs));
      };
    };
  }
  function isObject(value) {
    return {}.toString.call(value).includes("Object");
  }
  function validateConfig(config2) {
    if (!config2) errorHandler("configIsRequired");
    if (!isObject(config2)) errorHandler("configType");
    if (config2.urls) {
      informAboutDeprecation();
      return {
        paths: {
          vs: config2.urls.monacoBase
        }
      };
    }
    return config2;
  }
  function informAboutDeprecation() {
    console.warn(errorMessages.deprecation);
  }
  function throwError(errorMessages2, type) {
    throw new Error(errorMessages2[type] || errorMessages2["default"]);
  }
  var errorMessages = {
    configIsRequired: "the configuration object is required",
    configType: "the configuration object should be an object",
    "default": "an unknown error accured in `@monaco-editor/loader` package",
    deprecation: "Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  "
  };
  var errorHandler = curry(throwError)(errorMessages);
  var validators = {
    config: validateConfig
  };
  var compose = function compose2() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }
    return function(x) {
      return fns.reduceRight(function(y, f) {
        return f(y);
      }, x);
    };
  };
  function merge(target, source) {
    Object.keys(source).forEach(function(key) {
      if (source[key] instanceof Object) {
        if (target[key]) {
          Object.assign(source[key], merge(target[key], source[key]));
        }
      }
    });
    return _objectSpread2$1(_objectSpread2$1({}, target), source);
  }
  var CANCELATION_MESSAGE = {
    type: "cancelation",
    msg: "operation is manually canceled"
  };
  function makeCancelable(promise) {
    var hasCanceled_ = false;
    var wrappedPromise = new Promise(function(resolve, reject) {
      promise.then(function(val) {
        return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);
      });
      promise["catch"](reject);
    });
    return wrappedPromise.cancel = function() {
      return hasCanceled_ = true;
    }, wrappedPromise;
  }
  var _state$create = index.create({
    config: config$2,
    isInitialized: false,
    resolve: null,
    reject: null,
    monaco: null
  }), _state$create2 = _slicedToArray(_state$create, 2), getState = _state$create2[0], setState = _state$create2[1];
  function config$1(globalConfig) {
    var _validators$config = validators.config(globalConfig), monaco = _validators$config.monaco, config2 = _objectWithoutProperties(_validators$config, [
      "monaco"
    ]);
    setState(function(state) {
      return {
        config: merge(state.config, config2),
        monaco
      };
    });
  }
  function init() {
    var state = getState(function(_ref) {
      var monaco = _ref.monaco, isInitialized = _ref.isInitialized, resolve = _ref.resolve;
      return {
        monaco,
        isInitialized,
        resolve
      };
    });
    if (!state.isInitialized) {
      setState({
        isInitialized: true
      });
      if (state.monaco) {
        state.resolve(state.monaco);
        return makeCancelable(wrapperPromise);
      }
      if (window.monaco && window.monaco.editor) {
        storeMonacoInstance(window.monaco);
        state.resolve(window.monaco);
        return makeCancelable(wrapperPromise);
      }
      compose(injectScripts, getMonacoLoaderScript)(configureLoader);
    }
    return makeCancelable(wrapperPromise);
  }
  function injectScripts(script) {
    return document.body.appendChild(script);
  }
  function createScript(src) {
    var script = document.createElement("script");
    return src && (script.src = src), script;
  }
  function getMonacoLoaderScript(configureLoader2) {
    var state = getState(function(_ref2) {
      var config2 = _ref2.config, reject = _ref2.reject;
      return {
        config: config2,
        reject
      };
    });
    var loaderScript = createScript("".concat(state.config.paths.vs, "/loader.js"));
    loaderScript.onload = function() {
      return configureLoader2();
    };
    loaderScript.onerror = state.reject;
    return loaderScript;
  }
  function configureLoader() {
    var state = getState(function(_ref3) {
      var config2 = _ref3.config, resolve = _ref3.resolve, reject = _ref3.reject;
      return {
        config: config2,
        resolve,
        reject
      };
    });
    var require2 = window.require;
    require2.config(state.config);
    require2([
      "vs/editor/editor.main"
    ], function(monaco) {
      storeMonacoInstance(monaco);
      state.resolve(monaco);
    }, function(error) {
      state.reject(error);
    });
  }
  function storeMonacoInstance(monaco) {
    if (!getState().monaco) {
      setState({
        monaco
      });
    }
  }
  function __getMonacoInstance() {
    return getState(function(_ref4) {
      var monaco = _ref4.monaco;
      return monaco;
    });
  }
  var wrapperPromise = new Promise(function(resolve, reject) {
    return setState({
      resolve,
      reject
    });
  });
  var loader = {
    config: config$1,
    init,
    __getMonacoInstance
  };
  var le = {
    wrapper: {
      display: "flex",
      position: "relative",
      textAlign: "initial"
    },
    fullWidth: {
      width: "100%"
    },
    hide: {
      display: "none"
    }
  }, v = le;
  var ae = {
    container: {
      display: "flex",
      height: "100%",
      width: "100%",
      justifyContent: "center",
      alignItems: "center"
    }
  }, Y = ae;
  function Me({ children: e }) {
    return React.createElement("div", {
      style: Y.container
    }, e);
  }
  var Z = Me;
  var $ = Z;
  function Ee({ width: e, height: r, isEditorReady: n, loading: t, _ref: a, className: m, wrapperProps: E }) {
    return React.createElement("section", {
      style: {
        ...v.wrapper,
        width: e,
        height: r
      },
      ...E
    }, !n && React.createElement($, null, t), React.createElement("div", {
      ref: a,
      style: {
        ...v.fullWidth,
        ...!n && v.hide
      },
      className: m
    }));
  }
  var ee = Ee;
  var H = reactExports.memo(ee);
  function Ce(e) {
    reactExports.useEffect(e, []);
  }
  var k = Ce;
  function he(e, r, n = true) {
    let t = reactExports.useRef(true);
    reactExports.useEffect(t.current || !n ? () => {
      t.current = false;
    } : e, r);
  }
  var l = he;
  function D() {
  }
  function h(e, r, n, t) {
    return De(e, t) || be(e, r, n, t);
  }
  function De(e, r) {
    return e.editor.getModel(te(e, r));
  }
  function be(e, r, n, t) {
    return e.editor.createModel(r, n, t ? te(e, t) : void 0);
  }
  function te(e, r) {
    return e.Uri.parse(r);
  }
  function Oe({ original: e, modified: r, language: n, originalLanguage: t, modifiedLanguage: a, originalModelPath: m, modifiedModelPath: E, keepCurrentOriginalModel: g = false, keepCurrentModifiedModel: N = false, theme: x = "light", loading: P = "Loading...", options: y = {}, height: V = "100%", width: z = "100%", className: F, wrapperProps: j = {}, beforeMount: A = D, onMount: q = D }) {
    let [M, O] = reactExports.useState(false), [T, s] = reactExports.useState(true), u = reactExports.useRef(null), c = reactExports.useRef(null), w = reactExports.useRef(null), d = reactExports.useRef(q), o = reactExports.useRef(A), b = reactExports.useRef(false);
    k(() => {
      let i = loader.init();
      return i.then((f) => (c.current = f) && s(false)).catch((f) => (f == null ? void 0 : f.type) !== "cancelation" && console.error("Monaco initialization: error:", f)), () => u.current ? I() : i.cancel();
    }), l(() => {
      if (u.current && c.current) {
        let i = u.current.getOriginalEditor(), f = h(c.current, e || "", t || n || "text", m || "");
        f !== i.getModel() && i.setModel(f);
      }
    }, [
      m
    ], M), l(() => {
      if (u.current && c.current) {
        let i = u.current.getModifiedEditor(), f = h(c.current, r || "", a || n || "text", E || "");
        f !== i.getModel() && i.setModel(f);
      }
    }, [
      E
    ], M), l(() => {
      let i = u.current.getModifiedEditor();
      i.getOption(c.current.editor.EditorOption.readOnly) ? i.setValue(r || "") : r !== i.getValue() && (i.executeEdits("", [
        {
          range: i.getModel().getFullModelRange(),
          text: r || "",
          forceMoveMarkers: true
        }
      ]), i.pushUndoStop());
    }, [
      r
    ], M), l(() => {
      var _a2, _b;
      (_b = (_a2 = u.current) == null ? void 0 : _a2.getModel()) == null ? void 0 : _b.original.setValue(e || "");
    }, [
      e
    ], M), l(() => {
      let { original: i, modified: f } = u.current.getModel();
      c.current.editor.setModelLanguage(i, t || n || "text"), c.current.editor.setModelLanguage(f, a || n || "text");
    }, [
      n,
      t,
      a
    ], M), l(() => {
      var _a2;
      (_a2 = c.current) == null ? void 0 : _a2.editor.setTheme(x);
    }, [
      x
    ], M), l(() => {
      var _a2;
      (_a2 = u.current) == null ? void 0 : _a2.updateOptions(y);
    }, [
      y
    ], M);
    let L = reactExports.useCallback(() => {
      var _a2;
      if (!c.current) return;
      o.current(c.current);
      let i = h(c.current, e || "", t || n || "text", m || ""), f = h(c.current, r || "", a || n || "text", E || "");
      (_a2 = u.current) == null ? void 0 : _a2.setModel({
        original: i,
        modified: f
      });
    }, [
      n,
      r,
      a,
      e,
      t,
      m,
      E
    ]), U = reactExports.useCallback(() => {
      var _a2;
      !b.current && w.current && (u.current = c.current.editor.createDiffEditor(w.current, {
        automaticLayout: true,
        ...y
      }), L(), (_a2 = c.current) == null ? void 0 : _a2.editor.setTheme(x), O(true), b.current = true);
    }, [
      y,
      x,
      L
    ]);
    reactExports.useEffect(() => {
      M && d.current(u.current, c.current);
    }, [
      M
    ]), reactExports.useEffect(() => {
      !T && !M && U();
    }, [
      T,
      M,
      U
    ]);
    function I() {
      var _a2, _b, _c, _d;
      let i = (_a2 = u.current) == null ? void 0 : _a2.getModel();
      g || ((_b = i == null ? void 0 : i.original) == null ? void 0 : _b.dispose()), N || ((_c = i == null ? void 0 : i.modified) == null ? void 0 : _c.dispose()), (_d = u.current) == null ? void 0 : _d.dispose();
    }
    return React.createElement(H, {
      width: z,
      height: V,
      isEditorReady: M,
      loading: P,
      _ref: w,
      className: F,
      wrapperProps: j
    });
  }
  var ie = Oe;
  reactExports.memo(ie);
  function Pe() {
    let [e, r] = reactExports.useState(loader.__getMonacoInstance());
    return k(() => {
      let n;
      return e || (n = loader.init(), n.then((t) => {
        r(t);
      })), () => n == null ? void 0 : n.cancel();
    }), e;
  }
  var Le = Pe;
  function He(e) {
    let r = reactExports.useRef();
    return reactExports.useEffect(() => {
      r.current = e;
    }, [
      e
    ]), r.current;
  }
  var se = He;
  var _ = /* @__PURE__ */ new Map();
  function Ve({ defaultValue: e, defaultLanguage: r, defaultPath: n, value: t, language: a, path: m, theme: E = "light", line: g, loading: N = "Loading...", options: x = {}, overrideServices: P = {}, saveViewState: y = true, keepCurrentModel: V = false, width: z = "100%", height: F = "100%", className: j, wrapperProps: A = {}, beforeMount: q = D, onMount: M = D, onChange: O, onValidate: T = D }) {
    let [s, u] = reactExports.useState(false), [c, w] = reactExports.useState(true), d = reactExports.useRef(null), o = reactExports.useRef(null), b = reactExports.useRef(null), L = reactExports.useRef(M), U = reactExports.useRef(q), I = reactExports.useRef(), i = reactExports.useRef(t), f = se(m), Q = reactExports.useRef(false), B = reactExports.useRef(false);
    k(() => {
      let p = loader.init();
      return p.then((R) => (d.current = R) && w(false)).catch((R) => (R == null ? void 0 : R.type) !== "cancelation" && console.error("Monaco initialization: error:", R)), () => o.current ? pe() : p.cancel();
    }), l(() => {
      var _a2, _b, _c, _d;
      let p = h(d.current, e || t || "", r || a || "", m || n || "");
      p !== ((_a2 = o.current) == null ? void 0 : _a2.getModel()) && (y && _.set(f, (_b = o.current) == null ? void 0 : _b.saveViewState()), (_c = o.current) == null ? void 0 : _c.setModel(p), y && ((_d = o.current) == null ? void 0 : _d.restoreViewState(_.get(m))));
    }, [
      m
    ], s), l(() => {
      var _a2;
      (_a2 = o.current) == null ? void 0 : _a2.updateOptions(x);
    }, [
      x
    ], s), l(() => {
      !o.current || t === void 0 || (o.current.getOption(d.current.editor.EditorOption.readOnly) ? o.current.setValue(t) : t !== o.current.getValue() && (B.current = true, o.current.executeEdits("", [
        {
          range: o.current.getModel().getFullModelRange(),
          text: t,
          forceMoveMarkers: true
        }
      ]), o.current.pushUndoStop(), B.current = false));
    }, [
      t
    ], s), l(() => {
      var _a2, _b;
      let p = (_a2 = o.current) == null ? void 0 : _a2.getModel();
      p && a && ((_b = d.current) == null ? void 0 : _b.editor.setModelLanguage(p, a));
    }, [
      a
    ], s), l(() => {
      var _a2;
      g !== void 0 && ((_a2 = o.current) == null ? void 0 : _a2.revealLine(g));
    }, [
      g
    ], s), l(() => {
      var _a2;
      (_a2 = d.current) == null ? void 0 : _a2.editor.setTheme(E);
    }, [
      E
    ], s);
    let X = reactExports.useCallback(() => {
      var _a2;
      if (!(!b.current || !d.current) && !Q.current) {
        U.current(d.current);
        let p = m || n, R = h(d.current, t || e || "", r || a || "", p || "");
        o.current = (_a2 = d.current) == null ? void 0 : _a2.editor.create(b.current, {
          model: R,
          automaticLayout: true,
          ...x
        }, P), y && o.current.restoreViewState(_.get(p)), d.current.editor.setTheme(E), g !== void 0 && o.current.revealLine(g), u(true), Q.current = true;
      }
    }, [
      e,
      r,
      n,
      t,
      a,
      m,
      x,
      P,
      y,
      E,
      g
    ]);
    reactExports.useEffect(() => {
      s && L.current(o.current, d.current);
    }, [
      s
    ]), reactExports.useEffect(() => {
      !c && !s && X();
    }, [
      c,
      s,
      X
    ]), i.current = t, reactExports.useEffect(() => {
      var _a2, _b;
      s && O && ((_a2 = I.current) == null ? void 0 : _a2.dispose(), I.current = (_b = o.current) == null ? void 0 : _b.onDidChangeModelContent((p) => {
        B.current || O(o.current.getValue(), p);
      }));
    }, [
      s,
      O
    ]), reactExports.useEffect(() => {
      if (s) {
        let p = d.current.editor.onDidChangeMarkers((R) => {
          var _a2;
          let G = (_a2 = o.current.getModel()) == null ? void 0 : _a2.uri;
          if (G && R.find((J) => J.path === G.path)) {
            let J = d.current.editor.getModelMarkers({
              resource: G
            });
            T == null ? void 0 : T(J);
          }
        });
        return () => {
          p == null ? void 0 : p.dispose();
        };
      }
      return () => {
      };
    }, [
      s,
      T
    ]);
    function pe() {
      var _a2, _b;
      (_a2 = I.current) == null ? void 0 : _a2.dispose(), V ? y && _.set(m, o.current.saveViewState()) : (_b = o.current.getModel()) == null ? void 0 : _b.dispose(), o.current.dispose();
    }
    return React.createElement(H, {
      width: z,
      height: F,
      isEditorReady: s,
      loading: N,
      _ref: b,
      className: j,
      wrapperProps: A
    });
  }
  var fe = Ve;
  var de = reactExports.memo(fe);
  var Ft = de;
  async function initEditor(editor, _monaco, fs, path) {
    let contents = "";
    try {
      contents = await fs.readFile(path, "utf-8");
    } catch (e) {
      logWarn(e);
    }
    editor.setValue(contents);
    return contents;
  }
  const EditorInner = reactExports.memo((props) => {
    const fileChangeDebounceRef = reactExports.useRef();
    const currentContentRef = reactExports.useRef("");
    const isDarkTheme = useAppState((state) => state.theme === "dark");
    const handleOnChange = reactExports.useCallback((value) => {
      if (fileChangeDebounceRef.current) {
        clearTimeout(fileChangeDebounceRef.current);
      }
      if (currentContentRef.current === value) {
        return;
      }
      fileChangeDebounceRef.current = setTimeout(() => {
        fileChangeDebounceRef.current = void 0;
        currentContentRef.current = value || "";
        props.fs.writeFile(props.path, value || "", "utf-8");
        props.onUpdateFileContent(props.path, value || "");
      }, 500);
    }, [
      props
    ]);
    const handleMount = reactExports.useCallback((editor, monaco) => {
      return initEditor(editor, monaco, props.fs, props.path).then((content) => {
        currentContentRef.current = content;
      });
    }, [
      props.fs,
      props.path
    ]);
    return jsxRuntimeExports.jsx(Ft, {
      path: props.path,
      className: "nodrag nowheel",
      theme: isDarkTheme ? "vs-dark" : "vs-light",
      options: {
        readOnly: false,
        padding: {
          top: 10
        },
        tabSize: 2
      },
      onMount: handleMount,
      onChange: handleOnChange
    });
  });
  const Editor = (props) => {
    const { container, onUpdateFileContent } = useMainVSLiteAppContext();
    if (!container) {
      return;
    }
    return jsxRuntimeExports.jsx(EditorInner, {
      fs: props.fs,
      path: props.path,
      onUpdateFileContent
    });
  };
  var InteractionMode;
  (function(InteractionMode2) {
    InteractionMode2["DoubleClickItemToExpand"] = "double-click-item-to-expand";
    InteractionMode2["ClickItemToExpand"] = "click-item-to-expand";
    InteractionMode2["ClickArrowToExpand"] = "click-arrow-to-expand";
  })(InteractionMode || (InteractionMode = {}));
  var __assign$c = function() {
    __assign$c = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$c.apply(this, arguments);
  };
  var mergeInteractionManagers = function(main, fallback) {
    return {
      mode: main.mode,
      createInteractiveElementProps: function(item, treeId, actions, renderFlags) {
        return __assign$c(__assign$c({}, fallback.createInteractiveElementProps(item, treeId, actions, renderFlags)), main.createInteractiveElementProps(item, treeId, actions, renderFlags));
      }
    };
  };
  var isControlKey = function(e) {
    return e.ctrlKey || navigator.platform.toUpperCase().indexOf("MAC") >= 0 && e.metaKey;
  };
  var DoubleClickItemToExpandInteractionManager = function() {
    function DoubleClickItemToExpandInteractionManager2(environment) {
      this.mode = InteractionMode.DoubleClickItemToExpand;
      this.environment = environment;
    }
    DoubleClickItemToExpandInteractionManager2.prototype.createInteractiveElementProps = function(item, treeId, actions, renderFlags) {
      var _this = this;
      return {
        onClick: function(e) {
          actions.focusItem();
          if (e.shiftKey) {
            actions.selectUpTo(!isControlKey(e));
          } else if (isControlKey(e)) {
            if (renderFlags.isSelected) {
              actions.unselectItem();
            } else {
              actions.addToSelectedItems();
            }
          } else {
            actions.selectItem();
          }
        },
        onDoubleClick: function() {
          actions.focusItem();
          actions.selectItem();
          if (item.isFolder) {
            actions.toggleExpandedState();
          }
          if (!item.isFolder || _this.environment.canInvokePrimaryActionOnItemContainer) {
            actions.primaryAction();
          }
        },
        onFocus: function() {
          actions.focusItem();
        },
        onDragStart: function(e) {
          e.dataTransfer.dropEffect = "move";
          actions.startDragging();
        },
        onDragOver: function(e) {
          e.preventDefault();
        },
        draggable: renderFlags.canDrag && !renderFlags.isRenaming,
        tabIndex: !renderFlags.isRenaming ? renderFlags.isFocused ? 0 : -1 : void 0
      };
    };
    return DoubleClickItemToExpandInteractionManager2;
  }();
  var ClickItemToExpandInteractionManager = function() {
    function ClickItemToExpandInteractionManager2(environment) {
      this.mode = InteractionMode.ClickItemToExpand;
      this.environment = environment;
    }
    ClickItemToExpandInteractionManager2.prototype.createInteractiveElementProps = function(item, treeId, actions, renderFlags) {
      var _this = this;
      return {
        onClick: function(e) {
          actions.focusItem();
          if (e.shiftKey) {
            actions.selectUpTo(!isControlKey(e));
          } else if (isControlKey(e)) {
            if (renderFlags.isSelected) {
              actions.unselectItem();
            } else {
              actions.addToSelectedItems();
            }
          } else {
            if (item.isFolder) {
              actions.toggleExpandedState();
            }
            actions.selectItem();
            if (!item.isFolder || _this.environment.canInvokePrimaryActionOnItemContainer) {
              actions.primaryAction();
            }
          }
        },
        onFocus: function() {
          actions.focusItem();
        },
        onDragStart: function(e) {
          e.dataTransfer.dropEffect = "move";
          actions.startDragging();
        },
        onDragOver: function(e) {
          e.preventDefault();
        },
        draggable: renderFlags.canDrag && !renderFlags.isRenaming,
        tabIndex: !renderFlags.isRenaming ? renderFlags.isFocused ? 0 : -1 : void 0
      };
    };
    return ClickItemToExpandInteractionManager2;
  }();
  var ClickArrowToExpandInteractionManager = function() {
    function ClickArrowToExpandInteractionManager2(environment) {
      this.mode = InteractionMode.ClickItemToExpand;
      this.environment = environment;
    }
    ClickArrowToExpandInteractionManager2.prototype.createInteractiveElementProps = function(item, treeId, actions, renderFlags) {
      var _this = this;
      return {
        onClick: function(e) {
          actions.focusItem();
          if (e.shiftKey) {
            actions.selectUpTo(!isControlKey(e));
          } else if (isControlKey(e)) {
            if (renderFlags.isSelected) {
              actions.unselectItem();
            } else {
              actions.addToSelectedItems();
            }
          } else {
            actions.selectItem();
            if (!item.isFolder || _this.environment.canInvokePrimaryActionOnItemContainer) {
              actions.primaryAction();
            }
          }
        },
        onFocus: function() {
          actions.focusItem();
        },
        onDragStart: function(e) {
          e.dataTransfer.dropEffect = "move";
          actions.startDragging();
        },
        onDragOver: function(e) {
          e.preventDefault();
        },
        draggable: renderFlags.canDrag && !renderFlags.isRenaming,
        tabIndex: !renderFlags.isRenaming ? renderFlags.isFocused ? 0 : -1 : void 0
      };
    };
    return ClickArrowToExpandInteractionManager2;
  }();
  var buildInteractionMode = function(mode, environment) {
    switch (mode) {
      case InteractionMode.DoubleClickItemToExpand:
        return new DoubleClickItemToExpandInteractionManager(environment);
      case InteractionMode.ClickItemToExpand:
        return new ClickItemToExpandInteractionManager(environment);
      case InteractionMode.ClickArrowToExpand:
        return new ClickArrowToExpandInteractionManager(environment);
      default:
        throw Error("Unknown interaction mode ".concat(mode));
    }
  };
  var InteractionManagerContext = reactExports.createContext(null);
  var useInteractionManager = function() {
    return reactExports.useContext(InteractionManagerContext);
  };
  var InteractionManagerProvider = function(_a2) {
    var children = _a2.children;
    var environment = useTreeEnvironment();
    var defaultInteractionMode = environment.defaultInteractionMode;
    var interactionManager = reactExports.useMemo(function() {
      var _a3;
      if (defaultInteractionMode && typeof defaultInteractionMode !== "string") {
        if (defaultInteractionMode.extends) {
          return mergeInteractionManagers(defaultInteractionMode, buildInteractionMode(defaultInteractionMode.extends, environment));
        }
        return defaultInteractionMode;
      }
      return buildInteractionMode((_a3 = defaultInteractionMode) !== null && _a3 !== void 0 ? _a3 : InteractionMode.ClickItemToExpand, environment);
    }, []);
    return reactExports.createElement(InteractionManagerContext.Provider, {
      value: interactionManager
    }, children);
  };
  var useCanDropAt = function() {
    var environment = useTreeEnvironment();
    return reactExports.useCallback(function(draggingPosition, draggingItems) {
      if (draggingPosition.targetType === "between-items") {
        if (!environment.canReorderItems) {
          return false;
        }
      } else if (draggingPosition.targetType === "root") {
        if (!environment.canDropOnFolder) {
          return false;
        }
      } else {
        var resolvedItem = environment.items[draggingPosition.targetItem];
        if (!resolvedItem || !environment.canDropOnFolder && resolvedItem.isFolder || !environment.canDropOnNonFolder && !resolvedItem.isFolder || draggingItems.some(function(draggingItem) {
          return draggingItem.index === draggingPosition.targetItem;
        })) {
          return false;
        }
      }
      if (environment.canDropAt && (!draggingItems || !environment.canDropAt(draggingItems, draggingPosition))) {
        return false;
      }
      return true;
    }, [
      environment
    ]);
  };
  var useGetGetParentOfLinearItem = function() {
    var environment = useTreeEnvironment();
    return reactExports.useCallback(function(itemLinearIndex, treeId) {
      var linearItems = environment.linearItems[treeId];
      var depth = linearItems[itemLinearIndex].depth;
      var parentLinearIndex = itemLinearIndex;
      for (; !!linearItems[parentLinearIndex] && linearItems[parentLinearIndex].depth !== depth - 1; parentLinearIndex -= 1) ;
      var parent = linearItems[parentLinearIndex];
      if (!parent) {
        parent = {
          item: environment.trees[treeId].rootItem,
          depth: 0
        };
        parentLinearIndex = 0;
      }
      return {
        parent,
        parentLinearIndex
      };
    }, [
      environment.linearItems,
      environment.trees
    ]);
  };
  var useGetViableDragPositions = function() {
    var environment = useTreeEnvironment();
    var getParentOfLinearItem = useGetGetParentOfLinearItem();
    var canDropAt = useCanDropAt();
    var isDescendant = reactExports.useCallback(function(treeId, itemLinearIndex, potentialParents) {
      var _a2 = getParentOfLinearItem(itemLinearIndex, treeId), parent = _a2.parent, parentLinearIndex = _a2.parentLinearIndex;
      if (potentialParents.some(function(p) {
        return p.index === parent.item;
      })) return true;
      if (parent.depth === 0) return false;
      return isDescendant(treeId, parentLinearIndex, potentialParents);
    }, [
      getParentOfLinearItem
    ]);
    return reactExports.useCallback(function(treeId, draggingItems) {
      var _a2, _b;
      var linearItems = environment.linearItems[treeId];
      var targets = [];
      var skipUntilDepthIsLowerThan = -1;
      for (var linearIndex = 0; linearIndex < linearItems.length; linearIndex++) {
        var _c = linearItems[linearIndex], item = _c.item, depth = _c.depth;
        if (skipUntilDepthIsLowerThan !== -1 && depth > skipUntilDepthIsLowerThan) {
          continue;
        } else {
          skipUntilDepthIsLowerThan = -1;
        }
        var parent_1 = getParentOfLinearItem(linearIndex, treeId).parent;
        var childIndex = environment.items[parent_1.item].children.indexOf(item);
        if (isDescendant(treeId, linearIndex, draggingItems)) {
          skipUntilDepthIsLowerThan = depth + 1;
          continue;
        }
        var itemPosition = {
          targetType: "item",
          parentItem: parent_1.item,
          targetItem: item,
          linearIndex,
          depth,
          treeId
        };
        var topPosition = {
          targetType: "between-items",
          parentItem: parent_1.item,
          linePosition: "top",
          childIndex,
          depth,
          treeId,
          linearIndex
        };
        var bottomPosition = {
          targetType: "between-items",
          parentItem: parent_1.item,
          linePosition: "bottom",
          linearIndex: linearIndex + 1,
          childIndex: childIndex + 1,
          depth,
          treeId
        };
        var skipTopPosition = depth === ((_b = (_a2 = linearItems[linearIndex - 1]) === null || _a2 === void 0 ? void 0 : _a2.depth) !== null && _b !== void 0 ? _b : -1);
        if (!skipTopPosition && canDropAt(topPosition, draggingItems)) {
          targets.push(topPosition);
        }
        if (canDropAt(itemPosition, draggingItems)) {
          targets.push(itemPosition);
        }
        if (canDropAt(bottomPosition, draggingItems)) {
          targets.push(bottomPosition);
        }
      }
      return targets;
    }, [
      canDropAt,
      environment.items,
      environment.linearItems,
      getParentOfLinearItem,
      isDescendant
    ]);
  };
  var __spreadArray$5 = function(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var useSideEffect = function(effect, deps, changeOn) {
    var previousRef = reactExports.useRef();
    reactExports.useEffect(function() {
      if (!previousRef.current) {
        previousRef.current = __spreadArray$5([], changeOn, true);
        effect();
      } else {
        var changed = previousRef.current.some(function(v2, i) {
          return v2 !== changeOn[i];
        });
        if (changed) {
          previousRef.current = __spreadArray$5([], changeOn, true);
          effect();
        }
      }
    }, __spreadArray$5(__spreadArray$5([], deps, true), changeOn, true));
  };
  var __assign$b = function() {
    __assign$b = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$b.apply(this, arguments);
  };
  var buildMapForTrees = function(treeIds, build) {
    return treeIds.map(function(id) {
      return [
        id,
        build(id)
      ];
    }).reduce(function(a, _a2) {
      var _b;
      var id = _a2[0], obj = _a2[1];
      return __assign$b(__assign$b({}, a), (_b = {}, _b[id] = obj, _b));
    }, {});
  };
  var getDocument = function() {
    return typeof document !== "undefined" ? document : void 0;
  };
  function useCallSoon(dontClean) {
    if (dontClean === void 0) {
      dontClean = false;
    }
    var handleRef = reactExports.useRef(new Array());
    reactExports.useEffect(function() {
      if (dontClean) {
        return function() {
        };
      }
      var handles = handleRef.current;
      return function() {
        return handles.forEach(function(handle) {
          return cancelAnimationFrame(handle);
        });
      };
    }, [
      dontClean,
      handleRef
    ]);
    return reactExports.useCallback(function(callback) {
      var handle = requestAnimationFrame(function() {
        handleRef.current.splice(handleRef.current.indexOf(handle), 1);
        callback();
      });
      handleRef.current.push(handle);
    }, [
      handleRef
    ]);
  }
  var useRefCopy = function(value) {
    var ref = reactExports.useRef(value);
    ref.current = value;
    return ref;
  };
  var useStableHandler = function(handler) {
    var handlerRef = useRefCopy(handler);
    return reactExports.useCallback(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return handlerRef.current.apply(handlerRef, args);
    }, [
      handlerRef
    ]);
  };
  var useGetOriginalItemOrder = function() {
    var env = useTreeEnvironment();
    return useStableHandler(function(treeId, items) {
      return items.map(function(item) {
        return [
          item,
          env.linearItems[treeId].findIndex(function(linearItem) {
            return linearItem.item === item.index;
          })
        ];
      }).sort(function(_a2, _b) {
        _a2[0];
        var aPos = _a2[1];
        _b[0];
        var bPos = _b[1];
        return aPos - bPos;
      }).map(function(_a2) {
        var item = _a2[0];
        return item;
      });
    });
  };
  var computeItemHeight = function(treeId) {
    var _a2;
    var firstItem = (_a2 = getDocument()) === null || _a2 === void 0 ? void 0 : _a2.querySelector('[data-rct-tree="'.concat(treeId, '"] [data-rct-item-container="true"]'));
    if (firstItem) {
      var style = getComputedStyle(firstItem);
      return firstItem.offsetHeight + Math.max(parseFloat(style.marginTop), parseFloat(style.marginBottom));
    }
    return 5;
  };
  var isOutsideOfContainer = function(e, treeBb) {
    return e.clientX <= treeBb.left || e.clientX >= treeBb.right || e.clientY <= treeBb.top || e.clientY >= treeBb.bottom;
  };
  var DraggingPositionEvaluation = function() {
    function DraggingPositionEvaluation2(env, e, treeId, hoveringPosition, draggingItems, getParentOfLinearItem) {
      this.env = env;
      this.e = e;
      this.treeId = treeId;
      this.linearIndex = hoveringPosition.linearIndex;
      this.offset = hoveringPosition.offset;
      this.indentation = hoveringPosition.indentation;
      this.targetItem = this.env.linearItems[this.treeId][this.linearIndex];
      this.getParentOfLinearItem = getParentOfLinearItem;
      this.draggingItems = draggingItems;
    }
    DraggingPositionEvaluation2.prototype.getEmptyTreeDragPosition = function() {
      return {
        targetType: "root",
        treeId: this.treeId,
        depth: 0,
        linearIndex: 0,
        targetItem: this.env.trees[this.treeId].rootItem
      };
    };
    DraggingPositionEvaluation2.prototype.maybeRedirectToParent = function() {
      var redirectTargetToParent = !this.env.canReorderItems && !this.env.canDropOnNonFolder && !this.env.items[this.targetItem.item].isFolder;
      if (redirectTargetToParent) {
        var _a2 = this.getParentOfLinearItem(this.linearIndex, this.treeId), parentLinearIndex = _a2.parentLinearIndex, parent_1 = _a2.parent;
        this.targetItem = parent_1;
        this.linearIndex = parentLinearIndex;
      }
    };
    DraggingPositionEvaluation2.prototype.maybeReparentUpwards = function() {
      var _a2, _b;
      if (this.indentation === void 0) {
        return void 0;
      }
      var treeLinearItems = this.env.linearItems[this.treeId];
      var deepestDepth = treeLinearItems[this.linearIndex].depth;
      var legalDropDepthCount = deepestDepth - ((_b = (_a2 = treeLinearItems[this.linearIndex + 1]) === null || _a2 === void 0 ? void 0 : _a2.depth) !== null && _b !== void 0 ? _b : 0);
      var canReparentUpwards = this.offset === "bottom" && legalDropDepthCount > 0;
      if (!canReparentUpwards) {
        return void 0;
      }
      var droppingIndent = Math.max(deepestDepth - legalDropDepthCount, this.indentation);
      var newParent = {
        parentLinearIndex: this.linearIndex,
        parent: this.targetItem
      };
      var insertionItemAbove;
      for (var i = deepestDepth; i >= droppingIndent; i -= 1) {
        insertionItemAbove = newParent;
        newParent = this.getParentOfLinearItem(newParent.parentLinearIndex, this.treeId);
      }
      if (this.indentation === treeLinearItems[this.linearIndex].depth) {
        return void 0;
      }
      if (!insertionItemAbove) {
        return void 0;
      }
      var reparentedChildIndex = this.env.items[newParent.parent.item].children.indexOf(insertionItemAbove.parent.item) + 1;
      if (this.draggingItems && this.isDescendant(this.treeId, newParent.parentLinearIndex + 1, this.draggingItems)) {
        return void 0;
      }
      return {
        targetType: "between-items",
        treeId: this.treeId,
        parentItem: newParent.parent.item,
        depth: droppingIndent,
        linearIndex: this.linearIndex + 1,
        childIndex: reparentedChildIndex,
        linePosition: "bottom"
      };
    };
    DraggingPositionEvaluation2.prototype.maybeRedirectInsideOpenFolder = function() {
      var nextItem = this.env.linearItems[this.treeId][this.linearIndex + 1];
      var redirectInsideOpenFolder = !this.env.canDropBelowOpenFolders && nextItem && this.targetItem.depth === nextItem.depth - 1 && this.offset === "bottom";
      if (redirectInsideOpenFolder) {
        this.targetItem = nextItem;
        this.linearIndex += 1;
        this.offset = "top";
      }
    };
    DraggingPositionEvaluation2.prototype.maybeMapToBottomOffset = function() {
      var priorItem = this.env.linearItems[this.treeId][this.linearIndex - 1];
      if (!priorItem || (priorItem === null || priorItem === void 0 ? void 0 : priorItem.depth) === void 0) return;
      var depthDistanceToPrior = priorItem.depth - this.targetItem.depth;
      if (this.offset === "top" && (depthDistanceToPrior === 0 || depthDistanceToPrior > 0 && this.indentation !== void 0)) {
        this.offset = "bottom";
        this.linearIndex -= 1;
        this.targetItem = this.env.linearItems[this.treeId][this.linearIndex];
      }
    };
    DraggingPositionEvaluation2.prototype.canDropAtCurrentTarget = function() {
      var _this = this;
      var _a2;
      var targetItemData = this.env.items[this.targetItem.item];
      if (!this.offset && !this.env.canDropOnNonFolder && !targetItemData.isFolder) {
        return false;
      }
      if (!this.offset && !this.env.canDropOnFolder && targetItemData.isFolder) {
        return false;
      }
      if (this.offset && !this.env.canReorderItems) {
        return false;
      }
      if ((_a2 = this.draggingItems) === null || _a2 === void 0 ? void 0 : _a2.some(function(draggingItem) {
        return draggingItem.index === _this.targetItem.item;
      })) {
        return false;
      }
      return true;
    };
    DraggingPositionEvaluation2.prototype.getDraggingPosition = function() {
      if (this.env.linearItems[this.treeId].length === 0) {
        return this.getEmptyTreeDragPosition();
      }
      if (!this.draggingItems || this.linearIndex < 0 || this.linearIndex >= this.env.linearItems[this.treeId].length) {
        return void 0;
      }
      this.maybeRedirectToParent();
      this.maybeRedirectInsideOpenFolder();
      this.maybeMapToBottomOffset();
      var reparented = this.maybeReparentUpwards();
      if (reparented) {
        return reparented;
      }
      if (this.areDraggingItemsDescendantOfTarget()) {
        return "invalid";
      }
      if (!this.canDropAtCurrentTarget()) {
        return "invalid";
      }
      var parent = this.getParentOfLinearItem(this.linearIndex, this.treeId).parent;
      var newChildIndex = this.env.items[parent.item].children.indexOf(this.targetItem.item) + (this.offset === "top" ? 0 : 1);
      if (this.offset) {
        return {
          targetType: "between-items",
          treeId: this.treeId,
          parentItem: parent.item,
          depth: this.targetItem.depth,
          linearIndex: this.linearIndex + (this.offset === "top" ? 0 : 1),
          childIndex: newChildIndex,
          linePosition: this.offset
        };
      }
      return {
        targetType: "item",
        treeId: this.treeId,
        parentItem: parent.item,
        targetItem: this.targetItem.item,
        depth: this.targetItem.depth,
        linearIndex: this.linearIndex
      };
    };
    DraggingPositionEvaluation2.prototype.isDescendant = function(treeId, itemLinearIndex, potentialParents) {
      var _a2 = this.getParentOfLinearItem(itemLinearIndex, treeId), parentLinearIndex = _a2.parentLinearIndex, parent = _a2.parent;
      if (potentialParents.some(function(p) {
        return p.index === parent.item;
      })) {
        return true;
      }
      if (parent.depth === 0) {
        return false;
      }
      return this.isDescendant(treeId, parentLinearIndex, potentialParents);
    };
    DraggingPositionEvaluation2.prototype.areDraggingItemsDescendantOfTarget = function() {
      return this.draggingItems && this.isDescendant(this.treeId, this.linearIndex, this.draggingItems);
    };
    return DraggingPositionEvaluation2;
  }();
  var useDraggingPosition = function() {
    var dragCode = reactExports.useRef("initial");
    var _a2 = reactExports.useState(void 0), draggingItems = _a2[0], setDraggingItems = _a2[1];
    var itemHeight = reactExports.useRef(0);
    var env = useTreeEnvironment();
    var getParentOfLinearItem = useGetGetParentOfLinearItem();
    var isNewDragPosition = useStableHandler(function(e, treeId, hoveringPosition) {
      if (!hoveringPosition) {
        return false;
      }
      var offset = hoveringPosition.offset, linearIndex = hoveringPosition.linearIndex;
      var newDragCode = "".concat(treeId, "__").concat(linearIndex, "__").concat(offset !== null && offset !== void 0 ? offset : "", "__").concat(hoveringPosition.indentation);
      if (newDragCode !== dragCode.current) {
        dragCode.current = newDragCode;
        return true;
      }
      return false;
    });
    var getHoveringPosition = useStableHandler(function(e, treeId, containerRef) {
      if (!containerRef.current) {
        return void 0;
      }
      var treeBb = containerRef.current.getBoundingClientRect();
      if (isOutsideOfContainer(e, treeBb)) {
        return void 0;
      }
      var hoveringPosition = (e.clientY - treeBb.top) / itemHeight.current;
      var treeLinearItems = env.linearItems[treeId];
      var linearIndex = Math.min(Math.max(0, Math.floor(hoveringPosition)), treeLinearItems.length - 1);
      if (treeLinearItems.length === 0) {
        return {
          linearIndex: 0,
          offset: "bottom",
          indentation: 0
        };
      }
      var targetLinearItem = treeLinearItems[linearIndex];
      var targetItem = env.items[targetLinearItem.item];
      var indentation = !env.renderDepthOffset ? void 0 : Math.max(Math.floor((e.clientX - treeBb.left) / env.renderDepthOffset), 0);
      var offset;
      var lineThreshold = !env.canReorderItems ? 0 : (targetItem === null || targetItem === void 0 ? void 0 : targetItem.isFolder) && env.canDropOnFolder || env.canDropOnNonFolder ? 0.2 : 0.5;
      if (hoveringPosition - 0.5 >= treeLinearItems.length - 1) {
        offset = "bottom";
      } else if (hoveringPosition % 1 < lineThreshold) {
        offset = "top";
      } else if (hoveringPosition % 1 > 1 - lineThreshold) {
        offset = "bottom";
      }
      return {
        linearIndex,
        offset,
        indentation
      };
    });
    var getDraggingPosition = useStableHandler(function(e, treeId, containerRef) {
      var hoveringPosition = getHoveringPosition(e, treeId, containerRef);
      if (!isNewDragPosition(e, treeId, hoveringPosition)) {
        return void 0;
      }
      if (!draggingItems || !env.canDragAndDrop || !hoveringPosition || e.clientX < 0 || e.clientY < 0) {
        return "invalid";
      }
      return new DraggingPositionEvaluation(env, e, treeId, hoveringPosition, draggingItems, getParentOfLinearItem).getDraggingPosition();
    });
    var initiateDraggingPosition = useStableHandler(function(treeId, items) {
      setDraggingItems(items);
      dragCode.current = "initial";
      itemHeight.current = computeItemHeight(treeId);
    });
    var resetDraggingPosition = useStableHandler(function() {
      setDraggingItems(void 0);
      dragCode.current = "initial";
      itemHeight.current = 0;
    });
    return {
      initiateDraggingPosition,
      resetDraggingPosition,
      draggingItems,
      getDraggingPosition,
      itemHeight
    };
  };
  var DragAndDropContext = reactExports.createContext(null);
  var useDragAndDrop = function() {
    return reactExports.useContext(DragAndDropContext);
  };
  var DragAndDropProvider = function(_a2) {
    var children = _a2.children;
    var environment = useTreeEnvironment();
    var _b = reactExports.useState(false), isProgrammaticallyDragging = _b[0], setIsProgrammaticallyDragging = _b[1];
    var _c = reactExports.useState({}), viableDragPositions = _c[0], setViableDragPositions = _c[1];
    var _d = reactExports.useState(0), programmaticDragIndex = _d[0], setProgrammaticDragIndex = _d[1];
    var _e = reactExports.useState(), draggingPosition = _e[0], setDraggingPosition = _e[1];
    var getViableDragPositions = useGetViableDragPositions();
    var callSoon = useCallSoon();
    var getOriginalItemOrder = useGetOriginalItemOrder();
    var _f = useDraggingPosition(), initiateDraggingPosition = _f.initiateDraggingPosition, resetDraggingPosition = _f.resetDraggingPosition, draggingItems = _f.draggingItems, getDraggingPosition = _f.getDraggingPosition, itemHeight = _f.itemHeight;
    var resetProgrammaticDragIndexForCurrentTree = reactExports.useCallback(function(viableDragPositions2, draggingItems2) {
      var _a3;
      if (environment.activeTreeId && ((_a3 = environment.viewState[environment.activeTreeId]) === null || _a3 === void 0 ? void 0 : _a3.focusedItem) && environment.linearItems && draggingItems2) {
        var focusItem_1 = environment.viewState[environment.activeTreeId].focusedItem;
        var treeDragPositions = getViableDragPositions(environment.activeTreeId, draggingItems2);
        var newPos = treeDragPositions.findIndex(function(pos) {
          if (pos.targetType === "item") {
            return pos.targetItem === focusItem_1;
          }
          if (pos.targetType === "between-items") {
            return environment.items[pos.parentItem].children[pos.childIndex] === focusItem_1;
          }
          return false;
        });
        if (newPos) {
          setProgrammaticDragIndex(Math.min(newPos + 1, treeDragPositions.length - 1));
        } else {
          setProgrammaticDragIndex(0);
        }
      } else {
        setProgrammaticDragIndex(0);
      }
    }, [
      environment.activeTreeId,
      environment.items,
      environment.linearItems,
      environment.viewState,
      getViableDragPositions
    ]);
    var resetState = useStableHandler(function() {
      setIsProgrammaticallyDragging(false);
      setViableDragPositions({});
      setProgrammaticDragIndex(0);
      setDraggingPosition(void 0);
      resetDraggingPosition();
    });
    useSideEffect(function() {
      if (environment.activeTreeId && environment.linearItems[environment.activeTreeId] && viableDragPositions[environment.activeTreeId]) {
        resetProgrammaticDragIndexForCurrentTree(viableDragPositions[environment.activeTreeId], draggingItems);
      }
    }, [
      draggingItems,
      environment.activeTreeId,
      environment.linearItems,
      resetProgrammaticDragIndexForCurrentTree,
      viableDragPositions
    ], [
      environment.activeTreeId
    ]);
    useSideEffect(function() {
      if (isProgrammaticallyDragging && environment.activeTreeId) {
        setDraggingPosition(viableDragPositions[environment.activeTreeId][programmaticDragIndex]);
      }
    }, [
      programmaticDragIndex,
      environment.activeTreeId,
      isProgrammaticallyDragging,
      viableDragPositions
    ], [
      programmaticDragIndex,
      environment.activeTreeId
    ]);
    var canDropAt = useCanDropAt();
    var performDrag = function(draggingPosition2) {
      var _a3;
      if (draggingItems && !canDropAt(draggingPosition2, draggingItems)) {
        return;
      }
      setDraggingPosition(draggingPosition2);
      environment.setActiveTree(draggingPosition2.treeId);
      if (draggingItems && environment.activeTreeId !== draggingPosition2.treeId) {
        (_a3 = environment.onSelectItems) === null || _a3 === void 0 ? void 0 : _a3.call(environment, draggingItems.map(function(item) {
          return item.index;
        }), draggingPosition2.treeId);
      }
    };
    var onDragOverTreeHandler = useStableHandler(function(e, treeId, containerRef) {
      if (!draggingItems) return;
      var newDraggingPosition = getDraggingPosition(e, treeId, containerRef);
      if (!newDraggingPosition) return;
      if (newDraggingPosition === "invalid") {
        setDraggingPosition(void 0);
        return;
      }
      performDrag(newDraggingPosition);
    });
    var onDragLeaveContainerHandler = useStableHandler(function(e, containerRef) {
      if (!containerRef.current) return;
      if (isOutsideOfContainer(e, containerRef.current.getBoundingClientRect())) {
        setDraggingPosition(void 0);
      }
    });
    var onDropHandler = useStableHandler(function() {
      if (!draggingItems || !draggingPosition || !environment.onDrop) {
        return;
      }
      environment.onDrop(draggingItems, draggingPosition);
      callSoon(function() {
        var _a3;
        (_a3 = environment.onFocusItem) === null || _a3 === void 0 ? void 0 : _a3.call(environment, draggingItems[0], draggingPosition.treeId);
        resetState();
      });
    });
    var onStartDraggingItems = reactExports.useCallback(function(items, treeId) {
      var treeViableDragPositions = buildMapForTrees(environment.treeIds, function(treeId2) {
        return getViableDragPositions(treeId2, items);
      });
      initiateDraggingPosition(treeId, items);
      setViableDragPositions(treeViableDragPositions);
      if (environment.activeTreeId) {
        resetProgrammaticDragIndexForCurrentTree(treeViableDragPositions[environment.activeTreeId], items);
      }
    }, [
      environment.activeTreeId,
      environment.treeIds,
      getViableDragPositions,
      initiateDraggingPosition,
      resetProgrammaticDragIndexForCurrentTree
    ]);
    var startProgrammaticDrag = reactExports.useCallback(function() {
      var _a3, _b2, _c2;
      if (!environment.canDragAndDrop) {
        return;
      }
      if (environment.activeTreeId) {
        var draggingItems_1 = (_b2 = (_a3 = environment.viewState[environment.activeTreeId]) === null || _a3 === void 0 ? void 0 : _a3.selectedItems) !== null && _b2 !== void 0 ? _b2 : [
          (_c2 = environment.viewState[environment.activeTreeId]) === null || _c2 === void 0 ? void 0 : _c2.focusedItem
        ];
        if (draggingItems_1.length === 0 || draggingItems_1[0] === void 0) {
          return;
        }
        var resolvedDraggingItems = getOriginalItemOrder(environment.activeTreeId, draggingItems_1.map(function(id) {
          return environment.items[id];
        }));
        if (environment.canDrag && !environment.canDrag(resolvedDraggingItems)) {
          return;
        }
        onStartDraggingItems(resolvedDraggingItems, environment.activeTreeId);
        setTimeout(function() {
          setIsProgrammaticallyDragging(true);
        });
      }
    }, [
      environment,
      getOriginalItemOrder,
      onStartDraggingItems
    ]);
    var abortProgrammaticDrag = reactExports.useCallback(function() {
      resetState();
    }, [
      resetState
    ]);
    var completeProgrammaticDrag = reactExports.useCallback(function() {
      onDropHandler();
      resetState();
    }, [
      onDropHandler,
      resetState
    ]);
    var programmaticDragUp = reactExports.useCallback(function() {
      setProgrammaticDragIndex(function(oldIndex) {
        return Math.max(0, oldIndex - 1);
      });
    }, []);
    var programmaticDragDown = reactExports.useCallback(function() {
      if (environment.activeTreeId) {
        setProgrammaticDragIndex(function(oldIndex) {
          return Math.min(viableDragPositions[environment.activeTreeId].length, oldIndex + 1);
        });
      }
    }, [
      environment.activeTreeId,
      viableDragPositions
    ]);
    var dnd = reactExports.useMemo(function() {
      return {
        onStartDraggingItems,
        startProgrammaticDrag,
        abortProgrammaticDrag,
        completeProgrammaticDrag,
        programmaticDragUp,
        programmaticDragDown,
        draggingItems,
        draggingPosition,
        itemHeight: itemHeight.current,
        isProgrammaticallyDragging,
        onDragOverTreeHandler,
        onDragLeaveContainerHandler,
        viableDragPositions
      };
    }, [
      abortProgrammaticDrag,
      completeProgrammaticDrag,
      draggingItems,
      draggingPosition,
      isProgrammaticallyDragging,
      itemHeight,
      onDragOverTreeHandler,
      onDragLeaveContainerHandler,
      onStartDraggingItems,
      programmaticDragDown,
      programmaticDragUp,
      startProgrammaticDrag,
      viableDragPositions
    ]);
    reactExports.useEffect(function() {
      window.addEventListener("dragend", resetState);
      window.addEventListener("drop", onDropHandler);
      return function() {
        window.removeEventListener("dragend", resetState);
        window.removeEventListener("drop", onDropHandler);
      };
    }, [
      onDropHandler,
      resetState
    ]);
    return reactExports.createElement(DragAndDropContext.Provider, {
      value: dnd
    }, children);
  };
  var __assign$a = function() {
    __assign$a = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$a.apply(this, arguments);
  };
  var useCreatedEnvironmentRef = function(ref, actions) {
    var environment = useTreeEnvironment();
    var dnd = useDragAndDrop();
    reactExports.useImperativeHandle(ref, function() {
      return __assign$a(__assign$a(__assign$a({}, actions), environment), {
        treeEnvironmentContext: environment,
        dragAndDropContext: dnd
      });
    });
  };
  var waitFor = function(check, intervalMs, timeoutMs) {
    if (intervalMs === void 0) {
      intervalMs = 50;
    }
    if (timeoutMs === void 0) {
      timeoutMs = 1e4;
    }
    return new Promise(function(resolve) {
      if (check()) {
        resolve();
      }
      var complete;
      var interval = setInterval(function() {
        if (check()) {
          complete();
        }
      }, intervalMs);
      var timeout = setTimeout(function() {
        complete();
      }, timeoutMs);
      complete = function() {
        clearInterval(interval);
        clearTimeout(timeout);
        resolve();
      };
    });
  };
  var __awaiter$2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __generator$2 = function(thisArg, body) {
    var _2 = {
      label: 0,
      sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v2) {
        return step([
          n,
          v2
        ]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_2 = 0)), _2) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [
          op[0] & 2,
          t.value
        ];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _2.label++;
            y = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2]) _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [
          6,
          e
        ];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  var __spreadArray$4 = function(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var EnvironmentActionsContext$1 = reactExports.createContext(null);
  var useEnvironmentActions = function() {
    return reactExports.useContext(EnvironmentActionsContext$1);
  };
  var recursiveExpand = function(itemId, items, onExpand) {
    return __awaiter$2(void 0, void 0, void 0, function() {
      var _loop_1, _i, _a2, childId;
      var _b, _c, _d;
      return __generator$2(this, function(_e) {
        _loop_1 = function(childId2) {
          waitFor(function() {
            var _a3;
            return !!((_a3 = items.current) === null || _a3 === void 0 ? void 0 : _a3[childId2]);
          }).then(function() {
            var _a3;
            var item = (_a3 = items.current) === null || _a3 === void 0 ? void 0 : _a3[childId2];
            if (item === null || item === void 0 ? void 0 : item.isFolder) {
              onExpand(item);
              recursiveExpand(childId2, items, onExpand);
            }
          });
        };
        for (_i = 0, _a2 = (_d = (_c = (_b = items.current) === null || _b === void 0 ? void 0 : _b[itemId]) === null || _c === void 0 ? void 0 : _c.children) !== null && _d !== void 0 ? _d : []; _i < _a2.length; _i++) {
          childId = _a2[_i];
          _loop_1(childId);
        }
        return [
          2
        ];
      });
    });
  };
  var EnvironmentActionsProvider = reactExports.forwardRef(function(props, ref) {
    var _a2 = useTreeEnvironment(), onCollapseItem = _a2.onCollapseItem, items = _a2.items, trees = _a2.trees, viewState = _a2.viewState, onExpandItem = _a2.onExpandItem, onFocusItem = _a2.onFocusItem, setActiveTree = _a2.setActiveTree, onRenameItem = _a2.onRenameItem, onSelectItems = _a2.onSelectItems, onPrimaryAction = _a2.onPrimaryAction, linearItems = _a2.linearItems;
    var _b = useDragAndDrop(), abortProgrammaticDrag = _b.abortProgrammaticDrag, completeProgrammaticDrag = _b.completeProgrammaticDrag, programmaticDragDown = _b.programmaticDragDown, programmaticDragUp = _b.programmaticDragUp, startProgrammaticDrag = _b.startProgrammaticDrag;
    var itemsRef = useRefCopy(items);
    var collapseItem = reactExports.useCallback(function(itemId, treeId) {
      onCollapseItem === null || onCollapseItem === void 0 ? void 0 : onCollapseItem(items[itemId], treeId);
    }, [
      items,
      onCollapseItem
    ]);
    var expandItem = reactExports.useCallback(function(itemId, treeId) {
      onExpandItem === null || onExpandItem === void 0 ? void 0 : onExpandItem(items[itemId], treeId);
    }, [
      items,
      onExpandItem
    ]);
    var focusItem = reactExports.useCallback(function(itemId, treeId, setDomFocus) {
      if (setDomFocus === void 0) {
        setDomFocus = true;
      }
      onFocusItem === null || onFocusItem === void 0 ? void 0 : onFocusItem(items[itemId], treeId, setDomFocus);
    }, [
      items,
      onFocusItem
    ]);
    var focusTree = reactExports.useCallback(function(treeId, autoFocus) {
      if (autoFocus === void 0) {
        autoFocus = true;
      }
      setActiveTree(treeId, autoFocus);
    }, [
      setActiveTree
    ]);
    var moveFocusDown = reactExports.useCallback(function(treeId) {
      var treeLinearItems = linearItems[treeId];
      var currentFocusIndex = treeLinearItems.findIndex(function(_a3) {
        var _b2;
        var item = _a3.item;
        return item === ((_b2 = viewState[treeId]) === null || _b2 === void 0 ? void 0 : _b2.focusedItem);
      });
      var newIndex = currentFocusIndex !== void 0 ? Math.min(treeLinearItems.length - 1, currentFocusIndex + 1) : 0;
      var newItem = items[treeLinearItems[newIndex].item];
      onFocusItem === null || onFocusItem === void 0 ? void 0 : onFocusItem(newItem, treeId);
    }, [
      items,
      linearItems,
      onFocusItem,
      viewState
    ]);
    var moveFocusUp = reactExports.useCallback(function(treeId) {
      var treeLinearItems = linearItems[treeId];
      var currentFocusIndex = treeLinearItems.findIndex(function(_a3) {
        var _b2;
        var item = _a3.item;
        return item === ((_b2 = viewState[treeId]) === null || _b2 === void 0 ? void 0 : _b2.focusedItem);
      });
      var newIndex = currentFocusIndex !== void 0 ? Math.max(0, currentFocusIndex - 1) : 0;
      var newItem = items[treeLinearItems[newIndex].item];
      onFocusItem === null || onFocusItem === void 0 ? void 0 : onFocusItem(newItem, treeId);
    }, [
      items,
      linearItems,
      onFocusItem,
      viewState
    ]);
    var renameItem = reactExports.useCallback(function(itemId, name, treeId) {
      onRenameItem === null || onRenameItem === void 0 ? void 0 : onRenameItem(items[itemId], name, treeId);
    }, [
      items,
      onRenameItem
    ]);
    var selectItems = reactExports.useCallback(function(itemsIds, treeId) {
      onSelectItems === null || onSelectItems === void 0 ? void 0 : onSelectItems(itemsIds, treeId);
    }, [
      onSelectItems
    ]);
    var toggleItemExpandedState = reactExports.useCallback(function(itemId, treeId) {
      var _a3, _b2;
      if ((_b2 = (_a3 = viewState[treeId]) === null || _a3 === void 0 ? void 0 : _a3.expandedItems) === null || _b2 === void 0 ? void 0 : _b2.includes(itemId)) {
        onCollapseItem === null || onCollapseItem === void 0 ? void 0 : onCollapseItem(items[itemId], treeId);
      } else {
        onExpandItem === null || onExpandItem === void 0 ? void 0 : onExpandItem(items[itemId], treeId);
      }
    }, [
      items,
      onCollapseItem,
      onExpandItem,
      viewState
    ]);
    var toggleItemSelectStatus = reactExports.useCallback(function(itemId, treeId) {
      var _a3, _b2, _c, _d, _e;
      if ((_b2 = (_a3 = viewState[treeId]) === null || _a3 === void 0 ? void 0 : _a3.selectedItems) === null || _b2 === void 0 ? void 0 : _b2.includes(itemId)) {
        onSelectItems === null || onSelectItems === void 0 ? void 0 : onSelectItems((_d = (_c = viewState[treeId].selectedItems) === null || _c === void 0 ? void 0 : _c.filter(function(item) {
          return item !== itemId;
        })) !== null && _d !== void 0 ? _d : [], treeId);
      } else {
        onSelectItems === null || onSelectItems === void 0 ? void 0 : onSelectItems(__spreadArray$4(__spreadArray$4([], (_e = viewState[treeId].selectedItems) !== null && _e !== void 0 ? _e : [], true), [
          itemId
        ], false), treeId);
      }
    }, [
      onSelectItems,
      viewState
    ]);
    var invokePrimaryAction = reactExports.useCallback(function(itemId, treeId) {
      onPrimaryAction === null || onPrimaryAction === void 0 ? void 0 : onPrimaryAction(items[itemId], treeId);
    }, [
      items,
      onPrimaryAction
    ]);
    var expandSubsequently = reactExports.useCallback(function(treeId, itemIds) {
      return __awaiter$2(void 0, void 0, void 0, function() {
        var current, rest;
        return __generator$2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              current = itemIds[0], rest = itemIds.slice(1);
              return [
                4,
                waitFor(function() {
                  var _a4;
                  return !!((_a4 = itemsRef.current) === null || _a4 === void 0 ? void 0 : _a4[current]);
                }).then(function() {
                  var item = itemsRef.current[current];
                  if (!item) {
                    return Promise.resolve();
                  }
                  onExpandItem === null || onExpandItem === void 0 ? void 0 : onExpandItem(item, treeId);
                  if (rest.length > 0) {
                    return expandSubsequently(treeId, rest);
                  }
                  return Promise.resolve();
                })
              ];
            case 1:
              _a3.sent();
              return [
                2
              ];
          }
        });
      });
    }, [
      itemsRef,
      onExpandItem
    ]);
    var expandAll = reactExports.useCallback(function(treeId) {
      return __awaiter$2(void 0, void 0, void 0, function() {
        return __generator$2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                recursiveExpand(trees[treeId].rootItem, itemsRef, function(item) {
                  return onExpandItem === null || onExpandItem === void 0 ? void 0 : onExpandItem(item, treeId);
                })
              ];
            case 1:
              _a3.sent();
              return [
                2
              ];
          }
        });
      });
    }, [
      itemsRef,
      onExpandItem,
      trees
    ]);
    var collapseAll = reactExports.useCallback(function(treeId) {
      var _a3, _b2;
      for (var _i = 0, _c = (_b2 = (_a3 = viewState[treeId]) === null || _a3 === void 0 ? void 0 : _a3.expandedItems) !== null && _b2 !== void 0 ? _b2 : []; _i < _c.length; _i++) {
        var itemId = _c[_i];
        onCollapseItem === null || onCollapseItem === void 0 ? void 0 : onCollapseItem(items[itemId], treeId);
      }
    }, [
      items,
      onCollapseItem,
      viewState
    ]);
    var actions = reactExports.useMemo(function() {
      return {
        collapseItem,
        expandItem,
        focusItem,
        focusTree,
        moveFocusDown,
        moveFocusUp,
        renameItem,
        selectItems,
        toggleItemExpandedState,
        toggleItemSelectStatus,
        invokePrimaryAction,
        expandAll,
        expandSubsequently,
        collapseAll,
        abortProgrammaticDrag,
        completeProgrammaticDrag,
        moveProgrammaticDragPositionDown: programmaticDragDown,
        moveProgrammaticDragPositionUp: programmaticDragUp,
        startProgrammaticDrag
      };
    }, [
      collapseItem,
      expandItem,
      focusItem,
      focusTree,
      moveFocusDown,
      moveFocusUp,
      renameItem,
      selectItems,
      toggleItemExpandedState,
      toggleItemSelectStatus,
      invokePrimaryAction,
      expandAll,
      expandSubsequently,
      collapseAll,
      abortProgrammaticDrag,
      completeProgrammaticDrag,
      programmaticDragDown,
      programmaticDragUp,
      startProgrammaticDrag
    ]);
    useCreatedEnvironmentRef(ref, actions);
    return reactExports.createElement(EnvironmentActionsContext$1.Provider, {
      value: actions
    }, props.children);
  });
  var scrollIntoView = function(element) {
    var _a2, _b, _c, _d;
    if (!element) {
      return;
    }
    if (element.scrollIntoViewIfNeeded) {
      element.scrollIntoViewIfNeeded();
    } else {
      var boundingBox = element.getBoundingClientRect();
      var isElementInViewport = boundingBox.top >= 0 && boundingBox.left >= 0 && boundingBox.bottom <= (window.innerHeight || !!((_b = (_a2 = getDocument()) === null || _a2 === void 0 ? void 0 : _a2.documentElement) === null || _b === void 0 ? void 0 : _b.clientHeight)) && boundingBox.right <= (window.innerWidth || !!((_d = (_c = getDocument()) === null || _c === void 0 ? void 0 : _c.documentElement) === null || _d === void 0 ? void 0 : _d.clientWidth));
      if (!isElementInViewport) {
        element.scrollIntoView();
      }
    }
  };
  var __assign$9 = function() {
    __assign$9 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$9.apply(this, arguments);
  };
  var cx = function() {
    var classNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      classNames[_i] = arguments[_i];
    }
    return classNames.filter(function(cn2) {
      return !!cn2;
    }).join(" ");
  };
  var createDefaultRenderers = function(renderDepthOffset, rtl) {
    return {
      renderItemTitle: function(_a2) {
        var title = _a2.title, context = _a2.context, info = _a2.info;
        if (!info.isSearching || !context.isSearchMatching) {
          return title;
        }
        var startIndex = title.toLowerCase().indexOf(info.search.toLowerCase());
        return React.createElement(React.Fragment, null, startIndex > 0 && React.createElement("span", null, title.slice(0, startIndex)), React.createElement("span", {
          className: "rct-tree-item-search-highlight"
        }, title.slice(startIndex, startIndex + info.search.length)), startIndex + info.search.length < title.length && React.createElement("span", null, title.slice(startIndex + info.search.length, title.length)));
      },
      renderItemArrow: function(_a2) {
        var item = _a2.item, context = _a2.context;
        return React.createElement("div", __assign$9({
          className: cx(item.isFolder && "rct-tree-item-arrow-isFolder", context.isExpanded && "rct-tree-item-arrow-expanded", "rct-tree-item-arrow")
        }, context.arrowProps), item.isFolder && (context.isExpanded ? React.createElement("svg", {
          version: "1.1",
          xmlns: "http://www.w3.org/2000/svg",
          xmlnsXlink: "http://www.w3.org/1999/xlink",
          x: "0px",
          y: "0px",
          viewBox: "0 0 16 16",
          enableBackground: "new 0 0 16 16",
          xmlSpace: "preserve"
        }, React.createElement("g", null, React.createElement("g", null, React.createElement("path", {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z",
          className: "rct-tree-item-arrow-path"
        })))) : React.createElement("svg", {
          version: "1.1",
          xmlns: "http://www.w3.org/2000/svg",
          xmlnsXlink: "http://www.w3.org/1999/xlink",
          x: "0px",
          y: "0px",
          viewBox: "0 0 16 16",
          enableBackground: "new 0 0 16 16",
          xmlSpace: "preserve"
        }, React.createElement("g", null, React.createElement("g", null, React.createElement("path", {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z",
          className: "rct-tree-item-arrow-path"
        }))))));
      },
      renderItem: function(_a2) {
        var item = _a2.item, depth = _a2.depth, children = _a2.children, title = _a2.title, context = _a2.context, arrow = _a2.arrow;
        var InteractiveComponent = context.isRenaming ? "div" : "button";
        var type = context.isRenaming ? void 0 : "button";
        return React.createElement("li", __assign$9({}, context.itemContainerWithChildrenProps, {
          className: cx("rct-tree-item-li", item.isFolder && "rct-tree-item-li-isFolder", context.isSelected && "rct-tree-item-li-selected", context.isExpanded && "rct-tree-item-li-expanded", context.isFocused && "rct-tree-item-li-focused", context.isDraggingOver && "rct-tree-item-li-dragging-over", context.isSearchMatching && "rct-tree-item-li-search-match")
        }), React.createElement("div", __assign$9({}, context.itemContainerWithoutChildrenProps, {
          style: {
            "--depthOffset": "".concat((depth + 1) * renderDepthOffset, "px")
          },
          className: cx("rct-tree-item-title-container", item.isFolder && "rct-tree-item-title-container-isFolder", context.isSelected && "rct-tree-item-title-container-selected", context.isExpanded && "rct-tree-item-title-container-expanded", context.isFocused && "rct-tree-item-title-container-focused", context.isDraggingOver && "rct-tree-item-title-container-dragging-over", context.isSearchMatching && "rct-tree-item-title-container-search-match")
        }), arrow, React.createElement(InteractiveComponent, __assign$9({
          type
        }, context.interactiveElementProps, {
          className: cx("rct-tree-item-button", item.isFolder && "rct-tree-item-button-isFolder", context.isSelected && "rct-tree-item-button-selected", context.isExpanded && "rct-tree-item-button-expanded", context.isFocused && "rct-tree-item-button-focused", context.isDraggingOver && "rct-tree-item-button-dragging-over", context.isSearchMatching && "rct-tree-item-button-search-match")
        }), title)), children);
      },
      renderRenameInput: function(_a2) {
        var inputProps = _a2.inputProps, inputRef = _a2.inputRef, submitButtonProps = _a2.submitButtonProps, submitButtonRef = _a2.submitButtonRef, formProps = _a2.formProps;
        return React.createElement("form", __assign$9({}, formProps, {
          className: "rct-tree-item-renaming-form"
        }), React.createElement("input", __assign$9({}, inputProps, {
          ref: inputRef,
          className: "rct-tree-item-renaming-input"
        })), React.createElement("input", __assign$9({}, submitButtonProps, {
          ref: submitButtonRef,
          type: "submit",
          className: "rct-tree-item-renaming-submit-button",
          value: "\u{1F5F8}"
        })));
      },
      renderTreeContainer: function(_a2) {
        var children = _a2.children, containerProps = _a2.containerProps, info = _a2.info;
        return React.createElement("div", {
          className: cx("rct-tree-root", info.isFocused && "rct-tree-root-focus", info.isRenaming && "rct-tree-root-renaming", info.areItemsSelected && "rct-tree-root-itemsselected", rtl)
        }, React.createElement("div", __assign$9({}, containerProps, {
          style: __assign$9({
            minHeight: "30px"
          }, containerProps.style)
        }), children));
      },
      renderItemsContainer: function(_a2) {
        var children = _a2.children, containerProps = _a2.containerProps;
        return React.createElement("ul", __assign$9({}, containerProps, {
          className: "rct-tree-items-container"
        }), children);
      },
      renderDragBetweenLine: function(_a2) {
        var draggingPosition = _a2.draggingPosition, lineProps = _a2.lineProps;
        return React.createElement("div", __assign$9({}, lineProps, {
          style: {
            left: "".concat(draggingPosition.depth * renderDepthOffset, "px")
          },
          className: cx("rct-tree-drag-between-line", draggingPosition.targetType === "between-items" && draggingPosition.linePosition === "top" && "rct-tree-drag-between-line-top", draggingPosition.targetType === "between-items" && draggingPosition.linePosition === "bottom" && "rct-tree-drag-between-line-bottom")
        }));
      },
      renderSearchInput: function(_a2) {
        var inputProps = _a2.inputProps;
        return React.createElement("div", {
          className: cx("rct-tree-search-input-container")
        }, React.createElement("span", {
          className: "rct-tree-input-icon"
        }), React.createElement("input", __assign$9({}, inputProps, {
          className: cx("rct-tree-search-input")
        })));
      },
      renderLiveDescriptorContainer: function(_a2) {
        var tree = _a2.tree, children = _a2.children;
        return React.createElement("div", {
          id: "rct-livedescription-".concat(tree.treeId),
          style: {
            clip: "rect(0 0 0 0)",
            clipPath: "inset(50%)",
            height: "1px",
            overflow: "hidden",
            position: "absolute",
            whiteSpace: "nowrap",
            width: "1px"
          }
        }, children);
      },
      renderDepthOffset
    };
  };
  var useRenderers = function(_a2) {
    var renderItem = _a2.renderItem, renderItemTitle = _a2.renderItemTitle, renderItemArrow = _a2.renderItemArrow, renderRenameInput = _a2.renderRenameInput, renderItemsContainer = _a2.renderItemsContainer, renderTreeContainer = _a2.renderTreeContainer, renderDragBetweenLine = _a2.renderDragBetweenLine, renderSearchInput = _a2.renderSearchInput, renderLiveDescriptorContainer = _a2.renderLiveDescriptorContainer, renderDepthOffset = _a2.renderDepthOffset;
    var defaultRenderers = reactExports.useMemo(function() {
      return createDefaultRenderers(renderDepthOffset !== null && renderDepthOffset !== void 0 ? renderDepthOffset : 10);
    }, [
      renderDepthOffset
    ]);
    var customRenderers = {
      renderItem,
      renderItemTitle,
      renderItemArrow,
      renderRenameInput,
      renderItemsContainer,
      renderTreeContainer,
      renderDragBetweenLine,
      renderSearchInput,
      renderLiveDescriptorContainer,
      renderDepthOffset
    };
    var renderers = Object.entries(defaultRenderers).reduce(function(acc, _a3) {
      var key = _a3[0], value = _a3[1];
      var keyMapped = key;
      if (customRenderers[keyMapped]) {
        acc[keyMapped] = customRenderers[keyMapped];
      } else {
        acc[keyMapped] = value;
      }
      return acc;
    }, {});
    renderers.renderItem.displayName = "RenderItem";
    renderers.renderItemTitle.displayName = "RenderItemTitle";
    renderers.renderItemArrow.displayName = "RenderItemArrow";
    renderers.renderRenameInput.displayName = "RenderRenameInput";
    renderers.renderItemsContainer.displayName = "RenderItemsContainer";
    renderers.renderTreeContainer.displayName = "RenderTreeContainer";
    renderers.renderDragBetweenLine.displayName = "RenderDragBetweenLine";
    renderers.renderSearchInput.displayName = "RenderSearchInput";
    return renderers;
  };
  var getItemsLinearly = function(rootItem, viewState, items, depth) {
    var _a2, _b, _c;
    if (depth === void 0) {
      depth = 0;
    }
    var itemIds = [];
    for (var _i = 0, _d = (_b = (_a2 = items[rootItem]) === null || _a2 === void 0 ? void 0 : _a2.children) !== null && _b !== void 0 ? _b : []; _i < _d.length; _i++) {
      var itemId = _d[_i];
      var item = items[itemId];
      itemIds.push({
        item: itemId,
        depth
      });
      if (item && item.isFolder && !!item.children && ((_c = viewState.expandedItems) === null || _c === void 0 ? void 0 : _c.includes(itemId))) {
        itemIds.push.apply(itemIds, getItemsLinearly(itemId, viewState, items, depth + 1));
      }
    }
    return itemIds;
  };
  var __assign$8 = function() {
    __assign$8 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$8.apply(this, arguments);
  };
  var __rest = function(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var useControlledTreeEnvironmentProps = function(_a2) {
    var onExpandItemProp = _a2.onExpandItem, onCollapseProp = _a2.onCollapseItem, onDropProp = _a2.onDrop, props = __rest(_a2, [
      "onExpandItem",
      "onCollapseItem",
      "onDrop"
    ]);
    var _b = reactExports.useState({}), trees = _b[0], setTrees = _b[1];
    var _c = reactExports.useState(), activeTreeId = _c[0], setActiveTreeId = _c[1];
    var treeIds = reactExports.useMemo(function() {
      return Object.keys(trees);
    }, [
      trees
    ]);
    var onFocusItem = props.onFocusItem, autoFocus = props.autoFocus, onRegisterTree = props.onRegisterTree, onUnregisterTree = props.onUnregisterTree, items = props.items, viewState = props.viewState;
    var onFocusItemRef = useRefCopy(onFocusItem);
    var viewStateRef = useRefCopy(viewState);
    var linearItems = reactExports.useMemo(function() {
      return buildMapForTrees(treeIds, function(treeId) {
        var _a3;
        return getItemsLinearly(trees[treeId].rootItem, (_a3 = viewState[treeId]) !== null && _a3 !== void 0 ? _a3 : {}, items);
      });
    }, [
      trees,
      items,
      treeIds,
      viewState
    ]);
    var onFocusItemHandler = reactExports.useCallback(function(item, treeId, setDomFocus) {
      var _a3, _b2, _c2, _d, _e, _f, _g, _h, _j;
      if (setDomFocus === void 0) {
        setDomFocus = true;
      }
      if ((autoFocus !== null && autoFocus !== void 0 ? autoFocus : true) && setDomFocus) {
        var newItem = (_b2 = (_a3 = getDocument()) === null || _a3 === void 0 ? void 0 : _a3.querySelector('[data-rct-tree="'.concat(treeId, '"] [data-rct-item-id="').concat(item.index, '"]'))) !== null && _b2 !== void 0 ? _b2 : (_c2 = getDocument()) === null || _c2 === void 0 ? void 0 : _c2.querySelector('[data-rct-tree="'.concat(treeId, '"] [data-rct-item-id]'));
        if (((_f = (_e = (_d = getDocument()) === null || _d === void 0 ? void 0 : _d.activeElement) === null || _e === void 0 ? void 0 : _e.attributes.getNamedItem("data-rct-search-input")) === null || _f === void 0 ? void 0 : _f.value) !== "true") {
          (_g = newItem === null || newItem === void 0 ? void 0 : newItem.focus) === null || _g === void 0 ? void 0 : _g.call(newItem);
        } else {
          scrollIntoView(newItem);
        }
      }
      if (((_h = viewStateRef.current[treeId]) === null || _h === void 0 ? void 0 : _h.focusedItem) === item.index) {
        return;
      }
      (_j = onFocusItemRef.current) === null || _j === void 0 ? void 0 : _j.call(onFocusItemRef, item, treeId);
    }, [
      autoFocus,
      onFocusItemRef,
      viewStateRef
    ]);
    var registerTree = reactExports.useCallback(function(tree) {
      setTrees(function(trees2) {
        var _a3;
        return __assign$8(__assign$8({}, trees2), (_a3 = {}, _a3[tree.treeId] = tree, _a3));
      });
      onRegisterTree === null || onRegisterTree === void 0 ? void 0 : onRegisterTree(tree);
    }, [
      onRegisterTree
    ]);
    var unregisterTree = reactExports.useCallback(function(treeId) {
      onUnregisterTree === null || onUnregisterTree === void 0 ? void 0 : onUnregisterTree(trees[treeId]);
      delete trees[treeId];
      setTrees(trees);
    }, [
      onUnregisterTree,
      trees
    ]);
    var onCollapseItem = reactExports.useCallback(function(item, treeId) {
      onCollapseProp === null || onCollapseProp === void 0 ? void 0 : onCollapseProp(item, treeId);
      setTrees(function(trees2) {
        return trees2;
      });
    }, [
      onCollapseProp
    ]);
    var onExpandItem = reactExports.useCallback(function(item, treeId) {
      onExpandItemProp === null || onExpandItemProp === void 0 ? void 0 : onExpandItemProp(item, treeId);
      setTrees(function(trees2) {
        return trees2;
      });
    }, [
      onExpandItemProp
    ]);
    var onDrop = reactExports.useCallback(function(items2, target) {
      onDropProp === null || onDropProp === void 0 ? void 0 : onDropProp(items2, target);
      setTrees(function(trees2) {
        return trees2;
      });
    }, [
      onDropProp
    ]);
    var focusTree = reactExports.useCallback(function(treeId) {
      var _a3, _b2;
      var focusItem = (_a3 = getDocument()) === null || _a3 === void 0 ? void 0 : _a3.querySelector('[data-rct-tree="'.concat(treeId, '"] [data-rct-item-focus="true"]'));
      (_b2 = focusItem === null || focusItem === void 0 ? void 0 : focusItem.focus) === null || _b2 === void 0 ? void 0 : _b2.call(focusItem);
    }, []);
    var setActiveTree = reactExports.useCallback(function(treeIdOrSetStateFunction, autoFocusTree) {
      if (autoFocusTree === void 0) {
        autoFocusTree = true;
      }
      var maybeFocusTree = function(treeId2) {
        var _a3, _b2;
        if (autoFocusTree && (autoFocus !== null && autoFocus !== void 0 ? autoFocus : true) && treeId2 && !((_b2 = (_a3 = getDocument()) === null || _a3 === void 0 ? void 0 : _a3.querySelector('[data-rct-tree="'.concat(treeId2, '"]'))) === null || _b2 === void 0 ? void 0 : _b2.contains(document.activeElement))) {
          focusTree(treeId2);
        }
      };
      if (typeof treeIdOrSetStateFunction === "function") {
        setActiveTreeId(function(oldValue) {
          var treeId2 = treeIdOrSetStateFunction(oldValue);
          if (treeId2 !== oldValue) {
            maybeFocusTree(treeId2);
          }
          return treeId2;
        });
      } else {
        var treeId = treeIdOrSetStateFunction;
        setActiveTreeId(treeId);
        maybeFocusTree(treeId);
      }
    }, [
      autoFocus,
      focusTree
    ]);
    var renderers = useRenderers(props);
    return __assign$8(__assign$8(__assign$8({}, renderers), props), {
      onFocusItem: onFocusItemHandler,
      registerTree,
      unregisterTree,
      onExpandItem,
      onCollapseItem,
      onDrop,
      setActiveTree,
      treeIds,
      trees,
      activeTreeId,
      linearItems
    });
  };
  var __assign$7 = function() {
    __assign$7 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$7.apply(this, arguments);
  };
  var TreeEnvironmentContext = reactExports.createContext(null);
  var useTreeEnvironment = function() {
    return reactExports.useContext(TreeEnvironmentContext);
  };
  var ControlledTreeEnvironment = reactExports.forwardRef(function(props, ref) {
    var _a2, _b, _c;
    var environmentContextProps = useControlledTreeEnvironmentProps(props);
    var viewState = props.viewState;
    for (var _i = 0, _d = Object.keys(environmentContextProps.trees); _i < _d.length; _i++) {
      var treeId = _d[_i];
      if (!((_a2 = viewState[treeId]) === null || _a2 === void 0 ? void 0 : _a2.focusedItem) && environmentContextProps.trees[treeId]) {
        viewState[treeId] = __assign$7(__assign$7({}, viewState[treeId]), {
          focusedItem: (_c = (_b = props.items[environmentContextProps.trees[treeId].rootItem]) === null || _b === void 0 ? void 0 : _b.children) === null || _c === void 0 ? void 0 : _c[0]
        });
      }
    }
    return reactExports.createElement(TreeEnvironmentContext.Provider, {
      value: environmentContextProps
    }, reactExports.createElement(InteractionManagerProvider, null, reactExports.createElement(DragAndDropProvider, null, reactExports.createElement(EnvironmentActionsProvider, {
      ref
    }, props.children))));
  });
  var DragBetweenLine = function(_a2) {
    var _b;
    var treeId = _a2.treeId;
    var _c = useDragAndDrop(), draggingPosition = _c.draggingPosition, itemHeight = _c.itemHeight;
    var renderers = useTree().renderers;
    var shouldDisplay = draggingPosition && draggingPosition.targetType === "between-items" && draggingPosition.treeId === treeId;
    if (!shouldDisplay) {
      return null;
    }
    var lineProps = {
      onDragOver: function(e) {
        return e.preventDefault();
      }
    };
    return reactExports.createElement("div", {
      style: {
        position: "absolute",
        left: "0",
        right: "0",
        top: "".concat(((_b = draggingPosition === null || draggingPosition === void 0 ? void 0 : draggingPosition.linearIndex) !== null && _b !== void 0 ? _b : 0) * itemHeight, "px")
      }
    }, renderers.renderDragBetweenLine({
      draggingPosition,
      lineProps
    }));
  };
  var useHtmlElementEventListener = function(element, type, listener) {
    var stableListener = useStableHandler(listener);
    reactExports.useEffect(function() {
      if (element) {
        element.addEventListener(type, stableListener);
        return function() {
          return element.removeEventListener(type, stableListener);
        };
      }
      return function() {
      };
    }, [
      element,
      stableListener,
      type
    ]);
  };
  var useFocusWithin = function(element, onFocusIn, onFocusOut) {
    var _a2 = reactExports.useState(false), focusWithin = _a2[0], setFocusWithin = _a2[1];
    var isLoosingFocusFlag = reactExports.useRef(false);
    var callSoon = useCallSoon();
    useHtmlElementEventListener(element, "focusin", function() {
      if (!focusWithin) {
        setFocusWithin(true);
        onFocusIn === null || onFocusIn === void 0 ? void 0 : onFocusIn();
      }
      if (isLoosingFocusFlag.current) {
        isLoosingFocusFlag.current = false;
      }
    });
    useHtmlElementEventListener(element, "focusout", function() {
      isLoosingFocusFlag.current = true;
      callSoon(function() {
        if (isLoosingFocusFlag.current && !(element === null || element === void 0 ? void 0 : element.contains(document.activeElement))) {
          onFocusOut === null || onFocusOut === void 0 ? void 0 : onFocusOut();
          isLoosingFocusFlag.current = false;
          setFocusWithin(false);
        }
      });
    });
    return focusWithin;
  };
  var useKey = function(key, onHit, active) {
    useHtmlElementEventListener(getDocument(), "keydown", function(e) {
      if (!active) {
        return;
      }
      if (active && key.toLowerCase() === e.key.toLowerCase()) {
        onHit(e);
      }
    });
  };
  var defaultKeyboardBindings = {
    expandSiblings: [
      "control+*"
    ],
    moveFocusToFirstItem: [
      "home"
    ],
    moveFocusToLastItem: [
      "end"
    ],
    primaryAction: [
      "enter"
    ],
    renameItem: [
      "f2"
    ],
    abortRenameItem: [
      "escape"
    ],
    toggleSelectItem: [
      "control+space"
    ],
    abortSearch: [
      "escape",
      "enter"
    ],
    startSearch: [],
    selectAll: [
      "control+a"
    ],
    startProgrammaticDnd: [
      "control+d"
    ],
    completeProgrammaticDnd: [
      "enter"
    ],
    abortProgrammaticDnd: [
      "escape"
    ]
  };
  var __assign$6 = function() {
    __assign$6 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$6.apply(this, arguments);
  };
  var useKeyboardBindings = function() {
    var environment = useTreeEnvironment();
    return reactExports.useMemo(function() {
      if (environment.keyboardBindings) {
        return __assign$6(__assign$6({}, defaultKeyboardBindings), environment.keyboardBindings);
      }
      return defaultKeyboardBindings;
    }, [
      environment.keyboardBindings
    ]);
  };
  var elementsThatCanTakeText = [
    "input",
    "textarea"
  ];
  var useHotkey = function(combinationName, onHit, active, activatableWhileFocusingInput) {
    if (activatableWhileFocusingInput === void 0) {
      activatableWhileFocusingInput = false;
    }
    var pressedKeys = reactExports.useRef([]);
    var keyboardBindings = useKeyboardBindings();
    var callSoon = useCallSoon();
    var possibleCombinations = reactExports.useMemo(function() {
      return keyboardBindings[combinationName].map(function(combination) {
        return combination.split("+");
      });
    }, [
      combinationName,
      keyboardBindings
    ]);
    useHtmlElementEventListener(getDocument(), "keydown", function(e) {
      var _a2;
      if (active === false) {
        return;
      }
      if ((elementsThatCanTakeText.includes((_a2 = e.target.tagName) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase()) || e.target.isContentEditable) && !activatableWhileFocusingInput) {
        return;
      }
      if (!pressedKeys.current.includes(e.key)) {
        pressedKeys.current.push(e.key);
        var pressedKeysLowercase_1 = pressedKeys.current.map(function(key) {
          return key.toLowerCase();
        });
        var partialMatch = possibleCombinations.map(function(combination) {
          return pressedKeysLowercase_1.map(function(key) {
            return combination.includes(key.toLowerCase());
          }).reduce(function(a, b) {
            return a && b;
          }, true);
        }).reduce(function(a, b) {
          return a || b;
        }, false);
        if (partialMatch) {
          if (pressedKeys.current.length > 1 || !/^[a-zA-Z]$/.test(e.key)) {
            e.preventDefault();
          }
        }
      }
    });
    useHtmlElementEventListener(getDocument(), "keyup", function(e) {
      if (active === false) {
        return;
      }
      var pressedKeysLowercase = pressedKeys.current.map(function(key) {
        return key.toLowerCase();
      });
      var match = possibleCombinations.map(function(combination) {
        return combination.map(function(key) {
          return pressedKeysLowercase.includes(key.toLowerCase());
        }).reduce(function(a, b) {
          return a && b;
        }, true);
      }).reduce(function(a, b) {
        return a || b;
      }, false);
      if (match) {
        callSoon(function() {
          return onHit(e);
        });
      }
      pressedKeys.current = pressedKeys.current.filter(function(key) {
        return key !== e.key;
      });
    });
  };
  var useViewState = function() {
    var _a2;
    var treeId = useTree().treeId;
    var viewState = useTreeEnvironment().viewState;
    return (_a2 = viewState[treeId]) !== null && _a2 !== void 0 ? _a2 : {};
  };
  var useLinearItems = function(treeId) {
    return useTreeEnvironment().linearItems[treeId];
  };
  var useMoveFocusToIndex = function() {
    var treeId = useTree().treeId;
    var _a2 = useTreeEnvironment(), onFocusItem = _a2.onFocusItem, items = _a2.items;
    var linearItems = useLinearItems(treeId);
    var viewState = useViewState();
    return useStableHandler(function(computeNewIndex) {
      var _a3;
      var currentIndex = (_a3 = linearItems.findIndex(function(item) {
        return item.item === viewState.focusedItem;
      })) !== null && _a3 !== void 0 ? _a3 : 0;
      var newIndex = computeNewIndex(currentIndex, linearItems);
      var newIndexBounded = Math.max(0, Math.min(linearItems.length - 1, newIndex));
      var newFocusItem = items[linearItems[newIndexBounded].item];
      onFocusItem === null || onFocusItem === void 0 ? void 0 : onFocusItem(newFocusItem, treeId);
      return newFocusItem;
    });
  };
  var __spreadArray$3 = function(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var usePrevious = function(value) {
    var ref = reactExports.useRef({
      target: value,
      previous: void 0
    });
    if (ref.current.target !== value) {
      ref.current.previous = ref.current.target;
      ref.current.target = value;
    }
    return ref.current.previous;
  };
  var useSelectUpTo = function(startingAt) {
    var viewState = useViewState();
    var treeId = useTree().treeId;
    var linearItems = useLinearItems(treeId);
    var onSelectItems = useTreeEnvironment().onSelectItems;
    var focusedItemPrevious = usePrevious(viewState.focusedItem);
    return reactExports.useCallback(function(item, overrideOldSelection) {
      var _a2, _b;
      if (overrideOldSelection === void 0) {
        overrideOldSelection = false;
      }
      var itemIndex = item.index;
      var selectMergedItems = function(oldSelection, newSelection) {
        var merged = __spreadArray$3(__spreadArray$3([], overrideOldSelection ? [] : oldSelection, true), newSelection.filter(function(i) {
          return overrideOldSelection || !oldSelection.includes(i);
        }), true);
        onSelectItems === null || onSelectItems === void 0 ? void 0 : onSelectItems(merged, treeId);
      };
      if (viewState && viewState.selectedItems && viewState.selectedItems.length > 0) {
        var lastFocus_1 = viewState.focusedItem === itemIndex ? focusedItemPrevious : viewState.focusedItem;
        var selectionStart = startingAt === "last-focus" ? linearItems.findIndex(function(linearItem) {
          return lastFocus_1 === linearItem.item;
        }) : linearItems.findIndex(function(linearItem) {
          var _a3;
          return (_a3 = viewState.selectedItems) === null || _a3 === void 0 ? void 0 : _a3.includes(linearItem.item);
        });
        var selectionEnd = linearItems.findIndex(function(linearItem) {
          return linearItem.item === itemIndex;
        });
        if (selectionStart < selectionEnd) {
          var selection = linearItems.slice(selectionStart, selectionEnd + 1).map(function(_a3) {
            var item2 = _a3.item;
            return item2;
          });
          selectMergedItems((_a2 = viewState.selectedItems) !== null && _a2 !== void 0 ? _a2 : [], selection);
        } else {
          var selection = linearItems.slice(selectionEnd, selectionStart + 1).map(function(_a3) {
            var item2 = _a3.item;
            return item2;
          });
          selectMergedItems((_b = viewState.selectedItems) !== null && _b !== void 0 ? _b : [], selection);
        }
      } else {
        onSelectItems === null || onSelectItems === void 0 ? void 0 : onSelectItems([
          itemIndex
        ], treeId);
      }
    }, [
      viewState,
      onSelectItems,
      treeId,
      startingAt,
      linearItems,
      focusedItemPrevious
    ]);
  };
  var __spreadArray$2 = function(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var useTreeKeyboardBindings = function() {
    var _a2;
    var environment = useTreeEnvironment();
    var _b = useTree(), treeId = _b.treeId, setRenamingItem = _b.setRenamingItem, setSearch = _b.setSearch, renamingItem = _b.renamingItem;
    var linearItems = useLinearItems(treeId);
    var dnd = useDragAndDrop();
    var viewState = useViewState();
    var moveFocusToIndex = useMoveFocusToIndex();
    var selectUpTo = useSelectUpTo("first-selected");
    var isActiveTree = environment.activeTreeId === treeId;
    var isRenaming = !!renamingItem;
    var disableArrowKeys = environment.disableArrowKeys;
    var enableArrowKeys = !disableArrowKeys && isActiveTree && !isRenaming;
    useKey("arrowdown", function(e) {
      e.preventDefault();
      if (dnd.isProgrammaticallyDragging) {
        dnd.programmaticDragDown();
      } else {
        var newFocusItem = moveFocusToIndex(function(currentIndex) {
          return currentIndex + 1;
        });
        if (e.shiftKey) {
          selectUpTo(newFocusItem);
        }
      }
    }, enableArrowKeys);
    useKey("arrowup", function(e) {
      e.preventDefault();
      if (dnd.isProgrammaticallyDragging) {
        dnd.programmaticDragUp();
      } else {
        var newFocusItem = moveFocusToIndex(function(currentIndex) {
          return currentIndex - 1;
        });
        if (e.shiftKey) {
          selectUpTo(newFocusItem);
        }
      }
    }, enableArrowKeys);
    useHotkey("moveFocusToFirstItem", function(e) {
      e.preventDefault();
      moveFocusToIndex(function() {
        return 0;
      });
    }, isActiveTree && !dnd.isProgrammaticallyDragging && !isRenaming);
    useHotkey("moveFocusToLastItem", function(e) {
      e.preventDefault();
      moveFocusToIndex(function(currentIndex, linearItems2) {
        return linearItems2.length - 1;
      });
    }, isActiveTree && !dnd.isProgrammaticallyDragging && !isRenaming);
    useKey("arrowright", function(e) {
      e.preventDefault();
      moveFocusToIndex(function(currentIndex, linearItems2) {
        var _a3, _b2;
        var item = environment.items[linearItems2[currentIndex].item];
        if (item.isFolder) {
          if ((_a3 = viewState.expandedItems) === null || _a3 === void 0 ? void 0 : _a3.includes(item.index)) {
            return currentIndex + 1;
          }
          (_b2 = environment.onExpandItem) === null || _b2 === void 0 ? void 0 : _b2.call(environment, item, treeId);
        }
        return currentIndex;
      });
    }, enableArrowKeys && !dnd.isProgrammaticallyDragging);
    useKey("arrowleft", function(e) {
      e.preventDefault();
      moveFocusToIndex(function(currentIndex, linearItems2) {
        var _a3, _b2;
        var item = environment.items[linearItems2[currentIndex].item];
        var itemDepth = linearItems2[currentIndex].depth;
        if (item.isFolder && ((_a3 = viewState.expandedItems) === null || _a3 === void 0 ? void 0 : _a3.includes(item.index))) {
          (_b2 = environment.onCollapseItem) === null || _b2 === void 0 ? void 0 : _b2.call(environment, item, treeId);
        } else if (itemDepth > 0) {
          var parentIndex = currentIndex;
          for (parentIndex; linearItems2[parentIndex].depth !== itemDepth - 1; parentIndex -= 1) ;
          return parentIndex;
        }
        return currentIndex;
      });
    }, enableArrowKeys && !dnd.isProgrammaticallyDragging);
    useHotkey("primaryAction", function(e) {
      var _a3, _b2;
      e.preventDefault();
      if (viewState.focusedItem !== void 0) {
        (_a3 = environment.onSelectItems) === null || _a3 === void 0 ? void 0 : _a3.call(environment, [
          viewState.focusedItem
        ], treeId);
        (_b2 = environment.onPrimaryAction) === null || _b2 === void 0 ? void 0 : _b2.call(environment, environment.items[viewState.focusedItem], treeId);
      }
    }, isActiveTree && !dnd.isProgrammaticallyDragging && !isRenaming);
    useHotkey("toggleSelectItem", function(e) {
      var _a3, _b2, _c;
      e.preventDefault();
      if (viewState.focusedItem !== void 0) {
        if (viewState.selectedItems && viewState.selectedItems.includes(viewState.focusedItem)) {
          (_a3 = environment.onSelectItems) === null || _a3 === void 0 ? void 0 : _a3.call(environment, viewState.selectedItems.filter(function(item) {
            return item !== viewState.focusedItem;
          }), treeId);
        } else {
          (_b2 = environment.onSelectItems) === null || _b2 === void 0 ? void 0 : _b2.call(environment, __spreadArray$2(__spreadArray$2([], (_c = viewState.selectedItems) !== null && _c !== void 0 ? _c : [], true), [
            viewState.focusedItem
          ], false), treeId);
        }
      }
    }, isActiveTree && !dnd.isProgrammaticallyDragging && !isRenaming);
    useHotkey("selectAll", function(e) {
      var _a3;
      e.preventDefault();
      (_a3 = environment.onSelectItems) === null || _a3 === void 0 ? void 0 : _a3.call(environment, linearItems.map(function(_a4) {
        var item = _a4.item;
        return item;
      }), treeId);
    }, isActiveTree && !dnd.isProgrammaticallyDragging && !isRenaming);
    useHotkey("renameItem", function(e) {
      var _a3;
      if (viewState.focusedItem === void 0) {
        return;
      }
      e.preventDefault();
      var item = environment.items[viewState.focusedItem];
      if (item.canRename === false) {
        return;
      }
      (_a3 = environment.onStartRenamingItem) === null || _a3 === void 0 ? void 0 : _a3.call(environment, item, treeId);
      setRenamingItem(item.index);
    }, isActiveTree && ((_a2 = environment.canRename) !== null && _a2 !== void 0 ? _a2 : true) && !isRenaming);
    useHotkey("startSearch", function(e) {
      var _a3, _b2;
      e.preventDefault();
      setSearch("");
      (_b2 = (_a3 = document.querySelector('[data-rct-search-input="true"]')) === null || _a3 === void 0 ? void 0 : _a3.focus) === null || _b2 === void 0 ? void 0 : _b2.call(_a3);
    }, isActiveTree && !dnd.isProgrammaticallyDragging && !isRenaming);
    useHotkey("startProgrammaticDnd", function(e) {
      e.preventDefault();
      dnd.startProgrammaticDrag();
    }, isActiveTree && !isRenaming);
    useHotkey("completeProgrammaticDnd", function(e) {
      e.preventDefault();
      dnd.completeProgrammaticDrag();
    }, isActiveTree && dnd.isProgrammaticallyDragging && !isRenaming);
    useHotkey("abortProgrammaticDnd", function(e) {
      e.preventDefault();
      dnd.abortProgrammaticDrag();
    }, isActiveTree && dnd.isProgrammaticallyDragging && !isRenaming);
  };
  var defaultMatcher = function(search, item, itemTitle) {
    return itemTitle.toLowerCase().includes(search.toLowerCase());
  };
  var useSearchMatchFocus = function() {
    var _a2 = useTreeEnvironment(), doesSearchMatchItem = _a2.doesSearchMatchItem, items = _a2.items, getItemTitle = _a2.getItemTitle, onFocusItem = _a2.onFocusItem;
    var _b = useTree(), search = _b.search, treeId = _b.treeId;
    var linearItems = useLinearItems(treeId);
    var callSoon = useCallSoon();
    useSideEffect(function() {
      if (search && search.length > 0) {
        callSoon(function() {
          var focusItem = linearItems.find(function(_a3) {
            var item = _a3.item;
            return (doesSearchMatchItem !== null && doesSearchMatchItem !== void 0 ? doesSearchMatchItem : defaultMatcher)(search, items[item], getItemTitle(items[item]));
          });
          if (focusItem) {
            onFocusItem === null || onFocusItem === void 0 ? void 0 : onFocusItem(items[focusItem.item], treeId);
          }
        });
      }
    }, [
      doesSearchMatchItem,
      getItemTitle,
      linearItems,
      items,
      onFocusItem,
      search,
      treeId,
      callSoon
    ], [
      search
    ]);
  };
  var __assign$5 = function() {
    __assign$5 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$5.apply(this, arguments);
  };
  var SearchInput = function(_a2) {
    var _b;
    var containerRef = _a2.containerRef;
    var _c = useTree(), search = _c.search, setSearch = _c.setSearch, treeId = _c.treeId, renderers = _c.renderers, renamingItem = _c.renamingItem;
    var environment = useTreeEnvironment();
    useViewState();
    var isActiveTree = environment.activeTreeId === treeId;
    var callSoon = useCallSoon();
    useSearchMatchFocus();
    var clearSearch = function() {
      var _a3, _b2, _c2;
      setSearch(null);
      if ((_a3 = environment.autoFocus) !== null && _a3 !== void 0 ? _a3 : true) {
        var focusItem = (_b2 = getDocument()) === null || _b2 === void 0 ? void 0 : _b2.querySelector('[data-rct-tree="'.concat(treeId, '"] [data-rct-item-focus="true"]'));
        (_c2 = focusItem === null || focusItem === void 0 ? void 0 : focusItem.focus) === null || _c2 === void 0 ? void 0 : _c2.call(focusItem);
      }
    };
    useHotkey("abortSearch", function() {
      callSoon(function() {
        clearSearch();
      });
    }, isActiveTree && search !== null, true);
    useHtmlElementEventListener(containerRef, "keydown", function(e) {
      var _a3, _b2;
      var unicode = e.key.charCodeAt(0);
      if (((_a3 = environment.canSearch) !== null && _a3 !== void 0 ? _a3 : true) && ((_b2 = environment.canSearchByStartingTyping) !== null && _b2 !== void 0 ? _b2 : true) && isActiveTree && search === null && !renamingItem && !e.ctrlKey && !e.shiftKey && !e.altKey && !e.metaKey && (unicode >= 48 && unicode <= 57 || unicode >= 97 && unicode <= 122)) {
        setSearch("");
      }
    });
    if (!((_b = environment.canSearch) !== null && _b !== void 0 ? _b : true) || search === null) {
      return null;
    }
    return renderers.renderSearchInput({
      inputProps: __assign$5({
        value: search,
        onChange: function(e) {
          return setSearch(e.target.value);
        },
        onBlur: function() {
          clearSearch();
        },
        ref: function(el) {
          var _a3;
          (_a3 = el === null || el === void 0 ? void 0 : el.focus) === null || _a3 === void 0 ? void 0 : _a3.call(el);
        },
        "aria-label": "Search for items"
      }, {
        "data-rct-search-input": "true"
      })
    });
  };
  var defaultLiveDescriptors = {
    introduction: "\n    <p>Accessibility guide for tree {treeLabel}.</p>\n    <p>\n      Navigate the tree with the arrow keys. Common tree hotkeys apply. Further keybindings are available:\n    </p>\n    <ul>\n      <li>{keybinding:primaryAction} to execute primary action on focused item</li>\n      <li>{keybinding:renameItem} to start renaming the focused item</li>\n      <li>{keybinding:abortRenameItem} to abort renaming an item</li>\n      <li>{keybinding:startProgrammaticDnd} to start dragging selected items</li>\n    </ul>\n  ",
    renamingItem: "\n    <p>Renaming the item {renamingItem}.</p>\n    <p>Use the keybinding {keybinding:abortRenameItem} to abort renaming.</p>\n  ",
    searching: "\n    <p>Searching</p>\n  ",
    programmaticallyDragging: "\n    <p>Dragging items {dragItems}.</p>\n    <p>Press the arrow keys to move the drag target.</p>\n    <p>Press {keybinding:completeProgrammaticDnd} to drop or {keybinding:abortProgrammaticDnd} to abort.</p>\n  ",
    programmaticallyDraggingTarget: "\n    <p>Drop target is {dropTarget}.</p>\n  "
  };
  var resolveLiveDescriptor = function(descriptor, environment, dnd, tree, keyboardBindings) {
    var getItemTitle = function(index2) {
      return environment.getItemTitle(environment.items[index2]);
    };
    return descriptor.replace(/({[^\s}]+)}/g, function(variableNameWithBrackets) {
      var _a2, _b, _c;
      var variableName = variableNameWithBrackets.slice(1, -1);
      switch (variableName) {
        case "treeLabel":
          return (_a2 = tree.treeLabel) !== null && _a2 !== void 0 ? _a2 : "";
        case "renamingItem":
          return tree.renamingItem ? getItemTitle(tree.renamingItem) : "None";
        case "dragItems":
          return (_c = (_b = dnd.draggingItems) === null || _b === void 0 ? void 0 : _b.map(function(item) {
            return environment.getItemTitle(item);
          }).join(", ")) !== null && _c !== void 0 ? _c : "None";
        case "dropTarget": {
          if (!dnd.draggingPosition) {
            return "None";
          }
          if (dnd.draggingPosition.targetType === "item" || dnd.draggingPosition.targetType === "root") {
            return "within ".concat(getItemTitle(dnd.draggingPosition.targetItem));
          }
          var parentItem = environment.items[dnd.draggingPosition.parentItem];
          var parentTitle = environment.getItemTitle(parentItem);
          if (dnd.draggingPosition.childIndex === 0) {
            return "within ".concat(parentTitle, " at the start");
          }
          return "within ".concat(parentTitle, " after ").concat(getItemTitle(parentItem.children[dnd.draggingPosition.childIndex - 1]));
        }
        default:
          if (variableName.startsWith("keybinding:")) {
            return keyboardBindings[variableName.slice(11)][0];
          }
          throw Error("Unknown live descriptor variable {".concat(variableName, "}"));
      }
    });
  };
  var LiveWrapper = function(_a2) {
    var children = _a2.children, live = _a2.live;
    return reactExports.createElement("div", {
      "aria-live": live,
      dangerouslySetInnerHTML: {
        __html: children
      }
    });
  };
  var LiveDescription = function() {
    var env = useTreeEnvironment();
    var tree = useTree();
    var dnd = useDragAndDrop();
    var keys = useKeyboardBindings();
    var descriptors = reactExports.useMemo(function() {
      var _a2;
      return (_a2 = env.liveDescriptors) !== null && _a2 !== void 0 ? _a2 : defaultLiveDescriptors;
    }, [
      env.liveDescriptors
    ]);
    var MainWrapper = tree.renderers.renderLiveDescriptorContainer;
    if (tree.treeInformation.isRenaming) {
      return reactExports.createElement(MainWrapper, {
        tree
      }, reactExports.createElement(LiveWrapper, {
        live: "polite"
      }, resolveLiveDescriptor(descriptors.renamingItem, env, dnd, tree, keys)));
    }
    if (tree.treeInformation.isSearching) {
      return reactExports.createElement(MainWrapper, {
        tree
      }, reactExports.createElement(LiveWrapper, {
        live: "polite"
      }, resolveLiveDescriptor(descriptors.searching, env, dnd, tree, keys)));
    }
    if (tree.treeInformation.isProgrammaticallyDragging) {
      return reactExports.createElement(MainWrapper, {
        tree
      }, reactExports.createElement(LiveWrapper, {
        live: "polite"
      }, resolveLiveDescriptor(descriptors.programmaticallyDragging, env, dnd, tree, keys)), reactExports.createElement(LiveWrapper, {
        live: "assertive"
      }, resolveLiveDescriptor(descriptors.programmaticallyDraggingTarget, env, dnd, tree, keys)));
    }
    return reactExports.createElement(MainWrapper, {
      tree
    }, reactExports.createElement(LiveWrapper, {
      live: "off"
    }, resolveLiveDescriptor(descriptors.introduction, env, dnd, tree, keys)));
  };
  var MaybeLiveDescription = function() {
    var _a2;
    var env = useTreeEnvironment();
    if (!((_a2 = env.showLiveDescription) !== null && _a2 !== void 0 ? _a2 : true)) {
      return null;
    }
    return reactExports.createElement(LiveDescription, null);
  };
  var __assign$4 = function() {
    __assign$4 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$4.apply(this, arguments);
  };
  var TreeManager = function() {
    var _a2 = useTree(), treeId = _a2.treeId, rootItem = _a2.rootItem, renderers = _a2.renderers, treeInformation = _a2.treeInformation;
    var environment = useTreeEnvironment();
    var containerRef = reactExports.useRef();
    var dnd = useDragAndDrop();
    useTreeKeyboardBindings();
    useFocusWithin(containerRef.current, function() {
      environment.setActiveTree(treeId);
    }, function() {
      environment.setActiveTree(function(oldTreeId) {
        return oldTreeId === treeId ? void 0 : oldTreeId;
      });
    });
    var rootChildren = environment.items[rootItem].children;
    var treeChildren = reactExports.createElement(reactExports.Fragment, null, reactExports.createElement(MaybeLiveDescription, null), reactExports.createElement(TreeItemChildren, {
      depth: 0,
      parentId: rootItem
    }, rootChildren !== null && rootChildren !== void 0 ? rootChildren : []), reactExports.createElement(DragBetweenLine, {
      treeId
    }), reactExports.createElement(SearchInput, {
      containerRef: containerRef.current
    }));
    var containerProps = __assign$4({
      onDragOver: function(e) {
        e.preventDefault();
        dnd.onDragOverTreeHandler(e, treeId, containerRef);
      },
      onDragLeave: function(e) {
        dnd.onDragLeaveContainerHandler(e, containerRef);
      },
      onMouseDown: function() {
        return dnd.abortProgrammaticDrag();
      },
      ref: containerRef,
      style: {
        position: "relative"
      },
      role: "tree",
      "aria-label": !treeInformation.treeLabelledBy ? treeInformation.treeLabel : void 0,
      "aria-labelledby": treeInformation.treeLabelledBy
    }, {
      "data-rct-tree": treeId
    });
    return renderers.renderTreeContainer({
      children: treeChildren,
      info: treeInformation,
      containerProps
    });
  };
  var useCreatedTreeInformation = function(tree, renamingItem, search) {
    var _a2;
    var environment = useTreeEnvironment();
    var dnd = useDragAndDrop();
    var selectedItems = (_a2 = environment.viewState[tree.treeId]) === null || _a2 === void 0 ? void 0 : _a2.selectedItems;
    return reactExports.useMemo(function() {
      var _a3, _b;
      return {
        isFocused: environment.activeTreeId === tree.treeId,
        isRenaming: !!renamingItem,
        areItemsSelected: ((_a3 = selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) !== null && _a3 !== void 0 ? _a3 : 0) > 0,
        isSearching: search !== null,
        search,
        isProgrammaticallyDragging: (_b = dnd.isProgrammaticallyDragging) !== null && _b !== void 0 ? _b : false,
        treeId: tree.treeId,
        rootItem: tree.rootItem,
        treeLabel: tree.treeLabel,
        treeLabelledBy: tree.treeLabelledBy
      };
    }, [
      environment.activeTreeId,
      tree.treeId,
      tree.rootItem,
      tree.treeLabel,
      tree.treeLabelledBy,
      renamingItem,
      selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length,
      search,
      dnd.isProgrammaticallyDragging
    ]);
  };
  var __assign$3 = function() {
    __assign$3 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$3.apply(this, arguments);
  };
  var useCreatedTreeRef = function(ref, actions) {
    var environment = useTreeEnvironment();
    var tree = useTree();
    var dnd = useDragAndDrop();
    reactExports.useImperativeHandle(ref, function() {
      return __assign$3(__assign$3(__assign$3({}, actions), {
        treeEnvironmentContext: environment,
        dragAndDropContext: dnd,
        treeContext: tree
      }), tree.treeInformation);
    });
  };
  var EnvironmentActionsContext = reactExports.createContext(null);
  var TreeActionsProvider = reactExports.forwardRef(function(props, ref) {
    useTreeEnvironment();
    var tree = useTree();
    useDragAndDrop();
    var envActions = useEnvironmentActions();
    var actions = reactExports.useMemo(function() {
      return {
        abortRenamingItem: function() {
          tree.setRenamingItem(null);
        },
        abortSearch: function() {
          tree.setSearch(null);
        },
        collapseItem: function(itemId) {
          envActions.collapseItem(itemId, tree.treeId);
        },
        completeRenamingItem: function() {
        },
        expandItem: function(itemId) {
          envActions.expandItem(itemId, tree.treeId);
        },
        focusItem: function(itemId, setDomFocus) {
          if (setDomFocus === void 0) {
            setDomFocus = true;
          }
          envActions.focusItem(itemId, tree.treeId, setDomFocus);
        },
        focusTree: function(autoFocus) {
          if (autoFocus === void 0) {
            autoFocus = true;
          }
          envActions.focusTree(tree.treeId, autoFocus);
        },
        invokePrimaryAction: function(itemId) {
          envActions.invokePrimaryAction(itemId, tree.treeId);
        },
        moveFocusDown: function() {
          envActions.moveFocusDown(tree.treeId);
        },
        moveFocusUp: function() {
          envActions.moveFocusUp(tree.treeId);
        },
        renameItem: function(itemId, name) {
          envActions.renameItem(itemId, name, tree.treeId);
        },
        selectItems: function(itemsIds) {
          envActions.selectItems(itemsIds, tree.treeId);
        },
        setSearch: function(search) {
          tree.setSearch(search);
        },
        startRenamingItem: function(itemId) {
          tree.setRenamingItem(itemId);
        },
        stopRenamingItem: function() {
          tree.setRenamingItem(null);
        },
        toggleItemExpandedState: function(itemId) {
          envActions.toggleItemExpandedState(itemId, tree.treeId);
        },
        toggleItemSelectStatus: function(itemId) {
          envActions.toggleItemSelectStatus(itemId, tree.treeId);
        },
        expandAll: function() {
          envActions.expandAll(tree.treeId);
        },
        collapseAll: function() {
          envActions.collapseAll(tree.treeId);
        },
        expandSubsequently: function(itemIds) {
          return envActions.expandSubsequently(tree.treeId, itemIds);
        }
      };
    }, [
      envActions,
      tree
    ]);
    useCreatedTreeRef(ref, actions);
    return reactExports.createElement(EnvironmentActionsContext.Provider, {
      value: actions
    }, props.children);
  });
  var __assign$2 = function() {
    __assign$2 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$2.apply(this, arguments);
  };
  var TreeContext = reactExports.createContext(null);
  var useTree = function() {
    return reactExports.useContext(TreeContext);
  };
  var Tree = reactExports.forwardRef(function(props, ref) {
    var _a2;
    var environment = useTreeEnvironment();
    var renderers = reactExports.useMemo(function() {
      return __assign$2(__assign$2({}, environment), props);
    }, [
      props,
      environment
    ]);
    var _b = reactExports.useState(null), search = _b[0], setSearch = _b[1];
    var _c = reactExports.useState(null), renamingItem = _c[0], setRenamingItem = _c[1];
    var rootItem = environment.items[props.rootItem];
    var viewState = environment.viewState[props.treeId];
    reactExports.useEffect(function() {
      environment.registerTree({
        treeId: props.treeId,
        rootItem: props.rootItem
      });
      return function() {
        return environment.unregisterTree(props.treeId);
      };
    }, [
      props.treeId,
      props.rootItem
    ]);
    var treeInformation = useCreatedTreeInformation(props, renamingItem, search);
    var treeContextProps = reactExports.useMemo(function() {
      return {
        treeId: props.treeId,
        rootItem: props.rootItem,
        treeLabel: props.treeLabel,
        treeLabelledBy: props.treeLabelledBy,
        getItemsLinearly: function() {
          return getItemsLinearly(props.rootItem, viewState !== null && viewState !== void 0 ? viewState : {}, environment.items);
        },
        treeInformation,
        search,
        setSearch,
        renamingItem,
        setRenamingItem,
        renderers
      };
    }, [
      environment.items,
      props.rootItem,
      props.treeId,
      props.treeLabel,
      props.treeLabelledBy,
      renamingItem,
      renderers,
      search,
      treeInformation,
      viewState
    ]);
    if (rootItem === void 0) {
      (_a2 = environment.onMissingItems) === null || _a2 === void 0 ? void 0 : _a2.call(environment, [
        props.rootItem
      ]);
      return null;
    }
    return reactExports.createElement(TreeContext.Provider, {
      value: treeContextProps
    }, reactExports.createElement(TreeActionsProvider, {
      ref
    }, reactExports.createElement(TreeManager, null)));
  });
  var TreeItemChildren = function(props) {
    var _a2 = useTree(), renderers = _a2.renderers, treeInformation = _a2.treeInformation;
    var childElements = [];
    for (var _i = 0, _b = props.children; _i < _b.length; _i++) {
      var child = _b[_i];
      childElements.push(React.createElement(TreeItemElement, {
        key: child,
        itemIndex: child,
        depth: props.depth
      }));
    }
    if (childElements.length === 0) {
      return null;
    }
    var containerProps = {
      role: props.depth !== 0 ? "group" : void 0
    };
    return renderers.renderItemsContainer({
      children: childElements,
      info: treeInformation,
      containerProps,
      depth: props.depth,
      parentId: props.parentId
    });
  };
  var __assign$1 = function() {
    __assign$1 = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign$1.apply(this, arguments);
  };
  var __spreadArray$1 = function(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var useTreeItemRenderContext = function(item) {
    var _a2, _b, _c, _d;
    var _e = useTree(), treeId = _e.treeId, search = _e.search, renamingItem = _e.renamingItem, setRenamingItem = _e.setRenamingItem;
    var environment = useTreeEnvironment();
    var interactionManager = useInteractionManager();
    var dnd = useDragAndDrop();
    var selectUpTo = useSelectUpTo("last-focus");
    var itemTitle = item && environment.getItemTitle(item);
    var getOriginalItemOrder = useGetOriginalItemOrder();
    var isSearchMatching = reactExports.useMemo(function() {
      var _a3;
      return search === null || search.length === 0 || !item || !itemTitle ? false : ((_a3 = environment.doesSearchMatchItem) !== null && _a3 !== void 0 ? _a3 : defaultMatcher)(search, item, itemTitle);
    }, [
      search,
      item,
      itemTitle,
      environment.doesSearchMatchItem
    ]);
    var isSelected = item && ((_b = (_a2 = environment.viewState[treeId]) === null || _a2 === void 0 ? void 0 : _a2.selectedItems) === null || _b === void 0 ? void 0 : _b.includes(item.index));
    var isExpanded = item && ((_d = (_c = environment.viewState[treeId]) === null || _c === void 0 ? void 0 : _c.expandedItems) === null || _d === void 0 ? void 0 : _d.includes(item.index));
    var isRenaming = item && renamingItem === item.index;
    return reactExports.useMemo(function() {
      var _a3, _b2, _c2, _d2, _e2, _f, _g, _h, _j;
      if (!item) {
        return void 0;
      }
      var viewState = environment.viewState[treeId];
      var currentlySelectedItems = ((_b2 = (_a3 = viewState === null || viewState === void 0 ? void 0 : viewState.selectedItems) === null || _a3 === void 0 ? void 0 : _a3.map(function(item2) {
        return environment.items[item2];
      })) !== null && _b2 !== void 0 ? _b2 : (viewState === null || viewState === void 0 ? void 0 : viewState.focusedItem) ? [
        environment.items[viewState === null || viewState === void 0 ? void 0 : viewState.focusedItem]
      ] : []).filter(function(item2) {
        return !!item2;
      });
      var isItemPartOfSelectedItems = !!currentlySelectedItems.find(function(selectedItem) {
        return selectedItem.index === item.index;
      });
      var canDragCurrentlySelectedItems = currentlySelectedItems && ((_d2 = (_c2 = environment.canDrag) === null || _c2 === void 0 ? void 0 : _c2.call(environment, currentlySelectedItems)) !== null && _d2 !== void 0 ? _d2 : true) && currentlySelectedItems.map(function(item2) {
        var _a4;
        return (_a4 = item2.canMove) !== null && _a4 !== void 0 ? _a4 : true;
      }).reduce(function(a, b) {
        return a && b;
      }, true);
      var canDragThisItem = ((_f = (_e2 = environment.canDrag) === null || _e2 === void 0 ? void 0 : _e2.call(environment, [
        item
      ])) !== null && _f !== void 0 ? _f : true) && ((_g = item.canMove) !== null && _g !== void 0 ? _g : true);
      var canDrag = environment.canDragAndDrop && (isItemPartOfSelectedItems && canDragCurrentlySelectedItems || !isItemPartOfSelectedItems && canDragThisItem);
      var canDropOn = environment.canDragAndDrop && !!((_j = (_h = dnd.viableDragPositions) === null || _h === void 0 ? void 0 : _h[treeId]) === null || _j === void 0 ? void 0 : _j.find(function(position) {
        return position.targetType === "item" && position.targetItem === item.index;
      }));
      var actions = {
        primaryAction: function() {
          var _a4;
          (_a4 = environment.onPrimaryAction) === null || _a4 === void 0 ? void 0 : _a4.call(environment, environment.items[item.index], treeId);
        },
        collapseItem: function() {
          var _a4;
          (_a4 = environment.onCollapseItem) === null || _a4 === void 0 ? void 0 : _a4.call(environment, item, treeId);
        },
        expandItem: function() {
          var _a4;
          (_a4 = environment.onExpandItem) === null || _a4 === void 0 ? void 0 : _a4.call(environment, item, treeId);
        },
        toggleExpandedState: function() {
          var _a4, _b3;
          if (isExpanded) {
            (_a4 = environment.onCollapseItem) === null || _a4 === void 0 ? void 0 : _a4.call(environment, item, treeId);
          } else {
            (_b3 = environment.onExpandItem) === null || _b3 === void 0 ? void 0 : _b3.call(environment, item, treeId);
          }
        },
        selectItem: function() {
          var _a4;
          (_a4 = environment.onSelectItems) === null || _a4 === void 0 ? void 0 : _a4.call(environment, [
            item.index
          ], treeId);
        },
        addToSelectedItems: function() {
          var _a4, _b3;
          (_a4 = environment.onSelectItems) === null || _a4 === void 0 ? void 0 : _a4.call(environment, __spreadArray$1(__spreadArray$1([], (_b3 = viewState === null || viewState === void 0 ? void 0 : viewState.selectedItems) !== null && _b3 !== void 0 ? _b3 : [], true), [
            item.index
          ], false), treeId);
        },
        unselectItem: function() {
          var _a4, _b3, _c3;
          (_a4 = environment.onSelectItems) === null || _a4 === void 0 ? void 0 : _a4.call(environment, (_c3 = (_b3 = viewState === null || viewState === void 0 ? void 0 : viewState.selectedItems) === null || _b3 === void 0 ? void 0 : _b3.filter(function(id) {
            return id !== item.index;
          })) !== null && _c3 !== void 0 ? _c3 : [], treeId);
        },
        selectUpTo: function(overrideOldSelection) {
          selectUpTo(item, overrideOldSelection);
        },
        startRenamingItem: function() {
          setRenamingItem(item.index);
        },
        stopRenamingItem: function() {
          setRenamingItem(null);
        },
        focusItem: function(setDomFocus) {
          var _a4;
          if (setDomFocus === void 0) {
            setDomFocus = true;
          }
          (_a4 = environment.onFocusItem) === null || _a4 === void 0 ? void 0 : _a4.call(environment, item, treeId, setDomFocus);
        },
        startDragging: function() {
          var _a4, _b3;
          var selectedItems = (_a4 = viewState === null || viewState === void 0 ? void 0 : viewState.selectedItems) !== null && _a4 !== void 0 ? _a4 : [];
          if (!selectedItems.includes(item.index)) {
            selectedItems = [
              item.index
            ];
            (_b3 = environment.onSelectItems) === null || _b3 === void 0 ? void 0 : _b3.call(environment, selectedItems, treeId);
          }
          if (canDrag) {
            var orderedItems = getOriginalItemOrder(treeId, selectedItems.map(function(id) {
              return environment.items[id];
            }));
            dnd.onStartDraggingItems(orderedItems, treeId);
          }
        }
      };
      var renderFlags = {
        isSelected,
        isExpanded,
        isFocused: (viewState === null || viewState === void 0 ? void 0 : viewState.focusedItem) === item.index,
        isRenaming,
        isDraggingOver: dnd.draggingPosition && dnd.draggingPosition.targetType === "item" && dnd.draggingPosition.targetItem === item.index && dnd.draggingPosition.treeId === treeId,
        isDraggingOverParent: false,
        isSearchMatching,
        canDrag,
        canDropOn
      };
      var interactiveElementProps = __assign$1(__assign$1({}, interactionManager.createInteractiveElementProps(item, treeId, actions, renderFlags, viewState)), {
        "data-rct-item-interactive": true,
        "data-rct-item-focus": renderFlags.isFocused ? "true" : "false",
        "data-rct-item-id": item.index
      });
      var itemContainerWithoutChildrenProps = __assign$1({}, {
        "data-rct-item-container": "true"
      });
      var itemContainerWithChildrenProps = {
        role: "treeitem",
        "aria-selected": renderFlags.isSelected,
        "aria-expanded": item.isFolder ? renderFlags.isExpanded ? "true" : "false" : void 0
      };
      var arrowProps = {
        onClick: function() {
          if (item.isFolder) {
            actions.toggleExpandedState();
          }
          actions.selectItem();
        },
        onFocus: function() {
          actions.focusItem();
        },
        onDragOver: function(e) {
          e.preventDefault();
        },
        "aria-hidden": true,
        tabIndex: -1
      };
      var viewStateFlags = !viewState ? {} : Object.entries(viewState).reduce(function(acc, _a4) {
        var key = _a4[0], value = _a4[1];
        acc[key] = Array.isArray(value) ? value.includes(item.index) : value === item.index;
        return acc;
      }, {});
      return __assign$1(__assign$1(__assign$1({}, actions), renderFlags), {
        interactiveElementProps,
        itemContainerWithChildrenProps,
        itemContainerWithoutChildrenProps,
        arrowProps,
        viewStateFlags
      });
    }, [
      item,
      environment,
      treeId,
      dnd,
      isSelected,
      isExpanded,
      isRenaming,
      isSearchMatching,
      interactionManager,
      selectUpTo,
      setRenamingItem,
      getOriginalItemOrder
    ]);
  };
  var TreeItemRenamingInput = function(props) {
    var _a2 = useTree(), renderers = _a2.renderers, treeInformation = _a2.treeInformation, setRenamingItem = _a2.setRenamingItem, treeId = _a2.treeId;
    var environment = useTreeEnvironment();
    var inputRef = reactExports.useRef(null);
    var submitButtonRef = reactExports.useRef(null);
    var item = environment.items[props.itemIndex];
    var _b = reactExports.useState(environment.getItemTitle(item)), title = _b[0], setTitle = _b[1];
    var callSoon = useCallSoon(true);
    var abort = function() {
      var _a3;
      (_a3 = environment.onAbortRenamingItem) === null || _a3 === void 0 ? void 0 : _a3.call(environment, item, treeInformation.treeId);
      setRenamingItem(null);
      callSoon(function() {
        environment.setActiveTree(treeId);
      });
    };
    var confirm2 = function() {
      var _a3;
      (_a3 = environment.onRenameItem) === null || _a3 === void 0 ? void 0 : _a3.call(environment, item, title, treeInformation.treeId);
      setRenamingItem(null);
      callSoon(function() {
        environment.setActiveTree(treeId);
      });
    };
    useSideEffect(function() {
      var _a3, _b2, _c, _d;
      environment.setActiveTree(treeId);
      if ((_a3 = environment.autoFocus) !== null && _a3 !== void 0 ? _a3 : true) {
        (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.select();
        (_d = (_c = inputRef.current) === null || _c === void 0 ? void 0 : _c.focus) === null || _d === void 0 ? void 0 : _d.call(_c);
      }
    }, [
      environment,
      treeId
    ], []);
    useHotkey("abortRenameItem", function() {
      abort();
    }, true, true);
    var inputProps = {
      value: title,
      onChange: function(e) {
        setTitle(e.target.value);
      },
      onBlur: function(e) {
        if (!e.relatedTarget || e.relatedTarget !== submitButtonRef.current) {
          abort();
        }
      },
      "aria-label": "New item name",
      tabIndex: 0
    };
    var submitButtonProps = {
      onClick: function(e) {
        e.stopPropagation();
        confirm2();
      }
    };
    var formProps = {
      onSubmit: function(e) {
        e.preventDefault();
        confirm2();
      }
    };
    return renderers.renderRenameInput({
      item,
      inputRef,
      submitButtonProps,
      submitButtonRef,
      formProps,
      inputProps
    });
  };
  var TreeItemElement = function(props) {
    var _a2, _b, _c, _d;
    var _e = reactExports.useState(false), hasBeenRequested = _e[0], setHasBeenRequested = _e[1];
    var _f = useTree(), renderers = _f.renderers, treeInformation = _f.treeInformation, renamingItem = _f.renamingItem;
    var environment = useTreeEnvironment();
    var viewState = useViewState();
    var item = environment.items[props.itemIndex];
    var isExpanded = reactExports.useMemo(function() {
      var _a3;
      return (_a3 = viewState.expandedItems) === null || _a3 === void 0 ? void 0 : _a3.includes(props.itemIndex);
    }, [
      props.itemIndex,
      viewState.expandedItems
    ]);
    var renderContext = useTreeItemRenderContext(item);
    if (item === void 0 || renderContext === void 0) {
      if (!hasBeenRequested) {
        setHasBeenRequested(true);
        (_a2 = environment.onMissingItems) === null || _a2 === void 0 ? void 0 : _a2.call(environment, [
          props.itemIndex
        ]);
      }
      return null;
    }
    var shouldRenderChildren = (_c = (_b = environment.shouldRenderChildren) === null || _b === void 0 ? void 0 : _b.call(environment, item, renderContext)) !== null && _c !== void 0 ? _c : item.isFolder && isExpanded;
    var children = item.children && shouldRenderChildren && React.createElement(TreeItemChildren, {
      depth: props.depth + 1,
      parentId: props.itemIndex
    }, item.children);
    var title = environment.getItemTitle(item);
    var titleComponent = renamingItem === props.itemIndex ? React.createElement(TreeItemRenamingInput, {
      itemIndex: props.itemIndex
    }) : renderers.renderItemTitle({
      info: treeInformation,
      context: renderContext,
      title,
      item
    });
    var arrowComponent = renderers.renderItemArrow({
      info: treeInformation,
      context: renderContext,
      item: environment.items[props.itemIndex]
    });
    return (_d = renderers.renderItem({
      item: environment.items[props.itemIndex],
      depth: props.depth,
      title: titleComponent,
      arrow: arrowComponent,
      context: renderContext,
      info: treeInformation,
      children
    })) !== null && _d !== void 0 ? _d : null;
  };
  var __awaiter$1 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __generator$1 = function(thisArg, body) {
    var _2 = {
      label: 0,
      sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v2) {
        return step([
          n,
          v2
        ]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_2 = 0)), _2) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [
          op[0] & 2,
          t.value
        ];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _2.label++;
            y = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2]) _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [
          6,
          e
        ];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  var CompleteTreeDataProvider = function() {
    function CompleteTreeDataProvider2(provider) {
      this.provider = provider;
    }
    CompleteTreeDataProvider2.prototype.getTreeItem = function(itemId) {
      return __awaiter$1(this, void 0, void 0, function() {
        return __generator$1(this, function(_a2) {
          return [
            2,
            this.provider.getTreeItem(itemId)
          ];
        });
      });
    };
    CompleteTreeDataProvider2.prototype.getTreeItems = function(itemIds) {
      return __awaiter$1(this, void 0, void 0, function() {
        var _this = this;
        return __generator$1(this, function(_a2) {
          return [
            2,
            this.provider.getTreeItems ? this.provider.getTreeItems(itemIds) : Promise.all(itemIds.map(function(id) {
              return _this.provider.getTreeItem(id);
            }))
          ];
        });
      });
    };
    CompleteTreeDataProvider2.prototype.onChangeItemChildren = function(itemId, newChildren) {
      var _a2, _b;
      return __awaiter$1(this, void 0, void 0, function() {
        return __generator$1(this, function(_c) {
          return [
            2,
            (_b = (_a2 = this.provider).onChangeItemChildren) === null || _b === void 0 ? void 0 : _b.call(_a2, itemId, newChildren)
          ];
        });
      });
    };
    CompleteTreeDataProvider2.prototype.onDidChangeTreeData = function(listener) {
      return this.provider.onDidChangeTreeData ? this.provider.onDidChangeTreeData(listener) : {
        dispose: function() {
        }
      };
    };
    CompleteTreeDataProvider2.prototype.onRenameItem = function(item, name) {
      var _a2, _b;
      return __awaiter$1(this, void 0, void 0, function() {
        return __generator$1(this, function(_c) {
          return [
            2,
            (_b = (_a2 = this.provider).onRenameItem) === null || _b === void 0 ? void 0 : _b.call(_a2, item, name)
          ];
        });
      });
    };
    return CompleteTreeDataProvider2;
  }();
  var useIsMounted = function() {
    var mountedRef = reactExports.useRef(false);
    reactExports.useEffect(function() {
      mountedRef.current = true;
      return function() {
        mountedRef.current = false;
      };
    }, []);
    return mountedRef;
  };
  var __assign = function() {
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  var __awaiter = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __generator = function(thisArg, body) {
    var _2 = {
      label: 0,
      sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t, g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v2) {
        return step([
          n,
          v2
        ]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_2 = 0)), _2) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [
          op[0] & 2,
          t.value
        ];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _2.label++;
            y = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2]) _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [
          6,
          e
        ];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  };
  var __spreadArray = function(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l2 = from.length, ar; i < l2; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var UncontrolledTreeEnvironment = reactExports.forwardRef(function(props, ref) {
    var _a2 = reactExports.useState({}), currentItems = _a2[0], setCurrentItems = _a2[1];
    var _b = reactExports.useState(props.viewState), viewState = _b[0], setViewState = _b[1];
    var viewStateRef = useRefCopy(viewState);
    var missingItemIds = reactExports.useRef([]);
    var dataProvider = reactExports.useMemo(function() {
      return new CompleteTreeDataProvider(props.dataProvider);
    }, [
      props.dataProvider
    ]);
    var isMounted = useIsMounted();
    var writeItems = reactExports.useCallback(function(newItems) {
      if (!isMounted.current) return;
      setCurrentItems(function(oldItems) {
        return __assign(__assign({}, oldItems), newItems);
      });
    }, [
      isMounted
    ]);
    var amendViewState = reactExports.useCallback(function(treeId, constructNewState) {
      setViewState(function(oldState) {
        var _a3;
        var _b2;
        return __assign(__assign({}, oldState), (_a3 = {}, _a3[treeId] = __assign(__assign({}, oldState[treeId]), constructNewState((_b2 = oldState[treeId]) !== null && _b2 !== void 0 ? _b2 : {})), _a3));
      });
    }, []);
    reactExports.useEffect(function() {
      var dispose = dataProvider.onDidChangeTreeData(function(changedItemIds) {
        dataProvider.getTreeItems(changedItemIds).then(function(items) {
          writeItems(items.map(function(item) {
            var _a3;
            return _a3 = {}, _a3[item.index] = item, _a3;
          }).reduce(function(a, b) {
            return __assign(__assign({}, a), b);
          }, {}));
        });
      }).dispose;
      return dispose;
    }, [
      dataProvider,
      writeItems
    ]);
    return reactExports.createElement(ControlledTreeEnvironment, __assign({}, props, {
      ref,
      viewState,
      items: currentItems,
      onExpandItem: function(item, treeId) {
        var _a3;
        amendViewState(treeId, function(old) {
          var _a4;
          return __assign(__assign({}, old), {
            expandedItems: __spreadArray(__spreadArray([], (_a4 = old.expandedItems) !== null && _a4 !== void 0 ? _a4 : [], true), [
              item.index
            ], false)
          });
        });
        (_a3 = props.onExpandItem) === null || _a3 === void 0 ? void 0 : _a3.call(props, item, treeId);
      },
      onCollapseItem: function(item, treeId) {
        var _a3;
        amendViewState(treeId, function(old) {
          var _a4;
          return __assign(__assign({}, old), {
            expandedItems: (_a4 = old.expandedItems) === null || _a4 === void 0 ? void 0 : _a4.filter(function(id) {
              return id !== item.index;
            })
          });
        });
        (_a3 = props.onCollapseItem) === null || _a3 === void 0 ? void 0 : _a3.call(props, item, treeId);
      },
      onSelectItems: function(items, treeId) {
        var _a3, _b2, _c;
        var oldFocusedItem = (_a3 = viewStateRef.current[treeId]) === null || _a3 === void 0 ? void 0 : _a3.focusedItem;
        if (props.disableMultiselect) {
          var newSelected_1 = oldFocusedItem ? [
            oldFocusedItem
          ] : [];
          (_b2 = props.onSelectItems) === null || _b2 === void 0 ? void 0 : _b2.call(props, newSelected_1, treeId);
          amendViewState(treeId, function(old) {
            return __assign(__assign({}, old), {
              selectedItems: newSelected_1
            });
          });
        } else {
          (_c = props.onSelectItems) === null || _c === void 0 ? void 0 : _c.call(props, items, treeId);
          amendViewState(treeId, function(old) {
            return __assign(__assign({}, old), {
              selectedItems: items
            });
          });
        }
      },
      onFocusItem: function(item, treeId) {
        var _a3;
        amendViewState(treeId, function(old) {
          return __assign(__assign({}, old), {
            focusedItem: item.index
          });
        });
        (_a3 = props.onFocusItem) === null || _a3 === void 0 ? void 0 : _a3.call(props, item, treeId);
      },
      onRenameItem: function(item, name, treeId) {
        return __awaiter(void 0, void 0, void 0, function() {
          var newItem;
          var _a3;
          var _b2;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                return [
                  4,
                  dataProvider.onRenameItem(item, name)
                ];
              case 1:
                _c.sent();
                amendViewState(treeId, function(old) {
                  return __assign(__assign({}, old), {
                    renamingItem: void 0
                  });
                });
                return [
                  4,
                  dataProvider.getTreeItem(item.index)
                ];
              case 2:
                newItem = _c.sent();
                writeItems((_a3 = {}, _a3[item.index] = newItem, _a3));
                (_b2 = props.onRenameItem) === null || _b2 === void 0 ? void 0 : _b2.call(props, item, name, treeId);
                return [
                  2
                ];
            }
          });
        });
      },
      onDrop: function(items, target) {
        return __awaiter(void 0, void 0, void 0, function() {
          var promises, itemsIndices, itemsPriorToInsertion, _loop_1, _i, items_1, item, state_1, newParent, newParentChildren;
          var _a3, _b2, _c, _d, _e;
          return __generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                promises = [];
                itemsIndices = items.map(function(i) {
                  return i.index;
                });
                itemsPriorToInsertion = 0;
                _loop_1 = function(item2) {
                  var parent_1 = Object.values(currentItems).find(function(potentialParent) {
                    var _a4, _b3;
                    return (_b3 = (_a4 = potentialParent === null || potentialParent === void 0 ? void 0 : potentialParent.children) === null || _a4 === void 0 ? void 0 : _a4.includes) === null || _b3 === void 0 ? void 0 : _b3.call(_a4, item2.index);
                  });
                  if (!parent_1) {
                    throw Error('Could not find parent of item "'.concat(item2.index, '"'));
                  }
                  if (!parent_1.children) {
                    throw Error('Parent "'.concat(parent_1.index, '" of item "').concat(item2.index, '" did not have any children'));
                  }
                  if (target.targetType === "between-items" && target.parentItem === item2.index) {
                    return {
                      value: void 0
                    };
                  }
                  if ((target.targetType === "item" || target.targetType === "root") && target.targetItem !== parent_1.index) {
                    promises.push(dataProvider.onChangeItemChildren(parent_1.index, parent_1.children.filter(function(child) {
                      return child !== item2.index;
                    })));
                  }
                  if (target.targetType === "between-items") {
                    if (target.parentItem === parent_1.index) {
                      var newParent2 = currentItems[target.parentItem];
                      var isOldItemPriorToNewItem = ((_b2 = ((_a3 = newParent2.children) !== null && _a3 !== void 0 ? _a3 : []).findIndex(function(child) {
                        return child === item2.index;
                      })) !== null && _b2 !== void 0 ? _b2 : Infinity) < target.childIndex;
                      itemsPriorToInsertion += isOldItemPriorToNewItem ? 1 : 0;
                    } else {
                      promises.push(dataProvider.onChangeItemChildren(parent_1.index, parent_1.children.filter(function(child) {
                        return child !== item2.index;
                      })));
                    }
                  }
                };
                for (_i = 0, items_1 = items; _i < items_1.length; _i++) {
                  item = items_1[_i];
                  state_1 = _loop_1(item);
                  if (typeof state_1 === "object") return [
                    2,
                    state_1.value
                  ];
                }
                if (target.targetType === "item" || target.targetType === "root") {
                  promises.push(dataProvider.onChangeItemChildren(target.targetItem, __spreadArray(__spreadArray([], ((_c = currentItems[target.targetItem].children) !== null && _c !== void 0 ? _c : []).filter(function(i) {
                    return !itemsIndices.includes(i);
                  }), true), itemsIndices, true)));
                } else {
                  newParent = currentItems[target.parentItem];
                  newParentChildren = __spreadArray([], (_d = newParent.children) !== null && _d !== void 0 ? _d : [], true).filter(function(c) {
                    return !itemsIndices.includes(c);
                  });
                  newParentChildren.splice.apply(newParentChildren, __spreadArray([
                    target.childIndex - itemsPriorToInsertion,
                    0
                  ], itemsIndices, false));
                  promises.push(dataProvider.onChangeItemChildren(target.parentItem, newParentChildren));
                }
                return [
                  4,
                  Promise.all(promises)
                ];
              case 1:
                _f.sent();
                (_e = props.onDrop) === null || _e === void 0 ? void 0 : _e.call(props, items, target);
                return [
                  2
                ];
            }
          });
        });
      },
      onMissingItems: function(itemIds) {
        var _a3;
        var _b2;
        if (missingItemIds.current.length === 0) {
          setTimeout(function() {
            dataProvider.getTreeItems(missingItemIds.current).then(function(items) {
              writeItems(items.map(function(item) {
                var _a4;
                return _a4 = {}, _a4[item === null || item === void 0 ? void 0 : item.index] = item, _a4;
              }).reduce(function(a, b) {
                return __assign(__assign({}, a), b);
              }, {}));
            });
            missingItemIds.current = [];
          });
        }
        (_a3 = missingItemIds.current).push.apply(_a3, itemIds);
        (_b2 = props.onMissingItems) === null || _b2 === void 0 ? void 0 : _b2.call(props, itemIds);
      }
    }), props.children);
  });
  class EventEmitter {
    constructor(options) {
      this.handlerCount = 0;
      this.handlers = [];
      this.options = options;
    }
    get numberOfHandlers() {
      return this.handlers.filter((h2) => !!h2).length;
    }
    async emit(payload) {
      var _a2, _b;
      const promises = [];
      (_b = (_a2 = this.options) == null ? void 0 : _a2.logger) == null ? void 0 : _b.call(_a2, "emit", payload);
      for (const handler of this.handlers) {
        if (handler) {
          const res = handler(payload);
          if (typeof (res == null ? void 0 : res.then) === "function") {
            promises.push(res);
          }
        }
      }
      await Promise.all(promises);
    }
    on(handler) {
      var _a2, _b;
      (_b = (_a2 = this.options) == null ? void 0 : _a2.logger) == null ? void 0 : _b.call(_a2, "on");
      this.handlers.push(handler);
      return this.handlerCount++;
    }
    off(handlerId) {
      this.delete(handlerId);
    }
    delete(handlerId) {
      var _a2, _b;
      (_b = (_a2 = this.options) == null ? void 0 : _a2.logger) == null ? void 0 : _b.call(_a2, "off");
      this.handlers[handlerId] = null;
    }
  }
  const configRaw = (_a = globalThis.localStorage) == null ? void 0 : _a.vslite_config;
  const config = configRaw ? JSON.parse(configRaw) : {};
  async function getDirAsTree(fs, path, parent, root2, db) {
    var _a2, _b;
    const entries = await fs.readdir(path, {
      withFileTypes: true
    });
    const directory = !config.showHidden ? entries.filter((item) => !item.name.startsWith(".") && item.name !== "node_modules") : entries;
    if (parent === "root") db.root = root2;
    for (const item of directory) {
      const isDir = item.isDirectory();
      const itemPath = `${path}/${item.name}`;
      db[itemPath] = {
        index: itemPath,
        data: item.name,
        isFolder: isDir,
        canMove: true,
        canRename: true,
        children: []
      };
      if (parent) (_b = (_a2 = db == null ? void 0 : db[parent]) == null ? void 0 : _a2.children) == null ? void 0 : _b.push(itemPath);
      if (isDir) await getDirAsTree(fs, itemPath, itemPath, root2, db);
    }
    return db;
  }
  async function openFolder(_fs, _api) {
    const dir = await globalThis.showDirectoryPicker();
    for await (const entry of dir.values()) {
      logDebug(entry);
    }
  }
  const startFiles = {};
  const jshRC = `
export PNPM_HOME="/home/.pnpm"
export PATH="/bin:/usr/bin:/usr/local/bin:/home/.pnpm"
alias git='npx -y --package=g4c@stable -- g4c'
alias ni='npx -y --package=@antfu/ni -- ni'
`;
  function debounce(cb, wait = 150) {
    let h2;
    const callable = (...args) => {
      clearTimeout(h2);
      h2 = setTimeout(() => cb(...args), wait);
    };
    return callable;
  }
  const fonts = [
    {
      id: "fi",
      src: [
        {
          path: "./file-icons.woff2",
          format: "woff2"
        }
      ],
      weight: "normal",
      style: "normal",
      size: "100%"
    },
    {
      id: "devicons",
      src: [
        {
          path: "./devopicons.woff2",
          format: "woff2"
        }
      ],
      weight: "normal",
      style: "normal",
      size: "100%"
    },
    {
      id: "fa",
      src: [
        {
          path: "./fontawesome.woff2",
          format: "woff2"
        }
      ],
      weight: "normal",
      style: "normal",
      size: "100%"
    },
    {
      id: "mf",
      src: [
        {
          path: "./mfixx.woff2",
          format: "woff2"
        }
      ],
      weight: "normal",
      style: "normal",
      size: "100%"
    },
    {
      id: "octicons",
      src: [
        {
          path: "./octicons.woff2",
          format: "woff2"
        }
      ],
      weight: "normal",
      style: "normal",
      size: "100%"
    }
  ];
  const file = "_file";
  const folder = "_folder";
  const rootFolder = "_repo";
  const iconDefinitions = {
    _file: {
      fontId: "octicons",
      fontCharacter: "\\f011",
      fontSize: "114%"
    },
    _folder: {
      fontId: "octicons",
      fontCharacter: "\\f016",
      fontSize: "114%"
    },
    _repo: {
      fontId: "octicons",
      fontCharacter: "\\f001",
      fontSize: "114%"
    },
    "_1c-alt_dark-red": {
      fontCharacter: "\\ea28",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_1c-alt_medium-red": {
      fontCharacter: "\\ea28",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_1c_dark-orange": {
      fontCharacter: "\\a5ea",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_1c_dark-red": {
      fontCharacter: "\\a5ea",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_1c_medium-red": {
      fontCharacter: "\\a5ea",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_4d_dark-blue": {
      fontCharacter: "\\eb73",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_abap_medium-orange": {
      fontCharacter: "\\e92b",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_abif_medium-blue": {
      fontCharacter: "\\ea4e",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_abif_medium-green": {
      fontCharacter: "\\ea4e",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_abif_medium-red": {
      fontCharacter: "\\ea4e",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_access_dark-maroon": {
      fontCharacter: "\\e9ea",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_access_dark-purple": {
      fontCharacter: "\\e9ea",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_access_dark-red": {
      fontCharacter: "\\e9ea",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_access_light-maroon": {
      fontCharacter: "\\e9ea",
      fontColor: "#be7953",
      fontId: "fi",
      fontSize: "107%"
    },
    "_access_medium-green": {
      fontCharacter: "\\e9ea",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_access_medium-maroon": {
      fontCharacter: "\\e9ea",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_access_medium-red": {
      fontCharacter: "\\e9ea",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_acre_dark-blue": {
      fontCharacter: "\\237a",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_acre_medium-blue": {
      fontCharacter: "\\237a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ada_medium-blue": {
      fontCharacter: "\\e90b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_ae_dark-pink": {
      fontCharacter: "\\e9f3",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ae_dark-purple": {
      fontCharacter: "\\e9f3",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_affectscript_medium-pink": {
      fontCharacter: "\\eb2c",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "114%"
    },
    "_affinity_medium-blue": {
      fontCharacter: "\\eabb",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_affinity_medium-pink": {
      fontCharacter: "\\eabb",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "107%"
    },
    "_affinity_medium-red": {
      fontCharacter: "\\eabb",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_agda_dark-cyan": {
      fontCharacter: "\\1315a",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_agda_medium-cyan": {
      fontCharacter: "\\1315a",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ahk_dark-blue": {
      fontCharacter: "\\e932",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ahk_dark-purple": {
      fontCharacter: "\\e932",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ai_dark-orange": {
      fontCharacter: "\\e6b4",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ai_medium-orange": {
      fontCharacter: "\\e6b4",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ai_medium-yellow": {
      fontCharacter: "\\e6b4",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_alacritty_medium-orange": {
      fontCharacter: "\\eb27",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_alex_dark-pink": {
      fontCharacter: "\\29cb",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "114%"
    },
    "_alex_dark-red": {
      fontCharacter: "\\29cb",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_alex_medium-pink": {
      fontCharacter: "\\29cb",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "114%"
    },
    "_alex_medium-red": {
      fontCharacter: "\\29cb",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_alloy_medium-red": {
      fontCharacter: "\\e935",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_alpine_dark-blue": {
      fontCharacter: "\\e9ff",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ampl_dark-maroon": {
      fontCharacter: "\\e94e",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "114%"
    },
    "_amusewiki_dark-red": {
      fontCharacter: "\\eb32",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_amx_dark-blue": {
      fontCharacter: "\\e99b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_amx_medium-blue": {
      fontCharacter: "\\e99b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_analytica_medium-orange": {
      fontCharacter: "\\eb7d",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_anchor_dark-blue": {
      fontCharacter: "\\f13d",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "114%"
    },
    "_android_dark-cyan": {
      fontCharacter: "\\f17b",
      fontColor: "#4d9085",
      fontId: "fa",
      fontSize: "114%"
    },
    "_android_dark-maroon": {
      fontCharacter: "\\f17b",
      fontColor: "#7c4426",
      fontId: "fa",
      fontSize: "114%"
    },
    "_android_medium-green": {
      fontCharacter: "\\f17b",
      fontColor: "#90a959",
      fontId: "fa",
      fontSize: "114%"
    },
    "_angelscript_dark-blue": {
      fontCharacter: "\\ea5b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "129%"
    },
    "_angelscript_medium-blue": {
      fontCharacter: "\\ea5b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "129%"
    },
    "_angular_medium-red": {
      fontCharacter: "\\e653",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_animate_dark-orange": {
      fontCharacter: "\\eb41",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_animate_medium-red": {
      fontCharacter: "\\eb41",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_animestudio_medium-blue": {
      fontCharacter: "\\eaed",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_animestudio_medium-maroon": {
      fontCharacter: "\\eaed",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_animestudio_medium-orange": {
      fontCharacter: "\\eaed",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_animestudio_medium-purple": {
      fontCharacter: "\\eaed",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_animestudio_medium-yellow": {
      fontCharacter: "\\eaed",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ansible_dark-cyan": {
      fontCharacter: "\\24b6",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ant_dark-pink": {
      fontCharacter: "\\e93e",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "129%"
    },
    "_antlr_medium-orange": {
      fontCharacter: "\\e92c",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_antlr_medium-red": {
      fontCharacter: "\\e92c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_antwar_dark-purple": {
      fontCharacter: "\\2591",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_anyscript_dark-red": {
      fontCharacter: "\\eacf",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_apache_dark-green": {
      fontCharacter: "\\f102",
      fontColor: "#66783e",
      fontId: "mf",
      fontSize: "107%"
    },
    "_apache_dark-red": {
      fontCharacter: "\\f102",
      fontColor: "#be2f31",
      fontId: "mf",
      fontSize: "107%"
    },
    "_apache_medium-green": {
      fontCharacter: "\\f102",
      fontColor: "#90a959",
      fontId: "mf",
      fontSize: "107%"
    },
    "_apache_medium-red": {
      fontCharacter: "\\f102",
      fontColor: "#ac4142",
      fontId: "mf",
      fontSize: "107%"
    },
    "_apiextractor_light-blue": {
      fontCharacter: "\\eb99",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "114%"
    },
    "_apiextractor_medium-blue": {
      fontCharacter: "\\eb99",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_api_medium-blue": {
      fontCharacter: "\\e92d",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_apl_dark-cyan": {
      fontCharacter: "\\234b",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_apl_medium-maroon": {
      fontCharacter: "\\234b",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_a-plus_medium-blue": {
      fontCharacter: "\\eb79",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_apollo_dark-blue": {
      fontCharacter: "\\1f110",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_appcelerator_medium-red": {
      fontCharacter: "\\e6ab",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_apple_medium-purple": {
      fontCharacter: "\\e925",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_appstore_dark-blue": {
      fontCharacter: "\\e613",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_dark-cyan": {
      fontCharacter: "\\e613",
      fontColor: "#4d9085",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_dark-purple": {
      fontCharacter: "\\e613",
      fontColor: "#825078",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_dark-red": {
      fontCharacter: "\\e613",
      fontColor: "#be2f31",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_medium-blue": {
      fontCharacter: "\\e613",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_medium-cyan": {
      fontCharacter: "\\e613",
      fontColor: "#75b5aa",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_medium-green": {
      fontCharacter: "\\e613",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_medium-orange": {
      fontCharacter: "\\e613",
      fontColor: "#d28445",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_medium-purple": {
      fontCharacter: "\\e613",
      fontColor: "#aa759f",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appstore_medium-red": {
      fontCharacter: "\\e613",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_appveyor_medium-blue": {
      fontCharacter: "\\e923",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_archlinux_dark-cyan": {
      fontCharacter: "A",
      fontColor: "#4d9085",
      fontId: "mf",
      fontSize: "107%"
    },
    "_archlinux_dark-maroon": {
      fontCharacter: "A",
      fontColor: "#7c4426",
      fontId: "mf",
      fontSize: "107%"
    },
    "_archlinux_dark-purple": {
      fontCharacter: "A",
      fontColor: "#825078",
      fontId: "mf",
      fontSize: "107%"
    },
    "_archlinux_dark-yellow": {
      fontCharacter: "A",
      fontColor: "#ee9e2e",
      fontId: "mf",
      fontSize: "107%"
    },
    "_archlinux_light-yellow": {
      fontCharacter: "A",
      fontColor: "#fae0bc",
      fontId: "mf",
      fontSize: "107%"
    },
    "_arc_medium-blue": {
      fontCharacter: "\\e92f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_arduino_dark-cyan": {
      fontCharacter: "\\e930",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_asciidoctor_medium-blue": {
      fontCharacter: "\\eac7",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_as_dark-red": {
      fontCharacter: "\\e92e",
      fontColor: "#be2f31",
      fontId: "fi"
    },
    "_as_dark-yellow": {
      fontCharacter: "\\e92e",
      fontColor: "#ee9e2e",
      fontId: "fi"
    },
    "_asm-agc_dark-blue": {
      fontCharacter: "\\eb53",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm-arm_medium-blue": {
      fontCharacter: "\\eb51",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm-avr_dark-purple": {
      fontCharacter: "\\eb6c",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm_dark-green": {
      fontCharacter: "\\eb4f",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_as_medium-blue": {
      fontCharacter: "\\e92e",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_as_medium-red": {
      fontCharacter: "\\e92e",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_as_medium-yellow": {
      fontCharacter: "\\e92e",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_asm-intel_dark-blue": {
      fontCharacter: "\\eb4e",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm-m68k_dark-red": {
      fontCharacter: "\\eb4d",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm-m68k_medium-blue": {
      fontCharacter: "\\eb4d",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm_medium-cyan": {
      fontCharacter: "\\eb4f",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm_medium-green": {
      fontCharacter: "\\eb4f",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm_medium-orange": {
      fontCharacter: "\\eb4f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm-vax_medium-maroon": {
      fontCharacter: "\\eb48",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm-zilog_medium-blue": {
      fontCharacter: "\\eb47",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asm-zilog_medium-yellow": {
      fontCharacter: "\\eb47",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_asp_dark-blue": {
      fontCharacter: "\\e67f",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_asp_dark-cyan": {
      fontCharacter: "\\e67f",
      fontColor: "#4d9085",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_asp_dark-green": {
      fontCharacter: "\\e67f",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_asp_medium-cyan": {
      fontCharacter: "\\e67f",
      fontColor: "#75b5aa",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_asp_medium-green": {
      fontCharacter: "\\e67f",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_asp_medium-maroon": {
      fontCharacter: "\\e67f",
      fontColor: "#8f5536",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_asp_medium-purple": {
      fontCharacter: "\\e67f",
      fontColor: "#aa759f",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_asymptote_medium-red": {
      fontCharacter: "\\eae5",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_at_dark-red": {
      fontCharacter: "\\f1fa",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "107%"
    },
    "_at_medium-red": {
      fontCharacter: "\\f1fa",
      fontColor: "#ac4142",
      fontId: "fa",
      fontSize: "107%"
    },
    "_atom_dark-green": {
      fontCharacter: "\\e664",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_atom_medium-green": {
      fontCharacter: "\\e664",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_ats_dark-yellow": {
      fontCharacter: "\\e934",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ats_medium-blue": {
      fontCharacter: "\\e934",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ats_medium-red": {
      fontCharacter: "\\e934",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_audacity_medium-yellow": {
      fontCharacter: "\\e9f9",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_audio_dark-blue": {
      fontCharacter: "\\f028",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_dark-cyan": {
      fontCharacter: "\\f028",
      fontColor: "#4d9085",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_dark-green": {
      fontCharacter: "\\f028",
      fontColor: "#66783e",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_dark-maroon": {
      fontCharacter: "\\f028",
      fontColor: "#7c4426",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_dark-orange": {
      fontCharacter: "\\f028",
      fontColor: "#a35f27",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_dark-red": {
      fontCharacter: "\\f028",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_dark-yellow": {
      fontCharacter: "\\f028",
      fontColor: "#ee9e2e",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_medium-blue": {
      fontCharacter: "\\f028",
      fontColor: "#6a9fb5",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_medium-cyan": {
      fontCharacter: "\\f028",
      fontColor: "#75b5aa",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_medium-green": {
      fontCharacter: "\\f028",
      fontColor: "#90a959",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_medium-orange": {
      fontCharacter: "\\f028",
      fontColor: "#d28445",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_medium-purple": {
      fontCharacter: "\\f028",
      fontColor: "#aa759f",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_medium-red": {
      fontCharacter: "\\f028",
      fontColor: "#ac4142",
      fontId: "fa",
      fontSize: "107%"
    },
    "_audio_medium-yellow": {
      fontCharacter: "\\f028",
      fontColor: "#f4bf75",
      fontId: "fa",
      fontSize: "107%"
    },
    "_augeas_dark-orange": {
      fontCharacter: "\\e931",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_aurelia_dark-pink": {
      fontCharacter: "\\ea48",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_autoit_medium-purple": {
      fontCharacter: "\\e933",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_avro_medium-blue": {
      fontCharacter: "\\eaa3",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_awk_dark-blue": {
      fontCharacter: "\\1f427",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_dark-cyan": {
      fontCharacter: "\\1f427",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_dark-green": {
      fontCharacter: "\\1f427",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_dark-maroon": {
      fontCharacter: "\\1f427",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_dark-red": {
      fontCharacter: "\\1f427",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_medium-blue": {
      fontCharacter: "\\1f427",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_medium-cyan": {
      fontCharacter: "\\1f427",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_medium-green": {
      fontCharacter: "\\1f427",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_medium-maroon": {
      fontCharacter: "\\1f427",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_awk_medium-red": {
      fontCharacter: "\\1f427",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_azurepipelines_dark-blue": {
      fontCharacter: "\\1f680",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_babel_dark-yellow": {
      fontCharacter: "\\e91f",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_babel_medium-yellow": {
      fontCharacter: "\\e91f",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_backbone_dark-blue": {
      fontCharacter: "\\e652",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "114%"
    },
    _backup: {
      fontCharacter: "\\f1da",
      fontId: "fa",
      fontSize: "93%"
    },
    "_ballerina_dark-green": {
      fontCharacter: "\\eac8",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ballerina_medium-cyan": {
      fontCharacter: "\\eac8",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bazaar_dark-yellow": {
      fontCharacter: "\\eacd",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bazaar_medium-yellow": {
      fontCharacter: "\\eacd",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bazel_dark-blue": {
      fontCharacter: "\\ead2",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bazel_dark-green": {
      fontCharacter: "\\ead2",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bazel_medium-cyan": {
      fontCharacter: "\\ead2",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bazel_medium-green": {
      fontCharacter: "\\ead2",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_behat_medium-cyan": {
      fontCharacter: "\\ea89",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_bem_medium-maroon": {
      fontCharacter: "\\ea59",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_bibtex_dark-blue": {
      fontCharacter: "\\e601",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_dark-green": {
      fontCharacter: "\\e601",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_dark-orange": {
      fontCharacter: "\\e601",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_dark-red": {
      fontCharacter: "\\e601",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_dark-yellow": {
      fontCharacter: "\\e601",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_medium-blue": {
      fontCharacter: "\\e601",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_medium-green": {
      fontCharacter: "\\e601",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_medium-orange": {
      fontCharacter: "\\e601",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_medium-red": {
      fontCharacter: "\\e601",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bibtex_medium-yellow": {
      fontCharacter: "\\e601",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bikeshed_dark-blue": {
      fontCharacter: "\\1f6b2",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bikeshed_medium-red": {
      fontCharacter: "\\1f6b2",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_biml_medium-red": {
      fontCharacter: "\\eb29",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_binary_dark-blue": {
      fontCharacter: "\\f094",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_dark-green": {
      fontCharacter: "\\f094",
      fontColor: "#66783e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_dark-orange": {
      fontCharacter: "\\f094",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_dark-purple": {
      fontCharacter: "\\f094",
      fontColor: "#825078",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_dark-red": {
      fontCharacter: "\\f094",
      fontColor: "#be2f31",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_medium-green": {
      fontCharacter: "\\f094",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_medium-grey": {
      fontCharacter: "\\f094",
      fontColor: "#7f7f7f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_medium-orange": {
      fontCharacter: "\\f094",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_medium-purple": {
      fontCharacter: "\\f094",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binary_medium-red": {
      fontCharacter: "\\f094",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_binder_medium-orange": {
      fontCharacter: "\\eba4",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bintray_medium-green": {
      fontCharacter: "\\ea6e",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_bison_dark-green": {
      fontCharacter: "\\1f402",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bison_medium-cyan": {
      fontCharacter: "\\1f402",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bison_medium-green": {
      fontCharacter: "\\1f402",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bison_medium-red": {
      fontCharacter: "\\1f402",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bitbucket_medium-blue": {
      fontCharacter: "\\e603",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_bitcoin_medium-orange": {
      fontCharacter: "\\f15a",
      fontColor: "#d28445",
      fontId: "fa",
      fontSize: "114%"
    },
    "_bithound_medium-red": {
      fontCharacter: "\\ea2a",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_blender_dark-blue": {
      fontCharacter: "\\e9fa",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_blender_dark-orange": {
      fontCharacter: "\\e9fa",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_blender_medium-orange": {
      fontCharacter: "\\e9fa",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_blitzbasic_medium-cyan": {
      fontCharacter: "\\eba5",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_blitzbasic_medium-green": {
      fontCharacter: "\\eba5",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bloc_medium-cyan": {
      fontCharacter: "\\eba3",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bluespec_dark-blue": {
      fontCharacter: "\\e93c",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "93%"
    },
    "_bnf_dark-red": {
      fontCharacter: "\\2a74",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bnf_dark-yellow": {
      fontCharacter: "\\2a74",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bnf_medium-cyan": {
      fontCharacter: "\\2a74",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bnf_medium-green": {
      fontCharacter: "\\2a74",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bnf_medium-grey": {
      fontCharacter: "\\2a74",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bnf_medium-maroon": {
      fontCharacter: "\\2a74",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bnf_medium-red": {
      fontCharacter: "\\2a74",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bnf_medium-yellow": {
      fontCharacter: "\\2a74",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_book-alt_medium-blue": {
      fontCharacter: "\\f02d",
      fontColor: "#6a9fb5",
      fontId: "fa",
      fontSize: "114%"
    },
    "_book_dark-blue": {
      fontCharacter: "\\f007",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_book_medium-blue": {
      fontCharacter: "\\f007",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_book_medium-green": {
      fontCharacter: "\\f007",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_book_medium-pink": {
      fontCharacter: "\\f007",
      fontColor: "#ff00cc",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_book_medium-red": {
      fontCharacter: "\\f007",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_boo_medium-green": {
      fontCharacter: "\\e939",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    _boot: {
      fontCharacter: "\\f103",
      fontId: "fi",
      fontSize: "114%"
    },
    "_boot_dark-green": {
      fontCharacter: "\\f103",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_boot_medium-green": {
      fontCharacter: "\\f103",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bootstrap_dark-blue": {
      fontCharacter: "\\e647",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bootstrap_dark-green": {
      fontCharacter: "\\e647",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bootstrap_dark-yellow": {
      fontCharacter: "\\e647",
      fontColor: "#ee9e2e",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bootstrap_light-pink": {
      fontCharacter: "\\e647",
      fontColor: "#ff4ddb",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bootstrap_medium-blue": {
      fontCharacter: "\\e647",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bootstrap_medium-green": {
      fontCharacter: "\\e647",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bootstrap_medium-orange": {
      fontCharacter: "\\e647",
      fontColor: "#d28445",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bootstrap_medium-yellow": {
      fontCharacter: "\\e647",
      fontColor: "#f4bf75",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_bors_dark-purple": {
      fontCharacter: "\\1f441",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_bosque_medium-green": {
      fontCharacter: "\\eb96",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_bower_medium-orange": {
      fontCharacter: "\\e64d",
      fontColor: "#d28445",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_bower_medium-yellow": {
      fontCharacter: "\\e64d",
      fontColor: "#f4bf75",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_brain_dark-pink": {
      fontCharacter: "\\e93a",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_brakeman_dark-red": {
      fontCharacter: "\\e9d6",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_brakeman_medium-red": {
      fontCharacter: "\\e9d6",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_brew_dark-orange": {
      fontCharacter: "\\1f37a",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "121%"
    },
    "_brew_medium-orange": {
      fontCharacter: "\\1f37a",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_bro_dark-cyan": {
      fontCharacter: "\\e93b",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_brotli_medium-orange": {
      fontCharacter: "\\eaa2",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_browserslist_medium-orange": {
      fontCharacter: "\\ea80",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_browsersync_medium-red": {
      fontCharacter: "b",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_brunch_medium-green": {
      fontCharacter: "\\ea47",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_buck_dark-blue": {
      fontCharacter: "\\ea46",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_buck_medium-blue": {
      fontCharacter: "\\ea46",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_buildkite_light-green": {
      fontCharacter: "\\ebad",
      fontColor: "#b2c38b",
      fontId: "fi",
      fontSize: "121%"
    },
    "_buildkite_medium-green": {
      fontCharacter: "\\ebad",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_bullhorn_medium-orange": {
      fontCharacter: "\\f0a1",
      fontColor: "#d28445",
      fontId: "fa",
      fontSize: "114%"
    },
    "_bundler_dark-blue": {
      fontCharacter: "\\ea45",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bundler_dark-cyan": {
      fontCharacter: "\\ea45",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bundler_medium-blue": {
      fontCharacter: "\\ea45",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_bundler_medium-cyan": {
      fontCharacter: "\\ea45",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_byond_medium-blue": {
      fontCharacter: "\\e962",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cabal_dark-yellow": {
      fontCharacter: "\\e9c2",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cabal_medium-cyan": {
      fontCharacter: "\\e9c2",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cabal_medium-purple": {
      fontCharacter: "\\e9c2",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cabal_medium-yellow": {
      fontCharacter: "\\e9c2",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_caddy_dark-blue": {
      fontCharacter: "\\1f512",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_caffe2_dark-blue": {
      fontCharacter: "\\eab6",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_caffe2_medium-purple": {
      fontCharacter: "\\eab6",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_caffe_medium-green": {
      fontCharacter: "\\ea9a",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_caffe_medium-maroon": {
      fontCharacter: "\\ea9a",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_cakefile_medium-red": {
      fontCharacter: "\\e924",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cake_medium-yellow": {
      fontCharacter: "\\e9e3",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cakephp_medium-red": {
      fontCharacter: "\\ea43",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_calc_medium-blue": {
      fontCharacter: "\\f1ec",
      fontColor: "#6a9fb5",
      fontId: "fa"
    },
    "_calc_medium-maroon": {
      fontCharacter: "\\f1ec",
      fontColor: "#8f5536",
      fontId: "fa"
    },
    "_calc_medium-red": {
      fontCharacter: "\\f1ec",
      fontColor: "#ac4142",
      fontId: "fa"
    },
    "_calva_medium-maroon": {
      fontCharacter: "\\eba1",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_carthage_dark-pink": {
      fontCharacter: "\\ea98",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_casc_dark-orange": {
      fontCharacter: "\\ebb6",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "121%"
    },
    "_casc_medium-orange": {
      fontCharacter: "\\ebb6",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_cc_medium-green": {
      fontCharacter: "\\e9d5",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_c_dark-blue": {
      fontCharacter: "\\f106",
      fontColor: "#46788d",
      fontId: "mf",
      fontSize: "93%"
    },
    "_cdf_medium-red": {
      fontCharacter: "\\eb46",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ceylon_medium-orange": {
      fontCharacter: "\\e94f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cf_light-cyan": {
      fontCharacter: "\\e929",
      fontColor: "#a7d0c9",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cf_medium-cyan": {
      fontCharacter: "\\e929",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_chai_dark-red": {
      fontCharacter: "c",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_chai_medium-red": {
      fontCharacter: "c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_chapel_medium-green": {
      fontCharacter: "\\e950",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_chartjs_dark-pink": {
      fontCharacter: "\\ea0b",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_checklist_dark-blue": {
      fontCharacter: "\\f076",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_dark-purple": {
      fontCharacter: "\\f076",
      fontColor: "#825078",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_dark-red": {
      fontCharacter: "\\f076",
      fontColor: "#be2f31",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_light-blue": {
      fontCharacter: "\\f076",
      fontColor: "#9dc0ce",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_medium-blue": {
      fontCharacter: "\\f076",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_medium-cyan": {
      fontCharacter: "\\f076",
      fontColor: "#75b5aa",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_medium-green": {
      fontCharacter: "\\f076",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_medium-red": {
      fontCharacter: "\\f076",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_checklist_medium-yellow": {
      fontCharacter: "\\f076",
      fontColor: "#f4bf75",
      fontId: "octicons",
      fontSize: "121%"
    },
    "_cheetah3d_dark-yellow": {
      fontCharacter: "\\1f406",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cheetah3d_medium-yellow": {
      fontCharacter: "\\1f406",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_chef_dark-orange": {
      fontCharacter: "\\ea42",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_chef_medium-orange": {
      fontCharacter: "\\ea42",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_chocolatey_medium-blue": {
      fontCharacter: "\\1f36b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_chrome_medium-red": {
      fontCharacter: "\\e643",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_chuck_medium-green": {
      fontCharacter: "\\e943",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    _circleci: {
      fontCharacter: "\\ea12",
      fontId: "fi"
    },
    "_circleci_medium-green": {
      fontCharacter: "\\ea12",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_circuit-board_dark-blue": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#46788d"
    },
    "_circuit-board_dark-cyan": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#4d9085"
    },
    "_circuit-board_dark-green": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#66783e"
    },
    "_circuit-board_dark-maroon": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#7c4426"
    },
    "_circuit-board_dark-orange": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#a35f27"
    },
    "_circuit-board_dark-red": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#be2f31"
    },
    "_circuit-board_dark-yellow": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#ee9e2e"
    },
    "_circuit-board_medium-blue": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#6a9fb5"
    },
    "_circuit-board_medium-cyan": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#75b5aa"
    },
    "_circuit-board_medium-green": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#90a959"
    },
    "_circuit-board_medium-maroon": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#8f5536"
    },
    "_circuit-board_medium-orange": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#d28445"
    },
    "_circuit-board_medium-red": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#ac4142"
    },
    "_circuit-board_medium-yellow": {
      fontId: "octicons",
      fontCharacter: "\\f0d6",
      fontSize: "114%",
      fontColor: "#f4bf75"
    },
    "_cirru_dark-pink": {
      fontCharacter: "\\e951",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cirru_medium-pink": {
      fontCharacter: "\\e951",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "107%"
    },
    "_clarion_medium-orange": {
      fontCharacter: "\\e952",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_clean_dark-cyan": {
      fontCharacter: "\\e95b",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_clean_medium-blue": {
      fontCharacter: "\\e95b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_clean_medium-cyan": {
      fontCharacter: "\\e95b",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_click_medium-yellow": {
      fontCharacter: "\\e95c",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_clips_dark-green": {
      fontCharacter: "\\e940",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "129%"
    },
    "_cljs_dark-blue": {
      fontCharacter: "\\f104",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cljs_medium-blue": {
      fontCharacter: "\\f104",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cl_medium-orange": {
      fontCharacter: "\\e972",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_clojure_dark-blue": {
      fontCharacter: "\\e668",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_dark-green": {
      fontCharacter: "\\e668",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_dark-maroon": {
      fontCharacter: "\\e668",
      fontColor: "#7c4426",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_dark-purple": {
      fontCharacter: "\\e668",
      fontColor: "#825078",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_dark-red": {
      fontCharacter: "\\e668",
      fontColor: "#be2f31",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_dark-yellow": {
      fontCharacter: "\\e668",
      fontColor: "#ee9e2e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_medium-blue": {
      fontCharacter: "\\e668",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_medium-green": {
      fontCharacter: "\\e668",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_medium-maroon": {
      fontCharacter: "\\e668",
      fontColor: "#8f5536",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_medium-purple": {
      fontCharacter: "\\e668",
      fontColor: "#aa759f",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_medium-red": {
      fontCharacter: "\\e668",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_clojure_medium-yellow": {
      fontCharacter: "\\e668",
      fontColor: "#f4bf75",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_closure-tpl_medium-blue": {
      fontCharacter: "\\ea82",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cloudfoundry_medium-blue": {
      fontCharacter: "\\ead0",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cmake_medium-green": {
      fontCharacter: "\\e93f",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_cmake_medium-red": {
      fontCharacter: "\\e93f",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_c_medium-blue": {
      fontCharacter: "\\f106",
      fontColor: "#6a9fb5",
      fontId: "mf",
      fontSize: "93%"
    },
    "_c_medium-cyan": {
      fontCharacter: "\\f106",
      fontColor: "#75b5aa",
      fontId: "mf",
      fontSize: "93%"
    },
    "_c_medium-green": {
      fontCharacter: "\\f106",
      fontColor: "#90a959",
      fontId: "mf",
      fontSize: "93%"
    },
    "_c_medium-maroon": {
      fontCharacter: "\\f106",
      fontColor: "#8f5536",
      fontId: "mf",
      fontSize: "93%"
    },
    "_c_medium-orange": {
      fontCharacter: "\\f106",
      fontColor: "#d28445",
      fontId: "mf",
      fontSize: "93%"
    },
    "_c_medium-purple": {
      fontCharacter: "\\f106",
      fontColor: "#aa759f",
      fontId: "mf",
      fontSize: "93%"
    },
    "_cnab_dark-blue": {
      fontCharacter: "\\ebb5",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cobol_dark-blue": {
      fontCharacter: "\\ea44",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cobol_medium-blue": {
      fontCharacter: "\\ea44",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cocoapods_medium-red": {
      fontCharacter: "\\ea97",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_codacy_dark-blue": {
      fontCharacter: "\\ea8b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_codecov_dark-pink": {
      fontCharacter: "\\2602",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_code_dark-blue": {
      fontCharacter: "\\f05f",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-cyan": {
      fontCharacter: "\\f05f",
      fontColor: "#4d9085",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-green": {
      fontCharacter: "\\f05f",
      fontColor: "#66783e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-maroon": {
      fontCharacter: "\\f05f",
      fontColor: "#7c4426",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-orange": {
      fontCharacter: "\\f05f",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-pink": {
      fontCharacter: "\\f05f",
      fontColor: "#cc00a3",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-purple": {
      fontCharacter: "\\f05f",
      fontColor: "#825078",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-red": {
      fontCharacter: "\\f05f",
      fontColor: "#be2f31",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_dark-yellow": {
      fontCharacter: "\\f05f",
      fontColor: "#ee9e2e",
      fontId: "octicons",
      fontSize: "114%"
    },
    _codekit: {
      fontCharacter: "\\ea41",
      fontId: "fi",
      fontSize: "107%"
    },
    "_code_light-blue": {
      fontCharacter: "\\f05f",
      fontColor: "#9dc0ce",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_light-cyan": {
      fontCharacter: "\\f05f",
      fontColor: "#a7d0c9",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_light-green": {
      fontCharacter: "\\f05f",
      fontColor: "#b2c38b",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_light-maroon": {
      fontCharacter: "\\f05f",
      fontColor: "#be7953",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_light-orange": {
      fontCharacter: "\\f05f",
      fontColor: "#e1ad83",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_light-purple": {
      fontCharacter: "\\f05f",
      fontColor: "#c7a4c0",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-blue": {
      fontCharacter: "\\f05f",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-cyan": {
      fontCharacter: "\\f05f",
      fontColor: "#75b5aa",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-green": {
      fontCharacter: "\\f05f",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-maroon": {
      fontCharacter: "\\f05f",
      fontColor: "#8f5536",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-orange": {
      fontCharacter: "\\f05f",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-pink": {
      fontCharacter: "\\f05f",
      fontColor: "#ff00cc",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-purple": {
      fontCharacter: "\\f05f",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-red": {
      fontCharacter: "\\f05f",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_code_medium-yellow": {
      fontCharacter: "\\f05f",
      fontColor: "#f4bf75",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_codemeta_dark-grey": {
      fontCharacter: "\\eb8f",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_codemeta_medium-grey": {
      fontCharacter: "\\eb8f",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_codeship_dark-blue": {
      fontCharacter: "\\ea6a",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_coffee_dark-maroon": {
      fontCharacter: "\\f0f4",
      fontColor: "#7c4426",
      fontId: "fa"
    },
    "_coffee_light-maroon": {
      fontCharacter: "\\f0f4",
      fontColor: "#be7953",
      fontId: "fa"
    },
    "_coffee_medium-blue": {
      fontCharacter: "\\f0f4",
      fontColor: "#6a9fb5",
      fontId: "fa"
    },
    "_coffee_medium-cyan": {
      fontCharacter: "\\f0f4",
      fontColor: "#75b5aa",
      fontId: "fa"
    },
    "_coffee_medium-maroon": {
      fontCharacter: "\\f0f4",
      fontColor: "#8f5536",
      fontId: "fa"
    },
    "_coffee_medium-orange": {
      fontCharacter: "\\f0f4",
      fontColor: "#d28445",
      fontId: "fa"
    },
    "_coffee_medium-red": {
      fontCharacter: "\\f0f4",
      fontColor: "#ac4142",
      fontId: "fa"
    },
    "_commitizen_dark-purple": {
      fontCharacter: "\\ebb3",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_commitlint_medium-blue": {
      fontCharacter: "\\1f191",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_compass_medium-red": {
      fontCharacter: "\\e661",
      fontColor: "#ac4142",
      fontId: "devicons"
    },
    "_composer_dark-blue": {
      fontCharacter: "\\e683",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_composer_medium-yellow": {
      fontCharacter: "\\e683",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_conan_dark-blue": {
      fontCharacter: "\\ead1",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_conan_medium-blue": {
      fontCharacter: "\\ead1",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_conda_medium-green": {
      fontCharacter: "\\eb3c",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_config-coffee_medium-maroon": {
      fontCharacter: "\\eb18",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-coffee_medium-red": {
      fontCharacter: "\\eb18",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config_dark-blue": {
      fontCharacter: "\\f07c",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_config_dark-green": {
      fontCharacter: "\\f07c",
      fontColor: "#66783e",
      fontId: "fi"
    },
    "_config_dark-red": {
      fontCharacter: "\\f07c",
      fontColor: "#be2f31",
      fontId: "fi"
    },
    "_config-go_dark-blue": {
      fontCharacter: "\\eb12",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "129%"
    },
    "_config-go_medium-green": {
      fontCharacter: "\\eb12",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "129%"
    },
    "_config-hs_dark-purple": {
      fontCharacter: "\\eb14",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-hs_medium-purple": {
      fontCharacter: "\\eb14",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-js_dark-yellow": {
      fontCharacter: "\\eb1a",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-js_medium-yellow": {
      fontCharacter: "\\eb1a",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config_medium-blue": {
      fontCharacter: "\\f07c",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_config_medium-cyan": {
      fontCharacter: "\\f07c",
      fontColor: "#75b5aa",
      fontId: "fi"
    },
    "_config_medium-green": {
      fontCharacter: "\\f07c",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_config_medium-orange": {
      fontCharacter: "\\f07c",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_config_medium-purple": {
      fontCharacter: "\\f07c",
      fontColor: "#aa759f",
      fontId: "fi"
    },
    "_config_medium-red": {
      fontCharacter: "\\f07c",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_config_medium-yellow": {
      fontCharacter: "\\f07c",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_config-perl_medium-blue": {
      fontCharacter: "\\eb19",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-python_dark-blue": {
      fontCharacter: "\\eb15",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-react_dark-blue": {
      fontCharacter: "\\eb16",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-react_medium-blue": {
      fontCharacter: "\\eb16",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-ruby_dark-red": {
      fontCharacter: "\\eb17",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-ruby_medium-red": {
      fontCharacter: "\\eb17",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-rust_dark-maroon": {
      fontCharacter: "\\eb13",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-rust_medium-maroon": {
      fontCharacter: "\\eb13",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-ts_dark-blue": {
      fontCharacter: "\\eb1b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-ts_dark-purple": {
      fontCharacter: "\\eb1b",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-ts_medium-blue": {
      fontCharacter: "\\eb1b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_config-ts_medium-purple": {
      fontCharacter: "\\eb1b",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_conll_medium-blue": {
      fontCharacter: "\\eaa6",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_conll_medium-orange": {
      fontCharacter: "\\eaa6",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_coq_medium-maroon": {
      fontCharacter: "\\e95f",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cordova_light-blue": {
      fontCharacter: "\\ea11",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_coreldraw_medium-green": {
      fontCharacter: "\\ea90",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_corel_medium-blue": {
      fontCharacter: "\\ea91",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_coveralls_medium-red": {
      fontCharacter: "\\272a",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cpan_dark-blue": {
      fontCharacter: "\\ea87",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cpan_dark-yellow": {
      fontCharacter: "\\ea87",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cpan_medium-blue": {
      fontCharacter: "\\ea87",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cpan_medium-maroon": {
      fontCharacter: "\\ea87",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cpan_medium-red": {
      fontCharacter: "\\ea87",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cpan_medium-yellow": {
      fontCharacter: "\\ea87",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cpcdosc_medium-blue": {
      fontCharacter: "\\eb8d",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cp_dark-red": {
      fontCharacter: "\\e942",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_cp_medium-maroon": {
      fontCharacter: "\\e942",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_cpp_dark-blue": {
      fontCharacter: "\\f10b",
      fontColor: "#46788d",
      fontId: "mf"
    },
    "_cpp_dark-orange": {
      fontCharacter: "\\f10b",
      fontColor: "#a35f27",
      fontId: "mf"
    },
    "_cpp_dark-purple": {
      fontCharacter: "\\f10b",
      fontColor: "#825078",
      fontId: "mf"
    },
    "_cpp_dark-red": {
      fontCharacter: "\\f10b",
      fontColor: "#be2f31",
      fontId: "mf"
    },
    "_cpp_medium-blue": {
      fontCharacter: "\\f10b",
      fontColor: "#6a9fb5",
      fontId: "mf"
    },
    "_cpp_medium-orange": {
      fontCharacter: "\\f10b",
      fontColor: "#d28445",
      fontId: "mf"
    },
    "_cpp_medium-purple": {
      fontCharacter: "\\f10b",
      fontColor: "#aa759f",
      fontId: "mf"
    },
    "_cpp_medium-red": {
      fontCharacter: "\\f10b",
      fontColor: "#ac4142",
      fontId: "mf"
    },
    "_crafttweaker_dark-maroon": {
      fontCharacter: "\\eb89",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "121%"
    },
    "_crafttweaker_dark-orange": {
      fontCharacter: "\\eb89",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "121%"
    },
    "_crafttweaker_medium-maroon": {
      fontCharacter: "\\eb89",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_crafttweaker_medium-orange": {
      fontCharacter: "\\eb89",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_creole_medium-blue": {
      fontCharacter: "\\e95e",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_crowdin_medium-green": {
      fontCharacter: "\\ead3",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_crystal_medium-cyan": {
      fontCharacter: "\\e902",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_csharp_dark-blue": {
      fontCharacter: "\\f10c",
      fontColor: "#46788d",
      fontId: "mf"
    },
    "_csharp_medium-blue": {
      fontCharacter: "\\f10c",
      fontColor: "#6a9fb5",
      fontId: "mf"
    },
    "_csound_dark-blue": {
      fontCharacter: "\\e9f0",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_csound_dark-maroon": {
      fontCharacter: "\\e9f0",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_csound_dark-orange": {
      fontCharacter: "\\e9f0",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_csound_medium-maroon": {
      fontCharacter: "\\e9f0",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_css3_dark-blue": {
      fontCharacter: "\\f13c",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "93%"
    },
    "_css3_dark-red": {
      fontCharacter: "\\f13c",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "93%"
    },
    "_css3_medium-blue": {
      fontCharacter: "\\f13c",
      fontColor: "#6a9fb5",
      fontId: "fa",
      fontSize: "93%"
    },
    "_csscript_dark-green": {
      fontCharacter: "\\e9e2",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cubit_medium-cyan": {
      fontCharacter: "\\eb92",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cucumber_medium-green": {
      fontCharacter: "\\f02b",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cuneiform_dark-blue": {
      fontCharacter: "\\eb76",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_curl_dark-blue": {
      fontCharacter: "/",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_curry_medium-red": {
      fontCharacter: "\\eb78",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_cvs_medium-orange": {
      fontCharacter: "\\1f41f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cwl_dark-red": {
      fontCharacter: "\\29d9",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_cython_dark-blue": {
      fontCharacter: "\\e963",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cython_medium-blue": {
      fontCharacter: "\\e963",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_cython_medium-orange": {
      fontCharacter: "\\e963",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_d3_medium-orange": {
      fontCharacter: "\\ea10",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dafny_medium-orange": {
      fontCharacter: "\\eb8c",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_dafny_medium-yellow": {
      fontCharacter: "\\eb8c",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_darcs_dark-green": {
      fontCharacter: "\\e964",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_darcs_medium-green": {
      fontCharacter: "\\e964",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dart_medium-cyan": {
      fontCharacter: "\\e698",
      fontColor: "#75b5aa",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_dashboard_medium-blue": {
      fontCharacter: "\\f07d",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "93%"
    },
    "_dashboard_medium-green": {
      fontCharacter: "\\f07d",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "93%"
    },
    "_dashboard_medium-orange": {
      fontCharacter: "\\f07d",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "93%"
    },
    "_database_dark-blue": {
      fontCharacter: "\\f096",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_dark-cyan": {
      fontCharacter: "\\f096",
      fontColor: "#4d9085",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_dark-green": {
      fontCharacter: "\\f096",
      fontColor: "#66783e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_dark-orange": {
      fontCharacter: "\\f096",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_dark-purple": {
      fontCharacter: "\\f096",
      fontColor: "#825078",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_dark-red": {
      fontCharacter: "\\f096",
      fontColor: "#be2f31",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_light-blue": {
      fontCharacter: "\\f096",
      fontColor: "#9dc0ce",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-blue": {
      fontCharacter: "\\f096",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-cyan": {
      fontCharacter: "\\f096",
      fontColor: "#75b5aa",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-green": {
      fontCharacter: "\\f096",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-grey": {
      fontCharacter: "\\f096",
      fontColor: "#7f7f7f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-maroon": {
      fontCharacter: "\\f096",
      fontColor: "#8f5536",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-orange": {
      fontCharacter: "\\f096",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-purple": {
      fontCharacter: "\\f096",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_database_medium-red": {
      fontCharacter: "\\f096",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_dataweave_dark-blue": {
      fontCharacter: "\\ea99",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dataweave_medium-blue": {
      fontCharacter: "\\ea99",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dbase_medium-red": {
      fontCharacter: "\\e9f1",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_debian_dark-cyan": {
      fontCharacter: "\\f111",
      fontColor: "#4d9085",
      fontId: "mf"
    },
    "_debian_medium-cyan": {
      fontCharacter: "\\f111",
      fontColor: "#75b5aa",
      fontId: "mf"
    },
    "_debian_medium-red": {
      fontCharacter: "\\f111",
      fontColor: "#ac4142",
      fontId: "mf"
    },
    "_delphi_medium-blue": {
      fontCharacter: "\\ea40",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_delphi_medium-orange": {
      fontCharacter: "\\ea40",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_delphi_medium-red": {
      fontCharacter: "\\ea40",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_deno_dark-grey": {
      fontCharacter: "\\eaef",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_deno_medium-grey": {
      fontCharacter: "\\eaef",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dependabot_medium-blue": {
      fontCharacter: "\\eb3e",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_devcontainer_medium-blue": {
      fontCharacter: "\\eb83",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_devicetree_medium-orange": {
      fontCharacter: "\\ea57",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_devicetree_medium-purple": {
      fontCharacter: "\\ea57",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_dhall_dark-grey": {
      fontCharacter: "\\1f58b",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_dia_dark-cyan": {
      fontCharacter: "\\eab5",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dia_medium-cyan": {
      fontCharacter: "\\eab5",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_diff_medium-orange": {
      fontCharacter: "\\e960",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_diff_medium-red": {
      fontCharacter: "\\e960",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_digdag_medium-orange": {
      fontCharacter: "\\eb03",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dlang_medium-red": {
      fontCharacter: "\\e6af",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_dna_dark-yellow": {
      fontCharacter: "\\2624",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dna_medium-blue": {
      fontCharacter: "\\2624",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dna_medium-green": {
      fontCharacter: "\\2624",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dna_medium-orange": {
      fontCharacter: "\\2624",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dna_medium-pink": {
      fontCharacter: "\\2624",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dna_medium-purple": {
      fontCharacter: "\\2624",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dna_medium-red": {
      fontCharacter: "\\2624",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_docbook_medium-cyan": {
      fontCharacter: "\\13167",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_docker_dark-blue": {
      fontCharacter: "\\f106",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "129%"
    },
    "_docker_dark-orange": {
      fontCharacter: "\\f106",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "129%"
    },
    "_doclets_light-green": {
      fontCharacter: "\\ea3f",
      fontColor: "#b2c38b",
      fontId: "fi",
      fontSize: "107%"
    },
    "_doclets_medium-green": {
      fontCharacter: "\\ea3f",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_docpad_medium-maroon": {
      fontCharacter: "\\21b9",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_docz_dark-orange": {
      fontCharacter: "\\eb21",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "121%"
    },
    "_docz_dark-yellow": {
      fontCharacter: "\\eb21",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_docz_medium-orange": {
      fontCharacter: "\\eb21",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_docz_medium-yellow": {
      fontCharacter: "\\eb21",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_doge_medium-yellow": {
      fontCharacter: "\\e946",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dojo_light-red": {
      fontCharacter: "\\e61c",
      fontColor: "#c97071",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_dosbox_medium-orange": {
      fontCharacter: "\\eaf2",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_dotenv_dark-yellow": {
      fontCharacter: "\\ebb8",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dotenv_medium-yellow": {
      fontCharacter: "\\ebb8",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dotjs_medium-blue": {
      fontCharacter: "\\eb0b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_download_dark-blue": {
      fontCharacter: "\\f019",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "114%"
    },
    "_doxygen_medium-blue": {
      fontCharacter: "\\e928",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "93%"
    },
    "_dragula_dark-purple": {
      fontCharacter: "\\1f44c",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_drawio_medium-orange": {
      fontCharacter: "\\eb93",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_drone_medium-cyan": {
      fontCharacter: "\\ea3d",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_dropbox_medium-blue": {
      fontCharacter: "\\e607",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_dub_medium-red": {
      fontCharacter: "\\eba2",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_dvc_light-blue": {
      fontCharacter: "\\eb98",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "121%"
    },
    "_dyalog_dark-green": {
      fontCharacter: "\\e90c",
      fontColor: "#66783e",
      fontId: "fi"
    },
    "_dyalog_medium-orange": {
      fontCharacter: "\\e90c",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_dyalog_medium-red": {
      fontCharacter: "\\e90c",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_dylib_medium-cyan": {
      fontCharacter: "\\ea15",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_eagle_medium-red": {
      fontCharacter: "\\e965",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_earth_dark-blue": {
      fontCharacter: "\\f0ac",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "107%"
    },
    "_earth_medium-blue": {
      fontCharacter: "\\f0ac",
      fontColor: "#6a9fb5",
      fontId: "fa",
      fontSize: "107%"
    },
    "_earth_medium-green": {
      fontCharacter: "\\f0ac",
      fontColor: "#90a959",
      fontId: "fa",
      fontSize: "107%"
    },
    "_easybuild_dark-blue": {
      fontCharacter: "\\ea85",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ec_dark-blue": {
      fontCharacter: "\\e9c9",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ec_dark-purple": {
      fontCharacter: "\\e9c9",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ecere_medium-blue": {
      fontCharacter: "\\e966",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_eclipse_dark-blue": {
      fontCharacter: "\\e69e",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_eclipse-lang_medium-blue": {
      fontCharacter: "\\eb80",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_eclipse_medium-maroon": {
      fontCharacter: "\\e69e",
      fontColor: "#8f5536",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_eclipse_medium-red": {
      fontCharacter: "\\e69e",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_edge_dark-orange": {
      fontCharacter: "\\ea78",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_editorconfig_dark-blue": {
      fontCharacter: "\\ea1b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_editorconfig_medium-orange": {
      fontCharacter: "\\ea1b",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_eiffel_medium-cyan": {
      fontCharacter: "\\e967",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ejs_medium-green": {
      fontCharacter: "\\ea4b",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_electron_dark-blue": {
      fontCharacter: "\\ea27",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_electron_dark-cyan": {
      fontCharacter: "\\ea27",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_elixir_dark-purple": {
      fontCharacter: "\\f113",
      fontColor: "#825078",
      fontId: "mf"
    },
    "_elixir_light-purple": {
      fontCharacter: "\\f113",
      fontColor: "#c7a4c0",
      fontId: "mf"
    },
    "_elixir_medium-purple": {
      fontCharacter: "\\f113",
      fontColor: "#aa759f",
      fontId: "mf"
    },
    "_elm_medium-blue": {
      fontCharacter: "\\f102",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_emacs_dark-blue": {
      fontCharacter: "\\e926",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_emacs_dark-green": {
      fontCharacter: "\\e926",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_emacs_dark-purple": {
      fontCharacter: "\\e926",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_emacs_medium-blue": {
      fontCharacter: "\\e926",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_emacs_medium-purple": {
      fontCharacter: "\\e926",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_emacs_medium-red": {
      fontCharacter: "\\e926",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_e_medium-green": {
      fontCharacter: "E",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_em_medium-red": {
      fontCharacter: "\\e968",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ensime_medium-red": {
      fontCharacter: "\\ead4",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_eq_medium-orange": {
      fontCharacter: "\\ea0a",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_erlang_dark-green": {
      fontCharacter: "\\e6b1",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_erlang_dark-maroon": {
      fontCharacter: "\\e6b1",
      fontColor: "#7c4426",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_erlang_dark-red": {
      fontCharacter: "\\e6b1",
      fontColor: "#be2f31",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_erlang_medium-green": {
      fontCharacter: "\\e6b1",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_erlang_medium-maroon": {
      fontCharacter: "\\e6b1",
      fontColor: "#8f5536",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_erlang_medium-red": {
      fontCharacter: "\\e6b1",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_esdoc_medium-red": {
      fontCharacter: "\\ea5c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_eslint_light-purple": {
      fontCharacter: "\\ea0f",
      fontColor: "#c7a4c0",
      fontId: "fi",
      fontSize: "114%"
    },
    "_eslint_medium-purple": {
      fontCharacter: "\\ea0f",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_excel_dark-cyan": {
      fontCharacter: "\\e9ee",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_dark-green": {
      fontCharacter: "\\e9ee",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_dark-maroon": {
      fontCharacter: "\\e9ee",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_dark-orange": {
      fontCharacter: "\\e9ee",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_dark-red": {
      fontCharacter: "\\e9ee",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_medium-green": {
      fontCharacter: "\\e9ee",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_medium-maroon": {
      fontCharacter: "\\e9ee",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_medium-orange": {
      fontCharacter: "\\e9ee",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_excel_medium-red": {
      fontCharacter: "\\e9ee",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_expo_medium-blue": {
      fontCharacter: "\\eb71",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_fabfile_medium-blue": {
      fontCharacter: "\\e94b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fabric_dark-orange": {
      fontCharacter: "\\1f4dc",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fabric_medium-orange": {
      fontCharacter: "\\1f4dc",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_factor_dark-orange": {
      fontCharacter: "\\e96a",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "129%"
    },
    "_factor_medium-orange": {
      fontCharacter: "\\e96a",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "129%"
    },
    "_factor_medium-red": {
      fontCharacter: "\\e96a",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "129%"
    },
    "_falcon_medium-red": {
      fontCharacter: "\\eae4",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_fancy_dark-blue": {
      fontCharacter: "\\e96b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fancy_medium-blue": {
      fontCharacter: "\\e96b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fancy_medium-green": {
      fontCharacter: "\\e96b",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fantom_medium-blue": {
      fontCharacter: "\\e96f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_fauna_dark-blue": {
      fontCharacter: "\\13168",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_faust_dark-orange": {
      fontCharacter: "\\22c0",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_fbx_medium-maroon": {
      fontCharacter: "\\e9fc",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_fexl_medium-cyan": {
      fontCharacter: "\\eb20",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_ff_dark-blue": {
      fontCharacter: "\\fb00",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ff_medium-orange": {
      fontCharacter: "\\fb00",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_figma_medium-red": {
      fontCharacter: "\\ebba",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_filter_medium-red": {
      fontCharacter: "\\f0b0",
      fontColor: "#ac4142",
      fontId: "fa",
      fontSize: "114%"
    },
    "_finaldraft_medium-green": {
      fontCharacter: "\\1d4bb",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_finder_dark-blue": {
      fontCharacter: "\\e9e9",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_finder_dark-cyan": {
      fontCharacter: "\\e9e9",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_finder_medium-blue": {
      fontCharacter: "\\e9e9",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_firebase-bolt_medium-yellow": {
      fontCharacter: "\\26A1",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_firebase_medium-orange": {
      fontCharacter: "\\ea7f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_firebase_medium-yellow": {
      fontCharacter: "\\ea7f",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_firefox_medium-orange": {
      fontCharacter: "\\e645",
      fontColor: "#d28445",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_flask_dark-blue": {
      fontCharacter: "\\1f704",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_floobits_medium-red": {
      fontCharacter: "\\ead5",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_flow_medium-orange": {
      fontCharacter: "\\e921",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_flutter_light-blue": {
      fontCharacter: "\\eaeb",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_flux_dark-blue": {
      fontCharacter: "\\e969",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_flux_medium-blue": {
      fontCharacter: "\\e969",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font-bitmap_dark-blue": {
      fontCharacter: "\\eaab",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font-bitmap_dark-orange": {
      fontCharacter: "\\eaab",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font-bitmap_dark-red": {
      fontCharacter: "\\eaab",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font-bitmap_medium-blue": {
      fontCharacter: "\\eaab",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font-bitmap_medium-cyan": {
      fontCharacter: "\\eaab",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font-bitmap_medium-orange": {
      fontCharacter: "\\eaab",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font-bitmap_medium-red": {
      fontCharacter: "\\eaab",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_font_dark-blue": {
      fontCharacter: "\\eaaa",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_dark-cyan": {
      fontCharacter: "\\eaaa",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_dark-green": {
      fontCharacter: "\\eaaa",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_dark-red": {
      fontCharacter: "\\eaaa",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_dark-yellow": {
      fontCharacter: "\\eaaa",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_light-green": {
      fontCharacter: "\\eaaa",
      fontColor: "#b2c38b",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_medium-blue": {
      fontCharacter: "\\eaaa",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_medium-green": {
      fontCharacter: "\\eaaa",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_font_medium-red": {
      fontCharacter: "\\eaaa",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fork_medium-blue": {
      fontCharacter: "\\2442",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_fortran_dark-blue": {
      fontCharacter: "\\e90a",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_fortran_dark-cyan": {
      fontCharacter: "\\e90a",
      fontColor: "#4d9085",
      fontId: "fi"
    },
    "_fortran_dark-pink": {
      fontCharacter: "\\e90a",
      fontColor: "#cc00a3",
      fontId: "fi"
    },
    "_fortran_dark-yellow": {
      fontCharacter: "\\e90a",
      fontColor: "#ee9e2e",
      fontId: "fi"
    },
    "_fortran_medium-blue": {
      fontCharacter: "\\e90a",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_fortran_medium-green": {
      fontCharacter: "\\e90a",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_fortran_medium-maroon": {
      fontCharacter: "\\e90a",
      fontColor: "#8f5536",
      fontId: "fi"
    },
    "_fortran_medium-red": {
      fontCharacter: "\\e90a",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_fossa_dark-blue": {
      fontCharacter: "\\eac3",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_fossa_medium-blue": {
      fontCharacter: "\\eac3",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    _fossil: {
      fontCharacter: "\\ead6",
      fontId: "fi",
      fontSize: "121%"
    },
    "_fossil_dark-cyan": {
      fontCharacter: "\\ead6",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "121%"
    },
    "_fossil_medium-cyan": {
      fontCharacter: "\\ead6",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_fountain_medium-blue": {
      fontCharacter: "\\1f135",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_franca_medium-maroon": {
      fontCharacter: "\\ea56",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_franca_medium-orange": {
      fontCharacter: "\\ea56",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_freemarker_medium-blue": {
      fontCharacter: "\\e970",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_frege_dark-red": {
      fontCharacter: "\\e96e",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fsharp_medium-blue": {
      fontCharacter: "\\e6a7",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_fthtml_medium-orange": {
      fontCharacter: "\\eb97",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ftr_medium-red": {
      fontCharacter: "\\2933",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "129%"
    },
    "_fuelux_dark-orange": {
      fontCharacter: "\\ea09",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fuelux_medium-orange": {
      fontCharacter: "\\ea09",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_fusebox_medium-blue": {
      fontCharacter: "\\ead7",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_futhark_dark-maroon": {
      fontCharacter: "\\eb77",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "129%"
    },
    "_galaxy_medium-grey": {
      fontCharacter: "\\eb74",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_galen_medium-blue": {
      fontCharacter: "\\ead8",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_galen_medium-cyan": {
      fontCharacter: "\\ead8",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gams_dark-red": {
      fontCharacter: "\\e973",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gap_dark-blue": {
      fontCharacter: "\\e971",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gap_dark-yellow": {
      fontCharacter: "\\e971",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gap_medium-orange": {
      fontCharacter: "\\e971",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gap_medium-yellow": {
      fontCharacter: "\\e971",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gatsby_dark-purple": {
      fontCharacter: "\\24bc",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gauss_medium-orange": {
      fontCharacter: "\\eb7e",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gdb_dark-cyan": {
      fontCharacter: "\\ea08",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gdb_dark-green": {
      fontCharacter: "\\ea08",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gdb_medium-cyan": {
      fontCharacter: "\\ea08",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gdb_medium-green": {
      fontCharacter: "\\ea08",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gear_dark-blue": {
      fontCharacter: "\\f02f",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_dark-green": {
      fontCharacter: "\\f02f",
      fontColor: "#66783e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_dark-orange": {
      fontCharacter: "\\f02f",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_dark-yellow": {
      fontCharacter: "\\f02f",
      fontColor: "#ee9e2e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_medium-blue": {
      fontCharacter: "\\f02f",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_medium-maroon": {
      fontCharacter: "\\f02f",
      fontColor: "#8f5536",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_medium-orange": {
      fontCharacter: "\\f02f",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_medium-red": {
      fontCharacter: "\\f02f",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gear_medium-yellow": {
      fontCharacter: "\\f02f",
      fontColor: "#f4bf75",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gears_dark-orange": {
      fontCharacter: "\\f085",
      fontColor: "#a35f27",
      fontId: "fa",
      fontSize: "107%"
    },
    "_genshi_medium-red": {
      fontCharacter: "\\e976",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_genstat_medium-blue": {
      fontCharacter: "\\223f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_genstat_medium-green": {
      fontCharacter: "\\223f",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gentoo_dark-cyan": {
      fontCharacter: "\\e96d",
      fontColor: "#4d9085",
      fontId: "fi"
    },
    "_gentoo_medium-blue": {
      fontCharacter: "\\e96d",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_gf_medium-red": {
      fontCharacter: "\\e978",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gimp_medium-cyan": {
      fontCharacter: "\\ea88",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_gimp_medium-green": {
      fontCharacter: "\\ea88",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_gimp_medium-maroon": {
      fontCharacter: "\\ea88",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_gimp_medium-orange": {
      fontCharacter: "\\ea88",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_gimp_medium-red": {
      fontCharacter: "\\ea88",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_git-commit_medium-red": {
      fontCharacter: "\\f01f",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    _github: {
      fontCharacter: "\\f00a",
      fontId: "octicons",
      fontSize: "114%"
    },
    _gitlab: {
      fontCharacter: "\\ea3c",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gitlab_medium-orange": {
      fontCharacter: "\\ea3c",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_git_medium-red": {
      fontCharacter: "\\e602",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_git-merge_medium-red": {
      fontCharacter: "\\f023",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_gitpod_medium-blue": {
      fontCharacter: "\\1d5a6",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_glade_medium-green": {
      fontCharacter: "\\e938",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_glide_light-orange": {
      fontCharacter: "\\eacb",
      fontColor: "#e1ad83",
      fontId: "fi",
      fontSize: "121%"
    },
    "_gltf_medium-green": {
      fontCharacter: "\\eaa7",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_glyphs_medium-green": {
      fontCharacter: "G",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gml_medium-green": {
      fontCharacter: "\\e975",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gn_dark-blue": {
      fontCharacter: "\\ea25",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gn_medium-blue": {
      fontCharacter: "\\ea25",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gnu_dark-red": {
      fontCharacter: "\\e679",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gnu_medium-red": {
      fontCharacter: "\\e679",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gnuplot_medium-red": {
      fontCharacter: "\\1f4c8",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_godot_dark-blue": {
      fontCharacter: "\\e974",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_godot_dark-cyan": {
      fontCharacter: "\\e974",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_godot_medium-blue": {
      fontCharacter: "\\e974",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_godot_medium-cyan": {
      fontCharacter: "\\e974",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_godot_medium-green": {
      fontCharacter: "\\e974",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_godot_medium-red": {
      fontCharacter: "\\e974",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_golo_medium-orange": {
      fontCharacter: "\\e979",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_go_medium-blue": {
      fontCharacter: "\\eaae",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "129%"
    },
    "_goreleaser_medium-blue": {
      fontCharacter: "\\eb90",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "129%"
    },
    "_gosu_dark-blue": {
      fontCharacter: "\\e97a",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gosu_dark-green": {
      fontCharacter: "\\e97a",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gosu_medium-blue": {
      fontCharacter: "\\e97a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gosu_medium-green": {
      fontCharacter: "\\e97a",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_gql-codegen_dark-pink": {
      fontCharacter: "\\ebae",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "129%"
    },
    "_gradle_dark-purple": {
      fontCharacter: "\\e903",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gradle_medium-blue": {
      fontCharacter: "\\e903",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_graph_dark-blue": {
      fontCharacter: "\\f043",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_grapher_dark-green": {
      fontCharacter: "\\1f4c9",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_grapher_medium-green": {
      fontCharacter: "\\1f4c9",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_graph_light-green": {
      fontCharacter: "\\f043",
      fontColor: "#b2c38b",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_graph_light-red": {
      fontCharacter: "\\f043",
      fontColor: "#c97071",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_graph_medium-blue": {
      fontCharacter: "\\f043",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_graph_medium-cyan": {
      fontCharacter: "\\f043",
      fontColor: "#75b5aa",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_graph_medium-green": {
      fontCharacter: "\\f043",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_graphql_medium-pink": {
      fontCharacter: "\\e97c",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "107%"
    },
    "_graphql_medium-purple": {
      fontCharacter: "\\e97c",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_graphql_medium-red": {
      fontCharacter: "\\e97c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_graphviz_dark-cyan": {
      fontCharacter: "\\e97d",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "121%"
    },
    "_graphviz_medium-blue": {
      fontCharacter: "\\e97d",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_graphviz_medium-orange": {
      fontCharacter: "\\e97d",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_greenkeeper_medium-green": {
      fontCharacter: "\\eb0c",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_groovy_light-blue": {
      fontCharacter: "\\e904",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "121%"
    },
    "_grunt_medium-blue": {
      fontCharacter: "\\e611",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_grunt_medium-maroon": {
      fontCharacter: "\\e611",
      fontColor: "#8f5536",
      fontId: "fi"
    },
    "_grunt_medium-yellow": {
      fontCharacter: "\\e611",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_gulp_medium-blue": {
      fontCharacter: "\\e610",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gulp_medium-maroon": {
      fontCharacter: "\\e610",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gulp_medium-red": {
      fontCharacter: "\\e610",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_gvdesign_medium-yellow": {
      fontCharacter: "\\eb02",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hack_medium-orange": {
      fontCharacter: "\\e9ce",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hack_medium-red": {
      fontCharacter: "\\e9ce",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hack_medium-yellow": {
      fontCharacter: "\\e9ce",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_haml_medium-maroon": {
      fontCharacter: "\\f15b",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_haml_medium-red": {
      fontCharacter: "\\f15b",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_haml_medium-yellow": {
      fontCharacter: "\\f15b",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_harbour_dark-blue": {
      fontCharacter: "\\e97b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_hashicorp_dark-purple": {
      fontCharacter: "\\e97e",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hashicorp_medium-cyan": {
      fontCharacter: "\\e97e",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_haskell_dark-blue": {
      fontCharacter: "\\f121",
      fontColor: "#46788d",
      fontId: "mf",
      fontSize: "114%"
    },
    "_haskell_dark-purple": {
      fontCharacter: "\\f121",
      fontColor: "#825078",
      fontId: "mf",
      fontSize: "114%"
    },
    "_haskell_medium-blue": {
      fontCharacter: "\\f121",
      fontColor: "#6a9fb5",
      fontId: "mf",
      fontSize: "114%"
    },
    "_haskell_medium-maroon": {
      fontCharacter: "\\f121",
      fontColor: "#8f5536",
      fontId: "mf",
      fontSize: "114%"
    },
    "_haskell_medium-purple": {
      fontCharacter: "\\f121",
      fontColor: "#aa759f",
      fontId: "mf",
      fontSize: "114%"
    },
    "_haxedevelop_dark-blue": {
      fontCharacter: "\\ea3b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_haxedevelop_medium-blue": {
      fontCharacter: "\\ea3b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_haxe_medium-orange": {
      fontCharacter: "\\e907",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_helix_medium-blue": {
      fontCharacter: "\\2695",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_heroku_dark-purple": {
      fontCharacter: "\\e67b",
      fontColor: "#825078",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_heroku_light-purple": {
      fontCharacter: "\\e67b",
      fontColor: "#c7a4c0",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_heroku_medium-purple": {
      fontCharacter: "\\e67b",
      fontColor: "#aa759f",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_hg_dark-cyan": {
      fontCharacter: "\\263f",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hg_dark-grey": {
      fontCharacter: "\\263f",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hg_medium-cyan": {
      fontCharacter: "\\263f",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hg_medium-grey": {
      fontCharacter: "\\263f",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hie_dark-purple": {
      fontCharacter: "\\ebab",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "129%"
    },
    "_hjson_medium-green": {
      fontCharacter: "\\eac2",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_hoplon_medium-red": {
      fontCharacter: "\\ea4d",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_houdini_medium-cyan": {
      fontCharacter: "\\1f300",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_houdini_medium-orange": {
      fontCharacter: "\\1f300",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_houndci_medium-purple": {
      fontCharacter: "\\eaaf",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hp_medium-blue": {
      fontCharacter: "\\33cb",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_html5_dark-blue": {
      fontCharacter: "\\f13b",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_dark-orange": {
      fontCharacter: "\\f13b",
      fontColor: "#a35f27",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_dark-purple": {
      fontCharacter: "\\f13b",
      fontColor: "#825078",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_dark-red": {
      fontCharacter: "\\f13b",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_medium-blue": {
      fontCharacter: "\\f13b",
      fontColor: "#6a9fb5",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_medium-cyan": {
      fontCharacter: "\\f13b",
      fontColor: "#75b5aa",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_medium-green": {
      fontCharacter: "\\f13b",
      fontColor: "#90a959",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_medium-maroon": {
      fontCharacter: "\\f13b",
      fontColor: "#8f5536",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_medium-orange": {
      fontCharacter: "\\f13b",
      fontColor: "#d28445",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_medium-purple": {
      fontCharacter: "\\f13b",
      fontColor: "#aa759f",
      fontId: "fa",
      fontSize: "107%"
    },
    "_html5_medium-red": {
      fontCharacter: "\\f13b",
      fontColor: "#ac4142",
      fontId: "fa",
      fontSize: "107%"
    },
    "_husky_dark-blue": {
      fontCharacter: "\\1f436",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_dark-green": {
      fontCharacter: "\\1f436",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_dark-orange": {
      fontCharacter: "\\1f436",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_dark-red": {
      fontCharacter: "\\1f436",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_dark-yellow": {
      fontCharacter: "\\1f436",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_medium-blue": {
      fontCharacter: "\\1f436",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_medium-green": {
      fontCharacter: "\\1f436",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_medium-orange": {
      fontCharacter: "\\1f436",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_medium-red": {
      fontCharacter: "\\1f436",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_husky_medium-yellow": {
      fontCharacter: "\\1f436",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_hy_dark-blue": {
      fontCharacter: "\\e97f",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_hygen_medium-pink": {
      fontCharacter: "\\1f4c3",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "114%"
    },
    "_hyper_dark-purple": {
      fontCharacter: "\\eb37",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_icomoon_medium-purple": {
      fontCharacter: "\\eaea",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_idl_medium-blue": {
      fontCharacter: "\\e947",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "129%"
    },
    "_idris_dark-red": {
      fontCharacter: "\\e983",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_idris_medium-maroon": {
      fontCharacter: "\\e983",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_igorpro_dark-red": {
      fontCharacter: "\\e980",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_image_dark-blue": {
      fontCharacter: "\\f012",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_dark-cyan": {
      fontCharacter: "\\f012",
      fontColor: "#4d9085",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_dark-green": {
      fontCharacter: "\\f012",
      fontColor: "#66783e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_dark-grey": {
      fontCharacter: "\\f012",
      fontColor: "#7f7f7f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_dark-maroon": {
      fontCharacter: "\\f012",
      fontColor: "#7c4426",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_dark-orange": {
      fontCharacter: "\\f012",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_dark-purple": {
      fontCharacter: "\\f012",
      fontColor: "#825078",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_dark-red": {
      fontCharacter: "\\f012",
      fontColor: "#be2f31",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_light-blue": {
      fontCharacter: "\\f012",
      fontColor: "#9dc0ce",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_light-purple": {
      fontCharacter: "\\f012",
      fontColor: "#c7a4c0",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-blue": {
      fontCharacter: "\\f012",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-cyan": {
      fontCharacter: "\\f012",
      fontColor: "#75b5aa",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-green": {
      fontCharacter: "\\f012",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-grey": {
      fontCharacter: "\\f012",
      fontColor: "#7f7f7f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-orange": {
      fontCharacter: "\\f012",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-pink": {
      fontCharacter: "\\f012",
      fontColor: "#ff00cc",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-purple": {
      fontCharacter: "\\f012",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-red": {
      fontCharacter: "\\f012",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_image_medium-yellow": {
      fontCharacter: "\\f012",
      fontColor: "#f4bf75",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_imba_medium-yellow": {
      fontCharacter: "\\26ff",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_imgbot_dark-cyan": {
      fontCharacter: "\\ebbf",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "121%"
    },
    "_indesign_dark-blue": {
      fontCharacter: "\\e9f4",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_indesign_dark-pink": {
      fontCharacter: "\\e9f4",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_indesign_dark-purple": {
      fontCharacter: "\\e9f4",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_indesign_medium-purple": {
      fontCharacter: "\\e9f4",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_infopath_dark-purple": {
      fontCharacter: "\\ea35",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_inform7_dark-blue": {
      fontCharacter: "\\e984",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_inform7_medium-blue": {
      fontCharacter: "\\e984",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ink_dark-blue": {
      fontCharacter: "\\eace",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ink_dark-purple": {
      fontCharacter: "\\eace",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_inkscape_dark-purple": {
      fontCharacter: "\\ea8e",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_inno_dark-blue": {
      fontCharacter: "\\e985",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_inno_medium-cyan": {
      fontCharacter: "\\e985",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_io_dark-purple": {
      fontCharacter: "\\e981",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "93%"
    },
    "_ioke_medium-red": {
      fontCharacter: "\\e982",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ionic_medium-blue": {
      fontCharacter: "\\f14b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_isabelle_dark-blue": {
      fontCharacter: "\\e945",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_isabelle_dark-red": {
      fontCharacter: "\\e945",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_istanbul_dark-blue": {
      fontCharacter: "\\1f54c",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_istanbul_dark-green": {
      fontCharacter: "\\1f54c",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_istanbul_dark-yellow": {
      fontCharacter: "\\1f54c",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_istanbul_medium-blue": {
      fontCharacter: "\\1f54c",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_istanbul_medium-green": {
      fontCharacter: "\\1f54c",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_istanbul_medium-orange": {
      fontCharacter: "\\1f54c",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_istanbul_medium-yellow": {
      fontCharacter: "\\1f54c",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_jade_medium-red": {
      fontCharacter: "\\e90d",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_jake_dark-maroon": {
      fontCharacter: "\\e948",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jake_dark-yellow": {
      fontCharacter: "\\e948",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jake_medium-maroon": {
      fontCharacter: "\\e948",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jake_medium-yellow": {
      fontCharacter: "\\e948",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jasmine_dark-purple": {
      fontCharacter: "\\ea3a",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jasmine_medium-purple": {
      fontCharacter: "\\ea3a",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_java_medium-maroon": {
      fontCharacter: "\\f126",
      fontColor: "#8f5536",
      fontId: "mf",
      fontSize: "114%"
    },
    "_java_medium-purple": {
      fontCharacter: "\\f126",
      fontColor: "#aa759f",
      fontId: "mf",
      fontSize: "114%"
    },
    "_jekyll_medium-green": {
      fontCharacter: "\\e60d",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_jekyll_medium-red": {
      fontCharacter: "\\e60d",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_jenkins_dark-red": {
      fontCharacter: "\\e667",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "129%"
    },
    "_jenkins_medium-red": {
      fontCharacter: "\\e667",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "129%"
    },
    "_jest_dark-green": {
      fontCharacter: "\\ea39",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jest_dark-yellow": {
      fontCharacter: "\\ea39",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jest_medium-blue": {
      fontCharacter: "\\ea39",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jest_medium-green": {
      fontCharacter: "\\ea39",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jest_medium-red": {
      fontCharacter: "\\ea39",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jest_medium-yellow": {
      fontCharacter: "\\ea39",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jinja_dark-red": {
      fontCharacter: "\\e944",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jinja_medium-red": {
      fontCharacter: "\\e944",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jison_medium-blue": {
      fontCharacter: "\\ea55",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jison_medium-cyan": {
      fontCharacter: "\\ea55",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_j_light-blue": {
      fontCharacter: "\\e937",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "93%"
    },
    "_jolie_dark-pink": {
      fontCharacter: "\\ea75",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jolie_medium-red": {
      fontCharacter: "\\ea75",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jquery_dark-blue": {
      fontCharacter: "\\e650",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_jscpd_medium-cyan": {
      fontCharacter: "\\eb95",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_jscpd_medium-grey": {
      fontCharacter: "\\eb95",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_jscpd_medium-orange": {
      fontCharacter: "\\eb95",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_js_dark-blue": {
      fontCharacter: "\\f129",
      fontColor: "#46788d",
      fontId: "mf"
    },
    "_js_dark-green": {
      fontCharacter: "\\f129",
      fontColor: "#66783e",
      fontId: "mf"
    },
    "_js_dark-maroon": {
      fontCharacter: "\\f129",
      fontColor: "#7c4426",
      fontId: "mf"
    },
    "_js_dark-orange": {
      fontCharacter: "\\f129",
      fontColor: "#a35f27",
      fontId: "mf"
    },
    "_js_dark-pink": {
      fontCharacter: "\\f129",
      fontColor: "#cc00a3",
      fontId: "mf"
    },
    "_js_dark-purple": {
      fontCharacter: "\\f129",
      fontColor: "#825078",
      fontId: "mf"
    },
    "_js_dark-red": {
      fontCharacter: "\\f129",
      fontColor: "#be2f31",
      fontId: "mf"
    },
    "_js_dark-yellow": {
      fontCharacter: "\\f129",
      fontColor: "#ee9e2e",
      fontId: "mf"
    },
    "_js_medium-blue": {
      fontCharacter: "\\f129",
      fontColor: "#6a9fb5",
      fontId: "mf"
    },
    "_js_medium-cyan": {
      fontCharacter: "\\f129",
      fontColor: "#75b5aa",
      fontId: "mf"
    },
    "_js_medium-green": {
      fontCharacter: "\\f129",
      fontColor: "#90a959",
      fontId: "mf"
    },
    "_js_medium-maroon": {
      fontCharacter: "\\f129",
      fontColor: "#8f5536",
      fontId: "mf"
    },
    "_js_medium-orange": {
      fontCharacter: "\\f129",
      fontColor: "#d28445",
      fontId: "mf"
    },
    "_js_medium-pink": {
      fontCharacter: "\\f129",
      fontColor: "#ff00cc",
      fontId: "mf"
    },
    "_js_medium-purple": {
      fontCharacter: "\\f129",
      fontColor: "#aa759f",
      fontId: "mf"
    },
    "_js_medium-red": {
      fontCharacter: "\\f129",
      fontColor: "#ac4142",
      fontId: "mf"
    },
    "_js_medium-yellow": {
      fontCharacter: "\\f129",
      fontColor: "#f4bf75",
      fontId: "mf"
    },
    "_json5_dark-yellow": {
      fontCharacter: "\\2478",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_json_dark-blue": {
      fontCharacter: "\\eabe",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jsonld_medium-blue": {
      fontCharacter: "\\e958",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_json_medium-blue": {
      fontCharacter: "\\eabe",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_json_medium-cyan": {
      fontCharacter: "\\eabe",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jsonnet_dark-blue": {
      fontCharacter: "\\eb1e",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jsonnet_medium-blue": {
      fontCharacter: "\\eb1e",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jsx_dark-blue": {
      fontCharacter: "\\e9e6",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_jsx_medium-blue": {
      fontCharacter: "\\e9e6",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_julia_medium-purple": {
      fontCharacter: "\\26ec",
      fontColor: "#aa759f",
      fontId: "fi"
    },
    "_junos_medium-blue": {
      fontCharacter: "\\ea81",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_junos_medium-cyan": {
      fontCharacter: "\\ea81",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_jupyter_dark-cyan": {
      fontCharacter: "\\e987",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_jupyter_dark-orange": {
      fontCharacter: "\\e987",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_kaitai_medium-maroon": {
      fontCharacter: "\\30ab",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_karma_medium-cyan": {
      fontCharacter: "\\e9cd",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_karma_medium-maroon": {
      fontCharacter: "\\e9cd",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_keybase_medium-blue": {
      fontCharacter: "\\eaf8",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_key_dark-green": {
      fontCharacter: "\\f049",
      fontColor: "#66783e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_key_medium-blue": {
      fontCharacter: "\\f049",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_key_medium-green": {
      fontCharacter: "\\f049",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_key_medium-orange": {
      fontCharacter: "\\f049",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_key_medium-purple": {
      fontCharacter: "\\f049",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_key_medium-yellow": {
      fontCharacter: "\\f049",
      fontColor: "#f4bf75",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_keynote_dark-blue": {
      fontCharacter: "\\e9e5",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_keynote_medium-blue": {
      fontCharacter: "\\e9e5",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_khronos_medium-orange": {
      fontCharacter: "\\e9f8",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kibo_dark-orange": {
      fontCharacter: "\\eba9",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kibo_light-yellow": {
      fontCharacter: "\\eba9",
      fontColor: "#fae0bc",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_dark-blue": {
      fontCharacter: "\\ea4c",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_dark-green": {
      fontCharacter: "\\ea4c",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_dark-red": {
      fontCharacter: "\\ea4c",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_medium-cyan": {
      fontCharacter: "\\ea4c",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_medium-green": {
      fontCharacter: "\\ea4c",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_medium-maroon": {
      fontCharacter: "\\ea4c",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_medium-orange": {
      fontCharacter: "\\ea4c",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kicad_medium-red": {
      fontCharacter: "\\ea4c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kitchenci_medium-green": {
      fontCharacter: "\\ea38",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kivy_dark-maroon": {
      fontCharacter: "\\e901",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kos_dark-green": {
      fontCharacter: "k",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_kotlin_dark-blue": {
      fontCharacter: "\\e989",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_kotlin_medium-blue": {
      fontCharacter: "\\e989",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_kotlin_medium-orange": {
      fontCharacter: "\\e989",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_krl_medium-blue": {
      fontCharacter: "\\e988",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_kubernetes_medium-blue": {
      fontCharacter: "\\2388",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_kusto_medium-blue": {
      fontCharacter: "\\eb9a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kx_dark-purple": {
      fontCharacter: "\\ea9b",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_kx_medium-blue": {
      fontCharacter: "\\ea9b",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_labview_dark-blue": {
      fontCharacter: "\\e98a",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_laravel_medium-orange": {
      fontCharacter: "\\e63f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lark_dark-blue": {
      fontCharacter: "\\1316b",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lasso_dark-blue": {
      fontCharacter: "\\e98c",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lasso_dark-red": {
      fontCharacter: "\\e98c",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lasso_medium-blue": {
      fontCharacter: "\\e98c",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lasso_medium-purple": {
      fontCharacter: "\\e98c",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lasso_medium-red": {
      fontCharacter: "\\e98c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_latino_dark-blue": {
      fontCharacter: "\\1f426",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_latino_medium-blue": {
      fontCharacter: "\\1f426",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_lean_dark-purple": {
      fontCharacter: "L",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "93%"
    },
    "_lean_dark-red": {
      fontCharacter: "L",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "93%"
    },
    "_lefthook_medium-red": {
      fontCharacter: "\\eb8b",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    _lein: {
      fontCharacter: "\\f105",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lektor_dark-purple": {
      fontCharacter: "\\eab9",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lektor_medium-orange": {
      fontCharacter: "\\eab9",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lerna_dark-blue": {
      fontCharacter: "\\ea37",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lerna_medium-blue": {
      fontCharacter: "\\ea37",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lex_dark-red": {
      fontCharacter: "\\101ef",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lex_medium-cyan": {
      fontCharacter: "\\101ef",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lfe_dark-red": {
      fontCharacter: "\\e94c",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lgtm_dark-purple": {
      fontCharacter: "\\1f435",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_lighthouse_dark-blue": {
      fontCharacter: "\\26ef",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lightwave_medium-blue": {
      fontCharacter: "\\e9fb",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lightwave_medium-red": {
      fontCharacter: "\\e9fb",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lilypond_dark-green": {
      fontCharacter: "\\1f4ae",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lilypond_medium-green": {
      fontCharacter: "\\1f4ae",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lime_medium-green": {
      fontCharacter: "\\ea36",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_link_dark-blue": {
      fontCharacter: "\\f0b0",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_link_medium-blue": {
      fontCharacter: "\\f0b0",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_linqpad_dark-pink": {
      fontCharacter: "\\1d6cc",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lisp_dark-purple": {
      fontCharacter: "\\e908",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_lisp_dark-red": {
      fontCharacter: "\\e908",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_lisp_medium-blue": {
      fontCharacter: "\\e908",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_lisp_medium-maroon": {
      fontCharacter: "\\e908",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_lisp_medium-purple": {
      fontCharacter: "\\e908",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_lisp_medium-red": {
      fontCharacter: "\\e908",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_llvm_dark-green": {
      fontCharacter: "\\e91d",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_llvm_dark-red": {
      fontCharacter: "\\e91d",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_llvm_dark-yellow": {
      fontCharacter: "\\e91d",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_llvm_medium-red": {
      fontCharacter: "\\e91d",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_llvm_medium-yellow": {
      fontCharacter: "\\e91d",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_logtalk_medium-red": {
      fontCharacter: "\\e98d",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lolcode_dark-red": {
      fontCharacter: "\\1f63a",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_lookml_medium-purple": {
      fontCharacter: "\\e98e",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ls_dark-blue": {
      fontCharacter: "\\e914",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_lsl_dark-cyan": {
      fontCharacter: "\\e98b",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_lsl_medium-cyan": {
      fontCharacter: "\\e98b",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ls_medium-blue": {
      fontCharacter: "\\e914",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_ls_medium-green": {
      fontCharacter: "\\e914",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_lua_dark-blue": {
      fontCharacter: "\\e91b",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_lua_dark-green": {
      fontCharacter: "\\e91b",
      fontColor: "#66783e",
      fontId: "fi"
    },
    "_lua_dark-purple": {
      fontCharacter: "\\e91b",
      fontColor: "#825078",
      fontId: "fi"
    },
    "_lua_dark-red": {
      fontCharacter: "\\e91b",
      fontColor: "#be2f31",
      fontId: "fi"
    },
    "_lua_medium-blue": {
      fontCharacter: "\\e91b",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_lua_medium-green": {
      fontCharacter: "\\e91b",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_lua_medium-purple": {
      fontCharacter: "\\e91b",
      fontColor: "#aa759f",
      fontId: "fi"
    },
    "_lync_dark-blue": {
      fontCharacter: "\\ead9",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_macaulay2_dark-cyan": {
      fontCharacter: "\\2644",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "121%"
    },
    "_macaulay2_light-cyan": {
      fontCharacter: "\\2644",
      fontColor: "#a7d0c9",
      fontId: "fi",
      fontSize: "121%"
    },
    "_mail_medium-blue": {
      fontId: "octicons",
      fontCharacter: "\\f03b",
      fontSize: "114%",
      fontColor: "#6a9fb5"
    },
    "_mail_medium-red": {
      fontId: "octicons",
      fontCharacter: "\\f03b",
      fontSize: "114%",
      fontColor: "#ac4142"
    },
    "_mako_dark-blue": {
      fontCharacter: "\\e98f",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_manpage_dark-green": {
      fontCharacter: "\\e936",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_manpage_dark-maroon": {
      fontCharacter: "\\e936",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_mapbox_medium-cyan": {
      fontCharacter: "\\e941",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "93%"
    },
    "_markdownlint_dark-cyan": {
      fontCharacter: "\\f0c9",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "121%"
    },
    "_markdownlint_medium-red": {
      fontCharacter: "\\f0c9",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_markdown_medium-blue": {
      fontCharacter: "\\f0c9",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_markdown_medium-purple": {
      fontCharacter: "\\f0c9",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_marko_medium-blue": {
      fontCharacter: "\\e920",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "129%"
    },
    "_marko_medium-maroon": {
      fontCharacter: "\\e920",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "129%"
    },
    "_materialize_light-red": {
      fontCharacter: "\\e6b6",
      fontColor: "#c97071",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_mathematica_dark-orange": {
      fontCharacter: "\\e990",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mathematica_dark-red": {
      fontCharacter: "\\e990",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mathematica_medium-maroon": {
      fontCharacter: "\\e990",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mathematica_medium-orange": {
      fontCharacter: "\\e990",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mathjax_dark-green": {
      fontCharacter: "\\ea06",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_matlab_dark-maroon": {
      fontCharacter: "\\e991",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_matlab_dark-purple": {
      fontCharacter: "\\e991",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_matlab_dark-red": {
      fontCharacter: "\\e991",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_matlab_medium-cyan": {
      fontCharacter: "\\e991",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_matlab_medium-maroon": {
      fontCharacter: "\\e991",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_matlab_medium-red": {
      fontCharacter: "\\e991",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_matlab_medium-yellow": {
      fontCharacter: "\\e991",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_max_dark-purple": {
      fontCharacter: "\\e993",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_max_medium-blue": {
      fontCharacter: "\\e993",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_max_medium-green": {
      fontCharacter: "\\e993",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_max_medium-purple": {
      fontCharacter: "\\e993",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_max_medium-red": {
      fontCharacter: "\\e993",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_maxscript_dark-blue": {
      fontCharacter: "\\e900",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_maxscript_dark-cyan": {
      fontCharacter: "\\e900",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_maxscript_dark-purple": {
      fontCharacter: "\\e900",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_maxscript_medium-cyan": {
      fontCharacter: "\\e900",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_maxscript_medium-red": {
      fontCharacter: "\\e900",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_maya_dark-blue": {
      fontCharacter: "\\e9f6",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_maya_dark-cyan": {
      fontCharacter: "\\e9f6",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_maya_dark-purple": {
      fontCharacter: "\\e9f6",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mdx_medium-orange": {
      fontCharacter: "\\eab7",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mediawiki_medium-orange": {
      fontCharacter: "\\e954",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mediawiki_medium-yellow": {
      fontCharacter: "\\e954",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mercury_medium-cyan": {
      fontCharacter: "\\e994",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mermaid_medium-blue": {
      fontCharacter: "\\eb84",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_meson_medium-green": {
      fontCharacter: "\\ea54",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_metal_dark-cyan": {
      fontCharacter: "M",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_metapost_dark-green": {
      fontCharacter: "\\1d5ac",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_metapost_dark-red": {
      fontCharacter: "\\1d5ac",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_meteor_dark-orange": {
      fontCharacter: "\\e6a5",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_minecraft_dark-green": {
      fontCharacter: "\\e9dc",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_minecraft_light-green": {
      fontCharacter: "\\e9dc",
      fontColor: "#b2c38b",
      fontId: "fi",
      fontSize: "107%"
    },
    "_minecraft_medium-blue": {
      fontCharacter: "\\e9dc",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_minecraft_medium-green": {
      fontCharacter: "\\e9dc",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_minizinc_dark-blue": {
      fontCharacter: "\\ea53",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_minizinc_medium-blue": {
      fontCharacter: "\\ea53",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_mint_medium-green": {
      fontCharacter: "\\1f33f",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mirah_light-blue": {
      fontCharacter: "\\e995",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_mirah_medium-blue": {
      fontCharacter: "\\e995",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_miranda_medium-red": {
      fontCharacter: "\\ea52",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mirc_medium-red": {
      fontCharacter: "\\eb3a",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mixin_medium-orange": {
      fontCharacter: "\\ebb9",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_mjml_medium-orange": {
      fontCharacter: "\\ea6f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_mjml_medium-red": {
      fontCharacter: "\\ea6f",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_mobile_dark-blue": {
      fontCharacter: "\\f10b",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "143%"
    },
    "_mobile_dark-red": {
      fontCharacter: "\\f10b",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "143%"
    },
    "_mocha_light-maroon": {
      fontCharacter: "\\26fe",
      fontColor: "#be7953",
      fontId: "fi",
      fontSize: "121%"
    },
    "_mocha_medium-maroon": {
      fontCharacter: "\\26fe",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_mocha_medium-red": {
      fontCharacter: "\\26fe",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_model_dark-blue": {
      fontCharacter: "\\e9e8",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_dark-cyan": {
      fontCharacter: "\\e9e8",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_dark-green": {
      fontCharacter: "\\e9e8",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_dark-orange": {
      fontCharacter: "\\e9e8",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_dark-red": {
      fontCharacter: "\\e9e8",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_modelica_dark-red": {
      fontCharacter: "\\eaff",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_modelica_medium-red": {
      fontCharacter: "\\eaff",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_model_medium-blue": {
      fontCharacter: "\\e9e8",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_medium-cyan": {
      fontCharacter: "\\e9e8",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_medium-green": {
      fontCharacter: "\\e9e8",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_medium-orange": {
      fontCharacter: "\\e9e8",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_medium-purple": {
      fontCharacter: "\\e9e8",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_model_medium-red": {
      fontCharacter: "\\e9e8",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_modernweb_medium-blue": {
      fontCharacter: "\\eb9f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_modo_medium-cyan": {
      fontCharacter: "\\f01f",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_modula2_medium-blue": {
      fontCharacter: "\\e996",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_modula2_medium-green": {
      fontCharacter: "\\e996",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_modula3_dark-blue": {
      fontCharacter: "\\2778",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_modula3_dark-green": {
      fontCharacter: "\\2778",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_modula3_medium-blue": {
      fontCharacter: "\\2778",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_modula3_medium-green": {
      fontCharacter: "\\2778",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_modula3_medium-red": {
      fontCharacter: "\\2778",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_moho_medium-blue": {
      fontCharacter: "\\eaee",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_moho_medium-maroon": {
      fontCharacter: "\\eaee",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_moho_medium-orange": {
      fontCharacter: "\\eaee",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_moho_medium-purple": {
      fontCharacter: "\\eaee",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_moho_medium-yellow": {
      fontCharacter: "\\eaee",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_moleculer_medium-blue": {
      fontCharacter: "\\eb0e",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_moment_medium-cyan": {
      fontCharacter: "\\1f558",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_monkey_medium-maroon": {
      fontCharacter: "\\e997",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "129%"
    },
    "_monotone_dark-purple": {
      fontCharacter: "\\1f400",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "129%"
    },
    "_moon_medium-yellow": {
      fontCharacter: "\\f186",
      fontColor: "#f4bf75",
      fontId: "fa",
      fontSize: "114%"
    },
    "_mruby_medium-red": {
      fontCharacter: "\\ea18",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_msproject_dark-green": {
      fontCharacter: "\\eae8",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_msproject_medium-green": {
      fontCharacter: "\\eae8",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_msql_medium-purple": {
      fontCharacter: "\\f136",
      fontColor: "#aa759f",
      fontId: "mf",
      fontSize: "107%"
    },
    "_mupad_medium-red": {
      fontCharacter: "\\e9ca",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_music_dark-blue": {
      fontCharacter: "\\f001",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "107%"
    },
    "_music_dark-red": {
      fontCharacter: "\\f001",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "107%"
    },
    "_music_medium-orange": {
      fontCharacter: "\\f001",
      fontColor: "#d28445",
      fontId: "fa",
      fontSize: "107%"
    },
    "_mustache_medium-blue": {
      fontCharacter: "\\e60f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_mustache_medium-orange": {
      fontCharacter: "\\e60f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_n64_dark-cyan": {
      fontCharacter: "n",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_n64_dark-green": {
      fontCharacter: "n",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nailpolish_dark-blue": {
      fontCharacter: "\\1f485",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nailpolish_dark-green": {
      fontCharacter: "\\1f485",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nailpolish_light-blue": {
      fontCharacter: "\\1f485",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nailpolish_medium-blue": {
      fontCharacter: "\\1f485",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nailpolish_medium-green": {
      fontCharacter: "\\1f485",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nailpolish_medium-yellow": {
      fontCharacter: "\\1f485",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nanoc_medium-red": {
      fontCharacter: "\\ea51",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nano_medium-blue": {
      fontCharacter: "\\ea76",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nant_medium-orange": {
      fontCharacter: "\\e9e1",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nasm_dark-blue": {
      fontCharacter: "\\ea72",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ndepend_medium-blue": {
      fontCharacter: "\\eab4",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_neko_dark-orange": {
      fontCharacter: "\\ea05",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_neko_medium-orange": {
      fontCharacter: "\\ea05",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_neo4j_dark-blue": {
      fontCharacter: "\\eab3",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_neo4j_medium-blue": {
      fontCharacter: "\\eab3",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_neon_medium-grey": {
      fontCharacter: "\\eb8e",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nessus_dark-cyan": {
      fontCharacter: "\\23e3",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nessus_medium-cyan": {
      fontCharacter: "\\23e3",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nestjs_medium-red": {
      fontCharacter: "\\eac9",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_netlify_dark-blue": {
      fontCharacter: "\\eabf",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_netlogo_medium-red": {
      fontCharacter: "\\e99c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nextflow_dark-green": {
      fontCharacter: "\\eaa5",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nextflow_medium-green": {
      fontCharacter: "\\eaa5",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nextjs_dark-grey": {
      fontCharacter: "\\24c3",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nginx_dark-green": {
      fontCharacter: "\\f146b",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nginx_medium-green": {
      fontCharacter: "\\f146b",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nib_dark-orange": {
      fontCharacter: "\\2712",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nickle_dark-grey": {
      fontCharacter: "\\a2",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nickle_medium-grey": {
      fontCharacter: "\\a2",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nightwatch_dark-maroon": {
      fontCharacter: "\\eb08",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nimble_medium-grey": {
      fontCharacter: "\\eb85",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nimrod_medium-green": {
      fontCharacter: "\\e998",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nit_dark-green": {
      fontCharacter: "\\e999",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nix_medium-cyan": {
      fontCharacter: "\\e99a",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nmap_dark-blue": {
      fontCharacter: "\\e94d",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_node_dark-green": {
      fontCharacter: "\\e618",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_node_medium-green": {
      fontCharacter: "\\e618",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_nodemon_medium-green": {
      fontCharacter: "\\ea26",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nokogiri_medium-red": {
      fontCharacter: "\\92f8",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nomad_medium-green": {
      fontCharacter: "\\ea96",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_noon_dark-grey": {
      fontCharacter: "\\eb33",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_normalize_medium-red": {
      fontCharacter: "\\ea04",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_npm_medium-red": {
      fontCharacter: "\\e91c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_nsis_dark-cyan": {
      fontCharacter: "\\ea1e",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nsis_medium-purple": {
      fontCharacter: "\\ea1e",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nsri-alt_medium-green": {
      fontCharacter: "\\eb2b",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nsri_dark-green": {
      fontCharacter: "\\eb2f",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nsri_medium-green": {
      fontCharacter: "\\eb2f",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nuget_dark-green": {
      fontCharacter: "\\e9d9",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nuget_dark-purple": {
      fontCharacter: "\\e9d9",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nuget_medium-blue": {
      fontCharacter: "\\e9d9",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nuget_medium-green": {
      fontCharacter: "\\e9d9",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nuget_medium-purple": {
      fontCharacter: "\\e9d9",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_numpy_dark-blue": {
      fontCharacter: "\\eba8",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_numpy_dark-cyan": {
      fontCharacter: "\\eba8",
      fontColor: "#4d9085",
      fontId: "fi"
    },
    "_numpy_medium-blue": {
      fontCharacter: "\\eba8",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_numpy_medium-cyan": {
      fontCharacter: "\\eba8",
      fontColor: "#75b5aa",
      fontId: "fi"
    },
    "_numpy_medium-orange": {
      fontCharacter: "\\eba8",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_nunjucks_dark-green": {
      fontCharacter: "\\e953",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nuxt_medium-cyan": {
      fontCharacter: "\\eaca",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nvidia_dark-green": {
      fontCharacter: "\\e95d",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nvidia_medium-green": {
      fontCharacter: "\\e95d",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_nwscript_dark-blue": {
      fontCharacter: "\\23ff",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_nwscript_dark-red": {
      fontCharacter: "\\23ff",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_nwscript_medium-maroon": {
      fontCharacter: "\\23ff",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_nxc_medium-orange": {
      fontCharacter: "\\ea6b",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_nx_dark-blue": {
      fontCharacter: "\\eb9c",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_oberon_medium-purple": {
      fontCharacter: "\\eb3f",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_objc_dark-blue": {
      fontCharacter: "\\f13e",
      fontColor: "#46788d",
      fontId: "mf",
      fontSize: "114%"
    },
    "_objc_dark-green": {
      fontCharacter: "\\f13e",
      fontColor: "#66783e",
      fontId: "mf",
      fontSize: "114%"
    },
    "_objc_dark-red": {
      fontCharacter: "\\f13e",
      fontColor: "#be2f31",
      fontId: "mf",
      fontSize: "114%"
    },
    "_objc_medium-blue": {
      fontCharacter: "\\f13e",
      fontColor: "#6a9fb5",
      fontId: "mf",
      fontSize: "114%"
    },
    "_objj_dark-orange": {
      fontCharacter: "\\e99e",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_objj_dark-red": {
      fontCharacter: "\\e99e",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ocaml_dark-green": {
      fontCharacter: "\\e91a",
      fontColor: "#66783e",
      fontId: "fi"
    },
    "_ocaml_dark-orange": {
      fontCharacter: "\\e91a",
      fontColor: "#a35f27",
      fontId: "fi"
    },
    "_ocaml_dark-red": {
      fontCharacter: "\\e91a",
      fontColor: "#be2f31",
      fontId: "fi"
    },
    "_ocaml_dark-yellow": {
      fontCharacter: "\\e91a",
      fontColor: "#ee9e2e",
      fontId: "fi"
    },
    "_ocaml_medium-green": {
      fontCharacter: "\\e91a",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_ocaml_medium-orange": {
      fontCharacter: "\\e91a",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_ocaml_medium-red": {
      fontCharacter: "\\e91a",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_octave_dark-orange": {
      fontCharacter: "\\ea33",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_octave_medium-orange": {
      fontCharacter: "\\ea33",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_odin_medium-blue": {
      fontCharacter: "\\eb36",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ogone_dark-grey": {
      fontCharacter: "\\ebaa",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ogone_medium-grey": {
      fontCharacter: "\\ebaa",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_omnigraffle_dark-green": {
      fontCharacter: "\\ebaf",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_omnigraffle_medium-cyan": {
      fontCharacter: "\\ebaf",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_omnigraffle_medium-green": {
      fontCharacter: "\\ebaf",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_omnigraffle_medium-red": {
      fontCharacter: "\\ebaf",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_onenote_dark-purple": {
      fontCharacter: "\\e9eb",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ooc_medium-green": {
      fontCharacter: "\\e9cb",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_opa_medium-blue": {
      fontCharacter: "\\2601",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openbsd_dark-orange": {
      fontCharacter: "\\1f421",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "121%"
    },
    "_openbsd_medium-orange": {
      fontCharacter: "\\1f421",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_opencl_medium-red": {
      fontCharacter: "\\e99f",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_openexr_dark-pink": {
      fontCharacter: "\\1f127",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "114%"
    },
    "_openexr_medium-pink": {
      fontCharacter: "\\1f127",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "114%"
    },
    "_opengl_dark-cyan": {
      fontCharacter: "\\ea7a",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "129%"
    },
    "_openoffice_dark-blue": {
      fontCharacter: "\\e9e4",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_dark-cyan": {
      fontCharacter: "\\e9e4",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_dark-green": {
      fontCharacter: "\\e9e4",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_dark-orange": {
      fontCharacter: "\\e9e4",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_dark-pink": {
      fontCharacter: "\\e9e4",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_dark-purple": {
      fontCharacter: "\\e9e4",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_dark-red": {
      fontCharacter: "\\e9e4",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_light-pink": {
      fontCharacter: "\\e9e4",
      fontColor: "#ff4ddb",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_medium-blue": {
      fontCharacter: "\\e9e4",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_medium-green": {
      fontCharacter: "\\e9e4",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_medium-maroon": {
      fontCharacter: "\\e9e4",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_medium-pink": {
      fontCharacter: "\\e9e4",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_medium-purple": {
      fontCharacter: "\\e9e4",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openoffice_medium-red": {
      fontCharacter: "\\e9e4",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openpolicy_medium-cyan": {
      fontCharacter: "\\eb39",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_openvms_medium-blue": {
      fontCharacter: "\\eac6",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_openvms_medium-orange": {
      fontCharacter: "\\eac6",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_openvpn_medium-orange": {
      fontCharacter: "\\eaf3",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_openzfs_dark-blue": {
      fontCharacter: "\\1d419",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_org_dark-green": {
      fontCharacter: "\\e917",
      fontColor: "#66783e",
      fontId: "fi"
    },
    "_osx_medium-red": {
      fontCharacter: "\\f141",
      fontColor: "#ac4142",
      fontId: "mf"
    },
    "_outlook_dark-blue": {
      fontCharacter: "\\eada",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_outlook_dark-cyan": {
      fontCharacter: "\\eada",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_outlook_dark-red": {
      fontCharacter: "\\eada",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_outlook_medium-blue": {
      fontCharacter: "\\eada",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_outlook_medium-maroon": {
      fontCharacter: "\\eada",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_outlook_medium-red": {
      fontCharacter: "\\eada",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_owl_dark-blue": {
      fontCharacter: "\\e957",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ox_dark-blue": {
      fontCharacter: "\\e9a1",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ox_dark-cyan": {
      fontCharacter: "\\e9a1",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ox_dark-green": {
      fontCharacter: "\\e9a1",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ox_medium-blue": {
      fontCharacter: "\\e9a1",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ox_medium-cyan": {
      fontCharacter: "\\e9a1",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ox_medium-green": {
      fontCharacter: "\\e9a1",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_oxygene_dark-cyan": {
      fontCharacter: "\\e9bf",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_oxygene_medium-cyan": {
      fontCharacter: "\\e9bf",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_oz_medium-yellow": {
      fontCharacter: "\\e9be",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_p4_dark-purple": {
      fontCharacter: "\\ea50",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    _package: {
      fontCharacter: "\\f0c4",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_package_dark-orange": {
      fontCharacter: "\\f0c4",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_package_light-orange": {
      fontCharacter: "\\f0c4",
      fontColor: "#e1ad83",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_package_medium-blue": {
      fontCharacter: "\\f0c4",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_package_medium-green": {
      fontCharacter: "\\f0c4",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_package_medium-yellow": {
      fontCharacter: "\\f0c4",
      fontColor: "#f4bf75",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_paintcan_medium-purple": {
      fontId: "octicons",
      fontCharacter: "\\f0d1",
      fontSize: "114%",
      fontColor: "#aa759f"
    },
    "_pan_medium-red": {
      fontCharacter: "\\e9bd",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_papyrus_medium-green": {
      fontCharacter: "\\e9bc",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_parrot_dark-blue": {
      fontCharacter: "\\e9bb",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_parrot_dark-green": {
      fontCharacter: "\\e9bb",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_parrot_medium-green": {
      fontCharacter: "\\e9bb",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pascal_dark-blue": {
      fontCharacter: "\\e92a",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_dark-cyan": {
      fontCharacter: "\\e92a",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_dark-purple": {
      fontCharacter: "\\e92a",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_dark-red": {
      fontCharacter: "\\e92a",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_medium-blue": {
      fontCharacter: "\\e92a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_medium-cyan": {
      fontCharacter: "\\e92a",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_medium-maroon": {
      fontCharacter: "\\e92a",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_medium-purple": {
      fontCharacter: "\\e92a",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pascal_medium-red": {
      fontCharacter: "\\e92a",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_patch_medium-green": {
      fontCharacter: "\\e961",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_patreon_medium-orange": {
      fontCharacter: "\\eb42",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pawn_medium-orange": {
      fontCharacter: "\\265f",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_pcd_medium-green": {
      fontCharacter: "\\26c5",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pdf_medium-red": {
      fontId: "octicons",
      fontCharacter: "\\f014",
      fontSize: "114%",
      fontColor: "#ac4142"
    },
    "_peg_medium-maroon": {
      fontCharacter: "\\ea74",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_peg_medium-red": {
      fontCharacter: "\\ea74",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_perl6_dark-blue": {
      fontCharacter: "\\e96c",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_dark-cyan": {
      fontCharacter: "\\e96c",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_dark-green": {
      fontCharacter: "\\e96c",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_dark-pink": {
      fontCharacter: "\\e96c",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_dark-purple": {
      fontCharacter: "\\e96c",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_light-blue": {
      fontCharacter: "\\e96c",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_medium-blue": {
      fontCharacter: "\\e96c",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_medium-green": {
      fontCharacter: "\\e96c",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl6_medium-purple": {
      fontCharacter: "\\e96c",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_perl_dark-blue": {
      fontCharacter: "\\e669",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_perl_dark-purple": {
      fontCharacter: "\\e669",
      fontColor: "#825078",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_perl_medium-blue": {
      fontCharacter: "\\e669",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_perl_medium-purple": {
      fontCharacter: "\\e669",
      fontColor: "#aa759f",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_perl_medium-red": {
      fontCharacter: "\\e669",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_pgsql_dark-blue": {
      fontCharacter: "\\f14a",
      fontColor: "#46788d",
      fontId: "mf",
      fontSize: "114%"
    },
    "_phalcon_medium-cyan": {
      fontCharacter: "\\e94a",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_phoenix_medium-orange": {
      fontCharacter: "\\ea5f",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_phoenix_medium-red": {
      fontCharacter: "\\ea5f",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_photorec_dark-green": {
      fontCharacter: "\\ebc0",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_photorec_medium-green": {
      fontCharacter: "\\ebc0",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_php_dark-blue": {
      fontCharacter: "\\f147",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_php_medium-blue": {
      fontCharacter: "\\f147",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_php_medium-red": {
      fontCharacter: "\\f147",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_phpunit_medium-purple": {
      fontCharacter: "\\ea32",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_phraseapp_medium-blue": {
      fontCharacter: "\\eadb",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pickle_dark-cyan": {
      fontCharacter: "\\e9c4",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pico8_medium-red": {
      fontCharacter: "\\eabc",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_picolisp_medium-purple": {
      fontCharacter: "\\eb25",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_pike_dark-cyan": {
      fontCharacter: "\\e9b9",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pike_medium-blue": {
      fontCharacter: "\\e9b9",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pinescript_medium-green": {
      fontCharacter: "\\eb30",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pipenv_dark-blue": {
      fontCharacter: "\\1f381",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_platformio_medium-orange": {
      fontCharacter: "\\ea2c",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pnpm_dark-yellow": {
      fontCharacter: "\\eb86",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pnpm_medium-orange": {
      fontCharacter: "\\eb86",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pnpm_medium-yellow": {
      fontCharacter: "\\eb86",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pod_dark-blue": {
      fontCharacter: "\\ea84",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pogo_dark-orange": {
      fontCharacter: "\\e9b8",
      fontColor: "#a35f27",
      fontId: "fi"
    },
    "_pogo_medium-orange": {
      fontCharacter: "\\e9b8",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_pointwise_medium-blue": {
      fontCharacter: "\\e977",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_polymer_medium-purple": {
      fontCharacter: "\\ea2b",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pony_light-maroon": {
      fontCharacter: "\\e9b7",
      fontColor: "#be7953",
      fontId: "fi",
      fontSize: "114%"
    },
    "_postcss_dark-orange": {
      fontCharacter: "\\e910",
      fontColor: "#a35f27",
      fontId: "fi"
    },
    "_postcss_dark-pink": {
      fontCharacter: "\\e910",
      fontColor: "#cc00a3",
      fontId: "fi"
    },
    "_postcss_dark-red": {
      fontCharacter: "\\e910",
      fontColor: "#be2f31",
      fontId: "fi"
    },
    "_postcss_dark-yellow": {
      fontCharacter: "\\e910",
      fontColor: "#ee9e2e",
      fontId: "fi"
    },
    "_postcss_medium-orange": {
      fontCharacter: "\\e910",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_postcss_medium-yellow": {
      fontCharacter: "\\e910",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_postscript_dark-blue": {
      fontCharacter: "\\e955",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_postscript_dark-orange": {
      fontCharacter: "\\e955",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_postscript_dark-red": {
      fontCharacter: "\\e955",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_postscript_medium-blue": {
      fontCharacter: "\\e955",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_postscript_medium-green": {
      fontCharacter: "\\e955",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_postscript_medium-orange": {
      fontCharacter: "\\e955",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_postscript_medium-red": {
      fontCharacter: "\\e955",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_povray_dark-blue": {
      fontCharacter: "P",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerbuilder_dark-blue": {
      fontCharacter: "\\ea14",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerbuilder_medium-blue": {
      fontCharacter: "\\ea14",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerbuilder_medium-maroon": {
      fontCharacter: "\\ea14",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerbuilder_medium-orange": {
      fontCharacter: "\\ea14",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerbuilder_medium-purple": {
      fontCharacter: "\\ea14",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerbuilder_medium-red": {
      fontCharacter: "\\ea14",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerpoint_dark-orange": {
      fontCharacter: "\\e9ec",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerpoint_dark-red": {
      fontCharacter: "\\e9ec",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerpoint_medium-maroon": {
      fontCharacter: "\\e9ec",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerpoint_medium-orange": {
      fontCharacter: "\\e9ec",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powerpoint_medium-red": {
      fontCharacter: "\\e9ec",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_powershell_dark-blue": {
      fontCharacter: "\\e9da",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_powershell_dark-purple": {
      fontCharacter: "\\e9da",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_powershell_medium-blue": {
      fontCharacter: "\\e9da",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_powershell_medium-purple": {
      fontCharacter: "\\e9da",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_precommit_dark-yellow": {
      fontCharacter: "\\eac1",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_precommit_medium-yellow": {
      fontCharacter: "\\eac1",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_premiere_dark-purple": {
      fontCharacter: "\\e9f5",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_premiere_medium-maroon": {
      fontCharacter: "\\e9f5",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_premiere_medium-purple": {
      fontCharacter: "\\e9f5",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_prettier_dark-cyan": {
      fontCharacter: "\\eaa1",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_prettier_dark-yellow": {
      fontCharacter: "\\eaa1",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_prettier_medium-cyan": {
      fontCharacter: "\\eaa1",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_print_dark-cyan": {
      fontCharacter: "\\f02f",
      fontColor: "#4d9085",
      fontId: "fa",
      fontSize: "107%"
    },
    "_print_dark-red": {
      fontCharacter: "\\f02f",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "107%"
    },
    "_print_medium-orange": {
      fontCharacter: "\\f02f",
      fontColor: "#d28445",
      fontId: "fa",
      fontSize: "107%"
    },
    "_prisma_dark-blue": {
      fontCharacter: "\\eac5",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_processing_dark-blue": {
      fontCharacter: "\\e9a0",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_progress_medium-green": {
      fontCharacter: "\\eadc",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_prolog_medium-blue": {
      fontCharacter: "\\e6a1",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_prolog_medium-cyan": {
      fontCharacter: "\\e6a1",
      fontColor: "#75b5aa",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_prolog_medium-purple": {
      fontCharacter: "\\e6a1",
      fontColor: "#aa759f",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_propeller_medium-orange": {
      fontCharacter: "\\e9b5",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_proselint_dark-cyan": {
      fontCharacter: "\\ea6d",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pros_medium-orange": {
      fontCharacter: "\\eaad",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_psd_dark-blue": {
      fontCharacter: "\\e6b8",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_psd_dark-purple": {
      fontCharacter: "\\e6b8",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_psd_medium-blue": {
      fontCharacter: "\\e6b8",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_publisher_dark-cyan": {
      fontCharacter: "\\eadd",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pug_medium-red": {
      fontCharacter: "\\ea13",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pullapprove_dark-blue": {
      fontCharacter: "\\293e",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_puppet_dark-blue": {
      fontCharacter: "\\f0c3",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_puppet_medium-orange": {
      fontCharacter: "\\f0c3",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_puppet_medium-purple": {
      fontCharacter: "\\f0c3",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_purebasic_dark-orange": {
      fontCharacter: "\\01b5",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_purebasic_medium-red": {
      fontCharacter: "\\01b5",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pure_medium-grey": {
      fontCharacter: "\\1f4a7",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_purescript_dark-purple": {
      fontCharacter: "\\e9b2",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pypi_dark-blue": {
      fontCharacter: "\\ea94",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_pyret_dark-red": {
      fontCharacter: "\\2620",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_pytest_medium-blue": {
      fontCharacter: "\\eba6",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_python_dark-blue": {
      fontCharacter: "\\f14c",
      fontColor: "#46788d",
      fontId: "mf"
    },
    "_python_dark-green": {
      fontCharacter: "\\f14c",
      fontColor: "#66783e",
      fontId: "mf"
    },
    "_python_dark-maroon": {
      fontCharacter: "\\f14c",
      fontColor: "#7c4426",
      fontId: "mf"
    },
    "_python_dark-pink": {
      fontCharacter: "\\f14c",
      fontColor: "#cc00a3",
      fontId: "mf"
    },
    "_python_dark-purple": {
      fontCharacter: "\\f14c",
      fontColor: "#825078",
      fontId: "mf"
    },
    "_python_dark-red": {
      fontCharacter: "\\f14c",
      fontColor: "#be2f31",
      fontId: "mf"
    },
    "_python_dark-yellow": {
      fontCharacter: "\\f14c",
      fontColor: "#ee9e2e",
      fontId: "mf"
    },
    "_python_medium-blue": {
      fontCharacter: "\\f14c",
      fontColor: "#6a9fb5",
      fontId: "mf"
    },
    "_python_medium-green": {
      fontCharacter: "\\f14c",
      fontColor: "#90a959",
      fontId: "mf"
    },
    "_python_medium-grey": {
      fontCharacter: "\\f14c",
      fontColor: "#7f7f7f",
      fontId: "mf"
    },
    "_python_medium-maroon": {
      fontCharacter: "\\f14c",
      fontColor: "#8f5536",
      fontId: "mf"
    },
    "_python_medium-orange": {
      fontCharacter: "\\f14c",
      fontColor: "#d28445",
      fontId: "mf"
    },
    "_python_medium-pink": {
      fontCharacter: "\\f14c",
      fontColor: "#ff00cc",
      fontId: "mf"
    },
    "_python_medium-yellow": {
      fontCharacter: "\\f14c",
      fontColor: "#f4bf75",
      fontId: "mf"
    },
    "_pyup_dark-cyan": {
      fontCharacter: "\\eb26",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_qiskit_dark-blue": {
      fontCharacter: "\\eb81",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_qlik_dark-green": {
      fontCharacter: "\\1f50d",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_qlik_medium-green": {
      fontCharacter: "\\1f50d",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_qsharp_dark-purple": {
      fontCharacter: "\\eb91",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_qt_dark-green": {
      fontCharacter: "\\eb00",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_qt_dark-yellow": {
      fontCharacter: "\\eb00",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_qt_medium-cyan": {
      fontCharacter: "\\eb00",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_qt_medium-green": {
      fontCharacter: "\\eb00",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_qt_medium-yellow": {
      fontCharacter: "\\eb00",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_quasar_medium-blue": {
      fontCharacter: "\\eacc",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_question_dark-blue": {
      fontCharacter: "\\f059",
      fontColor: "#46788d",
      fontId: "fa",
      fontSize: "114%"
    },
    "_question_medium-blue": {
      fontCharacter: "\\f059",
      fontColor: "#6a9fb5",
      fontId: "fa",
      fontSize: "114%"
    },
    "_racket_dark-blue": {
      fontCharacter: "\\e9b1",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_racket_light-red": {
      fontCharacter: "\\e9b1",
      fontColor: "#c97071",
      fontId: "fi",
      fontSize: "107%"
    },
    "_racket_medium-blue": {
      fontCharacter: "\\e9b1",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_racket_medium-red": {
      fontCharacter: "\\e9b1",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_raml_medium-cyan": {
      fontCharacter: "\\e913",
      fontColor: "#75b5aa",
      fontId: "fi"
    },
    "_raphael_medium-orange": {
      fontCharacter: "\\e65f",
      fontColor: "#d28445",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_rascal_medium-yellow": {
      fontCharacter: "\\ea24",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rdata_medium-maroon": {
      fontCharacter: "\\eb49",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rdata_medium-orange": {
      fontCharacter: "\\eb49",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rdata_medium-red": {
      fontCharacter: "\\eb49",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rdata_medium-yellow": {
      fontCharacter: "\\eb49",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rdoc_medium-red": {
      fontCharacter: "\\e9b0",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_react_dark-blue": {
      fontCharacter: "\\f100",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_react_medium-blue": {
      fontCharacter: "\\f100",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_readthedocs_dark-grey": {
      fontCharacter: "\\2398",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_reason_medium-orange": {
      fontCharacter: "\\ea1d",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_reason_medium-red": {
      fontCharacter: "\\ea1d",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_reasonstudios_dark-orange": {
      fontCharacter: "\\eb44",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_reasonstudios_medium-orange": {
      fontCharacter: "\\eb44",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_reasonstudios_medium-red": {
      fontCharacter: "\\eb44",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_reasonstudios_medium-yellow": {
      fontCharacter: "\\eb44",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rebol_dark-blue": {
      fontCharacter: "\\e9ae",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "93%"
    },
    "_rebol_dark-green": {
      fontCharacter: "\\e9ae",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "93%"
    },
    "_rebol_dark-red": {
      fontCharacter: "\\e9ae",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "93%"
    },
    "_recycle_dark-green": {
      fontCharacter: "\\f1b8",
      fontColor: "#66783e",
      fontId: "fa",
      fontSize: "107%"
    },
    "_recycle_light-green": {
      fontCharacter: "\\f1b8",
      fontColor: "#b2c38b",
      fontId: "fa",
      fontSize: "107%"
    },
    "_red-hat_dark-red": {
      fontCharacter: "\\f14e",
      fontColor: "#be2f31",
      fontId: "mf"
    },
    "_red-hat_medium-red": {
      fontCharacter: "\\f14e",
      fontColor: "#ac4142",
      fontId: "mf"
    },
    "_red_light-red": {
      fontCharacter: "\\eaec",
      fontColor: "#c97071",
      fontId: "fi",
      fontSize: "114%"
    },
    "_red_medium-red": {
      fontCharacter: "\\eaec",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_reek_medium-red": {
      fontCharacter: "\\eaa0",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_regex_medium-green": {
      fontCharacter: "*",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "86%"
    },
    "_remark_dark-green": {
      fontCharacter: "\\eb1d",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_remark_dark-red": {
      fontCharacter: "\\eb1d",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_remark_dark-yellow": {
      fontCharacter: "\\eb1d",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_remark_medium-green": {
      fontCharacter: "\\eb1d",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_remark_medium-red": {
      fontCharacter: "\\eb1d",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_remark_medium-yellow": {
      fontCharacter: "\\eb1d",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_renovate_medium-cyan": {
      fontCharacter: "\\eb2d",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_requirejs_medium-blue": {
      fontCharacter: "\\e670",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_rescript_medium-red": {
      fontCharacter: "\\eba7",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_restql_dark-blue": {
      fontCharacter: "\\ebb0",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_restql_medium-cyan": {
      fontCharacter: "\\ebb0",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_rexx_medium-blue": {
      fontCharacter: "\\ea16",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_rexx_medium-red": {
      fontCharacter: "\\ea16",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_rhino_medium-blue": {
      fontCharacter: "\\ea4a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_rhino_medium-green": {
      fontCharacter: "\\ea4a",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_ring_medium-purple": {
      fontCharacter: "\\1f48d",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_riot_medium-red": {
      fontCharacter: "\\eb2e",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rmarkdown_medium-red": {
      fontCharacter: "\\211b",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_r_medium-blue": {
      fontCharacter: "\\e905",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_robot_medium-cyan": {
      fontCharacter: "\\eb0d",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_robots_dark-cyan": {
      fontCharacter: "\\1f916",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rspec_medium-red": {
      fontCharacter: "\\ea31",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_rss_medium-orange": {
      fontCharacter: "\\f143",
      fontColor: "#d28445",
      fontId: "fa",
      fontSize: "114%"
    },
    "_rst_dark-blue": {
      fontCharacter: "\\e9cc",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_rstudio_light-blue": {
      fontCharacter: "\\24c7",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_rsync_dark-purple": {
      fontCharacter: "\\eb9e",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_rubocop_dark-red": {
      fontCharacter: "\\eade",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ruby_dark-red": {
      fontCharacter: "\\f047",
      fontColor: "#be2f31",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_ruby_dark-yellow": {
      fontCharacter: "\\f047",
      fontColor: "#ee9e2e",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_rubygems_medium-red": {
      fontCharacter: "\\1f48e",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_ruby_medium-red": {
      fontCharacter: "\\f047",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_rust_light-maroon": {
      fontCharacter: "\\e6a8",
      fontColor: "#be7953",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_rust_medium-maroon": {
      fontCharacter: "\\e6a8",
      fontColor: "#8f5536",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_rust_medium-red": {
      fontCharacter: "\\e6a8",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sac_medium-yellow": {
      fontCharacter: "\\203c",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_safari_dark-blue": {
      fontCharacter: "\\e648",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_safari_medium-blue": {
      fontCharacter: "\\e648",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sage_dark-blue": {
      fontCharacter: "\\e9ab",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_sage_medium-blue": {
      fontCharacter: "\\e9ab",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_sails_medium-blue": {
      fontCharacter: "\\eb87",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_saltstack_dark-blue": {
      fontCharacter: "\\e915",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_saltstack_medium-blue": {
      fontCharacter: "\\e915",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_sandbox_dark-orange": {
      fontCharacter: "\\ebb1",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_san_medium-cyan": {
      fontCharacter: "\\eae6",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sas_medium-blue": {
      fontCharacter: "\\e95a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sass_dark-pink": {
      fontCharacter: "\\e64b",
      fontColor: "#cc00a3",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sass_dark-yellow": {
      fontCharacter: "\\e64b",
      fontColor: "#ee9e2e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sass_light-pink": {
      fontCharacter: "\\e64b",
      fontColor: "#ff4ddb",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sass_medium-yellow": {
      fontCharacter: "\\e64b",
      fontColor: "#f4bf75",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sbt_dark-purple": {
      fontCharacter: "\\e9d2",
      fontColor: "#825078",
      fontId: "fi"
    },
    "_scad_medium-orange": {
      fontCharacter: "\\e911",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_scad_medium-yellow": {
      fontCharacter: "\\e911",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_scala_medium-green": {
      fontCharacter: "\\f154",
      fontColor: "#90a959",
      fontId: "mf"
    },
    "_scala_medium-red": {
      fontCharacter: "\\f154",
      fontColor: "#ac4142",
      fontId: "mf"
    },
    "_scales_dark-green": {
      fontCharacter: "\\f24e",
      fontColor: "#66783e",
      fontId: "fa",
      fontSize: "107%"
    },
    "_scales_dark-red": {
      fontCharacter: "\\f24e",
      fontColor: "#be2f31",
      fontId: "fa",
      fontSize: "107%"
    },
    "_scales_medium-green": {
      fontCharacter: "\\f24e",
      fontColor: "#90a959",
      fontId: "fa",
      fontSize: "107%"
    },
    "_scales_medium-red": {
      fontCharacter: "\\f24e",
      fontColor: "#ac4142",
      fontId: "fa",
      fontSize: "107%"
    },
    "_scd_medium-red": {
      fontCharacter: "\\e9a2",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_scheme_medium-blue": {
      fontCharacter: "\\03bb",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_scheme_medium-purple": {
      fontCharacter: "\\03bb",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_scheme_medium-red": {
      fontCharacter: "\\03bb",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_scheme_medium-yellow": {
      fontCharacter: "\\03bb",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_scilab_dark-blue": {
      fontCharacter: "\\e9a9",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "129%"
    },
    "_scilab_dark-cyan": {
      fontCharacter: "\\e9a9",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "129%"
    },
    "_scilab_dark-purple": {
      fontCharacter: "\\e9a9",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "129%"
    },
    "_scilla_medium-orange": {
      fontCharacter: "\\eae2",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_scratch_dark-orange": {
      fontCharacter: "\\a7",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_scratch_medium-orange": {
      fontCharacter: "\\a7",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_scrutinizer_dark-blue": {
      fontCharacter: "\\e9d4",
      fontColor: "#46788d",
      fontId: "fi"
    },
    _secret: {
      fontCharacter: "\\f08c",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_self_dark-blue": {
      fontCharacter: "\\e9a8",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_semrelease_medium-grey": {
      fontCharacter: "\\1f7cd",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_sencha_light-green": {
      fontCharacter: "\\e68c",
      fontColor: "#b2c38b",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sentry_light-red": {
      fontCharacter: "\\eb1c",
      fontColor: "#c97071",
      fontId: "fi",
      fontSize: "114%"
    },
    "_sentry_medium-red": {
      fontCharacter: "\\eb1c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_sequelize_dark-blue": {
      fontCharacter: "\\ea2f",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_sequelize_medium-blue": {
      fontCharacter: "\\ea2f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_serverless_medium-red": {
      fontCharacter: "\\eab8",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sf_light-orange": {
      fontCharacter: "\\e9db",
      fontColor: "#e1ad83",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sgi_medium-orange": {
      fontCharacter: "\\2318",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_shadowcljs_dark-cyan": {
      fontCharacter: "\\eb88",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_shadowcljs_medium-cyan": {
      fontCharacter: "\\eb88",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_shellcheck_light-maroon": {
      fontCharacter: "\\1f41a",
      fontColor: "#be7953",
      fontId: "fi",
      fontSize: "121%"
    },
    "_shen_dark-cyan": {
      fontCharacter: "\\e9a7",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_shipit_medium-orange": {
      fontCharacter: "\\26f5",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_shippable_medium-cyan": {
      fontCharacter: "\\ea2d",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_shopify_medium-green": {
      fontCharacter: "\\e9cf",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_shuriken_dark-cyan": {
      fontCharacter: "\\272b",
      fontColor: "#4d9085",
      fontId: "fi"
    },
    "_shuriken_medium-blue": {
      fontCharacter: "\\272b",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_sigils_dark-red": {
      fontCharacter: "\\1f764",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_silverstripe_medium-blue": {
      fontCharacter: "\\e800",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sketch_medium-orange": {
      fontCharacter: "\\e927",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sketchup-lo_dark-red": {
      fontCharacter: "\\ea7c",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sketchup-lo_medium-red": {
      fontCharacter: "\\ea7c",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sketchup-mk_medium-red": {
      fontCharacter: "\\ea7e",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sketchup-sb_dark-red": {
      fontCharacter: "\\ea7d",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sketchup-sb_medium-red": {
      fontCharacter: "\\ea7d",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_slash_dark-blue": {
      fontCharacter: "\\e9a6",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_smarty_dark-yellow": {
      fontCharacter: "\\f0eb",
      fontColor: "#ee9e2e",
      fontId: "fa",
      fontSize: "107%"
    },
    "_smarty_medium-yellow": {
      fontCharacter: "\\f0eb",
      fontColor: "#f4bf75",
      fontId: "fa",
      fontSize: "107%"
    },
    "_snapcraft_dark-cyan": {
      fontCharacter: "\\eb09",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_snapsvg_medium-cyan": {
      fontCharacter: "\\e65e",
      fontColor: "#75b5aa",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_snort_light-red": {
      fontCharacter: "\\1f43d",
      fontColor: "#c97071",
      fontId: "fi",
      fontSize: "121%"
    },
    "_snowpack_dark-blue": {
      fontCharacter: "\\1f3d4",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_snyk_dark-purple": {
      fontCharacter: "\\ea1c",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_solidarity_dark-red": {
      fontCharacter: "\\1d5e6",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_solidity_dark-cyan": {
      fontCharacter: "\\ea86",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sophia_dark-pink": {
      fontCharacter: "\\eb72",
      fontColor: "#cc00a3",
      fontId: "fi",
      fontSize: "121%"
    },
    "_sorbet_dark-purple": {
      fontCharacter: "\\1f366",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_sorbet_medium-purple": {
      fontCharacter: "\\1f366",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_source_dark-blue": {
      fontCharacter: "\\eb82",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_source_dark-red": {
      fontCharacter: "\\eb82",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sourcemap_dark-blue": {
      fontCharacter: "\\f279",
      fontColor: "#46788d",
      fontId: "fa"
    },
    "_sourcemap_dark-green": {
      fontCharacter: "\\f279",
      fontColor: "#66783e",
      fontId: "fa"
    },
    "_sourcemap_dark-yellow": {
      fontCharacter: "\\f279",
      fontColor: "#ee9e2e",
      fontId: "fa"
    },
    "_sourcemap_light-cyan": {
      fontCharacter: "\\f279",
      fontColor: "#a7d0c9",
      fontId: "fa"
    },
    "_sourcemap_medium-blue": {
      fontCharacter: "\\f279",
      fontColor: "#6a9fb5",
      fontId: "fa"
    },
    "_sourcemap_medium-green": {
      fontCharacter: "\\f279",
      fontColor: "#90a959",
      fontId: "fa"
    },
    "_sourcemap_medium-maroon": {
      fontCharacter: "\\f279",
      fontColor: "#8f5536",
      fontId: "fa"
    },
    "_sourcemap_medium-orange": {
      fontCharacter: "\\f279",
      fontColor: "#d28445",
      fontId: "fa"
    },
    "_sourcemap_medium-purple": {
      fontCharacter: "\\f279",
      fontColor: "#aa759f",
      fontId: "fa"
    },
    "_sourcemap_medium-yellow": {
      fontCharacter: "\\f279",
      fontColor: "#f4bf75",
      fontId: "fa"
    },
    "_source_medium-blue": {
      fontCharacter: "\\eb82",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_source_medium-cyan": {
      fontCharacter: "\\eb82",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_source_medium-maroon": {
      fontCharacter: "\\eb82",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_source_medium-orange": {
      fontCharacter: "\\eb82",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_source_medium-red": {
      fontCharacter: "\\eb82",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_spacemacs_medium-purple": {
      fontCharacter: "\\eaa4",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_spacengine_medium-blue": {
      fontCharacter: "\\29cf",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sparql_dark-blue": {
      fontCharacter: "\\e959",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sparql_medium-blue": {
      fontCharacter: "\\e959",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sqf_dark-maroon": {
      fontCharacter: "\\e9a5",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sqf_dark-red": {
      fontCharacter: "\\e9a5",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sql_dark-blue": {
      fontCharacter: "\\f10e",
      fontColor: "#46788d",
      fontId: "mf"
    },
    "_sql_dark-cyan": {
      fontCharacter: "\\f10e",
      fontColor: "#4d9085",
      fontId: "mf"
    },
    "_sql_dark-red": {
      fontCharacter: "\\f10e",
      fontColor: "#be2f31",
      fontId: "mf"
    },
    "_sqlite_dark-blue": {
      fontCharacter: "\\e9dd",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sqlite_dark-purple": {
      fontCharacter: "\\e9dd",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sqlite_medium-blue": {
      fontCharacter: "\\e9dd",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sqlite_medium-purple": {
      fontCharacter: "\\e9dd",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sql_medium-blue": {
      fontCharacter: "\\f10e",
      fontColor: "#6a9fb5",
      fontId: "mf"
    },
    "_sql_medium-cyan": {
      fontCharacter: "\\f10e",
      fontColor: "#75b5aa",
      fontId: "mf"
    },
    "_sql_medium-green": {
      fontCharacter: "\\f10e",
      fontColor: "#90a959",
      fontId: "mf"
    },
    "_sql_medium-orange": {
      fontCharacter: "\\f10e",
      fontColor: "#d28445",
      fontId: "mf"
    },
    "_sql_medium-purple": {
      fontCharacter: "\\f10e",
      fontColor: "#aa759f",
      fontId: "mf"
    },
    "_sql_medium-red": {
      fontCharacter: "\\f10e",
      fontColor: "#ac4142",
      fontId: "mf"
    },
    "_squarespace_dark-purple": {
      fontCharacter: "\\ea5e",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_squirrel_medium-maroon": {
      fontCharacter: "\\f0b2",
      fontColor: "#8f5536",
      fontId: "octicons",
      fontSize: "107%"
    },
    "_squirrel_medium-red": {
      fontCharacter: "\\f0b2",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "107%"
    },
    "_stan_medium-red": {
      fontCharacter: "\\e9a4",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_star_dark-red": {
      fontId: "octicons",
      fontCharacter: "\\f02a",
      fontSize: "114%",
      fontColor: "#be2f31"
    },
    "_stata_dark-blue": {
      fontCharacter: "\\e9a3",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stata_dark-cyan": {
      fontCharacter: "\\e9a3",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stata_light-blue": {
      fontCharacter: "\\e9a3",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stata_light-cyan": {
      fontCharacter: "\\e9a3",
      fontColor: "#a7d0c9",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stata_medium-blue": {
      fontCharacter: "\\e9a3",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stata_medium-cyan": {
      fontCharacter: "\\e9a3",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stata_medium-purple": {
      fontCharacter: "\\e9a3",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stdlibjs_medium-blue": {
      fontCharacter: "\\eb70",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stdlibjs_medium-orange": {
      fontCharacter: "\\eb70",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stencil_medium-orange": {
      fontCharacter: "\\ea95",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stitches_medium-purple": {
      fontCharacter: "\\eba0",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_storybook_medium-blue": {
      fontCharacter: "\\eadf",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_storybook_medium-orange": {
      fontCharacter: "\\eadf",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_storyist_medium-blue": {
      fontCharacter: "\\e9ef",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_strings_medium-red": {
      fontCharacter: "\\e9e0",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stylable_medium-green": {
      fontCharacter: "\\eae0",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stylelint_dark-blue": {
      fontCharacter: "\\e93d",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stylelint_dark-yellow": {
      fontCharacter: "\\e93d",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stylelint_medium-purple": {
      fontCharacter: "\\e93d",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stylelint_medium-yellow": {
      fontCharacter: "\\e93d",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_stylishhaskell_medium-purple": {
      fontCharacter: "\\eb3d",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_stylus_medium-green": {
      fontCharacter: "s",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sublime_dark-orange": {
      fontCharacter: "\\e986",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sublime_medium-orange": {
      fontCharacter: "\\e986",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sun_dark-yellow": {
      fontCharacter: "\\f185",
      fontColor: "#ee9e2e",
      fontId: "fa"
    },
    "_sun_medium-yellow": {
      fontCharacter: "\\f185",
      fontColor: "#f4bf75",
      fontId: "fa"
    },
    "_svelte_medium-orange": {
      fontCharacter: "\\33dc",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_svg_dark-yellow": {
      fontCharacter: "\\f15c",
      fontColor: "#ee9e2e",
      fontId: "mf"
    },
    _svn: {
      fontCharacter: "\\ea17",
      fontId: "fi",
      fontSize: "107%"
    },
    "_swagger_dark-green": {
      fontCharacter: "\\ea29",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_swagger_medium-green": {
      fontCharacter: "\\ea29",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_swift_medium-orange": {
      fontCharacter: "\\e655",
      fontColor: "#d28445",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_sysverilog_dark-blue": {
      fontCharacter: "\\e9c3",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sysverilog_dark-cyan": {
      fontCharacter: "\\e9c3",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sysverilog_dark-green": {
      fontCharacter: "\\e9c3",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sysverilog_medium-blue": {
      fontCharacter: "\\e9c3",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sysverilog_medium-cyan": {
      fontCharacter: "\\e9c3",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_sysverilog_medium-green": {
      fontCharacter: "\\e9c3",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_tag_medium-blue": {
      fontCharacter: "\\f015",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_tag_medium-cyan": {
      fontCharacter: "\\f015",
      fontColor: "#75b5aa",
      fontId: "fi"
    },
    "_tag_medium-green": {
      fontCharacter: "\\f015",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_tag_medium-maroon": {
      fontCharacter: "\\f015",
      fontColor: "#8f5536",
      fontId: "fi"
    },
    "_tag_medium-orange": {
      fontCharacter: "\\f015",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_tag_medium-yellow": {
      fontCharacter: "\\f015",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_tailwind_medium-cyan": {
      fontCharacter: "\\301c",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_tcl_dark-blue": {
      fontCharacter: "\\e956",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tcl_dark-orange": {
      fontCharacter: "\\e956",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tcl_dark-red": {
      fontCharacter: "\\e956",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tcl_medium-orange": {
      fontCharacter: "\\e956",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tcl_medium-red": {
      fontCharacter: "\\e956",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_telegram_light-blue": {
      fontCharacter: "\\2708",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_telegram_medium-blue": {
      fontCharacter: "\\2708",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_templeos_medium-orange": {
      fontCharacter: "\\2696",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "129%"
    },
    "_templeos_medium-yellow": {
      fontCharacter: "\\2696",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "129%"
    },
    "_terminal_dark-blue": {
      fontCharacter: "\\f0c8",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_terminal_dark-purple": {
      fontCharacter: "\\f0c8",
      fontColor: "#825078",
      fontId: "fi"
    },
    "_terminal_dark-yellow": {
      fontCharacter: "\\f0c8",
      fontColor: "#ee9e2e",
      fontId: "fi"
    },
    "_terminal_medium-blue": {
      fontCharacter: "\\f0c8",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_terminal_medium-green": {
      fontCharacter: "\\f0c8",
      fontColor: "#90a959",
      fontId: "fi"
    },
    "_terminal_medium-orange": {
      fontCharacter: "\\f0c8",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_terminal_medium-purple": {
      fontCharacter: "\\f0c8",
      fontColor: "#aa759f",
      fontId: "fi"
    },
    "_terminal_medium-red": {
      fontCharacter: "\\f0c8",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_terminal_medium-yellow": {
      fontCharacter: "\\f0c8",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_tern_medium-blue": {
      fontCharacter: "\\1f54a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tern_medium-purple": {
      fontCharacter: "\\1f54a",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_terraform_dark-purple": {
      fontCharacter: "\\e916",
      fontColor: "#825078",
      fontId: "fi"
    },
    "_terraform_medium-cyan": {
      fontCharacter: "\\e916",
      fontColor: "#75b5aa",
      fontId: "fi"
    },
    "_terraform_medium-yellow": {
      fontCharacter: "\\e916",
      fontColor: "#f4bf75",
      fontId: "fi"
    },
    "_terser_medium-orange": {
      fontCharacter: "\\272c",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_testcafe_medium-blue": {
      fontCharacter: "\\2714",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-coffee_dark-maroon": {
      fontCharacter: "\\ea62",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-coffee_medium-maroon": {
      fontCharacter: "\\ea62",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-generic_dark-green": {
      fontCharacter: "\\ea63",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-generic_dark-grey": {
      fontCharacter: "\\ea63",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-generic_medium-green": {
      fontCharacter: "\\ea63",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-generic_medium-grey": {
      fontCharacter: "\\ea63",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-go_dark-cyan": {
      fontCharacter: "\\eb0f",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-go_medium-cyan": {
      fontCharacter: "\\eb0f",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-hs_dark-purple": {
      fontCharacter: "\\eb10",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-hs_medium-purple": {
      fontCharacter: "\\eb10",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-js_dark-blue": {
      fontCharacter: "\\ea64",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-js_dark-green": {
      fontCharacter: "\\ea64",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-js_dark-yellow": {
      fontCharacter: "\\ea64",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-js_medium-blue": {
      fontCharacter: "\\ea64",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-js_medium-green": {
      fontCharacter: "\\ea64",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-js_medium-yellow": {
      fontCharacter: "\\ea64",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-perl_dark-blue": {
      fontCharacter: "\\ea65",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-perl_medium-blue": {
      fontCharacter: "\\ea65",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-react_dark-blue": {
      fontCharacter: "\\ea67",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-react_medium-blue": {
      fontCharacter: "\\ea67",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-ruby_dark-red": {
      fontCharacter: "\\ea68",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-ruby_medium-red": {
      fontCharacter: "\\ea68",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-rust_dark-maroon": {
      fontCharacter: "\\eb11",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-rust_medium-maroon": {
      fontCharacter: "\\eb11",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-ts_dark-blue": {
      fontCharacter: "\\ea69",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-ts_light-blue": {
      fontCharacter: "\\ea69",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "121%"
    },
    "_test-ts_medium-blue": {
      fontCharacter: "\\ea69",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "121%"
    },
    "_tex_dark-blue": {
      fontCharacter: "\\e600",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_dark-green": {
      fontCharacter: "\\e600",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_dark-maroon": {
      fontCharacter: "\\e600",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_dark-orange": {
      fontCharacter: "\\e600",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_dark-purple": {
      fontCharacter: "\\e600",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_dark-red": {
      fontCharacter: "\\e600",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_medium-blue": {
      fontCharacter: "\\e600",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_medium-green": {
      fontCharacter: "\\e600",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_medium-maroon": {
      fontCharacter: "\\e600",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_medium-orange": {
      fontCharacter: "\\e600",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_medium-purple": {
      fontCharacter: "\\e600",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tex_medium-red": {
      fontCharacter: "\\e600",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_text_dark-blue": {
      fontCharacter: "\\f011",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_dark-orange": {
      fontCharacter: "\\f011",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_dark-purple": {
      fontCharacter: "\\f011",
      fontColor: "#825078",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_dark-red": {
      fontCharacter: "\\f011",
      fontColor: "#be2f31",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_textile_medium-orange": {
      fontCharacter: "t",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_textmate_dark-blue": {
      fontCharacter: "\\2122",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_dark-orange": {
      fontCharacter: "\\2122",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_dark-purple": {
      fontCharacter: "\\2122",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_medium-blue": {
      fontCharacter: "\\2122",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_medium-green": {
      fontCharacter: "\\2122",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_medium-maroon": {
      fontCharacter: "\\2122",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_medium-orange": {
      fontCharacter: "\\2122",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_medium-pink": {
      fontCharacter: "\\2122",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "114%"
    },
    "_textmate_medium-purple": {
      fontCharacter: "\\2122",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_text_medium-blue": {
      fontCharacter: "\\f011",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_medium-cyan": {
      fontCharacter: "\\f011",
      fontColor: "#75b5aa",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_medium-green": {
      fontCharacter: "\\f011",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_medium-maroon": {
      fontCharacter: "\\f011",
      fontColor: "#8f5536",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_medium-orange": {
      fontCharacter: "\\f011",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_medium-purple": {
      fontCharacter: "\\f011",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_medium-red": {
      fontCharacter: "\\f011",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_text_medium-yellow": {
      fontCharacter: "\\f011",
      fontColor: "#f4bf75",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_tfs_dark-purple": {
      fontCharacter: "\\eae1",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_thor_dark-orange": {
      fontCharacter: "\\e9d8",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_thor_medium-orange": {
      fontCharacter: "\\e9d8",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_tilt_medium-green": {
      fontCharacter: "\\eb8a",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_tipe_medium-cyan": {
      fontCharacter: "\\eaa9",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "114%"
    },
    "_tla_medium-maroon": {
      fontCharacter: "\\eab2",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_tmux_medium-green": {
      fontCharacter: "\\ea8c",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_toc_dark-cyan": {
      fontCharacter: "\\f03a",
      fontColor: "#4d9085",
      fontId: "fa",
      fontSize: "107%"
    },
    "_toc_medium-cyan": {
      fontCharacter: "\\f03a",
      fontColor: "#75b5aa",
      fontId: "fa",
      fontSize: "107%"
    },
    "_toc_medium-maroon": {
      fontCharacter: "\\f03a",
      fontColor: "#8f5536",
      fontId: "fa",
      fontSize: "107%"
    },
    "_toml_medium-green": {
      fontCharacter: "\\1f143",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_tortoise_medium-red": {
      fontCharacter: "\\ea93",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_totvs_dark-blue": {
      fontCharacter: "\\eb34",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_totvs_dark-green": {
      fontCharacter: "\\eb34",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_totvs_medium-green": {
      fontCharacter: "\\eb34",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_totvs_medium-maroon": {
      fontCharacter: "\\eb34",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_truffle_dark-maroon": {
      fontCharacter: "\\eb3b",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_truffle_medium-maroon": {
      fontCharacter: "\\eb3b",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_ts_medium-blue": {
      fontCharacter: "\\2a6",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_tsx_light-blue": {
      fontCharacter: "\\e9e7",
      fontColor: "#9dc0ce",
      fontId: "fi"
    },
    "_ttcn3_medium-blue": {
      fontCharacter: "\\2476",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_tt_medium-blue": {
      fontCharacter: "T",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_tt_medium-purple": {
      fontCharacter: "T",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_turing_medium-red": {
      fontCharacter: "\\e9b6",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_twig_medium-green": {
      fontCharacter: "\\2e19",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_twine_medium-blue": {
      fontCharacter: "\\ea5d",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_txl_medium-orange": {
      fontCharacter: "\\e9c1",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_typedoc_dark-purple": {
      fontCharacter: "\\e9fe",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_typings_medium-maroon": {
      fontCharacter: "\\e9df",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_typo3_medium-orange": {
      fontCharacter: "\\e672",
      fontColor: "#d28445",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_uikit_medium-blue": {
      fontCharacter: "\\e673",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "107%"
    },
    "_unibeautify_dark-cyan": {
      fontCharacter: "\\eac4",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "114%"
    },
    "_unibeautify_dark-orange": {
      fontCharacter: "\\eac4",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_unibeautify_dark-yellow": {
      fontCharacter: "\\eac4",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_unibeautify_medium-orange": {
      fontCharacter: "\\eac4",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_unibeautify_medium-yellow": {
      fontCharacter: "\\eac4",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_unicode_medium-red": {
      fontCharacter: "\\eb6e",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_unity3d_dark-blue": {
      fontCharacter: "\\e621",
      fontColor: "#46788d",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_unity3d_dark-cyan": {
      fontCharacter: "\\e621",
      fontColor: "#4d9085",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_unity3d_dark-green": {
      fontCharacter: "\\e621",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_unity3d_dark-red": {
      fontCharacter: "\\e621",
      fontColor: "#be2f31",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_unity3d_medium-blue": {
      fontCharacter: "\\e621",
      fontColor: "#6a9fb5",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_unity3d_medium-cyan": {
      fontCharacter: "\\e621",
      fontColor: "#75b5aa",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_unity3d_medium-maroon": {
      fontCharacter: "\\e621",
      fontColor: "#8f5536",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_unity3d_medium-red": {
      fontCharacter: "\\e621",
      fontColor: "#ac4142",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_uno_dark-blue": {
      fontCharacter: "\\e9b3",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_unreal_dark-blue": {
      fontCharacter: "u",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_unreal_medium-grey": {
      fontCharacter: "u",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_urweb_dark-blue": {
      fontCharacter: "\\e9ba",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "129%"
    },
    "_urweb_medium-maroon": {
      fontCharacter: "\\e9ba",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "129%"
    },
    "_v8_dark-blue": {
      fontCharacter: "\\ea1f",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_v8_medium-blue": {
      fontCharacter: "\\ea1f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vagrant_medium-cyan": {
      fontCharacter: "V",
      fontColor: "#75b5aa",
      fontId: "fi"
    },
    "_vala_dark-purple": {
      fontCharacter: "\\1d4b1",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vala_medium-purple": {
      fontCharacter: "\\1d4b1",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_varnish_dark-blue": {
      fontCharacter: "\\e9b4",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_velocity_dark-blue": {
      fontCharacter: "\\2b94",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "121%"
    },
    "_verilog_dark-green": {
      fontCharacter: "\\e949",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_verilog_medium-red": {
      fontCharacter: "\\e949",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vertex_medium-blue": {
      fontCharacter: "\\ea79",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vertex_medium-red": {
      fontCharacter: "\\ea79",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vhdl_dark-blue": {
      fontCharacter: "\\e9aa",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vhdl_dark-green": {
      fontCharacter: "\\e9aa",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vhdl_dark-orange": {
      fontCharacter: "\\e9aa",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vhdl_dark-purple": {
      fontCharacter: "\\e9aa",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vhdl_dark-red": {
      fontCharacter: "\\e9aa",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vhdl_medium-blue": {
      fontCharacter: "\\e9aa",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vhdl_medium-purple": {
      fontCharacter: "\\e9aa",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_video_dark-blue": {
      fontCharacter: "\\f057",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_video_dark-purple": {
      fontCharacter: "\\f057",
      fontColor: "#825078",
      fontId: "fi"
    },
    "_video_medium-blue": {
      fontCharacter: "\\f057",
      fontColor: "#6a9fb5",
      fontId: "fi"
    },
    "_video_medium-cyan": {
      fontCharacter: "\\f057",
      fontColor: "#75b5aa",
      fontId: "fi"
    },
    "_video_medium-maroon": {
      fontCharacter: "\\f057",
      fontColor: "#8f5536",
      fontId: "fi"
    },
    "_video_medium-orange": {
      fontCharacter: "\\f057",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_video_medium-purple": {
      fontCharacter: "\\f057",
      fontColor: "#aa759f",
      fontId: "fi"
    },
    "_video_medium-red": {
      fontCharacter: "\\f057",
      fontColor: "#ac4142",
      fontId: "fi"
    },
    "_vim_dark-green": {
      fontCharacter: "\\e6c5",
      fontColor: "#66783e",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_vim_medium-green": {
      fontCharacter: "\\e6c5",
      fontColor: "#90a959",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_virtualbox_dark-blue": {
      fontCharacter: "\\ea3e",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_virtualbox_dark-green": {
      fontCharacter: "\\ea3e",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_virtualbox_medium-blue": {
      fontCharacter: "\\ea3e",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_virtualbox_medium-green": {
      fontCharacter: "\\ea3e",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_virtualbox_medium-purple": {
      fontCharacter: "\\ea3e",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_visio_dark-blue": {
      fontCharacter: "\\ea83",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_dark-maroon": {
      fontCharacter: "\\ea83",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_dark-purple": {
      fontCharacter: "\\ea83",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_dark-red": {
      fontCharacter: "\\ea83",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_medium-blue": {
      fontCharacter: "\\ea83",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_medium-cyan": {
      fontCharacter: "\\ea83",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_medium-green": {
      fontCharacter: "\\ea83",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_medium-orange": {
      fontCharacter: "\\ea83",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_visio_medium-red": {
      fontCharacter: "\\ea83",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vite_dark-yellow": {
      fontCharacter: "\\2607",
      fontColor: "#ee9e2e",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vite_medium-yellow": {
      fontCharacter: "\\2607",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "114%"
    },
    "_v_medium-blue": {
      fontCharacter: "v",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vmware_dark-blue": {
      fontCharacter: "\\ea49",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vmware_dark-orange": {
      fontCharacter: "\\ea49",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vmware_dark-red": {
      fontCharacter: "\\ea49",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vmware_medium-blue": {
      fontCharacter: "\\ea49",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vmware_medium-green": {
      fontCharacter: "\\ea49",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vmware_medium-orange": {
      fontCharacter: "\\ea49",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vmware_medium-red": {
      fontCharacter: "\\ea49",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vray_dark-grey": {
      fontCharacter: "\\24cb",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vray_medium-grey": {
      fontCharacter: "\\24cb",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    _vs: {
      fontCharacter: "\\e60c",
      fontId: "devicons"
    },
    "_vs_dark-blue": {
      fontCharacter: "\\e60c",
      fontColor: "#46788d",
      fontId: "devicons"
    },
    "_vs_dark-green": {
      fontCharacter: "\\e60c",
      fontColor: "#66783e",
      fontId: "devicons"
    },
    "_vs_dark-orange": {
      fontCharacter: "\\e60c",
      fontColor: "#a35f27",
      fontId: "devicons"
    },
    "_vs_dark-purple": {
      fontCharacter: "\\e60c",
      fontColor: "#825078",
      fontId: "devicons"
    },
    "_vs_dark-red": {
      fontCharacter: "\\e60c",
      fontColor: "#be2f31",
      fontId: "devicons"
    },
    "_vs_light-cyan": {
      fontCharacter: "\\e60c",
      fontColor: "#a7d0c9",
      fontId: "devicons"
    },
    "_vs_light-red": {
      fontCharacter: "\\e60c",
      fontColor: "#c97071",
      fontId: "devicons"
    },
    "_vs_medium-blue": {
      fontCharacter: "\\e60c",
      fontColor: "#6a9fb5",
      fontId: "devicons"
    },
    "_vs_medium-cyan": {
      fontCharacter: "\\e60c",
      fontColor: "#75b5aa",
      fontId: "devicons"
    },
    "_vs_medium-green": {
      fontCharacter: "\\e60c",
      fontColor: "#90a959",
      fontId: "devicons"
    },
    "_vs_medium-maroon": {
      fontCharacter: "\\e60c",
      fontColor: "#8f5536",
      fontId: "devicons"
    },
    "_vs_medium-orange": {
      fontCharacter: "\\e60c",
      fontColor: "#d28445",
      fontId: "devicons"
    },
    "_vs_medium-purple": {
      fontCharacter: "\\e60c",
      fontColor: "#aa759f",
      fontId: "devicons"
    },
    "_vs_medium-red": {
      fontCharacter: "\\e60c",
      fontColor: "#ac4142",
      fontId: "devicons"
    },
    "_vsts_medium-blue": {
      fontCharacter: "\\eac0",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_vue_light-green": {
      fontCharacter: "\\e906",
      fontColor: "#b2c38b",
      fontId: "fi",
      fontSize: "107%"
    },
    "_vyper_medium-grey": {
      fontCharacter: "\\eb31",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_w3c_dark-blue": {
      fontCharacter: "\\ebac",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "129%"
    },
    "_w3c_medium-blue": {
      fontCharacter: "\\ebac",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "129%"
    },
    "_wallaby_medium-green": {
      fontCharacter: "\\231f",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_walt_medium-purple": {
      fontCharacter: "\\eaba",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "114%"
    },
    "_warcraft3_dark-orange": {
      fontCharacter: "\\2162",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_warcraft3_medium-maroon": {
      fontCharacter: "\\2162",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_warcraft3_medium-red": {
      fontCharacter: "\\2162",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wasm_medium-blue": {
      fontCharacter: "\\ea70",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_wasm_medium-red": {
      fontCharacter: "\\ea70",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_watchman_medium-blue": {
      fontCharacter: "\\ea4f",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_wdl_medium-blue": {
      fontCharacter: "\\eab1",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_webgl_dark-red": {
      fontCharacter: "\\ea7b",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "129%"
    },
    "_webhint_dark-purple": {
      fontCharacter: "\\eb35",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_webpack_medium-blue": {
      fontCharacter: "\\ea61",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_webvtt_dark-blue": {
      fontCharacter: "\\eb24",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wechat_medium-blue": {
      fontCharacter: "\\f1d7",
      fontColor: "#6a9fb5",
      fontId: "fa",
      fontSize: "114%"
    },
    "_wechat_medium-green": {
      fontCharacter: "\\f1d7",
      fontColor: "#90a959",
      fontId: "fa",
      fontSize: "114%"
    },
    "_wenyan_light-orange": {
      fontCharacter: "\\8a00",
      fontColor: "#e1ad83",
      fontId: "fi",
      fontSize: "121%"
    },
    "_wercker_medium-purple": {
      fontCharacter: "\\ea19",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_wget_medium-maroon": {
      fontCharacter: "\\eb38",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_wget_medium-purple": {
      fontCharacter: "\\eb38",
      fontColor: "#aa759f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_windi_medium-blue": {
      fontCharacter: "\\1f4a8",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    _windows: {
      fontCharacter: "\\e60f",
      fontId: "devicons"
    },
    "_windows_medium-blue": {
      fontCharacter: "\\e60f",
      fontColor: "#6a9fb5",
      fontId: "devicons"
    },
    "_windows_medium-purple": {
      fontCharacter: "\\e60f",
      fontColor: "#aa759f",
      fontId: "devicons"
    },
    "_wine_dark-red": {
      fontCharacter: "\\1f377",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_winui_medium-blue": {
      fontCharacter: "\\ebb7",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_winui_medium-red": {
      fontCharacter: "\\ebb7",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wix_dark-maroon": {
      fontCharacter: "\\eab0",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wix_dark-orange": {
      fontCharacter: "\\eab0",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wix_dark-purple": {
      fontCharacter: "\\eab0",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wix_medium-maroon": {
      fontCharacter: "\\eab0",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wix_medium-orange": {
      fontCharacter: "\\eab0",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wix_medium-red": {
      fontCharacter: "\\eab0",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_wolfram_dark-orange": {
      fontCharacter: "\\1f43a",
      fontColor: "#a35f27",
      fontId: "fi",
      fontSize: "121%"
    },
    "_wolfram_dark-red": {
      fontCharacter: "\\1f43a",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "121%"
    },
    "_wolfram_medium-orange": {
      fontCharacter: "\\1f43a",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "121%"
    },
    "_wolfram_medium-red": {
      fontCharacter: "\\1f43a",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "121%"
    },
    "_word_dark-blue": {
      fontCharacter: "\\e9ed",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_word_dark-cyan": {
      fontCharacter: "\\e9ed",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_word_dark-maroon": {
      fontCharacter: "\\e9ed",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_word_medium-blue": {
      fontCharacter: "\\e9ed",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_word_medium-cyan": {
      fontCharacter: "\\e9ed",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_word_medium-maroon": {
      fontCharacter: "\\e9ed",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_word_medium-orange": {
      fontCharacter: "\\e9ed",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_workbox_medium-orange": {
      fontCharacter: "\\eaa8",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_wurst_medium-maroon": {
      fontCharacter: "\\1f32d",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "114%"
    },
    "_x10_light-maroon": {
      fontCharacter: "\\2169",
      fontColor: "#be7953",
      fontId: "fi",
      fontSize: "107%"
    },
    "_x11_medium-orange": {
      fontCharacter: "\\f16e",
      fontColor: "#d28445",
      fontId: "mf",
      fontSize: "93%"
    },
    "_xamarin_light-blue": {
      fontCharacter: "\\ea77",
      fontColor: "#9dc0ce",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xmake_medium-green": {
      fontCharacter: "\\eb94",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xmos_dark-blue": {
      fontCharacter: "X",
      fontColor: "#46788d",
      fontId: "fi"
    },
    "_xmos_medium-orange": {
      fontCharacter: "X",
      fontColor: "#d28445",
      fontId: "fi"
    },
    "_xmos_medium-purple": {
      fontCharacter: "X",
      fontColor: "#aa759f",
      fontId: "fi"
    },
    "_xojo_dark-blue": {
      fontCharacter: "\\e9af",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xojo_dark-cyan": {
      fontCharacter: "\\e9af",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xojo_dark-green": {
      fontCharacter: "\\e9af",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xojo_dark-purple": {
      fontCharacter: "\\e9af",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xojo_medium-blue": {
      fontCharacter: "\\e9af",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xojo_medium-cyan": {
      fontCharacter: "\\e9af",
      fontColor: "#75b5aa",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xojo_medium-green": {
      fontCharacter: "\\e9af",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xojo_medium-red": {
      fontCharacter: "\\e9af",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xpages_dark-blue": {
      fontCharacter: "\\e9c5",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xpages_medium-blue": {
      fontCharacter: "\\e9c5",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "107%"
    },
    "_xtend_dark-purple": {
      fontCharacter: "\\e9c6",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yaml_dark-green": {
      fontCharacter: "y",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yamllint_medium-green": {
      fontCharacter: "\\eb9d",
      fontColor: "#90a959",
      fontId: "fi",
      fontSize: "114%"
    },
    "_yaml_medium-orange": {
      fontCharacter: "y",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yaml_medium-red": {
      fontCharacter: "y",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yandex_medium-red": {
      fontCharacter: "\\42f",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yang_medium-red": {
      fontCharacter: "\\262f",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yang_medium-yellow": {
      fontCharacter: "\\262f",
      fontColor: "#f4bf75",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yara_medium-red": {
      fontCharacter: "\\ea9f",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yarn_dark-blue": {
      fontCharacter: "\\ea1a",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "114%"
    },
    "_yarn_medium-blue": {
      fontCharacter: "\\ea1a",
      fontColor: "#6a9fb5",
      fontId: "fi",
      fontSize: "114%"
    },
    "_yeoman_medium-cyan": {
      fontCharacter: "\\e67a",
      fontColor: "#75b5aa",
      fontId: "devicons",
      fontSize: "114%"
    },
    "_yorick_medium-orange": {
      fontCharacter: "\\1f480",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "107%"
    },
    "_yui_dark-blue": {
      fontCharacter: "\\ea00",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zbrush_dark-purple": {
      fontCharacter: "\\e9f2",
      fontColor: "#825078",
      fontId: "fi",
      fontSize: "114%"
    },
    "_zbrush_dark-red": {
      fontCharacter: "\\e9f2",
      fontColor: "#be2f31",
      fontId: "fi",
      fontSize: "114%"
    },
    "_zbrush_medium-red": {
      fontCharacter: "\\e9f2",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "114%"
    },
    "_zeit_dark-grey": {
      fontCharacter: "\\25B2",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zeit_dark-maroon": {
      fontCharacter: "\\25B2",
      fontColor: "#7c4426",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zeit_medium-grey": {
      fontCharacter: "\\25B2",
      fontColor: "#7f7f7f",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zeit_medium-maroon": {
      fontCharacter: "\\25B2",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zephir_medium-pink": {
      fontCharacter: "\\e9c7",
      fontColor: "#ff00cc",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zig_medium-orange": {
      fontCharacter: "z",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    "_zimpl_medium-orange": {
      fontCharacter: "\\e9c8",
      fontColor: "#d28445",
      fontId: "fi",
      fontSize: "114%"
    },
    _zip: {
      fontCharacter: "\\f013",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_dark-blue": {
      fontCharacter: "\\f013",
      fontColor: "#46788d",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_dark-cyan": {
      fontCharacter: "\\f013",
      fontColor: "#4d9085",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_dark-orange": {
      fontCharacter: "\\f013",
      fontColor: "#a35f27",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_dark-pink": {
      fontCharacter: "\\f013",
      fontColor: "#cc00a3",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_light-orange": {
      fontCharacter: "\\f013",
      fontColor: "#e1ad83",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_medium-blue": {
      fontCharacter: "\\f013",
      fontColor: "#6a9fb5",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_medium-cyan": {
      fontCharacter: "\\f013",
      fontColor: "#75b5aa",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_medium-green": {
      fontCharacter: "\\f013",
      fontColor: "#90a959",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_medium-maroon": {
      fontCharacter: "\\f013",
      fontColor: "#8f5536",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_medium-orange": {
      fontCharacter: "\\f013",
      fontColor: "#d28445",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_medium-purple": {
      fontCharacter: "\\f013",
      fontColor: "#aa759f",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zip_medium-red": {
      fontCharacter: "\\f013",
      fontColor: "#ac4142",
      fontId: "octicons",
      fontSize: "114%"
    },
    "_zork_dark-blue": {
      fontCharacter: "\\1b6",
      fontColor: "#46788d",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zork_dark-cyan": {
      fontCharacter: "\\1b6",
      fontColor: "#4d9085",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zork_dark-green": {
      fontCharacter: "\\1b6",
      fontColor: "#66783e",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zork_medium-maroon": {
      fontCharacter: "\\1b6",
      fontColor: "#8f5536",
      fontId: "fi",
      fontSize: "107%"
    },
    "_zork_medium-red": {
      fontCharacter: "\\1b6",
      fontColor: "#ac4142",
      fontId: "fi",
      fontSize: "107%"
    }
  };
  const fileExtensions = {
    "1": "_manpage_dark-green",
    "2": "_manpage_dark-green",
    "3": "_manpage_dark-green",
    "4": "_manpage_dark-green",
    "5": "_manpage_dark-green",
    "6": "_manpage_dark-green",
    "7": "_manpage_dark-green",
    "8": "_manpage_dark-green",
    "9": "_manpage_dark-green",
    "80386": "_asm-intel_dark-blue",
    "+": "_a-plus_medium-blue",
    "1b": "_manpage_dark-green",
    "1c": "_manpage_dark-green",
    "1has": "_manpage_dark-green",
    "1in": "_manpage_dark-green",
    "1m": "_manpage_dark-green",
    "1s": "_manpage_dark-green",
    "1st": "_book_medium-blue",
    "1t": "_manpage_dark-green",
    "1x": "_manpage_dark-green",
    "2da": "_database_medium-cyan",
    "3avl": "_manpage_dark-green",
    "3bsm": "_manpage_dark-green",
    "3c": "_manpage_dark-green",
    "3cfgadm": "_manpage_dark-green",
    "3dm": "_rhino_medium-blue",
    "3ds": "_maxscript_medium-cyan",
    "3gp": "_video_medium-blue",
    "3gpp": "_video_medium-blue",
    "3in": "_manpage_dark-green",
    "3m": "_manpage_dark-green",
    "3p": "_manpage_dark-green",
    "3perl": "_manpage_dark-green",
    "3pm": "_manpage_dark-green",
    "3qt": "_manpage_dark-green",
    "3x": "_manpage_dark-green",
    "4dm": "_4d_dark-blue",
    "4gl": "_sql_medium-blue",
    "4th": "_code_medium-blue",
    "5c": "_nickle_medium-grey",
    "6pl": "_perl6_light-blue",
    "6pm": "_perl6_dark-cyan",
    "7d": "_manpage_dark-green",
    "7fs": "_manpage_dark-green",
    "7i": "_manpage_dark-green",
    "7ipp": "_manpage_dark-green",
    "7m": "_manpage_dark-green",
    "7p": "_manpage_dark-green",
    "7z": "_zip_medium-maroon",
    "8xk": "_calc_medium-maroon",
    "8xk.txt": "_calc_medium-maroon",
    "8xp": "_calc_medium-maroon",
    "8xp.txt": "_calc_medium-maroon",
    "9e": "_manpage_dark-green",
    "9f": "_manpage_dark-green",
    "9p": "_manpage_dark-green",
    "9s": "_manpage_dark-green",
    "a+": "_a-plus_medium-blue",
    a: "_asm_medium-green",
    a51: "_asm_medium-orange",
    aac: "_audio_dark-cyan",
    ab1: "_abif_medium-green",
    abap: "_abap_medium-orange",
    "abbrev-defs": "_emacs_medium-purple",
    abbrev_defs: "_emacs_medium-purple",
    abc: "_clean_medium-blue",
    abif: "_abif_medium-blue",
    abl: "_progress_medium-green",
    abnf: "_bnf_medium-green",
    abt: "_text_dark-purple",
    ac3: "_audio_dark-cyan",
    accda: "_access_dark-maroon",
    accdb: "_access_medium-maroon",
    accde: "_access_medium-green",
    accdr: "_access_medium-red",
    accdt: "_access_dark-red",
    acs: "_angelscript_medium-blue",
    ad: "_asciidoctor_medium-blue",
    ada: "_ada_medium-blue",
    adb: "_ada_medium-blue",
    adml: "_code_dark-blue",
    admx: "_code_dark-blue",
    adn: "_access_light-maroon",
    ado: "_stata_dark-blue",
    adoc: "_asciidoctor_medium-blue",
    adp: "_tcl_medium-orange",
    ads: "_ada_medium-blue",
    aep: "_ae_dark-pink",
    aepx: "_code_medium-purple",
    aes: "_sophia_dark-pink",
    aet: "_ae_dark-purple",
    afdesign: "_affinity_medium-blue",
    aff: "_database_medium-red",
    affect: "_affectscript_medium-pink",
    afm: "_postscript_medium-green",
    afphoto: "_affinity_medium-pink",
    afpub: "_affinity_medium-red",
    agc: "_asm-agc_dark-blue",
    agda: "_agda_dark-cyan",
    ahk: "_ahk_dark-blue",
    ahkl: "_ahk_dark-purple",
    ahu: "_totvs_medium-green",
    ai: "_ai_medium-orange",
    aia: "_ai_medium-yellow",
    aif: "_audio_medium-purple",
    aifc: "_audio_medium-purple",
    aiff: "_audio_medium-purple",
    ait: "_ai_dark-orange",
    aj: "_eclipse_medium-maroon",
    al: "_perl_dark-blue",
    alexignore: "_alex_medium-red",
    alexrc: "_alex_medium-pink",
    alias: "_link_medium-blue",
    als: "_alloy_medium-red",
    am: "_checklist_medium-red",
    amm: "_postscript_medium-green",
    ampl: "_ampl_dark-maroon",
    ana: "_analytica_medium-orange",
    angelscript: "_angelscript_medium-blue",
    anim: "_unity3d_dark-blue",
    anime: "_animestudio_medium-orange",
    animeaction: "_animestudio_medium-blue",
    animebrush: "_animestudio_medium-maroon",
    animeexport: "_animestudio_medium-yellow",
    animeproj: "_animestudio_medium-orange",
    animestyle: "_animestudio_medium-purple",
    anme: "_animestudio_medium-maroon",
    ans: "_text_dark-orange",
    ansible: "_ansible_dark-cyan",
    "ansible.yaml": "_ansible_dark-cyan",
    "ansible.yml": "_ansible_dark-cyan",
    ansiweatherrc: "_sun_medium-yellow",
    ant: "_ant_dark-pink",
    any: "_anyscript_dark-red",
    apacheconf: "_apache_dark-red",
    aph: "_totvs_dark-green",
    apib: "_api_medium-blue",
    apk: "_zip_medium-red",
    apkbuild: "_alpine_dark-blue",
    apl: "_apl_dark-cyan",
    apla: "_apl_dark-cyan",
    aplc: "_apl_dark-cyan",
    aplf: "_apl_dark-cyan",
    "apl.history": "_apl_medium-maroon",
    apli: "_apl_dark-cyan",
    apln: "_apl_dark-cyan",
    aplo: "_apl_dark-cyan",
    apm: "_image_medium-red",
    apng: "_image_medium-orange",
    applescript: "_apple_medium-purple",
    "app.src": "_erlang_dark-maroon",
    appxmanifest: "_code_medium-orange",
    arc: "_arc_medium-blue",
    arcconfig: "_gear_dark-blue",
    arm: "_asm-arm_medium-blue",
    arpa: "_earth_medium-green",
    arr: "_pyret_dark-red",
    as: "_as_medium-red",
    asax: "_asp_medium-maroon",
    asc: "_asciidoctor_medium-blue",
    asciidoc: "_asciidoctor_medium-blue",
    ascx: "_asp_dark-green",
    asf: "_video_dark-purple",
    ash: "_code_medium-cyan",
    ashx: "_asp_medium-green",
    asl: "_code_medium-blue",
    asm: "_asm_medium-green",
    asmx: "_asp_dark-cyan",
    asn: "_code_medium-cyan",
    asn1: "_code_medium-cyan",
    asp: "_asp_dark-blue",
    aspx: "_asp_medium-purple",
    asset: "_unity3d_dark-green",
    asx: "_video_medium-maroon",
    asy: "_asymptote_medium-red",
    atn: "_psd_dark-blue",
    atomignore: "_atom_medium-green",
    "atomproject.cson": "_atom_dark-green",
    "atomproject.json": "_atom_dark-green",
    au: "_audio_medium-cyan",
    au3: "_autoit_medium-purple",
    aug: "_augeas_dark-orange",
    auk: "_awk_medium-cyan",
    aup: "_audacity_medium-yellow",
    autotest: "_config-ruby_medium-red",
    aux: "_tex_medium-green",
    avcs: "_avro_medium-blue",
    avdl: "_avro_medium-blue",
    avi: "_video_medium-blue",
    avif: "_image_medium-orange",
    avr: "_asm-avr_dark-purple",
    avsc: "_avro_medium-blue",
    awk: "_awk_medium-blue",
    axd: "_asp_medium-cyan",
    axf: "_binary_dark-blue",
    axi: "_amx_dark-blue",
    axml: "_code_dark-blue",
    axs: "_amx_medium-blue",
    b: "_brain_dark-pink",
    babel: "_babel_medium-yellow",
    babelignore: "_babel_dark-yellow",
    babelrc: "_babel_medium-yellow",
    "babelrc.cjs": "_babel_medium-yellow",
    "babelrc.js": "_babel_medium-yellow",
    "babelrc.mjs": "_babel_medium-yellow",
    bak: "_backup",
    bal: "_ballerina_medium-cyan",
    balx: "_ballerina_dark-green",
    baml: "_winui_medium-red",
    bas: "_vs_medium-blue",
    bash: "_terminal_medium-purple",
    bat: "_windows_medium-purple",
    bats: "_test-generic_medium-grey",
    bazel: "_bazel_dark-blue",
    bb: "_blitzbasic_medium-cyan",
    bbl: "_bibtex_medium-blue",
    bbx: "_bibtex_medium-orange",
    bc: "_code_dark-red",
    bcmx: "_outlook_dark-blue",
    bdf: "_font-bitmap_medium-red",
    beam: "_erlang_dark-red",
    befunge: "_code_medium-orange",
    bemjson: "_bem_medium-maroon",
    "bemjson.cjs": "_bem_medium-maroon",
    "bemjson.js": "_bem_medium-maroon",
    "bemjson.mjs": "_bem_medium-maroon",
    bez: "_postscript_medium-red",
    bf: "_brain_dark-pink",
    bib: "_bibtex_medium-yellow",
    bibtex: "_bibtex_medium-yellow",
    biml: "_biml_medium-red",
    bin: "_binary_dark-orange",
    binarycookies: "_safari_dark-blue",
    bison: "_bison_medium-red",
    bithoundrc: "_bithound_medium-red",
    blade: "_laravel_medium-orange",
    "blade.php": "_laravel_medium-orange",
    blend: "_blender_medium-orange",
    blend0: "_blender_dark-orange",
    blend1: "_blender_dark-orange",
    blend2: "_blender_dark-orange",
    blend3: "_blender_dark-orange",
    blend4: "_blender_dark-orange",
    blend5: "_blender_dark-orange",
    blend6: "_blender_dark-orange",
    blend7: "_blender_dark-orange",
    blend8: "_blender_dark-orange",
    blend9: "_blender_dark-orange",
    bmp: "_image_medium-red",
    bmx: "_code_dark-blue",
    bnf: "_bnf_medium-maroon",
    bolt: "_firebase-bolt_medium-yellow",
    boo: "_boo_medium-green",
    boot: "_boot",
    bootstraprc: "_bootstrap_medium-orange",
    bpg: "_image_medium-red",
    bphys: "_blender_dark-blue",
    br: "_brotli_medium-orange",
    "brakeman.yml": "_brakeman_medium-red",
    brd: "_circuit-board_dark-green",
    brf: "_text_medium-maroon",
    bro: "_bro_dark-cyan",
    brs: "_code_dark-blue",
    bs: "_bikeshed_medium-red",
    bsdiff: "_binary_dark-orange",
    bsl: "_1c_medium-red",
    bsp: "_source_medium-orange",
    bsq: "_bosque_medium-green",
    bst: "_bibtex_medium-green",
    bsv: "_bluespec_dark-blue",
    buckconfig: "_buck_medium-blue",
    build: "_nant_medium-orange",
    builder: "_ruby_dark-red",
    buildpacks: "_heroku_light-purple",
    builds: "_vs_medium-maroon",
    bundle: "_dylib_medium-cyan",
    bz2: "_zip_dark-cyan",
    bzl: "_bazel_dark-blue",
    bzrignore: "_bazaar_medium-yellow",
    c: "_c_medium-blue",
    "c++": "_cpp_medium-blue",
    c2hs: "_haskell_dark-purple",
    c4d: "_model_dark-blue",
    cabal: "_cabal_medium-cyan",
    caffe2model: "_caffe2_dark-blue",
    caffemodel: "_caffe_medium-maroon",
    cake: "_cake_medium-yellow",
    "calva-repl": "_calva_medium-maroon",
    capnp: "_code_dark-red",
    "cargo.lock": "_package_dark-orange",
    "cargo.toml": "_package_light-orange",
    cas: "_casc_medium-orange",
    casc: "_casc_medium-orange",
    cats: "_c_medium-purple",
    cbl: "_cobol_medium-blue",
    cbor: "_database_medium-cyan",
    cbx: "_bibtex_medium-red",
    cc: "_cpp_medium-blue",
    ccp: "_cobol_medium-blue",
    ccx: "_corel_medium-blue",
    ccxml: "_code_dark-blue",
    cd5: "_image_dark-green",
    cddl: "_bnf_medium-grey",
    cdf: "_cdf_medium-red",
    cdr: "_coreldraw_medium-green",
    cdrx: "_coreldraw_medium-green",
    cdt: "_coreldraw_medium-green",
    ceylon: "_ceylon_medium-orange",
    cf: "_bnf_dark-yellow",
    cfc: "_cf_light-cyan",
    cfg: "_config_medium-yellow",
    cfignore: "_cloudfoundry_medium-blue",
    cfl: "_cuneiform_dark-blue",
    cfm: "_cf_medium-cyan",
    cfml: "_cf_medium-cyan",
    cgi: "_code_medium-red",
    cginc: "_model_dark-cyan",
    cgm: "_image_medium-orange",
    cgt: "_bnf_medium-red",
    ch: "_code_medium-red",
    changes: "_book_medium-blue",
    checksum: "_tag_medium-green",
    checksums: "_tag_medium-green",
    chem: "_manpage_dark-green",
    chm: "_question_medium-blue",
    chord: "_music_medium-orange",
    chpl: "_chapel_medium-green",
    cidmap: "_sourcemap_medium-orange",
    cin: "_image_medium-orange",
    cir: "_circuit-board_dark-green",
    cirru: "_cirru_medium-pink",
    cjs: "_js_medium-green",
    "cjs.map": "_sourcemap_medium-green",
    "cjs.snap": "_jest_medium-green",
    cjsx: "_coffee_dark-maroon",
    ck: "_chuck_medium-green",
    cksum: "_tag_medium-green",
    cksums: "_tag_medium-green",
    ckt: "_circuit-board_dark-green",
    cl: "_cl_medium-orange",
    cl2: "_clojure_medium-purple",
    "clang-format": "_llvm_medium-yellow",
    "clang-tidy": "_llvm_medium-yellow",
    "class": "_java_medium-maroon",
    classpath: "_eclipse_medium-red",
    cld: "_openvms_medium-orange",
    click: "_click_medium-yellow",
    clixml: "_code_dark-blue",
    clj: "_clojure_medium-blue",
    cljc: "_clojure_medium-green",
    cljs: "_cljs_medium-blue",
    cljscm: "_cljs_medium-blue",
    cljx: "_clojure_medium-red",
    cloc: "_dashboard_medium-blue",
    clp: "_clips_dark-green",
    cls: "_tex_medium-orange",
    clw: "_clarion_medium-orange",
    cmake: "_cmake_medium-green",
    cmd: "_windows_medium-purple",
    cmx: "_corel_medium-blue",
    cnc: "_binary_medium-orange",
    cnf: "_config_medium-yellow",
    cob: "_cobol_medium-blue",
    cobjdump: "_binary_dark-orange",
    "c-objdump": "_binary_dark-orange",
    "c++objdump": "_binary_dark-orange",
    "c++-objdump": "_binary_dark-orange",
    cobol: "_cobol_medium-blue",
    cocci: "_code_medium-blue",
    "codacy.yaml": "_codacy_dark-blue",
    "codacy.yml": "_codacy_dark-blue",
    "codeclimate.yml": "_cc_medium-green",
    codekit: "_codekit",
    "code-workspace": "_vs_dark-blue",
    codoopts: "_gear_medium-maroon",
    coffee: "_coffee_medium-maroon",
    "coffee.ecr": "_coffee_medium-cyan",
    "coffee.erb": "_coffee_medium-red",
    coffeelintignore: "_config-coffee_medium-red",
    "coffee.md": "_coffee_medium-blue",
    collada: "_khronos_medium-orange",
    com: "_openvms_medium-orange",
    command: "_terminal_medium-purple",
    comp: "_model_medium-purple",
    compilerc: "_electron_dark-blue",
    "compilerc.json": "_electron_dark-blue",
    conf: "_config_medium-yellow",
    config: "_code_medium-blue",
    conll: "_conll_medium-blue",
    conllu: "_conll_medium-orange",
    control: "_debian_dark-cyan",
    coq: "_coq_medium-maroon",
    "c+p": "_cpp_medium-blue",
    "cp+": "_cpp_medium-blue",
    cp: "_cp_medium-maroon",
    cpc: "_cpcdosc_medium-blue",
    "c+pobjdump": "_binary_dark-orange",
    "c+p-objdump": "_binary_dark-orange",
    "cp+objdump": "_binary_dark-orange",
    "cp+-objdump": "_binary_dark-orange",
    cpp: "_cpp_medium-blue",
    cppobjdump: "_binary_dark-orange",
    "cpp-objdump": "_binary_dark-orange",
    cproject: "_eclipse_dark-blue",
    cps: "_cp_dark-red",
    cpuprofile: "_dashboard_medium-green",
    cpx: "_cpp_medium-blue",
    cpxobjdump: "_binary_dark-orange",
    "cpx-objdump": "_binary_dark-orange",
    cpy: "_cobol_medium-blue",
    cql: "_sql_dark-blue",
    cr: "_crystal_medium-cyan",
    cr2: "_image_medium-orange",
    crc32sum: "_tag_medium-green",
    crc32sums: "_tag_medium-green",
    crcsum: "_tag_medium-green",
    crcsums: "_tag_medium-green",
    crdownload: "_download_dark-blue",
    crec: "_lync_dark-blue",
    creole: "_creole_medium-blue",
    cross_rubies: "_config-ruby_medium-red",
    crt: "_key_medium-blue",
    crx: "_chrome_medium-red",
    cs: "_csharp_medium-blue",
    cscfg: "_code_medium-red",
    csd: "_csound_dark-maroon",
    csh: "_terminal_medium-yellow",
    cshtml: "_html5_medium-red",
    csl: "_kusto_medium-blue",
    cson: "_database_medium-maroon",
    csproj: "_vs_dark-blue",
    css: "_css3_medium-blue",
    csslintrc: "_gear_medium-yellow",
    "css.map": "_sourcemap_medium-blue",
    cstr: "_manpage_dark-green",
    csv: "_graph_light-red",
    csx: "_csscript_dark-green",
    ct: "_code_dark-pink",
    ctags: "_tag_medium-blue",
    ctp: "_cakephp_medium-red",
    cts: "_ts_medium-blue",
    cu: "_nvidia_medium-green",
    cubemap: "_unity3d_medium-cyan",
    cuh: "_nvidia_dark-green",
    curlrc: "_curl_dark-blue",
    curry: "_curry_medium-red",
    cvsignore: "_cvs_medium-orange",
    cw: "_code_medium-red",
    cwl: "_cwl_dark-red",
    "c+x": "_cpp_medium-blue",
    "cx+": "_cpp_medium-blue",
    "c+xobjdump": "_binary_dark-orange",
    "c+x-objdump": "_binary_dark-orange",
    "cx+objdump": "_binary_dark-orange",
    "cx+-objdump": "_binary_dark-orange",
    cxp: "_cpp_medium-blue",
    cxpobjdump: "_binary_dark-orange",
    "cxp-objdump": "_binary_dark-orange",
    cxx: "_cpp_medium-blue",
    cxxobjdump: "_binary_dark-orange",
    "cxx-objdump": "_binary_dark-orange",
    cy: "_code_dark-green",
    cyp: "_neo4j_medium-blue",
    cypher: "_neo4j_medium-blue",
    d: "_dlang_medium-red",
    dae: "_khronos_medium-orange",
    dafny: "_dafny_medium-yellow",
    darcspatch: "_darcs_medium-green",
    dart: "_dart_medium-cyan",
    dat: "_binary_dark-orange",
    dats: "_ats_medium-red",
    db: "_sqlite_medium-purple",
    db2: "_sql_medium-purple",
    db3: "_sqlite_dark-purple",
    dbf: "_dbase_medium-red",
    dbi: "_database_medium-orange",
    dbk: "_docbook_medium-cyan",
    dbproj: "_vs_dark-purple",
    dc: "_calc_medium-blue",
    dcl: "_clean_medium-cyan",
    dcm: "_image_medium-pink",
    ddl: "_sql_medium-blue",
    dds: "_image_dark-green",
    deb: "_debian_medium-red",
    decls: "_blitzbasic_medium-green",
    def: "_modula2_medium-green",
    der: "_key_medium-purple",
    desktop: "_config_medium-yellow",
    dfm: "_delphi_medium-red",
    dfont: "_font_dark-cyan",
    dformat: "_manpage_dark-green",
    dfy: "_dafny_medium-yellow",
    dhall: "_dhall_dark-grey",
    di: "_dlang_medium-red",
    dia: "_dia_medium-cyan",
    dic: "_database_medium-green",
    dict: "_database_medium-green",
    dif: "_graph_medium-green",
    diff: "_diff_medium-orange",
    diffs: "_diff_medium-red",
    dig: "_digdag_medium-orange",
    dio: "_drawio_medium-orange",
    "dio.png": "_drawio_medium-orange",
    "dio.svg": "_drawio_medium-orange",
    directory: "_config_medium-yellow",
    dit: "_binary_dark-green",
    dita: "_code_medium-purple",
    ditamap: "_code_dark-purple",
    ditaval: "_code_medium-green",
    ditroff: "_binary_dark-green",
    djs: "_doge_medium-yellow",
    djv: "_image_medium-purple",
    djvu: "_image_medium-purple",
    dll: "_gears_dark-orange",
    dlm: "_idl_medium-blue",
    dm: "_byond_medium-blue",
    dmark: "_star_dark-red",
    dmg: "_osx_medium-red",
    dnc: "_binary_medium-orange",
    dnh: "_yang_medium-red",
    "do": "_stata_medium-blue",
    "d-objdump": "_binary_dark-blue",
    doc: "_word_medium-blue",
    docbook: "_docbook_medium-cyan",
    dockerfile: "_docker_dark-blue",
    dockerignore: "_docker_dark-blue",
    "doclets.yaml": "_doclets_light-green",
    "doclets.yml": "_doclets_light-green",
    docm: "_word_medium-maroon",
    docx: "_word_dark-blue",
    docxml: "_word_dark-cyan",
    "docz.cjs": "_docz_medium-yellow",
    "docz.config.cjs": "_docz_medium-yellow",
    "docz.config.js": "_docz_medium-yellow",
    "docz.config.json": "_docz_medium-orange",
    "docz.config.mjs": "_docz_medium-yellow",
    "docz.js": "_docz_medium-yellow",
    "docz.json": "_docz_medium-orange",
    "docz.mjs": "_docz_medium-yellow",
    "doczrc.cjs": "_docz_medium-yellow",
    "doczrc.config.cjs": "_docz_medium-yellow",
    "doczrc.config.js": "_docz_medium-yellow",
    "doczrc.config.json": "_docz_medium-orange",
    "doczrc.config.mjs": "_docz_medium-yellow",
    "doczrc.js": "_docz_medium-yellow",
    "doczrc.json": "_docz_medium-orange",
    "doczrc.mjs": "_docz_medium-yellow",
    dof: "_delphi_medium-blue",
    doh: "_stata_light-blue",
    dot: "_dotjs_medium-blue",
    dotm: "_word_dark-maroon",
    dotsettings: "_code_dark-red",
    dotx: "_word_medium-cyan",
    dpatch: "_darcs_medium-green",
    dpr: "_delphi_medium-orange",
    dpx: "_image_dark-orange",
    drawio: "_drawio_medium-orange",
    "drawio.png": "_drawio_medium-orange",
    "drawio.svg": "_drawio_medium-orange",
    dri: "_text_medium-blue",
    drl: "_circuit-board_dark-blue",
    "drone.yaml": "_drone_medium-cyan",
    "drone.yml": "_drone_medium-cyan",
    druby: "_mirah_medium-blue",
    dsc: "_debian_dark-cyan",
    dsk: "_zip_medium-green",
    dsl: "_code_medium-blue",
    dsn: "_circuit-board_dark-cyan",
    dsp: "_faust_dark-orange",
    dsql: "_msql_medium-purple",
    ds_store: "_finder_dark-cyan",
    dtd: "_code_medium-cyan",
    dtml: "_html5_medium-blue",
    dts: "_devicetree_medium-purple",
    dtsi: "_devicetree_medium-orange",
    dtx: "_tex_medium-maroon",
    duby: "_mirah_medium-blue",
    dust: "_js_medium-maroon",
    dwg: "_model_dark-orange",
    dwl: "_dataweave_medium-blue",
    dxf: "_model_medium-orange",
    dyalog: "_dyalog_medium-orange",
    dyapp: "_dyalog_medium-red",
    dyl: "_code_medium-blue",
    dylan: "_code_medium-blue",
    dylib: "_dylib_medium-cyan",
    dzn: "_minizinc_dark-blue",
    e: "_eiffel_medium-cyan",
    "eam.fs": "_database_dark-purple",
    ear: "_zip_medium-purple",
    eb: "_easybuild_dark-blue",
    ebnf: "_bnf_medium-red",
    ebuild: "_gentoo_dark-cyan",
    ec: "_ec_dark-blue",
    ecl: "_eclipse-lang_medium-blue",
    eclass: "_gentoo_medium-blue",
    "ecl.txt": "_eclipse-lang_medium-blue",
    eclxml: "_code_dark-green",
    eco: "_docpad_medium-maroon",
    ecr: "_crystal_medium-cyan",
    ecrc: "_editorconfig_dark-blue",
    ecw: "_image_light-blue",
    ed: "_code_dark-maroon",
    edge: "_edge_dark-orange",
    editorconfig: "_editorconfig_medium-orange",
    edn: "_database_medium-purple",
    eex: "_elixir_medium-purple",
    egg: "_zip_light-orange",
    egt: "_bnf_medium-red",
    eh: "_ec_dark-purple",
    ejs: "_ejs_medium-green",
    ejson: "_database_dark-red",
    "ejs.t": "_hygen_medium-pink",
    el: "_emacs_medium-purple",
    elc: "_emacs_dark-purple",
    eld: "_emacs_dark-purple",
    elf: "_binary_medium-green",
    eliom: "_ocaml_medium-red",
    eliomi: "_ocaml_dark-red",
    elm: "_elm_medium-blue",
    em: "_mustache_medium-blue",
    emacs: "_emacs_medium-purple",
    _emacs: "_emacs_medium-purple",
    "emacs.desktop": "_emacs_medium-purple",
    emberscript: "_em_medium-red",
    emblem: "_mustache_medium-blue",
    emf: "_image_medium-red",
    eml: "_mail_medium-blue",
    "encodings.dir": "_database_medium-orange",
    enf: "_book_medium-blue",
    engine: "_php_medium-blue",
    enigma: "_sourcemap_medium-purple",
    enl: "_book_medium-blue",
    enlp: "_book_medium-blue",
    enlx: "_book_medium-blue",
    enq: "_book_medium-blue",
    ens: "_book_medium-blue",
    ensime: "_ensime_medium-red",
    entl: "_book_medium-blue",
    enw: "_book_medium-blue",
    enz: "_book_medium-blue",
    eot: "_font_light-green",
    epj: "_ecere_medium-blue",
    epp: "_puppet_medium-orange",
    eps: "_postscript_medium-orange",
    epsf: "_postscript_dark-orange",
    epsi: "_postscript_dark-orange",
    epub: "_zip_medium-green",
    eq: "_eq_medium-orange",
    eqn: "_manpage_dark-green",
    eqnrc: "_manpage_dark-green",
    "eqnrc-end": "_manpage_dark-green",
    erb: "_ruby_medium-red",
    erl: "_erlang_medium-red",
    err: "_text_medium-red",
    es: "_js_medium-yellow",
    es0: "_js_medium-yellow",
    es1: "_book_medium-blue",
    es2: "_js_medium-yellow",
    es3: "_js_medium-yellow",
    es4: "_js_medium-yellow",
    es5: "_js_medium-yellow",
    es6: "_js_medium-yellow",
    es7: "_js_medium-yellow",
    es8: "_js_medium-yellow",
    es9: "_js_medium-yellow",
    eskip: "_anchor_dark-blue",
    eslintcache: "_eslint_medium-purple",
    eslintignore: "_eslint_medium-purple",
    eslintrc: "_eslint_light-purple",
    etx: "_text_medium-yellow",
    eup: "_eagle_medium-red",
    ex: "_elixir_dark-purple",
    exe: "_windows",
    exp: "_tcl_dark-blue",
    exr: "_openexr_medium-pink",
    exrc: "_vim_medium-green",
    exs: "_elixir_medium-purple",
    f: "_fortran_medium-maroon",
    f03: "_fortran_medium-red",
    f08: "_fortran_medium-blue",
    f4a: "_audio_medium-red",
    f4b: "_audio_medium-red",
    f77: "_fortran_medium-maroon",
    f90: "_fortran_medium-green",
    f95: "_fortran_dark-pink",
    fa: "_dna_medium-purple",
    faa: "_dna_medium-orange",
    fab: "_circuit-board_dark-red",
    factor: "_factor_medium-orange",
    "factor-boot-rc": "_factor_medium-red",
    "factor-rc": "_factor_dark-orange",
    fal: "_falcon_medium-red",
    falcon: "_falcon_medium-red",
    fan: "_fantom_medium-blue",
    fancypack: "_fancy_medium-blue",
    faq: "_book_medium-blue",
    fas: "_dna_medium-purple",
    fasta: "_dna_medium-purple",
    fastq: "_dna_medium-green",
    faunarc: "_fauna_dark-blue",
    fbx: "_fbx_medium-maroon",
    fcgi: "_code_medium-blue",
    fdepl: "_franca_medium-maroon",
    fdl: "_franca_medium-orange",
    fdx: "_finaldraft_medium-green",
    fea: "_database_light-blue",
    feature: "_cucumber_medium-green",
    ff: "_ff_medium-orange",
    ffn: "_dna_medium-red",
    fidl: "_code_medium-pink",
    fig: "_image_dark-orange",
    figma: "_figma_medium-red",
    filters: "_code_medium-pink",
    firebaserc: "_firebase_medium-orange",
    fish: "_terminal_medium-green",
    fit: "_image_medium-cyan",
    fits: "_image_medium-cyan",
    fla: "_animate_dark-orange",
    flac: "_audio_dark-red",
    flake8: "_config-python_dark-blue",
    flc: "_config_medium-green",
    flex: "_lex_dark-red",
    flf: "_font-bitmap_medium-red",
    flif: "_image_dark-red",
    flooignore: "_floobits_medium-red",
    flow: "_flow_medium-orange",
    flowconfig: "_flow_medium-orange",
    "flutter-plugins": "_flutter_light-blue",
    flux: "_flux_dark-blue",
    flv: "_video_medium-red",
    fna: "_dna_medium-pink",
    fnc: "_model_dark-blue",
    fnt: "_font-bitmap_medium-blue",
    fo: "_code_medium-red",
    fodg: "_openoffice_dark-orange",
    fodp: "_openoffice_medium-pink",
    fods: "_openoffice_dark-cyan",
    fodt: "_openoffice_dark-purple",
    fon: "_font-bitmap_dark-red",
    "fonts.alias": "_database_medium-red",
    "fonts.dir": "_database_medium-red",
    "fonts.scale": "_database_medium-red",
    "for": "_fortran_dark-cyan",
    "forge.config.js": "_electron_dark-cyan",
    forth: "_code_medium-blue",
    fossaignore: "_fossa_dark-blue",
    "fossa.yaml": "_fossa_medium-blue",
    "fossa.yml": "_fossa_medium-blue",
    fossil: "_fossil_medium-cyan",
    fountain: "_fountain_medium-blue",
    fp: "_vertex_medium-red",
    fpp: "_fortran_dark-yellow",
    fq: "_dna_medium-green",
    fql: "_fauna_dark-blue",
    fr: "_frege_dark-red",
    frag: "_vertex_medium-red",
    frg: "_vertex_medium-red",
    frm: "_vs_medium-blue",
    frn: "_dna_medium-blue",
    frt: "_code_dark-purple",
    frx: "_vs_medium-blue",
    fs: "_fsharp_medium-blue",
    fsa: "_dna_medium-purple",
    fsh: "_vertex_medium-red",
    fshader: "_vertex_medium-red",
    fsi: "_fsharp_medium-blue",
    fsproj: "_code_dark-red",
    fsx: "_fsharp_medium-blue",
    fth: "_code_dark-blue",
    fthtml: "_fthtml_medium-orange",
    ftl: "_freemarker_medium-blue",
    fts: "_image_medium-cyan",
    fun: "_code_medium-orange",
    fut: "_futhark_dark-maroon",
    fx: "_flux_medium-blue",
    fxh: "_model_dark-cyan",
    fxl: "_fexl_medium-cyan",
    fxml: "_code_medium-maroon",
    fy: "_fancy_dark-blue",
    g: "_antlr_medium-red",
    g0: "_circuit-board_dark-blue",
    g1: "_circuit-board_dark-blue",
    g2: "_circuit-board_dark-blue",
    g3: "_circuit-board_dark-blue",
    g4: "_circuit-board_dark-blue",
    g5: "_circuit-board_dark-blue",
    g6: "_circuit-board_dark-blue",
    g7: "_circuit-board_dark-blue",
    g8: "_circuit-board_dark-blue",
    g9: "_circuit-board_dark-blue",
    gap: "_gap_medium-yellow",
    gawk: "_awk_medium-red",
    gbl: "_circuit-board_medium-cyan",
    gbo: "_circuit-board_dark-blue",
    gbp: "_circuit-board_dark-red",
    gbr: "_circuit-board_medium-red",
    gbs: "_circuit-board_medium-orange",
    gc: "_binary_medium-orange",
    gco: "_binary_medium-orange",
    gcode: "_binary_medium-orange",
    gcx: "_grapher_medium-green",
    gd: "_godot_medium-blue",
    gdb: "_gdb_medium-green",
    gdbinit: "_gdb_medium-cyan",
    gdiagramstyle: "_omnigraffle_medium-cyan",
    gdshader: "_godot_dark-cyan",
    gem: "_zip_medium-red",
    gemfile: "_bundler_medium-cyan",
    gemspec: "_rubygems_medium-red",
    gemtest: "_config-ruby_medium-red",
    gen: "_genstat_medium-green",
    geo: "_model_medium-red",
    geojson: "_json_medium-cyan",
    geom: "_model_medium-red",
    geometry: "_model_medium-red",
    gf: "_gf_medium-red",
    ggr: "_gimp_medium-orange",
    gi: "_gap_dark-blue",
    gif: "_image_medium-yellow",
    gih: "_gimp_medium-maroon",
    gitattributes: "_git_medium-red",
    gitconfig: "_git_medium-red",
    gitignore: "_git_medium-red",
    "gitignore-global": "_git_medium-red",
    gitignore_global: "_git_medium-red",
    gko: "_circuit-board_medium-red",
    glade: "_glade_medium-green",
    glf: "_pointwise_medium-blue",
    glsl: "_opengl_dark-cyan",
    glslv: "_opengl_dark-cyan",
    gltf: "_gltf_medium-green",
    glyphs: "_glyphs_medium-green",
    glyphslicense: "_key_medium-green",
    gm0: "_circuit-board_medium-green",
    gm1: "_circuit-board_medium-green",
    gm2: "_circuit-board_medium-green",
    gm3: "_circuit-board_medium-green",
    gm4: "_circuit-board_medium-green",
    gm5: "_circuit-board_medium-green",
    gm6: "_circuit-board_medium-green",
    gm7: "_circuit-board_medium-green",
    gm8: "_circuit-board_medium-green",
    gm9: "_circuit-board_medium-green",
    gml: "_gml_medium-green",
    gms: "_gams_dark-red",
    gn: "_gn_dark-blue",
    gni: "_gn_medium-blue",
    gnu: "_gnu_medium-red",
    gnuplot: "_gnuplot_medium-red",
    gnus: "_emacs_medium-red",
    gnut: "_squirrel_medium-red",
    go: "_go_medium-blue",
    god: "_ruby_medium-red",
    godot: "_godot_dark-blue",
    gohtml: "_html5_dark-blue",
    golo: "_golo_medium-orange",
    gp: "_gnuplot_medium-red",
    gpb: "_circuit-board_dark-yellow",
    gpi: "_genstat_medium-blue",
    gpl: "_gimp_medium-green",
    gplv2: "_gnu_medium-red",
    gplv3: "_gnu_medium-red",
    gpt: "_circuit-board_medium-yellow",
    gql: "_graphql_medium-purple",
    grace: "_code_medium-purple",
    gradle: "_gradle_medium-blue",
    gradlew: "_gradle_dark-purple",
    graffle: "_omnigraffle_medium-green",
    grammar: "_bnf_medium-cyan",
    graphql: "_graphql_medium-pink",
    graphqls: "_graphql_medium-red",
    gremlin: "_image_medium-orange",
    grm: "_bnf_medium-yellow",
    grn: "_image_medium-orange",
    groff: "_manpage_dark-green",
    groovy: "_groovy_light-blue",
    grt: "_groovy_light-blue",
    grxml: "_code_dark-orange",
    gs: "_gosu_medium-blue",
    gsf: "_postscript_dark-orange",
    gsh: "_opengl_dark-cyan",
    gshader: "_opengl_dark-cyan",
    gsp: "_groovy_light-blue",
    gspec: "_galen_medium-blue",
    gsrc: "_image_medium-orange",
    gss: "_gauss_medium-orange",
    gst: "_gosu_medium-green",
    gstencil: "_omnigraffle_medium-red",
    gsx: "_gosu_dark-green",
    gtemplate: "_omnigraffle_dark-green",
    gtest: "_galen_medium-cyan",
    gtl: "_circuit-board_medium-blue",
    gto: "_circuit-board_medium-maroon",
    gtp: "_circuit-board_dark-orange",
    gtpl: "_groovy_light-blue",
    gts: "_circuit-board_dark-maroon",
    gv: "_graphviz_medium-blue",
    gvdesign: "_gvdesign_medium-yellow",
    gvimrc: "_vim_medium-green",
    gvy: "_groovy_light-blue",
    gyp: "_python_medium-green",
    gypi: "_python_dark-green",
    gz: "_zip_dark-blue",
    h: "_c_medium-purple",
    "h++": "_cpp_medium-purple",
    h264: "_video_dark-blue",
    hack: "_hack_medium-yellow",
    hak: "_zip_dark-blue",
    haml: "_haml_medium-yellow",
    hamlc: "_haml_medium-maroon",
    "haml.deface": "_haml_medium-red",
    handlebars: "_mustache_medium-orange",
    hats: "_ats_medium-blue",
    hb: "_harbour_dark-blue",
    hbs: "_mustache_medium-orange",
    hbt: "_mustache_medium-orange",
    hc: "_templeos_medium-yellow",
    hcl: "_hashicorp_dark-purple",
    "hc.z": "_templeos_medium-orange",
    hdp: "_image_dark-red",
    hdr: "_image_medium-blue",
    heex: "_elixir_medium-purple",
    heic: "_image_dark-red",
    heif: "_image_medium-orange",
    heifs: "_image_medium-orange",
    hgignore: "_hg_medium-grey",
    hgrc: "_hg_dark-grey",
    hgsub: "_hg_dark-cyan",
    hgsubstate: "_hg_medium-cyan",
    hgtags: "_tag_medium-cyan",
    hh: "_hack_medium-orange",
    hhi: "_hack_medium-red",
    hic: "_clojure_medium-red",
    hif: "_image_medium-orange",
    hip: "_houdini_medium-orange",
    hipnc: "_houdini_medium-orange",
    hjson: "_json_medium-cyan",
    hl: "_hoplon_medium-red",
    hlb: "_openvms_medium-blue",
    hlean: "_lean_dark-red",
    hledger: "_graph_medium-green",
    hlp: "_question_dark-blue",
    hlsl: "_model_medium-blue",
    hlsli: "_model_dark-green",
    hnc: "_binary_medium-orange",
    hoerc: "_config-ruby_medium-red",
    "hound.yaml": "_houndci_medium-purple",
    "hound.yml": "_houndci_medium-purple",
    "h+p": "_cpp_medium-purple",
    "hp+": "_cpp_medium-purple",
    hpgl: "_hp_medium-blue",
    hpp: "_cpp_medium-purple",
    hpx: "_cpp_medium-purple",
    hqf: "_sqf_dark-red",
    hql: "_sql_medium-red",
    hqx: "_zip_medium-cyan",
    hrl: "_erlang_medium-maroon",
    hs: "_haskell_medium-purple",
    "hs-boot": "_haskell_medium-maroon",
    hsc: "_haskell_medium-blue",
    hsig: "_haskell_medium-maroon",
    hson: "_database_medium-orange",
    hta: "_html5_dark-orange",
    htc: "_js_dark-yellow",
    htm: "_html5_medium-orange",
    "htm.ecr": "_html5_medium-cyan",
    "htm.erb": "_html5_medium-red",
    "htm.erb.deface": "_html5_medium-red",
    html: "_html5_medium-orange",
    "html.ecr": "_html5_medium-cyan",
    "html.eex": "_html5_medium-purple",
    "html.erb": "_html5_medium-red",
    "html.erb.deface": "_html5_medium-red",
    "html.heex": "_html5_medium-purple",
    htmlhintrc: "_gear_medium-red",
    "html.leex": "_html5_medium-purple",
    http: "_database_medium-red",
    huskyrc: "_husky_medium-blue",
    "huskyrc.cjs": "_husky_medium-green",
    "huskyrc.js": "_husky_medium-orange",
    "huskyrc.json": "_husky_medium-yellow",
    "huskyrc.mjs": "_husky_medium-blue",
    "huskyrc.yaml": "_husky_medium-red",
    "huskyrc.yml": "_husky_medium-red",
    "h+x": "_cpp_medium-purple",
    "hx+": "_cpp_medium-purple",
    hx: "_haxe_medium-orange",
    hxml: "_haxe_medium-orange",
    hxp: "_cpp_medium-purple",
    hxproj: "_haxedevelop_medium-blue",
    hxsl: "_haxe_medium-orange",
    hxx: "_cpp_medium-purple",
    hy: "_hy_dark-blue",
    hypr: "_kibo_light-yellow",
    "hypr.live": "_kibo_dark-orange",
    hzp: "_code_dark-blue",
    i: "_asm_medium-cyan",
    i3: "_modula3_medium-blue",
    i386: "_asm-intel_dark-blue",
    i3d: "_houdini_medium-orange",
    i7x: "_inform7_dark-blue",
    ia32: "_asm-intel_dark-blue",
    "ia-32": "_asm-intel_dark-blue",
    ia_32: "_asm-intel_dark-blue",
    ia32asm: "_asm-intel_dark-blue",
    "ia-32asm": "_asm-intel_dark-blue",
    ia_32asm: "_asm-intel_dark-blue",
    ia64: "_asm-intel_dark-blue",
    "ia-64": "_asm-intel_dark-blue",
    ia_64: "_asm-intel_dark-blue",
    ia64asm: "_asm-intel_dark-blue",
    "ia-64asm": "_asm-intel_dark-blue",
    ia_64asm: "_asm-intel_dark-blue",
    ia86: "_asm-intel_dark-blue",
    "ia-86": "_asm-intel_dark-blue",
    ia_86: "_asm-intel_dark-blue",
    ia86asm: "_asm-intel_dark-blue",
    "ia-86asm": "_asm-intel_dark-blue",
    ia_86asm: "_asm-intel_dark-blue",
    iced: "_coffee_medium-blue",
    icl: "_clean_dark-cyan",
    icns: "_image_medium-pink",
    ico: "_image_medium-blue",
    idc: "_c_medium-green",
    idml: "_indesign_dark-pink",
    idr: "_idris_dark-red",
    iff: "_image_dark-blue",
    ig: "_modula3_medium-green",
    ihlp: "_stata_medium-cyan",
    ijs: "_j_light-blue",
    ik: "_ioke_medium-red",
    ily: "_lilypond_dark-green",
    imba: "_imba_medium-yellow",
    iml: "_code_medium-red",
    "import": "_godot_medium-red",
    inc: "_clojure_medium-green",
    indb: "_indesign_dark-blue",
    indd: "_indesign_dark-pink",
    "indent.pro": "_gear_medium-blue",
    indl: "_indesign_medium-purple",
    indt: "_indesign_dark-purple",
    info: "_text_dark-blue",
    infopathxml: "_infopath_dark-purple",
    ini: "_config_medium-yellow",
    ink: "_ink_dark-blue",
    ink2: "_ink_dark-purple",
    inl: "_cpp_medium-red",
    ino: "_arduino_dark-cyan",
    inputrc: "_terminal_medium-red",
    ins: "_tex_medium-green",
    install: "_terminal_medium-purple",
    "integrity.json": "_nsri-alt_medium-green",
    intr: "_code_dark-blue",
    inx: "_inkscape_dark-purple",
    io: "_io_dark-purple",
    iol: "_jolie_medium-red",
    ipf: "_igorpro_dark-red",
    ipp: "_cpp_medium-orange",
    ipy: "_python_medium-blue",
    ipynb: "_jupyter_dark-orange",
    "irb-history": "_database_medium-red",
    irclog: "_text_medium-blue",
    iris: "_sgi_medium-orange",
    isl: "_inno_medium-cyan",
    isml: "_html5_medium-blue",
    iso: "_zip_medium-blue",
    isolate: "_python_dark-green",
    iss: "_inno_dark-blue",
    it: "_audio_medium-orange",
    iuml: "_graphviz_medium-orange",
    ivy: "_code_dark-green",
    ixx: "_cpp_medium-blue",
    j: "_objj_dark-orange",
    j2: "_jinja_medium-red",
    j2c: "_image_dark-green",
    jade: "_jade_medium-red",
    jake: "_jake_medium-yellow",
    jar: "_zip_dark-pink",
    jas: "_cheetah3d_medium-yellow",
    jass: "_warcraft3_medium-red",
    java: "_java_medium-purple",
    jbuilder: "_ruby_dark-red",
    jelly: "_code_medium-yellow",
    jflex: "_code_medium-red",
    jinja: "_jinja_dark-red",
    jinja2: "_jinja_medium-red",
    jison: "_jison_medium-blue",
    jisonlex: "_jison_medium-cyan",
    jl: "_julia_medium-purple",
    jlex: "_code_medium-red",
    jmd: "_markdown_medium-purple",
    jng: "_image_medium-cyan",
    joboptions: "_print_dark-red",
    jos: "_junos_medium-cyan",
    journal: "_book_medium-blue",
    joy: "_code_medium-yellow",
    jp2: "_image_dark-green",
    jpeg: "_image_medium-green",
    jpf: "_image_dark-green",
    jpg: "_image_medium-green",
    jpm: "_image_dark-green",
    jps: "_image_dark-cyan",
    jpx: "_image_dark-green",
    jq: "_sql_medium-blue",
    js: "_js_medium-yellow",
    _js: "_js_medium-orange",
    jsb: "_js_medium-maroon",
    jsbeautifyrc: "_config-js_medium-yellow",
    jscad: "_scad_medium-yellow",
    jscpd: "_jscpd_medium-grey",
    "jscpd.html": "_jscpd_medium-orange",
    "jscpd.json": "_jscpd_medium-grey",
    "jscpd.xml": "_jscpd_medium-cyan",
    jscript: "_js_medium-red",
    jscsrc: "_config-js_medium-yellow",
    jse: "_js_medium-maroon",
    "js.ecr": "_js_medium-cyan",
    "js.erb": "_js_medium-red",
    jsfl: "_as_medium-yellow",
    "js.flow": "_flow_medium-orange",
    jshintrc: "_config-js_medium-yellow",
    jslib: "_js_medium-red",
    jsm: "_js_medium-blue",
    "js.map": "_sourcemap_medium-yellow",
    json: "_json_medium-cyan",
    json5: "_json5_dark-yellow",
    jsonc: "_json_dark-blue",
    "json.eex": "_database_medium-purple",
    jsonl: "_database_dark-orange",
    jsonld: "_jsonld_medium-blue",
    jsonnet: "_jsonnet_dark-blue",
    jsont: "_squarespace_dark-purple",
    "json-tmlanguage": "_textmate_medium-purple",
    jsp: "_html5_medium-purple",
    jspf: "_html5_dark-purple",
    jspre: "_js_medium-orange",
    jsproj: "_code_dark-yellow",
    jspx: "_code_dark-purple",
    jss: "_js_medium-green",
    jsx: "_jsx_medium-blue",
    jxr: "_image_dark-red",
    k: "_kx_dark-purple",
    "kazelcfg.json": "_kubernetes_medium-blue",
    key: "_key_medium-blue",
    keynote: "_keynote_medium-blue",
    kicad_dru: "_kicad_medium-red",
    kicad_mod: "_kicad_medium-green",
    kicad_pcb: "_kicad_dark-blue",
    "kicad_pcb-bak": "_kicad_dark-red",
    kicad_prl: "_kicad_medium-orange",
    kicad_pro: "_kicad_medium-orange",
    kicad_sch: "_kicad_dark-green",
    kicad_sym: "_kicad_dark-green",
    kicad_wks: "_kicad_medium-cyan",
    kick: "_config-ruby_medium-red",
    kid: "_genshi_medium-red",
    kit: "_html5_medium-green",
    kml: "_earth_medium-green",
    knc: "_binary_medium-orange",
    knt: "_keynote_dark-blue",
    ko: "_binary_dark-green",
    kojo: "_scala_medium-green",
    krl: "_krl_medium-blue",
    ks: "_kos_dark-green",
    ksh: "_terminal_dark-yellow",
    kshrc: "_terminal_dark-yellow",
    ksy: "_kaitai_medium-maroon",
    kt: "_kotlin_dark-blue",
    ktm: "_kotlin_medium-blue",
    kts: "_kotlin_medium-orange",
    kusto: "_kusto_medium-blue",
    kv: "_kivy_dark-maroon",
    kys: "_config_medium-red",
    kys_mac: "_config_medium-red",
    l: "_picolisp_medium-purple",
    la: "_binary_dark-red",
    laccdb: "_access_light-maroon",
    lagda: "_agda_medium-cyan",
    languagebabel: "_babel_medium-yellow",
    lark: "_lark_dark-blue",
    las: "_lasso_dark-blue",
    lasso: "_lasso_dark-blue",
    lasso8: "_lasso_medium-blue",
    lasso9: "_lasso_medium-purple",
    lassoapp: "_lasso_dark-red",
    lat: "_latino_medium-blue",
    latte: "_html5_medium-red",
    launch: "_code_medium-blue",
    layout: "_sketchup-lo_medium-red",
    lbm: "_image_dark-blue",
    lbnf: "_bnf_dark-yellow",
    lbx: "_tex_medium-blue",
    lcov: "_text_dark-blue",
    ld: "_config_dark-red",
    ldif: "_config_dark-green",
    ldj: "_database_dark-orange",
    ldjson: "_database_dark-orange",
    ldml: "_lasso_medium-red",
    lds: "_config_medium-red",
    lean: "_lean_dark-purple",
    ledger: "_graph_medium-blue",
    leex: "_elixir_medium-purple",
    lektorproject: "_lektor_medium-orange",
    less: "_css3_dark-blue",
    lesshst: "_database_medium-red",
    lex: "_lex_medium-cyan",
    lfe: "_lfe_dark-red",
    lfm: "_pascal_medium-blue",
    lfsconfig: "_git_medium-red",
    lgt: "_logtalk_medium-red",
    lhs: "_haskell_dark-blue",
    libsonnet: "_jsonnet_medium-blue",
    licence: "_book_medium-blue",
    licences: "_book_medium-blue",
    license: "_book_medium-blue",
    licenses: "_book_medium-blue",
    lid: "_code_medium-purple",
    lidr: "_idris_medium-maroon",
    liff: "_image_dark-blue",
    linq: "_linqpad_dark-pink",
    lintstagedrc: "_gear_dark-orange",
    liquid: "_shopify_medium-green",
    lisp: "_lisp_dark-red",
    litcoffee: "_coffee_light-maroon",
    lkml: "_lookml_medium-purple",
    ll: "_llvm_dark-green",
    lnk: "_link_medium-blue",
    lo: "_binary_medium-red",
    log: "_text_medium-maroon",
    logtalk: "_logtalk_medium-red",
    lol: "_lolcode_dark-red",
    lookml: "_lookml_medium-purple",
    lp: "_code_dark-purple",
    lpi: "_pascal_dark-blue",
    lpk: "_pascal_dark-cyan",
    lpr: "_pascal_dark-purple",
    lps: "_pascal_medium-red",
    lr: "_lektor_dark-purple",
    lrs: "_pascal_medium-maroon",
    lrt: "_pascal_dark-red",
    ls: "_ls_medium-blue",
    _ls: "_ls_dark-blue",
    lsl: "_lsl_medium-cyan",
    lslp: "_lsl_dark-cyan",
    lsp: "_lisp_medium-red",
    lsproj: "_vs_light-cyan",
    lst: "_asm-m68k_medium-blue",
    ltx: "_tex_medium-blue",
    lua: "_lua_medium-blue",
    luacheckrc: "_lua_medium-green",
    lvlib: "_labview_dark-blue",
    lvproj: "_labview_dark-blue",
    lwo: "_lightwave_medium-red",
    lws: "_lightwave_medium-blue",
    lx: "_lex_medium-cyan",
    lxo: "_modo_medium-cyan",
    ly: "_lilypond_medium-green",
    lz: "_zip_medium-maroon",
    lzma: "_zip_medium-maroon",
    lzo: "_zip_medium-maroon",
    m: "_miranda_medium-red",
    m2: "_macaulay2_light-cyan",
    m3: "_modula3_dark-blue",
    m4: "_code_medium-red",
    m4a: "_audio_medium-cyan",
    m4p: "_audio_dark-cyan",
    m4v: "_video_dark-blue",
    m68k: "_asm-m68k_dark-red",
    ma: "_mathematica_medium-orange",
    maff: "_zip_medium-orange",
    mailmap: "_git_medium-red",
    mak: "_checklist_medium-yellow",
    make: "_checklist_medium-yellow",
    makefile: "_checklist_medium-yellow",
    makfile: "_checklist_medium-yellow",
    mako: "_mako_dark-blue",
    man: "_manpage_dark-green",
    mandoc: "_manpage_dark-green",
    manifest: "_code_medium-blue",
    mao: "_mako_dark-blue",
    map: "_sourcemap_dark-blue",
    mapping: "_sourcemap_dark-blue",
    markdown: "_markdown_medium-blue",
    marko: "_marko_medium-blue",
    "marko.cjs": "_marko_medium-maroon",
    "marko.js": "_marko_medium-maroon",
    "marko.mjs": "_marko_medium-maroon",
    mask: "_code_medium-red",
    mat: "_unity3d_medium-red",
    mata: "_stata_dark-cyan",
    matah: "_stata_light-cyan",
    match: "_sourcemap_medium-maroon",
    mathematica: "_mathematica_dark-red",
    matlab: "_matlab_medium-yellow",
    mawk: "_awk_medium-maroon",
    max: "_maxscript_dark-cyan",
    maxhelp: "_max_medium-red",
    maxpat: "_max_dark-purple",
    maxproj: "_max_medium-blue",
    mb: "_maya_dark-cyan",
    mbox: "_mail_medium-red",
    mbx: "_mail_medium-red",
    mce: "_maxscript_medium-red",
    mcf: "_config_medium-blue",
    mcfi: "_maya_dark-purple",
    mcfp: "_maya_dark-purple",
    mcfunction: "_minecraft_light-green",
    mclevel: "_minecraft_medium-green",
    mcpack: "_minecraft_dark-green",
    mcr: "_maxscript_dark-purple",
    mcworld: "_minecraft_medium-blue",
    md: "_markdown_medium-blue",
    md5sum: "_tag_medium-green",
    md5sums: "_tag_medium-green",
    mdl: "_model_medium-red",
    mdlp: "_matlab_medium-red",
    mdo: "_1c-alt_medium-red",
    mdoc: "_manpage_dark-green",
    mdown: "_markdown_medium-blue",
    mdpolicy: "_code_dark-blue",
    mdtext: "_markdown_medium-blue",
    mdtxt: "_markdown_medium-blue",
    mdw: "_access_dark-purple",
    mdwn: "_markdown_medium-blue",
    mdx: "_mdx_medium-orange",
    me: "_manpage_dark-green",
    mediawiki: "_mediawiki_medium-yellow",
    mel: "_maya_dark-blue",
    menu: "_code_medium-blue",
    mermaid: "_mermaid_medium-blue",
    meta: "_unity3d_dark-red",
    metal: "_metal_dark-cyan",
    mf: "_metapost_dark-green",
    mg: "_modula3_dark-green",
    mht: "_html5_medium-blue",
    mhtml: "_html5_medium-blue",
    mid: "_music_dark-blue",
    midi: "_music_dark-blue",
    mint: "_mint_medium-green",
    mipage: "_dyalog_dark-green",
    mir: "_mirah_light-blue",
    mirah: "_mirah_light-blue",
    "mixin.json": "_mixin_medium-orange",
    "mixins.json": "_mixin_medium-orange",
    mj2: "_image_dark-green",
    mjml: "_mjml_medium-red",
    mjmlslim: "_mjml_medium-orange",
    mjs: "_js_medium-blue",
    "mjs.map": "_sourcemap_medium-blue",
    "mjs.snap": "_jest_medium-blue",
    mk: "_checklist_medium-yellow",
    mk3d: "_video_medium-purple",
    mka: "_audio_medium-purple",
    mkd: "_markdown_medium-blue",
    mkdn: "_markdown_medium-blue",
    mkdown: "_markdown_medium-blue",
    mkfile: "_checklist_medium-yellow",
    mkii: "_tex_medium-orange",
    mkiv: "_tex_medium-orange",
    mks: "_video_medium-purple",
    mksh: "_terminal_dark-yellow",
    mkshrc: "_terminal_dark-yellow",
    mkv: "_video_medium-purple",
    mkvi: "_tex_medium-orange",
    ml: "_ocaml_medium-orange",
    ml4: "_ocaml_medium-green",
    mlappinstall: "_matlab_dark-maroon",
    mli: "_ocaml_dark-orange",
    mll: "_ocaml_dark-green",
    mlpkginstall: "_matlab_medium-cyan",
    mltbx: "_matlab_dark-red",
    mly: "_ocaml_dark-yellow",
    mm: "_objc_dark-blue",
    mmd: "_mermaid_medium-blue",
    mmk: "_checklist_light-blue",
    mms: "_checklist_medium-blue",
    mn: "_matlab_dark-purple",
    mng: "_image_medium-orange",
    mo: "_modelica_medium-red",
    "mocha.opts": "_mocha_light-maroon",
    "mocharc.cjs": "_mocha_medium-maroon",
    "mocharc.js": "_mocha_medium-maroon",
    "mocharc.json": "_mocha_medium-maroon",
    "mocharc.jsonc": "_mocha_medium-maroon",
    "mocharc.mjs": "_mocha_medium-maroon",
    "mocharc.yaml": "_mocha_medium-maroon",
    "mocharc.yml": "_mocha_medium-maroon",
    mod: "_modula2_medium-blue",
    mode0v3: "_appstore_medium-red",
    mode1v3: "_appstore_medium-red",
    mode2v3: "_appstore_medium-red",
    mode3v3: "_appstore_medium-red",
    mode4v3: "_appstore_medium-red",
    mode5v3: "_appstore_medium-red",
    mode6v3: "_appstore_medium-red",
    mode7v3: "_appstore_medium-red",
    mode8v3: "_appstore_medium-red",
    mode9v3: "_appstore_medium-red",
    modelproj: "_vs_dark-red",
    module: "_gear_medium-blue",
    modulefile: "_puppet_dark-blue",
    moho: "_moho_medium-orange",
    mohoaction: "_moho_medium-blue",
    mohobrush: "_moho_medium-maroon",
    mohoexport: "_moho_medium-yellow",
    mohoproj: "_moho_medium-orange",
    mohostyle: "_moho_medium-purple",
    mom: "_manpage_dark-green",
    monkey: "_monkey_medium-maroon",
    moo: "_mercury_medium-cyan",
    moon: "_moon_medium-yellow",
    more: "_text_medium-purple",
    mov: "_video_medium-cyan",
    "mp+": "_audio_dark-green",
    mp: "_metapost_dark-red",
    mp3: "_audio_medium-red",
    mp4: "_video_dark-blue",
    mpc: "_audio_dark-green",
    mpeg: "_video_medium-red",
    mpfa: "_dna_medium-orange",
    mpg: "_video_medium-red",
    mpo: "_image_medium-pink",
    mpp: "_msproject_medium-green",
    mpt: "_msproject_dark-green",
    mq4: "_code_dark-blue",
    mq5: "_code_dark-blue",
    mqh: "_code_dark-blue",
    mrb: "_mruby_medium-red",
    mrc: "_mirc_medium-red",
    ms: "_maxscript_dark-blue",
    msg: "_text_medium-orange",
    msi: "_windows",
    mspec: "_ruby_medium-red",
    mss: "_mapbox_medium-cyan",
    mt: "_mathematica_medium-maroon",
    mtl: "_model_dark-blue",
    mtml: "_code_dark-blue",
    "mtn-ignore": "_monotone_dark-purple",
    mts: "_ts_medium-blue",
    mu: "_mupad_medium-red",
    mud: "_zork_medium-maroon",
    muf: "_code_medium-orange",
    mumps: "_code_medium-red",
    muse: "_amusewiki_dark-red",
    mustache: "_mustache_medium-orange",
    mxml: "_code_dark-maroon",
    mxt: "_max_medium-purple",
    mysql: "_sql_medium-orange",
    myt: "_code_dark-blue",
    mzn: "_minizinc_medium-blue",
    n: "_manpage_dark-green",
    n64: "_n64_dark-cyan",
    nanorc: "_nano_medium-blue",
    nasl: "_nessus_medium-cyan",
    nasm: "_nasm_dark-blue",
    natvis: "_code_dark-green",
    nawk: "_awk_medium-green",
    nb: "_mathematica_dark-orange",
    nbib: "_book_medium-blue",
    nbp: "_mathematica_dark-red",
    nc: "_c_dark-blue",
    ncl: "_earth_medium-green",
    ncs: "_nwscript_dark-red",
    ndb: "_nwscript_medium-maroon",
    ndjson: "_database_medium-orange",
    ndproj: "_ndepend_medium-blue",
    neko: "_neko_medium-orange",
    neon: "_neon_medium-grey",
    net: "_circuit-board_dark-blue",
    nexrc: "_vim_medium-green",
    nf: "_nextflow_medium-green",
    nfo: "_text_dark-blue",
    nginx: "_nginx_medium-green",
    nginxconf: "_nginx_medium-green",
    ni: "_inform7_medium-blue",
    nib: "_nib_dark-orange",
    nim: "_nimrod_medium-green",
    nimble: "_nimble_medium-grey",
    nimrod: "_nimrod_medium-green",
    ninja: "_shuriken_medium-blue",
    "ninja.d": "_shuriken_dark-cyan",
    nit: "_nit_dark-green",
    nix: "_nix_medium-cyan",
    njk: "_nunjucks_dark-green",
    njs: "_node_medium-green",
    njsproj: "_vs_light-red",
    nk2: "_outlook_dark-red",
    nl: "_lisp_medium-maroon",
    nlogo: "_netlogo_medium-red",
    no: "_text_medium-red",
    node: "_node_dark-green",
    nodemonignore: "_nodemon_medium-green",
    node_repl_history: "_node_dark-green",
    "node-version": "_node_dark-green",
    nojekyll: "_jekyll_medium-green",
    nomad: "_nomad_medium-green",
    noon: "_noon_dark-grey",
    nproj: "_ndepend_medium-blue",
    npy: "_numpy_medium-cyan",
    npz: "_numpy_dark-cyan",
    nqp: "_perl6_dark-purple",
    nr: "_manpage_dark-green",
    nroff: "_manpage_dark-green",
    nrrd: "_image_dark-blue",
    nse: "_nmap_dark-blue",
    nsh: "_nsis_dark-cyan",
    nsi: "_nsis_medium-purple",
    nss: "_nwscript_dark-blue",
    nu: "_recycle_light-green",
    numpy: "_numpy_dark-blue",
    numpyw: "_numpy_medium-blue",
    numsc: "_numpy_medium-orange",
    nunjucks: "_nunjucks_dark-green",
    nupkg: "_nuget_medium-purple",
    nuspec: "_nuget_medium-blue",
    nut: "_squirrel_medium-maroon",
    nvimrc: "_vim_medium-green",
    nvmrc: "_node_medium-green",
    nvram: "_vmware_medium-blue",
    nxc: "_nxc_medium-orange",
    ny: "_lisp_medium-blue",
    o: "_binary_medium-red",
    o3: "_ogone_medium-grey",
    oab: "_outlook_medium-blue",
    ob2: "_oberon_medium-purple",
    obj: "_model_medium-red",
    objdump: "_binary_dark-orange",
    ocrec: "_lync_dark-blue",
    octave: "_octave_medium-orange",
    octave_hist: "_octave_medium-orange",
    octaverc: "_octave_dark-orange",
    od: "_database_medium-grey",
    odb: "_openoffice_light-pink",
    odd: "_code_light-green",
    odf: "_openoffice_medium-maroon",
    odg: "_openoffice_medium-red",
    odin: "_odin_medium-blue",
    odp: "_openoffice_medium-purple",
    ods: "_openoffice_medium-green",
    odt: "_openoffice_medium-blue",
    oft: "_outlook_medium-maroon",
    oga: "_audio_dark-orange",
    ogg: "_video_medium-orange",
    ogm: "_video_medium-orange",
    ogone: "_ogone_medium-grey",
    ogv: "_video_medium-orange",
    ohm: "_code_dark-yellow",
    ol: "_jolie_dark-pink",
    old: "_backup",
    olk14: "_outlook_dark-cyan",
    omgrofl: "_code_dark-purple",
    one: "_onenote_dark-purple",
    onlydata: "_database_medium-grey",
    ooc: "_ooc_medium-green",
    opa: "_opa_medium-blue",
    opal: "_ruby_medium-red",
    opencl: "_opencl_medium-red",
    opts: "_config_medium-green",
    opus: "_audio_dark-maroon",
    or: "_pascal_medium-blue",
    ora: "_image_medium-yellow",
    orc: "_csound_medium-maroon",
    org: "_org_dark-green",
    orig: "_backup",
    os: "_1c_dark-red",
    osm: "_code_dark-purple",
    otf: "_font_dark-yellow",
    otg: "_openoffice_dark-red",
    otm: "_outlook_medium-red",
    otp: "_openoffice_dark-pink",
    ots: "_openoffice_dark-green",
    ott: "_openoffice_dark-blue",
    out: "_binary_medium-red",
    ova: "_virtualbox_medium-blue",
    ovf: "_virtualbox_medium-purple",
    ovpn: "_openvpn_medium-orange",
    owl: "_owl_dark-blue",
    ox: "_ox_medium-cyan",
    oxh: "_ox_medium-green",
    oxo: "_ox_medium-blue",
    oxygene: "_oxygene_medium-cyan",
    oz: "_oz_medium-yellow",
    p: "_progress_medium-green",
    p21: "_model_medium-orange",
    p4: "_p4_dark-purple",
    p6: "_perl6_light-blue",
    p6l: "_perl6_medium-blue",
    p6m: "_perl6_dark-pink",
    p8: "_pico8_medium-red",
    pac: "_js_medium-purple",
    packages: "_package_medium-green",
    pairs: "_gear_dark-green",
    pak: "_binary_dark-orange",
    pan: "_pan_medium-red",
    parrot: "_parrot_medium-green",
    pas: "_pascal_medium-purple",
    pascal: "_pascal_medium-purple",
    pasm: "_parrot_dark-green",
    pat: "_max_medium-green",
    patch: "_patch_medium-green",
    pb: "_purebasic_medium-red",
    pbi: "_purebasic_dark-orange",
    pbl: "_powerbuilder_medium-blue",
    pbm: "_image_medium-pink",
    pbt: "_powerbuilder_dark-blue",
    pbtext: "_database_dark-cyan",
    pbtxt: "_database_dark-cyan",
    pbxproj: "_appstore_medium-blue",
    pbxuser: "_appstore_medium-cyan",
    pcb: "_circuit-board_medium-green",
    pcd: "_pcd_medium-green",
    pcf: "_font-bitmap_medium-orange",
    pch: "_objc_dark-red",
    pck: "_sql_medium-orange",
    pcss: "_postcss_dark-red",
    pcx: "_image_dark-blue",
    pd: "_music_dark-red",
    pdb: "_binary_dark-orange",
    pde: "_processing_dark-blue",
    pdf: "_pdf_medium-red",
    pdksh: "_terminal_dark-yellow",
    pdkshrc: "_terminal_dark-yellow",
    pd_lua: "_lua_dark-blue",
    pe: "_ff_medium-orange",
    pegcoffee: "_peg_medium-maroon",
    peggy: "_peg_medium-red",
    pegjs: "_peg_medium-red",
    pem: "_key_medium-orange",
    pep: "_python_medium-orange",
    per: "_sql_medium-cyan",
    perl: "_perl_medium-blue",
    pfa: "_postscript_dark-blue",
    pfb: "_font_dark-red",
    pfm: "_font_medium-red",
    pfo: "_fortran_dark-blue",
    pgf: "_tex_medium-purple",
    pgm: "_image_medium-grey",
    pgsql: "_pgsql_dark-blue",
    ph: "_perl_dark-purple",
    phar: "_php_medium-red",
    pho: "_circuit-board_dark-cyan",
    php: "_php_dark-blue",
    php0: "_php_dark-blue",
    php1: "_php_dark-blue",
    php2: "_php_dark-blue",
    php3: "_php_dark-blue",
    php4: "_php_dark-blue",
    php5: "_php_dark-blue",
    php6: "_php_dark-blue",
    php7: "_php_dark-blue",
    php8: "_php_dark-blue",
    php9: "_php_dark-blue",
    php_cs: "_php_dark-blue",
    phps: "_php_dark-blue",
    phpt: "_php_dark-blue",
    phtml: "_html5_dark-blue",
    physicmaterial: "_unity3d_dark-cyan",
    physicmaterial2d: "_unity3d_dark-cyan",
    physicsmaterial: "_unity3d_dark-cyan",
    physicsmaterial2d: "_unity3d_dark-cyan",
    pic: "_manpage_dark-green",
    pickle: "_pickle_dark-cyan",
    picnc: "_houdini_medium-orange",
    pict: "_image_light-purple",
    pid: "_tag_medium-orange",
    pig: "_code_medium-pink",
    pikchr: "_manpage_dark-green",
    pike: "_pike_dark-cyan",
    pine: "_pinescript_medium-green",
    pir: "_parrot_dark-blue",
    pjs: "_js_dark-purple",
    pkb: "_sql_dark-red",
    pkgproj: "_nuget_dark-purple",
    pkl: "_pickle_dark-cyan",
    pks: "_sql_medium-blue",
    pl: "_perl_medium-blue",
    pl6: "_perl6_medium-purple",
    plantuml: "_graphviz_medium-orange",
    plb: "_sql_medium-purple",
    plist: "_code_dark-cyan",
    plot: "_gnuplot_medium-red",
    pls: "_sql_medium-red",
    plsql: "_sql_medium-red",
    plt: "_gnuplot_medium-red",
    pluginspec: "_ruby_medium-red",
    plx: "_perl_medium-purple",
    plxcopy: "_asm-zilog_medium-blue",
    ply: "_model_dark-red",
    pm: "_perl_dark-blue",
    pm6: "_perl6_dark-pink",
    pmd: "_markdown_medium-blue",
    pmod: "_pike_medium-blue",
    png: "_image_medium-orange",
    "png.mcmeta": "_minecraft_dark-green",
    pnm: "_image_medium-blue",
    po: "_database_medium-red",
    pod: "_pod_dark-blue",
    pod6: "_perl6_dark-green",
    podsl: "_lisp_medium-purple",
    podspec: "_ruby_medium-red",
    pogo: "_pogo_medium-orange",
    pony: "_pony_light-maroon",
    postcss: "_postcss_dark-red",
    "postcss.config.js": "_postcss_medium-yellow",
    postcssrc: "_postcss_medium-orange",
    "postcssrc.cjs": "_postcss_medium-orange",
    "postcssrc.js": "_postcss_medium-orange",
    "postcssrc.json": "_postcss_medium-orange",
    "postcssrc.mjs": "_postcss_medium-orange",
    "postcssrc.yaml": "_postcss_medium-orange",
    "postcssrc.yml": "_postcss_medium-orange",
    pot: "_database_medium-red",
    potm: "_powerpoint_medium-maroon",
    pov: "_povray_dark-blue",
    pp: "_puppet_medium-purple",
    ppd: "_print_dark-cyan",
    ppm: "_image_dark-maroon",
    pprx: "_rexx_medium-blue",
    pps: "_powerpoint_dark-red",
    ppsx: "_powerpoint_medium-orange",
    ppt: "_powerpoint_dark-orange",
    pptx: "_powerpoint_medium-red",
    ppu: "_pascal_medium-cyan",
    prc: "_sql_dark-blue",
    prefab: "_unity3d_dark-cyan",
    prefs: "_config_medium-yellow",
    prel: "_premiere_medium-maroon",
    prettierignore: "_prettier_dark-yellow",
    prettierrc: "_prettier_medium-cyan",
    "prettierrc.cjs": "_prettier_medium-cyan",
    "prettierrc.js": "_prettier_medium-cyan",
    "prettierrc.json": "_prettier_medium-cyan",
    "prettierrc.json5": "_prettier_medium-cyan",
    "prettierrc.mjs": "_prettier_medium-cyan",
    "prettierrc.yaml": "_prettier_medium-cyan",
    "prettierrc.yml": "_prettier_medium-cyan",
    prg: "_code_medium-red",
    pri: "_checklist_dark-purple",
    prisma: "_prisma_dark-blue",
    prn: "_graph_dark-blue",
    pro: "_prolog_medium-blue",
    profile: "_terminal_dark-purple",
    proj: "_code_dark-green",
    project: "_eclipse_dark-blue",
    "project.clj": "_lein",
    prolog: "_prolog_medium-cyan",
    properties: "_config_medium-purple",
    props: "_code_medium-cyan",
    proselintrc: "_proselint_dark-cyan",
    proto: "_database_dark-cyan",
    prototext: "_database_dark-cyan",
    prototxt: "_database_dark-cyan",
    prproj: "_premiere_dark-purple",
    prw: "_totvs_medium-maroon",
    prx: "_binary_medium-purple",
    ps: "_postscript_medium-red",
    ps1: "_powershell_medium-blue",
    ps1xml: "_powershell_dark-purple",
    psb: "_psd_dark-purple",
    psc: "_papyrus_medium-green",
    psc1: "_code_light-blue",
    psd: "_psd_medium-blue",
    psd1: "_powershell_dark-blue",
    psf: "_font-bitmap_medium-cyan",
    psftx: "_font-bitmap_dark-blue",
    psfu: "_font-bitmap_medium-cyan",
    psgi: "_perl_medium-red",
    psm1: "_powershell_medium-purple",
    psmdcp: "_nuget_dark-green",
    psq: "_premiere_medium-purple",
    pst: "_outlook_medium-blue",
    pt: "_code_medium-red",
    pu: "_graphviz_medium-orange",
    pub: "_key_medium-yellow",
    puff: "_binary_medium-grey",
    pug: "_pug_medium-red",
    puml: "_graphviz_medium-orange",
    pure: "_pure_medium-grey",
    purs: "_purescript_dark-purple",
    puz: "_publisher_dark-cyan",
    pwn: "_pawn_medium-orange",
    pxb: "_image_medium-red",
    pxd: "_cython_medium-blue",
    pxg: "_image_medium-cyan",
    pxi: "_cython_dark-blue",
    pxls: "_image_medium-pink",
    pxm: "_image_medium-orange",
    pxr: "_image_medium-purple",
    pxs: "_image_medium-blue",
    py: "_python_dark-blue",
    py3: "_python_dark-blue",
    pyc: "_binary_dark-purple",
    pyd: "_binary_dark-purple",
    pyde: "_python_medium-orange",
    pydeps: "_database_dark-blue",
    pyi: "_python_medium-blue",
    pyo: "_binary_dark-purple",
    pyp: "_python_dark-purple",
    pypirc: "_python_dark-blue",
    pyt: "_python_dark-green",
    pytb: "_database_medium-orange",
    pythonrc: "_python_dark-blue",
    "python-venv": "_python_dark-blue",
    "python-version": "_config-python_dark-blue",
    pyw: "_python_medium-maroon",
    pyx: "_cython_medium-orange",
    pyz: "_python_dark-red",
    q: "_kx_medium-blue",
    qasm: "_qiskit_dark-blue",
    qbs: "_qt_medium-cyan",
    qhelp: "_code_medium-purple",
    qml: "_qt_medium-green",
    qmlproject: "_qt_dark-green",
    qs: "_qsharp_dark-purple",
    qvd: "_qlik_dark-green",
    qvw: "_qlik_medium-green",
    r: "_r_medium-blue",
    r2: "_rebol_dark-red",
    r3: "_rebol_dark-blue",
    ra: "_audio_dark-blue",
    rabl: "_ruby_medium-red",
    rake: "_ruby_medium-red",
    raku: "_perl6_medium-blue",
    rakumod: "_perl6_dark-blue",
    rakutest: "_perl6_dark-purple",
    raml: "_raml_medium-cyan",
    rar: "_zip_medium-blue",
    raw: "_image_dark-orange",
    rb: "_ruby_medium-red",
    rbbas: "_xojo_medium-green",
    rbfrm: "_xojo_dark-green",
    rbi: "_sorbet_medium-purple",
    rbmnu: "_xojo_dark-cyan",
    rbres: "_xojo_medium-cyan",
    rbtbar: "_xojo_medium-blue",
    rbuild: "_ruby_dark-red",
    rbuistate: "_xojo_dark-blue",
    rbw: "_ruby_dark-red",
    rbx: "_ruby_dark-red",
    rbxs: "_lua_dark-purple",
    rc: "_terminal_medium-purple",
    rc_apple_terminal: "_terminal_dark-blue",
    rchit: "_opengl_dark-cyan",
    rd: "_r_medium-blue",
    rdata: "_rdata_medium-red",
    rdb: "_rdata_medium-orange",
    rdf: "_code_dark-red",
    rdg: "_code_dark-purple",
    rdoc: "_rdoc_medium-red",
    rds: "_rdata_medium-yellow",
    rdx: "_rdata_medium-maroon",
    re: "_reason_medium-red",
    "react.cjs": "_react_medium-blue",
    "react.js": "_react_medium-blue",
    "react.mjs": "_react_medium-blue",
    readme: "_book_medium-blue",
    reason: "_reasonstudios_medium-orange",
    reb: "_rebol_dark-green",
    rebol: "_rebol_dark-green",
    red: "_red_medium-red",
    reds: "_red_light-red",
    reek: "_reek_medium-red",
    reg: "_windows_medium-blue",
    regex: "_regex_medium-green",
    regexp: "_regex_medium-green",
    rego: "_openpolicy_medium-cyan",
    rehypeignore: "_remark_dark-yellow",
    rei: "_reason_medium-orange",
    remarkignore: "_remark_dark-red",
    renovate: "_renovate_medium-cyan",
    "renovate.json": "_renovate_medium-cyan",
    renovaterc: "_renovate_medium-cyan",
    "renovaterc.json": "_renovate_medium-cyan",
    res: "_source_medium-cyan",
    resi: "_rescript_medium-red",
    rest: "_rst_dark-blue",
    restql: "_restql_dark-blue",
    "rest.txt": "_rst_dark-blue",
    resx: "_code_medium-cyan",
    retextignore: "_remark_dark-green",
    rex: "_rexx_medium-red",
    rexx: "_rexx_medium-red",
    rg: "_clojure_medium-red",
    rhistory: "_r_medium-blue",
    rhtml: "_html5_medium-red",
    ring: "_ring_medium-purple",
    ris: "_book_medium-blue",
    "ris-rm8": "_book_medium-blue",
    rkt: "_racket_medium-red",
    rktd: "_racket_medium-blue",
    rktl: "_racket_light-red",
    rl: "_code_medium-red",
    rlib: "_rust_light-maroon",
    rm: "_audio_dark-blue",
    rmarkdown: "_rmarkdown_medium-red",
    rmd: "_rmarkdown_medium-red",
    rmd160sum: "_tag_medium-green",
    rmd160sums: "_tag_medium-green",
    rmiss: "_opengl_dark-cyan",
    rnh: "_manpage_dark-maroon",
    rno: "_manpage_dark-maroon",
    rns: "_reasonstudios_dark-orange",
    robot: "_robot_medium-cyan",
    rockspec: "_lua_medium-purple",
    rof: "_manpage_dark-green",
    roff: "_manpage_dark-green",
    ron: "_markdown_medium-blue",
    rpm: "_red-hat_medium-red",
    rpmmacros: "_red-hat_medium-red",
    rprofile: "_r_medium-blue",
    rproj: "_rstudio_light-blue",
    rpt: "_text_medium-maroon",
    rpy: "_python_medium-pink",
    rpyb: "_binary_medium-red",
    rpyc: "_binary_medium-red",
    rq: "_sparql_dark-blue",
    rql: "_restql_dark-blue",
    rs: "_rust_medium-maroon",
    rsc: "_rascal_medium-yellow",
    rsh: "_android_dark-maroon",
    rsj: "_json_medium-blue",
    rsn: "_reasonstudios_medium-orange",
    rspec: "_rspec_medium-red",
    rsrc: "_finder_dark-blue",
    rss: "_rss_medium-orange",
    rst: "_rst_dark-blue",
    "rst.txt": "_rst_dark-blue",
    rsx: "_r_medium-blue",
    rtf: "_text_dark-red",
    ru: "_ruby_medium-red",
    ruby: "_ruby_medium-red",
    run: "_manpage_dark-maroon",
    runoff: "_manpage_dark-maroon",
    rvb: "_rhino_medium-green",
    rviz: "_model_dark-blue",
    rx2: "_reasonstudios_medium-red",
    s: "_asm_dark-green",
    s3m: "_audio_medium-green",
    sac: "_sac_medium-yellow",
    sage: "_sage_medium-blue",
    sagews: "_sage_dark-blue",
    sam: "_dna_dark-yellow",
    san: "_san_medium-cyan",
    sas: "_sas_medium-blue",
    sass: "_sass_dark-pink",
    sats: "_ats_dark-yellow",
    sb: "_sandbox_dark-orange",
    sb2: "_scratch_dark-orange",
    sb3: "_scratch_medium-orange",
    sbclrc: "_lisp_dark-purple",
    sbt: "_sbt_dark-purple",
    sc: "_scala_medium-red",
    scad: "_scad_medium-orange",
    scala: "_scala_medium-red",
    scaml: "_html5_dark-red",
    "sc.cjs": "_nailpolish_medium-green",
    scd: "_scd_medium-red",
    sce: "_scilab_dark-blue",
    sch: "_circuit-board_medium-red",
    schema: "_database_dark-blue",
    sci: "_scilab_dark-purple",
    scilla: "_scilla_medium-orange",
    "sc.js": "_nailpolish_medium-yellow",
    "sc.jsx": "_nailpolish_medium-blue",
    scm: "_scheme_medium-red",
    "sc.mjs": "_nailpolish_medium-blue",
    sco: "_csound_dark-blue",
    scpt: "_apple_medium-purple",
    scrbl: "_racket_dark-blue",
    "scrutinizer.yml": "_scrutinizer_dark-blue",
    scss: "_sass_light-pink",
    sct: "_image_light-blue",
    "sc.ts": "_nailpolish_medium-blue",
    "sc.tsx": "_nailpolish_light-blue",
    scxml: "_code_light-cyan",
    sdbl: "_1c_dark-orange",
    sdl: "_config_medium-blue",
    sdlang: "_config_medium-blue",
    secret: "_secret",
    sed: "_code_dark-green",
    self: "_self_dark-blue",
    sentryclirc: "_sentry_medium-red",
    seq: "_dna_medium-purple",
    sequelizerc: "_sequelize_medium-blue",
    "sequelizerc.cjs": "_sequelize_medium-blue",
    "sequelizerc.js": "_sequelize_medium-blue",
    "sequelizerc.json": "_sequelize_medium-blue",
    "sequelizerc.mjs": "_sequelize_medium-blue",
    "serverless.yaml": "_serverless_medium-red",
    "serverless.yml": "_serverless_medium-red",
    sexp: "_lisp_medium-blue",
    sfd: "_ff_dark-blue",
    sfproj: "_sf_light-orange",
    sgi: "_sgi_medium-orange",
    sgm: "_code_dark-yellow",
    sgml: "_code_dark-yellow",
    sh: "_terminal_medium-purple",
    sha: "_tag_medium-green",
    sha1sum: "_tag_medium-green",
    sha1sums: "_tag_medium-green",
    sha224sum: "_tag_medium-green",
    sha224sums: "_tag_medium-green",
    sha256: "_tag_medium-green",
    sha256sum: "_tag_medium-green",
    sha256sums: "_tag_medium-green",
    sha2sum: "_tag_medium-green",
    sha2sums: "_tag_medium-green",
    sha384sum: "_tag_medium-green",
    sha384sums: "_tag_medium-green",
    sha3sum: "_tag_medium-green",
    sha3sums: "_tag_medium-green",
    sha512sum: "_tag_medium-green",
    sha512sums: "_tag_medium-green",
    shader: "_model_medium-cyan",
    shasum: "_tag_medium-green",
    shasums: "_tag_medium-green",
    shen: "_shen_dark-cyan",
    "sh-session": "_terminal_medium-yellow",
    shtml: "_html5_medium-cyan",
    sieve: "_filter_medium-red",
    sig: "_code_light-maroon",
    sigils: "_sigils_dark-red",
    simplecov: "_config-ruby_medium-red",
    sit: "_zip_medium-blue",
    sj: "_objj_dark-red",
    sjs: "_js_medium-pink",
    sk: "_code_light-blue",
    sk1: "_code_medium-blue",
    sk2: "_code_medium-blue",
    sketch: "_sketch_medium-orange",
    skim: "_dashboard_medium-orange",
    skp: "_sketchup-mk_medium-red",
    sl: "_slash_dark-blue",
    slax: "_junos_medium-blue",
    sld: "_scheme_medium-blue",
    sldd: "_matlab_medium-maroon",
    slim: "_dashboard_medium-orange",
    slk: "_graph_medium-cyan",
    sln: "_vs_medium-orange",
    sls: "_saltstack_medium-blue",
    slugignore: "_heroku_dark-purple",
    slx: "_matlab_medium-red",
    slxp: "_matlab_dark-red",
    sma: "_clojure_medium-yellow",
    smali: "_android_medium-green",
    smk: "_python_medium-green",
    sml: "_code_medium-red",
    smt: "_code_light-blue",
    smt2: "_code_medium-cyan",
    snap: "_jest_medium-yellow",
    sndh: "_audio_medium-yellow",
    snf: "_font-bitmap_dark-orange",
    snip: "_database_medium-green",
    snippet: "_database_medium-green",
    snippets: "_database_medium-green",
    snort: "_snort_light-red",
    snupkg: "_nuget_medium-green",
    snyk: "_snyk_dark-purple",
    so: "_binary_medium-red",
    sol: "_solidity_dark-cyan",
    solidity: "_solidity_dark-cyan",
    solverstate: "_caffe_medium-green",
    son: "_database_dark-green",
    soy: "_closure-tpl_medium-blue",
    sp: "_clojure_medium-yellow",
    spacemacs: "_spacemacs_medium-purple",
    sparql: "_sparql_medium-blue",
    spe: "_spacengine_medium-blue",
    spec: "_red-hat_dark-red",
    "-spec.c2hs": "_test-hs_medium-purple",
    "spec.c2hs": "_test-hs_medium-purple",
    "_spec.c2hs": "_test-hs_medium-purple",
    "-spec.cjs": "_test-js_medium-green",
    "spec.cjs": "_test-js_medium-green",
    "_spec.cjs": "_test-js_medium-green",
    "-spec.cjsx": "_test-coffee_medium-maroon",
    "spec.cjsx": "_test-coffee_medium-maroon",
    "_spec.cjsx": "_test-coffee_medium-maroon",
    "-spec.coffee": "_test-coffee_medium-maroon",
    "spec.coffee": "_test-coffee_medium-maroon",
    "_spec.coffee": "_test-coffee_medium-maroon",
    "-spec.es": "_test-js_medium-yellow",
    "spec.es": "_test-js_medium-yellow",
    "_spec.es": "_test-js_medium-yellow",
    "-spec.go": "_test-go_medium-cyan",
    "spec.go": "_test-go_medium-cyan",
    "_spec.go": "_test-go_medium-cyan",
    "-spec.hs": "_test-hs_medium-purple",
    "spec.hs": "_test-hs_medium-purple",
    "_spec.hs": "_test-hs_medium-purple",
    "-spec.hsc": "_test-hs_medium-purple",
    "spec.hsc": "_test-hs_medium-purple",
    "_spec.hsc": "_test-hs_medium-purple",
    "-spec.iced": "_test-coffee_medium-maroon",
    "spec.iced": "_test-coffee_medium-maroon",
    "_spec.iced": "_test-coffee_medium-maroon",
    "-spec.js": "_test-js_medium-yellow",
    "-spec._js": "_test-js_medium-yellow",
    "spec.js": "_test-js_medium-yellow",
    "spec._js": "_test-js_medium-yellow",
    "_spec.js": "_test-js_medium-yellow",
    "_spec._js": "_test-js_medium-yellow",
    "-spec.jsb": "_test-js_medium-yellow",
    "spec.jsb": "_test-js_medium-yellow",
    "_spec.jsb": "_test-js_medium-yellow",
    "-spec.jsm": "_test-js_medium-yellow",
    "spec.jsm": "_test-js_medium-yellow",
    "_spec.jsm": "_test-js_medium-yellow",
    "-spec.jss": "_test-js_medium-yellow",
    "spec.jss": "_test-js_medium-yellow",
    "_spec.jss": "_test-js_medium-yellow",
    "-spec.jsx": "_test-react_medium-blue",
    "spec.jsx": "_test-react_medium-blue",
    "_spec.jsx": "_test-react_medium-blue",
    "-spec.lhs": "_test-hs_medium-purple",
    "spec.lhs": "_test-hs_medium-purple",
    "_spec.lhs": "_test-hs_medium-purple",
    "-spec.litcoffee": "_test-coffee_medium-maroon",
    "spec.litcoffee": "_test-coffee_medium-maroon",
    "_spec.litcoffee": "_test-coffee_medium-maroon",
    "-spec.mjs": "_test-js_medium-blue",
    "spec.mjs": "_test-js_medium-blue",
    "_spec.mjs": "_test-js_medium-blue",
    "-spec.rb": "_test-ruby_medium-red",
    "spec.rb": "_test-ruby_medium-red",
    "_spec.rb": "_test-ruby_medium-red",
    "-spec.react.cjs": "_test-react_medium-blue",
    "spec.react.cjs": "_test-react_medium-blue",
    "_spec.react.cjs": "_test-react_medium-blue",
    "-spec.react.js": "_test-react_medium-blue",
    "spec.react.js": "_test-react_medium-blue",
    "_spec.react.js": "_test-react_medium-blue",
    "-spec.react.mjs": "_test-react_medium-blue",
    "spec.react.mjs": "_test-react_medium-blue",
    "_spec.react.mjs": "_test-react_medium-blue",
    "-spec.rs": "_test-rust_medium-maroon",
    "spec.rs": "_test-rust_medium-maroon",
    "_spec.rs": "_test-rust_medium-maroon",
    "-spec.ruby": "_test-ruby_medium-red",
    "spec.ruby": "_test-ruby_medium-red",
    "_spec.ruby": "_test-ruby_medium-red",
    "-specs.c2hs": "_test-hs_medium-purple",
    "specs.c2hs": "_test-hs_medium-purple",
    "_specs.c2hs": "_test-hs_medium-purple",
    "-specs.cjs": "_test-js_medium-green",
    "specs.cjs": "_test-js_medium-green",
    "_specs.cjs": "_test-js_medium-green",
    "-specs.cjsx": "_test-coffee_medium-maroon",
    "specs.cjsx": "_test-coffee_medium-maroon",
    "_specs.cjsx": "_test-coffee_medium-maroon",
    "-specs.coffee": "_test-coffee_medium-maroon",
    "specs.coffee": "_test-coffee_medium-maroon",
    "_specs.coffee": "_test-coffee_medium-maroon",
    "-specs.es": "_test-js_medium-yellow",
    "specs.es": "_test-js_medium-yellow",
    "_specs.es": "_test-js_medium-yellow",
    "-specs.go": "_test-go_medium-cyan",
    "specs.go": "_test-go_medium-cyan",
    "_specs.go": "_test-go_medium-cyan",
    "-specs.hs": "_test-hs_medium-purple",
    "specs.hs": "_test-hs_medium-purple",
    "_specs.hs": "_test-hs_medium-purple",
    "-specs.hsc": "_test-hs_medium-purple",
    "specs.hsc": "_test-hs_medium-purple",
    "_specs.hsc": "_test-hs_medium-purple",
    "-specs.iced": "_test-coffee_medium-maroon",
    "specs.iced": "_test-coffee_medium-maroon",
    "_specs.iced": "_test-coffee_medium-maroon",
    "-spec.sjs": "_test-js_medium-yellow",
    "-specs.js": "_test-js_medium-yellow",
    "-specs._js": "_test-js_medium-yellow",
    "spec.sjs": "_test-js_medium-yellow",
    "specs.js": "_test-js_medium-yellow",
    "specs._js": "_test-js_medium-yellow",
    "_spec.sjs": "_test-js_medium-yellow",
    "_specs.js": "_test-js_medium-yellow",
    "_specs._js": "_test-js_medium-yellow",
    "-specs.jsb": "_test-js_medium-yellow",
    "specs.jsb": "_test-js_medium-yellow",
    "_specs.jsb": "_test-js_medium-yellow",
    "-specs.jsm": "_test-js_medium-yellow",
    "specs.jsm": "_test-js_medium-yellow",
    "_specs.jsm": "_test-js_medium-yellow",
    "-specs.jss": "_test-js_medium-yellow",
    "specs.jss": "_test-js_medium-yellow",
    "_specs.jss": "_test-js_medium-yellow",
    "-specs.jsx": "_test-react_medium-blue",
    "specs.jsx": "_test-react_medium-blue",
    "_specs.jsx": "_test-react_medium-blue",
    "-specs.lhs": "_test-hs_medium-purple",
    "specs.lhs": "_test-hs_medium-purple",
    "_specs.lhs": "_test-hs_medium-purple",
    "-specs.litcoffee": "_test-coffee_medium-maroon",
    "specs.litcoffee": "_test-coffee_medium-maroon",
    "_specs.litcoffee": "_test-coffee_medium-maroon",
    "-specs.mjs": "_test-js_medium-blue",
    "specs.mjs": "_test-js_medium-blue",
    "_specs.mjs": "_test-js_medium-blue",
    "-specs.rb": "_test-ruby_medium-red",
    "specs.rb": "_test-ruby_medium-red",
    "_specs.rb": "_test-ruby_medium-red",
    "-specs.react.cjs": "_test-react_medium-blue",
    "specs.react.cjs": "_test-react_medium-blue",
    "_specs.react.cjs": "_test-react_medium-blue",
    "-specs.react.js": "_test-react_medium-blue",
    "specs.react.js": "_test-react_medium-blue",
    "_specs.react.js": "_test-react_medium-blue",
    "-specs.react.mjs": "_test-react_medium-blue",
    "specs.react.mjs": "_test-react_medium-blue",
    "_specs.react.mjs": "_test-react_medium-blue",
    "-specs.rs": "_test-rust_medium-maroon",
    "specs.rs": "_test-rust_medium-maroon",
    "_specs.rs": "_test-rust_medium-maroon",
    "-specs.ruby": "_test-ruby_medium-red",
    "specs.ruby": "_test-ruby_medium-red",
    "_specs.ruby": "_test-ruby_medium-red",
    "-specs.sjs": "_test-js_medium-yellow",
    "specs.sjs": "_test-js_medium-yellow",
    "_specs.sjs": "_test-js_medium-yellow",
    "-specs.ts": "_test-ts_medium-blue",
    "specs.ts": "_test-ts_medium-blue",
    "_specs.ts": "_test-ts_medium-blue",
    "-specs.tsx": "_test-ts_light-blue",
    "specs.tsx": "_test-ts_light-blue",
    "_specs.tsx": "_test-ts_light-blue",
    "-spec.ts": "_test-ts_medium-blue",
    "spec.ts": "_test-ts_medium-blue",
    "_spec.ts": "_test-ts_medium-blue",
    "-spec.tsx": "_test-ts_light-blue",
    "spec.tsx": "_test-ts_light-blue",
    "_spec.tsx": "_test-ts_light-blue",
    spin: "_propeller_medium-orange",
    sps: "_scheme_medium-purple",
    spsql: "_sql_medium-green",
    spthy: "_code_medium-green",
    sqf: "_sqf_dark-maroon",
    sql: "_sql_medium-orange",
    sqlite: "_sqlite_medium-blue",
    sqlite3: "_sqlite_dark-blue",
    sqlproj: "_vs_medium-orange",
    sra: "_powerbuilder_medium-blue",
    srdf: "_code_medium-blue",
    srj: "_powerbuilder_medium-purple",
    srp: "_powerbuilder_medium-maroon",
    srt: "_text_medium-purple",
    sru: "_powerbuilder_medium-orange",
    srw: "_powerbuilder_medium-red",
    ss: "_silverstripe_medium-blue",
    ssjs: "_js_medium-red",
    ssmssln: "_code_medium-orange",
    sss: "_postcss_dark-pink",
    st: "_code_medium-blue",
    stache: "_mustache_medium-orange",
    stan: "_stan_medium-red",
    star: "_bazel_dark-blue",
    "st.css": "_stylable_medium-green",
    stderr: "_text_medium-red",
    stdout: "_text_medium-red",
    stellaris: "_code_medium-blue",
    stencil: "_stencil_medium-orange",
    step: "_model_medium-orange",
    sthlp: "_stata_medium-purple",
    stl: "_model_dark-green",
    ston: "_database_medium-maroon",
    "stories.cjs": "_storybook_medium-orange",
    "stories.js": "_storybook_medium-orange",
    "stories.jsx": "_storybook_medium-orange",
    "stories.mjs": "_storybook_medium-orange",
    "stories.ts": "_storybook_medium-blue",
    "stories.tsx": "_storybook_medium-blue",
    story: "_storyist_medium-blue",
    storyboard: "_code_medium-green",
    "story.cjs": "_storybook_medium-orange",
    "story.js": "_storybook_medium-orange",
    "story.jsx": "_storybook_medium-orange",
    "story.mjs": "_storybook_medium-orange",
    "story.ts": "_storybook_medium-blue",
    "story.tsx": "_storybook_medium-blue",
    stp: "_model_medium-orange",
    strings: "_strings_medium-red",
    struct: "_circuit-board_dark-green",
    sttheme: "_sublime_medium-orange",
    sty: "_tex_medium-red",
    styl: "_stylus_medium-green",
    style: "_sketchup-sb_medium-red",
    stylelintcache: "_stylelint_dark-blue",
    stylelintignore: "_stylelint_dark-blue",
    stylus: "_stylus_medium-green",
    sub: "_text_dark-purple",
    "sublime-build": "_sublime_medium-orange",
    sublime_build: "_sublime_medium-orange",
    "sublime-commands": "_sublime_medium-orange",
    sublime_commands: "_sublime_medium-orange",
    "sublime-completions": "_sublime_medium-orange",
    sublime_completions: "_sublime_medium-orange",
    "sublime-keymap": "_sublime_medium-orange",
    sublime_keymap: "_sublime_medium-orange",
    "sublime-macro": "_sublime_medium-orange",
    sublime_macro: "_sublime_medium-orange",
    "sublime-menu": "_sublime_medium-orange",
    sublime_menu: "_sublime_medium-orange",
    "sublime-metrics": "_sublime_medium-orange",
    sublime_metrics: "_sublime_medium-orange",
    "sublime-mousemap": "_sublime_medium-orange",
    sublime_mousemap: "_sublime_medium-orange",
    "sublime-project": "_sublime_medium-orange",
    sublime_project: "_sublime_medium-orange",
    "sublime-session": "_sublime_medium-orange",
    sublime_session: "_sublime_medium-orange",
    "sublime-settings": "_sublime_medium-orange",
    sublime_settings: "_sublime_medium-orange",
    "sublime-snippet": "_sublime_medium-orange",
    sublime_snippet: "_sublime_medium-orange",
    "sublime-syntax": "_sublime_dark-orange",
    "sublime-theme": "_sublime_medium-orange",
    sublime_theme: "_sublime_medium-orange",
    "sublime-workspace": "_sublime_medium-orange",
    sublime_workspace: "_sublime_medium-orange",
    sum: "_tag_medium-green",
    sums: "_tag_medium-green",
    sv: "_sysverilog_medium-blue",
    svelte: "_svelte_medium-orange",
    svg: "_svg_dark-yellow",
    svgz: "_image_medium-orange",
    svh: "_sysverilog_medium-green",
    "swagger-codegen-ignore": "_swagger_dark-green",
    swc: "_as_dark-red",
    swf: "_as_medium-blue",
    swift: "_swift_medium-orange",
    swig: "_html5_medium-green",
    swp: "_binary_dark-green",
    sxt: "_reasonstudios_medium-yellow",
    sy: "_database_dark-green",
    syntax: "_database_medium-blue",
    t: "_test-perl_medium-blue",
    t6: "_perl6_light-blue",
    tab: "_graph_light-green",
    tac: "_python_dark-pink",
    tag: "_riot_medium-red",
    tags: "_tag_medium-blue",
    tagx: "_code_medium-purple",
    tar: "_zip_dark-blue",
    targets: "_code_medium-red",
    "tar.lzma": "_zip_medium-maroon",
    taskpaper: "_checklist_medium-yellow",
    tcc: "_cpp_medium-red",
    tcl: "_tcl_dark-orange",
    tcsh: "_terminal_medium-green",
    tea: "_coffee_medium-orange",
    tech: "_circuit-board_dark-green",
    tera: "_code_medium-red",
    terminal: "_config_dark-blue",
    terminalrc: "_config_dark-blue",
    "tern-config": "_tern_medium-purple",
    "tern-project": "_tern_medium-blue",
    tesc: "_model_medium-green",
    tese: "_model_medium-green",
    test: "_test-generic_medium-green",
    "-test.c2hs": "_test-hs_medium-purple",
    "test.c2hs": "_test-hs_medium-purple",
    "_test.c2hs": "_test-hs_medium-purple",
    "-test.cjs": "_test-js_medium-green",
    "test.cjs": "_test-js_medium-green",
    "_test.cjs": "_test-js_medium-green",
    "-test.cjsx": "_test-coffee_medium-maroon",
    "test.cjsx": "_test-coffee_medium-maroon",
    "_test.cjsx": "_test-coffee_medium-maroon",
    "-test.coffee": "_test-coffee_medium-maroon",
    "test.coffee": "_test-coffee_medium-maroon",
    "_test.coffee": "_test-coffee_medium-maroon",
    "-test.es": "_test-js_medium-yellow",
    "test.es": "_test-js_medium-yellow",
    "_test.es": "_test-js_medium-yellow",
    "-test.go": "_test-go_medium-cyan",
    "test.go": "_test-go_medium-cyan",
    "_test.go": "_test-go_medium-cyan",
    "-test.hs": "_test-hs_medium-purple",
    "test.hs": "_test-hs_medium-purple",
    "_test.hs": "_test-hs_medium-purple",
    "-test.hsc": "_test-hs_medium-purple",
    "test.hsc": "_test-hs_medium-purple",
    "_test.hsc": "_test-hs_medium-purple",
    "-test.iced": "_test-coffee_medium-maroon",
    "test.iced": "_test-coffee_medium-maroon",
    "_test.iced": "_test-coffee_medium-maroon",
    "-test.js": "_test-js_medium-yellow",
    "-test._js": "_test-js_medium-yellow",
    "test.js": "_test-js_medium-yellow",
    "test._js": "_test-js_medium-yellow",
    "_test.js": "_test-js_medium-yellow",
    "_test._js": "_test-js_medium-yellow",
    "-test.jsb": "_test-js_medium-yellow",
    "test.jsb": "_test-js_medium-yellow",
    "_test.jsb": "_test-js_medium-yellow",
    "-test.jsm": "_test-js_medium-yellow",
    "test.jsm": "_test-js_medium-yellow",
    "_test.jsm": "_test-js_medium-yellow",
    "-test.jss": "_test-js_medium-yellow",
    "test.jss": "_test-js_medium-yellow",
    "_test.jss": "_test-js_medium-yellow",
    "-test.jsx": "_test-react_medium-blue",
    "test.jsx": "_test-react_medium-blue",
    "_test.jsx": "_test-react_medium-blue",
    "-test.lhs": "_test-hs_medium-purple",
    "test.lhs": "_test-hs_medium-purple",
    "_test.lhs": "_test-hs_medium-purple",
    "-test.litcoffee": "_test-coffee_medium-maroon",
    "test.litcoffee": "_test-coffee_medium-maroon",
    "_test.litcoffee": "_test-coffee_medium-maroon",
    "-test.mjs": "_test-js_medium-blue",
    "test.mjs": "_test-js_medium-blue",
    "_test.mjs": "_test-js_medium-blue",
    "-test.rb": "_test-ruby_medium-red",
    "test.rb": "_test-ruby_medium-red",
    "_test.rb": "_test-ruby_medium-red",
    "-test.react.cjs": "_test-react_medium-blue",
    "test.react.cjs": "_test-react_medium-blue",
    "_test.react.cjs": "_test-react_medium-blue",
    "-test.react.js": "_test-react_medium-blue",
    "test.react.js": "_test-react_medium-blue",
    "_test.react.js": "_test-react_medium-blue",
    "-test.react.mjs": "_test-react_medium-blue",
    "test.react.mjs": "_test-react_medium-blue",
    "_test.react.mjs": "_test-react_medium-blue",
    "-test.rs": "_test-rust_medium-maroon",
    "test.rs": "_test-rust_medium-maroon",
    "_test.rs": "_test-rust_medium-maroon",
    "-test.ruby": "_test-ruby_medium-red",
    "test.ruby": "_test-ruby_medium-red",
    "_test.ruby": "_test-ruby_medium-red",
    "-tests.c2hs": "_test-hs_medium-purple",
    "tests.c2hs": "_test-hs_medium-purple",
    "_tests.c2hs": "_test-hs_medium-purple",
    "-tests.cjs": "_test-js_medium-green",
    "tests.cjs": "_test-js_medium-green",
    "_tests.cjs": "_test-js_medium-green",
    "-tests.cjsx": "_test-coffee_medium-maroon",
    "tests.cjsx": "_test-coffee_medium-maroon",
    "_tests.cjsx": "_test-coffee_medium-maroon",
    "-tests.coffee": "_test-coffee_medium-maroon",
    "tests.coffee": "_test-coffee_medium-maroon",
    "_tests.coffee": "_test-coffee_medium-maroon",
    "-tests.es": "_test-js_medium-yellow",
    "tests.es": "_test-js_medium-yellow",
    "_tests.es": "_test-js_medium-yellow",
    "-tests.go": "_test-go_medium-cyan",
    "tests.go": "_test-go_medium-cyan",
    "_tests.go": "_test-go_medium-cyan",
    "-tests.hs": "_test-hs_medium-purple",
    "tests.hs": "_test-hs_medium-purple",
    "_tests.hs": "_test-hs_medium-purple",
    "-tests.hsc": "_test-hs_medium-purple",
    "tests.hsc": "_test-hs_medium-purple",
    "_tests.hsc": "_test-hs_medium-purple",
    "-tests.iced": "_test-coffee_medium-maroon",
    "tests.iced": "_test-coffee_medium-maroon",
    "_tests.iced": "_test-coffee_medium-maroon",
    "-test.sjs": "_test-js_medium-yellow",
    "-tests.js": "_test-js_medium-yellow",
    "-tests._js": "_test-js_medium-yellow",
    "test.sjs": "_test-js_medium-yellow",
    "tests.js": "_test-js_medium-yellow",
    "tests._js": "_test-js_medium-yellow",
    "_test.sjs": "_test-js_medium-yellow",
    "_tests.js": "_test-js_medium-yellow",
    "_tests._js": "_test-js_medium-yellow",
    "-tests.jsb": "_test-js_medium-yellow",
    "tests.jsb": "_test-js_medium-yellow",
    "_tests.jsb": "_test-js_medium-yellow",
    "-tests.jsm": "_test-js_medium-yellow",
    "tests.jsm": "_test-js_medium-yellow",
    "_tests.jsm": "_test-js_medium-yellow",
    "-tests.jss": "_test-js_medium-yellow",
    "tests.jss": "_test-js_medium-yellow",
    "_tests.jss": "_test-js_medium-yellow",
    "-tests.jsx": "_test-react_medium-blue",
    "tests.jsx": "_test-react_medium-blue",
    "_tests.jsx": "_test-react_medium-blue",
    "-tests.lhs": "_test-hs_medium-purple",
    "tests.lhs": "_test-hs_medium-purple",
    "_tests.lhs": "_test-hs_medium-purple",
    "-tests.litcoffee": "_test-coffee_medium-maroon",
    "tests.litcoffee": "_test-coffee_medium-maroon",
    "_tests.litcoffee": "_test-coffee_medium-maroon",
    "-tests.mjs": "_test-js_medium-blue",
    "tests.mjs": "_test-js_medium-blue",
    "_tests.mjs": "_test-js_medium-blue",
    "-tests.rb": "_test-ruby_medium-red",
    "tests.rb": "_test-ruby_medium-red",
    "_tests.rb": "_test-ruby_medium-red",
    "-tests.react.cjs": "_test-react_medium-blue",
    "tests.react.cjs": "_test-react_medium-blue",
    "_tests.react.cjs": "_test-react_medium-blue",
    "-tests.react.js": "_test-react_medium-blue",
    "tests.react.js": "_test-react_medium-blue",
    "_tests.react.js": "_test-react_medium-blue",
    "-tests.react.mjs": "_test-react_medium-blue",
    "tests.react.mjs": "_test-react_medium-blue",
    "_tests.react.mjs": "_test-react_medium-blue",
    "-tests.rs": "_test-rust_medium-maroon",
    "tests.rs": "_test-rust_medium-maroon",
    "_tests.rs": "_test-rust_medium-maroon",
    "-tests.ruby": "_test-ruby_medium-red",
    "tests.ruby": "_test-ruby_medium-red",
    "_tests.ruby": "_test-ruby_medium-red",
    "-tests.sjs": "_test-js_medium-yellow",
    "tests.sjs": "_test-js_medium-yellow",
    "_tests.sjs": "_test-js_medium-yellow",
    "-tests.ts": "_test-ts_medium-blue",
    "tests.ts": "_test-ts_medium-blue",
    "_tests.ts": "_test-ts_medium-blue",
    "-tests.tsx": "_test-ts_light-blue",
    "tests.tsx": "_test-ts_light-blue",
    "_tests.tsx": "_test-ts_light-blue",
    "-test.ts": "_test-ts_medium-blue",
    "test.ts": "_test-ts_medium-blue",
    "_test.ts": "_test-ts_medium-blue",
    "-test.tsx": "_test-ts_light-blue",
    "test.tsx": "_test-ts_light-blue",
    "_test.tsx": "_test-ts_light-blue",
    tex: "_tex_medium-blue",
    texi: "_tex_medium-red",
    texinfo: "_tex_medium-red",
    text: "_text_medium-blue",
    textile: "_textile_medium-orange",
    tf: "_terraform_dark-purple",
    tfignore: "_tfs_dark-purple",
    "tf.json": "_terraform_medium-yellow",
    tfm: "_font_dark-green",
    tfstate: "_terraform_medium-cyan",
    "tfstate.backup": "_terraform_medium-cyan",
    tfvars: "_terraform_dark-purple",
    tga: "_image_dark-orange",
    tgn: "_database_medium-blue",
    tgz: "_zip_dark-blue",
    theme: "_paintcan_medium-purple",
    thor: "_thor_medium-orange",
    thrift: "_apache_medium-green",
    thy: "_isabelle_dark-red",
    tif: "_image_medium-red",
    tiff: "_image_medium-red",
    tikz: "_tex_medium-purple",
    tiny: "_sourcemap_dark-green",
    tinyv2: "_sourcemap_medium-green",
    tipe: "_tipe_medium-cyan",
    tl: "_telegram_medium-blue",
    tla: "_tla_medium-maroon",
    tld: "_tag_medium-maroon",
    tlf: "_font-bitmap_medium-orange",
    tlpp: "_totvs_dark-blue",
    tlz: "_zip_medium-maroon",
    tm: "_tcl_medium-red",
    tmac: "_manpage_dark-green",
    "tmac-u": "_manpage_dark-green",
    tmcg: "_textmate_medium-green",
    tmcommand: "_textmate_medium-blue",
    tml: "_code_dark-green",
    tmlanguage: "_textmate_dark-purple",
    tmmacro: "_textmate_medium-maroon",
    tmpreferences: "_textmate_dark-blue",
    tm_properties: "_textmate_medium-pink",
    tmproperties: "_textmate_medium-pink",
    tmsnippet: "_textmate_dark-orange",
    tmtheme: "_textmate_medium-pink",
    tmux: "_terminal_medium-blue",
    "tmux.conf": "_tmux_medium-green",
    "_tmux.conf": "_tmux_medium-green",
    toc: "_toc_medium-cyan",
    todo: "_checklist_medium-yellow",
    toml: "_toml_medium-green",
    tool: "_terminal_medium-purple",
    topojson: "_json_medium-cyan",
    tpl: "_smarty_medium-yellow",
    tpp: "_cpp_medium-orange",
    tr: "_manpage_dark-green",
    tres: "_godot_medium-cyan",
    trm: "_ftr_medium-red",
    troff: "_manpage_dark-green",
    troffrc: "_manpage_dark-green",
    "troffrc-end": "_manpage_dark-green",
    ts: "_ts_medium-blue",
    tscn: "_godot_medium-green",
    tsconfig: "_typo3_medium-orange",
    tss: "_css3_dark-red",
    "ts.snap": "_jest_medium-blue",
    tst: "_scilab_dark-cyan",
    tsv: "_graph_light-green",
    tsx: "_tsx_light-blue",
    "tsx.snap": "_jest_medium-blue",
    tt: "_tt_medium-blue",
    tt2: "_tt_medium-blue",
    tt3: "_tt_medium-purple",
    ttc: "_font_dark-green",
    ttcn: "_ttcn3_medium-blue",
    ttcn3: "_ttcn3_medium-blue",
    ttf: "_font_medium-green",
    ttl: "_database_medium-cyan",
    tu: "_turing_medium-red",
    tw: "_twine_medium-blue",
    twig: "_twig_medium-green",
    txi: "_tex_medium-red",
    txl: "_txl_medium-orange",
    txt: "_text_medium-blue",
    typoscript: "_typo3_medium-orange",
    u3d: "_model_medium-orange",
    uasset: "_unreal_dark-blue",
    uc: "_unreal_medium-grey",
    udf: "_sql_medium-green",
    udo: "_csound_dark-orange",
    ui: "_code_medium-blue",
    unibeautifyrc: "_unibeautify_dark-cyan",
    "unibeautifyrc.cjs": "_unibeautify_medium-orange",
    "unibeautifyrc.js": "_unibeautify_medium-orange",
    "unibeautifyrc.json": "_unibeautify_medium-orange",
    "unibeautifyrc.mjs": "_unibeautify_medium-orange",
    "unibeautifyrc.yaml": "_unibeautify_medium-yellow",
    "unibeautifyrc.yml": "_unibeautify_medium-yellow",
    units: "_scales_medium-green",
    unity: "_unity3d_medium-blue",
    unitypackage: "_unity3d_dark-green",
    unityproj: "_unity3d_medium-maroon",
    uno: "_uno_dark-blue",
    unpick: "_sourcemap_light-cyan",
    uof: "_text_dark-red",
    uop: "_text_medium-purple",
    uos: "_text_medium-green",
    uot: "_text_medium-blue",
    upc: "_c_medium-cyan",
    upp: "_print_medium-orange",
    ur: "_urweb_medium-maroon",
    urdf: "_code_dark-orange",
    url: "_link_dark-blue",
    urs: "_urweb_dark-blue",
    utf8: "_text_medium-cyan",
    utxt: "_text_medium-cyan",
    ux: "_code_light-orange",
    v: "_v_medium-blue",
    vala: "_vala_medium-purple",
    vapi: "_vala_dark-purple",
    vark: "_gosu_dark-blue",
    vash: "_html5_medium-red",
    vax: "_asm-vax_medium-maroon",
    vb: "_vs_medium-blue",
    vba: "_vs_medium-blue",
    vbhtml: "_vs_medium-red",
    vbox: "_virtualbox_medium-blue",
    "vbox-prev": "_virtualbox_medium-blue",
    vbox_version: "_virtualbox_medium-blue",
    vbproj: "_vs_dark-red",
    vbr: "_gimp_medium-cyan",
    vbs: "_vs_medium-green",
    vcg: "_model_dark-blue",
    vcl: "_varnish_dark-blue",
    vcproj: "_vs_dark-purple",
    vcxitems: "_vs_medium-purple",
    vcxproj: "_vs_dark-purple",
    vdw: "_visio_dark-purple",
    vdx: "_visio_medium-red",
    veo: "_verilog_medium-red",
    vert: "_vertex_medium-blue",
    vertex: "_vertex_medium-blue",
    vfl: "_houdini_medium-cyan",
    vh: "_sysverilog_medium-cyan",
    vhd: "_virtualbox_medium-green",
    vhdl: "_vhdl_dark-green",
    vhdx: "_virtualbox_dark-green",
    vhf: "_vhdl_dark-blue",
    vhi: "_vhdl_medium-blue",
    vho: "_vhdl_dark-purple",
    vhost: "_apache_dark-green",
    vhs: "_vhdl_medium-purple",
    vht: "_vhdl_dark-red",
    vhw: "_vhdl_dark-orange",
    vim: "_vim_medium-green",
    vimrc: "_vim_medium-green",
    viper: "_emacs_dark-green",
    viw: "_sql_dark-cyan",
    vm: "_velocity_dark-blue",
    vmasm: "_asm-vax_medium-maroon",
    vmb: "_vim_dark-green",
    vmdk: "_vmware_medium-orange",
    vmf: "_source_medium-maroon",
    vmsd: "_vmware_medium-green",
    vmsn: "_vmware_medium-green",
    vmss: "_vmware_medium-blue",
    vmt: "_source_medium-blue",
    vmtm: "_vmware_medium-red",
    vmx: "_vmware_medium-orange",
    vmxf: "_vmware_medium-orange",
    volt: "_phalcon_medium-cyan",
    vpk: "_source_medium-red",
    vrd: "_visio_medium-cyan",
    vrimg: "_vray_medium-grey",
    vrx: "_vertex_medium-blue",
    vscodeignore: "_vs_medium-blue",
    "vscodeignore.json": "_vs_medium-blue",
    vsd: "_visio_medium-blue",
    vsdm: "_visio_dark-maroon",
    vsdx: "_visio_dark-blue",
    vsh: "_vertex_medium-blue",
    vshader: "_vertex_medium-blue",
    vsix: "_vs_medium-cyan",
    vsixmanifest: "_vs_dark-orange",
    vsl: "_visio_medium-orange",
    vss: "_visio_dark-blue",
    vssettings: "_vs_dark-green",
    "vssettings.json": "_vs_dark-green",
    vssm: "_visio_dark-blue",
    vssx: "_visio_dark-blue",
    vst: "_visio_dark-blue",
    vstemplate: "_vs_medium-purple",
    vstm: "_visio_dark-blue",
    vstx: "_visio_dark-blue",
    vsw: "_visio_medium-green",
    vsx: "_visio_dark-red",
    vtf: "_source_dark-blue",
    vtfx: "_source_dark-red",
    vtt: "_webvtt_dark-blue",
    vtx: "_visio_dark-red",
    vue: "_vue_light-green",
    vxml: "_code_light-purple",
    vy: "_vyper_medium-grey",
    w: "_c_medium-maroon",
    walt: "_walt_medium-purple",
    war: "_zip_medium-purple",
    wasm: "_wasm_medium-red",
    wast: "_wasm_medium-blue",
    wat: "_wasm_medium-blue",
    watchmanconfig: "_watchman_medium-blue",
    watchr: "_ruby_dark-yellow",
    wav: "_audio_dark-yellow",
    wbm: "_image_dark-maroon",
    wbmp: "_image_dark-grey",
    wc3: "_warcraft3_dark-orange",
    wdl: "_wdl_medium-blue",
    wdp: "_image_dark-red",
    webapp: "_firefox_medium-orange",
    webarchive: "_safari_medium-blue",
    webarchivexml: "_android_dark-cyan",
    webgl: "_webgl_dark-red",
    webidl: "_code_medium-red",
    webm: "_video_dark-blue",
    webmanifest: "_database_medium-blue",
    webp: "_image_dark-blue",
    "webpack.cjs": "_webpack_medium-blue",
    "webpack.coffee": "_webpack_medium-blue",
    "webpackfile.cjs": "_webpack_medium-blue",
    "webpackfile.coffee": "_webpack_medium-blue",
    "webpackfile.js": "_webpack_medium-blue",
    "webpackfile.json": "_webpack_medium-blue",
    "webpackfile.jsx": "_webpack_medium-blue",
    "webpackfile.litcoffee": "_webpack_medium-blue",
    "webpackfile.mjs": "_webpack_medium-blue",
    "webpackfile.ts": "_webpack_medium-blue",
    "webpackfile.tsx": "_webpack_medium-blue",
    "webpack.js": "_webpack_medium-blue",
    "webpack.json": "_webpack_medium-blue",
    "webpack.jsx": "_webpack_medium-blue",
    "webpack.litcoffee": "_webpack_medium-blue",
    "webpack.mjs": "_webpack_medium-blue",
    "webpack.ts": "_webpack_medium-blue",
    "webpack.tsx": "_webpack_medium-blue",
    weechatlog: "_text_medium-green",
    "wget-hsts": "_wget_medium-maroon",
    wgetrc: "_wget_medium-purple",
    wgt: "_zip_medium-blue",
    whl: "_zip_dark-blue",
    wiki: "_mediawiki_medium-orange",
    wisp: "_code_dark-cyan",
    wix: "_wix_medium-maroon",
    wixobj: "_wix_medium-red",
    wixproj: "_wix_medium-orange",
    wl: "_wolfram_medium-red",
    wll: "_word_dark-blue",
    wlp4: "_code_medium-blue",
    wlpppp: "_code_medium-blue",
    wls: "_wolfram_dark-red",
    wlt: "_wolfram_medium-orange",
    wlua: "_lua_dark-red",
    wma: "_audio_medium-blue",
    wmaproj: "_vs_medium-maroon",
    wmf: "_image_medium-red",
    wmv: "_video_dark-purple",
    wmz: "_image_medium-red",
    woff: "_font_medium-blue",
    woff2: "_font_dark-blue",
    workbook: "_xamarin_light-blue",
    workflow: "_hashicorp_medium-cyan",
    wri: "_word_medium-orange",
    wsdl: "_code_medium-red",
    wsf: "_code_medium-blue",
    wsgi: "_python_dark-red",
    wurst: "_wurst_medium-maroon",
    wxi: "_wix_medium-orange",
    wxl: "_wix_medium-maroon",
    wxml: "_wechat_medium-green",
    wxs: "_wix_dark-purple",
    wxss: "_wechat_medium-blue",
    wy: "_wenyan_light-orange",
    x: "_model_medium-green",
    x10: "_x10_light-maroon",
    x32: "_asm-intel_dark-blue",
    x32asm: "_asm-intel_dark-blue",
    x3d: "_code_medium-blue",
    x64: "_asm-intel_dark-blue",
    x64asm: "_asm-intel_dark-blue",
    x86: "_asm-intel_dark-blue",
    x86asm: "_asm-intel_dark-blue",
    xacro: "_code_medium-red",
    xaml: "_winui_medium-blue",
    xar: "_zip_dark-orange",
    xauthority: "_x11_medium-orange",
    xbm: "_c_medium-orange",
    xc: "_xmos_medium-orange",
    xccheckout: "_appstore_medium-orange",
    xcf: "_gimp_medium-red",
    xclients: "_x11_medium-orange",
    xcplugindata: "_appstore_dark-purple",
    xcrequiredplugins: "_appstore_dark-cyan",
    xcscheme: "_appstore_medium-purple",
    xcscmblueprint: "_appstore_dark-blue",
    xcsettings: "_appstore_medium-green",
    xcuserstate: "_appstore_dark-cyan",
    xcworkspacedata: "_appstore_dark-red",
    xht: "_html5_medium-maroon",
    xhtm: "_html5_medium-orange",
    xhtml: "_html5_medium-orange",
    xi: "_mobile_dark-red",
    xib: "_code_dark-purple",
    xinitrc: "_x11_medium-orange",
    xinputrc: "_x11_medium-orange",
    xla: "_excel_medium-orange",
    xlam: "_excel_dark-red",
    xlf: "_code_dark-cyan",
    xliff: "_code_medium-red",
    xls: "_excel_dark-orange",
    xlsb: "_excel_medium-red",
    xlsm: "_excel_medium-green",
    xlsx: "_excel_dark-green",
    xlt: "_excel_dark-cyan",
    xltm: "_excel_medium-maroon",
    xltx: "_excel_dark-maroon",
    xm: "_mobile_dark-blue",
    xmi: "_code_medium-green",
    xml: "_code_medium-blue",
    xmp: "_code_medium-red",
    xojo_code: "_xojo_medium-green",
    xojo_menu: "_xojo_medium-blue",
    xojo_report: "_xojo_medium-red",
    xojo_script: "_xojo_dark-green",
    xojo_toolbar: "_xojo_dark-purple",
    xojo_window: "_xojo_dark-cyan",
    xpi: "_zip_medium-orange",
    xpl: "_xmos_dark-blue",
    xpm: "_c_medium-green",
    xproc: "_xmos_medium-purple",
    xprofile: "_x11_medium-orange",
    xproj: "_code_dark-red",
    xps: "_telegram_light-blue",
    xpy: "_python_medium-yellow",
    xq: "_sql_dark-red",
    xql: "_sql_dark-red",
    xqm: "_sql_dark-red",
    xquery: "_sql_dark-red",
    xqy: "_sql_dark-red",
    xresources: "_x11_medium-orange",
    xrl: "_erlang_medium-green",
    xs: "_perl_medium-red",
    xscreensaver: "_x11_medium-orange",
    xsd: "_code_dark-blue",
    "xsession-errors": "_x11_medium-orange",
    xsf: "_infopath_dark-purple",
    xsjs: "_js_medium-purple",
    xsjslib: "_js_medium-blue",
    xsl: "_code_medium-cyan",
    xslt: "_code_dark-cyan",
    xsn: "_infopath_dark-purple",
    "xsp-config": "_xpages_medium-blue",
    xspec: "_test-generic_dark-green",
    "xsp.metadata": "_xpages_dark-blue",
    xtend: "_xtend_dark-purple",
    xtm: "_scheme_medium-yellow",
    xtp2: "_infopath_dark-purple",
    xul: "_code_medium-orange",
    xwd: "_image_dark-purple",
    xz: "_zip",
    xzap: "_zork_dark-green",
    y: "_bison_dark-green",
    yacc: "_bison_medium-green",
    yaml: "_yaml_medium-red",
    "yaml.mysql": "_yaml_medium-orange",
    "yaml.sed": "_yaml_dark-green",
    "yaml-tmlanguage": "_textmate_medium-orange",
    yang: "_yang_medium-yellow",
    yaourtrc: "_archlinux_light-yellow",
    yap: "_prolog_medium-purple",
    yar: "_yara_medium-red",
    yara: "_yara_medium-red",
    yardopts: "_config-ruby_medium-red",
    yarnclean: "_yarn_dark-blue",
    "yarn-integrity": "_yarn_dark-blue",
    "yarn-metadata": "_yarn_medium-blue",
    "yarn-metadata.json": "_yarn_medium-blue",
    yarnrc: "_yarn_dark-blue",
    yas: "_database_medium-green",
    yasnippet: "_database_medium-green",
    yml: "_yaml_medium-red",
    "yml.mysql": "_yaml_medium-orange",
    "yml.sed": "_yaml_dark-green",
    yo: "_book_medium-red",
    "yo-rc.json": "_yeoman_medium-cyan",
    yorick: "_yorick_medium-orange",
    ypp: "_bison_medium-cyan",
    yrl: "_erlang_dark-green",
    yy: "_bison_medium-cyan",
    z: "_zip",
    z64: "_n64_dark-green",
    z80: "_asm-zilog_medium-yellow",
    zabst: "_zork_medium-red",
    zabstr: "_zork_medium-red",
    zap: "_zork_dark-cyan",
    zcml: "_code_dark-pink",
    zep: "_zephir_medium-pink",
    zig: "_zig_medium-orange",
    zil: "_zork_dark-blue",
    zimpl: "_zimpl_medium-orange",
    zip: "_zip",
    zmpl: "_zimpl_medium-orange",
    zn: "_warcraft3_medium-maroon",
    zone: "_earth_medium-blue",
    zpl: "_zimpl_medium-orange",
    zpr: "_zbrush_dark-purple",
    zs: "_crafttweaker_medium-maroon",
    zsh: "_terminal_medium-blue",
    zsh_history: "_terminal_medium-blue",
    "zsh-theme": "_terminal_medium-blue",
    ztl: "_zbrush_medium-red"
  };
  const fileNames = {
    "abbrev-defs": "_emacs_medium-purple",
    abbrev_defs: "_emacs_medium-purple",
    "acre.config": "_acre_medium-blue",
    "adobe illustrator cloud prefs": "_ai_medium-orange",
    "adobe illustrator prefs": "_ai_medium-orange",
    aiappresources: "_ai_medium-orange",
    "alacritty.yaml": "_alacritty_medium-orange",
    ".alacritty.yaml": "_alacritty_medium-orange",
    "alacritty.yml": "_alacritty_medium-orange",
    ".alacritty.yml": "_alacritty_medium-orange",
    "angular.cjs": "_angular_medium-red",
    "angular.js": "_angular_medium-red",
    "angular.mjs": "_angular_medium-red",
    ansible: "_ansible_dark-cyan",
    "ansible.yaml": "_ansible_dark-cyan",
    "ansible.yml": "_ansible_dark-cyan",
    antigen: "_terminal_medium-blue",
    ".antigen": "_terminal_medium-blue",
    "antwar.conf.cjs": "_antwar_dark-purple",
    ".antwar.conf.cjs": "_antwar_dark-purple",
    "antwar.config.cjs": "_antwar_dark-purple",
    ".antwar.config.cjs": "_antwar_dark-purple",
    "antwar.config.js": "_antwar_dark-purple",
    ".antwar.config.js": "_antwar_dark-purple",
    "antwar.config.mjs": "_antwar_dark-purple",
    ".antwar.config.mjs": "_antwar_dark-purple",
    "antwar.conf.js": "_antwar_dark-purple",
    ".antwar.conf.js": "_antwar_dark-purple",
    "antwar.conf.mjs": "_antwar_dark-purple",
    ".antwar.conf.mjs": "_antwar_dark-purple",
    "ant.xml": "_ant_dark-pink",
    "apache2.conf": "_apache_medium-red",
    "apache.conf": "_apache_medium-red",
    "api-extractor-base.json": "_apiextractor_light-blue",
    "api-extractor.json": "_apiextractor_light-blue",
    apkbuild: "_alpine_dark-blue",
    apmrc: "_atom_medium-green",
    ".apmrc": "_atom_medium-green",
    "apollo.config.js": "_apollo_dark-blue",
    "appcelerator.cjs": "_appcelerator_medium-red",
    "appcelerator.js": "_appcelerator_medium-red",
    "appcelerator.mjs": "_appcelerator_medium-red",
    appfile: "_ruby_medium-red",
    "appfile.lock": "_ruby_medium-red",
    appraisals: "_ruby_medium-red",
    "appveyor.yml": "_appveyor_medium-blue",
    ".appveyor.yml": "_appveyor_medium-blue",
    aptfile: "_heroku_medium-purple",
    "arabicshaping.txt": "_unicode_medium-red",
    atom_commit_editmsg: "_git-commit_medium-red",
    "aurelia.json": "_aurelia_dark-pink",
    authors: "_at_medium-red",
    "azure-pipelines.yaml": "_azurepipelines_dark-blue",
    "azure-pipelines.yml": "_azurepipelines_dark-blue",
    "babel.config.esm.js": "_babel_medium-yellow",
    "babel.config.js": "_babel_medium-yellow",
    "babel.config.json": "_babel_medium-yellow",
    "backbone.cjs": "_backbone_dark-blue",
    "backbonedev.cjs": "_backbone_dark-blue",
    "backbonedev.js": "_backbone_dark-blue",
    "backbonedev.mjs": "_backbone_dark-blue",
    "backbone.js": "_backbone_dark-blue",
    "backbone-min.cjs": "_backbone_dark-blue",
    "backbone.min.cjs": "_backbone_dark-blue",
    "backbone-min.js": "_backbone_dark-blue",
    "backbone.min.js": "_backbone_dark-blue",
    "backbone-min.mjs": "_backbone_dark-blue",
    "backbone.min.mjs": "_backbone_dark-blue",
    "backbone.mjs": "_backbone_dark-blue",
    bashhistory: "_terminal_dark-purple",
    "bash-history": "_terminal_dark-purple",
    bash_history: "_terminal_dark-purple",
    ".bashhistory": "_terminal_dark-purple",
    ".bash-history": "_terminal_dark-purple",
    ".bash_history": "_terminal_dark-purple",
    bashlogin: "_terminal_dark-purple",
    "bash-login": "_terminal_dark-purple",
    bash_login: "_terminal_dark-purple",
    ".bashlogin": "_terminal_dark-purple",
    ".bash-login": "_terminal_dark-purple",
    ".bash_login": "_terminal_dark-purple",
    bashlogout: "_terminal_dark-purple",
    "bash-logout": "_terminal_dark-purple",
    bash_logout: "_terminal_dark-purple",
    ".bashlogout": "_terminal_dark-purple",
    ".bash-logout": "_terminal_dark-purple",
    ".bash_logout": "_terminal_dark-purple",
    bashprofile: "_terminal_dark-purple",
    "bash-profile": "_terminal_dark-purple",
    bash_profile: "_terminal_dark-purple",
    ".bashprofile": "_terminal_dark-purple",
    ".bash-profile": "_terminal_dark-purple",
    ".bash_profile": "_terminal_dark-purple",
    bashprompt: "_terminal_dark-purple",
    "bash-prompt": "_terminal_dark-purple",
    bash_prompt: "_terminal_dark-purple",
    ".bashprompt": "_terminal_dark-purple",
    ".bash-prompt": "_terminal_dark-purple",
    ".bash_prompt": "_terminal_dark-purple",
    bashrc: "_terminal_dark-purple",
    ".bashrc": "_terminal_dark-purple",
    "bazel.bazelrc": "_bazel_dark-green",
    ".bazelrc": "_bazel_dark-green",
    "bazel.rc": "_bazel_dark-green",
    "bc.library": "_calc_medium-red",
    "behat.yaml": "_behat_medium-cyan",
    "behat.yml": "_behat_medium-cyan",
    berksfile: "_chef_medium-orange",
    "berksfile.lock": "_chef_medium-orange",
    "bidibrackets.txt": "_unicode_medium-red",
    "bidicharactertest.txt": "_unicode_medium-red",
    "bidimirroring.txt": "_unicode_medium-red",
    "biditest.txt": "_unicode_medium-red",
    "binder-requirements.in": "_binder_medium-orange",
    "binder_requirements.in": "_binder_medium-orange",
    "binder-requirements.txt": "_binder_medium-orange",
    "binder_requirements.txt": "_binder_medium-orange",
    ".bintray.json": "_bintray_medium-green",
    birthtoken: "_database_medium-green",
    "bitbucket-pipelines.yaml": "_bitbucket_medium-blue",
    "bitbucket-pipelines.yml": "_bitbucket_medium-blue",
    "bitcoin.conf": "_bitcoin_medium-orange",
    "blocks.txt": "_unicode_medium-red",
    "bootstrap.cjs": "_bootstrap_medium-green",
    "bootstrap.css": "_bootstrap_medium-blue",
    "bootstrap.js": "_bootstrap_medium-yellow",
    "bootstrap.less": "_bootstrap_dark-blue",
    "bootstrap.mjs": "_bootstrap_medium-blue",
    "bootstrap.scss": "_bootstrap_light-pink",
    "bootstrap.styl": "_bootstrap_medium-green",
    ".boringignore": "_darcs_dark-green",
    "bors.toml": "_bors_dark-purple",
    bowerfile: "_bower_medium-yellow",
    "bower.json": "_bower_medium-yellow",
    ".bowerrc": "_bower_medium-yellow",
    "brakeman.ignore": "_brakeman_dark-red",
    brewfile: "_brew_medium-orange",
    browserslist: "_browserslist_medium-orange",
    ".browserslistrc": "_browserslist_medium-orange",
    "browser-sync.cjs": "_browsersync_medium-red",
    "browser-sync.js": "_browsersync_medium-red",
    "browser-sync.json": "_browsersync_medium-red",
    "browser-sync.mjs": "_browsersync_medium-red",
    "brunch-config.cjs": "_brunch_medium-green",
    "brunch-config.coffee": "_brunch_medium-green",
    "brunch-config.js": "_brunch_medium-green",
    "brunch-config.mjs": "_brunch_medium-green",
    "brunch-config.ts": "_brunch_medium-green",
    "bs-config.cjs": "_browsersync_medium-red",
    "bs-config.js": "_browsersync_medium-red",
    "bs-config.json": "_browsersync_medium-red",
    "bs-config.mjs": "_browsersync_medium-red",
    bsdmakefile: "_checklist_medium-red",
    buck: "_buck_dark-blue",
    "bug-report": "_text_medium-red",
    bugs: "_book_dark-blue",
    build: "_bazel_medium-green",
    "build.bazel": "_bazel_medium-green",
    buildfile: "_ruby_medium-red",
    "buildfile.lock": "_ruby_medium-red",
    "buildozer.spec": "_config_dark-blue",
    bundled_node_version: "_node_dark-green",
    ".c8rc": "_v8_dark-blue",
    ".c8rc.json": "_v8_dark-blue",
    "cabal.config": "_cabal_medium-purple",
    "cabal-ghcjs.project": "_cabal_medium-yellow",
    "cabal.project": "_cabal_medium-purple",
    caddyfile: "_caddy_dark-blue",
    cakefile: "_cakefile_medium-red",
    capfile: "_ruby_medium-red",
    "capfile.lock": "_ruby_medium-red",
    cartfile: "_carthage_dark-pink",
    "casefolding.txt": "_unicode_medium-red",
    cask: "_emacs_dark-blue",
    ".cfignore": "_cloudfoundry_medium-blue",
    "chai.coffee": "_chai_medium-red",
    "chai.es": "_chai_medium-red",
    "chai.es6": "_chai_medium-red",
    "chai.js": "_chai_medium-red",
    "chai.jsx": "_chai_medium-red",
    "chai.ts": "_chai_medium-red",
    "chai.tsx": "_chai_medium-red",
    changelog: "_book_dark-blue",
    "change-log": "_book_dark-blue",
    change_log: "_book_dark-blue",
    changes: "_book_dark-blue",
    "chart.bundle.cjs": "_chartjs_dark-pink",
    "chart.bundle.js": "_chartjs_dark-pink",
    "chart.bundle.min.cjs": "_chartjs_dark-pink",
    "chart.bundle.min.js": "_chartjs_dark-pink",
    "chart.bundle.min.mjs": "_chartjs_dark-pink",
    "chart.bundle.mjs": "_chartjs_dark-pink",
    "chart.cjs": "_chartjs_dark-pink",
    "chart.js": "_chartjs_dark-pink",
    "chart.min.cjs": "_chartjs_dark-pink",
    "chart.min.js": "_chartjs_dark-pink",
    "chart.min.mjs": "_chartjs_dark-pink",
    "chart.mjs": "_chartjs_dark-pink",
    checksum: "_tag_medium-green",
    checksums: "_tag_medium-green",
    chefignore: "_chef_medium-orange",
    "chem.macros": "_manpage_dark-green",
    "chocolatey.ps1": "_chocolatey_medium-blue",
    "circle.yml": "_circleci_medium-green",
    citation: "_book_medium-blue",
    "citation.cff": "_book_medium-blue",
    citations: "_book_medium-blue",
    "cjkradicals.txt": "_unicode_medium-red",
    cksum: "_tag_medium-green",
    cksums: "_tag_medium-green",
    "click.me": "_book_medium-blue",
    "click.me.md": "_book_medium-blue",
    "click.me.txt": "_book_medium-blue",
    "cmakelists.txt": "_cmake_medium-red",
    cname: "_earth_dark-blue",
    "codecov.yaml": "_codecov_dark-pink",
    ".codecov.yaml": "_codecov_dark-pink",
    "codecov.yml": "_codecov_dark-pink",
    ".codecov.yml": "_codecov_dark-pink",
    "codegen.json": "_gql-codegen_dark-pink",
    "codegen.yaml": "_gql-codegen_dark-pink",
    "codegen.yml": "_gql-codegen_dark-pink",
    "codemeta.json": "_codemeta_medium-grey",
    "codemeta.jsonld": "_codemeta_medium-grey",
    codeowners: "_at_medium-red",
    "codeship-0.yaml": "_codeship_dark-blue",
    "codeship-0.yml": "_codeship_dark-blue",
    "codeship-1.yaml": "_codeship_dark-blue",
    "codeship-1.yml": "_codeship_dark-blue",
    "codeship-2.yaml": "_codeship_dark-blue",
    "codeship-2.yml": "_codeship_dark-blue",
    "codeship-3.yaml": "_codeship_dark-blue",
    "codeship-3.yml": "_codeship_dark-blue",
    "codeship-4.yaml": "_codeship_dark-blue",
    "codeship-4.yml": "_codeship_dark-blue",
    "codeship-5.yaml": "_codeship_dark-blue",
    "codeship-5.yml": "_codeship_dark-blue",
    "codeship-6.yaml": "_codeship_dark-blue",
    "codeship-6.yml": "_codeship_dark-blue",
    "codeship-7.yaml": "_codeship_dark-blue",
    "codeship-7.yml": "_codeship_dark-blue",
    "codeship-8.yaml": "_codeship_dark-blue",
    "codeship-8.yml": "_codeship_dark-blue",
    "codeship-9.yaml": "_codeship_dark-blue",
    "codeship-9.yml": "_codeship_dark-blue",
    "codeship-a.yaml": "_codeship_dark-blue",
    "codeship-a.yml": "_codeship_dark-blue",
    "codeship-b.yaml": "_codeship_dark-blue",
    "codeship-b.yml": "_codeship_dark-blue",
    "codeship-c.yaml": "_codeship_dark-blue",
    "codeship-c.yml": "_codeship_dark-blue",
    "codeship-d.yaml": "_codeship_dark-blue",
    "codeship-d.yml": "_codeship_dark-blue",
    "codeship-e.yaml": "_codeship_dark-blue",
    "codeship-e.yml": "_codeship_dark-blue",
    "codeship-f.yaml": "_codeship_dark-blue",
    "codeship-f.yml": "_codeship_dark-blue",
    "codeship-g.yaml": "_codeship_dark-blue",
    "codeship-g.yml": "_codeship_dark-blue",
    "codeship-h.yaml": "_codeship_dark-blue",
    "codeship-h.yml": "_codeship_dark-blue",
    "codeship-i.yaml": "_codeship_dark-blue",
    "codeship-i.yml": "_codeship_dark-blue",
    "codeship-j.yaml": "_codeship_dark-blue",
    "codeship-j.yml": "_codeship_dark-blue",
    "codeship-k.yaml": "_codeship_dark-blue",
    "codeship-k.yml": "_codeship_dark-blue",
    "codeship-l.yaml": "_codeship_dark-blue",
    "codeship-l.yml": "_codeship_dark-blue",
    "codeship-m.yaml": "_codeship_dark-blue",
    "codeship-m.yml": "_codeship_dark-blue",
    "codeship-n.yaml": "_codeship_dark-blue",
    "codeship-n.yml": "_codeship_dark-blue",
    "codeship-o.yaml": "_codeship_dark-blue",
    "codeship-o.yml": "_codeship_dark-blue",
    "codeship-p.yaml": "_codeship_dark-blue",
    "codeship-p.yml": "_codeship_dark-blue",
    "codeship-q.yaml": "_codeship_dark-blue",
    "codeship-q.yml": "_codeship_dark-blue",
    "codeship-r.yaml": "_codeship_dark-blue",
    "codeship-r.yml": "_codeship_dark-blue",
    "codeship-s.yaml": "_codeship_dark-blue",
    "codeship-s.yml": "_codeship_dark-blue",
    "codeship-t.yaml": "_codeship_dark-blue",
    "codeship-t.yml": "_codeship_dark-blue",
    "codeship-u.yaml": "_codeship_dark-blue",
    "codeship-u.yml": "_codeship_dark-blue",
    "codeship-v.yaml": "_codeship_dark-blue",
    "codeship-v.yml": "_codeship_dark-blue",
    "codeship-w.yaml": "_codeship_dark-blue",
    "codeship-w.yml": "_codeship_dark-blue",
    "codeship-x.yaml": "_codeship_dark-blue",
    "codeship-x.yml": "_codeship_dark-blue",
    "codeship--.yaml": "_codeship_dark-blue",
    "codeship-..yaml": "_codeship_dark-blue",
    "codeship-_.yaml": "_codeship_dark-blue",
    "codeship--.yml": "_codeship_dark-blue",
    "codeship-..yml": "_codeship_dark-blue",
    "codeship-_.yml": "_codeship_dark-blue",
    "codeship-y.yaml": "_codeship_dark-blue",
    "codeship-y.yml": "_codeship_dark-blue",
    "codeship-z.yaml": "_codeship_dark-blue",
    "codeship-z.yml": "_codeship_dark-blue",
    "coffeelint.json": "_config-coffee_medium-maroon",
    commit_editmsg: "_git-commit_medium-red",
    "commitlint.config.js": "_commitlint_medium-blue",
    ".commitlintrc.js": "_commitlint_medium-blue",
    ".commitlintrc.json": "_commitlint_medium-blue",
    ".commitlintrc.yaml": "_commitlint_medium-blue",
    ".commitlintrc.yml": "_commitlint_medium-blue",
    "compass.scss": "_compass_medium-red",
    "_compass.scss": "_compass_medium-red",
    compile: "_terminal_medium-red",
    "composer.json": "_composer_medium-yellow",
    "composer.lock": "_composer_medium-yellow",
    "composer.phar": "_composer_dark-blue",
    "compositionexclusions.txt": "_unicode_medium-red",
    "conan.conf": "_conan_medium-blue",
    "conanfile.py": "_conan_medium-blue",
    "conanfile.txt": "_conan_medium-blue",
    condarc: "_conda_medium-green",
    ".condarc": "_conda_medium-green",
    config: "_terminal_dark-purple",
    "config.codekit": "_codekit",
    "config.guess": "_terminal_medium-red",
    "config.rpath": "_terminal_medium-red",
    "config.status": "_terminal_medium-red",
    "config.sub": "_terminal_medium-red",
    configure: "_terminal_medium-red",
    "configure.ac": "_code_medium-red",
    "_config.yml": "_jekyll_medium-red",
    "+contents": "_openbsd_medium-orange",
    "contrib.mak": "_checklist_dark-red",
    "contrib.make": "_checklist_dark-red",
    contribute: "_book_dark-blue",
    contributing: "_book_dark-blue",
    contributors: "_book_dark-blue",
    control: "_debian_dark-cyan",
    copying: "_book_dark-blue",
    "copying.regex": "_book_dark-blue",
    copyright: "_book_dark-blue",
    "copyright.regex": "_book_dark-blue",
    "cordova-0.cjs": "_cordova_light-blue",
    "cordova-0.js": "_cordova_light-blue",
    "cordova-0.mjs": "_cordova_light-blue",
    "cordova-1.cjs": "_cordova_light-blue",
    "cordova-1.js": "_cordova_light-blue",
    "cordova-1.mjs": "_cordova_light-blue",
    "cordova-2.cjs": "_cordova_light-blue",
    "cordova-2.js": "_cordova_light-blue",
    "cordova-2.mjs": "_cordova_light-blue",
    "cordova-3.cjs": "_cordova_light-blue",
    "cordova-3.js": "_cordova_light-blue",
    "cordova-3.mjs": "_cordova_light-blue",
    "cordova-4.cjs": "_cordova_light-blue",
    "cordova-4.js": "_cordova_light-blue",
    "cordova-4.mjs": "_cordova_light-blue",
    "cordova-5.cjs": "_cordova_light-blue",
    "cordova-5.js": "_cordova_light-blue",
    "cordova-5.mjs": "_cordova_light-blue",
    "cordova-6.cjs": "_cordova_light-blue",
    "cordova-6.js": "_cordova_light-blue",
    "cordova-6.mjs": "_cordova_light-blue",
    "cordova-7.cjs": "_cordova_light-blue",
    "cordova-7.js": "_cordova_light-blue",
    "cordova-7.mjs": "_cordova_light-blue",
    "cordova-8.cjs": "_cordova_light-blue",
    "cordova-8.js": "_cordova_light-blue",
    "cordova-8.mjs": "_cordova_light-blue",
    "cordova-9.cjs": "_cordova_light-blue",
    "cordova-9.js": "_cordova_light-blue",
    "cordova-9.mjs": "_cordova_light-blue",
    "cordova.cjs": "_cordova_light-blue",
    "cordova.js": "_cordova_light-blue",
    "cordova.mjs": "_cordova_light-blue",
    ".coveragerc": "_config-python_dark-blue",
    ".coveralls.yaml": "_coveralls_medium-red",
    ".coveralls.yml": "_coveralls_medium-red",
    cpanfile: "_cpan_dark-blue",
    crc32sum: "_tag_medium-green",
    crc32sums: "_tag_medium-green",
    crcsum: "_tag_medium-green",
    crcsums: "_tag_medium-green",
    "crowdin.yaml": "_crowdin_medium-green",
    "crowdin.yml": "_crowdin_medium-green",
    cshrc: "_terminal_medium-orange",
    ".cshrc": "_terminal_medium-orange",
    ".csscomb.json": "_gear_medium-yellow",
    "cstr.54": "_manpage_dark-green",
    curlrc: "_curl_dark-blue",
    _curlrc: "_curl_dark-blue",
    "custom.bootstrap.cjs": "_bootstrap_medium-green",
    "custom.bootstrap.css": "_bootstrap_medium-blue",
    "custom.bootstrap.js": "_bootstrap_medium-yellow",
    "custom.bootstrap.less": "_bootstrap_dark-blue",
    "custom.bootstrap.mjs": "_bootstrap_medium-blue",
    "custom.bootstrap.scss": "_bootstrap_light-pink",
    "custom.bootstrap.styl": "_bootstrap_medium-green",
    "cz.json": "_commitizen_dark-purple",
    ".cz.json": "_commitizen_dark-purple",
    "cz.toml": "_commitizen_dark-purple",
    ".cz.toml": "_commitizen_dark-purple",
    "cz.yaml": "_commitizen_dark-purple",
    ".cz.yaml": "_commitizen_dark-purple",
    "cz.yml": "_commitizen_dark-purple",
    ".cz.yml": "_commitizen_dark-purple",
    "d3.cjs": "_d3_medium-orange",
    "d3.js": "_d3_medium-orange",
    "d3.mjs": "_d3_medium-orange",
    "d3.v0.cjs": "_d3_medium-orange",
    "d3.v0.js": "_d3_medium-orange",
    "d3.v0.mjs": "_d3_medium-orange",
    "d3.v1.cjs": "_d3_medium-orange",
    "d3.v1.js": "_d3_medium-orange",
    "d3.v1.mjs": "_d3_medium-orange",
    "d3.v2.cjs": "_d3_medium-orange",
    "d3.v2.js": "_d3_medium-orange",
    "d3.v2.mjs": "_d3_medium-orange",
    "d3.v3.cjs": "_d3_medium-orange",
    "d3.v3.js": "_d3_medium-orange",
    "d3.v3.mjs": "_d3_medium-orange",
    "d3.v4.cjs": "_d3_medium-orange",
    "d3.v4.js": "_d3_medium-orange",
    "d3.v4.mjs": "_d3_medium-orange",
    "d3.v5.cjs": "_d3_medium-orange",
    "d3.v5.js": "_d3_medium-orange",
    "d3.v5.mjs": "_d3_medium-orange",
    "d3.v6.cjs": "_d3_medium-orange",
    "d3.v6.js": "_d3_medium-orange",
    "d3.v6.mjs": "_d3_medium-orange",
    "d3.v7.cjs": "_d3_medium-orange",
    "d3.v7.js": "_d3_medium-orange",
    "d3.v7.mjs": "_d3_medium-orange",
    "d3.v8.cjs": "_d3_medium-orange",
    "d3.v8.js": "_d3_medium-orange",
    "d3.v8.mjs": "_d3_medium-orange",
    "d3.v9.cjs": "_d3_medium-orange",
    "d3.v9.js": "_d3_medium-orange",
    "d3.v9.mjs": "_d3_medium-orange",
    d8: "_v8_medium-blue",
    dangerfile: "_ruby_medium-red",
    "dangerfile.lock": "_ruby_medium-red",
    dcrc: "_calc_medium-blue",
    ".dcrc": "_calc_medium-blue",
    "delete.me": "_book_medium-blue",
    "delete.me.md": "_book_medium-blue",
    "delete.me.txt": "_book_medium-blue",
    deliverfile: "_ruby_medium-red",
    "deliverfile.lock": "_ruby_medium-red",
    "deno.json": "_deno_medium-grey",
    "deno.jsonc": "_deno_medium-grey",
    depcomp: "_terminal_medium-red",
    "dependabot.yaml": "_dependabot_medium-blue",
    "dependabot.yml": "_dependabot_medium-blue",
    "deploy.prototxt": "_caffe2_medium-purple",
    deps: "_checklist_dark-blue",
    "derivedage.txt": "_unicode_medium-red",
    "derivedbidiclass.txt": "_unicode_medium-red",
    "derivedbinaryproperties.txt": "_unicode_medium-red",
    "derivedcombiningclass.txt": "_unicode_medium-red",
    "derivedcoreproperties.txt": "_unicode_medium-red",
    "deriveddecompositiontype.txt": "_unicode_medium-red",
    "derivedeastasianwidth.txt": "_unicode_medium-red",
    "derivedgeneralcategory.txt": "_unicode_medium-red",
    "derivedjoininggroup.txt": "_unicode_medium-red",
    "derivedjoiningtype.txt": "_unicode_medium-red",
    "derivedlinebreak.txt": "_unicode_medium-red",
    "derivedname.txt": "_unicode_medium-red",
    "derivednormalizationprops.txt": "_unicode_medium-red",
    "derivednumerictype.txt": "_unicode_medium-red",
    "derivednumericvalues.txt": "_unicode_medium-red",
    "+desc": "_openbsd_medium-orange",
    "devcontainer.json": "_devcontainer_medium-blue",
    "dev-requirements.in": "_pypi_dark-blue",
    "dev_requirements.in": "_pypi_dark-blue",
    "dev-requirements.txt": "_pypi_dark-blue",
    "dev_requirements.txt": "_pypi_dark-blue",
    dircolors: "_terminal_medium-green",
    dir_colors: "_terminal_medium-green",
    _dircolors: "_terminal_medium-green",
    _dir_colors: "_terminal_medium-green",
    ".dircolors": "_terminal_medium-green",
    ".dir_colors": "_terminal_medium-green",
    "._dircolors": "_terminal_medium-green",
    "._dir_colors": "_terminal_medium-green",
    "+display": "_openbsd_medium-orange",
    "docker-sync.yml": "_docker_dark-orange",
    "doc-requirements.in": "_pypi_dark-blue",
    "doc_requirements.in": "_pypi_dark-blue",
    "doc-requirements.txt": "_pypi_dark-blue",
    "doc_requirements.txt": "_pypi_dark-blue",
    "docs-requirements.in": "_pypi_dark-blue",
    "docs_requirements.in": "_pypi_dark-blue",
    "docs-requirements.txt": "_pypi_dark-blue",
    "docs_requirements.txt": "_pypi_dark-blue",
    "docz.cjs": "_docz_medium-yellow",
    "docz.config.cjs": "_docz_medium-yellow",
    "docz.config.js": "_docz_medium-yellow",
    "docz.config.json": "_docz_medium-orange",
    "docz.config.mjs": "_docz_medium-yellow",
    "docz.js": "_docz_medium-yellow",
    "docz.json": "_docz_medium-orange",
    "docz.mjs": "_docz_medium-yellow",
    "doczrc.cjs": "_docz_medium-yellow",
    "doczrc.config.cjs": "_docz_medium-yellow",
    "doczrc.config.js": "_docz_medium-yellow",
    "doczrc.config.json": "_docz_medium-orange",
    "doczrc.config.mjs": "_docz_medium-yellow",
    "doczrc.js": "_docz_medium-yellow",
    "doczrc.json": "_docz_medium-orange",
    "doczrc.mjs": "_docz_medium-yellow",
    "dojo.cjs": "_dojo_light-red",
    "dojo.js": "_dojo_light-red",
    "dojo.mjs": "_dojo_light-red",
    "dosbox.conf": "_dosbox_medium-orange",
    "dosbox_.conf": "_dosbox_medium-orange",
    dosboxpref: "_dosbox_medium-orange",
    dosbox_pref: "_dosbox_medium-orange",
    doxyfile: "_doxygen_medium-blue",
    ".doxyfile": "_doxygen_medium-blue",
    "dragula.cjs": "_dragula_dark-purple",
    "dragula.css": "_dragula_dark-purple",
    "dragula.js": "_dragula_dark-purple",
    "dragula.min.cjs": "_dragula_dark-purple",
    "dragula.min.css": "_dragula_dark-purple",
    "dragula.min.js": "_dragula_dark-purple",
    "dragula.min.mjs": "_dragula_dark-purple",
    "dragula.mjs": "_dragula_dark-purple",
    ".drawio": "_drawio_medium-orange",
    dsc: "_debian_dark-cyan",
    "dub.json": "_dub_medium-red",
    "dub.sdl": "_dub_medium-red",
    "dub.selections.json": "_dub_medium-red",
    "dub.selections.sdl": "_dub_medium-red",
    "eastasianwidth.txt": "_unicode_medium-red",
    eign: "_database_dark-red",
    el: "_emacs_medium-purple",
    elc: "_emacs_dark-purple",
    eld: "_emacs_dark-purple",
    emacs: "_emacs_medium-purple",
    _emacs: "_emacs_medium-purple",
    "emacs.desktop": "_emacs_medium-purple",
    emakefile: "_erlang_dark-green",
    "emojisources.txt": "_unicode_medium-red",
    "encodings.dir": "_database_medium-orange",
    ".env": "_dotenv_medium-yellow",
    eqnrc: "_manpage_dark-green",
    "eqnrc-end": "_manpage_dark-green",
    "equivalentunifiedideograph.txt": "_unicode_medium-red",
    "esdoc.cjs": "_esdoc_medium-red",
    ".esdoc.cjs": "_esdoc_medium-red",
    "esdoc.js": "_esdoc_medium-red",
    ".esdoc.js": "_esdoc_medium-red",
    "esdoc.json": "_esdoc_medium-red",
    ".esdoc.json": "_esdoc_medium-red",
    "esdoc.mjs": "_esdoc_medium-red",
    ".esdoc.mjs": "_esdoc_medium-red",
    "eshost-config.json": "_config-js_medium-yellow",
    ".eshost-config.json": "_config-js_medium-yellow",
    "eshost.json": "_config-js_medium-yellow",
    ".eshost.json": "_config-js_medium-yellow",
    ".eslintrc.cjs": "_eslint_light-purple",
    ".eslintrc.js": "_eslint_light-purple",
    ".eslintrc.json": "_eslint_light-purple",
    ".eslintrc.mjs": "_eslint_light-purple",
    ".eslintrc.yaml": "_eslint_light-purple",
    ".eslintrc.yml": "_eslint_light-purple",
    "eth.p": "_manpage_dark-green",
    exrc: "_vim_medium-green",
    "fabfile.py": "_fabfile_medium-blue",
    "fabric.mod.json": "_fabric_medium-orange",
    fakefile: "_fancy_medium-green",
    faq: "_book_dark-blue",
    fastfile: "_ruby_medium-red",
    "fastfile.lock": "_ruby_medium-red",
    "fc-list": "_database_medium-orange",
    fdl: "_text_medium-red",
    figmagic: "_database_medium-purple",
    "firebase.json": "_firebase_medium-yellow",
    "firestore.indexes.json": "_firebase_medium-yellow",
    "firestore.rule": "_firebase_medium-orange",
    "firestore.rules": "_firebase_medium-orange",
    ".fishrc": "_terminal_medium-green",
    fixes: "_book_dark-blue",
    "flask-.py": "_flask_dark-blue",
    "flask..py": "_flask_dark-blue",
    "flask_.py": "_flask_dark-blue",
    flowers: "_database_medium-green",
    fontinfo: "_postscript_medium-blue",
    fontmap: "_postscript_dark-red",
    "fontmap.gs": "_postscript_dark-red",
    "fonts.alias": "_database_medium-red",
    "fonts.dir": "_database_medium-red",
    "fonts.scale": "_database_medium-red",
    "forge.config.js": "_electron_dark-cyan",
    "for-release": "_text_medium-red",
    "fp-info-cache": "_kicad_medium-maroon",
    "fp-lib-table": "_kicad_medium-maroon",
    fstab: "_database_medium-maroon",
    "fuelux.cjs": "_fuelux_medium-orange",
    "fuelux.css": "_fuelux_medium-orange",
    "fuelux.js": "_fuelux_medium-orange",
    "fuelux.min.cjs": "_fuelux_medium-orange",
    "fuelux.min.css": "_fuelux_medium-orange",
    "fuelux.min.js": "_fuelux_medium-orange",
    "fuelux.min.mjs": "_fuelux_medium-orange",
    "fuelux.mjs": "_fuelux_medium-orange",
    "fuse.cjs": "_fusebox_medium-blue",
    "fuse.js": "_fusebox_medium-blue",
    "fuse.mjs": "_fusebox_medium-blue",
    "galaxy.ini": "_galaxy_medium-grey",
    "gatsby-0.js": "_gatsby_dark-purple",
    "gatsby-0.ts": "_gatsby_dark-purple",
    "gatsby-1.js": "_gatsby_dark-purple",
    "gatsby-1.ts": "_gatsby_dark-purple",
    "gatsby-2.js": "_gatsby_dark-purple",
    "gatsby-2.ts": "_gatsby_dark-purple",
    "gatsby-3.js": "_gatsby_dark-purple",
    "gatsby-3.ts": "_gatsby_dark-purple",
    "gatsby-4.js": "_gatsby_dark-purple",
    "gatsby-4.ts": "_gatsby_dark-purple",
    "gatsby-5.js": "_gatsby_dark-purple",
    "gatsby-5.ts": "_gatsby_dark-purple",
    "gatsby-6.js": "_gatsby_dark-purple",
    "gatsby-6.ts": "_gatsby_dark-purple",
    "gatsby-7.js": "_gatsby_dark-purple",
    "gatsby-7.ts": "_gatsby_dark-purple",
    "gatsby-8.js": "_gatsby_dark-purple",
    "gatsby-8.ts": "_gatsby_dark-purple",
    "gatsby-9.js": "_gatsby_dark-purple",
    "gatsby-9.ts": "_gatsby_dark-purple",
    "gatsby-a.js": "_gatsby_dark-purple",
    "gatsby-a.ts": "_gatsby_dark-purple",
    "gatsby-b.js": "_gatsby_dark-purple",
    "gatsby-b.ts": "_gatsby_dark-purple",
    "gatsby-c.js": "_gatsby_dark-purple",
    "gatsby-c.ts": "_gatsby_dark-purple",
    "gatsby-d.js": "_gatsby_dark-purple",
    "gatsby-d.ts": "_gatsby_dark-purple",
    "gatsby-e.js": "_gatsby_dark-purple",
    "gatsby-e.ts": "_gatsby_dark-purple",
    "gatsby-f.js": "_gatsby_dark-purple",
    "gatsby-f.ts": "_gatsby_dark-purple",
    "gatsby-g.js": "_gatsby_dark-purple",
    "gatsby-g.ts": "_gatsby_dark-purple",
    "gatsby-h.js": "_gatsby_dark-purple",
    "gatsby-h.ts": "_gatsby_dark-purple",
    "gatsby-i.js": "_gatsby_dark-purple",
    "gatsby-i.ts": "_gatsby_dark-purple",
    "gatsby-j.js": "_gatsby_dark-purple",
    "gatsby- .js": "_gatsby_dark-purple",
    "gatsby-!.js": "_gatsby_dark-purple",
    'gatsby-".js': "_gatsby_dark-purple",
    "gatsby-#.js": "_gatsby_dark-purple",
    "gatsby-$.js": "_gatsby_dark-purple",
    "gatsby-%.js": "_gatsby_dark-purple",
    "gatsby-&.js": "_gatsby_dark-purple",
    "gatsby-'.js": "_gatsby_dark-purple",
    "gatsby-(.js": "_gatsby_dark-purple",
    "gatsby-).js": "_gatsby_dark-purple",
    "gatsby-*.js": "_gatsby_dark-purple",
    "gatsby-+.js": "_gatsby_dark-purple",
    "gatsby-,.js": "_gatsby_dark-purple",
    "gatsby--.js": "_gatsby_dark-purple",
    "gatsby-..js": "_gatsby_dark-purple",
    "gatsby-/.js": "_gatsby_dark-purple",
    "gatsby-:.js": "_gatsby_dark-purple",
    "gatsby-;.js": "_gatsby_dark-purple",
    "gatsby-<.js": "_gatsby_dark-purple",
    "gatsby-=.js": "_gatsby_dark-purple",
    "gatsby->.js": "_gatsby_dark-purple",
    "gatsby-?.js": "_gatsby_dark-purple",
    "gatsby-@.js": "_gatsby_dark-purple",
    "gatsby-[.js": "_gatsby_dark-purple",
    "gatsby-\\.js": "_gatsby_dark-purple",
    "gatsby-].js": "_gatsby_dark-purple",
    "gatsby-^.js": "_gatsby_dark-purple",
    "gatsby-_.js": "_gatsby_dark-purple",
    "gatsby-`.js": "_gatsby_dark-purple",
    "gatsby-{.js": "_gatsby_dark-purple",
    "gatsby-|.js": "_gatsby_dark-purple",
    "gatsby-}.js": "_gatsby_dark-purple",
    "gatsby-~.js": "_gatsby_dark-purple",
    "gatsby-j.ts": "_gatsby_dark-purple",
    "gatsby-k.js": "_gatsby_dark-purple",
    "gatsby-k.ts": "_gatsby_dark-purple",
    "gatsby-l.js": "_gatsby_dark-purple",
    "gatsby-l.ts": "_gatsby_dark-purple",
    "gatsby-m.js": "_gatsby_dark-purple",
    "gatsby-m.ts": "_gatsby_dark-purple",
    "gatsby-n.js": "_gatsby_dark-purple",
    "gatsby-n.ts": "_gatsby_dark-purple",
    "gatsby-o.js": "_gatsby_dark-purple",
    "gatsby-o.ts": "_gatsby_dark-purple",
    "gatsby-p.js": "_gatsby_dark-purple",
    "gatsby-p.ts": "_gatsby_dark-purple",
    "gatsby-q.js": "_gatsby_dark-purple",
    "gatsby-q.ts": "_gatsby_dark-purple",
    "gatsby-r.js": "_gatsby_dark-purple",
    "gatsby-r.ts": "_gatsby_dark-purple",
    "gatsby-s.js": "_gatsby_dark-purple",
    "gatsby-s.ts": "_gatsby_dark-purple",
    "gatsby-t.js": "_gatsby_dark-purple",
    "gatsby- .ts": "_gatsby_dark-purple",
    "gatsby-!.ts": "_gatsby_dark-purple",
    'gatsby-".ts': "_gatsby_dark-purple",
    "gatsby-#.ts": "_gatsby_dark-purple",
    "gatsby-$.ts": "_gatsby_dark-purple",
    "gatsby-%.ts": "_gatsby_dark-purple",
    "gatsby-&.ts": "_gatsby_dark-purple",
    "gatsby-'.ts": "_gatsby_dark-purple",
    "gatsby-(.ts": "_gatsby_dark-purple",
    "gatsby-).ts": "_gatsby_dark-purple",
    "gatsby-*.ts": "_gatsby_dark-purple",
    "gatsby-+.ts": "_gatsby_dark-purple",
    "gatsby-,.ts": "_gatsby_dark-purple",
    "gatsby--.ts": "_gatsby_dark-purple",
    "gatsby-..ts": "_gatsby_dark-purple",
    "gatsby-/.ts": "_gatsby_dark-purple",
    "gatsby-:.ts": "_gatsby_dark-purple",
    "gatsby-;.ts": "_gatsby_dark-purple",
    "gatsby-<.ts": "_gatsby_dark-purple",
    "gatsby-=.ts": "_gatsby_dark-purple",
    "gatsby->.ts": "_gatsby_dark-purple",
    "gatsby-?.ts": "_gatsby_dark-purple",
    "gatsby-@.ts": "_gatsby_dark-purple",
    "gatsby-[.ts": "_gatsby_dark-purple",
    "gatsby-\\.ts": "_gatsby_dark-purple",
    "gatsby-].ts": "_gatsby_dark-purple",
    "gatsby-^.ts": "_gatsby_dark-purple",
    "gatsby-_.ts": "_gatsby_dark-purple",
    "gatsby-`.ts": "_gatsby_dark-purple",
    "gatsby-{.ts": "_gatsby_dark-purple",
    "gatsby-|.ts": "_gatsby_dark-purple",
    "gatsby-}.ts": "_gatsby_dark-purple",
    "gatsby-~.ts": "_gatsby_dark-purple",
    "gatsby-t.ts": "_gatsby_dark-purple",
    "gatsby-u.js": "_gatsby_dark-purple",
    "gatsby-u.ts": "_gatsby_dark-purple",
    "gatsby-v.js": "_gatsby_dark-purple",
    "gatsby-v.ts": "_gatsby_dark-purple",
    "gatsby-w.js": "_gatsby_dark-purple",
    "gatsby-w.ts": "_gatsby_dark-purple",
    "gatsby-x.js": "_gatsby_dark-purple",
    "gatsby-x.ts": "_gatsby_dark-purple",
    "gatsby-y.js": "_gatsby_dark-purple",
    "gatsby-y.ts": "_gatsby_dark-purple",
    "gatsby-z.js": "_gatsby_dark-purple",
    "gatsby-z.ts": "_gatsby_dark-purple",
    ".gazelcfg.json": "_bazel_medium-cyan",
    gemfile: "_bundler_medium-blue",
    "gemfile.lock": "_bundler_medium-blue",
    gemrc: "_ruby_medium-red",
    ".gemrc": "_ruby_medium-red",
    ".gitattributes": "_git_medium-red",
    ".git-blame-ignore-revs": "_git_medium-red",
    "git-credential-osxkeychain": "_key_medium-green",
    gitignore: "_git_medium-red",
    "gitignore-global": "_git_medium-red",
    gitignore_global: "_git_medium-red",
    ".gitkeep": "_git_medium-red",
    ".gitlab-ci.yml": "_gitlab_medium-orange",
    ".gitmodules": "_git_medium-red",
    "gitpod.yaml": "_gitpod_medium-blue",
    ".gitpod.yaml": "_gitpod_medium-blue",
    "gitpod.yml": "_gitpod_medium-blue",
    ".gitpod.yml": "_gitpod_medium-blue",
    "glide.yaml": "_glide_light-orange",
    "glide.yml": "_glide_light-orange",
    ".global.gitattributes": "_git_medium-red",
    ".global.gitignore": "_git_medium-red",
    gnumakefile: "_checklist_medium-green",
    "go.mod": "_config-go_dark-blue",
    ".goreleaser.yaml": "_goreleaser_medium-blue",
    ".goreleaser.yml": "_goreleaser_medium-blue",
    "go.sum": "_config-go_medium-green",
    "grap.defines": "_manpage_dark-green",
    "graphemebreakproperty.txt": "_unicode_medium-red",
    "graphemebreaktest.txt": "_unicode_medium-red",
    "graphql.config.js": "_graphql_medium-pink",
    ".graphqlrc": "_graphql_medium-pink",
    ".graphqlrc.js": "_graphql_medium-pink",
    ".graphqlrc.json": "_graphql_medium-pink",
    ".graphqlrc.yaml": "_graphql_medium-pink",
    ".graphqlrc.yml": "_graphql_medium-pink",
    "grap.tex.defines": "_manpage_dark-green",
    "greenkeeper.json": "_greenkeeper_medium-green",
    "gruntfile.babel.cjs": "_grunt_medium-yellow",
    "gruntfile.babel.coffee": "_grunt_medium-maroon",
    "gruntfile.babel.js": "_grunt_medium-yellow",
    "gruntfile.babel.jsx": "_grunt_medium-yellow",
    "gruntfile.babel.litcoffee": "_grunt_medium-maroon",
    "gruntfile.babel.mjs": "_grunt_medium-yellow",
    "gruntfile.cjs": "_grunt_medium-yellow",
    "gruntfile.coffee": "_grunt_medium-maroon",
    "gruntfile.js": "_grunt_medium-yellow",
    "gruntfile.jsx": "_grunt_medium-yellow",
    "gruntfile.litcoffee": "_grunt_medium-maroon",
    "gruntfile.mjs": "_grunt_medium-yellow",
    "gruntfile.ts": "_grunt_medium-blue",
    "gruntfile.tsx": "_grunt_medium-blue",
    guardfile: "_ruby_medium-red",
    "guardfile.lock": "_ruby_medium-red",
    "gulpfile.babel.cjs": "_gulp_medium-red",
    "gulpfile.babel.coffee": "_gulp_medium-maroon",
    "gulpfile.babel.js": "_gulp_medium-red",
    "gulpfile.babel.jsx": "_gulp_medium-red",
    "gulpfile.babel.litcoffee": "_gulp_medium-maroon",
    "gulpfile.babel.mjs": "_gulp_medium-red",
    "gulpfile.cjs": "_gulp_medium-red",
    "gulpfile.coffee": "_gulp_medium-maroon",
    "gulpfile.esm.cjs": "_gulp_medium-red",
    "gulpfile.esm.coffee": "_gulp_medium-maroon",
    "gulpfile.esm.js": "_gulp_medium-red",
    "gulpfile.esm.jsx": "_gulp_medium-red",
    "gulpfile.esm.litcoffee": "_gulp_medium-maroon",
    "gulpfile.esm.mjs": "_gulp_medium-red",
    "gulpfile.js": "_gulp_medium-red",
    "gulpfile.jsx": "_gulp_medium-red",
    "gulpfile.litcoffee": "_gulp_medium-maroon",
    "gulpfile.mjs": "_gulp_medium-red",
    "gulpfile.ts": "_gulp_medium-blue",
    "gulpfile.tsx": "_gulp_medium-blue",
    gviminfo: "_vim_dark-green",
    gvimrc: "_vim_dark-green",
    hacking: "_book_dark-blue",
    "hangulsyllabletype.txt": "_unicode_medium-red",
    "haskellconfig.json": "_config-hs_medium-purple",
    "hie.yaml": "_hie_dark-purple",
    "hie.yml": "_hie_dark-purple",
    ".hintrc": "_webhint_dark-purple",
    history: "_book_dark-blue",
    ".htaccess": "_gear_medium-red",
    ".htpasswd": "_gear_medium-orange",
    "httpd.conf": "_apache_medium-red",
    ".hyper.cjs": "_hyper_dark-purple",
    ".hyper.js": "_hyper_dark-purple",
    ".hyper.mjs": "_hyper_dark-purple",
    "hyphen.cs": "_tex_medium-red",
    "hyphen.den": "_tex_medium-red",
    "hyphen.det": "_tex_medium-red",
    "hyphenex.cs": "_tex_medium-red",
    "hyphenex.den": "_tex_medium-red",
    "hyphenex.det": "_tex_medium-red",
    "hyphenex.fr": "_tex_medium-red",
    "hyphenex.sv": "_tex_medium-red",
    "hyphenex.us": "_tex_medium-red",
    "hyphen.fr": "_tex_medium-red",
    "hyphen.sv": "_tex_medium-red",
    "hyphen.us": "_tex_medium-red",
    "icomoon.json": "_icomoon_medium-purple",
    "icon\r": "_finder_medium-blue",
    ".icondb.js": "_database_dark-red",
    ".imgbotconfig": "_imgbot_dark-cyan",
    indep_tr: "_manpage_dark-green",
    "index.bt": "_database_medium-red",
    "index.db": "_database_medium-red",
    "index.dir": "_database_medium-red",
    "index.pag": "_database_medium-red",
    "index.txt": "_unicode_medium-red",
    "indicpositionalcategory.txt": "_unicode_medium-red",
    "indicsyllabiccategory.txt": "_unicode_medium-red",
    "init_net.pb": "_caffe2_dark-blue",
    ".install": "_archlinux_dark-purple",
    install: "_book_dark-blue",
    "installscript.qs": "_qt_medium-yellow",
    "install-sh": "_terminal_dark-purple",
    "ionic.config.json": "_ionic_medium-blue",
    "ionic.project": "_ionic_medium-blue",
    irbrc: "_ruby_medium-red",
    ".irbrc": "_ruby_medium-red",
    ".issuetracker": "_fork_medium-blue",
    jakefile: "_jake_medium-maroon",
    "jamo.txt": "_unicode_medium-red",
    jarfile: "_ruby_medium-red",
    "jarfile.lock": "_ruby_medium-red",
    "jasmine.0.cjs": "_jasmine_medium-purple",
    "jasmine.0.coffee": "_jasmine_medium-purple",
    "jasmine.0.js": "_jasmine_medium-purple",
    "jasmine.0.mjs": "_jasmine_medium-purple",
    "jasmine.0.ts": "_jasmine_medium-purple",
    "jasmine.1.cjs": "_jasmine_medium-purple",
    "jasmine.1.coffee": "_jasmine_medium-purple",
    "jasmine.1.js": "_jasmine_medium-purple",
    "jasmine.1.mjs": "_jasmine_medium-purple",
    "jasmine.1.ts": "_jasmine_medium-purple",
    "jasmine.2.cjs": "_jasmine_medium-purple",
    "jasmine.2.coffee": "_jasmine_medium-purple",
    "jasmine.2.js": "_jasmine_medium-purple",
    "jasmine.2.mjs": "_jasmine_medium-purple",
    "jasmine.2.ts": "_jasmine_medium-purple",
    "jasmine.3.cjs": "_jasmine_medium-purple",
    "jasmine.3.coffee": "_jasmine_medium-purple",
    "jasmine.3.js": "_jasmine_medium-purple",
    "jasmine.3.mjs": "_jasmine_medium-purple",
    "jasmine.3.ts": "_jasmine_medium-purple",
    "jasmine.4.cjs": "_jasmine_medium-purple",
    "jasmine.4.coffee": "_jasmine_medium-purple",
    "jasmine.4.js": "_jasmine_medium-purple",
    "jasmine.4.mjs": "_jasmine_medium-purple",
    "jasmine.4.ts": "_jasmine_medium-purple",
    "jasmine.5.cjs": "_jasmine_medium-purple",
    "jasmine.5.coffee": "_jasmine_medium-purple",
    "jasmine.5.js": "_jasmine_medium-purple",
    "jasmine.5.mjs": "_jasmine_medium-purple",
    "jasmine.5.ts": "_jasmine_medium-purple",
    "jasmine.6.cjs": "_jasmine_medium-purple",
    "jasmine.6.coffee": "_jasmine_medium-purple",
    "jasmine.6.js": "_jasmine_medium-purple",
    "jasmine.6.mjs": "_jasmine_medium-purple",
    "jasmine.6.ts": "_jasmine_medium-purple",
    "jasmine.7.cjs": "_jasmine_medium-purple",
    "jasmine.7.coffee": "_jasmine_medium-purple",
    "jasmine.7.js": "_jasmine_medium-purple",
    "jasmine.7.mjs": "_jasmine_medium-purple",
    "jasmine.7.ts": "_jasmine_medium-purple",
    "jasmine.8.cjs": "_jasmine_medium-purple",
    "jasmine.8.coffee": "_jasmine_medium-purple",
    "jasmine.8.js": "_jasmine_medium-purple",
    "jasmine.8.mjs": "_jasmine_medium-purple",
    "jasmine.8.ts": "_jasmine_medium-purple",
    "jasmine.9.cjs": "_jasmine_medium-purple",
    "jasmine.9.coffee": "_jasmine_medium-purple",
    "jasmine.9.js": "_jasmine_medium-purple",
    "jasmine.9.mjs": "_jasmine_medium-purple",
    "jasmine.9.ts": "_jasmine_medium-purple",
    "jasmine.a.cjs": "_jasmine_medium-purple",
    "jasmine.a.coffee": "_jasmine_medium-purple",
    "jasmine.a.js": "_jasmine_medium-purple",
    "jasmine.a.mjs": "_jasmine_medium-purple",
    "jasmine.a.ts": "_jasmine_medium-purple",
    "jasmine.b.cjs": "_jasmine_medium-purple",
    "jasmine.b.coffee": "_jasmine_medium-purple",
    "jasmine.b.js": "_jasmine_medium-purple",
    "jasmine.b.mjs": "_jasmine_medium-purple",
    "jasmine.b.ts": "_jasmine_medium-purple",
    "jasmine.c.cjs": "_jasmine_medium-purple",
    "jasmine.c.coffee": "_jasmine_medium-purple",
    "jasmine.cjs": "_jasmine_medium-purple",
    "jasmine.-.cjs": "_jasmine_medium-purple",
    "jasmine.c.js": "_jasmine_medium-purple",
    "jasmine._.cjs": "_jasmine_medium-purple",
    "jasmine.c.mjs": "_jasmine_medium-purple",
    "jasmine.coffee": "_jasmine_medium-purple",
    "jasmine.-.coffee": "_jasmine_medium-purple",
    "jasmine._.coffee": "_jasmine_medium-purple",
    "jasmine.c.ts": "_jasmine_medium-purple",
    "jasmine.d.cjs": "_jasmine_medium-purple",
    "jasmine.d.coffee": "_jasmine_medium-purple",
    "jasmine.d.js": "_jasmine_medium-purple",
    "jasmine.d.mjs": "_jasmine_medium-purple",
    "jasmine.d.ts": "_jasmine_medium-purple",
    "jasmine.e.cjs": "_jasmine_medium-purple",
    "jasmine.e.coffee": "_jasmine_medium-purple",
    "jasmine.e.js": "_jasmine_medium-purple",
    "jasmine.e.mjs": "_jasmine_medium-purple",
    "jasmine.e.ts": "_jasmine_medium-purple",
    "jasmine.f.cjs": "_jasmine_medium-purple",
    "jasmine.f.coffee": "_jasmine_medium-purple",
    "jasmine.f.js": "_jasmine_medium-purple",
    "jasmine.f.mjs": "_jasmine_medium-purple",
    "jasmine.f.ts": "_jasmine_medium-purple",
    "jasmine.g.cjs": "_jasmine_medium-purple",
    "jasmine.g.coffee": "_jasmine_medium-purple",
    "jasmine.g.js": "_jasmine_medium-purple",
    "jasmine.g.mjs": "_jasmine_medium-purple",
    "jasmine.g.ts": "_jasmine_medium-purple",
    "jasmine.h.cjs": "_jasmine_medium-purple",
    "jasmine.h.coffee": "_jasmine_medium-purple",
    "jasmine.h.js": "_jasmine_medium-purple",
    "jasmine.h.mjs": "_jasmine_medium-purple",
    "jasmine.h.ts": "_jasmine_medium-purple",
    "jasmine.i.cjs": "_jasmine_medium-purple",
    "jasmine.i.coffee": "_jasmine_medium-purple",
    "jasmine.i.js": "_jasmine_medium-purple",
    "jasmine.i.mjs": "_jasmine_medium-purple",
    "jasmine.i.ts": "_jasmine_medium-purple",
    "jasmine.j.cjs": "_jasmine_medium-purple",
    "jasmine.j.coffee": "_jasmine_medium-purple",
    "jasmine.j.js": "_jasmine_medium-purple",
    "jasmine.j.mjs": "_jasmine_medium-purple",
    "jasmine.js": "_jasmine_medium-purple",
    "jasmine.-.js": "_jasmine_medium-purple",
    "jasmine._.js": "_jasmine_medium-purple",
    "jasmine.json": "_jasmine_medium-purple",
    ".jasmine.json": "_jasmine_medium-purple",
    "jasmine.j.ts": "_jasmine_medium-purple",
    "jasmine.k.cjs": "_jasmine_medium-purple",
    "jasmine.k.coffee": "_jasmine_medium-purple",
    "jasmine.k.js": "_jasmine_medium-purple",
    "jasmine.k.mjs": "_jasmine_medium-purple",
    "jasmine.k.ts": "_jasmine_medium-purple",
    "jasmine.l.cjs": "_jasmine_medium-purple",
    "jasmine.l.coffee": "_jasmine_medium-purple",
    "jasmine.l.js": "_jasmine_medium-purple",
    "jasmine.l.mjs": "_jasmine_medium-purple",
    "jasmine.l.ts": "_jasmine_medium-purple",
    "jasmine.m.cjs": "_jasmine_medium-purple",
    "jasmine.m.coffee": "_jasmine_medium-purple",
    "jasmine.mjs": "_jasmine_medium-purple",
    "jasmine.-.mjs": "_jasmine_medium-purple",
    "jasmine.m.js": "_jasmine_medium-purple",
    "jasmine._.mjs": "_jasmine_medium-purple",
    "jasmine.m.mjs": "_jasmine_medium-purple",
    "jasmine.m.ts": "_jasmine_medium-purple",
    "jasmine.n.cjs": "_jasmine_medium-purple",
    "jasmine.n.coffee": "_jasmine_medium-purple",
    "jasmine.n.js": "_jasmine_medium-purple",
    "jasmine.n.mjs": "_jasmine_medium-purple",
    "jasmine.n.ts": "_jasmine_medium-purple",
    "jasmine.o.cjs": "_jasmine_medium-purple",
    "jasmine.o.coffee": "_jasmine_medium-purple",
    "jasmine.o.js": "_jasmine_medium-purple",
    "jasmine.o.mjs": "_jasmine_medium-purple",
    "jasmine.o.ts": "_jasmine_medium-purple",
    "jasmine.p.cjs": "_jasmine_medium-purple",
    "jasmine.p.coffee": "_jasmine_medium-purple",
    "jasmine.p.js": "_jasmine_medium-purple",
    "jasmine.p.mjs": "_jasmine_medium-purple",
    "jasmine.p.ts": "_jasmine_medium-purple",
    "jasmine.q.cjs": "_jasmine_medium-purple",
    "jasmine.q.coffee": "_jasmine_medium-purple",
    "jasmine.q.js": "_jasmine_medium-purple",
    "jasmine.q.mjs": "_jasmine_medium-purple",
    "jasmine.q.ts": "_jasmine_medium-purple",
    "jasmine.r.cjs": "_jasmine_medium-purple",
    "jasmine.r.coffee": "_jasmine_medium-purple",
    "jasmine.r.js": "_jasmine_medium-purple",
    "jasmine.r.mjs": "_jasmine_medium-purple",
    "jasmine.r.ts": "_jasmine_medium-purple",
    "jasmine.s.cjs": "_jasmine_medium-purple",
    "jasmine.s.coffee": "_jasmine_medium-purple",
    "jasmine.s.js": "_jasmine_medium-purple",
    "jasmine.s.mjs": "_jasmine_medium-purple",
    "jasmine.s.ts": "_jasmine_medium-purple",
    "jasmine.t.cjs": "_jasmine_medium-purple",
    "jasmine.t.coffee": "_jasmine_medium-purple",
    "jasmine.t.js": "_jasmine_medium-purple",
    "jasmine.t.mjs": "_jasmine_medium-purple",
    "jasmine.ts": "_jasmine_medium-purple",
    "jasmine.-.ts": "_jasmine_medium-purple",
    "jasmine._.ts": "_jasmine_medium-purple",
    "jasmine.t.ts": "_jasmine_medium-purple",
    "jasmine.u.cjs": "_jasmine_medium-purple",
    "jasmine.u.coffee": "_jasmine_medium-purple",
    "jasmine.u.js": "_jasmine_medium-purple",
    "jasmine.u.mjs": "_jasmine_medium-purple",
    "jasmine.u.ts": "_jasmine_medium-purple",
    "jasmine.v.cjs": "_jasmine_medium-purple",
    "jasmine.v.coffee": "_jasmine_medium-purple",
    "jasmine.v.js": "_jasmine_medium-purple",
    "jasmine.v.mjs": "_jasmine_medium-purple",
    "jasmine.v.ts": "_jasmine_medium-purple",
    "jasmine.w.cjs": "_jasmine_medium-purple",
    "jasmine.w.coffee": "_jasmine_medium-purple",
    "jasmine.w.js": "_jasmine_medium-purple",
    "jasmine.w.mjs": "_jasmine_medium-purple",
    "jasmine.w.ts": "_jasmine_medium-purple",
    "jasmine.x.cjs": "_jasmine_medium-purple",
    "jasmine.x.coffee": "_jasmine_medium-purple",
    "jasmine.x.js": "_jasmine_medium-purple",
    "jasmine.x.mjs": "_jasmine_medium-purple",
    "jasmine.x.ts": "_jasmine_medium-purple",
    "jasmine.y.cjs": "_jasmine_medium-purple",
    "jasmine.y.coffee": "_jasmine_medium-purple",
    "jasmine.y.js": "_jasmine_medium-purple",
    "jasmine.y.mjs": "_jasmine_medium-purple",
    "jasmine.y.ts": "_jasmine_medium-purple",
    "jasmine.z.cjs": "_jasmine_medium-purple",
    "jasmine.z.coffee": "_jasmine_medium-purple",
    "jasmine.z.js": "_jasmine_medium-purple",
    "jasmine.z.mjs": "_jasmine_medium-purple",
    "jasmine.z.ts": "_jasmine_medium-purple",
    jenkinsfile: "_jenkins_medium-red",
    "jest.babel.cjs": "_jest_medium-red",
    "jest.babel.js": "_jest_medium-red",
    "jest.babel.json": "_jest_medium-red",
    "jest.babel.jsx": "_jest_medium-red",
    "jest.babel.mjs": "_jest_medium-red",
    "jest.babel.ts": "_jest_medium-red",
    "jest.babel.tsx": "_jest_medium-red",
    "jest.cjs": "_jest_medium-red",
    "jest.config.babel.cjs": "_jest_medium-red",
    "jest.config.babel.js": "_jest_medium-red",
    "jest.config.babel.json": "_jest_medium-red",
    "jest.config.babel.jsx": "_jest_medium-red",
    "jest.config.babel.mjs": "_jest_medium-red",
    "jest.config.babel.ts": "_jest_medium-red",
    "jest.config.babel.tsx": "_jest_medium-red",
    "jest.config.cjs": "_jest_medium-red",
    "jest.config.js": "_jest_medium-red",
    "jest.config.json": "_jest_medium-red",
    "jest.config.jsx": "_jest_medium-red",
    "jest.config.mjs": "_jest_medium-red",
    "jest.config.ts": "_jest_medium-red",
    "jest.config.tsx": "_jest_medium-red",
    "jest.js": "_jest_medium-red",
    "jest.json": "_jest_medium-red",
    "jest.jsx": "_jest_medium-red",
    "jest.mjs": "_jest_medium-red",
    ".jestrc": "_jest_medium-red",
    ".jestrc.cjs": "_jest_medium-red",
    ".jestrc.js": "_jest_medium-red",
    ".jestrc.json": "_jest_medium-red",
    ".jestrc.mjs": "_jest_medium-red",
    "jest.ts": "_jest_medium-red",
    "jest.tsx": "_jest_medium-red",
    "jquery.coffee": "_jquery_dark-blue",
    "jquery.es": "_jquery_dark-blue",
    "jquery.es6": "_jquery_dark-blue",
    "jquery.js": "_jquery_dark-blue",
    "jquery.jsx": "_jquery_dark-blue",
    "jquery.map": "_jquery_dark-blue",
    "jquery.ts": "_jquery_dark-blue",
    "jquery.tsx": "_jquery_dark-blue",
    "jsconfig.0.json": "_config-js_medium-yellow",
    "jsconfig.1.json": "_config-js_medium-yellow",
    "jsconfig.2.json": "_config-js_medium-yellow",
    "jsconfig.3.json": "_config-js_medium-yellow",
    "jsconfig.4.json": "_config-js_medium-yellow",
    "jsconfig.5.json": "_config-js_medium-yellow",
    "jsconfig.6.json": "_config-js_medium-yellow",
    "jsconfig.7.json": "_config-js_medium-yellow",
    "jsconfig.8.json": "_config-js_medium-yellow",
    "jsconfig.9.json": "_config-js_medium-yellow",
    "jsconfig.a.json": "_config-js_medium-yellow",
    "jsconfig.b.json": "_config-js_medium-yellow",
    "jsconfig.c.json": "_config-js_medium-yellow",
    "jsconfig.d.json": "_config-js_medium-yellow",
    "jsconfig.e.json": "_config-js_medium-yellow",
    "jsconfig.f.json": "_config-js_medium-yellow",
    "jsconfig.g.json": "_config-js_medium-yellow",
    "jsconfig.h.json": "_config-js_medium-yellow",
    "jsconfig.i.json": "_config-js_medium-yellow",
    "jsconfig.j.json": "_config-js_medium-yellow",
    "jsconfig.json": "_config-js_medium-yellow",
    "jsconfig. .json": "_config-js_medium-yellow",
    "jsconfig.!.json": "_config-js_medium-yellow",
    'jsconfig.".json': "_config-js_medium-yellow",
    "jsconfig.#.json": "_config-js_medium-yellow",
    "jsconfig.$.json": "_config-js_medium-yellow",
    "jsconfig.%.json": "_config-js_medium-yellow",
    "jsconfig.&.json": "_config-js_medium-yellow",
    "jsconfig.'.json": "_config-js_medium-yellow",
    "jsconfig.(.json": "_config-js_medium-yellow",
    "jsconfig.).json": "_config-js_medium-yellow",
    "jsconfig.*.json": "_config-js_medium-yellow",
    "jsconfig.+.json": "_config-js_medium-yellow",
    "jsconfig.,.json": "_config-js_medium-yellow",
    "jsconfig.-.json": "_config-js_medium-yellow",
    "jsconfig...json": "_config-js_medium-yellow",
    "jsconfig./.json": "_config-js_medium-yellow",
    "jsconfig.:.json": "_config-js_medium-yellow",
    "jsconfig.;.json": "_config-js_medium-yellow",
    "jsconfig.<.json": "_config-js_medium-yellow",
    "jsconfig.=.json": "_config-js_medium-yellow",
    "jsconfig.>.json": "_config-js_medium-yellow",
    "jsconfig.?.json": "_config-js_medium-yellow",
    "jsconfig.@.json": "_config-js_medium-yellow",
    "jsconfig.[.json": "_config-js_medium-yellow",
    "jsconfig.\\.json": "_config-js_medium-yellow",
    "jsconfig.].json": "_config-js_medium-yellow",
    "jsconfig.^.json": "_config-js_medium-yellow",
    "jsconfig._.json": "_config-js_medium-yellow",
    "jsconfig.`.json": "_config-js_medium-yellow",
    "jsconfig.{.json": "_config-js_medium-yellow",
    "jsconfig.|.json": "_config-js_medium-yellow",
    "jsconfig.}.json": "_config-js_medium-yellow",
    "jsconfig.~.json": "_config-js_medium-yellow",
    "jsconfig.k.json": "_config-js_medium-yellow",
    "jsconfig.l.json": "_config-js_medium-yellow",
    "jsconfig.m.json": "_config-js_medium-yellow",
    "jsconfig.n.json": "_config-js_medium-yellow",
    "jsconfig.o.json": "_config-js_medium-yellow",
    "jsconfig.p.json": "_config-js_medium-yellow",
    "jsconfig.q.json": "_config-js_medium-yellow",
    "jsconfig.r.json": "_config-js_medium-yellow",
    "jsconfig.s.json": "_config-js_medium-yellow",
    "jsconfig.t.json": "_config-js_medium-yellow",
    "jsconfig.u.json": "_config-js_medium-yellow",
    "jsconfig.v.json": "_config-js_medium-yellow",
    "jsconfig.w.json": "_config-js_medium-yellow",
    "jsconfig.x.json": "_config-js_medium-yellow",
    "jsconfig.y.json": "_config-js_medium-yellow",
    "jsconfig.z.json": "_config-js_medium-yellow",
    "jsxconfig.json": "_config-react_medium-blue",
    justfile: "_checklist_medium-cyan",
    "karma.conf.cjs": "_karma_medium-cyan",
    "karma.conf.coffee": "_karma_medium-maroon",
    "karma.config.cjs": "_karma_medium-cyan",
    "karma.config.coffee": "_karma_medium-maroon",
    "karma.config.js": "_karma_medium-cyan",
    "karma.config.mjs": "_karma_medium-cyan",
    "karma.config.ts": "_karma_medium-cyan",
    "karma.conf.js": "_karma_medium-cyan",
    "karma.conf.mjs": "_karma_medium-cyan",
    "karma.conf.ts": "_karma_medium-cyan",
    "kazelcfg.json": "_kubernetes_medium-blue",
    kbuild: "_checklist_medium-blue",
    ".keep": "_git_medium-red",
    "keep.me": "_book_medium-blue",
    "keep.me.md": "_book_medium-blue",
    "keep.me.txt": "_book_medium-blue",
    "keybase.txt": "_keybase_medium-blue",
    "kitchen.yaml": "_kitchenci_medium-green",
    ".kitchen.yaml": "_kitchenci_medium-green",
    "kitchen.yml": "_kitchenci_medium-green",
    ".kitchen.yml": "_kitchenci_medium-green",
    kshrc: "_terminal_dark-yellow",
    "kubernetes.yaml": "_kubernetes_medium-blue",
    "kubernetes.yml": "_kubernetes_medium-blue",
    lakefile: "_lua_dark-green",
    "language-subtag-registry": "_database_dark-blue",
    "language-subtag-registry.txt": "_database_dark-blue",
    "last used asset export settings": "_ai_medium-orange",
    "ld.script": "_config_medium-orange",
    "lefthook-local.yaml": "_lefthook_medium-red",
    "lefthook-local.yml": "_lefthook_medium-red",
    "lefthook.yaml": "_lefthook_medium-red",
    "lefthook.yml": "_lefthook_medium-red",
    "lemonade.scss": "_compass_medium-red",
    "_lemonade.scss": "_compass_medium-red",
    "lerna.json": "_lerna_medium-blue",
    ".lesshintrc": "_gear_dark-yellow",
    "lexer.x": "_lex_medium-cyan",
    "lgtm.yaml": "_lgtm_dark-purple",
    ".lgtm.yaml": "_lgtm_dark-purple",
    "lgtm.yml": "_lgtm_dark-purple",
    ".lgtm.yml": "_lgtm_dark-purple",
    libtool: "_terminal_medium-red",
    licence: "_book_medium-blue",
    "licence.md": "_book_medium-blue",
    "licence.mysql": "_book_medium-blue",
    "licence.mysql.md": "_book_medium-blue",
    "licence.mysql.txt": "_book_medium-blue",
    licences: "_book_medium-blue",
    "licences.md": "_book_medium-blue",
    "licences.mysql": "_book_medium-blue",
    "licences.mysql.md": "_book_medium-blue",
    "licences.mysql.txt": "_book_medium-blue",
    "licences.txt": "_book_medium-blue",
    "licence.txt": "_book_medium-blue",
    license: "_book_medium-blue",
    "license.md": "_book_medium-blue",
    "license.mysql": "_book_medium-blue",
    "license.mysql.md": "_book_medium-blue",
    "license.mysql.txt": "_book_medium-blue",
    licenses: "_book_medium-blue",
    "licenses.md": "_book_medium-blue",
    "licenses.mysql": "_book_medium-blue",
    "licenses.mysql.md": "_book_medium-blue",
    "licenses.mysql.txt": "_book_medium-blue",
    "licenses.txt": "_book_medium-blue",
    "license.txt": "_book_medium-blue",
    "lighthouserc.js": "_lighthouse_dark-blue",
    ".lighthouserc.js": "_lighthouse_dark-blue",
    "lighthouserc.json": "_lighthouse_dark-blue",
    ".lighthouserc.json": "_lighthouse_dark-blue",
    "lighthouserc.yaml": "_lighthouse_dark-blue",
    ".lighthouserc.yaml": "_lighthouse_dark-blue",
    "lighthouserc.yml": "_lighthouse_dark-blue",
    ".lighthouserc.yml": "_lighthouse_dark-blue",
    "linebreakproperty.txt": "_unicode_medium-red",
    "linebreaktest.txt": "_unicode_medium-red",
    "linebreak.txt": "_unicode_medium-red",
    ".listing": "_toc_medium-maroon",
    ".listing.0": "_toc_medium-maroon",
    ".listing.1": "_toc_medium-maroon",
    ".listing.2": "_toc_medium-maroon",
    ".listing.3": "_toc_medium-maroon",
    ".listing.4": "_toc_medium-maroon",
    ".listing.5": "_toc_medium-maroon",
    ".listing.6": "_toc_medium-maroon",
    ".listing.7": "_toc_medium-maroon",
    ".listing.8": "_toc_medium-maroon",
    ".listing.9": "_toc_medium-maroon",
    localtags: "_tag_medium-cyan",
    login: "_terminal_medium-red",
    ".login": "_terminal_medium-red",
    "lsd.p": "_manpage_dark-green",
    m3makefile: "_modula3_medium-red",
    m3overrides: "_modula3_medium-red",
    "magic.mgc": "_database_medium-purple",
    maintainers: "_book_dark-blue",
    makefile: "_checklist_medium-yellow",
    "makefile.boot": "_boot_medium-green",
    "makefile.sco": "_checklist_medium-red",
    manifest: "_book_dark-blue",
    "manifest.in": "_config-python_dark-blue",
    "manifest.mf": "_database_medium-maroon",
    "manifest.skip": "_cpan_medium-maroon",
    "man.template": "_manpage_dark-green",
    "master.passwd": "_key_dark-green",
    "materialize.cjs": "_materialize_light-red",
    "materialize.css": "_materialize_light-red",
    "materialize.js": "_materialize_light-red",
    "materialize.min.cjs": "_materialize_light-red",
    "materialize.min.css": "_materialize_light-red",
    "materialize.min.js": "_materialize_light-red",
    "materialize.min.mjs": "_materialize_light-red",
    "materialize.mjs": "_materialize_light-red",
    "mathjax.cjs": "_mathjax_dark-green",
    "mathjax.js": "_mathjax_dark-green",
    "mathjax.mjs": "_mathjax_dark-green",
    mavenfile: "_ruby_medium-red",
    "mavenfile.lock": "_ruby_medium-red",
    "mcmod.info": "_minecraft_dark-green",
    md5sum: "_tag_medium-green",
    md5sums: "_tag_medium-green",
    mdlrc: "_markdownlint_dark-cyan",
    ".mdlrc": "_markdownlint_dark-cyan",
    "mdlrc.rb": "_markdownlint_medium-red",
    ".mdlrc.rb": "_markdownlint_medium-red",
    "mdlrc.style.rb": "_markdownlint_medium-red",
    ".mdlrc.style.rb": "_markdownlint_medium-red",
    "mdoc.template": "_manpage_dark-green",
    ".mention-bot": "_bullhorn_medium-orange",
    merge_head: "_git-merge_medium-red",
    merge_mode: "_git-merge_medium-red",
    merge_msg: "_git-merge_medium-red",
    "meson.build": "_meson_medium-green",
    "meson_options.txt": "_meson_medium-green",
    "metadata.pb": "_database_medium-red",
    "meta.json": "_cpan_medium-yellow",
    "meta.yml": "_cpan_medium-red",
    "mimeapps.list": "_config_medium-blue",
    "mime.types": "_database_medium-maroon",
    "mix.ex": "_elixir_light-purple",
    "mix.exs": "_elixir_light-purple",
    "mix.lock": "_elixir_light-purple",
    "mk.config": "_checklist_medium-green",
    "mkdocs.yaml": "_book-alt_medium-blue",
    ".mkdocs.yaml": "_book-alt_medium-blue",
    "mkdocs.yml": "_book-alt_medium-blue",
    ".mkdocs.yml": "_book-alt_medium-blue",
    mkfile: "_checklist_medium-yellow",
    mkpeephole: "_v8_medium-blue",
    mkshrc: "_terminal_dark-yellow",
    mksnapshot: "_v8_medium-blue",
    mmn: "_manpage_dark-green",
    mmt: "_manpage_dark-green",
    "mocha.coffee": "_mocha_medium-maroon",
    "mocha.css": "_mocha_medium-red",
    "mocha.es": "_mocha_medium-maroon",
    "mocha.es6": "_mocha_medium-maroon",
    "mocha.js": "_mocha_medium-maroon",
    "mocha.jsx": "_mocha_medium-maroon",
    "mocha.less": "_mocha_medium-red",
    "mocha.min.coffee": "_mocha_medium-maroon",
    "mocha.min.css": "_mocha_medium-red",
    "mocha.min.es": "_mocha_medium-maroon",
    "mocha.min.es6": "_mocha_medium-maroon",
    "mocha.min.js": "_mocha_medium-maroon",
    "mocha.min.jsx": "_mocha_medium-maroon",
    "mocha.min.less": "_mocha_medium-red",
    "mocha.min.scss": "_mocha_medium-red",
    "mocha.min.styl": "_mocha_medium-red",
    "mocha.min.ts": "_mocha_medium-maroon",
    "mocha.min.tsx": "_mocha_medium-maroon",
    "mocha.scss": "_mocha_medium-red",
    "mocha.styl": "_mocha_medium-red",
    "mocha.ts": "_mocha_medium-maroon",
    "mocha.tsx": "_mocha_medium-maroon",
    "moleculer.config.cjs": "_moleculer_medium-blue",
    "moleculer.config.js": "_moleculer_medium-blue",
    "moleculer.config.json": "_moleculer_medium-blue",
    "moleculer.config.mjs": "_moleculer_medium-blue",
    "moleculer.config.ts": "_moleculer_medium-blue",
    "moment.cjs": "_moment_medium-cyan",
    "moment.js": "_moment_medium-cyan",
    "moment.min.cjs": "_moment_medium-cyan",
    "moment.min.js": "_moment_medium-cyan",
    "moment.min.mjs": "_moment_medium-cyan",
    "moment.mjs": "_moment_medium-cyan",
    "moment-with-locales.cjs": "_moment_medium-cyan",
    "moment-with-locales.js": "_moment_medium-cyan",
    "moment-with-locales.min.cjs": "_moment_medium-cyan",
    "moment-with-locales.min.js": "_moment_medium-cyan",
    "moment-with-locales.min.mjs": "_moment_medium-cyan",
    "moment-with-locales.mjs": "_moment_medium-cyan",
    "more.stuff": "_book_dark-blue",
    "morphine.p": "_manpage_dark-green",
    "namealiases.txt": "_unicode_medium-red",
    "namedsequencesprov.txt": "_unicode_medium-red",
    "namedsequences.txt": "_unicode_medium-red",
    "nameslist.lst": "_unicode_medium-red",
    "nameslist.txt": "_unicode_medium-red",
    nametable: "_database_dark-blue",
    "nanoc.yaml": "_nanoc_medium-red",
    ".nanoc.yaml": "_nanoc_medium-red",
    "nanoc.yml": "_nanoc_medium-red",
    ".nanoc.yml": "_nanoc_medium-red",
    "nestconfig.json": "_nestjs_medium-red",
    "netlify.toml": "_netlify_dark-blue",
    news: "_book_dark-blue",
    "news-": "_book_dark-blue",
    "news--": "_book_dark-blue",
    "news.-": "_book_dark-blue",
    "news_-": "_book_dark-blue",
    news0: "_book_dark-blue",
    "news-0": "_book_dark-blue",
    "news.0": "_book_dark-blue",
    news_0: "_book_dark-blue",
    news1: "_book_dark-blue",
    "news-1": "_book_dark-blue",
    "news.1": "_book_dark-blue",
    news_1: "_book_dark-blue",
    news2: "_book_dark-blue",
    "news-2": "_book_dark-blue",
    "news.2": "_book_dark-blue",
    news_2: "_book_dark-blue",
    news3: "_book_dark-blue",
    "news-3": "_book_dark-blue",
    "news.3": "_book_dark-blue",
    news_3: "_book_dark-blue",
    news4: "_book_dark-blue",
    "news-4": "_book_dark-blue",
    "news.4": "_book_dark-blue",
    news_4: "_book_dark-blue",
    news5: "_book_dark-blue",
    "news-5": "_book_dark-blue",
    "news.5": "_book_dark-blue",
    news_5: "_book_dark-blue",
    news6: "_book_dark-blue",
    "news-6": "_book_dark-blue",
    "news.6": "_book_dark-blue",
    news_6: "_book_dark-blue",
    news7: "_book_dark-blue",
    "news-7": "_book_dark-blue",
    "news.7": "_book_dark-blue",
    news_7: "_book_dark-blue",
    news8: "_book_dark-blue",
    "news-8": "_book_dark-blue",
    "news.8": "_book_dark-blue",
    news_8: "_book_dark-blue",
    news9: "_book_dark-blue",
    "news-9": "_book_dark-blue",
    "news.9": "_book_dark-blue",
    news_9: "_book_dark-blue",
    nexrc: "_vim_medium-green",
    "next.config.cjs": "_nextjs_dark-grey",
    "next.config.js": "_nextjs_dark-grey",
    "next.config.mjs": "_nextjs_dark-grey",
    "nextflow.config": "_nextflow_dark-green",
    "nginx.conf": "_nginx_dark-green",
    "nightwatch.conf.cjs": "_nightwatch_dark-maroon",
    "nightwatch.config.cjs": "_nightwatch_dark-maroon",
    "nightwatch.config.js": "_nightwatch_dark-maroon",
    "nightwatch.config.mjs": "_nightwatch_dark-maroon",
    "nightwatch.conf.js": "_nightwatch_dark-maroon",
    "nightwatch.conf.mjs": "_nightwatch_dark-maroon",
    "nodemon.json": "_nodemon_medium-green",
    nokogirirc: "_nokogiri_medium-red",
    ".nokogirirc": "_nokogiri_medium-red",
    "normalizationcorrections.txt": "_unicode_medium-red",
    "normalizationtest.txt": "_unicode_medium-red",
    "normalize.css": "_normalize_medium-red",
    "normalize.less": "_normalize_medium-red",
    "normalize.min.css": "_normalize_medium-red",
    "normalize.min.less": "_normalize_medium-red",
    "normalize.min.scss": "_normalize_medium-red",
    "normalize.min.styl": "_normalize_medium-red",
    "normalize.scss": "_normalize_medium-red",
    "normalize.styl": "_normalize_medium-red",
    notebook: "_jupyter_dark-cyan",
    notes: "_book_dark-blue",
    notice: "_book_dark-blue",
    ".nowignore": "_zeit_medium-maroon",
    "now.json": "_zeit_medium-grey",
    "npm-debug.log": "_npm_medium-red",
    ".npmignore": "_npm_medium-red",
    npmrc: "_npm_medium-red",
    ".npmrc": "_npm_medium-red",
    "npm-shrinkwrap.json": "_npm_medium-red",
    ".nsriignore": "_nsri_dark-green",
    ".nsriignore.cjs": "_nsri_dark-green",
    ".nsriignore.config.cjs": "_nsri_dark-green",
    ".nsriignore.config.js": "_nsri_dark-green",
    ".nsriignore.config.mjs": "_nsri_dark-green",
    ".nsriignore.js": "_nsri_dark-green",
    ".nsriignore.json": "_nsri_dark-green",
    ".nsriignore.mjs": "_nsri_dark-green",
    ".nsriignore.yaml": "_nsri_dark-green",
    ".nsriignore.yml": "_nsri_dark-green",
    ".nsrirc": "_nsri_medium-green",
    ".nsrirc.cjs": "_nsri_medium-green",
    ".nsrirc.config.cjs": "_nsri_medium-green",
    ".nsrirc.config.js": "_nsri_medium-green",
    ".nsrirc.config.mjs": "_nsri_medium-green",
    ".nsrirc.js": "_nsri_medium-green",
    ".nsrirc.json": "_nsri_medium-green",
    ".nsrirc.mjs": "_nsri_medium-green",
    ".nsrirc.yaml": "_nsri_medium-green",
    ".nsrirc.yml": "_nsri_medium-green",
    nukefile: "_recycle_dark-green",
    "nushusources.txt": "_unicode_medium-red",
    "nuxt.config.js": "_nuxt_medium-cyan",
    "nuxt.config.ts": "_nuxt_medium-cyan",
    nviminfo: "_vim_dark-green",
    nvimrc: "_vim_dark-green",
    "nx.json": "_nx_dark-blue",
    "nyc.config.cjs": "_istanbul_medium-green",
    "nyc.config.js": "_istanbul_medium-yellow",
    "nyc.config.mjs": "_istanbul_medium-blue",
    ".nycrc": "_istanbul_medium-orange",
    ".nycrc.json": "_istanbul_medium-orange",
    ".nycrc.yaml": "_istanbul_medium-green",
    ".nycrc.yml": "_istanbul_medium-green",
    "openapi.json": "_swagger_medium-green",
    "openapi.yaml": "_swagger_medium-green",
    "openapi.yml": "_swagger_medium-green",
    _osc: "_terminal_dark-purple",
    owners: "_at_medium-red",
    ".p4ignore": "_helix_medium-blue",
    "package.json": "_npm_medium-red",
    "package-lock.json": "_npm_medium-red",
    "pack.mcmeta": "_minecraft_dark-green",
    "pacman.conf": "_archlinux_dark-yellow",
    "paket.dependencies": "_package_medium-blue",
    "paket.local": "_package_medium-blue",
    "paket.lock": "_package_medium-blue",
    "paket.references": "_package_medium-blue",
    "paket.template": "_package_medium-blue",
    "pamac.conf": "_archlinux_light-yellow",
    passwd: "_key_dark-green",
    "patreon.md": "_patreon_medium-orange",
    "patrons.md": "_patreon_medium-orange",
    "pcb.0": "_circuit-board_dark-green",
    "pcb.0.backup": "_circuit-board_dark-green",
    "pcb.0.backup~": "_circuit-board_dark-green",
    "pcb.1": "_circuit-board_dark-green",
    "pcb.1.backup": "_circuit-board_dark-green",
    "pcb.1.backup~": "_circuit-board_dark-green",
    "pcb.2": "_circuit-board_dark-green",
    "pcb.2.backup": "_circuit-board_dark-green",
    "pcb.2.backup~": "_circuit-board_dark-green",
    "pcb.3": "_circuit-board_dark-green",
    "pcb.3.backup": "_circuit-board_dark-green",
    "pcb.3.backup~": "_circuit-board_dark-green",
    "pcb.4": "_circuit-board_dark-green",
    "pcb.4.backup": "_circuit-board_dark-green",
    "pcb.4.backup~": "_circuit-board_dark-green",
    "pcb.5": "_circuit-board_dark-green",
    "pcb.5.backup": "_circuit-board_dark-green",
    "pcb.5.backup~": "_circuit-board_dark-green",
    "pcb.6": "_circuit-board_dark-green",
    "pcb.6.backup": "_circuit-board_dark-green",
    "pcb.6.backup~": "_circuit-board_dark-green",
    "pcb.7": "_circuit-board_dark-green",
    "pcb.7.backup": "_circuit-board_dark-green",
    "pcb.7.backup~": "_circuit-board_dark-green",
    "pcb.8": "_circuit-board_dark-green",
    "pcb.8.backup": "_circuit-board_dark-green",
    "pcb.8.backup~": "_circuit-board_dark-green",
    "pcb.9": "_circuit-board_dark-green",
    "pcb.9.backup": "_circuit-board_dark-green",
    "pcb.9.backup~": "_circuit-board_dark-green",
    "perl5config.json": "_config-perl_medium-blue",
    "perl5-config.json": "_config-perl_medium-blue",
    "perl6config.json": "_config-perl_medium-blue",
    "perl6-config.json": "_config-perl_medium-blue",
    "perlconfig.json": "_config-perl_medium-blue",
    "perl-config.json": "_config-perl_medium-blue",
    "pf.os": "_config_medium-yellow",
    "phoenix.cjs": "_phoenix_medium-orange",
    "phoenix.ex": "_phoenix_medium-red",
    "phoenix.js": "_phoenix_medium-orange",
    "phoenix.mjs": "_phoenix_medium-orange",
    ".photorec.cfg": "_photorec_medium-green",
    "phpunit.xml": "_phpunit_medium-purple",
    ".phraseapp.yaml": "_phraseapp_medium-blue",
    ".phraseapp.yml": "_phraseapp_medium-blue",
    pipfile: "_pipenv_dark-blue",
    "pipfile.lock": "_pipenv_dark-blue",
    pkgbuild: "_archlinux_dark-cyan",
    pkginfo: "_database_medium-blue",
    "platformio.ini": "_platformio_medium-orange",
    "pnpmfile.js": "_pnpm_medium-yellow",
    "pnpm-lock.yaml": "_pnpm_medium-orange",
    "pnpm-lock.yml": "_pnpm_medium-orange",
    "pnpm-workspace.yaml": "_pnpm_medium-orange",
    "pnpm-workspace.yml": "_pnpm_medium-orange",
    podfile: "_ruby_medium-red",
    "podfile.lock": "_ruby_medium-red",
    "poetry.lock": "_config-python_dark-blue",
    policyfile: "_chef_medium-orange",
    "policyfile.lock": "_chef_medium-orange",
    "polymer.json": "_polymer_medium-purple",
    "postcss.config.cjs": "_postcss_medium-yellow",
    "postcss.config.js": "_postcss_medium-yellow",
    "postcss.config.mjs": "_postcss_medium-yellow",
    ".pre-commit.yaml": "_precommit_medium-yellow",
    ".pre-commit.yml": "_precommit_medium-yellow",
    "predict_net.pb": "_caffe2_dark-blue",
    "prettier.config.cjs": "_prettier_medium-cyan",
    "prettier.config.js": "_prettier_medium-cyan",
    "prettier.config.mjs": "_prettier_medium-cyan",
    problems: "_book_dark-blue",
    procfile: "_heroku_medium-purple",
    profile: "_terminal_medium-red",
    ".profile": "_terminal_medium-red",
    "project.ede": "_emacs_medium-blue",
    "project.pros": "_pros_medium-orange",
    projects: "_book_dark-blue",
    "propertyaliases.txt": "_unicode_medium-red",
    "propertyvaluealiases.txt": "_unicode_medium-red",
    "proplist.txt": "_unicode_medium-red",
    pryrc: "_ruby_medium-red",
    ".pryrc": "_ruby_medium-red",
    "pubspec.lock": "_package_medium-blue",
    "pubspec.yaml": "_package_medium-yellow",
    "pubspec.yml": "_package_medium-yellow",
    "pullapprove.yaml": "_pullapprove_dark-blue",
    ".pullapprove.yaml": "_pullapprove_dark-blue",
    "pullapprove.yml": "_pullapprove_dark-blue",
    ".pullapprove.yml": "_pullapprove_dark-blue",
    puppetfile: "_ruby_medium-red",
    "puppetfile.lock": "_ruby_medium-red",
    "pyproject.toml": "_config-python_dark-blue",
    "pytest.ini": "_pytest_medium-blue",
    "pythonconfig.json": "_config-python_dark-blue",
    "python-config.json": "_config-python_dark-blue",
    "py.typed": "_python_medium-grey",
    ".pyup": "_pyup_dark-cyan",
    ".pyup.yaml": "_pyup_dark-cyan",
    ".pyup.yml": "_pyup_dark-cyan",
    qmake: "_checklist_dark-blue",
    ".qmake": "_checklist_dark-blue",
    "quasar.conf.cjs": "_quasar_medium-blue",
    "quasar.conf.js": "_quasar_medium-blue",
    "quasar.conf.mjs": "_quasar_medium-blue",
    rails: "_ruby_medium-red",
    rakefile: "_ruby_medium-red",
    "rakefile.lock": "_ruby_medium-red",
    "raphael.cjs": "_raphael_medium-orange",
    "raphael.js": "_raphael_medium-orange",
    "raphael.mjs": "_raphael_medium-orange",
    "react.cjs": "_react_dark-blue",
    "react-.cjs": "_react_dark-blue",
    "react.js": "_react_dark-blue",
    "react-.js": "_react_dark-blue",
    "react.mjs": "_react_dark-blue",
    "react-.mjs": "_react_dark-blue",
    "read.me": "_book_medium-blue",
    "read.me.md": "_book_medium-blue",
    "readme.me": "_book_medium-blue",
    "readme.me.md": "_book_medium-blue",
    "readme.me.txt": "_book_medium-blue",
    "read.me.txt": "_book_medium-blue",
    "readthedocs.yaml": "_readthedocs_dark-grey",
    ".readthedocs.yaml": "_readthedocs_dark-grey",
    "readthedocs.yml": "_readthedocs_dark-grey",
    ".readthedocs.yml": "_readthedocs_dark-grey",
    "rebar.config.lock": "_erlang_medium-red",
    "rebar.lock": "_erlang_medium-red",
    ".rehyperc": "_remark_medium-yellow",
    ".rehyperc.cjs": "_remark_medium-yellow",
    ".rehyperc.js": "_remark_medium-yellow",
    ".rehyperc.json": "_remark_medium-yellow",
    ".rehyperc.mjs": "_remark_medium-yellow",
    ".rehyperc.yaml": "_remark_medium-yellow",
    ".rehyperc.yml": "_remark_medium-yellow",
    releasenotes: "_book_dark-blue",
    "releasenotes-": "_book_dark-blue",
    "releasenotes--": "_book_dark-blue",
    "releasenotes.-": "_book_dark-blue",
    "releasenotes_-": "_book_dark-blue",
    "release-notes": "_book_dark-blue",
    "release-notes-": "_book_dark-blue",
    "release-notes--": "_book_dark-blue",
    "release-notes.-": "_book_dark-blue",
    "release-notes_-": "_book_dark-blue",
    "release.notes": "_book_dark-blue",
    "release.notes-": "_book_dark-blue",
    "release.notes--": "_book_dark-blue",
    "release.notes.-": "_book_dark-blue",
    "release.notes_-": "_book_dark-blue",
    release_notes: "_book_dark-blue",
    "release_notes-": "_book_dark-blue",
    "release_notes--": "_book_dark-blue",
    "release_notes.-": "_book_dark-blue",
    "release_notes_-": "_book_dark-blue",
    releasenotes0: "_book_dark-blue",
    "releasenotes-0": "_book_dark-blue",
    "releasenotes.0": "_book_dark-blue",
    releasenotes_0: "_book_dark-blue",
    "release-notes0": "_book_dark-blue",
    "release-notes-0": "_book_dark-blue",
    "release-notes.0": "_book_dark-blue",
    "release-notes_0": "_book_dark-blue",
    "release.notes0": "_book_dark-blue",
    "release.notes-0": "_book_dark-blue",
    "release.notes.0": "_book_dark-blue",
    "release.notes_0": "_book_dark-blue",
    release_notes0: "_book_dark-blue",
    "release_notes-0": "_book_dark-blue",
    "release_notes.0": "_book_dark-blue",
    release_notes_0: "_book_dark-blue",
    releasenotes1: "_book_dark-blue",
    "releasenotes-1": "_book_dark-blue",
    "releasenotes.1": "_book_dark-blue",
    releasenotes_1: "_book_dark-blue",
    "release-notes1": "_book_dark-blue",
    "release-notes-1": "_book_dark-blue",
    "release-notes.1": "_book_dark-blue",
    "release-notes_1": "_book_dark-blue",
    "release.notes1": "_book_dark-blue",
    "release.notes-1": "_book_dark-blue",
    "release.notes.1": "_book_dark-blue",
    "release.notes_1": "_book_dark-blue",
    release_notes1: "_book_dark-blue",
    "release_notes-1": "_book_dark-blue",
    "release_notes.1": "_book_dark-blue",
    release_notes_1: "_book_dark-blue",
    releasenotes2: "_book_dark-blue",
    "releasenotes-2": "_book_dark-blue",
    "releasenotes.2": "_book_dark-blue",
    releasenotes_2: "_book_dark-blue",
    "release-notes2": "_book_dark-blue",
    "release-notes-2": "_book_dark-blue",
    "release-notes.2": "_book_dark-blue",
    "release-notes_2": "_book_dark-blue",
    "release.notes2": "_book_dark-blue",
    "release.notes-2": "_book_dark-blue",
    "release.notes.2": "_book_dark-blue",
    "release.notes_2": "_book_dark-blue",
    release_notes2: "_book_dark-blue",
    "release_notes-2": "_book_dark-blue",
    "release_notes.2": "_book_dark-blue",
    release_notes_2: "_book_dark-blue",
    releasenotes3: "_book_dark-blue",
    "releasenotes-3": "_book_dark-blue",
    "releasenotes.3": "_book_dark-blue",
    releasenotes_3: "_book_dark-blue",
    "release-notes3": "_book_dark-blue",
    "release-notes-3": "_book_dark-blue",
    "release-notes.3": "_book_dark-blue",
    "release-notes_3": "_book_dark-blue",
    "release.notes3": "_book_dark-blue",
    "release.notes-3": "_book_dark-blue",
    "release.notes.3": "_book_dark-blue",
    "release.notes_3": "_book_dark-blue",
    release_notes3: "_book_dark-blue",
    "release_notes-3": "_book_dark-blue",
    "release_notes.3": "_book_dark-blue",
    release_notes_3: "_book_dark-blue",
    releasenotes4: "_book_dark-blue",
    "releasenotes-4": "_book_dark-blue",
    "releasenotes.4": "_book_dark-blue",
    releasenotes_4: "_book_dark-blue",
    "release-notes4": "_book_dark-blue",
    "release-notes-4": "_book_dark-blue",
    "release-notes.4": "_book_dark-blue",
    "release-notes_4": "_book_dark-blue",
    "release.notes4": "_book_dark-blue",
    "release.notes-4": "_book_dark-blue",
    "release.notes.4": "_book_dark-blue",
    "release.notes_4": "_book_dark-blue",
    release_notes4: "_book_dark-blue",
    "release_notes-4": "_book_dark-blue",
    "release_notes.4": "_book_dark-blue",
    release_notes_4: "_book_dark-blue",
    releasenotes5: "_book_dark-blue",
    "releasenotes-5": "_book_dark-blue",
    "releasenotes.5": "_book_dark-blue",
    releasenotes_5: "_book_dark-blue",
    "release-notes5": "_book_dark-blue",
    "release-notes-5": "_book_dark-blue",
    "release-notes.5": "_book_dark-blue",
    "release-notes_5": "_book_dark-blue",
    "release.notes5": "_book_dark-blue",
    "release.notes-5": "_book_dark-blue",
    "release.notes.5": "_book_dark-blue",
    "release.notes_5": "_book_dark-blue",
    release_notes5: "_book_dark-blue",
    "release_notes-5": "_book_dark-blue",
    "release_notes.5": "_book_dark-blue",
    release_notes_5: "_book_dark-blue",
    releasenotes6: "_book_dark-blue",
    "releasenotes-6": "_book_dark-blue",
    "releasenotes.6": "_book_dark-blue",
    releasenotes_6: "_book_dark-blue",
    "release-notes6": "_book_dark-blue",
    "release-notes-6": "_book_dark-blue",
    "release-notes.6": "_book_dark-blue",
    "release-notes_6": "_book_dark-blue",
    "release.notes6": "_book_dark-blue",
    "release.notes-6": "_book_dark-blue",
    "release.notes.6": "_book_dark-blue",
    "release.notes_6": "_book_dark-blue",
    release_notes6: "_book_dark-blue",
    "release_notes-6": "_book_dark-blue",
    "release_notes.6": "_book_dark-blue",
    release_notes_6: "_book_dark-blue",
    releasenotes7: "_book_dark-blue",
    "releasenotes-7": "_book_dark-blue",
    "releasenotes.7": "_book_dark-blue",
    releasenotes_7: "_book_dark-blue",
    "release-notes7": "_book_dark-blue",
    "release-notes-7": "_book_dark-blue",
    "release-notes.7": "_book_dark-blue",
    "release-notes_7": "_book_dark-blue",
    "release.notes7": "_book_dark-blue",
    "release.notes-7": "_book_dark-blue",
    "release.notes.7": "_book_dark-blue",
    "release.notes_7": "_book_dark-blue",
    release_notes7: "_book_dark-blue",
    "release_notes-7": "_book_dark-blue",
    "release_notes.7": "_book_dark-blue",
    release_notes_7: "_book_dark-blue",
    releasenotes8: "_book_dark-blue",
    "releasenotes-8": "_book_dark-blue",
    "releasenotes.8": "_book_dark-blue",
    releasenotes_8: "_book_dark-blue",
    "release-notes8": "_book_dark-blue",
    "release-notes-8": "_book_dark-blue",
    "release-notes.8": "_book_dark-blue",
    "release-notes_8": "_book_dark-blue",
    "release.notes8": "_book_dark-blue",
    "release.notes-8": "_book_dark-blue",
    "release.notes.8": "_book_dark-blue",
    "release.notes_8": "_book_dark-blue",
    release_notes8: "_book_dark-blue",
    "release_notes-8": "_book_dark-blue",
    "release_notes.8": "_book_dark-blue",
    release_notes_8: "_book_dark-blue",
    releasenotes9: "_book_dark-blue",
    "releasenotes-9": "_book_dark-blue",
    "releasenotes.9": "_book_dark-blue",
    releasenotes_9: "_book_dark-blue",
    "release-notes9": "_book_dark-blue",
    "release-notes-9": "_book_dark-blue",
    "release-notes.9": "_book_dark-blue",
    "release-notes_9": "_book_dark-blue",
    "release.notes9": "_book_dark-blue",
    "release.notes-9": "_book_dark-blue",
    "release.notes.9": "_book_dark-blue",
    "release.notes_9": "_book_dark-blue",
    release_notes9: "_book_dark-blue",
    "release_notes-9": "_book_dark-blue",
    "release_notes.9": "_book_dark-blue",
    release_notes_9: "_book_dark-blue",
    ".releaserc": "_semrelease_medium-grey",
    ".releaserc.cjs": "_semrelease_medium-grey",
    ".releaserc.js": "_semrelease_medium-grey",
    ".releaserc.json": "_semrelease_medium-grey",
    ".releaserc.mjs": "_semrelease_medium-grey",
    ".releaserc.yaml": "_semrelease_medium-grey",
    ".releaserc.yml": "_semrelease_medium-grey",
    ".remarkrc": "_remark_medium-red",
    ".remarkrc.cjs": "_remark_medium-red",
    ".remarkrc.js": "_remark_medium-red",
    ".remarkrc.json": "_remark_medium-red",
    ".remarkrc.mjs": "_remark_medium-red",
    ".remarkrc.yaml": "_remark_medium-red",
    ".remarkrc.yml": "_remark_medium-red",
    renovate: "_renovate_medium-cyan",
    "renovate.json": "_renovate_medium-cyan",
    renovaterc: "_renovate_medium-cyan",
    "renovaterc.json": "_renovate_medium-cyan",
    "require.cjs": "_requirejs_medium-blue",
    "requiredev.cjs": "_requirejs_medium-blue",
    "requiredev.js": "_requirejs_medium-blue",
    "requiredev.mjs": "_requirejs_medium-blue",
    "require.js": "_requirejs_medium-blue",
    "requirements-dev.in": "_pypi_dark-blue",
    "requirements_dev.in": "_pypi_dark-blue",
    "requirements-dev.txt": "_pypi_dark-blue",
    "requirements_dev.txt": "_pypi_dark-blue",
    "requirements-doc.in": "_pypi_dark-blue",
    "requirements_doc.in": "_pypi_dark-blue",
    "requirements-docs.in": "_pypi_dark-blue",
    "requirements_docs.in": "_pypi_dark-blue",
    "requirements-docs.txt": "_pypi_dark-blue",
    "requirements_docs.txt": "_pypi_dark-blue",
    "requirements-doc.txt": "_pypi_dark-blue",
    "requirements_doc.txt": "_pypi_dark-blue",
    "requirements.in": "_pypi_dark-blue",
    "requirements-test.in": "_pypi_dark-blue",
    "requirements_test.in": "_pypi_dark-blue",
    "requirements-tests.in": "_pypi_dark-blue",
    "requirements_tests.in": "_pypi_dark-blue",
    "requirements-tests.txt": "_pypi_dark-blue",
    "requirements_tests.txt": "_pypi_dark-blue",
    "requirements-test.txt": "_pypi_dark-blue",
    "requirements_test.txt": "_pypi_dark-blue",
    "requirements.txt": "_pypi_dark-blue",
    "require-min.cjs": "_requirejs_medium-blue",
    "require.min.cjs": "_requirejs_medium-blue",
    "require-min.js": "_requirejs_medium-blue",
    "require.min.js": "_requirejs_medium-blue",
    "require-min.mjs": "_requirejs_medium-blue",
    "require.min.mjs": "_requirejs_medium-blue",
    "require.mjs": "_requirejs_medium-blue",
    "restql.yaml": "_restql_medium-cyan",
    "restql.yml": "_restql_medium-cyan",
    ".retextrc": "_remark_medium-green",
    ".retextrc.cjs": "_remark_medium-green",
    ".retextrc.js": "_remark_medium-green",
    ".retextrc.json": "_remark_medium-green",
    ".retextrc.mjs": "_remark_medium-green",
    ".retextrc.yaml": "_remark_medium-green",
    ".retextrc.yml": "_remark_medium-green",
    revision: "_book_dark-blue",
    rexfile: "_perl6_medium-green",
    "riemann.config": "_clojure_medium-maroon",
    rmd160sum: "_tag_medium-green",
    rmd160sums: "_tag_medium-green",
    ".rnd": "_binary_dark-blue",
    "robots.txt": "_robots_dark-cyan",
    root: "_isabelle_dark-blue",
    rpc: "_config_medium-green",
    "rsyncd.conf": "_rsync_dark-purple",
    ".rubocop_todo.yaml": "_rubocop_dark-red",
    ".rubocop_todo.yml": "_rubocop_dark-red",
    ".rubocop.yaml": "_rubocop_dark-red",
    ".rubocop.yml": "_rubocop_dark-red",
    "rubyconfig.json": "_config-ruby_medium-red",
    "ruby-gemset": "_ruby_medium-red",
    ".ruby-gemset": "_ruby_medium-red",
    "ruby-version": "_ruby_medium-red",
    ".ruby-version": "_ruby_medium-red",
    rules: "_debian_medium-cyan",
    "run.n": "_neko_dark-orange",
    "rustconfig.json": "_config-rust_medium-maroon",
    "rust-toolchain": "_rust_medium-red",
    "s4.errors": "_zork_dark-green",
    ".sailsrc": "_sails_medium-blue",
    ".sassrc": "_sass_medium-yellow",
    ".sassrc.cjs": "_sass_medium-yellow",
    ".sassrc.js": "_sass_medium-yellow",
    ".sassrc.mjs": "_sass_medium-yellow",
    sconscript: "_python_dark-green",
    sconstruct: "_python_dark-green",
    "scriptextensions.txt": "_unicode_medium-red",
    "scripts.txt": "_unicode_medium-red",
    "sencha.cjs": "_sencha_light-green",
    "sencha.js": "_sencha_light-green",
    "sencha.min.cjs": "_sencha_light-green",
    "sencha.min.js": "_sencha_light-green",
    "sencha.min.mjs": "_sencha_light-green",
    "sencha.mjs": "_sencha_light-green",
    "sentencebreakproperty.txt": "_unicode_medium-red",
    "sentencebreaktest.txt": "_unicode_medium-red",
    "serverless.yaml": "_serverless_medium-red",
    "serverless.yml": "_serverless_medium-red",
    _service: "_code_medium-blue",
    "settings.bsp": "_config_medium-green",
    "settings.stylecop": "_code_medium-green",
    sha: "_tag_medium-green",
    sha1sum: "_tag_medium-green",
    sha1sums: "_tag_medium-green",
    sha224sum: "_tag_medium-green",
    sha224sums: "_tag_medium-green",
    sha256: "_tag_medium-green",
    sha256sum: "_tag_medium-green",
    sha256sums: "_tag_medium-green",
    sha2sum: "_tag_medium-green",
    sha2sums: "_tag_medium-green",
    sha384sum: "_tag_medium-green",
    sha384sums: "_tag_medium-green",
    sha3sum: "_tag_medium-green",
    sha3sums: "_tag_medium-green",
    sha512sum: "_tag_medium-green",
    sha512sums: "_tag_medium-green",
    "shadow-cljs.edn": "_shadowcljs_medium-cyan",
    shasum: "_tag_medium-green",
    shasums: "_tag_medium-green",
    shellcheckrc: "_shellcheck_light-maroon",
    ".shellcheckrc": "_shellcheck_light-maroon",
    shells: "_config_medium-green",
    "shipitfile.cjs": "_shipit_medium-orange",
    "shipitfile.js": "_shipit_medium-orange",
    "shipitfile.mjs": "_shipit_medium-orange",
    "shippable.yaml": "_shippable_medium-cyan",
    "shippable.yml": "_shippable_medium-cyan",
    slakefile: "_ls_medium-green",
    snakefile: "_python_medium-green",
    "snapcraft.yaml": "_snapcraft_dark-cyan",
    "snapcraft.yml": "_snapcraft_dark-cyan",
    snapfile: "_ruby_medium-red",
    "snapfile.lock": "_ruby_medium-red",
    "snap.svg.cjs": "_snapsvg_medium-cyan",
    "snap.svg.js": "_snapsvg_medium-cyan",
    "snap.svg-min.cjs": "_snapsvg_medium-cyan",
    "snap.svg.min.cjs": "_snapsvg_medium-cyan",
    "snap.svg-min.js": "_snapsvg_medium-cyan",
    "snap.svg.min.js": "_snapsvg_medium-cyan",
    "snap.svg-min.mjs": "_snapsvg_medium-cyan",
    "snap.svg.min.mjs": "_snapsvg_medium-cyan",
    "snap.svg.mjs": "_snapsvg_medium-cyan",
    "snowpack.config.cjs": "_snowpack_dark-blue",
    "snowpack.config.js": "_snowpack_dark-blue",
    "snowpack.config.json": "_snowpack_dark-blue",
    "snowpack.config.mjs": "_snowpack_dark-blue",
    "snowpack.config.ts": "_snowpack_dark-blue",
    ".solidarity": "_solidarity_dark-red",
    ".solidarity.json": "_solidarity_dark-red",
    "solver.prototxt": "_caffe2_medium-purple",
    spacemacs: "_spacemacs_medium-purple",
    "specialcasing.txt": "_unicode_medium-red",
    ".srcinfo": "_archlinux_dark-maroon",
    "standardizedvariants.txt": "_unicode_medium-red",
    "stdlib.cjs": "_stdlibjs_medium-orange",
    "stdlib.cjs.gz": "_stdlibjs_medium-blue",
    "stdlib.js": "_stdlibjs_medium-orange",
    "stdlib.js.gz": "_stdlibjs_medium-blue",
    "stdlib.mjs": "_stdlibjs_medium-orange",
    "stdlib.mjs.gz": "_stdlibjs_medium-blue",
    "stitches.config.cjs": "_stitches_medium-purple",
    ".stitches.config.cjs": "_stitches_medium-purple",
    "stitches.config.js": "_stitches_medium-purple",
    ".stitches.config.js": "_stitches_medium-purple",
    "stitches.config.mjs": "_stitches_medium-purple",
    ".stitches.config.mjs": "_stitches_medium-purple",
    "stitches.config.ts": "_stitches_medium-purple",
    ".stitches.config.ts": "_stitches_medium-purple",
    "stylelint.config.cjs": "_stylelint_medium-yellow",
    "stylelint.config.js": "_stylelint_medium-yellow",
    "stylelint.config.mjs": "_stylelint_medium-yellow",
    ".stylelintrc": "_stylelint_medium-purple",
    ".stylelintrc.js": "_stylelint_medium-purple",
    ".stylelintrc.json": "_stylelint_medium-purple",
    ".stylelintrc.yaml": "_stylelint_medium-purple",
    ".stylelintrc.yml": "_stylelint_medium-purple",
    ".stylish-haskell.yaml": "_stylishhaskell_medium-purple",
    ".stylish-haskell.yml": "_stylishhaskell_medium-purple",
    "sudo-lecture": "_book_dark-blue",
    sudo_lecture: "_book_dark-blue",
    sum: "_tag_medium-green",
    sums: "_tag_medium-green",
    "swagger.json": "_swagger_medium-green",
    "swagger.yaml": "_swagger_medium-green",
    "swagger.yml": "_swagger_medium-green",
    "sym-lib-table": "_kicad_dark-green",
    "tailwind.cjs": "_tailwind_medium-cyan",
    ".tailwind.cjs": "_tailwind_medium-cyan",
    "tailwind.coffee": "_tailwind_medium-cyan",
    ".tailwind.coffee": "_tailwind_medium-cyan",
    "tailwind.config.cjs": "_tailwind_medium-cyan",
    ".tailwind.config.cjs": "_tailwind_medium-cyan",
    "tailwind.config.coffee": "_tailwind_medium-cyan",
    ".tailwind.config.coffee": "_tailwind_medium-cyan",
    "tailwind.config.js": "_tailwind_medium-cyan",
    ".tailwind.config.js": "_tailwind_medium-cyan",
    "tailwind.config.mjs": "_tailwind_medium-cyan",
    ".tailwind.config.mjs": "_tailwind_medium-cyan",
    "tailwind.config.ts": "_tailwind_medium-cyan",
    ".tailwind.config.ts": "_tailwind_medium-cyan",
    "tailwind.js": "_tailwind_medium-cyan",
    ".tailwind.js": "_tailwind_medium-cyan",
    "tailwind.mjs": "_tailwind_medium-cyan",
    ".tailwind.mjs": "_tailwind_medium-cyan",
    "tailwind.ts": "_tailwind_medium-cyan",
    ".tailwind.ts": "_tailwind_medium-cyan",
    "tangutsources.txt": "_unicode_medium-red",
    terminal: "_config_dark-blue",
    terminalrc: "_config_dark-blue",
    "terminal saved output": "_text_medium-maroon",
    "terminal saved-output": "_text_medium-maroon",
    "terminal saved_output": "_text_medium-maroon",
    "terminal-saved output": "_text_medium-maroon",
    "terminal-saved-output": "_text_medium-maroon",
    "terminal-saved_output": "_text_medium-maroon",
    "terminal_saved output": "_text_medium-maroon",
    "terminal_saved-output": "_text_medium-maroon",
    terminal_saved_output: "_text_medium-maroon",
    terms: "_book_dark-blue",
    ".terserrc": "_terser_medium-orange",
    ".terserrc._": "_terser_medium-orange",
    ".terserrc.0": "_terser_medium-orange",
    ".terserrc.1": "_terser_medium-orange",
    ".terserrc.2": "_terser_medium-orange",
    ".terserrc.3": "_terser_medium-orange",
    ".terserrc.4": "_terser_medium-orange",
    ".terserrc.5": "_terser_medium-orange",
    ".terserrc.6": "_terser_medium-orange",
    ".terserrc.7": "_terser_medium-orange",
    ".terserrc.8": "_terser_medium-orange",
    ".terserrc.9": "_terser_medium-orange",
    ".terserrc.a": "_terser_medium-orange",
    ".terserrc.b": "_terser_medium-orange",
    ".terserrc.c": "_terser_medium-orange",
    ".terserrc.d": "_terser_medium-orange",
    ".terserrc.e": "_terser_medium-orange",
    ".terserrc.f": "_terser_medium-orange",
    ".terserrc.g": "_terser_medium-orange",
    ".terserrc.h": "_terser_medium-orange",
    ".terserrc.i": "_terser_medium-orange",
    ".terserrc.j": "_terser_medium-orange",
    ".terserrc.k": "_terser_medium-orange",
    ".terserrc.l": "_terser_medium-orange",
    ".terserrc.m": "_terser_medium-orange",
    ".terserrc.n": "_terser_medium-orange",
    ".terserrc.o": "_terser_medium-orange",
    ".terserrc.p": "_terser_medium-orange",
    ".terserrc.q": "_terser_medium-orange",
    ".terserrc.r": "_terser_medium-orange",
    ".terserrc.s": "_terser_medium-orange",
    ".terserrc.t": "_terser_medium-orange",
    ".terserrc.u": "_terser_medium-orange",
    ".terserrc.v": "_terser_medium-orange",
    ".terserrc.w": "_terser_medium-orange",
    ".terserrc.x": "_terser_medium-orange",
    ".terserrc.y": "_terser_medium-orange",
    ".terserrc.z": "_terser_medium-orange",
    "test-.c2hs": "_test-hs_medium-purple",
    "test..c2hs": "_test-hs_medium-purple",
    "test_.c2hs": "_test-hs_medium-purple",
    ".testcaferc.json": "_testcafe_medium-blue",
    "test-.cjs": "_test-js_medium-green",
    "test..cjs": "_test-js_medium-green",
    "test_.cjs": "_test-js_medium-green",
    "test-.cjsx": "_test-coffee_medium-maroon",
    "test_.cjsx": "_test-coffee_medium-maroon",
    "test-.coffee": "_test-coffee_medium-maroon",
    "test_.coffee": "_test-coffee_medium-maroon",
    "test-.es": "_test-js_medium-yellow",
    "test..es": "_test-js_medium-yellow",
    "test_.es": "_test-js_medium-yellow",
    "test-.go": "_test-go_medium-cyan",
    "test..go": "_test-go_medium-cyan",
    "test_.go": "_test-go_medium-cyan",
    "test-.hs": "_test-hs_medium-purple",
    "test..hs": "_test-hs_medium-purple",
    "test_.hs": "_test-hs_medium-purple",
    "test-.hsc": "_test-hs_medium-purple",
    "test..hsc": "_test-hs_medium-purple",
    "test_.hsc": "_test-hs_medium-purple",
    "test-.iced": "_test-coffee_medium-maroon",
    "test_.iced": "_test-coffee_medium-maroon",
    "test-.js": "_test-js_medium-yellow",
    "test-._js": "_test-js_medium-yellow",
    "test..js": "_test-js_medium-yellow",
    "test.._js": "_test-js_medium-yellow",
    "test_.js": "_test-js_medium-yellow",
    "test_._js": "_test-js_medium-yellow",
    "test-.jsb": "_test-js_medium-yellow",
    "test..jsb": "_test-js_medium-yellow",
    "test_.jsb": "_test-js_medium-yellow",
    "test-.jsm": "_test-js_medium-yellow",
    "test..jsm": "_test-js_medium-yellow",
    "test_.jsm": "_test-js_medium-yellow",
    "test-.jss": "_test-js_medium-yellow",
    "test..jss": "_test-js_medium-yellow",
    "test_.jss": "_test-js_medium-yellow",
    "test-.jsx": "_test-react_medium-blue",
    "test..jsx": "_test-react_medium-blue",
    "test_.jsx": "_test-react_medium-blue",
    "test-.lhs": "_test-hs_medium-purple",
    "test..lhs": "_test-hs_medium-purple",
    "test_.lhs": "_test-hs_medium-purple",
    "test-.litcoffee": "_test-coffee_medium-maroon",
    "test_.litcoffee": "_test-coffee_medium-maroon",
    "test.me": "_book_medium-blue",
    "test.me.md": "_book_medium-blue",
    "test.me.txt": "_book_medium-blue",
    "test-.mjs": "_test-js_medium-blue",
    "test..mjs": "_test-js_medium-blue",
    "test_.mjs": "_test-js_medium-blue",
    "test-.pl": "_test-perl_medium-blue",
    "test..pl": "_test-perl_medium-blue",
    "test_.pl": "_test-perl_medium-blue",
    "test-.rb": "_test-ruby_medium-red",
    "test..rb": "_test-ruby_medium-red",
    "test_.rb": "_test-ruby_medium-red",
    "test-.react.cjs": "_test-react_medium-blue",
    "test..react.cjs": "_test-react_medium-blue",
    "test_.react.cjs": "_test-react_medium-blue",
    "test-.react.js": "_test-react_medium-blue",
    "test..react.js": "_test-react_medium-blue",
    "test_.react.js": "_test-react_medium-blue",
    "test-.react.mjs": "_test-react_medium-blue",
    "test..react.mjs": "_test-react_medium-blue",
    "test_.react.mjs": "_test-react_medium-blue",
    "test-requirements.in": "_pypi_dark-blue",
    "test_requirements.in": "_pypi_dark-blue",
    "test-requirements.txt": "_pypi_dark-blue",
    "test_requirements.txt": "_pypi_dark-blue",
    "test-.rs": "_test-rust_medium-maroon",
    "test_.rs": "_test-rust_medium-maroon",
    "test-.ruby": "_test-ruby_medium-red",
    "test..ruby": "_test-ruby_medium-red",
    "test_.ruby": "_test-ruby_medium-red",
    tests: "_text_medium-red",
    "test-.sjs": "_test-js_medium-yellow",
    "test..sjs": "_test-js_medium-yellow",
    "test_.sjs": "_test-js_medium-yellow",
    "tests-requirements.in": "_pypi_dark-blue",
    "tests_requirements.in": "_pypi_dark-blue",
    "tests-requirements.txt": "_pypi_dark-blue",
    "tests_requirements.txt": "_pypi_dark-blue",
    "test-.ts": "_test-ts_medium-blue",
    "test..ts": "_test-ts_medium-blue",
    "test_.ts": "_test-ts_medium-blue",
    "test-.tsx": "_test-ts_light-blue",
    "test..tsx": "_test-ts_light-blue",
    "test_.tsx": "_test-ts_light-blue",
    "text.enc": "_gear_dark-green",
    ".tgitconfig": "_tortoise_medium-red",
    thanks: "_book_dark-blue",
    thorfile: "_thor_dark-orange",
    tiltfile: "_tilt_medium-green",
    ".tkdiffrc": "_tcl_dark-red",
    "tmux.conf": "_tmux_medium-green",
    "toc.entries": "_manpage_dark-green",
    "todo.txt": "_checklist_medium-green",
    "toolchain_installscript.qs": "_qt_medium-yellow",
    "tools panel presets": "_ai_medium-orange",
    "train_val.prototxt": "_caffe2_medium-purple",
    troffrc: "_manpage_dark-green",
    "troffrc-end": "_manpage_dark-green",
    "truffle.cjs": "_truffle_medium-maroon",
    ".truffle.cjs": "_truffle_medium-maroon",
    "truffle.js": "_truffle_medium-maroon",
    ".truffle.js": "_truffle_medium-maroon",
    "truffle.mjs": "_truffle_medium-maroon",
    ".truffle.mjs": "_truffle_medium-maroon",
    "tsconfig.0.json": "_config-ts_medium-blue",
    "tsconfig.1.json": "_config-ts_medium-blue",
    "tsconfig.2.json": "_config-ts_medium-blue",
    "tsconfig.3.json": "_config-ts_medium-blue",
    "tsconfig.4.json": "_config-ts_medium-blue",
    "tsconfig.5.json": "_config-ts_medium-blue",
    "tsconfig.6.json": "_config-ts_medium-blue",
    "tsconfig.7.json": "_config-ts_medium-blue",
    "tsconfig.8.json": "_config-ts_medium-blue",
    "tsconfig.9.json": "_config-ts_medium-blue",
    "tsconfig.a.json": "_config-ts_medium-blue",
    "tsconfig.b.json": "_config-ts_medium-blue",
    "tsconfig.c.json": "_config-ts_medium-blue",
    "tsconfig.d.json": "_config-ts_medium-blue",
    "tsconfig.e.json": "_config-ts_medium-blue",
    "tsconfig.f.json": "_config-ts_medium-blue",
    "tsconfig.g.json": "_config-ts_medium-blue",
    "tsconfig.h.json": "_config-ts_medium-blue",
    "tsconfig.i.json": "_config-ts_medium-blue",
    "tsconfig.j.json": "_config-ts_medium-blue",
    "tsconfig.json": "_config-ts_medium-blue",
    "tsconfig. .json": "_config-ts_medium-blue",
    "tsconfig.!.json": "_config-ts_medium-blue",
    'tsconfig.".json': "_config-ts_medium-blue",
    "tsconfig.#.json": "_config-ts_medium-blue",
    "tsconfig.$.json": "_config-ts_medium-blue",
    "tsconfig.%.json": "_config-ts_medium-blue",
    "tsconfig.&.json": "_config-ts_medium-blue",
    "tsconfig.'.json": "_config-ts_medium-blue",
    "tsconfig.(.json": "_config-ts_medium-blue",
    "tsconfig.).json": "_config-ts_medium-blue",
    "tsconfig.*.json": "_config-ts_medium-blue",
    "tsconfig.+.json": "_config-ts_medium-blue",
    "tsconfig.,.json": "_config-ts_medium-blue",
    "tsconfig.-.json": "_config-ts_medium-blue",
    "tsconfig...json": "_config-ts_medium-blue",
    "tsconfig./.json": "_config-ts_medium-blue",
    "tsconfig.:.json": "_config-ts_medium-blue",
    "tsconfig.;.json": "_config-ts_medium-blue",
    "tsconfig.<.json": "_config-ts_medium-blue",
    "tsconfig.=.json": "_config-ts_medium-blue",
    "tsconfig.>.json": "_config-ts_medium-blue",
    "tsconfig.?.json": "_config-ts_medium-blue",
    "tsconfig.@.json": "_config-ts_medium-blue",
    "tsconfig.[.json": "_config-ts_medium-blue",
    "tsconfig.\\.json": "_config-ts_medium-blue",
    "tsconfig.].json": "_config-ts_medium-blue",
    "tsconfig.^.json": "_config-ts_medium-blue",
    "tsconfig._.json": "_config-ts_medium-blue",
    "tsconfig.`.json": "_config-ts_medium-blue",
    "tsconfig.{.json": "_config-ts_medium-blue",
    "tsconfig.|.json": "_config-ts_medium-blue",
    "tsconfig.}.json": "_config-ts_medium-blue",
    "tsconfig.~.json": "_config-ts_medium-blue",
    "tsconfig.k.json": "_config-ts_medium-blue",
    "tsconfig.l.json": "_config-ts_medium-blue",
    "tsconfig.m.json": "_config-ts_medium-blue",
    "tsconfig.n.json": "_config-ts_medium-blue",
    "tsconfig.o.json": "_config-ts_medium-blue",
    "tsconfig.p.json": "_config-ts_medium-blue",
    "tsconfig.q.json": "_config-ts_medium-blue",
    "tsconfig.r.json": "_config-ts_medium-blue",
    "tsconfig.s.json": "_config-ts_medium-blue",
    "tsconfig.t.json": "_config-ts_medium-blue",
    "tsconfig.u.json": "_config-ts_medium-blue",
    "tsconfig.v.json": "_config-ts_medium-blue",
    "tsconfig.w.json": "_config-ts_medium-blue",
    "tsconfig.x.json": "_config-ts_medium-blue",
    "tsconfig.y.json": "_config-ts_medium-blue",
    "tsconfig.z.json": "_config-ts_medium-blue",
    "tslint.json": "_config-ts_medium-purple",
    "typedoc.json": "_typedoc_dark-purple",
    "typings.json": "_typings_medium-maroon",
    "ubsan.blacklist": "_llvm_medium-red",
    ".uglifyrc": "_terser_medium-orange",
    ".uglifyrc._": "_terser_medium-orange",
    ".uglifyrc.0": "_terser_medium-orange",
    ".uglifyrc.1": "_terser_medium-orange",
    ".uglifyrc.2": "_terser_medium-orange",
    ".uglifyrc.3": "_terser_medium-orange",
    ".uglifyrc.4": "_terser_medium-orange",
    ".uglifyrc.5": "_terser_medium-orange",
    ".uglifyrc.6": "_terser_medium-orange",
    ".uglifyrc.7": "_terser_medium-orange",
    ".uglifyrc.8": "_terser_medium-orange",
    ".uglifyrc.9": "_terser_medium-orange",
    ".uglifyrc.a": "_terser_medium-orange",
    ".uglifyrc.b": "_terser_medium-orange",
    ".uglifyrc.c": "_terser_medium-orange",
    ".uglifyrc.d": "_terser_medium-orange",
    ".uglifyrc.e": "_terser_medium-orange",
    ".uglifyrc.f": "_terser_medium-orange",
    ".uglifyrc.g": "_terser_medium-orange",
    ".uglifyrc.h": "_terser_medium-orange",
    ".uglifyrc.i": "_terser_medium-orange",
    ".uglifyrc.j": "_terser_medium-orange",
    ".uglifyrc.k": "_terser_medium-orange",
    ".uglifyrc.l": "_terser_medium-orange",
    ".uglifyrc.m": "_terser_medium-orange",
    ".uglifyrc.n": "_terser_medium-orange",
    ".uglifyrc.o": "_terser_medium-orange",
    ".uglifyrc.p": "_terser_medium-orange",
    ".uglifyrc.q": "_terser_medium-orange",
    ".uglifyrc.r": "_terser_medium-orange",
    ".uglifyrc.s": "_terser_medium-orange",
    ".uglifyrc.t": "_terser_medium-orange",
    ".uglifyrc.u": "_terser_medium-orange",
    ".uglifyrc.v": "_terser_medium-orange",
    ".uglifyrc.w": "_terser_medium-orange",
    ".uglifyrc.x": "_terser_medium-orange",
    ".uglifyrc.y": "_terser_medium-orange",
    ".uglifyrc.z": "_terser_medium-orange",
    "uikit.cjs": "_uikit_medium-blue",
    "uikit.js": "_uikit_medium-blue",
    "uikit.min.cjs": "_uikit_medium-blue",
    "uikit.min.js": "_uikit_medium-blue",
    "uikit.min.mjs": "_uikit_medium-blue",
    "uikit.mjs": "_uikit_medium-blue",
    "unibeautify.config.cjs": "_unibeautify_medium-orange",
    "unibeautify.config.js": "_unibeautify_medium-orange",
    "unibeautify.config.mjs": "_unibeautify_medium-orange",
    "unicodedata.txt": "_unicode_medium-red",
    "unihan.txt": "_unicode_medium-red",
    "units.dat": "_scales_medium-green",
    unitshistory: "_scales_medium-red",
    "units-history": "_scales_medium-red",
    units_history: "_scales_medium-red",
    ".unitshistory": "_scales_medium-red",
    ".units-history": "_scales_medium-red",
    ".units_history": "_scales_medium-red",
    "units.lib": "_scales_medium-green",
    unittab: "_scales_medium-green",
    unlicence: "_book_medium-blue",
    "unlicence.md": "_book_medium-blue",
    "unlicence.mysql": "_book_medium-blue",
    "unlicence.mysql.md": "_book_medium-blue",
    "unlicence.mysql.txt": "_book_medium-blue",
    unlicences: "_book_medium-blue",
    "unlicences.md": "_book_medium-blue",
    "unlicences.mysql": "_book_medium-blue",
    "unlicences.mysql.md": "_book_medium-blue",
    "unlicences.mysql.txt": "_book_medium-blue",
    "unlicences.txt": "_book_medium-blue",
    "unlicence.txt": "_book_medium-blue",
    unlicense: "_book_medium-blue",
    "unlicense.md": "_book_medium-blue",
    "unlicense.mysql": "_book_medium-blue",
    "unlicense.mysql.md": "_book_medium-blue",
    "unlicense.mysql.txt": "_book_medium-blue",
    unlicenses: "_book_medium-blue",
    "unlicenses.md": "_book_medium-blue",
    "unlicenses.mysql": "_book_medium-blue",
    "unlicenses.mysql.md": "_book_medium-blue",
    "unlicenses.mysql.txt": "_book_medium-blue",
    "unlicenses.txt": "_book_medium-blue",
    "unlicense.txt": "_book_medium-blue",
    "usourcedata.txt": "_unicode_medium-red",
    v8: "_v8_medium-blue",
    "v8-": "_v8_medium-blue",
    "v8.": "_v8_medium-blue",
    v8_: "_v8_medium-blue",
    vagrantfile: "_vagrant_medium-cyan",
    vdev0: "_openzfs_dark-blue",
    vdev1: "_openzfs_dark-blue",
    vdev2: "_openzfs_dark-blue",
    vdev3: "_openzfs_dark-blue",
    vdev4: "_openzfs_dark-blue",
    vdev5: "_openzfs_dark-blue",
    vdev6: "_openzfs_dark-blue",
    vdev7: "_openzfs_dark-blue",
    vdev8: "_openzfs_dark-blue",
    vdev9: "_openzfs_dark-blue",
    ".vendor_urls": "_heroku_dark-purple",
    ".vercelignore": "_zeit_medium-maroon",
    "vercel.json": "_zeit_medium-grey",
    version: "_tag_medium-yellow",
    ".version": "_tag_medium-yellow",
    "verticalorientation.txt": "_unicode_medium-red",
    viminfo: "_vim_dark-green",
    ".viminfo": "_vim_dark-green",
    _viminfo: "_vim_dark-green",
    vimrc: "_vim_dark-green",
    ".vimrc": "_vim_dark-green",
    _vimrc: "_vim_dark-green",
    "vite.config.js": "_vite_medium-yellow",
    "vite.config.ts": "_vite_medium-yellow",
    ".vsts-ci.yaml": "_vsts_medium-blue",
    ".vsts-ci.yml": "_vsts_medium-blue",
    "vue.config.cjs": "_vue_light-green",
    "vue.config.js": "_vue_light-green",
    "vue.config.mjs": "_vue_light-green",
    "w3c.json": "_w3c_medium-blue",
    ".wallaby.cjs": "_wallaby_medium-green",
    ".wallaby.js": "_wallaby_medium-green",
    ".wallaby.mjs": "_wallaby_medium-green",
    warnings: "_book_dark-blue",
    watchlists: "_python_medium-green",
    "watchman.json": "_watchman_medium-blue",
    "web-dev-server.config.cjs": "_modernweb_medium-blue",
    "web-dev-server.config.js": "_modernweb_medium-blue",
    "web-dev-server.config.mjs": "_modernweb_medium-blue",
    "webpack.analyze.js": "_webpack_medium-blue",
    "webpack.base.conf.cjs": "_webpack_medium-blue",
    "webpack.base.conf.coffee": "_webpack_medium-blue",
    "webpack.base.conf.js": "_webpack_medium-blue",
    "webpack.base.conf.mjs": "_webpack_medium-blue",
    "webpack.base.conf.ts": "_webpack_medium-blue",
    "webpack.cjs": "_webpack_medium-blue",
    "webpack.coffee": "_webpack_medium-blue",
    "webpack.common.cjs": "_webpack_medium-blue",
    "webpack.common.coffee": "_webpack_medium-blue",
    "webpack.common.js": "_webpack_medium-blue",
    "webpack.common.mjs": "_webpack_medium-blue",
    "webpack.common.ts": "_webpack_medium-blue",
    "webpack.config.babel.cjs": "_webpack_medium-blue",
    "webpack.config.babel.coffee": "_webpack_medium-blue",
    "webpack.config.babel.js": "_webpack_medium-blue",
    "webpack.config.babel.mjs": "_webpack_medium-blue",
    "webpack.config.babel.ts": "_webpack_medium-blue",
    "webpack.config.base.babel.cjs": "_webpack_medium-blue",
    "webpack.config.base.babel.coffee": "_webpack_medium-blue",
    "webpack.config.base.babel.js": "_webpack_medium-blue",
    "webpack.config.base.babel.mjs": "_webpack_medium-blue",
    "webpack.config.base.babel.ts": "_webpack_medium-blue",
    "webpack.config.base.cjs": "_webpack_medium-blue",
    "webpack.config.base.coffee": "_webpack_medium-blue",
    "webpack.config.base.js": "_webpack_medium-blue",
    "webpack.config.base.mjs": "_webpack_medium-blue",
    "webpack.config.base.ts": "_webpack_medium-blue",
    "webpack.config.cjs": "_webpack_medium-blue",
    "webpack.config.coffee": "_webpack_medium-blue",
    "webpack.config.common.babel.cjs": "_webpack_medium-blue",
    "webpack.config.common.babel.coffee": "_webpack_medium-blue",
    "webpack.config.common.babel.js": "_webpack_medium-blue",
    "webpack.config.common.babel.mjs": "_webpack_medium-blue",
    "webpack.config.common.babel.ts": "_webpack_medium-blue",
    "webpack.config.common.cjs": "_webpack_medium-blue",
    "webpack.config.common.coffee": "_webpack_medium-blue",
    "webpack.config.common.js": "_webpack_medium-blue",
    "webpack.config.common.mjs": "_webpack_medium-blue",
    "webpack.config.common.ts": "_webpack_medium-blue",
    "webpack.config.dev.babel.cjs": "_webpack_medium-blue",
    "webpack.config.dev.babel.coffee": "_webpack_medium-blue",
    "webpack.config.dev.babel.js": "_webpack_medium-blue",
    "webpack.config.dev.babel.mjs": "_webpack_medium-blue",
    "webpack.config.dev.babel.ts": "_webpack_medium-blue",
    "webpack.config.dev.cjs": "_webpack_medium-blue",
    "webpack.config.dev.coffee": "_webpack_medium-blue",
    "webpack.config.development.babel.cjs": "_webpack_medium-blue",
    "webpack.config.development.babel.coffee": "_webpack_medium-blue",
    "webpack.config.development.babel.js": "_webpack_medium-blue",
    "webpack.config.development.babel.mjs": "_webpack_medium-blue",
    "webpack.config.development.babel.ts": "_webpack_medium-blue",
    "webpack.config.development.cjs": "_webpack_medium-blue",
    "webpack.config.development.coffee": "_webpack_medium-blue",
    "webpack.config.development.js": "_webpack_medium-blue",
    "webpack.config.development.mjs": "_webpack_medium-blue",
    "webpack.config.development.ts": "_webpack_medium-blue",
    "webpack.config.dev.js": "_webpack_medium-blue",
    "webpack.config.dev.mjs": "_webpack_medium-blue",
    "webpack.config.dev.ts": "_webpack_medium-blue",
    "webpack.config.js": "_webpack_medium-blue",
    "webpack.config.mjs": "_webpack_medium-blue",
    "webpack.config.prod.babel.cjs": "_webpack_medium-blue",
    "webpack.config.prod.babel.coffee": "_webpack_medium-blue",
    "webpack.config.prod.babel.js": "_webpack_medium-blue",
    "webpack.config.prod.babel.mjs": "_webpack_medium-blue",
    "webpack.config.prod.babel.ts": "_webpack_medium-blue",
    "webpack.config.prod.cjs": "_webpack_medium-blue",
    "webpack.config.prod.coffee": "_webpack_medium-blue",
    "webpack.config.prod.js": "_webpack_medium-blue",
    "webpack.config.prod.mjs": "_webpack_medium-blue",
    "webpack.config.prod.ts": "_webpack_medium-blue",
    "webpack.config.production.babel.cjs": "_webpack_medium-blue",
    "webpack.config.production.babel.coffee": "_webpack_medium-blue",
    "webpack.config.production.babel.js": "_webpack_medium-blue",
    "webpack.config.production.babel.mjs": "_webpack_medium-blue",
    "webpack.config.production.babel.ts": "_webpack_medium-blue",
    "webpack.config.production.cjs": "_webpack_medium-blue",
    "webpack.config.production.coffee": "_webpack_medium-blue",
    "webpack.config.production.js": "_webpack_medium-blue",
    "webpack.config.production.mjs": "_webpack_medium-blue",
    "webpack.config.production.ts": "_webpack_medium-blue",
    "webpack.config.staging.babel.cjs": "_webpack_medium-blue",
    "webpack.config.staging.babel.coffee": "_webpack_medium-blue",
    "webpack.config.staging.babel.js": "_webpack_medium-blue",
    "webpack.config.staging.babel.mjs": "_webpack_medium-blue",
    "webpack.config.staging.babel.ts": "_webpack_medium-blue",
    "webpack.config.staging.cjs": "_webpack_medium-blue",
    "webpack.config.staging.coffee": "_webpack_medium-blue",
    "webpack.config.staging.js": "_webpack_medium-blue",
    "webpack.config.staging.mjs": "_webpack_medium-blue",
    "webpack.config.staging.ts": "_webpack_medium-blue",
    "webpack.config.test.babel.cjs": "_webpack_medium-blue",
    "webpack.config.test.babel.coffee": "_webpack_medium-blue",
    "webpack.config.test.babel.js": "_webpack_medium-blue",
    "webpack.config.test.babel.mjs": "_webpack_medium-blue",
    "webpack.config.test.babel.ts": "_webpack_medium-blue",
    "webpack.config.test.cjs": "_webpack_medium-blue",
    "webpack.config.test.coffee": "_webpack_medium-blue",
    "webpack.config.test.js": "_webpack_medium-blue",
    "webpack.config.test.mjs": "_webpack_medium-blue",
    "webpack.config.test.ts": "_webpack_medium-blue",
    "webpack.config.ts": "_webpack_medium-blue",
    "webpack.dev.cjs": "_webpack_medium-blue",
    "webpack.dev.coffee": "_webpack_medium-blue",
    "webpack.dev.conf.cjs": "_webpack_medium-blue",
    "webpack.dev.conf.coffee": "_webpack_medium-blue",
    "webpack.dev.conf.js": "_webpack_medium-blue",
    "webpack.dev.conf.mjs": "_webpack_medium-blue",
    "webpack.dev.conf.ts": "_webpack_medium-blue",
    "webpack.dev.js": "_webpack_medium-blue",
    "webpack.dev.mjs": "_webpack_medium-blue",
    "webpack.dev.ts": "_webpack_medium-blue",
    "webpackfile.cjs": "_webpack_medium-blue",
    "webpackfile.coffee": "_webpack_medium-blue",
    "webpackfile.js": "_webpack_medium-blue",
    "webpackfile.json": "_webpack_medium-blue",
    "webpackfile.jsx": "_webpack_medium-blue",
    "webpackfile.litcoffee": "_webpack_medium-blue",
    "webpackfile.mjs": "_webpack_medium-blue",
    "webpackfile.ts": "_webpack_medium-blue",
    "webpackfile.tsx": "_webpack_medium-blue",
    "webpack.js": "_webpack_medium-blue",
    "webpack.json": "_webpack_medium-blue",
    "webpack.jsx": "_webpack_medium-blue",
    "webpack.litcoffee": "_webpack_medium-blue",
    "webpack.main.config.cjs": "_webpack_medium-blue",
    "webpack.main.config.coffee": "_webpack_medium-blue",
    "webpack.main.config.js": "_webpack_medium-blue",
    "webpack.main.config.mjs": "_webpack_medium-blue",
    "webpack.main.config.ts": "_webpack_medium-blue",
    "webpack.mix.cjs": "_webpack_medium-blue",
    "webpack.mix.coffee": "_webpack_medium-blue",
    "webpack.mix.js": "_webpack_medium-blue",
    "webpack.mix.mjs": "_webpack_medium-blue",
    "webpack.mix.ts": "_webpack_medium-blue",
    "webpack.mjs": "_webpack_medium-blue",
    "webpack.plugins.cjs": "_webpack_medium-blue",
    "webpack.plugins.coffee": "_webpack_medium-blue",
    "webpack.plugins.js": "_webpack_medium-blue",
    "webpack.plugins.mjs": "_webpack_medium-blue",
    "webpack.plugins.ts": "_webpack_medium-blue",
    "webpack.prod.cjs": "_webpack_medium-blue",
    "webpack.prod.coffee": "_webpack_medium-blue",
    "webpack.prod.conf.cjs": "_webpack_medium-blue",
    "webpack.prod.conf.coffee": "_webpack_medium-blue",
    "webpack.prod.conf.js": "_webpack_medium-blue",
    "webpack.prod.conf.mjs": "_webpack_medium-blue",
    "webpack.prod.conf.ts": "_webpack_medium-blue",
    "webpack.prod.js": "_webpack_medium-blue",
    "webpack.prod.mjs": "_webpack_medium-blue",
    "webpack.prod.ts": "_webpack_medium-blue",
    "webpack.renderer.config.cjs": "_webpack_medium-blue",
    "webpack.renderer.config.coffee": "_webpack_medium-blue",
    "webpack.renderer.config.js": "_webpack_medium-blue",
    "webpack.renderer.config.mjs": "_webpack_medium-blue",
    "webpack.renderer.config.ts": "_webpack_medium-blue",
    "webpack.rules.cjs": "_webpack_medium-blue",
    "webpack.rules.coffee": "_webpack_medium-blue",
    "webpack.rules.js": "_webpack_medium-blue",
    "webpack.rules.mjs": "_webpack_medium-blue",
    "webpack.rules.ts": "_webpack_medium-blue",
    "webpack.test.conf.cjs": "_webpack_medium-blue",
    "webpack.test.conf.coffee": "_webpack_medium-blue",
    "webpack.test.conf.js": "_webpack_medium-blue",
    "webpack.test.conf.mjs": "_webpack_medium-blue",
    "webpack.test.conf.ts": "_webpack_medium-blue",
    "webpack.ts": "_webpack_medium-blue",
    "webpack.tsx": "_webpack_medium-blue",
    "web-test-runner.config.cjs": "_modernweb_medium-blue",
    "web-test-runner.config.js": "_modernweb_medium-blue",
    "web-test-runner.config.mjs": "_modernweb_medium-blue",
    "wercker.yaml": "_wercker_medium-purple",
    "wercker.yml": "_wercker_medium-purple",
    wgetrc: "_wget_medium-purple",
    whatis: "_database_medium-maroon",
    "windi.config.js": "_windi_medium-blue",
    "windi.config.ts": "_windi_medium-blue",
    "wordbreakproperty.txt": "_unicode_medium-red",
    "wordbreaktest.txt": "_unicode_medium-red",
    "workbox-config.cjs": "_workbox_medium-orange",
    "workbox-config.js": "_workbox_medium-orange",
    "workbox-config.mjs": "_workbox_medium-orange",
    workspace: "_bazel_medium-green",
    "workspace.bazel": "_bazel_medium-green",
    wscript: "_python_dark-maroon",
    xcompose: "_config_medium-cyan",
    ".xcompose": "_config_medium-cyan",
    "xmake.lua": "_xmake_medium-green",
    "yahoo-.cjs": "_yui_dark-blue",
    "yahoo-.js": "_yui_dark-blue",
    "yahoo-.mjs": "_yui_dark-blue",
    ".yamllint": "_yamllint_medium-green",
    ".yamllint.yaml": "_yamllint_medium-green",
    ".yamllint.yml": "_yamllint_medium-green",
    "yarn.lock": "_yarn_medium-blue",
    ".yaspeller.json": "_yandex_medium-red",
    ".yaspellerrc": "_yandex_medium-red",
    "yui.cjs": "_yui_dark-blue",
    "yui.js": "_yui_dark-blue",
    "yui.mjs": "_yui_dark-blue",
    zlogin: "_terminal_medium-blue",
    ".zlogin": "_terminal_medium-blue",
    zlogout: "_terminal_medium-blue",
    ".zlogout": "_terminal_medium-blue",
    "zork0.a": "_book_dark-blue",
    "zork0.b": "_book_dark-blue",
    "zork0.c": "_book_dark-blue",
    "zork0.d": "_book_dark-blue",
    "zork0.doc": "_book_medium-blue",
    "zork0.e": "_book_dark-blue",
    "zork0.f": "_book_dark-blue",
    "zork0.g": "_book_dark-blue",
    "zork0.h": "_book_dark-blue",
    "zork0.i": "_book_dark-blue",
    "zork0.j": "_book_dark-blue",
    "zork0.k": "_book_dark-blue",
    "zork0.l": "_book_dark-blue",
    "zork0.m": "_book_dark-blue",
    "zork0.n": "_book_dark-blue",
    "zork0.o": "_book_dark-blue",
    "zork0.p": "_book_dark-blue",
    "zork0.q": "_book_dark-blue",
    "zork0.r": "_book_dark-blue",
    "zork0.s": "_book_dark-blue",
    "zork0.t": "_book_dark-blue",
    "zork0.u": "_book_dark-blue",
    "zork0.v": "_book_dark-blue",
    "zork0.w": "_book_dark-blue",
    "zork0.x": "_book_dark-blue",
    "zork0.y": "_book_dark-blue",
    "zork0.z": "_book_dark-blue",
    "zork1.a": "_book_dark-blue",
    "zork1.b": "_book_dark-blue",
    "zork1.c": "_book_dark-blue",
    "zork1.d": "_book_dark-blue",
    "zork1.doc": "_book_medium-blue",
    "zork1.e": "_book_dark-blue",
    "zork1.f": "_book_dark-blue",
    "zork1.g": "_book_dark-blue",
    "zork1.h": "_book_dark-blue",
    "zork1.i": "_book_dark-blue",
    "zork1.j": "_book_dark-blue",
    "zork1.k": "_book_dark-blue",
    "zork1.l": "_book_dark-blue",
    "zork1.m": "_book_dark-blue",
    "zork1.n": "_book_dark-blue",
    "zork1.o": "_book_dark-blue",
    "zork1.p": "_book_dark-blue",
    "zork1.q": "_book_dark-blue",
    "zork1.r": "_book_dark-blue",
    "zork1.s": "_book_dark-blue",
    "zork1.t": "_book_dark-blue",
    "zork1.u": "_book_dark-blue",
    "zork1.v": "_book_dark-blue",
    "zork1.w": "_book_dark-blue",
    "zork1.x": "_book_dark-blue",
    "zork1.y": "_book_dark-blue",
    "zork1.z": "_book_dark-blue",
    "zork2.a": "_book_dark-blue",
    "zork2.b": "_book_dark-blue",
    "zork2.c": "_book_dark-blue",
    "zork2.d": "_book_dark-blue",
    "zork2.doc": "_book_medium-blue",
    "zork2.e": "_book_dark-blue",
    "zork2.f": "_book_dark-blue",
    "zork2.g": "_book_dark-blue",
    "zork2.h": "_book_dark-blue",
    "zork2.i": "_book_dark-blue",
    "zork2.j": "_book_dark-blue",
    "zork2.k": "_book_dark-blue",
    "zork2.l": "_book_dark-blue",
    "zork2.m": "_book_dark-blue",
    "zork2.n": "_book_dark-blue",
    "zork2.o": "_book_dark-blue",
    "zork2.p": "_book_dark-blue",
    "zork2.q": "_book_dark-blue",
    "zork2.r": "_book_dark-blue",
    "zork2.s": "_book_dark-blue",
    "zork2.t": "_book_dark-blue",
    "zork2.u": "_book_dark-blue",
    "zork2.v": "_book_dark-blue",
    "zork2.w": "_book_dark-blue",
    "zork2.x": "_book_dark-blue",
    "zork2.y": "_book_dark-blue",
    "zork2.z": "_book_dark-blue",
    "zork3.a": "_book_dark-blue",
    "zork3.b": "_book_dark-blue",
    "zork3.c": "_book_dark-blue",
    "zork3.d": "_book_dark-blue",
    "zork3.doc": "_book_medium-blue",
    "zork3.e": "_book_dark-blue",
    "zork3.f": "_book_dark-blue",
    "zork3.g": "_book_dark-blue",
    "zork3.h": "_book_dark-blue",
    "zork3.i": "_book_dark-blue",
    "zork3.j": "_book_dark-blue",
    "zork3.k": "_book_dark-blue",
    "zork3.l": "_book_dark-blue",
    "zork3.m": "_book_dark-blue",
    "zork3.n": "_book_dark-blue",
    "zork3.o": "_book_dark-blue",
    "zork3.p": "_book_dark-blue",
    "zork3.q": "_book_dark-blue",
    "zork3.r": "_book_dark-blue",
    "zork3.s": "_book_dark-blue",
    "zork3.t": "_book_dark-blue",
    "zork3.u": "_book_dark-blue",
    "zork3.v": "_book_dark-blue",
    "zork3.w": "_book_dark-blue",
    "zork3.x": "_book_dark-blue",
    "zork3.y": "_book_dark-blue",
    "zork3.z": "_book_dark-blue",
    "zork4.a": "_book_dark-blue",
    "zork4.b": "_book_dark-blue",
    "zork4.c": "_book_dark-blue",
    "zork4.d": "_book_dark-blue",
    "zork4.doc": "_book_medium-blue",
    "zork4.e": "_book_dark-blue",
    "zork4.f": "_book_dark-blue",
    "zork4.g": "_book_dark-blue",
    "zork4.h": "_book_dark-blue",
    "zork4.i": "_book_dark-blue",
    "zork4.j": "_book_dark-blue",
    "zork4.k": "_book_dark-blue",
    "zork4.l": "_book_dark-blue",
    "zork4.m": "_book_dark-blue",
    "zork4.n": "_book_dark-blue",
    "zork4.o": "_book_dark-blue",
    "zork4.p": "_book_dark-blue",
    "zork4.q": "_book_dark-blue",
    "zork4.r": "_book_dark-blue",
    "zork4.s": "_book_dark-blue",
    "zork4.t": "_book_dark-blue",
    "zork4.u": "_book_dark-blue",
    "zork4.v": "_book_dark-blue",
    "zork4.w": "_book_dark-blue",
    "zork4.x": "_book_dark-blue",
    "zork4.y": "_book_dark-blue",
    "zork4.z": "_book_dark-blue",
    "zork5.a": "_book_dark-blue",
    "zork5.b": "_book_dark-blue",
    "zork5.c": "_book_dark-blue",
    "zork5.d": "_book_dark-blue",
    "zork5.doc": "_book_medium-blue",
    "zork5.e": "_book_dark-blue",
    "zork5.f": "_book_dark-blue",
    "zork5.g": "_book_dark-blue",
    "zork5.h": "_book_dark-blue",
    "zork5.i": "_book_dark-blue",
    "zork5.j": "_book_dark-blue",
    "zork5.k": "_book_dark-blue",
    "zork5.l": "_book_dark-blue",
    "zork5.m": "_book_dark-blue",
    "zork5.n": "_book_dark-blue",
    "zork5.o": "_book_dark-blue",
    "zork5.p": "_book_dark-blue",
    "zork5.q": "_book_dark-blue",
    "zork5.r": "_book_dark-blue",
    "zork5.s": "_book_dark-blue",
    "zork5.t": "_book_dark-blue",
    "zork5.u": "_book_dark-blue",
    "zork5.v": "_book_dark-blue",
    "zork5.w": "_book_dark-blue",
    "zork5.x": "_book_dark-blue",
    "zork5.y": "_book_dark-blue",
    "zork5.z": "_book_dark-blue",
    "zork6.a": "_book_dark-blue",
    "zork6.b": "_book_dark-blue",
    "zork6.c": "_book_dark-blue",
    "zork6.d": "_book_dark-blue",
    "zork6.doc": "_book_medium-blue",
    "zork6.e": "_book_dark-blue",
    "zork6.f": "_book_dark-blue",
    "zork6.g": "_book_dark-blue",
    "zork6.h": "_book_dark-blue",
    "zork6.i": "_book_dark-blue",
    "zork6.j": "_book_dark-blue",
    "zork6.k": "_book_dark-blue",
    "zork6.l": "_book_dark-blue",
    "zork6.m": "_book_dark-blue",
    "zork6.n": "_book_dark-blue",
    "zork6.o": "_book_dark-blue",
    "zork6.p": "_book_dark-blue",
    "zork6.q": "_book_dark-blue",
    "zork6.r": "_book_dark-blue",
    "zork6.s": "_book_dark-blue",
    "zork6.t": "_book_dark-blue",
    "zork6.u": "_book_dark-blue",
    "zork6.v": "_book_dark-blue",
    "zork6.w": "_book_dark-blue",
    "zork6.x": "_book_dark-blue",
    "zork6.y": "_book_dark-blue",
    "zork6.z": "_book_dark-blue",
    "zork7.a": "_book_dark-blue",
    "zork7.b": "_book_dark-blue",
    "zork7.c": "_book_dark-blue",
    "zork7.d": "_book_dark-blue",
    "zork7.doc": "_book_medium-blue",
    "zork7.e": "_book_dark-blue",
    "zork7.f": "_book_dark-blue",
    "zork7.g": "_book_dark-blue",
    "zork7.h": "_book_dark-blue",
    "zork7.i": "_book_dark-blue",
    "zork7.j": "_book_dark-blue",
    "zork7.k": "_book_dark-blue",
    "zork7.l": "_book_dark-blue",
    "zork7.m": "_book_dark-blue",
    "zork7.n": "_book_dark-blue",
    "zork7.o": "_book_dark-blue",
    "zork7.p": "_book_dark-blue",
    "zork7.q": "_book_dark-blue",
    "zork7.r": "_book_dark-blue",
    "zork7.s": "_book_dark-blue",
    "zork7.t": "_book_dark-blue",
    "zork7.u": "_book_dark-blue",
    "zork7.v": "_book_dark-blue",
    "zork7.w": "_book_dark-blue",
    "zork7.x": "_book_dark-blue",
    "zork7.y": "_book_dark-blue",
    "zork7.z": "_book_dark-blue",
    "zork8.a": "_book_dark-blue",
    "zork8.b": "_book_dark-blue",
    "zork8.c": "_book_dark-blue",
    "zork8.d": "_book_dark-blue",
    "zork8.doc": "_book_medium-blue",
    "zork8.e": "_book_dark-blue",
    "zork8.f": "_book_dark-blue",
    "zork8.g": "_book_dark-blue",
    "zork8.h": "_book_dark-blue",
    "zork8.i": "_book_dark-blue",
    "zork8.j": "_book_dark-blue",
    "zork8.k": "_book_dark-blue",
    "zork8.l": "_book_dark-blue",
    "zork8.m": "_book_dark-blue",
    "zork8.n": "_book_dark-blue",
    "zork8.o": "_book_dark-blue",
    "zork8.p": "_book_dark-blue",
    "zork8.q": "_book_dark-blue",
    "zork8.r": "_book_dark-blue",
    "zork8.s": "_book_dark-blue",
    "zork8.t": "_book_dark-blue",
    "zork8.u": "_book_dark-blue",
    "zork8.v": "_book_dark-blue",
    "zork8.w": "_book_dark-blue",
    "zork8.x": "_book_dark-blue",
    "zork8.y": "_book_dark-blue",
    "zork8.z": "_book_dark-blue",
    "zork9.a": "_book_dark-blue",
    "zork9.b": "_book_dark-blue",
    "zork9.c": "_book_dark-blue",
    "zork9.d": "_book_dark-blue",
    "zork9.doc": "_book_medium-blue",
    "zork9.e": "_book_dark-blue",
    "zork9.f": "_book_dark-blue",
    "zork9.g": "_book_dark-blue",
    "zork9.h": "_book_dark-blue",
    "zork9.i": "_book_dark-blue",
    "zork9.j": "_book_dark-blue",
    "zork9.k": "_book_dark-blue",
    "zork9.l": "_book_dark-blue",
    "zork9.m": "_book_dark-blue",
    "zork9.n": "_book_dark-blue",
    "zork9.o": "_book_dark-blue",
    "zork9.p": "_book_dark-blue",
    "zork9.q": "_book_dark-blue",
    "zork9.r": "_book_dark-blue",
    "zork9.s": "_book_dark-blue",
    "zork9.t": "_book_dark-blue",
    "zork9.u": "_book_dark-blue",
    "zork9.v": "_book_dark-blue",
    "zork9.w": "_book_dark-blue",
    "zork9.x": "_book_dark-blue",
    "zork9.y": "_book_dark-blue",
    "zork9.z": "_book_dark-blue",
    zpreztorc: "_terminal_medium-blue",
    ".zpreztorc": "_terminal_medium-blue",
    zprofile: "_terminal_medium-blue",
    ".zprofile": "_terminal_medium-blue",
    zshenv: "_terminal_medium-blue",
    ".zshenv": "_terminal_medium-blue",
    zshrc: "_terminal_medium-blue",
    ".zshrc": "_terminal_medium-blue",
    ".zsrc.json": "_crafttweaker_medium-orange"
  };
  const folderNames = {
    ".acre": "_acre_dark-blue",
    ".agda": "_agda_dark-cyan",
    aplsource: "_acre_medium-blue",
    ".atom": "_atom_dark-green",
    ".atom-ci": "_atom_dark-green",
    ".azure-pipelines": "_azurepipelines_dark-blue",
    ".bitcoin": "_bitcoin_medium-orange",
    bloc: "_bloc_medium-cyan",
    "bower-components": "_bower_medium-yellow",
    bower_components: "_bower_medium-yellow",
    ".buildkite": "_buildkite_light-green",
    ".bundle": "_package",
    ".bzr": "_bazaar_medium-yellow",
    ".cabal": "_cabal_medium-cyan",
    ".circleci": "_circleci",
    cnab: "_cnab_dark-blue",
    ".cpan": "_cpan_medium-blue",
    ".cpanplus": "_cpan_dark-blue",
    cubit: "_cubit_medium-cyan",
    cubits: "_cubit_medium-cyan",
    cvs: "_cvs_medium-orange",
    ".devcontainer": "_devcontainer_medium-blue",
    ".docker": "_docker_dark-blue",
    dropbox: "_dropbox_medium-blue",
    ".dropbox.cache": "_dropbox_medium-blue",
    ".dub": "_dub_medium-red",
    ".dvc": "_dvc_light-blue",
    ".emacs.d": "_emacs_medium-purple",
    ".expo": "_expo_medium-blue",
    ".expo-shared": "_expo_medium-blue",
    ".fossil-settings": "_fossil",
    ".github": "_github",
    ".gitlab": "_gitlab",
    ".hg": "_hg_medium-grey",
    ".meteor": "_meteor_dark-orange",
    ".node-gyp": "_node_dark-green",
    node_modules: "_node_medium-green",
    ".nyc-output": "_istanbul_medium-orange",
    ".nyc_output": "_istanbul_medium-orange",
    ".paket": "_package",
    ".svn": "_svn",
    ".vim": "_vim_medium-green",
    ".vscode": "_vs",
    ".wine": "_wine_dark-red",
    ".yarn": "_yarn_medium-blue"
  };
  const languageIds = {
    "80386": "_asm-intel_dark-blue",
    "1c": "_1c_dark-orange",
    "1C": "_1c_dark-orange",
    "1centerprise": "_1c_medium-red",
    "1c enterprise": "_1c_medium-red",
    "1c-enterprise": "_1c_medium-red",
    "1c_enterprise": "_1c_medium-red",
    "1CEnterprise": "_1c_medium-red",
    "1C Enterprise": "_1c_medium-red",
    "1C-Enterprise": "_1c_medium-red",
    "1C_Enterprise": "_1c_medium-red",
    "1CENTERPRISE": "_1c_medium-red",
    "1C ENTERPRISE": "_1c_medium-red",
    "1C-ENTERPRISE": "_1c_medium-red",
    "1C_ENTERPRISE": "_1c_medium-red",
    "1cquery": "_1c_dark-orange",
    "1c query": "_1c_dark-orange",
    "1c-query": "_1c_dark-orange",
    "1c_query": "_1c_dark-orange",
    "1CQuery": "_1c_dark-orange",
    "1C Query": "_1c_dark-orange",
    "1C-Query": "_1c_dark-orange",
    "1C_Query": "_1c_dark-orange",
    "1CQUERY": "_1c_dark-orange",
    "1C QUERY": "_1c_dark-orange",
    "1C-QUERY": "_1c_dark-orange",
    "1C_QUERY": "_1c_dark-orange",
    "4d": "_4d_dark-blue",
    "4D": "_4d_dark-blue",
    "4dm": "_4d_dark-blue",
    "4gl": "_sql_medium-blue",
    abap: "_abap_medium-orange",
    ABAP: "_abap_medium-orange",
    abl: "_progress_medium-green",
    ABL: "_progress_medium-green",
    abnf: "_bnf_medium-green",
    abp: "_abap_medium-orange",
    aconf: "_apache_dark-red",
    ACONF: "_apache_dark-red",
    actionscript: "_as_medium-red",
    "action script": "_as_medium-red",
    "action-script": "_as_medium-red",
    action_script: "_as_medium-red",
    ActionScript: "_as_medium-red",
    "Action Script": "_as_medium-red",
    "Action-Script": "_as_medium-red",
    Action_Script: "_as_medium-red",
    ACTIONSCRIPT: "_as_medium-red",
    "ACTION SCRIPT": "_as_medium-red",
    "ACTION-SCRIPT": "_as_medium-red",
    ACTION_SCRIPT: "_as_medium-red",
    "actionscript.1": "_as_medium-red",
    actionscript1: "_as_medium-red",
    "actionscript 1": "_as_medium-red",
    "actionscript-1": "_as_medium-red",
    actionscript_1: "_as_medium-red",
    "action script1": "_as_medium-red",
    "action script 1": "_as_medium-red",
    "action script-1": "_as_medium-red",
    "action script_1": "_as_medium-red",
    "action-script1": "_as_medium-red",
    "action-script 1": "_as_medium-red",
    "action-script-1": "_as_medium-red",
    "action-script_1": "_as_medium-red",
    action_script1: "_as_medium-red",
    "action_script 1": "_as_medium-red",
    "action_script-1": "_as_medium-red",
    action_script_1: "_as_medium-red",
    ActionScript1: "_as_medium-red",
    "ActionScript 1": "_as_medium-red",
    "ActionScript-1": "_as_medium-red",
    ActionScript_1: "_as_medium-red",
    "Action Script1": "_as_medium-red",
    "Action Script 1": "_as_medium-red",
    "Action Script-1": "_as_medium-red",
    "Action Script_1": "_as_medium-red",
    "Action-Script1": "_as_medium-red",
    "Action-Script 1": "_as_medium-red",
    "Action-Script-1": "_as_medium-red",
    "Action-Script_1": "_as_medium-red",
    Action_Script1: "_as_medium-red",
    "Action_Script 1": "_as_medium-red",
    "Action_Script-1": "_as_medium-red",
    Action_Script_1: "_as_medium-red",
    ACTIONSCRIPT1: "_as_medium-red",
    "ACTIONSCRIPT 1": "_as_medium-red",
    "ACTIONSCRIPT-1": "_as_medium-red",
    ACTIONSCRIPT_1: "_as_medium-red",
    "ACTION SCRIPT1": "_as_medium-red",
    "ACTION SCRIPT 1": "_as_medium-red",
    "ACTION SCRIPT-1": "_as_medium-red",
    "ACTION SCRIPT_1": "_as_medium-red",
    "ACTION-SCRIPT1": "_as_medium-red",
    "ACTION-SCRIPT 1": "_as_medium-red",
    "ACTION-SCRIPT-1": "_as_medium-red",
    "ACTION-SCRIPT_1": "_as_medium-red",
    ACTION_SCRIPT1: "_as_medium-red",
    "ACTION_SCRIPT 1": "_as_medium-red",
    "ACTION_SCRIPT-1": "_as_medium-red",
    ACTION_SCRIPT_1: "_as_medium-red",
    "actionscript.2": "_as_medium-red",
    actionscript2: "_as_medium-red",
    "actionscript 2": "_as_medium-red",
    "actionscript-2": "_as_medium-red",
    actionscript_2: "_as_medium-red",
    "action script2": "_as_medium-red",
    "action script 2": "_as_medium-red",
    "action script-2": "_as_medium-red",
    "action script_2": "_as_medium-red",
    "action-script2": "_as_medium-red",
    "action-script 2": "_as_medium-red",
    "action-script-2": "_as_medium-red",
    "action-script_2": "_as_medium-red",
    action_script2: "_as_medium-red",
    "action_script 2": "_as_medium-red",
    "action_script-2": "_as_medium-red",
    action_script_2: "_as_medium-red",
    ActionScript2: "_as_medium-red",
    "ActionScript 2": "_as_medium-red",
    "ActionScript-2": "_as_medium-red",
    ActionScript_2: "_as_medium-red",
    "Action Script2": "_as_medium-red",
    "Action Script 2": "_as_medium-red",
    "Action Script-2": "_as_medium-red",
    "Action Script_2": "_as_medium-red",
    "Action-Script2": "_as_medium-red",
    "Action-Script 2": "_as_medium-red",
    "Action-Script-2": "_as_medium-red",
    "Action-Script_2": "_as_medium-red",
    Action_Script2: "_as_medium-red",
    "Action_Script 2": "_as_medium-red",
    "Action_Script-2": "_as_medium-red",
    Action_Script_2: "_as_medium-red",
    ACTIONSCRIPT2: "_as_medium-red",
    "ACTIONSCRIPT 2": "_as_medium-red",
    "ACTIONSCRIPT-2": "_as_medium-red",
    ACTIONSCRIPT_2: "_as_medium-red",
    "ACTION SCRIPT2": "_as_medium-red",
    "ACTION SCRIPT 2": "_as_medium-red",
    "ACTION SCRIPT-2": "_as_medium-red",
    "ACTION SCRIPT_2": "_as_medium-red",
    "ACTION-SCRIPT2": "_as_medium-red",
    "ACTION-SCRIPT 2": "_as_medium-red",
    "ACTION-SCRIPT-2": "_as_medium-red",
    "ACTION-SCRIPT_2": "_as_medium-red",
    ACTION_SCRIPT2: "_as_medium-red",
    "ACTION_SCRIPT 2": "_as_medium-red",
    "ACTION_SCRIPT-2": "_as_medium-red",
    ACTION_SCRIPT_2: "_as_medium-red",
    "actionscript.3": "_as_medium-red",
    actionscript3: "_as_medium-red",
    "actionscript 3": "_as_medium-red",
    "actionscript-3": "_as_medium-red",
    actionscript_3: "_as_medium-red",
    "action script3": "_as_medium-red",
    "action script 3": "_as_medium-red",
    "action script-3": "_as_medium-red",
    "action script_3": "_as_medium-red",
    "action-script3": "_as_medium-red",
    "action-script 3": "_as_medium-red",
    "action-script-3": "_as_medium-red",
    "action-script_3": "_as_medium-red",
    action_script3: "_as_medium-red",
    "action_script 3": "_as_medium-red",
    "action_script-3": "_as_medium-red",
    action_script_3: "_as_medium-red",
    ActionScript3: "_as_medium-red",
    "ActionScript 3": "_as_medium-red",
    "ActionScript-3": "_as_medium-red",
    ActionScript_3: "_as_medium-red",
    "Action Script3": "_as_medium-red",
    "Action Script 3": "_as_medium-red",
    "Action Script-3": "_as_medium-red",
    "Action Script_3": "_as_medium-red",
    "Action-Script3": "_as_medium-red",
    "Action-Script 3": "_as_medium-red",
    "Action-Script-3": "_as_medium-red",
    "Action-Script_3": "_as_medium-red",
    Action_Script3: "_as_medium-red",
    "Action_Script 3": "_as_medium-red",
    "Action_Script-3": "_as_medium-red",
    Action_Script_3: "_as_medium-red",
    ACTIONSCRIPT3: "_as_medium-red",
    "ACTIONSCRIPT 3": "_as_medium-red",
    "ACTIONSCRIPT-3": "_as_medium-red",
    ACTIONSCRIPT_3: "_as_medium-red",
    "ACTION SCRIPT3": "_as_medium-red",
    "ACTION SCRIPT 3": "_as_medium-red",
    "ACTION SCRIPT-3": "_as_medium-red",
    "ACTION SCRIPT_3": "_as_medium-red",
    "ACTION-SCRIPT3": "_as_medium-red",
    "ACTION-SCRIPT 3": "_as_medium-red",
    "ACTION-SCRIPT-3": "_as_medium-red",
    "ACTION-SCRIPT_3": "_as_medium-red",
    ACTION_SCRIPT3: "_as_medium-red",
    "ACTION_SCRIPT 3": "_as_medium-red",
    "ACTION_SCRIPT-3": "_as_medium-red",
    ACTION_SCRIPT_3: "_as_medium-red",
    ada: "_ada_medium-blue",
    Ada: "_ada_medium-blue",
    ADA: "_ada_medium-blue",
    ada2005: "_ada_medium-blue",
    ADA2005: "_ada_medium-blue",
    ada95: "_ada_medium-blue",
    ADA95: "_ada_medium-blue",
    advpl: "_totvs_medium-maroon",
    AdvPL: "_totvs_medium-maroon",
    ADVPL: "_totvs_medium-maroon",
    afdko: "_database_light-blue",
    AFDKO: "_database_light-blue",
    affect: "_affectscript_medium-pink",
    affectscript: "_affectscript_medium-pink",
    "affect script": "_affectscript_medium-pink",
    "affect-script": "_affectscript_medium-pink",
    affect_script: "_affectscript_medium-pink",
    AffectScript: "_affectscript_medium-pink",
    "Affect Script": "_affectscript_medium-pink",
    "Affect-Script": "_affectscript_medium-pink",
    Affect_Script: "_affectscript_medium-pink",
    AFFECTSCRIPT: "_affectscript_medium-pink",
    "AFFECT SCRIPT": "_affectscript_medium-pink",
    "AFFECT-SCRIPT": "_affectscript_medium-pink",
    AFFECT_SCRIPT: "_affectscript_medium-pink",
    afm: "_postscript_medium-green",
    agc: "_asm-agc_dark-blue",
    AGC: "_asm-agc_dark-blue",
    agda: "_agda_dark-cyan",
    Agda: "_agda_dark-cyan",
    AGDA: "_agda_dark-cyan",
    ahk: "_ahk_dark-blue",
    AHK: "_ahk_dark-blue",
    alloy: "_alloy_medium-red",
    Alloy: "_alloy_medium-red",
    ALLOY: "_alloy_medium-red",
    ampl: "_ampl_dark-maroon",
    AMPL: "_ampl_dark-maroon",
    amusewiki: "_amusewiki_dark-red",
    "amuse wiki": "_amusewiki_dark-red",
    "amuse-wiki": "_amusewiki_dark-red",
    amuse_wiki: "_amusewiki_dark-red",
    AmuseWiki: "_amusewiki_dark-red",
    "Amuse Wiki": "_amusewiki_dark-red",
    "Amuse-Wiki": "_amusewiki_dark-red",
    Amuse_Wiki: "_amusewiki_dark-red",
    AMUSEWIKI: "_amusewiki_dark-red",
    "AMUSE WIKI": "_amusewiki_dark-red",
    "AMUSE-WIKI": "_amusewiki_dark-red",
    AMUSE_WIKI: "_amusewiki_dark-red",
    angelcode: "_angelscript_medium-blue",
    "angel code": "_angelscript_medium-blue",
    "angel-code": "_angelscript_medium-blue",
    angel_code: "_angelscript_medium-blue",
    AngelCode: "_angelscript_medium-blue",
    "Angel Code": "_angelscript_medium-blue",
    "Angel-Code": "_angelscript_medium-blue",
    Angel_Code: "_angelscript_medium-blue",
    ANGELCODE: "_angelscript_medium-blue",
    "ANGEL CODE": "_angelscript_medium-blue",
    "ANGEL-CODE": "_angelscript_medium-blue",
    ANGEL_CODE: "_angelscript_medium-blue",
    angelscript: "_angelscript_medium-blue",
    "angel script": "_angelscript_medium-blue",
    "angel-script": "_angelscript_medium-blue",
    angel_script: "_angelscript_medium-blue",
    AngelScript: "_angelscript_medium-blue",
    "Angel Script": "_angelscript_medium-blue",
    "Angel-Script": "_angelscript_medium-blue",
    Angel_Script: "_angelscript_medium-blue",
    ANGELSCRIPT: "_angelscript_medium-blue",
    "ANGEL SCRIPT": "_angelscript_medium-blue",
    "ANGEL-SCRIPT": "_angelscript_medium-blue",
    ANGEL_SCRIPT: "_angelscript_medium-blue",
    ansible: "_ansible_dark-cyan",
    Ansible: "_ansible_dark-cyan",
    ANSIBLE: "_ansible_dark-cyan",
    "ansible-advanced": "_ansible_dark-cyan",
    "ansible.advanced": "_ansible_dark-cyan",
    antbuildsystem: "_ant_dark-pink",
    "antbuild system": "_ant_dark-pink",
    "antbuild-system": "_ant_dark-pink",
    antbuild_system: "_ant_dark-pink",
    "ant buildsystem": "_ant_dark-pink",
    "ant build system": "_ant_dark-pink",
    "ant build-system": "_ant_dark-pink",
    "ant build_system": "_ant_dark-pink",
    "ant-buildsystem": "_ant_dark-pink",
    "ant-build system": "_ant_dark-pink",
    "ant-build-system": "_ant_dark-pink",
    "ant-build_system": "_ant_dark-pink",
    ant_buildsystem: "_ant_dark-pink",
    "ant_build system": "_ant_dark-pink",
    "ant_build-system": "_ant_dark-pink",
    ant_build_system: "_ant_dark-pink",
    AntBuildSystem: "_ant_dark-pink",
    "AntBuild System": "_ant_dark-pink",
    "AntBuild-System": "_ant_dark-pink",
    AntBuild_System: "_ant_dark-pink",
    "Ant BuildSystem": "_ant_dark-pink",
    "Ant Build System": "_ant_dark-pink",
    "Ant Build-System": "_ant_dark-pink",
    "Ant Build_System": "_ant_dark-pink",
    "Ant-BuildSystem": "_ant_dark-pink",
    "Ant-Build System": "_ant_dark-pink",
    "Ant-Build-System": "_ant_dark-pink",
    "Ant-Build_System": "_ant_dark-pink",
    Ant_BuildSystem: "_ant_dark-pink",
    "Ant_Build System": "_ant_dark-pink",
    "Ant_Build-System": "_ant_dark-pink",
    Ant_Build_System: "_ant_dark-pink",
    ANTBUILDSYSTEM: "_ant_dark-pink",
    "ANTBUILD SYSTEM": "_ant_dark-pink",
    "ANTBUILD-SYSTEM": "_ant_dark-pink",
    ANTBUILD_SYSTEM: "_ant_dark-pink",
    "ANT BUILDSYSTEM": "_ant_dark-pink",
    "ANT BUILD SYSTEM": "_ant_dark-pink",
    "ANT BUILD-SYSTEM": "_ant_dark-pink",
    "ANT BUILD_SYSTEM": "_ant_dark-pink",
    "ANT-BUILDSYSTEM": "_ant_dark-pink",
    "ANT-BUILD SYSTEM": "_ant_dark-pink",
    "ANT-BUILD-SYSTEM": "_ant_dark-pink",
    "ANT-BUILD_SYSTEM": "_ant_dark-pink",
    ANT_BUILDSYSTEM: "_ant_dark-pink",
    "ANT_BUILD SYSTEM": "_ant_dark-pink",
    "ANT_BUILD-SYSTEM": "_ant_dark-pink",
    ANT_BUILD_SYSTEM: "_ant_dark-pink",
    antlr: "_antlr_medium-red",
    ANTLR: "_antlr_medium-red",
    anyscript: "_anyscript_dark-red",
    "any-script": "_anyscript_dark-red",
    "any script": "_anyscript_dark-red",
    any_script: "_anyscript_dark-red",
    AnyScript: "_anyscript_dark-red",
    "Any Script": "_anyscript_dark-red",
    "Any-Script": "_anyscript_dark-red",
    Any_Script: "_anyscript_dark-red",
    ANYSCRIPT: "_anyscript_dark-red",
    "ANY SCRIPT": "_anyscript_dark-red",
    "ANY-SCRIPT": "_anyscript_dark-red",
    ANY_SCRIPT: "_anyscript_dark-red",
    apache: "_apache_dark-red",
    Apache: "_apache_dark-red",
    APACHE: "_apache_dark-red",
    apacheconf: "_apache_dark-red",
    ApacheConf: "_apache_dark-red",
    APACHECONF: "_apache_dark-red",
    "apache-config": "_apache_dark-red",
    apib: "_api_medium-blue",
    apiblueprint: "_api_medium-blue",
    "api blueprint": "_api_medium-blue",
    "api-blueprint": "_api_medium-blue",
    api_blueprint: "_api_medium-blue",
    APIBlueprint: "_api_medium-blue",
    "API Blueprint": "_api_medium-blue",
    "API-Blueprint": "_api_medium-blue",
    API_Blueprint: "_api_medium-blue",
    APIBLUEPRINT: "_api_medium-blue",
    "API BLUEPRINT": "_api_medium-blue",
    "API-BLUEPRINT": "_api_medium-blue",
    API_BLUEPRINT: "_api_medium-blue",
    apl: "_apl_dark-cyan",
    APL: "_apl_dark-cyan",
    apollo11: "_asm-agc_dark-blue",
    "apollo 11": "_asm-agc_dark-blue",
    "apollo-11": "_asm-agc_dark-blue",
    apollo_11: "_asm-agc_dark-blue",
    Apollo11: "_asm-agc_dark-blue",
    "Apollo 11": "_asm-agc_dark-blue",
    "Apollo-11": "_asm-agc_dark-blue",
    Apollo_11: "_asm-agc_dark-blue",
    APOLLO11: "_asm-agc_dark-blue",
    "APOLLO 11": "_asm-agc_dark-blue",
    "APOLLO-11": "_asm-agc_dark-blue",
    APOLLO_11: "_asm-agc_dark-blue",
    apollo11guidancecomputer: "_asm-agc_dark-blue",
    "apollo11guidance computer": "_asm-agc_dark-blue",
    "apollo11guidance-computer": "_asm-agc_dark-blue",
    apollo11guidance_computer: "_asm-agc_dark-blue",
    "apollo11 guidancecomputer": "_asm-agc_dark-blue",
    "apollo11 guidance computer": "_asm-agc_dark-blue",
    "apollo11 guidance-computer": "_asm-agc_dark-blue",
    "apollo11 guidance_computer": "_asm-agc_dark-blue",
    "apollo11-guidancecomputer": "_asm-agc_dark-blue",
    "apollo11-guidance computer": "_asm-agc_dark-blue",
    "apollo11-guidance-computer": "_asm-agc_dark-blue",
    "apollo11-guidance_computer": "_asm-agc_dark-blue",
    apollo11_guidancecomputer: "_asm-agc_dark-blue",
    "apollo11_guidance computer": "_asm-agc_dark-blue",
    "apollo11_guidance-computer": "_asm-agc_dark-blue",
    apollo11_guidance_computer: "_asm-agc_dark-blue",
    "apollo 11guidancecomputer": "_asm-agc_dark-blue",
    "apollo 11guidance computer": "_asm-agc_dark-blue",
    "apollo 11guidance-computer": "_asm-agc_dark-blue",
    "apollo 11guidance_computer": "_asm-agc_dark-blue",
    "apollo 11 guidancecomputer": "_asm-agc_dark-blue",
    "apollo 11 guidance computer": "_asm-agc_dark-blue",
    "apollo 11 guidance-computer": "_asm-agc_dark-blue",
    "apollo 11 guidance_computer": "_asm-agc_dark-blue",
    "apollo 11-guidancecomputer": "_asm-agc_dark-blue",
    "apollo 11-guidance computer": "_asm-agc_dark-blue",
    "apollo 11-guidance-computer": "_asm-agc_dark-blue",
    "apollo 11-guidance_computer": "_asm-agc_dark-blue",
    "apollo 11_guidancecomputer": "_asm-agc_dark-blue",
    "apollo 11_guidance computer": "_asm-agc_dark-blue",
    "apollo 11_guidance-computer": "_asm-agc_dark-blue",
    "apollo 11_guidance_computer": "_asm-agc_dark-blue",
    "apollo-11guidancecomputer": "_asm-agc_dark-blue",
    "apollo-11guidance computer": "_asm-agc_dark-blue",
    "apollo-11guidance-computer": "_asm-agc_dark-blue",
    "apollo-11guidance_computer": "_asm-agc_dark-blue",
    "apollo-11 guidancecomputer": "_asm-agc_dark-blue",
    "apollo-11 guidance computer": "_asm-agc_dark-blue",
    "apollo-11 guidance-computer": "_asm-agc_dark-blue",
    "apollo-11 guidance_computer": "_asm-agc_dark-blue",
    "apollo-11-guidancecomputer": "_asm-agc_dark-blue",
    "apollo-11-guidance computer": "_asm-agc_dark-blue",
    "apollo-11-guidance-computer": "_asm-agc_dark-blue",
    "apollo-11-guidance_computer": "_asm-agc_dark-blue",
    "apollo-11_guidancecomputer": "_asm-agc_dark-blue",
    "apollo-11_guidance computer": "_asm-agc_dark-blue",
    "apollo-11_guidance-computer": "_asm-agc_dark-blue",
    "apollo-11_guidance_computer": "_asm-agc_dark-blue",
    apollo_11guidancecomputer: "_asm-agc_dark-blue",
    "apollo_11guidance computer": "_asm-agc_dark-blue",
    "apollo_11guidance-computer": "_asm-agc_dark-blue",
    apollo_11guidance_computer: "_asm-agc_dark-blue",
    "apollo_11 guidancecomputer": "_asm-agc_dark-blue",
    "apollo_11 guidance computer": "_asm-agc_dark-blue",
    "apollo_11 guidance-computer": "_asm-agc_dark-blue",
    "apollo_11 guidance_computer": "_asm-agc_dark-blue",
    "apollo_11-guidancecomputer": "_asm-agc_dark-blue",
    "apollo_11-guidance computer": "_asm-agc_dark-blue",
    "apollo_11-guidance-computer": "_asm-agc_dark-blue",
    "apollo_11-guidance_computer": "_asm-agc_dark-blue",
    apollo_11_guidancecomputer: "_asm-agc_dark-blue",
    "apollo_11_guidance computer": "_asm-agc_dark-blue",
    "apollo_11_guidance-computer": "_asm-agc_dark-blue",
    apollo_11_guidance_computer: "_asm-agc_dark-blue",
    Apollo11GuidanceComputer: "_asm-agc_dark-blue",
    "Apollo11Guidance Computer": "_asm-agc_dark-blue",
    "Apollo11Guidance-Computer": "_asm-agc_dark-blue",
    Apollo11Guidance_Computer: "_asm-agc_dark-blue",
    "Apollo11 GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo11 Guidance Computer": "_asm-agc_dark-blue",
    "Apollo11 Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo11 Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo11-GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo11-Guidance Computer": "_asm-agc_dark-blue",
    "Apollo11-Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo11-Guidance_Computer": "_asm-agc_dark-blue",
    Apollo11_GuidanceComputer: "_asm-agc_dark-blue",
    "Apollo11_Guidance Computer": "_asm-agc_dark-blue",
    "Apollo11_Guidance-Computer": "_asm-agc_dark-blue",
    Apollo11_Guidance_Computer: "_asm-agc_dark-blue",
    "Apollo 11GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo 11Guidance Computer": "_asm-agc_dark-blue",
    "Apollo 11Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo 11Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo 11 GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo 11 Guidance Computer": "_asm-agc_dark-blue",
    "Apollo 11 Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo 11 Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo 11-GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo 11-Guidance Computer": "_asm-agc_dark-blue",
    "Apollo 11-Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo 11-Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo 11_GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo 11_Guidance Computer": "_asm-agc_dark-blue",
    "Apollo 11_Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo 11_Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo-11GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo-11Guidance Computer": "_asm-agc_dark-blue",
    "Apollo-11Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo-11Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo-11 GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo-11 Guidance Computer": "_asm-agc_dark-blue",
    "Apollo-11 Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo-11 Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo-11-GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo-11-Guidance Computer": "_asm-agc_dark-blue",
    "Apollo-11-Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo-11-Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo-11_GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo-11_Guidance Computer": "_asm-agc_dark-blue",
    "Apollo-11_Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo-11_Guidance_Computer": "_asm-agc_dark-blue",
    Apollo_11GuidanceComputer: "_asm-agc_dark-blue",
    "Apollo_11Guidance Computer": "_asm-agc_dark-blue",
    "Apollo_11Guidance-Computer": "_asm-agc_dark-blue",
    Apollo_11Guidance_Computer: "_asm-agc_dark-blue",
    "Apollo_11 GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo_11 Guidance Computer": "_asm-agc_dark-blue",
    "Apollo_11 Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo_11 Guidance_Computer": "_asm-agc_dark-blue",
    "Apollo_11-GuidanceComputer": "_asm-agc_dark-blue",
    "Apollo_11-Guidance Computer": "_asm-agc_dark-blue",
    "Apollo_11-Guidance-Computer": "_asm-agc_dark-blue",
    "Apollo_11-Guidance_Computer": "_asm-agc_dark-blue",
    Apollo_11_GuidanceComputer: "_asm-agc_dark-blue",
    "Apollo_11_Guidance Computer": "_asm-agc_dark-blue",
    "Apollo_11_Guidance-Computer": "_asm-agc_dark-blue",
    Apollo_11_Guidance_Computer: "_asm-agc_dark-blue",
    APOLLO11GUIDANCECOMPUTER: "_asm-agc_dark-blue",
    "APOLLO11GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO11GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    APOLLO11GUIDANCE_COMPUTER: "_asm-agc_dark-blue",
    "APOLLO11 GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO11 GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO11 GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO11 GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO11-GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO11-GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO11-GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO11-GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    APOLLO11_GUIDANCECOMPUTER: "_asm-agc_dark-blue",
    "APOLLO11_GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO11_GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    APOLLO11_GUIDANCE_COMPUTER: "_asm-agc_dark-blue",
    "APOLLO 11GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11 GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11 GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11 GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11 GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11-GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11-GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11-GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11-GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11_GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11_GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11_GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO 11_GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11 GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11 GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11 GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11 GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11-GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11-GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11-GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11-GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11_GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11_GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11_GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO-11_GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    APOLLO_11GUIDANCECOMPUTER: "_asm-agc_dark-blue",
    "APOLLO_11GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    APOLLO_11GUIDANCE_COMPUTER: "_asm-agc_dark-blue",
    "APOLLO_11 GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11 GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11 GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11 GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11-GUIDANCECOMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11-GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11-GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11-GUIDANCE_COMPUTER": "_asm-agc_dark-blue",
    APOLLO_11_GUIDANCECOMPUTER: "_asm-agc_dark-blue",
    "APOLLO_11_GUIDANCE COMPUTER": "_asm-agc_dark-blue",
    "APOLLO_11_GUIDANCE-COMPUTER": "_asm-agc_dark-blue",
    APOLLO_11_GUIDANCE_COMPUTER: "_asm-agc_dark-blue",
    apple: "_apple_medium-purple",
    Apple: "_apple_medium-purple",
    APPLE: "_apple_medium-purple",
    applescript: "_apple_medium-purple",
    arduino: "_arduino_dark-cyan",
    Arduino: "_arduino_dark-cyan",
    ARDUINO: "_arduino_dark-cyan",
    arm: "_asm-arm_medium-blue",
    arr: "_pyret_dark-red",
    as3: "_as_medium-red",
    AS3: "_as_medium-red",
    asciidoc: "_asciidoctor_medium-blue",
    "ascii doc": "_asciidoctor_medium-blue",
    "ascii-doc": "_asciidoctor_medium-blue",
    ascii_doc: "_asciidoctor_medium-blue",
    AsciiDoc: "_asciidoctor_medium-blue",
    "Ascii Doc": "_asciidoctor_medium-blue",
    "Ascii-Doc": "_asciidoctor_medium-blue",
    Ascii_Doc: "_asciidoctor_medium-blue",
    ASCIIDOC: "_asciidoctor_medium-blue",
    "ASCII DOC": "_asciidoctor_medium-blue",
    "ASCII-DOC": "_asciidoctor_medium-blue",
    ASCII_DOC: "_asciidoctor_medium-blue",
    asl: "_code_medium-blue",
    asm: "_asm_medium-green",
    ASM: "_asm_medium-green",
    asp: "_asp_dark-blue",
    "asp.net": "_asp_dark-blue",
    "ASP.net": "_asp_dark-blue",
    "ASP.NET": "_asp_dark-blue",
    aspx: "_asp_dark-blue",
    ASPX: "_asp_dark-blue",
    "aspx-vb": "_asp_dark-blue",
    "ASPX-VB": "_asp_dark-blue",
    assembly: "_asm_medium-green",
    Assembly: "_asm_medium-green",
    ASSEMBLY: "_asm_medium-green",
    asymptote: "_asymptote_medium-red",
    Asymptote: "_asymptote_medium-red",
    ASYMPTOTE: "_asymptote_medium-red",
    atlilypond: "_lilypond_medium-green",
    ats: "_ats_medium-red",
    ATS: "_ats_medium-red",
    ats2: "_ats_medium-red",
    ATS2: "_ats_medium-red",
    au3: "_autoit_medium-purple",
    AU3: "_autoit_medium-purple",
    "augmentedbackus-naurform": "_bnf_medium-green",
    "augmentedbackus-naur form": "_bnf_medium-green",
    "augmentedbackus-naur-form": "_bnf_medium-green",
    "augmentedbackus-naur_form": "_bnf_medium-green",
    "augmented backus-naurform": "_bnf_medium-green",
    "augmented backus-naur form": "_bnf_medium-green",
    "augmented backus-naur-form": "_bnf_medium-green",
    "augmented backus-naur_form": "_bnf_medium-green",
    "augmented-backus-naurform": "_bnf_medium-green",
    "augmented-backus-naur form": "_bnf_medium-green",
    "augmented-backus-naur-form": "_bnf_medium-green",
    "augmented-backus-naur_form": "_bnf_medium-green",
    "augmented_backus-naurform": "_bnf_medium-green",
    "augmented_backus-naur form": "_bnf_medium-green",
    "augmented_backus-naur-form": "_bnf_medium-green",
    "augmented_backus-naur_form": "_bnf_medium-green",
    "AugmentedBackus-NaurForm": "_bnf_medium-green",
    "AugmentedBackus-Naur Form": "_bnf_medium-green",
    "AugmentedBackus-Naur-Form": "_bnf_medium-green",
    "AugmentedBackus-Naur_Form": "_bnf_medium-green",
    "Augmented Backus-NaurForm": "_bnf_medium-green",
    "Augmented Backus-Naur Form": "_bnf_medium-green",
    "Augmented Backus-Naur-Form": "_bnf_medium-green",
    "Augmented Backus-Naur_Form": "_bnf_medium-green",
    "Augmented-Backus-NaurForm": "_bnf_medium-green",
    "Augmented-Backus-Naur Form": "_bnf_medium-green",
    "Augmented-Backus-Naur-Form": "_bnf_medium-green",
    "Augmented-Backus-Naur_Form": "_bnf_medium-green",
    "Augmented_Backus-NaurForm": "_bnf_medium-green",
    "Augmented_Backus-Naur Form": "_bnf_medium-green",
    "Augmented_Backus-Naur-Form": "_bnf_medium-green",
    "Augmented_Backus-Naur_Form": "_bnf_medium-green",
    "AUGMENTEDBACKUS-NAURFORM": "_bnf_medium-green",
    "AUGMENTEDBACKUS-NAUR FORM": "_bnf_medium-green",
    "AUGMENTEDBACKUS-NAUR-FORM": "_bnf_medium-green",
    "AUGMENTEDBACKUS-NAUR_FORM": "_bnf_medium-green",
    "AUGMENTED BACKUS-NAURFORM": "_bnf_medium-green",
    "AUGMENTED BACKUS-NAUR FORM": "_bnf_medium-green",
    "AUGMENTED BACKUS-NAUR-FORM": "_bnf_medium-green",
    "AUGMENTED BACKUS-NAUR_FORM": "_bnf_medium-green",
    "AUGMENTED-BACKUS-NAURFORM": "_bnf_medium-green",
    "AUGMENTED-BACKUS-NAUR FORM": "_bnf_medium-green",
    "AUGMENTED-BACKUS-NAUR-FORM": "_bnf_medium-green",
    "AUGMENTED-BACKUS-NAUR_FORM": "_bnf_medium-green",
    "AUGMENTED_BACKUS-NAURFORM": "_bnf_medium-green",
    "AUGMENTED_BACKUS-NAUR FORM": "_bnf_medium-green",
    "AUGMENTED_BACKUS-NAUR-FORM": "_bnf_medium-green",
    "AUGMENTED_BACKUS-NAUR_FORM": "_bnf_medium-green",
    autohotkey: "_ahk_dark-blue",
    "auto hotkey": "_ahk_dark-blue",
    "auto-hotkey": "_ahk_dark-blue",
    auto_hotkey: "_ahk_dark-blue",
    AutoHotkey: "_ahk_dark-blue",
    "Auto Hotkey": "_ahk_dark-blue",
    "Auto-Hotkey": "_ahk_dark-blue",
    Auto_Hotkey: "_ahk_dark-blue",
    AUTOHOTKEY: "_ahk_dark-blue",
    "AUTO HOTKEY": "_ahk_dark-blue",
    "AUTO-HOTKEY": "_ahk_dark-blue",
    AUTO_HOTKEY: "_ahk_dark-blue",
    autoit: "_autoit_medium-purple",
    "auto it": "_autoit_medium-purple",
    "auto-it": "_autoit_medium-purple",
    auto_it: "_autoit_medium-purple",
    AutoIt: "_autoit_medium-purple",
    "Auto It": "_autoit_medium-purple",
    "Auto-It": "_autoit_medium-purple",
    Auto_It: "_autoit_medium-purple",
    AUTOIT: "_autoit_medium-purple",
    "AUTO IT": "_autoit_medium-purple",
    "AUTO-IT": "_autoit_medium-purple",
    AUTO_IT: "_autoit_medium-purple",
    autoit3: "_autoit_medium-purple",
    AutoIt3: "_autoit_medium-purple",
    AUTOIT3: "_autoit_medium-purple",
    autoitscript: "_autoit_medium-purple",
    AutoItScript: "_autoit_medium-purple",
    AUTOITSCRIPT: "_autoit_medium-purple",
    avrasm: "_asm-avr_dark-purple",
    avrdisasm: "_asm-avr_dark-purple",
    avro: "_avro_medium-blue",
    Avro: "_avro_medium-blue",
    AVRO: "_avro_medium-blue",
    "avro-idl": "_avro_medium-blue",
    awk: "_awk_medium-green",
    Awk: "_awk_medium-green",
    AWK: "_awk_medium-green",
    b3d: "_blitzbasic_medium-cyan",
    B3D: "_blitzbasic_medium-cyan",
    baan: "_code_dark-red",
    "backus-naurform": "_bnf_medium-maroon",
    "backus-naur form": "_bnf_medium-maroon",
    "backus-naur-form": "_bnf_medium-maroon",
    "backus-naur_form": "_bnf_medium-maroon",
    "Backus-NaurForm": "_bnf_medium-maroon",
    "Backus-Naur Form": "_bnf_medium-maroon",
    "Backus-Naur-Form": "_bnf_medium-maroon",
    "Backus-Naur_Form": "_bnf_medium-maroon",
    "BACKUS-NAURFORM": "_bnf_medium-maroon",
    "BACKUS-NAUR FORM": "_bnf_medium-maroon",
    "BACKUS-NAUR-FORM": "_bnf_medium-maroon",
    "BACKUS-NAUR_FORM": "_bnf_medium-maroon",
    ballerina: "_ballerina_medium-cyan",
    Ballerina: "_ballerina_medium-cyan",
    BALLERINA: "_ballerina_medium-cyan",
    bash: "_terminal_medium-purple",
    Bash: "_terminal_medium-purple",
    BASH: "_terminal_medium-purple",
    bashconsole: "_terminal_medium-yellow",
    BashConsole: "_terminal_medium-yellow",
    BASHCONSOLE: "_terminal_medium-yellow",
    bashsession: "_terminal_medium-yellow",
    BashSession: "_terminal_medium-yellow",
    BASHSESSION: "_terminal_medium-yellow",
    bat: "_windows_medium-purple",
    BAT: "_windows_medium-purple",
    batch: "_windows_medium-purple",
    Batch: "_windows_medium-purple",
    BATCH: "_windows_medium-purple",
    bats: "_test-generic_medium-grey",
    Bats: "_test-generic_medium-grey",
    BATS: "_test-generic_medium-grey",
    bazel: "_bazel_dark-blue",
    Bazel: "_bazel_dark-blue",
    BAZEL: "_bazel_dark-blue",
    bc: "_calc_medium-blue",
    BC: "_calc_medium-blue",
    bf: "_brain_dark-pink",
    BF: "_brain_dark-pink",
    bibtex: "_bibtex_medium-yellow",
    BibTeX: "_bibtex_medium-yellow",
    BIBTEX: "_bibtex_medium-yellow",
    bikeshed: "_bikeshed_medium-red",
    Bikeshed: "_bikeshed_medium-red",
    BIKESHED: "_bikeshed_medium-red",
    biml: "_biml_medium-red",
    Biml: "_biml_medium-red",
    BIML: "_biml_medium-red",
    binary: "_binary_medium-orange",
    Binary: "_binary_medium-orange",
    BINARY: "_binary_medium-orange",
    bison: "_bison_medium-red",
    Bison: "_bison_medium-red",
    BISON: "_bison_medium-red",
    blitz3d: "_blitzbasic_medium-cyan",
    BLITZ3D: "_blitzbasic_medium-cyan",
    blitzbasic: "_blitzbasic_medium-cyan",
    BlitzBASIC: "_blitzbasic_medium-cyan",
    BLITZBASIC: "_blitzbasic_medium-cyan",
    blitzmax: "_blitzbasic_medium-cyan",
    blitzplus: "_blitzbasic_medium-cyan",
    BLITZPLUS: "_blitzbasic_medium-cyan",
    bluespec: "_bluespec_dark-blue",
    Bluespec: "_bluespec_dark-blue",
    BLUESPEC: "_bluespec_dark-blue",
    bnf: "_bnf_medium-maroon",
    bolt: "_firebase-bolt_medium-yellow",
    boo: "_boo_medium-green",
    Boo: "_boo_medium-green",
    BOO: "_boo_medium-green",
    "boo.unity": "_boo_medium-green",
    bosque: "_bosque_medium-green",
    Bosque: "_bosque_medium-green",
    BOSQUE: "_bosque_medium-green",
    bplus: "_blitzbasic_medium-cyan",
    BPLUS: "_blitzbasic_medium-cyan",
    brainfck: "_brain_dark-pink",
    Brainfck: "_brain_dark-pink",
    BRAINFCK: "_brain_dark-pink",
    brainfuck: "_brain_dark-pink",
    Brainfuck: "_brain_dark-pink",
    BRAINFUCK: "_brain_dark-pink",
    brightscript: "_code_dark-blue",
    bro: "_bro_dark-cyan",
    Bro: "_bro_dark-cyan",
    BRO: "_bro_dark-cyan",
    bsdmake: "_checklist_medium-yellow",
    BSDMAKE: "_checklist_medium-yellow",
    bsl: "_1c_medium-red",
    bsq: "_bosque_medium-green",
    bsv: "_bluespec_dark-blue",
    build: "_bazel_medium-green",
    byond: "_byond_medium-blue",
    BYOND: "_byond_medium-blue",
    bzl: "_bazel_dark-blue",
    c: "_c_medium-blue",
    "c#": "_csharp_medium-blue",
    "c\u266F": "_csharp_medium-blue",
    "c++": "_cpp_medium-blue",
    C: "_c_medium-blue",
    "C#": "_csharp_medium-blue",
    "C\u266F": "_csharp_medium-blue",
    "C++": "_cpp_medium-blue",
    c2hs: "_haskell_dark-purple",
    C2hs: "_haskell_dark-purple",
    C2HS: "_haskell_dark-purple",
    c2hshaskell: "_haskell_dark-purple",
    C2hsHaskell: "_haskell_dark-purple",
    C2HSHASKELL: "_haskell_dark-purple",
    cabal: "_cabal_medium-cyan",
    Cabal: "_cabal_medium-cyan",
    CABAL: "_cabal_medium-cyan",
    cake: "_cake_medium-yellow",
    Cake: "_cake_medium-yellow",
    CAKE: "_cake_medium-yellow",
    capnp: "_code_dark-red",
    CAPNP: "_code_dark-red",
    capnproto: "_code_dark-red",
    "capn proto": "_code_dark-red",
    "capn-proto": "_code_dark-red",
    capn_proto: "_code_dark-red",
    "cap'nproto": "_code_dark-red",
    "cap'n proto": "_code_dark-red",
    "cap'n-proto": "_code_dark-red",
    "cap'n_proto": "_code_dark-red",
    CapnProto: "_code_dark-red",
    "Capn Proto": "_code_dark-red",
    "Capn-Proto": "_code_dark-red",
    Capn_Proto: "_code_dark-red",
    "Cap'nProto": "_code_dark-red",
    "Cap'n Proto": "_code_dark-red",
    "Cap'n-Proto": "_code_dark-red",
    "Cap'n_Proto": "_code_dark-red",
    CAPNPROTO: "_code_dark-red",
    "CAPN PROTO": "_code_dark-red",
    "CAPN-PROTO": "_code_dark-red",
    CAPN_PROTO: "_code_dark-red",
    "CAP'NPROTO": "_code_dark-red",
    "CAP'N PROTO": "_code_dark-red",
    "CAP'N-PROTO": "_code_dark-red",
    "CAP'N_PROTO": "_code_dark-red",
    carto: "_mapbox_medium-cyan",
    Carto: "_mapbox_medium-cyan",
    CARTO: "_mapbox_medium-cyan",
    cartocss: "_mapbox_medium-cyan",
    CartoCSS: "_mapbox_medium-cyan",
    CARTOCSS: "_mapbox_medium-cyan",
    casc: "_casc_medium-orange",
    CASC: "_casc_medium-orange",
    cddl: "_bnf_medium-grey",
    cfc: "_cf_light-cyan",
    CFC: "_cf_light-cyan",
    cfl: "_cuneiform_dark-blue",
    cfm: "_cf_medium-cyan",
    cfml: "_cf_medium-cyan",
    CFML: "_cf_medium-cyan",
    cfscript: "_cf_light-cyan",
    CFScript: "_cf_light-cyan",
    CFSCRIPT: "_cf_light-cyan",
    cg: "_model_medium-cyan",
    chapel: "_chapel_medium-green",
    Chapel: "_chapel_medium-green",
    CHAPEL: "_chapel_medium-green",
    checklist: "_checklist_medium-green",
    Checklist: "_checklist_medium-green",
    CHECKLIST: "_checklist_medium-green",
    checksums: "_tag_medium-green",
    chem: "_manpage_dark-green",
    CHEM: "_manpage_dark-green",
    chpl: "_chapel_medium-green",
    CHPL: "_chapel_medium-green",
    chuck: "_chuck_medium-green",
    ChucK: "_chuck_medium-green",
    CHUCK: "_chuck_medium-green",
    cidmap: "_sourcemap_medium-orange",
    CIDMAP: "_sourcemap_medium-orange",
    cirru: "_cirru_medium-pink",
    Cirru: "_cirru_medium-pink",
    CIRRU: "_cirru_medium-pink",
    clarion: "_clarion_medium-orange",
    Clarion: "_clarion_medium-orange",
    CLARION: "_clarion_medium-orange",
    clean: "_clean_dark-cyan",
    Clean: "_clean_dark-cyan",
    CLEAN: "_clean_dark-cyan",
    click: "_click_medium-yellow",
    "click!": "_click_medium-yellow",
    Click: "_click_medium-yellow",
    "Click!": "_click_medium-yellow",
    CLICK: "_click_medium-yellow",
    "CLICK!": "_click_medium-yellow",
    clips: "_clips_dark-green",
    CLIPS: "_clips_dark-green",
    clisp: "_cl_medium-orange",
    CLISP: "_cl_medium-orange",
    clojure: "_clojure_medium-blue",
    Clojure: "_clojure_medium-blue",
    CLOJURE: "_clojure_medium-blue",
    closuretemplate: "_closure-tpl_medium-blue",
    "closure template": "_closure-tpl_medium-blue",
    "closure-template": "_closure-tpl_medium-blue",
    closure_template: "_closure-tpl_medium-blue",
    ClosureTemplate: "_closure-tpl_medium-blue",
    "Closure Template": "_closure-tpl_medium-blue",
    "Closure-Template": "_closure-tpl_medium-blue",
    Closure_Template: "_closure-tpl_medium-blue",
    CLOSURETEMPLATE: "_closure-tpl_medium-blue",
    "CLOSURE TEMPLATE": "_closure-tpl_medium-blue",
    "CLOSURE-TEMPLATE": "_closure-tpl_medium-blue",
    CLOSURE_TEMPLATE: "_closure-tpl_medium-blue",
    cmake: "_cmake_medium-green",
    CMake: "_cmake_medium-green",
    CMAKE: "_cmake_medium-green",
    cobol: "_cobol_medium-blue",
    COBOL: "_cobol_medium-blue",
    coccinelle: "_code_medium-blue",
    Coccinelle: "_code_medium-blue",
    COCCINELLE: "_code_medium-blue",
    "code-text-binary": "_binary_medium-red",
    coffee: "_coffee_medium-maroon",
    Coffee: "_coffee_medium-maroon",
    COFFEE: "_coffee_medium-maroon",
    coffeescript: "_coffee_light-maroon",
    "coffee script": "_coffee_light-maroon",
    "coffee-script": "_coffee_light-maroon",
    coffee_script: "_coffee_light-maroon",
    CoffeeScript: "_coffee_light-maroon",
    "Coffee Script": "_coffee_light-maroon",
    "Coffee-Script": "_coffee_light-maroon",
    Coffee_Script: "_coffee_light-maroon",
    COFFEESCRIPT: "_coffee_light-maroon",
    "COFFEE SCRIPT": "_coffee_light-maroon",
    "COFFEE-SCRIPT": "_coffee_light-maroon",
    COFFEE_SCRIPT: "_coffee_light-maroon",
    coldfusion: "_cf_medium-cyan",
    "cold fusion": "_cf_medium-cyan",
    "cold-fusion": "_cf_medium-cyan",
    cold_fusion: "_cf_medium-cyan",
    ColdFusion: "_cf_medium-cyan",
    "Cold Fusion": "_cf_medium-cyan",
    "Cold-Fusion": "_cf_medium-cyan",
    Cold_Fusion: "_cf_medium-cyan",
    COLDFUSION: "_cf_medium-cyan",
    "COLD FUSION": "_cf_medium-cyan",
    "COLD-FUSION": "_cf_medium-cyan",
    COLD_FUSION: "_cf_medium-cyan",
    coldfusionhtml: "_cf_medium-cyan",
    "coldfusion html": "_cf_medium-cyan",
    "coldfusion-html": "_cf_medium-cyan",
    coldfusion_html: "_cf_medium-cyan",
    ColdFusionHTML: "_cf_medium-cyan",
    "ColdFusion HTML": "_cf_medium-cyan",
    "ColdFusion-HTML": "_cf_medium-cyan",
    ColdFusion_HTML: "_cf_medium-cyan",
    COLDFUSIONHTML: "_cf_medium-cyan",
    "COLDFUSION HTML": "_cf_medium-cyan",
    "COLDFUSION-HTML": "_cf_medium-cyan",
    COLDFUSION_HTML: "_cf_medium-cyan",
    "common-lisp": "_cl_medium-orange",
    commonlisp: "_cl_medium-orange",
    "common lisp": "_cl_medium-orange",
    common_lisp: "_cl_medium-orange",
    CommonLisp: "_cl_medium-orange",
    "Common Lisp": "_cl_medium-orange",
    "Common-Lisp": "_cl_medium-orange",
    Common_Lisp: "_cl_medium-orange",
    COMMONLISP: "_cl_medium-orange",
    "COMMON LISP": "_cl_medium-orange",
    "COMMON-LISP": "_cl_medium-orange",
    COMMON_LISP: "_cl_medium-orange",
    commonmark: "_markdown_medium-blue",
    CommonMark: "_markdown_medium-blue",
    COMMONMARK: "_markdown_medium-blue",
    commonworkflowlanguage: "_cwl_dark-red",
    "commonworkflow language": "_cwl_dark-red",
    "commonworkflow-language": "_cwl_dark-red",
    commonworkflow_language: "_cwl_dark-red",
    "common workflowlanguage": "_cwl_dark-red",
    "common workflow language": "_cwl_dark-red",
    "common workflow-language": "_cwl_dark-red",
    "common workflow_language": "_cwl_dark-red",
    "common-workflowlanguage": "_cwl_dark-red",
    "common-workflow language": "_cwl_dark-red",
    "common-workflow-language": "_cwl_dark-red",
    "common-workflow_language": "_cwl_dark-red",
    common_workflowlanguage: "_cwl_dark-red",
    "common_workflow language": "_cwl_dark-red",
    "common_workflow-language": "_cwl_dark-red",
    common_workflow_language: "_cwl_dark-red",
    CommonWorkflowLanguage: "_cwl_dark-red",
    "CommonWorkflow Language": "_cwl_dark-red",
    "CommonWorkflow-Language": "_cwl_dark-red",
    CommonWorkflow_Language: "_cwl_dark-red",
    "Common WorkflowLanguage": "_cwl_dark-red",
    "Common Workflow Language": "_cwl_dark-red",
    "Common Workflow-Language": "_cwl_dark-red",
    "Common Workflow_Language": "_cwl_dark-red",
    "Common-WorkflowLanguage": "_cwl_dark-red",
    "Common-Workflow Language": "_cwl_dark-red",
    "Common-Workflow-Language": "_cwl_dark-red",
    "Common-Workflow_Language": "_cwl_dark-red",
    Common_WorkflowLanguage: "_cwl_dark-red",
    "Common_Workflow Language": "_cwl_dark-red",
    "Common_Workflow-Language": "_cwl_dark-red",
    Common_Workflow_Language: "_cwl_dark-red",
    COMMONWORKFLOWLANGUAGE: "_cwl_dark-red",
    "COMMONWORKFLOW LANGUAGE": "_cwl_dark-red",
    "COMMONWORKFLOW-LANGUAGE": "_cwl_dark-red",
    COMMONWORKFLOW_LANGUAGE: "_cwl_dark-red",
    "COMMON WORKFLOWLANGUAGE": "_cwl_dark-red",
    "COMMON WORKFLOW LANGUAGE": "_cwl_dark-red",
    "COMMON WORKFLOW-LANGUAGE": "_cwl_dark-red",
    "COMMON WORKFLOW_LANGUAGE": "_cwl_dark-red",
    "COMMON-WORKFLOWLANGUAGE": "_cwl_dark-red",
    "COMMON-WORKFLOW LANGUAGE": "_cwl_dark-red",
    "COMMON-WORKFLOW-LANGUAGE": "_cwl_dark-red",
    "COMMON-WORKFLOW_LANGUAGE": "_cwl_dark-red",
    COMMON_WORKFLOWLANGUAGE: "_cwl_dark-red",
    "COMMON_WORKFLOW LANGUAGE": "_cwl_dark-red",
    "COMMON_WORKFLOW-LANGUAGE": "_cwl_dark-red",
    COMMON_WORKFLOW_LANGUAGE: "_cwl_dark-red",
    compiledpapyrus: "_papyrus_medium-green",
    "compiled-papyrus": "_papyrus_medium-green",
    concisedatadefinitionlanguage: "_bnf_medium-grey",
    "concisedatadefinition language": "_bnf_medium-grey",
    "concisedatadefinition-language": "_bnf_medium-grey",
    concisedatadefinition_language: "_bnf_medium-grey",
    "concisedata definitionlanguage": "_bnf_medium-grey",
    "concisedata definition language": "_bnf_medium-grey",
    "concisedata definition-language": "_bnf_medium-grey",
    "concisedata definition_language": "_bnf_medium-grey",
    "concisedata-definitionlanguage": "_bnf_medium-grey",
    "concisedata-definition language": "_bnf_medium-grey",
    "concisedata-definition-language": "_bnf_medium-grey",
    "concisedata-definition_language": "_bnf_medium-grey",
    concisedata_definitionlanguage: "_bnf_medium-grey",
    "concisedata_definition language": "_bnf_medium-grey",
    "concisedata_definition-language": "_bnf_medium-grey",
    concisedata_definition_language: "_bnf_medium-grey",
    "concise datadefinitionlanguage": "_bnf_medium-grey",
    "concise datadefinition language": "_bnf_medium-grey",
    "concise datadefinition-language": "_bnf_medium-grey",
    "concise datadefinition_language": "_bnf_medium-grey",
    "concise data definitionlanguage": "_bnf_medium-grey",
    "concise data definition language": "_bnf_medium-grey",
    "concise data definition-language": "_bnf_medium-grey",
    "concise data definition_language": "_bnf_medium-grey",
    "concise data-definitionlanguage": "_bnf_medium-grey",
    "concise data-definition language": "_bnf_medium-grey",
    "concise data-definition-language": "_bnf_medium-grey",
    "concise data-definition_language": "_bnf_medium-grey",
    "concise data_definitionlanguage": "_bnf_medium-grey",
    "concise data_definition language": "_bnf_medium-grey",
    "concise data_definition-language": "_bnf_medium-grey",
    "concise data_definition_language": "_bnf_medium-grey",
    "concise-datadefinitionlanguage": "_bnf_medium-grey",
    "concise-datadefinition language": "_bnf_medium-grey",
    "concise-datadefinition-language": "_bnf_medium-grey",
    "concise-datadefinition_language": "_bnf_medium-grey",
    "concise-data definitionlanguage": "_bnf_medium-grey",
    "concise-data definition language": "_bnf_medium-grey",
    "concise-data definition-language": "_bnf_medium-grey",
    "concise-data definition_language": "_bnf_medium-grey",
    "concise-data-definitionlanguage": "_bnf_medium-grey",
    "concise-data-definition language": "_bnf_medium-grey",
    "concise-data-definition-language": "_bnf_medium-grey",
    "concise-data-definition_language": "_bnf_medium-grey",
    "concise-data_definitionlanguage": "_bnf_medium-grey",
    "concise-data_definition language": "_bnf_medium-grey",
    "concise-data_definition-language": "_bnf_medium-grey",
    "concise-data_definition_language": "_bnf_medium-grey",
    concise_datadefinitionlanguage: "_bnf_medium-grey",
    "concise_datadefinition language": "_bnf_medium-grey",
    "concise_datadefinition-language": "_bnf_medium-grey",
    concise_datadefinition_language: "_bnf_medium-grey",
    "concise_data definitionlanguage": "_bnf_medium-grey",
    "concise_data definition language": "_bnf_medium-grey",
    "concise_data definition-language": "_bnf_medium-grey",
    "concise_data definition_language": "_bnf_medium-grey",
    "concise_data-definitionlanguage": "_bnf_medium-grey",
    "concise_data-definition language": "_bnf_medium-grey",
    "concise_data-definition-language": "_bnf_medium-grey",
    "concise_data-definition_language": "_bnf_medium-grey",
    concise_data_definitionlanguage: "_bnf_medium-grey",
    "concise_data_definition language": "_bnf_medium-grey",
    "concise_data_definition-language": "_bnf_medium-grey",
    concise_data_definition_language: "_bnf_medium-grey",
    ConciseDataDefinitionLanguage: "_bnf_medium-grey",
    "ConciseDataDefinition Language": "_bnf_medium-grey",
    "ConciseDataDefinition-Language": "_bnf_medium-grey",
    ConciseDataDefinition_Language: "_bnf_medium-grey",
    "ConciseData DefinitionLanguage": "_bnf_medium-grey",
    "ConciseData Definition Language": "_bnf_medium-grey",
    "ConciseData Definition-Language": "_bnf_medium-grey",
    "ConciseData Definition_Language": "_bnf_medium-grey",
    "ConciseData-DefinitionLanguage": "_bnf_medium-grey",
    "ConciseData-Definition Language": "_bnf_medium-grey",
    "ConciseData-Definition-Language": "_bnf_medium-grey",
    "ConciseData-Definition_Language": "_bnf_medium-grey",
    ConciseData_DefinitionLanguage: "_bnf_medium-grey",
    "ConciseData_Definition Language": "_bnf_medium-grey",
    "ConciseData_Definition-Language": "_bnf_medium-grey",
    ConciseData_Definition_Language: "_bnf_medium-grey",
    "Concise DataDefinitionLanguage": "_bnf_medium-grey",
    "Concise DataDefinition Language": "_bnf_medium-grey",
    "Concise DataDefinition-Language": "_bnf_medium-grey",
    "Concise DataDefinition_Language": "_bnf_medium-grey",
    "Concise Data DefinitionLanguage": "_bnf_medium-grey",
    "Concise Data Definition Language": "_bnf_medium-grey",
    "Concise Data Definition-Language": "_bnf_medium-grey",
    "Concise Data Definition_Language": "_bnf_medium-grey",
    "Concise Data-DefinitionLanguage": "_bnf_medium-grey",
    "Concise Data-Definition Language": "_bnf_medium-grey",
    "Concise Data-Definition-Language": "_bnf_medium-grey",
    "Concise Data-Definition_Language": "_bnf_medium-grey",
    "Concise Data_DefinitionLanguage": "_bnf_medium-grey",
    "Concise Data_Definition Language": "_bnf_medium-grey",
    "Concise Data_Definition-Language": "_bnf_medium-grey",
    "Concise Data_Definition_Language": "_bnf_medium-grey",
    "Concise-DataDefinitionLanguage": "_bnf_medium-grey",
    "Concise-DataDefinition Language": "_bnf_medium-grey",
    "Concise-DataDefinition-Language": "_bnf_medium-grey",
    "Concise-DataDefinition_Language": "_bnf_medium-grey",
    "Concise-Data DefinitionLanguage": "_bnf_medium-grey",
    "Concise-Data Definition Language": "_bnf_medium-grey",
    "Concise-Data Definition-Language": "_bnf_medium-grey",
    "Concise-Data Definition_Language": "_bnf_medium-grey",
    "Concise-Data-DefinitionLanguage": "_bnf_medium-grey",
    "Concise-Data-Definition Language": "_bnf_medium-grey",
    "Concise-Data-Definition-Language": "_bnf_medium-grey",
    "Concise-Data-Definition_Language": "_bnf_medium-grey",
    "Concise-Data_DefinitionLanguage": "_bnf_medium-grey",
    "Concise-Data_Definition Language": "_bnf_medium-grey",
    "Concise-Data_Definition-Language": "_bnf_medium-grey",
    "Concise-Data_Definition_Language": "_bnf_medium-grey",
    Concise_DataDefinitionLanguage: "_bnf_medium-grey",
    "Concise_DataDefinition Language": "_bnf_medium-grey",
    "Concise_DataDefinition-Language": "_bnf_medium-grey",
    Concise_DataDefinition_Language: "_bnf_medium-grey",
    "Concise_Data DefinitionLanguage": "_bnf_medium-grey",
    "Concise_Data Definition Language": "_bnf_medium-grey",
    "Concise_Data Definition-Language": "_bnf_medium-grey",
    "Concise_Data Definition_Language": "_bnf_medium-grey",
    "Concise_Data-DefinitionLanguage": "_bnf_medium-grey",
    "Concise_Data-Definition Language": "_bnf_medium-grey",
    "Concise_Data-Definition-Language": "_bnf_medium-grey",
    "Concise_Data-Definition_Language": "_bnf_medium-grey",
    Concise_Data_DefinitionLanguage: "_bnf_medium-grey",
    "Concise_Data_Definition Language": "_bnf_medium-grey",
    "Concise_Data_Definition-Language": "_bnf_medium-grey",
    Concise_Data_Definition_Language: "_bnf_medium-grey",
    CONCISEDATADEFINITIONLANGUAGE: "_bnf_medium-grey",
    "CONCISEDATADEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISEDATADEFINITION-LANGUAGE": "_bnf_medium-grey",
    CONCISEDATADEFINITION_LANGUAGE: "_bnf_medium-grey",
    "CONCISEDATA DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA DEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA-DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA-DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA-DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA-DEFINITION_LANGUAGE": "_bnf_medium-grey",
    CONCISEDATA_DEFINITIONLANGUAGE: "_bnf_medium-grey",
    "CONCISEDATA_DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISEDATA_DEFINITION-LANGUAGE": "_bnf_medium-grey",
    CONCISEDATA_DEFINITION_LANGUAGE: "_bnf_medium-grey",
    "CONCISE DATADEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE DATADEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATADEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATADEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA DEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA-DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA-DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA-DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA-DEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA_DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA_DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA_DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE DATA_DEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATADEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATADEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATADEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATADEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA DEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA-DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA-DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA-DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA-DEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA_DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA_DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA_DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE-DATA_DEFINITION_LANGUAGE": "_bnf_medium-grey",
    CONCISE_DATADEFINITIONLANGUAGE: "_bnf_medium-grey",
    "CONCISE_DATADEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATADEFINITION-LANGUAGE": "_bnf_medium-grey",
    CONCISE_DATADEFINITION_LANGUAGE: "_bnf_medium-grey",
    "CONCISE_DATA DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA DEFINITION_LANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA-DEFINITIONLANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA-DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA-DEFINITION-LANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA-DEFINITION_LANGUAGE": "_bnf_medium-grey",
    CONCISE_DATA_DEFINITIONLANGUAGE: "_bnf_medium-grey",
    "CONCISE_DATA_DEFINITION LANGUAGE": "_bnf_medium-grey",
    "CONCISE_DATA_DEFINITION-LANGUAGE": "_bnf_medium-grey",
    CONCISE_DATA_DEFINITION_LANGUAGE: "_bnf_medium-grey",
    conll: "_conll_medium-blue",
    CoNLL: "_conll_medium-blue",
    CONLL: "_conll_medium-blue",
    conllu: "_conll_medium-blue",
    CoNLLU: "_conll_medium-blue",
    CONLLU: "_conll_medium-blue",
    conllx: "_conll_medium-blue",
    CoNLLX: "_conll_medium-blue",
    CONLLX: "_conll_medium-blue",
    containerfile: "_docker_dark-blue",
    Containerfile: "_docker_dark-blue",
    CONTAINERFILE: "_docker_dark-blue",
    coq: "_coq_medium-maroon",
    Coq: "_coq_medium-maroon",
    COQ: "_coq_medium-maroon",
    cpc: "_cpcdosc_medium-blue",
    "cpcdosc+": "_cpcdosc_medium-blue",
    "CpcdosC+": "_cpcdosc_medium-blue",
    "CPCDOSC+": "_cpcdosc_medium-blue",
    cperl: "_perl_medium-blue",
    CPerl: "_perl_medium-blue",
    CPERL: "_perl_medium-blue",
    cplusplus: "_cpp_medium-blue",
    CPLUSPLUS: "_cpp_medium-blue",
    cpp: "_cpp_medium-blue",
    "c-pp": "_cpp_medium-blue",
    c_pp: "_cpp_medium-blue",
    CPP: "_cpp_medium-blue",
    "C-PP": "_cpp_medium-blue",
    C_PP: "_cpp_medium-blue",
    cpu12: "_asm-m68k_medium-blue",
    "cpu 12": "_asm-m68k_medium-blue",
    "cpu-12": "_asm-m68k_medium-blue",
    cpu_12: "_asm-m68k_medium-blue",
    creole: "_creole_medium-blue",
    Creole: "_creole_medium-blue",
    CREOLE: "_creole_medium-blue",
    crystal: "_crystal_medium-cyan",
    Crystal: "_crystal_medium-cyan",
    CRYSTAL: "_crystal_medium-cyan",
    cs: "_csharp_medium-blue",
    "c#-script": "_csscript_dark-green",
    "C#-Script": "_csscript_dark-green",
    "C#-SCRIPT": "_csscript_dark-green",
    csharp: "_csharp_medium-blue",
    "c sharp": "_csharp_medium-blue",
    "c-sharp": "_csharp_medium-blue",
    c_sharp: "_csharp_medium-blue",
    CSharp: "_csharp_medium-blue",
    "C Sharp": "_csharp_medium-blue",
    "C-Sharp": "_csharp_medium-blue",
    C_Sharp: "_csharp_medium-blue",
    CSHARP: "_csharp_medium-blue",
    "C SHARP": "_csharp_medium-blue",
    "C-SHARP": "_csharp_medium-blue",
    C_SHARP: "_csharp_medium-blue",
    csound: "_csound_dark-blue",
    Csound: "_csound_dark-blue",
    CSOUND: "_csound_dark-blue",
    "csound-csd": "_csound_dark-maroon",
    "CSOUND-CSD": "_csound_dark-maroon",
    "csound-document": "_csound_dark-maroon",
    "csound-orc": "_csound_medium-maroon",
    "CSOUND-ORC": "_csound_medium-maroon",
    "csound-sco": "_csound_dark-blue",
    "CSOUND-SCO": "_csound_dark-blue",
    "csound-score": "_csound_dark-blue",
    css: "_css3_dark-red",
    CSS: "_css3_dark-red",
    "css.less": "_css3_dark-blue",
    csswg: "_bikeshed_medium-red",
    csv: "_graph_light-red",
    "csv.semicolon": "_graph_light-red",
    csx: "_csscript_dark-green",
    cucumber: "_cucumber_medium-green",
    Cucumber: "_cucumber_medium-green",
    CUCUMBER: "_cucumber_medium-green",
    "cucumber.steps": "_cucumber_medium-green",
    cuda: "_nvidia_medium-green",
    CUDA: "_nvidia_medium-green",
    "cudac++": "_nvidia_medium-green",
    "cuda c++": "_nvidia_medium-green",
    "cuda-c++": "_nvidia_medium-green",
    "cuda_c++": "_nvidia_medium-green",
    cudacpp: "_nvidia_medium-green",
    "cuda cpp": "_nvidia_medium-green",
    "cuda-cpp": "_nvidia_medium-green",
    cuda_cpp: "_nvidia_medium-green",
    cuneiform: "_cuneiform_dark-blue",
    Cuneiform: "_cuneiform_dark-blue",
    CUNEIFORM: "_cuneiform_dark-blue",
    curl: "_curl_dark-blue",
    cURL: "_curl_dark-blue",
    CURL: "_curl_dark-blue",
    curlrc: "_curl_dark-blue",
    curry: "_curry_medium-red",
    Curry: "_curry_medium-red",
    CURRY: "_curry_medium-red",
    cwl: "_cwl_dark-red",
    CWL: "_cwl_dark-red",
    cython: "_cython_medium-orange",
    Cython: "_cython_medium-orange",
    CYTHON: "_cython_medium-orange",
    d: "_dlang_medium-red",
    D: "_dlang_medium-red",
    dafny: "_dafny_medium-yellow",
    Dafny: "_dafny_medium-yellow",
    DAFNY: "_dafny_medium-yellow",
    danmakufu: "_yang_medium-red",
    Danmakufu: "_yang_medium-red",
    DANMAKUFU: "_yang_medium-red",
    dart: "_dart_medium-cyan",
    Dart: "_dart_medium-cyan",
    DART: "_dart_medium-cyan",
    dataweave: "_dataweave_medium-blue",
    "data-weave": "_dataweave_medium-blue",
    "data weave": "_dataweave_medium-blue",
    data_weave: "_dataweave_medium-blue",
    DataWeave: "_dataweave_medium-blue",
    "Data Weave": "_dataweave_medium-blue",
    "Data-Weave": "_dataweave_medium-blue",
    Data_Weave: "_dataweave_medium-blue",
    DATAWEAVE: "_dataweave_medium-blue",
    "DATA WEAVE": "_dataweave_medium-blue",
    "DATA-WEAVE": "_dataweave_medium-blue",
    DATA_WEAVE: "_dataweave_medium-blue",
    dc: "_calc_medium-blue",
    DC: "_calc_medium-blue",
    dcl: "_openvms_medium-orange",
    "deb-control": "_debian_dark-cyan",
    debian: "_debian_dark-cyan",
    Debian: "_debian_dark-cyan",
    DEBIAN: "_debian_dark-cyan",
    devicetree: "_devicetree_medium-purple",
    "device tree": "_devicetree_medium-purple",
    "device-tree": "_devicetree_medium-purple",
    device_tree: "_devicetree_medium-purple",
    DeviceTree: "_devicetree_medium-purple",
    "Device Tree": "_devicetree_medium-purple",
    "Device-Tree": "_devicetree_medium-purple",
    Device_Tree: "_devicetree_medium-purple",
    DEVICETREE: "_devicetree_medium-purple",
    "DEVICE TREE": "_devicetree_medium-purple",
    "DEVICE-TREE": "_devicetree_medium-purple",
    DEVICE_TREE: "_devicetree_medium-purple",
    devicetreesource: "_devicetree_medium-purple",
    "devicetree source": "_devicetree_medium-purple",
    "devicetree-source": "_devicetree_medium-purple",
    devicetree_source: "_devicetree_medium-purple",
    DeviceTreeSource: "_devicetree_medium-purple",
    "DeviceTree Source": "_devicetree_medium-purple",
    "DeviceTree-Source": "_devicetree_medium-purple",
    DeviceTree_Source: "_devicetree_medium-purple",
    DEVICETREESOURCE: "_devicetree_medium-purple",
    "DEVICETREE SOURCE": "_devicetree_medium-purple",
    "DEVICETREE-SOURCE": "_devicetree_medium-purple",
    DEVICETREE_SOURCE: "_devicetree_medium-purple",
    dformat: "_manpage_dark-green",
    DFORMAT: "_manpage_dark-green",
    dfy: "_dafny_medium-yellow",
    dhall: "_dhall_dark-grey",
    Dhall: "_dhall_dark-grey",
    DHALL: "_dhall_dark-grey",
    diff: "_diff_medium-orange",
    Diff: "_diff_medium-orange",
    DIFF: "_diff_medium-orange",
    digitalcommandlanguage: "_openvms_medium-orange",
    "digitalcommand language": "_openvms_medium-orange",
    "digitalcommand-language": "_openvms_medium-orange",
    digitalcommand_language: "_openvms_medium-orange",
    "digital commandlanguage": "_openvms_medium-orange",
    "digital command language": "_openvms_medium-orange",
    "digital command-language": "_openvms_medium-orange",
    "digital command_language": "_openvms_medium-orange",
    "digital-commandlanguage": "_openvms_medium-orange",
    "digital-command language": "_openvms_medium-orange",
    "digital-command-language": "_openvms_medium-orange",
    "digital-command_language": "_openvms_medium-orange",
    digital_commandlanguage: "_openvms_medium-orange",
    "digital_command language": "_openvms_medium-orange",
    "digital_command-language": "_openvms_medium-orange",
    digital_command_language: "_openvms_medium-orange",
    DigitalCommandLanguage: "_openvms_medium-orange",
    "DigitalCommand Language": "_openvms_medium-orange",
    "DigitalCommand-Language": "_openvms_medium-orange",
    DigitalCommand_Language: "_openvms_medium-orange",
    "Digital CommandLanguage": "_openvms_medium-orange",
    "Digital Command Language": "_openvms_medium-orange",
    "Digital Command-Language": "_openvms_medium-orange",
    "Digital Command_Language": "_openvms_medium-orange",
    "Digital-CommandLanguage": "_openvms_medium-orange",
    "Digital-Command Language": "_openvms_medium-orange",
    "Digital-Command-Language": "_openvms_medium-orange",
    "Digital-Command_Language": "_openvms_medium-orange",
    Digital_CommandLanguage: "_openvms_medium-orange",
    "Digital_Command Language": "_openvms_medium-orange",
    "Digital_Command-Language": "_openvms_medium-orange",
    Digital_Command_Language: "_openvms_medium-orange",
    DIGITALCOMMANDLANGUAGE: "_openvms_medium-orange",
    "DIGITALCOMMAND LANGUAGE": "_openvms_medium-orange",
    "DIGITALCOMMAND-LANGUAGE": "_openvms_medium-orange",
    DIGITALCOMMAND_LANGUAGE: "_openvms_medium-orange",
    "DIGITAL COMMANDLANGUAGE": "_openvms_medium-orange",
    "DIGITAL COMMAND LANGUAGE": "_openvms_medium-orange",
    "DIGITAL COMMAND-LANGUAGE": "_openvms_medium-orange",
    "DIGITAL COMMAND_LANGUAGE": "_openvms_medium-orange",
    "DIGITAL-COMMANDLANGUAGE": "_openvms_medium-orange",
    "DIGITAL-COMMAND LANGUAGE": "_openvms_medium-orange",
    "DIGITAL-COMMAND-LANGUAGE": "_openvms_medium-orange",
    "DIGITAL-COMMAND_LANGUAGE": "_openvms_medium-orange",
    DIGITAL_COMMANDLANGUAGE: "_openvms_medium-orange",
    "DIGITAL_COMMAND LANGUAGE": "_openvms_medium-orange",
    "DIGITAL_COMMAND-LANGUAGE": "_openvms_medium-orange",
    DIGITAL_COMMAND_LANGUAGE: "_openvms_medium-orange",
    dircolors: "_terminal_medium-green",
    DIRCOLORS: "_terminal_medium-green",
    directx: "_model_medium-green",
    "direct-x": "_model_medium-green",
    directx3dfile: "_model_medium-green",
    "directx3d file": "_model_medium-green",
    "directx3d-file": "_model_medium-green",
    directx3d_file: "_model_medium-green",
    "directx 3dfile": "_model_medium-green",
    "directx 3d file": "_model_medium-green",
    "directx 3d-file": "_model_medium-green",
    "directx 3d_file": "_model_medium-green",
    "directx-3dfile": "_model_medium-green",
    "directx-3d file": "_model_medium-green",
    "directx-3d-file": "_model_medium-green",
    "directx-3d_file": "_model_medium-green",
    directx_3dfile: "_model_medium-green",
    "directx_3d file": "_model_medium-green",
    "directx_3d-file": "_model_medium-green",
    directx_3d_file: "_model_medium-green",
    DirectX3DFile: "_model_medium-green",
    "DirectX3D File": "_model_medium-green",
    "DirectX3D-File": "_model_medium-green",
    DirectX3D_File: "_model_medium-green",
    "DirectX 3DFile": "_model_medium-green",
    "DirectX 3D File": "_model_medium-green",
    "DirectX 3D-File": "_model_medium-green",
    "DirectX 3D_File": "_model_medium-green",
    "DirectX-3DFile": "_model_medium-green",
    "DirectX-3D File": "_model_medium-green",
    "DirectX-3D-File": "_model_medium-green",
    "DirectX-3D_File": "_model_medium-green",
    DirectX_3DFile: "_model_medium-green",
    "DirectX_3D File": "_model_medium-green",
    "DirectX_3D-File": "_model_medium-green",
    DirectX_3D_File: "_model_medium-green",
    DIRECTX3DFILE: "_model_medium-green",
    "DIRECTX3D FILE": "_model_medium-green",
    "DIRECTX3D-FILE": "_model_medium-green",
    DIRECTX3D_FILE: "_model_medium-green",
    "DIRECTX 3DFILE": "_model_medium-green",
    "DIRECTX 3D FILE": "_model_medium-green",
    "DIRECTX 3D-FILE": "_model_medium-green",
    "DIRECTX 3D_FILE": "_model_medium-green",
    "DIRECTX-3DFILE": "_model_medium-green",
    "DIRECTX-3D FILE": "_model_medium-green",
    "DIRECTX-3D-FILE": "_model_medium-green",
    "DIRECTX-3D_FILE": "_model_medium-green",
    DIRECTX_3DFILE: "_model_medium-green",
    "DIRECTX_3D FILE": "_model_medium-green",
    "DIRECTX_3D-FILE": "_model_medium-green",
    DIRECTX_3D_FILE: "_model_medium-green",
    ditroff: "_binary_dark-green",
    Ditroff: "_binary_dark-green",
    DITROFF: "_binary_dark-green",
    django: "_jinja_dark-red",
    DJANGO: "_jinja_dark-red",
    dm: "_byond_medium-blue",
    DM: "_byond_medium-blue",
    docker: "_docker_dark-blue",
    Docker: "_docker_dark-blue",
    DOCKER: "_docker_dark-blue",
    dockercompose: "_docker_dark-blue",
    DockerCompose: "_docker_dark-blue",
    DOCKERCOMPOSE: "_docker_dark-blue",
    dockerfile: "_docker_dark-blue",
    Dockerfile: "_docker_dark-blue",
    DOCKERFILE: "_docker_dark-blue",
    docpad: "_docpad_medium-maroon",
    "doc pad": "_docpad_medium-maroon",
    "doc-pad": "_docpad_medium-maroon",
    doc_pad: "_docpad_medium-maroon",
    DocPad: "_docpad_medium-maroon",
    "Doc Pad": "_docpad_medium-maroon",
    "Doc-Pad": "_docpad_medium-maroon",
    Doc_Pad: "_docpad_medium-maroon",
    DOCPAD: "_docpad_medium-maroon",
    "DOC PAD": "_docpad_medium-maroon",
    "DOC-PAD": "_docpad_medium-maroon",
    DOC_PAD: "_docpad_medium-maroon",
    dogescript: "_doge_medium-yellow",
    Dogescript: "_doge_medium-yellow",
    DOGESCRIPT: "_doge_medium-yellow",
    dosbatch: "_windows_medium-purple",
    DOSBatch: "_windows_medium-purple",
    DOSBATCH: "_windows_medium-purple",
    dosini: "_config_medium-yellow",
    DOSINI: "_config_medium-yellow",
    dot: "_graphviz_medium-blue",
    dotenv: "_dotenv_medium-yellow",
    DOTENV: "_dotenv_medium-yellow",
    dotjs: "_dotjs_medium-blue",
    "dot.js": "_dotjs_medium-blue",
    "doT.js": "_dotjs_medium-blue",
    "DOT.JS": "_dotjs_medium-blue",
    DOTJS: "_dotjs_medium-blue",
    doxyfile: "_doxygen_medium-blue",
    Doxyfile: "_doxygen_medium-blue",
    DOXYFILE: "_doxygen_medium-blue",
    doxygen: "_doxygen_medium-blue",
    dpic: "_manpage_dark-green",
    DPIC: "_manpage_dark-green",
    dreammaker: "_byond_medium-blue",
    "dream maker": "_byond_medium-blue",
    "dream-maker": "_byond_medium-blue",
    dream_maker: "_byond_medium-blue",
    DreamMaker: "_byond_medium-blue",
    "Dream Maker": "_byond_medium-blue",
    "Dream-Maker": "_byond_medium-blue",
    Dream_Maker: "_byond_medium-blue",
    DREAMMAKER: "_byond_medium-blue",
    "DREAM MAKER": "_byond_medium-blue",
    "DREAM-MAKER": "_byond_medium-blue",
    DREAM_MAKER: "_byond_medium-blue",
    dreammakerscript: "_byond_medium-blue",
    "dreammaker script": "_byond_medium-blue",
    "dreammaker-script": "_byond_medium-blue",
    dreammaker_script: "_byond_medium-blue",
    "dream makerscript": "_byond_medium-blue",
    "dream maker script": "_byond_medium-blue",
    "dream maker-script": "_byond_medium-blue",
    "dream maker_script": "_byond_medium-blue",
    "dream-makerscript": "_byond_medium-blue",
    "dream-maker script": "_byond_medium-blue",
    "dream-maker-script": "_byond_medium-blue",
    "dream-maker_script": "_byond_medium-blue",
    dream_makerscript: "_byond_medium-blue",
    "dream_maker script": "_byond_medium-blue",
    "dream_maker-script": "_byond_medium-blue",
    dream_maker_script: "_byond_medium-blue",
    DreamMakerScript: "_byond_medium-blue",
    "DreamMaker Script": "_byond_medium-blue",
    "DreamMaker-Script": "_byond_medium-blue",
    DreamMaker_Script: "_byond_medium-blue",
    "Dream MakerScript": "_byond_medium-blue",
    "Dream Maker Script": "_byond_medium-blue",
    "Dream Maker-Script": "_byond_medium-blue",
    "Dream Maker_Script": "_byond_medium-blue",
    "Dream-MakerScript": "_byond_medium-blue",
    "Dream-Maker Script": "_byond_medium-blue",
    "Dream-Maker-Script": "_byond_medium-blue",
    "Dream-Maker_Script": "_byond_medium-blue",
    Dream_MakerScript: "_byond_medium-blue",
    "Dream_Maker Script": "_byond_medium-blue",
    "Dream_Maker-Script": "_byond_medium-blue",
    Dream_Maker_Script: "_byond_medium-blue",
    DREAMMAKERSCRIPT: "_byond_medium-blue",
    "DREAMMAKER SCRIPT": "_byond_medium-blue",
    "DREAMMAKER-SCRIPT": "_byond_medium-blue",
    DREAMMAKER_SCRIPT: "_byond_medium-blue",
    "DREAM MAKERSCRIPT": "_byond_medium-blue",
    "DREAM MAKER SCRIPT": "_byond_medium-blue",
    "DREAM MAKER-SCRIPT": "_byond_medium-blue",
    "DREAM MAKER_SCRIPT": "_byond_medium-blue",
    "DREAM-MAKERSCRIPT": "_byond_medium-blue",
    "DREAM-MAKER SCRIPT": "_byond_medium-blue",
    "DREAM-MAKER-SCRIPT": "_byond_medium-blue",
    "DREAM-MAKER_SCRIPT": "_byond_medium-blue",
    DREAM_MAKERSCRIPT: "_byond_medium-blue",
    "DREAM_MAKER SCRIPT": "_byond_medium-blue",
    "DREAM_MAKER-SCRIPT": "_byond_medium-blue",
    DREAM_MAKER_SCRIPT: "_byond_medium-blue",
    dtd: "_code_medium-cyan",
    dtml: "_html5_medium-blue",
    DTML: "_html5_medium-blue",
    dts: "_devicetree_medium-purple",
    eagle: "_eagle_medium-red",
    Eagle: "_eagle_medium-red",
    EAGLE: "_eagle_medium-red",
    ebnf: "_bnf_medium-red",
    ebuild: "_gentoo_dark-cyan",
    ec: "_ec_dark-blue",
    eC: "_ec_dark-blue",
    EC: "_ec_dark-blue",
    eclipse: "_eclipse-lang_medium-blue",
    ECLiPSe: "_eclipse-lang_medium-blue",
    ECLIPSE: "_eclipse-lang_medium-blue",
    eco: "_docpad_medium-maroon",
    ed: "_code_dark-maroon",
    edge: "_edge_dark-orange",
    Edge: "_edge_dark-orange",
    EDGE: "_edge_dark-orange",
    editorconfig: "_editorconfig_medium-orange",
    "editor config": "_editorconfig_medium-orange",
    "editor-config": "_editorconfig_medium-orange",
    editor_config: "_editorconfig_medium-orange",
    EditorConfig: "_editorconfig_medium-orange",
    "Editor Config": "_editorconfig_medium-orange",
    "Editor-Config": "_editorconfig_medium-orange",
    Editor_Config: "_editorconfig_medium-orange",
    EDITORCONFIG: "_editorconfig_medium-orange",
    "EDITOR CONFIG": "_editorconfig_medium-orange",
    "EDITOR-CONFIG": "_editorconfig_medium-orange",
    EDITOR_CONFIG: "_editorconfig_medium-orange",
    eiffel: "_eiffel_medium-cyan",
    Eiffel: "_eiffel_medium-cyan",
    EIFFEL: "_eiffel_medium-cyan",
    ejs: "_ejs_medium-green",
    EJS: "_ejs_medium-green",
    elisp: "_emacs_medium-purple",
    ELISP: "_emacs_medium-purple",
    elixir: "_elixir_dark-purple",
    Elixir: "_elixir_dark-purple",
    ELIXIR: "_elixir_dark-purple",
    elm: "_elm_medium-blue",
    Elm: "_elm_medium-blue",
    ELM: "_elm_medium-blue",
    "emacs.lisp": "_emacs_medium-purple",
    emacslisp: "_emacs_medium-purple",
    "emacs lisp": "_emacs_medium-purple",
    "emacs-lisp": "_emacs_medium-purple",
    emacs_lisp: "_emacs_medium-purple",
    EmacsLisp: "_emacs_medium-purple",
    "Emacs Lisp": "_emacs_medium-purple",
    "Emacs-Lisp": "_emacs_medium-purple",
    Emacs_Lisp: "_emacs_medium-purple",
    EMACSLISP: "_emacs_medium-purple",
    "EMACS LISP": "_emacs_medium-purple",
    "EMACS-LISP": "_emacs_medium-purple",
    EMACS_LISP: "_emacs_medium-purple",
    email: "_at_medium-red",
    "e-mail": "_at_medium-red",
    EMAIL: "_at_medium-red",
    "E-MAIL": "_at_medium-red",
    ember: "_em_medium-red",
    emberscript: "_em_medium-red",
    "ember script": "_em_medium-red",
    "ember-script": "_em_medium-red",
    ember_script: "_em_medium-red",
    EmberScript: "_em_medium-red",
    "Ember Script": "_em_medium-red",
    "Ember-Script": "_em_medium-red",
    Ember_Script: "_em_medium-red",
    EMBERSCRIPT: "_em_medium-red",
    "EMBER SCRIPT": "_em_medium-red",
    "EMBER-SCRIPT": "_em_medium-red",
    EMBER_SCRIPT: "_em_medium-red",
    emblem: "_mustache_medium-blue",
    Emblem: "_mustache_medium-blue",
    EMBLEM: "_mustache_medium-blue",
    eml: "_at_medium-red",
    EML: "_at_medium-red",
    "eml.basic": "_mail_medium-blue",
    eq: "_eq_medium-orange",
    EQ: "_eq_medium-orange",
    erlang: "_erlang_medium-red",
    Erlang: "_erlang_medium-red",
    ERLANG: "_erlang_medium-red",
    eskip: "_anchor_dark-blue",
    extempore: "_scheme_medium-yellow",
    EXTEMPORE: "_scheme_medium-yellow",
    "extendedbackus-naurform": "_bnf_medium-red",
    "extendedbackus-naur form": "_bnf_medium-red",
    "extendedbackus-naur-form": "_bnf_medium-red",
    "extendedbackus-naur_form": "_bnf_medium-red",
    "extended backus-naurform": "_bnf_medium-red",
    "extended backus-naur form": "_bnf_medium-red",
    "extended backus-naur-form": "_bnf_medium-red",
    "extended backus-naur_form": "_bnf_medium-red",
    "extended-backus-naurform": "_bnf_medium-red",
    "extended-backus-naur form": "_bnf_medium-red",
    "extended-backus-naur-form": "_bnf_medium-red",
    "extended-backus-naur_form": "_bnf_medium-red",
    "extended_backus-naurform": "_bnf_medium-red",
    "extended_backus-naur form": "_bnf_medium-red",
    "extended_backus-naur-form": "_bnf_medium-red",
    "extended_backus-naur_form": "_bnf_medium-red",
    "ExtendedBackus-NaurForm": "_bnf_medium-red",
    "ExtendedBackus-Naur Form": "_bnf_medium-red",
    "ExtendedBackus-Naur-Form": "_bnf_medium-red",
    "ExtendedBackus-Naur_Form": "_bnf_medium-red",
    "Extended Backus-NaurForm": "_bnf_medium-red",
    "Extended Backus-Naur Form": "_bnf_medium-red",
    "Extended Backus-Naur-Form": "_bnf_medium-red",
    "Extended Backus-Naur_Form": "_bnf_medium-red",
    "Extended-Backus-NaurForm": "_bnf_medium-red",
    "Extended-Backus-Naur Form": "_bnf_medium-red",
    "Extended-Backus-Naur-Form": "_bnf_medium-red",
    "Extended-Backus-Naur_Form": "_bnf_medium-red",
    "Extended_Backus-NaurForm": "_bnf_medium-red",
    "Extended_Backus-Naur Form": "_bnf_medium-red",
    "Extended_Backus-Naur-Form": "_bnf_medium-red",
    "Extended_Backus-Naur_Form": "_bnf_medium-red",
    "EXTENDEDBACKUS-NAURFORM": "_bnf_medium-red",
    "EXTENDEDBACKUS-NAUR FORM": "_bnf_medium-red",
    "EXTENDEDBACKUS-NAUR-FORM": "_bnf_medium-red",
    "EXTENDEDBACKUS-NAUR_FORM": "_bnf_medium-red",
    "EXTENDED BACKUS-NAURFORM": "_bnf_medium-red",
    "EXTENDED BACKUS-NAUR FORM": "_bnf_medium-red",
    "EXTENDED BACKUS-NAUR-FORM": "_bnf_medium-red",
    "EXTENDED BACKUS-NAUR_FORM": "_bnf_medium-red",
    "EXTENDED-BACKUS-NAURFORM": "_bnf_medium-red",
    "EXTENDED-BACKUS-NAUR FORM": "_bnf_medium-red",
    "EXTENDED-BACKUS-NAUR-FORM": "_bnf_medium-red",
    "EXTENDED-BACKUS-NAUR_FORM": "_bnf_medium-red",
    "EXTENDED_BACKUS-NAURFORM": "_bnf_medium-red",
    "EXTENDED_BACKUS-NAUR FORM": "_bnf_medium-red",
    "EXTENDED_BACKUS-NAUR-FORM": "_bnf_medium-red",
    "EXTENDED_BACKUS-NAUR_FORM": "_bnf_medium-red",
    "f#": "_fsharp_medium-blue",
    "F#": "_fsharp_medium-blue",
    factor: "_factor_medium-orange",
    Factor: "_factor_medium-orange",
    FACTOR: "_factor_medium-orange",
    falcon: "_falcon_medium-red",
    Falcon: "_falcon_medium-red",
    FALCON: "_falcon_medium-red",
    fan: "_fantom_medium-blue",
    fancy: "_fancy_dark-blue",
    Fancy: "_fancy_dark-blue",
    FANCY: "_fancy_dark-blue",
    fantom: "_fantom_medium-blue",
    Fantom: "_fantom_medium-blue",
    FANTOM: "_fantom_medium-blue",
    fasm: "_asm-intel_dark-blue",
    FASM: "_asm-intel_dark-blue",
    fasta: "_dna_medium-green",
    FASTA: "_dna_medium-green",
    fasto: "_code_medium-red",
    fastq: "_dna_medium-green",
    FASTQ: "_dna_medium-green",
    fauna: "_fauna_dark-blue",
    Fauna: "_fauna_dark-blue",
    FAUNA: "_fauna_dark-blue",
    faunadb: "_fauna_dark-blue",
    FaunaDB: "_fauna_dark-blue",
    FAUNADB: "_fauna_dark-blue",
    faunaquerylanguage: "_fauna_dark-blue",
    FaunaQueryLanguage: "_fauna_dark-blue",
    FAUNAQUERYLANGUAGE: "_fauna_dark-blue",
    faust: "_faust_dark-orange",
    Faust: "_faust_dark-orange",
    FAUST: "_faust_dark-orange",
    "fc-list": "_database_medium-orange",
    fdepl: "_franca_medium-maroon",
    fexl: "_fexl_medium-cyan",
    Fexl: "_fexl_medium-cyan",
    FEXL: "_fexl_medium-cyan",
    fidl: "_code_medium-pink",
    FIDL: "_code_medium-pink",
    figctrl: "_config_medium-green",
    figfont: "_font-bitmap_medium-red",
    firebase: "_firebase_medium-orange",
    Firebase: "_firebase_medium-orange",
    FIREBASE: "_firebase_medium-orange",
    firebasebolt: "_firebase-bolt_medium-yellow",
    "firebase bolt": "_firebase-bolt_medium-yellow",
    "firebase-bolt": "_firebase-bolt_medium-yellow",
    firebase_bolt: "_firebase-bolt_medium-yellow",
    FirebaseBolt: "_firebase-bolt_medium-yellow",
    "Firebase Bolt": "_firebase-bolt_medium-yellow",
    "Firebase-Bolt": "_firebase-bolt_medium-yellow",
    Firebase_Bolt: "_firebase-bolt_medium-yellow",
    FIREBASEBOLT: "_firebase-bolt_medium-yellow",
    "FIREBASE BOLT": "_firebase-bolt_medium-yellow",
    "FIREBASE-BOLT": "_firebase-bolt_medium-yellow",
    FIREBASE_BOLT: "_firebase-bolt_medium-yellow",
    firerules: "_firebase_medium-orange",
    FIRERULES: "_firebase_medium-orange",
    fish: "_terminal_medium-green",
    FISH: "_terminal_medium-green",
    "flex-config": "_as_medium-red",
    fontdir: "_database_medium-red",
    fontforge: "_ff_dark-blue",
    "font forge": "_ff_dark-blue",
    "font-forge": "_ff_dark-blue",
    font_forge: "_ff_dark-blue",
    FontForge: "_ff_dark-blue",
    "Font Forge": "_ff_dark-blue",
    "Font-Forge": "_ff_dark-blue",
    Font_Forge: "_ff_dark-blue",
    FONTFORGE: "_ff_dark-blue",
    "FONT FORGE": "_ff_dark-blue",
    "FONT-FORGE": "_ff_dark-blue",
    FONT_FORGE: "_ff_dark-blue",
    fontinfo: "_postscript_medium-blue",
    FONTINFO: "_postscript_medium-blue",
    "forge-config": "_minecraft_dark-green",
    fortran: "_fortran_medium-maroon",
    Fortran: "_fortran_medium-maroon",
    FORTRAN: "_fortran_medium-maroon",
    "fortran.fixed": "_fortran_medium-maroon",
    "fortran.free": "_fortran_medium-green",
    fortranmodern: "_fortran_medium-maroon",
    "fortran.modern": "_fortran_medium-maroon",
    fortranpunchcard: "_fortran_medium-maroon",
    "fortran.punchcard": "_fortran_medium-maroon",
    fountain: "_fountain_medium-blue",
    Fountain: "_fountain_medium-blue",
    FOUNTAIN: "_fountain_medium-blue",
    fql: "_fauna_dark-blue",
    franca: "_franca_medium-maroon",
    Franca: "_franca_medium-maroon",
    FRANCA: "_franca_medium-maroon",
    francadeployment: "_franca_medium-maroon",
    "franca deployment": "_franca_medium-maroon",
    "franca-deployment": "_franca_medium-maroon",
    franca_deployment: "_franca_medium-maroon",
    FrancaDeployment: "_franca_medium-maroon",
    "Franca Deployment": "_franca_medium-maroon",
    "Franca-Deployment": "_franca_medium-maroon",
    Franca_Deployment: "_franca_medium-maroon",
    FRANCADEPLOYMENT: "_franca_medium-maroon",
    "FRANCA DEPLOYMENT": "_franca_medium-maroon",
    "FRANCA-DEPLOYMENT": "_franca_medium-maroon",
    FRANCA_DEPLOYMENT: "_franca_medium-maroon",
    francaidl: "_franca_medium-orange",
    "franca idl": "_franca_medium-orange",
    "franca-idl": "_franca_medium-orange",
    franca_idl: "_franca_medium-orange",
    FrancaIDL: "_franca_medium-orange",
    "Franca IDL": "_franca_medium-orange",
    "Franca-IDL": "_franca_medium-orange",
    Franca_IDL: "_franca_medium-orange",
    FRANCAIDL: "_franca_medium-orange",
    "FRANCA IDL": "_franca_medium-orange",
    "FRANCA-IDL": "_franca_medium-orange",
    FRANCA_IDL: "_franca_medium-orange",
    freemarker: "_freemarker_medium-blue",
    "free marker": "_freemarker_medium-blue",
    "free-marker": "_freemarker_medium-blue",
    free_marker: "_freemarker_medium-blue",
    FreeMarker: "_freemarker_medium-blue",
    "Free Marker": "_freemarker_medium-blue",
    "Free-Marker": "_freemarker_medium-blue",
    Free_Marker: "_freemarker_medium-blue",
    FREEMARKER: "_freemarker_medium-blue",
    "FREE MARKER": "_freemarker_medium-blue",
    "FREE-MARKER": "_freemarker_medium-blue",
    FREE_MARKER: "_freemarker_medium-blue",
    fsharp: "_fsharp_medium-blue",
    FSharp: "_fsharp_medium-blue",
    FSHARP: "_fsharp_medium-blue",
    fthtml: "_fthtml_medium-orange",
    ftHTML: "_fthtml_medium-orange",
    FTHTML: "_fthtml_medium-orange",
    ftl: "_freemarker_medium-blue",
    FTL: "_freemarker_medium-blue",
    fundamental: "_text_medium-blue",
    futhark: "_futhark_dark-maroon",
    Futhark: "_futhark_dark-maroon",
    FUTHARK: "_futhark_dark-maroon",
    fxl: "_fexl_medium-cyan",
    galen: "_galen_medium-cyan",
    Galen: "_galen_medium-cyan",
    GALEN: "_galen_medium-cyan",
    "galen-t": "_galen_medium-cyan",
    gams: "_gams_dark-red",
    GAMS: "_gams_dark-red",
    "gams-lst": "_gams_dark-red",
    gap: "_gap_medium-yellow",
    GAP: "_gap_medium-yellow",
    gauss: "_gauss_medium-orange",
    GAUSS: "_gauss_medium-orange",
    gawk: "_awk_medium-red",
    GAWK: "_awk_medium-red",
    "g-code": "_binary_medium-orange",
    "G-CODE": "_binary_medium-orange",
    gdb: "_gdb_medium-green",
    GDB: "_gdb_medium-green",
    gdscript: "_godot_medium-blue",
    GDScript: "_godot_medium-blue",
    GDSCRIPT: "_godot_medium-blue",
    "generic-db": "_database_medium-green",
    genshi: "_genshi_medium-red",
    Genshi: "_genshi_medium-red",
    GENSHI: "_genshi_medium-red",
    gentoo: "_gentoo_dark-cyan",
    Gentoo: "_gentoo_dark-cyan",
    GENTOO: "_gentoo_dark-cyan",
    gerber: "_circuit-board_medium-red",
    gfm: "_markdown_medium-blue",
    GFM: "_markdown_medium-blue",
    "gfm-todotxt": "_checklist_medium-green",
    gherkin: "_cucumber_medium-green",
    GHERKIN: "_cucumber_medium-green",
    "gherkin.feature": "_cucumber_medium-green",
    git: "_git_medium-red",
    Git: "_git_medium-red",
    GIT: "_git_medium-red",
    "git-commit": "_git_medium-red",
    "git-config": "_git_medium-red",
    gitignore: "_git_medium-red",
    "git ignore": "_git_medium-red",
    "git-ignore": "_git_medium-red",
    git_ignore: "_git_medium-red",
    "git-rebase": "_git_medium-red",
    glsl: "_opengl_dark-cyan",
    GLSL: "_opengl_dark-cyan",
    glslang: "_opengl_dark-cyan",
    GLslang: "_opengl_dark-cyan",
    GLSLANG: "_opengl_dark-cyan",
    gn: "_gn_dark-blue",
    GN: "_gn_dark-blue",
    gnuplot: "_gnuplot_medium-red",
    Gnuplot: "_gnuplot_medium-red",
    GNUPLOT: "_gnuplot_medium-red",
    go: "_go_medium-blue",
    Go: "_go_medium-blue",
    GO: "_go_medium-blue",
    godot: "_godot_medium-blue",
    Godot: "_godot_medium-blue",
    GODOT: "_godot_medium-blue",
    gohtml: "_html5_dark-blue",
    GOHTML: "_html5_dark-blue",
    goldgrammar: "_bnf_medium-yellow",
    "gold grammar": "_bnf_medium-yellow",
    "gold-grammar": "_bnf_medium-yellow",
    gold_grammar: "_bnf_medium-yellow",
    GOLDGrammar: "_bnf_medium-yellow",
    "GOLD Grammar": "_bnf_medium-yellow",
    "GOLD-Grammar": "_bnf_medium-yellow",
    GOLD_Grammar: "_bnf_medium-yellow",
    GOLDGRAMMAR: "_bnf_medium-yellow",
    "GOLD GRAMMAR": "_bnf_medium-yellow",
    "GOLD-GRAMMAR": "_bnf_medium-yellow",
    GOLD_GRAMMAR: "_bnf_medium-yellow",
    goldgrm: "_bnf_medium-yellow",
    goldparser: "_bnf_medium-yellow",
    "gold parser": "_bnf_medium-yellow",
    "gold-parser": "_bnf_medium-yellow",
    gold_parser: "_bnf_medium-yellow",
    GOLDParser: "_bnf_medium-yellow",
    "GOLD Parser": "_bnf_medium-yellow",
    "GOLD-Parser": "_bnf_medium-yellow",
    GOLD_Parser: "_bnf_medium-yellow",
    GOLDPARSER: "_bnf_medium-yellow",
    "GOLD PARSER": "_bnf_medium-yellow",
    "GOLD-PARSER": "_bnf_medium-yellow",
    GOLD_PARSER: "_bnf_medium-yellow",
    golo: "_golo_medium-orange",
    Golo: "_golo_medium-orange",
    GOLO: "_golo_medium-orange",
    gosu: "_gosu_medium-blue",
    Gosu: "_gosu_medium-blue",
    GOSU: "_gosu_medium-blue",
    "gosu.0": "_gosu_medium-blue",
    "gosu.1": "_gosu_medium-blue",
    "gosu.2": "_gosu_medium-blue",
    "gosu.3": "_gosu_medium-blue",
    "gosu.4": "_gosu_medium-blue",
    "gosu.5": "_gosu_medium-blue",
    "gosu.6": "_gosu_medium-blue",
    "gosu.7": "_gosu_medium-blue",
    "gosu.8": "_gosu_medium-blue",
    "gosu.9": "_gosu_medium-blue",
    gotemplate: "_go_medium-blue",
    gpic: "_manpage_dark-green",
    GPIC: "_manpage_dark-green",
    gradle: "_gradle_medium-blue",
    Gradle: "_gradle_medium-blue",
    GRADLE: "_gradle_medium-blue",
    graphql: "_graphql_medium-pink",
    GraphQL: "_graphql_medium-pink",
    GRAPHQL: "_graphql_medium-pink",
    graphviz: "_graphviz_medium-blue",
    Graphviz: "_graphviz_medium-blue",
    GRAPHVIZ: "_graphviz_medium-blue",
    gremlin: "_image_medium-orange",
    Gremlin: "_image_medium-orange",
    GREMLIN: "_image_medium-orange",
    groff: "_manpage_dark-green",
    GROFF: "_manpage_dark-green",
    groovy: "_groovy_light-blue",
    Groovy: "_groovy_light-blue",
    GROOVY: "_groovy_light-blue",
    gsp: "_groovy_light-blue",
    GSP: "_groovy_light-blue",
    hack: "_hack_medium-orange",
    Hack: "_hack_medium-orange",
    HACK: "_hack_medium-orange",
    haml: "_haml_medium-maroon",
    Haml: "_haml_medium-maroon",
    HAML: "_haml_medium-maroon",
    hamlc: "_haml_medium-maroon",
    HAMLC: "_haml_medium-maroon",
    handlebars: "_mustache_medium-orange",
    HANDLEBARS: "_mustache_medium-orange",
    harbour: "_harbour_dark-blue",
    Harbour: "_harbour_dark-blue",
    HARBOUR: "_harbour_dark-blue",
    hashicorp: "_hashicorp_dark-purple",
    hashicorpconfigurationlanguage: "_hashicorp_dark-purple",
    "hashicorpconfiguration language": "_hashicorp_dark-purple",
    "hashicorpconfiguration-language": "_hashicorp_dark-purple",
    hashicorpconfiguration_language: "_hashicorp_dark-purple",
    "hashicorp configurationlanguage": "_hashicorp_dark-purple",
    "hashicorp configuration language": "_hashicorp_dark-purple",
    "hashicorp configuration-language": "_hashicorp_dark-purple",
    "hashicorp configuration_language": "_hashicorp_dark-purple",
    "hashicorp-configurationlanguage": "_hashicorp_dark-purple",
    "hashicorp-configuration language": "_hashicorp_dark-purple",
    "hashicorp-configuration-language": "_hashicorp_dark-purple",
    "hashicorp-configuration_language": "_hashicorp_dark-purple",
    hashicorp_configurationlanguage: "_hashicorp_dark-purple",
    "hashicorp_configuration language": "_hashicorp_dark-purple",
    "hashicorp_configuration-language": "_hashicorp_dark-purple",
    hashicorp_configuration_language: "_hashicorp_dark-purple",
    HashicorpConfigurationLanguage: "_hashicorp_dark-purple",
    "HashicorpConfiguration Language": "_hashicorp_dark-purple",
    "HashicorpConfiguration-Language": "_hashicorp_dark-purple",
    HashicorpConfiguration_Language: "_hashicorp_dark-purple",
    "Hashicorp ConfigurationLanguage": "_hashicorp_dark-purple",
    "Hashicorp Configuration Language": "_hashicorp_dark-purple",
    "Hashicorp Configuration-Language": "_hashicorp_dark-purple",
    "Hashicorp Configuration_Language": "_hashicorp_dark-purple",
    "Hashicorp-ConfigurationLanguage": "_hashicorp_dark-purple",
    "Hashicorp-Configuration Language": "_hashicorp_dark-purple",
    "Hashicorp-Configuration-Language": "_hashicorp_dark-purple",
    "Hashicorp-Configuration_Language": "_hashicorp_dark-purple",
    Hashicorp_ConfigurationLanguage: "_hashicorp_dark-purple",
    "Hashicorp_Configuration Language": "_hashicorp_dark-purple",
    "Hashicorp_Configuration-Language": "_hashicorp_dark-purple",
    Hashicorp_Configuration_Language: "_hashicorp_dark-purple",
    HASHICORPCONFIGURATIONLANGUAGE: "_hashicorp_dark-purple",
    "HASHICORPCONFIGURATION LANGUAGE": "_hashicorp_dark-purple",
    "HASHICORPCONFIGURATION-LANGUAGE": "_hashicorp_dark-purple",
    HASHICORPCONFIGURATION_LANGUAGE: "_hashicorp_dark-purple",
    "HASHICORP CONFIGURATIONLANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP CONFIGURATION LANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP CONFIGURATION-LANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP CONFIGURATION_LANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP-CONFIGURATIONLANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP-CONFIGURATION LANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP-CONFIGURATION-LANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP-CONFIGURATION_LANGUAGE": "_hashicorp_dark-purple",
    HASHICORP_CONFIGURATIONLANGUAGE: "_hashicorp_dark-purple",
    "HASHICORP_CONFIGURATION LANGUAGE": "_hashicorp_dark-purple",
    "HASHICORP_CONFIGURATION-LANGUAGE": "_hashicorp_dark-purple",
    HASHICORP_CONFIGURATION_LANGUAGE: "_hashicorp_dark-purple",
    haskell: "_haskell_dark-blue",
    Haskell: "_haskell_dark-blue",
    HASKELL: "_haskell_dark-blue",
    haxe: "_haxe_medium-orange",
    Haxe: "_haxe_medium-orange",
    HAXE: "_haxe_medium-orange",
    "haxe.0": "_haxe_medium-orange",
    "haxe.1": "_haxe_medium-orange",
    "haxe.2": "_haxe_medium-orange",
    "haxe.3": "_haxe_medium-orange",
    "haxe.4": "_haxe_medium-orange",
    "haxe.5": "_haxe_medium-orange",
    "haxe.6": "_haxe_medium-orange",
    "haxe.7": "_haxe_medium-orange",
    "haxe.8": "_haxe_medium-orange",
    "haxe.9": "_haxe_medium-orange",
    hbs: "_mustache_medium-orange",
    HBS: "_mustache_medium-orange",
    hc: "_templeos_medium-yellow",
    hcl: "_hashicorp_dark-purple",
    hjson: "_hjson_medium-green",
    HJSON: "_hjson_medium-green",
    hlsl: "_model_medium-blue",
    HLSL: "_model_medium-blue",
    holyc: "_templeos_medium-yellow",
    HolyC: "_templeos_medium-yellow",
    HOLYC: "_templeos_medium-yellow",
    hsc2hs: "_haskell_medium-blue",
    hson: "_database_medium-orange",
    HSON: "_database_medium-orange",
    htm: "_html5_medium-orange",
    HTM: "_html5_medium-orange",
    html: "_html5_medium-blue",
    HTML: "_html5_medium-blue",
    htmlbars: "_mustache_medium-orange",
    HTMLBARS: "_mustache_medium-orange",
    "html.basic": "_html5_medium-orange",
    htmldjango: "_jinja_dark-red",
    HTMLDJANGO: "_jinja_dark-red",
    "html+django/jinja": "_jinja_dark-red",
    "HTML+DJANGO/JINJA": "_jinja_dark-red",
    "html.edge": "_edge_dark-orange",
    "html.erb": "_html5_medium-red",
    "html+jinja": "_jinja_dark-red",
    "HTML+JINJA": "_jinja_dark-red",
    "html.js": "_ejs_medium-green",
    "html.soy": "_closure-tpl_medium-blue",
    "html.spe": "_spacengine_medium-blue",
    "html.vue": "_vue_light-green",
    hy: "_hy_dark-blue",
    Hy: "_hy_dark-blue",
    HY: "_hy_dark-blue",
    hylang: "_hy_dark-blue",
    HYLANG: "_hy_dark-blue",
    i32: "_asm-intel_dark-blue",
    I32: "_asm-intel_dark-blue",
    i386: "_asm-intel_dark-blue",
    I386: "_asm-intel_dark-blue",
    i64: "_asm-intel_dark-blue",
    I64: "_asm-intel_dark-blue",
    i7: "_inform7_medium-blue",
    I7: "_inform7_medium-blue",
    ia32: "_asm-intel_dark-blue",
    "ia-32": "_asm-intel_dark-blue",
    ia_32: "_asm-intel_dark-blue",
    IA32: "_asm-intel_dark-blue",
    "IA-32": "_asm-intel_dark-blue",
    IA_32: "_asm-intel_dark-blue",
    ia32asm: "_asm-intel_dark-blue",
    "ia-32asm": "_asm-intel_dark-blue",
    ia_32asm: "_asm-intel_dark-blue",
    ia64: "_asm-intel_dark-blue",
    "ia-64": "_asm-intel_dark-blue",
    ia_64: "_asm-intel_dark-blue",
    IA64: "_asm-intel_dark-blue",
    "IA-64": "_asm-intel_dark-blue",
    IA_64: "_asm-intel_dark-blue",
    ia64asm: "_asm-intel_dark-blue",
    "ia-64asm": "_asm-intel_dark-blue",
    ia_64asm: "_asm-intel_dark-blue",
    ia86: "_asm-intel_dark-blue",
    "ia-86": "_asm-intel_dark-blue",
    ia_86: "_asm-intel_dark-blue",
    ia86asm: "_asm-intel_dark-blue",
    "ia-86asm": "_asm-intel_dark-blue",
    ia_86asm: "_asm-intel_dark-blue",
    idl: "_idl_medium-blue",
    IDL: "_idl_medium-blue",
    idris: "_idris_dark-red",
    Idris: "_idris_dark-red",
    IDRIS: "_idris_dark-red",
    ignore: "_git_medium-red",
    ignorelist: "_git_medium-red",
    "ignore list": "_git_medium-red",
    "ignore-list": "_git_medium-red",
    ignore_list: "_git_medium-red",
    IgnoreList: "_git_medium-red",
    "Ignore List": "_git_medium-red",
    "Ignore-List": "_git_medium-red",
    Ignore_List: "_git_medium-red",
    IGNORELIST: "_git_medium-red",
    "IGNORE LIST": "_git_medium-red",
    "IGNORE-LIST": "_git_medium-red",
    IGNORE_LIST: "_git_medium-red",
    image: "_image_medium-orange",
    Image: "_image_medium-orange",
    IMAGE: "_image_medium-orange",
    imba: "_imba_medium-yellow",
    Imba: "_imba_medium-yellow",
    IMBA: "_imba_medium-yellow",
    inform: "_inform7_medium-blue",
    "inform-": "_inform7_medium-blue",
    inform7: "_inform7_medium-blue",
    "inform-7": "_inform7_medium-blue",
    "inform 7": "_inform7_medium-blue",
    inform_7: "_inform7_medium-blue",
    Inform7: "_inform7_medium-blue",
    "Inform 7": "_inform7_medium-blue",
    "Inform-7": "_inform7_medium-blue",
    Inform_7: "_inform7_medium-blue",
    INFORM7: "_inform7_medium-blue",
    "INFORM 7": "_inform7_medium-blue",
    "INFORM-7": "_inform7_medium-blue",
    INFORM_7: "_inform7_medium-blue",
    ini: "_config_medium-yellow",
    "ini.npmrc": "_npm_medium-red",
    ink: "_ink_dark-blue",
    Ink: "_ink_dark-blue",
    INK: "_ink_dark-blue",
    inkle: "_ink_dark-blue",
    Inkle: "_ink_dark-blue",
    INKLE: "_ink_dark-blue",
    inno: "_inno_dark-blue",
    innosetup: "_inno_dark-blue",
    "inno setup": "_inno_dark-blue",
    "inno-setup": "_inno_dark-blue",
    inno_setup: "_inno_dark-blue",
    InnoSetup: "_inno_dark-blue",
    "Inno Setup": "_inno_dark-blue",
    "Inno-Setup": "_inno_dark-blue",
    Inno_Setup: "_inno_dark-blue",
    INNOSETUP: "_inno_dark-blue",
    "INNO SETUP": "_inno_dark-blue",
    "INNO-SETUP": "_inno_dark-blue",
    INNO_SETUP: "_inno_dark-blue",
    inputrc: "_terminal_medium-red",
    intel: "_asm-intel_dark-blue",
    Intel: "_asm-intel_dark-blue",
    INTEL: "_asm-intel_dark-blue",
    io: "_io_dark-purple",
    Io: "_io_dark-purple",
    IO: "_io_dark-purple",
    ipkg: "_idris_dark-red",
    ipynb: "_jupyter_dark-orange",
    IPYNB: "_jupyter_dark-orange",
    ipythonnotebook: "_jupyter_dark-orange",
    IPythonNotebook: "_jupyter_dark-orange",
    IPYTHONNOTEBOOK: "_jupyter_dark-orange",
    isabelle: "_isabelle_dark-red",
    Isabelle: "_isabelle_dark-red",
    ISABELLE: "_isabelle_dark-red",
    "isabelle.theory": "_isabelle_dark-red",
    isml: "_html5_medium-blue",
    ISML: "_html5_medium-blue",
    itanium: "_asm-intel_dark-blue",
    Itanium: "_asm-intel_dark-blue",
    ITANIUM: "_asm-intel_dark-blue",
    j: "_j_light-blue",
    J: "_j_light-blue",
    jade: "_jade_medium-red",
    Jade: "_jade_medium-red",
    JADE: "_jade_medium-red",
    jass: "_warcraft3_medium-red",
    java: "_java_medium-purple",
    Java: "_java_medium-purple",
    JAVA: "_java_medium-purple",
    javaproperties: "_config_medium-purple",
    "java properties": "_config_medium-purple",
    "java-properties": "_config_medium-purple",
    java_properties: "_config_medium-purple",
    javascript: "_js_medium-yellow",
    "java script": "_js_medium-yellow",
    "java-script": "_js_medium-yellow",
    java_script: "_js_medium-yellow",
    JavaScript: "_js_medium-yellow",
    "Java Script": "_js_medium-yellow",
    "Java-Script": "_js_medium-yellow",
    Java_Script: "_js_medium-yellow",
    JAVASCRIPT: "_js_medium-yellow",
    "JAVA SCRIPT": "_js_medium-yellow",
    "JAVA-SCRIPT": "_js_medium-yellow",
    JAVA_SCRIPT: "_js_medium-yellow",
    javascriptreact: "_jsx_medium-blue",
    "javascript react": "_jsx_medium-blue",
    "javascript-react": "_jsx_medium-blue",
    javascript_react: "_jsx_medium-blue",
    jflex: "_code_medium-red",
    jinja: "_jinja_dark-red",
    Jinja: "_jinja_dark-red",
    JINJA: "_jinja_dark-red",
    jison: "_jison_medium-cyan",
    Jison: "_jison_medium-cyan",
    JISON: "_jison_medium-cyan",
    jisonlex: "_jison_medium-cyan",
    "jison lex": "_jison_medium-cyan",
    "jison-lex": "_jison_medium-cyan",
    jison_lex: "_jison_medium-cyan",
    JisonLex: "_jison_medium-cyan",
    "Jison Lex": "_jison_medium-cyan",
    "Jison-Lex": "_jison_medium-cyan",
    Jison_Lex: "_jison_medium-cyan",
    JISONLEX: "_jison_medium-cyan",
    "JISON LEX": "_jison_medium-cyan",
    "JISON-LEX": "_jison_medium-cyan",
    JISON_LEX: "_jison_medium-cyan",
    jlex: "_code_medium-red",
    jolie: "_jolie_dark-pink",
    Jolie: "_jolie_dark-pink",
    JOLIE: "_jolie_dark-pink",
    joy: "_code_medium-yellow",
    jq: "_sql_medium-blue",
    jruby: "_ruby_medium-red",
    JRUBY: "_ruby_medium-red",
    js: "_js_medium-yellow",
    JS: "_js_medium-yellow",
    json: "_json_dark-blue",
    "JSON": "_json_dark-blue",
    json5: "_json5_dark-yellow",
    JSON5: "_json5_dark-yellow",
    jsonc: "_json_dark-blue",
    jsoniq: "_sql_medium-blue",
    JSONiq: "_sql_medium-blue",
    JSONIQ: "_sql_medium-blue",
    jsonl: "_database_dark-orange",
    JSONL: "_database_dark-orange",
    jsonnet: "_jsonnet_dark-blue",
    Jsonnet: "_jsonnet_dark-blue",
    JSONNET: "_jsonnet_dark-blue",
    jsont: "_squarespace_dark-purple",
    "json-t": "_squarespace_dark-purple",
    json_t: "_squarespace_dark-purple",
    JSONT: "_squarespace_dark-purple",
    "JSON-T": "_squarespace_dark-purple",
    JSON_T: "_squarespace_dark-purple",
    jsontemplate: "_squarespace_dark-purple",
    "json template": "_squarespace_dark-purple",
    "json-template": "_squarespace_dark-purple",
    json_template: "_squarespace_dark-purple",
    JSONTEMPLATE: "_squarespace_dark-purple",
    "JSON TEMPLATE": "_squarespace_dark-purple",
    "JSON-TEMPLATE": "_squarespace_dark-purple",
    JSON_TEMPLATE: "_squarespace_dark-purple",
    jsonwithcomments: "_json_dark-blue",
    "jsonwith comments": "_json_dark-blue",
    "jsonwith-comments": "_json_dark-blue",
    jsonwith_comments: "_json_dark-blue",
    "json withcomments": "_json_dark-blue",
    "json with comments": "_json_dark-blue",
    "json with-comments": "_json_dark-blue",
    "json with_comments": "_json_dark-blue",
    "json-withcomments": "_json_dark-blue",
    "json-with comments": "_json_dark-blue",
    "json-with-comments": "_json_dark-blue",
    "json-with_comments": "_json_dark-blue",
    json_withcomments: "_json_dark-blue",
    "json_with comments": "_json_dark-blue",
    "json_with-comments": "_json_dark-blue",
    json_with_comments: "_json_dark-blue",
    JSONwithComments: "_json_dark-blue",
    "JSONwith Comments": "_json_dark-blue",
    "JSONwith-Comments": "_json_dark-blue",
    JSONwith_Comments: "_json_dark-blue",
    "JSON withComments": "_json_dark-blue",
    "JSON with Comments": "_json_dark-blue",
    "JSON with-Comments": "_json_dark-blue",
    "JSON with_Comments": "_json_dark-blue",
    "JSON-withComments": "_json_dark-blue",
    "JSON-with Comments": "_json_dark-blue",
    "JSON-with-Comments": "_json_dark-blue",
    "JSON-with_Comments": "_json_dark-blue",
    JSON_withComments: "_json_dark-blue",
    "JSON_with Comments": "_json_dark-blue",
    "JSON_with-Comments": "_json_dark-blue",
    JSON_with_Comments: "_json_dark-blue",
    JSONWITHCOMMENTS: "_json_dark-blue",
    "JSONWITH COMMENTS": "_json_dark-blue",
    "JSONWITH-COMMENTS": "_json_dark-blue",
    JSONWITH_COMMENTS: "_json_dark-blue",
    "JSON WITHCOMMENTS": "_json_dark-blue",
    "JSON WITH COMMENTS": "_json_dark-blue",
    "JSON WITH-COMMENTS": "_json_dark-blue",
    "JSON WITH_COMMENTS": "_json_dark-blue",
    "JSON-WITHCOMMENTS": "_json_dark-blue",
    "JSON-WITH COMMENTS": "_json_dark-blue",
    "JSON-WITH-COMMENTS": "_json_dark-blue",
    "JSON-WITH_COMMENTS": "_json_dark-blue",
    JSON_WITHCOMMENTS: "_json_dark-blue",
    "JSON_WITH COMMENTS": "_json_dark-blue",
    "JSON_WITH-COMMENTS": "_json_dark-blue",
    JSON_WITH_COMMENTS: "_json_dark-blue",
    jsp: "_html5_medium-purple",
    jsx: "_jsx_medium-blue",
    JSX: "_jsx_medium-blue",
    julia: "_julia_medium-purple",
    Julia: "_julia_medium-purple",
    JULIA: "_julia_medium-purple",
    juliamarkdown: "_markdown_medium-purple",
    "julia markdown": "_markdown_medium-purple",
    "julia-markdown": "_markdown_medium-purple",
    julia_markdown: "_markdown_medium-purple",
    juliamd: "_markdown_medium-purple",
    "julia md": "_markdown_medium-purple",
    "julia-md": "_markdown_medium-purple",
    julia_md: "_markdown_medium-purple",
    juniperjunos: "_junos_medium-cyan",
    "juniper junos": "_junos_medium-cyan",
    "juniper-junos": "_junos_medium-cyan",
    juniper_junos: "_junos_medium-cyan",
    JuniperJunos: "_junos_medium-cyan",
    "Juniper Junos": "_junos_medium-cyan",
    "Juniper-Junos": "_junos_medium-cyan",
    Juniper_Junos: "_junos_medium-cyan",
    JUNIPERJUNOS: "_junos_medium-cyan",
    "JUNIPER JUNOS": "_junos_medium-cyan",
    "JUNIPER-JUNOS": "_junos_medium-cyan",
    JUNIPER_JUNOS: "_junos_medium-cyan",
    juniperjunosconfig: "_junos_medium-cyan",
    "juniperjunos config": "_junos_medium-cyan",
    "juniperjunos-config": "_junos_medium-cyan",
    juniperjunos_config: "_junos_medium-cyan",
    "juniper junosconfig": "_junos_medium-cyan",
    "juniper junos config": "_junos_medium-cyan",
    "juniper junos-config": "_junos_medium-cyan",
    "juniper junos_config": "_junos_medium-cyan",
    "juniper-junosconfig": "_junos_medium-cyan",
    "juniper-junos config": "_junos_medium-cyan",
    "juniper-junos-config": "_junos_medium-cyan",
    "juniper-junos_config": "_junos_medium-cyan",
    juniper_junosconfig: "_junos_medium-cyan",
    "juniper_junos config": "_junos_medium-cyan",
    "juniper_junos-config": "_junos_medium-cyan",
    juniper_junos_config: "_junos_medium-cyan",
    JuniperJunosConfig: "_junos_medium-cyan",
    "JuniperJunos Config": "_junos_medium-cyan",
    "JuniperJunos-Config": "_junos_medium-cyan",
    JuniperJunos_Config: "_junos_medium-cyan",
    "Juniper JunosConfig": "_junos_medium-cyan",
    "Juniper Junos Config": "_junos_medium-cyan",
    "Juniper Junos-Config": "_junos_medium-cyan",
    "Juniper Junos_Config": "_junos_medium-cyan",
    "Juniper-JunosConfig": "_junos_medium-cyan",
    "Juniper-Junos Config": "_junos_medium-cyan",
    "Juniper-Junos-Config": "_junos_medium-cyan",
    "Juniper-Junos_Config": "_junos_medium-cyan",
    Juniper_JunosConfig: "_junos_medium-cyan",
    "Juniper_Junos Config": "_junos_medium-cyan",
    "Juniper_Junos-Config": "_junos_medium-cyan",
    Juniper_Junos_Config: "_junos_medium-cyan",
    JUNIPERJUNOSCONFIG: "_junos_medium-cyan",
    "JUNIPERJUNOS CONFIG": "_junos_medium-cyan",
    "JUNIPERJUNOS-CONFIG": "_junos_medium-cyan",
    JUNIPERJUNOS_CONFIG: "_junos_medium-cyan",
    "JUNIPER JUNOSCONFIG": "_junos_medium-cyan",
    "JUNIPER JUNOS CONFIG": "_junos_medium-cyan",
    "JUNIPER JUNOS-CONFIG": "_junos_medium-cyan",
    "JUNIPER JUNOS_CONFIG": "_junos_medium-cyan",
    "JUNIPER-JUNOSCONFIG": "_junos_medium-cyan",
    "JUNIPER-JUNOS CONFIG": "_junos_medium-cyan",
    "JUNIPER-JUNOS-CONFIG": "_junos_medium-cyan",
    "JUNIPER-JUNOS_CONFIG": "_junos_medium-cyan",
    JUNIPER_JUNOSCONFIG: "_junos_medium-cyan",
    "JUNIPER_JUNOS CONFIG": "_junos_medium-cyan",
    "JUNIPER_JUNOS-CONFIG": "_junos_medium-cyan",
    JUNIPER_JUNOS_CONFIG: "_junos_medium-cyan",
    junos: "_junos_medium-blue",
    Junos: "_junos_medium-blue",
    JUNOS: "_junos_medium-blue",
    jupyternotebook: "_jupyter_dark-orange",
    JupyterNotebook: "_jupyter_dark-orange",
    JUPYTERNOTEBOOK: "_jupyter_dark-orange",
    just: "_checklist_medium-cyan",
    JUST: "_checklist_medium-cyan",
    k4: "_kx_dark-purple",
    "kdb+": "_kx_medium-blue",
    "Kdb+": "_kx_medium-blue",
    "KDB+": "_kx_medium-blue",
    kerboscript: "_kos_dark-green",
    "kerbo script": "_kos_dark-green",
    "kerbo-script": "_kos_dark-green",
    kerbo_script: "_kos_dark-green",
    KerboScript: "_kos_dark-green",
    "Kerbo Script": "_kos_dark-green",
    "Kerbo-Script": "_kos_dark-green",
    Kerbo_Script: "_kos_dark-green",
    KERBOSCRIPT: "_kos_dark-green",
    "KERBO SCRIPT": "_kos_dark-green",
    "KERBO-SCRIPT": "_kos_dark-green",
    KERBO_SCRIPT: "_kos_dark-green",
    kicad: "_kicad_dark-green",
    "ki cad": "_kicad_dark-green",
    "ki-cad": "_kicad_dark-green",
    ki_cad: "_kicad_dark-green",
    KiCad: "_kicad_dark-green",
    "Ki Cad": "_kicad_dark-green",
    "Ki-Cad": "_kicad_dark-green",
    Ki_Cad: "_kicad_dark-green",
    KICAD: "_kicad_dark-green",
    "KI CAD": "_kicad_dark-green",
    "KI-CAD": "_kicad_dark-green",
    KI_CAD: "_kicad_dark-green",
    kivy: "_kivy_dark-maroon",
    Kivy: "_kivy_dark-maroon",
    KIVY: "_kivy_dark-maroon",
    kotlin: "_kotlin_dark-blue",
    Kotlin: "_kotlin_dark-blue",
    KOTLIN: "_kotlin_dark-blue",
    kql: "_kusto_medium-blue",
    KQL: "_kusto_medium-blue",
    krl: "_krl_medium-blue",
    KRL: "_krl_medium-blue",
    "ksh-shell": "_terminal_dark-yellow",
    kusto: "_kusto_medium-blue",
    Kusto: "_kusto_medium-blue",
    KUSTO: "_kusto_medium-blue",
    "kusto explorer": "_kusto_medium-blue",
    "Kusto Explorer": "_kusto_medium-blue",
    "KUSTO EXPLORER": "_kusto_medium-blue",
    "kusto querylanguage": "_kusto_medium-blue",
    "kusto query language": "_kusto_medium-blue",
    "kusto query-language": "_kusto_medium-blue",
    "kusto query_language": "_kusto_medium-blue",
    "Kusto QueryLanguage": "_kusto_medium-blue",
    "Kusto Query Language": "_kusto_medium-blue",
    "Kusto Query-Language": "_kusto_medium-blue",
    "Kusto Query_Language": "_kusto_medium-blue",
    "KUSTO QUERYLANGUAGE": "_kusto_medium-blue",
    "KUSTO QUERY LANGUAGE": "_kusto_medium-blue",
    "KUSTO QUERY-LANGUAGE": "_kusto_medium-blue",
    "KUSTO QUERY_LANGUAGE": "_kusto_medium-blue",
    kv: "_kivy_dark-maroon",
    "labelledbackus-naurform": "_bnf_dark-yellow",
    "labelledbackus-naur form": "_bnf_dark-yellow",
    "labelledbackus-naur-form": "_bnf_dark-yellow",
    "labelledbackus-naur_form": "_bnf_dark-yellow",
    "labelled backus-naurform": "_bnf_dark-yellow",
    "labelled backus-naur form": "_bnf_dark-yellow",
    "labelled backus-naur-form": "_bnf_dark-yellow",
    "labelled backus-naur_form": "_bnf_dark-yellow",
    "labelled-backus-naurform": "_bnf_dark-yellow",
    "labelled-backus-naur form": "_bnf_dark-yellow",
    "labelled-backus-naur-form": "_bnf_dark-yellow",
    "labelled-backus-naur_form": "_bnf_dark-yellow",
    "labelled_backus-naurform": "_bnf_dark-yellow",
    "labelled_backus-naur form": "_bnf_dark-yellow",
    "labelled_backus-naur-form": "_bnf_dark-yellow",
    "labelled_backus-naur_form": "_bnf_dark-yellow",
    "LabelledBackus-NaurForm": "_bnf_dark-yellow",
    "LabelledBackus-Naur Form": "_bnf_dark-yellow",
    "LabelledBackus-Naur-Form": "_bnf_dark-yellow",
    "LabelledBackus-Naur_Form": "_bnf_dark-yellow",
    "Labelled Backus-NaurForm": "_bnf_dark-yellow",
    "Labelled Backus-Naur Form": "_bnf_dark-yellow",
    "Labelled Backus-Naur-Form": "_bnf_dark-yellow",
    "Labelled Backus-Naur_Form": "_bnf_dark-yellow",
    "Labelled-Backus-NaurForm": "_bnf_dark-yellow",
    "Labelled-Backus-Naur Form": "_bnf_dark-yellow",
    "Labelled-Backus-Naur-Form": "_bnf_dark-yellow",
    "Labelled-Backus-Naur_Form": "_bnf_dark-yellow",
    "Labelled_Backus-NaurForm": "_bnf_dark-yellow",
    "Labelled_Backus-Naur Form": "_bnf_dark-yellow",
    "Labelled_Backus-Naur-Form": "_bnf_dark-yellow",
    "Labelled_Backus-Naur_Form": "_bnf_dark-yellow",
    "LABELLEDBACKUS-NAURFORM": "_bnf_dark-yellow",
    "LABELLEDBACKUS-NAUR FORM": "_bnf_dark-yellow",
    "LABELLEDBACKUS-NAUR-FORM": "_bnf_dark-yellow",
    "LABELLEDBACKUS-NAUR_FORM": "_bnf_dark-yellow",
    "LABELLED BACKUS-NAURFORM": "_bnf_dark-yellow",
    "LABELLED BACKUS-NAUR FORM": "_bnf_dark-yellow",
    "LABELLED BACKUS-NAUR-FORM": "_bnf_dark-yellow",
    "LABELLED BACKUS-NAUR_FORM": "_bnf_dark-yellow",
    "LABELLED-BACKUS-NAURFORM": "_bnf_dark-yellow",
    "LABELLED-BACKUS-NAUR FORM": "_bnf_dark-yellow",
    "LABELLED-BACKUS-NAUR-FORM": "_bnf_dark-yellow",
    "LABELLED-BACKUS-NAUR_FORM": "_bnf_dark-yellow",
    "LABELLED_BACKUS-NAURFORM": "_bnf_dark-yellow",
    "LABELLED_BACKUS-NAUR FORM": "_bnf_dark-yellow",
    "LABELLED_BACKUS-NAUR-FORM": "_bnf_dark-yellow",
    "LABELLED_BACKUS-NAUR_FORM": "_bnf_dark-yellow",
    laravel: "_laravel_medium-orange",
    Laravel: "_laravel_medium-orange",
    LARAVEL: "_laravel_medium-orange",
    lark: "_lark_dark-blue",
    Lark: "_lark_dark-blue",
    LARK: "_lark_dark-blue",
    lasso: "_lasso_dark-blue",
    Lasso: "_lasso_dark-blue",
    LASSO: "_lasso_dark-blue",
    lassoscript: "_lasso_dark-blue",
    LASSOSCRIPT: "_lasso_dark-blue",
    latex: "_tex_medium-blue",
    LATEX: "_tex_medium-blue",
    "latex.haskell": "_haskell_dark-blue",
    latino: "_latino_medium-blue",
    Latino: "_latino_medium-blue",
    LATINO: "_latino_medium-blue",
    latte: "_html5_medium-red",
    LATTE: "_html5_medium-red",
    lbnf: "_bnf_dark-yellow",
    lc3: "_asm_medium-green",
    "lc-3": "_asm_medium-green",
    lcov: "_text_dark-blue",
    LCOV: "_text_dark-blue",
    lean: "_lean_dark-purple",
    Lean: "_lean_dark-purple",
    LEAN: "_lean_dark-purple",
    ledger: "_graph_medium-blue",
    Ledger: "_graph_medium-blue",
    LEDGER: "_graph_medium-blue",
    less: "_css3_dark-blue",
    LESS: "_css3_dark-blue",
    lessc: "_css3_dark-blue",
    LESSC: "_css3_dark-blue",
    lesscss: "_css3_dark-blue",
    "less-css": "_css3_dark-blue",
    LESSCSS: "_css3_dark-blue",
    "LESS-CSS": "_css3_dark-blue",
    lex: "_lex_medium-cyan",
    Lex: "_lex_medium-cyan",
    LEX: "_lex_medium-cyan",
    lhaskell: "_haskell_dark-blue",
    LHASKELL: "_haskell_dark-blue",
    lhs: "_haskell_dark-blue",
    LHS: "_haskell_dark-blue",
    lilypond: "_lilypond_medium-green",
    LilyPond: "_lilypond_medium-green",
    LILYPOND: "_lilypond_medium-green",
    lisp: "_lisp_medium-red",
    Lisp: "_lisp_medium-red",
    LISP: "_lisp_medium-red",
    litcoffee: "_coffee_light-maroon",
    LITCOFFEE: "_coffee_light-maroon",
    literatehaskell: "_haskell_dark-blue",
    LiterateHaskell: "_haskell_dark-blue",
    LITERATEHASKELL: "_haskell_dark-blue",
    livescript: "_ls_medium-blue",
    "live-script": "_ls_medium-blue",
    "live script": "_ls_medium-blue",
    live_script: "_ls_medium-blue",
    LiveScript: "_ls_medium-blue",
    "Live Script": "_ls_medium-blue",
    "Live-Script": "_ls_medium-blue",
    Live_Script: "_ls_medium-blue",
    LIVESCRIPT: "_ls_medium-blue",
    "LIVE SCRIPT": "_ls_medium-blue",
    "LIVE-SCRIPT": "_ls_medium-blue",
    LIVE_SCRIPT: "_ls_medium-blue",
    llvm: "_llvm_dark-green",
    LLVM: "_llvm_dark-green",
    logos: "_mobile_dark-blue",
    Logos: "_mobile_dark-blue",
    LOGOS: "_mobile_dark-blue",
    logtalk: "_logtalk_medium-red",
    Logtalk: "_logtalk_medium-red",
    LOGTALK: "_logtalk_medium-red",
    lol: "_lolcode_dark-red",
    lolcode: "_lolcode_dark-red",
    LOLCODE: "_lolcode_dark-red",
    ls: "_ls_medium-blue",
    LS: "_ls_medium-blue",
    lsl: "_lsl_medium-cyan",
    LSL: "_lsl_medium-cyan",
    "lst-cpu12": "_asm-m68k_medium-blue",
    "lst-cpu 12": "_asm-m68k_medium-blue",
    "lst-cpu-12": "_asm-m68k_medium-blue",
    "lst-cpu_12": "_asm-m68k_medium-blue",
    "LST-CPU12": "_asm-m68k_medium-blue",
    lua: "_lua_medium-blue",
    Lua: "_lua_medium-blue",
    LUA: "_lua_medium-blue",
    m2: "_macaulay2_light-cyan",
    M2: "_macaulay2_light-cyan",
    m4: "_code_medium-red",
    M4: "_code_medium-red",
    macaulay2: "_macaulay2_light-cyan",
    Macaulay2: "_macaulay2_light-cyan",
    MACAULAY2: "_macaulay2_light-cyan",
    macruby: "_ruby_medium-red",
    MACRUBY: "_ruby_medium-red",
    mail: "_mail_medium-blue",
    "-mail": "_at_medium-red",
    Mail: "_mail_medium-blue",
    MAIL: "_mail_medium-blue",
    "-MAIL": "_at_medium-red",
    make: "_checklist_medium-yellow",
    MAKE: "_checklist_medium-yellow",
    makefile: "_checklist_medium-cyan",
    Makefile: "_checklist_medium-cyan",
    MAKEFILE: "_checklist_medium-cyan",
    mako: "_mako_dark-blue",
    Mako: "_mako_dark-blue",
    MAKO: "_mako_dark-blue",
    man: "_manpage_dark-green",
    MAN: "_manpage_dark-green",
    mandoc: "_manpage_dark-green",
    MANDOC: "_manpage_dark-green",
    manpage: "_manpage_dark-green",
    "man page": "_manpage_dark-green",
    "man-page": "_manpage_dark-green",
    man_page: "_manpage_dark-green",
    MANPAGE: "_manpage_dark-green",
    "MAN PAGE": "_manpage_dark-green",
    "MAN-PAGE": "_manpage_dark-green",
    MAN_PAGE: "_manpage_dark-green",
    map: "_sourcemap_medium-orange",
    "Map": "_sourcemap_medium-orange",
    MAP: "_sourcemap_medium-orange",
    mapbox: "_mapbox_medium-cyan",
    Mapbox: "_mapbox_medium-cyan",
    MAPBOX: "_mapbox_medium-cyan",
    markdown: "_markdown_medium-purple",
    Markdown: "_markdown_medium-purple",
    MARKDOWN: "_markdown_medium-purple",
    marko: "_marko_medium-blue",
    Marko: "_marko_medium-blue",
    MARKO: "_marko_medium-blue",
    masm: "_asm-intel_dark-blue",
    MASM: "_asm-intel_dark-blue",
    mata: "_stata_dark-cyan",
    MATA: "_stata_dark-cyan",
    mathematica: "_mathematica_dark-red",
    Mathematica: "_mathematica_dark-red",
    MATHEMATICA: "_mathematica_dark-red",
    matlab: "_matlab_medium-yellow",
    MATLAB: "_matlab_medium-yellow",
    mawk: "_awk_medium-maroon",
    MAWK: "_awk_medium-maroon",
    maxscript: "_maxscript_dark-blue",
    MAXScript: "_maxscript_dark-blue",
    MAXSCRIPT: "_maxscript_dark-blue",
    mbox: "_at_medium-red",
    MBOX: "_at_medium-red",
    md: "_markdown_medium-blue",
    mdoc: "_manpage_dark-green",
    MDOC: "_manpage_dark-green",
    mediawiki: "_mediawiki_medium-yellow",
    MediaWiki: "_mediawiki_medium-yellow",
    MEDIAWIKI: "_mediawiki_medium-yellow",
    menhir: "_ocaml_dark-yellow",
    MENHIR: "_ocaml_dark-yellow",
    mercury: "_mercury_medium-cyan",
    Mercury: "_mercury_medium-cyan",
    MERCURY: "_mercury_medium-cyan",
    mermaid: "_mermaid_medium-blue",
    Mermaid: "_mermaid_medium-blue",
    MERMAID: "_mermaid_medium-blue",
    meson: "_meson_medium-green",
    Meson: "_meson_medium-green",
    MESON: "_meson_medium-green",
    metafont: "_metapost_dark-green",
    METAFONT: "_metapost_dark-green",
    metapost: "_metapost_dark-green",
    "meta post": "_metapost_dark-green",
    "meta-post": "_metapost_dark-green",
    meta_post: "_metapost_dark-green",
    MetaPost: "_metapost_dark-green",
    "Meta Post": "_metapost_dark-green",
    "Meta-Post": "_metapost_dark-green",
    Meta_Post: "_metapost_dark-green",
    METAPOST: "_metapost_dark-green",
    "META POST": "_metapost_dark-green",
    "META-POST": "_metapost_dark-green",
    META_POST: "_metapost_dark-green",
    mf: "_checklist_medium-yellow",
    MF: "_checklist_medium-yellow",
    mhtml: "_html5_medium-blue",
    MHTML: "_html5_medium-blue",
    minecraft: "_minecraft_dark-green",
    Minecraft: "_minecraft_dark-green",
    MINECRAFT: "_minecraft_dark-green",
    minizinc: "_minizinc_medium-blue",
    "mini zinc": "_minizinc_medium-blue",
    "mini-zinc": "_minizinc_medium-blue",
    mini_zinc: "_minizinc_medium-blue",
    MiniZinc: "_minizinc_medium-blue",
    "Mini Zinc": "_minizinc_medium-blue",
    "Mini-Zinc": "_minizinc_medium-blue",
    Mini_Zinc: "_minizinc_medium-blue",
    MINIZINC: "_minizinc_medium-blue",
    "MINI ZINC": "_minizinc_medium-blue",
    "MINI-ZINC": "_minizinc_medium-blue",
    MINI_ZINC: "_minizinc_medium-blue",
    mint: "_mint_medium-green",
    Mint: "_mint_medium-green",
    MINT: "_mint_medium-green",
    mirah: "_mirah_medium-blue",
    Mirah: "_mirah_medium-blue",
    MIRAH: "_mirah_medium-blue",
    miranda: "_miranda_medium-red",
    Miranda: "_miranda_medium-red",
    MIRANDA: "_miranda_medium-red",
    mirc: "_mirc_medium-red",
    mIRC: "_mirc_medium-red",
    MIRC: "_mirc_medium-red",
    mjml: "_mjml_medium-red",
    MJML: "_mjml_medium-red",
    mma: "_mathematica_dark-red",
    MMA: "_mathematica_dark-red",
    modelica: "_modelica_medium-red",
    Modelica: "_modelica_medium-red",
    MODELICA: "_modelica_medium-red",
    modelicascript: "_modelica_medium-red",
    modula2: "_modula2_medium-blue",
    "modula-2": "_modula2_medium-blue",
    "Modula-2": "_modula2_medium-blue",
    "MODULA-2": "_modula2_medium-blue",
    modula3: "_modula3_medium-blue",
    "modula-3": "_modula3_medium-red",
    "Modula-3": "_modula3_medium-red",
    "MODULA-3": "_modula3_medium-red",
    monkey: "_monkey_medium-maroon",
    Monkey: "_monkey_medium-maroon",
    MONKEY: "_monkey_medium-maroon",
    moon: "_moon_medium-yellow",
    moonscript: "_moon_medium-yellow",
    "moon script": "_moon_medium-yellow",
    "moon-script": "_moon_medium-yellow",
    moon_script: "_moon_medium-yellow",
    MoonScript: "_moon_medium-yellow",
    "Moon Script": "_moon_medium-yellow",
    "Moon-Script": "_moon_medium-yellow",
    Moon_Script: "_moon_medium-yellow",
    MOONSCRIPT: "_moon_medium-yellow",
    "MOON SCRIPT": "_moon_medium-yellow",
    "MOON-SCRIPT": "_moon_medium-yellow",
    MOON_SCRIPT: "_moon_medium-yellow",
    mq4: "_code_dark-blue",
    mq5: "_code_dark-blue",
    mrc: "_mirc_medium-red",
    mss: "_mapbox_medium-cyan",
    muse: "_amusewiki_dark-red",
    Muse: "_amusewiki_dark-red",
    MUSE: "_amusewiki_dark-red",
    mustache: "_mustache_medium-orange",
    Mustache: "_mustache_medium-orange",
    MUSTACHE: "_mustache_medium-orange",
    mzn: "_minizinc_medium-blue",
    MZN: "_minizinc_medium-blue",
    nano: "_nano_medium-blue",
    Nano: "_nano_medium-blue",
    NANO: "_nano_medium-blue",
    nanorc: "_nano_medium-blue",
    nant: "_nant_medium-orange",
    NAnt: "_nant_medium-orange",
    NANT: "_nant_medium-orange",
    "nant-build": "_nant_medium-orange",
    nasl: "_nessus_medium-cyan",
    nawk: "_awk_medium-green",
    NAWK: "_awk_medium-green",
    "ncarcommandlanguage(ncl)": "_earth_medium-green",
    "ncarcommandlanguage (ncl)": "_earth_medium-green",
    "ncarcommandlanguage-(ncl)": "_earth_medium-green",
    "ncarcommandlanguage_(ncl)": "_earth_medium-green",
    "ncarcommand language(ncl)": "_earth_medium-green",
    "ncarcommand language (ncl)": "_earth_medium-green",
    "ncarcommand language-(ncl)": "_earth_medium-green",
    "ncarcommand language_(ncl)": "_earth_medium-green",
    "ncarcommand-language(ncl)": "_earth_medium-green",
    "ncarcommand-language (ncl)": "_earth_medium-green",
    "ncarcommand-language-(ncl)": "_earth_medium-green",
    "ncarcommand-language_(ncl)": "_earth_medium-green",
    "ncarcommand_language(ncl)": "_earth_medium-green",
    "ncarcommand_language (ncl)": "_earth_medium-green",
    "ncarcommand_language-(ncl)": "_earth_medium-green",
    "ncarcommand_language_(ncl)": "_earth_medium-green",
    "ncar commandlanguage(ncl)": "_earth_medium-green",
    "ncar commandlanguage (ncl)": "_earth_medium-green",
    "ncar commandlanguage-(ncl)": "_earth_medium-green",
    "ncar commandlanguage_(ncl)": "_earth_medium-green",
    "ncar command language(ncl)": "_earth_medium-green",
    "ncar command language (ncl)": "_earth_medium-green",
    "ncar command language-(ncl)": "_earth_medium-green",
    "ncar command language_(ncl)": "_earth_medium-green",
    "ncar command-language(ncl)": "_earth_medium-green",
    "ncar command-language (ncl)": "_earth_medium-green",
    "ncar command-language-(ncl)": "_earth_medium-green",
    "ncar command-language_(ncl)": "_earth_medium-green",
    "ncar command_language(ncl)": "_earth_medium-green",
    "ncar command_language (ncl)": "_earth_medium-green",
    "ncar command_language-(ncl)": "_earth_medium-green",
    "ncar command_language_(ncl)": "_earth_medium-green",
    "ncar-commandlanguage(ncl)": "_earth_medium-green",
    "ncar-commandlanguage (ncl)": "_earth_medium-green",
    "ncar-commandlanguage-(ncl)": "_earth_medium-green",
    "ncar-commandlanguage_(ncl)": "_earth_medium-green",
    "ncar-command language(ncl)": "_earth_medium-green",
    "ncar-command language (ncl)": "_earth_medium-green",
    "ncar-command language-(ncl)": "_earth_medium-green",
    "ncar-command language_(ncl)": "_earth_medium-green",
    "ncar-command-language(ncl)": "_earth_medium-green",
    "ncar-command-language (ncl)": "_earth_medium-green",
    "ncar-command-language-(ncl)": "_earth_medium-green",
    "ncar-command-language_(ncl)": "_earth_medium-green",
    "ncar-command_language(ncl)": "_earth_medium-green",
    "ncar-command_language (ncl)": "_earth_medium-green",
    "ncar-command_language-(ncl)": "_earth_medium-green",
    "ncar-command_language_(ncl)": "_earth_medium-green",
    "ncar_commandlanguage(ncl)": "_earth_medium-green",
    "ncar_commandlanguage (ncl)": "_earth_medium-green",
    "ncar_commandlanguage-(ncl)": "_earth_medium-green",
    "ncar_commandlanguage_(ncl)": "_earth_medium-green",
    "ncar_command language(ncl)": "_earth_medium-green",
    "ncar_command language (ncl)": "_earth_medium-green",
    "ncar_command language-(ncl)": "_earth_medium-green",
    "ncar_command language_(ncl)": "_earth_medium-green",
    "ncar_command-language(ncl)": "_earth_medium-green",
    "ncar_command-language (ncl)": "_earth_medium-green",
    "ncar_command-language-(ncl)": "_earth_medium-green",
    "ncar_command-language_(ncl)": "_earth_medium-green",
    "ncar_command_language(ncl)": "_earth_medium-green",
    "ncar_command_language (ncl)": "_earth_medium-green",
    "ncar_command_language-(ncl)": "_earth_medium-green",
    "ncar_command_language_(ncl)": "_earth_medium-green",
    "NCARCommandLanguage(NCL)": "_earth_medium-green",
    "NCARCommandLanguage (NCL)": "_earth_medium-green",
    "NCARCommandLanguage-(NCL)": "_earth_medium-green",
    "NCARCommandLanguage_(NCL)": "_earth_medium-green",
    "NCARCommand Language(NCL)": "_earth_medium-green",
    "NCARCommand Language (NCL)": "_earth_medium-green",
    "NCARCommand Language-(NCL)": "_earth_medium-green",
    "NCARCommand Language_(NCL)": "_earth_medium-green",
    "NCARCommand-Language(NCL)": "_earth_medium-green",
    "NCARCommand-Language (NCL)": "_earth_medium-green",
    "NCARCommand-Language-(NCL)": "_earth_medium-green",
    "NCARCommand-Language_(NCL)": "_earth_medium-green",
    "NCARCommand_Language(NCL)": "_earth_medium-green",
    "NCARCommand_Language (NCL)": "_earth_medium-green",
    "NCARCommand_Language-(NCL)": "_earth_medium-green",
    "NCARCommand_Language_(NCL)": "_earth_medium-green",
    "NCAR CommandLanguage(NCL)": "_earth_medium-green",
    "NCAR CommandLanguage (NCL)": "_earth_medium-green",
    "NCAR CommandLanguage-(NCL)": "_earth_medium-green",
    "NCAR CommandLanguage_(NCL)": "_earth_medium-green",
    "NCAR Command Language(NCL)": "_earth_medium-green",
    "NCAR Command Language (NCL)": "_earth_medium-green",
    "NCAR Command Language-(NCL)": "_earth_medium-green",
    "NCAR Command Language_(NCL)": "_earth_medium-green",
    "NCAR Command-Language(NCL)": "_earth_medium-green",
    "NCAR Command-Language (NCL)": "_earth_medium-green",
    "NCAR Command-Language-(NCL)": "_earth_medium-green",
    "NCAR Command-Language_(NCL)": "_earth_medium-green",
    "NCAR Command_Language(NCL)": "_earth_medium-green",
    "NCAR Command_Language (NCL)": "_earth_medium-green",
    "NCAR Command_Language-(NCL)": "_earth_medium-green",
    "NCAR Command_Language_(NCL)": "_earth_medium-green",
    "NCAR-CommandLanguage(NCL)": "_earth_medium-green",
    "NCAR-CommandLanguage (NCL)": "_earth_medium-green",
    "NCAR-CommandLanguage-(NCL)": "_earth_medium-green",
    "NCAR-CommandLanguage_(NCL)": "_earth_medium-green",
    "NCAR-Command Language(NCL)": "_earth_medium-green",
    "NCAR-Command Language (NCL)": "_earth_medium-green",
    "NCAR-Command Language-(NCL)": "_earth_medium-green",
    "NCAR-Command Language_(NCL)": "_earth_medium-green",
    "NCAR-Command-Language(NCL)": "_earth_medium-green",
    "NCAR-Command-Language (NCL)": "_earth_medium-green",
    "NCAR-Command-Language-(NCL)": "_earth_medium-green",
    "NCAR-Command-Language_(NCL)": "_earth_medium-green",
    "NCAR-Command_Language(NCL)": "_earth_medium-green",
    "NCAR-Command_Language (NCL)": "_earth_medium-green",
    "NCAR-Command_Language-(NCL)": "_earth_medium-green",
    "NCAR-Command_Language_(NCL)": "_earth_medium-green",
    "NCAR_CommandLanguage(NCL)": "_earth_medium-green",
    "NCAR_CommandLanguage (NCL)": "_earth_medium-green",
    "NCAR_CommandLanguage-(NCL)": "_earth_medium-green",
    "NCAR_CommandLanguage_(NCL)": "_earth_medium-green",
    "NCAR_Command Language(NCL)": "_earth_medium-green",
    "NCAR_Command Language (NCL)": "_earth_medium-green",
    "NCAR_Command Language-(NCL)": "_earth_medium-green",
    "NCAR_Command Language_(NCL)": "_earth_medium-green",
    "NCAR_Command-Language(NCL)": "_earth_medium-green",
    "NCAR_Command-Language (NCL)": "_earth_medium-green",
    "NCAR_Command-Language-(NCL)": "_earth_medium-green",
    "NCAR_Command-Language_(NCL)": "_earth_medium-green",
    "NCAR_Command_Language(NCL)": "_earth_medium-green",
    "NCAR_Command_Language (NCL)": "_earth_medium-green",
    "NCAR_Command_Language-(NCL)": "_earth_medium-green",
    "NCAR_Command_Language_(NCL)": "_earth_medium-green",
    "NCARCOMMANDLANGUAGE(NCL)": "_earth_medium-green",
    "NCARCOMMANDLANGUAGE (NCL)": "_earth_medium-green",
    "NCARCOMMANDLANGUAGE-(NCL)": "_earth_medium-green",
    "NCARCOMMANDLANGUAGE_(NCL)": "_earth_medium-green",
    "NCARCOMMAND LANGUAGE(NCL)": "_earth_medium-green",
    "NCARCOMMAND LANGUAGE (NCL)": "_earth_medium-green",
    "NCARCOMMAND LANGUAGE-(NCL)": "_earth_medium-green",
    "NCARCOMMAND LANGUAGE_(NCL)": "_earth_medium-green",
    "NCARCOMMAND-LANGUAGE(NCL)": "_earth_medium-green",
    "NCARCOMMAND-LANGUAGE (NCL)": "_earth_medium-green",
    "NCARCOMMAND-LANGUAGE-(NCL)": "_earth_medium-green",
    "NCARCOMMAND-LANGUAGE_(NCL)": "_earth_medium-green",
    "NCARCOMMAND_LANGUAGE(NCL)": "_earth_medium-green",
    "NCARCOMMAND_LANGUAGE (NCL)": "_earth_medium-green",
    "NCARCOMMAND_LANGUAGE-(NCL)": "_earth_medium-green",
    "NCARCOMMAND_LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR COMMANDLANGUAGE(NCL)": "_earth_medium-green",
    "NCAR COMMANDLANGUAGE (NCL)": "_earth_medium-green",
    "NCAR COMMANDLANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR COMMANDLANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR COMMAND LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR COMMAND LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR COMMAND LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR COMMAND LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR COMMAND-LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR COMMAND-LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR COMMAND-LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR COMMAND-LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR COMMAND_LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR COMMAND_LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR COMMAND_LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR COMMAND_LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR-COMMANDLANGUAGE(NCL)": "_earth_medium-green",
    "NCAR-COMMANDLANGUAGE (NCL)": "_earth_medium-green",
    "NCAR-COMMANDLANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR-COMMANDLANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR-COMMAND LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR-COMMAND LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR-COMMAND LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR-COMMAND LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR-COMMAND-LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR-COMMAND-LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR-COMMAND-LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR-COMMAND-LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR-COMMAND_LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR-COMMAND_LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR-COMMAND_LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR-COMMAND_LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR_COMMANDLANGUAGE(NCL)": "_earth_medium-green",
    "NCAR_COMMANDLANGUAGE (NCL)": "_earth_medium-green",
    "NCAR_COMMANDLANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR_COMMANDLANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR_COMMAND LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR_COMMAND LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR_COMMAND LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR_COMMAND LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR_COMMAND-LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR_COMMAND-LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR_COMMAND-LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR_COMMAND-LANGUAGE_(NCL)": "_earth_medium-green",
    "NCAR_COMMAND_LANGUAGE(NCL)": "_earth_medium-green",
    "NCAR_COMMAND_LANGUAGE (NCL)": "_earth_medium-green",
    "NCAR_COMMAND_LANGUAGE-(NCL)": "_earth_medium-green",
    "NCAR_COMMAND_LANGUAGE_(NCL)": "_earth_medium-green",
    ncl: "_earth_medium-green",
    neko: "_neko_medium-orange",
    Neko: "_neko_medium-orange",
    NEKO: "_neko_medium-orange",
    neo4j: "_neo4j_medium-blue",
    Neo4J: "_neo4j_medium-blue",
    NEO4J: "_neo4j_medium-blue",
    neon: "_neon_medium-grey",
    NEON: "_neon_medium-grey",
    neosnippet: "_database_medium-green",
    nessus: "_nessus_medium-cyan",
    Nessus: "_nessus_medium-cyan",
    NESSUS: "_nessus_medium-cyan",
    newlisp: "_lisp_medium-red",
    NEWLISP: "_lisp_medium-red",
    nextflow: "_nextflow_medium-green",
    Nextflow: "_nextflow_medium-green",
    NEXTFLOW: "_nextflow_medium-green",
    nginx: "_nginx_medium-green",
    NGINX: "_nginx_medium-green",
    nginxconfigurationfile: "_nginx_medium-green",
    "nginxconfiguration file": "_nginx_medium-green",
    "nginxconfiguration-file": "_nginx_medium-green",
    nginxconfiguration_file: "_nginx_medium-green",
    "nginx configurationfile": "_nginx_medium-green",
    "nginx configuration file": "_nginx_medium-green",
    "nginx configuration-file": "_nginx_medium-green",
    "nginx configuration_file": "_nginx_medium-green",
    "nginx-configurationfile": "_nginx_medium-green",
    "nginx-configuration file": "_nginx_medium-green",
    "nginx-configuration-file": "_nginx_medium-green",
    "nginx-configuration_file": "_nginx_medium-green",
    nginx_configurationfile: "_nginx_medium-green",
    "nginx_configuration file": "_nginx_medium-green",
    "nginx_configuration-file": "_nginx_medium-green",
    nginx_configuration_file: "_nginx_medium-green",
    NGINXCONFIGURATIONFILE: "_nginx_medium-green",
    "NGINXCONFIGURATION FILE": "_nginx_medium-green",
    "NGINXCONFIGURATION-FILE": "_nginx_medium-green",
    NGINXCONFIGURATION_FILE: "_nginx_medium-green",
    "NGINX CONFIGURATIONFILE": "_nginx_medium-green",
    "NGINX CONFIGURATION FILE": "_nginx_medium-green",
    "NGINX CONFIGURATION-FILE": "_nginx_medium-green",
    "NGINX CONFIGURATION_FILE": "_nginx_medium-green",
    "NGINX-CONFIGURATIONFILE": "_nginx_medium-green",
    "NGINX-CONFIGURATION FILE": "_nginx_medium-green",
    "NGINX-CONFIGURATION-FILE": "_nginx_medium-green",
    "NGINX-CONFIGURATION_FILE": "_nginx_medium-green",
    NGINX_CONFIGURATIONFILE: "_nginx_medium-green",
    "NGINX_CONFIGURATION FILE": "_nginx_medium-green",
    "NGINX_CONFIGURATION-FILE": "_nginx_medium-green",
    NGINX_CONFIGURATION_FILE: "_nginx_medium-green",
    nickle: "_nickle_medium-grey",
    Nickle: "_nickle_medium-grey",
    NICKLE: "_nickle_medium-grey",
    nim: "_nimrod_medium-green",
    Nim: "_nimrod_medium-green",
    NIM: "_nimrod_medium-green",
    nimrod: "_nimrod_medium-green",
    Nimrod: "_nimrod_medium-green",
    NIMROD: "_nimrod_medium-green",
    ninja: "_shuriken_medium-blue",
    Ninja: "_shuriken_medium-blue",
    NINJA: "_shuriken_medium-blue",
    nit: "_nit_dark-green",
    Nit: "_nit_dark-green",
    NIT: "_nit_dark-green",
    nix: "_nix_medium-cyan",
    Nix: "_nix_medium-cyan",
    NIX: "_nix_medium-cyan",
    nixos: "_nix_medium-cyan",
    NIXOS: "_nix_medium-cyan",
    nmap: "_nmap_dark-blue",
    Nmap: "_nmap_dark-blue",
    NMAP: "_nmap_dark-blue",
    node: "_js_medium-yellow",
    NODE: "_js_medium-yellow",
    noon: "_noon_dark-grey",
    Noon: "_noon_dark-grey",
    NOON: "_noon_dark-grey",
    npm: "_npm_medium-red",
    NPM: "_npm_medium-red",
    nroff: "_manpage_dark-green",
    NROFF: "_manpage_dark-green",
    nsis: "_nsis_medium-purple",
    NSIS: "_nsis_medium-purple",
    nu: "_recycle_light-green",
    Nu: "_recycle_light-green",
    NU: "_recycle_light-green",
    nush: "_recycle_light-green",
    NUSH: "_recycle_light-green",
    nut: "_squirrel_medium-maroon",
    nvim: "_vim_medium-green",
    NVim: "_vim_medium-green",
    NVIM: "_vim_medium-green",
    nwscript: "_nwscript_dark-blue",
    NWScript: "_nwscript_dark-blue",
    NWSCRIPT: "_nwscript_dark-blue",
    nxc: "_nxc_medium-orange",
    NXC: "_nxc_medium-orange",
    o3: "_ogone_medium-grey",
    oberon: "_oberon_medium-purple",
    Oberon: "_oberon_medium-purple",
    OBERON: "_oberon_medium-purple",
    objc: "_objc_medium-blue",
    "obj c": "_objc_medium-blue",
    "obj-c": "_objc_medium-blue",
    obj_c: "_objc_medium-blue",
    "objc++": "_objc_dark-blue",
    "obj c++": "_objc_dark-blue",
    "obj-c++": "_objc_dark-blue",
    "obj_c++": "_objc_dark-blue",
    ObjC: "_objc_medium-blue",
    "Obj C": "_objc_medium-blue",
    "Obj-C": "_objc_medium-blue",
    Obj_C: "_objc_medium-blue",
    "ObjC++": "_objc_dark-blue",
    "Obj C++": "_objc_dark-blue",
    "Obj-C++": "_objc_dark-blue",
    "Obj_C++": "_objc_dark-blue",
    OBJC: "_objc_medium-blue",
    "OBJ C": "_objc_medium-blue",
    "OBJ-C": "_objc_medium-blue",
    OBJ_C: "_objc_medium-blue",
    "OBJC++": "_objc_dark-blue",
    "OBJ C++": "_objc_dark-blue",
    "OBJ-C++": "_objc_dark-blue",
    "OBJ_C++": "_objc_dark-blue",
    objcpp: "_objc_dark-blue",
    "obj cpp": "_objc_dark-blue",
    "obj-cpp": "_objc_dark-blue",
    obj_cpp: "_objc_dark-blue",
    ObjCpp: "_objc_dark-blue",
    "Obj Cpp": "_objc_dark-blue",
    "Obj-Cpp": "_objc_dark-blue",
    Obj_Cpp: "_objc_dark-blue",
    OBJCPP: "_objc_dark-blue",
    "OBJ CPP": "_objc_dark-blue",
    "OBJ-CPP": "_objc_dark-blue",
    OBJ_CPP: "_objc_dark-blue",
    objectivec: "_objc_medium-blue",
    "objective c": "_objc_medium-blue",
    "objective-c": "_objc_dark-blue",
    objective_c: "_objc_medium-blue",
    "objectivec++": "_objc_dark-blue",
    "objective c++": "_objc_dark-blue",
    "objective-c++": "_objc_dark-blue",
    "objective_c++": "_objc_dark-blue",
    ObjectiveC: "_objc_medium-blue",
    "Objective C": "_objc_medium-blue",
    "Objective-C": "_objc_dark-blue",
    Objective_C: "_objc_medium-blue",
    "ObjectiveC++": "_objc_dark-blue",
    "Objective C++": "_objc_dark-blue",
    "Objective-C++": "_objc_dark-blue",
    "Objective_C++": "_objc_dark-blue",
    OBJECTIVEC: "_objc_medium-blue",
    "OBJECTIVE C": "_objc_medium-blue",
    "OBJECTIVE-C": "_objc_dark-blue",
    OBJECTIVE_C: "_objc_medium-blue",
    "OBJECTIVEC++": "_objc_dark-blue",
    "OBJECTIVE C++": "_objc_dark-blue",
    "OBJECTIVE-C++": "_objc_dark-blue",
    "OBJECTIVE_C++": "_objc_dark-blue",
    objectivecpp: "_objc_dark-blue",
    "objective cpp": "_objc_dark-blue",
    "objective-cpp": "_objc_dark-blue",
    objective_cpp: "_objc_dark-blue",
    ObjectiveCpp: "_objc_dark-blue",
    "Objective Cpp": "_objc_dark-blue",
    "Objective-Cpp": "_objc_dark-blue",
    Objective_Cpp: "_objc_dark-blue",
    OBJECTIVECPP: "_objc_dark-blue",
    "OBJECTIVE CPP": "_objc_dark-blue",
    "OBJECTIVE-CPP": "_objc_dark-blue",
    OBJECTIVE_CPP: "_objc_dark-blue",
    "objective-j": "_objj_dark-orange",
    objectivej: "_objj_dark-orange",
    "Objective-J": "_objj_dark-orange",
    ObjectiveJ: "_objj_dark-orange",
    "OBJECTIVE-J": "_objj_dark-orange",
    OBJECTIVEJ: "_objj_dark-orange",
    objj: "_objj_dark-orange",
    "obj-j": "_objj_dark-orange",
    ObjJ: "_objj_dark-orange",
    "Obj-J": "_objj_dark-orange",
    OBJJ: "_objj_dark-orange",
    "OBJ-J": "_objj_dark-orange",
    ocaml: "_ocaml_dark-yellow",
    OCaml: "_ocaml_dark-yellow",
    OCAML: "_ocaml_dark-yellow",
    ocamllex: "_ocaml_dark-green",
    OCAMLLEX: "_ocaml_dark-green",
    octave: "_octave_medium-orange",
    Octave: "_octave_medium-orange",
    OCTAVE: "_octave_medium-orange",
    odin: "_odin_medium-blue",
    Odin: "_odin_medium-blue",
    ODIN: "_odin_medium-blue",
    ogone: "_ogone_medium-grey",
    Ogone: "_ogone_medium-grey",
    OGONE: "_ogone_medium-grey",
    ohm: "_code_dark-yellow",
    ooc: "_ooc_medium-green",
    OOC: "_ooc_medium-green",
    opa: "_opa_medium-blue",
    Opa: "_opa_medium-blue",
    OPA: "_opa_medium-blue",
    openbsd: "_openbsd_medium-orange",
    OpenBSD: "_openbsd_medium-orange",
    OPENBSD: "_openbsd_medium-orange",
    "openbsd-pkg.contents": "_openbsd_medium-orange",
    "openbsd-pkg.desc": "_openbsd_medium-orange",
    opencl: "_opencl_medium-red",
    OpenCL: "_opencl_medium-red",
    OPENCL: "_opencl_medium-red",
    openedge: "_progress_medium-green",
    OPENEDGE: "_progress_medium-green",
    openedgeabl: "_progress_medium-green",
    "openedge abl": "_progress_medium-green",
    "openedge-abl": "_progress_medium-green",
    openedge_abl: "_progress_medium-green",
    OpenEdgeABL: "_progress_medium-green",
    "OpenEdge ABL": "_progress_medium-green",
    "OpenEdge-ABL": "_progress_medium-green",
    OpenEdge_ABL: "_progress_medium-green",
    OPENEDGEABL: "_progress_medium-green",
    "OPENEDGE ABL": "_progress_medium-green",
    "OPENEDGE-ABL": "_progress_medium-green",
    OPENEDGE_ABL: "_progress_medium-green",
    openglshadinglanguage: "_opengl_dark-cyan",
    "openglshading language": "_opengl_dark-cyan",
    "openglshading-language": "_opengl_dark-cyan",
    openglshading_language: "_opengl_dark-cyan",
    "opengl shadinglanguage": "_opengl_dark-cyan",
    "opengl shading language": "_opengl_dark-cyan",
    "opengl shading-language": "_opengl_dark-cyan",
    "opengl shading_language": "_opengl_dark-cyan",
    "opengl-shadinglanguage": "_opengl_dark-cyan",
    "opengl-shading language": "_opengl_dark-cyan",
    "opengl-shading-language": "_opengl_dark-cyan",
    "opengl-shading_language": "_opengl_dark-cyan",
    opengl_shadinglanguage: "_opengl_dark-cyan",
    "opengl_shading language": "_opengl_dark-cyan",
    "opengl_shading-language": "_opengl_dark-cyan",
    opengl_shading_language: "_opengl_dark-cyan",
    OpenGLShadingLanguage: "_opengl_dark-cyan",
    "OpenGLShading Language": "_opengl_dark-cyan",
    "OpenGLShading-Language": "_opengl_dark-cyan",
    OpenGLShading_Language: "_opengl_dark-cyan",
    "OpenGL ShadingLanguage": "_opengl_dark-cyan",
    "OpenGL Shading Language": "_opengl_dark-cyan",
    "OpenGL Shading-Language": "_opengl_dark-cyan",
    "OpenGL Shading_Language": "_opengl_dark-cyan",
    "OpenGL-ShadingLanguage": "_opengl_dark-cyan",
    "OpenGL-Shading Language": "_opengl_dark-cyan",
    "OpenGL-Shading-Language": "_opengl_dark-cyan",
    "OpenGL-Shading_Language": "_opengl_dark-cyan",
    OpenGL_ShadingLanguage: "_opengl_dark-cyan",
    "OpenGL_Shading Language": "_opengl_dark-cyan",
    "OpenGL_Shading-Language": "_opengl_dark-cyan",
    OpenGL_Shading_Language: "_opengl_dark-cyan",
    OPENGLSHADINGLANGUAGE: "_opengl_dark-cyan",
    "OPENGLSHADING LANGUAGE": "_opengl_dark-cyan",
    "OPENGLSHADING-LANGUAGE": "_opengl_dark-cyan",
    OPENGLSHADING_LANGUAGE: "_opengl_dark-cyan",
    "OPENGL SHADINGLANGUAGE": "_opengl_dark-cyan",
    "OPENGL SHADING LANGUAGE": "_opengl_dark-cyan",
    "OPENGL SHADING-LANGUAGE": "_opengl_dark-cyan",
    "OPENGL SHADING_LANGUAGE": "_opengl_dark-cyan",
    "OPENGL-SHADINGLANGUAGE": "_opengl_dark-cyan",
    "OPENGL-SHADING LANGUAGE": "_opengl_dark-cyan",
    "OPENGL-SHADING-LANGUAGE": "_opengl_dark-cyan",
    "OPENGL-SHADING_LANGUAGE": "_opengl_dark-cyan",
    OPENGL_SHADINGLANGUAGE: "_opengl_dark-cyan",
    "OPENGL_SHADING LANGUAGE": "_opengl_dark-cyan",
    "OPENGL_SHADING-LANGUAGE": "_opengl_dark-cyan",
    OPENGL_SHADING_LANGUAGE: "_opengl_dark-cyan",
    openpolicyagent: "_openpolicy_medium-cyan",
    "openpolicy agent": "_openpolicy_medium-cyan",
    "openpolicy-agent": "_openpolicy_medium-cyan",
    openpolicy_agent: "_openpolicy_medium-cyan",
    "open policyagent": "_openpolicy_medium-cyan",
    "open policy agent": "_openpolicy_medium-cyan",
    "open policy-agent": "_openpolicy_medium-cyan",
    "open policy_agent": "_openpolicy_medium-cyan",
    "open-policyagent": "_openpolicy_medium-cyan",
    "open-policy agent": "_openpolicy_medium-cyan",
    "open-policy-agent": "_openpolicy_medium-cyan",
    "open-policy_agent": "_openpolicy_medium-cyan",
    open_policyagent: "_openpolicy_medium-cyan",
    "open_policy agent": "_openpolicy_medium-cyan",
    "open_policy-agent": "_openpolicy_medium-cyan",
    open_policy_agent: "_openpolicy_medium-cyan",
    OpenPolicyAgent: "_openpolicy_medium-cyan",
    "OpenPolicy Agent": "_openpolicy_medium-cyan",
    "OpenPolicy-Agent": "_openpolicy_medium-cyan",
    OpenPolicy_Agent: "_openpolicy_medium-cyan",
    "Open PolicyAgent": "_openpolicy_medium-cyan",
    "Open Policy Agent": "_openpolicy_medium-cyan",
    "Open Policy-Agent": "_openpolicy_medium-cyan",
    "Open Policy_Agent": "_openpolicy_medium-cyan",
    "Open-PolicyAgent": "_openpolicy_medium-cyan",
    "Open-Policy Agent": "_openpolicy_medium-cyan",
    "Open-Policy-Agent": "_openpolicy_medium-cyan",
    "Open-Policy_Agent": "_openpolicy_medium-cyan",
    Open_PolicyAgent: "_openpolicy_medium-cyan",
    "Open_Policy Agent": "_openpolicy_medium-cyan",
    "Open_Policy-Agent": "_openpolicy_medium-cyan",
    Open_Policy_Agent: "_openpolicy_medium-cyan",
    OPENPOLICYAGENT: "_openpolicy_medium-cyan",
    "OPENPOLICY AGENT": "_openpolicy_medium-cyan",
    "OPENPOLICY-AGENT": "_openpolicy_medium-cyan",
    OPENPOLICY_AGENT: "_openpolicy_medium-cyan",
    "OPEN POLICYAGENT": "_openpolicy_medium-cyan",
    "OPEN POLICY AGENT": "_openpolicy_medium-cyan",
    "OPEN POLICY-AGENT": "_openpolicy_medium-cyan",
    "OPEN POLICY_AGENT": "_openpolicy_medium-cyan",
    "OPEN-POLICYAGENT": "_openpolicy_medium-cyan",
    "OPEN-POLICY AGENT": "_openpolicy_medium-cyan",
    "OPEN-POLICY-AGENT": "_openpolicy_medium-cyan",
    "OPEN-POLICY_AGENT": "_openpolicy_medium-cyan",
    OPEN_POLICYAGENT: "_openpolicy_medium-cyan",
    "OPEN_POLICY AGENT": "_openpolicy_medium-cyan",
    "OPEN_POLICY-AGENT": "_openpolicy_medium-cyan",
    OPEN_POLICY_AGENT: "_openpolicy_medium-cyan",
    openqasm: "_qiskit_dark-blue",
    OpenQASM: "_qiskit_dark-blue",
    OPENQASM: "_qiskit_dark-blue",
    openscad: "_scad_medium-orange",
    OpenSCAD: "_scad_medium-orange",
    OPENSCAD: "_scad_medium-orange",
    opentype: "_database_light-blue",
    openvms: "_openvms_medium-orange",
    OpenVMS: "_openvms_medium-orange",
    OPENVMS: "_openvms_medium-orange",
    osascript: "_apple_medium-purple",
    OSASCRIPT: "_apple_medium-purple",
    ox: "_ox_medium-cyan",
    Ox: "_ox_medium-cyan",
    OX: "_ox_medium-cyan",
    oxygene: "_oxygene_medium-cyan",
    Oxygene: "_oxygene_medium-cyan",
    OXYGENE: "_oxygene_medium-cyan",
    oz: "_oz_medium-yellow",
    Oz: "_oz_medium-yellow",
    OZ: "_oz_medium-yellow",
    p4: "_p4_dark-purple",
    P4: "_p4_dark-purple",
    p8: "_pico8_medium-red",
    paket: "_package_medium-blue",
    Paket: "_package_medium-blue",
    PAKET: "_package_medium-blue",
    pan: "_pan_medium-red",
    Pan: "_pan_medium-red",
    PAN: "_pan_medium-red",
    pandoc: "_markdown_medium-blue",
    Pandoc: "_markdown_medium-blue",
    PANDOC: "_markdown_medium-blue",
    papyrus: "_papyrus_medium-green",
    Papyrus: "_papyrus_medium-green",
    PAPYRUS: "_papyrus_medium-green",
    "papyrus-assembly": "_papyrus_medium-green",
    "papyrus.skyrim": "_papyrus_medium-green",
    parrot: "_parrot_dark-blue",
    Parrot: "_parrot_dark-blue",
    PARROT: "_parrot_dark-blue",
    "parrot.pasm": "_parrot_dark-green",
    "parrot.pir": "_parrot_dark-blue",
    pascal: "_pascal_medium-purple",
    Pascal: "_pascal_medium-purple",
    PASCAL: "_pascal_medium-purple",
    pasm: "_parrot_dark-green",
    PASM: "_parrot_dark-green",
    pawn: "_pawn_medium-orange",
    PAWN: "_pawn_medium-orange",
    "pcb.board": "_kicad_dark-blue",
    "pcb.schematic": "_kicad_dark-green",
    pegcoffee: "_peg_medium-maroon",
    PEGCOFFEE: "_peg_medium-maroon",
    pegjs: "_peg_medium-maroon",
    "peg js": "_peg_medium-maroon",
    "peg-js": "_peg_medium-maroon",
    peg_js: "_peg_medium-maroon",
    PegJS: "_peg_medium-maroon",
    "Peg JS": "_peg_medium-maroon",
    "Peg-JS": "_peg_medium-maroon",
    Peg_JS: "_peg_medium-maroon",
    PEGJS: "_peg_medium-maroon",
    "PEG JS": "_peg_medium-maroon",
    "PEG-JS": "_peg_medium-maroon",
    PEG_JS: "_peg_medium-maroon",
    pep8: "_python_medium-orange",
    PEP8: "_python_medium-orange",
    perl: "_perl_medium-blue",
    Perl: "_perl_medium-blue",
    PERL: "_perl_medium-blue",
    perl6: "_perl6_medium-purple",
    Perl6: "_perl6_medium-purple",
    PERL6: "_perl6_medium-purple",
    perl6fe: "_perl6_medium-purple",
    pfaedit: "_ff_medium-orange",
    PFAEDIT: "_ff_medium-orange",
    pfm: "_markdown_medium-blue",
    pgf: "_tex_medium-purple",
    PGF: "_tex_medium-purple",
    phalcon: "_phalcon_medium-cyan",
    Phalcon: "_phalcon_medium-cyan",
    PHALCON: "_phalcon_medium-cyan",
    php: "_php_dark-blue",
    PHP: "_php_dark-blue",
    "php.blade": "_laravel_medium-orange",
    pic: "_manpage_dark-green",
    PIC: "_manpage_dark-green",
    pico8: "_pico8_medium-red",
    "pico 8": "_pico8_medium-red",
    "pico-8": "_pico8_medium-red",
    pico_8: "_pico8_medium-red",
    PICO8: "_pico8_medium-red",
    "PICO 8": "_pico8_medium-red",
    "PICO-8": "_pico8_medium-red",
    PICO_8: "_pico8_medium-red",
    pikchr: "_manpage_dark-green",
    PIKCHR: "_manpage_dark-green",
    pine: "_pinescript_medium-green",
    pinescript: "_pinescript_medium-green",
    "pine script": "_pinescript_medium-green",
    "pine-script": "_pinescript_medium-green",
    pine_script: "_pinescript_medium-green",
    PineScript: "_pinescript_medium-green",
    "Pine Script": "_pinescript_medium-green",
    "Pine-Script": "_pinescript_medium-green",
    Pine_Script: "_pinescript_medium-green",
    PINESCRIPT: "_pinescript_medium-green",
    "PINE SCRIPT": "_pinescript_medium-green",
    "PINE-SCRIPT": "_pinescript_medium-green",
    PINE_SCRIPT: "_pinescript_medium-green",
    pir: "_parrot_dark-blue",
    PIR: "_parrot_dark-blue",
    pl6: "_perl6_medium-purple",
    PL6: "_perl6_medium-purple",
    plain: "_text_medium-blue",
    plaintext: "_text_medium-blue",
    "plain text": "_text_medium-blue",
    "plain-text": "_text_medium-blue",
    plain_text: "_text_medium-blue",
    plist: "_code_dark-cyan",
    plsql: "_sql_medium-red",
    PLSQL: "_sql_medium-red",
    "plsql.oracle": "_sql_medium-red",
    pogoscript: "_pogo_medium-orange",
    "pogo script": "_pogo_medium-orange",
    "pogo-script": "_pogo_medium-orange",
    pogo_script: "_pogo_medium-orange",
    PogoScript: "_pogo_medium-orange",
    "Pogo Script": "_pogo_medium-orange",
    "Pogo-Script": "_pogo_medium-orange",
    Pogo_Script: "_pogo_medium-orange",
    POGOSCRIPT: "_pogo_medium-orange",
    "POGO SCRIPT": "_pogo_medium-orange",
    "POGO-SCRIPT": "_pogo_medium-orange",
    POGO_SCRIPT: "_pogo_medium-orange",
    pony: "_pony_light-maroon",
    Pony: "_pony_light-maroon",
    PONY: "_pony_light-maroon",
    posh: "_powershell_medium-blue",
    POSH: "_powershell_medium-blue",
    postcss: "_postcss_dark-pink",
    "post css": "_postcss_dark-pink",
    "post-css": "_postcss_dark-pink",
    post_css: "_postcss_dark-pink",
    PostCSS: "_postcss_dark-pink",
    "Post CSS": "_postcss_dark-pink",
    "Post-CSS": "_postcss_dark-pink",
    Post_CSS: "_postcss_dark-pink",
    POSTCSS: "_postcss_dark-pink",
    "POST CSS": "_postcss_dark-pink",
    "POST-CSS": "_postcss_dark-pink",
    POST_CSS: "_postcss_dark-pink",
    postscr: "_postscript_medium-red",
    POSTSCR: "_postscript_medium-red",
    postscript: "_postscript_medium-red",
    "post script": "_postscript_medium-red",
    "post-script": "_postscript_medium-red",
    post_script: "_postscript_medium-red",
    PostScript: "_postscript_medium-red",
    "Post Script": "_postscript_medium-red",
    "Post-Script": "_postscript_medium-red",
    Post_Script: "_postscript_medium-red",
    POSTSCRIPT: "_postscript_medium-red",
    "POST SCRIPT": "_postscript_medium-red",
    "POST-SCRIPT": "_postscript_medium-red",
    POST_SCRIPT: "_postscript_medium-red",
    powershell: "_powershell_medium-blue",
    "power shell": "_powershell_medium-blue",
    "power-shell": "_powershell_medium-blue",
    power_shell: "_powershell_medium-blue",
    PowerShell: "_powershell_medium-blue",
    "Power Shell": "_powershell_medium-blue",
    "Power-Shell": "_powershell_medium-blue",
    Power_Shell: "_powershell_medium-blue",
    POWERSHELL: "_powershell_medium-blue",
    "POWER SHELL": "_powershell_medium-blue",
    "POWER-SHELL": "_powershell_medium-blue",
    POWER_SHELL: "_powershell_medium-blue",
    printer: "_print_medium-orange",
    Printer: "_print_medium-orange",
    PRINTER: "_print_medium-orange",
    processing: "_processing_dark-blue",
    Processing: "_processing_dark-blue",
    PROCESSING: "_processing_dark-blue",
    progress: "_progress_medium-green",
    PROGRESS: "_progress_medium-green",
    prolog: "_prolog_medium-blue",
    Prolog: "_prolog_medium-blue",
    PROLOG: "_prolog_medium-blue",
    propellerspin: "_propeller_medium-orange",
    "propeller spin": "_propeller_medium-orange",
    "propeller-spin": "_propeller_medium-orange",
    propeller_spin: "_propeller_medium-orange",
    PropellerSpin: "_propeller_medium-orange",
    "Propeller Spin": "_propeller_medium-orange",
    "Propeller-Spin": "_propeller_medium-orange",
    Propeller_Spin: "_propeller_medium-orange",
    PROPELLERSPIN: "_propeller_medium-orange",
    "PROPELLER SPIN": "_propeller_medium-orange",
    "PROPELLER-SPIN": "_propeller_medium-orange",
    PROPELLER_SPIN: "_propeller_medium-orange",
    properties: "_config_medium-purple",
    protobuf: "_database_dark-cyan",
    PROTOBUF: "_database_dark-cyan",
    protobuftext: "_database_dark-cyan",
    PROTOBUFTEXT: "_database_dark-cyan",
    protocolbuffer: "_database_dark-cyan",
    ProtocolBuffer: "_database_dark-cyan",
    PROTOCOLBUFFER: "_database_dark-cyan",
    protocolbuffers: "_database_dark-cyan",
    ProtocolBuffers: "_database_dark-cyan",
    PROTOCOLBUFFERS: "_database_dark-cyan",
    protocolbufferstext: "_database_dark-cyan",
    ProtocolBufferstext: "_database_dark-cyan",
    PROTOCOLBUFFERSTEXT: "_database_dark-cyan",
    protocolbuffertext: "_database_dark-cyan",
    ProtocolBuffertext: "_database_dark-cyan",
    PROTOCOLBUFFERTEXT: "_database_dark-cyan",
    pug: "_pug_medium-red",
    Pug: "_pug_medium-red",
    PUG: "_pug_medium-red",
    puppet: "_puppet_medium-purple",
    Puppet: "_puppet_medium-purple",
    PUPPET: "_puppet_medium-purple",
    pure: "_pure_medium-grey",
    Pure: "_pure_medium-grey",
    PURE: "_pure_medium-grey",
    purebasic: "_purebasic_medium-red",
    PureBasic: "_purebasic_medium-red",
    PUREBASIC: "_purebasic_medium-red",
    purescript: "_purescript_dark-purple",
    "pure script": "_purescript_dark-purple",
    "pure-script": "_purescript_dark-purple",
    pure_script: "_purescript_dark-purple",
    PureScript: "_purescript_dark-purple",
    "Pure Script": "_purescript_dark-purple",
    "Pure-Script": "_purescript_dark-purple",
    Pure_Script: "_purescript_dark-purple",
    PURESCRIPT: "_purescript_dark-purple",
    "PURE SCRIPT": "_purescript_dark-purple",
    "PURE-SCRIPT": "_purescript_dark-purple",
    PURE_SCRIPT: "_purescript_dark-purple",
    pwn: "_pawn_medium-orange",
    pyret: "_pyret_dark-red",
    Pyret: "_pyret_dark-red",
    PYRET: "_pyret_dark-red",
    pyrex: "_cython_medium-orange",
    PYREX: "_cython_medium-orange",
    python: "_python_medium-pink",
    Python: "_python_medium-pink",
    PYTHON: "_python_medium-pink",
    "python.traceback": "_database_medium-orange",
    "q#": "_qsharp_dark-purple",
    q: "_kx_medium-blue",
    "Q#": "_qsharp_dark-purple",
    qasm: "_qiskit_dark-blue",
    QASM: "_qiskit_dark-blue",
    "q/kdb+": "_kx_dark-purple",
    "Q/Kdb+": "_kx_dark-purple",
    "Q/KDB+": "_kx_dark-purple",
    qml: "_qt_medium-green",
    QML: "_qt_medium-green",
    qsharp: "_qsharp_dark-purple",
    QSHARP: "_qsharp_dark-purple",
    qt: "_qt_medium-green",
    QT: "_qt_medium-green",
    quake: "_modula3_medium-red",
    QUAKE: "_modula3_medium-red",
    r: "_r_medium-blue",
    R: "_r_medium-blue",
    racket: "_racket_dark-blue",
    Racket: "_racket_dark-blue",
    RACKET: "_racket_dark-blue",
    rake: "_ruby_medium-red",
    RAKE: "_ruby_medium-red",
    raku: "_perl6_medium-purple",
    Raku: "_perl6_medium-purple",
    RAKU: "_perl6_medium-purple",
    raml: "_raml_medium-cyan",
    RAML: "_raml_medium-cyan",
    rascal: "_rascal_medium-yellow",
    Rascal: "_rascal_medium-yellow",
    RASCAL: "_rascal_medium-yellow",
    razor: "_html5_medium-red",
    RAZOR: "_html5_medium-red",
    rb: "_ruby_medium-red",
    RB: "_ruby_medium-red",
    rbx: "_ruby_medium-red",
    RBX: "_ruby_medium-red",
    rdoc: "_rdoc_medium-red",
    RDoc: "_rdoc_medium-red",
    RDOC: "_rdoc_medium-red",
    readlineconfig: "_terminal_medium-red",
    "readline config": "_terminal_medium-red",
    "readline-config": "_terminal_medium-red",
    readline_config: "_terminal_medium-red",
    ReadlineConfig: "_terminal_medium-red",
    "Readline Config": "_terminal_medium-red",
    "Readline-Config": "_terminal_medium-red",
    Readline_Config: "_terminal_medium-red",
    READLINECONFIG: "_terminal_medium-red",
    "READLINE CONFIG": "_terminal_medium-red",
    "READLINE-CONFIG": "_terminal_medium-red",
    READLINE_CONFIG: "_terminal_medium-red",
    readme: "_book_medium-red",
    Readme: "_book_medium-red",
    README: "_book_medium-red",
    reason: "_reason_medium-red",
    Reason: "_reason_medium-red",
    REASON: "_reason_medium-red",
    rebol: "_rebol_dark-green",
    Rebol: "_rebol_dark-green",
    REBOL: "_rebol_dark-green",
    "record-jar": "_database_dark-blue",
    red: "_red_medium-red",
    Red: "_red_medium-red",
    RED: "_red_medium-red",
    "red/system": "_red_medium-red",
    "RED/SYSTEM": "_red_medium-red",
    regex: "_regex_medium-green",
    regexp: "_regex_medium-green",
    "reg exp": "_regex_medium-green",
    "reg-exp": "_regex_medium-green",
    reg_exp: "_regex_medium-green",
    "RegExp": "_regex_medium-green",
    "Reg Exp": "_regex_medium-green",
    "Reg-Exp": "_regex_medium-green",
    Reg_Exp: "_regex_medium-green",
    REGEXP: "_regex_medium-green",
    "REG EXP": "_regex_medium-green",
    "REG-EXP": "_regex_medium-green",
    REG_EXP: "_regex_medium-green",
    rego: "_openpolicy_medium-cyan",
    renpy: "_python_medium-pink",
    "ren'py": "_python_medium-pink",
    RenPy: "_python_medium-pink",
    "Ren'Py": "_python_medium-pink",
    RENPY: "_python_medium-pink",
    "REN'PY": "_python_medium-pink",
    rescript: "_rescript_medium-red",
    "re script": "_rescript_medium-red",
    "re-script": "_rescript_medium-red",
    re_script: "_rescript_medium-red",
    ReScript: "_rescript_medium-red",
    "Re Script": "_rescript_medium-red",
    "Re-Script": "_rescript_medium-red",
    Re_Script: "_rescript_medium-red",
    RESCRIPT: "_rescript_medium-red",
    "RE SCRIPT": "_rescript_medium-red",
    "RE-SCRIPT": "_rescript_medium-red",
    RE_SCRIPT: "_rescript_medium-red",
    rest: "_rst_dark-blue",
    REST: "_rst_dark-blue",
    restql: "_restql_dark-blue",
    restQL: "_restql_dark-blue",
    RESTQL: "_restql_dark-blue",
    restructuredtext: "_rst_dark-blue",
    reStructuredText: "_rst_dark-blue",
    RESTRUCTUREDTEXT: "_rst_dark-blue",
    rexx: "_rexx_medium-red",
    REXX: "_rexx_medium-red",
    rhino: "_rhino_medium-green",
    RHINO: "_rhino_medium-green",
    rhino3d: "_rhino_medium-green",
    Rhino3D: "_rhino_medium-green",
    RHINO3D: "_rhino_medium-green",
    ring: "_ring_medium-purple",
    Ring: "_ring_medium-purple",
    RING: "_ring_medium-purple",
    riot: "_riot_medium-red",
    riotjs: "_riot_medium-red",
    "riot js": "_riot_medium-red",
    "riot-js": "_riot_medium-red",
    riot_js: "_riot_medium-red",
    RiotJS: "_riot_medium-red",
    "Riot JS": "_riot_medium-red",
    "Riot-JS": "_riot_medium-red",
    Riot_JS: "_riot_medium-red",
    RIOTJS: "_riot_medium-red",
    "RIOT JS": "_riot_medium-red",
    "RIOT-JS": "_riot_medium-red",
    RIOT_JS: "_riot_medium-red",
    rlang: "_r_medium-blue",
    Rlang: "_r_medium-blue",
    RLANG: "_r_medium-blue",
    roff: "_manpage_dark-maroon",
    Roff: "_manpage_dark-maroon",
    ROFF: "_manpage_dark-maroon",
    rq: "_sparql_medium-blue",
    rscript: "_r_medium-blue",
    Rscript: "_r_medium-blue",
    RSCRIPT: "_r_medium-blue",
    rst: "_rst_dark-blue",
    RST: "_rst_dark-blue",
    rsync: "_rsync_dark-purple",
    RSYNC: "_rsync_dark-purple",
    rsyncd: "_rsync_dark-purple",
    "rsyncd-conf": "_rsync_dark-purple",
    "rsyncd-config": "_rsync_dark-purple",
    ruby: "_ruby_medium-red",
    Ruby: "_ruby_medium-red",
    RUBY: "_ruby_medium-red",
    runoff: "_manpage_dark-maroon",
    RUNOFF: "_manpage_dark-maroon",
    rust: "_rust_medium-maroon",
    Rust: "_rust_medium-maroon",
    RUST: "_rust_medium-maroon",
    rusthon: "_python_dark-blue",
    RUSTHON: "_python_dark-blue",
    rviz: "_model_dark-blue",
    RVIZ: "_model_dark-blue",
    sac: "_sac_medium-yellow",
    SAC: "_sac_medium-yellow",
    sage: "_sage_medium-blue",
    Sage: "_sage_medium-blue",
    SAGE: "_sage_medium-blue",
    salt: "_saltstack_medium-blue",
    Salt: "_saltstack_medium-blue",
    SALT: "_saltstack_medium-blue",
    saltstack: "_saltstack_medium-blue",
    "salt stack": "_saltstack_medium-blue",
    "salt-stack": "_saltstack_medium-blue",
    salt_stack: "_saltstack_medium-blue",
    SaltStack: "_saltstack_medium-blue",
    "Salt Stack": "_saltstack_medium-blue",
    "Salt-Stack": "_saltstack_medium-blue",
    Salt_Stack: "_saltstack_medium-blue",
    SALTSTACK: "_saltstack_medium-blue",
    "SALT STACK": "_saltstack_medium-blue",
    "SALT-STACK": "_saltstack_medium-blue",
    SALT_STACK: "_saltstack_medium-blue",
    saltstate: "_saltstack_medium-blue",
    SaltState: "_saltstack_medium-blue",
    SALTSTATE: "_saltstack_medium-blue",
    san: "_san_medium-cyan",
    San: "_san_medium-cyan",
    SAN: "_san_medium-cyan",
    sandbox: "_sandbox_dark-orange",
    Sandbox: "_sandbox_dark-orange",
    SANDBOX: "_sandbox_dark-orange",
    "sandbox profile language": "_sandbox_dark-orange",
    "Sandbox Profile Language": "_sandbox_dark-orange",
    "SANDBOX PROFILE LANGUAGE": "_sandbox_dark-orange",
    sas: "_sas_medium-blue",
    SAS: "_sas_medium-blue",
    sass: "_sass_dark-pink",
    Sass: "_sass_dark-pink",
    SASS: "_sass_dark-pink",
    sbpl: "_sandbox_dark-orange",
    SBPL: "_sandbox_dark-orange",
    scad: "_scad_medium-orange",
    scala: "_scala_medium-red",
    Scala: "_scala_medium-red",
    SCALA: "_scala_medium-red",
    scaml: "_html5_dark-red",
    SCAML: "_html5_dark-red",
    scheme: "_scheme_medium-yellow",
    Scheme: "_scheme_medium-yellow",
    SCHEME: "_scheme_medium-yellow",
    scilab: "_scilab_dark-purple",
    Scilab: "_scilab_dark-purple",
    SCILAB: "_scilab_dark-purple",
    scilla: "_scilla_medium-orange",
    Scilla: "_scilla_medium-orange",
    SCILLA: "_scilla_medium-orange",
    scribble: "_racket_dark-blue",
    SCRIBBLE: "_racket_dark-blue",
    scss: "_sass_light-pink",
    SCSS: "_sass_light-pink",
    sdbl: "_1c_dark-orange",
    sdl: "_config_medium-blue",
    sed: "_code_dark-green",
    self: "_self_dark-blue",
    Self: "_self_dark-blue",
    SELF: "_self_dark-blue",
    sfd: "_ff_dark-blue",
    sh: "_terminal_medium-purple",
    SH: "_terminal_medium-purple",
    shadercode: "_model_medium-cyan",
    shaderlab: "_unity3d_dark-blue",
    "shader lab": "_model_medium-cyan",
    "shader-lab": "_model_medium-cyan",
    shader_lab: "_model_medium-cyan",
    ShaderLab: "_model_medium-cyan",
    "Shader Lab": "_model_medium-cyan",
    "Shader-Lab": "_model_medium-cyan",
    Shader_Lab: "_model_medium-cyan",
    SHADERLAB: "_unity3d_dark-blue",
    "SHADER LAB": "_model_medium-cyan",
    "SHADER-LAB": "_model_medium-cyan",
    SHADER_LAB: "_model_medium-cyan",
    shconsole: "_terminal_medium-yellow",
    ShConsole: "_terminal_medium-yellow",
    SHCONSOLE: "_terminal_medium-yellow",
    shell: "_terminal_medium-purple",
    SHELL: "_terminal_medium-purple",
    shellcheck: "_shellcheck_light-maroon",
    "shell check": "_shellcheck_light-maroon",
    "shell-check": "_shellcheck_light-maroon",
    shell_check: "_shellcheck_light-maroon",
    ShellCheck: "_shellcheck_light-maroon",
    "Shell Check": "_shellcheck_light-maroon",
    "Shell-Check": "_shellcheck_light-maroon",
    Shell_Check: "_shellcheck_light-maroon",
    SHELLCHECK: "_shellcheck_light-maroon",
    "SHELL CHECK": "_shellcheck_light-maroon",
    "SHELL-CHECK": "_shellcheck_light-maroon",
    SHELL_CHECK: "_shellcheck_light-maroon",
    shellcheckrc: "_shellcheck_light-maroon",
    shellconsole: "_terminal_medium-yellow",
    ShellConsole: "_terminal_medium-yellow",
    SHELLCONSOLE: "_terminal_medium-yellow",
    shellscript: "_terminal_medium-purple",
    "shell-script": "_terminal_medium-purple",
    ShellScript: "_terminal_medium-purple",
    "Shell-Script": "_terminal_medium-purple",
    SHELLSCRIPT: "_terminal_medium-purple",
    "SHELL-SCRIPT": "_terminal_medium-purple",
    "shell-session": "_terminal_medium-yellow",
    shellsession: "_terminal_medium-yellow",
    ShellSession: "_terminal_medium-yellow",
    SHELLSESSION: "_terminal_medium-yellow",
    shsession: "_terminal_medium-yellow",
    ShSession: "_terminal_medium-yellow",
    SHSESSION: "_terminal_medium-yellow",
    sieve: "_filter_medium-red",
    Sieve: "_filter_medium-red",
    SIEVE: "_filter_medium-red",
    silverstripe: "_silverstripe_medium-blue",
    "silver stripe": "_silverstripe_medium-blue",
    "silver-stripe": "_silverstripe_medium-blue",
    silver_stripe: "_silverstripe_medium-blue",
    SilverStripe: "_silverstripe_medium-blue",
    "Silver Stripe": "_silverstripe_medium-blue",
    "Silver-Stripe": "_silverstripe_medium-blue",
    Silver_Stripe: "_silverstripe_medium-blue",
    SILVERSTRIPE: "_silverstripe_medium-blue",
    "SILVER STRIPE": "_silverstripe_medium-blue",
    "SILVER-STRIPE": "_silverstripe_medium-blue",
    SILVER_STRIPE: "_silverstripe_medium-blue",
    skipper: "_anchor_dark-blue",
    Skipper: "_anchor_dark-blue",
    SKIPPER: "_anchor_dark-blue",
    skylark: "_bazel_dark-blue",
    Skylark: "_bazel_dark-blue",
    SKYLARK: "_bazel_dark-blue",
    slash: "_slash_dark-blue",
    Slash: "_slash_dark-blue",
    SLASH: "_slash_dark-blue",
    slax: "_junos_medium-blue",
    SLAX: "_junos_medium-blue",
    slim: "_dashboard_medium-orange",
    SLIM: "_dashboard_medium-orange",
    smarty: "_smarty_medium-yellow",
    Smarty: "_smarty_medium-yellow",
    SMARTY: "_smarty_medium-yellow",
    smpl: "_code_medium-blue",
    SmPL: "_code_medium-blue",
    SMPL: "_code_medium-blue",
    smt: "_code_light-blue",
    snipmate: "_database_medium-green",
    snippet: "_database_medium-green",
    Snippet: "_database_medium-green",
    SNIPPET: "_database_medium-green",
    snippets: "_database_medium-green",
    snort: "_snort_light-red",
    Snort: "_snort_light-red",
    SNORT: "_snort_light-red",
    solidity: "_solidity_dark-cyan",
    Solidity: "_solidity_dark-cyan",
    SOLIDITY: "_solidity_dark-cyan",
    son: "_database_dark-green",
    SON: "_database_dark-green",
    sophia: "_sophia_dark-pink",
    Sophia: "_sophia_dark-pink",
    SOPHIA: "_sophia_dark-pink",
    sourcemod: "_clojure_medium-yellow",
    SOURCEMOD: "_clojure_medium-yellow",
    sourcepawn: "_clojure_medium-yellow",
    "source pawn": "_clojure_medium-yellow",
    "source-pawn": "_clojure_medium-yellow",
    source_pawn: "_clojure_medium-yellow",
    SourcePawn: "_clojure_medium-yellow",
    "Source Pawn": "_clojure_medium-yellow",
    "Source-Pawn": "_clojure_medium-yellow",
    Source_Pawn: "_clojure_medium-yellow",
    SOURCEPAWN: "_clojure_medium-yellow",
    "SOURCE PAWN": "_clojure_medium-yellow",
    "SOURCE-PAWN": "_clojure_medium-yellow",
    SOURCE_PAWN: "_clojure_medium-yellow",
    sp: "_clojure_medium-yellow",
    spacemacs: "_spacemacs_medium-purple",
    Spacemacs: "_spacemacs_medium-purple",
    SPACEMACS: "_spacemacs_medium-purple",
    spacengine: "_spacengine_medium-blue",
    Spacengine: "_spacengine_medium-blue",
    SPACENGINE: "_spacengine_medium-blue",
    sparql: "_sparql_medium-blue",
    SPARQL: "_sparql_medium-blue",
    spice: "_circuit-board_dark-green",
    spin: "_propeller_medium-orange",
    splus: "_r_medium-blue",
    SPLUS: "_r_medium-blue",
    spthy: "_code_medium-green",
    sqf: "_sqf_dark-maroon",
    SQF: "_sqf_dark-maroon",
    sql: "_sql_medium-orange",
    SQL: "_sql_medium-orange",
    squarespace: "_squarespace_dark-purple",
    "square space": "_squarespace_dark-purple",
    "square-space": "_squarespace_dark-purple",
    square_space: "_squarespace_dark-purple",
    SquareSpace: "_squarespace_dark-purple",
    "Square Space": "_squarespace_dark-purple",
    "Square-Space": "_squarespace_dark-purple",
    Square_Space: "_squarespace_dark-purple",
    SQUARESPACE: "_squarespace_dark-purple",
    "SQUARE SPACE": "_squarespace_dark-purple",
    "SQUARE-SPACE": "_squarespace_dark-purple",
    SQUARE_SPACE: "_squarespace_dark-purple",
    squirrel: "_squirrel_medium-maroon",
    Squirrel: "_squirrel_medium-maroon",
    SQUIRREL: "_squirrel_medium-maroon",
    srt: "_text_medium-purple",
    ss: "_silverstripe_medium-blue",
    sstemplate: "_silverstripe_medium-blue",
    stan: "_stan_medium-red",
    Stan: "_stan_medium-red",
    STAN: "_stan_medium-red",
    "standard bezier": "_postscript_medium-red",
    "Standard Bezier": "_postscript_medium-red",
    "STANDARD BEZIER": "_postscript_medium-red",
    starlark: "_bazel_dark-blue",
    Starlark: "_bazel_dark-blue",
    STARLARK: "_bazel_dark-blue",
    stata: "_stata_dark-cyan",
    Stata: "_stata_dark-cyan",
    STATA: "_stata_dark-cyan",
    stdbez: "_postscript_medium-red",
    "std bezier": "_postscript_medium-red",
    "Std Bezier": "_postscript_medium-red",
    "STD BEZIER": "_postscript_medium-red",
    stellaris: "_code_medium-blue",
    STELLARIS: "_code_medium-blue",
    stencil: "_stencil_medium-orange",
    Stencil: "_stencil_medium-orange",
    STENCIL: "_stencil_medium-orange",
    "step-file": "_model_medium-orange",
    strings: "_strings_medium-red",
    Strings: "_strings_medium-red",
    STRINGS: "_strings_medium-red",
    styled: "_nailpolish_medium-yellow",
    styledcomponent: "_nailpolish_medium-yellow",
    "styled component": "_nailpolish_medium-yellow",
    "styled-component": "_nailpolish_medium-yellow",
    styled_component: "_nailpolish_medium-yellow",
    StyledComponent: "_nailpolish_medium-yellow",
    "Styled Component": "_nailpolish_medium-yellow",
    "Styled-Component": "_nailpolish_medium-yellow",
    Styled_Component: "_nailpolish_medium-yellow",
    STYLEDCOMPONENT: "_nailpolish_medium-yellow",
    "STYLED COMPONENT": "_nailpolish_medium-yellow",
    "STYLED-COMPONENT": "_nailpolish_medium-yellow",
    STYLED_COMPONENT: "_nailpolish_medium-yellow",
    stylus: "_stylus_medium-green",
    Stylus: "_stylus_medium-green",
    STYLUS: "_stylus_medium-green",
    sugarcube: "_twine_medium-blue",
    "sugar cube": "_twine_medium-blue",
    "sugar-cube": "_twine_medium-blue",
    sugar_cube: "_twine_medium-blue",
    SugarCube: "_twine_medium-blue",
    "Sugar Cube": "_twine_medium-blue",
    "Sugar-Cube": "_twine_medium-blue",
    Sugar_Cube: "_twine_medium-blue",
    SUGARCUBE: "_twine_medium-blue",
    "SUGAR CUBE": "_twine_medium-blue",
    "SUGAR-CUBE": "_twine_medium-blue",
    SUGAR_CUBE: "_twine_medium-blue",
    sugarss: "_postcss_dark-pink",
    SUGARSS: "_postcss_dark-pink",
    supercollider: "_scd_medium-red",
    "super collider": "_scd_medium-red",
    "super-collider": "_scd_medium-red",
    super_collider: "_scd_medium-red",
    SuperCollider: "_scd_medium-red",
    "Super Collider": "_scd_medium-red",
    "Super-Collider": "_scd_medium-red",
    Super_Collider: "_scd_medium-red",
    SUPERCOLLIDER: "_scd_medium-red",
    "SUPER COLLIDER": "_scd_medium-red",
    "SUPER-COLLIDER": "_scd_medium-red",
    SUPER_COLLIDER: "_scd_medium-red",
    svelte: "_svelte_medium-orange",
    Svelte: "_svelte_medium-orange",
    SVELTE: "_svelte_medium-orange",
    svg: "_svg_dark-yellow",
    SVG: "_svg_dark-yellow",
    swift: "_swift_medium-orange",
    Swift: "_swift_medium-orange",
    SWIFT: "_swift_medium-orange",
    swig: "_html5_medium-green",
    tableofcontents: "_toc_medium-cyan",
    "tableof contents": "_toc_medium-cyan",
    "tableof-contents": "_toc_medium-cyan",
    tableof_contents: "_toc_medium-cyan",
    "table ofcontents": "_toc_medium-cyan",
    "table of contents": "_toc_medium-cyan",
    "table of-contents": "_toc_medium-cyan",
    "table of_contents": "_toc_medium-cyan",
    "table-ofcontents": "_toc_medium-cyan",
    "table-of contents": "_toc_medium-cyan",
    "table-of-contents": "_toc_medium-cyan",
    "table-of_contents": "_toc_medium-cyan",
    table_ofcontents: "_toc_medium-cyan",
    "table_of contents": "_toc_medium-cyan",
    "table_of-contents": "_toc_medium-cyan",
    table_of_contents: "_toc_medium-cyan",
    TableofContents: "_toc_medium-cyan",
    "Tableof Contents": "_toc_medium-cyan",
    "Tableof-Contents": "_toc_medium-cyan",
    Tableof_Contents: "_toc_medium-cyan",
    "Table ofContents": "_toc_medium-cyan",
    "Table of Contents": "_toc_medium-cyan",
    "Table of-Contents": "_toc_medium-cyan",
    "Table of_Contents": "_toc_medium-cyan",
    "Table-ofContents": "_toc_medium-cyan",
    "Table-of Contents": "_toc_medium-cyan",
    "Table-of-Contents": "_toc_medium-cyan",
    "Table-of_Contents": "_toc_medium-cyan",
    Table_ofContents: "_toc_medium-cyan",
    "Table_of Contents": "_toc_medium-cyan",
    "Table_of-Contents": "_toc_medium-cyan",
    Table_of_Contents: "_toc_medium-cyan",
    TABLEOFCONTENTS: "_toc_medium-cyan",
    "TABLEOF CONTENTS": "_toc_medium-cyan",
    "TABLEOF-CONTENTS": "_toc_medium-cyan",
    TABLEOF_CONTENTS: "_toc_medium-cyan",
    "TABLE OFCONTENTS": "_toc_medium-cyan",
    "TABLE OF CONTENTS": "_toc_medium-cyan",
    "TABLE OF-CONTENTS": "_toc_medium-cyan",
    "TABLE OF_CONTENTS": "_toc_medium-cyan",
    "TABLE-OFCONTENTS": "_toc_medium-cyan",
    "TABLE-OF CONTENTS": "_toc_medium-cyan",
    "TABLE-OF-CONTENTS": "_toc_medium-cyan",
    "TABLE-OF_CONTENTS": "_toc_medium-cyan",
    TABLE_OFCONTENTS: "_toc_medium-cyan",
    "TABLE_OF CONTENTS": "_toc_medium-cyan",
    "TABLE_OF-CONTENTS": "_toc_medium-cyan",
    TABLE_OF_CONTENTS: "_toc_medium-cyan",
    tamarin: "_code_medium-green",
    tasm: "_asm-intel_dark-blue",
    TASM: "_asm-intel_dark-blue",
    tcl: "_tcl_dark-orange",
    Tcl: "_tcl_dark-orange",
    TCL: "_tcl_dark-orange",
    tea: "_coffee_medium-orange",
    Tea: "_coffee_medium-orange",
    TEA: "_coffee_medium-orange",
    telegram: "_telegram_medium-blue",
    Telegram: "_telegram_medium-blue",
    TELEGRAM: "_telegram_medium-blue",
    terra: "_terraform_dark-purple",
    terraform: "_terraform_dark-purple",
    Terraform: "_terraform_dark-purple",
    TERRAFORM: "_terraform_dark-purple",
    tex: "_tex_medium-red",
    TeX: "_tex_medium-red",
    TEX: "_tex_medium-red",
    texinfo: "_tex_medium-red",
    TEXINFO: "_tex_medium-red",
    text: "_text_dark-blue",
    Text: "_text_dark-blue",
    TEXT: "_text_dark-blue",
    textile: "_textile_medium-orange",
    Textile: "_textile_medium-orange",
    TEXTILE: "_textile_medium-orange",
    textmate: "_textmate_medium-green",
    "text mate": "_textmate_medium-green",
    "text-mate": "_textmate_medium-green",
    text_mate: "_textmate_medium-green",
    TextMate: "_textmate_medium-green",
    "Text Mate": "_textmate_medium-green",
    "Text-Mate": "_textmate_medium-green",
    Text_Mate: "_textmate_medium-green",
    TEXTMATE: "_textmate_medium-green",
    "TEXT MATE": "_textmate_medium-green",
    "TEXT-MATE": "_textmate_medium-green",
    TEXT_MATE: "_textmate_medium-green",
    tikz: "_tex_medium-purple",
    TIKZ: "_tex_medium-purple",
    tl: "_telegram_medium-blue",
    tla: "_tla_medium-maroon",
    "tla+": "_tla_medium-maroon",
    "TLA+": "_tla_medium-maroon",
    tmcg: "_textmate_medium-green",
    "tm-properties": "_textmate_medium-pink",
    tmux: "_tmux_medium-green",
    TMUX: "_tmux_medium-green",
    toc: "_toc_medium-cyan",
    todotxt: "_checklist_medium-green",
    toml: "_toml_medium-green",
    TOML: "_toml_medium-green",
    tpic: "_manpage_dark-green",
    TPIC: "_manpage_dark-green",
    troff: "_manpage_dark-green",
    TROFF: "_manpage_dark-green",
    ts: "_ts_medium-blue",
    TS: "_ts_medium-blue",
    tss: "_css3_dark-red",
    TSS: "_css3_dark-red",
    tsx: "_tsx_light-blue",
    TSX: "_tsx_light-blue",
    "ttcn-3": "_ttcn3_medium-blue",
    "TTCN-3": "_ttcn3_medium-blue",
    turing: "_turing_medium-red",
    Turing: "_turing_medium-red",
    TURING: "_turing_medium-red",
    turtle: "_database_medium-cyan",
    tw: "_twine_medium-blue",
    twig: "_twig_medium-green",
    Twig: "_twig_medium-green",
    TWIG: "_twig_medium-green",
    twinescript: "_twine_medium-blue",
    "twine script": "_twine_medium-blue",
    "twine-script": "_twine_medium-blue",
    twine_script: "_twine_medium-blue",
    TwineScript: "_twine_medium-blue",
    "Twine Script": "_twine_medium-blue",
    "Twine-Script": "_twine_medium-blue",
    Twine_Script: "_twine_medium-blue",
    TWINESCRIPT: "_twine_medium-blue",
    "TWINE SCRIPT": "_twine_medium-blue",
    "TWINE-SCRIPT": "_twine_medium-blue",
    TWINE_SCRIPT: "_twine_medium-blue",
    txl: "_txl_medium-orange",
    TXL: "_txl_medium-orange",
    typelanguage: "_telegram_medium-blue",
    TypeLanguage: "_telegram_medium-blue",
    TYPELANGUAGE: "_telegram_medium-blue",
    typescript: "_ts_medium-blue",
    TypeScript: "_ts_medium-blue",
    TYPESCRIPT: "_ts_medium-blue",
    typescriptreact: "_tsx_light-blue",
    "typescript react": "_tsx_light-blue",
    "typescript-react": "_tsx_light-blue",
    typescript_react: "_tsx_light-blue",
    uc: "_unreal_medium-grey",
    "ucd.nameslist": "_unicode_medium-red",
    udiff: "_diff_medium-orange",
    UDIFF: "_diff_medium-orange",
    ultisnips: "_database_medium-green",
    unicode: "_unicode_medium-red",
    Unicode: "_unicode_medium-red",
    UNICODE: "_unicode_medium-red",
    unidata: "_unicode_medium-red",
    uniprint: "_print_medium-orange",
    Uniprint: "_print_medium-orange",
    UNIPRINT: "_print_medium-orange",
    units: "_scales_medium-green",
    Units: "_scales_medium-green",
    UNITS: "_scales_medium-green",
    "units.bsd": "_scales_medium-green",
    "units.gnu": "_scales_medium-green",
    unity3d: "_unity3d_dark-blue",
    Unity3D: "_unity3d_dark-blue",
    UNITY3D: "_unity3d_dark-blue",
    unreal: "_unreal_medium-grey",
    Unreal: "_unreal_medium-grey",
    UNREAL: "_unreal_medium-grey",
    unrealscript: "_unreal_medium-grey",
    "unreal script": "_unreal_medium-grey",
    "unreal-script": "_unreal_medium-grey",
    unreal_script: "_unreal_medium-grey",
    UnrealScript: "_unreal_medium-grey",
    "Unreal Script": "_unreal_medium-grey",
    "Unreal-Script": "_unreal_medium-grey",
    Unreal_Script: "_unreal_medium-grey",
    UNREALSCRIPT: "_unreal_medium-grey",
    "UNREAL SCRIPT": "_unreal_medium-grey",
    "UNREAL-SCRIPT": "_unreal_medium-grey",
    UNREAL_SCRIPT: "_unreal_medium-grey",
    ur: "_urweb_medium-maroon",
    Ur: "_urweb_medium-maroon",
    UR: "_urweb_medium-maroon",
    urweb: "_urweb_medium-maroon",
    "ur web": "_urweb_medium-maroon",
    "ur-web": "_urweb_medium-maroon",
    ur_web: "_urweb_medium-maroon",
    "ur/web": "_urweb_medium-maroon",
    UrWeb: "_urweb_medium-maroon",
    "Ur Web": "_urweb_medium-maroon",
    "Ur-Web": "_urweb_medium-maroon",
    Ur_Web: "_urweb_medium-maroon",
    "Ur/Web": "_urweb_medium-maroon",
    URWEB: "_urweb_medium-maroon",
    "UR WEB": "_urweb_medium-maroon",
    "UR-WEB": "_urweb_medium-maroon",
    UR_WEB: "_urweb_medium-maroon",
    "UR/WEB": "_urweb_medium-maroon",
    v: "_v_medium-blue",
    V: "_v_medium-blue",
    vala: "_vala_medium-purple",
    Vala: "_vala_medium-purple",
    VALA: "_vala_medium-purple",
    valvematerialtype: "_source_medium-blue",
    "valvematerial type": "_source_medium-blue",
    "valvematerial-type": "_source_medium-blue",
    valvematerial_type: "_source_medium-blue",
    "valve materialtype": "_source_medium-blue",
    "valve material type": "_source_medium-blue",
    "valve material-type": "_source_medium-blue",
    "valve material_type": "_source_medium-blue",
    "valve-materialtype": "_source_medium-blue",
    "valve-material type": "_source_medium-blue",
    "valve-material-type": "_source_medium-blue",
    "valve-material_type": "_source_medium-blue",
    valve_materialtype: "_source_medium-blue",
    "valve_material type": "_source_medium-blue",
    "valve_material-type": "_source_medium-blue",
    valve_material_type: "_source_medium-blue",
    ValveMaterialType: "_source_medium-blue",
    "ValveMaterial Type": "_source_medium-blue",
    "ValveMaterial-Type": "_source_medium-blue",
    ValveMaterial_Type: "_source_medium-blue",
    "Valve MaterialType": "_source_medium-blue",
    "Valve Material Type": "_source_medium-blue",
    "Valve Material-Type": "_source_medium-blue",
    "Valve Material_Type": "_source_medium-blue",
    "Valve-MaterialType": "_source_medium-blue",
    "Valve-Material Type": "_source_medium-blue",
    "Valve-Material-Type": "_source_medium-blue",
    "Valve-Material_Type": "_source_medium-blue",
    Valve_MaterialType: "_source_medium-blue",
    "Valve_Material Type": "_source_medium-blue",
    "Valve_Material-Type": "_source_medium-blue",
    Valve_Material_Type: "_source_medium-blue",
    VALVEMATERIALTYPE: "_source_medium-blue",
    "VALVEMATERIAL TYPE": "_source_medium-blue",
    "VALVEMATERIAL-TYPE": "_source_medium-blue",
    VALVEMATERIAL_TYPE: "_source_medium-blue",
    "VALVE MATERIALTYPE": "_source_medium-blue",
    "VALVE MATERIAL TYPE": "_source_medium-blue",
    "VALVE MATERIAL-TYPE": "_source_medium-blue",
    "VALVE MATERIAL_TYPE": "_source_medium-blue",
    "VALVE-MATERIALTYPE": "_source_medium-blue",
    "VALVE-MATERIAL TYPE": "_source_medium-blue",
    "VALVE-MATERIAL-TYPE": "_source_medium-blue",
    "VALVE-MATERIAL_TYPE": "_source_medium-blue",
    VALVE_MATERIALTYPE: "_source_medium-blue",
    "VALVE_MATERIAL TYPE": "_source_medium-blue",
    "VALVE_MATERIAL-TYPE": "_source_medium-blue",
    VALVE_MATERIAL_TYPE: "_source_medium-blue",
    valvesourceengine: "_source_medium-blue",
    "valvesource engine": "_source_medium-blue",
    "valvesource-engine": "_source_medium-blue",
    valvesource_engine: "_source_medium-blue",
    "valve sourceengine": "_source_medium-blue",
    "valve source engine": "_source_medium-blue",
    "valve source-engine": "_source_medium-blue",
    "valve source_engine": "_source_medium-blue",
    "valve-sourceengine": "_source_medium-blue",
    "valve-source engine": "_source_medium-blue",
    "valve-source-engine": "_source_medium-blue",
    "valve-source_engine": "_source_medium-blue",
    valve_sourceengine: "_source_medium-blue",
    "valve_source engine": "_source_medium-blue",
    "valve_source-engine": "_source_medium-blue",
    valve_source_engine: "_source_medium-blue",
    ValveSourceEngine: "_source_medium-blue",
    "ValveSource Engine": "_source_medium-blue",
    "ValveSource-Engine": "_source_medium-blue",
    ValveSource_Engine: "_source_medium-blue",
    "Valve SourceEngine": "_source_medium-blue",
    "Valve Source Engine": "_source_medium-blue",
    "Valve Source-Engine": "_source_medium-blue",
    "Valve Source_Engine": "_source_medium-blue",
    "Valve-SourceEngine": "_source_medium-blue",
    "Valve-Source Engine": "_source_medium-blue",
    "Valve-Source-Engine": "_source_medium-blue",
    "Valve-Source_Engine": "_source_medium-blue",
    Valve_SourceEngine: "_source_medium-blue",
    "Valve_Source Engine": "_source_medium-blue",
    "Valve_Source-Engine": "_source_medium-blue",
    Valve_Source_Engine: "_source_medium-blue",
    VALVESOURCEENGINE: "_source_medium-blue",
    "VALVESOURCE ENGINE": "_source_medium-blue",
    "VALVESOURCE-ENGINE": "_source_medium-blue",
    VALVESOURCE_ENGINE: "_source_medium-blue",
    "VALVE SOURCEENGINE": "_source_medium-blue",
    "VALVE SOURCE ENGINE": "_source_medium-blue",
    "VALVE SOURCE-ENGINE": "_source_medium-blue",
    "VALVE SOURCE_ENGINE": "_source_medium-blue",
    "VALVE-SOURCEENGINE": "_source_medium-blue",
    "VALVE-SOURCE ENGINE": "_source_medium-blue",
    "VALVE-SOURCE-ENGINE": "_source_medium-blue",
    "VALVE-SOURCE_ENGINE": "_source_medium-blue",
    VALVE_SOURCEENGINE: "_source_medium-blue",
    "VALVE_SOURCE ENGINE": "_source_medium-blue",
    "VALVE_SOURCE-ENGINE": "_source_medium-blue",
    VALVE_SOURCE_ENGINE: "_source_medium-blue",
    varnish: "_varnish_dark-blue",
    vash: "_html5_medium-red",
    VASH: "_html5_medium-red",
    vb: "_vs_medium-blue",
    vbnet: "_vs_medium-blue",
    "vb.net": "_vs_medium-blue",
    VBNET: "_vs_medium-blue",
    "VB.NET": "_vs_medium-blue",
    vcl: "_varnish_dark-blue",
    VCL: "_varnish_dark-blue",
    velocity: "_velocity_dark-blue",
    Velocity: "_velocity_dark-blue",
    VELOCITY: "_velocity_dark-blue",
    verilog: "_verilog_dark-green",
    Verilog: "_verilog_dark-green",
    VERILOG: "_verilog_dark-green",
    vhdl: "_vhdl_dark-green",
    VHDL: "_vhdl_dark-green",
    vim: "_vim_medium-green",
    Vim: "_vim_medium-green",
    VIM: "_vim_medium-green",
    viml: "_vim_medium-green",
    VimL: "_vim_medium-green",
    VIML: "_vim_medium-green",
    vimscript: "_vim_medium-green",
    VimScript: "_vim_medium-green",
    VIMSCRIPT: "_vim_medium-green",
    "vim-snippet": "_database_medium-green",
    virtualagc: "_asm-agc_dark-blue",
    "virtual agc": "_asm-agc_dark-blue",
    "virtual-agc": "_asm-agc_dark-blue",
    virtual_agc: "_asm-agc_dark-blue",
    VirtualAGC: "_asm-agc_dark-blue",
    "Virtual AGC": "_asm-agc_dark-blue",
    "Virtual-AGC": "_asm-agc_dark-blue",
    Virtual_AGC: "_asm-agc_dark-blue",
    VIRTUALAGC: "_asm-agc_dark-blue",
    "VIRTUAL AGC": "_asm-agc_dark-blue",
    "VIRTUAL-AGC": "_asm-agc_dark-blue",
    VIRTUAL_AGC: "_asm-agc_dark-blue",
    visualbasic: "_vs_medium-blue",
    "visual basic": "_vs_medium-blue",
    "visual-basic": "_vs_medium-blue",
    visual_basic: "_vs_medium-blue",
    VisualBasic: "_vs_medium-blue",
    "Visual Basic": "_vs_medium-blue",
    "Visual-Basic": "_vs_medium-blue",
    Visual_Basic: "_vs_medium-blue",
    VISUALBASIC: "_vs_medium-blue",
    "VISUAL BASIC": "_vs_medium-blue",
    "VISUAL-BASIC": "_vs_medium-blue",
    VISUAL_BASIC: "_vs_medium-blue",
    "visualbasic.net": "_vs_medium-blue",
    "visualbasic .net": "_vs_medium-blue",
    "visualbasic-.net": "_vs_medium-blue",
    "visualbasic_.net": "_vs_medium-blue",
    "visual basic.net": "_vs_medium-blue",
    "visual basic .net": "_vs_medium-blue",
    "visual basic-.net": "_vs_medium-blue",
    "visual basic_.net": "_vs_medium-blue",
    "visual-basic.net": "_vs_medium-blue",
    "visual-basic .net": "_vs_medium-blue",
    "visual-basic-.net": "_vs_medium-blue",
    "visual-basic_.net": "_vs_medium-blue",
    "visual_basic.net": "_vs_medium-blue",
    "visual_basic .net": "_vs_medium-blue",
    "visual_basic-.net": "_vs_medium-blue",
    "visual_basic_.net": "_vs_medium-blue",
    "VisualBasic.NET": "_vs_medium-blue",
    "VisualBasic .NET": "_vs_medium-blue",
    "VisualBasic-.NET": "_vs_medium-blue",
    "VisualBasic_.NET": "_vs_medium-blue",
    "Visual Basic.NET": "_vs_medium-blue",
    "Visual Basic .NET": "_vs_medium-blue",
    "Visual Basic-.NET": "_vs_medium-blue",
    "Visual Basic_.NET": "_vs_medium-blue",
    "Visual-Basic.NET": "_vs_medium-blue",
    "Visual-Basic .NET": "_vs_medium-blue",
    "Visual-Basic-.NET": "_vs_medium-blue",
    "Visual-Basic_.NET": "_vs_medium-blue",
    "Visual_Basic.NET": "_vs_medium-blue",
    "Visual_Basic .NET": "_vs_medium-blue",
    "Visual_Basic-.NET": "_vs_medium-blue",
    "Visual_Basic_.NET": "_vs_medium-blue",
    "VISUALBASIC.NET": "_vs_medium-blue",
    "VISUALBASIC .NET": "_vs_medium-blue",
    "VISUALBASIC-.NET": "_vs_medium-blue",
    "VISUALBASIC_.NET": "_vs_medium-blue",
    "VISUAL BASIC.NET": "_vs_medium-blue",
    "VISUAL BASIC .NET": "_vs_medium-blue",
    "VISUAL BASIC-.NET": "_vs_medium-blue",
    "VISUAL BASIC_.NET": "_vs_medium-blue",
    "VISUAL-BASIC.NET": "_vs_medium-blue",
    "VISUAL-BASIC .NET": "_vs_medium-blue",
    "VISUAL-BASIC-.NET": "_vs_medium-blue",
    "VISUAL-BASIC_.NET": "_vs_medium-blue",
    "VISUAL_BASIC.NET": "_vs_medium-blue",
    "VISUAL_BASIC .NET": "_vs_medium-blue",
    "VISUAL_BASIC-.NET": "_vs_medium-blue",
    "VISUAL_BASIC_.NET": "_vs_medium-blue",
    visualstudio: "_vs_medium-blue",
    "visual studio": "_vs_medium-blue",
    "visual-studio": "_vs_medium-blue",
    visual_studio: "_vs_medium-blue",
    VisualStudio: "_vs_medium-blue",
    "Visual Studio": "_vs_medium-blue",
    "Visual-Studio": "_vs_medium-blue",
    Visual_Studio: "_vs_medium-blue",
    VISUALSTUDIO: "_vs_medium-blue",
    "VISUAL STUDIO": "_vs_medium-blue",
    "VISUAL-STUDIO": "_vs_medium-blue",
    VISUAL_STUDIO: "_vs_medium-blue",
    vjass: "_warcraft3_medium-red",
    VJASS: "_warcraft3_medium-red",
    vmt: "_source_medium-blue",
    volt: "_phalcon_medium-cyan",
    vtt: "_webvtt_dark-blue",
    vue: "_vue_light-green",
    Vue: "_vue_light-green",
    VUE: "_vue_light-green",
    vuehtml: "_vue_light-green",
    "vue html": "_vue_light-green",
    "vue-html": "_vue_light-green",
    vue_html: "_vue_light-green",
    vyper: "_vyper_medium-grey",
    Vyper: "_vyper_medium-grey",
    VYPER: "_vyper_medium-grey",
    walt: "_walt_medium-purple",
    Walt: "_walt_medium-purple",
    WALT: "_walt_medium-purple",
    warcraftiii: "_warcraft3_medium-maroon",
    "warcraft iii": "_warcraft3_medium-maroon",
    "warcraft-iii": "_warcraft3_medium-maroon",
    warcraft_iii: "_warcraft3_medium-maroon",
    WarcraftIII: "_warcraft3_medium-maroon",
    "Warcraft III": "_warcraft3_medium-maroon",
    "Warcraft-III": "_warcraft3_medium-maroon",
    Warcraft_III: "_warcraft3_medium-maroon",
    WARCRAFTIII: "_warcraft3_medium-maroon",
    "WARCRAFT III": "_warcraft3_medium-maroon",
    "WARCRAFT-III": "_warcraft3_medium-maroon",
    WARCRAFT_III: "_warcraft3_medium-maroon",
    wasi: "_wasm_medium-blue",
    WASI: "_wasm_medium-blue",
    wasm: "_wasm_medium-blue",
    WASM: "_wasm_medium-blue",
    wast: "_wasm_medium-blue",
    WAST: "_wasm_medium-blue",
    "wavefront.mtl": "_model_dark-blue",
    "wavefront.obj": "_model_medium-red",
    wdl: "_wdl_medium-blue",
    WDL: "_wdl_medium-blue",
    webassembly: "_wasm_medium-blue",
    "web assembly": "_wasm_medium-blue",
    "web-assembly": "_wasm_medium-blue",
    web_assembly: "_wasm_medium-blue",
    WebAssembly: "_wasm_medium-blue",
    "Web Assembly": "_wasm_medium-blue",
    "Web-Assembly": "_wasm_medium-blue",
    Web_Assembly: "_wasm_medium-blue",
    WEBASSEMBLY: "_wasm_medium-blue",
    "WEB ASSEMBLY": "_wasm_medium-blue",
    "WEB-ASSEMBLY": "_wasm_medium-blue",
    WEB_ASSEMBLY: "_wasm_medium-blue",
    webvtt: "_webvtt_dark-blue",
    WebVTT: "_webvtt_dark-blue",
    WEBVTT: "_webvtt_dark-blue",
    wenyan: "_wenyan_light-orange",
    Wenyan: "_wenyan_light-orange",
    WENYAN: "_wenyan_light-orange",
    wget: "_wget_medium-purple",
    Wget: "_wget_medium-purple",
    WGET: "_wget_medium-purple",
    wgetrc: "_wget_medium-purple",
    winbatch: "_windows_medium-purple",
    WinBatch: "_windows_medium-purple",
    WINBATCH: "_windows_medium-purple",
    wlp4: "_code_medium-blue",
    WLP4: "_code_medium-blue",
    workflowdescriptionlanguage: "_wdl_medium-blue",
    "workflowdescription language": "_wdl_medium-blue",
    "workflowdescription-language": "_wdl_medium-blue",
    workflowdescription_language: "_wdl_medium-blue",
    "workflow descriptionlanguage": "_wdl_medium-blue",
    "workflow description language": "_wdl_medium-blue",
    "workflow description-language": "_wdl_medium-blue",
    "workflow description_language": "_wdl_medium-blue",
    "workflow-descriptionlanguage": "_wdl_medium-blue",
    "workflow-description language": "_wdl_medium-blue",
    "workflow-description-language": "_wdl_medium-blue",
    "workflow-description_language": "_wdl_medium-blue",
    workflow_descriptionlanguage: "_wdl_medium-blue",
    "workflow_description language": "_wdl_medium-blue",
    "workflow_description-language": "_wdl_medium-blue",
    workflow_description_language: "_wdl_medium-blue",
    WorkflowDescriptionLanguage: "_wdl_medium-blue",
    "WorkflowDescription Language": "_wdl_medium-blue",
    "WorkflowDescription-Language": "_wdl_medium-blue",
    WorkflowDescription_Language: "_wdl_medium-blue",
    "Workflow DescriptionLanguage": "_wdl_medium-blue",
    "Workflow Description Language": "_wdl_medium-blue",
    "Workflow Description-Language": "_wdl_medium-blue",
    "Workflow Description_Language": "_wdl_medium-blue",
    "Workflow-DescriptionLanguage": "_wdl_medium-blue",
    "Workflow-Description Language": "_wdl_medium-blue",
    "Workflow-Description-Language": "_wdl_medium-blue",
    "Workflow-Description_Language": "_wdl_medium-blue",
    Workflow_DescriptionLanguage: "_wdl_medium-blue",
    "Workflow_Description Language": "_wdl_medium-blue",
    "Workflow_Description-Language": "_wdl_medium-blue",
    Workflow_Description_Language: "_wdl_medium-blue",
    WORKFLOWDESCRIPTIONLANGUAGE: "_wdl_medium-blue",
    "WORKFLOWDESCRIPTION LANGUAGE": "_wdl_medium-blue",
    "WORKFLOWDESCRIPTION-LANGUAGE": "_wdl_medium-blue",
    WORKFLOWDESCRIPTION_LANGUAGE: "_wdl_medium-blue",
    "WORKFLOW DESCRIPTIONLANGUAGE": "_wdl_medium-blue",
    "WORKFLOW DESCRIPTION LANGUAGE": "_wdl_medium-blue",
    "WORKFLOW DESCRIPTION-LANGUAGE": "_wdl_medium-blue",
    "WORKFLOW DESCRIPTION_LANGUAGE": "_wdl_medium-blue",
    "WORKFLOW-DESCRIPTIONLANGUAGE": "_wdl_medium-blue",
    "WORKFLOW-DESCRIPTION LANGUAGE": "_wdl_medium-blue",
    "WORKFLOW-DESCRIPTION-LANGUAGE": "_wdl_medium-blue",
    "WORKFLOW-DESCRIPTION_LANGUAGE": "_wdl_medium-blue",
    WORKFLOW_DESCRIPTIONLANGUAGE: "_wdl_medium-blue",
    "WORKFLOW_DESCRIPTION LANGUAGE": "_wdl_medium-blue",
    "WORKFLOW_DESCRIPTION-LANGUAGE": "_wdl_medium-blue",
    WORKFLOW_DESCRIPTION_LANGUAGE: "_wdl_medium-blue",
    wurst: "_wurst_medium-maroon",
    wurstlang: "_wurst_medium-maroon",
    "wurst lang": "_wurst_medium-maroon",
    "wurst-lang": "_wurst_medium-maroon",
    wurst_lang: "_wurst_medium-maroon",
    WurstLang: "_wurst_medium-maroon",
    "Wurst Lang": "_wurst_medium-maroon",
    "Wurst-Lang": "_wurst_medium-maroon",
    Wurst_Lang: "_wurst_medium-maroon",
    WURSTLANG: "_wurst_medium-maroon",
    "WURST LANG": "_wurst_medium-maroon",
    "WURST-LANG": "_wurst_medium-maroon",
    WURST_LANG: "_wurst_medium-maroon",
    wurstscript: "_wurst_medium-maroon",
    "wurst script": "_wurst_medium-maroon",
    "wurst-script": "_wurst_medium-maroon",
    wurst_script: "_wurst_medium-maroon",
    WurstScript: "_wurst_medium-maroon",
    "Wurst Script": "_wurst_medium-maroon",
    "Wurst-Script": "_wurst_medium-maroon",
    Wurst_Script: "_wurst_medium-maroon",
    WURSTSCRIPT: "_wurst_medium-maroon",
    "WURST SCRIPT": "_wurst_medium-maroon",
    "WURST-SCRIPT": "_wurst_medium-maroon",
    WURST_SCRIPT: "_wurst_medium-maroon",
    x10: "_x10_light-maroon",
    X10: "_x10_light-maroon",
    x32: "_asm-intel_dark-blue",
    x32asm: "_asm-intel_dark-blue",
    x64: "_asm-intel_dark-blue",
    X64: "_asm-intel_dark-blue",
    x64asm: "_asm-intel_dark-blue",
    x86: "_asm-intel_dark-blue",
    X86: "_asm-intel_dark-blue",
    x8664: "_asm-intel_dark-blue",
    "x86-64": "_asm-intel_dark-blue",
    x86_64: "_asm-intel_dark-blue",
    X8664: "_asm-intel_dark-blue",
    "X86-64": "_asm-intel_dark-blue",
    X86_64: "_asm-intel_dark-blue",
    x86asm: "_asm-intel_dark-blue",
    xcompose: "_config_medium-cyan",
    XCOMPOSE: "_config_medium-cyan",
    xhtml: "_html5_medium-orange",
    XHTML: "_html5_medium-orange",
    xml: "_code_medium-blue",
    XML: "_code_medium-blue",
    "xml.ant": "_ant_dark-pink",
    "xml+genshi": "_genshi_medium-red",
    "XML+GENSHI": "_genshi_medium-red",
    "xml+kid": "_genshi_medium-red",
    "XML+KID": "_genshi_medium-red",
    xq: "_sql_dark-red",
    xquery: "_sql_dark-red",
    XQuery: "_sql_dark-red",
    XQUERY: "_sql_dark-red",
    xsl: "_code_medium-cyan",
    XSL: "_code_medium-cyan",
    xten: "_x10_light-maroon",
    XTEN: "_x10_light-maroon",
    xtend: "_xtend_dark-purple",
    Xtend: "_xtend_dark-purple",
    XTEND: "_xtend_dark-purple",
    yaml: "_yaml_medium-red",
    YAML: "_yaml_medium-red",
    yang: "_yang_medium-yellow",
    YANG: "_yang_medium-yellow",
    yara: "_yara_medium-red",
    YARA: "_yara_medium-red",
    yasnippet: "_database_medium-green",
    YASnippet: "_database_medium-green",
    YASNIPPET: "_database_medium-green",
    yml: "_yaml_medium-red",
    YML: "_yaml_medium-red",
    yodl: "_book_medium-red",
    YODL: "_book_medium-red",
    yorick: "_yorick_medium-orange",
    Yorick: "_yorick_medium-orange",
    YORICK: "_yorick_medium-orange",
    z80: "_asm-zilog_medium-yellow",
    zap: "_zork_dark-cyan",
    ZAP: "_zork_dark-cyan",
    zenscript: "_crafttweaker_medium-maroon",
    ZenScript: "_crafttweaker_medium-maroon",
    ZENSCRIPT: "_crafttweaker_medium-maroon",
    zig: "_zig_medium-orange",
    Zig: "_zig_medium-orange",
    ZIG: "_zig_medium-orange",
    zil: "_zork_dark-blue",
    ZIL: "_zork_dark-blue",
    zinc: "_warcraft3_medium-maroon",
    Zinc: "_warcraft3_medium-maroon",
    ZINC: "_warcraft3_medium-maroon",
    zorkassembly: "_zork_dark-cyan",
    "zork assembly": "_zork_dark-cyan",
    "zork-assembly": "_zork_dark-cyan",
    zork_assembly: "_zork_dark-cyan",
    ZorkAssembly: "_zork_dark-cyan",
    "Zork Assembly": "_zork_dark-cyan",
    "Zork-Assembly": "_zork_dark-cyan",
    Zork_Assembly: "_zork_dark-cyan",
    ZORKASSEMBLY: "_zork_dark-cyan",
    "ZORK ASSEMBLY": "_zork_dark-cyan",
    "ZORK-ASSEMBLY": "_zork_dark-cyan",
    ZORK_ASSEMBLY: "_zork_dark-cyan",
    zorkinterpreterlanguage: "_zork_dark-blue",
    "zorkinterpreter language": "_zork_dark-blue",
    "zorkinterpreter-language": "_zork_dark-blue",
    zorkinterpreter_language: "_zork_dark-blue",
    "zork interpreterlanguage": "_zork_dark-blue",
    "zork interpreter language": "_zork_dark-blue",
    "zork interpreter-language": "_zork_dark-blue",
    "zork interpreter_language": "_zork_dark-blue",
    "zork-interpreterlanguage": "_zork_dark-blue",
    "zork-interpreter language": "_zork_dark-blue",
    "zork-interpreter-language": "_zork_dark-blue",
    "zork-interpreter_language": "_zork_dark-blue",
    zork_interpreterlanguage: "_zork_dark-blue",
    "zork_interpreter language": "_zork_dark-blue",
    "zork_interpreter-language": "_zork_dark-blue",
    zork_interpreter_language: "_zork_dark-blue",
    ZorkInterpreterLanguage: "_zork_dark-blue",
    "ZorkInterpreter Language": "_zork_dark-blue",
    "ZorkInterpreter-Language": "_zork_dark-blue",
    ZorkInterpreter_Language: "_zork_dark-blue",
    "Zork InterpreterLanguage": "_zork_dark-blue",
    "Zork Interpreter Language": "_zork_dark-blue",
    "Zork Interpreter-Language": "_zork_dark-blue",
    "Zork Interpreter_Language": "_zork_dark-blue",
    "Zork-InterpreterLanguage": "_zork_dark-blue",
    "Zork-Interpreter Language": "_zork_dark-blue",
    "Zork-Interpreter-Language": "_zork_dark-blue",
    "Zork-Interpreter_Language": "_zork_dark-blue",
    Zork_InterpreterLanguage: "_zork_dark-blue",
    "Zork_Interpreter Language": "_zork_dark-blue",
    "Zork_Interpreter-Language": "_zork_dark-blue",
    Zork_Interpreter_Language: "_zork_dark-blue",
    ZORKINTERPRETERLANGUAGE: "_zork_dark-blue",
    "ZORKINTERPRETER LANGUAGE": "_zork_dark-blue",
    "ZORKINTERPRETER-LANGUAGE": "_zork_dark-blue",
    ZORKINTERPRETER_LANGUAGE: "_zork_dark-blue",
    "ZORK INTERPRETERLANGUAGE": "_zork_dark-blue",
    "ZORK INTERPRETER LANGUAGE": "_zork_dark-blue",
    "ZORK INTERPRETER-LANGUAGE": "_zork_dark-blue",
    "ZORK INTERPRETER_LANGUAGE": "_zork_dark-blue",
    "ZORK-INTERPRETERLANGUAGE": "_zork_dark-blue",
    "ZORK-INTERPRETER LANGUAGE": "_zork_dark-blue",
    "ZORK-INTERPRETER-LANGUAGE": "_zork_dark-blue",
    "ZORK-INTERPRETER_LANGUAGE": "_zork_dark-blue",
    ZORK_INTERPRETERLANGUAGE: "_zork_dark-blue",
    "ZORK_INTERPRETER LANGUAGE": "_zork_dark-blue",
    "ZORK_INTERPRETER-LANGUAGE": "_zork_dark-blue",
    ZORK_INTERPRETER_LANGUAGE: "_zork_dark-blue",
    zosassembler: "_asm-zilog_medium-blue",
    "z/osassembler": "_asm-zilog_medium-blue",
    zOSAssembler: "_asm-zilog_medium-blue",
    "z/OSAssembler": "_asm-zilog_medium-blue",
    ZOSASSEMBLER: "_asm-zilog_medium-blue",
    "Z/OSASSEMBLER": "_asm-zilog_medium-blue",
    zosassembly: "_asm-zilog_medium-blue",
    "z/osassembly": "_asm-zilog_medium-blue",
    zOSAssembly: "_asm-zilog_medium-blue",
    "z/OSAssembly": "_asm-zilog_medium-blue",
    ZOSASSEMBLY: "_asm-zilog_medium-blue",
    "Z/OSASSEMBLY": "_asm-zilog_medium-blue",
    zosplx: "_asm-zilog_medium-blue",
    "zospl/x": "_asm-zilog_medium-blue",
    "z/osplx": "_asm-zilog_medium-blue",
    "z/ospl/x": "_asm-zilog_medium-blue",
    zOSPLX: "_asm-zilog_medium-blue",
    "zOSPL/X": "_asm-zilog_medium-blue",
    "z/OSPLX": "_asm-zilog_medium-blue",
    "z/OSPL/X": "_asm-zilog_medium-blue",
    ZOSPLX: "_asm-zilog_medium-blue",
    "ZOSPL/X": "_asm-zilog_medium-blue",
    "Z/OSPLX": "_asm-zilog_medium-blue",
    "Z/OSPL/X": "_asm-zilog_medium-blue",
    zosplxedl: "_asm-zilog_medium-blue",
    "zospl/xedl": "_asm-zilog_medium-blue",
    "z/osplxedl": "_asm-zilog_medium-blue",
    "z/ospl/xedl": "_asm-zilog_medium-blue",
    zOSPLXEDL: "_asm-zilog_medium-blue",
    "zOSPL/XEDL": "_asm-zilog_medium-blue",
    "z/OSPLXEDL": "_asm-zilog_medium-blue",
    "z/OSPL/XEDL": "_asm-zilog_medium-blue",
    ZOSPLXEDL: "_asm-zilog_medium-blue",
    "ZOSPL/XEDL": "_asm-zilog_medium-blue",
    "Z/OSPLXEDL": "_asm-zilog_medium-blue",
    "Z/OSPL/XEDL": "_asm-zilog_medium-blue",
    zvmasm: "_asm-zilog_medium-blue",
    zvmassembler: "_asm-zilog_medium-blue",
    "z/vmassembler": "_asm-zilog_medium-blue",
    zVMAssembler: "_asm-zilog_medium-blue",
    "z/VMAssembler": "_asm-zilog_medium-blue",
    ZVMASSEMBLER: "_asm-zilog_medium-blue",
    "Z/VMASSEMBLER": "_asm-zilog_medium-blue",
    zvmassembly: "_asm-zilog_medium-blue",
    "z/vmassembly": "_asm-zilog_medium-blue",
    zVMAssembly: "_asm-zilog_medium-blue",
    "z/VMAssembly": "_asm-zilog_medium-blue",
    ZVMASSEMBLY: "_asm-zilog_medium-blue",
    "Z/VMASSEMBLY": "_asm-zilog_medium-blue",
    zvmplx: "_asm-zilog_medium-blue",
    "zvmpl/x": "_asm-zilog_medium-blue",
    "z/vmplx": "_asm-zilog_medium-blue",
    "z/vmpl/x": "_asm-zilog_medium-blue",
    zVMPLX: "_asm-zilog_medium-blue",
    "zVMPL/X": "_asm-zilog_medium-blue",
    "z/VMPLX": "_asm-zilog_medium-blue",
    "z/VMPL/X": "_asm-zilog_medium-blue",
    ZVMPLX: "_asm-zilog_medium-blue",
    "ZVMPL/X": "_asm-zilog_medium-blue",
    "Z/VMPLX": "_asm-zilog_medium-blue",
    "Z/VMPL/X": "_asm-zilog_medium-blue",
    zvmplxedl: "_asm-zilog_medium-blue",
    "zvmpl/xedl": "_asm-zilog_medium-blue",
    "z/vmplxedl": "_asm-zilog_medium-blue",
    "z/vmpl/xedl": "_asm-zilog_medium-blue",
    zVMPLXEDL: "_asm-zilog_medium-blue",
    "zVMPL/XEDL": "_asm-zilog_medium-blue",
    "z/VMPLXEDL": "_asm-zilog_medium-blue",
    "z/VMPL/XEDL": "_asm-zilog_medium-blue",
    ZVMPLXEDL: "_asm-zilog_medium-blue",
    "ZVMPL/XEDL": "_asm-zilog_medium-blue",
    "Z/VMPLXEDL": "_asm-zilog_medium-blue",
    "Z/VMPL/XEDL": "_asm-zilog_medium-blue"
  };
  const light = {
    folderNames: {
      "bower-components": "_bower_medium-orange",
      bower_components: "_bower_medium-orange",
      ".buildkite": "_buildkite_medium-green",
      ".bzr": "_bazaar_dark-yellow"
    },
    fileExtensions: {
      "5c": "_nickle_dark-grey",
      acs: "_angelscript_dark-blue",
      alexignore: "_alex_dark-red",
      alexrc: "_alex_dark-pink",
      angelscript: "_angelscript_dark-blue",
      ansiweatherrc: "_sun_dark-yellow",
      auk: "_awk_dark-cyan",
      autotest: "_config-ruby_dark-red",
      aux: "_tex_dark-green",
      awk: "_awk_dark-blue",
      bats: "_test-generic_dark-grey",
      bbl: "_bibtex_dark-blue",
      bbx: "_bibtex_dark-orange",
      bib: "_bibtex_dark-yellow",
      bibtex: "_bibtex_dark-yellow",
      bs: "_bikeshed_dark-blue",
      bst: "_bibtex_dark-green",
      bzrignore: "_bazaar_dark-yellow",
      "c++": "_cpp_dark-blue",
      cas: "_casc_dark-orange",
      casc: "_casc_dark-orange",
      cbl: "_cobol_dark-blue",
      cbx: "_bibtex_dark-red",
      cc: "_cpp_dark-blue",
      ccp: "_cobol_dark-blue",
      cgt: "_bnf_dark-red",
      cirru: "_cirru_dark-pink",
      cjs: "_js_dark-green",
      "cjs.map": "_sourcemap_dark-green",
      "cjs.snap": "_jest_dark-green",
      cl2: "_clojure_dark-purple",
      "clang-format": "_llvm_dark-yellow",
      "clang-tidy": "_llvm_dark-yellow",
      clj: "_clojure_dark-blue",
      cljc: "_clojure_dark-green",
      cljs: "_cljs_dark-blue",
      cljscm: "_cljs_dark-blue",
      cljx: "_clojure_dark-red",
      cls: "_tex_dark-orange",
      cob: "_cobol_dark-blue",
      cobol: "_cobol_dark-blue",
      "c+p": "_cpp_dark-blue",
      "cp+": "_cpp_dark-blue",
      cpp: "_cpp_dark-blue",
      cpx: "_cpp_dark-blue",
      cpy: "_cobol_dark-blue",
      cross_rubies: "_config-ruby_dark-red",
      cs: "_csharp_dark-blue",
      "c+x": "_cpp_dark-blue",
      "cx+": "_cpp_dark-blue",
      cxp: "_cpp_dark-blue",
      cxx: "_cpp_dark-blue",
      cyp: "_neo4j_dark-blue",
      cypher: "_neo4j_dark-blue",
      dafny: "_dafny_medium-orange",
      dfy: "_dafny_medium-orange",
      dia: "_dia_dark-cyan",
      "doclets.yaml": "_doclets_medium-green",
      "doclets.yml": "_doclets_medium-green",
      "docz.cjs": "_docz_dark-yellow",
      "docz.config.cjs": "_docz_dark-yellow",
      "docz.config.js": "_docz_dark-yellow",
      "docz.config.json": "_docz_dark-orange",
      "docz.config.mjs": "_docz_dark-yellow",
      "docz.js": "_docz_dark-yellow",
      "docz.json": "_docz_dark-orange",
      "docz.mjs": "_docz_dark-yellow",
      "doczrc.cjs": "_docz_dark-yellow",
      "doczrc.config.cjs": "_docz_dark-yellow",
      "doczrc.config.js": "_docz_dark-yellow",
      "doczrc.config.json": "_docz_dark-orange",
      "doczrc.config.mjs": "_docz_dark-yellow",
      "doczrc.js": "_docz_dark-yellow",
      "doczrc.json": "_docz_dark-orange",
      "doczrc.mjs": "_docz_dark-yellow",
      dtx: "_tex_dark-maroon",
      dust: "_js_dark-maroon",
      dwl: "_dataweave_dark-blue",
      egt: "_bnf_dark-red",
      es: "_js_dark-yellow",
      es0: "_js_dark-yellow",
      es1: "_js_dark-yellow",
      es2: "_js_dark-yellow",
      es3: "_js_dark-yellow",
      es4: "_js_dark-yellow",
      es5: "_js_dark-yellow",
      es6: "_js_dark-yellow",
      es7: "_js_dark-yellow",
      es8: "_js_dark-yellow",
      es9: "_js_dark-yellow",
      exr: "_openexr_dark-pink",
      fla: "_animate_medium-red",
      fossil: "_fossil_dark-cyan",
      gap: "_gap_dark-yellow",
      gawk: "_awk_dark-red",
      gcx: "_grapher_dark-green",
      gdb: "_gdb_dark-green",
      gdbinit: "_gdb_dark-cyan",
      gemfile: "_bundler_dark-cyan",
      gemtest: "_config-ruby_dark-red",
      gnu: "_gnu_dark-red",
      gplv2: "_gnu_dark-red",
      gplv3: "_gnu_dark-red",
      grm: "_bnf_dark-yellow",
      "h++": "_cpp_dark-purple",
      hic: "_clojure_dark-red",
      hoerc: "_config-ruby_dark-red",
      "h+p": "_cpp_dark-purple",
      "hp+": "_cpp_dark-purple",
      hpp: "_cpp_dark-purple",
      hpx: "_cpp_dark-purple",
      huskyrc: "_husky_dark-blue",
      "huskyrc.cjs": "_husky_dark-green",
      "huskyrc.js": "_husky_dark-orange",
      "huskyrc.json": "_husky_dark-yellow",
      "huskyrc.mjs": "_husky_dark-blue",
      "huskyrc.yaml": "_husky_dark-red",
      "huskyrc.yml": "_husky_dark-red",
      "h+x": "_cpp_dark-purple",
      "hx+": "_cpp_dark-purple",
      hxp: "_cpp_dark-purple",
      hxproj: "_haxedevelop_dark-blue",
      hxx: "_cpp_dark-purple",
      inl: "_cpp_dark-red",
      ins: "_tex_dark-green",
      ipp: "_cpp_dark-orange",
      ixx: "_cpp_dark-blue",
      jake: "_jake_dark-yellow",
      jas: "_cheetah3d_dark-yellow",
      js: "_js_dark-yellow",
      _js: "_js_dark-orange",
      jsb: "_js_dark-maroon",
      jsbeautifyrc: "_config-js_dark-yellow",
      jscript: "_js_dark-red",
      jscsrc: "_config-js_dark-yellow",
      jse: "_js_dark-maroon",
      jsfl: "_as_dark-yellow",
      jshintrc: "_config-js_dark-yellow",
      jslib: "_js_dark-red",
      jsm: "_js_dark-blue",
      "js.map": "_sourcemap_dark-yellow",
      jss: "_js_dark-green",
      jsx: "_jsx_dark-blue",
      kick: "_config-ruby_dark-red",
      lat: "_latino_dark-blue",
      layout: "_sketchup-lo_dark-red",
      lbx: "_tex_dark-blue",
      ltx: "_tex_dark-blue",
      m2: "_macaulay2_dark-cyan",
      mawk: "_awk_dark-maroon",
      mdo: "_1c-alt_dark-red",
      mjs: "_js_dark-blue",
      "mjs.map": "_sourcemap_dark-blue",
      mkii: "_tex_dark-orange",
      mkiv: "_tex_dark-orange",
      mkvi: "_tex_dark-orange",
      mo: "_modelica_dark-red",
      nasl: "_nessus_dark-cyan",
      nawk: "_awk_dark-green",
      nvram: "_vmware_dark-blue",
      o3: "_ogone_dark-grey",
      ogone: "_ogone_dark-grey",
      ox: "_ox_dark-cyan",
      oxh: "_ox_dark-green",
      oxo: "_ox_dark-blue",
      oxygene: "_oxygene_dark-cyan",
      pgf: "_tex_dark-purple",
      pogo: "_pogo_dark-orange",
      "postcss.config.js": "_postcss_dark-yellow",
      postcssrc: "_postcss_dark-orange",
      "postcssrc.cjs": "_postcss_dark-orange",
      "postcssrc.js": "_postcss_dark-orange",
      "postcssrc.json": "_postcss_dark-orange",
      "postcssrc.mjs": "_postcss_dark-orange",
      "postcssrc.yaml": "_postcss_dark-orange",
      "postcssrc.yml": "_postcss_dark-orange",
      prettierrc: "_prettier_dark-cyan",
      "prettierrc.cjs": "_prettier_dark-cyan",
      "prettierrc.js": "_prettier_dark-cyan",
      "prettierrc.json": "_prettier_dark-cyan",
      "prettierrc.json5": "_prettier_dark-cyan",
      "prettierrc.mjs": "_prettier_dark-cyan",
      "prettierrc.yaml": "_prettier_dark-cyan",
      "prettierrc.yml": "_prettier_dark-cyan",
      pxg: "_image_dark-cyan",
      rbi: "_sorbet_dark-purple",
      "react.cjs": "_react_dark-blue",
      "react.js": "_react_dark-blue",
      "react.mjs": "_react_dark-blue",
      "sc.cjs": "_nailpolish_dark-green",
      "sc.jsx": "_nailpolish_dark-blue",
      "sc.mjs": "_nailpolish_dark-blue",
      sentryclirc: "_sentry_light-red",
      sequelizerc: "_sequelize_dark-blue",
      "sequelizerc.cjs": "_sequelize_dark-blue",
      "sequelizerc.js": "_sequelize_dark-blue",
      "sequelizerc.json": "_sequelize_dark-blue",
      "sequelizerc.mjs": "_sequelize_dark-blue",
      "sh-session": "_terminal_dark-yellow",
      simplecov: "_config-ruby_dark-red",
      sjs: "_js_dark-pink",
      sls: "_saltstack_dark-blue",
      sma: "_clojure_dark-yellow",
      snap: "_jest_dark-yellow",
      sp: "_clojure_dark-yellow",
      "-spec.c2hs": "_test-hs_dark-purple",
      "spec.c2hs": "_test-hs_dark-purple",
      "_spec.c2hs": "_test-hs_dark-purple",
      "-spec.cjs": "_test-js_dark-green",
      "spec.cjs": "_test-js_dark-green",
      "_spec.cjs": "_test-js_dark-green",
      "-spec.cjsx": "_test-coffee_dark-maroon",
      "spec.cjsx": "_test-coffee_dark-maroon",
      "_spec.cjsx": "_test-coffee_dark-maroon",
      "-spec.coffee": "_test-coffee_dark-maroon",
      "spec.coffee": "_test-coffee_dark-maroon",
      "_spec.coffee": "_test-coffee_dark-maroon",
      "-spec.es": "_test-js_dark-yellow",
      "spec.es": "_test-js_dark-yellow",
      "_spec.es": "_test-js_dark-yellow",
      "-spec.go": "_test-go_dark-cyan",
      "spec.go": "_test-go_dark-cyan",
      "_spec.go": "_test-go_dark-cyan",
      "-spec.hs": "_test-hs_dark-purple",
      "spec.hs": "_test-hs_dark-purple",
      "_spec.hs": "_test-hs_dark-purple",
      "-spec.hsc": "_test-hs_dark-purple",
      "spec.hsc": "_test-hs_dark-purple",
      "_spec.hsc": "_test-hs_dark-purple",
      "-spec.iced": "_test-coffee_dark-maroon",
      "spec.iced": "_test-coffee_dark-maroon",
      "_spec.iced": "_test-coffee_dark-maroon",
      "-spec.js": "_test-js_dark-yellow",
      "-spec._js": "_test-js_dark-yellow",
      "spec.js": "_test-js_dark-yellow",
      "spec._js": "_test-js_dark-yellow",
      "_spec.js": "_test-js_dark-yellow",
      "_spec._js": "_test-js_dark-yellow",
      "-spec.jsb": "_test-js_dark-yellow",
      "spec.jsb": "_test-js_dark-yellow",
      "_spec.jsb": "_test-js_dark-yellow",
      "-spec.jsm": "_test-js_dark-yellow",
      "spec.jsm": "_test-js_dark-yellow",
      "_spec.jsm": "_test-js_dark-yellow",
      "-spec.jss": "_test-js_dark-yellow",
      "spec.jss": "_test-js_dark-yellow",
      "_spec.jss": "_test-js_dark-yellow",
      "-spec.jsx": "_test-react_dark-blue",
      "spec.jsx": "_test-react_dark-blue",
      "_spec.jsx": "_test-react_dark-blue",
      "-spec.lhs": "_test-hs_dark-purple",
      "spec.lhs": "_test-hs_dark-purple",
      "_spec.lhs": "_test-hs_dark-purple",
      "-spec.litcoffee": "_test-coffee_dark-maroon",
      "spec.litcoffee": "_test-coffee_dark-maroon",
      "_spec.litcoffee": "_test-coffee_dark-maroon",
      "-spec.mjs": "_test-js_dark-blue",
      "spec.mjs": "_test-js_dark-blue",
      "_spec.mjs": "_test-js_dark-blue",
      "-spec.rb": "_test-ruby_dark-red",
      "spec.rb": "_test-ruby_dark-red",
      "_spec.rb": "_test-ruby_dark-red",
      "-spec.react.cjs": "_test-react_dark-blue",
      "spec.react.cjs": "_test-react_dark-blue",
      "_spec.react.cjs": "_test-react_dark-blue",
      "-spec.react.js": "_test-react_dark-blue",
      "spec.react.js": "_test-react_dark-blue",
      "_spec.react.js": "_test-react_dark-blue",
      "-spec.react.mjs": "_test-react_dark-blue",
      "spec.react.mjs": "_test-react_dark-blue",
      "_spec.react.mjs": "_test-react_dark-blue",
      "-spec.rs": "_test-rust_dark-maroon",
      "spec.rs": "_test-rust_dark-maroon",
      "_spec.rs": "_test-rust_dark-maroon",
      "-spec.ruby": "_test-ruby_dark-red",
      "spec.ruby": "_test-ruby_dark-red",
      "_spec.ruby": "_test-ruby_dark-red",
      "-specs.c2hs": "_test-hs_dark-purple",
      "specs.c2hs": "_test-hs_dark-purple",
      "_specs.c2hs": "_test-hs_dark-purple",
      "-specs.cjs": "_test-js_dark-green",
      "specs.cjs": "_test-js_dark-green",
      "_specs.cjs": "_test-js_dark-green",
      "-specs.cjsx": "_test-coffee_dark-maroon",
      "specs.cjsx": "_test-coffee_dark-maroon",
      "_specs.cjsx": "_test-coffee_dark-maroon",
      "-specs.coffee": "_test-coffee_dark-maroon",
      "specs.coffee": "_test-coffee_dark-maroon",
      "_specs.coffee": "_test-coffee_dark-maroon",
      "-specs.es": "_test-js_dark-yellow",
      "specs.es": "_test-js_dark-yellow",
      "_specs.es": "_test-js_dark-yellow",
      "-specs.go": "_test-go_dark-cyan",
      "specs.go": "_test-go_dark-cyan",
      "_specs.go": "_test-go_dark-cyan",
      "-specs.hs": "_test-hs_dark-purple",
      "specs.hs": "_test-hs_dark-purple",
      "_specs.hs": "_test-hs_dark-purple",
      "-specs.hsc": "_test-hs_dark-purple",
      "specs.hsc": "_test-hs_dark-purple",
      "_specs.hsc": "_test-hs_dark-purple",
      "-specs.iced": "_test-coffee_dark-maroon",
      "specs.iced": "_test-coffee_dark-maroon",
      "_specs.iced": "_test-coffee_dark-maroon",
      "-spec.sjs": "_test-js_dark-yellow",
      "-specs.js": "_test-js_dark-yellow",
      "-specs._js": "_test-js_dark-yellow",
      "spec.sjs": "_test-js_dark-yellow",
      "specs.js": "_test-js_dark-yellow",
      "specs._js": "_test-js_dark-yellow",
      "_spec.sjs": "_test-js_dark-yellow",
      "_specs.js": "_test-js_dark-yellow",
      "_specs._js": "_test-js_dark-yellow",
      "-specs.jsb": "_test-js_dark-yellow",
      "specs.jsb": "_test-js_dark-yellow",
      "_specs.jsb": "_test-js_dark-yellow",
      "-specs.jsm": "_test-js_dark-yellow",
      "specs.jsm": "_test-js_dark-yellow",
      "_specs.jsm": "_test-js_dark-yellow",
      "-specs.jss": "_test-js_dark-yellow",
      "specs.jss": "_test-js_dark-yellow",
      "_specs.jss": "_test-js_dark-yellow",
      "-specs.jsx": "_test-react_dark-blue",
      "specs.jsx": "_test-react_dark-blue",
      "_specs.jsx": "_test-react_dark-blue",
      "-specs.lhs": "_test-hs_dark-purple",
      "specs.lhs": "_test-hs_dark-purple",
      "_specs.lhs": "_test-hs_dark-purple",
      "-specs.litcoffee": "_test-coffee_dark-maroon",
      "specs.litcoffee": "_test-coffee_dark-maroon",
      "_specs.litcoffee": "_test-coffee_dark-maroon",
      "-specs.mjs": "_test-js_dark-blue",
      "specs.mjs": "_test-js_dark-blue",
      "_specs.mjs": "_test-js_dark-blue",
      "-specs.rb": "_test-ruby_dark-red",
      "specs.rb": "_test-ruby_dark-red",
      "_specs.rb": "_test-ruby_dark-red",
      "-specs.react.cjs": "_test-react_dark-blue",
      "specs.react.cjs": "_test-react_dark-blue",
      "_specs.react.cjs": "_test-react_dark-blue",
      "-specs.react.js": "_test-react_dark-blue",
      "specs.react.js": "_test-react_dark-blue",
      "_specs.react.js": "_test-react_dark-blue",
      "-specs.react.mjs": "_test-react_dark-blue",
      "specs.react.mjs": "_test-react_dark-blue",
      "_specs.react.mjs": "_test-react_dark-blue",
      "-specs.rs": "_test-rust_dark-maroon",
      "specs.rs": "_test-rust_dark-maroon",
      "_specs.rs": "_test-rust_dark-maroon",
      "-specs.ruby": "_test-ruby_dark-red",
      "specs.ruby": "_test-ruby_dark-red",
      "_specs.ruby": "_test-ruby_dark-red",
      "-specs.sjs": "_test-js_dark-yellow",
      "specs.sjs": "_test-js_dark-yellow",
      "_specs.sjs": "_test-js_dark-yellow",
      "-specs.ts": "_test-ts_dark-blue",
      "specs.ts": "_test-ts_dark-blue",
      "_specs.ts": "_test-ts_dark-blue",
      "-specs.tsx": "_test-ts_medium-blue",
      "specs.tsx": "_test-ts_medium-blue",
      "_specs.tsx": "_test-ts_medium-blue",
      "-spec.ts": "_test-ts_dark-blue",
      "spec.ts": "_test-ts_dark-blue",
      "_spec.ts": "_test-ts_dark-blue",
      "-spec.tsx": "_test-ts_medium-blue",
      "spec.tsx": "_test-ts_medium-blue",
      "_spec.tsx": "_test-ts_medium-blue",
      ssjs: "_js_dark-red",
      sty: "_tex_dark-red",
      style: "_sketchup-sb_dark-red",
      sv: "_sysverilog_dark-blue",
      svh: "_sysverilog_dark-green",
      t: "_test-perl_dark-blue",
      tcc: "_cpp_dark-red",
      "-test.c2hs": "_test-hs_dark-purple",
      "test.c2hs": "_test-hs_dark-purple",
      "_test.c2hs": "_test-hs_dark-purple",
      "-test.cjs": "_test-js_dark-green",
      "test.cjs": "_test-js_dark-green",
      "_test.cjs": "_test-js_dark-green",
      "-test.cjsx": "_test-coffee_dark-maroon",
      "test.cjsx": "_test-coffee_dark-maroon",
      "_test.cjsx": "_test-coffee_dark-maroon",
      "-test.coffee": "_test-coffee_dark-maroon",
      "test.coffee": "_test-coffee_dark-maroon",
      "_test.coffee": "_test-coffee_dark-maroon",
      "-test.es": "_test-js_dark-yellow",
      "test.es": "_test-js_dark-yellow",
      "_test.es": "_test-js_dark-yellow",
      "-test.go": "_test-go_dark-cyan",
      "test.go": "_test-go_dark-cyan",
      "_test.go": "_test-go_dark-cyan",
      "-test.hs": "_test-hs_dark-purple",
      "test.hs": "_test-hs_dark-purple",
      "_test.hs": "_test-hs_dark-purple",
      "-test.hsc": "_test-hs_dark-purple",
      "test.hsc": "_test-hs_dark-purple",
      "_test.hsc": "_test-hs_dark-purple",
      "-test.iced": "_test-coffee_dark-maroon",
      "test.iced": "_test-coffee_dark-maroon",
      "_test.iced": "_test-coffee_dark-maroon",
      "-test.js": "_test-js_dark-yellow",
      "-test._js": "_test-js_dark-yellow",
      "test.js": "_test-js_dark-yellow",
      "test._js": "_test-js_dark-yellow",
      "_test.js": "_test-js_dark-yellow",
      "_test._js": "_test-js_dark-yellow",
      "-test.jsb": "_test-js_dark-yellow",
      "test.jsb": "_test-js_dark-yellow",
      "_test.jsb": "_test-js_dark-yellow",
      "-test.jsm": "_test-js_dark-yellow",
      "test.jsm": "_test-js_dark-yellow",
      "_test.jsm": "_test-js_dark-yellow",
      "-test.jss": "_test-js_dark-yellow",
      "test.jss": "_test-js_dark-yellow",
      "_test.jss": "_test-js_dark-yellow",
      "-test.jsx": "_test-react_dark-blue",
      "test.jsx": "_test-react_dark-blue",
      "_test.jsx": "_test-react_dark-blue",
      "-test.lhs": "_test-hs_dark-purple",
      "test.lhs": "_test-hs_dark-purple",
      "_test.lhs": "_test-hs_dark-purple",
      "-test.litcoffee": "_test-coffee_dark-maroon",
      "test.litcoffee": "_test-coffee_dark-maroon",
      "_test.litcoffee": "_test-coffee_dark-maroon",
      "-test.mjs": "_test-js_dark-blue",
      "test.mjs": "_test-js_dark-blue",
      "_test.mjs": "_test-js_dark-blue",
      "-test.rb": "_test-ruby_dark-red",
      "test.rb": "_test-ruby_dark-red",
      "_test.rb": "_test-ruby_dark-red",
      "-test.react.cjs": "_test-react_dark-blue",
      "test.react.cjs": "_test-react_dark-blue",
      "_test.react.cjs": "_test-react_dark-blue",
      "-test.react.js": "_test-react_dark-blue",
      "test.react.js": "_test-react_dark-blue",
      "_test.react.js": "_test-react_dark-blue",
      "-test.react.mjs": "_test-react_dark-blue",
      "test.react.mjs": "_test-react_dark-blue",
      "_test.react.mjs": "_test-react_dark-blue",
      "-test.rs": "_test-rust_dark-maroon",
      "test.rs": "_test-rust_dark-maroon",
      "_test.rs": "_test-rust_dark-maroon",
      "-test.ruby": "_test-ruby_dark-red",
      "test.ruby": "_test-ruby_dark-red",
      "_test.ruby": "_test-ruby_dark-red",
      "-tests.c2hs": "_test-hs_dark-purple",
      "tests.c2hs": "_test-hs_dark-purple",
      "_tests.c2hs": "_test-hs_dark-purple",
      "-tests.cjs": "_test-js_dark-green",
      "tests.cjs": "_test-js_dark-green",
      "_tests.cjs": "_test-js_dark-green",
      "-tests.cjsx": "_test-coffee_dark-maroon",
      "tests.cjsx": "_test-coffee_dark-maroon",
      "_tests.cjsx": "_test-coffee_dark-maroon",
      "-tests.coffee": "_test-coffee_dark-maroon",
      "tests.coffee": "_test-coffee_dark-maroon",
      "_tests.coffee": "_test-coffee_dark-maroon",
      "-tests.es": "_test-js_dark-yellow",
      "tests.es": "_test-js_dark-yellow",
      "_tests.es": "_test-js_dark-yellow",
      "-tests.go": "_test-go_dark-cyan",
      "tests.go": "_test-go_dark-cyan",
      "_tests.go": "_test-go_dark-cyan",
      "-tests.hs": "_test-hs_dark-purple",
      "tests.hs": "_test-hs_dark-purple",
      "_tests.hs": "_test-hs_dark-purple",
      "-tests.hsc": "_test-hs_dark-purple",
      "tests.hsc": "_test-hs_dark-purple",
      "_tests.hsc": "_test-hs_dark-purple",
      "-tests.iced": "_test-coffee_dark-maroon",
      "tests.iced": "_test-coffee_dark-maroon",
      "_tests.iced": "_test-coffee_dark-maroon",
      "-test.sjs": "_test-js_dark-yellow",
      "-tests.js": "_test-js_dark-yellow",
      "-tests._js": "_test-js_dark-yellow",
      "test.sjs": "_test-js_dark-yellow",
      "tests.js": "_test-js_dark-yellow",
      "tests._js": "_test-js_dark-yellow",
      "_test.sjs": "_test-js_dark-yellow",
      "_tests.js": "_test-js_dark-yellow",
      "_tests._js": "_test-js_dark-yellow",
      "-tests.jsb": "_test-js_dark-yellow",
      "tests.jsb": "_test-js_dark-yellow",
      "_tests.jsb": "_test-js_dark-yellow",
      "-tests.jsm": "_test-js_dark-yellow",
      "tests.jsm": "_test-js_dark-yellow",
      "_tests.jsm": "_test-js_dark-yellow",
      "-tests.jss": "_test-js_dark-yellow",
      "tests.jss": "_test-js_dark-yellow",
      "_tests.jss": "_test-js_dark-yellow",
      "-tests.jsx": "_test-react_dark-blue",
      "tests.jsx": "_test-react_dark-blue",
      "_tests.jsx": "_test-react_dark-blue",
      "-tests.lhs": "_test-hs_dark-purple",
      "tests.lhs": "_test-hs_dark-purple",
      "_tests.lhs": "_test-hs_dark-purple",
      "-tests.litcoffee": "_test-coffee_dark-maroon",
      "tests.litcoffee": "_test-coffee_dark-maroon",
      "_tests.litcoffee": "_test-coffee_dark-maroon",
      "-tests.mjs": "_test-js_dark-blue",
      "tests.mjs": "_test-js_dark-blue",
      "_tests.mjs": "_test-js_dark-blue",
      "-tests.rb": "_test-ruby_dark-red",
      "tests.rb": "_test-ruby_dark-red",
      "_tests.rb": "_test-ruby_dark-red",
      "-tests.react.cjs": "_test-react_dark-blue",
      "tests.react.cjs": "_test-react_dark-blue",
      "_tests.react.cjs": "_test-react_dark-blue",
      "-tests.react.js": "_test-react_dark-blue",
      "tests.react.js": "_test-react_dark-blue",
      "_tests.react.js": "_test-react_dark-blue",
      "-tests.react.mjs": "_test-react_dark-blue",
      "tests.react.mjs": "_test-react_dark-blue",
      "_tests.react.mjs": "_test-react_dark-blue",
      "-tests.rs": "_test-rust_dark-maroon",
      "tests.rs": "_test-rust_dark-maroon",
      "_tests.rs": "_test-rust_dark-maroon",
      "-tests.ruby": "_test-ruby_dark-red",
      "tests.ruby": "_test-ruby_dark-red",
      "_tests.ruby": "_test-ruby_dark-red",
      "-tests.sjs": "_test-js_dark-yellow",
      "tests.sjs": "_test-js_dark-yellow",
      "_tests.sjs": "_test-js_dark-yellow",
      "-tests.ts": "_test-ts_dark-blue",
      "tests.ts": "_test-ts_dark-blue",
      "_tests.ts": "_test-ts_dark-blue",
      "-tests.tsx": "_test-ts_medium-blue",
      "tests.tsx": "_test-ts_medium-blue",
      "_tests.tsx": "_test-ts_medium-blue",
      "-test.ts": "_test-ts_dark-blue",
      "test.ts": "_test-ts_dark-blue",
      "_test.ts": "_test-ts_dark-blue",
      "-test.tsx": "_test-ts_medium-blue",
      "test.tsx": "_test-ts_medium-blue",
      "_test.tsx": "_test-ts_medium-blue",
      tex: "_tex_dark-blue",
      texi: "_tex_dark-red",
      texinfo: "_tex_dark-red",
      tikz: "_tex_dark-purple",
      toc: "_toc_dark-cyan",
      tpl: "_smarty_dark-yellow",
      tpp: "_cpp_dark-orange",
      txi: "_tex_dark-red",
      "unibeautifyrc.cjs": "_unibeautify_dark-orange",
      "unibeautifyrc.js": "_unibeautify_dark-orange",
      "unibeautifyrc.json": "_unibeautify_dark-orange",
      "unibeautifyrc.mjs": "_unibeautify_dark-orange",
      "unibeautifyrc.yaml": "_unibeautify_dark-yellow",
      "unibeautifyrc.yml": "_unibeautify_dark-yellow",
      units: "_scales_dark-green",
      vbox: "_virtualbox_dark-blue",
      "vbox-prev": "_virtualbox_dark-blue",
      vbox_version: "_virtualbox_dark-blue",
      vcxitems: "_vs_dark-purple",
      vh: "_sysverilog_dark-cyan",
      vmdk: "_vmware_dark-orange",
      vmss: "_vmware_dark-blue",
      vmtm: "_vmware_dark-red",
      vmx: "_vmware_dark-orange",
      vmxf: "_vmware_dark-orange",
      vrimg: "_vray_dark-grey",
      wix: "_wix_dark-maroon",
      wlt: "_wolfram_dark-orange",
      wxi: "_wix_dark-orange",
      wxl: "_wix_dark-maroon",
      xpy: "_python_dark-yellow",
      xsjs: "_js_dark-purple",
      xsjslib: "_js_dark-blue",
      yardopts: "_config-ruby_dark-red",
      zs: "_crafttweaker_dark-maroon",
      ztl: "_zbrush_dark-red"
    },
    fileNames: {
      "api-extractor-base.json": "_apiextractor_medium-blue",
      "api-extractor.json": "_apiextractor_medium-blue",
      authors: "_at_dark-red",
      berksfile: "_chef_dark-orange",
      "berksfile.lock": "_chef_dark-orange",
      "bootstrap.cjs": "_bootstrap_dark-green",
      "bootstrap.js": "_bootstrap_dark-yellow",
      "bootstrap.mjs": "_bootstrap_dark-blue",
      bowerfile: "_bower_medium-orange",
      "bower.json": "_bower_medium-orange",
      ".bowerrc": "_bower_medium-orange",
      brewfile: "_brew_dark-orange",
      "cabal-ghcjs.project": "_cabal_dark-yellow",
      "chai.coffee": "_chai_dark-red",
      "chai.es": "_chai_dark-red",
      "chai.es6": "_chai_dark-red",
      "chai.js": "_chai_dark-red",
      "chai.jsx": "_chai_dark-red",
      "chai.ts": "_chai_dark-red",
      "chai.tsx": "_chai_dark-red",
      chefignore: "_chef_dark-orange",
      "codemeta.json": "_codemeta_dark-grey",
      "codemeta.jsonld": "_codemeta_dark-grey",
      codeowners: "_at_dark-red",
      "conan.conf": "_conan_dark-blue",
      "conanfile.py": "_conan_dark-blue",
      "conanfile.txt": "_conan_dark-blue",
      "+contents": "_openbsd_dark-orange",
      "custom.bootstrap.cjs": "_bootstrap_dark-green",
      "custom.bootstrap.js": "_bootstrap_dark-yellow",
      "custom.bootstrap.mjs": "_bootstrap_dark-blue",
      "deno.json": "_deno_dark-grey",
      "deno.jsonc": "_deno_dark-grey",
      "+desc": "_openbsd_dark-orange",
      "+display": "_openbsd_dark-orange",
      "docz.cjs": "_docz_dark-yellow",
      "docz.config.cjs": "_docz_dark-yellow",
      "docz.config.js": "_docz_dark-yellow",
      "docz.config.json": "_docz_dark-orange",
      "docz.config.mjs": "_docz_dark-yellow",
      "docz.js": "_docz_dark-yellow",
      "docz.json": "_docz_dark-orange",
      "docz.mjs": "_docz_dark-yellow",
      "doczrc.cjs": "_docz_dark-yellow",
      "doczrc.config.cjs": "_docz_dark-yellow",
      "doczrc.config.js": "_docz_dark-yellow",
      "doczrc.config.json": "_docz_dark-orange",
      "doczrc.config.mjs": "_docz_dark-yellow",
      "doczrc.js": "_docz_dark-yellow",
      "doczrc.json": "_docz_dark-orange",
      "doczrc.mjs": "_docz_dark-yellow",
      ".env": "_dotenv_dark-yellow",
      "eshost-config.json": "_config-js_dark-yellow",
      ".eshost-config.json": "_config-js_dark-yellow",
      "eshost.json": "_config-js_dark-yellow",
      ".eshost.json": "_config-js_dark-yellow",
      "fabric.mod.json": "_fabric_dark-orange",
      "fuelux.cjs": "_fuelux_dark-orange",
      "fuelux.css": "_fuelux_dark-orange",
      "fuelux.js": "_fuelux_dark-orange",
      "fuelux.min.cjs": "_fuelux_dark-orange",
      "fuelux.min.css": "_fuelux_dark-orange",
      "fuelux.min.js": "_fuelux_dark-orange",
      "fuelux.min.mjs": "_fuelux_dark-orange",
      "fuelux.mjs": "_fuelux_dark-orange",
      gemfile: "_bundler_dark-blue",
      "gemfile.lock": "_bundler_dark-blue",
      "haskellconfig.json": "_config-hs_dark-purple",
      "hyphen.cs": "_tex_dark-red",
      "hyphen.den": "_tex_dark-red",
      "hyphen.det": "_tex_dark-red",
      "hyphenex.cs": "_tex_dark-red",
      "hyphenex.den": "_tex_dark-red",
      "hyphenex.det": "_tex_dark-red",
      "hyphenex.fr": "_tex_dark-red",
      "hyphenex.sv": "_tex_dark-red",
      "hyphenex.us": "_tex_dark-red",
      "hyphen.fr": "_tex_dark-red",
      "hyphen.sv": "_tex_dark-red",
      "hyphen.us": "_tex_dark-red",
      "installscript.qs": "_qt_dark-yellow",
      jakefile: "_jake_dark-maroon",
      "jasmine.0.cjs": "_jasmine_dark-purple",
      "jasmine.0.coffee": "_jasmine_dark-purple",
      "jasmine.0.js": "_jasmine_dark-purple",
      "jasmine.0.mjs": "_jasmine_dark-purple",
      "jasmine.0.ts": "_jasmine_dark-purple",
      "jasmine.1.cjs": "_jasmine_dark-purple",
      "jasmine.1.coffee": "_jasmine_dark-purple",
      "jasmine.1.js": "_jasmine_dark-purple",
      "jasmine.1.mjs": "_jasmine_dark-purple",
      "jasmine.1.ts": "_jasmine_dark-purple",
      "jasmine.2.cjs": "_jasmine_dark-purple",
      "jasmine.2.coffee": "_jasmine_dark-purple",
      "jasmine.2.js": "_jasmine_dark-purple",
      "jasmine.2.mjs": "_jasmine_dark-purple",
      "jasmine.2.ts": "_jasmine_dark-purple",
      "jasmine.3.cjs": "_jasmine_dark-purple",
      "jasmine.3.coffee": "_jasmine_dark-purple",
      "jasmine.3.js": "_jasmine_dark-purple",
      "jasmine.3.mjs": "_jasmine_dark-purple",
      "jasmine.3.ts": "_jasmine_dark-purple",
      "jasmine.4.cjs": "_jasmine_dark-purple",
      "jasmine.4.coffee": "_jasmine_dark-purple",
      "jasmine.4.js": "_jasmine_dark-purple",
      "jasmine.4.mjs": "_jasmine_dark-purple",
      "jasmine.4.ts": "_jasmine_dark-purple",
      "jasmine.5.cjs": "_jasmine_dark-purple",
      "jasmine.5.coffee": "_jasmine_dark-purple",
      "jasmine.5.js": "_jasmine_dark-purple",
      "jasmine.5.mjs": "_jasmine_dark-purple",
      "jasmine.5.ts": "_jasmine_dark-purple",
      "jasmine.6.cjs": "_jasmine_dark-purple",
      "jasmine.6.coffee": "_jasmine_dark-purple",
      "jasmine.6.js": "_jasmine_dark-purple",
      "jasmine.6.mjs": "_jasmine_dark-purple",
      "jasmine.6.ts": "_jasmine_dark-purple",
      "jasmine.7.cjs": "_jasmine_dark-purple",
      "jasmine.7.coffee": "_jasmine_dark-purple",
      "jasmine.7.js": "_jasmine_dark-purple",
      "jasmine.7.mjs": "_jasmine_dark-purple",
      "jasmine.7.ts": "_jasmine_dark-purple",
      "jasmine.8.cjs": "_jasmine_dark-purple",
      "jasmine.8.coffee": "_jasmine_dark-purple",
      "jasmine.8.js": "_jasmine_dark-purple",
      "jasmine.8.mjs": "_jasmine_dark-purple",
      "jasmine.8.ts": "_jasmine_dark-purple",
      "jasmine.9.cjs": "_jasmine_dark-purple",
      "jasmine.9.coffee": "_jasmine_dark-purple",
      "jasmine.9.js": "_jasmine_dark-purple",
      "jasmine.9.mjs": "_jasmine_dark-purple",
      "jasmine.9.ts": "_jasmine_dark-purple",
      "jasmine.a.cjs": "_jasmine_dark-purple",
      "jasmine.a.coffee": "_jasmine_dark-purple",
      "jasmine.a.js": "_jasmine_dark-purple",
      "jasmine.a.mjs": "_jasmine_dark-purple",
      "jasmine.a.ts": "_jasmine_dark-purple",
      "jasmine.b.cjs": "_jasmine_dark-purple",
      "jasmine.b.coffee": "_jasmine_dark-purple",
      "jasmine.b.js": "_jasmine_dark-purple",
      "jasmine.b.mjs": "_jasmine_dark-purple",
      "jasmine.b.ts": "_jasmine_dark-purple",
      "jasmine.c.cjs": "_jasmine_dark-purple",
      "jasmine.c.coffee": "_jasmine_dark-purple",
      "jasmine.cjs": "_jasmine_dark-purple",
      "jasmine.-.cjs": "_jasmine_dark-purple",
      "jasmine.c.js": "_jasmine_dark-purple",
      "jasmine._.cjs": "_jasmine_dark-purple",
      "jasmine.c.mjs": "_jasmine_dark-purple",
      "jasmine.coffee": "_jasmine_dark-purple",
      "jasmine.-.coffee": "_jasmine_dark-purple",
      "jasmine._.coffee": "_jasmine_dark-purple",
      "jasmine.c.ts": "_jasmine_dark-purple",
      "jasmine.d.cjs": "_jasmine_dark-purple",
      "jasmine.d.coffee": "_jasmine_dark-purple",
      "jasmine.d.js": "_jasmine_dark-purple",
      "jasmine.d.mjs": "_jasmine_dark-purple",
      "jasmine.d.ts": "_jasmine_dark-purple",
      "jasmine.e.cjs": "_jasmine_dark-purple",
      "jasmine.e.coffee": "_jasmine_dark-purple",
      "jasmine.e.js": "_jasmine_dark-purple",
      "jasmine.e.mjs": "_jasmine_dark-purple",
      "jasmine.e.ts": "_jasmine_dark-purple",
      "jasmine.f.cjs": "_jasmine_dark-purple",
      "jasmine.f.coffee": "_jasmine_dark-purple",
      "jasmine.f.js": "_jasmine_dark-purple",
      "jasmine.f.mjs": "_jasmine_dark-purple",
      "jasmine.f.ts": "_jasmine_dark-purple",
      "jasmine.g.cjs": "_jasmine_dark-purple",
      "jasmine.g.coffee": "_jasmine_dark-purple",
      "jasmine.g.js": "_jasmine_dark-purple",
      "jasmine.g.mjs": "_jasmine_dark-purple",
      "jasmine.g.ts": "_jasmine_dark-purple",
      "jasmine.h.cjs": "_jasmine_dark-purple",
      "jasmine.h.coffee": "_jasmine_dark-purple",
      "jasmine.h.js": "_jasmine_dark-purple",
      "jasmine.h.mjs": "_jasmine_dark-purple",
      "jasmine.h.ts": "_jasmine_dark-purple",
      "jasmine.i.cjs": "_jasmine_dark-purple",
      "jasmine.i.coffee": "_jasmine_dark-purple",
      "jasmine.i.js": "_jasmine_dark-purple",
      "jasmine.i.mjs": "_jasmine_dark-purple",
      "jasmine.i.ts": "_jasmine_dark-purple",
      "jasmine.j.cjs": "_jasmine_dark-purple",
      "jasmine.j.coffee": "_jasmine_dark-purple",
      "jasmine.j.js": "_jasmine_dark-purple",
      "jasmine.j.mjs": "_jasmine_dark-purple",
      "jasmine.js": "_jasmine_dark-purple",
      "jasmine.-.js": "_jasmine_dark-purple",
      "jasmine._.js": "_jasmine_dark-purple",
      "jasmine.json": "_jasmine_dark-purple",
      ".jasmine.json": "_jasmine_dark-purple",
      "jasmine.j.ts": "_jasmine_dark-purple",
      "jasmine.k.cjs": "_jasmine_dark-purple",
      "jasmine.k.coffee": "_jasmine_dark-purple",
      "jasmine.k.js": "_jasmine_dark-purple",
      "jasmine.k.mjs": "_jasmine_dark-purple",
      "jasmine.k.ts": "_jasmine_dark-purple",
      "jasmine.l.cjs": "_jasmine_dark-purple",
      "jasmine.l.coffee": "_jasmine_dark-purple",
      "jasmine.l.js": "_jasmine_dark-purple",
      "jasmine.l.mjs": "_jasmine_dark-purple",
      "jasmine.l.ts": "_jasmine_dark-purple",
      "jasmine.m.cjs": "_jasmine_dark-purple",
      "jasmine.m.coffee": "_jasmine_dark-purple",
      "jasmine.mjs": "_jasmine_dark-purple",
      "jasmine.-.mjs": "_jasmine_dark-purple",
      "jasmine.m.js": "_jasmine_dark-purple",
      "jasmine._.mjs": "_jasmine_dark-purple",
      "jasmine.m.mjs": "_jasmine_dark-purple",
      "jasmine.m.ts": "_jasmine_dark-purple",
      "jasmine.n.cjs": "_jasmine_dark-purple",
      "jasmine.n.coffee": "_jasmine_dark-purple",
      "jasmine.n.js": "_jasmine_dark-purple",
      "jasmine.n.mjs": "_jasmine_dark-purple",
      "jasmine.n.ts": "_jasmine_dark-purple",
      "jasmine.o.cjs": "_jasmine_dark-purple",
      "jasmine.o.coffee": "_jasmine_dark-purple",
      "jasmine.o.js": "_jasmine_dark-purple",
      "jasmine.o.mjs": "_jasmine_dark-purple",
      "jasmine.o.ts": "_jasmine_dark-purple",
      "jasmine.p.cjs": "_jasmine_dark-purple",
      "jasmine.p.coffee": "_jasmine_dark-purple",
      "jasmine.p.js": "_jasmine_dark-purple",
      "jasmine.p.mjs": "_jasmine_dark-purple",
      "jasmine.p.ts": "_jasmine_dark-purple",
      "jasmine.q.cjs": "_jasmine_dark-purple",
      "jasmine.q.coffee": "_jasmine_dark-purple",
      "jasmine.q.js": "_jasmine_dark-purple",
      "jasmine.q.mjs": "_jasmine_dark-purple",
      "jasmine.q.ts": "_jasmine_dark-purple",
      "jasmine.r.cjs": "_jasmine_dark-purple",
      "jasmine.r.coffee": "_jasmine_dark-purple",
      "jasmine.r.js": "_jasmine_dark-purple",
      "jasmine.r.mjs": "_jasmine_dark-purple",
      "jasmine.r.ts": "_jasmine_dark-purple",
      "jasmine.s.cjs": "_jasmine_dark-purple",
      "jasmine.s.coffee": "_jasmine_dark-purple",
      "jasmine.s.js": "_jasmine_dark-purple",
      "jasmine.s.mjs": "_jasmine_dark-purple",
      "jasmine.s.ts": "_jasmine_dark-purple",
      "jasmine.t.cjs": "_jasmine_dark-purple",
      "jasmine.t.coffee": "_jasmine_dark-purple",
      "jasmine.t.js": "_jasmine_dark-purple",
      "jasmine.t.mjs": "_jasmine_dark-purple",
      "jasmine.ts": "_jasmine_dark-purple",
      "jasmine.-.ts": "_jasmine_dark-purple",
      "jasmine._.ts": "_jasmine_dark-purple",
      "jasmine.t.ts": "_jasmine_dark-purple",
      "jasmine.u.cjs": "_jasmine_dark-purple",
      "jasmine.u.coffee": "_jasmine_dark-purple",
      "jasmine.u.js": "_jasmine_dark-purple",
      "jasmine.u.mjs": "_jasmine_dark-purple",
      "jasmine.u.ts": "_jasmine_dark-purple",
      "jasmine.v.cjs": "_jasmine_dark-purple",
      "jasmine.v.coffee": "_jasmine_dark-purple",
      "jasmine.v.js": "_jasmine_dark-purple",
      "jasmine.v.mjs": "_jasmine_dark-purple",
      "jasmine.v.ts": "_jasmine_dark-purple",
      "jasmine.w.cjs": "_jasmine_dark-purple",
      "jasmine.w.coffee": "_jasmine_dark-purple",
      "jasmine.w.js": "_jasmine_dark-purple",
      "jasmine.w.mjs": "_jasmine_dark-purple",
      "jasmine.w.ts": "_jasmine_dark-purple",
      "jasmine.x.cjs": "_jasmine_dark-purple",
      "jasmine.x.coffee": "_jasmine_dark-purple",
      "jasmine.x.js": "_jasmine_dark-purple",
      "jasmine.x.mjs": "_jasmine_dark-purple",
      "jasmine.x.ts": "_jasmine_dark-purple",
      "jasmine.y.cjs": "_jasmine_dark-purple",
      "jasmine.y.coffee": "_jasmine_dark-purple",
      "jasmine.y.js": "_jasmine_dark-purple",
      "jasmine.y.mjs": "_jasmine_dark-purple",
      "jasmine.y.ts": "_jasmine_dark-purple",
      "jasmine.z.cjs": "_jasmine_dark-purple",
      "jasmine.z.coffee": "_jasmine_dark-purple",
      "jasmine.z.js": "_jasmine_dark-purple",
      "jasmine.z.mjs": "_jasmine_dark-purple",
      "jasmine.z.ts": "_jasmine_dark-purple",
      jenkinsfile: "_jenkins_dark-red",
      "jsconfig.0.json": "_config-js_dark-yellow",
      "jsconfig.1.json": "_config-js_dark-yellow",
      "jsconfig.2.json": "_config-js_dark-yellow",
      "jsconfig.3.json": "_config-js_dark-yellow",
      "jsconfig.4.json": "_config-js_dark-yellow",
      "jsconfig.5.json": "_config-js_dark-yellow",
      "jsconfig.6.json": "_config-js_dark-yellow",
      "jsconfig.7.json": "_config-js_dark-yellow",
      "jsconfig.8.json": "_config-js_dark-yellow",
      "jsconfig.9.json": "_config-js_dark-yellow",
      "jsconfig.a.json": "_config-js_dark-yellow",
      "jsconfig.b.json": "_config-js_dark-yellow",
      "jsconfig.c.json": "_config-js_dark-yellow",
      "jsconfig.d.json": "_config-js_dark-yellow",
      "jsconfig.e.json": "_config-js_dark-yellow",
      "jsconfig.f.json": "_config-js_dark-yellow",
      "jsconfig.g.json": "_config-js_dark-yellow",
      "jsconfig.h.json": "_config-js_dark-yellow",
      "jsconfig.i.json": "_config-js_dark-yellow",
      "jsconfig.j.json": "_config-js_dark-yellow",
      "jsconfig.json": "_config-js_dark-yellow",
      "jsconfig. .json": "_config-js_dark-yellow",
      "jsconfig.!.json": "_config-js_dark-yellow",
      'jsconfig.".json': "_config-js_dark-yellow",
      "jsconfig.#.json": "_config-js_dark-yellow",
      "jsconfig.$.json": "_config-js_dark-yellow",
      "jsconfig.%.json": "_config-js_dark-yellow",
      "jsconfig.&.json": "_config-js_dark-yellow",
      "jsconfig.'.json": "_config-js_dark-yellow",
      "jsconfig.(.json": "_config-js_dark-yellow",
      "jsconfig.).json": "_config-js_dark-yellow",
      "jsconfig.*.json": "_config-js_dark-yellow",
      "jsconfig.+.json": "_config-js_dark-yellow",
      "jsconfig.,.json": "_config-js_dark-yellow",
      "jsconfig.-.json": "_config-js_dark-yellow",
      "jsconfig...json": "_config-js_dark-yellow",
      "jsconfig./.json": "_config-js_dark-yellow",
      "jsconfig.:.json": "_config-js_dark-yellow",
      "jsconfig.;.json": "_config-js_dark-yellow",
      "jsconfig.<.json": "_config-js_dark-yellow",
      "jsconfig.=.json": "_config-js_dark-yellow",
      "jsconfig.>.json": "_config-js_dark-yellow",
      "jsconfig.?.json": "_config-js_dark-yellow",
      "jsconfig.@.json": "_config-js_dark-yellow",
      "jsconfig.[.json": "_config-js_dark-yellow",
      "jsconfig.\\.json": "_config-js_dark-yellow",
      "jsconfig.].json": "_config-js_dark-yellow",
      "jsconfig.^.json": "_config-js_dark-yellow",
      "jsconfig._.json": "_config-js_dark-yellow",
      "jsconfig.`.json": "_config-js_dark-yellow",
      "jsconfig.{.json": "_config-js_dark-yellow",
      "jsconfig.|.json": "_config-js_dark-yellow",
      "jsconfig.}.json": "_config-js_dark-yellow",
      "jsconfig.~.json": "_config-js_dark-yellow",
      "jsconfig.k.json": "_config-js_dark-yellow",
      "jsconfig.l.json": "_config-js_dark-yellow",
      "jsconfig.m.json": "_config-js_dark-yellow",
      "jsconfig.n.json": "_config-js_dark-yellow",
      "jsconfig.o.json": "_config-js_dark-yellow",
      "jsconfig.p.json": "_config-js_dark-yellow",
      "jsconfig.q.json": "_config-js_dark-yellow",
      "jsconfig.r.json": "_config-js_dark-yellow",
      "jsconfig.s.json": "_config-js_dark-yellow",
      "jsconfig.t.json": "_config-js_dark-yellow",
      "jsconfig.u.json": "_config-js_dark-yellow",
      "jsconfig.v.json": "_config-js_dark-yellow",
      "jsconfig.w.json": "_config-js_dark-yellow",
      "jsconfig.x.json": "_config-js_dark-yellow",
      "jsconfig.y.json": "_config-js_dark-yellow",
      "jsconfig.z.json": "_config-js_dark-yellow",
      "jsxconfig.json": "_config-react_dark-blue",
      "lerna.json": "_lerna_dark-blue",
      "makefile.boot": "_boot_dark-green",
      "meta.json": "_cpan_dark-yellow",
      ".nowignore": "_zeit_dark-maroon",
      "now.json": "_zeit_dark-grey",
      "nyc.config.cjs": "_istanbul_dark-green",
      "nyc.config.js": "_istanbul_dark-yellow",
      "nyc.config.mjs": "_istanbul_dark-blue",
      owners: "_at_dark-red",
      ".photorec.cfg": "_photorec_dark-green",
      "pnpmfile.js": "_pnpm_dark-yellow",
      policyfile: "_chef_dark-orange",
      "policyfile.lock": "_chef_dark-orange",
      "postcss.config.cjs": "_postcss_dark-yellow",
      "postcss.config.js": "_postcss_dark-yellow",
      "postcss.config.mjs": "_postcss_dark-yellow",
      ".pre-commit.yaml": "_precommit_dark-yellow",
      ".pre-commit.yml": "_precommit_dark-yellow",
      "prettier.config.cjs": "_prettier_dark-cyan",
      "prettier.config.js": "_prettier_dark-cyan",
      "prettier.config.mjs": "_prettier_dark-cyan",
      "riemann.config": "_clojure_dark-maroon",
      "rubyconfig.json": "_config-ruby_dark-red",
      ".sassrc": "_sass_dark-yellow",
      ".sassrc.cjs": "_sass_dark-yellow",
      ".sassrc.js": "_sass_dark-yellow",
      ".sassrc.mjs": "_sass_dark-yellow",
      "shadow-cljs.edn": "_shadowcljs_dark-cyan",
      "stylelint.config.cjs": "_stylelint_dark-yellow",
      "stylelint.config.js": "_stylelint_dark-yellow",
      "stylelint.config.mjs": "_stylelint_dark-yellow",
      "test-.c2hs": "_test-hs_dark-purple",
      "test..c2hs": "_test-hs_dark-purple",
      "test_.c2hs": "_test-hs_dark-purple",
      "test-.cjs": "_test-js_dark-green",
      "test..cjs": "_test-js_dark-green",
      "test_.cjs": "_test-js_dark-green",
      "test-.cjsx": "_test-coffee_dark-maroon",
      "test_.cjsx": "_test-coffee_dark-maroon",
      "test-.coffee": "_test-coffee_dark-maroon",
      "test_.coffee": "_test-coffee_dark-maroon",
      "test-.es": "_test-js_dark-yellow",
      "test..es": "_test-js_dark-yellow",
      "test_.es": "_test-js_dark-yellow",
      "test-.go": "_test-go_dark-cyan",
      "test..go": "_test-go_dark-cyan",
      "test_.go": "_test-go_dark-cyan",
      "test-.hs": "_test-hs_dark-purple",
      "test..hs": "_test-hs_dark-purple",
      "test_.hs": "_test-hs_dark-purple",
      "test-.hsc": "_test-hs_dark-purple",
      "test..hsc": "_test-hs_dark-purple",
      "test_.hsc": "_test-hs_dark-purple",
      "test-.iced": "_test-coffee_dark-maroon",
      "test_.iced": "_test-coffee_dark-maroon",
      "test-.js": "_test-js_dark-yellow",
      "test-._js": "_test-js_dark-yellow",
      "test..js": "_test-js_dark-yellow",
      "test.._js": "_test-js_dark-yellow",
      "test_.js": "_test-js_dark-yellow",
      "test_._js": "_test-js_dark-yellow",
      "test-.jsb": "_test-js_dark-yellow",
      "test..jsb": "_test-js_dark-yellow",
      "test_.jsb": "_test-js_dark-yellow",
      "test-.jsm": "_test-js_dark-yellow",
      "test..jsm": "_test-js_dark-yellow",
      "test_.jsm": "_test-js_dark-yellow",
      "test-.jss": "_test-js_dark-yellow",
      "test..jss": "_test-js_dark-yellow",
      "test_.jss": "_test-js_dark-yellow",
      "test-.jsx": "_test-react_dark-blue",
      "test..jsx": "_test-react_dark-blue",
      "test_.jsx": "_test-react_dark-blue",
      "test-.lhs": "_test-hs_dark-purple",
      "test..lhs": "_test-hs_dark-purple",
      "test_.lhs": "_test-hs_dark-purple",
      "test-.litcoffee": "_test-coffee_dark-maroon",
      "test_.litcoffee": "_test-coffee_dark-maroon",
      "test-.mjs": "_test-js_dark-blue",
      "test..mjs": "_test-js_dark-blue",
      "test_.mjs": "_test-js_dark-blue",
      "test-.pl": "_test-perl_dark-blue",
      "test..pl": "_test-perl_dark-blue",
      "test_.pl": "_test-perl_dark-blue",
      "test-.rb": "_test-ruby_dark-red",
      "test..rb": "_test-ruby_dark-red",
      "test_.rb": "_test-ruby_dark-red",
      "test-.react.cjs": "_test-react_dark-blue",
      "test..react.cjs": "_test-react_dark-blue",
      "test_.react.cjs": "_test-react_dark-blue",
      "test-.react.js": "_test-react_dark-blue",
      "test..react.js": "_test-react_dark-blue",
      "test_.react.js": "_test-react_dark-blue",
      "test-.react.mjs": "_test-react_dark-blue",
      "test..react.mjs": "_test-react_dark-blue",
      "test_.react.mjs": "_test-react_dark-blue",
      "test-.rs": "_test-rust_dark-maroon",
      "test_.rs": "_test-rust_dark-maroon",
      "test-.ruby": "_test-ruby_dark-red",
      "test..ruby": "_test-ruby_dark-red",
      "test_.ruby": "_test-ruby_dark-red",
      "test-.sjs": "_test-js_dark-yellow",
      "test..sjs": "_test-js_dark-yellow",
      "test_.sjs": "_test-js_dark-yellow",
      "test-.ts": "_test-ts_dark-blue",
      "test..ts": "_test-ts_dark-blue",
      "test_.ts": "_test-ts_dark-blue",
      "test-.tsx": "_test-ts_medium-blue",
      "test..tsx": "_test-ts_medium-blue",
      "test_.tsx": "_test-ts_medium-blue",
      "toolchain_installscript.qs": "_qt_dark-yellow",
      "truffle.cjs": "_truffle_dark-maroon",
      ".truffle.cjs": "_truffle_dark-maroon",
      "truffle.js": "_truffle_dark-maroon",
      ".truffle.js": "_truffle_dark-maroon",
      "truffle.mjs": "_truffle_dark-maroon",
      ".truffle.mjs": "_truffle_dark-maroon",
      "tsconfig.0.json": "_config-ts_dark-blue",
      "tsconfig.1.json": "_config-ts_dark-blue",
      "tsconfig.2.json": "_config-ts_dark-blue",
      "tsconfig.3.json": "_config-ts_dark-blue",
      "tsconfig.4.json": "_config-ts_dark-blue",
      "tsconfig.5.json": "_config-ts_dark-blue",
      "tsconfig.6.json": "_config-ts_dark-blue",
      "tsconfig.7.json": "_config-ts_dark-blue",
      "tsconfig.8.json": "_config-ts_dark-blue",
      "tsconfig.9.json": "_config-ts_dark-blue",
      "tsconfig.a.json": "_config-ts_dark-blue",
      "tsconfig.b.json": "_config-ts_dark-blue",
      "tsconfig.c.json": "_config-ts_dark-blue",
      "tsconfig.d.json": "_config-ts_dark-blue",
      "tsconfig.e.json": "_config-ts_dark-blue",
      "tsconfig.f.json": "_config-ts_dark-blue",
      "tsconfig.g.json": "_config-ts_dark-blue",
      "tsconfig.h.json": "_config-ts_dark-blue",
      "tsconfig.i.json": "_config-ts_dark-blue",
      "tsconfig.j.json": "_config-ts_dark-blue",
      "tsconfig.json": "_config-ts_dark-blue",
      "tsconfig. .json": "_config-ts_dark-blue",
      "tsconfig.!.json": "_config-ts_dark-blue",
      'tsconfig.".json': "_config-ts_dark-blue",
      "tsconfig.#.json": "_config-ts_dark-blue",
      "tsconfig.$.json": "_config-ts_dark-blue",
      "tsconfig.%.json": "_config-ts_dark-blue",
      "tsconfig.&.json": "_config-ts_dark-blue",
      "tsconfig.'.json": "_config-ts_dark-blue",
      "tsconfig.(.json": "_config-ts_dark-blue",
      "tsconfig.).json": "_config-ts_dark-blue",
      "tsconfig.*.json": "_config-ts_dark-blue",
      "tsconfig.+.json": "_config-ts_dark-blue",
      "tsconfig.,.json": "_config-ts_dark-blue",
      "tsconfig.-.json": "_config-ts_dark-blue",
      "tsconfig...json": "_config-ts_dark-blue",
      "tsconfig./.json": "_config-ts_dark-blue",
      "tsconfig.:.json": "_config-ts_dark-blue",
      "tsconfig.;.json": "_config-ts_dark-blue",
      "tsconfig.<.json": "_config-ts_dark-blue",
      "tsconfig.=.json": "_config-ts_dark-blue",
      "tsconfig.>.json": "_config-ts_dark-blue",
      "tsconfig.?.json": "_config-ts_dark-blue",
      "tsconfig.@.json": "_config-ts_dark-blue",
      "tsconfig.[.json": "_config-ts_dark-blue",
      "tsconfig.\\.json": "_config-ts_dark-blue",
      "tsconfig.].json": "_config-ts_dark-blue",
      "tsconfig.^.json": "_config-ts_dark-blue",
      "tsconfig._.json": "_config-ts_dark-blue",
      "tsconfig.`.json": "_config-ts_dark-blue",
      "tsconfig.{.json": "_config-ts_dark-blue",
      "tsconfig.|.json": "_config-ts_dark-blue",
      "tsconfig.}.json": "_config-ts_dark-blue",
      "tsconfig.~.json": "_config-ts_dark-blue",
      "tsconfig.k.json": "_config-ts_dark-blue",
      "tsconfig.l.json": "_config-ts_dark-blue",
      "tsconfig.m.json": "_config-ts_dark-blue",
      "tsconfig.n.json": "_config-ts_dark-blue",
      "tsconfig.o.json": "_config-ts_dark-blue",
      "tsconfig.p.json": "_config-ts_dark-blue",
      "tsconfig.q.json": "_config-ts_dark-blue",
      "tsconfig.r.json": "_config-ts_dark-blue",
      "tsconfig.s.json": "_config-ts_dark-blue",
      "tsconfig.t.json": "_config-ts_dark-blue",
      "tsconfig.u.json": "_config-ts_dark-blue",
      "tsconfig.v.json": "_config-ts_dark-blue",
      "tsconfig.w.json": "_config-ts_dark-blue",
      "tsconfig.x.json": "_config-ts_dark-blue",
      "tsconfig.y.json": "_config-ts_dark-blue",
      "tsconfig.z.json": "_config-ts_dark-blue",
      "tslint.json": "_config-ts_dark-purple",
      "ubsan.blacklist": "_llvm_dark-red",
      "unibeautify.config.cjs": "_unibeautify_dark-orange",
      "unibeautify.config.js": "_unibeautify_dark-orange",
      "unibeautify.config.mjs": "_unibeautify_dark-orange",
      "units.dat": "_scales_dark-green",
      unitshistory: "_scales_dark-red",
      "units-history": "_scales_dark-red",
      units_history: "_scales_dark-red",
      ".unitshistory": "_scales_dark-red",
      ".units-history": "_scales_dark-red",
      ".units_history": "_scales_dark-red",
      "units.lib": "_scales_dark-green",
      unittab: "_scales_dark-green",
      ".vercelignore": "_zeit_dark-maroon",
      "vercel.json": "_zeit_dark-grey",
      "vite.config.js": "_vite_dark-yellow",
      "vite.config.ts": "_vite_dark-yellow",
      "w3c.json": "_w3c_dark-blue",
      ".zsrc.json": "_crafttweaker_dark-orange"
    }
  };
  const ext = {
    fonts,
    file,
    folder,
    rootFolder,
    iconDefinitions,
    fileExtensions,
    fileNames,
    folderNames,
    languageIds,
    light
  };
  function importFont(name) {
    switch (name) {
      case "./devopicons.woff2":
        return new URL("/NoLLMChat/assets/devopicons-JYBX4xNv.woff2", import.meta.url).href;
      case "./file-icons.woff2":
        return new URL("/NoLLMChat/assets/file-icons-Z5MmQJSZ.woff2", import.meta.url).href;
      case "./fontawesome.woff2":
        return new URL("/NoLLMChat/assets/fontawesome-B-jkhYfk.woff2", import.meta.url).href;
      case "./mfixx.woff2":
        return new URL("/NoLLMChat/assets/mfixx-DfQCz-aF.woff2", import.meta.url).href;
      case "./octicons.woff2":
        return new URL("/NoLLMChat/assets/octicons-DT-2golg.woff2", import.meta.url).href;
    }
  }
  function injectStyles() {
    const rules = ext.fonts.map((font) => {
      return `
      @font-face {
        src: url(${importFont(font.src[0].path)});
        font-family: ${font.id};
        font-weight: ${font.weight};
        font-style: ${font.style};
        font-size: ${font.size};
      }
    `;
    }).join("\n");
    const classes = Object.keys(ext.iconDefinitions).map((key) => {
      const icon = ext.iconDefinitions[key];
      return `
      .icon.icon${key}::before {
        padding-right: 6px;
        font-family: ${icon.fontId};
        font-weight: ${icon.fontWeight};
        font-size: ${icon.fontSize};
        content: "${icon.fontCharacter}";
        color: ${icon.fontColor};
      }
    `;
    }).join("\n");
    const style = document.createElement("style");
    style.innerHTML = rules + classes;
    document.head.appendChild(style);
  }
  function getIconClass(path, language, isFolder, isRoot, theme) {
    const fileName = path.split("/").pop();
    const fileExtension = path.split(".").pop();
    const defaultFileIcon = ext.file;
    const defaultFolderIcon = ext.folder;
    const defaultRootFolderIcon = ext.rootFolder;
    if (isFolder) {
      if (isRoot) return defaultRootFolderIcon;
      if (theme === "light" && ext.light.folderNames[path]) return ext.light.folderNames[path];
      if (ext.folderNames[path]) return ext.folderNames[path];
      return defaultFolderIcon;
    }
    if (fileName && ext.fileNames[fileName]) {
      if (theme === "light" && ext.light.fileNames[fileName]) return ext.light.fileNames[fileName];
      if (ext.fileNames[fileName]) return ext.fileNames[fileName];
    }
    if (ext.languageIds[language]) {
      if (theme === "light" && ext.light.languageIds[language]) return ext.light.languageIds[language];
      if (ext.languageIds[language]) return ext.languageIds[language];
    }
    if (fileExtension && ext.fileExtensions[fileExtension]) {
      if (theme === "light" && ext.light.fileExtensions[fileExtension]) return ext.light.fileExtensions[fileExtension];
      if (ext.fileExtensions[fileExtension]) return ext.fileExtensions[fileExtension];
    }
    return defaultFileIcon;
  }
  function getIcon(path, language, isFolder, isRoot, theme) {
    const icon = getIconClass(path, language, isFolder, isRoot, theme);
    return `icon icon${icon}`;
  }
  const root = {
    index: "root",
    data: "root",
    isFolder: true,
    canMove: false,
    canRename: false,
    children: []
  };
  function FileTree(props) {
    const editorRef = reactExports.useRef(null);
    const treeEnv = reactExports.useRef();
    const provider = reactExports.useRef(new TreeProvider({
      root
    }));
    const isDarkTheme = useAppState((state) => state.theme === "dark");
    const { fileTreeStateRef } = useMainVSLiteAppContext();
    usePreventPitchZoom(editorRef);
    const refresh = async (updateMessage) => {
      if (typeof updateMessage === "string") {
        const data = await getDirAsTree(props.fs, ".", "root", Object.assign({}, root, {
          children: []
        }), {});
        provider.current.updateItems(data);
      }
    };
    fileTreeStateRef.current = {
      treeEnv,
      refresh: debounce(refresh, 300)
    };
    const renderItem = (item) => {
      const icon = getIcon(`${item.data}`, "", item.isFolder || false, item.index === "root", isDarkTheme ? "dark" : "light");
      return jsxRuntimeExports.jsx("span", {
        className: cn(icon, "flex content-center items-center"),
        children: `${item.data}`
      });
    };
    return jsxRuntimeExports.jsxs("div", {
      className: "flex flex-col",
      children: [
        jsxRuntimeExports.jsxs("div", {
          className: "w-full p-2 pt-4 flex items-center gap-2 pl-8 cursor-grab",
          children: [
            jsxRuntimeExports.jsx(LazyIcon, {
              name: "square-terminal"
            }),
            jsxRuntimeExports.jsx(Label, {
              className: "cursor-grab",
              children: "VSLite"
            })
          ]
        }),
        jsxRuntimeExports.jsx("div", {
          ref: editorRef,
          className: cn("flex-1 !overflow-scroll max-h-full nowheel nodrag", isDarkTheme ? "rct-dark" : "rct-default"),
          children: jsxRuntimeExports.jsx(UncontrolledTreeEnvironment, {
            ref: treeEnv,
            canRename: true,
            canSearch: true,
            canDragAndDrop: true,
            canDropOnFolder: true,
            canSearchByStartingTyping: true,
            dataProvider: provider.current,
            getItemTitle: (item) => `${item.data}`,
            renderItemTitle: (props2) => renderItem(props2.item),
            onPrimaryAction: (item) => props.onTriggerItem(item.index.toString(), `${item.data}`),
            onRenameItem: (item, name) => props.onRenameItem(item.index.toString(), name),
            viewState: {
              filetree: {}
            },
            children: jsxRuntimeExports.jsx(Tree, {
              treeId: "filetree",
              treeLabel: "Explorer",
              rootItem: "root"
            })
          })
        })
      ]
    });
  }
  class TreeProvider {
    constructor(items) {
      this.onDidChangeTreeDataEmitter = new EventEmitter();
      this.data = {
        items
      };
    }
    async updateItems(items) {
      this.data = {
        items
      };
      this.onDidChangeTreeDataEmitter.emit(Object.keys(items));
    }
    async getTreeItem(itemId) {
      return this.data.items[itemId];
    }
    onDidChangeTreeData(listener) {
      const handlerId = this.onDidChangeTreeDataEmitter.on((payload) => listener(payload));
      return {
        dispose: () => this.onDidChangeTreeDataEmitter.off(handlerId)
      };
    }
  }
  function Terminal(_props) {
    const { ternimalElementRef } = useMainVSLiteAppContext();
    usePreventPitchZoom(ternimalElementRef);
    return jsxRuntimeExports.jsx("div", {
      ref: ternimalElementRef,
      className: "w-full h-full vslite-xterm-wrapper nodrag nowheel"
    });
  }
  function Watermark() {
    return jsxRuntimeExports.jsxs("div", {
      className: "watermark",
      children: [
        jsxRuntimeExports.jsx("div", {
          className: "letterpress"
        }),
        jsxRuntimeExports.jsx("div", {
          className: "shortcuts"
        })
      ]
    });
  }
  function useLaunchQueue() {
    const [action, setAction] = reactExports.useState(null);
    const [files, setFiles] = reactExports.useState([]);
    reactExports.useEffect(() => {
      "launchQueue" in window && launchQueue.setConsumer((launchParams) => {
        var _a2;
        if (launchParams.targetURL) setAction(new URL(launchParams.targetURL).searchParams.get("action"));
        if ((_a2 = launchParams == null ? void 0 : launchParams.files) == null ? void 0 : _a2.length) setFiles(launchParams.files);
      });
    }, []);
    return {
      action,
      files
    };
  }
  var xterm = {
    exports: {}
  };
  (function(module, exports) {
    !function(e, t) {
      module.exports = t();
    }(self, () => (() => {
      var e = {
        4567: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.AccessibilityManager = void 0;
          const n = i2(9042), o = i2(6114), a = i2(9924), h2 = i2(844), c = i2(5596), l2 = i2(4725), d = i2(3656);
          let _2 = t2.AccessibilityManager = class extends h2.Disposable {
            constructor(e3, t3) {
              super(), this._terminal = e3, this._renderService = t3, this._liveRegionLineCount = 0, this._charsToConsume = [], this._charsToAnnounce = "", this._accessibilityContainer = document.createElement("div"), this._accessibilityContainer.classList.add("xterm-accessibility"), this._rowContainer = document.createElement("div"), this._rowContainer.setAttribute("role", "list"), this._rowContainer.classList.add("xterm-accessibility-tree"), this._rowElements = [];
              for (let e4 = 0; e4 < this._terminal.rows; e4++) this._rowElements[e4] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[e4]);
              if (this._topBoundaryFocusListener = (e4) => this._handleBoundaryFocus(e4, 0), this._bottomBoundaryFocusListener = (e4) => this._handleBoundaryFocus(e4, 1), this._rowElements[0].addEventListener("focus", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._refreshRowsDimensions(), this._accessibilityContainer.appendChild(this._rowContainer), this._liveRegion = document.createElement("div"), this._liveRegion.classList.add("live-region"), this._liveRegion.setAttribute("aria-live", "assertive"), this._accessibilityContainer.appendChild(this._liveRegion), this._liveRegionDebouncer = this.register(new a.TimeBasedDebouncer(this._renderRows.bind(this))), !this._terminal.element) throw new Error("Cannot enable accessibility before Terminal.open");
              this._terminal.element.insertAdjacentElement("afterbegin", this._accessibilityContainer), this.register(this._terminal.onResize((e4) => this._handleResize(e4.rows))), this.register(this._terminal.onRender((e4) => this._refreshRows(e4.start, e4.end))), this.register(this._terminal.onScroll(() => this._refreshRows())), this.register(this._terminal.onA11yChar((e4) => this._handleChar(e4))), this.register(this._terminal.onLineFeed(() => this._handleChar("\n"))), this.register(this._terminal.onA11yTab((e4) => this._handleTab(e4))), this.register(this._terminal.onKey((e4) => this._handleKey(e4.key))), this.register(this._terminal.onBlur(() => this._clearLiveRegion())), this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions())), this._screenDprMonitor = new c.ScreenDprMonitor(window), this.register(this._screenDprMonitor), this._screenDprMonitor.setListener(() => this._refreshRowsDimensions()), this.register((0, d.addDisposableDomListener)(window, "resize", () => this._refreshRowsDimensions())), this._refreshRows(), this.register((0, h2.toDisposable)(() => {
                this._accessibilityContainer.remove(), this._rowElements.length = 0;
              }));
            }
            _handleTab(e3) {
              for (let t3 = 0; t3 < e3; t3++) this._handleChar(" ");
            }
            _handleChar(e3) {
              this._liveRegionLineCount < 21 && (this._charsToConsume.length > 0 ? this._charsToConsume.shift() !== e3 && (this._charsToAnnounce += e3) : this._charsToAnnounce += e3, "\n" === e3 && (this._liveRegionLineCount++, 21 === this._liveRegionLineCount && (this._liveRegion.textContent += n.tooMuchOutput)), o.isMac && this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode && setTimeout(() => {
                this._accessibilityContainer.appendChild(this._liveRegion);
              }, 0));
            }
            _clearLiveRegion() {
              this._liveRegion.textContent = "", this._liveRegionLineCount = 0, o.isMac && this._liveRegion.remove();
            }
            _handleKey(e3) {
              this._clearLiveRegion(), new RegExp("\\p{Control}", "u").test(e3) || this._charsToConsume.push(e3);
            }
            _refreshRows(e3, t3) {
              this._liveRegionDebouncer.refresh(e3, t3, this._terminal.rows);
            }
            _renderRows(e3, t3) {
              const i3 = this._terminal.buffer, s3 = i3.lines.length.toString();
              for (let r2 = e3; r2 <= t3; r2++) {
                const e4 = i3.translateBufferLineToString(i3.ydisp + r2, true), t4 = (i3.ydisp + r2 + 1).toString(), n2 = this._rowElements[r2];
                n2 && (0 === e4.length ? n2.innerText = "\xA0" : n2.textContent = e4, n2.setAttribute("aria-posinset", t4), n2.setAttribute("aria-setsize", s3));
              }
              this._announceCharacters();
            }
            _announceCharacters() {
              0 !== this._charsToAnnounce.length && (this._liveRegion.textContent += this._charsToAnnounce, this._charsToAnnounce = "");
            }
            _handleBoundaryFocus(e3, t3) {
              const i3 = e3.target, s3 = this._rowElements[0 === t3 ? 1 : this._rowElements.length - 2];
              if (i3.getAttribute("aria-posinset") === (0 === t3 ? "1" : `${this._terminal.buffer.lines.length}`)) return;
              if (e3.relatedTarget !== s3) return;
              let r2, n2;
              if (0 === t3 ? (r2 = i3, n2 = this._rowElements.pop(), this._rowContainer.removeChild(n2)) : (r2 = this._rowElements.shift(), n2 = i3, this._rowContainer.removeChild(r2)), r2.removeEventListener("focus", this._topBoundaryFocusListener), n2.removeEventListener("focus", this._bottomBoundaryFocusListener), 0 === t3) {
                const e4 = this._createAccessibilityTreeNode();
                this._rowElements.unshift(e4), this._rowContainer.insertAdjacentElement("afterbegin", e4);
              } else {
                const e4 = this._createAccessibilityTreeNode();
                this._rowElements.push(e4), this._rowContainer.appendChild(e4);
              }
              this._rowElements[0].addEventListener("focus", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._terminal.scrollLines(0 === t3 ? -1 : 1), this._rowElements[0 === t3 ? 1 : this._rowElements.length - 2].focus(), e3.preventDefault(), e3.stopImmediatePropagation();
            }
            _handleResize(e3) {
              this._rowElements[this._rowElements.length - 1].removeEventListener("focus", this._bottomBoundaryFocusListener);
              for (let e4 = this._rowContainer.children.length; e4 < this._terminal.rows; e4++) this._rowElements[e4] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[e4]);
              for (; this._rowElements.length > e3; ) this._rowContainer.removeChild(this._rowElements.pop());
              this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._refreshRowsDimensions();
            }
            _createAccessibilityTreeNode() {
              const e3 = document.createElement("div");
              return e3.setAttribute("role", "listitem"), e3.tabIndex = -1, this._refreshRowDimensions(e3), e3;
            }
            _refreshRowsDimensions() {
              if (this._renderService.dimensions.css.cell.height) {
                this._accessibilityContainer.style.width = `${this._renderService.dimensions.css.canvas.width}px`, this._rowElements.length !== this._terminal.rows && this._handleResize(this._terminal.rows);
                for (let e3 = 0; e3 < this._terminal.rows; e3++) this._refreshRowDimensions(this._rowElements[e3]);
              }
            }
            _refreshRowDimensions(e3) {
              e3.style.height = `${this._renderService.dimensions.css.cell.height}px`;
            }
          };
          t2.AccessibilityManager = _2 = s2([
            r(1, l2.IRenderService)
          ], _2);
        },
        3614: (e2, t2) => {
          function i2(e3) {
            return e3.replace(/\r?\n/g, "\r");
          }
          function s2(e3, t3) {
            return t3 ? "\x1B[200~" + e3 + "\x1B[201~" : e3;
          }
          function r(e3, t3, r2, n2) {
            e3 = s2(e3 = i2(e3), r2.decPrivateModes.bracketedPasteMode && true !== n2.rawOptions.ignoreBracketedPasteMode), r2.triggerDataEvent(e3, true), t3.value = "";
          }
          function n(e3, t3, i3) {
            const s3 = i3.getBoundingClientRect(), r2 = e3.clientX - s3.left - 10, n2 = e3.clientY - s3.top - 10;
            t3.style.width = "20px", t3.style.height = "20px", t3.style.left = `${r2}px`, t3.style.top = `${n2}px`, t3.style.zIndex = "1000", t3.focus();
          }
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.rightClickHandler = t2.moveTextAreaUnderMouseCursor = t2.paste = t2.handlePasteEvent = t2.copyHandler = t2.bracketTextForPaste = t2.prepareTextForTerminal = void 0, t2.prepareTextForTerminal = i2, t2.bracketTextForPaste = s2, t2.copyHandler = function(e3, t3) {
            e3.clipboardData && e3.clipboardData.setData("text/plain", t3.selectionText), e3.preventDefault();
          }, t2.handlePasteEvent = function(e3, t3, i3, s3) {
            e3.stopPropagation(), e3.clipboardData && r(e3.clipboardData.getData("text/plain"), t3, i3, s3);
          }, t2.paste = r, t2.moveTextAreaUnderMouseCursor = n, t2.rightClickHandler = function(e3, t3, i3, s3, r2) {
            n(e3, t3, i3), r2 && s3.rightClickSelect(e3), t3.value = s3.selectionText, t3.select();
          };
        },
        7239: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.ColorContrastCache = void 0;
          const s2 = i2(1505);
          t2.ColorContrastCache = class {
            constructor() {
              this._color = new s2.TwoKeyMap(), this._css = new s2.TwoKeyMap();
            }
            setCss(e3, t3, i3) {
              this._css.set(e3, t3, i3);
            }
            getCss(e3, t3) {
              return this._css.get(e3, t3);
            }
            setColor(e3, t3, i3) {
              this._color.set(e3, t3, i3);
            }
            getColor(e3, t3) {
              return this._color.get(e3, t3);
            }
            clear() {
              this._color.clear(), this._css.clear();
            }
          };
        },
        3656: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.addDisposableDomListener = void 0, t2.addDisposableDomListener = function(e3, t3, i2, s2) {
            e3.addEventListener(t3, i2, s2);
            let r = false;
            return {
              dispose: () => {
                r || (r = true, e3.removeEventListener(t3, i2, s2));
              }
            };
          };
        },
        6465: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.Linkifier2 = void 0;
          const n = i2(3656), o = i2(8460), a = i2(844), h2 = i2(2585);
          let c = t2.Linkifier2 = class extends a.Disposable {
            get currentLink() {
              return this._currentLink;
            }
            constructor(e3) {
              super(), this._bufferService = e3, this._linkProviders = [], this._linkCacheDisposables = [], this._isMouseOut = true, this._wasResized = false, this._activeLine = -1, this._onShowLinkUnderline = this.register(new o.EventEmitter()), this.onShowLinkUnderline = this._onShowLinkUnderline.event, this._onHideLinkUnderline = this.register(new o.EventEmitter()), this.onHideLinkUnderline = this._onHideLinkUnderline.event, this.register((0, a.getDisposeArrayDisposable)(this._linkCacheDisposables)), this.register((0, a.toDisposable)(() => {
                this._lastMouseEvent = void 0;
              })), this.register(this._bufferService.onResize(() => {
                this._clearCurrentLink(), this._wasResized = true;
              }));
            }
            registerLinkProvider(e3) {
              return this._linkProviders.push(e3), {
                dispose: () => {
                  const t3 = this._linkProviders.indexOf(e3);
                  -1 !== t3 && this._linkProviders.splice(t3, 1);
                }
              };
            }
            attachToDom(e3, t3, i3) {
              this._element = e3, this._mouseService = t3, this._renderService = i3, this.register((0, n.addDisposableDomListener)(this._element, "mouseleave", () => {
                this._isMouseOut = true, this._clearCurrentLink();
              })), this.register((0, n.addDisposableDomListener)(this._element, "mousemove", this._handleMouseMove.bind(this))), this.register((0, n.addDisposableDomListener)(this._element, "mousedown", this._handleMouseDown.bind(this))), this.register((0, n.addDisposableDomListener)(this._element, "mouseup", this._handleMouseUp.bind(this)));
            }
            _handleMouseMove(e3) {
              if (this._lastMouseEvent = e3, !this._element || !this._mouseService) return;
              const t3 = this._positionFromMouseEvent(e3, this._element, this._mouseService);
              if (!t3) return;
              this._isMouseOut = false;
              const i3 = e3.composedPath();
              for (let e4 = 0; e4 < i3.length; e4++) {
                const t4 = i3[e4];
                if (t4.classList.contains("xterm")) break;
                if (t4.classList.contains("xterm-hover")) return;
              }
              this._lastBufferCell && t3.x === this._lastBufferCell.x && t3.y === this._lastBufferCell.y || (this._handleHover(t3), this._lastBufferCell = t3);
            }
            _handleHover(e3) {
              if (this._activeLine !== e3.y || this._wasResized) return this._clearCurrentLink(), this._askForLink(e3, false), void (this._wasResized = false);
              this._currentLink && this._linkAtPosition(this._currentLink.link, e3) || (this._clearCurrentLink(), this._askForLink(e3, true));
            }
            _askForLink(e3, t3) {
              var i3, s3;
              this._activeProviderReplies && t3 || (null === (i3 = this._activeProviderReplies) || void 0 === i3 || i3.forEach((e4) => {
                null == e4 || e4.forEach((e5) => {
                  e5.link.dispose && e5.link.dispose();
                });
              }), this._activeProviderReplies = /* @__PURE__ */ new Map(), this._activeLine = e3.y);
              let r2 = false;
              for (const [i4, n2] of this._linkProviders.entries()) t3 ? (null === (s3 = this._activeProviderReplies) || void 0 === s3 ? void 0 : s3.get(i4)) && (r2 = this._checkLinkProviderResult(i4, e3, r2)) : n2.provideLinks(e3.y, (t4) => {
                var s4, n3;
                if (this._isMouseOut) return;
                const o2 = null == t4 ? void 0 : t4.map((e4) => ({
                  link: e4
                }));
                null === (s4 = this._activeProviderReplies) || void 0 === s4 || s4.set(i4, o2), r2 = this._checkLinkProviderResult(i4, e3, r2), (null === (n3 = this._activeProviderReplies) || void 0 === n3 ? void 0 : n3.size) === this._linkProviders.length && this._removeIntersectingLinks(e3.y, this._activeProviderReplies);
              });
            }
            _removeIntersectingLinks(e3, t3) {
              const i3 = /* @__PURE__ */ new Set();
              for (let s3 = 0; s3 < t3.size; s3++) {
                const r2 = t3.get(s3);
                if (r2) for (let t4 = 0; t4 < r2.length; t4++) {
                  const s4 = r2[t4], n2 = s4.link.range.start.y < e3 ? 0 : s4.link.range.start.x, o2 = s4.link.range.end.y > e3 ? this._bufferService.cols : s4.link.range.end.x;
                  for (let e4 = n2; e4 <= o2; e4++) {
                    if (i3.has(e4)) {
                      r2.splice(t4--, 1);
                      break;
                    }
                    i3.add(e4);
                  }
                }
              }
            }
            _checkLinkProviderResult(e3, t3, i3) {
              var s3;
              if (!this._activeProviderReplies) return i3;
              const r2 = this._activeProviderReplies.get(e3);
              let n2 = false;
              for (let t4 = 0; t4 < e3; t4++) this._activeProviderReplies.has(t4) && !this._activeProviderReplies.get(t4) || (n2 = true);
              if (!n2 && r2) {
                const e4 = r2.find((e5) => this._linkAtPosition(e5.link, t3));
                e4 && (i3 = true, this._handleNewLink(e4));
              }
              if (this._activeProviderReplies.size === this._linkProviders.length && !i3) for (let e4 = 0; e4 < this._activeProviderReplies.size; e4++) {
                const r3 = null === (s3 = this._activeProviderReplies.get(e4)) || void 0 === s3 ? void 0 : s3.find((e5) => this._linkAtPosition(e5.link, t3));
                if (r3) {
                  i3 = true, this._handleNewLink(r3);
                  break;
                }
              }
              return i3;
            }
            _handleMouseDown() {
              this._mouseDownLink = this._currentLink;
            }
            _handleMouseUp(e3) {
              if (!this._element || !this._mouseService || !this._currentLink) return;
              const t3 = this._positionFromMouseEvent(e3, this._element, this._mouseService);
              t3 && this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, t3) && this._currentLink.link.activate(e3, this._currentLink.link.text);
            }
            _clearCurrentLink(e3, t3) {
              this._element && this._currentLink && this._lastMouseEvent && (!e3 || !t3 || this._currentLink.link.range.start.y >= e3 && this._currentLink.link.range.end.y <= t3) && (this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent), this._currentLink = void 0, (0, a.disposeArray)(this._linkCacheDisposables));
            }
            _handleNewLink(e3) {
              if (!this._element || !this._lastMouseEvent || !this._mouseService) return;
              const t3 = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);
              t3 && this._linkAtPosition(e3.link, t3) && (this._currentLink = e3, this._currentLink.state = {
                decorations: {
                  underline: void 0 === e3.link.decorations || e3.link.decorations.underline,
                  pointerCursor: void 0 === e3.link.decorations || e3.link.decorations.pointerCursor
                },
                isHovered: true
              }, this._linkHover(this._element, e3.link, this._lastMouseEvent), e3.link.decorations = {}, Object.defineProperties(e3.link.decorations, {
                pointerCursor: {
                  get: () => {
                    var e4, t4;
                    return null === (t4 = null === (e4 = this._currentLink) || void 0 === e4 ? void 0 : e4.state) || void 0 === t4 ? void 0 : t4.decorations.pointerCursor;
                  },
                  set: (e4) => {
                    var t4, i3;
                    (null === (t4 = this._currentLink) || void 0 === t4 ? void 0 : t4.state) && this._currentLink.state.decorations.pointerCursor !== e4 && (this._currentLink.state.decorations.pointerCursor = e4, this._currentLink.state.isHovered && (null === (i3 = this._element) || void 0 === i3 || i3.classList.toggle("xterm-cursor-pointer", e4)));
                  }
                },
                underline: {
                  get: () => {
                    var e4, t4;
                    return null === (t4 = null === (e4 = this._currentLink) || void 0 === e4 ? void 0 : e4.state) || void 0 === t4 ? void 0 : t4.decorations.underline;
                  },
                  set: (t4) => {
                    var i3, s3, r2;
                    (null === (i3 = this._currentLink) || void 0 === i3 ? void 0 : i3.state) && (null === (r2 = null === (s3 = this._currentLink) || void 0 === s3 ? void 0 : s3.state) || void 0 === r2 ? void 0 : r2.decorations.underline) !== t4 && (this._currentLink.state.decorations.underline = t4, this._currentLink.state.isHovered && this._fireUnderlineEvent(e3.link, t4));
                  }
                }
              }), this._renderService && this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((e4) => {
                if (!this._currentLink) return;
                const t4 = 0 === e4.start ? 0 : e4.start + 1 + this._bufferService.buffer.ydisp, i3 = this._bufferService.buffer.ydisp + 1 + e4.end;
                if (this._currentLink.link.range.start.y >= t4 && this._currentLink.link.range.end.y <= i3 && (this._clearCurrentLink(t4, i3), this._lastMouseEvent && this._element)) {
                  const e5 = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);
                  e5 && this._askForLink(e5, false);
                }
              })));
            }
            _linkHover(e3, t3, i3) {
              var s3;
              (null === (s3 = this._currentLink) || void 0 === s3 ? void 0 : s3.state) && (this._currentLink.state.isHovered = true, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t3, true), this._currentLink.state.decorations.pointerCursor && e3.classList.add("xterm-cursor-pointer")), t3.hover && t3.hover(i3, t3.text);
            }
            _fireUnderlineEvent(e3, t3) {
              const i3 = e3.range, s3 = this._bufferService.buffer.ydisp, r2 = this._createLinkUnderlineEvent(i3.start.x - 1, i3.start.y - s3 - 1, i3.end.x, i3.end.y - s3 - 1, void 0);
              (t3 ? this._onShowLinkUnderline : this._onHideLinkUnderline).fire(r2);
            }
            _linkLeave(e3, t3, i3) {
              var s3;
              (null === (s3 = this._currentLink) || void 0 === s3 ? void 0 : s3.state) && (this._currentLink.state.isHovered = false, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t3, false), this._currentLink.state.decorations.pointerCursor && e3.classList.remove("xterm-cursor-pointer")), t3.leave && t3.leave(i3, t3.text);
            }
            _linkAtPosition(e3, t3) {
              const i3 = e3.range.start.y * this._bufferService.cols + e3.range.start.x, s3 = e3.range.end.y * this._bufferService.cols + e3.range.end.x, r2 = t3.y * this._bufferService.cols + t3.x;
              return i3 <= r2 && r2 <= s3;
            }
            _positionFromMouseEvent(e3, t3, i3) {
              const s3 = i3.getCoords(e3, t3, this._bufferService.cols, this._bufferService.rows);
              if (s3) return {
                x: s3[0],
                y: s3[1] + this._bufferService.buffer.ydisp
              };
            }
            _createLinkUnderlineEvent(e3, t3, i3, s3, r2) {
              return {
                x1: e3,
                y1: t3,
                x2: i3,
                y2: s3,
                cols: this._bufferService.cols,
                fg: r2
              };
            }
          };
          t2.Linkifier2 = c = s2([
            r(0, h2.IBufferService)
          ], c);
        },
        9042: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.tooMuchOutput = t2.promptLabel = void 0, t2.promptLabel = "Terminal input", t2.tooMuchOutput = "Too much output to announce, navigate to rows manually to read";
        },
        3730: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.OscLinkProvider = void 0;
          const n = i2(511), o = i2(2585);
          let a = t2.OscLinkProvider = class {
            constructor(e3, t3, i3) {
              this._bufferService = e3, this._optionsService = t3, this._oscLinkService = i3;
            }
            provideLinks(e3, t3) {
              var i3;
              const s3 = this._bufferService.buffer.lines.get(e3 - 1);
              if (!s3) return void t3(void 0);
              const r2 = [], o2 = this._optionsService.rawOptions.linkHandler, a2 = new n.CellData(), c = s3.getTrimmedLength();
              let l2 = -1, d = -1, _2 = false;
              for (let t4 = 0; t4 < c; t4++) if (-1 !== d || s3.hasContent(t4)) {
                if (s3.loadCell(t4, a2), a2.hasExtendedAttrs() && a2.extended.urlId) {
                  if (-1 === d) {
                    d = t4, l2 = a2.extended.urlId;
                    continue;
                  }
                  _2 = a2.extended.urlId !== l2;
                } else -1 !== d && (_2 = true);
                if (_2 || -1 !== d && t4 === c - 1) {
                  const s4 = null === (i3 = this._oscLinkService.getLinkData(l2)) || void 0 === i3 ? void 0 : i3.uri;
                  if (s4) {
                    const i4 = {
                      start: {
                        x: d + 1,
                        y: e3
                      },
                      end: {
                        x: t4 + (_2 || t4 !== c - 1 ? 0 : 1),
                        y: e3
                      }
                    };
                    let n2 = false;
                    if (!(null == o2 ? void 0 : o2.allowNonHttpProtocols)) try {
                      const e4 = new URL(s4);
                      [
                        "http:",
                        "https:"
                      ].includes(e4.protocol) || (n2 = true);
                    } catch (e4) {
                      n2 = true;
                    }
                    n2 || r2.push({
                      text: s4,
                      range: i4,
                      activate: (e4, t5) => o2 ? o2.activate(e4, t5, i4) : h2(0, t5),
                      hover: (e4, t5) => {
                        var s5;
                        return null === (s5 = null == o2 ? void 0 : o2.hover) || void 0 === s5 ? void 0 : s5.call(o2, e4, t5, i4);
                      },
                      leave: (e4, t5) => {
                        var s5;
                        return null === (s5 = null == o2 ? void 0 : o2.leave) || void 0 === s5 ? void 0 : s5.call(o2, e4, t5, i4);
                      }
                    });
                  }
                  _2 = false, a2.hasExtendedAttrs() && a2.extended.urlId ? (d = t4, l2 = a2.extended.urlId) : (d = -1, l2 = -1);
                }
              }
              t3(r2);
            }
          };
          function h2(e3, t3) {
            if (confirm(`Do you want to navigate to ${t3}?

WARNING: This link could potentially be dangerous`)) {
              const e4 = window.open();
              if (e4) {
                try {
                  e4.opener = null;
                } catch (e5) {
                }
                e4.location.href = t3;
              } else console.warn("Opening link blocked as opener could not be cleared");
            }
          }
          t2.OscLinkProvider = a = s2([
            r(0, o.IBufferService),
            r(1, o.IOptionsService),
            r(2, o.IOscLinkService)
          ], a);
        },
        6193: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.RenderDebouncer = void 0, t2.RenderDebouncer = class {
            constructor(e3, t3) {
              this._parentWindow = e3, this._renderCallback = t3, this._refreshCallbacks = [];
            }
            dispose() {
              this._animationFrame && (this._parentWindow.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
            }
            addRefreshCallback(e3) {
              return this._refreshCallbacks.push(e3), this._animationFrame || (this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh())), this._animationFrame;
            }
            refresh(e3, t3, i2) {
              this._rowCount = i2, e3 = void 0 !== e3 ? e3 : 0, t3 = void 0 !== t3 ? t3 : this._rowCount - 1, this._rowStart = void 0 !== this._rowStart ? Math.min(this._rowStart, e3) : e3, this._rowEnd = void 0 !== this._rowEnd ? Math.max(this._rowEnd, t3) : t3, this._animationFrame || (this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh()));
            }
            _innerRefresh() {
              if (this._animationFrame = void 0, void 0 === this._rowStart || void 0 === this._rowEnd || void 0 === this._rowCount) return void this._runRefreshCallbacks();
              const e3 = Math.max(this._rowStart, 0), t3 = Math.min(this._rowEnd, this._rowCount - 1);
              this._rowStart = void 0, this._rowEnd = void 0, this._renderCallback(e3, t3), this._runRefreshCallbacks();
            }
            _runRefreshCallbacks() {
              for (const e3 of this._refreshCallbacks) e3(0);
              this._refreshCallbacks = [];
            }
          };
        },
        5596: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.ScreenDprMonitor = void 0;
          const s2 = i2(844);
          class r extends s2.Disposable {
            constructor(e3) {
              super(), this._parentWindow = e3, this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio, this.register((0, s2.toDisposable)(() => {
                this.clearListener();
              }));
            }
            setListener(e3) {
              this._listener && this.clearListener(), this._listener = e3, this._outerListener = () => {
                this._listener && (this._listener(this._parentWindow.devicePixelRatio, this._currentDevicePixelRatio), this._updateDpr());
              }, this._updateDpr();
            }
            _updateDpr() {
              var e3;
              this._outerListener && (null === (e3 = this._resolutionMediaMatchList) || void 0 === e3 || e3.removeListener(this._outerListener), this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio, this._resolutionMediaMatchList = this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`), this._resolutionMediaMatchList.addListener(this._outerListener));
            }
            clearListener() {
              this._resolutionMediaMatchList && this._listener && this._outerListener && (this._resolutionMediaMatchList.removeListener(this._outerListener), this._resolutionMediaMatchList = void 0, this._listener = void 0, this._outerListener = void 0);
            }
          }
          t2.ScreenDprMonitor = r;
        },
        3236: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.Terminal = void 0;
          const s2 = i2(3614), r = i2(3656), n = i2(6465), o = i2(9042), a = i2(3730), h2 = i2(1680), c = i2(3107), l2 = i2(5744), d = i2(2950), _2 = i2(1296), u = i2(428), f = i2(4269), v2 = i2(5114), p = i2(8934), g = i2(3230), m = i2(9312), S = i2(4725), C = i2(6731), b = i2(8055), y = i2(8969), w = i2(8460), E = i2(844), k2 = i2(6114), L = i2(8437), D2 = i2(2584), R = i2(7399), x = i2(5941), A = i2(9074), B = i2(2585), T = i2(5435), M = i2(4567), O = "undefined" != typeof window ? window.document : null;
          class P extends y.CoreTerminal {
            get onFocus() {
              return this._onFocus.event;
            }
            get onBlur() {
              return this._onBlur.event;
            }
            get onA11yChar() {
              return this._onA11yCharEmitter.event;
            }
            get onA11yTab() {
              return this._onA11yTabEmitter.event;
            }
            get onWillOpen() {
              return this._onWillOpen.event;
            }
            constructor(e3 = {}) {
              super(e3), this.browser = k2, this._keyDownHandled = false, this._keyDownSeen = false, this._keyPressHandled = false, this._unprocessedDeadKey = false, this._accessibilityManager = this.register(new E.MutableDisposable()), this._onCursorMove = this.register(new w.EventEmitter()), this.onCursorMove = this._onCursorMove.event, this._onKey = this.register(new w.EventEmitter()), this.onKey = this._onKey.event, this._onRender = this.register(new w.EventEmitter()), this.onRender = this._onRender.event, this._onSelectionChange = this.register(new w.EventEmitter()), this.onSelectionChange = this._onSelectionChange.event, this._onTitleChange = this.register(new w.EventEmitter()), this.onTitleChange = this._onTitleChange.event, this._onBell = this.register(new w.EventEmitter()), this.onBell = this._onBell.event, this._onFocus = this.register(new w.EventEmitter()), this._onBlur = this.register(new w.EventEmitter()), this._onA11yCharEmitter = this.register(new w.EventEmitter()), this._onA11yTabEmitter = this.register(new w.EventEmitter()), this._onWillOpen = this.register(new w.EventEmitter()), this._setup(), this.linkifier2 = this.register(this._instantiationService.createInstance(n.Linkifier2)), this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(a.OscLinkProvider)), this._decorationService = this._instantiationService.createInstance(A.DecorationService), this._instantiationService.setService(B.IDecorationService, this._decorationService), this.register(this._inputHandler.onRequestBell(() => this._onBell.fire())), this.register(this._inputHandler.onRequestRefreshRows((e4, t3) => this.refresh(e4, t3))), this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus())), this.register(this._inputHandler.onRequestReset(() => this.reset())), this.register(this._inputHandler.onRequestWindowsOptionsReport((e4) => this._reportWindowsOptions(e4))), this.register(this._inputHandler.onColor((e4) => this._handleColorEvent(e4))), this.register((0, w.forwardEvent)(this._inputHandler.onCursorMove, this._onCursorMove)), this.register((0, w.forwardEvent)(this._inputHandler.onTitleChange, this._onTitleChange)), this.register((0, w.forwardEvent)(this._inputHandler.onA11yChar, this._onA11yCharEmitter)), this.register((0, w.forwardEvent)(this._inputHandler.onA11yTab, this._onA11yTabEmitter)), this.register(this._bufferService.onResize((e4) => this._afterResize(e4.cols, e4.rows))), this.register((0, E.toDisposable)(() => {
                var e4, t3;
                this._customKeyEventHandler = void 0, null === (t3 = null === (e4 = this.element) || void 0 === e4 ? void 0 : e4.parentNode) || void 0 === t3 || t3.removeChild(this.element);
              }));
            }
            _handleColorEvent(e3) {
              if (this._themeService) for (const t3 of e3) {
                let e4, i3 = "";
                switch (t3.index) {
                  case 256:
                    e4 = "foreground", i3 = "10";
                    break;
                  case 257:
                    e4 = "background", i3 = "11";
                    break;
                  case 258:
                    e4 = "cursor", i3 = "12";
                    break;
                  default:
                    e4 = "ansi", i3 = "4;" + t3.index;
                }
                switch (t3.type) {
                  case 0:
                    const s3 = b.color.toColorRGB("ansi" === e4 ? this._themeService.colors.ansi[t3.index] : this._themeService.colors[e4]);
                    this.coreService.triggerDataEvent(`${D2.C0.ESC}]${i3};${(0, x.toRgbString)(s3)}${D2.C1_ESCAPED.ST}`);
                    break;
                  case 1:
                    if ("ansi" === e4) this._themeService.modifyColors((e5) => e5.ansi[t3.index] = b.rgba.toColor(...t3.color));
                    else {
                      const i4 = e4;
                      this._themeService.modifyColors((e5) => e5[i4] = b.rgba.toColor(...t3.color));
                    }
                    break;
                  case 2:
                    this._themeService.restoreColor(t3.index);
                }
              }
            }
            _setup() {
              super._setup(), this._customKeyEventHandler = void 0;
            }
            get buffer() {
              return this.buffers.active;
            }
            focus() {
              this.textarea && this.textarea.focus({
                preventScroll: true
              });
            }
            _handleScreenReaderModeOptionChange(e3) {
              e3 ? !this._accessibilityManager.value && this._renderService && (this._accessibilityManager.value = this._instantiationService.createInstance(M.AccessibilityManager, this)) : this._accessibilityManager.clear();
            }
            _handleTextAreaFocus(e3) {
              this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(D2.C0.ESC + "[I"), this.updateCursorStyle(e3), this.element.classList.add("focus"), this._showCursor(), this._onFocus.fire();
            }
            blur() {
              var e3;
              return null === (e3 = this.textarea) || void 0 === e3 ? void 0 : e3.blur();
            }
            _handleTextAreaBlur() {
              this.textarea.value = "", this.refresh(this.buffer.y, this.buffer.y), this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(D2.C0.ESC + "[O"), this.element.classList.remove("focus"), this._onBlur.fire();
            }
            _syncTextArea() {
              if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper.isComposing || !this._renderService) return;
              const e3 = this.buffer.ybase + this.buffer.y, t3 = this.buffer.lines.get(e3);
              if (!t3) return;
              const i3 = Math.min(this.buffer.x, this.cols - 1), s3 = this._renderService.dimensions.css.cell.height, r2 = t3.getWidth(i3), n2 = this._renderService.dimensions.css.cell.width * r2, o2 = this.buffer.y * this._renderService.dimensions.css.cell.height, a2 = i3 * this._renderService.dimensions.css.cell.width;
              this.textarea.style.left = a2 + "px", this.textarea.style.top = o2 + "px", this.textarea.style.width = n2 + "px", this.textarea.style.height = s3 + "px", this.textarea.style.lineHeight = s3 + "px", this.textarea.style.zIndex = "-5";
            }
            _initGlobal() {
              this._bindKeys(), this.register((0, r.addDisposableDomListener)(this.element, "copy", (e4) => {
                this.hasSelection() && (0, s2.copyHandler)(e4, this._selectionService);
              }));
              const e3 = (e4) => (0, s2.handlePasteEvent)(e4, this.textarea, this.coreService, this.optionsService);
              this.register((0, r.addDisposableDomListener)(this.textarea, "paste", e3)), this.register((0, r.addDisposableDomListener)(this.element, "paste", e3)), k2.isFirefox ? this.register((0, r.addDisposableDomListener)(this.element, "mousedown", (e4) => {
                2 === e4.button && (0, s2.rightClickHandler)(e4, this.textarea, this.screenElement, this._selectionService, this.options.rightClickSelectsWord);
              })) : this.register((0, r.addDisposableDomListener)(this.element, "contextmenu", (e4) => {
                (0, s2.rightClickHandler)(e4, this.textarea, this.screenElement, this._selectionService, this.options.rightClickSelectsWord);
              })), k2.isLinux && this.register((0, r.addDisposableDomListener)(this.element, "auxclick", (e4) => {
                1 === e4.button && (0, s2.moveTextAreaUnderMouseCursor)(e4, this.textarea, this.screenElement);
              }));
            }
            _bindKeys() {
              this.register((0, r.addDisposableDomListener)(this.textarea, "keyup", (e3) => this._keyUp(e3), true)), this.register((0, r.addDisposableDomListener)(this.textarea, "keydown", (e3) => this._keyDown(e3), true)), this.register((0, r.addDisposableDomListener)(this.textarea, "keypress", (e3) => this._keyPress(e3), true)), this.register((0, r.addDisposableDomListener)(this.textarea, "compositionstart", () => this._compositionHelper.compositionstart())), this.register((0, r.addDisposableDomListener)(this.textarea, "compositionupdate", (e3) => this._compositionHelper.compositionupdate(e3))), this.register((0, r.addDisposableDomListener)(this.textarea, "compositionend", () => this._compositionHelper.compositionend())), this.register((0, r.addDisposableDomListener)(this.textarea, "input", (e3) => this._inputEvent(e3), true)), this.register(this.onRender(() => this._compositionHelper.updateCompositionElements()));
            }
            open(e3) {
              var t3;
              if (!e3) throw new Error("Terminal requires a parent element.");
              e3.isConnected || this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"), this._document = e3.ownerDocument, this.element = this._document.createElement("div"), this.element.dir = "ltr", this.element.classList.add("terminal"), this.element.classList.add("xterm"), e3.appendChild(this.element);
              const i3 = O.createDocumentFragment();
              this._viewportElement = O.createElement("div"), this._viewportElement.classList.add("xterm-viewport"), i3.appendChild(this._viewportElement), this._viewportScrollArea = O.createElement("div"), this._viewportScrollArea.classList.add("xterm-scroll-area"), this._viewportElement.appendChild(this._viewportScrollArea), this.screenElement = O.createElement("div"), this.screenElement.classList.add("xterm-screen"), this._helperContainer = O.createElement("div"), this._helperContainer.classList.add("xterm-helpers"), this.screenElement.appendChild(this._helperContainer), i3.appendChild(this.screenElement), this.textarea = O.createElement("textarea"), this.textarea.classList.add("xterm-helper-textarea"), this.textarea.setAttribute("aria-label", o.promptLabel), k2.isChromeOS || this.textarea.setAttribute("aria-multiline", "false"), this.textarea.setAttribute("autocorrect", "off"), this.textarea.setAttribute("autocapitalize", "off"), this.textarea.setAttribute("spellcheck", "false"), this.textarea.tabIndex = 0, this._coreBrowserService = this._instantiationService.createInstance(v2.CoreBrowserService, this.textarea, null !== (t3 = this._document.defaultView) && void 0 !== t3 ? t3 : window), this._instantiationService.setService(S.ICoreBrowserService, this._coreBrowserService), this.register((0, r.addDisposableDomListener)(this.textarea, "focus", (e4) => this._handleTextAreaFocus(e4))), this.register((0, r.addDisposableDomListener)(this.textarea, "blur", () => this._handleTextAreaBlur())), this._helperContainer.appendChild(this.textarea), this._charSizeService = this._instantiationService.createInstance(u.CharSizeService, this._document, this._helperContainer), this._instantiationService.setService(S.ICharSizeService, this._charSizeService), this._themeService = this._instantiationService.createInstance(C.ThemeService), this._instantiationService.setService(S.IThemeService, this._themeService), this._characterJoinerService = this._instantiationService.createInstance(f.CharacterJoinerService), this._instantiationService.setService(S.ICharacterJoinerService, this._characterJoinerService), this._renderService = this.register(this._instantiationService.createInstance(g.RenderService, this.rows, this.screenElement)), this._instantiationService.setService(S.IRenderService, this._renderService), this.register(this._renderService.onRenderedViewportChange((e4) => this._onRender.fire(e4))), this.onResize((e4) => this._renderService.resize(e4.cols, e4.rows)), this._compositionView = O.createElement("div"), this._compositionView.classList.add("composition-view"), this._compositionHelper = this._instantiationService.createInstance(d.CompositionHelper, this.textarea, this._compositionView), this._helperContainer.appendChild(this._compositionView), this.element.appendChild(i3);
              try {
                this._onWillOpen.fire(this.element);
              } catch (e4) {
              }
              this._renderService.hasRenderer() || this._renderService.setRenderer(this._createRenderer()), this._mouseService = this._instantiationService.createInstance(p.MouseService), this._instantiationService.setService(S.IMouseService, this._mouseService), this.viewport = this._instantiationService.createInstance(h2.Viewport, this._viewportElement, this._viewportScrollArea), this.viewport.onRequestScrollLines((e4) => this.scrollLines(e4.amount, e4.suppressScrollEvent, 1)), this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport.syncScrollArea())), this.register(this.viewport), this.register(this.onCursorMove(() => {
                this._renderService.handleCursorMove(), this._syncTextArea();
              })), this.register(this.onResize(() => this._renderService.handleResize(this.cols, this.rows))), this.register(this.onBlur(() => this._renderService.handleBlur())), this.register(this.onFocus(() => this._renderService.handleFocus())), this.register(this._renderService.onDimensionsChange(() => this.viewport.syncScrollArea())), this._selectionService = this.register(this._instantiationService.createInstance(m.SelectionService, this.element, this.screenElement, this.linkifier2)), this._instantiationService.setService(S.ISelectionService, this._selectionService), this.register(this._selectionService.onRequestScrollLines((e4) => this.scrollLines(e4.amount, e4.suppressScrollEvent))), this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire())), this.register(this._selectionService.onRequestRedraw((e4) => this._renderService.handleSelectionChanged(e4.start, e4.end, e4.columnSelectMode))), this.register(this._selectionService.onLinuxMouseSelection((e4) => {
                this.textarea.value = e4, this.textarea.focus(), this.textarea.select();
              })), this.register(this._onScroll.event((e4) => {
                this.viewport.syncScrollArea(), this._selectionService.refresh();
              })), this.register((0, r.addDisposableDomListener)(this._viewportElement, "scroll", () => this._selectionService.refresh())), this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService), this.register(this._instantiationService.createInstance(c.BufferDecorationRenderer, this.screenElement)), this.register((0, r.addDisposableDomListener)(this.element, "mousedown", (e4) => this._selectionService.handleMouseDown(e4))), this.coreMouseService.areMouseEventsActive ? (this._selectionService.disable(), this.element.classList.add("enable-mouse-events")) : this._selectionService.enable(), this.options.screenReaderMode && (this._accessibilityManager.value = this._instantiationService.createInstance(M.AccessibilityManager, this)), this.register(this.optionsService.onSpecificOptionChange("screenReaderMode", (e4) => this._handleScreenReaderModeOptionChange(e4))), this.options.overviewRulerWidth && (this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(l2.OverviewRulerRenderer, this._viewportElement, this.screenElement))), this.optionsService.onSpecificOptionChange("overviewRulerWidth", (e4) => {
                !this._overviewRulerRenderer && e4 && this._viewportElement && this.screenElement && (this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(l2.OverviewRulerRenderer, this._viewportElement, this.screenElement)));
              }), this._charSizeService.measure(), this.refresh(0, this.rows - 1), this._initGlobal(), this.bindMouse();
            }
            _createRenderer() {
              return this._instantiationService.createInstance(_2.DomRenderer, this.element, this.screenElement, this._viewportElement, this.linkifier2);
            }
            bindMouse() {
              const e3 = this, t3 = this.element;
              function i3(t4) {
                const i4 = e3._mouseService.getMouseReportCoords(t4, e3.screenElement);
                if (!i4) return false;
                let s4, r2;
                switch (t4.overrideType || t4.type) {
                  case "mousemove":
                    r2 = 32, void 0 === t4.buttons ? (s4 = 3, void 0 !== t4.button && (s4 = t4.button < 3 ? t4.button : 3)) : s4 = 1 & t4.buttons ? 0 : 4 & t4.buttons ? 1 : 2 & t4.buttons ? 2 : 3;
                    break;
                  case "mouseup":
                    r2 = 0, s4 = t4.button < 3 ? t4.button : 3;
                    break;
                  case "mousedown":
                    r2 = 1, s4 = t4.button < 3 ? t4.button : 3;
                    break;
                  case "wheel":
                    if (0 === e3.viewport.getLinesScrolled(t4)) return false;
                    r2 = t4.deltaY < 0 ? 0 : 1, s4 = 4;
                    break;
                  default:
                    return false;
                }
                return !(void 0 === r2 || void 0 === s4 || s4 > 4) && e3.coreMouseService.triggerMouseEvent({
                  col: i4.col,
                  row: i4.row,
                  x: i4.x,
                  y: i4.y,
                  button: s4,
                  action: r2,
                  ctrl: t4.ctrlKey,
                  alt: t4.altKey,
                  shift: t4.shiftKey
                });
              }
              const s3 = {
                mouseup: null,
                wheel: null,
                mousedrag: null,
                mousemove: null
              }, n2 = {
                mouseup: (e4) => (i3(e4), e4.buttons || (this._document.removeEventListener("mouseup", s3.mouseup), s3.mousedrag && this._document.removeEventListener("mousemove", s3.mousedrag)), this.cancel(e4)),
                wheel: (e4) => (i3(e4), this.cancel(e4, true)),
                mousedrag: (e4) => {
                  e4.buttons && i3(e4);
                },
                mousemove: (e4) => {
                  e4.buttons || i3(e4);
                }
              };
              this.register(this.coreMouseService.onProtocolChange((e4) => {
                e4 ? ("debug" === this.optionsService.rawOptions.logLevel && this._logService.debug("Binding to mouse events:", this.coreMouseService.explainEvents(e4)), this.element.classList.add("enable-mouse-events"), this._selectionService.disable()) : (this._logService.debug("Unbinding from mouse events."), this.element.classList.remove("enable-mouse-events"), this._selectionService.enable()), 8 & e4 ? s3.mousemove || (t3.addEventListener("mousemove", n2.mousemove), s3.mousemove = n2.mousemove) : (t3.removeEventListener("mousemove", s3.mousemove), s3.mousemove = null), 16 & e4 ? s3.wheel || (t3.addEventListener("wheel", n2.wheel, {
                  passive: false
                }), s3.wheel = n2.wheel) : (t3.removeEventListener("wheel", s3.wheel), s3.wheel = null), 2 & e4 ? s3.mouseup || (t3.addEventListener("mouseup", n2.mouseup), s3.mouseup = n2.mouseup) : (this._document.removeEventListener("mouseup", s3.mouseup), t3.removeEventListener("mouseup", s3.mouseup), s3.mouseup = null), 4 & e4 ? s3.mousedrag || (s3.mousedrag = n2.mousedrag) : (this._document.removeEventListener("mousemove", s3.mousedrag), s3.mousedrag = null);
              })), this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol, this.register((0, r.addDisposableDomListener)(t3, "mousedown", (e4) => {
                if (e4.preventDefault(), this.focus(), this.coreMouseService.areMouseEventsActive && !this._selectionService.shouldForceSelection(e4)) return i3(e4), s3.mouseup && this._document.addEventListener("mouseup", s3.mouseup), s3.mousedrag && this._document.addEventListener("mousemove", s3.mousedrag), this.cancel(e4);
              })), this.register((0, r.addDisposableDomListener)(t3, "wheel", (e4) => {
                if (!s3.wheel) {
                  if (!this.buffer.hasScrollback) {
                    const t4 = this.viewport.getLinesScrolled(e4);
                    if (0 === t4) return;
                    const i4 = D2.C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? "O" : "[") + (e4.deltaY < 0 ? "A" : "B");
                    let s4 = "";
                    for (let e5 = 0; e5 < Math.abs(t4); e5++) s4 += i4;
                    return this.coreService.triggerDataEvent(s4, true), this.cancel(e4, true);
                  }
                  return this.viewport.handleWheel(e4) ? this.cancel(e4) : void 0;
                }
              }, {
                passive: false
              })), this.register((0, r.addDisposableDomListener)(t3, "touchstart", (e4) => {
                if (!this.coreMouseService.areMouseEventsActive) return this.viewport.handleTouchStart(e4), this.cancel(e4);
              }, {
                passive: true
              })), this.register((0, r.addDisposableDomListener)(t3, "touchmove", (e4) => {
                if (!this.coreMouseService.areMouseEventsActive) return this.viewport.handleTouchMove(e4) ? void 0 : this.cancel(e4);
              }, {
                passive: false
              }));
            }
            refresh(e3, t3) {
              var i3;
              null === (i3 = this._renderService) || void 0 === i3 || i3.refreshRows(e3, t3);
            }
            updateCursorStyle(e3) {
              var t3;
              (null === (t3 = this._selectionService) || void 0 === t3 ? void 0 : t3.shouldColumnSelect(e3)) ? this.element.classList.add("column-select") : this.element.classList.remove("column-select");
            }
            _showCursor() {
              this.coreService.isCursorInitialized || (this.coreService.isCursorInitialized = true, this.refresh(this.buffer.y, this.buffer.y));
            }
            scrollLines(e3, t3, i3 = 0) {
              var s3;
              1 === i3 ? (super.scrollLines(e3, t3, i3), this.refresh(0, this.rows - 1)) : null === (s3 = this.viewport) || void 0 === s3 || s3.scrollLines(e3);
            }
            paste(e3) {
              (0, s2.paste)(e3, this.textarea, this.coreService, this.optionsService);
            }
            attachCustomKeyEventHandler(e3) {
              this._customKeyEventHandler = e3;
            }
            registerLinkProvider(e3) {
              return this.linkifier2.registerLinkProvider(e3);
            }
            registerCharacterJoiner(e3) {
              if (!this._characterJoinerService) throw new Error("Terminal must be opened first");
              const t3 = this._characterJoinerService.register(e3);
              return this.refresh(0, this.rows - 1), t3;
            }
            deregisterCharacterJoiner(e3) {
              if (!this._characterJoinerService) throw new Error("Terminal must be opened first");
              this._characterJoinerService.deregister(e3) && this.refresh(0, this.rows - 1);
            }
            get markers() {
              return this.buffer.markers;
            }
            registerMarker(e3) {
              return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + e3);
            }
            registerDecoration(e3) {
              return this._decorationService.registerDecoration(e3);
            }
            hasSelection() {
              return !!this._selectionService && this._selectionService.hasSelection;
            }
            select(e3, t3, i3) {
              this._selectionService.setSelection(e3, t3, i3);
            }
            getSelection() {
              return this._selectionService ? this._selectionService.selectionText : "";
            }
            getSelectionPosition() {
              if (this._selectionService && this._selectionService.hasSelection) return {
                start: {
                  x: this._selectionService.selectionStart[0],
                  y: this._selectionService.selectionStart[1]
                },
                end: {
                  x: this._selectionService.selectionEnd[0],
                  y: this._selectionService.selectionEnd[1]
                }
              };
            }
            clearSelection() {
              var e3;
              null === (e3 = this._selectionService) || void 0 === e3 || e3.clearSelection();
            }
            selectAll() {
              var e3;
              null === (e3 = this._selectionService) || void 0 === e3 || e3.selectAll();
            }
            selectLines(e3, t3) {
              var i3;
              null === (i3 = this._selectionService) || void 0 === i3 || i3.selectLines(e3, t3);
            }
            _keyDown(e3) {
              if (this._keyDownHandled = false, this._keyDownSeen = true, this._customKeyEventHandler && false === this._customKeyEventHandler(e3)) return false;
              const t3 = this.browser.isMac && this.options.macOptionIsMeta && e3.altKey;
              if (!t3 && !this._compositionHelper.keydown(e3)) return this.options.scrollOnUserInput && this.buffer.ybase !== this.buffer.ydisp && this.scrollToBottom(), false;
              t3 || "Dead" !== e3.key && "AltGraph" !== e3.key || (this._unprocessedDeadKey = true);
              const i3 = (0, R.evaluateKeyboardEvent)(e3, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);
              if (this.updateCursorStyle(e3), 3 === i3.type || 2 === i3.type) {
                const t4 = this.rows - 1;
                return this.scrollLines(2 === i3.type ? -t4 : t4), this.cancel(e3, true);
              }
              return 1 === i3.type && this.selectAll(), !!this._isThirdLevelShift(this.browser, e3) || (i3.cancel && this.cancel(e3, true), !i3.key || !!(e3.key && !e3.ctrlKey && !e3.altKey && !e3.metaKey && 1 === e3.key.length && e3.key.charCodeAt(0) >= 65 && e3.key.charCodeAt(0) <= 90) || (this._unprocessedDeadKey ? (this._unprocessedDeadKey = false, true) : (i3.key !== D2.C0.ETX && i3.key !== D2.C0.CR || (this.textarea.value = ""), this._onKey.fire({
                key: i3.key,
                domEvent: e3
              }), this._showCursor(), this.coreService.triggerDataEvent(i3.key, true), !this.optionsService.rawOptions.screenReaderMode || e3.altKey || e3.ctrlKey ? this.cancel(e3, true) : void (this._keyDownHandled = true))));
            }
            _isThirdLevelShift(e3, t3) {
              const i3 = e3.isMac && !this.options.macOptionIsMeta && t3.altKey && !t3.ctrlKey && !t3.metaKey || e3.isWindows && t3.altKey && t3.ctrlKey && !t3.metaKey || e3.isWindows && t3.getModifierState("AltGraph");
              return "keypress" === t3.type ? i3 : i3 && (!t3.keyCode || t3.keyCode > 47);
            }
            _keyUp(e3) {
              this._keyDownSeen = false, this._customKeyEventHandler && false === this._customKeyEventHandler(e3) || (function(e4) {
                return 16 === e4.keyCode || 17 === e4.keyCode || 18 === e4.keyCode;
              }(e3) || this.focus(), this.updateCursorStyle(e3), this._keyPressHandled = false);
            }
            _keyPress(e3) {
              let t3;
              if (this._keyPressHandled = false, this._keyDownHandled) return false;
              if (this._customKeyEventHandler && false === this._customKeyEventHandler(e3)) return false;
              if (this.cancel(e3), e3.charCode) t3 = e3.charCode;
              else if (null === e3.which || void 0 === e3.which) t3 = e3.keyCode;
              else {
                if (0 === e3.which || 0 === e3.charCode) return false;
                t3 = e3.which;
              }
              return !(!t3 || (e3.altKey || e3.ctrlKey || e3.metaKey) && !this._isThirdLevelShift(this.browser, e3) || (t3 = String.fromCharCode(t3), this._onKey.fire({
                key: t3,
                domEvent: e3
              }), this._showCursor(), this.coreService.triggerDataEvent(t3, true), this._keyPressHandled = true, this._unprocessedDeadKey = false, 0));
            }
            _inputEvent(e3) {
              if (e3.data && "insertText" === e3.inputType && (!e3.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {
                if (this._keyPressHandled) return false;
                this._unprocessedDeadKey = false;
                const t3 = e3.data;
                return this.coreService.triggerDataEvent(t3, true), this.cancel(e3), true;
              }
              return false;
            }
            resize(e3, t3) {
              e3 !== this.cols || t3 !== this.rows ? super.resize(e3, t3) : this._charSizeService && !this._charSizeService.hasValidSize && this._charSizeService.measure();
            }
            _afterResize(e3, t3) {
              var i3, s3;
              null === (i3 = this._charSizeService) || void 0 === i3 || i3.measure(), null === (s3 = this.viewport) || void 0 === s3 || s3.syncScrollArea(true);
            }
            clear() {
              var e3;
              if (0 !== this.buffer.ybase || 0 !== this.buffer.y) {
                this.buffer.clearAllMarkers(), this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)), this.buffer.lines.length = 1, this.buffer.ydisp = 0, this.buffer.ybase = 0, this.buffer.y = 0;
                for (let e4 = 1; e4 < this.rows; e4++) this.buffer.lines.push(this.buffer.getBlankLine(L.DEFAULT_ATTR_DATA));
                this._onScroll.fire({
                  position: this.buffer.ydisp,
                  source: 0
                }), null === (e3 = this.viewport) || void 0 === e3 || e3.reset(), this.refresh(0, this.rows - 1);
              }
            }
            reset() {
              var e3, t3;
              this.options.rows = this.rows, this.options.cols = this.cols;
              const i3 = this._customKeyEventHandler;
              this._setup(), super.reset(), null === (e3 = this._selectionService) || void 0 === e3 || e3.reset(), this._decorationService.reset(), null === (t3 = this.viewport) || void 0 === t3 || t3.reset(), this._customKeyEventHandler = i3, this.refresh(0, this.rows - 1);
            }
            clearTextureAtlas() {
              var e3;
              null === (e3 = this._renderService) || void 0 === e3 || e3.clearTextureAtlas();
            }
            _reportFocus() {
              var e3;
              (null === (e3 = this.element) || void 0 === e3 ? void 0 : e3.classList.contains("focus")) ? this.coreService.triggerDataEvent(D2.C0.ESC + "[I") : this.coreService.triggerDataEvent(D2.C0.ESC + "[O");
            }
            _reportWindowsOptions(e3) {
              if (this._renderService) switch (e3) {
                case T.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:
                  const e4 = this._renderService.dimensions.css.canvas.width.toFixed(0), t3 = this._renderService.dimensions.css.canvas.height.toFixed(0);
                  this.coreService.triggerDataEvent(`${D2.C0.ESC}[4;${t3};${e4}t`);
                  break;
                case T.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:
                  const i3 = this._renderService.dimensions.css.cell.width.toFixed(0), s3 = this._renderService.dimensions.css.cell.height.toFixed(0);
                  this.coreService.triggerDataEvent(`${D2.C0.ESC}[6;${s3};${i3}t`);
              }
            }
            cancel(e3, t3) {
              if (this.options.cancelEvents || t3) return e3.preventDefault(), e3.stopPropagation(), false;
            }
          }
          t2.Terminal = P;
        },
        9924: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.TimeBasedDebouncer = void 0, t2.TimeBasedDebouncer = class {
            constructor(e3, t3 = 1e3) {
              this._renderCallback = e3, this._debounceThresholdMS = t3, this._lastRefreshMs = 0, this._additionalRefreshRequested = false;
            }
            dispose() {
              this._refreshTimeoutID && clearTimeout(this._refreshTimeoutID);
            }
            refresh(e3, t3, i2) {
              this._rowCount = i2, e3 = void 0 !== e3 ? e3 : 0, t3 = void 0 !== t3 ? t3 : this._rowCount - 1, this._rowStart = void 0 !== this._rowStart ? Math.min(this._rowStart, e3) : e3, this._rowEnd = void 0 !== this._rowEnd ? Math.max(this._rowEnd, t3) : t3;
              const s2 = Date.now();
              if (s2 - this._lastRefreshMs >= this._debounceThresholdMS) this._lastRefreshMs = s2, this._innerRefresh();
              else if (!this._additionalRefreshRequested) {
                const e4 = s2 - this._lastRefreshMs, t4 = this._debounceThresholdMS - e4;
                this._additionalRefreshRequested = true, this._refreshTimeoutID = window.setTimeout(() => {
                  this._lastRefreshMs = Date.now(), this._innerRefresh(), this._additionalRefreshRequested = false, this._refreshTimeoutID = void 0;
                }, t4);
              }
            }
            _innerRefresh() {
              if (void 0 === this._rowStart || void 0 === this._rowEnd || void 0 === this._rowCount) return;
              const e3 = Math.max(this._rowStart, 0), t3 = Math.min(this._rowEnd, this._rowCount - 1);
              this._rowStart = void 0, this._rowEnd = void 0, this._renderCallback(e3, t3);
            }
          };
        },
        1680: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.Viewport = void 0;
          const n = i2(3656), o = i2(4725), a = i2(8460), h2 = i2(844), c = i2(2585);
          let l2 = t2.Viewport = class extends h2.Disposable {
            constructor(e3, t3, i3, s3, r2, o2, h3, c2) {
              super(), this._viewportElement = e3, this._scrollArea = t3, this._bufferService = i3, this._optionsService = s3, this._charSizeService = r2, this._renderService = o2, this._coreBrowserService = h3, this.scrollBarWidth = 0, this._currentRowHeight = 0, this._currentDeviceCellHeight = 0, this._lastRecordedBufferLength = 0, this._lastRecordedViewportHeight = 0, this._lastRecordedBufferHeight = 0, this._lastTouchY = 0, this._lastScrollTop = 0, this._wheelPartialScroll = 0, this._refreshAnimationFrame = null, this._ignoreNextScrollEvent = false, this._smoothScrollState = {
                startTime: 0,
                origin: -1,
                target: -1
              }, this._onRequestScrollLines = this.register(new a.EventEmitter()), this.onRequestScrollLines = this._onRequestScrollLines.event, this.scrollBarWidth = this._viewportElement.offsetWidth - this._scrollArea.offsetWidth || 15, this.register((0, n.addDisposableDomListener)(this._viewportElement, "scroll", this._handleScroll.bind(this))), this._activeBuffer = this._bufferService.buffer, this.register(this._bufferService.buffers.onBufferActivate((e4) => this._activeBuffer = e4.activeBuffer)), this._renderDimensions = this._renderService.dimensions, this.register(this._renderService.onDimensionsChange((e4) => this._renderDimensions = e4)), this._handleThemeChange(c2.colors), this.register(c2.onChangeColors((e4) => this._handleThemeChange(e4))), this.register(this._optionsService.onSpecificOptionChange("scrollback", () => this.syncScrollArea())), setTimeout(() => this.syncScrollArea());
            }
            _handleThemeChange(e3) {
              this._viewportElement.style.backgroundColor = e3.background.css;
            }
            reset() {
              this._currentRowHeight = 0, this._currentDeviceCellHeight = 0, this._lastRecordedBufferLength = 0, this._lastRecordedViewportHeight = 0, this._lastRecordedBufferHeight = 0, this._lastTouchY = 0, this._lastScrollTop = 0, this._coreBrowserService.window.requestAnimationFrame(() => this.syncScrollArea());
            }
            _refresh(e3) {
              if (e3) return this._innerRefresh(), void (null !== this._refreshAnimationFrame && this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame));
              null === this._refreshAnimationFrame && (this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh()));
            }
            _innerRefresh() {
              if (this._charSizeService.height > 0) {
                this._currentRowHeight = this._renderService.dimensions.device.cell.height / this._coreBrowserService.dpr, this._currentDeviceCellHeight = this._renderService.dimensions.device.cell.height, this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;
                const e4 = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.css.canvas.height);
                this._lastRecordedBufferHeight !== e4 && (this._lastRecordedBufferHeight = e4, this._scrollArea.style.height = this._lastRecordedBufferHeight + "px");
              }
              const e3 = this._bufferService.buffer.ydisp * this._currentRowHeight;
              this._viewportElement.scrollTop !== e3 && (this._ignoreNextScrollEvent = true, this._viewportElement.scrollTop = e3), this._refreshAnimationFrame = null;
            }
            syncScrollArea(e3 = false) {
              if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) return this._lastRecordedBufferLength = this._bufferService.buffer.lines.length, void this._refresh(e3);
              this._lastRecordedViewportHeight === this._renderService.dimensions.css.canvas.height && this._lastScrollTop === this._activeBuffer.ydisp * this._currentRowHeight && this._renderDimensions.device.cell.height === this._currentDeviceCellHeight || this._refresh(e3);
            }
            _handleScroll(e3) {
              if (this._lastScrollTop = this._viewportElement.scrollTop, !this._viewportElement.offsetParent) return;
              if (this._ignoreNextScrollEvent) return this._ignoreNextScrollEvent = false, void this._onRequestScrollLines.fire({
                amount: 0,
                suppressScrollEvent: true
              });
              const t3 = Math.round(this._lastScrollTop / this._currentRowHeight) - this._bufferService.buffer.ydisp;
              this._onRequestScrollLines.fire({
                amount: t3,
                suppressScrollEvent: true
              });
            }
            _smoothScroll() {
              if (this._isDisposed || -1 === this._smoothScrollState.origin || -1 === this._smoothScrollState.target) return;
              const e3 = this._smoothScrollPercent();
              this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(e3 * (this._smoothScrollState.target - this._smoothScrollState.origin)), e3 < 1 ? this._coreBrowserService.window.requestAnimationFrame(() => this._smoothScroll()) : this._clearSmoothScrollState();
            }
            _smoothScrollPercent() {
              return this._optionsService.rawOptions.smoothScrollDuration && this._smoothScrollState.startTime ? Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0) : 1;
            }
            _clearSmoothScrollState() {
              this._smoothScrollState.startTime = 0, this._smoothScrollState.origin = -1, this._smoothScrollState.target = -1;
            }
            _bubbleScroll(e3, t3) {
              const i3 = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;
              return !(t3 < 0 && 0 !== this._viewportElement.scrollTop || t3 > 0 && i3 < this._lastRecordedBufferHeight) || (e3.cancelable && e3.preventDefault(), false);
            }
            handleWheel(e3) {
              const t3 = this._getPixelsScrolled(e3);
              return 0 !== t3 && (this._optionsService.rawOptions.smoothScrollDuration ? (this._smoothScrollState.startTime = Date.now(), this._smoothScrollPercent() < 1 ? (this._smoothScrollState.origin = this._viewportElement.scrollTop, -1 === this._smoothScrollState.target ? this._smoothScrollState.target = this._viewportElement.scrollTop + t3 : this._smoothScrollState.target += t3, this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0), this._smoothScroll()) : this._clearSmoothScrollState()) : this._viewportElement.scrollTop += t3, this._bubbleScroll(e3, t3));
            }
            scrollLines(e3) {
              if (0 !== e3) if (this._optionsService.rawOptions.smoothScrollDuration) {
                const t3 = e3 * this._currentRowHeight;
                this._smoothScrollState.startTime = Date.now(), this._smoothScrollPercent() < 1 ? (this._smoothScrollState.origin = this._viewportElement.scrollTop, this._smoothScrollState.target = this._smoothScrollState.origin + t3, this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0), this._smoothScroll()) : this._clearSmoothScrollState();
              } else this._onRequestScrollLines.fire({
                amount: e3,
                suppressScrollEvent: false
              });
            }
            _getPixelsScrolled(e3) {
              if (0 === e3.deltaY || e3.shiftKey) return 0;
              let t3 = this._applyScrollModifier(e3.deltaY, e3);
              return e3.deltaMode === WheelEvent.DOM_DELTA_LINE ? t3 *= this._currentRowHeight : e3.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t3 *= this._currentRowHeight * this._bufferService.rows), t3;
            }
            getBufferElements(e3, t3) {
              var i3;
              let s3, r2 = "";
              const n2 = [], o2 = null != t3 ? t3 : this._bufferService.buffer.lines.length, a2 = this._bufferService.buffer.lines;
              for (let t4 = e3; t4 < o2; t4++) {
                const e4 = a2.get(t4);
                if (!e4) continue;
                const o3 = null === (i3 = a2.get(t4 + 1)) || void 0 === i3 ? void 0 : i3.isWrapped;
                if (r2 += e4.translateToString(!o3), !o3 || t4 === a2.length - 1) {
                  const e5 = document.createElement("div");
                  e5.textContent = r2, n2.push(e5), r2.length > 0 && (s3 = e5), r2 = "";
                }
              }
              return {
                bufferElements: n2,
                cursorElement: s3
              };
            }
            getLinesScrolled(e3) {
              if (0 === e3.deltaY || e3.shiftKey) return 0;
              let t3 = this._applyScrollModifier(e3.deltaY, e3);
              return e3.deltaMode === WheelEvent.DOM_DELTA_PIXEL ? (t3 /= this._currentRowHeight + 0, this._wheelPartialScroll += t3, t3 = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1), this._wheelPartialScroll %= 1) : e3.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t3 *= this._bufferService.rows), t3;
            }
            _applyScrollModifier(e3, t3) {
              const i3 = this._optionsService.rawOptions.fastScrollModifier;
              return "alt" === i3 && t3.altKey || "ctrl" === i3 && t3.ctrlKey || "shift" === i3 && t3.shiftKey ? e3 * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity : e3 * this._optionsService.rawOptions.scrollSensitivity;
            }
            handleTouchStart(e3) {
              this._lastTouchY = e3.touches[0].pageY;
            }
            handleTouchMove(e3) {
              const t3 = this._lastTouchY - e3.touches[0].pageY;
              return this._lastTouchY = e3.touches[0].pageY, 0 !== t3 && (this._viewportElement.scrollTop += t3, this._bubbleScroll(e3, t3));
            }
          };
          t2.Viewport = l2 = s2([
            r(2, c.IBufferService),
            r(3, c.IOptionsService),
            r(4, o.ICharSizeService),
            r(5, o.IRenderService),
            r(6, o.ICoreBrowserService),
            r(7, o.IThemeService)
          ], l2);
        },
        3107: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.BufferDecorationRenderer = void 0;
          const n = i2(3656), o = i2(4725), a = i2(844), h2 = i2(2585);
          let c = t2.BufferDecorationRenderer = class extends a.Disposable {
            constructor(e3, t3, i3, s3) {
              super(), this._screenElement = e3, this._bufferService = t3, this._decorationService = i3, this._renderService = s3, this._decorationElements = /* @__PURE__ */ new Map(), this._altBufferIsActive = false, this._dimensionsChanged = false, this._container = document.createElement("div"), this._container.classList.add("xterm-decoration-container"), this._screenElement.appendChild(this._container), this.register(this._renderService.onRenderedViewportChange(() => this._doRefreshDecorations())), this.register(this._renderService.onDimensionsChange(() => {
                this._dimensionsChanged = true, this._queueRefresh();
              })), this.register((0, n.addDisposableDomListener)(window, "resize", () => this._queueRefresh())), this.register(this._bufferService.buffers.onBufferActivate(() => {
                this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;
              })), this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh())), this.register(this._decorationService.onDecorationRemoved((e4) => this._removeDecoration(e4))), this.register((0, a.toDisposable)(() => {
                this._container.remove(), this._decorationElements.clear();
              }));
            }
            _queueRefresh() {
              void 0 === this._animationFrame && (this._animationFrame = this._renderService.addRefreshCallback(() => {
                this._doRefreshDecorations(), this._animationFrame = void 0;
              }));
            }
            _doRefreshDecorations() {
              for (const e3 of this._decorationService.decorations) this._renderDecoration(e3);
              this._dimensionsChanged = false;
            }
            _renderDecoration(e3) {
              this._refreshStyle(e3), this._dimensionsChanged && this._refreshXPosition(e3);
            }
            _createElement(e3) {
              var t3, i3;
              const s3 = document.createElement("div");
              s3.classList.add("xterm-decoration"), s3.classList.toggle("xterm-decoration-top-layer", "top" === (null === (t3 = null == e3 ? void 0 : e3.options) || void 0 === t3 ? void 0 : t3.layer)), s3.style.width = `${Math.round((e3.options.width || 1) * this._renderService.dimensions.css.cell.width)}px`, s3.style.height = (e3.options.height || 1) * this._renderService.dimensions.css.cell.height + "px", s3.style.top = (e3.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.css.cell.height + "px", s3.style.lineHeight = `${this._renderService.dimensions.css.cell.height}px`;
              const r2 = null !== (i3 = e3.options.x) && void 0 !== i3 ? i3 : 0;
              return r2 && r2 > this._bufferService.cols && (s3.style.display = "none"), this._refreshXPosition(e3, s3), s3;
            }
            _refreshStyle(e3) {
              const t3 = e3.marker.line - this._bufferService.buffers.active.ydisp;
              if (t3 < 0 || t3 >= this._bufferService.rows) e3.element && (e3.element.style.display = "none", e3.onRenderEmitter.fire(e3.element));
              else {
                let i3 = this._decorationElements.get(e3);
                i3 || (i3 = this._createElement(e3), e3.element = i3, this._decorationElements.set(e3, i3), this._container.appendChild(i3), e3.onDispose(() => {
                  this._decorationElements.delete(e3), i3.remove();
                })), i3.style.top = t3 * this._renderService.dimensions.css.cell.height + "px", i3.style.display = this._altBufferIsActive ? "none" : "block", e3.onRenderEmitter.fire(i3);
              }
            }
            _refreshXPosition(e3, t3 = e3.element) {
              var i3;
              if (!t3) return;
              const s3 = null !== (i3 = e3.options.x) && void 0 !== i3 ? i3 : 0;
              "right" === (e3.options.anchor || "left") ? t3.style.right = s3 ? s3 * this._renderService.dimensions.css.cell.width + "px" : "" : t3.style.left = s3 ? s3 * this._renderService.dimensions.css.cell.width + "px" : "";
            }
            _removeDecoration(e3) {
              var t3;
              null === (t3 = this._decorationElements.get(e3)) || void 0 === t3 || t3.remove(), this._decorationElements.delete(e3), e3.dispose();
            }
          };
          t2.BufferDecorationRenderer = c = s2([
            r(1, h2.IBufferService),
            r(2, h2.IDecorationService),
            r(3, o.IRenderService)
          ], c);
        },
        5871: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.ColorZoneStore = void 0, t2.ColorZoneStore = class {
            constructor() {
              this._zones = [], this._zonePool = [], this._zonePoolIndex = 0, this._linePadding = {
                full: 0,
                left: 0,
                center: 0,
                right: 0
              };
            }
            get zones() {
              return this._zonePool.length = Math.min(this._zonePool.length, this._zones.length), this._zones;
            }
            clear() {
              this._zones.length = 0, this._zonePoolIndex = 0;
            }
            addDecoration(e3) {
              if (e3.options.overviewRulerOptions) {
                for (const t3 of this._zones) if (t3.color === e3.options.overviewRulerOptions.color && t3.position === e3.options.overviewRulerOptions.position) {
                  if (this._lineIntersectsZone(t3, e3.marker.line)) return;
                  if (this._lineAdjacentToZone(t3, e3.marker.line, e3.options.overviewRulerOptions.position)) return void this._addLineToZone(t3, e3.marker.line);
                }
                if (this._zonePoolIndex < this._zonePool.length) return this._zonePool[this._zonePoolIndex].color = e3.options.overviewRulerOptions.color, this._zonePool[this._zonePoolIndex].position = e3.options.overviewRulerOptions.position, this._zonePool[this._zonePoolIndex].startBufferLine = e3.marker.line, this._zonePool[this._zonePoolIndex].endBufferLine = e3.marker.line, void this._zones.push(this._zonePool[this._zonePoolIndex++]);
                this._zones.push({
                  color: e3.options.overviewRulerOptions.color,
                  position: e3.options.overviewRulerOptions.position,
                  startBufferLine: e3.marker.line,
                  endBufferLine: e3.marker.line
                }), this._zonePool.push(this._zones[this._zones.length - 1]), this._zonePoolIndex++;
              }
            }
            setPadding(e3) {
              this._linePadding = e3;
            }
            _lineIntersectsZone(e3, t3) {
              return t3 >= e3.startBufferLine && t3 <= e3.endBufferLine;
            }
            _lineAdjacentToZone(e3, t3, i2) {
              return t3 >= e3.startBufferLine - this._linePadding[i2 || "full"] && t3 <= e3.endBufferLine + this._linePadding[i2 || "full"];
            }
            _addLineToZone(e3, t3) {
              e3.startBufferLine = Math.min(e3.startBufferLine, t3), e3.endBufferLine = Math.max(e3.endBufferLine, t3);
            }
          };
        },
        5744: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.OverviewRulerRenderer = void 0;
          const n = i2(5871), o = i2(3656), a = i2(4725), h2 = i2(844), c = i2(2585), l2 = {
            full: 0,
            left: 0,
            center: 0,
            right: 0
          }, d = {
            full: 0,
            left: 0,
            center: 0,
            right: 0
          }, _2 = {
            full: 0,
            left: 0,
            center: 0,
            right: 0
          };
          let u = t2.OverviewRulerRenderer = class extends h2.Disposable {
            get _width() {
              return this._optionsService.options.overviewRulerWidth || 0;
            }
            constructor(e3, t3, i3, s3, r2, o2, a2) {
              var c2;
              super(), this._viewportElement = e3, this._screenElement = t3, this._bufferService = i3, this._decorationService = s3, this._renderService = r2, this._optionsService = o2, this._coreBrowseService = a2, this._colorZoneStore = new n.ColorZoneStore(), this._shouldUpdateDimensions = true, this._shouldUpdateAnchor = true, this._lastKnownBufferLength = 0, this._canvas = document.createElement("canvas"), this._canvas.classList.add("xterm-decoration-overview-ruler"), this._refreshCanvasDimensions(), null === (c2 = this._viewportElement.parentElement) || void 0 === c2 || c2.insertBefore(this._canvas, this._viewportElement);
              const l3 = this._canvas.getContext("2d");
              if (!l3) throw new Error("Ctx cannot be null");
              this._ctx = l3, this._registerDecorationListeners(), this._registerBufferChangeListeners(), this._registerDimensionChangeListeners(), this.register((0, h2.toDisposable)(() => {
                var e4;
                null === (e4 = this._canvas) || void 0 === e4 || e4.remove();
              }));
            }
            _registerDecorationListeners() {
              this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(void 0, true))), this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(void 0, true)));
            }
            _registerBufferChangeListeners() {
              this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh())), this.register(this._bufferService.buffers.onBufferActivate(() => {
                this._canvas.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? "none" : "block";
              })), this.register(this._bufferService.onScroll(() => {
                this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length && (this._refreshDrawHeightConstants(), this._refreshColorZonePadding());
              }));
            }
            _registerDimensionChangeListeners() {
              this.register(this._renderService.onRender(() => {
                this._containerHeight && this._containerHeight === this._screenElement.clientHeight || (this._queueRefresh(true), this._containerHeight = this._screenElement.clientHeight);
              })), this.register(this._optionsService.onSpecificOptionChange("overviewRulerWidth", () => this._queueRefresh(true))), this.register((0, o.addDisposableDomListener)(this._coreBrowseService.window, "resize", () => this._queueRefresh(true))), this._queueRefresh(true);
            }
            _refreshDrawConstants() {
              const e3 = Math.floor(this._canvas.width / 3), t3 = Math.ceil(this._canvas.width / 3);
              d.full = this._canvas.width, d.left = e3, d.center = t3, d.right = e3, this._refreshDrawHeightConstants(), _2.full = 0, _2.left = 0, _2.center = d.left, _2.right = d.left + d.center;
            }
            _refreshDrawHeightConstants() {
              l2.full = Math.round(2 * this._coreBrowseService.dpr);
              const e3 = this._canvas.height / this._bufferService.buffer.lines.length, t3 = Math.round(Math.max(Math.min(e3, 12), 6) * this._coreBrowseService.dpr);
              l2.left = t3, l2.center = t3, l2.right = t3;
            }
            _refreshColorZonePadding() {
              this._colorZoneStore.setPadding({
                full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l2.full),
                left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l2.left),
                center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l2.center),
                right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l2.right)
              }), this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;
            }
            _refreshCanvasDimensions() {
              this._canvas.style.width = `${this._width}px`, this._canvas.width = Math.round(this._width * this._coreBrowseService.dpr), this._canvas.style.height = `${this._screenElement.clientHeight}px`, this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowseService.dpr), this._refreshDrawConstants(), this._refreshColorZonePadding();
            }
            _refreshDecorations() {
              this._shouldUpdateDimensions && this._refreshCanvasDimensions(), this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height), this._colorZoneStore.clear();
              for (const e4 of this._decorationService.decorations) this._colorZoneStore.addDecoration(e4);
              this._ctx.lineWidth = 1;
              const e3 = this._colorZoneStore.zones;
              for (const t3 of e3) "full" !== t3.position && this._renderColorZone(t3);
              for (const t3 of e3) "full" === t3.position && this._renderColorZone(t3);
              this._shouldUpdateDimensions = false, this._shouldUpdateAnchor = false;
            }
            _renderColorZone(e3) {
              this._ctx.fillStyle = e3.color, this._ctx.fillRect(_2[e3.position || "full"], Math.round((this._canvas.height - 1) * (e3.startBufferLine / this._bufferService.buffers.active.lines.length) - l2[e3.position || "full"] / 2), d[e3.position || "full"], Math.round((this._canvas.height - 1) * ((e3.endBufferLine - e3.startBufferLine) / this._bufferService.buffers.active.lines.length) + l2[e3.position || "full"]));
            }
            _queueRefresh(e3, t3) {
              this._shouldUpdateDimensions = e3 || this._shouldUpdateDimensions, this._shouldUpdateAnchor = t3 || this._shouldUpdateAnchor, void 0 === this._animationFrame && (this._animationFrame = this._coreBrowseService.window.requestAnimationFrame(() => {
                this._refreshDecorations(), this._animationFrame = void 0;
              }));
            }
          };
          t2.OverviewRulerRenderer = u = s2([
            r(2, c.IBufferService),
            r(3, c.IDecorationService),
            r(4, a.IRenderService),
            r(5, c.IOptionsService),
            r(6, a.ICoreBrowserService)
          ], u);
        },
        2950: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CompositionHelper = void 0;
          const n = i2(4725), o = i2(2585), a = i2(2584);
          let h2 = t2.CompositionHelper = class {
            get isComposing() {
              return this._isComposing;
            }
            constructor(e3, t3, i3, s3, r2, n2) {
              this._textarea = e3, this._compositionView = t3, this._bufferService = i3, this._optionsService = s3, this._coreService = r2, this._renderService = n2, this._isComposing = false, this._isSendingComposition = false, this._compositionPosition = {
                start: 0,
                end: 0
              }, this._dataAlreadySent = "";
            }
            compositionstart() {
              this._isComposing = true, this._compositionPosition.start = this._textarea.value.length, this._compositionView.textContent = "", this._dataAlreadySent = "", this._compositionView.classList.add("active");
            }
            compositionupdate(e3) {
              this._compositionView.textContent = e3.data, this.updateCompositionElements(), setTimeout(() => {
                this._compositionPosition.end = this._textarea.value.length;
              }, 0);
            }
            compositionend() {
              this._finalizeComposition(true);
            }
            keydown(e3) {
              if (this._isComposing || this._isSendingComposition) {
                if (229 === e3.keyCode) return false;
                if (16 === e3.keyCode || 17 === e3.keyCode || 18 === e3.keyCode) return false;
                this._finalizeComposition(false);
              }
              return 229 !== e3.keyCode || (this._handleAnyTextareaChanges(), false);
            }
            _finalizeComposition(e3) {
              if (this._compositionView.classList.remove("active"), this._isComposing = false, e3) {
                const e4 = {
                  start: this._compositionPosition.start,
                  end: this._compositionPosition.end
                };
                this._isSendingComposition = true, setTimeout(() => {
                  if (this._isSendingComposition) {
                    let t3;
                    this._isSendingComposition = false, e4.start += this._dataAlreadySent.length, t3 = this._isComposing ? this._textarea.value.substring(e4.start, e4.end) : this._textarea.value.substring(e4.start), t3.length > 0 && this._coreService.triggerDataEvent(t3, true);
                  }
                }, 0);
              } else {
                this._isSendingComposition = false;
                const e4 = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);
                this._coreService.triggerDataEvent(e4, true);
              }
            }
            _handleAnyTextareaChanges() {
              const e3 = this._textarea.value;
              setTimeout(() => {
                if (!this._isComposing) {
                  const t3 = this._textarea.value, i3 = t3.replace(e3, "");
                  this._dataAlreadySent = i3, t3.length > e3.length ? this._coreService.triggerDataEvent(i3, true) : t3.length < e3.length ? this._coreService.triggerDataEvent(`${a.C0.DEL}`, true) : t3.length === e3.length && t3 !== e3 && this._coreService.triggerDataEvent(t3, true);
                }
              }, 0);
            }
            updateCompositionElements(e3) {
              if (this._isComposing) {
                if (this._bufferService.buffer.isCursorInViewport) {
                  const e4 = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1), t3 = this._renderService.dimensions.css.cell.height, i3 = this._bufferService.buffer.y * this._renderService.dimensions.css.cell.height, s3 = e4 * this._renderService.dimensions.css.cell.width;
                  this._compositionView.style.left = s3 + "px", this._compositionView.style.top = i3 + "px", this._compositionView.style.height = t3 + "px", this._compositionView.style.lineHeight = t3 + "px", this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + "px";
                  const r2 = this._compositionView.getBoundingClientRect();
                  this._textarea.style.left = s3 + "px", this._textarea.style.top = i3 + "px", this._textarea.style.width = Math.max(r2.width, 1) + "px", this._textarea.style.height = Math.max(r2.height, 1) + "px", this._textarea.style.lineHeight = r2.height + "px";
                }
                e3 || setTimeout(() => this.updateCompositionElements(true), 0);
              }
            }
          };
          t2.CompositionHelper = h2 = s2([
            r(2, o.IBufferService),
            r(3, o.IOptionsService),
            r(4, o.ICoreService),
            r(5, n.IRenderService)
          ], h2);
        },
        9806: (e2, t2) => {
          function i2(e3, t3, i3) {
            const s2 = i3.getBoundingClientRect(), r = e3.getComputedStyle(i3), n = parseInt(r.getPropertyValue("padding-left")), o = parseInt(r.getPropertyValue("padding-top"));
            return [
              t3.clientX - s2.left - n,
              t3.clientY - s2.top - o
            ];
          }
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.getCoords = t2.getCoordsRelativeToElement = void 0, t2.getCoordsRelativeToElement = i2, t2.getCoords = function(e3, t3, s2, r, n, o, a, h2, c) {
            if (!o) return;
            const l2 = i2(e3, t3, s2);
            return l2 ? (l2[0] = Math.ceil((l2[0] + (c ? a / 2 : 0)) / a), l2[1] = Math.ceil(l2[1] / h2), l2[0] = Math.min(Math.max(l2[0], 1), r + (c ? 1 : 0)), l2[1] = Math.min(Math.max(l2[1], 1), n), l2) : void 0;
          };
        },
        9504: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.moveToCellSequence = void 0;
          const s2 = i2(2584);
          function r(e3, t3, i3, s3) {
            const r2 = e3 - n(e3, i3), a2 = t3 - n(t3, i3), l2 = Math.abs(r2 - a2) - function(e4, t4, i4) {
              let s4 = 0;
              const r3 = e4 - n(e4, i4), a3 = t4 - n(t4, i4);
              for (let n2 = 0; n2 < Math.abs(r3 - a3); n2++) {
                const a4 = "A" === o(e4, t4) ? -1 : 1, h3 = i4.buffer.lines.get(r3 + a4 * n2);
                (null == h3 ? void 0 : h3.isWrapped) && s4++;
              }
              return s4;
            }(e3, t3, i3);
            return c(l2, h2(o(e3, t3), s3));
          }
          function n(e3, t3) {
            let i3 = 0, s3 = t3.buffer.lines.get(e3), r2 = null == s3 ? void 0 : s3.isWrapped;
            for (; r2 && e3 >= 0 && e3 < t3.rows; ) i3++, s3 = t3.buffer.lines.get(--e3), r2 = null == s3 ? void 0 : s3.isWrapped;
            return i3;
          }
          function o(e3, t3) {
            return e3 > t3 ? "A" : "B";
          }
          function a(e3, t3, i3, s3, r2, n2) {
            let o2 = e3, a2 = t3, h3 = "";
            for (; o2 !== i3 || a2 !== s3; ) o2 += r2 ? 1 : -1, r2 && o2 > n2.cols - 1 ? (h3 += n2.buffer.translateBufferLineToString(a2, false, e3, o2), o2 = 0, e3 = 0, a2++) : !r2 && o2 < 0 && (h3 += n2.buffer.translateBufferLineToString(a2, false, 0, e3 + 1), o2 = n2.cols - 1, e3 = o2, a2--);
            return h3 + n2.buffer.translateBufferLineToString(a2, false, e3, o2);
          }
          function h2(e3, t3) {
            const i3 = t3 ? "O" : "[";
            return s2.C0.ESC + i3 + e3;
          }
          function c(e3, t3) {
            e3 = Math.floor(e3);
            let i3 = "";
            for (let s3 = 0; s3 < e3; s3++) i3 += t3;
            return i3;
          }
          t2.moveToCellSequence = function(e3, t3, i3, s3) {
            const o2 = i3.buffer.x, l2 = i3.buffer.y;
            if (!i3.buffer.hasScrollback) return function(e4, t4, i4, s4, o3, l3) {
              return 0 === r(t4, s4, o3, l3).length ? "" : c(a(e4, t4, e4, t4 - n(t4, o3), false, o3).length, h2("D", l3));
            }(o2, l2, 0, t3, i3, s3) + r(l2, t3, i3, s3) + function(e4, t4, i4, s4, o3, l3) {
              let d2;
              d2 = r(t4, s4, o3, l3).length > 0 ? s4 - n(s4, o3) : t4;
              const _3 = s4, u = function(e5, t5, i5, s5, o4, a2) {
                let h3;
                return h3 = r(i5, s5, o4, a2).length > 0 ? s5 - n(s5, o4) : t5, e5 < i5 && h3 <= s5 || e5 >= i5 && h3 < s5 ? "C" : "D";
              }(e4, t4, i4, s4, o3, l3);
              return c(a(e4, d2, i4, _3, "C" === u, o3).length, h2(u, l3));
            }(o2, l2, e3, t3, i3, s3);
            let d;
            if (l2 === t3) return d = o2 > e3 ? "D" : "C", c(Math.abs(o2 - e3), h2(d, s3));
            d = l2 > t3 ? "D" : "C";
            const _2 = Math.abs(l2 - t3);
            return c(function(e4, t4) {
              return t4.cols - e4;
            }(l2 > t3 ? e3 : o2, i3) + (_2 - 1) * i3.cols + 1 + ((l2 > t3 ? o2 : e3) - 1), h2(d, s3));
          };
        },
        1296: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.DomRenderer = void 0;
          const n = i2(3787), o = i2(2550), a = i2(2223), h2 = i2(6171), c = i2(4725), l2 = i2(8055), d = i2(8460), _2 = i2(844), u = i2(2585), f = "xterm-dom-renderer-owner-", v2 = "xterm-rows", p = "xterm-fg-", g = "xterm-bg-", m = "xterm-focus", S = "xterm-selection";
          let C = 1, b = t2.DomRenderer = class extends _2.Disposable {
            constructor(e3, t3, i3, s3, r2, a2, c2, l3, u2, p2) {
              super(), this._element = e3, this._screenElement = t3, this._viewportElement = i3, this._linkifier2 = s3, this._charSizeService = a2, this._optionsService = c2, this._bufferService = l3, this._coreBrowserService = u2, this._themeService = p2, this._terminalClass = C++, this._rowElements = [], this.onRequestRedraw = this.register(new d.EventEmitter()).event, this._rowContainer = document.createElement("div"), this._rowContainer.classList.add(v2), this._rowContainer.style.lineHeight = "normal", this._rowContainer.setAttribute("aria-hidden", "true"), this._refreshRowElements(this._bufferService.cols, this._bufferService.rows), this._selectionContainer = document.createElement("div"), this._selectionContainer.classList.add(S), this._selectionContainer.setAttribute("aria-hidden", "true"), this.dimensions = (0, h2.createRenderDimensions)(), this._updateDimensions(), this.register(this._optionsService.onOptionChange(() => this._handleOptionsChanged())), this.register(this._themeService.onChangeColors((e4) => this._injectCss(e4))), this._injectCss(this._themeService.colors), this._rowFactory = r2.createInstance(n.DomRendererRowFactory, document), this._element.classList.add(f + this._terminalClass), this._screenElement.appendChild(this._rowContainer), this._screenElement.appendChild(this._selectionContainer), this.register(this._linkifier2.onShowLinkUnderline((e4) => this._handleLinkHover(e4))), this.register(this._linkifier2.onHideLinkUnderline((e4) => this._handleLinkLeave(e4))), this.register((0, _2.toDisposable)(() => {
                this._element.classList.remove(f + this._terminalClass), this._rowContainer.remove(), this._selectionContainer.remove(), this._widthCache.dispose(), this._themeStyleElement.remove(), this._dimensionsStyleElement.remove();
              })), this._widthCache = new o.WidthCache(document), this._widthCache.setFont(this._optionsService.rawOptions.fontFamily, this._optionsService.rawOptions.fontSize, this._optionsService.rawOptions.fontWeight, this._optionsService.rawOptions.fontWeightBold), this._setDefaultSpacing();
            }
            _updateDimensions() {
              const e3 = this._coreBrowserService.dpr;
              this.dimensions.device.char.width = this._charSizeService.width * e3, this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * e3), this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing), this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight), this.dimensions.device.char.left = 0, this.dimensions.device.char.top = 0, this.dimensions.device.canvas.width = this.dimensions.device.cell.width * this._bufferService.cols, this.dimensions.device.canvas.height = this.dimensions.device.cell.height * this._bufferService.rows, this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / e3), this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / e3), this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols, this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;
              for (const e4 of this._rowElements) e4.style.width = `${this.dimensions.css.canvas.width}px`, e4.style.height = `${this.dimensions.css.cell.height}px`, e4.style.lineHeight = `${this.dimensions.css.cell.height}px`, e4.style.overflow = "hidden";
              this._dimensionsStyleElement || (this._dimensionsStyleElement = document.createElement("style"), this._screenElement.appendChild(this._dimensionsStyleElement));
              const t3 = `${this._terminalSelector} .${v2} span { display: inline-block; height: 100%; vertical-align: top;}`;
              this._dimensionsStyleElement.textContent = t3, this._selectionContainer.style.height = this._viewportElement.style.height, this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`, this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;
            }
            _injectCss(e3) {
              this._themeStyleElement || (this._themeStyleElement = document.createElement("style"), this._screenElement.appendChild(this._themeStyleElement));
              let t3 = `${this._terminalSelector} .${v2} { color: ${e3.foreground.css}; font-family: ${this._optionsService.rawOptions.fontFamily}; font-size: ${this._optionsService.rawOptions.fontSize}px; font-kerning: none; white-space: pre}`;
              t3 += `${this._terminalSelector} .${v2} .xterm-dim { color: ${l2.color.multiplyOpacity(e3.foreground, 0.5).css};}`, t3 += `${this._terminalSelector} span:not(.xterm-bold) { font-weight: ${this._optionsService.rawOptions.fontWeight};}${this._terminalSelector} span.xterm-bold { font-weight: ${this._optionsService.rawOptions.fontWeightBold};}${this._terminalSelector} span.xterm-italic { font-style: italic;}`, t3 += "@keyframes blink_box_shadow_" + this._terminalClass + " { 50% {  border-bottom-style: hidden; }}", t3 += "@keyframes blink_block_" + this._terminalClass + ` { 0% {  background-color: ${e3.cursor.css};  color: ${e3.cursorAccent.css}; } 50% {  background-color: inherit;  color: ${e3.cursor.css}; }}`, t3 += `${this._terminalSelector} .${v2}.${m} .xterm-cursor.xterm-cursor-blink:not(.xterm-cursor-block) { animation: blink_box_shadow_` + this._terminalClass + ` 1s step-end infinite;}${this._terminalSelector} .${v2}.${m} .xterm-cursor.xterm-cursor-blink.xterm-cursor-block { animation: blink_block_` + this._terminalClass + ` 1s step-end infinite;}${this._terminalSelector} .${v2} .xterm-cursor.xterm-cursor-block { background-color: ${e3.cursor.css}; color: ${e3.cursorAccent.css};}${this._terminalSelector} .${v2} .xterm-cursor.xterm-cursor-outline { outline: 1px solid ${e3.cursor.css}; outline-offset: -1px;}${this._terminalSelector} .${v2} .xterm-cursor.xterm-cursor-bar { box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${e3.cursor.css} inset;}${this._terminalSelector} .${v2} .xterm-cursor.xterm-cursor-underline { border-bottom: 1px ${e3.cursor.css}; border-bottom-style: solid; height: calc(100% - 1px);}`, t3 += `${this._terminalSelector} .${S} { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}${this._terminalSelector}.focus .${S} div { position: absolute; background-color: ${e3.selectionBackgroundOpaque.css};}${this._terminalSelector} .${S} div { position: absolute; background-color: ${e3.selectionInactiveBackgroundOpaque.css};}`;
              for (const [i3, s3] of e3.ansi.entries()) t3 += `${this._terminalSelector} .${p}${i3} { color: ${s3.css}; }${this._terminalSelector} .${p}${i3}.xterm-dim { color: ${l2.color.multiplyOpacity(s3, 0.5).css}; }${this._terminalSelector} .${g}${i3} { background-color: ${s3.css}; }`;
              t3 += `${this._terminalSelector} .${p}${a.INVERTED_DEFAULT_COLOR} { color: ${l2.color.opaque(e3.background).css}; }${this._terminalSelector} .${p}${a.INVERTED_DEFAULT_COLOR}.xterm-dim { color: ${l2.color.multiplyOpacity(l2.color.opaque(e3.background), 0.5).css}; }${this._terminalSelector} .${g}${a.INVERTED_DEFAULT_COLOR} { background-color: ${e3.foreground.css}; }`, this._themeStyleElement.textContent = t3;
            }
            _setDefaultSpacing() {
              const e3 = this.dimensions.css.cell.width - this._widthCache.get("W", false, false);
              this._rowContainer.style.letterSpacing = `${e3}px`, this._rowFactory.defaultSpacing = e3;
            }
            handleDevicePixelRatioChange() {
              this._updateDimensions(), this._widthCache.clear(), this._setDefaultSpacing();
            }
            _refreshRowElements(e3, t3) {
              for (let e4 = this._rowElements.length; e4 <= t3; e4++) {
                const e5 = document.createElement("div");
                this._rowContainer.appendChild(e5), this._rowElements.push(e5);
              }
              for (; this._rowElements.length > t3; ) this._rowContainer.removeChild(this._rowElements.pop());
            }
            handleResize(e3, t3) {
              this._refreshRowElements(e3, t3), this._updateDimensions();
            }
            handleCharSizeChanged() {
              this._updateDimensions(), this._widthCache.clear(), this._setDefaultSpacing();
            }
            handleBlur() {
              this._rowContainer.classList.remove(m);
            }
            handleFocus() {
              this._rowContainer.classList.add(m), this.renderRows(this._bufferService.buffer.y, this._bufferService.buffer.y);
            }
            handleSelectionChanged(e3, t3, i3) {
              if (this._selectionContainer.replaceChildren(), this._rowFactory.handleSelectionChanged(e3, t3, i3), this.renderRows(0, this._bufferService.rows - 1), !e3 || !t3) return;
              const s3 = e3[1] - this._bufferService.buffer.ydisp, r2 = t3[1] - this._bufferService.buffer.ydisp, n2 = Math.max(s3, 0), o2 = Math.min(r2, this._bufferService.rows - 1);
              if (n2 >= this._bufferService.rows || o2 < 0) return;
              const a2 = document.createDocumentFragment();
              if (i3) {
                const i4 = e3[0] > t3[0];
                a2.appendChild(this._createSelectionElement(n2, i4 ? t3[0] : e3[0], i4 ? e3[0] : t3[0], o2 - n2 + 1));
              } else {
                const i4 = s3 === n2 ? e3[0] : 0, h3 = n2 === r2 ? t3[0] : this._bufferService.cols;
                a2.appendChild(this._createSelectionElement(n2, i4, h3));
                const c2 = o2 - n2 - 1;
                if (a2.appendChild(this._createSelectionElement(n2 + 1, 0, this._bufferService.cols, c2)), n2 !== o2) {
                  const e4 = r2 === o2 ? t3[0] : this._bufferService.cols;
                  a2.appendChild(this._createSelectionElement(o2, 0, e4));
                }
              }
              this._selectionContainer.appendChild(a2);
            }
            _createSelectionElement(e3, t3, i3, s3 = 1) {
              const r2 = document.createElement("div");
              return r2.style.height = s3 * this.dimensions.css.cell.height + "px", r2.style.top = e3 * this.dimensions.css.cell.height + "px", r2.style.left = t3 * this.dimensions.css.cell.width + "px", r2.style.width = this.dimensions.css.cell.width * (i3 - t3) + "px", r2;
            }
            handleCursorMove() {
            }
            _handleOptionsChanged() {
              this._updateDimensions(), this._injectCss(this._themeService.colors), this._widthCache.setFont(this._optionsService.rawOptions.fontFamily, this._optionsService.rawOptions.fontSize, this._optionsService.rawOptions.fontWeight, this._optionsService.rawOptions.fontWeightBold), this._setDefaultSpacing();
            }
            clear() {
              for (const e3 of this._rowElements) e3.replaceChildren();
            }
            renderRows(e3, t3) {
              const i3 = this._bufferService.buffer, s3 = i3.ybase + i3.y, r2 = Math.min(i3.x, this._bufferService.cols - 1), n2 = this._optionsService.rawOptions.cursorBlink, o2 = this._optionsService.rawOptions.cursorStyle, a2 = this._optionsService.rawOptions.cursorInactiveStyle;
              for (let h3 = e3; h3 <= t3; h3++) {
                const e4 = h3 + i3.ydisp, t4 = this._rowElements[h3], c2 = i3.lines.get(e4);
                if (!t4 || !c2) break;
                t4.replaceChildren(...this._rowFactory.createRow(c2, e4, e4 === s3, o2, a2, r2, n2, this.dimensions.css.cell.width, this._widthCache, -1, -1));
              }
            }
            get _terminalSelector() {
              return `.${f}${this._terminalClass}`;
            }
            _handleLinkHover(e3) {
              this._setCellUnderline(e3.x1, e3.x2, e3.y1, e3.y2, e3.cols, true);
            }
            _handleLinkLeave(e3) {
              this._setCellUnderline(e3.x1, e3.x2, e3.y1, e3.y2, e3.cols, false);
            }
            _setCellUnderline(e3, t3, i3, s3, r2, n2) {
              i3 < 0 && (e3 = 0), s3 < 0 && (t3 = 0);
              const o2 = this._bufferService.rows - 1;
              i3 = Math.max(Math.min(i3, o2), 0), s3 = Math.max(Math.min(s3, o2), 0), r2 = Math.min(r2, this._bufferService.cols);
              const a2 = this._bufferService.buffer, h3 = a2.ybase + a2.y, c2 = Math.min(a2.x, r2 - 1), l3 = this._optionsService.rawOptions.cursorBlink, d2 = this._optionsService.rawOptions.cursorStyle, _3 = this._optionsService.rawOptions.cursorInactiveStyle;
              for (let o3 = i3; o3 <= s3; ++o3) {
                const u2 = o3 + a2.ydisp, f2 = this._rowElements[o3], v3 = a2.lines.get(u2);
                if (!f2 || !v3) break;
                f2.replaceChildren(...this._rowFactory.createRow(v3, u2, u2 === h3, d2, _3, c2, l3, this.dimensions.css.cell.width, this._widthCache, n2 ? o3 === i3 ? e3 : 0 : -1, n2 ? (o3 === s3 ? t3 : r2) - 1 : -1));
              }
            }
          };
          t2.DomRenderer = b = s2([
            r(4, u.IInstantiationService),
            r(5, c.ICharSizeService),
            r(6, u.IOptionsService),
            r(7, u.IBufferService),
            r(8, c.ICoreBrowserService),
            r(9, c.IThemeService)
          ], b);
        },
        3787: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.DomRendererRowFactory = void 0;
          const n = i2(2223), o = i2(643), a = i2(511), h2 = i2(2585), c = i2(8055), l2 = i2(4725), d = i2(4269), _2 = i2(6171), u = i2(3734);
          let f = t2.DomRendererRowFactory = class {
            constructor(e3, t3, i3, s3, r2, n2, o2) {
              this._document = e3, this._characterJoinerService = t3, this._optionsService = i3, this._coreBrowserService = s3, this._coreService = r2, this._decorationService = n2, this._themeService = o2, this._workCell = new a.CellData(), this._columnSelectMode = false, this.defaultSpacing = 0;
            }
            handleSelectionChanged(e3, t3, i3) {
              this._selectionStart = e3, this._selectionEnd = t3, this._columnSelectMode = i3;
            }
            createRow(e3, t3, i3, s3, r2, a2, h3, l3, _3, f2, p) {
              const g = [], m = this._characterJoinerService.getJoinedCharacters(t3), S = this._themeService.colors;
              let C, b = e3.getNoBgTrimmedLength();
              i3 && b < a2 + 1 && (b = a2 + 1);
              let y = 0, w = "", E = 0, k2 = 0, L = 0, D2 = false, R = 0, x = false, A = 0;
              const B = [], T = -1 !== f2 && -1 !== p;
              for (let M = 0; M < b; M++) {
                e3.loadCell(M, this._workCell);
                let b2 = this._workCell.getWidth();
                if (0 === b2) continue;
                let O = false, P = M, I = this._workCell;
                if (m.length > 0 && M === m[0][0]) {
                  O = true;
                  const t4 = m.shift();
                  I = new d.JoinedCellData(this._workCell, e3.translateToString(true, t4[0], t4[1]), t4[1] - t4[0]), P = t4[1] - 1, b2 = I.getWidth();
                }
                const H2 = this._isCellInSelection(M, t3), F = i3 && M === a2, W = T && M >= f2 && M <= p;
                let U = false;
                this._decorationService.forEachDecorationAtCell(M, t3, void 0, (e4) => {
                  U = true;
                });
                let N = I.getChars() || o.WHITESPACE_CELL_CHAR;
                if (" " === N && (I.isUnderline() || I.isOverline()) && (N = "\xA0"), A = b2 * l3 - _3.get(N, I.isBold(), I.isItalic()), C) {
                  if (y && (H2 && x || !H2 && !x && I.bg === E) && (H2 && x && S.selectionForeground || I.fg === k2) && I.extended.ext === L && W === D2 && A === R && !F && !O && !U) {
                    w += N, y++;
                    continue;
                  }
                  y && (C.textContent = w), C = this._document.createElement("span"), y = 0, w = "";
                } else C = this._document.createElement("span");
                if (E = I.bg, k2 = I.fg, L = I.extended.ext, D2 = W, R = A, x = H2, O && a2 >= M && a2 <= P && (a2 = M), !this._coreService.isCursorHidden && F) {
                  if (B.push("xterm-cursor"), this._coreBrowserService.isFocused) h3 && B.push("xterm-cursor-blink"), B.push("bar" === s3 ? "xterm-cursor-bar" : "underline" === s3 ? "xterm-cursor-underline" : "xterm-cursor-block");
                  else if (r2) switch (r2) {
                    case "outline":
                      B.push("xterm-cursor-outline");
                      break;
                    case "block":
                      B.push("xterm-cursor-block");
                      break;
                    case "bar":
                      B.push("xterm-cursor-bar");
                      break;
                    case "underline":
                      B.push("xterm-cursor-underline");
                  }
                }
                if (I.isBold() && B.push("xterm-bold"), I.isItalic() && B.push("xterm-italic"), I.isDim() && B.push("xterm-dim"), w = I.isInvisible() ? o.WHITESPACE_CELL_CHAR : I.getChars() || o.WHITESPACE_CELL_CHAR, I.isUnderline() && (B.push(`xterm-underline-${I.extended.underlineStyle}`), " " === w && (w = "\xA0"), !I.isUnderlineColorDefault())) if (I.isUnderlineColorRGB()) C.style.textDecorationColor = `rgb(${u.AttributeData.toColorRGB(I.getUnderlineColor()).join(",")})`;
                else {
                  let e4 = I.getUnderlineColor();
                  this._optionsService.rawOptions.drawBoldTextInBrightColors && I.isBold() && e4 < 8 && (e4 += 8), C.style.textDecorationColor = S.ansi[e4].css;
                }
                I.isOverline() && (B.push("xterm-overline"), " " === w && (w = "\xA0")), I.isStrikethrough() && B.push("xterm-strikethrough"), W && (C.style.textDecoration = "underline");
                let $2 = I.getFgColor(), j = I.getFgColorMode(), z = I.getBgColor(), K = I.getBgColorMode();
                const q = !!I.isInverse();
                if (q) {
                  const e4 = $2;
                  $2 = z, z = e4;
                  const t4 = j;
                  j = K, K = t4;
                }
                let V, G, X, J = false;
                switch (this._decorationService.forEachDecorationAtCell(M, t3, void 0, (e4) => {
                  "top" !== e4.options.layer && J || (e4.backgroundColorRGB && (K = 50331648, z = e4.backgroundColorRGB.rgba >> 8 & 16777215, V = e4.backgroundColorRGB), e4.foregroundColorRGB && (j = 50331648, $2 = e4.foregroundColorRGB.rgba >> 8 & 16777215, G = e4.foregroundColorRGB), J = "top" === e4.options.layer);
                }), !J && H2 && (V = this._coreBrowserService.isFocused ? S.selectionBackgroundOpaque : S.selectionInactiveBackgroundOpaque, z = V.rgba >> 8 & 16777215, K = 50331648, J = true, S.selectionForeground && (j = 50331648, $2 = S.selectionForeground.rgba >> 8 & 16777215, G = S.selectionForeground)), J && B.push("xterm-decoration-top"), K) {
                  case 16777216:
                  case 33554432:
                    X = S.ansi[z], B.push(`xterm-bg-${z}`);
                    break;
                  case 50331648:
                    X = c.rgba.toColor(z >> 16, z >> 8 & 255, 255 & z), this._addStyle(C, `background-color:#${v2((z >>> 0).toString(16), "0", 6)}`);
                    break;
                  default:
                    q ? (X = S.foreground, B.push(`xterm-bg-${n.INVERTED_DEFAULT_COLOR}`)) : X = S.background;
                }
                switch (V || I.isDim() && (V = c.color.multiplyOpacity(X, 0.5)), j) {
                  case 16777216:
                  case 33554432:
                    I.isBold() && $2 < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors && ($2 += 8), this._applyMinimumContrast(C, X, S.ansi[$2], I, V, void 0) || B.push(`xterm-fg-${$2}`);
                    break;
                  case 50331648:
                    const e4 = c.rgba.toColor($2 >> 16 & 255, $2 >> 8 & 255, 255 & $2);
                    this._applyMinimumContrast(C, X, e4, I, V, G) || this._addStyle(C, `color:#${v2($2.toString(16), "0", 6)}`);
                    break;
                  default:
                    this._applyMinimumContrast(C, X, S.foreground, I, V, void 0) || q && B.push(`xterm-fg-${n.INVERTED_DEFAULT_COLOR}`);
                }
                B.length && (C.className = B.join(" "), B.length = 0), F || O || U ? C.textContent = w : y++, A !== this.defaultSpacing && (C.style.letterSpacing = `${A}px`), g.push(C), M = P;
              }
              return C && y && (C.textContent = w), g;
            }
            _applyMinimumContrast(e3, t3, i3, s3, r2, n2) {
              if (1 === this._optionsService.rawOptions.minimumContrastRatio || (0, _2.excludeFromContrastRatioDemands)(s3.getCode())) return false;
              const o2 = this._getContrastCache(s3);
              let a2;
              if (r2 || n2 || (a2 = o2.getColor(t3.rgba, i3.rgba)), void 0 === a2) {
                const e4 = this._optionsService.rawOptions.minimumContrastRatio / (s3.isDim() ? 2 : 1);
                a2 = c.color.ensureContrastRatio(r2 || t3, n2 || i3, e4), o2.setColor((r2 || t3).rgba, (n2 || i3).rgba, null != a2 ? a2 : null);
              }
              return !!a2 && (this._addStyle(e3, `color:${a2.css}`), true);
            }
            _getContrastCache(e3) {
              return e3.isDim() ? this._themeService.colors.halfContrastCache : this._themeService.colors.contrastCache;
            }
            _addStyle(e3, t3) {
              e3.setAttribute("style", `${e3.getAttribute("style") || ""}${t3};`);
            }
            _isCellInSelection(e3, t3) {
              const i3 = this._selectionStart, s3 = this._selectionEnd;
              return !(!i3 || !s3) && (this._columnSelectMode ? i3[0] <= s3[0] ? e3 >= i3[0] && t3 >= i3[1] && e3 < s3[0] && t3 <= s3[1] : e3 < i3[0] && t3 >= i3[1] && e3 >= s3[0] && t3 <= s3[1] : t3 > i3[1] && t3 < s3[1] || i3[1] === s3[1] && t3 === i3[1] && e3 >= i3[0] && e3 < s3[0] || i3[1] < s3[1] && t3 === s3[1] && e3 < s3[0] || i3[1] < s3[1] && t3 === i3[1] && e3 >= i3[0]);
            }
          };
          function v2(e3, t3, i3) {
            for (; e3.length < i3; ) e3 = t3 + e3;
            return e3;
          }
          t2.DomRendererRowFactory = f = s2([
            r(1, l2.ICharacterJoinerService),
            r(2, h2.IOptionsService),
            r(3, l2.ICoreBrowserService),
            r(4, h2.ICoreService),
            r(5, h2.IDecorationService),
            r(6, l2.IThemeService)
          ], f);
        },
        2550: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.WidthCache = void 0, t2.WidthCache = class {
            constructor(e3) {
              this._flat = new Float32Array(256), this._font = "", this._fontSize = 0, this._weight = "normal", this._weightBold = "bold", this._measureElements = [], this._container = e3.createElement("div"), this._container.style.position = "absolute", this._container.style.top = "-50000px", this._container.style.width = "50000px", this._container.style.whiteSpace = "pre", this._container.style.fontKerning = "none";
              const t3 = e3.createElement("span"), i2 = e3.createElement("span");
              i2.style.fontWeight = "bold";
              const s2 = e3.createElement("span");
              s2.style.fontStyle = "italic";
              const r = e3.createElement("span");
              r.style.fontWeight = "bold", r.style.fontStyle = "italic", this._measureElements = [
                t3,
                i2,
                s2,
                r
              ], this._container.appendChild(t3), this._container.appendChild(i2), this._container.appendChild(s2), this._container.appendChild(r), e3.body.appendChild(this._container), this.clear();
            }
            dispose() {
              this._container.remove(), this._measureElements.length = 0, this._holey = void 0;
            }
            clear() {
              this._flat.fill(-9999), this._holey = /* @__PURE__ */ new Map();
            }
            setFont(e3, t3, i2, s2) {
              e3 === this._font && t3 === this._fontSize && i2 === this._weight && s2 === this._weightBold || (this._font = e3, this._fontSize = t3, this._weight = i2, this._weightBold = s2, this._container.style.fontFamily = this._font, this._container.style.fontSize = `${this._fontSize}px`, this._measureElements[0].style.fontWeight = `${i2}`, this._measureElements[1].style.fontWeight = `${s2}`, this._measureElements[2].style.fontWeight = `${i2}`, this._measureElements[3].style.fontWeight = `${s2}`, this.clear());
            }
            get(e3, t3, i2) {
              let s2 = 0;
              if (!t3 && !i2 && 1 === e3.length && (s2 = e3.charCodeAt(0)) < 256) return -9999 !== this._flat[s2] ? this._flat[s2] : this._flat[s2] = this._measure(e3, 0);
              let r = e3;
              t3 && (r += "B"), i2 && (r += "I");
              let n = this._holey.get(r);
              if (void 0 === n) {
                let s3 = 0;
                t3 && (s3 |= 1), i2 && (s3 |= 2), n = this._measure(e3, s3), this._holey.set(r, n);
              }
              return n;
            }
            _measure(e3, t3) {
              const i2 = this._measureElements[t3];
              return i2.textContent = e3.repeat(32), i2.offsetWidth / 32;
            }
          };
        },
        2223: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.TEXT_BASELINE = t2.DIM_OPACITY = t2.INVERTED_DEFAULT_COLOR = void 0;
          const s2 = i2(6114);
          t2.INVERTED_DEFAULT_COLOR = 257, t2.DIM_OPACITY = 0.5, t2.TEXT_BASELINE = s2.isFirefox || s2.isLegacyEdge ? "bottom" : "ideographic";
        },
        6171: (e2, t2) => {
          function i2(e3) {
            return 57508 <= e3 && e3 <= 57558;
          }
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.createRenderDimensions = t2.excludeFromContrastRatioDemands = t2.isRestrictedPowerlineGlyph = t2.isPowerlineGlyph = t2.throwIfFalsy = void 0, t2.throwIfFalsy = function(e3) {
            if (!e3) throw new Error("value must not be falsy");
            return e3;
          }, t2.isPowerlineGlyph = i2, t2.isRestrictedPowerlineGlyph = function(e3) {
            return 57520 <= e3 && e3 <= 57527;
          }, t2.excludeFromContrastRatioDemands = function(e3) {
            return i2(e3) || function(e4) {
              return 9472 <= e4 && e4 <= 9631;
            }(e3);
          }, t2.createRenderDimensions = function() {
            return {
              css: {
                canvas: {
                  width: 0,
                  height: 0
                },
                cell: {
                  width: 0,
                  height: 0
                }
              },
              device: {
                canvas: {
                  width: 0,
                  height: 0
                },
                cell: {
                  width: 0,
                  height: 0
                },
                char: {
                  width: 0,
                  height: 0,
                  left: 0,
                  top: 0
                }
              }
            };
          };
        },
        456: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.SelectionModel = void 0, t2.SelectionModel = class {
            constructor(e3) {
              this._bufferService = e3, this.isSelectAllActive = false, this.selectionStartLength = 0;
            }
            clearSelection() {
              this.selectionStart = void 0, this.selectionEnd = void 0, this.isSelectAllActive = false, this.selectionStartLength = 0;
            }
            get finalSelectionStart() {
              return this.isSelectAllActive ? [
                0,
                0
              ] : this.selectionEnd && this.selectionStart && this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;
            }
            get finalSelectionEnd() {
              if (this.isSelectAllActive) return [
                this._bufferService.cols,
                this._bufferService.buffer.ybase + this._bufferService.rows - 1
              ];
              if (this.selectionStart) {
                if (!this.selectionEnd || this.areSelectionValuesReversed()) {
                  const e3 = this.selectionStart[0] + this.selectionStartLength;
                  return e3 > this._bufferService.cols ? e3 % this._bufferService.cols == 0 ? [
                    this._bufferService.cols,
                    this.selectionStart[1] + Math.floor(e3 / this._bufferService.cols) - 1
                  ] : [
                    e3 % this._bufferService.cols,
                    this.selectionStart[1] + Math.floor(e3 / this._bufferService.cols)
                  ] : [
                    e3,
                    this.selectionStart[1]
                  ];
                }
                if (this.selectionStartLength && this.selectionEnd[1] === this.selectionStart[1]) {
                  const e3 = this.selectionStart[0] + this.selectionStartLength;
                  return e3 > this._bufferService.cols ? [
                    e3 % this._bufferService.cols,
                    this.selectionStart[1] + Math.floor(e3 / this._bufferService.cols)
                  ] : [
                    Math.max(e3, this.selectionEnd[0]),
                    this.selectionEnd[1]
                  ];
                }
                return this.selectionEnd;
              }
            }
            areSelectionValuesReversed() {
              const e3 = this.selectionStart, t3 = this.selectionEnd;
              return !(!e3 || !t3) && (e3[1] > t3[1] || e3[1] === t3[1] && e3[0] > t3[0]);
            }
            handleTrim(e3) {
              return this.selectionStart && (this.selectionStart[1] -= e3), this.selectionEnd && (this.selectionEnd[1] -= e3), this.selectionEnd && this.selectionEnd[1] < 0 ? (this.clearSelection(), true) : (this.selectionStart && this.selectionStart[1] < 0 && (this.selectionStart[1] = 0), false);
            }
          };
        },
        428: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CharSizeService = void 0;
          const n = i2(2585), o = i2(8460), a = i2(844);
          let h2 = t2.CharSizeService = class extends a.Disposable {
            get hasValidSize() {
              return this.width > 0 && this.height > 0;
            }
            constructor(e3, t3, i3) {
              super(), this._optionsService = i3, this.width = 0, this.height = 0, this._onCharSizeChange = this.register(new o.EventEmitter()), this.onCharSizeChange = this._onCharSizeChange.event, this._measureStrategy = new c(e3, t3, this._optionsService), this.register(this._optionsService.onMultipleOptionChange([
                "fontFamily",
                "fontSize"
              ], () => this.measure()));
            }
            measure() {
              const e3 = this._measureStrategy.measure();
              e3.width === this.width && e3.height === this.height || (this.width = e3.width, this.height = e3.height, this._onCharSizeChange.fire());
            }
          };
          t2.CharSizeService = h2 = s2([
            r(2, n.IOptionsService)
          ], h2);
          class c {
            constructor(e3, t3, i3) {
              this._document = e3, this._parentElement = t3, this._optionsService = i3, this._result = {
                width: 0,
                height: 0
              }, this._measureElement = this._document.createElement("span"), this._measureElement.classList.add("xterm-char-measure-element"), this._measureElement.textContent = "W".repeat(32), this._measureElement.setAttribute("aria-hidden", "true"), this._measureElement.style.whiteSpace = "pre", this._measureElement.style.fontKerning = "none", this._parentElement.appendChild(this._measureElement);
            }
            measure() {
              this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;
              const e3 = {
                height: Number(this._measureElement.offsetHeight),
                width: Number(this._measureElement.offsetWidth)
              };
              return 0 !== e3.width && 0 !== e3.height && (this._result.width = e3.width / 32, this._result.height = Math.ceil(e3.height)), this._result;
            }
          }
        },
        4269: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CharacterJoinerService = t2.JoinedCellData = void 0;
          const n = i2(3734), o = i2(643), a = i2(511), h2 = i2(2585);
          class c extends n.AttributeData {
            constructor(e3, t3, i3) {
              super(), this.content = 0, this.combinedData = "", this.fg = e3.fg, this.bg = e3.bg, this.combinedData = t3, this._width = i3;
            }
            isCombined() {
              return 2097152;
            }
            getWidth() {
              return this._width;
            }
            getChars() {
              return this.combinedData;
            }
            getCode() {
              return 2097151;
            }
            setFromCharData(e3) {
              throw new Error("not implemented");
            }
            getAsCharData() {
              return [
                this.fg,
                this.getChars(),
                this.getWidth(),
                this.getCode()
              ];
            }
          }
          t2.JoinedCellData = c;
          let l2 = t2.CharacterJoinerService = class e3 {
            constructor(e4) {
              this._bufferService = e4, this._characterJoiners = [], this._nextCharacterJoinerId = 0, this._workCell = new a.CellData();
            }
            register(e4) {
              const t3 = {
                id: this._nextCharacterJoinerId++,
                handler: e4
              };
              return this._characterJoiners.push(t3), t3.id;
            }
            deregister(e4) {
              for (let t3 = 0; t3 < this._characterJoiners.length; t3++) if (this._characterJoiners[t3].id === e4) return this._characterJoiners.splice(t3, 1), true;
              return false;
            }
            getJoinedCharacters(e4) {
              if (0 === this._characterJoiners.length) return [];
              const t3 = this._bufferService.buffer.lines.get(e4);
              if (!t3 || 0 === t3.length) return [];
              const i3 = [], s3 = t3.translateToString(true);
              let r2 = 0, n2 = 0, a2 = 0, h3 = t3.getFg(0), c2 = t3.getBg(0);
              for (let e5 = 0; e5 < t3.getTrimmedLength(); e5++) if (t3.loadCell(e5, this._workCell), 0 !== this._workCell.getWidth()) {
                if (this._workCell.fg !== h3 || this._workCell.bg !== c2) {
                  if (e5 - r2 > 1) {
                    const e6 = this._getJoinedRanges(s3, a2, n2, t3, r2);
                    for (let t4 = 0; t4 < e6.length; t4++) i3.push(e6[t4]);
                  }
                  r2 = e5, a2 = n2, h3 = this._workCell.fg, c2 = this._workCell.bg;
                }
                n2 += this._workCell.getChars().length || o.WHITESPACE_CELL_CHAR.length;
              }
              if (this._bufferService.cols - r2 > 1) {
                const e5 = this._getJoinedRanges(s3, a2, n2, t3, r2);
                for (let t4 = 0; t4 < e5.length; t4++) i3.push(e5[t4]);
              }
              return i3;
            }
            _getJoinedRanges(t3, i3, s3, r2, n2) {
              const o2 = t3.substring(i3, s3);
              let a2 = [];
              try {
                a2 = this._characterJoiners[0].handler(o2);
              } catch (e4) {
                console.error(e4);
              }
              for (let t4 = 1; t4 < this._characterJoiners.length; t4++) try {
                const i4 = this._characterJoiners[t4].handler(o2);
                for (let t5 = 0; t5 < i4.length; t5++) e3._mergeRanges(a2, i4[t5]);
              } catch (e4) {
                console.error(e4);
              }
              return this._stringRangesToCellRanges(a2, r2, n2), a2;
            }
            _stringRangesToCellRanges(e4, t3, i3) {
              let s3 = 0, r2 = false, n2 = 0, a2 = e4[s3];
              if (a2) {
                for (let h3 = i3; h3 < this._bufferService.cols; h3++) {
                  const i4 = t3.getWidth(h3), c2 = t3.getString(h3).length || o.WHITESPACE_CELL_CHAR.length;
                  if (0 !== i4) {
                    if (!r2 && a2[0] <= n2 && (a2[0] = h3, r2 = true), a2[1] <= n2) {
                      if (a2[1] = h3, a2 = e4[++s3], !a2) break;
                      a2[0] <= n2 ? (a2[0] = h3, r2 = true) : r2 = false;
                    }
                    n2 += c2;
                  }
                }
                a2 && (a2[1] = this._bufferService.cols);
              }
            }
            static _mergeRanges(e4, t3) {
              let i3 = false;
              for (let s3 = 0; s3 < e4.length; s3++) {
                const r2 = e4[s3];
                if (i3) {
                  if (t3[1] <= r2[0]) return e4[s3 - 1][1] = t3[1], e4;
                  if (t3[1] <= r2[1]) return e4[s3 - 1][1] = Math.max(t3[1], r2[1]), e4.splice(s3, 1), e4;
                  e4.splice(s3, 1), s3--;
                } else {
                  if (t3[1] <= r2[0]) return e4.splice(s3, 0, t3), e4;
                  if (t3[1] <= r2[1]) return r2[0] = Math.min(t3[0], r2[0]), e4;
                  t3[0] < r2[1] && (r2[0] = Math.min(t3[0], r2[0]), i3 = true);
                }
              }
              return i3 ? e4[e4.length - 1][1] = t3[1] : e4.push(t3), e4;
            }
          };
          t2.CharacterJoinerService = l2 = s2([
            r(0, h2.IBufferService)
          ], l2);
        },
        5114: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CoreBrowserService = void 0, t2.CoreBrowserService = class {
            constructor(e3, t3) {
              this._textarea = e3, this.window = t3, this._isFocused = false, this._cachedIsFocused = void 0, this._textarea.addEventListener("focus", () => this._isFocused = true), this._textarea.addEventListener("blur", () => this._isFocused = false);
            }
            get dpr() {
              return this.window.devicePixelRatio;
            }
            get isFocused() {
              return void 0 === this._cachedIsFocused && (this._cachedIsFocused = this._isFocused && this._textarea.ownerDocument.hasFocus(), queueMicrotask(() => this._cachedIsFocused = void 0)), this._cachedIsFocused;
            }
          };
        },
        8934: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.MouseService = void 0;
          const n = i2(4725), o = i2(9806);
          let a = t2.MouseService = class {
            constructor(e3, t3) {
              this._renderService = e3, this._charSizeService = t3;
            }
            getCoords(e3, t3, i3, s3, r2) {
              return (0, o.getCoords)(window, e3, t3, i3, s3, this._charSizeService.hasValidSize, this._renderService.dimensions.css.cell.width, this._renderService.dimensions.css.cell.height, r2);
            }
            getMouseReportCoords(e3, t3) {
              const i3 = (0, o.getCoordsRelativeToElement)(window, e3, t3);
              if (this._charSizeService.hasValidSize) return i3[0] = Math.min(Math.max(i3[0], 0), this._renderService.dimensions.css.canvas.width - 1), i3[1] = Math.min(Math.max(i3[1], 0), this._renderService.dimensions.css.canvas.height - 1), {
                col: Math.floor(i3[0] / this._renderService.dimensions.css.cell.width),
                row: Math.floor(i3[1] / this._renderService.dimensions.css.cell.height),
                x: Math.floor(i3[0]),
                y: Math.floor(i3[1])
              };
            }
          };
          t2.MouseService = a = s2([
            r(0, n.IRenderService),
            r(1, n.ICharSizeService)
          ], a);
        },
        3230: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.RenderService = void 0;
          const n = i2(3656), o = i2(6193), a = i2(5596), h2 = i2(4725), c = i2(8460), l2 = i2(844), d = i2(7226), _2 = i2(2585);
          let u = t2.RenderService = class extends l2.Disposable {
            get dimensions() {
              return this._renderer.value.dimensions;
            }
            constructor(e3, t3, i3, s3, r2, h3, _3, u2) {
              if (super(), this._rowCount = e3, this._charSizeService = s3, this._renderer = this.register(new l2.MutableDisposable()), this._pausedResizeTask = new d.DebouncedIdleTask(), this._isPaused = false, this._needsFullRefresh = false, this._isNextRenderRedrawOnly = true, this._needsSelectionRefresh = false, this._canvasWidth = 0, this._canvasHeight = 0, this._selectionState = {
                start: void 0,
                end: void 0,
                columnSelectMode: false
              }, this._onDimensionsChange = this.register(new c.EventEmitter()), this.onDimensionsChange = this._onDimensionsChange.event, this._onRenderedViewportChange = this.register(new c.EventEmitter()), this.onRenderedViewportChange = this._onRenderedViewportChange.event, this._onRender = this.register(new c.EventEmitter()), this.onRender = this._onRender.event, this._onRefreshRequest = this.register(new c.EventEmitter()), this.onRefreshRequest = this._onRefreshRequest.event, this._renderDebouncer = new o.RenderDebouncer(_3.window, (e4, t4) => this._renderRows(e4, t4)), this.register(this._renderDebouncer), this._screenDprMonitor = new a.ScreenDprMonitor(_3.window), this._screenDprMonitor.setListener(() => this.handleDevicePixelRatioChange()), this.register(this._screenDprMonitor), this.register(h3.onResize(() => this._fullRefresh())), this.register(h3.buffers.onBufferActivate(() => {
                var e4;
                return null === (e4 = this._renderer.value) || void 0 === e4 ? void 0 : e4.clear();
              })), this.register(i3.onOptionChange(() => this._handleOptionsChanged())), this.register(this._charSizeService.onCharSizeChange(() => this.handleCharSizeChanged())), this.register(r2.onDecorationRegistered(() => this._fullRefresh())), this.register(r2.onDecorationRemoved(() => this._fullRefresh())), this.register(i3.onMultipleOptionChange([
                "customGlyphs",
                "drawBoldTextInBrightColors",
                "letterSpacing",
                "lineHeight",
                "fontFamily",
                "fontSize",
                "fontWeight",
                "fontWeightBold",
                "minimumContrastRatio"
              ], () => {
                this.clear(), this.handleResize(h3.cols, h3.rows), this._fullRefresh();
              })), this.register(i3.onMultipleOptionChange([
                "cursorBlink",
                "cursorStyle"
              ], () => this.refreshRows(h3.buffer.y, h3.buffer.y, true))), this.register((0, n.addDisposableDomListener)(_3.window, "resize", () => this.handleDevicePixelRatioChange())), this.register(u2.onChangeColors(() => this._fullRefresh())), "IntersectionObserver" in _3.window) {
                const e4 = new _3.window.IntersectionObserver((e5) => this._handleIntersectionChange(e5[e5.length - 1]), {
                  threshold: 0
                });
                e4.observe(t3), this.register({
                  dispose: () => e4.disconnect()
                });
              }
            }
            _handleIntersectionChange(e3) {
              this._isPaused = void 0 === e3.isIntersecting ? 0 === e3.intersectionRatio : !e3.isIntersecting, this._isPaused || this._charSizeService.hasValidSize || this._charSizeService.measure(), !this._isPaused && this._needsFullRefresh && (this._pausedResizeTask.flush(), this.refreshRows(0, this._rowCount - 1), this._needsFullRefresh = false);
            }
            refreshRows(e3, t3, i3 = false) {
              this._isPaused ? this._needsFullRefresh = true : (i3 || (this._isNextRenderRedrawOnly = false), this._renderDebouncer.refresh(e3, t3, this._rowCount));
            }
            _renderRows(e3, t3) {
              this._renderer.value && (e3 = Math.min(e3, this._rowCount - 1), t3 = Math.min(t3, this._rowCount - 1), this._renderer.value.renderRows(e3, t3), this._needsSelectionRefresh && (this._renderer.value.handleSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode), this._needsSelectionRefresh = false), this._isNextRenderRedrawOnly || this._onRenderedViewportChange.fire({
                start: e3,
                end: t3
              }), this._onRender.fire({
                start: e3,
                end: t3
              }), this._isNextRenderRedrawOnly = true);
            }
            resize(e3, t3) {
              this._rowCount = t3, this._fireOnCanvasResize();
            }
            _handleOptionsChanged() {
              this._renderer.value && (this.refreshRows(0, this._rowCount - 1), this._fireOnCanvasResize());
            }
            _fireOnCanvasResize() {
              this._renderer.value && (this._renderer.value.dimensions.css.canvas.width === this._canvasWidth && this._renderer.value.dimensions.css.canvas.height === this._canvasHeight || this._onDimensionsChange.fire(this._renderer.value.dimensions));
            }
            hasRenderer() {
              return !!this._renderer.value;
            }
            setRenderer(e3) {
              this._renderer.value = e3, this._renderer.value.onRequestRedraw((e4) => this.refreshRows(e4.start, e4.end, true)), this._needsSelectionRefresh = true, this._fullRefresh();
            }
            addRefreshCallback(e3) {
              return this._renderDebouncer.addRefreshCallback(e3);
            }
            _fullRefresh() {
              this._isPaused ? this._needsFullRefresh = true : this.refreshRows(0, this._rowCount - 1);
            }
            clearTextureAtlas() {
              var e3, t3;
              this._renderer.value && (null === (t3 = (e3 = this._renderer.value).clearTextureAtlas) || void 0 === t3 || t3.call(e3), this._fullRefresh());
            }
            handleDevicePixelRatioChange() {
              this._charSizeService.measure(), this._renderer.value && (this._renderer.value.handleDevicePixelRatioChange(), this.refreshRows(0, this._rowCount - 1));
            }
            handleResize(e3, t3) {
              this._renderer.value && (this._isPaused ? this._pausedResizeTask.set(() => this._renderer.value.handleResize(e3, t3)) : this._renderer.value.handleResize(e3, t3), this._fullRefresh());
            }
            handleCharSizeChanged() {
              var e3;
              null === (e3 = this._renderer.value) || void 0 === e3 || e3.handleCharSizeChanged();
            }
            handleBlur() {
              var e3;
              null === (e3 = this._renderer.value) || void 0 === e3 || e3.handleBlur();
            }
            handleFocus() {
              var e3;
              null === (e3 = this._renderer.value) || void 0 === e3 || e3.handleFocus();
            }
            handleSelectionChanged(e3, t3, i3) {
              var s3;
              this._selectionState.start = e3, this._selectionState.end = t3, this._selectionState.columnSelectMode = i3, null === (s3 = this._renderer.value) || void 0 === s3 || s3.handleSelectionChanged(e3, t3, i3);
            }
            handleCursorMove() {
              var e3;
              null === (e3 = this._renderer.value) || void 0 === e3 || e3.handleCursorMove();
            }
            clear() {
              var e3;
              null === (e3 = this._renderer.value) || void 0 === e3 || e3.clear();
            }
          };
          t2.RenderService = u = s2([
            r(2, _2.IOptionsService),
            r(3, h2.ICharSizeService),
            r(4, _2.IDecorationService),
            r(5, _2.IBufferService),
            r(6, h2.ICoreBrowserService),
            r(7, h2.IThemeService)
          ], u);
        },
        9312: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.SelectionService = void 0;
          const n = i2(9806), o = i2(9504), a = i2(456), h2 = i2(4725), c = i2(8460), l2 = i2(844), d = i2(6114), _2 = i2(4841), u = i2(511), f = i2(2585), v2 = String.fromCharCode(160), p = new RegExp(v2, "g");
          let g = t2.SelectionService = class extends l2.Disposable {
            constructor(e3, t3, i3, s3, r2, n2, o2, h3, d2) {
              super(), this._element = e3, this._screenElement = t3, this._linkifier = i3, this._bufferService = s3, this._coreService = r2, this._mouseService = n2, this._optionsService = o2, this._renderService = h3, this._coreBrowserService = d2, this._dragScrollAmount = 0, this._enabled = true, this._workCell = new u.CellData(), this._mouseDownTimeStamp = 0, this._oldHasSelection = false, this._oldSelectionStart = void 0, this._oldSelectionEnd = void 0, this._onLinuxMouseSelection = this.register(new c.EventEmitter()), this.onLinuxMouseSelection = this._onLinuxMouseSelection.event, this._onRedrawRequest = this.register(new c.EventEmitter()), this.onRequestRedraw = this._onRedrawRequest.event, this._onSelectionChange = this.register(new c.EventEmitter()), this.onSelectionChange = this._onSelectionChange.event, this._onRequestScrollLines = this.register(new c.EventEmitter()), this.onRequestScrollLines = this._onRequestScrollLines.event, this._mouseMoveListener = (e4) => this._handleMouseMove(e4), this._mouseUpListener = (e4) => this._handleMouseUp(e4), this._coreService.onUserInput(() => {
                this.hasSelection && this.clearSelection();
              }), this._trimListener = this._bufferService.buffer.lines.onTrim((e4) => this._handleTrim(e4)), this.register(this._bufferService.buffers.onBufferActivate((e4) => this._handleBufferActivate(e4))), this.enable(), this._model = new a.SelectionModel(this._bufferService), this._activeSelectionMode = 0, this.register((0, l2.toDisposable)(() => {
                this._removeMouseDownListeners();
              }));
            }
            reset() {
              this.clearSelection();
            }
            disable() {
              this.clearSelection(), this._enabled = false;
            }
            enable() {
              this._enabled = true;
            }
            get selectionStart() {
              return this._model.finalSelectionStart;
            }
            get selectionEnd() {
              return this._model.finalSelectionEnd;
            }
            get hasSelection() {
              const e3 = this._model.finalSelectionStart, t3 = this._model.finalSelectionEnd;
              return !(!e3 || !t3 || e3[0] === t3[0] && e3[1] === t3[1]);
            }
            get selectionText() {
              const e3 = this._model.finalSelectionStart, t3 = this._model.finalSelectionEnd;
              if (!e3 || !t3) return "";
              const i3 = this._bufferService.buffer, s3 = [];
              if (3 === this._activeSelectionMode) {
                if (e3[0] === t3[0]) return "";
                const r2 = e3[0] < t3[0] ? e3[0] : t3[0], n2 = e3[0] < t3[0] ? t3[0] : e3[0];
                for (let o2 = e3[1]; o2 <= t3[1]; o2++) {
                  const e4 = i3.translateBufferLineToString(o2, true, r2, n2);
                  s3.push(e4);
                }
              } else {
                const r2 = e3[1] === t3[1] ? t3[0] : void 0;
                s3.push(i3.translateBufferLineToString(e3[1], true, e3[0], r2));
                for (let r3 = e3[1] + 1; r3 <= t3[1] - 1; r3++) {
                  const e4 = i3.lines.get(r3), t4 = i3.translateBufferLineToString(r3, true);
                  (null == e4 ? void 0 : e4.isWrapped) ? s3[s3.length - 1] += t4 : s3.push(t4);
                }
                if (e3[1] !== t3[1]) {
                  const e4 = i3.lines.get(t3[1]), r3 = i3.translateBufferLineToString(t3[1], true, 0, t3[0]);
                  e4 && e4.isWrapped ? s3[s3.length - 1] += r3 : s3.push(r3);
                }
              }
              return s3.map((e4) => e4.replace(p, " ")).join(d.isWindows ? "\r\n" : "\n");
            }
            clearSelection() {
              this._model.clearSelection(), this._removeMouseDownListeners(), this.refresh(), this._onSelectionChange.fire();
            }
            refresh(e3) {
              this._refreshAnimationFrame || (this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._refresh())), d.isLinux && e3 && this.selectionText.length && this._onLinuxMouseSelection.fire(this.selectionText);
            }
            _refresh() {
              this._refreshAnimationFrame = void 0, this._onRedrawRequest.fire({
                start: this._model.finalSelectionStart,
                end: this._model.finalSelectionEnd,
                columnSelectMode: 3 === this._activeSelectionMode
              });
            }
            _isClickInSelection(e3) {
              const t3 = this._getMouseBufferCoords(e3), i3 = this._model.finalSelectionStart, s3 = this._model.finalSelectionEnd;
              return !!(i3 && s3 && t3) && this._areCoordsInSelection(t3, i3, s3);
            }
            isCellInSelection(e3, t3) {
              const i3 = this._model.finalSelectionStart, s3 = this._model.finalSelectionEnd;
              return !(!i3 || !s3) && this._areCoordsInSelection([
                e3,
                t3
              ], i3, s3);
            }
            _areCoordsInSelection(e3, t3, i3) {
              return e3[1] > t3[1] && e3[1] < i3[1] || t3[1] === i3[1] && e3[1] === t3[1] && e3[0] >= t3[0] && e3[0] < i3[0] || t3[1] < i3[1] && e3[1] === i3[1] && e3[0] < i3[0] || t3[1] < i3[1] && e3[1] === t3[1] && e3[0] >= t3[0];
            }
            _selectWordAtCursor(e3, t3) {
              var i3, s3;
              const r2 = null === (s3 = null === (i3 = this._linkifier.currentLink) || void 0 === i3 ? void 0 : i3.link) || void 0 === s3 ? void 0 : s3.range;
              if (r2) return this._model.selectionStart = [
                r2.start.x - 1,
                r2.start.y - 1
              ], this._model.selectionStartLength = (0, _2.getRangeLength)(r2, this._bufferService.cols), this._model.selectionEnd = void 0, true;
              const n2 = this._getMouseBufferCoords(e3);
              return !!n2 && (this._selectWordAt(n2, t3), this._model.selectionEnd = void 0, true);
            }
            selectAll() {
              this._model.isSelectAllActive = true, this.refresh(), this._onSelectionChange.fire();
            }
            selectLines(e3, t3) {
              this._model.clearSelection(), e3 = Math.max(e3, 0), t3 = Math.min(t3, this._bufferService.buffer.lines.length - 1), this._model.selectionStart = [
                0,
                e3
              ], this._model.selectionEnd = [
                this._bufferService.cols,
                t3
              ], this.refresh(), this._onSelectionChange.fire();
            }
            _handleTrim(e3) {
              this._model.handleTrim(e3) && this.refresh();
            }
            _getMouseBufferCoords(e3) {
              const t3 = this._mouseService.getCoords(e3, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);
              if (t3) return t3[0]--, t3[1]--, t3[1] += this._bufferService.buffer.ydisp, t3;
            }
            _getMouseEventScrollAmount(e3) {
              let t3 = (0, n.getCoordsRelativeToElement)(this._coreBrowserService.window, e3, this._screenElement)[1];
              const i3 = this._renderService.dimensions.css.canvas.height;
              return t3 >= 0 && t3 <= i3 ? 0 : (t3 > i3 && (t3 -= i3), t3 = Math.min(Math.max(t3, -50), 50), t3 /= 50, t3 / Math.abs(t3) + Math.round(14 * t3));
            }
            shouldForceSelection(e3) {
              return d.isMac ? e3.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection : e3.shiftKey;
            }
            handleMouseDown(e3) {
              if (this._mouseDownTimeStamp = e3.timeStamp, (2 !== e3.button || !this.hasSelection) && 0 === e3.button) {
                if (!this._enabled) {
                  if (!this.shouldForceSelection(e3)) return;
                  e3.stopPropagation();
                }
                e3.preventDefault(), this._dragScrollAmount = 0, this._enabled && e3.shiftKey ? this._handleIncrementalClick(e3) : 1 === e3.detail ? this._handleSingleClick(e3) : 2 === e3.detail ? this._handleDoubleClick(e3) : 3 === e3.detail && this._handleTripleClick(e3), this._addMouseDownListeners(), this.refresh(true);
              }
            }
            _addMouseDownListeners() {
              this._screenElement.ownerDocument && (this._screenElement.ownerDocument.addEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.addEventListener("mouseup", this._mouseUpListener)), this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(() => this._dragScroll(), 50);
            }
            _removeMouseDownListeners() {
              this._screenElement.ownerDocument && (this._screenElement.ownerDocument.removeEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.removeEventListener("mouseup", this._mouseUpListener)), this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer), this._dragScrollIntervalTimer = void 0;
            }
            _handleIncrementalClick(e3) {
              this._model.selectionStart && (this._model.selectionEnd = this._getMouseBufferCoords(e3));
            }
            _handleSingleClick(e3) {
              if (this._model.selectionStartLength = 0, this._model.isSelectAllActive = false, this._activeSelectionMode = this.shouldColumnSelect(e3) ? 3 : 0, this._model.selectionStart = this._getMouseBufferCoords(e3), !this._model.selectionStart) return;
              this._model.selectionEnd = void 0;
              const t3 = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);
              t3 && t3.length !== this._model.selectionStart[0] && 0 === t3.hasWidth(this._model.selectionStart[0]) && this._model.selectionStart[0]++;
            }
            _handleDoubleClick(e3) {
              this._selectWordAtCursor(e3, true) && (this._activeSelectionMode = 1);
            }
            _handleTripleClick(e3) {
              const t3 = this._getMouseBufferCoords(e3);
              t3 && (this._activeSelectionMode = 2, this._selectLineAt(t3[1]));
            }
            shouldColumnSelect(e3) {
              return e3.altKey && !(d.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);
            }
            _handleMouseMove(e3) {
              if (e3.stopImmediatePropagation(), !this._model.selectionStart) return;
              const t3 = this._model.selectionEnd ? [
                this._model.selectionEnd[0],
                this._model.selectionEnd[1]
              ] : null;
              if (this._model.selectionEnd = this._getMouseBufferCoords(e3), !this._model.selectionEnd) return void this.refresh(true);
              2 === this._activeSelectionMode ? this._model.selectionEnd[1] < this._model.selectionStart[1] ? this._model.selectionEnd[0] = 0 : this._model.selectionEnd[0] = this._bufferService.cols : 1 === this._activeSelectionMode && this._selectToWordAt(this._model.selectionEnd), this._dragScrollAmount = this._getMouseEventScrollAmount(e3), 3 !== this._activeSelectionMode && (this._dragScrollAmount > 0 ? this._model.selectionEnd[0] = this._bufferService.cols : this._dragScrollAmount < 0 && (this._model.selectionEnd[0] = 0));
              const i3 = this._bufferService.buffer;
              if (this._model.selectionEnd[1] < i3.lines.length) {
                const e4 = i3.lines.get(this._model.selectionEnd[1]);
                e4 && 0 === e4.hasWidth(this._model.selectionEnd[0]) && this._model.selectionEnd[0]++;
              }
              t3 && t3[0] === this._model.selectionEnd[0] && t3[1] === this._model.selectionEnd[1] || this.refresh(true);
            }
            _dragScroll() {
              if (this._model.selectionEnd && this._model.selectionStart && this._dragScrollAmount) {
                this._onRequestScrollLines.fire({
                  amount: this._dragScrollAmount,
                  suppressScrollEvent: false
                });
                const e3 = this._bufferService.buffer;
                this._dragScrollAmount > 0 ? (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = this._bufferService.cols), this._model.selectionEnd[1] = Math.min(e3.ydisp + this._bufferService.rows, e3.lines.length - 1)) : (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = 0), this._model.selectionEnd[1] = e3.ydisp), this.refresh();
              }
            }
            _handleMouseUp(e3) {
              const t3 = e3.timeStamp - this._mouseDownTimeStamp;
              if (this._removeMouseDownListeners(), this.selectionText.length <= 1 && t3 < 500 && e3.altKey && this._optionsService.rawOptions.altClickMovesCursor) {
                if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {
                  const t4 = this._mouseService.getCoords(e3, this._element, this._bufferService.cols, this._bufferService.rows, false);
                  if (t4 && void 0 !== t4[0] && void 0 !== t4[1]) {
                    const e4 = (0, o.moveToCellSequence)(t4[0] - 1, t4[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);
                    this._coreService.triggerDataEvent(e4, true);
                  }
                }
              } else this._fireEventIfSelectionChanged();
            }
            _fireEventIfSelectionChanged() {
              const e3 = this._model.finalSelectionStart, t3 = this._model.finalSelectionEnd, i3 = !(!e3 || !t3 || e3[0] === t3[0] && e3[1] === t3[1]);
              i3 ? e3 && t3 && (this._oldSelectionStart && this._oldSelectionEnd && e3[0] === this._oldSelectionStart[0] && e3[1] === this._oldSelectionStart[1] && t3[0] === this._oldSelectionEnd[0] && t3[1] === this._oldSelectionEnd[1] || this._fireOnSelectionChange(e3, t3, i3)) : this._oldHasSelection && this._fireOnSelectionChange(e3, t3, i3);
            }
            _fireOnSelectionChange(e3, t3, i3) {
              this._oldSelectionStart = e3, this._oldSelectionEnd = t3, this._oldHasSelection = i3, this._onSelectionChange.fire();
            }
            _handleBufferActivate(e3) {
              this.clearSelection(), this._trimListener.dispose(), this._trimListener = e3.activeBuffer.lines.onTrim((e4) => this._handleTrim(e4));
            }
            _convertViewportColToCharacterIndex(e3, t3) {
              let i3 = t3;
              for (let s3 = 0; t3 >= s3; s3++) {
                const r2 = e3.loadCell(s3, this._workCell).getChars().length;
                0 === this._workCell.getWidth() ? i3-- : r2 > 1 && t3 !== s3 && (i3 += r2 - 1);
              }
              return i3;
            }
            setSelection(e3, t3, i3) {
              this._model.clearSelection(), this._removeMouseDownListeners(), this._model.selectionStart = [
                e3,
                t3
              ], this._model.selectionStartLength = i3, this.refresh(), this._fireEventIfSelectionChanged();
            }
            rightClickSelect(e3) {
              this._isClickInSelection(e3) || (this._selectWordAtCursor(e3, false) && this.refresh(true), this._fireEventIfSelectionChanged());
            }
            _getWordAt(e3, t3, i3 = true, s3 = true) {
              if (e3[0] >= this._bufferService.cols) return;
              const r2 = this._bufferService.buffer, n2 = r2.lines.get(e3[1]);
              if (!n2) return;
              const o2 = r2.translateBufferLineToString(e3[1], false);
              let a2 = this._convertViewportColToCharacterIndex(n2, e3[0]), h3 = a2;
              const c2 = e3[0] - a2;
              let l3 = 0, d2 = 0, _3 = 0, u2 = 0;
              if (" " === o2.charAt(a2)) {
                for (; a2 > 0 && " " === o2.charAt(a2 - 1); ) a2--;
                for (; h3 < o2.length && " " === o2.charAt(h3 + 1); ) h3++;
              } else {
                let t4 = e3[0], i4 = e3[0];
                0 === n2.getWidth(t4) && (l3++, t4--), 2 === n2.getWidth(i4) && (d2++, i4++);
                const s4 = n2.getString(i4).length;
                for (s4 > 1 && (u2 += s4 - 1, h3 += s4 - 1); t4 > 0 && a2 > 0 && !this._isCharWordSeparator(n2.loadCell(t4 - 1, this._workCell)); ) {
                  n2.loadCell(t4 - 1, this._workCell);
                  const e4 = this._workCell.getChars().length;
                  0 === this._workCell.getWidth() ? (l3++, t4--) : e4 > 1 && (_3 += e4 - 1, a2 -= e4 - 1), a2--, t4--;
                }
                for (; i4 < n2.length && h3 + 1 < o2.length && !this._isCharWordSeparator(n2.loadCell(i4 + 1, this._workCell)); ) {
                  n2.loadCell(i4 + 1, this._workCell);
                  const e4 = this._workCell.getChars().length;
                  2 === this._workCell.getWidth() ? (d2++, i4++) : e4 > 1 && (u2 += e4 - 1, h3 += e4 - 1), h3++, i4++;
                }
              }
              h3++;
              let f2 = a2 + c2 - l3 + _3, v3 = Math.min(this._bufferService.cols, h3 - a2 + l3 + d2 - _3 - u2);
              if (t3 || "" !== o2.slice(a2, h3).trim()) {
                if (i3 && 0 === f2 && 32 !== n2.getCodePoint(0)) {
                  const t4 = r2.lines.get(e3[1] - 1);
                  if (t4 && n2.isWrapped && 32 !== t4.getCodePoint(this._bufferService.cols - 1)) {
                    const t5 = this._getWordAt([
                      this._bufferService.cols - 1,
                      e3[1] - 1
                    ], false, true, false);
                    if (t5) {
                      const e4 = this._bufferService.cols - t5.start;
                      f2 -= e4, v3 += e4;
                    }
                  }
                }
                if (s3 && f2 + v3 === this._bufferService.cols && 32 !== n2.getCodePoint(this._bufferService.cols - 1)) {
                  const t4 = r2.lines.get(e3[1] + 1);
                  if ((null == t4 ? void 0 : t4.isWrapped) && 32 !== t4.getCodePoint(0)) {
                    const t5 = this._getWordAt([
                      0,
                      e3[1] + 1
                    ], false, false, true);
                    t5 && (v3 += t5.length);
                  }
                }
                return {
                  start: f2,
                  length: v3
                };
              }
            }
            _selectWordAt(e3, t3) {
              const i3 = this._getWordAt(e3, t3);
              if (i3) {
                for (; i3.start < 0; ) i3.start += this._bufferService.cols, e3[1]--;
                this._model.selectionStart = [
                  i3.start,
                  e3[1]
                ], this._model.selectionStartLength = i3.length;
              }
            }
            _selectToWordAt(e3) {
              const t3 = this._getWordAt(e3, true);
              if (t3) {
                let i3 = e3[1];
                for (; t3.start < 0; ) t3.start += this._bufferService.cols, i3--;
                if (!this._model.areSelectionValuesReversed()) for (; t3.start + t3.length > this._bufferService.cols; ) t3.length -= this._bufferService.cols, i3++;
                this._model.selectionEnd = [
                  this._model.areSelectionValuesReversed() ? t3.start : t3.start + t3.length,
                  i3
                ];
              }
            }
            _isCharWordSeparator(e3) {
              return 0 !== e3.getWidth() && this._optionsService.rawOptions.wordSeparator.indexOf(e3.getChars()) >= 0;
            }
            _selectLineAt(e3) {
              const t3 = this._bufferService.buffer.getWrappedRangeForLine(e3), i3 = {
                start: {
                  x: 0,
                  y: t3.first
                },
                end: {
                  x: this._bufferService.cols - 1,
                  y: t3.last
                }
              };
              this._model.selectionStart = [
                0,
                t3.first
              ], this._model.selectionEnd = void 0, this._model.selectionStartLength = (0, _2.getRangeLength)(i3, this._bufferService.cols);
            }
          };
          t2.SelectionService = g = s2([
            r(3, f.IBufferService),
            r(4, f.ICoreService),
            r(5, h2.IMouseService),
            r(6, f.IOptionsService),
            r(7, h2.IRenderService),
            r(8, h2.ICoreBrowserService)
          ], g);
        },
        4725: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.IThemeService = t2.ICharacterJoinerService = t2.ISelectionService = t2.IRenderService = t2.IMouseService = t2.ICoreBrowserService = t2.ICharSizeService = void 0;
          const s2 = i2(8343);
          t2.ICharSizeService = (0, s2.createDecorator)("CharSizeService"), t2.ICoreBrowserService = (0, s2.createDecorator)("CoreBrowserService"), t2.IMouseService = (0, s2.createDecorator)("MouseService"), t2.IRenderService = (0, s2.createDecorator)("RenderService"), t2.ISelectionService = (0, s2.createDecorator)("SelectionService"), t2.ICharacterJoinerService = (0, s2.createDecorator)("CharacterJoinerService"), t2.IThemeService = (0, s2.createDecorator)("ThemeService");
        },
        6731: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.ThemeService = t2.DEFAULT_ANSI_COLORS = void 0;
          const n = i2(7239), o = i2(8055), a = i2(8460), h2 = i2(844), c = i2(2585), l2 = o.css.toColor("#ffffff"), d = o.css.toColor("#000000"), _2 = o.css.toColor("#ffffff"), u = o.css.toColor("#000000"), f = {
            css: "rgba(255, 255, 255, 0.3)",
            rgba: 4294967117
          };
          t2.DEFAULT_ANSI_COLORS = Object.freeze((() => {
            const e3 = [
              o.css.toColor("#2e3436"),
              o.css.toColor("#cc0000"),
              o.css.toColor("#4e9a06"),
              o.css.toColor("#c4a000"),
              o.css.toColor("#3465a4"),
              o.css.toColor("#75507b"),
              o.css.toColor("#06989a"),
              o.css.toColor("#d3d7cf"),
              o.css.toColor("#555753"),
              o.css.toColor("#ef2929"),
              o.css.toColor("#8ae234"),
              o.css.toColor("#fce94f"),
              o.css.toColor("#729fcf"),
              o.css.toColor("#ad7fa8"),
              o.css.toColor("#34e2e2"),
              o.css.toColor("#eeeeec")
            ], t3 = [
              0,
              95,
              135,
              175,
              215,
              255
            ];
            for (let i3 = 0; i3 < 216; i3++) {
              const s3 = t3[i3 / 36 % 6 | 0], r2 = t3[i3 / 6 % 6 | 0], n2 = t3[i3 % 6];
              e3.push({
                css: o.channels.toCss(s3, r2, n2),
                rgba: o.channels.toRgba(s3, r2, n2)
              });
            }
            for (let t4 = 0; t4 < 24; t4++) {
              const i3 = 8 + 10 * t4;
              e3.push({
                css: o.channels.toCss(i3, i3, i3),
                rgba: o.channels.toRgba(i3, i3, i3)
              });
            }
            return e3;
          })());
          let v2 = t2.ThemeService = class extends h2.Disposable {
            get colors() {
              return this._colors;
            }
            constructor(e3) {
              super(), this._optionsService = e3, this._contrastCache = new n.ColorContrastCache(), this._halfContrastCache = new n.ColorContrastCache(), this._onChangeColors = this.register(new a.EventEmitter()), this.onChangeColors = this._onChangeColors.event, this._colors = {
                foreground: l2,
                background: d,
                cursor: _2,
                cursorAccent: u,
                selectionForeground: void 0,
                selectionBackgroundTransparent: f,
                selectionBackgroundOpaque: o.color.blend(d, f),
                selectionInactiveBackgroundTransparent: f,
                selectionInactiveBackgroundOpaque: o.color.blend(d, f),
                ansi: t2.DEFAULT_ANSI_COLORS.slice(),
                contrastCache: this._contrastCache,
                halfContrastCache: this._halfContrastCache
              }, this._updateRestoreColors(), this._setTheme(this._optionsService.rawOptions.theme), this.register(this._optionsService.onSpecificOptionChange("minimumContrastRatio", () => this._contrastCache.clear())), this.register(this._optionsService.onSpecificOptionChange("theme", () => this._setTheme(this._optionsService.rawOptions.theme)));
            }
            _setTheme(e3 = {}) {
              const i3 = this._colors;
              if (i3.foreground = p(e3.foreground, l2), i3.background = p(e3.background, d), i3.cursor = p(e3.cursor, _2), i3.cursorAccent = p(e3.cursorAccent, u), i3.selectionBackgroundTransparent = p(e3.selectionBackground, f), i3.selectionBackgroundOpaque = o.color.blend(i3.background, i3.selectionBackgroundTransparent), i3.selectionInactiveBackgroundTransparent = p(e3.selectionInactiveBackground, i3.selectionBackgroundTransparent), i3.selectionInactiveBackgroundOpaque = o.color.blend(i3.background, i3.selectionInactiveBackgroundTransparent), i3.selectionForeground = e3.selectionForeground ? p(e3.selectionForeground, o.NULL_COLOR) : void 0, i3.selectionForeground === o.NULL_COLOR && (i3.selectionForeground = void 0), o.color.isOpaque(i3.selectionBackgroundTransparent)) {
                const e4 = 0.3;
                i3.selectionBackgroundTransparent = o.color.opacity(i3.selectionBackgroundTransparent, e4);
              }
              if (o.color.isOpaque(i3.selectionInactiveBackgroundTransparent)) {
                const e4 = 0.3;
                i3.selectionInactiveBackgroundTransparent = o.color.opacity(i3.selectionInactiveBackgroundTransparent, e4);
              }
              if (i3.ansi = t2.DEFAULT_ANSI_COLORS.slice(), i3.ansi[0] = p(e3.black, t2.DEFAULT_ANSI_COLORS[0]), i3.ansi[1] = p(e3.red, t2.DEFAULT_ANSI_COLORS[1]), i3.ansi[2] = p(e3.green, t2.DEFAULT_ANSI_COLORS[2]), i3.ansi[3] = p(e3.yellow, t2.DEFAULT_ANSI_COLORS[3]), i3.ansi[4] = p(e3.blue, t2.DEFAULT_ANSI_COLORS[4]), i3.ansi[5] = p(e3.magenta, t2.DEFAULT_ANSI_COLORS[5]), i3.ansi[6] = p(e3.cyan, t2.DEFAULT_ANSI_COLORS[6]), i3.ansi[7] = p(e3.white, t2.DEFAULT_ANSI_COLORS[7]), i3.ansi[8] = p(e3.brightBlack, t2.DEFAULT_ANSI_COLORS[8]), i3.ansi[9] = p(e3.brightRed, t2.DEFAULT_ANSI_COLORS[9]), i3.ansi[10] = p(e3.brightGreen, t2.DEFAULT_ANSI_COLORS[10]), i3.ansi[11] = p(e3.brightYellow, t2.DEFAULT_ANSI_COLORS[11]), i3.ansi[12] = p(e3.brightBlue, t2.DEFAULT_ANSI_COLORS[12]), i3.ansi[13] = p(e3.brightMagenta, t2.DEFAULT_ANSI_COLORS[13]), i3.ansi[14] = p(e3.brightCyan, t2.DEFAULT_ANSI_COLORS[14]), i3.ansi[15] = p(e3.brightWhite, t2.DEFAULT_ANSI_COLORS[15]), e3.extendedAnsi) {
                const s3 = Math.min(i3.ansi.length - 16, e3.extendedAnsi.length);
                for (let r2 = 0; r2 < s3; r2++) i3.ansi[r2 + 16] = p(e3.extendedAnsi[r2], t2.DEFAULT_ANSI_COLORS[r2 + 16]);
              }
              this._contrastCache.clear(), this._halfContrastCache.clear(), this._updateRestoreColors(), this._onChangeColors.fire(this.colors);
            }
            restoreColor(e3) {
              this._restoreColor(e3), this._onChangeColors.fire(this.colors);
            }
            _restoreColor(e3) {
              if (void 0 !== e3) switch (e3) {
                case 256:
                  this._colors.foreground = this._restoreColors.foreground;
                  break;
                case 257:
                  this._colors.background = this._restoreColors.background;
                  break;
                case 258:
                  this._colors.cursor = this._restoreColors.cursor;
                  break;
                default:
                  this._colors.ansi[e3] = this._restoreColors.ansi[e3];
              }
              else for (let e4 = 0; e4 < this._restoreColors.ansi.length; ++e4) this._colors.ansi[e4] = this._restoreColors.ansi[e4];
            }
            modifyColors(e3) {
              e3(this._colors), this._onChangeColors.fire(this.colors);
            }
            _updateRestoreColors() {
              this._restoreColors = {
                foreground: this._colors.foreground,
                background: this._colors.background,
                cursor: this._colors.cursor,
                ansi: this._colors.ansi.slice()
              };
            }
          };
          function p(e3, t3) {
            if (void 0 !== e3) try {
              return o.css.toColor(e3);
            } catch (e4) {
            }
            return t3;
          }
          t2.ThemeService = v2 = s2([
            r(0, c.IOptionsService)
          ], v2);
        },
        6349: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CircularList = void 0;
          const s2 = i2(8460), r = i2(844);
          class n extends r.Disposable {
            constructor(e3) {
              super(), this._maxLength = e3, this.onDeleteEmitter = this.register(new s2.EventEmitter()), this.onDelete = this.onDeleteEmitter.event, this.onInsertEmitter = this.register(new s2.EventEmitter()), this.onInsert = this.onInsertEmitter.event, this.onTrimEmitter = this.register(new s2.EventEmitter()), this.onTrim = this.onTrimEmitter.event, this._array = new Array(this._maxLength), this._startIndex = 0, this._length = 0;
            }
            get maxLength() {
              return this._maxLength;
            }
            set maxLength(e3) {
              if (this._maxLength === e3) return;
              const t3 = new Array(e3);
              for (let i3 = 0; i3 < Math.min(e3, this.length); i3++) t3[i3] = this._array[this._getCyclicIndex(i3)];
              this._array = t3, this._maxLength = e3, this._startIndex = 0;
            }
            get length() {
              return this._length;
            }
            set length(e3) {
              if (e3 > this._length) for (let t3 = this._length; t3 < e3; t3++) this._array[t3] = void 0;
              this._length = e3;
            }
            get(e3) {
              return this._array[this._getCyclicIndex(e3)];
            }
            set(e3, t3) {
              this._array[this._getCyclicIndex(e3)] = t3;
            }
            push(e3) {
              this._array[this._getCyclicIndex(this._length)] = e3, this._length === this._maxLength ? (this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1)) : this._length++;
            }
            recycle() {
              if (this._length !== this._maxLength) throw new Error("Can only recycle when the buffer is full");
              return this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1), this._array[this._getCyclicIndex(this._length - 1)];
            }
            get isFull() {
              return this._length === this._maxLength;
            }
            pop() {
              return this._array[this._getCyclicIndex(this._length-- - 1)];
            }
            splice(e3, t3, ...i3) {
              if (t3) {
                for (let i4 = e3; i4 < this._length - t3; i4++) this._array[this._getCyclicIndex(i4)] = this._array[this._getCyclicIndex(i4 + t3)];
                this._length -= t3, this.onDeleteEmitter.fire({
                  index: e3,
                  amount: t3
                });
              }
              for (let t4 = this._length - 1; t4 >= e3; t4--) this._array[this._getCyclicIndex(t4 + i3.length)] = this._array[this._getCyclicIndex(t4)];
              for (let t4 = 0; t4 < i3.length; t4++) this._array[this._getCyclicIndex(e3 + t4)] = i3[t4];
              if (i3.length && this.onInsertEmitter.fire({
                index: e3,
                amount: i3.length
              }), this._length + i3.length > this._maxLength) {
                const e4 = this._length + i3.length - this._maxLength;
                this._startIndex += e4, this._length = this._maxLength, this.onTrimEmitter.fire(e4);
              } else this._length += i3.length;
            }
            trimStart(e3) {
              e3 > this._length && (e3 = this._length), this._startIndex += e3, this._length -= e3, this.onTrimEmitter.fire(e3);
            }
            shiftElements(e3, t3, i3) {
              if (!(t3 <= 0)) {
                if (e3 < 0 || e3 >= this._length) throw new Error("start argument out of range");
                if (e3 + i3 < 0) throw new Error("Cannot shift elements in list beyond index 0");
                if (i3 > 0) {
                  for (let s4 = t3 - 1; s4 >= 0; s4--) this.set(e3 + s4 + i3, this.get(e3 + s4));
                  const s3 = e3 + t3 + i3 - this._length;
                  if (s3 > 0) for (this._length += s3; this._length > this._maxLength; ) this._length--, this._startIndex++, this.onTrimEmitter.fire(1);
                } else for (let s3 = 0; s3 < t3; s3++) this.set(e3 + s3 + i3, this.get(e3 + s3));
              }
            }
            _getCyclicIndex(e3) {
              return (this._startIndex + e3) % this._maxLength;
            }
          }
          t2.CircularList = n;
        },
        1439: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.clone = void 0, t2.clone = function e3(t3, i2 = 5) {
            if ("object" != typeof t3) return t3;
            const s2 = Array.isArray(t3) ? [] : {};
            for (const r in t3) s2[r] = i2 <= 1 ? t3[r] : t3[r] && e3(t3[r], i2 - 1);
            return s2;
          };
        },
        8055: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.contrastRatio = t2.toPaddedHex = t2.rgba = t2.rgb = t2.css = t2.color = t2.channels = t2.NULL_COLOR = void 0;
          const s2 = i2(6114);
          let r = 0, n = 0, o = 0, a = 0;
          var h2, c, l2, d, _2;
          function u(e3) {
            const t3 = e3.toString(16);
            return t3.length < 2 ? "0" + t3 : t3;
          }
          function f(e3, t3) {
            return e3 < t3 ? (t3 + 0.05) / (e3 + 0.05) : (e3 + 0.05) / (t3 + 0.05);
          }
          t2.NULL_COLOR = {
            css: "#00000000",
            rgba: 0
          }, function(e3) {
            e3.toCss = function(e4, t3, i3, s3) {
              return void 0 !== s3 ? `#${u(e4)}${u(t3)}${u(i3)}${u(s3)}` : `#${u(e4)}${u(t3)}${u(i3)}`;
            }, e3.toRgba = function(e4, t3, i3, s3 = 255) {
              return (e4 << 24 | t3 << 16 | i3 << 8 | s3) >>> 0;
            };
          }(h2 || (t2.channels = h2 = {})), function(e3) {
            function t3(e4, t4) {
              return a = Math.round(255 * t4), [r, n, o] = _2.toChannels(e4.rgba), {
                css: h2.toCss(r, n, o, a),
                rgba: h2.toRgba(r, n, o, a)
              };
            }
            e3.blend = function(e4, t4) {
              if (a = (255 & t4.rgba) / 255, 1 === a) return {
                css: t4.css,
                rgba: t4.rgba
              };
              const i3 = t4.rgba >> 24 & 255, s3 = t4.rgba >> 16 & 255, c2 = t4.rgba >> 8 & 255, l3 = e4.rgba >> 24 & 255, d2 = e4.rgba >> 16 & 255, _3 = e4.rgba >> 8 & 255;
              return r = l3 + Math.round((i3 - l3) * a), n = d2 + Math.round((s3 - d2) * a), o = _3 + Math.round((c2 - _3) * a), {
                css: h2.toCss(r, n, o),
                rgba: h2.toRgba(r, n, o)
              };
            }, e3.isOpaque = function(e4) {
              return 255 == (255 & e4.rgba);
            }, e3.ensureContrastRatio = function(e4, t4, i3) {
              const s3 = _2.ensureContrastRatio(e4.rgba, t4.rgba, i3);
              if (s3) return _2.toColor(s3 >> 24 & 255, s3 >> 16 & 255, s3 >> 8 & 255);
            }, e3.opaque = function(e4) {
              const t4 = (255 | e4.rgba) >>> 0;
              return [r, n, o] = _2.toChannels(t4), {
                css: h2.toCss(r, n, o),
                rgba: t4
              };
            }, e3.opacity = t3, e3.multiplyOpacity = function(e4, i3) {
              return a = 255 & e4.rgba, t3(e4, a * i3 / 255);
            }, e3.toColorRGB = function(e4) {
              return [
                e4.rgba >> 24 & 255,
                e4.rgba >> 16 & 255,
                e4.rgba >> 8 & 255
              ];
            };
          }(c || (t2.color = c = {})), function(e3) {
            let t3, i3;
            if (!s2.isNode) {
              const e4 = document.createElement("canvas");
              e4.width = 1, e4.height = 1;
              const s3 = e4.getContext("2d", {
                willReadFrequently: true
              });
              s3 && (t3 = s3, t3.globalCompositeOperation = "copy", i3 = t3.createLinearGradient(0, 0, 1, 1));
            }
            e3.toColor = function(e4) {
              if (e4.match(/#[\da-f]{3,8}/i)) switch (e4.length) {
                case 4:
                  return r = parseInt(e4.slice(1, 2).repeat(2), 16), n = parseInt(e4.slice(2, 3).repeat(2), 16), o = parseInt(e4.slice(3, 4).repeat(2), 16), _2.toColor(r, n, o);
                case 5:
                  return r = parseInt(e4.slice(1, 2).repeat(2), 16), n = parseInt(e4.slice(2, 3).repeat(2), 16), o = parseInt(e4.slice(3, 4).repeat(2), 16), a = parseInt(e4.slice(4, 5).repeat(2), 16), _2.toColor(r, n, o, a);
                case 7:
                  return {
                    css: e4,
                    rgba: (parseInt(e4.slice(1), 16) << 8 | 255) >>> 0
                  };
                case 9:
                  return {
                    css: e4,
                    rgba: parseInt(e4.slice(1), 16) >>> 0
                  };
              }
              const s3 = e4.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,\s*(0|1|\d?\.(\d+))\s*)?\)/);
              if (s3) return r = parseInt(s3[1]), n = parseInt(s3[2]), o = parseInt(s3[3]), a = Math.round(255 * (void 0 === s3[5] ? 1 : parseFloat(s3[5]))), _2.toColor(r, n, o, a);
              if (!t3 || !i3) throw new Error("css.toColor: Unsupported css format");
              if (t3.fillStyle = i3, t3.fillStyle = e4, "string" != typeof t3.fillStyle) throw new Error("css.toColor: Unsupported css format");
              if (t3.fillRect(0, 0, 1, 1), [r, n, o, a] = t3.getImageData(0, 0, 1, 1).data, 255 !== a) throw new Error("css.toColor: Unsupported css format");
              return {
                rgba: h2.toRgba(r, n, o, a),
                css: e4
              };
            };
          }(l2 || (t2.css = l2 = {})), function(e3) {
            function t3(e4, t4, i3) {
              const s3 = e4 / 255, r2 = t4 / 255, n2 = i3 / 255;
              return 0.2126 * (s3 <= 0.03928 ? s3 / 12.92 : Math.pow((s3 + 0.055) / 1.055, 2.4)) + 0.7152 * (r2 <= 0.03928 ? r2 / 12.92 : Math.pow((r2 + 0.055) / 1.055, 2.4)) + 0.0722 * (n2 <= 0.03928 ? n2 / 12.92 : Math.pow((n2 + 0.055) / 1.055, 2.4));
            }
            e3.relativeLuminance = function(e4) {
              return t3(e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4);
            }, e3.relativeLuminance2 = t3;
          }(d || (t2.rgb = d = {})), function(e3) {
            function t3(e4, t4, i4) {
              const s3 = e4 >> 24 & 255, r2 = e4 >> 16 & 255, n2 = e4 >> 8 & 255;
              let o2 = t4 >> 24 & 255, a2 = t4 >> 16 & 255, h3 = t4 >> 8 & 255, c2 = f(d.relativeLuminance2(o2, a2, h3), d.relativeLuminance2(s3, r2, n2));
              for (; c2 < i4 && (o2 > 0 || a2 > 0 || h3 > 0); ) o2 -= Math.max(0, Math.ceil(0.1 * o2)), a2 -= Math.max(0, Math.ceil(0.1 * a2)), h3 -= Math.max(0, Math.ceil(0.1 * h3)), c2 = f(d.relativeLuminance2(o2, a2, h3), d.relativeLuminance2(s3, r2, n2));
              return (o2 << 24 | a2 << 16 | h3 << 8 | 255) >>> 0;
            }
            function i3(e4, t4, i4) {
              const s3 = e4 >> 24 & 255, r2 = e4 >> 16 & 255, n2 = e4 >> 8 & 255;
              let o2 = t4 >> 24 & 255, a2 = t4 >> 16 & 255, h3 = t4 >> 8 & 255, c2 = f(d.relativeLuminance2(o2, a2, h3), d.relativeLuminance2(s3, r2, n2));
              for (; c2 < i4 && (o2 < 255 || a2 < 255 || h3 < 255); ) o2 = Math.min(255, o2 + Math.ceil(0.1 * (255 - o2))), a2 = Math.min(255, a2 + Math.ceil(0.1 * (255 - a2))), h3 = Math.min(255, h3 + Math.ceil(0.1 * (255 - h3))), c2 = f(d.relativeLuminance2(o2, a2, h3), d.relativeLuminance2(s3, r2, n2));
              return (o2 << 24 | a2 << 16 | h3 << 8 | 255) >>> 0;
            }
            e3.ensureContrastRatio = function(e4, s3, r2) {
              const n2 = d.relativeLuminance(e4 >> 8), o2 = d.relativeLuminance(s3 >> 8);
              if (f(n2, o2) < r2) {
                if (o2 < n2) {
                  const o3 = t3(e4, s3, r2), a3 = f(n2, d.relativeLuminance(o3 >> 8));
                  if (a3 < r2) {
                    const t4 = i3(e4, s3, r2);
                    return a3 > f(n2, d.relativeLuminance(t4 >> 8)) ? o3 : t4;
                  }
                  return o3;
                }
                const a2 = i3(e4, s3, r2), h3 = f(n2, d.relativeLuminance(a2 >> 8));
                if (h3 < r2) {
                  const i4 = t3(e4, s3, r2);
                  return h3 > f(n2, d.relativeLuminance(i4 >> 8)) ? a2 : i4;
                }
                return a2;
              }
            }, e3.reduceLuminance = t3, e3.increaseLuminance = i3, e3.toChannels = function(e4) {
              return [
                e4 >> 24 & 255,
                e4 >> 16 & 255,
                e4 >> 8 & 255,
                255 & e4
              ];
            }, e3.toColor = function(e4, t4, i4, s3) {
              return {
                css: h2.toCss(e4, t4, i4, s3),
                rgba: h2.toRgba(e4, t4, i4, s3)
              };
            };
          }(_2 || (t2.rgba = _2 = {})), t2.toPaddedHex = u, t2.contrastRatio = f;
        },
        8969: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CoreTerminal = void 0;
          const s2 = i2(844), r = i2(2585), n = i2(4348), o = i2(7866), a = i2(744), h2 = i2(7302), c = i2(6975), l2 = i2(8460), d = i2(1753), _2 = i2(1480), u = i2(7994), f = i2(9282), v2 = i2(5435), p = i2(5981), g = i2(2660);
          let m = false;
          class S extends s2.Disposable {
            get onScroll() {
              return this._onScrollApi || (this._onScrollApi = this.register(new l2.EventEmitter()), this._onScroll.event((e3) => {
                var t3;
                null === (t3 = this._onScrollApi) || void 0 === t3 || t3.fire(e3.position);
              })), this._onScrollApi.event;
            }
            get cols() {
              return this._bufferService.cols;
            }
            get rows() {
              return this._bufferService.rows;
            }
            get buffers() {
              return this._bufferService.buffers;
            }
            get options() {
              return this.optionsService.options;
            }
            set options(e3) {
              for (const t3 in e3) this.optionsService.options[t3] = e3[t3];
            }
            constructor(e3) {
              super(), this._windowsWrappingHeuristics = this.register(new s2.MutableDisposable()), this._onBinary = this.register(new l2.EventEmitter()), this.onBinary = this._onBinary.event, this._onData = this.register(new l2.EventEmitter()), this.onData = this._onData.event, this._onLineFeed = this.register(new l2.EventEmitter()), this.onLineFeed = this._onLineFeed.event, this._onResize = this.register(new l2.EventEmitter()), this.onResize = this._onResize.event, this._onWriteParsed = this.register(new l2.EventEmitter()), this.onWriteParsed = this._onWriteParsed.event, this._onScroll = this.register(new l2.EventEmitter()), this._instantiationService = new n.InstantiationService(), this.optionsService = this.register(new h2.OptionsService(e3)), this._instantiationService.setService(r.IOptionsService, this.optionsService), this._bufferService = this.register(this._instantiationService.createInstance(a.BufferService)), this._instantiationService.setService(r.IBufferService, this._bufferService), this._logService = this.register(this._instantiationService.createInstance(o.LogService)), this._instantiationService.setService(r.ILogService, this._logService), this.coreService = this.register(this._instantiationService.createInstance(c.CoreService)), this._instantiationService.setService(r.ICoreService, this.coreService), this.coreMouseService = this.register(this._instantiationService.createInstance(d.CoreMouseService)), this._instantiationService.setService(r.ICoreMouseService, this.coreMouseService), this.unicodeService = this.register(this._instantiationService.createInstance(_2.UnicodeService)), this._instantiationService.setService(r.IUnicodeService, this.unicodeService), this._charsetService = this._instantiationService.createInstance(u.CharsetService), this._instantiationService.setService(r.ICharsetService, this._charsetService), this._oscLinkService = this._instantiationService.createInstance(g.OscLinkService), this._instantiationService.setService(r.IOscLinkService, this._oscLinkService), this._inputHandler = this.register(new v2.InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService)), this.register((0, l2.forwardEvent)(this._inputHandler.onLineFeed, this._onLineFeed)), this.register(this._inputHandler), this.register((0, l2.forwardEvent)(this._bufferService.onResize, this._onResize)), this.register((0, l2.forwardEvent)(this.coreService.onData, this._onData)), this.register((0, l2.forwardEvent)(this.coreService.onBinary, this._onBinary)), this.register(this.coreService.onRequestScrollToBottom(() => this.scrollToBottom())), this.register(this.coreService.onUserInput(() => this._writeBuffer.handleUserInput())), this.register(this.optionsService.onMultipleOptionChange([
                "windowsMode",
                "windowsPty"
              ], () => this._handleWindowsPtyOptionChange())), this.register(this._bufferService.onScroll((e4) => {
                this._onScroll.fire({
                  position: this._bufferService.buffer.ydisp,
                  source: 0
                }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);
              })), this.register(this._inputHandler.onScroll((e4) => {
                this._onScroll.fire({
                  position: this._bufferService.buffer.ydisp,
                  source: 0
                }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);
              })), this._writeBuffer = this.register(new p.WriteBuffer((e4, t3) => this._inputHandler.parse(e4, t3))), this.register((0, l2.forwardEvent)(this._writeBuffer.onWriteParsed, this._onWriteParsed));
            }
            write(e3, t3) {
              this._writeBuffer.write(e3, t3);
            }
            writeSync(e3, t3) {
              this._logService.logLevel <= r.LogLevelEnum.WARN && !m && (this._logService.warn("writeSync is unreliable and will be removed soon."), m = true), this._writeBuffer.writeSync(e3, t3);
            }
            resize(e3, t3) {
              isNaN(e3) || isNaN(t3) || (e3 = Math.max(e3, a.MINIMUM_COLS), t3 = Math.max(t3, a.MINIMUM_ROWS), this._bufferService.resize(e3, t3));
            }
            scroll(e3, t3 = false) {
              this._bufferService.scroll(e3, t3);
            }
            scrollLines(e3, t3, i3) {
              this._bufferService.scrollLines(e3, t3, i3);
            }
            scrollPages(e3) {
              this.scrollLines(e3 * (this.rows - 1));
            }
            scrollToTop() {
              this.scrollLines(-this._bufferService.buffer.ydisp);
            }
            scrollToBottom() {
              this.scrollLines(this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);
            }
            scrollToLine(e3) {
              const t3 = e3 - this._bufferService.buffer.ydisp;
              0 !== t3 && this.scrollLines(t3);
            }
            registerEscHandler(e3, t3) {
              return this._inputHandler.registerEscHandler(e3, t3);
            }
            registerDcsHandler(e3, t3) {
              return this._inputHandler.registerDcsHandler(e3, t3);
            }
            registerCsiHandler(e3, t3) {
              return this._inputHandler.registerCsiHandler(e3, t3);
            }
            registerOscHandler(e3, t3) {
              return this._inputHandler.registerOscHandler(e3, t3);
            }
            _setup() {
              this._handleWindowsPtyOptionChange();
            }
            reset() {
              this._inputHandler.reset(), this._bufferService.reset(), this._charsetService.reset(), this.coreService.reset(), this.coreMouseService.reset();
            }
            _handleWindowsPtyOptionChange() {
              let e3 = false;
              const t3 = this.optionsService.rawOptions.windowsPty;
              t3 && void 0 !== t3.buildNumber && void 0 !== t3.buildNumber ? e3 = !!("conpty" === t3.backend && t3.buildNumber < 21376) : this.optionsService.rawOptions.windowsMode && (e3 = true), e3 ? this._enableWindowsWrappingHeuristics() : this._windowsWrappingHeuristics.clear();
            }
            _enableWindowsWrappingHeuristics() {
              if (!this._windowsWrappingHeuristics.value) {
                const e3 = [];
                e3.push(this.onLineFeed(f.updateWindowsModeWrappedState.bind(null, this._bufferService))), e3.push(this.registerCsiHandler({
                  final: "H"
                }, () => ((0, f.updateWindowsModeWrappedState)(this._bufferService), false))), this._windowsWrappingHeuristics.value = (0, s2.toDisposable)(() => {
                  for (const t3 of e3) t3.dispose();
                });
              }
            }
          }
          t2.CoreTerminal = S;
        },
        8460: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.forwardEvent = t2.EventEmitter = void 0, t2.EventEmitter = class {
            constructor() {
              this._listeners = [], this._disposed = false;
            }
            get event() {
              return this._event || (this._event = (e3) => (this._listeners.push(e3), {
                dispose: () => {
                  if (!this._disposed) {
                    for (let t3 = 0; t3 < this._listeners.length; t3++) if (this._listeners[t3] === e3) return void this._listeners.splice(t3, 1);
                  }
                }
              })), this._event;
            }
            fire(e3, t3) {
              const i2 = [];
              for (let e4 = 0; e4 < this._listeners.length; e4++) i2.push(this._listeners[e4]);
              for (let s2 = 0; s2 < i2.length; s2++) i2[s2].call(void 0, e3, t3);
            }
            dispose() {
              this.clearListeners(), this._disposed = true;
            }
            clearListeners() {
              this._listeners && (this._listeners.length = 0);
            }
          }, t2.forwardEvent = function(e3, t3) {
            return e3((e4) => t3.fire(e4));
          };
        },
        5435: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.InputHandler = t2.WindowsOptionsReportType = void 0;
          const n = i2(2584), o = i2(7116), a = i2(2015), h2 = i2(844), c = i2(482), l2 = i2(8437), d = i2(8460), _2 = i2(643), u = i2(511), f = i2(3734), v2 = i2(2585), p = i2(6242), g = i2(6351), m = i2(5941), S = {
            "(": 0,
            ")": 1,
            "*": 2,
            "+": 3,
            "-": 1,
            ".": 2
          }, C = 131072;
          function b(e3, t3) {
            if (e3 > 24) return t3.setWinLines || false;
            switch (e3) {
              case 1:
                return !!t3.restoreWin;
              case 2:
                return !!t3.minimizeWin;
              case 3:
                return !!t3.setWinPosition;
              case 4:
                return !!t3.setWinSizePixels;
              case 5:
                return !!t3.raiseWin;
              case 6:
                return !!t3.lowerWin;
              case 7:
                return !!t3.refreshWin;
              case 8:
                return !!t3.setWinSizeChars;
              case 9:
                return !!t3.maximizeWin;
              case 10:
                return !!t3.fullscreenWin;
              case 11:
                return !!t3.getWinState;
              case 13:
                return !!t3.getWinPosition;
              case 14:
                return !!t3.getWinSizePixels;
              case 15:
                return !!t3.getScreenSizePixels;
              case 16:
                return !!t3.getCellSizePixels;
              case 18:
                return !!t3.getWinSizeChars;
              case 19:
                return !!t3.getScreenSizeChars;
              case 20:
                return !!t3.getIconTitle;
              case 21:
                return !!t3.getWinTitle;
              case 22:
                return !!t3.pushTitle;
              case 23:
                return !!t3.popTitle;
              case 24:
                return !!t3.setWinLines;
            }
            return false;
          }
          var y;
          !function(e3) {
            e3[e3.GET_WIN_SIZE_PIXELS = 0] = "GET_WIN_SIZE_PIXELS", e3[e3.GET_CELL_SIZE_PIXELS = 1] = "GET_CELL_SIZE_PIXELS";
          }(y || (t2.WindowsOptionsReportType = y = {}));
          let w = 0;
          class E extends h2.Disposable {
            getAttrData() {
              return this._curAttrData;
            }
            constructor(e3, t3, i3, s3, r2, h3, _3, f2, v3 = new a.EscapeSequenceParser()) {
              super(), this._bufferService = e3, this._charsetService = t3, this._coreService = i3, this._logService = s3, this._optionsService = r2, this._oscLinkService = h3, this._coreMouseService = _3, this._unicodeService = f2, this._parser = v3, this._parseBuffer = new Uint32Array(4096), this._stringDecoder = new c.StringToUtf32(), this._utf8Decoder = new c.Utf8ToUtf32(), this._workCell = new u.CellData(), this._windowTitle = "", this._iconName = "", this._windowTitleStack = [], this._iconNameStack = [], this._curAttrData = l2.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l2.DEFAULT_ATTR_DATA.clone(), this._onRequestBell = this.register(new d.EventEmitter()), this.onRequestBell = this._onRequestBell.event, this._onRequestRefreshRows = this.register(new d.EventEmitter()), this.onRequestRefreshRows = this._onRequestRefreshRows.event, this._onRequestReset = this.register(new d.EventEmitter()), this.onRequestReset = this._onRequestReset.event, this._onRequestSendFocus = this.register(new d.EventEmitter()), this.onRequestSendFocus = this._onRequestSendFocus.event, this._onRequestSyncScrollBar = this.register(new d.EventEmitter()), this.onRequestSyncScrollBar = this._onRequestSyncScrollBar.event, this._onRequestWindowsOptionsReport = this.register(new d.EventEmitter()), this.onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event, this._onA11yChar = this.register(new d.EventEmitter()), this.onA11yChar = this._onA11yChar.event, this._onA11yTab = this.register(new d.EventEmitter()), this.onA11yTab = this._onA11yTab.event, this._onCursorMove = this.register(new d.EventEmitter()), this.onCursorMove = this._onCursorMove.event, this._onLineFeed = this.register(new d.EventEmitter()), this.onLineFeed = this._onLineFeed.event, this._onScroll = this.register(new d.EventEmitter()), this.onScroll = this._onScroll.event, this._onTitleChange = this.register(new d.EventEmitter()), this.onTitleChange = this._onTitleChange.event, this._onColor = this.register(new d.EventEmitter()), this.onColor = this._onColor.event, this._parseStack = {
                paused: false,
                cursorStartX: 0,
                cursorStartY: 0,
                decodedLength: 0,
                position: 0
              }, this._specialColors = [
                256,
                257,
                258
              ], this.register(this._parser), this._dirtyRowTracker = new k2(this._bufferService), this._activeBuffer = this._bufferService.buffer, this.register(this._bufferService.buffers.onBufferActivate((e4) => this._activeBuffer = e4.activeBuffer)), this._parser.setCsiHandlerFallback((e4, t4) => {
                this._logService.debug("Unknown CSI code: ", {
                  identifier: this._parser.identToString(e4),
                  params: t4.toArray()
                });
              }), this._parser.setEscHandlerFallback((e4) => {
                this._logService.debug("Unknown ESC code: ", {
                  identifier: this._parser.identToString(e4)
                });
              }), this._parser.setExecuteHandlerFallback((e4) => {
                this._logService.debug("Unknown EXECUTE code: ", {
                  code: e4
                });
              }), this._parser.setOscHandlerFallback((e4, t4, i4) => {
                this._logService.debug("Unknown OSC code: ", {
                  identifier: e4,
                  action: t4,
                  data: i4
                });
              }), this._parser.setDcsHandlerFallback((e4, t4, i4) => {
                "HOOK" === t4 && (i4 = i4.toArray()), this._logService.debug("Unknown DCS code: ", {
                  identifier: this._parser.identToString(e4),
                  action: t4,
                  payload: i4
                });
              }), this._parser.setPrintHandler((e4, t4, i4) => this.print(e4, t4, i4)), this._parser.registerCsiHandler({
                final: "@"
              }, (e4) => this.insertChars(e4)), this._parser.registerCsiHandler({
                intermediates: " ",
                final: "@"
              }, (e4) => this.scrollLeft(e4)), this._parser.registerCsiHandler({
                final: "A"
              }, (e4) => this.cursorUp(e4)), this._parser.registerCsiHandler({
                intermediates: " ",
                final: "A"
              }, (e4) => this.scrollRight(e4)), this._parser.registerCsiHandler({
                final: "B"
              }, (e4) => this.cursorDown(e4)), this._parser.registerCsiHandler({
                final: "C"
              }, (e4) => this.cursorForward(e4)), this._parser.registerCsiHandler({
                final: "D"
              }, (e4) => this.cursorBackward(e4)), this._parser.registerCsiHandler({
                final: "E"
              }, (e4) => this.cursorNextLine(e4)), this._parser.registerCsiHandler({
                final: "F"
              }, (e4) => this.cursorPrecedingLine(e4)), this._parser.registerCsiHandler({
                final: "G"
              }, (e4) => this.cursorCharAbsolute(e4)), this._parser.registerCsiHandler({
                final: "H"
              }, (e4) => this.cursorPosition(e4)), this._parser.registerCsiHandler({
                final: "I"
              }, (e4) => this.cursorForwardTab(e4)), this._parser.registerCsiHandler({
                final: "J"
              }, (e4) => this.eraseInDisplay(e4, false)), this._parser.registerCsiHandler({
                prefix: "?",
                final: "J"
              }, (e4) => this.eraseInDisplay(e4, true)), this._parser.registerCsiHandler({
                final: "K"
              }, (e4) => this.eraseInLine(e4, false)), this._parser.registerCsiHandler({
                prefix: "?",
                final: "K"
              }, (e4) => this.eraseInLine(e4, true)), this._parser.registerCsiHandler({
                final: "L"
              }, (e4) => this.insertLines(e4)), this._parser.registerCsiHandler({
                final: "M"
              }, (e4) => this.deleteLines(e4)), this._parser.registerCsiHandler({
                final: "P"
              }, (e4) => this.deleteChars(e4)), this._parser.registerCsiHandler({
                final: "S"
              }, (e4) => this.scrollUp(e4)), this._parser.registerCsiHandler({
                final: "T"
              }, (e4) => this.scrollDown(e4)), this._parser.registerCsiHandler({
                final: "X"
              }, (e4) => this.eraseChars(e4)), this._parser.registerCsiHandler({
                final: "Z"
              }, (e4) => this.cursorBackwardTab(e4)), this._parser.registerCsiHandler({
                final: "`"
              }, (e4) => this.charPosAbsolute(e4)), this._parser.registerCsiHandler({
                final: "a"
              }, (e4) => this.hPositionRelative(e4)), this._parser.registerCsiHandler({
                final: "b"
              }, (e4) => this.repeatPrecedingCharacter(e4)), this._parser.registerCsiHandler({
                final: "c"
              }, (e4) => this.sendDeviceAttributesPrimary(e4)), this._parser.registerCsiHandler({
                prefix: ">",
                final: "c"
              }, (e4) => this.sendDeviceAttributesSecondary(e4)), this._parser.registerCsiHandler({
                final: "d"
              }, (e4) => this.linePosAbsolute(e4)), this._parser.registerCsiHandler({
                final: "e"
              }, (e4) => this.vPositionRelative(e4)), this._parser.registerCsiHandler({
                final: "f"
              }, (e4) => this.hVPosition(e4)), this._parser.registerCsiHandler({
                final: "g"
              }, (e4) => this.tabClear(e4)), this._parser.registerCsiHandler({
                final: "h"
              }, (e4) => this.setMode(e4)), this._parser.registerCsiHandler({
                prefix: "?",
                final: "h"
              }, (e4) => this.setModePrivate(e4)), this._parser.registerCsiHandler({
                final: "l"
              }, (e4) => this.resetMode(e4)), this._parser.registerCsiHandler({
                prefix: "?",
                final: "l"
              }, (e4) => this.resetModePrivate(e4)), this._parser.registerCsiHandler({
                final: "m"
              }, (e4) => this.charAttributes(e4)), this._parser.registerCsiHandler({
                final: "n"
              }, (e4) => this.deviceStatus(e4)), this._parser.registerCsiHandler({
                prefix: "?",
                final: "n"
              }, (e4) => this.deviceStatusPrivate(e4)), this._parser.registerCsiHandler({
                intermediates: "!",
                final: "p"
              }, (e4) => this.softReset(e4)), this._parser.registerCsiHandler({
                intermediates: " ",
                final: "q"
              }, (e4) => this.setCursorStyle(e4)), this._parser.registerCsiHandler({
                final: "r"
              }, (e4) => this.setScrollRegion(e4)), this._parser.registerCsiHandler({
                final: "s"
              }, (e4) => this.saveCursor(e4)), this._parser.registerCsiHandler({
                final: "t"
              }, (e4) => this.windowOptions(e4)), this._parser.registerCsiHandler({
                final: "u"
              }, (e4) => this.restoreCursor(e4)), this._parser.registerCsiHandler({
                intermediates: "'",
                final: "}"
              }, (e4) => this.insertColumns(e4)), this._parser.registerCsiHandler({
                intermediates: "'",
                final: "~"
              }, (e4) => this.deleteColumns(e4)), this._parser.registerCsiHandler({
                intermediates: '"',
                final: "q"
              }, (e4) => this.selectProtected(e4)), this._parser.registerCsiHandler({
                intermediates: "$",
                final: "p"
              }, (e4) => this.requestMode(e4, true)), this._parser.registerCsiHandler({
                prefix: "?",
                intermediates: "$",
                final: "p"
              }, (e4) => this.requestMode(e4, false)), this._parser.setExecuteHandler(n.C0.BEL, () => this.bell()), this._parser.setExecuteHandler(n.C0.LF, () => this.lineFeed()), this._parser.setExecuteHandler(n.C0.VT, () => this.lineFeed()), this._parser.setExecuteHandler(n.C0.FF, () => this.lineFeed()), this._parser.setExecuteHandler(n.C0.CR, () => this.carriageReturn()), this._parser.setExecuteHandler(n.C0.BS, () => this.backspace()), this._parser.setExecuteHandler(n.C0.HT, () => this.tab()), this._parser.setExecuteHandler(n.C0.SO, () => this.shiftOut()), this._parser.setExecuteHandler(n.C0.SI, () => this.shiftIn()), this._parser.setExecuteHandler(n.C1.IND, () => this.index()), this._parser.setExecuteHandler(n.C1.NEL, () => this.nextLine()), this._parser.setExecuteHandler(n.C1.HTS, () => this.tabSet()), this._parser.registerOscHandler(0, new p.OscHandler((e4) => (this.setTitle(e4), this.setIconName(e4), true))), this._parser.registerOscHandler(1, new p.OscHandler((e4) => this.setIconName(e4))), this._parser.registerOscHandler(2, new p.OscHandler((e4) => this.setTitle(e4))), this._parser.registerOscHandler(4, new p.OscHandler((e4) => this.setOrReportIndexedColor(e4))), this._parser.registerOscHandler(8, new p.OscHandler((e4) => this.setHyperlink(e4))), this._parser.registerOscHandler(10, new p.OscHandler((e4) => this.setOrReportFgColor(e4))), this._parser.registerOscHandler(11, new p.OscHandler((e4) => this.setOrReportBgColor(e4))), this._parser.registerOscHandler(12, new p.OscHandler((e4) => this.setOrReportCursorColor(e4))), this._parser.registerOscHandler(104, new p.OscHandler((e4) => this.restoreIndexedColor(e4))), this._parser.registerOscHandler(110, new p.OscHandler((e4) => this.restoreFgColor(e4))), this._parser.registerOscHandler(111, new p.OscHandler((e4) => this.restoreBgColor(e4))), this._parser.registerOscHandler(112, new p.OscHandler((e4) => this.restoreCursorColor(e4))), this._parser.registerEscHandler({
                final: "7"
              }, () => this.saveCursor()), this._parser.registerEscHandler({
                final: "8"
              }, () => this.restoreCursor()), this._parser.registerEscHandler({
                final: "D"
              }, () => this.index()), this._parser.registerEscHandler({
                final: "E"
              }, () => this.nextLine()), this._parser.registerEscHandler({
                final: "H"
              }, () => this.tabSet()), this._parser.registerEscHandler({
                final: "M"
              }, () => this.reverseIndex()), this._parser.registerEscHandler({
                final: "="
              }, () => this.keypadApplicationMode()), this._parser.registerEscHandler({
                final: ">"
              }, () => this.keypadNumericMode()), this._parser.registerEscHandler({
                final: "c"
              }, () => this.fullReset()), this._parser.registerEscHandler({
                final: "n"
              }, () => this.setgLevel(2)), this._parser.registerEscHandler({
                final: "o"
              }, () => this.setgLevel(3)), this._parser.registerEscHandler({
                final: "|"
              }, () => this.setgLevel(3)), this._parser.registerEscHandler({
                final: "}"
              }, () => this.setgLevel(2)), this._parser.registerEscHandler({
                final: "~"
              }, () => this.setgLevel(1)), this._parser.registerEscHandler({
                intermediates: "%",
                final: "@"
              }, () => this.selectDefaultCharset()), this._parser.registerEscHandler({
                intermediates: "%",
                final: "G"
              }, () => this.selectDefaultCharset());
              for (const e4 in o.CHARSETS) this._parser.registerEscHandler({
                intermediates: "(",
                final: e4
              }, () => this.selectCharset("(" + e4)), this._parser.registerEscHandler({
                intermediates: ")",
                final: e4
              }, () => this.selectCharset(")" + e4)), this._parser.registerEscHandler({
                intermediates: "*",
                final: e4
              }, () => this.selectCharset("*" + e4)), this._parser.registerEscHandler({
                intermediates: "+",
                final: e4
              }, () => this.selectCharset("+" + e4)), this._parser.registerEscHandler({
                intermediates: "-",
                final: e4
              }, () => this.selectCharset("-" + e4)), this._parser.registerEscHandler({
                intermediates: ".",
                final: e4
              }, () => this.selectCharset("." + e4)), this._parser.registerEscHandler({
                intermediates: "/",
                final: e4
              }, () => this.selectCharset("/" + e4));
              this._parser.registerEscHandler({
                intermediates: "#",
                final: "8"
              }, () => this.screenAlignmentPattern()), this._parser.setErrorHandler((e4) => (this._logService.error("Parsing error: ", e4), e4)), this._parser.registerDcsHandler({
                intermediates: "$",
                final: "q"
              }, new g.DcsHandler((e4, t4) => this.requestStatusString(e4, t4)));
            }
            _preserveStack(e3, t3, i3, s3) {
              this._parseStack.paused = true, this._parseStack.cursorStartX = e3, this._parseStack.cursorStartY = t3, this._parseStack.decodedLength = i3, this._parseStack.position = s3;
            }
            _logSlowResolvingAsync(e3) {
              this._logService.logLevel <= v2.LogLevelEnum.WARN && Promise.race([
                e3,
                new Promise((e4, t3) => setTimeout(() => t3("#SLOW_TIMEOUT"), 5e3))
              ]).catch((e4) => {
                if ("#SLOW_TIMEOUT" !== e4) throw e4;
                console.warn("async parser handler taking longer than 5000 ms");
              });
            }
            _getCurrentLinkId() {
              return this._curAttrData.extended.urlId;
            }
            parse(e3, t3) {
              let i3, s3 = this._activeBuffer.x, r2 = this._activeBuffer.y, n2 = 0;
              const o2 = this._parseStack.paused;
              if (o2) {
                if (i3 = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, t3)) return this._logSlowResolvingAsync(i3), i3;
                s3 = this._parseStack.cursorStartX, r2 = this._parseStack.cursorStartY, this._parseStack.paused = false, e3.length > C && (n2 = this._parseStack.position + C);
              }
              if (this._logService.logLevel <= v2.LogLevelEnum.DEBUG && this._logService.debug("parsing data" + ("string" == typeof e3 ? ` "${e3}"` : ` "${Array.prototype.map.call(e3, (e4) => String.fromCharCode(e4)).join("")}"`), "string" == typeof e3 ? e3.split("").map((e4) => e4.charCodeAt(0)) : e3), this._parseBuffer.length < e3.length && this._parseBuffer.length < C && (this._parseBuffer = new Uint32Array(Math.min(e3.length, C))), o2 || this._dirtyRowTracker.clearRange(), e3.length > C) for (let t4 = n2; t4 < e3.length; t4 += C) {
                const n3 = t4 + C < e3.length ? t4 + C : e3.length, o3 = "string" == typeof e3 ? this._stringDecoder.decode(e3.substring(t4, n3), this._parseBuffer) : this._utf8Decoder.decode(e3.subarray(t4, n3), this._parseBuffer);
                if (i3 = this._parser.parse(this._parseBuffer, o3)) return this._preserveStack(s3, r2, o3, t4), this._logSlowResolvingAsync(i3), i3;
              }
              else if (!o2) {
                const t4 = "string" == typeof e3 ? this._stringDecoder.decode(e3, this._parseBuffer) : this._utf8Decoder.decode(e3, this._parseBuffer);
                if (i3 = this._parser.parse(this._parseBuffer, t4)) return this._preserveStack(s3, r2, t4, 0), this._logSlowResolvingAsync(i3), i3;
              }
              this._activeBuffer.x === s3 && this._activeBuffer.y === r2 || this._onCursorMove.fire(), this._onRequestRefreshRows.fire(this._dirtyRowTracker.start, this._dirtyRowTracker.end);
            }
            print(e3, t3, i3) {
              let s3, r2;
              const n2 = this._charsetService.charset, o2 = this._optionsService.rawOptions.screenReaderMode, a2 = this._bufferService.cols, h3 = this._coreService.decPrivateModes.wraparound, l3 = this._coreService.modes.insertMode, d2 = this._curAttrData;
              let u2 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
              this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._activeBuffer.x && i3 - t3 > 0 && 2 === u2.getWidth(this._activeBuffer.x - 1) && u2.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, d2.fg, d2.bg, d2.extended);
              for (let f2 = t3; f2 < i3; ++f2) {
                if (s3 = e3[f2], r2 = this._unicodeService.wcwidth(s3), s3 < 127 && n2) {
                  const e4 = n2[String.fromCharCode(s3)];
                  e4 && (s3 = e4.charCodeAt(0));
                }
                if (o2 && this._onA11yChar.fire((0, c.stringFromCodePoint)(s3)), this._getCurrentLinkId() && this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y), r2 || !this._activeBuffer.x) {
                  if (this._activeBuffer.x + r2 - 1 >= a2) {
                    if (h3) {
                      for (; this._activeBuffer.x < a2; ) u2.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, d2.fg, d2.bg, d2.extended);
                      this._activeBuffer.x = 0, this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData(), true)) : (this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = true), u2 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                    } else if (this._activeBuffer.x = a2 - 1, 2 === r2) continue;
                  }
                  if (l3 && (u2.insertCells(this._activeBuffer.x, r2, this._activeBuffer.getNullCell(d2), d2), 2 === u2.getWidth(a2 - 1) && u2.setCellFromCodePoint(a2 - 1, _2.NULL_CELL_CODE, _2.NULL_CELL_WIDTH, d2.fg, d2.bg, d2.extended)), u2.setCellFromCodePoint(this._activeBuffer.x++, s3, r2, d2.fg, d2.bg, d2.extended), r2 > 0) for (; --r2; ) u2.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, d2.fg, d2.bg, d2.extended);
                } else u2.getWidth(this._activeBuffer.x - 1) ? u2.addCodepointToCell(this._activeBuffer.x - 1, s3) : u2.addCodepointToCell(this._activeBuffer.x - 2, s3);
              }
              i3 - t3 > 0 && (u2.loadCell(this._activeBuffer.x - 1, this._workCell), 2 === this._workCell.getWidth() || this._workCell.getCode() > 65535 ? this._parser.precedingCodepoint = 0 : this._workCell.isCombined() ? this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0) : this._parser.precedingCodepoint = this._workCell.content), this._activeBuffer.x < a2 && i3 - t3 > 0 && 0 === u2.getWidth(this._activeBuffer.x) && !u2.hasContent(this._activeBuffer.x) && u2.setCellFromCodePoint(this._activeBuffer.x, 0, 1, d2.fg, d2.bg, d2.extended), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
            }
            registerCsiHandler(e3, t3) {
              return "t" !== e3.final || e3.prefix || e3.intermediates ? this._parser.registerCsiHandler(e3, t3) : this._parser.registerCsiHandler(e3, (e4) => !b(e4.params[0], this._optionsService.rawOptions.windowOptions) || t3(e4));
            }
            registerDcsHandler(e3, t3) {
              return this._parser.registerDcsHandler(e3, new g.DcsHandler(t3));
            }
            registerEscHandler(e3, t3) {
              return this._parser.registerEscHandler(e3, t3);
            }
            registerOscHandler(e3, t3) {
              return this._parser.registerOscHandler(e3, new p.OscHandler(t3));
            }
            bell() {
              return this._onRequestBell.fire(), true;
            }
            lineFeed() {
              return this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._optionsService.rawOptions.convertEol && (this._activeBuffer.x = 0), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows ? this._activeBuffer.y = this._bufferService.rows - 1 : this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = false, this._activeBuffer.x >= this._bufferService.cols && this._activeBuffer.x--, this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._onLineFeed.fire(), true;
            }
            carriageReturn() {
              return this._activeBuffer.x = 0, true;
            }
            backspace() {
              var e3;
              if (!this._coreService.decPrivateModes.reverseWraparound) return this._restrictCursor(), this._activeBuffer.x > 0 && this._activeBuffer.x--, true;
              if (this._restrictCursor(this._bufferService.cols), this._activeBuffer.x > 0) this._activeBuffer.x--;
              else if (0 === this._activeBuffer.x && this._activeBuffer.y > this._activeBuffer.scrollTop && this._activeBuffer.y <= this._activeBuffer.scrollBottom && (null === (e3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)) || void 0 === e3 ? void 0 : e3.isWrapped)) {
                this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = false, this._activeBuffer.y--, this._activeBuffer.x = this._bufferService.cols - 1;
                const e4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                e4.hasWidth(this._activeBuffer.x) && !e4.hasContent(this._activeBuffer.x) && this._activeBuffer.x--;
              }
              return this._restrictCursor(), true;
            }
            tab() {
              if (this._activeBuffer.x >= this._bufferService.cols) return true;
              const e3 = this._activeBuffer.x;
              return this._activeBuffer.x = this._activeBuffer.nextStop(), this._optionsService.rawOptions.screenReaderMode && this._onA11yTab.fire(this._activeBuffer.x - e3), true;
            }
            shiftOut() {
              return this._charsetService.setgLevel(1), true;
            }
            shiftIn() {
              return this._charsetService.setgLevel(0), true;
            }
            _restrictCursor(e3 = this._bufferService.cols - 1) {
              this._activeBuffer.x = Math.min(e3, Math.max(0, this._activeBuffer.x)), this._activeBuffer.y = this._coreService.decPrivateModes.origin ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y)) : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y)), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
            }
            _setCursor(e3, t3) {
              this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._coreService.decPrivateModes.origin ? (this._activeBuffer.x = e3, this._activeBuffer.y = this._activeBuffer.scrollTop + t3) : (this._activeBuffer.x = e3, this._activeBuffer.y = t3), this._restrictCursor(), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
            }
            _moveCursor(e3, t3) {
              this._restrictCursor(), this._setCursor(this._activeBuffer.x + e3, this._activeBuffer.y + t3);
            }
            cursorUp(e3) {
              const t3 = this._activeBuffer.y - this._activeBuffer.scrollTop;
              return t3 >= 0 ? this._moveCursor(0, -Math.min(t3, e3.params[0] || 1)) : this._moveCursor(0, -(e3.params[0] || 1)), true;
            }
            cursorDown(e3) {
              const t3 = this._activeBuffer.scrollBottom - this._activeBuffer.y;
              return t3 >= 0 ? this._moveCursor(0, Math.min(t3, e3.params[0] || 1)) : this._moveCursor(0, e3.params[0] || 1), true;
            }
            cursorForward(e3) {
              return this._moveCursor(e3.params[0] || 1, 0), true;
            }
            cursorBackward(e3) {
              return this._moveCursor(-(e3.params[0] || 1), 0), true;
            }
            cursorNextLine(e3) {
              return this.cursorDown(e3), this._activeBuffer.x = 0, true;
            }
            cursorPrecedingLine(e3) {
              return this.cursorUp(e3), this._activeBuffer.x = 0, true;
            }
            cursorCharAbsolute(e3) {
              return this._setCursor((e3.params[0] || 1) - 1, this._activeBuffer.y), true;
            }
            cursorPosition(e3) {
              return this._setCursor(e3.length >= 2 ? (e3.params[1] || 1) - 1 : 0, (e3.params[0] || 1) - 1), true;
            }
            charPosAbsolute(e3) {
              return this._setCursor((e3.params[0] || 1) - 1, this._activeBuffer.y), true;
            }
            hPositionRelative(e3) {
              return this._moveCursor(e3.params[0] || 1, 0), true;
            }
            linePosAbsolute(e3) {
              return this._setCursor(this._activeBuffer.x, (e3.params[0] || 1) - 1), true;
            }
            vPositionRelative(e3) {
              return this._moveCursor(0, e3.params[0] || 1), true;
            }
            hVPosition(e3) {
              return this.cursorPosition(e3), true;
            }
            tabClear(e3) {
              const t3 = e3.params[0];
              return 0 === t3 ? delete this._activeBuffer.tabs[this._activeBuffer.x] : 3 === t3 && (this._activeBuffer.tabs = {}), true;
            }
            cursorForwardTab(e3) {
              if (this._activeBuffer.x >= this._bufferService.cols) return true;
              let t3 = e3.params[0] || 1;
              for (; t3--; ) this._activeBuffer.x = this._activeBuffer.nextStop();
              return true;
            }
            cursorBackwardTab(e3) {
              if (this._activeBuffer.x >= this._bufferService.cols) return true;
              let t3 = e3.params[0] || 1;
              for (; t3--; ) this._activeBuffer.x = this._activeBuffer.prevStop();
              return true;
            }
            selectProtected(e3) {
              const t3 = e3.params[0];
              return 1 === t3 && (this._curAttrData.bg |= 536870912), 2 !== t3 && 0 !== t3 || (this._curAttrData.bg &= -536870913), true;
            }
            _eraseInBufferLine(e3, t3, i3, s3 = false, r2 = false) {
              const n2 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e3);
              n2.replaceCells(t3, i3, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData(), r2), s3 && (n2.isWrapped = false);
            }
            _resetBufferLine(e3, t3 = false) {
              const i3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e3);
              i3 && (i3.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), t3), this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + e3), i3.isWrapped = false);
            }
            eraseInDisplay(e3, t3 = false) {
              let i3;
              switch (this._restrictCursor(this._bufferService.cols), e3.params[0]) {
                case 0:
                  for (i3 = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i3), this._eraseInBufferLine(i3++, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t3); i3 < this._bufferService.rows; i3++) this._resetBufferLine(i3, t3);
                  this._dirtyRowTracker.markDirty(i3);
                  break;
                case 1:
                  for (i3 = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i3), this._eraseInBufferLine(i3, 0, this._activeBuffer.x + 1, true, t3), this._activeBuffer.x + 1 >= this._bufferService.cols && (this._activeBuffer.lines.get(i3 + 1).isWrapped = false); i3--; ) this._resetBufferLine(i3, t3);
                  this._dirtyRowTracker.markDirty(0);
                  break;
                case 2:
                  for (i3 = this._bufferService.rows, this._dirtyRowTracker.markDirty(i3 - 1); i3--; ) this._resetBufferLine(i3, t3);
                  this._dirtyRowTracker.markDirty(0);
                  break;
                case 3:
                  const e4 = this._activeBuffer.lines.length - this._bufferService.rows;
                  e4 > 0 && (this._activeBuffer.lines.trimStart(e4), this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - e4, 0), this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - e4, 0), this._onScroll.fire(0));
              }
              return true;
            }
            eraseInLine(e3, t3 = false) {
              switch (this._restrictCursor(this._bufferService.cols), e3.params[0]) {
                case 0:
                  this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t3);
                  break;
                case 1:
                  this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, t3);
                  break;
                case 2:
                  this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, t3);
              }
              return this._dirtyRowTracker.markDirty(this._activeBuffer.y), true;
            }
            insertLines(e3) {
              this._restrictCursor();
              let t3 = e3.params[0] || 1;
              if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
              const i3 = this._activeBuffer.ybase + this._activeBuffer.y, s3 = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, r2 = this._bufferService.rows - 1 + this._activeBuffer.ybase - s3 + 1;
              for (; t3--; ) this._activeBuffer.lines.splice(r2 - 1, 1), this._activeBuffer.lines.splice(i3, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, true;
            }
            deleteLines(e3) {
              this._restrictCursor();
              let t3 = e3.params[0] || 1;
              if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
              const i3 = this._activeBuffer.ybase + this._activeBuffer.y;
              let s3;
              for (s3 = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, s3 = this._bufferService.rows - 1 + this._activeBuffer.ybase - s3; t3--; ) this._activeBuffer.lines.splice(i3, 1), this._activeBuffer.lines.splice(s3, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, true;
            }
            insertChars(e3) {
              this._restrictCursor();
              const t3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
              return t3 && (t3.insertCells(this._activeBuffer.x, e3.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), true;
            }
            deleteChars(e3) {
              this._restrictCursor();
              const t3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
              return t3 && (t3.deleteCells(this._activeBuffer.x, e3.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), true;
            }
            scrollUp(e3) {
              let t3 = e3.params[0] || 1;
              for (; t3--; ) this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
            }
            scrollDown(e3) {
              let t3 = e3.params[0] || 1;
              for (; t3--; ) this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(l2.DEFAULT_ATTR_DATA));
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
            }
            scrollLeft(e3) {
              if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
              const t3 = e3.params[0] || 1;
              for (let e4 = this._activeBuffer.scrollTop; e4 <= this._activeBuffer.scrollBottom; ++e4) {
                const i3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e4);
                i3.deleteCells(0, t3, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i3.isWrapped = false;
              }
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
            }
            scrollRight(e3) {
              if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
              const t3 = e3.params[0] || 1;
              for (let e4 = this._activeBuffer.scrollTop; e4 <= this._activeBuffer.scrollBottom; ++e4) {
                const i3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e4);
                i3.insertCells(0, t3, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i3.isWrapped = false;
              }
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
            }
            insertColumns(e3) {
              if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
              const t3 = e3.params[0] || 1;
              for (let e4 = this._activeBuffer.scrollTop; e4 <= this._activeBuffer.scrollBottom; ++e4) {
                const i3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e4);
                i3.insertCells(this._activeBuffer.x, t3, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i3.isWrapped = false;
              }
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
            }
            deleteColumns(e3) {
              if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
              const t3 = e3.params[0] || 1;
              for (let e4 = this._activeBuffer.scrollTop; e4 <= this._activeBuffer.scrollBottom; ++e4) {
                const i3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e4);
                i3.deleteCells(this._activeBuffer.x, t3, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i3.isWrapped = false;
              }
              return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
            }
            eraseChars(e3) {
              this._restrictCursor();
              const t3 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
              return t3 && (t3.replaceCells(this._activeBuffer.x, this._activeBuffer.x + (e3.params[0] || 1), this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), true;
            }
            repeatPrecedingCharacter(e3) {
              if (!this._parser.precedingCodepoint) return true;
              const t3 = e3.params[0] || 1, i3 = new Uint32Array(t3);
              for (let e4 = 0; e4 < t3; ++e4) i3[e4] = this._parser.precedingCodepoint;
              return this.print(i3, 0, i3.length), true;
            }
            sendDeviceAttributesPrimary(e3) {
              return e3.params[0] > 0 || (this._is("xterm") || this._is("rxvt-unicode") || this._is("screen") ? this._coreService.triggerDataEvent(n.C0.ESC + "[?1;2c") : this._is("linux") && this._coreService.triggerDataEvent(n.C0.ESC + "[?6c")), true;
            }
            sendDeviceAttributesSecondary(e3) {
              return e3.params[0] > 0 || (this._is("xterm") ? this._coreService.triggerDataEvent(n.C0.ESC + "[>0;276;0c") : this._is("rxvt-unicode") ? this._coreService.triggerDataEvent(n.C0.ESC + "[>85;95;0c") : this._is("linux") ? this._coreService.triggerDataEvent(e3.params[0] + "c") : this._is("screen") && this._coreService.triggerDataEvent(n.C0.ESC + "[>83;40003;0c")), true;
            }
            _is(e3) {
              return 0 === (this._optionsService.rawOptions.termName + "").indexOf(e3);
            }
            setMode(e3) {
              for (let t3 = 0; t3 < e3.length; t3++) switch (e3.params[t3]) {
                case 4:
                  this._coreService.modes.insertMode = true;
                  break;
                case 20:
                  this._optionsService.options.convertEol = true;
              }
              return true;
            }
            setModePrivate(e3) {
              for (let t3 = 0; t3 < e3.length; t3++) switch (e3.params[t3]) {
                case 1:
                  this._coreService.decPrivateModes.applicationCursorKeys = true;
                  break;
                case 2:
                  this._charsetService.setgCharset(0, o.DEFAULT_CHARSET), this._charsetService.setgCharset(1, o.DEFAULT_CHARSET), this._charsetService.setgCharset(2, o.DEFAULT_CHARSET), this._charsetService.setgCharset(3, o.DEFAULT_CHARSET);
                  break;
                case 3:
                  this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(132, this._bufferService.rows), this._onRequestReset.fire());
                  break;
                case 6:
                  this._coreService.decPrivateModes.origin = true, this._setCursor(0, 0);
                  break;
                case 7:
                  this._coreService.decPrivateModes.wraparound = true;
                  break;
                case 12:
                  this._optionsService.options.cursorBlink = true;
                  break;
                case 45:
                  this._coreService.decPrivateModes.reverseWraparound = true;
                  break;
                case 66:
                  this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, this._onRequestSyncScrollBar.fire();
                  break;
                case 9:
                  this._coreMouseService.activeProtocol = "X10";
                  break;
                case 1e3:
                  this._coreMouseService.activeProtocol = "VT200";
                  break;
                case 1002:
                  this._coreMouseService.activeProtocol = "DRAG";
                  break;
                case 1003:
                  this._coreMouseService.activeProtocol = "ANY";
                  break;
                case 1004:
                  this._coreService.decPrivateModes.sendFocus = true, this._onRequestSendFocus.fire();
                  break;
                case 1005:
                  this._logService.debug("DECSET 1005 not supported (see #2507)");
                  break;
                case 1006:
                  this._coreMouseService.activeEncoding = "SGR";
                  break;
                case 1015:
                  this._logService.debug("DECSET 1015 not supported (see #2507)");
                  break;
                case 1016:
                  this._coreMouseService.activeEncoding = "SGR_PIXELS";
                  break;
                case 25:
                  this._coreService.isCursorHidden = false;
                  break;
                case 1048:
                  this.saveCursor();
                  break;
                case 1049:
                  this.saveCursor();
                case 47:
                case 1047:
                  this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()), this._coreService.isCursorInitialized = true, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                  break;
                case 2004:
                  this._coreService.decPrivateModes.bracketedPasteMode = true;
              }
              return true;
            }
            resetMode(e3) {
              for (let t3 = 0; t3 < e3.length; t3++) switch (e3.params[t3]) {
                case 4:
                  this._coreService.modes.insertMode = false;
                  break;
                case 20:
                  this._optionsService.options.convertEol = false;
              }
              return true;
            }
            resetModePrivate(e3) {
              for (let t3 = 0; t3 < e3.length; t3++) switch (e3.params[t3]) {
                case 1:
                  this._coreService.decPrivateModes.applicationCursorKeys = false;
                  break;
                case 3:
                  this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(80, this._bufferService.rows), this._onRequestReset.fire());
                  break;
                case 6:
                  this._coreService.decPrivateModes.origin = false, this._setCursor(0, 0);
                  break;
                case 7:
                  this._coreService.decPrivateModes.wraparound = false;
                  break;
                case 12:
                  this._optionsService.options.cursorBlink = false;
                  break;
                case 45:
                  this._coreService.decPrivateModes.reverseWraparound = false;
                  break;
                case 66:
                  this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, this._onRequestSyncScrollBar.fire();
                  break;
                case 9:
                case 1e3:
                case 1002:
                case 1003:
                  this._coreMouseService.activeProtocol = "NONE";
                  break;
                case 1004:
                  this._coreService.decPrivateModes.sendFocus = false;
                  break;
                case 1005:
                  this._logService.debug("DECRST 1005 not supported (see #2507)");
                  break;
                case 1006:
                case 1016:
                  this._coreMouseService.activeEncoding = "DEFAULT";
                  break;
                case 1015:
                  this._logService.debug("DECRST 1015 not supported (see #2507)");
                  break;
                case 25:
                  this._coreService.isCursorHidden = true;
                  break;
                case 1048:
                  this.restoreCursor();
                  break;
                case 1049:
                case 47:
                case 1047:
                  this._bufferService.buffers.activateNormalBuffer(), 1049 === e3.params[t3] && this.restoreCursor(), this._coreService.isCursorInitialized = true, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                  break;
                case 2004:
                  this._coreService.decPrivateModes.bracketedPasteMode = false;
              }
              return true;
            }
            requestMode(e3, t3) {
              const i3 = this._coreService.decPrivateModes, { activeProtocol: s3, activeEncoding: r2 } = this._coreMouseService, o2 = this._coreService, { buffers: a2, cols: h3 } = this._bufferService, { active: c2, alt: l3 } = a2, d2 = this._optionsService.rawOptions, _3 = (e4) => e4 ? 1 : 2, u2 = e3.params[0];
              return f2 = u2, v3 = t3 ? 2 === u2 ? 4 : 4 === u2 ? _3(o2.modes.insertMode) : 12 === u2 ? 3 : 20 === u2 ? _3(d2.convertEol) : 0 : 1 === u2 ? _3(i3.applicationCursorKeys) : 3 === u2 ? d2.windowOptions.setWinLines ? 80 === h3 ? 2 : 132 === h3 ? 1 : 0 : 0 : 6 === u2 ? _3(i3.origin) : 7 === u2 ? _3(i3.wraparound) : 8 === u2 ? 3 : 9 === u2 ? _3("X10" === s3) : 12 === u2 ? _3(d2.cursorBlink) : 25 === u2 ? _3(!o2.isCursorHidden) : 45 === u2 ? _3(i3.reverseWraparound) : 66 === u2 ? _3(i3.applicationKeypad) : 67 === u2 ? 4 : 1e3 === u2 ? _3("VT200" === s3) : 1002 === u2 ? _3("DRAG" === s3) : 1003 === u2 ? _3("ANY" === s3) : 1004 === u2 ? _3(i3.sendFocus) : 1005 === u2 ? 4 : 1006 === u2 ? _3("SGR" === r2) : 1015 === u2 ? 4 : 1016 === u2 ? _3("SGR_PIXELS" === r2) : 1048 === u2 ? 1 : 47 === u2 || 1047 === u2 || 1049 === u2 ? _3(c2 === l3) : 2004 === u2 ? _3(i3.bracketedPasteMode) : 0, o2.triggerDataEvent(`${n.C0.ESC}[${t3 ? "" : "?"}${f2};${v3}$y`), true;
              var f2, v3;
            }
            _updateAttrColor(e3, t3, i3, s3, r2) {
              return 2 === t3 ? (e3 |= 50331648, e3 &= -16777216, e3 |= f.AttributeData.fromColorRGB([
                i3,
                s3,
                r2
              ])) : 5 === t3 && (e3 &= -50331904, e3 |= 33554432 | 255 & i3), e3;
            }
            _extractColor(e3, t3, i3) {
              const s3 = [
                0,
                0,
                -1,
                0,
                0,
                0
              ];
              let r2 = 0, n2 = 0;
              do {
                if (s3[n2 + r2] = e3.params[t3 + n2], e3.hasSubParams(t3 + n2)) {
                  const i4 = e3.getSubParams(t3 + n2);
                  let o2 = 0;
                  do {
                    5 === s3[1] && (r2 = 1), s3[n2 + o2 + 1 + r2] = i4[o2];
                  } while (++o2 < i4.length && o2 + n2 + 1 + r2 < s3.length);
                  break;
                }
                if (5 === s3[1] && n2 + r2 >= 2 || 2 === s3[1] && n2 + r2 >= 5) break;
                s3[1] && (r2 = 1);
              } while (++n2 + t3 < e3.length && n2 + r2 < s3.length);
              for (let e4 = 2; e4 < s3.length; ++e4) -1 === s3[e4] && (s3[e4] = 0);
              switch (s3[0]) {
                case 38:
                  i3.fg = this._updateAttrColor(i3.fg, s3[1], s3[3], s3[4], s3[5]);
                  break;
                case 48:
                  i3.bg = this._updateAttrColor(i3.bg, s3[1], s3[3], s3[4], s3[5]);
                  break;
                case 58:
                  i3.extended = i3.extended.clone(), i3.extended.underlineColor = this._updateAttrColor(i3.extended.underlineColor, s3[1], s3[3], s3[4], s3[5]);
              }
              return n2;
            }
            _processUnderline(e3, t3) {
              t3.extended = t3.extended.clone(), (!~e3 || e3 > 5) && (e3 = 1), t3.extended.underlineStyle = e3, t3.fg |= 268435456, 0 === e3 && (t3.fg &= -268435457), t3.updateExtended();
            }
            _processSGR0(e3) {
              e3.fg = l2.DEFAULT_ATTR_DATA.fg, e3.bg = l2.DEFAULT_ATTR_DATA.bg, e3.extended = e3.extended.clone(), e3.extended.underlineStyle = 0, e3.extended.underlineColor &= -67108864, e3.updateExtended();
            }
            charAttributes(e3) {
              if (1 === e3.length && 0 === e3.params[0]) return this._processSGR0(this._curAttrData), true;
              const t3 = e3.length;
              let i3;
              const s3 = this._curAttrData;
              for (let r2 = 0; r2 < t3; r2++) i3 = e3.params[r2], i3 >= 30 && i3 <= 37 ? (s3.fg &= -50331904, s3.fg |= 16777216 | i3 - 30) : i3 >= 40 && i3 <= 47 ? (s3.bg &= -50331904, s3.bg |= 16777216 | i3 - 40) : i3 >= 90 && i3 <= 97 ? (s3.fg &= -50331904, s3.fg |= 16777224 | i3 - 90) : i3 >= 100 && i3 <= 107 ? (s3.bg &= -50331904, s3.bg |= 16777224 | i3 - 100) : 0 === i3 ? this._processSGR0(s3) : 1 === i3 ? s3.fg |= 134217728 : 3 === i3 ? s3.bg |= 67108864 : 4 === i3 ? (s3.fg |= 268435456, this._processUnderline(e3.hasSubParams(r2) ? e3.getSubParams(r2)[0] : 1, s3)) : 5 === i3 ? s3.fg |= 536870912 : 7 === i3 ? s3.fg |= 67108864 : 8 === i3 ? s3.fg |= 1073741824 : 9 === i3 ? s3.fg |= 2147483648 : 2 === i3 ? s3.bg |= 134217728 : 21 === i3 ? this._processUnderline(2, s3) : 22 === i3 ? (s3.fg &= -134217729, s3.bg &= -134217729) : 23 === i3 ? s3.bg &= -67108865 : 24 === i3 ? (s3.fg &= -268435457, this._processUnderline(0, s3)) : 25 === i3 ? s3.fg &= -536870913 : 27 === i3 ? s3.fg &= -67108865 : 28 === i3 ? s3.fg &= -1073741825 : 29 === i3 ? s3.fg &= 2147483647 : 39 === i3 ? (s3.fg &= -67108864, s3.fg |= 16777215 & l2.DEFAULT_ATTR_DATA.fg) : 49 === i3 ? (s3.bg &= -67108864, s3.bg |= 16777215 & l2.DEFAULT_ATTR_DATA.bg) : 38 === i3 || 48 === i3 || 58 === i3 ? r2 += this._extractColor(e3, r2, s3) : 53 === i3 ? s3.bg |= 1073741824 : 55 === i3 ? s3.bg &= -1073741825 : 59 === i3 ? (s3.extended = s3.extended.clone(), s3.extended.underlineColor = -1, s3.updateExtended()) : 100 === i3 ? (s3.fg &= -67108864, s3.fg |= 16777215 & l2.DEFAULT_ATTR_DATA.fg, s3.bg &= -67108864, s3.bg |= 16777215 & l2.DEFAULT_ATTR_DATA.bg) : this._logService.debug("Unknown SGR attribute: %d.", i3);
              return true;
            }
            deviceStatus(e3) {
              switch (e3.params[0]) {
                case 5:
                  this._coreService.triggerDataEvent(`${n.C0.ESC}[0n`);
                  break;
                case 6:
                  const e4 = this._activeBuffer.y + 1, t3 = this._activeBuffer.x + 1;
                  this._coreService.triggerDataEvent(`${n.C0.ESC}[${e4};${t3}R`);
              }
              return true;
            }
            deviceStatusPrivate(e3) {
              if (6 === e3.params[0]) {
                const e4 = this._activeBuffer.y + 1, t3 = this._activeBuffer.x + 1;
                this._coreService.triggerDataEvent(`${n.C0.ESC}[?${e4};${t3}R`);
              }
              return true;
            }
            softReset(e3) {
              return this._coreService.isCursorHidden = false, this._onRequestSyncScrollBar.fire(), this._activeBuffer.scrollTop = 0, this._activeBuffer.scrollBottom = this._bufferService.rows - 1, this._curAttrData = l2.DEFAULT_ATTR_DATA.clone(), this._coreService.reset(), this._charsetService.reset(), this._activeBuffer.savedX = 0, this._activeBuffer.savedY = this._activeBuffer.ybase, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, this._coreService.decPrivateModes.origin = false, true;
            }
            setCursorStyle(e3) {
              const t3 = e3.params[0] || 1;
              switch (t3) {
                case 1:
                case 2:
                  this._optionsService.options.cursorStyle = "block";
                  break;
                case 3:
                case 4:
                  this._optionsService.options.cursorStyle = "underline";
                  break;
                case 5:
                case 6:
                  this._optionsService.options.cursorStyle = "bar";
              }
              const i3 = t3 % 2 == 1;
              return this._optionsService.options.cursorBlink = i3, true;
            }
            setScrollRegion(e3) {
              const t3 = e3.params[0] || 1;
              let i3;
              return (e3.length < 2 || (i3 = e3.params[1]) > this._bufferService.rows || 0 === i3) && (i3 = this._bufferService.rows), i3 > t3 && (this._activeBuffer.scrollTop = t3 - 1, this._activeBuffer.scrollBottom = i3 - 1, this._setCursor(0, 0)), true;
            }
            windowOptions(e3) {
              if (!b(e3.params[0], this._optionsService.rawOptions.windowOptions)) return true;
              const t3 = e3.length > 1 ? e3.params[1] : 0;
              switch (e3.params[0]) {
                case 14:
                  2 !== t3 && this._onRequestWindowsOptionsReport.fire(y.GET_WIN_SIZE_PIXELS);
                  break;
                case 16:
                  this._onRequestWindowsOptionsReport.fire(y.GET_CELL_SIZE_PIXELS);
                  break;
                case 18:
                  this._bufferService && this._coreService.triggerDataEvent(`${n.C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);
                  break;
                case 22:
                  0 !== t3 && 2 !== t3 || (this._windowTitleStack.push(this._windowTitle), this._windowTitleStack.length > 10 && this._windowTitleStack.shift()), 0 !== t3 && 1 !== t3 || (this._iconNameStack.push(this._iconName), this._iconNameStack.length > 10 && this._iconNameStack.shift());
                  break;
                case 23:
                  0 !== t3 && 2 !== t3 || this._windowTitleStack.length && this.setTitle(this._windowTitleStack.pop()), 0 !== t3 && 1 !== t3 || this._iconNameStack.length && this.setIconName(this._iconNameStack.pop());
              }
              return true;
            }
            saveCursor(e3) {
              return this._activeBuffer.savedX = this._activeBuffer.x, this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, true;
            }
            restoreCursor(e3) {
              return this._activeBuffer.x = this._activeBuffer.savedX || 0, this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0), this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg, this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg, this._charsetService.charset = this._savedCharset, this._activeBuffer.savedCharset && (this._charsetService.charset = this._activeBuffer.savedCharset), this._restrictCursor(), true;
            }
            setTitle(e3) {
              return this._windowTitle = e3, this._onTitleChange.fire(e3), true;
            }
            setIconName(e3) {
              return this._iconName = e3, true;
            }
            setOrReportIndexedColor(e3) {
              const t3 = [], i3 = e3.split(";");
              for (; i3.length > 1; ) {
                const e4 = i3.shift(), s3 = i3.shift();
                if (/^\d+$/.exec(e4)) {
                  const i4 = parseInt(e4);
                  if (L(i4)) if ("?" === s3) t3.push({
                    type: 0,
                    index: i4
                  });
                  else {
                    const e5 = (0, m.parseColor)(s3);
                    e5 && t3.push({
                      type: 1,
                      index: i4,
                      color: e5
                    });
                  }
                }
              }
              return t3.length && this._onColor.fire(t3), true;
            }
            setHyperlink(e3) {
              const t3 = e3.split(";");
              return !(t3.length < 2) && (t3[1] ? this._createHyperlink(t3[0], t3[1]) : !t3[0] && this._finishHyperlink());
            }
            _createHyperlink(e3, t3) {
              this._getCurrentLinkId() && this._finishHyperlink();
              const i3 = e3.split(":");
              let s3;
              const r2 = i3.findIndex((e4) => e4.startsWith("id="));
              return -1 !== r2 && (s3 = i3[r2].slice(3) || void 0), this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = this._oscLinkService.registerLink({
                id: s3,
                uri: t3
              }), this._curAttrData.updateExtended(), true;
            }
            _finishHyperlink() {
              return this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = 0, this._curAttrData.updateExtended(), true;
            }
            _setOrReportSpecialColor(e3, t3) {
              const i3 = e3.split(";");
              for (let e4 = 0; e4 < i3.length && !(t3 >= this._specialColors.length); ++e4, ++t3) if ("?" === i3[e4]) this._onColor.fire([
                {
                  type: 0,
                  index: this._specialColors[t3]
                }
              ]);
              else {
                const s3 = (0, m.parseColor)(i3[e4]);
                s3 && this._onColor.fire([
                  {
                    type: 1,
                    index: this._specialColors[t3],
                    color: s3
                  }
                ]);
              }
              return true;
            }
            setOrReportFgColor(e3) {
              return this._setOrReportSpecialColor(e3, 0);
            }
            setOrReportBgColor(e3) {
              return this._setOrReportSpecialColor(e3, 1);
            }
            setOrReportCursorColor(e3) {
              return this._setOrReportSpecialColor(e3, 2);
            }
            restoreIndexedColor(e3) {
              if (!e3) return this._onColor.fire([
                {
                  type: 2
                }
              ]), true;
              const t3 = [], i3 = e3.split(";");
              for (let e4 = 0; e4 < i3.length; ++e4) if (/^\d+$/.exec(i3[e4])) {
                const s3 = parseInt(i3[e4]);
                L(s3) && t3.push({
                  type: 2,
                  index: s3
                });
              }
              return t3.length && this._onColor.fire(t3), true;
            }
            restoreFgColor(e3) {
              return this._onColor.fire([
                {
                  type: 2,
                  index: 256
                }
              ]), true;
            }
            restoreBgColor(e3) {
              return this._onColor.fire([
                {
                  type: 2,
                  index: 257
                }
              ]), true;
            }
            restoreCursorColor(e3) {
              return this._onColor.fire([
                {
                  type: 2,
                  index: 258
                }
              ]), true;
            }
            nextLine() {
              return this._activeBuffer.x = 0, this.index(), true;
            }
            keypadApplicationMode() {
              return this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, this._onRequestSyncScrollBar.fire(), true;
            }
            keypadNumericMode() {
              return this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, this._onRequestSyncScrollBar.fire(), true;
            }
            selectDefaultCharset() {
              return this._charsetService.setgLevel(0), this._charsetService.setgCharset(0, o.DEFAULT_CHARSET), true;
            }
            selectCharset(e3) {
              return 2 !== e3.length ? (this.selectDefaultCharset(), true) : ("/" === e3[0] || this._charsetService.setgCharset(S[e3[0]], o.CHARSETS[e3[1]] || o.DEFAULT_CHARSET), true);
            }
            index() {
              return this._restrictCursor(), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._restrictCursor(), true;
            }
            tabSet() {
              return this._activeBuffer.tabs[this._activeBuffer.x] = true, true;
            }
            reverseIndex() {
              if (this._restrictCursor(), this._activeBuffer.y === this._activeBuffer.scrollTop) {
                const e3 = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;
                this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, e3, 1), this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData())), this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);
              } else this._activeBuffer.y--, this._restrictCursor();
              return true;
            }
            fullReset() {
              return this._parser.reset(), this._onRequestReset.fire(), true;
            }
            reset() {
              this._curAttrData = l2.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l2.DEFAULT_ATTR_DATA.clone();
            }
            _eraseAttrData() {
              return this._eraseAttrDataInternal.bg &= -67108864, this._eraseAttrDataInternal.bg |= 67108863 & this._curAttrData.bg, this._eraseAttrDataInternal;
            }
            setgLevel(e3) {
              return this._charsetService.setgLevel(e3), true;
            }
            screenAlignmentPattern() {
              const e3 = new u.CellData();
              e3.content = 1 << 22 | "E".charCodeAt(0), e3.fg = this._curAttrData.fg, e3.bg = this._curAttrData.bg, this._setCursor(0, 0);
              for (let t3 = 0; t3 < this._bufferService.rows; ++t3) {
                const i3 = this._activeBuffer.ybase + this._activeBuffer.y + t3, s3 = this._activeBuffer.lines.get(i3);
                s3 && (s3.fill(e3), s3.isWrapped = false);
              }
              return this._dirtyRowTracker.markAllDirty(), this._setCursor(0, 0), true;
            }
            requestStatusString(e3, t3) {
              const i3 = this._bufferService.buffer, s3 = this._optionsService.rawOptions;
              return ((e4) => (this._coreService.triggerDataEvent(`${n.C0.ESC}${e4}${n.C0.ESC}\\`), true))('"q' === e3 ? `P1$r${this._curAttrData.isProtected() ? 1 : 0}"q` : '"p' === e3 ? 'P1$r61;1"p' : "r" === e3 ? `P1$r${i3.scrollTop + 1};${i3.scrollBottom + 1}r` : "m" === e3 ? "P1$r0m" : " q" === e3 ? `P1$r${{
                block: 2,
                underline: 4,
                bar: 6
              }[s3.cursorStyle] - (s3.cursorBlink ? 1 : 0)} q` : "P0$r");
            }
            markRangeDirty(e3, t3) {
              this._dirtyRowTracker.markRangeDirty(e3, t3);
            }
          }
          t2.InputHandler = E;
          let k2 = class {
            constructor(e3) {
              this._bufferService = e3, this.clearRange();
            }
            clearRange() {
              this.start = this._bufferService.buffer.y, this.end = this._bufferService.buffer.y;
            }
            markDirty(e3) {
              e3 < this.start ? this.start = e3 : e3 > this.end && (this.end = e3);
            }
            markRangeDirty(e3, t3) {
              e3 > t3 && (w = e3, e3 = t3, t3 = w), e3 < this.start && (this.start = e3), t3 > this.end && (this.end = t3);
            }
            markAllDirty() {
              this.markRangeDirty(0, this._bufferService.rows - 1);
            }
          };
          function L(e3) {
            return 0 <= e3 && e3 < 256;
          }
          k2 = s2([
            r(0, v2.IBufferService)
          ], k2);
        },
        844: (e2, t2) => {
          function i2(e3) {
            for (const t3 of e3) t3.dispose();
            e3.length = 0;
          }
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.getDisposeArrayDisposable = t2.disposeArray = t2.toDisposable = t2.MutableDisposable = t2.Disposable = void 0, t2.Disposable = class {
            constructor() {
              this._disposables = [], this._isDisposed = false;
            }
            dispose() {
              this._isDisposed = true;
              for (const e3 of this._disposables) e3.dispose();
              this._disposables.length = 0;
            }
            register(e3) {
              return this._disposables.push(e3), e3;
            }
            unregister(e3) {
              const t3 = this._disposables.indexOf(e3);
              -1 !== t3 && this._disposables.splice(t3, 1);
            }
          }, t2.MutableDisposable = class {
            constructor() {
              this._isDisposed = false;
            }
            get value() {
              return this._isDisposed ? void 0 : this._value;
            }
            set value(e3) {
              var t3;
              this._isDisposed || e3 === this._value || (null === (t3 = this._value) || void 0 === t3 || t3.dispose(), this._value = e3);
            }
            clear() {
              this.value = void 0;
            }
            dispose() {
              var e3;
              this._isDisposed = true, null === (e3 = this._value) || void 0 === e3 || e3.dispose(), this._value = void 0;
            }
          }, t2.toDisposable = function(e3) {
            return {
              dispose: e3
            };
          }, t2.disposeArray = i2, t2.getDisposeArrayDisposable = function(e3) {
            return {
              dispose: () => i2(e3)
            };
          };
        },
        1505: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.FourKeyMap = t2.TwoKeyMap = void 0;
          class i2 {
            constructor() {
              this._data = {};
            }
            set(e3, t3, i3) {
              this._data[e3] || (this._data[e3] = {}), this._data[e3][t3] = i3;
            }
            get(e3, t3) {
              return this._data[e3] ? this._data[e3][t3] : void 0;
            }
            clear() {
              this._data = {};
            }
          }
          t2.TwoKeyMap = i2, t2.FourKeyMap = class {
            constructor() {
              this._data = new i2();
            }
            set(e3, t3, s2, r, n) {
              this._data.get(e3, t3) || this._data.set(e3, t3, new i2()), this._data.get(e3, t3).set(s2, r, n);
            }
            get(e3, t3, i3, s2) {
              var r;
              return null === (r = this._data.get(e3, t3)) || void 0 === r ? void 0 : r.get(i3, s2);
            }
            clear() {
              this._data.clear();
            }
          };
        },
        6114: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.isChromeOS = t2.isLinux = t2.isWindows = t2.isIphone = t2.isIpad = t2.isMac = t2.getSafariVersion = t2.isSafari = t2.isLegacyEdge = t2.isFirefox = t2.isNode = void 0, t2.isNode = "undefined" == typeof navigator;
          const i2 = t2.isNode ? "node" : navigator.userAgent, s2 = t2.isNode ? "node" : navigator.platform;
          t2.isFirefox = i2.includes("Firefox"), t2.isLegacyEdge = i2.includes("Edge"), t2.isSafari = /^((?!chrome|android).)*safari/i.test(i2), t2.getSafariVersion = function() {
            if (!t2.isSafari) return 0;
            const e3 = i2.match(/Version\/(\d+)/);
            return null === e3 || e3.length < 2 ? 0 : parseInt(e3[1]);
          }, t2.isMac = [
            "Macintosh",
            "MacIntel",
            "MacPPC",
            "Mac68K"
          ].includes(s2), t2.isIpad = "iPad" === s2, t2.isIphone = "iPhone" === s2, t2.isWindows = [
            "Windows",
            "Win16",
            "Win32",
            "WinCE"
          ].includes(s2), t2.isLinux = s2.indexOf("Linux") >= 0, t2.isChromeOS = /\bCrOS\b/.test(i2);
        },
        6106: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.SortedList = void 0;
          let i2 = 0;
          t2.SortedList = class {
            constructor(e3) {
              this._getKey = e3, this._array = [];
            }
            clear() {
              this._array.length = 0;
            }
            insert(e3) {
              0 !== this._array.length ? (i2 = this._search(this._getKey(e3)), this._array.splice(i2, 0, e3)) : this._array.push(e3);
            }
            delete(e3) {
              if (0 === this._array.length) return false;
              const t3 = this._getKey(e3);
              if (void 0 === t3) return false;
              if (i2 = this._search(t3), -1 === i2) return false;
              if (this._getKey(this._array[i2]) !== t3) return false;
              do {
                if (this._array[i2] === e3) return this._array.splice(i2, 1), true;
              } while (++i2 < this._array.length && this._getKey(this._array[i2]) === t3);
              return false;
            }
            *getKeyIterator(e3) {
              if (0 !== this._array.length && (i2 = this._search(e3), !(i2 < 0 || i2 >= this._array.length) && this._getKey(this._array[i2]) === e3)) do {
                yield this._array[i2];
              } while (++i2 < this._array.length && this._getKey(this._array[i2]) === e3);
            }
            forEachByKey(e3, t3) {
              if (0 !== this._array.length && (i2 = this._search(e3), !(i2 < 0 || i2 >= this._array.length) && this._getKey(this._array[i2]) === e3)) do {
                t3(this._array[i2]);
              } while (++i2 < this._array.length && this._getKey(this._array[i2]) === e3);
            }
            values() {
              return [
                ...this._array
              ].values();
            }
            _search(e3) {
              let t3 = 0, i3 = this._array.length - 1;
              for (; i3 >= t3; ) {
                let s2 = t3 + i3 >> 1;
                const r = this._getKey(this._array[s2]);
                if (r > e3) i3 = s2 - 1;
                else {
                  if (!(r < e3)) {
                    for (; s2 > 0 && this._getKey(this._array[s2 - 1]) === e3; ) s2--;
                    return s2;
                  }
                  t3 = s2 + 1;
                }
              }
              return t3;
            }
          };
        },
        7226: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.DebouncedIdleTask = t2.IdleTaskQueue = t2.PriorityTaskQueue = void 0;
          const s2 = i2(6114);
          class r {
            constructor() {
              this._tasks = [], this._i = 0;
            }
            enqueue(e3) {
              this._tasks.push(e3), this._start();
            }
            flush() {
              for (; this._i < this._tasks.length; ) this._tasks[this._i]() || this._i++;
              this.clear();
            }
            clear() {
              this._idleCallback && (this._cancelCallback(this._idleCallback), this._idleCallback = void 0), this._i = 0, this._tasks.length = 0;
            }
            _start() {
              this._idleCallback || (this._idleCallback = this._requestCallback(this._process.bind(this)));
            }
            _process(e3) {
              this._idleCallback = void 0;
              let t3 = 0, i3 = 0, s3 = e3.timeRemaining(), r2 = 0;
              for (; this._i < this._tasks.length; ) {
                if (t3 = Date.now(), this._tasks[this._i]() || this._i++, t3 = Math.max(1, Date.now() - t3), i3 = Math.max(t3, i3), r2 = e3.timeRemaining(), 1.5 * i3 > r2) return s3 - t3 < -20 && console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(s3 - t3))}ms`), void this._start();
                s3 = r2;
              }
              this.clear();
            }
          }
          class n extends r {
            _requestCallback(e3) {
              return setTimeout(() => e3(this._createDeadline(16)));
            }
            _cancelCallback(e3) {
              clearTimeout(e3);
            }
            _createDeadline(e3) {
              const t3 = Date.now() + e3;
              return {
                timeRemaining: () => Math.max(0, t3 - Date.now())
              };
            }
          }
          t2.PriorityTaskQueue = n, t2.IdleTaskQueue = !s2.isNode && "requestIdleCallback" in window ? class extends r {
            _requestCallback(e3) {
              return requestIdleCallback(e3);
            }
            _cancelCallback(e3) {
              cancelIdleCallback(e3);
            }
          } : n, t2.DebouncedIdleTask = class {
            constructor() {
              this._queue = new t2.IdleTaskQueue();
            }
            set(e3) {
              this._queue.clear(), this._queue.enqueue(e3);
            }
            flush() {
              this._queue.flush();
            }
          };
        },
        9282: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.updateWindowsModeWrappedState = void 0;
          const s2 = i2(643);
          t2.updateWindowsModeWrappedState = function(e3) {
            const t3 = e3.buffer.lines.get(e3.buffer.ybase + e3.buffer.y - 1), i3 = null == t3 ? void 0 : t3.get(e3.cols - 1), r = e3.buffer.lines.get(e3.buffer.ybase + e3.buffer.y);
            r && i3 && (r.isWrapped = i3[s2.CHAR_DATA_CODE_INDEX] !== s2.NULL_CELL_CODE && i3[s2.CHAR_DATA_CODE_INDEX] !== s2.WHITESPACE_CELL_CODE);
          };
        },
        3734: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.ExtendedAttrs = t2.AttributeData = void 0;
          class i2 {
            constructor() {
              this.fg = 0, this.bg = 0, this.extended = new s2();
            }
            static toColorRGB(e3) {
              return [
                e3 >>> 16 & 255,
                e3 >>> 8 & 255,
                255 & e3
              ];
            }
            static fromColorRGB(e3) {
              return (255 & e3[0]) << 16 | (255 & e3[1]) << 8 | 255 & e3[2];
            }
            clone() {
              const e3 = new i2();
              return e3.fg = this.fg, e3.bg = this.bg, e3.extended = this.extended.clone(), e3;
            }
            isInverse() {
              return 67108864 & this.fg;
            }
            isBold() {
              return 134217728 & this.fg;
            }
            isUnderline() {
              return this.hasExtendedAttrs() && 0 !== this.extended.underlineStyle ? 1 : 268435456 & this.fg;
            }
            isBlink() {
              return 536870912 & this.fg;
            }
            isInvisible() {
              return 1073741824 & this.fg;
            }
            isItalic() {
              return 67108864 & this.bg;
            }
            isDim() {
              return 134217728 & this.bg;
            }
            isStrikethrough() {
              return 2147483648 & this.fg;
            }
            isProtected() {
              return 536870912 & this.bg;
            }
            isOverline() {
              return 1073741824 & this.bg;
            }
            getFgColorMode() {
              return 50331648 & this.fg;
            }
            getBgColorMode() {
              return 50331648 & this.bg;
            }
            isFgRGB() {
              return 50331648 == (50331648 & this.fg);
            }
            isBgRGB() {
              return 50331648 == (50331648 & this.bg);
            }
            isFgPalette() {
              return 16777216 == (50331648 & this.fg) || 33554432 == (50331648 & this.fg);
            }
            isBgPalette() {
              return 16777216 == (50331648 & this.bg) || 33554432 == (50331648 & this.bg);
            }
            isFgDefault() {
              return 0 == (50331648 & this.fg);
            }
            isBgDefault() {
              return 0 == (50331648 & this.bg);
            }
            isAttributeDefault() {
              return 0 === this.fg && 0 === this.bg;
            }
            getFgColor() {
              switch (50331648 & this.fg) {
                case 16777216:
                case 33554432:
                  return 255 & this.fg;
                case 50331648:
                  return 16777215 & this.fg;
                default:
                  return -1;
              }
            }
            getBgColor() {
              switch (50331648 & this.bg) {
                case 16777216:
                case 33554432:
                  return 255 & this.bg;
                case 50331648:
                  return 16777215 & this.bg;
                default:
                  return -1;
              }
            }
            hasExtendedAttrs() {
              return 268435456 & this.bg;
            }
            updateExtended() {
              this.extended.isEmpty() ? this.bg &= -268435457 : this.bg |= 268435456;
            }
            getUnderlineColor() {
              if (268435456 & this.bg && ~this.extended.underlineColor) switch (50331648 & this.extended.underlineColor) {
                case 16777216:
                case 33554432:
                  return 255 & this.extended.underlineColor;
                case 50331648:
                  return 16777215 & this.extended.underlineColor;
                default:
                  return this.getFgColor();
              }
              return this.getFgColor();
            }
            getUnderlineColorMode() {
              return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 & this.extended.underlineColor : this.getFgColorMode();
            }
            isUnderlineColorRGB() {
              return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 == (50331648 & this.extended.underlineColor) : this.isFgRGB();
            }
            isUnderlineColorPalette() {
              return 268435456 & this.bg && ~this.extended.underlineColor ? 16777216 == (50331648 & this.extended.underlineColor) || 33554432 == (50331648 & this.extended.underlineColor) : this.isFgPalette();
            }
            isUnderlineColorDefault() {
              return 268435456 & this.bg && ~this.extended.underlineColor ? 0 == (50331648 & this.extended.underlineColor) : this.isFgDefault();
            }
            getUnderlineStyle() {
              return 268435456 & this.fg ? 268435456 & this.bg ? this.extended.underlineStyle : 1 : 0;
            }
          }
          t2.AttributeData = i2;
          class s2 {
            get ext() {
              return this._urlId ? -469762049 & this._ext | this.underlineStyle << 26 : this._ext;
            }
            set ext(e3) {
              this._ext = e3;
            }
            get underlineStyle() {
              return this._urlId ? 5 : (469762048 & this._ext) >> 26;
            }
            set underlineStyle(e3) {
              this._ext &= -469762049, this._ext |= e3 << 26 & 469762048;
            }
            get underlineColor() {
              return 67108863 & this._ext;
            }
            set underlineColor(e3) {
              this._ext &= -67108864, this._ext |= 67108863 & e3;
            }
            get urlId() {
              return this._urlId;
            }
            set urlId(e3) {
              this._urlId = e3;
            }
            constructor(e3 = 0, t3 = 0) {
              this._ext = 0, this._urlId = 0, this._ext = e3, this._urlId = t3;
            }
            clone() {
              return new s2(this._ext, this._urlId);
            }
            isEmpty() {
              return 0 === this.underlineStyle && 0 === this._urlId;
            }
          }
          t2.ExtendedAttrs = s2;
        },
        9092: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.Buffer = t2.MAX_BUFFER_SIZE = void 0;
          const s2 = i2(6349), r = i2(7226), n = i2(3734), o = i2(8437), a = i2(4634), h2 = i2(511), c = i2(643), l2 = i2(4863), d = i2(7116);
          t2.MAX_BUFFER_SIZE = 4294967295, t2.Buffer = class {
            constructor(e3, t3, i3) {
              this._hasScrollback = e3, this._optionsService = t3, this._bufferService = i3, this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.tabs = {}, this.savedY = 0, this.savedX = 0, this.savedCurAttrData = o.DEFAULT_ATTR_DATA.clone(), this.savedCharset = d.DEFAULT_CHARSET, this.markers = [], this._nullCell = h2.CellData.fromCharData([
                0,
                c.NULL_CELL_CHAR,
                c.NULL_CELL_WIDTH,
                c.NULL_CELL_CODE
              ]), this._whitespaceCell = h2.CellData.fromCharData([
                0,
                c.WHITESPACE_CELL_CHAR,
                c.WHITESPACE_CELL_WIDTH,
                c.WHITESPACE_CELL_CODE
              ]), this._isClearing = false, this._memoryCleanupQueue = new r.IdleTaskQueue(), this._memoryCleanupPosition = 0, this._cols = this._bufferService.cols, this._rows = this._bufferService.rows, this.lines = new s2.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
            }
            getNullCell(e3) {
              return e3 ? (this._nullCell.fg = e3.fg, this._nullCell.bg = e3.bg, this._nullCell.extended = e3.extended) : (this._nullCell.fg = 0, this._nullCell.bg = 0, this._nullCell.extended = new n.ExtendedAttrs()), this._nullCell;
            }
            getWhitespaceCell(e3) {
              return e3 ? (this._whitespaceCell.fg = e3.fg, this._whitespaceCell.bg = e3.bg, this._whitespaceCell.extended = e3.extended) : (this._whitespaceCell.fg = 0, this._whitespaceCell.bg = 0, this._whitespaceCell.extended = new n.ExtendedAttrs()), this._whitespaceCell;
            }
            getBlankLine(e3, t3) {
              return new o.BufferLine(this._bufferService.cols, this.getNullCell(e3), t3);
            }
            get hasScrollback() {
              return this._hasScrollback && this.lines.maxLength > this._rows;
            }
            get isCursorInViewport() {
              const e3 = this.ybase + this.y - this.ydisp;
              return e3 >= 0 && e3 < this._rows;
            }
            _getCorrectBufferLength(e3) {
              if (!this._hasScrollback) return e3;
              const i3 = e3 + this._optionsService.rawOptions.scrollback;
              return i3 > t2.MAX_BUFFER_SIZE ? t2.MAX_BUFFER_SIZE : i3;
            }
            fillViewportRows(e3) {
              if (0 === this.lines.length) {
                void 0 === e3 && (e3 = o.DEFAULT_ATTR_DATA);
                let t3 = this._rows;
                for (; t3--; ) this.lines.push(this.getBlankLine(e3));
              }
            }
            clear() {
              this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.lines = new s2.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
            }
            resize(e3, t3) {
              const i3 = this.getNullCell(o.DEFAULT_ATTR_DATA);
              let s3 = 0;
              const r2 = this._getCorrectBufferLength(t3);
              if (r2 > this.lines.maxLength && (this.lines.maxLength = r2), this.lines.length > 0) {
                if (this._cols < e3) for (let t4 = 0; t4 < this.lines.length; t4++) s3 += +this.lines.get(t4).resize(e3, i3);
                let n2 = 0;
                if (this._rows < t3) for (let s4 = this._rows; s4 < t3; s4++) this.lines.length < t3 + this.ybase && (this._optionsService.rawOptions.windowsMode || void 0 !== this._optionsService.rawOptions.windowsPty.backend || void 0 !== this._optionsService.rawOptions.windowsPty.buildNumber ? this.lines.push(new o.BufferLine(e3, i3)) : this.ybase > 0 && this.lines.length <= this.ybase + this.y + n2 + 1 ? (this.ybase--, n2++, this.ydisp > 0 && this.ydisp--) : this.lines.push(new o.BufferLine(e3, i3)));
                else for (let e4 = this._rows; e4 > t3; e4--) this.lines.length > t3 + this.ybase && (this.lines.length > this.ybase + this.y + 1 ? this.lines.pop() : (this.ybase++, this.ydisp++));
                if (r2 < this.lines.maxLength) {
                  const e4 = this.lines.length - r2;
                  e4 > 0 && (this.lines.trimStart(e4), this.ybase = Math.max(this.ybase - e4, 0), this.ydisp = Math.max(this.ydisp - e4, 0), this.savedY = Math.max(this.savedY - e4, 0)), this.lines.maxLength = r2;
                }
                this.x = Math.min(this.x, e3 - 1), this.y = Math.min(this.y, t3 - 1), n2 && (this.y += n2), this.savedX = Math.min(this.savedX, e3 - 1), this.scrollTop = 0;
              }
              if (this.scrollBottom = t3 - 1, this._isReflowEnabled && (this._reflow(e3, t3), this._cols > e3)) for (let t4 = 0; t4 < this.lines.length; t4++) s3 += +this.lines.get(t4).resize(e3, i3);
              this._cols = e3, this._rows = t3, this._memoryCleanupQueue.clear(), s3 > 0.1 * this.lines.length && (this._memoryCleanupPosition = 0, this._memoryCleanupQueue.enqueue(() => this._batchedMemoryCleanup()));
            }
            _batchedMemoryCleanup() {
              let e3 = true;
              this._memoryCleanupPosition >= this.lines.length && (this._memoryCleanupPosition = 0, e3 = false);
              let t3 = 0;
              for (; this._memoryCleanupPosition < this.lines.length; ) if (t3 += this.lines.get(this._memoryCleanupPosition++).cleanupMemory(), t3 > 100) return true;
              return e3;
            }
            get _isReflowEnabled() {
              const e3 = this._optionsService.rawOptions.windowsPty;
              return e3 && e3.buildNumber ? this._hasScrollback && "conpty" === e3.backend && e3.buildNumber >= 21376 : this._hasScrollback && !this._optionsService.rawOptions.windowsMode;
            }
            _reflow(e3, t3) {
              this._cols !== e3 && (e3 > this._cols ? this._reflowLarger(e3, t3) : this._reflowSmaller(e3, t3));
            }
            _reflowLarger(e3, t3) {
              const i3 = (0, a.reflowLargerGetLinesToRemove)(this.lines, this._cols, e3, this.ybase + this.y, this.getNullCell(o.DEFAULT_ATTR_DATA));
              if (i3.length > 0) {
                const s3 = (0, a.reflowLargerCreateNewLayout)(this.lines, i3);
                (0, a.reflowLargerApplyNewLayout)(this.lines, s3.layout), this._reflowLargerAdjustViewport(e3, t3, s3.countRemoved);
              }
            }
            _reflowLargerAdjustViewport(e3, t3, i3) {
              const s3 = this.getNullCell(o.DEFAULT_ATTR_DATA);
              let r2 = i3;
              for (; r2-- > 0; ) 0 === this.ybase ? (this.y > 0 && this.y--, this.lines.length < t3 && this.lines.push(new o.BufferLine(e3, s3))) : (this.ydisp === this.ybase && this.ydisp--, this.ybase--);
              this.savedY = Math.max(this.savedY - i3, 0);
            }
            _reflowSmaller(e3, t3) {
              const i3 = this.getNullCell(o.DEFAULT_ATTR_DATA), s3 = [];
              let r2 = 0;
              for (let n2 = this.lines.length - 1; n2 >= 0; n2--) {
                let h3 = this.lines.get(n2);
                if (!h3 || !h3.isWrapped && h3.getTrimmedLength() <= e3) continue;
                const c2 = [
                  h3
                ];
                for (; h3.isWrapped && n2 > 0; ) h3 = this.lines.get(--n2), c2.unshift(h3);
                const l3 = this.ybase + this.y;
                if (l3 >= n2 && l3 < n2 + c2.length) continue;
                const d2 = c2[c2.length - 1].getTrimmedLength(), _2 = (0, a.reflowSmallerGetNewLineLengths)(c2, this._cols, e3), u = _2.length - c2.length;
                let f;
                f = 0 === this.ybase && this.y !== this.lines.length - 1 ? Math.max(0, this.y - this.lines.maxLength + u) : Math.max(0, this.lines.length - this.lines.maxLength + u);
                const v2 = [];
                for (let e4 = 0; e4 < u; e4++) {
                  const e5 = this.getBlankLine(o.DEFAULT_ATTR_DATA, true);
                  v2.push(e5);
                }
                v2.length > 0 && (s3.push({
                  start: n2 + c2.length + r2,
                  newLines: v2
                }), r2 += v2.length), c2.push(...v2);
                let p = _2.length - 1, g = _2[p];
                0 === g && (p--, g = _2[p]);
                let m = c2.length - u - 1, S = d2;
                for (; m >= 0; ) {
                  const e4 = Math.min(S, g);
                  if (void 0 === c2[p]) break;
                  if (c2[p].copyCellsFrom(c2[m], S - e4, g - e4, e4, true), g -= e4, 0 === g && (p--, g = _2[p]), S -= e4, 0 === S) {
                    m--;
                    const e5 = Math.max(m, 0);
                    S = (0, a.getWrappedLineTrimmedLength)(c2, e5, this._cols);
                  }
                }
                for (let t4 = 0; t4 < c2.length; t4++) _2[t4] < e3 && c2[t4].setCell(_2[t4], i3);
                let C = u - f;
                for (; C-- > 0; ) 0 === this.ybase ? this.y < t3 - 1 ? (this.y++, this.lines.pop()) : (this.ybase++, this.ydisp++) : this.ybase < Math.min(this.lines.maxLength, this.lines.length + r2) - t3 && (this.ybase === this.ydisp && this.ydisp++, this.ybase++);
                this.savedY = Math.min(this.savedY + u, this.ybase + t3 - 1);
              }
              if (s3.length > 0) {
                const e4 = [], t4 = [];
                for (let e5 = 0; e5 < this.lines.length; e5++) t4.push(this.lines.get(e5));
                const i4 = this.lines.length;
                let n2 = i4 - 1, o2 = 0, a2 = s3[o2];
                this.lines.length = Math.min(this.lines.maxLength, this.lines.length + r2);
                let h3 = 0;
                for (let c3 = Math.min(this.lines.maxLength - 1, i4 + r2 - 1); c3 >= 0; c3--) if (a2 && a2.start > n2 + h3) {
                  for (let e5 = a2.newLines.length - 1; e5 >= 0; e5--) this.lines.set(c3--, a2.newLines[e5]);
                  c3++, e4.push({
                    index: n2 + 1,
                    amount: a2.newLines.length
                  }), h3 += a2.newLines.length, a2 = s3[++o2];
                } else this.lines.set(c3, t4[n2--]);
                let c2 = 0;
                for (let t5 = e4.length - 1; t5 >= 0; t5--) e4[t5].index += c2, this.lines.onInsertEmitter.fire(e4[t5]), c2 += e4[t5].amount;
                const l3 = Math.max(0, i4 + r2 - this.lines.maxLength);
                l3 > 0 && this.lines.onTrimEmitter.fire(l3);
              }
            }
            translateBufferLineToString(e3, t3, i3 = 0, s3) {
              const r2 = this.lines.get(e3);
              return r2 ? r2.translateToString(t3, i3, s3) : "";
            }
            getWrappedRangeForLine(e3) {
              let t3 = e3, i3 = e3;
              for (; t3 > 0 && this.lines.get(t3).isWrapped; ) t3--;
              for (; i3 + 1 < this.lines.length && this.lines.get(i3 + 1).isWrapped; ) i3++;
              return {
                first: t3,
                last: i3
              };
            }
            setupTabStops(e3) {
              for (null != e3 ? this.tabs[e3] || (e3 = this.prevStop(e3)) : (this.tabs = {}, e3 = 0); e3 < this._cols; e3 += this._optionsService.rawOptions.tabStopWidth) this.tabs[e3] = true;
            }
            prevStop(e3) {
              for (null == e3 && (e3 = this.x); !this.tabs[--e3] && e3 > 0; ) ;
              return e3 >= this._cols ? this._cols - 1 : e3 < 0 ? 0 : e3;
            }
            nextStop(e3) {
              for (null == e3 && (e3 = this.x); !this.tabs[++e3] && e3 < this._cols; ) ;
              return e3 >= this._cols ? this._cols - 1 : e3 < 0 ? 0 : e3;
            }
            clearMarkers(e3) {
              this._isClearing = true;
              for (let t3 = 0; t3 < this.markers.length; t3++) this.markers[t3].line === e3 && (this.markers[t3].dispose(), this.markers.splice(t3--, 1));
              this._isClearing = false;
            }
            clearAllMarkers() {
              this._isClearing = true;
              for (let e3 = 0; e3 < this.markers.length; e3++) this.markers[e3].dispose(), this.markers.splice(e3--, 1);
              this._isClearing = false;
            }
            addMarker(e3) {
              const t3 = new l2.Marker(e3);
              return this.markers.push(t3), t3.register(this.lines.onTrim((e4) => {
                t3.line -= e4, t3.line < 0 && t3.dispose();
              })), t3.register(this.lines.onInsert((e4) => {
                t3.line >= e4.index && (t3.line += e4.amount);
              })), t3.register(this.lines.onDelete((e4) => {
                t3.line >= e4.index && t3.line < e4.index + e4.amount && t3.dispose(), t3.line > e4.index && (t3.line -= e4.amount);
              })), t3.register(t3.onDispose(() => this._removeMarker(t3))), t3;
            }
            _removeMarker(e3) {
              this._isClearing || this.markers.splice(this.markers.indexOf(e3), 1);
            }
          };
        },
        8437: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.BufferLine = t2.DEFAULT_ATTR_DATA = void 0;
          const s2 = i2(3734), r = i2(511), n = i2(643), o = i2(482);
          t2.DEFAULT_ATTR_DATA = Object.freeze(new s2.AttributeData());
          let a = 0;
          class h2 {
            constructor(e3, t3, i3 = false) {
              this.isWrapped = i3, this._combined = {}, this._extendedAttrs = {}, this._data = new Uint32Array(3 * e3);
              const s3 = t3 || r.CellData.fromCharData([
                0,
                n.NULL_CELL_CHAR,
                n.NULL_CELL_WIDTH,
                n.NULL_CELL_CODE
              ]);
              for (let t4 = 0; t4 < e3; ++t4) this.setCell(t4, s3);
              this.length = e3;
            }
            get(e3) {
              const t3 = this._data[3 * e3 + 0], i3 = 2097151 & t3;
              return [
                this._data[3 * e3 + 1],
                2097152 & t3 ? this._combined[e3] : i3 ? (0, o.stringFromCodePoint)(i3) : "",
                t3 >> 22,
                2097152 & t3 ? this._combined[e3].charCodeAt(this._combined[e3].length - 1) : i3
              ];
            }
            set(e3, t3) {
              this._data[3 * e3 + 1] = t3[n.CHAR_DATA_ATTR_INDEX], t3[n.CHAR_DATA_CHAR_INDEX].length > 1 ? (this._combined[e3] = t3[1], this._data[3 * e3 + 0] = 2097152 | e3 | t3[n.CHAR_DATA_WIDTH_INDEX] << 22) : this._data[3 * e3 + 0] = t3[n.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | t3[n.CHAR_DATA_WIDTH_INDEX] << 22;
            }
            getWidth(e3) {
              return this._data[3 * e3 + 0] >> 22;
            }
            hasWidth(e3) {
              return 12582912 & this._data[3 * e3 + 0];
            }
            getFg(e3) {
              return this._data[3 * e3 + 1];
            }
            getBg(e3) {
              return this._data[3 * e3 + 2];
            }
            hasContent(e3) {
              return 4194303 & this._data[3 * e3 + 0];
            }
            getCodePoint(e3) {
              const t3 = this._data[3 * e3 + 0];
              return 2097152 & t3 ? this._combined[e3].charCodeAt(this._combined[e3].length - 1) : 2097151 & t3;
            }
            isCombined(e3) {
              return 2097152 & this._data[3 * e3 + 0];
            }
            getString(e3) {
              const t3 = this._data[3 * e3 + 0];
              return 2097152 & t3 ? this._combined[e3] : 2097151 & t3 ? (0, o.stringFromCodePoint)(2097151 & t3) : "";
            }
            isProtected(e3) {
              return 536870912 & this._data[3 * e3 + 2];
            }
            loadCell(e3, t3) {
              return a = 3 * e3, t3.content = this._data[a + 0], t3.fg = this._data[a + 1], t3.bg = this._data[a + 2], 2097152 & t3.content && (t3.combinedData = this._combined[e3]), 268435456 & t3.bg && (t3.extended = this._extendedAttrs[e3]), t3;
            }
            setCell(e3, t3) {
              2097152 & t3.content && (this._combined[e3] = t3.combinedData), 268435456 & t3.bg && (this._extendedAttrs[e3] = t3.extended), this._data[3 * e3 + 0] = t3.content, this._data[3 * e3 + 1] = t3.fg, this._data[3 * e3 + 2] = t3.bg;
            }
            setCellFromCodePoint(e3, t3, i3, s3, r2, n2) {
              268435456 & r2 && (this._extendedAttrs[e3] = n2), this._data[3 * e3 + 0] = t3 | i3 << 22, this._data[3 * e3 + 1] = s3, this._data[3 * e3 + 2] = r2;
            }
            addCodepointToCell(e3, t3) {
              let i3 = this._data[3 * e3 + 0];
              2097152 & i3 ? this._combined[e3] += (0, o.stringFromCodePoint)(t3) : (2097151 & i3 ? (this._combined[e3] = (0, o.stringFromCodePoint)(2097151 & i3) + (0, o.stringFromCodePoint)(t3), i3 &= -2097152, i3 |= 2097152) : i3 = t3 | 1 << 22, this._data[3 * e3 + 0] = i3);
            }
            insertCells(e3, t3, i3, n2) {
              if ((e3 %= this.length) && 2 === this.getWidth(e3 - 1) && this.setCellFromCodePoint(e3 - 1, 0, 1, (null == n2 ? void 0 : n2.fg) || 0, (null == n2 ? void 0 : n2.bg) || 0, (null == n2 ? void 0 : n2.extended) || new s2.ExtendedAttrs()), t3 < this.length - e3) {
                const s3 = new r.CellData();
                for (let i4 = this.length - e3 - t3 - 1; i4 >= 0; --i4) this.setCell(e3 + t3 + i4, this.loadCell(e3 + i4, s3));
                for (let s4 = 0; s4 < t3; ++s4) this.setCell(e3 + s4, i3);
              } else for (let t4 = e3; t4 < this.length; ++t4) this.setCell(t4, i3);
              2 === this.getWidth(this.length - 1) && this.setCellFromCodePoint(this.length - 1, 0, 1, (null == n2 ? void 0 : n2.fg) || 0, (null == n2 ? void 0 : n2.bg) || 0, (null == n2 ? void 0 : n2.extended) || new s2.ExtendedAttrs());
            }
            deleteCells(e3, t3, i3, n2) {
              if (e3 %= this.length, t3 < this.length - e3) {
                const s3 = new r.CellData();
                for (let i4 = 0; i4 < this.length - e3 - t3; ++i4) this.setCell(e3 + i4, this.loadCell(e3 + t3 + i4, s3));
                for (let e4 = this.length - t3; e4 < this.length; ++e4) this.setCell(e4, i3);
              } else for (let t4 = e3; t4 < this.length; ++t4) this.setCell(t4, i3);
              e3 && 2 === this.getWidth(e3 - 1) && this.setCellFromCodePoint(e3 - 1, 0, 1, (null == n2 ? void 0 : n2.fg) || 0, (null == n2 ? void 0 : n2.bg) || 0, (null == n2 ? void 0 : n2.extended) || new s2.ExtendedAttrs()), 0 !== this.getWidth(e3) || this.hasContent(e3) || this.setCellFromCodePoint(e3, 0, 1, (null == n2 ? void 0 : n2.fg) || 0, (null == n2 ? void 0 : n2.bg) || 0, (null == n2 ? void 0 : n2.extended) || new s2.ExtendedAttrs());
            }
            replaceCells(e3, t3, i3, r2, n2 = false) {
              if (n2) for (e3 && 2 === this.getWidth(e3 - 1) && !this.isProtected(e3 - 1) && this.setCellFromCodePoint(e3 - 1, 0, 1, (null == r2 ? void 0 : r2.fg) || 0, (null == r2 ? void 0 : r2.bg) || 0, (null == r2 ? void 0 : r2.extended) || new s2.ExtendedAttrs()), t3 < this.length && 2 === this.getWidth(t3 - 1) && !this.isProtected(t3) && this.setCellFromCodePoint(t3, 0, 1, (null == r2 ? void 0 : r2.fg) || 0, (null == r2 ? void 0 : r2.bg) || 0, (null == r2 ? void 0 : r2.extended) || new s2.ExtendedAttrs()); e3 < t3 && e3 < this.length; ) this.isProtected(e3) || this.setCell(e3, i3), e3++;
              else for (e3 && 2 === this.getWidth(e3 - 1) && this.setCellFromCodePoint(e3 - 1, 0, 1, (null == r2 ? void 0 : r2.fg) || 0, (null == r2 ? void 0 : r2.bg) || 0, (null == r2 ? void 0 : r2.extended) || new s2.ExtendedAttrs()), t3 < this.length && 2 === this.getWidth(t3 - 1) && this.setCellFromCodePoint(t3, 0, 1, (null == r2 ? void 0 : r2.fg) || 0, (null == r2 ? void 0 : r2.bg) || 0, (null == r2 ? void 0 : r2.extended) || new s2.ExtendedAttrs()); e3 < t3 && e3 < this.length; ) this.setCell(e3++, i3);
            }
            resize(e3, t3) {
              if (e3 === this.length) return 4 * this._data.length * 2 < this._data.buffer.byteLength;
              const i3 = 3 * e3;
              if (e3 > this.length) {
                if (this._data.buffer.byteLength >= 4 * i3) this._data = new Uint32Array(this._data.buffer, 0, i3);
                else {
                  const e4 = new Uint32Array(i3);
                  e4.set(this._data), this._data = e4;
                }
                for (let i4 = this.length; i4 < e3; ++i4) this.setCell(i4, t3);
              } else {
                this._data = this._data.subarray(0, i3);
                const t4 = Object.keys(this._combined);
                for (let i4 = 0; i4 < t4.length; i4++) {
                  const s4 = parseInt(t4[i4], 10);
                  s4 >= e3 && delete this._combined[s4];
                }
                const s3 = Object.keys(this._extendedAttrs);
                for (let t5 = 0; t5 < s3.length; t5++) {
                  const i4 = parseInt(s3[t5], 10);
                  i4 >= e3 && delete this._extendedAttrs[i4];
                }
              }
              return this.length = e3, 4 * i3 * 2 < this._data.buffer.byteLength;
            }
            cleanupMemory() {
              if (4 * this._data.length * 2 < this._data.buffer.byteLength) {
                const e3 = new Uint32Array(this._data.length);
                return e3.set(this._data), this._data = e3, 1;
              }
              return 0;
            }
            fill(e3, t3 = false) {
              if (t3) for (let t4 = 0; t4 < this.length; ++t4) this.isProtected(t4) || this.setCell(t4, e3);
              else {
                this._combined = {}, this._extendedAttrs = {};
                for (let t4 = 0; t4 < this.length; ++t4) this.setCell(t4, e3);
              }
            }
            copyFrom(e3) {
              this.length !== e3.length ? this._data = new Uint32Array(e3._data) : this._data.set(e3._data), this.length = e3.length, this._combined = {};
              for (const t3 in e3._combined) this._combined[t3] = e3._combined[t3];
              this._extendedAttrs = {};
              for (const t3 in e3._extendedAttrs) this._extendedAttrs[t3] = e3._extendedAttrs[t3];
              this.isWrapped = e3.isWrapped;
            }
            clone() {
              const e3 = new h2(0);
              e3._data = new Uint32Array(this._data), e3.length = this.length;
              for (const t3 in this._combined) e3._combined[t3] = this._combined[t3];
              for (const t3 in this._extendedAttrs) e3._extendedAttrs[t3] = this._extendedAttrs[t3];
              return e3.isWrapped = this.isWrapped, e3;
            }
            getTrimmedLength() {
              for (let e3 = this.length - 1; e3 >= 0; --e3) if (4194303 & this._data[3 * e3 + 0]) return e3 + (this._data[3 * e3 + 0] >> 22);
              return 0;
            }
            getNoBgTrimmedLength() {
              for (let e3 = this.length - 1; e3 >= 0; --e3) if (4194303 & this._data[3 * e3 + 0] || 50331648 & this._data[3 * e3 + 2]) return e3 + (this._data[3 * e3 + 0] >> 22);
              return 0;
            }
            copyCellsFrom(e3, t3, i3, s3, r2) {
              const n2 = e3._data;
              if (r2) for (let r3 = s3 - 1; r3 >= 0; r3--) {
                for (let e4 = 0; e4 < 3; e4++) this._data[3 * (i3 + r3) + e4] = n2[3 * (t3 + r3) + e4];
                268435456 & n2[3 * (t3 + r3) + 2] && (this._extendedAttrs[i3 + r3] = e3._extendedAttrs[t3 + r3]);
              }
              else for (let r3 = 0; r3 < s3; r3++) {
                for (let e4 = 0; e4 < 3; e4++) this._data[3 * (i3 + r3) + e4] = n2[3 * (t3 + r3) + e4];
                268435456 & n2[3 * (t3 + r3) + 2] && (this._extendedAttrs[i3 + r3] = e3._extendedAttrs[t3 + r3]);
              }
              const o2 = Object.keys(e3._combined);
              for (let s4 = 0; s4 < o2.length; s4++) {
                const r3 = parseInt(o2[s4], 10);
                r3 >= t3 && (this._combined[r3 - t3 + i3] = e3._combined[r3]);
              }
            }
            translateToString(e3 = false, t3 = 0, i3 = this.length) {
              e3 && (i3 = Math.min(i3, this.getTrimmedLength()));
              let s3 = "";
              for (; t3 < i3; ) {
                const e4 = this._data[3 * t3 + 0], i4 = 2097151 & e4;
                s3 += 2097152 & e4 ? this._combined[t3] : i4 ? (0, o.stringFromCodePoint)(i4) : n.WHITESPACE_CELL_CHAR, t3 += e4 >> 22 || 1;
              }
              return s3;
            }
          }
          t2.BufferLine = h2;
        },
        4841: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.getRangeLength = void 0, t2.getRangeLength = function(e3, t3) {
            if (e3.start.y > e3.end.y) throw new Error(`Buffer range end (${e3.end.x}, ${e3.end.y}) cannot be before start (${e3.start.x}, ${e3.start.y})`);
            return t3 * (e3.end.y - e3.start.y) + (e3.end.x - e3.start.x + 1);
          };
        },
        4634: (e2, t2) => {
          function i2(e3, t3, i3) {
            if (t3 === e3.length - 1) return e3[t3].getTrimmedLength();
            const s2 = !e3[t3].hasContent(i3 - 1) && 1 === e3[t3].getWidth(i3 - 1), r = 2 === e3[t3 + 1].getWidth(0);
            return s2 && r ? i3 - 1 : i3;
          }
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.getWrappedLineTrimmedLength = t2.reflowSmallerGetNewLineLengths = t2.reflowLargerApplyNewLayout = t2.reflowLargerCreateNewLayout = t2.reflowLargerGetLinesToRemove = void 0, t2.reflowLargerGetLinesToRemove = function(e3, t3, s2, r, n) {
            const o = [];
            for (let a = 0; a < e3.length - 1; a++) {
              let h2 = a, c = e3.get(++h2);
              if (!c.isWrapped) continue;
              const l2 = [
                e3.get(a)
              ];
              for (; h2 < e3.length && c.isWrapped; ) l2.push(c), c = e3.get(++h2);
              if (r >= a && r < h2) {
                a += l2.length - 1;
                continue;
              }
              let d = 0, _2 = i2(l2, d, t3), u = 1, f = 0;
              for (; u < l2.length; ) {
                const e4 = i2(l2, u, t3), r2 = e4 - f, o2 = s2 - _2, a2 = Math.min(r2, o2);
                l2[d].copyCellsFrom(l2[u], f, _2, a2, false), _2 += a2, _2 === s2 && (d++, _2 = 0), f += a2, f === e4 && (u++, f = 0), 0 === _2 && 0 !== d && 2 === l2[d - 1].getWidth(s2 - 1) && (l2[d].copyCellsFrom(l2[d - 1], s2 - 1, _2++, 1, false), l2[d - 1].setCell(s2 - 1, n));
              }
              l2[d].replaceCells(_2, s2, n);
              let v2 = 0;
              for (let e4 = l2.length - 1; e4 > 0 && (e4 > d || 0 === l2[e4].getTrimmedLength()); e4--) v2++;
              v2 > 0 && (o.push(a + l2.length - v2), o.push(v2)), a += l2.length - 1;
            }
            return o;
          }, t2.reflowLargerCreateNewLayout = function(e3, t3) {
            const i3 = [];
            let s2 = 0, r = t3[s2], n = 0;
            for (let o = 0; o < e3.length; o++) if (r === o) {
              const i4 = t3[++s2];
              e3.onDeleteEmitter.fire({
                index: o - n,
                amount: i4
              }), o += i4 - 1, n += i4, r = t3[++s2];
            } else i3.push(o);
            return {
              layout: i3,
              countRemoved: n
            };
          }, t2.reflowLargerApplyNewLayout = function(e3, t3) {
            const i3 = [];
            for (let s2 = 0; s2 < t3.length; s2++) i3.push(e3.get(t3[s2]));
            for (let t4 = 0; t4 < i3.length; t4++) e3.set(t4, i3[t4]);
            e3.length = t3.length;
          }, t2.reflowSmallerGetNewLineLengths = function(e3, t3, s2) {
            const r = [], n = e3.map((s3, r2) => i2(e3, r2, t3)).reduce((e4, t4) => e4 + t4);
            let o = 0, a = 0, h2 = 0;
            for (; h2 < n; ) {
              if (n - h2 < s2) {
                r.push(n - h2);
                break;
              }
              o += s2;
              const c = i2(e3, a, t3);
              o > c && (o -= c, a++);
              const l2 = 2 === e3[a].getWidth(o - 1);
              l2 && o--;
              const d = l2 ? s2 - 1 : s2;
              r.push(d), h2 += d;
            }
            return r;
          }, t2.getWrappedLineTrimmedLength = i2;
        },
        5295: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.BufferSet = void 0;
          const s2 = i2(8460), r = i2(844), n = i2(9092);
          class o extends r.Disposable {
            constructor(e3, t3) {
              super(), this._optionsService = e3, this._bufferService = t3, this._onBufferActivate = this.register(new s2.EventEmitter()), this.onBufferActivate = this._onBufferActivate.event, this.reset(), this.register(this._optionsService.onSpecificOptionChange("scrollback", () => this.resize(this._bufferService.cols, this._bufferService.rows))), this.register(this._optionsService.onSpecificOptionChange("tabStopWidth", () => this.setupTabStops()));
            }
            reset() {
              this._normal = new n.Buffer(true, this._optionsService, this._bufferService), this._normal.fillViewportRows(), this._alt = new n.Buffer(false, this._optionsService, this._bufferService), this._activeBuffer = this._normal, this._onBufferActivate.fire({
                activeBuffer: this._normal,
                inactiveBuffer: this._alt
              }), this.setupTabStops();
            }
            get alt() {
              return this._alt;
            }
            get active() {
              return this._activeBuffer;
            }
            get normal() {
              return this._normal;
            }
            activateNormalBuffer() {
              this._activeBuffer !== this._normal && (this._normal.x = this._alt.x, this._normal.y = this._alt.y, this._alt.clearAllMarkers(), this._alt.clear(), this._activeBuffer = this._normal, this._onBufferActivate.fire({
                activeBuffer: this._normal,
                inactiveBuffer: this._alt
              }));
            }
            activateAltBuffer(e3) {
              this._activeBuffer !== this._alt && (this._alt.fillViewportRows(e3), this._alt.x = this._normal.x, this._alt.y = this._normal.y, this._activeBuffer = this._alt, this._onBufferActivate.fire({
                activeBuffer: this._alt,
                inactiveBuffer: this._normal
              }));
            }
            resize(e3, t3) {
              this._normal.resize(e3, t3), this._alt.resize(e3, t3), this.setupTabStops(e3);
            }
            setupTabStops(e3) {
              this._normal.setupTabStops(e3), this._alt.setupTabStops(e3);
            }
          }
          t2.BufferSet = o;
        },
        511: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CellData = void 0;
          const s2 = i2(482), r = i2(643), n = i2(3734);
          class o extends n.AttributeData {
            constructor() {
              super(...arguments), this.content = 0, this.fg = 0, this.bg = 0, this.extended = new n.ExtendedAttrs(), this.combinedData = "";
            }
            static fromCharData(e3) {
              const t3 = new o();
              return t3.setFromCharData(e3), t3;
            }
            isCombined() {
              return 2097152 & this.content;
            }
            getWidth() {
              return this.content >> 22;
            }
            getChars() {
              return 2097152 & this.content ? this.combinedData : 2097151 & this.content ? (0, s2.stringFromCodePoint)(2097151 & this.content) : "";
            }
            getCode() {
              return this.isCombined() ? this.combinedData.charCodeAt(this.combinedData.length - 1) : 2097151 & this.content;
            }
            setFromCharData(e3) {
              this.fg = e3[r.CHAR_DATA_ATTR_INDEX], this.bg = 0;
              let t3 = false;
              if (e3[r.CHAR_DATA_CHAR_INDEX].length > 2) t3 = true;
              else if (2 === e3[r.CHAR_DATA_CHAR_INDEX].length) {
                const i3 = e3[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0);
                if (55296 <= i3 && i3 <= 56319) {
                  const s3 = e3[r.CHAR_DATA_CHAR_INDEX].charCodeAt(1);
                  56320 <= s3 && s3 <= 57343 ? this.content = 1024 * (i3 - 55296) + s3 - 56320 + 65536 | e3[r.CHAR_DATA_WIDTH_INDEX] << 22 : t3 = true;
                } else t3 = true;
              } else this.content = e3[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | e3[r.CHAR_DATA_WIDTH_INDEX] << 22;
              t3 && (this.combinedData = e3[r.CHAR_DATA_CHAR_INDEX], this.content = 2097152 | e3[r.CHAR_DATA_WIDTH_INDEX] << 22);
            }
            getAsCharData() {
              return [
                this.fg,
                this.getChars(),
                this.getWidth(),
                this.getCode()
              ];
            }
          }
          t2.CellData = o;
        },
        643: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.WHITESPACE_CELL_CODE = t2.WHITESPACE_CELL_WIDTH = t2.WHITESPACE_CELL_CHAR = t2.NULL_CELL_CODE = t2.NULL_CELL_WIDTH = t2.NULL_CELL_CHAR = t2.CHAR_DATA_CODE_INDEX = t2.CHAR_DATA_WIDTH_INDEX = t2.CHAR_DATA_CHAR_INDEX = t2.CHAR_DATA_ATTR_INDEX = t2.DEFAULT_EXT = t2.DEFAULT_ATTR = t2.DEFAULT_COLOR = void 0, t2.DEFAULT_COLOR = 0, t2.DEFAULT_ATTR = 256 | t2.DEFAULT_COLOR << 9, t2.DEFAULT_EXT = 0, t2.CHAR_DATA_ATTR_INDEX = 0, t2.CHAR_DATA_CHAR_INDEX = 1, t2.CHAR_DATA_WIDTH_INDEX = 2, t2.CHAR_DATA_CODE_INDEX = 3, t2.NULL_CELL_CHAR = "", t2.NULL_CELL_WIDTH = 1, t2.NULL_CELL_CODE = 0, t2.WHITESPACE_CELL_CHAR = " ", t2.WHITESPACE_CELL_WIDTH = 1, t2.WHITESPACE_CELL_CODE = 32;
        },
        4863: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.Marker = void 0;
          const s2 = i2(8460), r = i2(844);
          class n {
            get id() {
              return this._id;
            }
            constructor(e3) {
              this.line = e3, this.isDisposed = false, this._disposables = [], this._id = n._nextId++, this._onDispose = this.register(new s2.EventEmitter()), this.onDispose = this._onDispose.event;
            }
            dispose() {
              this.isDisposed || (this.isDisposed = true, this.line = -1, this._onDispose.fire(), (0, r.disposeArray)(this._disposables), this._disposables.length = 0);
            }
            register(e3) {
              return this._disposables.push(e3), e3;
            }
          }
          t2.Marker = n, n._nextId = 1;
        },
        7116: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.DEFAULT_CHARSET = t2.CHARSETS = void 0, t2.CHARSETS = {}, t2.DEFAULT_CHARSET = t2.CHARSETS.B, t2.CHARSETS[0] = {
            "`": "\u25C6",
            a: "\u2592",
            b: "\u2409",
            c: "\u240C",
            d: "\u240D",
            e: "\u240A",
            f: "\xB0",
            g: "\xB1",
            h: "\u2424",
            i: "\u240B",
            j: "\u2518",
            k: "\u2510",
            l: "\u250C",
            m: "\u2514",
            n: "\u253C",
            o: "\u23BA",
            p: "\u23BB",
            q: "\u2500",
            r: "\u23BC",
            s: "\u23BD",
            t: "\u251C",
            u: "\u2524",
            v: "\u2534",
            w: "\u252C",
            x: "\u2502",
            y: "\u2264",
            z: "\u2265",
            "{": "\u03C0",
            "|": "\u2260",
            "}": "\xA3",
            "~": "\xB7"
          }, t2.CHARSETS.A = {
            "#": "\xA3"
          }, t2.CHARSETS.B = void 0, t2.CHARSETS[4] = {
            "#": "\xA3",
            "@": "\xBE",
            "[": "ij",
            "\\": "\xBD",
            "]": "|",
            "{": "\xA8",
            "|": "f",
            "}": "\xBC",
            "~": "\xB4"
          }, t2.CHARSETS.C = t2.CHARSETS[5] = {
            "[": "\xC4",
            "\\": "\xD6",
            "]": "\xC5",
            "^": "\xDC",
            "`": "\xE9",
            "{": "\xE4",
            "|": "\xF6",
            "}": "\xE5",
            "~": "\xFC"
          }, t2.CHARSETS.R = {
            "#": "\xA3",
            "@": "\xE0",
            "[": "\xB0",
            "\\": "\xE7",
            "]": "\xA7",
            "{": "\xE9",
            "|": "\xF9",
            "}": "\xE8",
            "~": "\xA8"
          }, t2.CHARSETS.Q = {
            "@": "\xE0",
            "[": "\xE2",
            "\\": "\xE7",
            "]": "\xEA",
            "^": "\xEE",
            "`": "\xF4",
            "{": "\xE9",
            "|": "\xF9",
            "}": "\xE8",
            "~": "\xFB"
          }, t2.CHARSETS.K = {
            "@": "\xA7",
            "[": "\xC4",
            "\\": "\xD6",
            "]": "\xDC",
            "{": "\xE4",
            "|": "\xF6",
            "}": "\xFC",
            "~": "\xDF"
          }, t2.CHARSETS.Y = {
            "#": "\xA3",
            "@": "\xA7",
            "[": "\xB0",
            "\\": "\xE7",
            "]": "\xE9",
            "`": "\xF9",
            "{": "\xE0",
            "|": "\xF2",
            "}": "\xE8",
            "~": "\xEC"
          }, t2.CHARSETS.E = t2.CHARSETS[6] = {
            "@": "\xC4",
            "[": "\xC6",
            "\\": "\xD8",
            "]": "\xC5",
            "^": "\xDC",
            "`": "\xE4",
            "{": "\xE6",
            "|": "\xF8",
            "}": "\xE5",
            "~": "\xFC"
          }, t2.CHARSETS.Z = {
            "#": "\xA3",
            "@": "\xA7",
            "[": "\xA1",
            "\\": "\xD1",
            "]": "\xBF",
            "{": "\xB0",
            "|": "\xF1",
            "}": "\xE7"
          }, t2.CHARSETS.H = t2.CHARSETS[7] = {
            "@": "\xC9",
            "[": "\xC4",
            "\\": "\xD6",
            "]": "\xC5",
            "^": "\xDC",
            "`": "\xE9",
            "{": "\xE4",
            "|": "\xF6",
            "}": "\xE5",
            "~": "\xFC"
          }, t2.CHARSETS["="] = {
            "#": "\xF9",
            "@": "\xE0",
            "[": "\xE9",
            "\\": "\xE7",
            "]": "\xEA",
            "^": "\xEE",
            _: "\xE8",
            "`": "\xF4",
            "{": "\xE4",
            "|": "\xF6",
            "}": "\xFC",
            "~": "\xFB"
          };
        },
        2584: (e2, t2) => {
          var i2, s2, r;
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.C1_ESCAPED = t2.C1 = t2.C0 = void 0, function(e3) {
            e3.NUL = "\0", e3.SOH = "", e3.STX = "", e3.ETX = "", e3.EOT = "", e3.ENQ = "", e3.ACK = "", e3.BEL = "\x07", e3.BS = "\b", e3.HT = "	", e3.LF = "\n", e3.VT = "\v", e3.FF = "\f", e3.CR = "\r", e3.SO = "", e3.SI = "", e3.DLE = "", e3.DC1 = "", e3.DC2 = "", e3.DC3 = "", e3.DC4 = "", e3.NAK = "", e3.SYN = "", e3.ETB = "", e3.CAN = "", e3.EM = "", e3.SUB = "", e3.ESC = "\x1B", e3.FS = "", e3.GS = "", e3.RS = "", e3.US = "", e3.SP = " ", e3.DEL = "\x7F";
          }(i2 || (t2.C0 = i2 = {})), function(e3) {
            e3.PAD = "\x80", e3.HOP = "\x81", e3.BPH = "\x82", e3.NBH = "\x83", e3.IND = "\x84", e3.NEL = "\x85", e3.SSA = "\x86", e3.ESA = "\x87", e3.HTS = "\x88", e3.HTJ = "\x89", e3.VTS = "\x8A", e3.PLD = "\x8B", e3.PLU = "\x8C", e3.RI = "\x8D", e3.SS2 = "\x8E", e3.SS3 = "\x8F", e3.DCS = "\x90", e3.PU1 = "\x91", e3.PU2 = "\x92", e3.STS = "\x93", e3.CCH = "\x94", e3.MW = "\x95", e3.SPA = "\x96", e3.EPA = "\x97", e3.SOS = "\x98", e3.SGCI = "\x99", e3.SCI = "\x9A", e3.CSI = "\x9B", e3.ST = "\x9C", e3.OSC = "\x9D", e3.PM = "\x9E", e3.APC = "\x9F";
          }(s2 || (t2.C1 = s2 = {})), function(e3) {
            e3.ST = `${i2.ESC}\\`;
          }(r || (t2.C1_ESCAPED = r = {}));
        },
        7399: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.evaluateKeyboardEvent = void 0;
          const s2 = i2(2584), r = {
            48: [
              "0",
              ")"
            ],
            49: [
              "1",
              "!"
            ],
            50: [
              "2",
              "@"
            ],
            51: [
              "3",
              "#"
            ],
            52: [
              "4",
              "$"
            ],
            53: [
              "5",
              "%"
            ],
            54: [
              "6",
              "^"
            ],
            55: [
              "7",
              "&"
            ],
            56: [
              "8",
              "*"
            ],
            57: [
              "9",
              "("
            ],
            186: [
              ";",
              ":"
            ],
            187: [
              "=",
              "+"
            ],
            188: [
              ",",
              "<"
            ],
            189: [
              "-",
              "_"
            ],
            190: [
              ".",
              ">"
            ],
            191: [
              "/",
              "?"
            ],
            192: [
              "`",
              "~"
            ],
            219: [
              "[",
              "{"
            ],
            220: [
              "\\",
              "|"
            ],
            221: [
              "]",
              "}"
            ],
            222: [
              "'",
              '"'
            ]
          };
          t2.evaluateKeyboardEvent = function(e3, t3, i3, n) {
            const o = {
              type: 0,
              cancel: false,
              key: void 0
            }, a = (e3.shiftKey ? 1 : 0) | (e3.altKey ? 2 : 0) | (e3.ctrlKey ? 4 : 0) | (e3.metaKey ? 8 : 0);
            switch (e3.keyCode) {
              case 0:
                "UIKeyInputUpArrow" === e3.key ? o.key = t3 ? s2.C0.ESC + "OA" : s2.C0.ESC + "[A" : "UIKeyInputLeftArrow" === e3.key ? o.key = t3 ? s2.C0.ESC + "OD" : s2.C0.ESC + "[D" : "UIKeyInputRightArrow" === e3.key ? o.key = t3 ? s2.C0.ESC + "OC" : s2.C0.ESC + "[C" : "UIKeyInputDownArrow" === e3.key && (o.key = t3 ? s2.C0.ESC + "OB" : s2.C0.ESC + "[B");
                break;
              case 8:
                if (e3.altKey) {
                  o.key = s2.C0.ESC + s2.C0.DEL;
                  break;
                }
                o.key = s2.C0.DEL;
                break;
              case 9:
                if (e3.shiftKey) {
                  o.key = s2.C0.ESC + "[Z";
                  break;
                }
                o.key = s2.C0.HT, o.cancel = true;
                break;
              case 13:
                o.key = e3.altKey ? s2.C0.ESC + s2.C0.CR : s2.C0.CR, o.cancel = true;
                break;
              case 27:
                o.key = s2.C0.ESC, e3.altKey && (o.key = s2.C0.ESC + s2.C0.ESC), o.cancel = true;
                break;
              case 37:
                if (e3.metaKey) break;
                a ? (o.key = s2.C0.ESC + "[1;" + (a + 1) + "D", o.key === s2.C0.ESC + "[1;3D" && (o.key = s2.C0.ESC + (i3 ? "b" : "[1;5D"))) : o.key = t3 ? s2.C0.ESC + "OD" : s2.C0.ESC + "[D";
                break;
              case 39:
                if (e3.metaKey) break;
                a ? (o.key = s2.C0.ESC + "[1;" + (a + 1) + "C", o.key === s2.C0.ESC + "[1;3C" && (o.key = s2.C0.ESC + (i3 ? "f" : "[1;5C"))) : o.key = t3 ? s2.C0.ESC + "OC" : s2.C0.ESC + "[C";
                break;
              case 38:
                if (e3.metaKey) break;
                a ? (o.key = s2.C0.ESC + "[1;" + (a + 1) + "A", i3 || o.key !== s2.C0.ESC + "[1;3A" || (o.key = s2.C0.ESC + "[1;5A")) : o.key = t3 ? s2.C0.ESC + "OA" : s2.C0.ESC + "[A";
                break;
              case 40:
                if (e3.metaKey) break;
                a ? (o.key = s2.C0.ESC + "[1;" + (a + 1) + "B", i3 || o.key !== s2.C0.ESC + "[1;3B" || (o.key = s2.C0.ESC + "[1;5B")) : o.key = t3 ? s2.C0.ESC + "OB" : s2.C0.ESC + "[B";
                break;
              case 45:
                e3.shiftKey || e3.ctrlKey || (o.key = s2.C0.ESC + "[2~");
                break;
              case 46:
                o.key = a ? s2.C0.ESC + "[3;" + (a + 1) + "~" : s2.C0.ESC + "[3~";
                break;
              case 36:
                o.key = a ? s2.C0.ESC + "[1;" + (a + 1) + "H" : t3 ? s2.C0.ESC + "OH" : s2.C0.ESC + "[H";
                break;
              case 35:
                o.key = a ? s2.C0.ESC + "[1;" + (a + 1) + "F" : t3 ? s2.C0.ESC + "OF" : s2.C0.ESC + "[F";
                break;
              case 33:
                e3.shiftKey ? o.type = 2 : e3.ctrlKey ? o.key = s2.C0.ESC + "[5;" + (a + 1) + "~" : o.key = s2.C0.ESC + "[5~";
                break;
              case 34:
                e3.shiftKey ? o.type = 3 : e3.ctrlKey ? o.key = s2.C0.ESC + "[6;" + (a + 1) + "~" : o.key = s2.C0.ESC + "[6~";
                break;
              case 112:
                o.key = a ? s2.C0.ESC + "[1;" + (a + 1) + "P" : s2.C0.ESC + "OP";
                break;
              case 113:
                o.key = a ? s2.C0.ESC + "[1;" + (a + 1) + "Q" : s2.C0.ESC + "OQ";
                break;
              case 114:
                o.key = a ? s2.C0.ESC + "[1;" + (a + 1) + "R" : s2.C0.ESC + "OR";
                break;
              case 115:
                o.key = a ? s2.C0.ESC + "[1;" + (a + 1) + "S" : s2.C0.ESC + "OS";
                break;
              case 116:
                o.key = a ? s2.C0.ESC + "[15;" + (a + 1) + "~" : s2.C0.ESC + "[15~";
                break;
              case 117:
                o.key = a ? s2.C0.ESC + "[17;" + (a + 1) + "~" : s2.C0.ESC + "[17~";
                break;
              case 118:
                o.key = a ? s2.C0.ESC + "[18;" + (a + 1) + "~" : s2.C0.ESC + "[18~";
                break;
              case 119:
                o.key = a ? s2.C0.ESC + "[19;" + (a + 1) + "~" : s2.C0.ESC + "[19~";
                break;
              case 120:
                o.key = a ? s2.C0.ESC + "[20;" + (a + 1) + "~" : s2.C0.ESC + "[20~";
                break;
              case 121:
                o.key = a ? s2.C0.ESC + "[21;" + (a + 1) + "~" : s2.C0.ESC + "[21~";
                break;
              case 122:
                o.key = a ? s2.C0.ESC + "[23;" + (a + 1) + "~" : s2.C0.ESC + "[23~";
                break;
              case 123:
                o.key = a ? s2.C0.ESC + "[24;" + (a + 1) + "~" : s2.C0.ESC + "[24~";
                break;
              default:
                if (!e3.ctrlKey || e3.shiftKey || e3.altKey || e3.metaKey) if (i3 && !n || !e3.altKey || e3.metaKey) !i3 || e3.altKey || e3.ctrlKey || e3.shiftKey || !e3.metaKey ? e3.key && !e3.ctrlKey && !e3.altKey && !e3.metaKey && e3.keyCode >= 48 && 1 === e3.key.length ? o.key = e3.key : e3.key && e3.ctrlKey && ("_" === e3.key && (o.key = s2.C0.US), "@" === e3.key && (o.key = s2.C0.NUL)) : 65 === e3.keyCode && (o.type = 1);
                else {
                  const t4 = r[e3.keyCode], i4 = null == t4 ? void 0 : t4[e3.shiftKey ? 1 : 0];
                  if (i4) o.key = s2.C0.ESC + i4;
                  else if (e3.keyCode >= 65 && e3.keyCode <= 90) {
                    const t5 = e3.ctrlKey ? e3.keyCode - 64 : e3.keyCode + 32;
                    let i5 = String.fromCharCode(t5);
                    e3.shiftKey && (i5 = i5.toUpperCase()), o.key = s2.C0.ESC + i5;
                  } else if (32 === e3.keyCode) o.key = s2.C0.ESC + (e3.ctrlKey ? s2.C0.NUL : " ");
                  else if ("Dead" === e3.key && e3.code.startsWith("Key")) {
                    let t5 = e3.code.slice(3, 4);
                    e3.shiftKey || (t5 = t5.toLowerCase()), o.key = s2.C0.ESC + t5, o.cancel = true;
                  }
                }
                else e3.keyCode >= 65 && e3.keyCode <= 90 ? o.key = String.fromCharCode(e3.keyCode - 64) : 32 === e3.keyCode ? o.key = s2.C0.NUL : e3.keyCode >= 51 && e3.keyCode <= 55 ? o.key = String.fromCharCode(e3.keyCode - 51 + 27) : 56 === e3.keyCode ? o.key = s2.C0.DEL : 219 === e3.keyCode ? o.key = s2.C0.ESC : 220 === e3.keyCode ? o.key = s2.C0.FS : 221 === e3.keyCode && (o.key = s2.C0.GS);
            }
            return o;
          };
        },
        482: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.Utf8ToUtf32 = t2.StringToUtf32 = t2.utf32ToString = t2.stringFromCodePoint = void 0, t2.stringFromCodePoint = function(e3) {
            return e3 > 65535 ? (e3 -= 65536, String.fromCharCode(55296 + (e3 >> 10)) + String.fromCharCode(e3 % 1024 + 56320)) : String.fromCharCode(e3);
          }, t2.utf32ToString = function(e3, t3 = 0, i2 = e3.length) {
            let s2 = "";
            for (let r = t3; r < i2; ++r) {
              let t4 = e3[r];
              t4 > 65535 ? (t4 -= 65536, s2 += String.fromCharCode(55296 + (t4 >> 10)) + String.fromCharCode(t4 % 1024 + 56320)) : s2 += String.fromCharCode(t4);
            }
            return s2;
          }, t2.StringToUtf32 = class {
            constructor() {
              this._interim = 0;
            }
            clear() {
              this._interim = 0;
            }
            decode(e3, t3) {
              const i2 = e3.length;
              if (!i2) return 0;
              let s2 = 0, r = 0;
              if (this._interim) {
                const i3 = e3.charCodeAt(r++);
                56320 <= i3 && i3 <= 57343 ? t3[s2++] = 1024 * (this._interim - 55296) + i3 - 56320 + 65536 : (t3[s2++] = this._interim, t3[s2++] = i3), this._interim = 0;
              }
              for (let n = r; n < i2; ++n) {
                const r2 = e3.charCodeAt(n);
                if (55296 <= r2 && r2 <= 56319) {
                  if (++n >= i2) return this._interim = r2, s2;
                  const o = e3.charCodeAt(n);
                  56320 <= o && o <= 57343 ? t3[s2++] = 1024 * (r2 - 55296) + o - 56320 + 65536 : (t3[s2++] = r2, t3[s2++] = o);
                } else 65279 !== r2 && (t3[s2++] = r2);
              }
              return s2;
            }
          }, t2.Utf8ToUtf32 = class {
            constructor() {
              this.interim = new Uint8Array(3);
            }
            clear() {
              this.interim.fill(0);
            }
            decode(e3, t3) {
              const i2 = e3.length;
              if (!i2) return 0;
              let s2, r, n, o, a = 0, h2 = 0, c = 0;
              if (this.interim[0]) {
                let s3 = false, r2 = this.interim[0];
                r2 &= 192 == (224 & r2) ? 31 : 224 == (240 & r2) ? 15 : 7;
                let n2, o2 = 0;
                for (; (n2 = 63 & this.interim[++o2]) && o2 < 4; ) r2 <<= 6, r2 |= n2;
                const h3 = 192 == (224 & this.interim[0]) ? 2 : 224 == (240 & this.interim[0]) ? 3 : 4, l3 = h3 - o2;
                for (; c < l3; ) {
                  if (c >= i2) return 0;
                  if (n2 = e3[c++], 128 != (192 & n2)) {
                    c--, s3 = true;
                    break;
                  }
                  this.interim[o2++] = n2, r2 <<= 6, r2 |= 63 & n2;
                }
                s3 || (2 === h3 ? r2 < 128 ? c-- : t3[a++] = r2 : 3 === h3 ? r2 < 2048 || r2 >= 55296 && r2 <= 57343 || 65279 === r2 || (t3[a++] = r2) : r2 < 65536 || r2 > 1114111 || (t3[a++] = r2)), this.interim.fill(0);
              }
              const l2 = i2 - 4;
              let d = c;
              for (; d < i2; ) {
                for (; !(!(d < l2) || 128 & (s2 = e3[d]) || 128 & (r = e3[d + 1]) || 128 & (n = e3[d + 2]) || 128 & (o = e3[d + 3])); ) t3[a++] = s2, t3[a++] = r, t3[a++] = n, t3[a++] = o, d += 4;
                if (s2 = e3[d++], s2 < 128) t3[a++] = s2;
                else if (192 == (224 & s2)) {
                  if (d >= i2) return this.interim[0] = s2, a;
                  if (r = e3[d++], 128 != (192 & r)) {
                    d--;
                    continue;
                  }
                  if (h2 = (31 & s2) << 6 | 63 & r, h2 < 128) {
                    d--;
                    continue;
                  }
                  t3[a++] = h2;
                } else if (224 == (240 & s2)) {
                  if (d >= i2) return this.interim[0] = s2, a;
                  if (r = e3[d++], 128 != (192 & r)) {
                    d--;
                    continue;
                  }
                  if (d >= i2) return this.interim[0] = s2, this.interim[1] = r, a;
                  if (n = e3[d++], 128 != (192 & n)) {
                    d--;
                    continue;
                  }
                  if (h2 = (15 & s2) << 12 | (63 & r) << 6 | 63 & n, h2 < 2048 || h2 >= 55296 && h2 <= 57343 || 65279 === h2) continue;
                  t3[a++] = h2;
                } else if (240 == (248 & s2)) {
                  if (d >= i2) return this.interim[0] = s2, a;
                  if (r = e3[d++], 128 != (192 & r)) {
                    d--;
                    continue;
                  }
                  if (d >= i2) return this.interim[0] = s2, this.interim[1] = r, a;
                  if (n = e3[d++], 128 != (192 & n)) {
                    d--;
                    continue;
                  }
                  if (d >= i2) return this.interim[0] = s2, this.interim[1] = r, this.interim[2] = n, a;
                  if (o = e3[d++], 128 != (192 & o)) {
                    d--;
                    continue;
                  }
                  if (h2 = (7 & s2) << 18 | (63 & r) << 12 | (63 & n) << 6 | 63 & o, h2 < 65536 || h2 > 1114111) continue;
                  t3[a++] = h2;
                }
              }
              return a;
            }
          };
        },
        225: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.UnicodeV6 = void 0;
          const i2 = [
            [
              768,
              879
            ],
            [
              1155,
              1158
            ],
            [
              1160,
              1161
            ],
            [
              1425,
              1469
            ],
            [
              1471,
              1471
            ],
            [
              1473,
              1474
            ],
            [
              1476,
              1477
            ],
            [
              1479,
              1479
            ],
            [
              1536,
              1539
            ],
            [
              1552,
              1557
            ],
            [
              1611,
              1630
            ],
            [
              1648,
              1648
            ],
            [
              1750,
              1764
            ],
            [
              1767,
              1768
            ],
            [
              1770,
              1773
            ],
            [
              1807,
              1807
            ],
            [
              1809,
              1809
            ],
            [
              1840,
              1866
            ],
            [
              1958,
              1968
            ],
            [
              2027,
              2035
            ],
            [
              2305,
              2306
            ],
            [
              2364,
              2364
            ],
            [
              2369,
              2376
            ],
            [
              2381,
              2381
            ],
            [
              2385,
              2388
            ],
            [
              2402,
              2403
            ],
            [
              2433,
              2433
            ],
            [
              2492,
              2492
            ],
            [
              2497,
              2500
            ],
            [
              2509,
              2509
            ],
            [
              2530,
              2531
            ],
            [
              2561,
              2562
            ],
            [
              2620,
              2620
            ],
            [
              2625,
              2626
            ],
            [
              2631,
              2632
            ],
            [
              2635,
              2637
            ],
            [
              2672,
              2673
            ],
            [
              2689,
              2690
            ],
            [
              2748,
              2748
            ],
            [
              2753,
              2757
            ],
            [
              2759,
              2760
            ],
            [
              2765,
              2765
            ],
            [
              2786,
              2787
            ],
            [
              2817,
              2817
            ],
            [
              2876,
              2876
            ],
            [
              2879,
              2879
            ],
            [
              2881,
              2883
            ],
            [
              2893,
              2893
            ],
            [
              2902,
              2902
            ],
            [
              2946,
              2946
            ],
            [
              3008,
              3008
            ],
            [
              3021,
              3021
            ],
            [
              3134,
              3136
            ],
            [
              3142,
              3144
            ],
            [
              3146,
              3149
            ],
            [
              3157,
              3158
            ],
            [
              3260,
              3260
            ],
            [
              3263,
              3263
            ],
            [
              3270,
              3270
            ],
            [
              3276,
              3277
            ],
            [
              3298,
              3299
            ],
            [
              3393,
              3395
            ],
            [
              3405,
              3405
            ],
            [
              3530,
              3530
            ],
            [
              3538,
              3540
            ],
            [
              3542,
              3542
            ],
            [
              3633,
              3633
            ],
            [
              3636,
              3642
            ],
            [
              3655,
              3662
            ],
            [
              3761,
              3761
            ],
            [
              3764,
              3769
            ],
            [
              3771,
              3772
            ],
            [
              3784,
              3789
            ],
            [
              3864,
              3865
            ],
            [
              3893,
              3893
            ],
            [
              3895,
              3895
            ],
            [
              3897,
              3897
            ],
            [
              3953,
              3966
            ],
            [
              3968,
              3972
            ],
            [
              3974,
              3975
            ],
            [
              3984,
              3991
            ],
            [
              3993,
              4028
            ],
            [
              4038,
              4038
            ],
            [
              4141,
              4144
            ],
            [
              4146,
              4146
            ],
            [
              4150,
              4151
            ],
            [
              4153,
              4153
            ],
            [
              4184,
              4185
            ],
            [
              4448,
              4607
            ],
            [
              4959,
              4959
            ],
            [
              5906,
              5908
            ],
            [
              5938,
              5940
            ],
            [
              5970,
              5971
            ],
            [
              6002,
              6003
            ],
            [
              6068,
              6069
            ],
            [
              6071,
              6077
            ],
            [
              6086,
              6086
            ],
            [
              6089,
              6099
            ],
            [
              6109,
              6109
            ],
            [
              6155,
              6157
            ],
            [
              6313,
              6313
            ],
            [
              6432,
              6434
            ],
            [
              6439,
              6440
            ],
            [
              6450,
              6450
            ],
            [
              6457,
              6459
            ],
            [
              6679,
              6680
            ],
            [
              6912,
              6915
            ],
            [
              6964,
              6964
            ],
            [
              6966,
              6970
            ],
            [
              6972,
              6972
            ],
            [
              6978,
              6978
            ],
            [
              7019,
              7027
            ],
            [
              7616,
              7626
            ],
            [
              7678,
              7679
            ],
            [
              8203,
              8207
            ],
            [
              8234,
              8238
            ],
            [
              8288,
              8291
            ],
            [
              8298,
              8303
            ],
            [
              8400,
              8431
            ],
            [
              12330,
              12335
            ],
            [
              12441,
              12442
            ],
            [
              43014,
              43014
            ],
            [
              43019,
              43019
            ],
            [
              43045,
              43046
            ],
            [
              64286,
              64286
            ],
            [
              65024,
              65039
            ],
            [
              65056,
              65059
            ],
            [
              65279,
              65279
            ],
            [
              65529,
              65531
            ]
          ], s2 = [
            [
              68097,
              68099
            ],
            [
              68101,
              68102
            ],
            [
              68108,
              68111
            ],
            [
              68152,
              68154
            ],
            [
              68159,
              68159
            ],
            [
              119143,
              119145
            ],
            [
              119155,
              119170
            ],
            [
              119173,
              119179
            ],
            [
              119210,
              119213
            ],
            [
              119362,
              119364
            ],
            [
              917505,
              917505
            ],
            [
              917536,
              917631
            ],
            [
              917760,
              917999
            ]
          ];
          let r;
          t2.UnicodeV6 = class {
            constructor() {
              if (this.version = "6", !r) {
                r = new Uint8Array(65536), r.fill(1), r[0] = 0, r.fill(0, 1, 32), r.fill(0, 127, 160), r.fill(2, 4352, 4448), r[9001] = 2, r[9002] = 2, r.fill(2, 11904, 42192), r[12351] = 1, r.fill(2, 44032, 55204), r.fill(2, 63744, 64256), r.fill(2, 65040, 65050), r.fill(2, 65072, 65136), r.fill(2, 65280, 65377), r.fill(2, 65504, 65511);
                for (let e3 = 0; e3 < i2.length; ++e3) r.fill(0, i2[e3][0], i2[e3][1] + 1);
              }
            }
            wcwidth(e3) {
              return e3 < 32 ? 0 : e3 < 127 ? 1 : e3 < 65536 ? r[e3] : function(e4, t3) {
                let i3, s3 = 0, r2 = t3.length - 1;
                if (e4 < t3[0][0] || e4 > t3[r2][1]) return false;
                for (; r2 >= s3; ) if (i3 = s3 + r2 >> 1, e4 > t3[i3][1]) s3 = i3 + 1;
                else {
                  if (!(e4 < t3[i3][0])) return true;
                  r2 = i3 - 1;
                }
                return false;
              }(e3, s2) ? 0 : e3 >= 131072 && e3 <= 196605 || e3 >= 196608 && e3 <= 262141 ? 2 : 1;
            }
          };
        },
        5981: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.WriteBuffer = void 0;
          const s2 = i2(8460), r = i2(844);
          class n extends r.Disposable {
            constructor(e3) {
              super(), this._action = e3, this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 0, this._isSyncWriting = false, this._syncCalls = 0, this._didUserInput = false, this._onWriteParsed = this.register(new s2.EventEmitter()), this.onWriteParsed = this._onWriteParsed.event;
            }
            handleUserInput() {
              this._didUserInput = true;
            }
            writeSync(e3, t3) {
              if (void 0 !== t3 && this._syncCalls > t3) return void (this._syncCalls = 0);
              if (this._pendingData += e3.length, this._writeBuffer.push(e3), this._callbacks.push(void 0), this._syncCalls++, this._isSyncWriting) return;
              let i3;
              for (this._isSyncWriting = true; i3 = this._writeBuffer.shift(); ) {
                this._action(i3);
                const e4 = this._callbacks.shift();
                e4 && e4();
              }
              this._pendingData = 0, this._bufferOffset = 2147483647, this._isSyncWriting = false, this._syncCalls = 0;
            }
            write(e3, t3) {
              if (this._pendingData > 5e7) throw new Error("write data discarded, use flow control to avoid losing data");
              if (!this._writeBuffer.length) {
                if (this._bufferOffset = 0, this._didUserInput) return this._didUserInput = false, this._pendingData += e3.length, this._writeBuffer.push(e3), this._callbacks.push(t3), void this._innerWrite();
                setTimeout(() => this._innerWrite());
              }
              this._pendingData += e3.length, this._writeBuffer.push(e3), this._callbacks.push(t3);
            }
            _innerWrite(e3 = 0, t3 = true) {
              const i3 = e3 || Date.now();
              for (; this._writeBuffer.length > this._bufferOffset; ) {
                const e4 = this._writeBuffer[this._bufferOffset], s3 = this._action(e4, t3);
                if (s3) {
                  const e5 = (e6) => Date.now() - i3 >= 12 ? setTimeout(() => this._innerWrite(0, e6)) : this._innerWrite(i3, e6);
                  return void s3.catch((e6) => (queueMicrotask(() => {
                    throw e6;
                  }), Promise.resolve(false))).then(e5);
                }
                const r2 = this._callbacks[this._bufferOffset];
                if (r2 && r2(), this._bufferOffset++, this._pendingData -= e4.length, Date.now() - i3 >= 12) break;
              }
              this._writeBuffer.length > this._bufferOffset ? (this._bufferOffset > 50 && (this._writeBuffer = this._writeBuffer.slice(this._bufferOffset), this._callbacks = this._callbacks.slice(this._bufferOffset), this._bufferOffset = 0), setTimeout(() => this._innerWrite())) : (this._writeBuffer.length = 0, this._callbacks.length = 0, this._pendingData = 0, this._bufferOffset = 0), this._onWriteParsed.fire();
            }
          }
          t2.WriteBuffer = n;
        },
        5941: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.toRgbString = t2.parseColor = void 0;
          const i2 = /^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/, s2 = /^[\da-f]+$/;
          function r(e3, t3) {
            const i3 = e3.toString(16), s3 = i3.length < 2 ? "0" + i3 : i3;
            switch (t3) {
              case 4:
                return i3[0];
              case 8:
                return s3;
              case 12:
                return (s3 + s3).slice(0, 3);
              default:
                return s3 + s3;
            }
          }
          t2.parseColor = function(e3) {
            if (!e3) return;
            let t3 = e3.toLowerCase();
            if (0 === t3.indexOf("rgb:")) {
              t3 = t3.slice(4);
              const e4 = i2.exec(t3);
              if (e4) {
                const t4 = e4[1] ? 15 : e4[4] ? 255 : e4[7] ? 4095 : 65535;
                return [
                  Math.round(parseInt(e4[1] || e4[4] || e4[7] || e4[10], 16) / t4 * 255),
                  Math.round(parseInt(e4[2] || e4[5] || e4[8] || e4[11], 16) / t4 * 255),
                  Math.round(parseInt(e4[3] || e4[6] || e4[9] || e4[12], 16) / t4 * 255)
                ];
              }
            } else if (0 === t3.indexOf("#") && (t3 = t3.slice(1), s2.exec(t3) && [
              3,
              6,
              9,
              12
            ].includes(t3.length))) {
              const e4 = t3.length / 3, i3 = [
                0,
                0,
                0
              ];
              for (let s3 = 0; s3 < 3; ++s3) {
                const r2 = parseInt(t3.slice(e4 * s3, e4 * s3 + e4), 16);
                i3[s3] = 1 === e4 ? r2 << 4 : 2 === e4 ? r2 : 3 === e4 ? r2 >> 4 : r2 >> 8;
              }
              return i3;
            }
          }, t2.toRgbString = function(e3, t3 = 16) {
            const [i3, s3, n] = e3;
            return `rgb:${r(i3, t3)}/${r(s3, t3)}/${r(n, t3)}`;
          };
        },
        5770: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.PAYLOAD_LIMIT = void 0, t2.PAYLOAD_LIMIT = 1e7;
        },
        6351: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.DcsHandler = t2.DcsParser = void 0;
          const s2 = i2(482), r = i2(8742), n = i2(5770), o = [];
          t2.DcsParser = class {
            constructor() {
              this._handlers = /* @__PURE__ */ Object.create(null), this._active = o, this._ident = 0, this._handlerFb = () => {
              }, this._stack = {
                paused: false,
                loopPosition: 0,
                fallThrough: false
              };
            }
            dispose() {
              this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = () => {
              }, this._active = o;
            }
            registerHandler(e3, t3) {
              void 0 === this._handlers[e3] && (this._handlers[e3] = []);
              const i3 = this._handlers[e3];
              return i3.push(t3), {
                dispose: () => {
                  const e4 = i3.indexOf(t3);
                  -1 !== e4 && i3.splice(e4, 1);
                }
              };
            }
            clearHandler(e3) {
              this._handlers[e3] && delete this._handlers[e3];
            }
            setHandlerFallback(e3) {
              this._handlerFb = e3;
            }
            reset() {
              if (this._active.length) for (let e3 = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e3 >= 0; --e3) this._active[e3].unhook(false);
              this._stack.paused = false, this._active = o, this._ident = 0;
            }
            hook(e3, t3) {
              if (this.reset(), this._ident = e3, this._active = this._handlers[e3] || o, this._active.length) for (let e4 = this._active.length - 1; e4 >= 0; e4--) this._active[e4].hook(t3);
              else this._handlerFb(this._ident, "HOOK", t3);
            }
            put(e3, t3, i3) {
              if (this._active.length) for (let s3 = this._active.length - 1; s3 >= 0; s3--) this._active[s3].put(e3, t3, i3);
              else this._handlerFb(this._ident, "PUT", (0, s2.utf32ToString)(e3, t3, i3));
            }
            unhook(e3, t3 = true) {
              if (this._active.length) {
                let i3 = false, s3 = this._active.length - 1, r2 = false;
                if (this._stack.paused && (s3 = this._stack.loopPosition - 1, i3 = t3, r2 = this._stack.fallThrough, this._stack.paused = false), !r2 && false === i3) {
                  for (; s3 >= 0 && (i3 = this._active[s3].unhook(e3), true !== i3); s3--) if (i3 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s3, this._stack.fallThrough = false, i3;
                  s3--;
                }
                for (; s3 >= 0; s3--) if (i3 = this._active[s3].unhook(false), i3 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s3, this._stack.fallThrough = true, i3;
              } else this._handlerFb(this._ident, "UNHOOK", e3);
              this._active = o, this._ident = 0;
            }
          };
          const a = new r.Params();
          a.addParam(0), t2.DcsHandler = class {
            constructor(e3) {
              this._handler = e3, this._data = "", this._params = a, this._hitLimit = false;
            }
            hook(e3) {
              this._params = e3.length > 1 || e3.params[0] ? e3.clone() : a, this._data = "", this._hitLimit = false;
            }
            put(e3, t3, i3) {
              this._hitLimit || (this._data += (0, s2.utf32ToString)(e3, t3, i3), this._data.length > n.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
            }
            unhook(e3) {
              let t3 = false;
              if (this._hitLimit) t3 = false;
              else if (e3 && (t3 = this._handler(this._data, this._params), t3 instanceof Promise)) return t3.then((e4) => (this._params = a, this._data = "", this._hitLimit = false, e4));
              return this._params = a, this._data = "", this._hitLimit = false, t3;
            }
          };
        },
        2015: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.EscapeSequenceParser = t2.VT500_TRANSITION_TABLE = t2.TransitionTable = void 0;
          const s2 = i2(844), r = i2(8742), n = i2(6242), o = i2(6351);
          class a {
            constructor(e3) {
              this.table = new Uint8Array(e3);
            }
            setDefault(e3, t3) {
              this.table.fill(e3 << 4 | t3);
            }
            add(e3, t3, i3, s3) {
              this.table[t3 << 8 | e3] = i3 << 4 | s3;
            }
            addMany(e3, t3, i3, s3) {
              for (let r2 = 0; r2 < e3.length; r2++) this.table[t3 << 8 | e3[r2]] = i3 << 4 | s3;
            }
          }
          t2.TransitionTable = a;
          const h2 = 160;
          t2.VT500_TRANSITION_TABLE = function() {
            const e3 = new a(4095), t3 = Array.apply(null, Array(256)).map((e4, t4) => t4), i3 = (e4, i4) => t3.slice(e4, i4), s3 = i3(32, 127), r2 = i3(0, 24);
            r2.push(25), r2.push.apply(r2, i3(28, 32));
            const n2 = i3(0, 14);
            let o2;
            for (o2 in e3.setDefault(1, 0), e3.addMany(s3, 0, 2, 0), n2) e3.addMany([
              24,
              26,
              153,
              154
            ], o2, 3, 0), e3.addMany(i3(128, 144), o2, 3, 0), e3.addMany(i3(144, 152), o2, 3, 0), e3.add(156, o2, 0, 0), e3.add(27, o2, 11, 1), e3.add(157, o2, 4, 8), e3.addMany([
              152,
              158,
              159
            ], o2, 0, 7), e3.add(155, o2, 11, 3), e3.add(144, o2, 11, 9);
            return e3.addMany(r2, 0, 3, 0), e3.addMany(r2, 1, 3, 1), e3.add(127, 1, 0, 1), e3.addMany(r2, 8, 0, 8), e3.addMany(r2, 3, 3, 3), e3.add(127, 3, 0, 3), e3.addMany(r2, 4, 3, 4), e3.add(127, 4, 0, 4), e3.addMany(r2, 6, 3, 6), e3.addMany(r2, 5, 3, 5), e3.add(127, 5, 0, 5), e3.addMany(r2, 2, 3, 2), e3.add(127, 2, 0, 2), e3.add(93, 1, 4, 8), e3.addMany(s3, 8, 5, 8), e3.add(127, 8, 5, 8), e3.addMany([
              156,
              27,
              24,
              26,
              7
            ], 8, 6, 0), e3.addMany(i3(28, 32), 8, 0, 8), e3.addMany([
              88,
              94,
              95
            ], 1, 0, 7), e3.addMany(s3, 7, 0, 7), e3.addMany(r2, 7, 0, 7), e3.add(156, 7, 0, 0), e3.add(127, 7, 0, 7), e3.add(91, 1, 11, 3), e3.addMany(i3(64, 127), 3, 7, 0), e3.addMany(i3(48, 60), 3, 8, 4), e3.addMany([
              60,
              61,
              62,
              63
            ], 3, 9, 4), e3.addMany(i3(48, 60), 4, 8, 4), e3.addMany(i3(64, 127), 4, 7, 0), e3.addMany([
              60,
              61,
              62,
              63
            ], 4, 0, 6), e3.addMany(i3(32, 64), 6, 0, 6), e3.add(127, 6, 0, 6), e3.addMany(i3(64, 127), 6, 0, 0), e3.addMany(i3(32, 48), 3, 9, 5), e3.addMany(i3(32, 48), 5, 9, 5), e3.addMany(i3(48, 64), 5, 0, 6), e3.addMany(i3(64, 127), 5, 7, 0), e3.addMany(i3(32, 48), 4, 9, 5), e3.addMany(i3(32, 48), 1, 9, 2), e3.addMany(i3(32, 48), 2, 9, 2), e3.addMany(i3(48, 127), 2, 10, 0), e3.addMany(i3(48, 80), 1, 10, 0), e3.addMany(i3(81, 88), 1, 10, 0), e3.addMany([
              89,
              90,
              92
            ], 1, 10, 0), e3.addMany(i3(96, 127), 1, 10, 0), e3.add(80, 1, 11, 9), e3.addMany(r2, 9, 0, 9), e3.add(127, 9, 0, 9), e3.addMany(i3(28, 32), 9, 0, 9), e3.addMany(i3(32, 48), 9, 9, 12), e3.addMany(i3(48, 60), 9, 8, 10), e3.addMany([
              60,
              61,
              62,
              63
            ], 9, 9, 10), e3.addMany(r2, 11, 0, 11), e3.addMany(i3(32, 128), 11, 0, 11), e3.addMany(i3(28, 32), 11, 0, 11), e3.addMany(r2, 10, 0, 10), e3.add(127, 10, 0, 10), e3.addMany(i3(28, 32), 10, 0, 10), e3.addMany(i3(48, 60), 10, 8, 10), e3.addMany([
              60,
              61,
              62,
              63
            ], 10, 0, 11), e3.addMany(i3(32, 48), 10, 9, 12), e3.addMany(r2, 12, 0, 12), e3.add(127, 12, 0, 12), e3.addMany(i3(28, 32), 12, 0, 12), e3.addMany(i3(32, 48), 12, 9, 12), e3.addMany(i3(48, 64), 12, 0, 11), e3.addMany(i3(64, 127), 12, 12, 13), e3.addMany(i3(64, 127), 10, 12, 13), e3.addMany(i3(64, 127), 9, 12, 13), e3.addMany(r2, 13, 13, 13), e3.addMany(s3, 13, 13, 13), e3.add(127, 13, 0, 13), e3.addMany([
              27,
              156,
              24,
              26
            ], 13, 14, 0), e3.add(h2, 0, 2, 0), e3.add(h2, 8, 5, 8), e3.add(h2, 6, 0, 6), e3.add(h2, 11, 0, 11), e3.add(h2, 13, 13, 13), e3;
          }();
          class c extends s2.Disposable {
            constructor(e3 = t2.VT500_TRANSITION_TABLE) {
              super(), this._transitions = e3, this._parseStack = {
                state: 0,
                handlers: [],
                handlerPos: 0,
                transition: 0,
                chunkPos: 0
              }, this.initialState = 0, this.currentState = this.initialState, this._params = new r.Params(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0, this._printHandlerFb = (e4, t3, i3) => {
              }, this._executeHandlerFb = (e4) => {
              }, this._csiHandlerFb = (e4, t3) => {
              }, this._escHandlerFb = (e4) => {
              }, this._errorHandlerFb = (e4) => e4, this._printHandler = this._printHandlerFb, this._executeHandlers = /* @__PURE__ */ Object.create(null), this._csiHandlers = /* @__PURE__ */ Object.create(null), this._escHandlers = /* @__PURE__ */ Object.create(null), this.register((0, s2.toDisposable)(() => {
                this._csiHandlers = /* @__PURE__ */ Object.create(null), this._executeHandlers = /* @__PURE__ */ Object.create(null), this._escHandlers = /* @__PURE__ */ Object.create(null);
              })), this._oscParser = this.register(new n.OscParser()), this._dcsParser = this.register(new o.DcsParser()), this._errorHandler = this._errorHandlerFb, this.registerEscHandler({
                final: "\\"
              }, () => true);
            }
            _identifier(e3, t3 = [
              64,
              126
            ]) {
              let i3 = 0;
              if (e3.prefix) {
                if (e3.prefix.length > 1) throw new Error("only one byte as prefix supported");
                if (i3 = e3.prefix.charCodeAt(0), i3 && 60 > i3 || i3 > 63) throw new Error("prefix must be in range 0x3c .. 0x3f");
              }
              if (e3.intermediates) {
                if (e3.intermediates.length > 2) throw new Error("only two bytes as intermediates are supported");
                for (let t4 = 0; t4 < e3.intermediates.length; ++t4) {
                  const s4 = e3.intermediates.charCodeAt(t4);
                  if (32 > s4 || s4 > 47) throw new Error("intermediate must be in range 0x20 .. 0x2f");
                  i3 <<= 8, i3 |= s4;
                }
              }
              if (1 !== e3.final.length) throw new Error("final must be a single byte");
              const s3 = e3.final.charCodeAt(0);
              if (t3[0] > s3 || s3 > t3[1]) throw new Error(`final must be in range ${t3[0]} .. ${t3[1]}`);
              return i3 <<= 8, i3 |= s3, i3;
            }
            identToString(e3) {
              const t3 = [];
              for (; e3; ) t3.push(String.fromCharCode(255 & e3)), e3 >>= 8;
              return t3.reverse().join("");
            }
            setPrintHandler(e3) {
              this._printHandler = e3;
            }
            clearPrintHandler() {
              this._printHandler = this._printHandlerFb;
            }
            registerEscHandler(e3, t3) {
              const i3 = this._identifier(e3, [
                48,
                126
              ]);
              void 0 === this._escHandlers[i3] && (this._escHandlers[i3] = []);
              const s3 = this._escHandlers[i3];
              return s3.push(t3), {
                dispose: () => {
                  const e4 = s3.indexOf(t3);
                  -1 !== e4 && s3.splice(e4, 1);
                }
              };
            }
            clearEscHandler(e3) {
              this._escHandlers[this._identifier(e3, [
                48,
                126
              ])] && delete this._escHandlers[this._identifier(e3, [
                48,
                126
              ])];
            }
            setEscHandlerFallback(e3) {
              this._escHandlerFb = e3;
            }
            setExecuteHandler(e3, t3) {
              this._executeHandlers[e3.charCodeAt(0)] = t3;
            }
            clearExecuteHandler(e3) {
              this._executeHandlers[e3.charCodeAt(0)] && delete this._executeHandlers[e3.charCodeAt(0)];
            }
            setExecuteHandlerFallback(e3) {
              this._executeHandlerFb = e3;
            }
            registerCsiHandler(e3, t3) {
              const i3 = this._identifier(e3);
              void 0 === this._csiHandlers[i3] && (this._csiHandlers[i3] = []);
              const s3 = this._csiHandlers[i3];
              return s3.push(t3), {
                dispose: () => {
                  const e4 = s3.indexOf(t3);
                  -1 !== e4 && s3.splice(e4, 1);
                }
              };
            }
            clearCsiHandler(e3) {
              this._csiHandlers[this._identifier(e3)] && delete this._csiHandlers[this._identifier(e3)];
            }
            setCsiHandlerFallback(e3) {
              this._csiHandlerFb = e3;
            }
            registerDcsHandler(e3, t3) {
              return this._dcsParser.registerHandler(this._identifier(e3), t3);
            }
            clearDcsHandler(e3) {
              this._dcsParser.clearHandler(this._identifier(e3));
            }
            setDcsHandlerFallback(e3) {
              this._dcsParser.setHandlerFallback(e3);
            }
            registerOscHandler(e3, t3) {
              return this._oscParser.registerHandler(e3, t3);
            }
            clearOscHandler(e3) {
              this._oscParser.clearHandler(e3);
            }
            setOscHandlerFallback(e3) {
              this._oscParser.setHandlerFallback(e3);
            }
            setErrorHandler(e3) {
              this._errorHandler = e3;
            }
            clearErrorHandler() {
              this._errorHandler = this._errorHandlerFb;
            }
            reset() {
              this.currentState = this.initialState, this._oscParser.reset(), this._dcsParser.reset(), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0, 0 !== this._parseStack.state && (this._parseStack.state = 2, this._parseStack.handlers = []);
            }
            _preserveStack(e3, t3, i3, s3, r2) {
              this._parseStack.state = e3, this._parseStack.handlers = t3, this._parseStack.handlerPos = i3, this._parseStack.transition = s3, this._parseStack.chunkPos = r2;
            }
            parse(e3, t3, i3) {
              let s3, r2 = 0, n2 = 0, o2 = 0;
              if (this._parseStack.state) if (2 === this._parseStack.state) this._parseStack.state = 0, o2 = this._parseStack.chunkPos + 1;
              else {
                if (void 0 === i3 || 1 === this._parseStack.state) throw this._parseStack.state = 1, new Error("improper continuation due to previous async handler, giving up parsing");
                const t4 = this._parseStack.handlers;
                let n3 = this._parseStack.handlerPos - 1;
                switch (this._parseStack.state) {
                  case 3:
                    if (false === i3 && n3 > -1) {
                      for (; n3 >= 0 && (s3 = t4[n3](this._params), true !== s3); n3--) if (s3 instanceof Promise) return this._parseStack.handlerPos = n3, s3;
                    }
                    this._parseStack.handlers = [];
                    break;
                  case 4:
                    if (false === i3 && n3 > -1) {
                      for (; n3 >= 0 && (s3 = t4[n3](), true !== s3); n3--) if (s3 instanceof Promise) return this._parseStack.handlerPos = n3, s3;
                    }
                    this._parseStack.handlers = [];
                    break;
                  case 6:
                    if (r2 = e3[this._parseStack.chunkPos], s3 = this._dcsParser.unhook(24 !== r2 && 26 !== r2, i3), s3) return s3;
                    27 === r2 && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
                    break;
                  case 5:
                    if (r2 = e3[this._parseStack.chunkPos], s3 = this._oscParser.end(24 !== r2 && 26 !== r2, i3), s3) return s3;
                    27 === r2 && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
                }
                this._parseStack.state = 0, o2 = this._parseStack.chunkPos + 1, this.precedingCodepoint = 0, this.currentState = 15 & this._parseStack.transition;
              }
              for (let i4 = o2; i4 < t3; ++i4) {
                switch (r2 = e3[i4], n2 = this._transitions.table[this.currentState << 8 | (r2 < 160 ? r2 : h2)], n2 >> 4) {
                  case 2:
                    for (let s4 = i4 + 1; ; ++s4) {
                      if (s4 >= t3 || (r2 = e3[s4]) < 32 || r2 > 126 && r2 < h2) {
                        this._printHandler(e3, i4, s4), i4 = s4 - 1;
                        break;
                      }
                      if (++s4 >= t3 || (r2 = e3[s4]) < 32 || r2 > 126 && r2 < h2) {
                        this._printHandler(e3, i4, s4), i4 = s4 - 1;
                        break;
                      }
                      if (++s4 >= t3 || (r2 = e3[s4]) < 32 || r2 > 126 && r2 < h2) {
                        this._printHandler(e3, i4, s4), i4 = s4 - 1;
                        break;
                      }
                      if (++s4 >= t3 || (r2 = e3[s4]) < 32 || r2 > 126 && r2 < h2) {
                        this._printHandler(e3, i4, s4), i4 = s4 - 1;
                        break;
                      }
                    }
                    break;
                  case 3:
                    this._executeHandlers[r2] ? this._executeHandlers[r2]() : this._executeHandlerFb(r2), this.precedingCodepoint = 0;
                    break;
                  case 0:
                    break;
                  case 1:
                    if (this._errorHandler({
                      position: i4,
                      code: r2,
                      currentState: this.currentState,
                      collect: this._collect,
                      params: this._params,
                      abort: false
                    }).abort) return;
                    break;
                  case 7:
                    const o3 = this._csiHandlers[this._collect << 8 | r2];
                    let a2 = o3 ? o3.length - 1 : -1;
                    for (; a2 >= 0 && (s3 = o3[a2](this._params), true !== s3); a2--) if (s3 instanceof Promise) return this._preserveStack(3, o3, a2, n2, i4), s3;
                    a2 < 0 && this._csiHandlerFb(this._collect << 8 | r2, this._params), this.precedingCodepoint = 0;
                    break;
                  case 8:
                    do {
                      switch (r2) {
                        case 59:
                          this._params.addParam(0);
                          break;
                        case 58:
                          this._params.addSubParam(-1);
                          break;
                        default:
                          this._params.addDigit(r2 - 48);
                      }
                    } while (++i4 < t3 && (r2 = e3[i4]) > 47 && r2 < 60);
                    i4--;
                    break;
                  case 9:
                    this._collect <<= 8, this._collect |= r2;
                    break;
                  case 10:
                    const c2 = this._escHandlers[this._collect << 8 | r2];
                    let l2 = c2 ? c2.length - 1 : -1;
                    for (; l2 >= 0 && (s3 = c2[l2](), true !== s3); l2--) if (s3 instanceof Promise) return this._preserveStack(4, c2, l2, n2, i4), s3;
                    l2 < 0 && this._escHandlerFb(this._collect << 8 | r2), this.precedingCodepoint = 0;
                    break;
                  case 11:
                    this._params.reset(), this._params.addParam(0), this._collect = 0;
                    break;
                  case 12:
                    this._dcsParser.hook(this._collect << 8 | r2, this._params);
                    break;
                  case 13:
                    for (let s4 = i4 + 1; ; ++s4) if (s4 >= t3 || 24 === (r2 = e3[s4]) || 26 === r2 || 27 === r2 || r2 > 127 && r2 < h2) {
                      this._dcsParser.put(e3, i4, s4), i4 = s4 - 1;
                      break;
                    }
                    break;
                  case 14:
                    if (s3 = this._dcsParser.unhook(24 !== r2 && 26 !== r2), s3) return this._preserveStack(6, [], 0, n2, i4), s3;
                    27 === r2 && (n2 |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;
                    break;
                  case 4:
                    this._oscParser.start();
                    break;
                  case 5:
                    for (let s4 = i4 + 1; ; s4++) if (s4 >= t3 || (r2 = e3[s4]) < 32 || r2 > 127 && r2 < h2) {
                      this._oscParser.put(e3, i4, s4), i4 = s4 - 1;
                      break;
                    }
                    break;
                  case 6:
                    if (s3 = this._oscParser.end(24 !== r2 && 26 !== r2), s3) return this._preserveStack(5, [], 0, n2, i4), s3;
                    27 === r2 && (n2 |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;
                }
                this.currentState = 15 & n2;
              }
            }
          }
          t2.EscapeSequenceParser = c;
        },
        6242: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.OscHandler = t2.OscParser = void 0;
          const s2 = i2(5770), r = i2(482), n = [];
          t2.OscParser = class {
            constructor() {
              this._state = 0, this._active = n, this._id = -1, this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = () => {
              }, this._stack = {
                paused: false,
                loopPosition: 0,
                fallThrough: false
              };
            }
            registerHandler(e3, t3) {
              void 0 === this._handlers[e3] && (this._handlers[e3] = []);
              const i3 = this._handlers[e3];
              return i3.push(t3), {
                dispose: () => {
                  const e4 = i3.indexOf(t3);
                  -1 !== e4 && i3.splice(e4, 1);
                }
              };
            }
            clearHandler(e3) {
              this._handlers[e3] && delete this._handlers[e3];
            }
            setHandlerFallback(e3) {
              this._handlerFb = e3;
            }
            dispose() {
              this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = () => {
              }, this._active = n;
            }
            reset() {
              if (2 === this._state) for (let e3 = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e3 >= 0; --e3) this._active[e3].end(false);
              this._stack.paused = false, this._active = n, this._id = -1, this._state = 0;
            }
            _start() {
              if (this._active = this._handlers[this._id] || n, this._active.length) for (let e3 = this._active.length - 1; e3 >= 0; e3--) this._active[e3].start();
              else this._handlerFb(this._id, "START");
            }
            _put(e3, t3, i3) {
              if (this._active.length) for (let s3 = this._active.length - 1; s3 >= 0; s3--) this._active[s3].put(e3, t3, i3);
              else this._handlerFb(this._id, "PUT", (0, r.utf32ToString)(e3, t3, i3));
            }
            start() {
              this.reset(), this._state = 1;
            }
            put(e3, t3, i3) {
              if (3 !== this._state) {
                if (1 === this._state) for (; t3 < i3; ) {
                  const i4 = e3[t3++];
                  if (59 === i4) {
                    this._state = 2, this._start();
                    break;
                  }
                  if (i4 < 48 || 57 < i4) return void (this._state = 3);
                  -1 === this._id && (this._id = 0), this._id = 10 * this._id + i4 - 48;
                }
                2 === this._state && i3 - t3 > 0 && this._put(e3, t3, i3);
              }
            }
            end(e3, t3 = true) {
              if (0 !== this._state) {
                if (3 !== this._state) if (1 === this._state && this._start(), this._active.length) {
                  let i3 = false, s3 = this._active.length - 1, r2 = false;
                  if (this._stack.paused && (s3 = this._stack.loopPosition - 1, i3 = t3, r2 = this._stack.fallThrough, this._stack.paused = false), !r2 && false === i3) {
                    for (; s3 >= 0 && (i3 = this._active[s3].end(e3), true !== i3); s3--) if (i3 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s3, this._stack.fallThrough = false, i3;
                    s3--;
                  }
                  for (; s3 >= 0; s3--) if (i3 = this._active[s3].end(false), i3 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s3, this._stack.fallThrough = true, i3;
                } else this._handlerFb(this._id, "END", e3);
                this._active = n, this._id = -1, this._state = 0;
              }
            }
          }, t2.OscHandler = class {
            constructor(e3) {
              this._handler = e3, this._data = "", this._hitLimit = false;
            }
            start() {
              this._data = "", this._hitLimit = false;
            }
            put(e3, t3, i3) {
              this._hitLimit || (this._data += (0, r.utf32ToString)(e3, t3, i3), this._data.length > s2.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
            }
            end(e3) {
              let t3 = false;
              if (this._hitLimit) t3 = false;
              else if (e3 && (t3 = this._handler(this._data), t3 instanceof Promise)) return t3.then((e4) => (this._data = "", this._hitLimit = false, e4));
              return this._data = "", this._hitLimit = false, t3;
            }
          };
        },
        8742: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.Params = void 0;
          const i2 = 2147483647;
          class s2 {
            static fromArray(e3) {
              const t3 = new s2();
              if (!e3.length) return t3;
              for (let i3 = Array.isArray(e3[0]) ? 1 : 0; i3 < e3.length; ++i3) {
                const s3 = e3[i3];
                if (Array.isArray(s3)) for (let e4 = 0; e4 < s3.length; ++e4) t3.addSubParam(s3[e4]);
                else t3.addParam(s3);
              }
              return t3;
            }
            constructor(e3 = 32, t3 = 32) {
              if (this.maxLength = e3, this.maxSubParamsLength = t3, t3 > 256) throw new Error("maxSubParamsLength must not be greater than 256");
              this.params = new Int32Array(e3), this.length = 0, this._subParams = new Int32Array(t3), this._subParamsLength = 0, this._subParamsIdx = new Uint16Array(e3), this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
            }
            clone() {
              const e3 = new s2(this.maxLength, this.maxSubParamsLength);
              return e3.params.set(this.params), e3.length = this.length, e3._subParams.set(this._subParams), e3._subParamsLength = this._subParamsLength, e3._subParamsIdx.set(this._subParamsIdx), e3._rejectDigits = this._rejectDigits, e3._rejectSubDigits = this._rejectSubDigits, e3._digitIsSub = this._digitIsSub, e3;
            }
            toArray() {
              const e3 = [];
              for (let t3 = 0; t3 < this.length; ++t3) {
                e3.push(this.params[t3]);
                const i3 = this._subParamsIdx[t3] >> 8, s3 = 255 & this._subParamsIdx[t3];
                s3 - i3 > 0 && e3.push(Array.prototype.slice.call(this._subParams, i3, s3));
              }
              return e3;
            }
            reset() {
              this.length = 0, this._subParamsLength = 0, this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
            }
            addParam(e3) {
              if (this._digitIsSub = false, this.length >= this.maxLength) this._rejectDigits = true;
              else {
                if (e3 < -1) throw new Error("values lesser than -1 are not allowed");
                this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength, this.params[this.length++] = e3 > i2 ? i2 : e3;
              }
            }
            addSubParam(e3) {
              if (this._digitIsSub = true, this.length) if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) this._rejectSubDigits = true;
              else {
                if (e3 < -1) throw new Error("values lesser than -1 are not allowed");
                this._subParams[this._subParamsLength++] = e3 > i2 ? i2 : e3, this._subParamsIdx[this.length - 1]++;
              }
            }
            hasSubParams(e3) {
              return (255 & this._subParamsIdx[e3]) - (this._subParamsIdx[e3] >> 8) > 0;
            }
            getSubParams(e3) {
              const t3 = this._subParamsIdx[e3] >> 8, i3 = 255 & this._subParamsIdx[e3];
              return i3 - t3 > 0 ? this._subParams.subarray(t3, i3) : null;
            }
            getSubParamsAll() {
              const e3 = {};
              for (let t3 = 0; t3 < this.length; ++t3) {
                const i3 = this._subParamsIdx[t3] >> 8, s3 = 255 & this._subParamsIdx[t3];
                s3 - i3 > 0 && (e3[t3] = this._subParams.slice(i3, s3));
              }
              return e3;
            }
            addDigit(e3) {
              let t3;
              if (this._rejectDigits || !(t3 = this._digitIsSub ? this._subParamsLength : this.length) || this._digitIsSub && this._rejectSubDigits) return;
              const s3 = this._digitIsSub ? this._subParams : this.params, r = s3[t3 - 1];
              s3[t3 - 1] = ~r ? Math.min(10 * r + e3, i2) : e3;
            }
          }
          t2.Params = s2;
        },
        5741: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.AddonManager = void 0, t2.AddonManager = class {
            constructor() {
              this._addons = [];
            }
            dispose() {
              for (let e3 = this._addons.length - 1; e3 >= 0; e3--) this._addons[e3].instance.dispose();
            }
            loadAddon(e3, t3) {
              const i2 = {
                instance: t3,
                dispose: t3.dispose,
                isDisposed: false
              };
              this._addons.push(i2), t3.dispose = () => this._wrappedAddonDispose(i2), t3.activate(e3);
            }
            _wrappedAddonDispose(e3) {
              if (e3.isDisposed) return;
              let t3 = -1;
              for (let i2 = 0; i2 < this._addons.length; i2++) if (this._addons[i2] === e3) {
                t3 = i2;
                break;
              }
              if (-1 === t3) throw new Error("Could not dispose an addon that has not been loaded");
              e3.isDisposed = true, e3.dispose.apply(e3.instance), this._addons.splice(t3, 1);
            }
          };
        },
        8771: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.BufferApiView = void 0;
          const s2 = i2(3785), r = i2(511);
          t2.BufferApiView = class {
            constructor(e3, t3) {
              this._buffer = e3, this.type = t3;
            }
            init(e3) {
              return this._buffer = e3, this;
            }
            get cursorY() {
              return this._buffer.y;
            }
            get cursorX() {
              return this._buffer.x;
            }
            get viewportY() {
              return this._buffer.ydisp;
            }
            get baseY() {
              return this._buffer.ybase;
            }
            get length() {
              return this._buffer.lines.length;
            }
            getLine(e3) {
              const t3 = this._buffer.lines.get(e3);
              if (t3) return new s2.BufferLineApiView(t3);
            }
            getNullCell() {
              return new r.CellData();
            }
          };
        },
        3785: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.BufferLineApiView = void 0;
          const s2 = i2(511);
          t2.BufferLineApiView = class {
            constructor(e3) {
              this._line = e3;
            }
            get isWrapped() {
              return this._line.isWrapped;
            }
            get length() {
              return this._line.length;
            }
            getCell(e3, t3) {
              if (!(e3 < 0 || e3 >= this._line.length)) return t3 ? (this._line.loadCell(e3, t3), t3) : this._line.loadCell(e3, new s2.CellData());
            }
            translateToString(e3, t3, i3) {
              return this._line.translateToString(e3, t3, i3);
            }
          };
        },
        8285: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.BufferNamespaceApi = void 0;
          const s2 = i2(8771), r = i2(8460), n = i2(844);
          class o extends n.Disposable {
            constructor(e3) {
              super(), this._core = e3, this._onBufferChange = this.register(new r.EventEmitter()), this.onBufferChange = this._onBufferChange.event, this._normal = new s2.BufferApiView(this._core.buffers.normal, "normal"), this._alternate = new s2.BufferApiView(this._core.buffers.alt, "alternate"), this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));
            }
            get active() {
              if (this._core.buffers.active === this._core.buffers.normal) return this.normal;
              if (this._core.buffers.active === this._core.buffers.alt) return this.alternate;
              throw new Error("Active buffer is neither normal nor alternate");
            }
            get normal() {
              return this._normal.init(this._core.buffers.normal);
            }
            get alternate() {
              return this._alternate.init(this._core.buffers.alt);
            }
          }
          t2.BufferNamespaceApi = o;
        },
        7975: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.ParserApi = void 0, t2.ParserApi = class {
            constructor(e3) {
              this._core = e3;
            }
            registerCsiHandler(e3, t3) {
              return this._core.registerCsiHandler(e3, (e4) => t3(e4.toArray()));
            }
            addCsiHandler(e3, t3) {
              return this.registerCsiHandler(e3, t3);
            }
            registerDcsHandler(e3, t3) {
              return this._core.registerDcsHandler(e3, (e4, i2) => t3(e4, i2.toArray()));
            }
            addDcsHandler(e3, t3) {
              return this.registerDcsHandler(e3, t3);
            }
            registerEscHandler(e3, t3) {
              return this._core.registerEscHandler(e3, t3);
            }
            addEscHandler(e3, t3) {
              return this.registerEscHandler(e3, t3);
            }
            registerOscHandler(e3, t3) {
              return this._core.registerOscHandler(e3, t3);
            }
            addOscHandler(e3, t3) {
              return this.registerOscHandler(e3, t3);
            }
          };
        },
        7090: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.UnicodeApi = void 0, t2.UnicodeApi = class {
            constructor(e3) {
              this._core = e3;
            }
            register(e3) {
              this._core.unicodeService.register(e3);
            }
            get versions() {
              return this._core.unicodeService.versions;
            }
            get activeVersion() {
              return this._core.unicodeService.activeVersion;
            }
            set activeVersion(e3) {
              this._core.unicodeService.activeVersion = e3;
            }
          };
        },
        744: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.BufferService = t2.MINIMUM_ROWS = t2.MINIMUM_COLS = void 0;
          const n = i2(8460), o = i2(844), a = i2(5295), h2 = i2(2585);
          t2.MINIMUM_COLS = 2, t2.MINIMUM_ROWS = 1;
          let c = t2.BufferService = class extends o.Disposable {
            get buffer() {
              return this.buffers.active;
            }
            constructor(e3) {
              super(), this.isUserScrolling = false, this._onResize = this.register(new n.EventEmitter()), this.onResize = this._onResize.event, this._onScroll = this.register(new n.EventEmitter()), this.onScroll = this._onScroll.event, this.cols = Math.max(e3.rawOptions.cols || 0, t2.MINIMUM_COLS), this.rows = Math.max(e3.rawOptions.rows || 0, t2.MINIMUM_ROWS), this.buffers = this.register(new a.BufferSet(e3, this));
            }
            resize(e3, t3) {
              this.cols = e3, this.rows = t3, this.buffers.resize(e3, t3), this._onResize.fire({
                cols: e3,
                rows: t3
              });
            }
            reset() {
              this.buffers.reset(), this.isUserScrolling = false;
            }
            scroll(e3, t3 = false) {
              const i3 = this.buffer;
              let s3;
              s3 = this._cachedBlankLine, s3 && s3.length === this.cols && s3.getFg(0) === e3.fg && s3.getBg(0) === e3.bg || (s3 = i3.getBlankLine(e3, t3), this._cachedBlankLine = s3), s3.isWrapped = t3;
              const r2 = i3.ybase + i3.scrollTop, n2 = i3.ybase + i3.scrollBottom;
              if (0 === i3.scrollTop) {
                const e4 = i3.lines.isFull;
                n2 === i3.lines.length - 1 ? e4 ? i3.lines.recycle().copyFrom(s3) : i3.lines.push(s3.clone()) : i3.lines.splice(n2 + 1, 0, s3.clone()), e4 ? this.isUserScrolling && (i3.ydisp = Math.max(i3.ydisp - 1, 0)) : (i3.ybase++, this.isUserScrolling || i3.ydisp++);
              } else {
                const e4 = n2 - r2 + 1;
                i3.lines.shiftElements(r2 + 1, e4 - 1, -1), i3.lines.set(n2, s3.clone());
              }
              this.isUserScrolling || (i3.ydisp = i3.ybase), this._onScroll.fire(i3.ydisp);
            }
            scrollLines(e3, t3, i3) {
              const s3 = this.buffer;
              if (e3 < 0) {
                if (0 === s3.ydisp) return;
                this.isUserScrolling = true;
              } else e3 + s3.ydisp >= s3.ybase && (this.isUserScrolling = false);
              const r2 = s3.ydisp;
              s3.ydisp = Math.max(Math.min(s3.ydisp + e3, s3.ybase), 0), r2 !== s3.ydisp && (t3 || this._onScroll.fire(s3.ydisp));
            }
          };
          t2.BufferService = c = s2([
            r(0, h2.IOptionsService)
          ], c);
        },
        7994: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CharsetService = void 0, t2.CharsetService = class {
            constructor() {
              this.glevel = 0, this._charsets = [];
            }
            reset() {
              this.charset = void 0, this._charsets = [], this.glevel = 0;
            }
            setgLevel(e3) {
              this.glevel = e3, this.charset = this._charsets[e3];
            }
            setgCharset(e3, t3) {
              this._charsets[e3] = t3, this.glevel === e3 && (this.charset = t3);
            }
          };
        },
        1753: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CoreMouseService = void 0;
          const n = i2(2585), o = i2(8460), a = i2(844), h2 = {
            NONE: {
              events: 0,
              restrict: () => false
            },
            X10: {
              events: 1,
              restrict: (e3) => 4 !== e3.button && 1 === e3.action && (e3.ctrl = false, e3.alt = false, e3.shift = false, true)
            },
            VT200: {
              events: 19,
              restrict: (e3) => 32 !== e3.action
            },
            DRAG: {
              events: 23,
              restrict: (e3) => 32 !== e3.action || 3 !== e3.button
            },
            ANY: {
              events: 31,
              restrict: (e3) => true
            }
          };
          function c(e3, t3) {
            let i3 = (e3.ctrl ? 16 : 0) | (e3.shift ? 4 : 0) | (e3.alt ? 8 : 0);
            return 4 === e3.button ? (i3 |= 64, i3 |= e3.action) : (i3 |= 3 & e3.button, 4 & e3.button && (i3 |= 64), 8 & e3.button && (i3 |= 128), 32 === e3.action ? i3 |= 32 : 0 !== e3.action || t3 || (i3 |= 3)), i3;
          }
          const l2 = String.fromCharCode, d = {
            DEFAULT: (e3) => {
              const t3 = [
                c(e3, false) + 32,
                e3.col + 32,
                e3.row + 32
              ];
              return t3[0] > 255 || t3[1] > 255 || t3[2] > 255 ? "" : `\x1B[M${l2(t3[0])}${l2(t3[1])}${l2(t3[2])}`;
            },
            SGR: (e3) => {
              const t3 = 0 === e3.action && 4 !== e3.button ? "m" : "M";
              return `\x1B[<${c(e3, true)};${e3.col};${e3.row}${t3}`;
            },
            SGR_PIXELS: (e3) => {
              const t3 = 0 === e3.action && 4 !== e3.button ? "m" : "M";
              return `\x1B[<${c(e3, true)};${e3.x};${e3.y}${t3}`;
            }
          };
          let _2 = t2.CoreMouseService = class extends a.Disposable {
            constructor(e3, t3) {
              super(), this._bufferService = e3, this._coreService = t3, this._protocols = {}, this._encodings = {}, this._activeProtocol = "", this._activeEncoding = "", this._lastEvent = null, this._onProtocolChange = this.register(new o.EventEmitter()), this.onProtocolChange = this._onProtocolChange.event;
              for (const e4 of Object.keys(h2)) this.addProtocol(e4, h2[e4]);
              for (const e4 of Object.keys(d)) this.addEncoding(e4, d[e4]);
              this.reset();
            }
            addProtocol(e3, t3) {
              this._protocols[e3] = t3;
            }
            addEncoding(e3, t3) {
              this._encodings[e3] = t3;
            }
            get activeProtocol() {
              return this._activeProtocol;
            }
            get areMouseEventsActive() {
              return 0 !== this._protocols[this._activeProtocol].events;
            }
            set activeProtocol(e3) {
              if (!this._protocols[e3]) throw new Error(`unknown protocol "${e3}"`);
              this._activeProtocol = e3, this._onProtocolChange.fire(this._protocols[e3].events);
            }
            get activeEncoding() {
              return this._activeEncoding;
            }
            set activeEncoding(e3) {
              if (!this._encodings[e3]) throw new Error(`unknown encoding "${e3}"`);
              this._activeEncoding = e3;
            }
            reset() {
              this.activeProtocol = "NONE", this.activeEncoding = "DEFAULT", this._lastEvent = null;
            }
            triggerMouseEvent(e3) {
              if (e3.col < 0 || e3.col >= this._bufferService.cols || e3.row < 0 || e3.row >= this._bufferService.rows) return false;
              if (4 === e3.button && 32 === e3.action) return false;
              if (3 === e3.button && 32 !== e3.action) return false;
              if (4 !== e3.button && (2 === e3.action || 3 === e3.action)) return false;
              if (e3.col++, e3.row++, 32 === e3.action && this._lastEvent && this._equalEvents(this._lastEvent, e3, "SGR_PIXELS" === this._activeEncoding)) return false;
              if (!this._protocols[this._activeProtocol].restrict(e3)) return false;
              const t3 = this._encodings[this._activeEncoding](e3);
              return t3 && ("DEFAULT" === this._activeEncoding ? this._coreService.triggerBinaryEvent(t3) : this._coreService.triggerDataEvent(t3, true)), this._lastEvent = e3, true;
            }
            explainEvents(e3) {
              return {
                down: !!(1 & e3),
                up: !!(2 & e3),
                drag: !!(4 & e3),
                move: !!(8 & e3),
                wheel: !!(16 & e3)
              };
            }
            _equalEvents(e3, t3, i3) {
              if (i3) {
                if (e3.x !== t3.x) return false;
                if (e3.y !== t3.y) return false;
              } else {
                if (e3.col !== t3.col) return false;
                if (e3.row !== t3.row) return false;
              }
              return e3.button === t3.button && e3.action === t3.action && e3.ctrl === t3.ctrl && e3.alt === t3.alt && e3.shift === t3.shift;
            }
          };
          t2.CoreMouseService = _2 = s2([
            r(0, n.IBufferService),
            r(1, n.ICoreService)
          ], _2);
        },
        6975: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.CoreService = void 0;
          const n = i2(1439), o = i2(8460), a = i2(844), h2 = i2(2585), c = Object.freeze({
            insertMode: false
          }), l2 = Object.freeze({
            applicationCursorKeys: false,
            applicationKeypad: false,
            bracketedPasteMode: false,
            origin: false,
            reverseWraparound: false,
            sendFocus: false,
            wraparound: true
          });
          let d = t2.CoreService = class extends a.Disposable {
            constructor(e3, t3, i3) {
              super(), this._bufferService = e3, this._logService = t3, this._optionsService = i3, this.isCursorInitialized = false, this.isCursorHidden = false, this._onData = this.register(new o.EventEmitter()), this.onData = this._onData.event, this._onUserInput = this.register(new o.EventEmitter()), this.onUserInput = this._onUserInput.event, this._onBinary = this.register(new o.EventEmitter()), this.onBinary = this._onBinary.event, this._onRequestScrollToBottom = this.register(new o.EventEmitter()), this.onRequestScrollToBottom = this._onRequestScrollToBottom.event, this.modes = (0, n.clone)(c), this.decPrivateModes = (0, n.clone)(l2);
            }
            reset() {
              this.modes = (0, n.clone)(c), this.decPrivateModes = (0, n.clone)(l2);
            }
            triggerDataEvent(e3, t3 = false) {
              if (this._optionsService.rawOptions.disableStdin) return;
              const i3 = this._bufferService.buffer;
              t3 && this._optionsService.rawOptions.scrollOnUserInput && i3.ybase !== i3.ydisp && this._onRequestScrollToBottom.fire(), t3 && this._onUserInput.fire(), this._logService.debug(`sending data "${e3}"`, () => e3.split("").map((e4) => e4.charCodeAt(0))), this._onData.fire(e3);
            }
            triggerBinaryEvent(e3) {
              this._optionsService.rawOptions.disableStdin || (this._logService.debug(`sending binary "${e3}"`, () => e3.split("").map((e4) => e4.charCodeAt(0))), this._onBinary.fire(e3));
            }
          };
          t2.CoreService = d = s2([
            r(0, h2.IBufferService),
            r(1, h2.ILogService),
            r(2, h2.IOptionsService)
          ], d);
        },
        9074: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.DecorationService = void 0;
          const s2 = i2(8055), r = i2(8460), n = i2(844), o = i2(6106);
          let a = 0, h2 = 0;
          class c extends n.Disposable {
            get decorations() {
              return this._decorations.values();
            }
            constructor() {
              super(), this._decorations = new o.SortedList((e3) => null == e3 ? void 0 : e3.marker.line), this._onDecorationRegistered = this.register(new r.EventEmitter()), this.onDecorationRegistered = this._onDecorationRegistered.event, this._onDecorationRemoved = this.register(new r.EventEmitter()), this.onDecorationRemoved = this._onDecorationRemoved.event, this.register((0, n.toDisposable)(() => this.reset()));
            }
            registerDecoration(e3) {
              if (e3.marker.isDisposed) return;
              const t3 = new l2(e3);
              if (t3) {
                const e4 = t3.marker.onDispose(() => t3.dispose());
                t3.onDispose(() => {
                  t3 && (this._decorations.delete(t3) && this._onDecorationRemoved.fire(t3), e4.dispose());
                }), this._decorations.insert(t3), this._onDecorationRegistered.fire(t3);
              }
              return t3;
            }
            reset() {
              for (const e3 of this._decorations.values()) e3.dispose();
              this._decorations.clear();
            }
            *getDecorationsAtCell(e3, t3, i3) {
              var s3, r2, n2;
              let o2 = 0, a2 = 0;
              for (const h3 of this._decorations.getKeyIterator(t3)) o2 = null !== (s3 = h3.options.x) && void 0 !== s3 ? s3 : 0, a2 = o2 + (null !== (r2 = h3.options.width) && void 0 !== r2 ? r2 : 1), e3 >= o2 && e3 < a2 && (!i3 || (null !== (n2 = h3.options.layer) && void 0 !== n2 ? n2 : "bottom") === i3) && (yield h3);
            }
            forEachDecorationAtCell(e3, t3, i3, s3) {
              this._decorations.forEachByKey(t3, (t4) => {
                var r2, n2, o2;
                a = null !== (r2 = t4.options.x) && void 0 !== r2 ? r2 : 0, h2 = a + (null !== (n2 = t4.options.width) && void 0 !== n2 ? n2 : 1), e3 >= a && e3 < h2 && (!i3 || (null !== (o2 = t4.options.layer) && void 0 !== o2 ? o2 : "bottom") === i3) && s3(t4);
              });
            }
          }
          t2.DecorationService = c;
          class l2 extends n.Disposable {
            get isDisposed() {
              return this._isDisposed;
            }
            get backgroundColorRGB() {
              return null === this._cachedBg && (this.options.backgroundColor ? this._cachedBg = s2.css.toColor(this.options.backgroundColor) : this._cachedBg = void 0), this._cachedBg;
            }
            get foregroundColorRGB() {
              return null === this._cachedFg && (this.options.foregroundColor ? this._cachedFg = s2.css.toColor(this.options.foregroundColor) : this._cachedFg = void 0), this._cachedFg;
            }
            constructor(e3) {
              super(), this.options = e3, this.onRenderEmitter = this.register(new r.EventEmitter()), this.onRender = this.onRenderEmitter.event, this._onDispose = this.register(new r.EventEmitter()), this.onDispose = this._onDispose.event, this._cachedBg = null, this._cachedFg = null, this.marker = e3.marker, this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position && (this.options.overviewRulerOptions.position = "full");
            }
            dispose() {
              this._onDispose.fire(), super.dispose();
            }
          }
        },
        4348: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.InstantiationService = t2.ServiceCollection = void 0;
          const s2 = i2(2585), r = i2(8343);
          class n {
            constructor(...e3) {
              this._entries = /* @__PURE__ */ new Map();
              for (const [t3, i3] of e3) this.set(t3, i3);
            }
            set(e3, t3) {
              const i3 = this._entries.get(e3);
              return this._entries.set(e3, t3), i3;
            }
            forEach(e3) {
              for (const [t3, i3] of this._entries.entries()) e3(t3, i3);
            }
            has(e3) {
              return this._entries.has(e3);
            }
            get(e3) {
              return this._entries.get(e3);
            }
          }
          t2.ServiceCollection = n, t2.InstantiationService = class {
            constructor() {
              this._services = new n(), this._services.set(s2.IInstantiationService, this);
            }
            setService(e3, t3) {
              this._services.set(e3, t3);
            }
            getService(e3) {
              return this._services.get(e3);
            }
            createInstance(e3, ...t3) {
              const i3 = (0, r.getServiceDependencies)(e3).sort((e4, t4) => e4.index - t4.index), s3 = [];
              for (const t4 of i3) {
                const i4 = this._services.get(t4.id);
                if (!i4) throw new Error(`[createInstance] ${e3.name} depends on UNKNOWN service ${t4.id}.`);
                s3.push(i4);
              }
              const n2 = i3.length > 0 ? i3[0].index : t3.length;
              if (t3.length !== n2) throw new Error(`[createInstance] First service dependency of ${e3.name} at position ${n2 + 1} conflicts with ${t3.length} static arguments`);
              return new e3(...[
                ...t3,
                ...s3
              ]);
            }
          };
        },
        7866: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a2 = e3.length - 1; a2 >= 0; a2--) (r2 = e3[a2]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.traceCall = t2.setTraceLogger = t2.LogService = void 0;
          const n = i2(844), o = i2(2585), a = {
            trace: o.LogLevelEnum.TRACE,
            debug: o.LogLevelEnum.DEBUG,
            info: o.LogLevelEnum.INFO,
            warn: o.LogLevelEnum.WARN,
            error: o.LogLevelEnum.ERROR,
            off: o.LogLevelEnum.OFF
          };
          let h2, c = t2.LogService = class extends n.Disposable {
            get logLevel() {
              return this._logLevel;
            }
            constructor(e3) {
              super(), this._optionsService = e3, this._logLevel = o.LogLevelEnum.OFF, this._updateLogLevel(), this.register(this._optionsService.onSpecificOptionChange("logLevel", () => this._updateLogLevel())), h2 = this;
            }
            _updateLogLevel() {
              this._logLevel = a[this._optionsService.rawOptions.logLevel];
            }
            _evalLazyOptionalParams(e3) {
              for (let t3 = 0; t3 < e3.length; t3++) "function" == typeof e3[t3] && (e3[t3] = e3[t3]());
            }
            _log(e3, t3, i3) {
              this._evalLazyOptionalParams(i3), e3.call(console, (this._optionsService.options.logger ? "" : "xterm.js: ") + t3, ...i3);
            }
            trace(e3, ...t3) {
              var i3, s3;
              this._logLevel <= o.LogLevelEnum.TRACE && this._log(null !== (s3 = null === (i3 = this._optionsService.options.logger) || void 0 === i3 ? void 0 : i3.trace.bind(this._optionsService.options.logger)) && void 0 !== s3 ? s3 : console.log, e3, t3);
            }
            debug(e3, ...t3) {
              var i3, s3;
              this._logLevel <= o.LogLevelEnum.DEBUG && this._log(null !== (s3 = null === (i3 = this._optionsService.options.logger) || void 0 === i3 ? void 0 : i3.debug.bind(this._optionsService.options.logger)) && void 0 !== s3 ? s3 : console.log, e3, t3);
            }
            info(e3, ...t3) {
              var i3, s3;
              this._logLevel <= o.LogLevelEnum.INFO && this._log(null !== (s3 = null === (i3 = this._optionsService.options.logger) || void 0 === i3 ? void 0 : i3.info.bind(this._optionsService.options.logger)) && void 0 !== s3 ? s3 : console.info, e3, t3);
            }
            warn(e3, ...t3) {
              var i3, s3;
              this._logLevel <= o.LogLevelEnum.WARN && this._log(null !== (s3 = null === (i3 = this._optionsService.options.logger) || void 0 === i3 ? void 0 : i3.warn.bind(this._optionsService.options.logger)) && void 0 !== s3 ? s3 : console.warn, e3, t3);
            }
            error(e3, ...t3) {
              var i3, s3;
              this._logLevel <= o.LogLevelEnum.ERROR && this._log(null !== (s3 = null === (i3 = this._optionsService.options.logger) || void 0 === i3 ? void 0 : i3.error.bind(this._optionsService.options.logger)) && void 0 !== s3 ? s3 : console.error, e3, t3);
            }
          };
          t2.LogService = c = s2([
            r(0, o.IOptionsService)
          ], c), t2.setTraceLogger = function(e3) {
            h2 = e3;
          }, t2.traceCall = function(e3, t3, i3) {
            if ("function" != typeof i3.value) throw new Error("not supported");
            const s3 = i3.value;
            i3.value = function(...e4) {
              if (h2.logLevel !== o.LogLevelEnum.TRACE) return s3.apply(this, e4);
              h2.trace(`GlyphRenderer#${s3.name}(${e4.map((e5) => JSON.stringify(e5)).join(", ")})`);
              const t4 = s3.apply(this, e4);
              return h2.trace(`GlyphRenderer#${s3.name} return`, t4), t4;
            };
          };
        },
        7302: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.OptionsService = t2.DEFAULT_OPTIONS = void 0;
          const s2 = i2(8460), r = i2(844), n = i2(6114);
          t2.DEFAULT_OPTIONS = {
            cols: 80,
            rows: 24,
            cursorBlink: false,
            cursorStyle: "block",
            cursorWidth: 1,
            cursorInactiveStyle: "outline",
            customGlyphs: true,
            drawBoldTextInBrightColors: true,
            fastScrollModifier: "alt",
            fastScrollSensitivity: 5,
            fontFamily: "courier-new, courier, monospace",
            fontSize: 15,
            fontWeight: "normal",
            fontWeightBold: "bold",
            ignoreBracketedPasteMode: false,
            lineHeight: 1,
            letterSpacing: 0,
            linkHandler: null,
            logLevel: "info",
            logger: null,
            scrollback: 1e3,
            scrollOnUserInput: true,
            scrollSensitivity: 1,
            screenReaderMode: false,
            smoothScrollDuration: 0,
            macOptionIsMeta: false,
            macOptionClickForcesSelection: false,
            minimumContrastRatio: 1,
            disableStdin: false,
            allowProposedApi: false,
            allowTransparency: false,
            tabStopWidth: 8,
            theme: {},
            rightClickSelectsWord: n.isMac,
            windowOptions: {},
            windowsMode: false,
            windowsPty: {},
            wordSeparator: " ()[]{}',\"`",
            altClickMovesCursor: true,
            convertEol: false,
            termName: "xterm",
            cancelEvents: false,
            overviewRulerWidth: 0
          };
          const o = [
            "normal",
            "bold",
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900"
          ];
          class a extends r.Disposable {
            constructor(e3) {
              super(), this._onOptionChange = this.register(new s2.EventEmitter()), this.onOptionChange = this._onOptionChange.event;
              const i3 = Object.assign({}, t2.DEFAULT_OPTIONS);
              for (const t3 in e3) if (t3 in i3) try {
                const s3 = e3[t3];
                i3[t3] = this._sanitizeAndValidateOption(t3, s3);
              } catch (e4) {
                console.error(e4);
              }
              this.rawOptions = i3, this.options = Object.assign({}, i3), this._setupOptions();
            }
            onSpecificOptionChange(e3, t3) {
              return this.onOptionChange((i3) => {
                i3 === e3 && t3(this.rawOptions[e3]);
              });
            }
            onMultipleOptionChange(e3, t3) {
              return this.onOptionChange((i3) => {
                -1 !== e3.indexOf(i3) && t3();
              });
            }
            _setupOptions() {
              const e3 = (e4) => {
                if (!(e4 in t2.DEFAULT_OPTIONS)) throw new Error(`No option with key "${e4}"`);
                return this.rawOptions[e4];
              }, i3 = (e4, i4) => {
                if (!(e4 in t2.DEFAULT_OPTIONS)) throw new Error(`No option with key "${e4}"`);
                i4 = this._sanitizeAndValidateOption(e4, i4), this.rawOptions[e4] !== i4 && (this.rawOptions[e4] = i4, this._onOptionChange.fire(e4));
              };
              for (const t3 in this.rawOptions) {
                const s3 = {
                  get: e3.bind(this, t3),
                  set: i3.bind(this, t3)
                };
                Object.defineProperty(this.options, t3, s3);
              }
            }
            _sanitizeAndValidateOption(e3, i3) {
              switch (e3) {
                case "cursorStyle":
                  if (i3 || (i3 = t2.DEFAULT_OPTIONS[e3]), !/* @__PURE__ */ function(e4) {
                    return "block" === e4 || "underline" === e4 || "bar" === e4;
                  }(i3)) throw new Error(`"${i3}" is not a valid value for ${e3}`);
                  break;
                case "wordSeparator":
                  i3 || (i3 = t2.DEFAULT_OPTIONS[e3]);
                  break;
                case "fontWeight":
                case "fontWeightBold":
                  if ("number" == typeof i3 && 1 <= i3 && i3 <= 1e3) break;
                  i3 = o.includes(i3) ? i3 : t2.DEFAULT_OPTIONS[e3];
                  break;
                case "cursorWidth":
                  i3 = Math.floor(i3);
                case "lineHeight":
                case "tabStopWidth":
                  if (i3 < 1) throw new Error(`${e3} cannot be less than 1, value: ${i3}`);
                  break;
                case "minimumContrastRatio":
                  i3 = Math.max(1, Math.min(21, Math.round(10 * i3) / 10));
                  break;
                case "scrollback":
                  if ((i3 = Math.min(i3, 4294967295)) < 0) throw new Error(`${e3} cannot be less than 0, value: ${i3}`);
                  break;
                case "fastScrollSensitivity":
                case "scrollSensitivity":
                  if (i3 <= 0) throw new Error(`${e3} cannot be less than or equal to 0, value: ${i3}`);
                  break;
                case "rows":
                case "cols":
                  if (!i3 && 0 !== i3) throw new Error(`${e3} must be numeric, value: ${i3}`);
                  break;
                case "windowsPty":
                  i3 = null != i3 ? i3 : {};
              }
              return i3;
            }
          }
          t2.OptionsService = a;
        },
        2660: function(e2, t2, i2) {
          var s2 = this && this.__decorate || function(e3, t3, i3, s3) {
            var r2, n2 = arguments.length, o2 = n2 < 3 ? t3 : null === s3 ? s3 = Object.getOwnPropertyDescriptor(t3, i3) : s3;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o2 = Reflect.decorate(e3, t3, i3, s3);
            else for (var a = e3.length - 1; a >= 0; a--) (r2 = e3[a]) && (o2 = (n2 < 3 ? r2(o2) : n2 > 3 ? r2(t3, i3, o2) : r2(t3, i3)) || o2);
            return n2 > 3 && o2 && Object.defineProperty(t3, i3, o2), o2;
          }, r = this && this.__param || function(e3, t3) {
            return function(i3, s3) {
              t3(i3, s3, e3);
            };
          };
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.OscLinkService = void 0;
          const n = i2(2585);
          let o = t2.OscLinkService = class {
            constructor(e3) {
              this._bufferService = e3, this._nextId = 1, this._entriesWithId = /* @__PURE__ */ new Map(), this._dataByLinkId = /* @__PURE__ */ new Map();
            }
            registerLink(e3) {
              const t3 = this._bufferService.buffer;
              if (void 0 === e3.id) {
                const i4 = t3.addMarker(t3.ybase + t3.y), s4 = {
                  data: e3,
                  id: this._nextId++,
                  lines: [
                    i4
                  ]
                };
                return i4.onDispose(() => this._removeMarkerFromLink(s4, i4)), this._dataByLinkId.set(s4.id, s4), s4.id;
              }
              const i3 = e3, s3 = this._getEntryIdKey(i3), r2 = this._entriesWithId.get(s3);
              if (r2) return this.addLineToLink(r2.id, t3.ybase + t3.y), r2.id;
              const n2 = t3.addMarker(t3.ybase + t3.y), o2 = {
                id: this._nextId++,
                key: this._getEntryIdKey(i3),
                data: i3,
                lines: [
                  n2
                ]
              };
              return n2.onDispose(() => this._removeMarkerFromLink(o2, n2)), this._entriesWithId.set(o2.key, o2), this._dataByLinkId.set(o2.id, o2), o2.id;
            }
            addLineToLink(e3, t3) {
              const i3 = this._dataByLinkId.get(e3);
              if (i3 && i3.lines.every((e4) => e4.line !== t3)) {
                const e4 = this._bufferService.buffer.addMarker(t3);
                i3.lines.push(e4), e4.onDispose(() => this._removeMarkerFromLink(i3, e4));
              }
            }
            getLinkData(e3) {
              var t3;
              return null === (t3 = this._dataByLinkId.get(e3)) || void 0 === t3 ? void 0 : t3.data;
            }
            _getEntryIdKey(e3) {
              return `${e3.id};;${e3.uri}`;
            }
            _removeMarkerFromLink(e3, t3) {
              const i3 = e3.lines.indexOf(t3);
              -1 !== i3 && (e3.lines.splice(i3, 1), 0 === e3.lines.length && (void 0 !== e3.data.id && this._entriesWithId.delete(e3.key), this._dataByLinkId.delete(e3.id)));
            }
          };
          t2.OscLinkService = o = s2([
            r(0, n.IBufferService)
          ], o);
        },
        8343: (e2, t2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.createDecorator = t2.getServiceDependencies = t2.serviceRegistry = void 0;
          const i2 = "di$target", s2 = "di$dependencies";
          t2.serviceRegistry = /* @__PURE__ */ new Map(), t2.getServiceDependencies = function(e3) {
            return e3[s2] || [];
          }, t2.createDecorator = function(e3) {
            if (t2.serviceRegistry.has(e3)) return t2.serviceRegistry.get(e3);
            const r = function(e4, t3, n) {
              if (3 !== arguments.length) throw new Error("@IServiceName-decorator can only be used to decorate a parameter");
              !function(e5, t4, r2) {
                t4[i2] === t4 ? t4[s2].push({
                  id: e5,
                  index: r2
                }) : (t4[s2] = [
                  {
                    id: e5,
                    index: r2
                  }
                ], t4[i2] = t4);
              }(r, e4, n);
            };
            return r.toString = () => e3, t2.serviceRegistry.set(e3, r), r;
          };
        },
        2585: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.IDecorationService = t2.IUnicodeService = t2.IOscLinkService = t2.IOptionsService = t2.ILogService = t2.LogLevelEnum = t2.IInstantiationService = t2.ICharsetService = t2.ICoreService = t2.ICoreMouseService = t2.IBufferService = void 0;
          const s2 = i2(8343);
          var r;
          t2.IBufferService = (0, s2.createDecorator)("BufferService"), t2.ICoreMouseService = (0, s2.createDecorator)("CoreMouseService"), t2.ICoreService = (0, s2.createDecorator)("CoreService"), t2.ICharsetService = (0, s2.createDecorator)("CharsetService"), t2.IInstantiationService = (0, s2.createDecorator)("InstantiationService"), function(e3) {
            e3[e3.TRACE = 0] = "TRACE", e3[e3.DEBUG = 1] = "DEBUG", e3[e3.INFO = 2] = "INFO", e3[e3.WARN = 3] = "WARN", e3[e3.ERROR = 4] = "ERROR", e3[e3.OFF = 5] = "OFF";
          }(r || (t2.LogLevelEnum = r = {})), t2.ILogService = (0, s2.createDecorator)("LogService"), t2.IOptionsService = (0, s2.createDecorator)("OptionsService"), t2.IOscLinkService = (0, s2.createDecorator)("OscLinkService"), t2.IUnicodeService = (0, s2.createDecorator)("UnicodeService"), t2.IDecorationService = (0, s2.createDecorator)("DecorationService");
        },
        1480: (e2, t2, i2) => {
          Object.defineProperty(t2, "__esModule", {
            value: true
          }), t2.UnicodeService = void 0;
          const s2 = i2(8460), r = i2(225);
          t2.UnicodeService = class {
            constructor() {
              this._providers = /* @__PURE__ */ Object.create(null), this._active = "", this._onChange = new s2.EventEmitter(), this.onChange = this._onChange.event;
              const e3 = new r.UnicodeV6();
              this.register(e3), this._active = e3.version, this._activeProvider = e3;
            }
            dispose() {
              this._onChange.dispose();
            }
            get versions() {
              return Object.keys(this._providers);
            }
            get activeVersion() {
              return this._active;
            }
            set activeVersion(e3) {
              if (!this._providers[e3]) throw new Error(`unknown Unicode version "${e3}"`);
              this._active = e3, this._activeProvider = this._providers[e3], this._onChange.fire(e3);
            }
            register(e3) {
              this._providers[e3.version] = e3;
            }
            wcwidth(e3) {
              return this._activeProvider.wcwidth(e3);
            }
            getStringCellWidth(e3) {
              let t3 = 0;
              const i3 = e3.length;
              for (let s3 = 0; s3 < i3; ++s3) {
                let r2 = e3.charCodeAt(s3);
                if (55296 <= r2 && r2 <= 56319) {
                  if (++s3 >= i3) return t3 + this.wcwidth(r2);
                  const n = e3.charCodeAt(s3);
                  56320 <= n && n <= 57343 ? r2 = 1024 * (r2 - 55296) + n - 56320 + 65536 : t3 += this.wcwidth(n);
                }
                t3 += this.wcwidth(r2);
              }
              return t3;
            }
          };
        }
      }, t = {};
      function i(s2) {
        var r = t[s2];
        if (void 0 !== r) return r.exports;
        var n = t[s2] = {
          exports: {}
        };
        return e[s2].call(n.exports, n, n.exports, i), n.exports;
      }
      var s = {};
      return (() => {
        var e2 = s;
        Object.defineProperty(e2, "__esModule", {
          value: true
        }), e2.Terminal = void 0;
        const t2 = i(9042), r = i(3236), n = i(844), o = i(5741), a = i(8285), h2 = i(7975), c = i(7090), l2 = [
          "cols",
          "rows"
        ];
        class d extends n.Disposable {
          constructor(e3) {
            super(), this._core = this.register(new r.Terminal(e3)), this._addonManager = this.register(new o.AddonManager()), this._publicOptions = Object.assign({}, this._core.options);
            const t3 = (e4) => this._core.options[e4], i2 = (e4, t4) => {
              this._checkReadonlyOptions(e4), this._core.options[e4] = t4;
            };
            for (const e4 in this._core.options) {
              const s2 = {
                get: t3.bind(this, e4),
                set: i2.bind(this, e4)
              };
              Object.defineProperty(this._publicOptions, e4, s2);
            }
          }
          _checkReadonlyOptions(e3) {
            if (l2.includes(e3)) throw new Error(`Option "${e3}" can only be set in the constructor`);
          }
          _checkProposedApi() {
            if (!this._core.optionsService.rawOptions.allowProposedApi) throw new Error("You must set the allowProposedApi option to true to use proposed API");
          }
          get onBell() {
            return this._core.onBell;
          }
          get onBinary() {
            return this._core.onBinary;
          }
          get onCursorMove() {
            return this._core.onCursorMove;
          }
          get onData() {
            return this._core.onData;
          }
          get onKey() {
            return this._core.onKey;
          }
          get onLineFeed() {
            return this._core.onLineFeed;
          }
          get onRender() {
            return this._core.onRender;
          }
          get onResize() {
            return this._core.onResize;
          }
          get onScroll() {
            return this._core.onScroll;
          }
          get onSelectionChange() {
            return this._core.onSelectionChange;
          }
          get onTitleChange() {
            return this._core.onTitleChange;
          }
          get onWriteParsed() {
            return this._core.onWriteParsed;
          }
          get element() {
            return this._core.element;
          }
          get parser() {
            return this._parser || (this._parser = new h2.ParserApi(this._core)), this._parser;
          }
          get unicode() {
            return this._checkProposedApi(), new c.UnicodeApi(this._core);
          }
          get textarea() {
            return this._core.textarea;
          }
          get rows() {
            return this._core.rows;
          }
          get cols() {
            return this._core.cols;
          }
          get buffer() {
            return this._buffer || (this._buffer = this.register(new a.BufferNamespaceApi(this._core))), this._buffer;
          }
          get markers() {
            return this._checkProposedApi(), this._core.markers;
          }
          get modes() {
            const e3 = this._core.coreService.decPrivateModes;
            let t3 = "none";
            switch (this._core.coreMouseService.activeProtocol) {
              case "X10":
                t3 = "x10";
                break;
              case "VT200":
                t3 = "vt200";
                break;
              case "DRAG":
                t3 = "drag";
                break;
              case "ANY":
                t3 = "any";
            }
            return {
              applicationCursorKeysMode: e3.applicationCursorKeys,
              applicationKeypadMode: e3.applicationKeypad,
              bracketedPasteMode: e3.bracketedPasteMode,
              insertMode: this._core.coreService.modes.insertMode,
              mouseTrackingMode: t3,
              originMode: e3.origin,
              reverseWraparoundMode: e3.reverseWraparound,
              sendFocusMode: e3.sendFocus,
              wraparoundMode: e3.wraparound
            };
          }
          get options() {
            return this._publicOptions;
          }
          set options(e3) {
            for (const t3 in e3) this._publicOptions[t3] = e3[t3];
          }
          blur() {
            this._core.blur();
          }
          focus() {
            this._core.focus();
          }
          resize(e3, t3) {
            this._verifyIntegers(e3, t3), this._core.resize(e3, t3);
          }
          open(e3) {
            this._core.open(e3);
          }
          attachCustomKeyEventHandler(e3) {
            this._core.attachCustomKeyEventHandler(e3);
          }
          registerLinkProvider(e3) {
            return this._core.registerLinkProvider(e3);
          }
          registerCharacterJoiner(e3) {
            return this._checkProposedApi(), this._core.registerCharacterJoiner(e3);
          }
          deregisterCharacterJoiner(e3) {
            this._checkProposedApi(), this._core.deregisterCharacterJoiner(e3);
          }
          registerMarker(e3 = 0) {
            return this._verifyIntegers(e3), this._core.registerMarker(e3);
          }
          registerDecoration(e3) {
            var t3, i2, s2;
            return this._checkProposedApi(), this._verifyPositiveIntegers(null !== (t3 = e3.x) && void 0 !== t3 ? t3 : 0, null !== (i2 = e3.width) && void 0 !== i2 ? i2 : 0, null !== (s2 = e3.height) && void 0 !== s2 ? s2 : 0), this._core.registerDecoration(e3);
          }
          hasSelection() {
            return this._core.hasSelection();
          }
          select(e3, t3, i2) {
            this._verifyIntegers(e3, t3, i2), this._core.select(e3, t3, i2);
          }
          getSelection() {
            return this._core.getSelection();
          }
          getSelectionPosition() {
            return this._core.getSelectionPosition();
          }
          clearSelection() {
            this._core.clearSelection();
          }
          selectAll() {
            this._core.selectAll();
          }
          selectLines(e3, t3) {
            this._verifyIntegers(e3, t3), this._core.selectLines(e3, t3);
          }
          dispose() {
            super.dispose();
          }
          scrollLines(e3) {
            this._verifyIntegers(e3), this._core.scrollLines(e3);
          }
          scrollPages(e3) {
            this._verifyIntegers(e3), this._core.scrollPages(e3);
          }
          scrollToTop() {
            this._core.scrollToTop();
          }
          scrollToBottom() {
            this._core.scrollToBottom();
          }
          scrollToLine(e3) {
            this._verifyIntegers(e3), this._core.scrollToLine(e3);
          }
          clear() {
            this._core.clear();
          }
          write(e3, t3) {
            this._core.write(e3, t3);
          }
          writeln(e3, t3) {
            this._core.write(e3), this._core.write("\r\n", t3);
          }
          paste(e3) {
            this._core.paste(e3);
          }
          refresh(e3, t3) {
            this._verifyIntegers(e3, t3), this._core.refresh(e3, t3);
          }
          reset() {
            this._core.reset();
          }
          clearTextureAtlas() {
            this._core.clearTextureAtlas();
          }
          loadAddon(e3) {
            this._addonManager.loadAddon(this, e3);
          }
          static get strings() {
            return t2;
          }
          _verifyIntegers(...e3) {
            for (const t3 of e3) if (t3 === 1 / 0 || isNaN(t3) || t3 % 1 != 0) throw new Error("This API only accepts integers");
          }
          _verifyPositiveIntegers(...e3) {
            for (const t3 of e3) if (t3 && (t3 === 1 / 0 || isNaN(t3) || t3 % 1 != 0 || t3 < 0)) throw new Error("This API only accepts positive integers");
          }
        }
        e2.Terminal = d;
      })(), s;
    })());
  })(xterm);
  var xtermExports = xterm.exports;
  var xtermAddonFit = {
    exports: {}
  };
  (function(module, exports) {
    !function(e, t) {
      module.exports = t();
    }(self, () => (() => {
      var e = {};
      return (() => {
        var t = e;
        Object.defineProperty(t, "__esModule", {
          value: true
        }), t.FitAddon = void 0, t.FitAddon = class {
          activate(e2) {
            this._terminal = e2;
          }
          dispose() {
          }
          fit() {
            const e2 = this.proposeDimensions();
            if (!e2 || !this._terminal || isNaN(e2.cols) || isNaN(e2.rows)) return;
            const t2 = this._terminal._core;
            this._terminal.rows === e2.rows && this._terminal.cols === e2.cols || (t2._renderService.clear(), this._terminal.resize(e2.cols, e2.rows));
          }
          proposeDimensions() {
            if (!this._terminal) return;
            if (!this._terminal.element || !this._terminal.element.parentElement) return;
            const e2 = this._terminal._core, t2 = e2._renderService.dimensions;
            if (0 === t2.css.cell.width || 0 === t2.css.cell.height) return;
            const r = 0 === this._terminal.options.scrollback ? 0 : e2.viewport.scrollBarWidth, i = window.getComputedStyle(this._terminal.element.parentElement), o = parseInt(i.getPropertyValue("height")), s = Math.max(0, parseInt(i.getPropertyValue("width"))), n = window.getComputedStyle(this._terminal.element), l2 = o - (parseInt(n.getPropertyValue("padding-top")) + parseInt(n.getPropertyValue("padding-bottom"))), a = s - (parseInt(n.getPropertyValue("padding-right")) + parseInt(n.getPropertyValue("padding-left"))) - r;
            return {
              cols: Math.max(2, Math.floor(a / t2.css.cell.width)),
              rows: Math.max(1, Math.floor(l2 / t2.css.cell.height))
            };
          }
        };
      })(), e;
    })());
  })(xtermAddonFit);
  var xtermAddonFitExports = xtermAddonFit.exports;
  function useShell() {
    const isDarkTheme = useAppState((state) => state.theme === "dark");
    const webContainerInit = useWebContainerState((state) => state.init);
    const { process, fileTreeStateRef, terminal, container, setContainer, setTerminal, setProcess, setContainerInfo, containerInfo, clearSession } = useMainVSLiteAppContext();
    const theme = reactExports.useMemo(() => isDarkTheme ? {
      background: "#181818"
    } : {
      background: "#f3f3f3",
      foreground: "#000",
      cursor: "#666"
    }, [
      isDarkTheme
    ]);
    reactExports.useEffect(() => {
      if (terminal) {
        terminal.options.theme = theme;
        terminal.refresh(0, terminal.rows - 1);
      }
    }, [
      isDarkTheme,
      terminal,
      theme
    ]);
    const start = reactExports.useCallback(async (root2, panel, onServerReady, onFinish) => {
      var _a2;
      try {
        if (container) return;
        logDebug("Booting...");
        const shell = await webContainerInit(() => {
          var _a3;
          clearSession == null ? void 0 : clearSession();
          (_a3 = fileTreeStateRef.current) == null ? void 0 : _a3.refresh([]);
        });
        if (!shell) return;
        await shell.mount({
          ...fileTreeStateRef.current.fileSystemTree || {},
          ...startFiles
        });
        await shell.fs.writeFile(".jshrc", jshRC);
        await shell.spawn("mv", [
          ".jshrc",
          "/home/.jshrc"
        ]);
        const terminal2 = new xtermExports.Terminal({
          convertEol: true,
          theme
        });
        const addon = new xtermAddonFitExports.FitAddon();
        const { cols, rows } = terminal2;
        terminal2.loadAddon(addon);
        let watchReady = false;
        const watch = await shell.spawn("npx", [
          "-y",
          "chokidar-cli",
          ".",
          "-i",
          '"(**/(node_modules|.git|_tmp_)**)"'
        ]);
        watch.output.pipeTo(new WritableStream({
          async write(data) {
            var _a3;
            const type = data.split(":")[0] || "";
            if (watchReady) {
            } else if (data.includes('Watching "."')) {
              logDebug("File watcher ready.");
              watchReady = true;
            } else {
              logDebug("chokidar: ", data);
            }
            switch (type) {
              case "change":
                break;
              case "add":
              case "unlink":
              case "addDir":
              case "unlinkDir":
              default:
                (_a3 = fileTreeStateRef.current) == null ? void 0 : _a3.refresh(data);
            }
          }
        }));
        const jsh = await shell.spawn("jsh", {
          env: {},
          terminal: {
            cols,
            rows
          }
        });
        const init2 = jsh.output.getReader();
        const input = jsh.input.getWriter();
        await init2.read();
        init2.releaseLock();
        terminal2.onData((data) => {
          try {
            input.write(data);
          } catch (error) {
            logWarn("Error writing to shell: ", error);
          }
        });
        jsh.output.pipeTo(new WritableStream({
          write(data) {
            terminal2.write(data);
            if (containerInfo.url && data.includes("On your network:")) {
              onServerReady(containerInfo.url, containerInfo.port || -1, shell.fs);
            }
          }
        }));
        panel.onDidDimensionsChange(() => addon.fit());
        shell.on("server-ready", async (port, url) => {
          logDebug("Server ready: ", port, url);
          setContainerInfo == null ? void 0 : setContainerInfo({
            url,
            port
          });
          if (port === 6006) {
          } else {
            onServerReady(url, port, shell.fs);
          }
        });
        shell.on("error", (error) => {
          logDebug("Error: ", error);
          clearSession == null ? void 0 : clearSession();
        });
        setContainer == null ? void 0 : setContainer(shell);
        setTerminal == null ? void 0 : setTerminal(terminal2);
        setProcess == null ? void 0 : setProcess(jsh);
        if (location.pathname.startsWith("/~/")) {
          const repo = location.pathname.replace("/~/", "");
          const init22 = (_a2 = new URLSearchParams(window.location.search)) == null ? void 0 : _a2.get("init");
          const cmd = init22 ? `ni && ${decodeURIComponent(init22)}` : "ni";
          await input.write(`git clone '${repo}' './' && ${cmd}
`);
        }
        terminal2.clear();
        terminal2.open(root2);
        addon.fit();
        logDebug("Done.");
      } finally {
        onFinish();
      }
    }, [
      clearSession,
      container,
      containerInfo.port,
      containerInfo.url,
      fileTreeStateRef,
      setContainer,
      setContainerInfo,
      setProcess,
      setTerminal,
      theme,
      webContainerInit
    ]);
    return {
      terminal,
      container,
      process,
      start
    };
  }
  function openDock(grid, api) {
    grid.addPanel({
      id: "dock",
      component: "dock",
      params: {
        api
      }
    });
  }
  function openPanes(grid, api) {
    grid.addPanel({
      id: "panes",
      component: "panes",
      params: {
        api
      },
      maximumWidth: 800,
      size: 200,
      position: {
        direction: "left",
        referencePanel: "dock"
      }
    });
  }
  function openTerminal(shell, grid, dock) {
    grid.addPanel({
      id: "terminal",
      component: "terminal",
      params: {
        dock,
        shell
      },
      minimumHeight: 100,
      size: 200,
      position: {
        direction: "below",
        referencePanel: "dock"
      }
    });
  }
  function openFileTree(fs, grid, dock) {
    const filetree = grid.addPanel({
      id: "filetree",
      title: "Explorer",
      component: "filetree",
      params: {
        dock,
        fs
      },
      isExpanded: true
    });
    filetree.headerVisible = false;
  }
  function openUntitledFile(fs, api) {
    const path = "./Untitled";
    api.addPanel({
      id: path,
      title: "Untitled",
      component: "editor",
      params: {
        fs,
        path
      }
    });
  }
  async function openStartFile(file2, fs, api) {
    const path = `./${file2.name}`;
    const contents = await (await file2.getFile()).text();
    await fs.writeFile(path, contents, "utf-8");
    api.addPanel({
      id: path,
      title: file2.name,
      component: "editor",
      params: {
        fs,
        path
      }
    });
  }
  function createPreviewOpener(api) {
    return (serverUrl, serverPort) => {
      if (serverPort === 6006) return;
      const panel = api.getPanel(`preview:${serverPort.toString()}`);
      const title = `Port: ${serverPort}`;
      const url = `${serverUrl}?${Date.now()}`;
      if (panel) {
        panel.api.updateParameters({
          url
        });
        panel.api.setTitle(title);
      } else {
        api.addPanel({
          id: `preview:${serverPort.toString()}`,
          title: `Port: ${serverPort}`,
          component: "preview",
          params: {
            url
          },
          position: {
            direction: "right"
          }
        });
      }
    };
  }
  function createFileOpener(api, fs) {
    return async (path, name) => {
      const contents = await fs.readFile(path, "utf-8");
      const panel = api.getPanel(path);
      if (panel) {
        panel.api.setActive();
      } else {
        api.addPanel({
          id: path,
          title: name,
          component: "editor",
          params: {
            fs,
            path,
            contents
          }
        });
      }
    };
  }
  function createFileRenameHandler(api, fs) {
    return async (path, name) => {
      const contents = await fs.readFile(path);
      await fs.rm(path);
      const dirPath = path.split("/").slice(0, -1).join("/");
      const newPath = `${dirPath}/${name}`;
      await fs.writeFile(newPath, contents || new Uint8Array());
      const panel = api.getPanel(path);
      if (panel) {
        panel.api.updateParameters({
          path: newPath
        });
        panel.api.setTitle(name);
      }
    };
  }
  function useStartup(layoutReady, grid, dock, panes) {
    var _a2;
    const shell = useShell();
    const monaco = Le();
    const launch = useLaunchQueue();
    const initTerm = reactExports.useRef(false);
    const initLaunch = reactExports.useRef(false);
    const initFileTree = reactExports.useRef(false);
    reactExports.useEffect(() => {
      if (initTerm.current || !layoutReady) return;
      if (grid.current && dock.current) {
        initTerm.current = true;
        openTerminal(shell, grid.current, dock.current);
      }
    }, [
      layoutReady,
      shell
    ]);
    reactExports.useEffect(() => {
      var _a3;
      if (initFileTree.current) return;
      if (((_a3 = shell.container) == null ? void 0 : _a3.fs) && panes.current && dock.current) {
        initFileTree.current = true;
        openFileTree(shell.container.fs, panes.current, dock.current);
      }
    }, [
      (_a2 = shell.container) == null ? void 0 : _a2.fs,
      panes.current,
      dock.current
    ]);
    reactExports.useEffect(() => {
      var _a3;
      if (initLaunch.current) return;
      const fs = (_a3 = shell == null ? void 0 : shell.container) == null ? void 0 : _a3.fs;
      const api = dock.current;
      if (!fs || !api || !monaco) return;
      if (launch.files.length > 0) {
        launch.files.forEach((file2) => openStartFile(file2, fs, api));
      } else if (launch.action) {
        switch (launch.action) {
          case "open_folder": {
            openFolder();
            break;
          }
        }
      } else if (location.pathname === "/") {
        openUntitledFile(fs, api);
      }
      initLaunch.current = true;
    }, [
      monaco,
      launch,
      shell
    ]);
    return {
      shell
    };
  }
  function Preview(props) {
    const { previewElementRef } = useMainVSLiteAppContext();
    return jsxRuntimeExports.jsx("iframe", {
      ref: previewElementRef,
      className: "w-full h-full",
      src: props.params.url,
      allow: "cross-origin-isolated",
      credentialless: true
    });
  }
  function Dock() {
    const { t } = useTranslation("components");
    const [loading, setLoading] = reactExports.useState(false);
    const grid = reactExports.useRef();
    const dock = reactExports.useRef();
    const panes = reactExports.useRef();
    const isDarkTheme = useAppState((state) => state.theme === "dark");
    const { container, ternimalElementRef, layoutReady, setLayoutReady } = useMainVSLiteAppContext();
    const { shell } = useStartup(layoutReady, grid, dock, panes);
    const startShell = reactExports.useCallback(async () => {
      var _a2, _b;
      const terminalPanel = (_b = (_a2 = grid == null ? void 0 : grid.current) == null ? void 0 : _a2.getPanel("terminal")) == null ? void 0 : _b.api;
      if (!dock.current || !panes.current || !grid.current || !ternimalElementRef.current || !terminalPanel) {
        return;
      }
      setLoading(true);
      shell.start(ternimalElementRef.current, terminalPanel, createPreviewOpener(dock.current), () => {
        setLoading(false);
      });
    }, [
      dock,
      panes,
      grid,
      shell,
      ternimalElementRef
    ]);
    return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
      children: [
        jsxRuntimeExports.jsx(GridviewReact, {
          className: isDarkTheme ? "dockview-theme-dark" : "dockview-theme-light",
          components: gridComponents,
          proportionalLayout: false,
          onReady: (event) => {
            grid.current = event.api;
            openDock(event.api, dock);
            openPanes(event.api, panes);
            setLayoutReady == null ? void 0 : setLayoutReady(true);
          }
        }),
        !container ? jsxRuntimeExports.jsx("div", {
          className: "absolute w-full h-full flex justify-center items-center z-40 bg-background top-0 left-0",
          children: jsxRuntimeExports.jsx(LoadingButton, {
            onClick: startShell,
            loading,
            children: t("vslite.load_app_container")
          })
        }) : void 0
      ]
    });
  }
  const dockComponents = {
    editor: (props) => jsxRuntimeExports.jsx(Editor, {
      fs: props.params.fs,
      path: props.params.path
    }),
    preview: (props) => {
      return jsxRuntimeExports.jsx(Preview, {
        ...props
      });
    }
  };
  const gridComponents = {
    dock: (props) => jsxRuntimeExports.jsx(DockviewReact, {
      watermarkComponent: Watermark,
      components: dockComponents,
      onReady: (event) => {
        props.params.api.current = event.api;
      }
    }),
    panes: (props) => jsxRuntimeExports.jsx(PaneviewReact, {
      components: paneComponents,
      onReady: (event) => {
        props.params.api.current = event.api;
      }
    }),
    terminal: (props) => jsxRuntimeExports.jsx(Terminal, {
      shell: props.params.shell,
      panelApi: props.api
    })
  };
  const paneComponents = {
    filetree: (props) => jsxRuntimeExports.jsx(FileTree, {
      fs: props.params.fs,
      onRenameItem: createFileRenameHandler(props.params.dock, props.params.fs),
      onTriggerItem: createFileOpener(props.params.dock, props.params.fs)
    })
  };
  VSLiteApp = reactExports.memo(({ fileSystemTree, onUpdateFileContent }) => {
    return jsxRuntimeExports.jsx(MainVSLiteAppProvider, {
      fileSystemTree,
      onUpdateFileContent,
      children: jsxRuntimeExports.jsx(Dock, {})
    });
  });
  injectStyles();
});
export {
  __tla,
  VSLiteApp as default
};
